# Godot Engine Documentation in Korean
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
#
# Alegruz <alegruz@khu.ac.kr>, 2018.
# Brian M. Son <sonmg00@gmail.com>, 2018.
# bulldak <jun98518@naver.com>, 2018.
# Ch <ccwpc@hanmail.net>, 2018.
# Eunwoo Lee <eunwoo123@gmail.com>, 2018.
# geun-tak Jeong <beroberos@gmail.com>, 2018.
# Hyun Cho (C.H) <uncaose@gmail.com>, 2018.
# Jesse Y. Cho <jesse.cho@protonmail.ch>, 2018.
# Kuiprux <kuiprux@gmail.com>, 2018.
# LeeJiWon <minie0324@naver.com>, 2018.
# leesang0612 <onessidotti@gmail.com>, 2018.
# lptprjh <lptprjh@gmail.com>, 2018.
# MJ Kim <mjnkim@protonmail.com>, 2018.
# Octopus ET <sjmoon2001@gmail.com>, 2019.
# pgyage3263 <pgyage3263@naver.com>, 2018.
# pjh37 <jjjj1352@naver.com>, 2018.
# Sun Kim <perplexingsun@gmail.com>, 2018.
# Taehun Yun <yooontehoon@naver.com>, 2018.
# Yeonho Jang <siabard@gmail.com>, 2018.
# 한상철 <hanburn@naver.com>, 2018.
# 이용재 <lyj7339@gmail.com>, 2018.
# 박한얼 <volzhs@gmail.com>, 2018.
# 송태섭 <xotjq237@gmail.com>, 2018-2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: https://github.com/godotengine/godot-docs-l10n\n"
"POT-Creation-Date: 2019-01-20 10:29+0100\n"
"PO-Revision-Date: 2019-01-20 08:53+0000\n"
"Last-Translator: 송태섭 <xotjq237@gmail.com>\n"
"Language-Team: Korean <https://hosted.weblate.org/projects/godot-engine/"
"godot-docs/ko/>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 3.4-dev\n"

#: ../../docs/index.rst:2
msgid "Godot Docs – *master* branch"
msgstr "Godot 문서 – *master* 분기"

#: ../../docs/index.rst:6
msgid ""
"Godot's documentation is available in various languages and versions. Expand "
"the \"Read the Docs\" panel at the bottom of the sidebar to see the list."
msgstr ""

#: ../../docs/index.rst:10
#, fuzzy
msgid ""
"This is the documentation for the development (master) branch. Looking for "
"the documentation of the current **stable** branch? `Have a look here "
"<https://docs.godotengine.org/en/stable>`_."
msgstr ""
"이 문서는 불안정한(master) 분기입니다. **안정한** 분기의 문서를 찾으시나요? `"
"여기로 가세요 <http://docs.godotengine.org/en/stable>`_."

#: ../../docs/index.rst:16
msgid ""
"This documentation is translated from the `original English one <https://"
"docs.godotengine.org/en/latest>`_ by community members on `Weblate <https://"
"hosted.weblate.org/projects/godot-engine/godot-docs>`_."
msgstr ""

#: ../../docs/index.rst:20
msgid ""
"Depending on the translation effort's completion level, you may find "
"paragraphs or whole pages which are still in English. You can help the "
"community by providing new translations or reviewing existing ones on "
"Weblate."
msgstr ""

#: ../../docs/index.rst:25
msgid ""
"For the time being, localized translations are only available for the "
"\"latest\" (development) branch, but should be suitable to learn how to use "
"stable Godot releases nevertheless."
msgstr ""

#: ../../docs/index.rst:29
msgid ""
"Welcome to the official documentation of Godot Engine, the free and open "
"source community-driven 2D and 3D game engine! If you are new to this "
"documentation, we recommend that you read the :ref:`introduction page "
"<doc_about_intro>` to get an overview of what this documentation has to "
"offer."
msgstr ""
"커뮤니티 기반으로 개발되는 자유 오픈소스 2D & 3D 게임 엔진 Godot 엔진의 공식 "
"문서에 오신 것을 환영합니다! 처음 오셨다면 :ref:`소개 페이지"
"<doc_about_intro>`\\ 를 읽어보시고 저희 문서가 전반적으로 무엇을 제공하는지 "
"파악해보시기를 권장해드립니다."

#: ../../docs/index.rst:34
msgid ""
"The table of contents below and in the sidebar should let you easily access "
"the documentation for your topic of interest. You can also use the search "
"function in the top left corner."
msgstr ""
"본문 아래 및 좌측 사이드 바의 목차로부터 원하시는 문서를 열람하실 수 있습니"
"다. 또한 좌측 상단의 검색창에서 검색도 가능합니다."

#: ../../docs/index.rst:38
msgid ""
"Godot Engine is an open source project developed by a community of "
"volunteers. The documentation team can always use your feedback and help to "
"improve the tutorials and class reference. If you don't understand "
"something, or cannot find what you are looking for in the docs, help us make "
"the documentation better by letting us know!"
msgstr ""
"Godot 엔진은 사용자들에 의해 자발적으로 개발되는 오픈 소스 프로젝트입니다. 문"
"서화 팀은 튜토리얼이나 클래스 참조 등을 향상시키기 위해 여러분의 의견을 받고 "
"있습니다. 만약 튜토리얼 중에 이해가 가지 않는 부분이 있거나, 설명이 애매하거"
"나 부족한 부분이 있다면 저희에게 알려주셔서 더 나은 문서를 만들 수 있게 도와"
"주세요!"

#: ../../docs/index.rst:45
msgid ""
"Submit an issue or pull request on the `GitHub repository <https://github."
"com/godotengine/godot-docs/issues>`_, help us `translate the documentation "
"<https://hosted.weblate.org/engage/godot-engine/>`_ into your language, or "
"talk to us on either the ``#documentation`` channel on `Discord <https://"
"discord.gg/zH7NUgz>`_, or the ``#godotengine-doc`` channel on `irc.freenode."
"net <http://webchat.freenode.net/?channels=#godotengine-doc>`_!"
msgstr ""
"`GitHub 저장소 <https://github.com/godotengine/godot-docs/issues>`_\\ 에서 이"
"슈를 제출하고 pull request를 하거나, `문서 현지화 <https://hosted.weblate."
"org/engage/godot-engine/>`_\\ 를 돕거나, `Discord <https://discord.gg/"
"zH7NUgz>`_\\ 의 ``#documentation``\\ 이나 `irc.freenode.net <http://webchat."
"freenode.net/?channels=#godotengine-doc>`_\\ 의 ``#godotengine-doc``\\ 에서 "
"저희와 함께 논의를 할 수도 있습니다!"

#: ../../docs/index.rst:59
msgid ""
"The main documentation for the site is organized into the following sections:"
msgstr "이 사이트의 주요 문서는 다음과 같이 구성되어 있습니다:"

#: ../../docs/index.rst:61 ../../docs/community/resources.rst:9
msgid "General"
msgstr "일반"

#: ../../docs/index.rst:69
msgid "Getting started"
msgstr "시작하기"

#: ../../docs/index.rst:80 ../../docs/community/tutorials.rst:4
msgid "Tutorials"
msgstr "튜토리얼"

#: ../../docs/index.rst:106
msgid "Development"
msgstr "개발"

#: ../../docs/index.rst:115
msgid "Creating Content"
msgstr "콘텐츠 만들기"

#: ../../docs/index.rst:123 ../../docs/community/index.rst:2
msgid "Community"
msgstr "커뮤니티"

#: ../../docs/about/index.rst:2
#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:7
#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:7
#: ../../docs/development/cpp/variant_class.rst:7
msgid "About"
msgstr "정보"

#: ../../docs/about/introduction.rst:4
#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:7
#: ../../docs/getting_started/step_by_step/instancing.rst:7
#: ../../docs/getting_started/step_by_step/scripting.rst:7
#: ../../docs/getting_started/step_by_step/signals.rst:7
#: ../../docs/getting_started/step_by_step/animations.rst:7
#: ../../docs/getting_started/step_by_step/filesystem.rst:7
#: ../../docs/getting_started/step_by_step/scene_tree.rst:7
#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:7
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:7
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:4
#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:7
#: ../../docs/getting_started/workflow/export/feature_tags.rst:7
#: ../../docs/tutorials/2d/2d_transforms.rst:7
#: ../../docs/tutorials/2d/using_tilemaps.rst:7
#: ../../docs/tutorials/2d/2d_movement.rst:7
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:7
#: ../../docs/tutorials/2d/2d_meshes.rst:7
#: ../../docs/tutorials/3d/using_transforms.rst:7
#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:7
#: ../../docs/tutorials/3d/spatial_material.rst:7
#: ../../docs/tutorials/3d/lights_and_shadows.rst:7
#: ../../docs/tutorials/3d/reflection_probes.rst:7
#: ../../docs/tutorials/3d/gi_probes.rst:7
#: ../../docs/tutorials/3d/baked_lightmaps.rst:7
#: ../../docs/tutorials/3d/high_dynamic_range.rst:7
#: ../../docs/tutorials/3d/using_gridmaps.rst:7
#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:7
#: ../../docs/tutorials/audio/audio_buses.rst:7
#: ../../docs/tutorials/audio/audio_streams.rst:7
#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:7
#: ../../docs/tutorials/physics/ray-casting.rst:7
#: ../../docs/tutorials/physics/ragdoll_system.rst:7
#: ../../docs/tutorials/physics/kinematic_character_2d.rst:7
#: ../../docs/tutorials/math/vector_math.rst:7
#: ../../docs/tutorials/math/matrices_and_transforms.rst:7
#: ../../docs/tutorials/animation/2d_skeletons.rst:7
#: ../../docs/tutorials/animation/animation_tree.rst:7
#: ../../docs/tutorials/io/saving_games.rst:7
#: ../../docs/tutorials/i18n/internationalizing_games.rst:7
#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:7
#: ../../docs/tutorials/viewports/viewports.rst:7
#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:7
#: ../../docs/tutorials/viewports/custom_postprocessing.rst:7
#: ../../docs/tutorials/shading/shading_reference/shaders.rst:7
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:7
#: ../../docs/tutorials/shading/shader_materials.rst:7
#: ../../docs/tutorials/shading/screen-reading_shaders.rst:7
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:7
#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:7
#: ../../docs/tutorials/shading/advanced_postprocessing.rst:7
#: ../../docs/tutorials/networking/ssl_certificates.rst:7
#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:7
#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:7
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:7
#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:7
#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:7
#: ../../docs/tutorials/misc/binary_serialization_api.rst:7
#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:7
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:7
#: ../../docs/development/cpp/custom_audiostreams.rst:7
#: ../../docs/development/cpp/custom_godot_servers.rst:7
#: ../../docs/development/cpp/creating_android_modules.rst:7
msgid "Introduction"
msgstr "소개"

#: ../../docs/about/introduction.rst:11
msgid ""
"Welcome to the official documentation of Godot Engine, the free and open "
"source community-driven 2D and 3D game engine! Behind this mouthful, you "
"will find a powerful yet user-friendly tool that you can use to develop any "
"kind of game, for any platform and with no usage restriction whatsoever."
msgstr ""
"무료이자 오픈 소스로 커뮤니티가 만들어가는 2D 및 3D 게임 엔진 Godot 엔진의 공"
"식 문서에 어서 오세요! 풀어 말하자면 Godot 엔진은 아무런 사용 제한 없이 모든 "
"플랫폼으로 어떤 종류의 게임이든 개발할 수 있는 강력하면서도 사용자 친화적인 "
"도구입니다."

#: ../../docs/about/introduction.rst:16
msgid ""
"This page gives a broad presentation of the engine and of the contents of "
"this documentation, so that you know where to start if you are a beginner or "
"where to look if you need info on a specific feature."
msgstr ""
"이 페이지는 엔진과 이 문서 내용에 관해 소개함으로써, 초보자라면 출발점을 찾"
"을 수 있고, 그렇지 않아도 특정 기능에 대한 정보를 찾을 수 있습니다."

#: ../../docs/about/introduction.rst:21
msgid "About Godot Engine"
msgstr "Godot 엔진에 대해"

#: ../../docs/about/introduction.rst:23
msgid ""
"A game engine is a complex tool, and it is therefore difficult to present "
"Godot in a few words. Here's a quick synopsis, which you are free to reuse "
"if you need a quick writeup about Godot Engine."
msgstr ""
"게임 엔진은 복잡한 도구입니다, 고로 Godot를 단 몇 마디로 표현하기는 어렵습니"
"다. 간단한 소개글을 드리겠습니다, Godot 엔진에 대해 간단한 기삿거리를 적고 싶"
"다면 이걸 사용해 보세요."

#: ../../docs/about/introduction.rst:27
msgid ""
"Godot Engine is a feature-packed, cross-platform game engine to create 2D "
"and 3D games from a unified interface. It provides a comprehensive set of "
"common tools, so users can focus on making games without having to reinvent "
"the wheel. Games can be exported in one click to a number of platforms, "
"including the major desktop platforms (Linux, macOS, Windows) as well as "
"mobile (Android, iOS) and web-based (HTML5) platforms."
msgstr ""
"Godot 엔진은 통일된 하나의 인터페이스 안에서 2D 및 3D 게임을 만들 수 있는, 기"
"능이 포장된 크로스 플랫폼 게임 엔진입니다. 이 엔진은 사용자가 바퀴를 재 발명"
"할 필요 없이 게임을 만드는 데 집중할 수 있도록 종합적인 도구들을 제공합니다. "
"만든 게임은 클릭 한 번으로 주요 데스크톱 플랫폼(리눅스, macOS, 윈도우)은 물"
"론 모바일(안드로이드, iOS) 및 웹 기반(HTML 5) 플랫폼으로 내보낼 수 있습니다."

#: ../../docs/about/introduction.rst:34
msgid ""
"Godot is completely free and open source under the permissive MIT license. "
"No strings attached, no royalties, nothing. Users' games are theirs, down to "
"the last line of engine code. Godot's development is fully independent and "
"community-driven, empowering users to help shape their engine to match their "
"expectations. It is supported by the `Software Freedom Conservancy <https://"
"sfconservancy.org>`_ not-for-profit."
msgstr ""
"Godot는 완전히 무료이고 아주 관대한 MIT 라이선스로 배포되는 오픈 소스입니다. "
"다른 조건도 없고 로열티 요구도 없습니다. 엔진 사용자가 만든 게임은 엔진 코드"
"의 마지막 줄까지 사용자의 것입니다. Godot의 개발은 독립적이고 커뮤니티가 주도"
"하기 때문에 사용자들 스스로 원하는 대로 엔진의 발전을 도울 수 있습니다. Godot"
"는 `소프트웨어 자유 단체 <https://sfconservancy.org>`_\\ 로 부터 비영리 운영 "
"지원을 받습니다."

#: ../../docs/about/introduction.rst:41
msgid ""
"For a more in-depth view of the engine, you are encouraged to read this "
"documentation further, especially the :ref:`Step by step <toc-learn-"
"step_by_step>` tutorial."
msgstr ""
"이 엔진을 더 깊이 알고 싶다면 이 문서의 다른 부분을, 특히 :ref:`단계별 <toc-"
"learn-step_by_step>` 튜토리얼을 읽어보기 바랍니다."

#: ../../docs/about/introduction.rst:46
msgid "About the documentation"
msgstr "문서에 대하여"

#: ../../docs/about/introduction.rst:48
msgid ""
"This documentation is continuously written, corrected, edited, and revamped "
"by members of the Godot Engine community. It is edited via text files in the "
"`reStructuredText <http://www.sphinx-doc.org/en/stable/rest.html>`_ markup "
"language and then compiled into a static website/offline document using the "
"open source `Sphinx <http://www.sphinx-doc.org>`_ and `ReadTheDocs <https://"
"readthedocs.org/>`_ tools."
msgstr ""
"이 문서는 Godot 엔진 커뮤니티 멤버들이 지속적으로 쓰고, 교정하고, 편집하고, "
"개정하고 있습니다. 문서는 `reStructuredText <http://www.sphinx-doc.org/en/"
"stable/rest.html>`_ 마크업 언어로 된 텍스트 파일로 편집한 뒤 오픈 소스인 "
"`Sphinx <http://www.sphinx-doc.org>`_\\ 와 `ReadTheDocs <https://readthedocs."
"org/>`_\\ 를 사용해 정적 웹사이트/오프라인 문서로 컴파일됩니다."

#: ../../docs/about/introduction.rst:55
msgid ""
"You can contribute to Godot's documentation by opening issue tickets or "
"sending patches via pull requests on its GitHub `source repository <https://"
"github.com/godotengine/godot-docs>`_, or translating it into your language "
"on `Hosted Weblate <https://hosted.weblate.org/projects/godot-engine/godot-"
"docs/>`_."
msgstr ""
"Godot 문서에 기여하려면 GitHub `소스 저장소 <https://github.com/godotengine/"
"godot-docs>`_\\ 에서 이슈를 열거나 Pull requests로 패치를 보내거나, `Hosted "
"Weblate <https://hosted.weblate.org/projects/godot-engine/godot-docs/>`_\\ 에"
"서 자국의 언어로 번역할 수 있습니다."

#: ../../docs/about/introduction.rst:61
msgid ""
"All the contents are under the permissive Creative Commons Attribution 3.0 "
"(`CC-BY 3.0 <https://creativecommons.org/licenses/by/3.0/>`_) license, with "
"attribution to \"Juan Linietsky, Ariel Manzur and the Godot Engine community"
"\"."
msgstr ""
"문서의 모든 내용은 크리에이티브 커먼스 저작자 표시 3.0 (`CC-BY 3.0 <https://"
"creativecommons.org/licenses/by/3.0/>`_) 라이선스로 사용할 수 있고, 저작자 표"
"시는 \"Juan Linietsky, Ariel Manzur, Godot Engine 커뮤니티\"로 하면 됩니다."

#: ../../docs/about/introduction.rst:66
msgid "Organization of the documentation"
msgstr "문서의 구조"

#: ../../docs/about/introduction.rst:68
msgid ""
"This documentation is organised in five sections with an impressively "
"unbalanced distribution of contents – but the way it is split up should be "
"relatively intuitive:"
msgstr ""
"이 문서는 크게 다섯 개 섹션으로 구성되어 있고 섹션마다 분량이 크게 다르지만 "
"구분 자체는 꽤 직관적으로 되어 있습니다:"

#: ../../docs/about/introduction.rst:72
msgid ""
"The :ref:`sec-general` section contains this introduction as well as "
"information about the engine, its history, its licensing, authors, etc. It "
"also contains the :ref:`doc_faq`."
msgstr ""
":ref:`sec-general` 섹션은 이 소개문과 엔진의 역사, 라이선스, 제작자 등 기본적"
"인 정보를 담고 있습니다. :ref:`doc_faq` 도 여기 속합니다."

#: ../../docs/about/introduction.rst:75
msgid ""
"The :ref:`sec-learn` section is the main *raison d'être* of this "
"documentation, as it contains all the necessary information on using the "
"engine to make games. It starts with the :ref:`Step by step <toc-learn-"
"step_by_step>` tutorial which should be the entry point for all new users."
msgstr ""
":ref:`sec-learn` 섹션은 이 문서의 주된 *존재 이유*\\ 로 이 엔진을 사용해 게임"
"을 만드는 데 필요한 모든 정보를 담고 있습니다. 이 섹션을 시작하는 :ref:`단계"
"별 <toc-learn-step_by_step>` 튜토리얼은 새로운 사용자들에게 입문 지점이 되어"
"줍니다."

#: ../../docs/about/introduction.rst:80
msgid ""
"The :ref:`sec-tutorials` section can be read as needed, in any order. It "
"contains feature-specific tutorials and documentation."
msgstr ""
"반면 :ref:`sec-tutorials` 섹션은 순서에 상관없이 필요에 맞춰 읽을 수 있습니"
"다. 이 섹션에는 특정 기능 관련 튜토리얼과 문서가 있습니다."

#: ../../docs/about/introduction.rst:82
msgid ""
"The :ref:`sec-devel` section is intended for advanced users and contributors "
"to the engine development, with information on compiling the engine, "
"developing C++ modules or editor plugins."
msgstr ""
":ref:`sec-devel` 섹션은 고급 사용자와 엔진 개발 기여자들을 위한 섹션으로 엔"
"진 컴파일, C++ 모듈 혹은 에디터 플러그인 개발에 대한 정보를 담고 있습니다."

#: ../../docs/about/introduction.rst:85
msgid ""
"The :ref:`sec-community` section gives information related to contributing "
"to engine development and the life of its community, e.g. how to report "
"bugs, help with the documentation, etc. It also points to various community "
"channels like IRC and Discord and contains a list of recommended third-party "
"tutorials outside of this documentation."
msgstr ""
":ref:`sec-community`\\ 는 엔진 개발과 커뮤니티 기여에 관련된 정보를 제공합니"
"다, 예를 들어 버그 제보하는 방법, 문서에 기여하는 방법 등이 있습니다. 또 IRC"
"와 Discord 등 여러 커뮤니티 채널이나 이 문서 밖에 있는 제 3자의 튜토리얼 추"
"천 목록도 있습니다."

#: ../../docs/about/introduction.rst:90
msgid ""
"Finally, the :ref:`sec-class-ref` is the documentation of the Godot API, "
"which is also available directly within the engine's script editor. It is "
"generated automatically from a file in the main source repository, therefore "
"the generated files of the documentation are not meant to be modified. See :"
"ref:`doc_updating_the_class_reference` for details."
msgstr ""
"마지막으로 :ref:`sec-class-ref`\\ 는 Godot API 문서로 엔진의 스크립트 에디터"
"에서도 바로 읽어볼 수 있습니다. 이 섹션은 엔진 소스 저장소에 있는 파일에서 자"
"동으로 생성되기 때문에 생성된 문서 파일은 직접 수정하지 않습니다. 자세한 내용"
"은 :ref:`doc_updating_the_class_reference`\\ 을 확인하세요."

#: ../../docs/about/introduction.rst:96
msgid ""
"In addition to this documentation you may also want to take a look at the "
"various `Godot demo projects <https://github.com/godotengine/godot-demo-"
"projects>`_."
msgstr ""
"이 문서 외에 여러가지 `Godot 데모 프로젝트들 <https://github.com/godotengine/"
"godot-demo-projects>`_\\ 도 살펴보면 좋습니다."

#: ../../docs/about/introduction.rst:99
msgid "Have fun reading and making games with Godot Engine!"
msgstr "재미있게 읽으시고 Godot 엔진으로 즐겁게 게임 개발하세요!"

#: ../../docs/about/faq.rst:4
#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:29
msgid "Frequently asked questions"
msgstr "자주 묻는 질문들(FAQ)"

#: ../../docs/about/faq.rst:7
msgid ""
"What can I do with Godot? How much does it cost? What are the license terms?"
msgstr ""
"Godot로 무엇을 할 수 있나요? 가격은 얼마인가요? 라이선스 조항은 어떻게 되나"
"요?"

#: ../../docs/about/faq.rst:9
msgid ""
"Godot is `Free and Open-Source Software <https://en.wikipedia.org/wiki/"
"Free_and_open-source_software>`_ available under the `OSI-approved <https://"
"opensource.org/licenses/MIT>`_ MIT license. This means it is free as in "
"\"free speech\" as well as in \"free beer.\""
msgstr ""
"Godot는 `OSI가 인정한 <https://opensource.org/licenses/MIT>`_  MIT 라이선스"
"로 사용할 수 있는 `무료이자 오픈 소스 소프트웨어 <https://en.wikipedia.org/"
"wiki/Free_and_open-source_software>`_ 입니다. 이것은 \"무료 맥주\" 만큼 뿐만 "
"아니라 \"자유 연설\" 만큼의 자유를 의미합니다."

#: ../../docs/about/faq.rst:11
msgid "In short:"
msgstr "간단히 말해서:"

#: ../../docs/about/faq.rst:13
msgid ""
"You are free to download and use Godot for any purpose, personal, non-"
"profit, commercial, or otherwise;"
msgstr ""
"개인적으로, 비영리로, 사업으로, 혹은 그 외 어떤 목적이든 당신은 무료로 Godot"
"를 다운로드하실 수 있습니다;"

#: ../../docs/about/faq.rst:14
msgid ""
"You are free to modify, distribute, redistribute, and remix Godot to your "
"heart's content, for any reason, both non-commercially and commercially."
msgstr ""
"Godot를 마음대로 자유롭게 수정하고, 배포하고, 재배포하고 개조하실 수 있습니"
"다, 그 이유가 비상업적이든지 상업적이든지 말이죠."

#: ../../docs/about/faq.rst:16
msgid ""
"All the contents of this accompanying documentation are published under the "
"permissive Creative Commons Attribution 3.0 (`CC-BY 3.0 <https://"
"creativecommons.org/licenses/by/3.0/>`_) license, with attribution to \"Juan "
"Linietsky, Ariel Manzur and the Godot Engine community.\""
msgstr ""
"이 문서의 모든 내용은 크리에이티브 커먼스 저작자 표시 3.0 (`CC-BY 3.0 "
"<https://creativecommons.org/licenses/by/3.0/>`_) 라이선스 하에, \"Juan "
"Linietsky, Ariel Manzur, Godot Engine 커뮤니티\" 에 속합니다."

#: ../../docs/about/faq.rst:20
msgid ""
"Logos and icons are generally under the same Creative Commons license. Note "
"that some third-party libraries included with Godot's source code may have "
"different licenses."
msgstr ""
"로고와 아이콘들은 일반적으로 동일한 크리에이티브 커먼스 라이선스로 사용할 수 "
"있습니다. Godot의 소스 코드에 포함된 일부 타사 라이브러리는 라이선스가 다를 "
"수 있으니 유의하세요."

#: ../../docs/about/faq.rst:24
msgid ""
"For full details, look at the `COPYRIGHT.txt <https://github.com/godotengine/"
"godot/blob/master/COPYRIGHT.txt>`_ as well as the `LICENSE.txt <https://"
"github.com/godotengine/godot/blob/master/LICENSE.txt>`_ and `LOGO_LICENSE."
"txt <https://github.com/godotengine/godot/blob/master/LOGO_LICENSE.md>`_ "
"files in the Godot repository."
msgstr ""
"전체 세부사항은 Godot 저장소에 있는 `COPYRIGHT.txt <https://github.com/"
"godotengine/godot/blob/master/COPYRIGHT.txt>`_\\ 와 `LICENSE.txt <https://"
"github.com/godotengine/godot/blob/master/LICENSE.txt>`_, `LOGO_LICENSE.txt "
"<https://github.com/godotengine/godot/blob/master/LOGO_LICENSE.md>`_ 파일을 "
"참고하세요."

#: ../../docs/about/faq.rst:28
msgid ""
"Also, see `the license page on the Godot website <https://godotengine.org/"
"license>`_."
msgstr ""
"`Godot 웹사이트의 라이선스 페이지 <https://godotengine.org/license>`_\\ 도 참"
"고하세요."

#: ../../docs/about/faq.rst:31
msgid "Which platforms are supported by Godot?"
msgstr "Godot는 어떤 플랫폼을 지원하나요?"

#: ../../docs/about/faq.rst:33
msgid "**For the editor:**"
msgstr "**에디터의 경우:**"

#: ../../docs/about/faq.rst:35
msgid "Windows"
msgstr "윈도우"

#: ../../docs/about/faq.rst:36 ../../docs/about/faq.rst:42
msgid "macOS"
msgstr "macOS"

#: ../../docs/about/faq.rst:37 ../../docs/about/faq.rst:43
msgid "X11 (Linux, \\*BSD)"
msgstr "X11 (리눅스, \\*BSD)"

#: ../../docs/about/faq.rst:39
msgid "**For exporting your games:**"
msgstr "**내보내는 게임들의 경우:**"

#: ../../docs/about/faq.rst:41
msgid "Windows (and UWP)"
msgstr "윈도우 (그리고 UWP)"

#: ../../docs/about/faq.rst:44
#: ../../docs/getting_started/step_by_step/exporting.rst:185
msgid "Android"
msgstr "안드로이드"

#: ../../docs/about/faq.rst:45
#: ../../docs/getting_started/step_by_step/exporting.rst:237
msgid "iOS"
msgstr "iOS"

#: ../../docs/about/faq.rst:46
msgid "Web"
msgstr "웹"

#: ../../docs/about/faq.rst:48
msgid ""
"Both 32- and 64-bit binaries are supported where it makes sense, with 64 "
"being the default."
msgstr "64비트가 기본이지만 32비트와 64비트 모두 지원합니다."

#: ../../docs/about/faq.rst:51
msgid ""
"Some users also report building and using Godot successfully on ARM-based "
"systems with Linux, like the Raspberry Pi."
msgstr ""
"또한 Raspberry Pi같은, 리눅스의 ARM 기반 시스템에서도 Godot를 성공적으로 사용"
"했다는 일부 사용자들의 보고가 있습니다."

#: ../../docs/about/faq.rst:54
msgid ""
"Additionally, there is some unofficial third-party work being done on "
"building for some consoles. However, none of this is included in the default "
"build scripts or export templates at this time."
msgstr ""
"추가적으로, 콘솔 용으로 만들기 위한 비공식적인 외부 작업이 있습니다. 하지만, "
"아직 기본 빌드 스크립트나 내보내기 템플릿으로 포함된 것은 없습니다."

#: ../../docs/about/faq.rst:58
msgid ""
"For more on this, see the sections on :ref:`exporting <toc-learn-workflow-"
"export>` and :ref:`compiling Godot yourself <toc-devel-compiling>`."
msgstr ""
"더 자세한 정보는 :ref:`내보내기 <toc-learn-workflow-export>`\\ 와 :ref:`Godot"
"를 직접 컴파일하기 <toc-devel-compiling>`\\ 를 다루는 섹션을 참고하세요."

#: ../../docs/about/faq.rst:62
msgid "Which programming languages are supported in Godot?"
msgstr "Godot는 어떤 프로그래밍 언어를 지원하나요?"

#: ../../docs/about/faq.rst:64
msgid ""
"The officially supported languages for Godot are GDScript, Visual Scripting, "
"C#, and C++. See the subcategories for each language in the :ref:`scripting "
"<toc-learn-scripting>` section."
msgstr ""
"Godot가 공식으로 지원하는 언어는 GDScript, Visual Scripting, C#, 그리고 C++입"
"니다. :ref:`스크립팅 <toc-learn-scripting>` 섹션에서 각 언어 별 하위 카테고리"
"를 참고하세요."

#: ../../docs/about/faq.rst:68
msgid ""
"If you are just starting out with either Godot or game development in "
"general, GDScript is the recommended language to learn and use since it is "
"native to Godot. While scripting languages tend to be less performant than "
"lower-level languages in the long run, for prototyping, developing Minimum "
"Viable Products (MVPs), and focusing on Time-To-Market (TTM), GDScript will "
"provide a fast, friendly, and capable way of developing your games."
msgstr ""
"대개 Godot 개발이나 게임 개발을 목적으로 엔진을 키게 된다면, GDScript가 Godot"
"에 기본적으로 있기 때문에 추천하는 언어입니다. 스크립트 언어는 길게 본다면 다"
"른 로우 레벨 언어보다 퍼포먼스가 떨어지지만, 프로토 타입이나 소규모 제품을 제"
"작하거나, 개발 시간에 중점을 둔다면, GDScript는 게임을 개발하는데 빠르고, 친"
"절하고, 유능한 방법을 제공해 줄 것입니다."

#: ../../docs/about/faq.rst:75
msgid ""
"Note that C# support is still relatively new, and as such, you may encounter "
"some issues along the way. Our friendly and hard-working development "
"community is always ready to tackle new problems as they arise, but since "
"this is an open-source project, we recommend that you first do some due "
"diligence yourself. Searching through discussions on `open issues <https://"
"github.com/godotengine/godot/issues>`_ is a great way to start your "
"troubleshooting."
msgstr ""
"C# 지원은 아직 비교적 최근에 시작했기 때문에, 오류를 발견하실 수도 있습니다. "
"우리의 친절하고 부지런한 개발 커뮤니티에서 언제나 새 문제를 해결할 준비가 되"
"어있지만, 이것은 오픈 소스 프로젝트이므로, 스스로 해결해 보시는 것을 추천합니"
"다. 문제를 해결하기 위해 `open issues <https://github.com/godotengine/godot/"
"issues>`_\\ 에서 토론을 찾아보시는 것도 좋은 출발점입니다."

#: ../../docs/about/faq.rst:82
msgid ""
"As for new languages, support is possible via third parties using the "
"GDNative / NativeScript / PluginScript facilities. (See the question about "
"plugins below.) Work is currently underway, for example, on unofficial "
"bindings for Godot to `Python <https://github.com/touilleMan/godot-python>`_ "
"and `Nim <https://github.com/pragmagic/godot-nim>`_."
msgstr ""
"새로운 언어에 관해서, GDNative / NativeScript / PluginScript 기능으로 다른 언"
"어를 지원할 수 있습니다. (아래에 플러그인에 관한 질문을 참고하세요.)  예를 들"
"어 Godot에 `Python <https://github.com/touilleMan/godot-python>`_\\ 과 `Nim "
"<https://github.com/pragmagic/godot-nim>`_\\ 의 비공식 바인딩 개발이 진행 중"
"입니다."

#: ../../docs/about/faq.rst:88
msgid "What is GDScript and why should I use it?"
msgstr "GDScript는 무엇이고 왜 이것을 써야하나요?"

#: ../../docs/about/faq.rst:90
msgid ""
"GDScript is Godot's integrated scripting language. It was built from the "
"ground up to maximize Godot's potential in the least amount of code, "
"affording both novice and expert developers alike to capitalize on Godot's "
"strengths as fast as possible. If you've ever written anything in a language "
"like Python before then you'll feel right at home. For examples, history, "
"and a complete overview of the power GDScript offers you, check out the "
"`GDScript scripting guide <gdscript_basics>`_."
msgstr ""
"GDScript는 Godot의 통합된 스크립트 언어입니다. 이것은 초심자와 전문 개발자가 "
"동등하게 Godot의 강점을 가능한 빨리 활용할 수 있도록 짧은 코드로도 Godot의 잠"
"재력을 극대화할 수 있도록 바닥부터 지어졌습니다. 이전에 Python 비슷한 언어를 "
"사용해 보신 적이 있다면 익숙하실 겁니다. GDScript가 제공하는 예제, 역사, 그리"
"고 전체 개요는, `GDScript 스크립팅 가이드 <gdscript_basics>`_\\ 를 참고하세"
"요."

#: ../../docs/about/faq.rst:97
msgid ""
"There are several reasons to use GDScript--especially when you are "
"prototyping, in alpha/beta stages of your project, or are not creating the "
"next AAA title--but the most salient reason is the overall **reduction of "
"complexity.**"
msgstr ""
"GDScript를 사용하는 여러 이유가 있습니다--특히 프로젝트의 알파/베타 맵의 프로"
"토타입을 만들 때나, AAA급의 게임을 만들려는 것이 아니라면 말이죠-- 그러나 전"
"체적으로 가장 두드러진 이유는 **복잡성 감소**\\ 입니다"

#: ../../docs/about/faq.rst:101
msgid ""
"The original intent of creating a tightly integrated, custom scripting "
"language for Godot was two-fold: first, it reduces the amount of time "
"necessary to get up and running with Godot, giving developers a rapid way of "
"exposing themselves to the engine with a focus on productivity; second, it "
"reduces the overall burden of maintenance, attenuates the dimensionality of "
"issues, and allows the developers of the engine to focus on squashing bugs "
"and improving features related to the engine core--rather than spending a "
"lot of time trying to get a small set of incremental features working across "
"a large set of languages."
msgstr ""
"Godot를 위한 커스텀 스크립트 언어를 만들게 된 원래 의도는 두 가지 입니다: 먼"
"저, Godot를 키고 실행하는 많은 시간을 줄여서, 개발자는 생산성에 중점을 두고 "
"엔진에 빠르게 접근할 수 있습니다; 두 번째로, 그것은 전반적인 유지 보수의 부담"
"을 줄여주고 문제의 어려움을 줄이고 엔진 개발자가 엔진 핵심 버그를 없애고 기능"
"을 발전하기에 집중할 수 있습니다--작지만 많은 기능을 뽑아내려고 많은 언어들에"
"서 많은 시간을 사용하지 않게 됩니다."

#: ../../docs/about/faq.rst:109
msgid ""
"Since Godot is an open-source project, it was imperative from the start to "
"prioritize a more integrated and seamless experience over attracting "
"additional users by supporting more familiar programming languages--"
"especially when supporting those more familiar languages would result in a "
"worse experience. We understand if you would rather use another language in "
"Godot (see the list of supported options above). That being said, if you "
"haven't given GDScript a try, try it for **three days**. Just like Godot, "
"once you see how powerful it is and rapid your development becomes, we think "
"GDScript will grow on you."
msgstr ""
"Godot가 오픈 소스 프로젝트가 되면서부터, 더 통합적이고 추가 사용자 유치를 위"
"한 완벽한 경험을 제공하기 위해 더 친근한 프로그래밍 언어를 지원하는 것이 최우"
"선이었습니다--특히 더 친근한 언어가 더 나쁜 결과를 내보낼 때 그랬습니다. 우리"
"는 Godot에서 다른 언어를 사용하는 것을 이해합니다 (하단에 지원하는 옵션들을 "
"참고하세요). 즉, GDScript를 사용해보지 않으셨다면, **3 일** 동안 한번 사용해"
"보세요. Godot처럼, GDScript가 개발하는 것을 빠르게 할 만큼 강력하다는 것을 본"
"다면, 우리는 GDScript가 당신을 키운다고 생각합니다."

#: ../../docs/about/faq.rst:118
msgid ""
"More information about getting comfortable with GDScript or dynamically "
"typed languages can be found in the :ref:`doc_gdscript_more_efficiently` "
"tutorial."
msgstr ""
"GDScript 또는 동적타입 언어에 익숙해지고 싶다면 :ref:"
"`doc_gdscript_more_efficiently` 튜토리얼을 참고하세요."

#: ../../docs/about/faq.rst:122
msgid "What were the motivations behind creating GDScript?"
msgstr "GDScript를 제작하게 된 동기가 무엇입니까?"

#: ../../docs/about/faq.rst:124
msgid ""
"The main reasons for creating a custom scripting language for Godot were:"
msgstr ""
"Godot를 위한 커스텀 스크립트 언어를 개발하게 된 주요 이유는 이러합니다:"

#: ../../docs/about/faq.rst:126
msgid ""
"Poor thread support in most script VMs, and Godot uses threads (Lua, Python, "
"Squirrel, JS, AS, etc.)."
msgstr ""
"대부분 스크립트 가상 머신에서는 좋은 스레드 지원이 없습니다, 하지만 Godot는 "
"스레드를 지원합니다 (Lua, Python, Squirrel, JS, AS 등등.)."

#: ../../docs/about/faq.rst:128
msgid ""
"Poor class-extending support in most script VMs, and adapting to the way "
"Godot works is highly inefficient (Lua, Python, JS)."
msgstr ""
"대부분 스크립트 가상 머신은 클래스 확장 지원이 좋지 않은 데다, Godot의 작동 "
"방식에 맞춰 변형하자면 너무 비효율적입니다 (Lua, Python, JS)."

#: ../../docs/about/faq.rst:130
msgid ""
"Many existing languages have horrible interfaces for binding to C++, "
"resulting in large amount of code, bugs, bottlenecks, and general "
"inefficiency (Lua, Python, Squirrel, JS, etc.) We wanted to focus on a great "
"engine, not a great amount of integrations."
msgstr ""
"많은 존재하는 언어들은 C++ 바인딩을 위한 끔찍한 인터페이스를 가지고 있습니"
"다, 코드 양이 많아지고 버그, 병목, 그리고 종합적인 비효율을 낳습니다 (Lua, "
"Python, Squirrel, JS 등.) 우리는 많은 통합이 아닌, 좋은 엔진에 중점을 두었습"
"니다."

#: ../../docs/about/faq.rst:133
msgid ""
"No native vector types (vector3, matrix4, etc.), resulting in highly reduced "
"performance when using custom types (Lua, Python, Squirrel, JS, AS, etc.)."
msgstr ""
"자체적인 벡터 타입이 없어 (vector3, matrix4, 등) 커스터 타입을 사용함으로써 "
"퍼포먼스가 크게 줄어듭니다 (Lua, Python, Squirrel, JS, AS 등)."

#: ../../docs/about/faq.rst:136
msgid ""
"Garbage collector results in stalls or unnecessarily large memory usage "
"(Lua, Python, JS, AS, etc.)."
msgstr ""
"가비지 컬렉터가 처리 지연과 쓸데없이 큰 메모리 사용을 초래합니다 (Lua, "
"Python, JS, AS 등)."

#: ../../docs/about/faq.rst:138
msgid ""
"Difficulty to integrate with the code editor for providing code completion, "
"live editing, etc. (all of them). This is well supported by GDScript."
msgstr ""
"코드 완성, 실시간 편집 등을 지원하기 위한 코드 에디터와의 결합이 (전부) 까다"
"롭습니다. GDScript는 이 부분이 아주 잘 지원됩니다."

#: ../../docs/about/faq.rst:142
msgid "GDScript was designed to curtail the issues above and more."
msgstr "GDScript는 위와 같은 문제들을 줄이고자 설계되었습니다."

#: ../../docs/about/faq.rst:145
msgid "What type of 3D model formats does Godot support?"
msgstr "Godot에서는 무슨 유형의 3D 모델을 지원하나요?"

#: ../../docs/about/faq.rst:147
msgid ""
"Godot supports Collada via the `OpenCollada <https://github.com/KhronosGroup/"
"OpenCOLLADA/wiki/OpenCOLLADA-Tools>`_ exporter (Maya, 3DSMax)."
msgstr ""
"Godot는 `OpenCollada <https://github.com/KhronosGroup/OpenCOLLADA/wiki/"
"OpenCOLLADA-Tools>`_ 내보내기를 통해 Collada를 지원합니다 (Maya, 3DSMax)."

#: ../../docs/about/faq.rst:149
msgid ""
"If you are using Blender, take a look at our own `Better Collada Exporter "
"<https://godotengine.org/download>`_."
msgstr ""
"Blender를 사용하신다면, 우리의 `Better Collada Exporter <https://godotengine."
"org/download>`_\\ 를 보세요."

#: ../../docs/about/faq.rst:151
msgid "As of Godot 3.0, glTF is supported."
msgstr "Godot 3.0부터는, glTF도 지원합니다."

#: ../../docs/about/faq.rst:153
msgid ""
"FBX SDK has a `restrictive license <https://www.blender.org/bf/"
"Autodesk_FBX_License.rtf>`_, that is incompatible with the `open license "
"<https://opensource.org/licenses/MIT>`_ provided by Godot. That being said, "
"FBX support could still be provided by third parties as a plugin. (See "
"Plugins question above.)"
msgstr ""
"FBX SDK는 `제한적인 라이센스 <http://www.blender.org/bf/Autodesk_FBX_License."
"rtf>`_\\ 를 갖고 있기 때문에, Godot의 `오픈 라이선스 <http://opensource.org/"
"licenses/MIT>`_\\ 와 호환되지 않습니다. 이는 즉, FBX 지원은 아직 플러그인을 "
"통해서만 사용하실 수 있습니다.(위의 플러그인 질문을 참고하세요.)"

#: ../../docs/about/faq.rst:159
msgid ""
"Will [insert closed SDK such as FMOD, GameWorks, etc.] be supported in Godot?"
msgstr "Godot에서 [FMOD, GameWorks 등 폐쇄형 SDK]가 지원될까요?"

#: ../../docs/about/faq.rst:161
msgid ""
"The aim of Godot is to create a free and open-source MIT-licensed engine "
"that is modular and extendable. There are no plans for the core engine "
"development community to support any third-party, closed-source/proprietary "
"SDKs, as integrating with these would go against Godot's ethos."
msgstr ""
"Godot의 목표는 모듈 방식이고 확장 가능한 무료이자 오픈 소스 MIT 라이선스 엔진"
"을 만드는 것입니다. 핵심 엔진 개발 커뮤니티가 폐쇄 소스/독점 SDK를 지원하도"
"록 하는 계획은 없습니다, 이것들을 통합하는 것은 Godot의 정신에 반대되는 것입"
"니다."

#: ../../docs/about/faq.rst:166
msgid ""
"That said, because Godot is open-source and modular, nothing prevents you or "
"anyone else interested in adding those libraries as a module and shipping "
"your game with them--as either open- or closed-source."
msgstr ""
"즉, Godot는 오픈 소스이고 모듈화 되어있으므로, 어느 누구라도 폐쇄형 라이브러"
"리를 모듈로 추가해서 여러분의 게임에 사용해 출시해도 무방합니다--오픈 소스든"
"지 폐쇄 소스든지 말이죠."

#: ../../docs/about/faq.rst:170
msgid ""
"To see how support for your SDK of choice could still be provided, look at "
"the Plugins question above."
msgstr ""
"여러분이 원하는 SDK 지원을 추가하는 방법을 알아보려면, 위 플러그인 질문을 참"
"고하세요."

#: ../../docs/about/faq.rst:173
msgid ""
"If you know of a third-party SDK that is not supported by Godot but that "
"offers free and open-source integration, consider starting the integration "
"work yourself. Godot is not owned by one person; it belongs to the "
"community, and it grows along with ambitious community contributors like you."
msgstr ""
"혹시 Godot가 지원하진 않지만 무료이고 오픈 소스로 제공하는 다른 SDK를 아신다"
"면 직접 통합 작업을 시작해보세요. Godot는 한 사람의 것이 아닙니다; 커뮤니티"
"에 속해 있고, 당신과 같은 야심 찬 커뮤니티 공헌자들과 함께 자랍니다."

#: ../../docs/about/faq.rst:179
msgid ""
"How should assets be created to handle multiple resolutions and aspect "
"ratios?"
msgstr "다양한 해상도와 화면비에 대응하려면 어떻게 에셋을 만들어야 할까요?"

#: ../../docs/about/faq.rst:181
msgid ""
"This question pops up often and it's probably thanks to the misunderstanding "
"created by Apple when they originally doubled the resolution of their "
"devices. It made people think that having the same assets in different "
"resolutions was a good idea, so many continued towards that path. That "
"originally worked to a point and only for Apple devices, but then several "
"Android and Apple devices with different resolutions and aspect ratios were "
"created, with a very wide range of sizes and DPIs."
msgstr ""
"이 질문은 자주 나타났고 애플이 기기의 해상도를 원래 두배로 했기 때문에 나온 "
"오해이므로 다행일지도 모릅니다. 이때문에 사람들이 같은 에셋을 다른 해상도로 "
"만드는 것이 좋은 생각으로 여기고, 많은 사람들이 그렇게 했습니다. 그것은 원래 "
"애플 기기에서만 효과가 나타났습니다, 하지만 다양한 해상도와 종횡비를 가진 몇"
"몇 안드로이드와 애플 기기가 만들어졌습니다, 매우 큰 화면과 해상도를 가지면서"
"요."

#: ../../docs/about/faq.rst:189
msgid ""
"The most common and proper way to achieve this is to, instead, use a single "
"base resolution for the game and only handle different screen aspect ratios. "
"This is mostly needed for 2D, as in 3D it's just a matter of Camera XFov or "
"YFov."
msgstr ""
"가장 일반적이고 적합한 방법은, 게임을 위한 하나의 기본 해상도를 사용하고 가"
"로 세로 비율 만을 다르게 하는 것입니다. 이것이 2D에 대부분 필요합니다만, 3D에"
"서는 카메라 X시야나 Y시야의 단순한 문제입니다."

#: ../../docs/about/faq.rst:193
msgid ""
"Choose a single base resolution for your game. Even if there are devices "
"that go up to 2K and devices that go down to 400p, regular hardware scaling "
"in your device will take care of this at little or no performance cost. Most "
"common choices are either near 1080p (1920x1080) or 720p (1280x720). Keep in "
"mind the higher the resolution, the larger your assets, the more memory they "
"will take and the longer the time it will take for loading."
msgstr ""
"게임을 위한 기본 해상도를 고르세요. 해상도가 2K까지 올라가는 기기나 400p까지 "
"내려가는 기기가 있더라도, 여러분들의 기기 안에 있는 정규 하드웨어 스케일링은 "
"이 점을 퍼포먼스 비용으로 다루진 않을 겁니다. 대부분의 선택은 1080p "
"(1920x1080)이나 720p (1280x720) 근처입니다. 해상도가 높을수록, 에셋은 더 커지"
"고, 더 많은 메모리를 먹고 더 긴 로딩이 걸릴 것이니 명심하십시오."

#: ../../docs/about/faq.rst:201
msgid ""
"Use the stretch options in Godot, 2D stretching with keeping aspect works "
"best. Check the :ref:`doc_multiple_resolutions` tutorial on how to achieve "
"this."
msgstr ""
"Godot에서 늘이기 옵션을 사용해보세요. 비율을 유지하는 2D 늘이기는 잘 작동됩니"
"다. :ref:`doc_multiple_resolutions` 튜토리얼에서 확인해보세요."

#: ../../docs/about/faq.rst:205
msgid ""
"Determine a minimum resolution and then decide if you want your game to "
"stretch vertically or horizontally for different aspect ratios, or whether "
"there is a minimum one and you want black bars to appear instead. This is "
"also explained in the previous step."
msgstr ""
"최소 해상도를 선택한 다음, 게임의 화면을 다른 화면비에 맞게 늘릴 것인지 또는 "
"검정색 막대를 사용하여 화면비를 유지할 것인지를 정하십시오. 이 또한 이전 단계"
"에서 설명했습니다."

#: ../../docs/about/faq.rst:210
msgid ""
"For user interfaces, use the :ref:`anchoring <doc_size_and_anchors>` to "
"determine where controls should stay and move. If UIs are more complex, "
"consider learning about Containers."
msgstr ""
"사용자 인터페이스에 대해서는, :ref:`anchoring <doc_size_and_anchors>`\\ 을 보"
"고 컨트롤이 이동하거나 정지해야 할 위치를 결정하세요. UI가 더 복잡하다면 "
"Container 사용을 고려해보세요."

#: ../../docs/about/faq.rst:214
msgid "And that's it! Your game should work in multiple resolutions."
msgstr "다 됐습니다! 게임이 이제 다양한 해상도에서 작동합니다."

#: ../../docs/about/faq.rst:216
msgid ""
"If there is a desire to make your game also work on ancient devices with "
"tiny screens (fewer than 300 pixels in width), you can use the export option "
"to shrink images, and set that build to be used for certain screen sizes in "
"the App Store or Google Play."
msgstr ""
"(가로 300화소도 안되는) 오래된 기기의 작은 화면에서도 게임이 작동하기를 정말 "
"원하시다면, 내보내기를 통해 이미지를 수축시켜 앱스토어나 구글 플레이에 적합"
"한 화면으로 만들 수 있습니다."

#: ../../docs/about/faq.rst:222
msgid "How can I extend Godot?"
msgstr "어떻게 Godot를 확장할 수 있나요?"

#: ../../docs/about/faq.rst:224
msgid ""
"For extending Godot, like creating Godot Editor plugins or adding support "
"for additional languages, take a look at :ref:`EditorPlugins "
"<doc_making_plugins>` and tool scripts."
msgstr ""
"Godot 에디터 플러그인 제작이나 추가적인 언어 지원을 하고 싶으시다면, :ref:`에"
"디터 플러그인 <doc_making_plugins>`\\ 과 tool 스크립트를 참고하세요."

#: ../../docs/about/faq.rst:228
msgid "Also, see the official blog posts on these topics:"
msgstr "또한 이 항목에 대한 공식 블로그 게시물도 참고하세요:"

#: ../../docs/about/faq.rst:230
msgid ""
"`A look at the GDNative architecture <https://godotengine.org/article/look-"
"gdnative-architecture>`_"
msgstr ""
"`A look at the GDNative architecture <https://godotengine.org/article/look-"
"gdnative-architecture>`_"

#: ../../docs/about/faq.rst:231
msgid "`GDNative is here! <https://godotengine.org/article/dlscript-here>`_"
msgstr "`GDNative is here! <https://godotengine.org/article/dlscript-here>`_"

#: ../../docs/about/faq.rst:233
msgid ""
"You can also take a look at the GDScript implementation, the Godot modules, "
"as well as the `unofficial Python support <https://github.com/touilleMan/"
"godot-python>`_ for Godot. This would be a good starting point to see how "
"another third-party library integrates with Godot."
msgstr ""
"또 GDScript의 구현, Godot 모듈들, Godot를 위한 `비공식 Python 지원 <https://"
"github.com/touilleMan/godot-python>`_\\ 을 살펴볼 수도 있습니다. 이것이 Godot"
"가 어떻게 다른 라이브러리와 통합하는 지를 보여주는 좋은 출발점이 될 것입니다."

#: ../../docs/about/faq.rst:239
msgid "I would like to contribute! How can I get started?"
msgstr "저도 이 프로젝트에 기여하고 싶어요! 어떻게 시작해야 하나요?"

#: ../../docs/about/faq.rst:241
msgid ""
"Awesome! As an open-source project, Godot thrives off of the innovation and "
"ambition of developers like you."
msgstr ""
"멋집니다! 오픈 소스 프로젝트인 만큼, Godot는 당신 같은 혁신적이고 야심 찬 개"
"발자들에 의해 번창합니다."

#: ../../docs/about/faq.rst:244
msgid ""
"The first place to get started is in the `issues <https://github.com/"
"godotengine/godot/issues>`_. Find an issue that resonates with you, then "
"proceed to the `How to Contribute <https://github.com/godotengine/godot/blob/"
"master/CONTRIBUTING.md#contributing-pull-requests>`_ guide to learn how to "
"fork, modify, and submit a Pull Request (PR) with your changes."
msgstr ""
"처음으로 시작해야 할 부분은 `issues <https://github.com/godotengine/godot/"
"issues>`_ 입니다. 당신이 공감할만한 이슈를 찾으신 다음, 변경 사항과 함께 "
"Pull Request (PR)를 포크 요청, 수정 및 제출하는 법을 배우기 위해 `기여하는 방"
"법 <https://github.com/godotengine/godot/blob/master/CONTRIBUTING."
"md#contributing-pull-requests>`_ 가이드를 진행하세요."

#: ../../docs/about/faq.rst:249
msgid "I have a great idea for Godot. How can I share it?"
msgstr "Godot에 대한 좋은 아이디어가 있습니다. 이걸 어떻게 드릴 수 있나요?"

#: ../../docs/about/faq.rst:251
msgid ""
"It might be tempting to want to bring ideas to Godot, like ones that result "
"in massive core changes, some sort of mimicry of what another game engine "
"does, or alternative workflows that you'd like built into the editor. These "
"are great and we are thankful to have such motivated people want to "
"contribute, but Godot's focus is and always will be the core functionality "
"as outlined in the `Roadmap <https://github.com/godotengine/godot-roadmap/"
"blob/master/ROADMAP.md>`_, `squashing bugs and addressing issues <https://"
"github.com/godotengine/godot/issues>`_, and conversations between Godot "
"community members."
msgstr ""
"Godot로 아이디어를 가져오는 것이, 마치 거대한 핵심 변화를 가져오거나, 다른 종"
"류의 게임 엔진을 흉내 내거나, 에디터에 내장하길 원하는 대체 워크플로우가 생기"
"는 것 같아서, 매력적일 것이라고 생각합니다. 이것들은 위대하고 그래서 우리는 "
"그러한 사람들이 기여하길 원하는 것에 감사하고 있습니다, 하지만 Godot의 초점"
"은 `로드맵 \n"
"<https://github.com/godotengine/godot-roadmap/blob/master/ROADMAP.md>`_\\ 에 "
"요약한 대로 핵심 기능과, `버그를 없애고 이슈를 다루는 것 <https://github.com/"
"godotengine/godot/issues>`_, 그리고 Godot 커뮤니티 회원과의 대화입니다."

#: ../../docs/about/faq.rst:260
msgid ""
"Most developers in the Godot community will be more interested to learn "
"about things like:"
msgstr ""
"Godot 커뮤니티의 대부분 개발자들은 이런 것들을 배우는 데 더 흥미를 가질 겁니"
"다:"

#: ../../docs/about/faq.rst:263
msgid ""
"Your experience using the software and the problems you have (we care about "
"this much more than ideas on how to improve it)."
msgstr ""
"소프트웨어를 사용한 경험과 문제 (우리는 이것을 향상시키기 위한 아이디어보다 "
"더 중요하게 여깁니다)."

#: ../../docs/about/faq.rst:265
msgid ""
"The features you would like to see implemented because you need them for "
"your project."
msgstr "프로젝트에 필요해서 구현하고자 하는 기능들."

#: ../../docs/about/faq.rst:267
msgid ""
"The concepts that were difficult to understand while learning the software."
msgstr "소프트웨어를 배우면서 이해하기 어려운 개념들."

#: ../../docs/about/faq.rst:268
msgid "The parts of your workflow you would like to see optimized."
msgstr "워크플로우를 최적화시키고 싶은 부분들."

#: ../../docs/about/faq.rst:269
msgid ""
"Parts where you missed clear tutorials or where the documentation wasn't "
"clear."
msgstr "깔끔한 튜로리얼이 없거나 깔끔하지 않은 문서 부분들."

#: ../../docs/about/faq.rst:271
msgid ""
"Please don't feel like your ideas for Godot are unwelcome. Instead, try to "
"reformulate them as a problem first, so developers and the community have a "
"functional foundation to ground your ideas on."
msgstr ""
"그러니, Godot가 여러분의 생각을 달갑게 여기지 않는다고 생각하진 마세요. 다"
"만, 개발자들과 커뮤니티가 생각을 바탕으로 기술적 토대를 마련하기 위해, 먼저 "
"문제점 순으로 재구성해주세요."

#: ../../docs/about/faq.rst:275
msgid ""
"A good way to approach sharing your ideas and problems with the community is "
"as a set of user stories. Explain what you are trying to do, what behavior "
"you expect to happen, and then what behavior actually happened. Framing "
"problems and ideas this way will help the whole community stay focused on "
"improving developer experiences as a whole."
msgstr ""
"커뮤니티와 생각과 문제를 공유하는 좋은 방법은 이야기를 말하는 것입니다. 당신"
"이 무엇을 하려 했고, 어떤 일을 예상했는데, 그 뒤 실제로는 어떤 일이 발생했는"
"지를 설명하세요. 이 방법으로 문제와 생각을 세우는 것은 전체 커뮤니티가 개발"
"자 경험을 향상시키는데 집중하도록 도울 것입니다."

#: ../../docs/about/faq.rst:281
msgid ""
"Bonus points for bringing screenshots, concrete numbers, test cases, or "
"example projects (if applicable)."
msgstr ""
"스크린샷이나, 특정 값, 실험 사례, (가능하다면) 예제 프로젝트를 가져오면 추가 "
"점수가 될 것입니다."

#: ../../docs/about/faq.rst:285
msgid "How can I support Godot development or contribute?"
msgstr "어떻게 Godot 개발을 돕거나 후원할 수 있나요?"

#: ../../docs/about/faq.rst:287
msgid "See :ref:`doc_ways_to_contribute`."
msgstr ":ref:`doc_ways_to_contribute`\\ 를 참고하세요."

#: ../../docs/about/faq.rst:290
msgid "Who is working on Godot? How can I contact you?"
msgstr "Godot는 누가 만드나요? 제가 연락할 수 있을까요?"

#: ../../docs/about/faq.rst:292
msgid ""
"See the corresponding page on the `Godot website <https://godotengine.org/"
"contact>`_."
msgstr ""
"같은 `Godot 웹사이트 <https://godotengine.org/contact>`_ 페이지에서 참고하세"
"요."

#: ../../docs/getting_started/step_by_step/index.rst:2
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:108
msgid "Step by step"
msgstr "단계별"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:4
msgid "Introduction to Godot’s editor"
msgstr "Godot 에디터 소개"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:6
msgid ""
"This tutorial will run you through Godot’s interface. We’re going to look at "
"the **Project Manager, docks, workspaces** and everything you need to know "
"to get started with the engine."
msgstr ""
"이 튜토리얼에서는 Godot의 인터페이스에 대해서 알아볼 것입니다. **프로젝트 매"
"니저, 독, 작업 공간**, 그 외에 엔진을 사용하는 데에 필요한 것들을 살펴봅시다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:11
msgid "Project manager"
msgstr "프로젝트 매니저(Project Manager)"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:13
msgid ""
"When you launch Godot, the first window you’ll see is the Project Manager. "
"It lets you create, remove, import or play game projects."
msgstr ""
"Godot를 실행하시면 제일 처음에 프로젝트 매니저가 표시됩니다. 프로젝트 매니저"
"에서는 게임 프로젝트를 생성, 삭제, 불러오거나 실행해 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:16
#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:49
#: ../../docs/tutorials/assetlib/using_assetlib.rst:16
#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:22
msgid "|image0|"
msgstr "|image0|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:18
msgid ""
"In the top-right corner you’ll find a drop-down menu to change the editor’s "
"language."
msgstr ""
"창의 우측 상단의 지구본 아이콘을 눌러 에디터에서 사용할 언어를 변경하실 수 있"
"습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:21
#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:57
#: ../../docs/tutorials/assetlib/using_assetlib.rst:48
msgid "|image1|"
msgstr "|image1|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:23
msgid ""
"From the **Templates** tab you can download open source project templates "
"and demos to help you get started faster."
msgstr ""
"**템플릿(Templates)** 탭에서는 빠른 시작에 도움을 줄 오픈 소스 템플릿과 데모"
"를 다운로드 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:26
#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:71
#: ../../docs/tutorials/assetlib/using_assetlib.rst:58
msgid "|image2|"
msgstr "|image2|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:29
msgid "Create or import a project"
msgstr "프로젝트를 생성하거나 가져오기"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:31
msgid ""
"To create a new project, click the ``New Project`` button on the right. Give "
"it a name and choose an empty folder on your computer to save it."
msgstr ""
"새 프로젝트를 만들려면, 오른쪽의 ``새 프로젝트`` 버튼을 누르세요. 이름을 지어"
"주고 저장할 빈 폴더를 선택하세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:34
#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:91
#: ../../docs/tutorials/assetlib/using_assetlib.rst:83
msgid "|image3|"
msgstr "|image3|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:36
msgid ""
"Click the Browse button to open Godot’s file browser and pick a location or "
"type the folder’s path in the Project Path field."
msgstr ""
"찾아보기 버튼을 눌러 Godot의 파일 브라우저를 열고 위치를 선택하거나 경로를 입"
"력하세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:39
#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:102
#: ../../docs/tutorials/assetlib/using_assetlib.rst:88
msgid "|image4|"
msgstr "|image4|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:41
msgid ""
"When you see the green tick on the right, it means the engine detects an "
"empty folder and you may click ``Create``. Godot will create the project for "
"you and open it in the editor."
msgstr ""
"오른쪽에 초록 불이 들어오면, 엔진이 빈 폴더를 감지했다는 것이므로 ``생성`` "
"을 누릅니다. Godot는 프로젝트를 만들고 에디터에서 열어볼 것입니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:45
msgid ""
"The next time you’ll open Godot, you’ll see your new project in the list. "
"Double click on it to open it in the editor."
msgstr ""
"다음 번에 Godot를 키게 된다면, 당신의 새 프로젝트가 목록에 있을 겁니다. 더블 "
"클릭으로 에디터를 실행시킵니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:48
#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:154
#: ../../docs/tutorials/assetlib/using_assetlib.rst:92
msgid "|image5|"
msgstr "|image5|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:50
msgid ""
"You can import existing projects in a similar way, using the Import button. "
"Locate the folder that contains the project or the ``project.godot`` file to "
"import and edit it."
msgstr ""
"가져오기 버튼을 통해, 비슷한 방법으로 존재하는 프로젝트를 가져올 수 있습니"
"다. ``project.godot`` 파일이 들어있는 프로젝트의 폴더를 선택해서 가져옵니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:54
#: ../../docs/tutorials/assetlib/using_assetlib.rst:113
msgid "|image7|"
msgstr "|image7|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:56
msgid "When the folder path is correct, you'll see a green checkmark."
msgstr "폴더 경로가 올바르다면 녹색 체크 표시가 나타납니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:58
#: ../../docs/tutorials/assetlib/using_assetlib.rst:121
msgid "|image8|"
msgstr "|image8|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:61
msgid "Your first look at Godot’s editor"
msgstr "Godot 에디터와의 첫 만남"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:63
msgid ""
"Welcome to Godot! With your project open, you should see the editor’s "
"interface with the 3D viewport active. You can change the current workspace "
"at the top of the interface. Click on 2D to switch to the 2D workspace."
msgstr ""
"Godot에 오신 것을 환영합니다! 프로젝트를 열고 당신은 3d 뷰포트가 켜진 에디터"
"의 인터페이스를 보고 계실 겁니다. 맨 위 인터페이스를 통해 현재 작업 공간을 바"
"꿀 수 있습니다. 2D를 눌러 2D 작업 공간으로 바꾸세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:68
#: ../../docs/tutorials/assetlib/using_assetlib.rst:142
msgid "|image9|"
msgstr "|image9|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:70
msgid "Now you should see this interface, with empty docks on the right side."
msgstr "이제 인터페이스의 오른쪽에 빈 독이 있는 것을 확인할 수 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:72
#: ../../docs/tutorials/assetlib/using_assetlib.rst:148
msgid "|image10|"
msgstr "|image10|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:74
msgid ""
"At the top, from left to right, you can see the **main menus**, the "
"**workspaces**, and the **playtest buttons**."
msgstr ""
"맨 위에 있는 메뉴들은, 왼쪽부터 **주 메뉴(main menus)**, **작업 공간"
"(workspaces)** **실행 및 테스트 버튼들(playtest buttons)** 입니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:77
msgid ""
"On the left side, you have the **FileSystem dock**, where you’ll manage your "
"project files and assets."
msgstr ""
"왼쪽에는 **파일 시스템 독(FileSystem dock)**\\ 이 있는데, 여기서 당신은 프로"
"젝트 파일이나 에셋들을 관리할 수 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:80
#: ../../docs/tutorials/assetlib/using_assetlib.rst:153
msgid "|image11|"
msgstr "|image11|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:82
msgid ""
"On the right side, you’ll find the **Scene dock**, which lists the active "
"scene’s content and the **Inspector** in the bottom right corner."
msgstr ""
"오른쪽에는 활성화된 씬의 내용물들을 보여주는 **씬 독(Scene dock)** 이 있고 바"
"로 아래에는 **인스펙터(Inspector)** 가 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:85
#: ../../docs/tutorials/assetlib/using_assetlib.rst:161
msgid "|image12|"
msgstr "|image12|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:87
msgid ""
"In the center, you have the **Toolbar** at the top, where you’ll find tools "
"to move, scale or lock your scene’s objects. It changes as you jump to "
"different workspaces."
msgstr ""
"이동, 규모, 오브젝트 잠금 등을 할 수 있는 **툴바(Toolbar)** 가 가운데 바로 위"
"에 있습니다. 툴바는 작업 공간마다 그 구성이 다릅니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:91
#: ../../docs/tutorials/assetlib/using_assetlib.rst:168
msgid "|image13|"
msgstr "|image13|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:93
msgid ""
"The **Bottom Panel** is the host for the debug console, the animation "
"editor, the audio mixer… They are wide and can take precious space. That’s "
"why they’re folded by default."
msgstr ""
"**하단 패널(Bottom Panel)** 은 디버그 콘솔이나 애니메이션 편집, 오디오 믹서 "
"등이 있고... 그렇다 보니 많은 공간을 차지합니다. 때문에 기본적으로 닫혀 있는 "
"상태입니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:97
#: ../../docs/tutorials/assetlib/using_assetlib.rst:115
msgid "|image14|"
msgstr "|image14|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:100
msgid "The workspaces"
msgstr "작업 공간(Workspace)"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:102
msgid ""
"You can see four workspace buttons at the top: 2D, 3D, Script and AssetLib."
msgstr ""
"4개의 작업 공간 버튼을 볼 수 있습니다: 2D, 3D, Script 그리고 AssetLib 입니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:105
msgid ""
"You’ll use the **2D workspace** for all types of games. In addition to 2D "
"games, the 2D workspace is where you'll build your interfaces. Press F1 to "
"access it."
msgstr ""
"당신은 모든 게임을 만들기 위해 **2D 작업 공간**\\ 을 사용하게 됩니다. 2D 게"
"임 외에도 인터페이스를 만들기 위한 곳이죠. F1 키를 눌러 들어갑니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:108
msgid "|image15|"
msgstr "|image15|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:110
msgid ""
"In the **3D workspace**, you can work with meshes, lights, and design levels "
"for 3D games. Press F2 to access it."
msgstr ""
"**3D 작업 공간**\\ 에서는, 3D 게임을 위한 메시와 빛, 레벨 디자인을 할 수 있습"
"니다. F2 키를 눌러 들어갑니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:113
msgid "|image16|"
msgstr "|image16|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:115
msgid ""
"Notice the text [perspective] under the toolbar, it is a button that opens a "
"list of options related to the 3D viewport."
msgstr ""
"툴바 아래에 [원근보기] 텍스트를 보십시오, 이것은 3D 뷰포트와 관련된 설정 목"
"록 버튼입니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:117
msgid "|image20|"
msgstr "|image20|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:119
msgid ""
"Read :ref:`doc_introduction_to_3d` for more detail about **3D workspace**."
msgstr ""
"**3D 작업 공간**에 대해 더 알아보려면 :ref:`doc_introduction_to_3d`\\ 을 읽어"
"보세요."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:121
msgid ""
"The **Script** workspace is a complete code editor with a debugger, rich "
"auto-completion, and built-in code reference. Press F3 to access it, and F4 "
"to search the reference."
msgstr ""
"**Script** 작업 공간은 디버거, 많은 자동 완성 기능, 내장 코드 설명이 있는 완"
"전한 코드 에디터입니다. F3 키로 들어가고, F4를 눌러 원하는 참조를 검색할 수 "
"있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:125
msgid "|image17|"
msgstr "|image17|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:127
msgid ""
"Finally the **AssetLib** is a library of Free add-ons, scripts and assets to "
"use in your projects."
msgstr ""
"마지막으로 **AssetLib**\\ 은 프로젝트에 쓰일 무료 애드온, 스크립트 그리고 에"
"셋들이 있는 라이브러리입니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:131
msgid "Modify the interface"
msgstr "인터페이스 변경"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:133
msgid ""
"Godot’s interface lives in a single window. You cannot split it across "
"multiple screens although you can work with an external code editor like "
"Atom or Visual Studio for instance."
msgstr ""
"Godot의 인터페이스는 하나의 화면에 있습니다. 비록 여러개의 화면으로 분할 시"
"킬 수는 없지만 대신 Atom과 Visual Studio와 같은 외부 코드 에디터를 사용할 수 "
"있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:138
msgid "Move and resize docks"
msgstr "독의 이동과 크기 조절"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:140
msgid ""
"Click and drag on the edge of any dock or panel to resize it horizontally or "
"vertically."
msgstr ""
"아무 독이나 패널의 모서리를 클릭해서 드래그하면 크기를 조절할 수 있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:143
msgid "|image18|"
msgstr "|image18|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:145
msgid ""
"Click the three-dotted icon at the top of any dock to change its location."
msgstr ""
"아무 독의 꼭대기에 있는 점 세개가 있는 아이콘을 누르면 그것의 위치를 바꿀 수 "
"있습니다."

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:148
msgid "|image19|"
msgstr "|image19|"

#: ../../docs/getting_started/step_by_step/intro_to_the_editor_interface.rst:150
msgid ""
"Go to the ``Editor`` menu and ``Editor Settings`` to fine-tune the look and "
"feel of the editor."
msgstr ""
"더 보기 좋은 에디터를 만들고 싶다면 ``에디터`` 메뉴의 ``에디터 설정`` 으로 가"
"십시오."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:4
msgid "Scenes and nodes"
msgstr "씬과 노드(Scenes and nodes)"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:11
msgid ""
"Imagine for a second that you are not a game developer anymore. Instead, "
"you're a chef! Change your hipster outfit for a toque and a double breasted "
"jacket. Now, instead of making games, you create new and delicious recipes "
"for your guests."
msgstr ""
"한번 당신이 더이상 게임 개발자가 아니라고 상상해보세요. 이제, 당신은 셰프입니"
"다! 힙스터 복장을 벗어 던지고 토크와 더블 브레스트 재킷을 입는다고 말이죠. 이"
"제 게임을 만드는 대신, 손님을 위한 새롭고 맛있는 레시피를 만들어 봅시다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:16
msgid ""
"So, how does a chef create a recipe? Recipes are divided into two sections: "
"the first is the ingredients and the second is the instructions to prepare "
"it. This way, anyone can follow the recipe and savor your magnificent "
"creation."
msgstr ""
"그럼, 어떻게 셰프가 레시피를 만들까요? 레시피는 두 가지 과정으로 나뉩니다: 첫"
"째는 재료이고 둘째는 요리하는 방법입니다. 이렇게 한다면, 누구나 레시피에 따라"
"서 훌륭한 음식을 맛 볼 수 있을 겁니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:21
msgid ""
"Making games in Godot feels pretty much the same way. Using the engine feels "
"like being in a kitchen. In this kitchen, *nodes* are like a refrigerator "
"full of fresh ingredients with which to cook."
msgstr ""
"Godot에서 게임을 만드는 것도 꽤나 요리하는 느낌입니다. 주방에서 요리를 하듯"
"이 엔진을 사용합니다. 주방으로 본다면, *노드*\\ 는 요리를 하기 위한 신선한 재"
"료들이 가득 찬 냉장고로 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:25
msgid ""
"There are many types of nodes. Some show images, others play sound, other "
"nodes display 3D models, etc. There are dozens of them."
msgstr ""
"많은 타입의 노드들이 있습니다. 어떤거는 이미지를 보여주고, 아니면 소리를 재생"
"하거나 혹은 3D 모델을 보여주는 것이 있습니다. 그것도 수십 개나 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:29
#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:87
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:46
#: ../../docs/development/file_formats/tscn.rst:26
msgid "Nodes"
msgstr "노드(Node)"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:31
msgid ""
"But let's start with the basics. Nodes are fundamental building blocks for "
"creating a game. As mentioned above, a node can perform a variety of "
"specialized functions. However, any given node always has the following "
"attributes:"
msgstr ""
"일단 기초로 한번 시작해봅시다. 노드는 게임을 만들기 위한 기본 건축 벽돌들 입"
"니다. 위에서 언급했듯이, 노드는 다양한 특수 기능을 실행할 수 있습니다. 하지"
"만, 주어진 노드들은 항상 이러한 성질들을 가집니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:35
msgid "It has a name."
msgstr "이름이 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:36
msgid "It has editable properties."
msgstr "편집할 수 있는 속성들을 갖고 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:37
msgid "It can receive a callback to process every frame."
msgstr "모든 프레임을 처리하기 위한 콜백을 수신할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:38
msgid "It can be extended (to have more functions)."
msgstr "(더 많은 기능을 위해) 확장될 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:39
msgid "It can be added to another node as a child."
msgstr "다른 노드에 자식으로 추가될 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:43
msgid ""
"The last one is important. Nodes can have other nodes as children. When "
"arranged in this way, the nodes become a **tree**."
msgstr ""
"마지막이 중요합니다. 노드는 다른 노드를 자식으로 가질 수 있습니다. 이런 식으"
"로 배열된다면, 노드들은 **트리** 형태가 됩니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:46
msgid ""
"In Godot, the ability to arrange nodes in this way creates a powerful tool "
"for organizing projects. Since different nodes have different functions, "
"combining them allows for the creation of more complex functions."
msgstr ""
"Godot에서, 이런 방식으로 노드들을 배열하는 것은 프로젝트를 조직화하기에 강력"
"한 도구를 만듭니다. 각각의 노드들이 다른 기능을 가지고 있기에, 그들을 묶는 것"
"으로 훨씬 복잡한 기능을 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:50
msgid ""
"Don't worry if this doesn't click yet. We will continue to explore this over "
"the next few sections. The most important fact to remember for now is that "
"nodes exist and can be arranged this way."
msgstr ""
"이해하지 못해도 걱정하지 마세요. 우리는 몇 가지 섹션에서 계속 이것에 대해 알"
"아볼 것입니다. 여기서 기억할 점은 노드가 있다는 것과 그것이 서로 배열될 수 있"
"는 점입니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:55
msgid "Scenes"
msgstr "씬(Scenes)"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:59
msgid ""
"Now that the concept of nodes has been defined, the next logical step is to "
"explain what a Scene is."
msgstr ""
"이제 노드의 개념이 정리되었으니, 다음 이론은 씬이 무엇인가에 대해 설명해 보겠"
"습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:62
msgid ""
"A scene is composed of a group of nodes organized hierarchically (in tree "
"fashion). Furthermore, a scene:"
msgstr ""
"씬은 계층적으로 (트리 형식으로) 조직된 노드 그룹으로 구성됩니다. 또한 씬은:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:65
msgid "always has one root node."
msgstr "항상 하나의 루트 노드를 가집니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:66
msgid "can be saved to disk and loaded back."
msgstr "디스크에 저장하고 다시 불러올 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:67
msgid "can be *instanced* (more on that later)."
msgstr "*인스턴스(Instance)* 할 수 있습니다 (더 자세한 점은 나중에)."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:69
msgid ""
"Running a game means running a scene. A project can contain several scenes, "
"but for the game to start, one of them must be selected as the main scene."
msgstr ""
"게임을 실행한다는 것은 씬을 실행한다는 것입니다. 한 프로젝트는 여러 씬 들로 "
"이루어지지만, 게임을 시작하면, 하나의 씬만 메인 씬으로 선택됩니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:72
msgid ""
"Basically, the Godot editor is a **scene editor**. It has plenty of tools "
"for editing 2D and 3D scenes as well as user interfaces, but the editor is "
"based on the concept of editing a scene and the nodes that compose it."
msgstr ""
"기본적으로 Godot 에디터는 **씬 에디터** 입니다. 2D와 3D 씬을 편집하기 위한 도"
"구들과 사용자 인터페이스들이 많이 있지만, 에디터는 씬을 편집하는 것과 씬을 구"
"성하는 노드들이란 개념을 기반으로 둡니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:77
msgid "Creating a new project"
msgstr "새 프로젝트 만들기"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:79
msgid ""
"Let's make these abstract concepts more concrete with an example. Following "
"a long tradition in tutorials, we'll start with a \"Hello World\" project. "
"This will introduce us to using the editor."
msgstr ""
"예제를 통해 이런 추상적인 개념들을 더 구체화 시켜봅시다. 튜토리얼의 오랜 전통"
"에 따라, 우리는 \"Hello World\" 프로젝트를 시작할 겁니다. 이를 통해 에디터를 "
"사용하는 법을 설명하겠습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:83
msgid ""
"If you run the Godot executable outside of a project, the Project Manager "
"appears. This helps developers manage their projects."
msgstr ""
"프로젝트 외부에서 Godot 실행 파일을 실행하면, 프로젝트 매니저가 뜹니다. 이걸"
"로 개발자들은 프로젝트들을 관리할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:88
msgid ""
"To create a new project, click the \"New Project\" option. Choose and create "
"a path for the project and specify the project name \"New Project\":"
msgstr ""
"새 프로젝트를 만드려면, \"새 프로젝트\" 버튼을 누르세요. 프로젝트를 만들 경로"
"를 고르고 프로젝트 명을 \"새 프로젝트\" 로 지정하세요:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:94
#: ../../docs/getting_started/editor/external_editor.rst:32
#: ../../docs/development/compiling/compiling_with_mono.rst:143
msgid "Editor"
msgstr "에디터"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:96
msgid ""
"Once you've created the \"New Project\", then open it. This will open the "
"Godot editor:"
msgstr ""
"\"새 프로젝트\"를 만들면, 프로젝트를 엽니다. 그러면 Godot 에디터가 켜질 것입"
"니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:101
msgid ""
"As mentioned before, making games in Godot feels like being in a kitchen, so "
"let's open the refrigerator and add some fresh nodes to the project. We'll "
"begin with a \"Hello World\" message that we'll put on the screen."
msgstr ""
"앞에서 말했듯이, Godot로 게임을 만드는 것은 주방에서 요리하는 느낌입니다, 그"
"렇다면 한번 냉장고를 열고 프로젝트에 신선한 노드들을 추가해 봅시다. 실행을 누"
"르면 \"Hello World!\"가 화면에 나오게 할 것입니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:106
msgid ""
"To do this, press the \"New Node\" button (which looks like a plus symbol):"
msgstr ""
"그러기 위해, \"새 노드\" 버튼을 누르세요 (더하기 아이콘처럼 생겼습니다):"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:110
msgid ""
"This will open the Create Node dialog, showing the long list of nodes that "
"can be created:"
msgstr "그러면 당신이 만들 수 있는 긴 노드 대화 상자가 나옵니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:115
msgid ""
"From there, select the \"Label\" node first. Searching for it is probably "
"the fastest way:"
msgstr ""
"거기서, \"Label\" 노드를 먼저 선택하세요. 검색으로 더 빨리 찾을 수도 있습니"
"다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:120
msgid "And finally, create the Label! A lot happens when Create is pressed:"
msgstr ""
"그리고 마침내, Label을 생성합니다! 생성 버튼을 누르는 순간 많은 작업이 이루어"
"집니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:124
msgid ""
"First of all, the scene changes to the 2D editor (because Label is a 2D Node "
"type), and the Label appears, selected, at the top left corner of the "
"viewport."
msgstr ""
"먼저, 씬이 2D 에디터로 바뀝니다 (Label은 2D 노드 타입이기 때문입니다), 그리"
"고 Label이 선택 된 채로, 뷰포트의 왼쪽 위에 보입니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:127
msgid ""
"The node appears in the scene tree editor (box in the top right corner), and "
"the label properties appear in the Inspector (box in the bottom right "
"corner)."
msgstr ""
"노드는 씬 트리 에디터에 나타납니다 (오른쪽 위 상자), 그리고 라벨 속성은 인스"
"펙터에 나타납니다 (오른쪽 아래 상자)."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:131
msgid ""
"The next step will be to change the \"Text\" Property of the label. Let's "
"change it to \"Hello World\":"
msgstr ""
"다음 작업은 라벨 내의 \"Text\" 속성을 바꾸는 것입니다. \"Hello, World!\" 라"
"고 입력합니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:136
msgid ""
"Ok, everything's ready to run the scene! Press the PLAY SCENE Button on the "
"top bar (or hit F6):"
msgstr ""
"오케이, 씬을 실행할 준비를 마쳤습니다! 위 버튼들 중 씬 실행 버튼을 눌르세요 "
"(단축키로 F6을 누르세요):"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:141
msgid "Aaaand... Oops."
msgstr "그리고오... 이런."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:145
msgid ""
"Scenes need to be saved to be run, so save the scene to something like Hello."
"tscn in Scene -> Save:"
msgstr ""
"씬은 실행하려면 저장을 해야 합니다, 따라서 씬 -> 씬 저장에서 hello.tscn 같은 "
"이름의 씬을 저장합니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:150
msgid ""
"And here's when something funny happens. The file dialog is a special file "
"dialog, and only allows you to save inside the project. The project root is "
"\"res://\" which means \"resource path\". This means that files can only be "
"saved inside the project. For the future, when doing file operations in "
"Godot, remember that \"res://\" is the resource path, and no matter the "
"platform or install location, it is the way to locate where resource files "
"are from inside the game."
msgstr ""
"그러면 재미난 일이 발생합니다. 파일 대화 상자는 특별하기 때문에, 프로젝트 안"
"에만 저장할 수 있습니다. 프로젝트 경로는 \"res://\"로 \"리소스 경로\"를 의미"
"합니다. 즉, 파일은 프로젝트 안에만 저장할 수 있다는 것입니다. 나중에 Godot에"
"서 파일을 관리할 때 \"res://\"가 리소스 경로 임을 기억하세요, 그리고 이것으"
"로 어떤 플랫폼이나 설치 경로와 관계없이 게임 내에서 리소스 파일을 찾을 수 있"
"습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:158
msgid ""
"After saving the scene and pressing run scene again, the \"Hello World\" "
"demo should finally execute:"
msgstr ""
"씬을 저장하고 씬을 다시 실행하면, \"Hello, World\" 데모가 마침내 실행됩니다:"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:163
msgid "Success!"
msgstr "성공!"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:168
msgid "Configuring the project"
msgstr "프로젝트 구성하기"

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:170
msgid ""
"Ok, it's time to configure the project. Right now, the only way to run "
"something is to execute the current scene. Projects, however, may have "
"several scenes, so one of them must be set as the main scene. This is the "
"scene that will be loaded any time the project is run."
msgstr ""
"좋아요, 프로젝트를 구성할 때군요. 지금은 할 수 있는 일은 여기 있는 씬을 실행"
"하는 것 밖에 없습니다. 하지만, 프로젝트는 여러 씬을 가질 수 있기 때문에, 하나"
"를 메인 씬으로 지정해야 합니다. 언제나 프로젝트를 실행할 때 준비가 된 씬 말이"
"죠."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:175
msgid ""
"These settings are all stored in a project.godot file, which is a plaintext "
"file in win.ini format (for easy editing). There are dozens of settings that "
"you can change in this file to alter how a project executes. To simplify "
"this process, Godot provides a project settings dialog, which acts as a sort "
"of frontend to editing a project.godot file."
msgstr ""
"이 설정들은 모두 project.godot 파일 내에 들어갑니다, 이것은 win.ini 형식으로 "
"된 텍스트 문서입니다 (편집을 쉽게 하기 위한 겁니다). 당신이 프로젝트를 실행하"
"는 방법을 바꿀 수 있는 많은 설정들이 이 파일 안에 있습니다. 프로젝트를 간단"
"히 하기 위해, Godot는 project.godot 파일을 편집하기 위한 프로젝트 설정 대화 "
"상자를 제공합니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:181
msgid "To access that dialog, select Project -> Project Settings. Try it now."
msgstr "대화 상자에 들어가기 위해, 프로젝트 -> 프로젝트 설정으로 가세요."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:183
msgid ""
"Once the window opens, let's select a main scene. Locate the `Application/"
"Run/Main Scene` property and click on it to select 'Hello.tscn'."
msgstr ""
"창을 열었다면, 메인 씬을 선택합니다. 'Application/Run/Main Scene' 속성으로 가"
"서 'hello.tscn'을 선택합니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:188
msgid ""
"Now, with this change, when you press the regular Play button (or F5), this "
"scene will run, no matter which scene is actively being edited."
msgstr ""
"이제 변경했으니, 평범한 실행 버튼을 누를 때 (혹은F5를 누를 때), 어떤 씬을 편"
"집하는 도중이더라도, 설정한 씬이 실행될 것입니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:191
msgid ""
"The project settings dialog provides a lot of options that can be saved to a "
"project.godot file and shows their default values. If you change a value, a "
"tick is marked to the left of its name. This means that the property will be "
"saved to the project.godot file and remembered."
msgstr ""
"프로젝트 설정 대화 상자는 많은 설정을 제공하고 이것들을 project.godot 파일에 "
"저장하거나 기본 값으로 되돌릴 수 있습니다. 값을 변경하게 되면, 이름 왼쪽에 체"
"크 표시가 뜹니다. 이는 그 속성이 project.godot 파일에 저장되었다는 것입니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:196
msgid ""
"As a side note, it is also possible to add custom configuration options and "
"read them in at run-time using the :ref:`ProjectSettings "
"<class_ProjectSettings>` singleton."
msgstr ""
"또한, :ref:`ProjectSettings <class_ProjectSettings>` 싱글톤(singleton)을 사용"
"해서 런타임에 쓰이는 사용자 구성 옵션을 추가할 수도 있습니다."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:200
msgid "To be continued..."
msgstr "계속..."

#: ../../docs/getting_started/step_by_step/scenes_and_nodes.rst:202
msgid ""
"This tutorial talked about \"scenes and nodes\", but so far there has been "
"only *one* scene and *one* node! Don't worry, the next tutorial will expand "
"on that..."
msgstr ""
"이 튜토리얼은 \"씬과 노드\"에 대해서만, 그러니까 단 *하나의* 씬과 *하나의* 노"
"드만을 설명했습니다! 걱정하지 마세요, 다음 튜토리얼로 가서 개념을 확장시킬 겁"
"니다..."

#: ../../docs/getting_started/step_by_step/instancing.rst:4
msgid "Instancing"
msgstr "인스턴스(Instance)"

#: ../../docs/getting_started/step_by_step/instancing.rst:9
msgid ""
"Creating a single scene and adding nodes into it might work for small "
"projects, but as a project grows in size and complexity, the number of nodes "
"can quickly become unmanageable. To address this, Godot allows a project to "
"be separated into any number of scenes. This provides you with a powerful "
"tool that helps you organize the different components of your game."
msgstr ""
"하나의 씬에 노드를 넣는 걸로도 작은 프로젝트 정도는 작업할 수 있을 겁니다, 하"
"지만 프로젝트의 규모가 커지고 복잡하게 되면, 수많은 노드들을 다루기 어렵게 됩"
"니다. 이를 해결하기 위해, Godot는 프로젝트를 여러 개의 씬으로 나눌 수 있게 합"
"니다. 이것은 당신이 게임 내의 다른 구성 요소들을 결합할 수 있도록 하는 강력"
"한 도구입니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:15
msgid ""
"In :ref:`doc_scenes_and_nodes` you learned that a scene is a collection of "
"nodes organized in a tree structure, with a single node as the tree root."
msgstr ""
":ref:`doc_scenes_and_nodes`\\ 에서 씬은 노드들이 트리 형태로 결합된 모임이"
"고, 하나의 노드가 트리 루트라고 배웠습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:20
msgid ""
"You can create as many scenes as you like and save them to disk. Scenes "
"saved in this manner are called \"Packed Scenes\" and have a ``.tscn`` "
"filename extension."
msgstr ""
"당신은 원하는 만큼 많은 씬들을 만들 수 있습니다. 씬들은 \"압축된 씬(Packed "
"Scenes)\"이라 불리는 방법으로 저장되며 ``.tscn`` 파일 확장자 명을 갖습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:26
msgid ""
"Once a scene has been saved, it can be instanced into another scene as if it "
"were any other node."
msgstr ""
"하나의 씬이 저장되면, 다른 노드인 것처럼 다른 씬으로 인스턴스 될 수 있습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:31
msgid "In the above picture, Scene B was added to Scene A as an instance."
msgstr "위 그림에서 씬 B는 씬 A에 인스턴스로 추가되었습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:34
msgid "Instancing by example"
msgstr "예제를 통해 인스턴스하기"

#: ../../docs/getting_started/step_by_step/instancing.rst:36
msgid ""
"To learn how instancing works, let's start by downloading a sample project: :"
"download:`instancing.zip <files/instancing.zip>`."
msgstr ""
"어떻게 인스턴스가 이루어지는지 배우기 위해, 샘플 프로젝트를 다운로드 합니"
"다: :download:`instancing.zip <files/instancing.zip>`."

#: ../../docs/getting_started/step_by_step/instancing.rst:39
msgid ""
"Unzip this project anywhere you like. Then open Godot and add this project "
"to the project manager using the 'Import' button:"
msgstr ""
"원하는 위치에 이 프로젝트를 풀으세요. 그리고 Godot를 키고 프로젝트 매니저에"
"서 '가져오기' 버튼을 눌러 이 프로젝트를 추가하세요:"

#: ../../docs/getting_started/step_by_step/instancing.rst:44
msgid ""
"Browse to the folder you extracted and open the \"project.godot\" file you "
"can find inside it. After doing this, the new project will appear on the "
"list of projects. Edit the project by pressing the 'Edit' button."
msgstr ""
"당신이 추출한 폴더를 검색하고 그 안에 있는 \"project.godot\" 파일을 여세요. "
"그러면, 새 프로젝트가 프로젝트 목록에 뜰 것입니다. '편집' 버튼을 눌러 프로젝"
"트를 편집하세요."

#: ../../docs/getting_started/step_by_step/instancing.rst:48
msgid ""
"This project contains two scenes: \"Ball.tscn\" and \"Main.tscn\". The ball "
"scene uses a :ref:`RigidBody2D <class_RigidBody2D>` to provide physics "
"behavior while the main scene has a set of obstacles for the ball to collide "
"with (using :ref:`StaticBody2D <class_StaticBody2D>`)."
msgstr ""
"이 프로젝트는 두 개의 씬을 갖고 있습니다: \"Ball.tscn\" 과  \"Main.tscn\" 이"
"죠. 공 씬은 물리 행동을 주기 위해 :ref:`RigidBody2D <class_RigidBody2D>` 를 "
"사용하고 메인 씬은 :ref:`StaticBody2D <class_StaticBody2D>` 를 사용해서 공과 "
"충돌하는 장애물들이 있습니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:57
msgid "Open the ``Main`` scene, and then select the root node:"
msgstr "``Main`` 씬을 열고, 루트 노드를 선택하세요:"

#: ../../docs/getting_started/step_by_step/instancing.rst:61
msgid ""
"We want to add an instance of the ``Ball`` scene as a child of ``Main``. "
"Click the \"link\"-shaped button (its hover-text says \"Instance a scene "
"file as a Node.\") and select the ``Ball.tscn`` file."
msgstr ""
"우리는 ``Ball`` 씬을 ``Main`` 씬의 자식으로 인스턴스하여 추가할 겁니다. \"사"
"슬\" 모양 버튼을 누르세요 (커서를 올리면 \"씬 파일을 노드로 추가합니다.\" 라"
"고 뜹니다.) 그리고 ``Ball.tscn`` 파일을 선택하세요."

#: ../../docs/getting_started/step_by_step/instancing.rst:67
msgid ""
"The ball will be placed at the top-left corner of the screen area (this is "
"``(0, 0)`` in screen coordinates). Click and drag the ball somewhere near "
"the top-center of the scene:"
msgstr ""
"공은 화면 영역의 왼쪽 위에 자리 잡을 것입니다 (거기가 화면 좌표에서 ``(0, "
"0)``\\ 인 부분입니다). 공을 클릭하고 가운데 쯤에 드래그하세요:"

#: ../../docs/getting_started/step_by_step/instancing.rst:73
msgid "Press \"Play\" and watch the ball fall to the bottom of the screen:"
msgstr "\"재생\" 버튼을 눌러 공이 화면의 아래로 떨어지는지 확인하세요:"

#: ../../docs/getting_started/step_by_step/instancing.rst:78
msgid "Multiple instances"
msgstr "많은 인스턴스"

#: ../../docs/getting_started/step_by_step/instancing.rst:80
msgid ""
"You can add as many instances as you like to a scene, either by using the "
"\"Instance\" button again, or by clicking on the ball instance and pressing "
"\"Duplicate\" (Ctrl-D):"
msgstr ""
"당신은 씬에 원하는 만큼 많은 인스턴스를 추가할 수 있습니다, 다시 \"인스턴스"
"\" 버튼을 누르거나, 공 인스턴스를 클릭하고 \"복사\" (Ctrl-D)를 눌러서 말이죠:"

#: ../../docs/getting_started/step_by_step/instancing.rst:86
msgid "Run the scene again and all of the balls will fall."
msgstr "씬을 다시 실행시키면 모든 공들이 떨어질 겁니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:91
msgid "Editing instances"
msgstr "인스턴스 편집하기"

#: ../../docs/getting_started/step_by_step/instancing.rst:93
msgid ""
"Open the ``Ball`` scene and change the ``Bounce`` property in the Inspector "
"to `1`. Press \"Play\" and notice that all of the instanced balls are now "
"much more bouncy. Because the instanced balls are based on the saved scene, "
"changes to that scene will affect all instances."
msgstr ""
"``Ball`` 씬을 열고 인스펙터 내에 있는 ``Bounce`` 속성을 `1`\\ 로 변경하세요. "
"\"재생\"을 누르면 모든 인스턴스된 공들이 더 많이 튀어 오르는 것에 주목하세"
"요. 인스턴스된 공들은 저장된 씬을 기반으로 두기 때문에, 그 씬에 변화를 준다"
"면 씬의 인스턴스에 영향을 줍니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:98
msgid ""
"You can also adjust individual instances. Set the bounce value back to "
"``0.5`` and then in the ``Main`` scene, select one of the instanced balls. "
"Set its ``Bounce`` to ``1`` and press \"Play\"."
msgstr ""
"또한 각각의 인스턴스들도 조절할 수 있습니다. Bounce 값을 ``0.5``\\ 로 돌려 놓"
"고 ``Main`` 씬으로 돌아간 다음, 인스턴스된 공들 중 하나를 선택하세요. 그것의 "
"``Bounce`` 값을 ``1``\\ 로 맞추고 \"재생\"을 누르세요."

#: ../../docs/getting_started/step_by_step/instancing.rst:104
msgid ""
"Notice that a grey \"revert\" button appears next to the adjusted property. "
"When this button is present, it means you modified a property in the "
"instanced scene to override its value in the saved scene. Even if that "
"property is modified in the original scene, the custom value will remain. "
"Pressing the revert button will restore the property to the value in the "
"saved scene."
msgstr ""
"조절된 속성 옆에 회색 \"새로고침\" 버튼이 나타난 것에 주목하세요. 이 버튼이 "
"있다는 것은, 당신이 인스턴스된 씬의 속성을 수정하여 저장된 씬의 값을 무시하"
"게 만든 것입니다. 비록 그 속성이 원래 씬에서 수정되더라도, 사용자 지정 값은 "
"유지됩니다. 새로고침 버튼을 눌러 저장된 씬의 값으로 속성을 복원시킬 수 있을 "
"것입니다."

#: ../../docs/getting_started/step_by_step/instancing.rst:112
#: ../../docs/getting_started/step_by_step/signals.rst:320
msgid "Conclusion"
msgstr "결론"

#: ../../docs/getting_started/step_by_step/instancing.rst:114
msgid ""
"Instancing can be useful when you want to create many copies of the same "
"object. It is also possible to create instances in code by using GDScript, "
"see :ref:`doc_instancing_continued`."
msgstr ""
"인스턴스는 많은 양의 오브젝트 복사본을 만들 때 유용합니다. GDScript를 사용해"
"서도 인스턴스를 만들 수 있습니다, :ref:`doc_instancing_continued`\\ 를 참고하"
"세요."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:4
msgid "Instancing (continued)"
msgstr "인스턴스(계속)"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:7
msgid "Recap"
msgstr "요약"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:9
msgid "Instancing has many handy uses. At a glance, with instancing you have:"
msgstr ""
"인스턴스는 매우 다양하게 쓰입니다. 인스턴스를 통해 무엇을 할 수 있는지 간단"
"히 살펴봅시다:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:11
msgid "The ability to subdivide scenes and make them easier to manage."
msgstr "관리하기 편하게 하기 위해 씬들을 여러 하위 객체로 나눌 수 있는 것."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:12
msgid "A tool to manage and edit multiple node instances at once."
msgstr "한번에 여러 노드 인스턴스를 다루고 편집할 수 있는 도구."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:13
msgid ""
"A way to organize and embed complex game flows or even UIs (in Godot, UI "
"Elements are nodes, too)."
msgstr ""
"복잡한 게임 플로우나 심지어는 UI를 구조화하고 내장하는 방법 (Godot에서는 UI"
"의 원소들마저도 노드입니다)."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:17
msgid "Design language"
msgstr "디자인 언어"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:19
msgid ""
"But the greatest strength that comes with instancing scenes is that it works "
"as an excellent design language. This is pretty much what distinguishes "
"Godot from all the other engines out there. Godot was designed from the "
"ground up around this concept."
msgstr ""
"씬을 인스턴스하는 것의 가장 강력한 장점은 디자인 언어와 아주 잘 맞는다는 것입"
"니다. 이것이 사실상 Godot와 다른 알려진 엔진들을 구분하는 부분입니다. Godot"
"는 애초에 바닥부터 이러한 컨셉으로 디자인되었습니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:24
msgid ""
"When making games with Godot, the recommended approach is to dismiss most "
"common design patterns, such as MVC or Entity-Relationship diagrams, and "
"instead think about your scenes in a more natural way. Start by imagining "
"the visible elements in your game, the ones that can be named not just by a "
"programmer, but by anyone."
msgstr ""
"Godot로 게임을 만들 때에는 통상적으로 쓰이는 디자인 패턴들 (MVC 혹은 개체-관"
"계 다이어그램 등) 을 버리고 씬을 좀 더 자연스럽게 바라보기를 권장합니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:30
msgid "For example, here's how a simple shooter game could be imagined:"
msgstr ""
"예를 들자면 우리는 간단한 슈팅 게임을 다음과 같이 상상해볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:34
msgid ""
"You can come up with a diagram like this for almost any kind of game. Write "
"down the parts of the game that you can visualize, and then add arrows to "
"represent ownership of one component by another."
msgstr ""
"무슨 게임을 디자인하든, 위와 같은 다이어그램을 그릴 수 있을 것입니다. 게임에"
"서 시각화할 수 있는 부분들을 쭉 적어보고, 각 컴포넌트들의 소유권을 나타내주"
"기 위한 화살표를 추가해줍니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:38
msgid ""
"Once you have a diagram like this, the recommended process for making a game "
"is to create a scene for each element listed in the diagram. You'll use "
"instancing (either by code or directly in the editor) for the ownership "
"relationships."
msgstr ""
"다이어그램이 완성되었다면 게임을 만들 때 다이어그램에 있는 요소들에 대응되는 "
"씬을 만들기를 권장합니다. 여기서 (코드를 사용해서, 아니면 에디터에서 직접) 인"
"스턴스를 사용할 것입니다, 소유 관계를 위해서 말입니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:42
msgid ""
"A lot of time spent in programming games (or software in general) is on "
"designing an architecture and fitting game components to that architecture. "
"Designing based on scenes replaces that approach and makes development much "
"faster and more straightforward, allowing you to concentrate on the game "
"logic itself. Because most game components map directly to a scene, using a "
"design based on scene instantiation means little other architectural code is "
"needed."
msgstr ""
"게임을 프로그래밍할 때 (혹은 일반적으로 소프트웨어를 짤 때) 가장 오래 걸리는 "
"부분은 구조를 디자인하고 게임의 컴포넌트들을 그 구조에 알맞게 끼워 넣는 것입"
"니다. 이 방법을 대체하는 것으로 씬을 기반으로 디자인하는 것은 게임의 논리 자"
"체에 신경 쓸 수 있게 되어 개발을 좀 더 빠르고, 간단하게 만듭니다. 대부분의 게"
"임 컴포넌트가 그대로 씬이 되기 때문에 씬 인스턴스를 사용하게 되면 구조 디자인"
"에 따른 구조적인 코드가 딱히 필요하지 않기 때문입니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:48
msgid ""
"Let's take a look at one more, somewhat more complex, example of an open-"
"world type game with lots of assets and nested elements:"
msgstr ""
"좀 더 복잡한 예시를 들어보겠습니다. 한 번 에셋들도 많고, 중첩된 원소들이 많"
"은 오픈월드 게임을 살펴보죠:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:53
msgid ""
"Take a look at the room element. Let's say we started there. We could make a "
"couple of different room scenes, with different arrangements of furniture "
"(also scenes) in them. Later, we could make a house scene, connecting rooms "
"to make up its interior."
msgstr ""
"방 원소를 살펴봅시다. 우리가 시작하는 부분에 대해 말해봅시다. 우리는 가구 배"
"치를 달리하여 서로 다른 두 가지의 방 씬을 만들 수 있습니다. 나중에는, 방들을 "
"연결해서 집 씬을 만들 수도 있습니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:58
msgid ""
"Then, we could make a citadel scene, which is made out of many instanced "
"houses. Then, we could start working on the world map terrain, adding the "
"citadel onto it."
msgstr ""
"그런 뒤, 많은 인스턴스된 집들로 이루어진 성 씬을 만들 수 있습니다. 그리고, 월"
"드 맵 지형에 성을 추가하는 작업을 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:62
msgid ""
"Later, we could create scenes that represent guards (and other NPCs) and add "
"them to the citadel as well. As a result, they would be indirectly added to "
"the overall game world."
msgstr ""
"나중에는, 경호원이나 다른 NPC들의 씬을 만들고 성에 추가 할 수 있습니다. 그 결"
"과, 그것들은 게임 세상에 간접적으로 추가됩니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:66
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instance more scenes. Furthermore, the editor UI is "
"designed to be user friendly for programmers and non-programmers alike. A "
"typical team development process can involve 2D or 3D artists, level "
"designers, game designers, and animators, all working with the editor "
"interface."
msgstr ""
"Godot라면, 당신은 씬을 만들고 그것을 인스턴스하면 되니까 작업을 쉽게 반복할 "
"수 있습니다. 게다가, 에디터 UI는 프로그래머나 비 프로그래머에게도 친근하게 디"
"자인 되었습니다. 전형적인 개발 팀은 2D나 3D 아티스트, 레벨 디자이너, 게임 디"
"자이너, 애니메이터를 포함하지만, 모두가 이 에디터 내에서 작업 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:73
msgid "Information overload!"
msgstr "정보가 너무 많아요!"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:75
msgid ""
"This has been a lot of high level information dropped on you all at once. "
"However, the important part of this tutorial was to create an awareness of "
"how scenes and instancing are used in real projects."
msgstr ""
"많은 정보들을 당신이 한번에 이해하긴 어려울 겁니다. 하지만 이 튜토리얼의 핵심"
"은 씬이 프로젝트에서 씬과 인스턴스가 어떻게 이용되는지를 알면 되는 것입니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:79
msgid ""
"Everything discussed here will become second nature to you once you start "
"making games and putting these concepts into practice. For now, don't worry "
"about it too much, and go on to the next tutorial!"
msgstr ""
"여기에서 다룬 모든 내용은 게임을 처음 만들게 되면서 자연스럽게 익히게 될 것입"
"니다. 지금은, 너무 걱정하지 마시고, 다음 튜토리얼로 넘어갑시다!"

#: ../../docs/getting_started/step_by_step/scripting.rst:4
#: ../../docs/getting_started/scripting/index.rst:2
#: ../../docs/tutorials/networking/http_request_class.rst:22
msgid "Scripting"
msgstr "스크립팅(Scripting)"

#: ../../docs/getting_started/step_by_step/scripting.rst:9
msgid ""
"Before Godot 3.0, the only choice for scripting a game was to use :ref:"
"`doc_gdscript`. Nowadays, Godot has four (yes, four!) official languages and "
"the ability to add extra scripting languages dynamically!"
msgstr ""
"Godot 3.0 이전에는, 스크립팅 하는 법이 :ref:`doc_gdscript` 뿐 이었습니다. 지"
"금은, Godot는 4개를 (그래요, 4개!) 공식 언어로 갖고 있고 추가로 스크립트 언어"
"를 추가하는 기능도 있습니다!"

#: ../../docs/getting_started/step_by_step/scripting.rst:13
msgid ""
"This is great, mostly due to the large amount of flexibility provided, but "
"it also makes our work supporting languages more difficult."
msgstr ""
"이것은 대단합니다, 왜냐하면 큰 유연성을 제공해주기 때문입니다. 하지만 우리가 "
"여러가지 언어를 지원하는 것을 더 어렵게 만들기는 합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:16
msgid ""
"The \"main\" languages in Godot, though, are GDScript and VisualScript. The "
"main reason to choose them is their level of integration with Godot, as this "
"makes the experience smoother; both have slick editor integration, while C# "
"and C++ need to be edited in a separate IDE. If you are a big fan of "
"statically typed languages, go with C# and C++ instead."
msgstr ""
"Godot에서 \"메인\" 언어는 GDScript와 VisualScript입니다. 이들이 선택된 주된 "
"이유는 Godot와 통합 능력이 좋기 때문입니다, 둘다 기본 에디터에서 매끄럽게 사"
"용할 수 있습니다, 반면 C#과 C++는 별도의 IDE에서 편집해야 합니다. 당신이 정"
"적 언어를 좋아한다면, C#과 C++을 선택하세요."

#: ../../docs/getting_started/step_by_step/scripting.rst:22
#: ../../docs/getting_started/scripting/gdscript/index.rst:2
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:114
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:129
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:142
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:153
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:161
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:180
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:223
msgid "GDScript"
msgstr "GDScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:24
msgid ""
":ref:`doc_gdscript` is, as mentioned above, the main language used in Godot. "
"Using it has some positive points compared to other languages due to its "
"high integration with Godot:"
msgstr ""
":ref:`doc_gdscript` 는 앞에서 말했듯, Godot에서 사용되는 메인 언어입니다. 이 "
"언어는 다른 언어들에 비해 Godot와의 높은 통합성으로 인해 갖는 장점이 있습니"
"다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:28
msgid ""
"It's simple, elegant, and designed to be familiar for users of other "
"languages such as Lua, Python, Squirrel, etc."
msgstr ""
"간단하고, 우아하고, 그리고 디자인 면에서도 Lua, Python, Squirrel 등과 같은 다"
"른 언어들과 비슷합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:29
msgid "Loads and compiles blazingly fast."
msgstr "매우 빠르게 불러오고 컴파일됩니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:30
msgid ""
"The editor integration is a pleasure to work with, with code completion for "
"nodes, signals, and many other items pertaining to the scene being edited."
msgstr ""
"에디터 통합은 노드, 시그널, 그리고 작업 중인 씬과 관련된 많은 항목들의 코드 "
"완성을 작업하는 즐거움입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:31
msgid ""
"Has vector types built-in (such as Vectors, transforms, etc.), making it "
"efficient for heavy use of linear algebra."
msgstr ""
"(Vectors, transforms 등과 같은) 많은 벡터 타입을 지니고 있어서, 선형 대수를 "
"많이 사용하는데 효율적입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:32
msgid ""
"Supports multiple threads as efficiently as statically typed languages - one "
"of the limitations that made us avoid VMs such as Lua, Squirrel, etc."
msgstr ""
"정적 언어처럼 효율적인 여러 스레드를 지원합니다 - 이것이 Lua, Squirrel 등의 "
"가상 머신을 피하게 만든 이유입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:33
msgid ""
"Uses no garbage collector, so it trades a small bit of automation (most "
"objects are reference counted anyway), by determinism."
msgstr ""
"가비지 컬렉터를 쓰지 않아서, 작업이 약간의 자동화를 버리는 대신 결정론적으로 "
"처리됩니다 (어쨌든 대부분의 오브젝트들은 참조 카운트됩니다)."

#: ../../docs/getting_started/step_by_step/scripting.rst:34
msgid ""
"Its dynamic nature makes it easy to optimize sections of code in C++ (via "
"GDNative) if more performance is required, all without recompiling the "
"engine."
msgstr ""
"더 많은 퍼포먼스가 필요하다면, 엔진을 전부 다시 컴파일하지 않아도 (GDNative"
"를 통해) C++의 코드 섹션을 쉽게 최적화할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:36
msgid ""
"If you're undecided and have experience with programming, especially "
"dynamically typed languages, go for GDScript!"
msgstr ""
"아직 프로그래밍에 경험이 없고 특히 동적 언어를 정하지 않았다면, GDScript로 시"
"작해보세요!"

#: ../../docs/getting_started/step_by_step/scripting.rst:40
#: ../../docs/getting_started/scripting/visual_script/index.rst:2
msgid "VisualScript"
msgstr "VisualScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:42
msgid ""
"Beginning with 3.0, Godot offers :ref:`Visual "
"Scripting<doc_what_is_visual_script>`. This is a typical implementation of a "
"\"blocks and connections\" language, but adapted to how Godot works."
msgstr ""
"3.0을 시작하면서, Godot는 :ref:`Visual Scripting<doc_what_is_visual_script>` "
"을 제공합니다. 이것은 \"블록과 연결\" 언어의 일반적인 구현이지만, Godot의 작"
"동 방식에 맞게 조정됬습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:46
msgid ""
"Visual scripting is a great tool for non-programmers, or even for "
"experienced developers who want to make parts of the code more accessible to "
"others, like game designers or artists."
msgstr ""
"Visual scripting은 비 프로그래머 뿐만 아니라 경험 있는 프로그래머도 게임 디자"
"이너나 아티스트와 같은 사람들이 코드 일부분을 보기 쉽게 만들어 주는 멋진 도구"
"입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:50
msgid ""
"It can also be used by programmers to build state machines or custom visual "
"node workflows - for example, a dialogue system."
msgstr ""
"프로그래머에게는 이걸로 상태 시스템이나 사용자 지정 시각적 노드 워크플로우를 "
"만들 수도 있습니다 - 예를 들면 대화 시스템이죠."

#: ../../docs/getting_started/step_by_step/scripting.rst:55
msgid ".NET / C#"
msgstr ".NET / C#"

#: ../../docs/getting_started/step_by_step/scripting.rst:57
msgid ""
"As Microsoft's C# is a favorite amongst game developers, we have added "
"official support for it. C# is a mature language with tons of code written "
"for it, and support was added thanks to a generous donation from Microsoft."
msgstr ""
"마이크로소프트의 C#은 게임 개발자들 사이에서 사랑받는 언어이기에, 우리는 이"
"걸 공식 지원합니다. C#은 많은 코드들로 작성된 완전한 언어로, 마이크로소프트"
"의 풍부한 도움에 우리는 지원하게 되었습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:62
msgid ""
"It has an excellent tradeoff between performance and ease of use, although "
"one must be aware of its garbage collector."
msgstr ""
"비록 가비지 컬랙터에 대해 알아야 하지만, 이것은 퍼포먼스와 사용의 용이성 두가"
"지를 절충하고 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:65
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory any third-party .NET library or framework can be used for scripting "
"in Godot, as well as any Common Language Infrastructure-compliant "
"programming language, such as F#, Boo or ClojureCLR. In practice however, C# "
"is the only officially supported .NET option."
msgstr ""
"Godot가 `Mono <https://mono-project.com>`_ .NET 런타임을 사용하기 때문에, 이"
"론적으로 어떤 제 3자 .NET 라이브러리나 프레임워크라도 Godot의 스크립트에 사용"
"될 수 있고, F#, Boo, ClojureCLR와 같은 공용 언어 인프라 호환 프로그래밍 언어 "
"또한 가능합니다. 하지만, 실제로는 C#만 공식으로 지원하는 .NET 옵션입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:71
msgid "GDNative / C++"
msgstr "GDNative / C++"

#: ../../docs/getting_started/step_by_step/scripting.rst:73
msgid ""
"Finally, one of our brightest additions for the 3.0 release: GDNative allows "
"scripting in C++ without needing to recompile (or even restart) Godot."
msgstr ""
"마침내 3.0 출시에 가장 빛나는 추가 요소: GDNative는 Godot를 다시 컴파일 하지 "
"않아도 (심지어 재시작을 하지않아도) C++에서 스크립팅 할 수 있게 만듭니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:77
msgid ""
"Any C++ version can be used, and mixing compiler brands and versions for the "
"generated shared libraries works perfectly, thanks to our use of an internal "
"C API Bridge."
msgstr ""
"모든 C++버전을 사용할 수 있으며, 내부 C API Bridge를 사용하여 생성된 공유 라"
"이브러리의 컴파일러 브랜드와 버전을 완벽하게 혼합할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:81
msgid ""
"This language is the best choice for performance and does not need to be "
"used throughout an entire game, as other parts can be written in GDScript or "
"Visual Script. However the API is clear and easy to use as it resembles, "
"mostly, Godot's actual C++ API."
msgstr ""
"이 언어는 훌륭한 성능을 가지며, GDScript또는 VisualScript을 통해 다른 부분을 "
"작성할 수 있으므로 게임 전체에서 사용할 필요는 없습니다. 그러나 이 API는 명확"
"하고 사용하기 쉽습니다. 이 API의 대부분은 Godot의 실제 C++API와 유사하기 때문"
"이죠."

#: ../../docs/getting_started/step_by_step/scripting.rst:86
msgid ""
"More languages can be made available through the GDNative interface, but "
"keep in mind we don't have official support for them."
msgstr ""
"GDNative 인터페이스를 통해 더 많은 언어를 사용할 수 있지만, 이 인터페이스에 "
"대한 공식적인 지원은 없습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:90
msgid "Scripting a scene"
msgstr "씬 스크립팅 하기"

#: ../../docs/getting_started/step_by_step/scripting.rst:92
msgid ""
"For the rest of this tutorial we'll set up a GUI scene consisting of a "
"button and a label, where pressing the button will update the label. This "
"will demonstrate:"
msgstr ""
"본 튜토리얼의 나머지 부분에서는 버튼과 레이블로 구성된 GUI 씬을 설정합니다. "
"여기서 버튼을 누르면 라벨이 업데이트됩니다. 이를 통해 다음을 증명할 수 있습니"
"다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:96
msgid "Writing a script and attaching it to a node."
msgstr "스크립트를 작성하여 노드에 연결함."

#: ../../docs/getting_started/step_by_step/scripting.rst:97
msgid "Hooking up UI elements via signals."
msgstr "시그널을 통해 UI 요소들을 연결함."

#: ../../docs/getting_started/step_by_step/scripting.rst:98
msgid "Writing a script that can access other nodes in the scene."
msgstr "씬의 다른 노드에 액세스 할 수 있는 스크립트를 작성함."

#: ../../docs/getting_started/step_by_step/scripting.rst:100
msgid ""
"Before continuing, please make sure to read the :ref:`doc_gdscript` "
"reference. It's a language designed to be simple, and the reference is "
"short, so it will not take more than a few minutes to get an overview of the "
"concepts."
msgstr ""
"계속하기 전에 :ref:`doc_gdscript` 레퍼런스를 반드시 읽어 보시기 바랍니다. 이 "
"언어는 간단하게 설계되었고, 참조가 짧기 때문에 개념을 파악하는 데 몇 분 정도 "
"밖에 걸리지 않습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:105
#: ../../docs/tutorials/physics/kinematic_character_2d.rst:80
#: ../../docs/tutorials/animation/introduction_2d.rst:113
msgid "Scene setup"
msgstr "씬 설정하기"

#: ../../docs/getting_started/step_by_step/scripting.rst:107
msgid ""
"Use the \"Add Child Node\" dialogue accessed from the Scene tab (or by "
"pressing ``Ctrl+A``) to create a hierarchy with the following nodes:"
msgstr ""
"씬 탭에서 액세스 하는 \"하위 노드 추가\" 대화 상자를 사용하여 (아니면 ``Ctrl"
"+A`` 를 눌러), 다음 노드로 계층을 생성합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:110
msgid "Panel"
msgstr "패널(Panel)"

#: ../../docs/getting_started/step_by_step/scripting.rst:112
#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:141
msgid "Label"
msgstr "라벨(Label)"

#: ../../docs/getting_started/step_by_step/scripting.rst:113
msgid "Button"
msgstr "버튼(Button)"

#: ../../docs/getting_started/step_by_step/scripting.rst:115
msgid "The scene tree should look like this:"
msgstr "씬 트리는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:119
msgid ""
"Use the 2D editor to position and resize the Button and Label so that they "
"look like the image below. You can set the text from the Inspector tab."
msgstr ""
"2D 에디터를 사용하여 Button 과 Label을 아래 이미지와 같이 배치하고 크기를 조"
"정합니다. 인스펙터 탭에서 텍스트를 설정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:124
msgid "Finally, save the scene with a name such as ``sayhello.tscn``."
msgstr "마지막으로, ``sayhello.tscn`` 와 같은 이름으로 씬을 저장합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:129
msgid "Adding a script"
msgstr "스크립트 추가하기"

#: ../../docs/getting_started/step_by_step/scripting.rst:131
msgid ""
"Right click on the Panel node, then select \"Attach Script\" from the "
"context menu:"
msgstr ""
"패널 노드에서 마우스 오른쪽 버튼을 클릭하고, 메뉴에서 \"스크립트 붙이기\"를 "
"선택합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:136
msgid ""
"The script creation dialog will pop up. This dialog allows you to set the "
"script's language, class name, and other relevant options."
msgstr ""
"노드 스크립트 붙이기 대화 상자가 나타날 겁니다. 여기서 스크립트 언어, 클래스 "
"명 및 기타 관련 옵션을 설정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:139
msgid ""
"In GDScript, the file itself represents the class, so the class name field "
"is not editable."
msgstr ""
"GDScript에서 파일 자체는 클래스를 나타내므로 클래스 이름 필드는 편집이 불가능"
"합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:142
msgid ""
"The node we're attaching the script to is a panel, so the Inherits field "
"will automatically be filled in with \"Panel\". This is what we want, as the "
"script's goal is to extend the functionality of our panel node."
msgstr ""
"스크립트를 연결할 노드는 패널이므로 상속받는 위치는 \"Panel\"로 자동으로 채워"
"집니다. 스크립트의 목표가 패널 노드의 기능을 확장하는 것이기 때문에, 이것이 "
"우리가 원하는 것입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:146
msgid "Finally, enter a path name for the script and select Create:"
msgstr "마지막으로 스크립트 경로 이름을 입력하고 생성을 선택합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:150
msgid ""
"The script will then be created and added to the node. You can see this as "
"an \"Open script\" icon next to the node in the Scene tab, as well as in the "
"script property under Inspector:"
msgstr ""
"그런 다음 스크립트가 생성되어 노드에 추가됩니다. 이 아이콘은 씬 탭의 노드 옆"
"에 있는 \"스크립트 열기\" 아이콘 뿐만 아니라 인스펙터 아래에 스크립트 속성에"
"서도 볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:156
msgid ""
"To edit the script, select either of these buttons, both of which are "
"highlighted in the above image. This will bring you to the script editor, "
"where a default template will be included:"
msgstr ""
"스크립트를 편집하려면 위 이미지에 강조 표시된 두 버튼 중 하나를 선택합니다. "
"그러면 스크립트 에디터로 이동하고, 기본 템플릿이 나타납니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:161
msgid ""
"There's not much there. The ``_ready()`` function is called when the node, "
"and all its children, enters the active scene. **Note:** ``_ready()`` is not "
"the constructor; the constructor is instead ``_init()``."
msgstr ""
"안에는 많은 내용이 있지 않습니다. ``_ready()`` 함수는 노드와 모든 자식들이 활"
"성화된 씬으로 들어갈 때 호출됩니다. **참고:** ``_ready()`` 는 생성자가 아닙니"
"다. 대신에 생성자는 ``_init()`` 입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:166
msgid "The role of the script"
msgstr "스크립트의 역할"

#: ../../docs/getting_started/step_by_step/scripting.rst:168
msgid ""
"A script adds behavior to a node. It is used to control how the node "
"functions as well as how it interacts with other nodes: children, parent, "
"siblings, and so on. The local scope of the script is the node. In other "
"words, the script inherits the functions provided by that node."
msgstr ""
"스크립트는 노드에 동작을 추가합니다. 노드가 작동하는 방식뿐만 아니라 하위 노"
"드, 상위 노드, 형제 노드 등과 상호 작용하는 방식을 제어하는 데 사용됩니다. 스"
"크립트는 노드에게, 그 노드의 함수들을 상속해줍니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:176
msgid "Handling a signal"
msgstr "시그널 다루기"

#: ../../docs/getting_started/step_by_step/scripting.rst:178
msgid ""
"Signals are \"emitted\" when some specific kind of action happens, and they "
"can be connected to any function of any script instance. Signals are used "
"mostly in GUI nodes, although other nodes have them too, and you can even "
"define custom signals in your own scripts."
msgstr ""
"시그널은 특정한 종류의 작업이 발생할 때 \"방출(emit)\" 되며 스크립트 인스턴스"
"의 모든 기능에 연결될 수 있습니다. 시그널은 대부분 GUI노드에서 사용되며, 다"
"른 노드에도 시그널이 있고 사용자 스크립트에서 커스텀 시그널을 정의할 수도 있"
"습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:183
msgid ""
"In this step, we'll connect the \"pressed\" signal to a custom function. "
"Forming connections is the first part and defining the custom function is "
"the second part. For the first part, Godot provides two ways to create "
"connections: through a visual interface the editor provides or through code."
msgstr ""
"이 단계에서 우리는 \"pressed\" 시그널을 커스텀 기능에 연결할 겁니다. 먼저 연"
"결 형식을 지정한 후에 두 번째로 커스텀 기능을 정의합니다. Godot에서는 연결하"
"기 위한 2가지 방법을 제공합니다: 에디터에서 제공하는 시각적 인터페이스나 코드"
"를 통해 사용자 지정 기능에 연결할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:188
msgid ""
"While we will use the code method for the remainder of this tutorial series, "
"let's cover how the editor interface works for future reference."
msgstr ""
"이 튜토리얼 시리즈의 나머지 부분에서는 코드 메서드를 사용하겠습니다만, 나중"
"에 참고하기 위한 에디터 인터페이스가 어떻게 작동하는지에 대해서는 설명하겠습"
"니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:191
msgid ""
"Select the Button node in the scene tree and then select the \"Node\" tab. "
"Next, make sure that you have \"Signals\" selected."
msgstr ""
"씬 트리에서 버튼 노드를 고르고 \"노드\" 탭을 선택하세요. 그런 후, \"시그널"
"\"이 선택되어 있는지 확인하세요."

#: ../../docs/getting_started/step_by_step/scripting.rst:196
msgid ""
"If you then select \"pressed()\" under \"BaseButton\" and click the "
"\"Connect...\" button in the bottom right, you'll open up the connection "
"creation dialogue."
msgstr ""
"\"BaseButton\" 밑에 있는 \"pressed()\"를 고르고 오른쪽 아래 \"연결하기...\" "
"버튼을 누르신다면, 연결 생성 대화 상자가 열립니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:201
msgid ""
"In the bottom-left are the key things you need to create a connection: a "
"node which implements the method you want to trigger (represented here as a "
"NodePath) and the name of the method to trigger."
msgstr ""
"왼쪽 아래에 당신이 연결을 만드는데 필요한 핵심 사항이 있습니다: 사용하길 원하"
"는 메서드를 실행할 (NodePath로 정의된) 하나의 노드와 그 메서드의 이름입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:205
msgid ""
"The top-left section displays a list of your scene's nodes with the emitting "
"node's name highlighted in red. Select the \"Panel\" node here. When you "
"select a node, the NodePath at the bottom will automatically update to point "
"to a relative path from the emitting node to the selected node."
msgstr ""
"왼쪽 위 구역은 씬에 있는 노드들을 보여주며 신호를 내보내는(방출하는) 노드 이"
"름은 빨갛게 표시됩니다. \"Panel\" 노드를 선택해봅시다. 노드를 선택하면, 밑에 "
"NodePath가 자동으로 방출하는 노드부터 선택된 노드까지의 경로를 가리키기 위해 "
"자동으로 업데이트됩니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:210
msgid ""
"By default, the method name will contain the emitting node's name (\"Button"
"\" in this case), resulting in \"_on_[EmitterNode]_[signal_name]\". If you "
"do have the \"Make Function\" check button checked, then the editor will "
"generate the function for you before setting up the connection."
msgstr ""
"기본적으로, 메서드의 이름은 방출하는 노드의 이름에 포함되어서 "
"\"_on_[EmitterNode]_[signal_name]\"으로 표시됩니다 (이 경우에는 \"Button\"이"
"죠). 만일 \"함수 만들기\" 버튼이 체크되어 있다면, 에디터는 연결을 설정하기 전"
"에 함수를 생성할 겁니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:215
msgid ""
"And that concludes the guide on how to use the visual interface. However, "
"this is a scripting tutorial, so for the sake of learning, let's dive into "
"the manual process!"
msgstr ""
"그리고 이것으로 화면 인터페이스를 사용하는 법에 관한 강좌를 마칩니다. 하지"
"만, 이것은 스크립팅 튜토리얼이므로, 학습을 위해 수동 프로세스를 알아봅시다!"

#: ../../docs/getting_started/step_by_step/scripting.rst:219
msgid ""
"To accomplish this, we will introduce a function that is probably the most "
"used by Godot programmers: :ref:`Node.get_node() "
"<class_Node_method_get_node>`. This function uses paths to fetch nodes "
"anywhere in the scene, relative to the node that owns the script."
msgstr ""
"이것을 달성하기 위해서, 우리는 Godot 프로그래머들이 가장 잘 사용하는 함수를 "
"소개하겠습니다: :ref:`Node.get_node() <class_Node_method_get_node>`\\ 입니"
"다. 이 함수는 스크립트를 소유한 노드라면 씬 내 어느 위치라도 경로를 사용해서 "
"노드를 가져옵니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:224
msgid ""
"For the sake of convenience, delete everything underneath ``extends Panel``. "
"You will fill out the rest of the script manually."
msgstr ""
"편의상, ``extend Panel`` 아래에 있는 모든 것을 지우세요. 당신이 나머지를 수동"
"으로 채울 것입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:227
msgid ""
"Because the Button and Label are siblings under the Panel where the script "
"is attached, you can fetch the Button by typing the following underneath the "
"``_ready()`` function:"
msgstr ""
"버튼과 라벨은 스크립트가 붙어있는 패널의 자식이기 때문에, 밑의 ``_ready()`` "
"함수를 따라 타이핑해서 버튼을 가져올 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:244
msgid "Next, write a function which will be called when the button is pressed:"
msgstr "그런 다음 버튼을 누르면 호출되는 기능을 작성합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:259
msgid ""
"Finally, connect the button's \"pressed\" signal to ``_ready()`` by using :"
"ref:`Object.connect() <class_Object_method_connect>`."
msgstr ""
"마지막으로 버튼의 \"pressed\" 신호를 :ref:`Object.connect() "
"<class_Object_method_connect>`\\ 를 사용하여 ``_ready()``\\ 에 연결합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:275
msgid "The final script should look like this:"
msgstr "최종 스크립트는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:308
msgid ""
"Run the scene and press the button. You should get the following result:"
msgstr "씬을 실행하고 버튼을 누르면 다음과 같은 결과를 얻을 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:312
msgid "Why, hello there! Congratulations on scripting your first scene."
msgstr "어머, 안녕하세요! 첫번째 씬을 스크립팅 하신 것을 축하 드립니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:316
msgid ""
"A common misunderstanding regarding this tutorial is how ``get_node(path)`` "
"works. For a given node, ``get_node(path)`` searches its immediate children. "
"In the above code, this means that Button must be a child of Panel. If "
"Button were instead a child of Label, the code to obtain it would be:"
msgstr ""
"이 튜토리얼에 관한 흔한 오해는 ``get_node(path)`` 가 작동하는 방법입니다. 주"
"어진 노드의 경우, ``get_node(path)`` 는 직계 자식을 검색합니다. 위 코드에서 "
"버튼은 패널의 자식임을 의미합니다. 만일 버튼이 패널이 아닌 라벨의 하위 항목이"
"라면 얻게 될 코드는 다음과 같습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:334
msgid "Also, remember that nodes are referenced by name, not by type."
msgstr "또한 노드는 유형이 아닌 이름으로 참조됩니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:338
msgid ""
"The right-hand panel of the connect dialogue is for binding specific values "
"to the connected function's parameters. You can add and remove values of "
"different types."
msgstr ""
"연결 대화 상자의 오른쪽 패널은 특정 값을 연결된 함수의 매개변수에 바인딩 하"
"기 위한 것입니다. 다른 유형의 값을 추가하거나 제거할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:342
msgid ""
"The code approach also enables this with a 4th ``Array`` parameter that is "
"empty by default. Feel free to read up on the ``Object.connect`` method for "
"more information."
msgstr ""
"코드 접근도 기본적으로 비어 있는 4번째 ``배열`` 매개 변수를 사용하여 이를 가"
"능하게 합니다. 더 많은 정보를 원하시면 언제든지 ``Object.connect`` 방법에 대"
"해 읽어 보시기 바랍니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:4
msgid "Scripting (continued)"
msgstr "스크립팅(계속)"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:7
msgid "Processing"
msgstr "프로세싱(Processing)"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:9
msgid ""
"Several actions in Godot are triggered by callbacks or virtual functions, so "
"there is no need to write code that runs all the time."
msgstr ""
"Godot의 여러 작업은 콜백 또는 가상 함수에 의해 트리거 되므로, 항상 실행되는 "
"코드를 작성할 필요는 없습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:12
msgid ""
"However, it is still common to need a script to be processed on every frame. "
"There are two types of processing: idle processing and physics processing."
msgstr ""
"그러나 여전히 모든 프레임에서 스크립트를 처리해야 하는 경우가 많습니다. 프로"
"세싱에는 두가지 유형이 있습니다: 정적 프로세싱과 동적 프로세싱입니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:16
msgid ""
"Idle processing is activated when the method :ref:`Node._process() "
"<class_Node_method__process>` is found in a script. It can be turned off and "
"on with the :ref:`Node.set_process() <class_Node_method_set_process>` "
"function."
msgstr ""
"정적 프로세싱은 스크립트에서 :ref:`Node._process() "
"<class_Node_method__process>`\\ 라는 메서드가 발견되면 활성화됩니다. :ref:"
"`Node.set_process() <class_Node_method_set_process>`\\ 를 사용해서 이 기능을 "
"끄거나 켤 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:20
msgid ""
"This method will be called every time a frame is drawn, so it's fully "
"dependent on how many frames per second (FPS) the application is running at:"
msgstr ""
"이 메서드는 프레임을 들일 때 호출됩니다, 따라서 애플리케이션이 실행 중인 초"
"당 프레임 수 (FPS) 에 전적으로 의존합니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:37
msgid ""
"The delta parameter contains the time elapsed in seconds, as a floating "
"point, since the previous call to ``_process()``."
msgstr ""
"델타 매개 변수에는 이전 호출에서 ``_process()`` 로 이동한 이후 부터, 경과된 "
"시간을 유동적인 소수점인 초 단위로 나타냅니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:40
msgid ""
"This parameter can be used to make sure things always take the same amount "
"of time, regardless of the game's FPS."
msgstr ""
"이 매개 변수를 사용하면 게임의 초당 프레임 수와 관계 없이, 항상 동일한 시간"
"이 소요되도록 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:43
msgid ""
"For example, movement is often multiplied with a time delta to make movement "
"speed both constant and independent from the frame rate."
msgstr ""
"예를 들어 이동은 시간 델타를 곱해서 이동 속도를 일정하게 하는 동시에 프레임률"
"과 따로 독립시킵니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:46
msgid ""
"Physics processing with ``_physics_process()`` is similar, but it should be "
"used for processes that must happen before each physics step, such as "
"controlling a character. It always runs before a physics step and it is "
"called at fixed time intervals: 60 times per second by default. You can "
"change the interval from the Project Settings, under Physics -> Common -> "
"Physics Fps."
msgstr ""
"``_physics_process()`` 를 이용한 물리 처리는 이와 유사하지만, 이것은 캐릭터"
"를 조작하는 과정 같이, 각각의 물리 단계 이전에서 반드시 발생하는 과정에 사용"
"되어야 합니다. 이것은 항상 물리 단계 이전에 실행되며 고정된 시간 간격으로 호"
"출됩니다: 기본은 초당 60회 입니다. 프로젝트 설정의 Physics -> Common -> "
"Physics Fps에서 시간 간격을 변경할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:52
msgid ""
"The function ``_process()``, however, is not synced with physics. Its frame "
"rate is not constant and is dependent on hardware and game optimization. Its "
"execution is done after the physics step on single-threaded games."
msgstr ""
"그러나 ``_proceed()`` 함수는 물리와 동기화되지 않습니다. 프레임률이 일정하지 "
"않고 하드웨어와 게임 최적화에 의존하기 때문입니다. 이것은 단일 스레드 게임의 "
"물리 단계를 거친 후에 실행됩니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:55
msgid ""
"A simple way to test this is to create a scene with a single Label node, "
"with the following script:"
msgstr ""
"이것을 테스트하는 간단한 방법은, 다음 스크립트를 사용하여 단일 Label 노드로 "
"씬을 생성하는 것입니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:82
msgid "Which will show a counter increasing each frame."
msgstr "위 스크립트는 프레임 당 증가하는 카운터를 보여 줍니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:85
msgid "Groups"
msgstr "그룹(Groups)"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:87
msgid ""
"Nodes can be added to groups, as many as desired per node, and is a useful "
"feature for organizing large scenes. There are two ways to do this. The "
"first is from the UI, from the Groups button under the Node panel:"
msgstr ""
"노드는 노드당 원하는 수만큼 그룹에 추가할 수 있으며, 큰 씬을 구성하는 데 유용"
"합니다. 두가지 방법이 있습니다. 첫 번째 방법은 노드 패널 아래에 있는 그룹 버"
"튼의 UI에서 시작합니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:92
msgid ""
"And the second way is from code. One example would be to tag nodes which are "
"enemies:"
msgstr ""
"두 번째 방법은 코드를 사용하는 것입니다. 예를 들어 적으로 사용되는 노드에 태"
"그를 지정할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:110
msgid ""
"This way, if the player is discovered sneaking into a secret base, all "
"enemies can be notified about its alarm sounding by using :ref:`SceneTree."
"call_group() <class_SceneTree_method_call_group>`:"
msgstr ""
"이렇게 하면 플레이어가 비밀 기지에 몰래 들어간 것이 발견될 경우, :ref:"
"`SceneTree.call_group() <class_SceneTree_method_call_group>`\\ 을 사용하여 모"
"든 적에게 경보가 울린다는 사실을 알릴 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:127
msgid ""
"The above code calls the function ``player_was_discovered`` on every member "
"of the group ``enemies``."
msgstr ""
"위의 코드는 모든 ``enemies`` 의 ``player_was_discovered`` 함수를 호출합니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:130
msgid ""
"It is also possible to get the full list of ``enemies`` nodes by calling :"
"ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_method_get_nodes_in_group>`:"
msgstr ""
"또한 :ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_method_get_nodes_in_group>`\\ 을 호출하여 ``enemies`` 노드"
"의 전체 목록을 가져올 수도 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:143
msgid ""
"The :ref:`SceneTree <class_SceneTree>` class provides many useful methods, "
"like interacting with scenes, their node hierarchy and groups of nodes. It "
"allows you to easily switch scenes or reload them, to quit the game or pause "
"and unpause it. It even comes with interesting signals. So check it out if "
"you got some time!"
msgstr ""
":ref:`SceneTree<class_SceneTree>` 의 클래스는 씬 들과 노드 계층 및 노드 그룹"
"과의 상호 작용과 같은 다양한 유용한 방법들을 제공합니다. 이를 통해 씬 들을 쉽"
"게 전환하거나 다시 불러와서 게임을 종료하거나 일시 중지하거나 이를 해제할 수 "
"있습니다. 그것은 심지어 흥미로운 시그널을 동반합니다. 시간이 있으면 확인해 보"
"십시오!"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:151
#: ../../docs/tutorials/gui/custom_gui_controls.rst:171
msgid "Notifications"
msgstr "알림(Notifications)"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:153
msgid ""
"Godot has a system of notifications. These are usually not needed for "
"scripting, as it's too low-level and virtual functions are provided for most "
"of them. It's just good to know they exist. For example, you may add an :ref:"
"`Object._notification() <class_Object_method__notification>` function in "
"your script:"
msgstr ""
"Godot에는 알림(notification) 시스템이 있습니다. 보통은 스크립팅에 쓰이진 않습"
"니다, 너무 로우 레벨이며 대부분의 경우 가상 함수를 제공하기 때문이죠. 그냥 존"
"재한다는 것 만으로도 좋은 일입니다. 예를 들어 스크립트에 :ref:`Object."
"_notification() <class_Object_method__notification>` 함수를 추가할 수 있습니"
"다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:188
msgid ""
"The documentation of each class in the :ref:`Class Reference <toc-class-"
"ref>` shows the notifications it can receive. However, in most cases "
"GDScript provides simpler overrideable functions."
msgstr ""
":ref:`Class Reference <toc-class-ref>` 의 각 클래스에 대한 문서는 수신 가능"
"한 알림을 보여 줍니다. 그러나 대부분의 경우 GDScript가 보다 단순한 오버라이"
"딩 할 수 있는 함수들을 제공합니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:193
msgid "Overrideable functions"
msgstr "오버라이딩(Overriding) 가능한 함수들"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:195
msgid ""
"Such overrideable functions, which are described as follows, can be applied "
"to nodes:"
msgstr "다음과 같이 오버라이딩 가능한 함수들을 노드에 적용할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:267
msgid ""
"As mentioned before, it's better to use these functions instead of the "
"notification system."
msgstr ""
"앞서 언급했듯이, 이러한 기능은 알림 시스템 대신 사용하는 것이 좋습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:271
msgid "Creating nodes"
msgstr "노드 생성하기"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:273
msgid ""
"To create a node from code, call the ``.new()`` method, like for any other "
"class-based datatype. For example:"
msgstr ""
"코드를 사용하여 노드를 생성하려면 다른 클래스 기반 데이터 유형과 마찬가지로 "
"``.new()`` 메서드를 호출해야 합니다. 예를 들어:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:297
msgid ""
"To delete a node, be it inside or outside the scene, ``free()`` must be used:"
msgstr ""
"씬 내부 또는 외부에 있는 노드를 삭제하려면 ``free()`` 를 사용해야 합니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:313
msgid ""
"When a node is freed, it also frees all its children nodes. Because of this, "
"manually deleting nodes is much simpler than it appears. Free the base node "
"and everything else in the subtree goes away with it."
msgstr ""
"노드가 삭제되면 모든 하위 노드도 삭제됩니다. 따라서 수동으로 노드를 삭제하는 "
"것이 표시되는 것보다 훨씬 간단합니다. 기본 노드를 사용할 수 있도록 설정하면 "
"하위 노드에 있는 다른 모든 항목이 삭제됩니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:317
msgid ""
"A situation might occur where we want to delete a node that is currently "
"\"blocked\", because it is emitting a signal or calling a function. This "
"will crash the game. Running Godot with the debugger will often catch this "
"case and warn you about it."
msgstr ""
"신호를 보내거나 함수를 호출하기 때문에 현재 \"차단된\" 노드를 삭제하려는 경우"
"가 발생할 수 있습니다. 이것은 게임을 망칠 것입니다. 디버거로 Godot를 실행하"
"면 이 경우를 발견하고 경고를 표시하는 경우가 많습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:322
msgid ""
"The safest way to delete a node is by using :ref:`Node.queue_free() "
"<class_Node_method_queue_free>`. This erases the node safely during idle."
msgstr ""
"노드를 삭제하는 가장 안전한 방법은 :ref:`Node.queue_free() "
"<class_Node_method_queue_free>`\\ 를 사용하는 것입니다. 이것은 대기 상태에서"
"도 노드를 안전하게 지웁니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:340
msgid "Instancing scenes"
msgstr "씬 인스턴스하기"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:342
msgid ""
"Instancing a scene from code is done in two steps. The first one is to load "
"the scene from your hard drive:"
msgstr ""
"코드에서 씬을 인스턴스 하는 작업은 두 단계로 이루어집니다. 첫 번째 방법은 하"
"드 드라이브에서 씬을 불러오는 것입니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:355
msgid ""
"Preloading it can be more convenient, as it happens at parse time (GDScript "
"only):"
msgstr ""
"프리로드(Preload) 하면 구문 분석 시간에 일어나므로 더 편리할 수 있습니다 "
"(GDScript만):"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:363
msgid ""
"But ``scene`` is not yet a node. It's packed in a special resource called :"
"ref:`PackedScene <class_PackedScene>`. To create the actual node, the "
"function :ref:`PackedScene.instance() <class_PackedScene_method_instance>` "
"must be called. This will return the tree of nodes that can be added to the "
"active scene:"
msgstr ""
"그러나 ``씬`` 은 아직 하나의 노드가 아닙니다. 이것은 :ref:`PackedScene "
"<class_PackedScene>`\\ 이라는 특수 리소스에 들어 있습니다. 실제 노드를 생성하"
"려면, :ref:`PackedScene.instance() <class_PackedScene_method_instance>` 함수"
"가 호출되어야 합니다. 그러면 활성 씬에 추가할 수 있는 노드 트리를 반환합니다:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:381
msgid ""
"The advantage of this two-step process is that a packed scene may be kept "
"loaded and ready to use so that you can create as many instances as desired. "
"This is especially useful to quickly instance several enemies, bullets, and "
"other entities in the active scene."
msgstr ""
"이 두 단계 프로세스의 이점은 포장된 씬이 불러온 상태로 유지되어 원하는 만큼"
"의 인스턴스를 생성할 수 있다는 것입니다. 이 기능은 특히 활성화된 씬에서 여러 "
"적, 글머리 기호 및 다른 도면 요소를 신속하게 인스턴스 하는 데 유용합니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:389
msgid "Register scripts as classes"
msgstr "클래스로 스크립트를 등록하기"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:391
msgid ""
"Godot has a \"Script Class\" feature to register individual scripts with the "
"Editor. By default, you can only access unnamed scripts by loading the file "
"directly."
msgstr ""
"Godot는 에디터에 각각의 스크립트를 등록하기 위한 \"스크립트 클래스\" 기능을 "
"갖고 있습니다. 기본적으로, 당신은 파일을 직접 불러와서 이름이 없는 스크립트"
"에 액세스 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:395
msgid ""
"You can name a script and register it as a type in the editor with the "
"``class_name`` keyword followed by the class's name. You may add a comma and "
"an optional path to an image to use as an icon. You will then find your new "
"type in the Node or Resource creation dialog."
msgstr ""
"스크립트에 이름을 짓고 클래스의 이름과 함께 ``class_name`` 키워드를 통해 에디"
"터의 타입으로 등록할 수 있습니다. 쉼표나 이미지로 향하는 선택적인 경로를 추가"
"해 아이콘으로도 사용할 수 있습니다. 그런 뒤 노드나 리소스 생성 대화 상자에서 "
"당신의 새 타입을 찾으실 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:417
msgid "In Godot 3.1:"
msgstr "Godot 3.1에서는:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:419
msgid ""
"Only GDScript and NativeScript, i.e., C++ and other GDNative-powered "
"languages, can register scripts."
msgstr ""
"오직 GDScript와 NativeScript만, 즉, C++와 다른 GDNative의 영향을 받는 언어"
"만, 스크립트로 등록이 가능합니다."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:420
msgid "Only GDScript creates global variables for each named script."
msgstr "오직 GDScript만 각 이름이 있는 스크립트에 전역 변수를 만듭니다."

#: ../../docs/getting_started/step_by_step/signals.rst:4
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1465
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:183
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:164
#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:682
#: ../../docs/development/cpp/object_class.rst:211
msgid "Signals"
msgstr "시그널(Signal)"

#: ../../docs/getting_started/step_by_step/signals.rst:9
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"시그널은 *옵저버* 패턴의 Godot 버전입니다. 시그널로 노드는 다른 노드로 메시지"
"를 보내고 다른 노드는 이것을 받고 응답할 수 있습니다. 예를 들어, 버튼의 눌림 "
"여부를 파악하기 위해 주기적으로 버튼을 확인하는 대신 버튼이 눌렸을 때 시그널"
"을 방출(emit)할 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:14
msgid ""
"You can read more about the observer pattern here: http://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"옵저버 패턴에 대해 더 알아보려면 다음 주소를 참고하세요: http://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:16
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that any interested objects can subscribe to and respond."
msgstr ""
"시그널은 게임 객체들을 *분리하는* 도구로, 이를 활용하여 더 체계적이고 관리하"
"기 쉬운 코드를 작성할 수 있습니다. 게임 객체가 다른 객체가 존재하도록 강요하"
"는 대신, 한 객체가 방출한 시그널을 필요로 하는 다른 객체만 구독하거나 응답할 "
"수 있도록 합니다."

#: ../../docs/getting_started/step_by_step/signals.rst:21
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"아래에서 여러분의 프로젝트에 시그널을 활용할 수 있는 방법을 담은 예시들을 살"
"펴보겠습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid "Timer example"
msgstr "타이머(Timer) 예제"

#: ../../docs/getting_started/step_by_step/signals.rst:26
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node and two children: a Timer and a :ref:`Sprite "
"<class_Sprite>`. You can use the Godot icon for the Sprite's texture, or any "
"other image you like. Attach a script to the root node, but don't add any "
"code to it yet."
msgstr ""
"시그널이 어떻게 작동하는지 알아보기 위해, :ref: `Timer <class_Timer>` 노드를 "
"사용하겠습니다. Node와 두 자식 노드가 있는 씬을 만듭니다: 하나는 Timer이고 다"
"른 하나는 :ref:`Sprite <class_Sprite>`\\ 입니다. 스프라이트의 텍스쳐로 Godot "
"아이콘을 쓸 수도 있고, 원하는 어떤 이미지를 놓아도 좋습니다. 루트 노드에 스크"
"립트를 붙이되, 아직 아무 코드도 넣지 마세요."

#: ../../docs/getting_started/step_by_step/signals.rst:31
msgid "Your scene tree should look like this:"
msgstr "씬 트리는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:35
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"Timer 노드의 속성에서, *Autostart* 옆에 박스를 \"On\" 하세요. 그렇게 하면 씬"
"을 실행할 때 자동으로 타이머가 실행합니다. 또한 *Wait Time*\\ 을 1초로 처리"
"할 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:39
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"\"인스펙터\" 탭 옆에 \"노드\"라는 라벨이 붙은 탭이 있습니다. 이 탭을 클릭하"
"면 선택한 노드에서 방출할 수 있는 모든 시그널이 표시됩니다. Timer  노드의 경"
"우, 주목해야 할 시그널은 \"timeout\"입니다. 이 시그널은 Timer가 ``0``\\ 이 "
"될 때마다 방출합니다."

#: ../../docs/getting_started/step_by_step/signals.rst:46
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\". You'll see the "
"following window, where you can define how you want to connect the signal:"
msgstr ""
"\"timeout()\" 시그널을 클릭하고 그리고 \"연결하기...\"를 누릅니다. 다음과 같"
"은 창이 나타나는데, 여기서 당신은 시그널을 어떻게 연결할 지를 정의할 수 있습"
"니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:51
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is red "
"- this is *not* an error, but is a visual indication that it's the node that "
"is emitting the signal. Select the root node."
msgstr ""
"왼쪽에는 씬의 노드가 표시되고 시그널을 \"받는\" 노드를 선택할 수 있습니다. "
"Timer 노드는 적색입니다 - 이는 오류가 아니며 신호를 방출하는 노드임을 시각적"
"으로 나타냅니다. 루트 노드를 선택합니다."

#: ../../docs/getting_started/step_by_step/signals.rst:56
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"대상 노드는 *반드시* 스크립트가 붙게 되고 그렇지 않으면 오류 메시지를 받습니"
"다."

#: ../../docs/getting_started/step_by_step/signals.rst:59
msgid ""
"On the bottom of the window is a field labeled \"Method In Node\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"창의 아래쪽을 보시면 \"Method In Node\"라고 적혀있는 영역이 있습니다. 대상 노"
"드의 스크립트에서 이것을 함수 이름으로 사용합니다. 기본적으로, Godot는 명명 "
"규칙에 따라 ``_on_<노드이름>_<시그널이름>``\\ 으로 함수 이름을 만들지만 원한"
"다면 바꿀 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:64
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr "\"연결\"을 클릭하면 스크립트 안에 함수가 만들어진 것을 볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:84
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"이제 자리 표시자 코드는 시그널을 받게 되면 실행시키길 원하는 어떤 코드든지 변"
"환될 수 있습니다. 스프라이트 깜박임을 만들어 봅시다:"

#: ../../docs/getting_started/step_by_step/signals.rst:106
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"씬을 실행하면 Sprite가 매 초마다 깜박이는 것을 볼 수 있습니다. Timer의 *Wait "
"Time* 속성을 변경하여 주기를 변경할 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:110
msgid "Connecting signals in code"
msgstr "노드에서 시그널 연결하기"

#: ../../docs/getting_started/step_by_step/signals.rst:112
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"에디터에서 뿐만 아니라 코드에서도 시그널 연결을 만들 수 있습니다. 보통은 코드"
"를 통해 노드를 인스턴스할 때 필요하기 때문에 에디터에서 이런 시그널 연결을 만"
"들 수는 없습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:116
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"먼저, Timer의 \"노드\" 탭에서 연결 끊기를 클릭해서 시그널의 연결을 풉니다."

#: ../../docs/getting_started/step_by_step/signals.rst:121
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"코드에서 연결을 만들기 위해, ``connect`` 함수를 사용할 수 있습니다. "
"``_ready()``\\ 안에 이 함수를 넣으면 연결을 실행하는 준비가 된 것입니다. 함수"
"의 문법은 ``<소스_이름>.connect(<시그널_이름>, <대상_이름>, <대상_함수_이름"
">)``\\ 입니다. 이것이 Timer 연결을 위한 코드입니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:154
msgid "Custom signals"
msgstr "커스텀 시그널"

#: ../../docs/getting_started/step_by_step/signals.rst:156
msgid "You can also declare your own custom signals in Godot:"
msgstr "Godot에 당신의 커스텀 시그널을 선언할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:174
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"시그널은 선언하면, 커스텀 시그널은 인스펙터에 나타나고 노드의 내장 시그널과 "
"같은 방식으로 연결할 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:177
msgid "To emit a signal via code, use the ``emit`` function:"
msgstr "코드를 통해 시그널을 방출하기 위해선, ``emit`` 함수를 사용합니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:203
msgid "Shooting example"
msgstr "발사 예제"

#: ../../docs/getting_started/step_by_step/signals.rst:205
msgid ""
"As another example of signal usage, let's consider a player character that "
"can rotate and shoot towards the mouse. Every time the mouse button is "
"clicked, we create an instance of the bullet at the player's location. See :"
"ref:`doc_instancing` for details."
msgstr ""
"시그널 사용의 다른 예제로, 마우스 방향으로 회전하며 발사할 수 있는 플레이어"
"를 생각해봅시다. 마우스 버튼을 클릭할 때 마다, 플레이어의 위치에 총알의 인스"
"턴스를 만듭니다. 자세한 설명은 :ref:`doc_instancing`\\ 를 참고하세요."

#: ../../docs/getting_started/step_by_step/signals.rst:210
msgid ""
"However, if the bullets are added as children of the player, then they will "
"remain \"attached\" to the player as it rotates:"
msgstr ""
"하지만, 총알이 플레이어의 자식으로 추가된다면, 플레이어가 회전하는 것에 따라 "
"\"붙어있는 채로\" 남아있을 것입니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:215
msgid ""
"Instead, we need the bullets to be independent of the player's movement - "
"once fired, they should continue traveling in a straight line and the player "
"can no longer affect them. Instead of being added to the scene tree as a "
"child of the player, it makes more sense to add the bullet as a child of the "
"\"main\" game scene, which may be the player's parent or even further up the "
"tree."
msgstr ""
"대신, 총알을 플레이어의 움직임에 독립하도록 해야 합니다 - 일단 발사가 되면, "
"플레이어가 그것에 영향을 주지 않고 직선으로 계속 나아가야 합니다. 플레이어의 "
"자식으로 씬 트리에 추가하는 대신, 총알을 \"메인\" 게임 씬의 자식으로 추가하"
"는 것이 더 합리적입니다, 이렇게 하면 총알이 플레이어의 부모나 더 위로 올라갈 "
"수도 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:221
msgid "You could do this by adding the bullet directly:"
msgstr "총알에 직접 이 코드를 추가하는 것으로 가능합니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:234
msgid ""
"However, this will lead to a different problem. Now if you try and test your "
"\"Player\" scene independently, it will crash on shooting, because there is "
"no parent node to access. This makes it a lot harder to test your player "
"code independently and also means that if you decide to change your main "
"scene's node structure, the player's parent may no longer be the appropriate "
"node to receive the bullets."
msgstr ""
"그러나 이것은 다른 문제를 불러올 수 있습니다. 이제 \"Player\" 씬을 독립적으"
"로 테스트해 보신다면, 액세스할 부모 노드가 없기 때문에, 발사를 할 때 팅길 것"
"입니다. 이는 플레이어 코드를 독립적으로 테스트하기가 더 까다로울 뿐만 아니"
"라, 메인 씬의 노드 구조를 바꾸기로 한다면 플레이어의 부모는 더 이상 총알을 받"
"기에 적절한 노드가 아니게 됩니다."

#: ../../docs/getting_started/step_by_step/signals.rst:241
msgid ""
"The solution to this is to use a signal to \"emit\" the bullets from the "
"player. The player then has no need to \"know\" what happens to the bullets "
"after that - whatever node is connected to the signal can \"receive\" the "
"bullets and take the appropriate action to spawn them."
msgstr ""
"해결책은 플레이어로부터 총알을 \"방출\"하는 시그널을 사용하는 것입니다. 그렇"
"게 하면 플레이어는 총알이 어떻게 되는지 \"알\" 필요가 없습니다 - 이 시그널에 "
"연결된 어떤 노드라도 총알을 \"받을\" 수 있고 총알을 스폰하기 위한 적절한 행동"
"을 취해줄 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:247
msgid "Here is the code for the player using signals to emit the bullet:"
msgstr "이것이 시그널을 사용해 플레이어가 총알을 방출하는 코드입니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:290
msgid ""
"In the main scene, we then connect the player's signal (it will appear in "
"the \"Node\" tab)."
msgstr ""
"메인 씬에서, 이제 플레이어의 시그널을 연결합니다 (\"노드\" 탭에 나타날 것입니"
"다)."

#: ../../docs/getting_started/step_by_step/signals.rst:314
msgid ""
"Now the bullets will maintain their own movement independent of the player's "
"rotation:"
msgstr ""
"이제 총알은 움직임을 유지한 채로 플레이어의 회전에 독립을 유지할 것입니다:"

#: ../../docs/getting_started/step_by_step/signals.rst:322
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Godot의 내장 노드 타입의 대다수는 이벤트를 감지하는 데 사용할 수 있는 시그널"
"을 제공합니다. 예를 들어, 동전 하나를 나타내는 :ref:`Area2D <class_Area2D>`"
"는 플레이어의 물리 바디가 충돌 모양에 들어갈 때마다 ``body_entered`` 시그널"
"을 방출하며, 이를 통해 플레이어가 동전을 언제 먹었는 지를 알 수 있습니다."

#: ../../docs/getting_started/step_by_step/signals.rst:327
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"다음 섹션은, :ref:`doc_your_first_game`\\ 으로, 서로 다른 게임 구성 요소들을 "
"여러 시그널을 사용하여 연결하는 것을 포함한 완전한 게임을 만들 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:4
msgid "Your first game"
msgstr "당신의 첫 게임"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:7
#: ../../docs/getting_started/step_by_step/exporting.rst:7
#: ../../docs/tutorials/animation/introduction_2d.rst:7
#: ../../docs/tutorials/assetlib/using_assetlib.rst:10
msgid "Overview"
msgstr "개요"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:9
msgid ""
"This tutorial will guide you through making your first Godot project. You "
"will learn how the Godot editor works, how to structure a project, and how "
"to build a 2D game."
msgstr ""
"이 튜토리얼은 첫 Godot 프로젝트를 만드는 과정을 안내합니다. Godot 에디터가 어"
"떻게 작동하는지, 프로젝트를 구성하는 방법, 2D 게임을 만드는 방법을 배우게 됩"
"니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:13
msgid ""
"This project is an introduction to the Godot engine. It assumes that you "
"have some programming experience already. If you're new to programming "
"entirely, you should start here: :ref:`doc_scripting`."
msgstr ""
"이 프로젝트는 Godot 엔진에 대한 소개이고, 당신이 이미 약간의 프로그래밍 경험"
"이 있다고 가정합니다. 만약 당신이 초보 프로그래머라면, :ref:`doc_scripting` "
"부터 시작해야합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:18
msgid ""
"The game is called \"Dodge the Creeps!\". Your character must move and avoid "
"the enemies for as long as possible. Here is a preview of the final result:"
msgstr ""
"그 게임은 \"Dodge the Creeps!\"라고 부릅니다. 캐릭터는 가능한 한 오랫동안 움"
"직이고 적을 피해야 합니다. 다음은 최종 결과의 미리 보기입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:24
msgid ""
"**Why 2D?** 3D games are much more complex than 2D ones. You should stick to "
"2D until you have a good understanding of the game development process."
msgstr ""
"**왜 2D인가?** 3D게임은 2D게임보다 훨씬 더 복잡하다. 게임 개발 과정을 잘 이해"
"할 수 있을 때까지 2D를 고수해야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:28
#: ../../docs/getting_started/workflow/project_setup/index.rst:2
#: ../../docs/development/cpp/configuring_an_ide.rst:182
msgid "Project setup"
msgstr "프로젝트 설정하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:30
msgid ""
"Launch Godot and create a new project. Then, download :download:"
"`dodge_assets.zip <files/dodge_assets.zip>` - the images and sounds you'll "
"be using to make the game. Unzip these files to your project folder."
msgstr ""
"Godot를 시작하고 새 프로젝트를 만듭니다. 그런 다음, :download:`dodge_assets."
"zip <files/dodge_assets.zip>` 당신이 게임에 쓸 이미지와 소리를 다운로드 합니"
"다. 이 파일을 프로젝트 폴더에 풉니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:34
msgid ""
"For this tutorial, we will assume you are familiar with the editor. If you "
"haven't read :ref:`doc_scenes_and_nodes`, do so now for an explanation of "
"setting up a project and using the editor."
msgstr ""
"이 튜토리얼에서는 에디터에 대해 잘 알고 있다고 가정하겠습니다. :ref:"
"`doc_scenes_and_nodes` 내용을 읽지 않은 경우, 프로젝트를 설정하고 에디터를 사"
"용하는 방법에 대해 배우러 가세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:38
#, fuzzy
msgid ""
"This game will use portrait mode, so we need to adjust the size of the game "
"window. Click on Project -> Project Settings -> Display -> Window and set "
"\"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""
"이 게임은 세로 모드를 사용하므로 게임 창의 크기를 조정해야 합니다. Project -"
"> ProjectSettings -> Display -> Window를 클릭하고 \"Width\"를 480으로, "
"\"Height\"를 720으로 설정합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:43
msgid "Organizing the project"
msgstr "프로젝트 조직하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:45
#, fuzzy
msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene. In a larger "
"project, it might be useful to make folders to hold the various scenes and "
"their scripts, but for this relatively small game, you can save your scenes "
"and scripts in the project's root folder, referred to as ``res://``.  You "
"can see your project folders in the FileSystem Dock in the lower left corner:"
msgstr ""
"이 프로젝트에서 우리는  ``Player`` , ``Mob`` , ``HUD`` 의 세 개의 독립적인 씬"
"을 만들 것인데 이 씬 들은 우리가 게임의 ``Main`` 씬으로 결합될 것이다. 더 큰 "
"프로젝트에서는 다양한 씬과 스크립트를 저장할 폴더를 만드는 것이 유용할 수 있"
"지만, 상대적으로 작은 이 게임에서는 \"res://\"라고 하는 루트 폴더에 씬과 스크"
"립트를 저장할 수 있습니다. 프로젝트 폴더는 왼쪽 위에 있는 파일 시스템 독에서 "
"볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:56
msgid "Player scene"
msgstr "플레이어 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:58
msgid ""
"The first scene we will make defines the ``Player`` object. One of the "
"benefits of creating a separate Player scene is that we can test it "
"separately, even before we've created other parts of the game."
msgstr ""
"우리가 만들 첫 번째 씬은 ``Player`` 객체를 정의합니다. 별도의 플레이어 씬을 "
"만들 때의 장점 중 하나는 게임의 다른 부분을 만들기 전에 별도로 테스트할 수 있"
"다는 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:63
msgid "Node structure"
msgstr "노드 구조"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:65
msgid ""
"To begin, click the \"Add/Create a New Node\" button and add an :ref:`Area2D "
"<class_Area2D>` node to the scene."
msgstr ""
"시작하려면 \"새 노드 추가/생성\" 버튼을 클릭하고 :ref:`Area2D <class_Area2D>`"
"노드를 씬에 추가합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:70
msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change its name to ``Player`` by clicking on the node's name. This is the "
"scene's root node. We can add additional nodes to the player to add "
"functionality."
msgstr ""
"``Area2D`` 를 사용하면 플레이어와 겹치거나 플레이어에 부딪히는 물체를 감지할 "
"수 있습니다. 노드 이름을 클릭하여 이름을 ``Player`` 로 변경합니다. 이것은 씬"
"의 루트 노드입니다. 플레이어에 노드를 추가하여 함수를 추가할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:75
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"``Player`` 노드에 자식을 추가하기 전에 자식들을 선택하여 실수로 움직이거나 크"
"기를 조정하지 않도록 합니다. 노드를 선택하고 자물쇠 오른쪽에 있는 아이콘을 클"
"릭합니다. 노드의 툴 팁에 \"오브젝트의 자식노드가 선택될 수 없도록 설정합니다."
"\" 라고 표시됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:82
msgid ""
"Save the scene. Click Scene -> Save, or press ``Ctrl+S`` on Windows/Linux or "
"``Command+S`` on Mac."
msgstr ""
"씬을 저장합니다. 씬 -> 씬 저장을 클릭하거나 윈도우/리눅스에서는 ``Ctrl+S`` "
"를, 맥에서는 ``Command+S`` 를 누릅니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:84
msgid "For this project, we will be following the Godot naming conventions."
msgstr "이 프로젝트에서, 우리는 Godot의 명명 규칙을 따를 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:86
msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: 클래스(노드)는 ``PascalCase`` 를 사용하고', 변수와 함수는 "
"``snake_case`` 를 사용하며, 상수는 ``ALL_CAPS`` 를 사용합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:90
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`).  Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**:  클래스, export 변수 그리고 메쏘드는 PascalCase를 사용합니다. "
"private 필드는  _camelCase를 사용합니다.  지역변수(local variables)와  파라미"
"터는 camelCase를 사용합니다 (참고 :ref:`doc_c_sharp_styleguide`). 시그널을 연"
"결할 때는 메쏘드 이름을 정확하게 입력하도록 주의하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:97
msgid "Sprite animation"
msgstr "스프라이트 애니메이션"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:99
#, fuzzy
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"<null>\" -> \"New SpriteFrames\". Next, in the same location, click "
"``<SpriteFrames>``, then click \"Open Editor\" to open the \"SpriteFrames\" "
"panel:"
msgstr ""
"``Player`` 노드를 클릭하고 :ref:`AnimatedSprite <class_AnimatedSprite>` 노드"
"를 하위 노드로 추가합니다. ``AnimatedSprite`` 는 우리 선수를 위해 외모와 애니"
"메이션을 다룰 것입니다. 노드 옆에 주의 기호가 있습니다. ``AnimatedSprite`` "
"를 사용하려면 표시할 수 있는 애니메이션 목록인 :ref:`SpriteFrames "
"<class_SpriteFrames>` 리소스가 필요합니다. 작성하려면 인스펙터에서 "
"``Frames`` 속성을 찾아 \"<null>\" -> \"New SpriteFrames\"를 클릭합니다. 그런 "
"다음 같은 위치에서 ``<SpriteFrames>`` 를 클릭하여 \"SpriteFrames\" 패널을 엽"
"니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:111
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"right\". Then click the \"Add\" button to create a second animation "
"named \"up\". Drag the two images for each animation, named "
"``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, into the \"Animation "
"Frames\" side of the panel:"
msgstr ""
"왼쪽에는 애니메이션 목록이 있습니다. \"default\"를 클릭하고 \"right\"로 이름"
"을 바꾸세요. 그런 뒤 \"추가\" 버튼을 눌러 두 번째 애니메이션을 만들고 \"up"
"\"이라 이름을 지읍시다. 각 애니메이션에 두 개의 이미지를 드래그 하고, \"애니"
"메이션 프레임\" 패널 안에 하나는 ``playerGrey_up[1/2]`` 다른 하나는 "
"``playerGrey_walk[1/2]`` 라고 이름을 지읍니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:118
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"플레이어 이미지들이 게임 창에 비해 너무 크기 때문에, 크기를 줄여야 합니다. "
"``AnimatedSprite`` 노드를 클릭하고 ``Scale`` 속성을 ``(0.5, 0.5)`` 로 설정하"
"세요. 인스펙터의 ``Node2D`` 에서 찾으실 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:125
#, fuzzy
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"<null>\"\" -> \"New "
"CapsuleShape2D\".  Using the two size handles, resize the shape to cover the "
"sprite:"
msgstr ""
"마지막으로, :ref:`CollisionShape2D <class_CollisionShape2D>` 를 ``Player`` "
"의 자식으로 추가하세요. 이것이 플레이어의 \"히트박스\", 즉 충돌 영역의 범위"
"를 결정합니다. 이 캐릭터에게, ``CapsuleShape2D`` 노드가 가장 적합합니다, 그러"
"므로 인스펙터의 \"Shape\" 옆 \"<null>\"\" -> \"New CapsuleShape2D\" 를 클릭하"
"세요. 스프라이트를 덮도록 크기를 조정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:134
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "다 되셨다면, 당신의 ``Player`` 씬은 이렇게 되어야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:139
msgid "Moving the player"
msgstr "플레이어 움직이기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:141
msgid ""
"Now we need to add some functionality that we can't get from a built-in "
"node, so we'll add a script. Click the ``Player`` node and click the \"Add "
"Script\" button:"
msgstr ""
"이제 내장 노드 만으로는 얻을 수 없는 몇 가지 기능을 추가해야 합니다, 그래서 "
"스크립트를 만들겁니다. ``Player`` 노드를 클릭하고 \"스크립트 추가\" 버튼을 누"
"르세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:147
msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"스크립트 설정 창에서는, 기본 설정으로 냅두어도 됩니다. 그냥 \"생성\"을 누르세"
"요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:150
msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"만약 C# 스크립트나 다른 언어로 생성하려한다면, 생성을 누르기 전에 `언어` 메뉴"
"에서 언어를 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:155
msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""
"처음 GDScript를 보시는 거라면, 계속하기 전에 :ref:`doc_scripting` 를 읽어주세"
"요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:158
msgid "Start by declaring the member variables this object will need:"
msgstr "이 객체가 필요로 하는 멤버 변수를 선언함으로써 시작합시다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:179
#, fuzzy
msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"``export`` 키워드로 첫 번째 변수인 ``speed`` 가 인스펙터 내 값을 설정하도록 "
"합니다. 이것은 당신이 원하는 값을 노드의 내장 속성처럼 조절할 수 있기 때문에 "
"편리합니다. ``Player`` 노드를 선택하고 speed 속성을 ``400`` 으로 설정하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:186
msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"당신이 C#을 사용한다면, 새로운 외부변수(export variables)나 시그널을 보기 위"
"해서 프로젝트 구성물(assemblies)를 (재)컴파일(build)할 필요가 있습니다. 이 컴"
"파일은 편집기 의 밑에 \"Mono\" 단어를 클릭하여 Mono 패널이 나타나게 한 후 "
"\"프로젝트 생성(Build)\" 버튼을 눌러서 수동으로 진행됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:194
msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 함수는 노드가 씬 트리에 들어올 때 호출됩니다, 이는 게임 창의 크"
"기를 알아보기 좋은 순간입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:210
#, fuzzy
msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"이제 우리는 ``_process()`` 함수를 사용해서 플레이어가 무엇을 할 지 정의할 수 "
"있습니다. ``_process()`` 는 매 프레임마다 호출되므로, 게임에서 자주 변하는 요"
"소들을 업데이트하기 위해서 사용할 수 있습니다. 다음은 우리가 만들고자 하는 것"
"입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:215
msgid "Check for input."
msgstr "입력을 확인."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:216
msgid "Move in the given direction."
msgstr "주어진 방향으로 이동."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:217
msgid "Play the appropriate animation."
msgstr "적절한 애니메이션을 재생."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:219
#, fuzzy
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this demo, "
"we will use the default events that are assigned to the arrow keys on the "
"keyboard."
msgstr ""
"먼저, 입력을 확인해야 합니다 - 플레이어가 키를 누르는 것이라 할까요? 이 게임"
"에서, 우리는 입력을 확인하기 위한 4 개의 방향키가 필요합니다. 입력 액션은 프"
"로젝트 설정의 \"입력 설정\"에서 정의할 수 있습니다. 사용자 지정 이벤트를 정의"
"하고 이를 다른 키, 마우스 이벤트, 혹은 다른 입력으로 지정할 수도 있습니다. "
"이 데모에서는, 우리는 키보드에 있는 방향키가 지정된 기본 이벤트를 사용할 것입"
"니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:226
msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it is pressed or ``false`` if it isn't."
msgstr ""
"``Input.is_action_pressed()`` 를 사용해서 키가 눌러졌는지를 감지할 수 있습니"
"다, 눌러지면 ``true`` 값을 내보내고 그렇지 않으면 ``false`` 값을 내보냅니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:288
#, fuzzy
msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* than if it just moved horizontally."
msgstr ""
"우리는 각 입력을 확인하고 ``velocity`` 에서 더하기/빼기를 해서 전체 방향을 얻"
"습니다. 예를 들어 당신이 ``오른쪽`` 과 ``아래`` 를 동시에 누른다면, 결과 "
"``velocity`` 벡터는 ``(1, 1)`` 이 될 것입니다. 이런 경우에서, 상하좌우 움직임"
"을 추가한다면, 플레이어는 단순히 수평으로 움직이는 것보다 *더 빠르게* 움직일 "
"겁니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:295
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, and multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"우리는 이 속도를 *노멀라이즈* 해서 예방할 수 있습니다, 즉 우리는 이것의 *범위"
"* 를 ``1`` 로 설정하고, 원하는 속도로 곱해줍니다. 이렇게 하면 더 이상 대각선 "
"이동속도가 빨라지지 않습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:299
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"이제까지 벡터 수학을 안 써봤거나, 회복이 필요하다면, Godot에서 벡터 사용에 관"
"한 설명을 :ref:`doc_vector_math` 에서 보실 수 있습니다. 보면 좋지만 나머지 튜"
"토리얼을 위해 꼭 필수적인 것은 아닙니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:303
msgid ""
"We also check whether the player is moving so we can start or stop the "
"AnimatedSprite animation."
msgstr ""
"우리는 또 AnimatedSprite 애니메이션을 재생하고 정지할 수 있도록 플레이어가 움"
"직이고 있는지를 확인할 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:306
#, fuzzy
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"``$`` 는 이 노드에서 상대적인 경로에 있는 노드를 반환하거나, 노드가 없다면 "
"``null`` 값을 반환합니다. AnimatedSprite가 지금 노드의 자식인 상태이므로, 우"
"리는 ``$AnimatedSprite`` 를 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:309
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, ``"
"$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$`` 는 ``get_node()`` 의 줄임말입니다. 그래서 위의 코드인, ``"
"$AnimatedSprite.play()`` 는 ``get_node(\"AnimatedSprite\").play()`` 와 같습니"
"다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:312
#, fuzzy
msgid ""
"Now that we have a movement direction, we can update the player's position "
"and use ``clamp()`` to prevent it from leaving the screen by adding the "
"following to the bottom of the ``_process`` function:"
msgstr ""
"이제 우리는 이동 방향을 갖고 있으므로, ``Player`` 의 위치를 업데이트 할 수 있"
"으므로 ``_process`` 함수의 맨 아래에 ``clamp()`` 를 추가해서 플레이어가 화면"
"에서 나가지 못하도록 합시다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:332
msgid "*Clamping* a value means restricting it to a given range."
msgstr ""
"*클램핑(Clamping)* 값은 주어진 범위로 그것을 제한한다는 것을 의미합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:334
msgid ""
"Click \"Play Scene\" (``F6``) and confirm you can move the player around the "
"screen in all directions. The console output that opens upon playing the "
"scene can be closed by clicking ``Output`` (which should be highlighted in "
"blue) in the lower left of the Bottom Panel."
msgstr ""
"\"씬 실행하기\" (``F6``) 를 클릭하고 플레이어가 화면에서 전 방향으로 움직이는"
"지 확인하세요. 씬을 실행할 때 열리는 콘솔 출력은 하단 패널의 왼쪽 하단에 ``출"
"력`` 을 클릭해서 닫으실 수 있습니다 (파란색으로 강조되어 있을 것입니다)."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:339
msgid ""
"If you get an error in the \"Debugger\" panel that refers to a \"null "
"instance\", this likely means you spelled the node name wrong. Node names "
"are case-sensitive and ``$NodeName`` or ``get_node(\"NodeName\")`` must "
"match the name you see in the scene tree."
msgstr ""
"\"디버거\" 패널에서 \"null instance\"라고 하면서 에러가 뜬다면, 노드 이름의 "
"철자를 틀렸다는 것을 의미합니다. 노드 이름은 대소문자를 구별하고  ``"
"$NodeName`` 이나 ``get_node(\"NodeName\")`` 이 씬 트리에서 보는 이름이 일치해"
"야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:344
msgid "Choosing animations"
msgstr "애니메이션 고르기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:346
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on direction. We have a \"right\" animation, "
"which should be flipped horizontally using the ``flip_h`` property for left "
"movement, and an \"up\" animation, which should be flipped vertically with "
"``flip_v`` for downward movement. Let's place this code at the end of our "
"``_process()`` function:"
msgstr ""
"이제 캐릭터가 움직이니, 방향에 맞는 AnimatedSprite가 움직이도록 바꿔야 합니"
"다. 우리는 \"오른쪽\" 애니메이션이 있고 이걸 왼쪽 움직임으로 쓰려면 가로로 뒤"
"집어야 하므로 ``flip_h`` 속성을 써줍니다, 그리고 \"위\" 애니메이션도 아래 움"
"직임으로 쓰려면 세로로 뒤집어야 하므로 ``flip_v`` 을 써줍니다. "
"``_process()`` 아래에 이 코드를 작성해주세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:380
msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Consider this code versus the shortened boolean assignment "
"above:"
msgstr ""
"위 코드 내의 불 할당은 프로그래머를 위한 일반적인 속기입니다. 위의 단축된 불 "
"할당을 이 코드와 비교해서 생각해보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:399
msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions. When you're sure the movement is working correctly, add this "
"line to ``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"씬을 다시 실행하고 애니메이션이 각 방향으로 잘 움직이는지 확인하세요. 잘 작동"
"된다고 확신된다면, 플레이어가 게임이 시작할 때 안 보이도록 이 문장을 "
"``_ready()`` 에 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:414
msgid "Preparing for collisions"
msgstr "충돌 준비하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:416
msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"우리는 ``Player`` 가 적과 닿았다는 것을 감지하길 원합니다, 하지만 아직 적을 "
"안 만들었습니다! 괜찮습니다, 왜냐하면 충돌이 작동하도록 우리는 Godot의 *시그"
"널(signal)* 기능을 사용할 것이기 때문입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:420
msgid "Add the following at the top of the script, after ``extends Area2d``:"
msgstr "``extends Area2d`` 다음에 스크립트 상단에 다음을 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:434
msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"이것은 \"hit\"라 불리는 사용자 지정 시그널을 정의해서 적과 충돌할 때 우리의 "
"플레이어가 방출하도록 (내보내도록) 합니다. 우리는 ``Area2D`` 로 그 충돌을 감"
"지할 겁니다. ``Player`` 노드를 선택하고 인스펙터 탭 옆의 \"노드\" 탭을 클릭하"
"고 플레이어가 방출할 수 있는 시그널들을 확인해 보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:441
#, fuzzy
msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered( Object "
"body )`` signal; this will be emitted when a body contacts the player. Click "
"\"Connect..\" and then \"Connect\" again on the \"Connecting Signal\" "
"window. We don't need to change any of these settings - Godot will "
"automatically create a function in your player's script. This function will "
"be called whenever the signal is emitted - it *handles* the signal."
msgstr ""
"우리의 \"hit\" 시그널도 거기에 있다는 것에 주목하세요! 적들은 "
"``RigidBody2D`` 노드가 될 것이기 때문에, 우리는 ``body_entered( Object "
"body )`` 시그널이 필요하고, 이걸로 몸이 플레이어와 접촉할 때 방출하도록 할 것"
"입니다. \"연결하기..\" 를 누르고 \"시그널 연결하기\" 창에서 \"연결\"을 누릅니"
"다. 우리는 어떤 설정도 바꿀 필요가 없습니다 - Godot는 자동으로 플레이어 스크"
"립트에 ``_on_Player_body_entered`` 라는 함수를 생성해줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:450
msgid ""
"When connecting a signal, instead of having Godot create a function for you, "
"you can also give the name of an existing function that you want to link the "
"signal to."
msgstr ""
"시그널이 연결될 때, Godot가 함수를 만들어 주는 대신, 당신이 직접 연결하고 싶"
"은 시그널에 존재하는 함수의 이름을 줄 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:454
msgid "Add this code to the function:"
msgstr "함수에 이 코드를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:473
msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:477
msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``call_deferred()`` "
"allows us to have Godot wait to disable the shape until it's safe to do so."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:482
msgid ""
"The last piece for our player is to add a function we can call to reset the "
"player when starting a new game."
msgstr ""
"우리 플레이어의 마지막 과제는 호출할 수 있는 함수를 추가해서 새 게임이 시작"
"할 때 플레이어를 리셋할 수 있게 하는 겁니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:503
msgid "Enemy scene"
msgstr "적 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:505
msgid ""
"Now it's time to make the enemies our player will have to dodge. Their "
"behavior will not be very complex: mobs will spawn randomly at the edges of "
"the screen and move in a random direction in a straight line, then despawn "
"when they go offscreen."
msgstr ""
"이제 우리의 플레이어가 피할 적을 만들 차례입니다. 이들의 행동은 그리 복잡하"
"진 않을겁니다: 적이 아무렇게나 화면의 가장자리에서 나타나고 무작위 방향으로 "
"직선으로 나아갑니다, 그리고 화면을 벗어나면 사라집니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:510
msgid ""
"We will build this into a ``Mob`` scene, which we can then *instance* to "
"create any number of independent mobs in the game."
msgstr ""
"그러면 ``Mob`` 씬에 이 작업을 해야 합니다, 이것을 *인스턴스* 해서 게임에선 정"
"해진 수 만큼의 적들을 만들 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:514
msgid "Node setup"
msgstr "노드 설정하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:516
msgid "Click Scene -> New Scene and we'll create the Mob."
msgstr "씬 -> 새 씬을 클릭하고 거기에서 적을 만들겁니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:518
msgid "The Mob scene will use the following nodes:"
msgstr "적 씬은 다음 노드들을 사용할 것입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:520
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ":ref:`RigidBody2D <class_RigidBody2D>` ( ``Mob`` 으로 이름지음)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:522
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr ":ref:`AnimatedSprite <class_AnimatedSprite>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:523
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr ":ref:`CollisionShape2D <class_CollisionShape2D>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:524
msgid ""
":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>` (named "
"``Visibility``)"
msgstr ""
":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>` ( ``Visibility`` 으"
"로 이름지음)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:526
msgid ""
"Don't forget to set the children so they can't be selected, like you did "
"with the Player scene."
msgstr ""
"플레이어 씬에서 한 것과 마찬가지로, 자식이 선택되지 않도록 설정하는 것을 잊지"
"마세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:529
msgid ""
"In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity "
"Scale`` to ``0``, so the mob will not fall downward. In addition, under the "
"``PhysicsBody2D`` section, click the ``Mask`` property and uncheck the first "
"box. This will ensure the mobs do not collide with each other."
msgstr ""
":ref:`RigidBody2D <class_RigidBody2D>` 속성에서는, ``Gravity Scale`` 을 "
"``0`` 으로 설정해 적이 아래로 떨어지지 않도록 합니다. 그리고, "
"``PhysicsBody2D``  섹션의 ``Mask`` 속성을 클릭하고 첫 번째 상자의 체크를 푸세"
"요. 이것은 적들끼리 충돌하지 않도록 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:536
msgid ""
"Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the "
"player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. "
"Set the ``Playing`` property in the Inspector to \"On\" and adjust the "
"\"Speed (FPS)\" setting as shown below. We'll select one of these animations "
"randomly so that the mobs will have some variety."
msgstr ""
":ref:`AnimatedSprite <class_AnimatedSprite>` 를 당신이 플레이어에서 한 것처"
"럼 설정합니다. 이번엔, 3 개의 애니메이션이 있습니다: ``fly``, ``swim``, 그리"
"고 ``walk`` 이죠. 인스펙터의 ``Playing`` 를 \"On\"으로 설정합니다. 그리고 "
"\"Speed (FPS)\" 를 아래에 보이는대로 조정해줍시다. 우리는 이 애니메이션들 중 "
"하나를 무작위로 선택해서, 적들이 다양하게 보이도록 할 겁니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:543
msgid ""
"``fly`` should be set to 3 FPS, with ``swim`` and ``walk`` set to 4 FPS."
msgstr ""
"``fly`` 는 3 FPS로 설정하고, ``swim`` 과 ``walk`` 는 4 FPS로 설정합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:545
msgid ""
"Like the player images, these mob images need to be scaled down. Set the "
"``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""
"플레이어 이미지처럼, 이 적 이미지들도 크기를 줄일 필요가 있습니다. "
"``AnimatedSprite`` 의 ``Scale`` 속성을 ``(0.75, 0.75)`` 으로 설정합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:548
msgid ""
"As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To "
"align the shape with the image, you'll need to set the ``Rotation Degrees`` "
"property to ``90`` under ``Node2D``."
msgstr ""
"``Player`` 씬처럼, 충돌을 위한 ``CapsuleShape2D`` 을 추가합니다. 이미지와 모"
"양이 같도록, ``Node2D`` 아래 ``Rotation Degrees`` 속성을 ``90`` 으로 설정해"
"야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:553
msgid "Enemy script"
msgstr "적 스크립트"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:555
msgid "Add a script to the ``Mob`` and add the following member variables:"
msgstr "``Mob`` 에게 스크립트를 추가해주고 다음의 멤버 변수를 추가해주세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:581
#, fuzzy
msgid ""
"When we spawn a mob, we'll pick a random value between ``min_speed`` and "
"``max_speed`` for how fast each mob will move (it would be boring if they "
"were all moving at the same speed). We also have an array containing the "
"names of the three animations, which we'll use to select a random one. Make "
"sure you've spelled these the same in the script and in the SpriteFrames "
"resource."
msgstr ""
"``min_speed`` 와 ``max_speed`` 사이 무작위 값으로 각 적들이 빠르게 움직이는 "
"정도를 선택하도록 할겁니다 (모두가 같은 속도로 움직이면 지루할 것입니다). 인"
"스펙터에서 각각 ``150 과 ``250`` 으로 설정합시다. 그리고 세 개의 애니메이션"
"의 이름이 들어있는 배열이 있는데 이걸 무작위로 선택해서 사용할 겁니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:587
msgid ""
"Now let's look at the rest of the script. In ``_ready()`` we randomly choose "
"one of the three animation types:"
msgstr ""
"이제 스크립트의 나머지를 봅시다. ``_ready()`` 에서 우리는 무작위로 세 개의 애"
"니메이션 유형들 중 하나를 고릅니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:606
msgid ""
"You must use ``randomize()`` if you want your sequence of \"random\" numbers "
"to be different every time you run the scene. We're going to use "
"``randomize()`` in our ``Main`` scene, so we won't need it here. ``randi() % "
"n`` is the standard way to get a random integer between ``0`` and ``n-1``."
msgstr ""
"씬을 실행할 때 매 순간마다 다른 \"무작위\" 숫자의 순서를 원한다면 "
"``randomize()`` 를 사용해야 합니다. ``randomize()`` 를 우리의 ``Main`` 씬에 "
"사용할꺼니까, 더이상 여기 있으면 안됩니다. ``randi() % n`` 은  ``0`` 과 "
"``n-1`` 사이의 무작위 정수 값을 얻는 기본적인 방법입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:612
msgid ""
"The last piece is to make the mobs delete themselves when they leave the "
"screen. Connect the ``screen_exited()`` signal of the ``Visibility`` node "
"and add this code:"
msgstr ""
"적이 나갈 때 스스로를 삭제하는 것이 적의 마지막 과제입니다. ``Visubility`` 노"
"드의 ``screen_exited()`` 시그널을 연결하고 이 코드를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:629
msgid "This completes the `Mob` scene."
msgstr "이걸로 `적` 씬이 완성되었습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:632
msgid "Main scene"
msgstr "메인 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:634
msgid ""
"Now it's time to bring it all together. Create a new scene and add a :ref:"
"`Node <class_Node>` named ``Main``. Click the \"Instance\" button and select "
"your saved ``Player.tscn``."
msgstr ""
"이제 이 모두를 모을 차례입니다. 새 씬을 만들고 ``Main`` 이라는 이름의 :ref:"
"`Node <class_Node>` 를 만드세요. \"인스턴스\" 버튼을 누르고 저장한 ``Player."
"tscn`` 을 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:640
msgid "See :ref:`doc_instancing` to learn more about instancing."
msgstr "인스턴스에 대해 더 알고 싶다면 :ref:`doc_instancing` 로 가세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:642
msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""
"``Main`` 의 자식으로 다음의 노드들을 추가하고, 여기에서 설명하는 대로 이름을 "
"지으세요 (값은 초 단위 입니다):"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:645
msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>` (``MobTimer`` 라고 이름지음) - 얼마나 자주 적이 스"
"폰하는지를 조절함"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:646
msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""
":ref:`Timer <class_Timer>` (``ScoreTimer`` 라고 이름지음) - 매 초마다 점수를 "
"증가시킴"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:647
msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""
":ref:`Timer <class_Timer>` (``StratTimer`` 라고 이름지음) - 시작하기 전에 지"
"연시간을 줌"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:648
msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
":ref:`Position2D <class_Position2D>` (``StartPosition`` 이라고 이름지음) - 플"
"레이어의 시작 위치를 표시함"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:650
msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "각  ``Timer`` 마다 ``Wait Time`` 속성을 다음과 같이 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:653
msgid "``MobTimer``: ``0.5``"
msgstr "``MobTimer``: ``0.5``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:654
msgid "``ScoreTimer``: ``1``"
msgstr "``ScoreTimer``: ``1``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:655
msgid "``StartTimer``: ``2``"
msgstr "``StartTimer``: ``2``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:657
msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"그리고, ``StartTimer`` 속성의 ``One Shot`` 을 \"On\"으로 설정하고 "
"``StartPosition`` 노드의 ``Position`` 을 ``(240, 450)`` 으로 설정하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:661
msgid "Spawning mobs"
msgstr "적 스폰하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:663
msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"메인 노드는 새로운 적들을 스폰할 것이고 우리는 그들이 화면 모서리 아무 위치에"
"서나 나타나도록 만들고 싶습니다. :ref:`Path2D <class_Path2D>` 노드를 "
"``Main`` 의 자식으로 추가하고 ``MobPath`` 라고 이름지으세요. ``Path2D`` 를 선"
"택한다면, 당신은 에디터 위쪽에 새로운 버튼들이 보일 것입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:670
msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Snap to Grid\" is checked. This option can be found under the "
"\"Snapping options\" button to the left of the \"Lock\" button, appearing as "
"a series of three vertical dots."
msgstr ""
"가운데 것을 선택하고 (\"포인트 추가\") 클릭으로 모서리에 포인트를 추가하고 경"
"로를 그립니다. 포인트가 그리드에 스냅되게 하려면, \"그리드에 스냅\"이 체크되"
"어있어야 합니다. 이 설정은 \"잠금\" 버튼 왼쪽과 \"스냅 설정\" 버튼 옆의 세 개"
"의 점에서 찾을 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:678
msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""
"*시계 방향* 으로 그리세요, 그렇지 않으면 적들은 *안쪽* 이 아닌 *바깥쪽* 으로 "
"향할 것입니다!"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:681
msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""
"이미지에서 ``4`` 포인트를 찍고 난 후, \"커브 닫기\" 버튼을 누르면 커브가 완성"
"됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:684
msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"이제 경로를 정의하기 위해, :ref:`PathFollow2D <class_PathFollow2D>` 노드를 "
"``MobPath`` 의 자식으로 추가한 후, ``MobSpawnLocation`` 이라고 이름짓습니다. "
"이 노드는 자동으로 회전하고 이동하면서 경로를 따라갈 것입니다, 그래서 우리는 "
"이걸로 경로를 따라 임의의 위치와 방향을 선택하기 위해 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:690
msgid "Main script"
msgstr "메인 스크립트"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:692
msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""
"``Main`` 에 스크립트를 추가합니다. 스크립트의 위에 ``export (PackedScene)`` "
"를 사용해서 우리가 인스턴스하길 원하는 적 씬을 고를 수 있도록 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:732
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" panel and drop it in the ``Mob`` "
"property under the Script Variables of the ``Main`` node."
msgstr ""
"\"파일 시스템\" 패널에서 ``Mob.tscn`` 을 드래그하고 ``Main`` 노드의 스크립트 "
"속성 아래 ``Mob`` 속성에 드랍하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:735
msgid ""
"Next, click on the Player and connect the ``hit`` signal. We want to make a "
"new function named ``game_over``, which will handle what needs to happen "
"when a game ends. Type \"game_over\" in the \"Method In Node\" box at the "
"bottom of the \"Connecting Signal\" window. Add the following code, as well "
"as a ``new_game`` function to set everything up for a new game:"
msgstr ""
"다음으로, 플레이어를 클릭하고 ``hit`` 시그널과 연결하세요. 우리는 "
"``game_over`` 라는 새로운 함수를 만들어서, 게임이 끝날 때 발생하도록 조절할 "
"것입니다. \"시그널 연결\" 창 아래 \"Method In Node\" 박스에 \"game_over\" 라"
"고 치세요. 다음의 코드를 추가하고 ``new_game`` 함수를 추가하여 새로운 게임을 "
"위한 모든 것들을 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:772
#, fuzzy
msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` ,and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""
"이제 각 타이머 노드 (``StartTimer``, ``ScoreTimer`` ,그리고 ``MobTimer``) 의 "
"``timeout()`` 시그널을 연결하세요. ``StartTimer`` 는 나머지 두 타이머를 시작"
"하게 만들 것입니다. ``ScoreTimer`` 는 점수가 1씩 증가하게 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:799
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position."
msgstr ""
"``_on_MobTimer_timeout()`` 에서 우리는 몹 인스턴스를 만들고, ``Path2D`` 에 따"
"라 무작위 시작점을 결정하고, 적이 움직이도록 설정할 것입니다. "
"``PathFollow2D`` 노드는 자동으로 경로를 따라 돌고, 그래서 이걸로 적들의 위치"
"와 방향을 선택하기 위해서 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:805
msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr "새로운 인스턴스는 ``add_child()`` 를 사용해야 추가할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:808
msgid ""
"Now click on ``MobTimer`` in the scene window then head to inspector window, "
"switch to node view then click on ``timeout()`` and connect the signal."
msgstr ""
"이제 씬 창에서 ``MobTimer`` 를 클릭하고 인스펙터 창으로 가서, 노드 화면으로 "
"바꾼 후 ``timeout()`` 을 클릭하고 시그널을 연결합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:811
#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1091
msgid "Add the following code:"
msgstr "다음의 코드를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:859
msgid ""
"In functions requiring angles, GDScript uses *radians*, not degrees. If "
"you're more comfortable working with degrees, you'll need to use the "
"``deg2rad()`` and ``rad2deg()`` functions to convert between the two."
msgstr ""
"각도가 필요한 기능에서, GDScript는 각도가 아닌, *라디안* 을 사용합니다. 각도"
"로 좀 더 편한 작업을 하고싶다면, ``deg2rad()`` 와 ``rad2deg()`` 함수로 이 둘"
"을 전환할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:865
msgid "HUD"
msgstr "HUD"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:867
msgid ""
"The final piece our game needs is a UI: an interface to display things like "
"score, a \"game over\" message, and a restart button. Create a new scene, "
"and add a :ref:`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" "
"stands for \"heads-up display\", an informational display that appears as an "
"overlay on top of the game view."
msgstr ""
"게임에 마지막으로 필요한 것은 UI입니다: 인터페이스로 화면에 점수, \"게임 오버"
"\" 메시지, 재시작 버튼을 보여줍니다. 새 씬을 만들고,  :ref:`CanvasLayer "
"<class_CanvasLayer>` 노드를 추가하고 ``HUD`` 라고 이름지으세요. \"HUD\"는 "
"\"heads-up display\"의 약자로, 정보가 게임 화면 앞에 덮어씌우는 방식입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:873
msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""
":ref:`CanvasLayer <class_CanvasLayer>` 노드는 게임 위 레이어에 우리의 UI 요소"
"들을 그릴수 있게 해주고, 이로써 보여지는 정보가 플레이어나 적과 같은 게임 요"
"소들에 의해 가려지지 않게 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:877
msgid "The HUD displays the following information:"
msgstr "HUD는 다음의 정보들을 보여줍니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:879
msgid "Score, changed by ``ScoreTimer``."
msgstr "점수, ``ScoreTimer`` 가 바꿈."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:880
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr "메시지, \"Game Over\"나 \"Get Ready!\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:881
msgid "A \"Start\" button to begin the game."
msgstr "게임을 시작하기 위한 \"Start\" 버튼."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:883
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""
"UI 요소에 기초가 되는 노드는 :ref:`Control <class_Control>` 입니다. UI를 만들"
"기 위해, 우리는 두 가지 형식의 :ref:`Control <class_Control>` 노드를 쓸겁니"
"다: :ref:`Label <class_Label>` 과 :ref:`Button <class_Button>` 입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:887
msgid "Create the following as children of the ``HUD`` node:"
msgstr "다음에 맞춰 ``HUD`` 노드의 자식으로 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:889
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr "``ScoreLabel`` 로 이름지은 :ref:`Label <class_Label>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:890
msgid ":ref:`Label <class_Label>` named ``MessageLabel``."
msgstr "``MessageLabel`` 로 이름지은 :ref:`Label <class_Label>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:891
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr "``StartButton`` 으로 이름지은 :ref:`Button <class_Button>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:892
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr "``MessageTimer`` 로 이름지은 :ref:`Timer <class_Timer>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:894
#, fuzzy
msgid ""
"Click on the ``ScoreLabel`` and type a number into the _Text_ field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following for each of the three "
"``Control`` nodes:"
msgstr ""
"``MessageLabel``\\ 의 텍스트가 게임 화면에 맞추기 위해 text 속성 옆에 작은 아"
"이콘을 클릭합니다. 그러면 단어 사이에 새 줄을 추가할 수 있는 새로운 창이 나타"
"납니다. ``Control`` 노드의 기본 폰트는 작고 잘 확장되지 않습니다. game assets"
"에 포함된 \"Xolonium-Regular.ttf\"는 폰트 파일입니다. 이 폰트를 사용하기 위"
"해 각 ``Control`` 노드마다 다음과 같이 하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:900
msgid "Under \"Custom Fonts\", choose \"New DynamicFont\""
msgstr "\"Custom Fonts\" 에서, \"새 DynamicFont\"를 선택하세요"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:904
#, fuzzy
msgid ""
"Click on the \"DynamicFont\" you added, and under \"Font/Font Data\", choose "
"\"Load\" and select the \"Xolonium-Regular.ttf\" file. You must also set the "
"font's ``Size``. A setting of ``64`` works well."
msgstr ""
"추가한 \"DynamicFont\"를 클릭하시고, \"Font Data\"에서, \"Load\"를 눌러서 "
"\"Xolonium-Regular.ttf\" 파일을 선택하세요. 또한 폰트의 ``Size`` 도 설정해야 "
"합니다. ``64`` 정도가 좋습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:910
msgid ""
"**Anchors and Margins:** ``Control`` nodes have a position and size, but "
"they also have anchors and margins. Anchors define the origin - the "
"reference point for the edges of the node. Margins update automatically when "
"you move or resize a control node. They represent the distance from the "
"control node's edges to its anchor. See :ref:"
"`doc_design_interfaces_with_the_control_nodes` for more details."
msgstr ""
"**앵커(Anchors)와 마진(Margins):** ``Control`` 노드는 위치와 크기를 가지고 있"
"고, 앵커과 마진 또한 가지고 있습니다. 앵커는 중심은 정의합니다 - 노드의 모서"
"리를 위한 참고 포인트. 마진은 컨트롤 노드를 움직이거나 크기를 조절할 때 자동"
"으로 업데이트됩니다. 이것은 컨트롤 노드들의 모서리가 앵커로부터 얼마나 떨어"
"져 있는 지를 나타냅니다. 더 자세한 설명은 :ref:"
"`doc_design_interfaces_with_the_control_nodes` 를 참고하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:917
msgid ""
"Arrange the nodes as shown below. Click the \"Anchor\" button to set a "
"Control node's anchor:"
msgstr ""
"하단에 보이는 대로 노드를 정렬하세요. \"Anchor\" 버튼을 클릭해 컨트롤 노드의 "
"앵커를 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:922
msgid ""
"You can drag the nodes to place them manually, or for more precise "
"placement, use the following settings:"
msgstr ""
"당신은 노드들을 드래그해서 수동으로 놓을 수도 있습니다, 혹은 더 정확한 방법으"
"로는, 다음의 설정을 사용하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:926
msgid "ScoreLabel"
msgstr "ScoreLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:928
#, fuzzy
msgid "*Text* : ``0``"
msgstr "Text: ``0``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:929
msgid "*Layout* : \"Top Wide\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:930
#: ../../docs/getting_started/step_by_step/your_first_game.rst:937
msgid "*Align* : \"Center\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:933
msgid "MessageLabel"
msgstr "MessageLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:935
#, fuzzy
msgid "*Text* : ``Dodge the Creeps!``"
msgstr "Text: ``Dodge the Creeps!``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:936
#, fuzzy
msgid "*Layout* : \"HCenter Wide\""
msgstr "``레이아웃``: \"Center\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:940
msgid "StartButton"
msgstr "StartButton"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:942
#, fuzzy
msgid "*Text* : ``Start``"
msgstr "Text: ``Start``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:943
#, fuzzy
msgid "*Layout* : \"Center Bottom\""
msgstr "``레이아웃``: \"Center Bottom\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:944
#, fuzzy
msgid "*Margin* :"
msgstr "마진(Margin)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:946
msgid "Top: ``-200``"
msgstr "Top: ``-200``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:947
msgid "Bottom: ``-100``"
msgstr "Bottom: ``-100``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:949
msgid "Now add this script to ``HUD``:"
msgstr "이제 ``HUD`` 에 이 스크립트를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:968
msgid ""
"The ``start_game`` signal tells the ``Main`` node that the button has been "
"pressed."
msgstr "``start_game`` 시그널은 ``Main`` 노드에게 버튼이 눌려졌음을 알립니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:990
msgid ""
"This function is called when we want to display a message temporarily, such "
"as \"Get Ready\". On the ``MessageTimer``, set the ``Wait Time`` to ``2`` "
"and set the ``One Shot`` property to \"On\"."
msgstr ""
"이 함수는 우리가 원하는 메시지를 일시적으로 보여줄 때 호출됩니다, \"Get Ready"
"\" 처럼 말이죠. ``MessageTimer`` 에서, ``WaitTime`` 을 ``2`` 로 설정하고 "
"``OneShot`` 속성을 \"On\"으로 하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1021
#, fuzzy
msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""
"이 함수는 플레이어가 패배했을 때 호출됩니다. 이것은 2초동안 \"Game Over\"를 "
"보여주고, 타이틀 화면으로 돌아와서 \"Start\" 버튼을 보여줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1025
msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to delay, such as in the above code, where we want to wait a little "
"bit of time before showing the \"Start\" button."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1043
msgid "This function is called by ``Main`` whenever the score changes."
msgstr "이 함수는 점수가 변경될 때마다 ``Main`` 에 의해서 호출됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1045
msgid ""
"Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` "
"signal of ``StartButton``."
msgstr ""
"``MessageTimer`` 의 ``timeout()`` 시그널과 ``StartButton`` 의 ``pressed()`` "
"를 연결하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1072
msgid "Connecting HUD to Main"
msgstr "메인에 HUD를 연결하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1074
msgid ""
"Now that we're done creating the ``HUD`` scene, save it and go back to "
"``Main``. Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` "
"scene, and place it at the bottom of the tree. The full tree should look "
"like this, so make sure you didn't miss anything:"
msgstr ""
"이제 ``HUD`` 씬 만들기가 끝났습니다, 저장하고 다시 ``Main`` 으로 돌아갑니다. "
"``Player`` 씬에서 했듯이 ``HUD`` 씬을 ``Main`` 에 인스턴스하고, 트리의 맨 아"
"래에 위치시킵니다. 모든 트리는 이렇게 되어야 하므로, 놓친 것이 없는지 확인해"
"보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1081
msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""
"이제 ``HUD`` 기능을 ``Main`` 스크립트에 연결할겁니다. 여기에는 ``Main`` 씬에 "
"추가적인 것이 요구됩니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1084
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function."
msgstr ""
"노드 탭에서, HUD의 ``start_game`` 시그널을 ``new_game()`` 함수에 연결하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1087
msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr ""
"``new_game()`` 에서, 점수 화면을 업데이트하고 \"Get Ready\" 메시지를 보이게 "
"합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1102
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr "``game_over()`` 에서는, 일치하는 ``HUD`` 함수를 호출해야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1113
msgid ""
"Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""
"마지막으로, ``_on_ScoreTimer_timeout()`` 를 추가해서 점수가 바뀌는 것과 일치"
"한 화면을 유지하도록 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1125
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``Main.tscn``."
msgstr ""
"이제 실행할 준비가 끝났습니다! \"프로젝트 실행\" 버튼을 누르세요. 아마 메인 "
"씬을 선택하라고 물어볼 겁니다, ``Main.tscn`` 을 골라줍시다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1129
msgid "Finishing up"
msgstr "마무리 작업"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1131
msgid ""
"We have now completed all the functionality for our game. Below are some "
"remaining steps to add a bit more \"juice\" to improve the game experience. "
"Feel free to expand the gameplay with your own ideas."
msgstr ""
"우리는 게임의 모든 기능을 마친 상태입니다. 밑에 남아있는 단계는 게임의 경험"
"을 향상시킬 \"주스\"를 추가하는 것입니다. 독창적인 아이디어로 자유롭게 게임 "
"플레이를 확장시켜보세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1136
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:59
msgid "Background"
msgstr "배경(Background)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1138
msgid ""
"The default gray background is not very appealing, so let's change its "
"color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` "
"node. Make it the first node under ``Main`` so that it will be drawn behind "
"the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a "
"color you like and drag the size of the ``ColorRect`` so that it covers the "
"screen."
msgstr ""
"기본 회색 배경은 그렇게 멋지지는 않습니다, 그래서 색깔을 바꿔봅시다. 그 방법"
"들 중 하나는 :ref:`ColorRect <class_ColorRect>` 노드를 사용하는 것입니다. "
"``Main`` 바로 밑 첫 번째 노드로 놓아서 다른 노드들 뒤에 그려지도록 하세요. "
"``ColorRect`` 는 오직 하나의 속성만 가지고 있습니다: ``Color`` 입니다. 원하"
"는 색깔을 고르고 ``ColorRect`` 의 크기를 조절해 화면을 덮도록 만듭시다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1145
#, fuzzy
msgid ""
"You could also add a background image, if you have one, by using a "
"``Sprite`` node."
msgstr ""
"또한 ``Sprite`` 노드를 사용해서 갖고 있는 배경 사진을 추가하실수도 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1149
msgid "Sound effects"
msgstr "사운드 이펙트(Sound effects)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1151
msgid ""
"Sound and music can be the single most effective way to add appeal to the "
"game experience. In your game assets folder, you have two sound files: "
"\"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" "
"for when the player loses."
msgstr ""
"사운드와 음악은 게임 경험을 멋지게 만들어주는 가장 효과적인 물건입니다. 게임 "
"에셋 폴더에서, 두 개의 사운드 파일을 찾으실 수 있습니다: \"House In a Forest "
"Loop.ogg\"는 배경 음악으로, \"gameover.wav\"는 플레이어가 죽었을 때 쓰면 됩니"
"다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1156
msgid ""
"Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children "
"of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On "
"each one, click on the ``Stream`` property, select \"Load\", and choose the "
"corresponding audio file."
msgstr ""
"두 개의 :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` 노드를 ``Main`` "
"의 자식으로 추가하세요. 하나는 ``Music`` 으로, 다른 하나는 ``DeathSound`` 로 "
"이름 지으세요. 각각에서, ``Stream`` 속성을 클릭하시고 \"Load\"를 선택해서 이"
"름에 맞는 오디오 파일을 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1161
msgid ""
"To play the music, add ``$Music.play()`` in the ``new_game()`` function and "
"``$Music.stop()`` in the ``game_over()`` function."
msgstr ""
"음악을 실행시키려면, ``new_game()`` 함수에 ``$Music.play()`` 를 추가하고 "
"``game_over()`` 함수에 ``$Music.stop()`` 을 추가하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1164
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr ""
"마지막으로, ``game_over()`` 함수에 ``$DeathSound.play()`` 를 추가하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1167
msgid "Keyboard Shortcut"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1169
msgid ""
"Since the game is played with keyboard controls, it would be convenient if "
"we could also start the game by pressing a key on the keyboard. One way to "
"do this is using the \"Shortcut\" property of the ``Button`` node."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1173
msgid ""
"In the ``HUD`` scene, select the ``StartButton`` and find its _Shortcut_ "
"property in the Inspector. Select \"New Shortcut\" and click on the "
"\"Shortcut\" item. A second _Shortcut_ property will appear. Select \"New "
"InputEventAction\" and click the new \"InputEvent\". Finally, in the "
"_Action_ property, type the name \"ui_select\". This is the default input "
"event associated with the spacebar."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1181
msgid ""
"Now when the start button appears, you can either click it or press the "
"spacebar to start the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1185
msgid "Project files"
msgstr "프로젝트 파일"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1188
msgid "You can find a completed version of this project at these locations:"
msgstr "당신은 여기서 이 프로젝트의 완성 버전을 확인하실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1188
msgid "https://github.com/kidscancode/Godot3_dodge/releases"
msgstr "https://github.com/kidscancode/Godot3_dodge/releases"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1189
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr "https://github.com/godotengine/godot-demo-projects"

#: ../../docs/getting_started/step_by_step/exporting.rst:4
#: ../../docs/getting_started/editor/command_line_tutorial.rst:130
msgid "Exporting"
msgstr "내보내기(Exporting)"

#: ../../docs/getting_started/step_by_step/exporting.rst:9
msgid ""
"Now that you have a working game, you probably want to share your success "
"with others. However, it's not practical to ask your friends to download "
"Godot just so they can open your project. Instead, you can *export* your "
"project, converting it into a \"package\" that can be run by anyone."
msgstr ""
"이제 당신은 작업한 게임을 갖고 있으니, 당신의 성공을 남과 나누고 싶을 겁니"
"다. 하지만, 그렇다고 친구에게 Godot를 다운로드하고 프로젝트를 열라고 요청하"
"는 것은 실용적이지 못합니다. 대신, 당신은 당신의 프로젝트를 \"패키지\"로 전환"
"해서 누구나 열 수 있도록 *내보내기* 가 가능합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:14
msgid ""
"The way you export your game depends on what platform you are targeting. In "
"this tutorial, you'll learn how to export the \"Dodge the Creeps\" game for "
"a variety of platforms. First, however, we need to make some changes to the "
"way the game works."
msgstr ""
"당신이 무슨 플랫폼을 타깃으로 삼느냐에 따라 게임을 내보내는 방법은 다릅니다. "
"이 튜토리얼에서는, 어떻게 \"Dodge the Creeps\" 게임을 다양한 플랫폼에 내보내"
"는 지를 배울겁니다. 그러나, 먼저 우리는 게임이 작동하는 방식을 바꿔야합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:19
msgid ""
"If you haven't made \"Dodge the Creeps\" yourself yet, please read :ref:"
"`doc_your_first_game` before continuing with this tutorial."
msgstr ""
"아직 \"Dodge the Creeps\"을 스스로 만들지 않았다면, 이 튜토리얼을 시작하기 전"
"에 :ref:`doc_your_first_game` 을 읽어주세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:23
msgid "Preparing the project"
msgstr "프로젝트 준비하기"

#: ../../docs/getting_started/step_by_step/exporting.rst:25
msgid ""
"In \"Dodge the Creeps\" we used keyboard controls to move the player's "
"character. This is fine if your game is being played on a PC platform, but "
"on a phone or tablet, you need to support touchscreen input. Because a click "
"event can be treated the same as a touch event, we'll convert the game to a "
"click-and-move input style."
msgstr ""
"\"Dodge the Creeps\" 에서 우리는 키보드로 플레이어의 캐릭터를 움직이게 합니"
"다. 이것은 PC 플랫폼에서 실행된다면 괜찮습니다만, 폰이나 태블릿이라면, 터치 "
"스크린 입력을 지원해야합니다. 클릭 이벤트는 터치 이벤트와 동일하게 처리될 수 "
"있기 때문에, 우리는 게임을 클릭-그리고-움직임 입력 스타일로 만들어야합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:31
msgid ""
"The first step is to open \"Project Settings\" and find the *Handheld* "
"section. Enable the *Emulate Touchscreen* option. This lets you treat mouse "
"click events the same as touch events, so you can test the game on a "
"computer without a touchscreen. Also, make sure to select \"portrait\" under "
"*Orientation*."
msgstr ""
"첫 단계에서는 \"프로젝트 설정\"을 열고 *Handheld* 섹션으로 가세요. *Emulate "
"Touchscreen* 설정을 키세요. 이것이 마우스 클릭 이벤트를 터치 이벤트로 만들어 "
"줍니다, 따라서 당신은 터치 스크린없이도 게임을 테스트 할 수 있습니다. 또한, "
"*Orientation*을 \"portrait\"으로 선택하세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:36
msgid ""
"In the *Stretch* section, set *Mode* to \"2d\" and *Aspect* to \"keep\". "
"This ensures that the game scales consistently on different sized screens."
msgstr ""
"*Stretch* 섹션에서, *Mode* 를 \"2d\"로 하고 *Aspect* 를 \"keep\"으로 설정하세"
"요. 이것으로 게임이 다른 크기의 화면에도 일관되게 조절하도록 만듭니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:41
msgid ""
"Next, we need to modify the ``Player.gd`` script to change the input method. "
"We'll remove the key inputs and make the player move towards a \"target\" "
"that's set by the touch (or click) event."
msgstr ""
"다음으로, 우리는 입력 메소드를 변경하기 위해 ``Player.gd`` 스크립트를 수정해"
"야 합니다. 키 입력을 지우고 플레이어가 터치 (나 클릭) 이벤트로 설정된 \"타깃"
"\"을 향해 움직이도록 합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:45
msgid ""
"Here is the full script for the player, with comments noting what we've "
"changed:"
msgstr ""
"여기 플레이어를 위한 전체 스크립트가 있습니다, 변경한 점에는 코멘트가 있습니"
"다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:122
#: ../../docs/getting_started/workflow/export/exporting_projects.rst:92
#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:198
#: ../../docs/development/compiling/compiling_with_mono.rst:126
msgid "Export templates"
msgstr "템플릿 내보내기"

#: ../../docs/getting_started/step_by_step/exporting.rst:124
msgid ""
"In order to export, you need to download the *export templates* from the "
"http://godotengine.org/download. These templates are optimized versions of "
"the engine without the editor pre-compiled for each platform . You can also "
"download them in Godot by clicking on *Editor -> Manage Export Templates*:"
msgstr ""
"프로젝트를 내보내려면, *내보내기 템플릿(export templates)* 을 http://"
"godotengine.org/download 에서 다운로드 해야 합니다. 이 템플릿은 엔진에 최적화"
"된 버전으로 각 플렛폼에 따로 컴파일된 에디터가 필요 없습니다. 당신은 또한 "
"Godot에서 *에디터 -> 내보내기 템플릿 관리* 를 통해 다운로드 할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:131
msgid ""
"In the window that appears, you can click \"Download\" to get the template "
"version that matches your version of Godot."
msgstr ""
"나타나는 창에서, \"다운로드\" 를 눌러서 당신의 Godot 버전과 맞는 템플릿을 다"
"운로드 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:136
msgid ""
"If you upgrade Godot, you must download templates that match the new version "
"or your exported projects may not work correctly."
msgstr ""
"Godot를 업그레이드 하셨다면, 새로운 버전에 맞는 템플릿을 다운로드 해야 하고 "
"그렇지 않으면 프로젝트가 제대로 내보내기가 작동하지 않습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:140
msgid "Export presets"
msgstr "프리셋 내보내기"

#: ../../docs/getting_started/step_by_step/exporting.rst:142
msgid ""
"Next, you can configure the export settings by clicking on *Project -> "
"Export*:"
msgstr "다음은, *프로젝트 -> 내보내기* 로 내보내기 설정을 구성할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:146
msgid ""
"Create a new export preset by clicking \"Add...\" and selecting a platform. "
"You can make as many presets as you like with different settings."
msgstr ""
"\"추가...\"를 눌러서 새 내보내기 프리셋을 만들고 플랫폼을 선택하세요. 다양한 "
"설정과 함께 당신은 많은 프리셋를 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:149
msgid ""
"At the bottom of the window are two buttons. \"Export PCK/ZIP\" only creates "
"a packed version of your project's data. This doesn't include an executable "
"so the project can't be run on its own."
msgstr ""
"창의 아래쪽에 두 버튼이 있습니다. \"PCK/ZIP 내보내기\"는 오직 프로젝트 데이터"
"를 압축된 버전으로 만듭니다. 이것은 실행 파일이 아니므로 프로젝트가 스스로 실"
"행되지 못합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:153
msgid ""
"The second button, \"Export Project\", creates a complete executable version "
"of your game, such as an `.apk` for Android or an `.exe` for Windows."
msgstr ""
"두 번째 버튼, \" 프로젝트 내보내기\", 게임의 완전 실행가능한 버전을 만듭니"
"다, 마치 안드로이드의 `.apk` 나 윈도우의 `.exe` 처럼 말이죠."

#: ../../docs/getting_started/step_by_step/exporting.rst:156
msgid ""
"In the \"Resources\" and \"Features\" tabs, you can customize how the game "
"is exported for each platform. We can leave those settings alone for now."
msgstr ""
"\"리소스\"와 \"기능\" 탭에서 당신은 게임이 각 플랫폼으로 어떻게 만들어질지를 "
"설정할 수 있습니다. 지금은 이 설정을 그냥 놔 두어도 됩니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:160
msgid "Exporting by platform"
msgstr "플랫폼 별 내보내기"

#: ../../docs/getting_started/step_by_step/exporting.rst:162
msgid ""
"In this section, we'll walk through the process for each platform, including "
"any additional software or requirements you'll need."
msgstr ""
"이 섹션에서, 추가 소프트웨어나 요구 사항과 함께 각 플랫폼의 프로세스를 단계적"
"으로 배울겁니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:166
msgid "PC (Linux/macOS/Windows)"
msgstr "PC (리눅스/macOS/윈도우)"

#: ../../docs/getting_started/step_by_step/exporting.rst:168
msgid ""
"Exporting PC platforms works the same across the three supported operating "
"systems. Open the export window and click \"Add..\" to create the preset(s) "
"you want to make. Then click \"Export Project\" and choose a name and "
"destination folder. Choose a location *outside* of your project folder."
msgstr ""
"PC 플랫폼 내보내기는 지원되는 세 가지 운영체제에서 동일하게 작동합니다. 내보"
"내기 창을 열고 \"추가...\"를 눌러 만들고 싶은 프리셋을 생성합니다. 그후 \"프"
"로젝트 내보내기\"를 클릭하고 이름과 목적 폴더를 지정합니다. 당신의 프로젝트 "
"폴더 *바깥* 에 위치를 지정하세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:173
msgid "Click \"Save\" and the engine will build the export files."
msgstr "\"저장\"을 누르면 엔진이 내보내기 파일을 만들겁니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:175
msgid ""
"When exporting for macOS, if you export on a macOS computer, you'll end up "
"with a `.dmg` file, while using Linux or Windows produces a `.zip`. In "
"either case, the compressed file contains a macOS `.app` that you can double-"
"click and run."
msgstr ""
"macOS 컴퓨터에서 작업한다면, macOS로 내보낼 때, 파일을 `.dmg` 파일로 만들 것"
"이고, 반면에 리눅스나 윈도우는 `.zip` 으로 생성합니다. 어떤 경우든지, 압축된 "
"파일은 macOS의 `.app` 을 갖고 있으므로 더블 클릭해서 실행할 수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:180
msgid ""
"On Windows, if you want your exported executable to have a different icon "
"than the default one, you need to change it manually. See: :ref:"
"`doc_changing_application_icon_for_windows`."
msgstr ""
"윈도우에서, 당신이 내보낸 실행 파일이 기존과 다른 아이콘을 갖도록 하고 싶다"
"면, 수동으로 교체해야합니다. 여기를 참고하세요: :ref:"
"`doc_changing_application_icon_for_windows`."

#: ../../docs/getting_started/step_by_step/exporting.rst:187
msgid ""
"Mobile devices come with a wide variety of capabilities. In most cases, "
"Godot's default settings will work, but mobile development is sometimes more "
"art than science, and you may need to do some experimenting and searching "
"for help in order to get everything working."
msgstr ""
"모바일 기기에는 다양한 기능이 있습니다. 대부분의 경우는, Godot의 기본 설정이 "
"먹히지만, 모바일 개발은 때로는 과학보단 더 예술에 가깝습니다, 그리고 모든 것"
"이 작동시키기 위해 도움을 청하고 몇 가지 실험을 하게 될지도 모릅니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:193
msgid ""
"Before you can export your project for Android, you must download the "
"following software:"
msgstr "안드로이드에 내보내기 전에, 다음의 소프트웨어를 다운받으셔야 합니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:196
msgid "Android SDK: https://developer.android.com/studio/"
msgstr "안드로이드 SDK: https://developer.android.com/studio/"

#: ../../docs/getting_started/step_by_step/exporting.rst:197
msgid ""
"Java JDK: http://www.oracle.com/technetwork/java/javase/downloads/index.html"
msgstr ""
"자바 JDK: http://www.oracle.com/technetwork/java/javase/downloads/index.html"

#: ../../docs/getting_started/step_by_step/exporting.rst:199
msgid ""
"When you run Android Studio for the first time, click on *Configure -> SDK "
"Manager* and install \"Android SDK Platform Tools\". This installs the `adb` "
"command-line tool that Godot uses to communicate with your device."
msgstr ""
"안드로이드 스튜디오를 처음 실행하신다면, *Configure -> SDK Manager* 를 클릭하"
"고 \"Android SDK Platform Tools\" 을 실행하세요. 이것은 Godot가 장치와 통신하"
"도록 만드는 `adb` 명령 행 도구를 실행시킵니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:203
msgid ""
"Next, create a debug keystore by running the following command on your "
"system's command line:"
msgstr ""
"다음으로, 시스템의 명령 행에 다음의 명령을 실행시켜 debug keystore를 만드세"
"요:"

#: ../../docs/getting_started/step_by_step/exporting.rst:210
msgid ""
"Click on *Editor -> Editor Settings* in Godot and select the *Export/"
"Android* section. Here, you need to set the paths to the Android SDK "
"applications on your system and the location of the keystore you just "
"created."
msgstr ""
"Godot에서 *에디터 -> 에디터 설정* 으로 가서 *Export/Android*섹션을 선택합니"
"다. 여기에서, 당신은 안드로이드 SDK 응용 프로그램의 위치와 당신이 방금 만든 "
"키 저장소의 위치를 설정해줘야 합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:216
msgid ""
"Now you're ready to export. Click on *Project -> Export* and add a preset "
"for Android (see above)."
msgstr ""
"이제 만들 준비가 됬습니다. *프로젝트 -> 내보내기* 를 누르고 (위에서 본) 안드"
"로이드의 프리셋을 추가하세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:219
msgid ""
"Click the \"Export Project\" button and Godot will build an APK you can "
"download on your device. To do this on the command line, use the following:"
msgstr ""
"\"프로젝트 내보내기\" 버튼을 클릭하면 Godot가 APK를 만들고 휴대용 기기에 다운"
"로드 할 수 있게 됩니다. 명령 행에서 하려면, 이것을 사용하세요:"

#: ../../docs/getting_started/step_by_step/exporting.rst:226
msgid ""
"Your device may need to be in *developer mode*. Consult your device's "
"documentation for details."
msgstr ""
"당신의 기기가 *개발자 모드* 이어야 합니다. 자세한 내용은 장치 설명서를 참고하"
"세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:229
msgid ""
"If your system supports it, connecting a compatible Android device will "
"cause a \"One-click Deploy\" button to appear in Godot's playtest button "
"area:"
msgstr ""
"시스템이 지원한다면, Godot의 실행 버튼 영역에 \"원 클릭 배포\" 버튼이 표시되"
"어 호환 가능한 안드로이드 기기와 연결합니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:234
msgid ""
"Clicking this button builds the APK and copies it onto your device in one "
"step."
msgstr "이 버튼을 누르면 APK를 만들고 당신의 기기로 복사됩니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:239
msgid ""
"In order to build your game for iOS, you must have a computer running macOS "
"with Xcode installed."
msgstr ""
"iOS에 게임이 돌아가게 하고 싶다면, 당신은 macOS와 Xcode가 실행되는 컴퓨터를 "
"갖고 있어야 합니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:242
msgid ""
"Before exporting, there are some settings that you *must* complete for the "
"project to export successfully. First, the \"App Store Team Id\", which you "
"can find by logging in to your Apple developer account and looking in the "
"\"Membership\" section."
msgstr ""
"내보내기 전에, 성공적으로 프로젝트를 내보내기 위해 당신이 *반드시* 해야할 몇 "
"가지 사항이 있습니다. 먼저, \"앱스토어 Team Id\" 입니다, 이것은 당신이 애플 "
"개발자 계정에 로그인 한 후 \"멤버십\" 섹션에서 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:246
msgid "You must also provide icons and splash screen images as shown below:"
msgstr ""
"그리고 반드시 아이콘과 스플래시 스크린 이미지를 다음과 같이 제공해야 합니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:250
msgid "Click \"Export Project\" and select a destination folder."
msgstr "\"프로젝트 내보내기\"를 누르고 대상 폴더를 선택하세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:252
msgid ""
"Once you have successfully exported the project, you'll find the following "
"folders and files have been created in your selected location:"
msgstr ""
"프로젝트가 완전히 내보내졌다면, 당신이 지정한 폴더에 파일들이 만들어 진것을 "
"볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:257
msgid ""
"You can now open the project in Xcode and build the project for iOS. Xcode "
"build procedure is beyond the scope of this tutorial. See https://help.apple."
"com/xcode/mac/current/#/devc8c2a6be1 for more information."
msgstr ""
"당신은 이제 프로젝트를 Xcode에서 열 수 있고 iOS로 프로젝트를 만들 수 있습니"
"다. Xcode 개발 순서는 이 튜토리얼에 해당하지 않습니다. 자세한 것은 https://"
"help.apple.com/xcode/mac/current/#/devc8c2a6be1 를 참고하세요."

#: ../../docs/getting_started/step_by_step/exporting.rst:263
msgid "HTML5 (web)"
msgstr "HTML5 (웹)"

#: ../../docs/getting_started/step_by_step/exporting.rst:265
msgid ""
"Click \"Export Project\" on the HTML5 preset. We don't need to change any of "
"the default settings."
msgstr ""
"HTML5 프리셋으로 \"프로젝트 내보내기\"를 클릭하세요. 기본 설정에서 바꿀 필요"
"가 없습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:268
msgid ""
"When the export is complete, you'll have a folder containing the following "
"files:"
msgstr "내보내기가 끝나면, 다음의 파일이 들어있는 폴더를 찾으실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/exporting.rst:273
msgid ""
"Viewing the `.html` file in your browser lets you play the game. However, "
"you can't open the file directly, it needs to be served by a web server. If "
"you don't have one set up on your computer, you can use Google to find "
"suggestions for your specific OS."
msgstr ""
"브라우저에 `.html` 파일을 열면 게임을 할 수 있습니다. 하지만 바로 파일을 열 "
"수는 없습니다, 그것은 웹 서버에 의해 제공되어야 합니다. 당신의 컴퓨터에 웹서"
"버가 없으면, 구글 검색을 하여 특정 OS에서 웹서버를 설치하는 방법을 찾으실 수 "
"있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:278
msgid ""
"Point your browser at the URL where you've placed the html file. You may "
"have to wait a few moments while the game loads before you see the start "
"screen."
msgstr ""
"URL에 html 파일을 올릴 브라우저를 향하게 하세요. 게임 시작 화면을 보기 전에 "
"잠시 기다려야 할지도 모릅니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:283
msgid ""
"The console window beneath the game tells you if anything goes wrong. You "
"can disable it by setting \"Export With Debug\" off when you export the "
"project."
msgstr ""
"게임 아래 콘솔 창은 게임이 잘못됬는가를 말해줍니다. 프로젝트를 내보낼 때 "
"\"Export With Debug\"를 꺼서 이것을 없앨 수 있습니다."

#: ../../docs/getting_started/step_by_step/exporting.rst:286
msgid ""
"Browser support for WASM is not very widespread. Firefox and Chrome both "
"support it, but you may still find some things that don't work. Make sure "
"you have updated your browser to the most recent version, and report any "
"bugs you find at the `Godot Github repository <https://github.com/"
"godotengine/godot/issues>`_."
msgstr ""
"WASM 에 대한 브라우저 지원은 아직 확산되지 않았습니다. 파이어폭스와 크롬은 둘"
"다 WASM을 지원하지만, 여전히 작동하지 않는 점들을 볼 수도 있습니다. 브라우저"
"를 최신 버전으로 업데이트하고, `Godot Github repository <https://github.com/"
"godotengine/godot/issues>`_ 에 발견한 버그를 신고해주세요."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:4
msgid "Godot’s design philosophy"
msgstr "Godot의 디자인 철학"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:6
msgid "Now that you've gotten your hands wet, let's talk about Godot's design."
msgstr ""
"이제 당신은 손에 땀이 날 지경이니, Godot의 디자인 철학에 대해 얘기해 보겠습니"
"다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:8
msgid ""
"**Every game engine is different and fits different needs.** Not only do "
"they offer a range of features, but the design of each engine is unique. "
"This leads to different workflows and different ways to form your games’ "
"structures. This all stems from their respective design philosophies."
msgstr ""
"**모든 게임 엔진은 서로 다르고 그렇기에 다른 필요를 충족시킵니다.** 그들이 제"
"공하는 기능의 범위 뿐만 아니라, 각 엔진의 디자인도 독특합니다. 이것은 게임의 "
"구조를 형성하는 다양한 방법과 다양한 워크플로우를 유도합니다. 이 모든 것이 각"
"각의 디자인 철학에서 생겨난 것입니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:13
msgid ""
"This page is here to help you understand how Godot works, starting with some "
"of its core pillars. It is not a list of available features, nor is it an "
"engine comparison. To know if any engine can be a good fit for your project, "
"you need to try it out for yourself and understand its design and "
"limitations."
msgstr ""
"이 페이지가 Godot의 작동방식을 이해하도록 돕기 위해, 여러 핵심 기둥들로 시작"
"합니다. 이것은 사용가능한 기능의 목록이 아닐 뿐더러, 엔진을 비교하는 것도 아"
"닙니다. 어떤 엔진이라도 당신의 프로젝트에 잘 맞들어지는지 알기 위해선, 당신"
"이 스스로 시도하고 그것의 디자인과 한계를 이해해야합니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:19
msgid ""
"Please watch `Discover Godot 3, the Free game engine <https://youtu."
"be/4v3qge-3CqQ>`_ if you're looking for an overview of the engine's features."
msgstr ""
"엔진의 기능에 관한 개요를 보고 싶다면 `Discover Godot 3, the Free game "
"engine <https://youtu.be/4v3qge-3CqQ>`_ 를 봐주세요."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:23
msgid "Object-oriented design and composition"
msgstr "객체 지향 디자인과 구성"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:25
msgid ""
"Godot embraces object-oriented design at its core with its flexible scene "
"system and Node hierarchy. It tries to stay away from strict programming "
"patterns to offer an intuitive way to structure your game."
msgstr ""
"Godot는 유연한 씬 시스템과 노드 계층 구조를 갖춘 객체 지향 디자인을 핵심으로 "
"갖고 있습니다. 이것으로 엄격한 프로그래밍 패턴을 피하고 직관적인 방법으로 게"
"임을 구성하도록 만들었습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:29
msgid ""
"For one, Godot lets you **compose or aggregate** scenes. It's like nested "
"prefabs: you can create a BlinkingLight scene and a BrokenLantern scene that "
"uses the BlinkingLight. Then, create a city filled with BrokenLanterns. "
"Change the BlinkingLight's color, save, and all the BrokenLanterns in the "
"city will update instantly."
msgstr ""
"이를 위해 Godot는 당신이 씬을 **조립하거나 집합하도록** 만들었습니다. 이건 마"
"치 중첩 물체같습니다: 당신이 깜박이는 빛 씬을 만들고 이 씬이 사용된 고장난 전"
"봇대 씬을 만들었습니다. 그리고, 고장난 전봇대가 들어간 도시를 만듭니다. 깜박"
"이는 빛의 색을 바꾸고, 저장해서, 도시의 모든 고장난 전봇대가 즉각적으로 업데"
"이트될 것입니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:36
msgid "On top of that, you can **inherit** from any scene."
msgstr "무엇보다도, 당신이 어떤 씬에서든지 **상속하는 것** 이 가능합니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:38
msgid ""
"A Godot scene could be a Weapon, a Character, an Item, a Door, a Level, part "
"of a level… anything you’d like. It works like a class in pure code, except "
"you’re free to design it by using the editor, using only the code, or mixing "
"and matching the two."
msgstr ""
"Godot 씬은 무기나 캐릭터, 아이템, 문, 하나의 레벨, 레벨의 일부... 원하는 어"
"떤 것이든 될수 있습니다. 에디터를 사용하거나, 오직 코드만을 사용하거나 이 둘"
"을 섞어서 일치시켜서 자유롭게 디자인한다는 경우를 제외하면 마치 순수코드에서"
"의 클래스처럼 작동합니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:43
msgid ""
"It’s different from prefabs you find in several 3D engines, as you can then "
"inherit from and extend those scenes. You may create a Magician that extends "
"your Character. Modify the Character in the editor and the Magician will "
"update as well. It helps you build your projects so that their structure "
"matches the game’s design."
msgstr ""
"이것은 씬을 상속하고 확장한다는 점에서 여러 3D 엔진에서 볼수 있는 프리펩과는 "
"다릅니다. 당신은 캐릭터를 확장시켜 마법사를 만들수도 있습니다. 에디터에 있는 "
"캐릭터를 수정하면 마법사도 이를 업데이트합니다. 이것은 당신이 프로젝트를 만들"
"면서 프로젝트 구조가 게임 디자인에 일치하도록 도와줍니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:51
msgid ""
"Also note that Godot offers many different types of objects called nodes, "
"each with a specific purpose. Nodes are part of a tree and always inherit "
"from their parents up to the Node class. Although the engine does feature "
"components like collision shapes, they’re the exception, not the norm."
msgstr ""
"또한 Godot는 노드라고 불리는 다양한 유형의 객체를 제공합니다, 이들 각각 특정"
"한 목적을 지니고 있습니다. 노드는  트리의 일부분으로 항상 그들의 부모 노드에"
"서 노드 클래스까지 상속합니다. 비록 엔진이 충돌 모양같은 구성 요소를 포함하지"
"만, 이들은 예외이고, 표준이 아닙니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:59
msgid ""
"Sprite is a Node2D, a CanvasItem and a Node. It has all the properties and "
"features of its three parent classes, like transforms or the ability to draw "
"custom shapes and render with a custom shader."
msgstr ""
"Node2D의 Sprite, CanvasItem과 Node. 이 세 개의 부모 클래스는 모든 속성과 기능"
"을 가지고 있습니다, 예를들면 변환이나 사용자 지정 모양을 그리고 쉐이더로 렌더"
"하는 것이 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:64
msgid "All-inclusive package"
msgstr "모든 것이 들어있는 패키지"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:66
msgid ""
"Godot tries to provide its own tools to answer most common needs. It has a "
"dedicated scripting workspace, an animation editor, a tilemap editor, a "
"shader editor, a debugger, a profiler, the ability to hot-reload locally and "
"on remote devices, etc."
msgstr ""
"Godot는 가장 보편적인 요구들의 해답을 제공하고자 노력했습니다. Godot는 전용 "
"스크립팅 작업 공간과 애니메이션 에디터, 타일맵 에디터, 쉐이더 에디터, 디버"
"거, 프로파일러, 로컬 및 원격 장치를 핫 리로드 하는 기능 등등을 가지고 있습니"
"다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:73
msgid ""
"The goal is to offer a full package to create games and a continuous user "
"experience. You can still work with external programs as long as there is an "
"import plugin for it. Or you can create one, like the `Tiled Map Importer "
"<https://github.com/vnen/godot-tiled-importer>`__."
msgstr ""
"목표는 게임을 만드는 모든 패키지와 끊김없는 사용자 경험을 제공하는 것입니다. "
"물론 가져오기 플러그인이 있다면 여전히 외부 프로그램과 함께 작업할 수 있습니"
"다. 아니면  `Tiled Map Importer <https://github.com/vnen/godot-tiled-"
"importer>`__ 처럼 하나로 만들 수도 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:78
msgid ""
"That is also partly why Godot offers its own programming languages GDscript "
"and VisualScript, along with C#. They’re designed for the needs of game "
"developers and game designers, and they’re tightly integrated in the engine "
"and the editor."
msgstr ""
"이것이 Godot가 C#과 함께, 고유의 프로그래밍 언어인 GDScript와 VisualScript를 "
"제공하는 이유이기도 합니다. 그들은 게임 개발자와 게임 디자이너의 필요를 위해 "
"제작되었고, 엔진과 에디터에 완벽하게 통합됩니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:83
msgid ""
"GDscript lets you write simple code using Python-like syntax, yet it detects "
"types and offers a static language's quality of auto-completion. It is also "
"optimized for gameplay code with built-in types like Vectors and Colors."
msgstr ""
"GDScript는 Python과 유사한 구문을 사용하여 쉬운 코드를 사용하지만, 타입을 인"
"지하고 정적 언어의 자동 완성 품질을 제공합니다. 또한 Vectors와 Colors 같은 내"
"장 함수를 가지고 있어 게임플레이 코드에 최적화되어 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:87
msgid ""
"Note that with GDNative, you can write high-performance code using compiled "
"languages like C, C++, Rust, or Python (using the Cython compiler) without "
"recompiling the engine."
msgstr ""
"GDNative를 사용하면, 엔진을 리컴파일하지 않고 C, C++, Rust, 아니면 (Cython 컴"
"파일러를 사용한) Python과 같이 컴파일된 언어를 사용해 고성능의 코드를 작성할 "
"수 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:93
msgid ""
"*VisualScript is a node-based programming language that integrates well in "
"the editor. You can drag and drop nodes or resources into the graph to "
"create new code blocks.*"
msgstr ""
"*VisualScript는 노드 기반 프로그래밍 언어로 에디터에 잘 통합되어 있습니다. 노"
"드나 리소스를 그래프로 드래그 앤 드롭하여 새 노드 블럭을 생성할 수 있습니다.*"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:97
msgid ""
"Note that the 3D workspace doesn’t feature as many tools as the 2D "
"workspace. You’ll need external programs or add-ons to edit terrains, "
"animate complex characters, and so on. Godot provides a complete API to "
"extend the editor’s functionality using game code. See `The Godot editor is "
"a Godot game`_ below."
msgstr ""
"3D 작업 공간은 2D 작업 공간같은 도구들이 많지 않습니다. 당신은 외부 프로그램"
"이나 애드온으로 지형을 편집하거나, 복잡한 캐릭터를 애니메이트하거나 해야합니"
"다. Godot는 게임 코드를 사용하여 에디터의 기능성을 넓히는 완전한 API를 제공합"
"니다. 하단의 `The Godot editor is a Godot game`_ 을 참고하세요."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:104
msgid ""
"*A State Machine editor plugin in Godot 2 by kubecz3k. It lets you manage "
"states and transitions visually.*"
msgstr ""
"*Godot 엔진 2에서 kubecz3k님이 만드신 State Machine editor 플러그인입니다. 이"
"걸로 당신은 시각적으로 상태와 변화를 다룰 수 있습니다.*"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:108
msgid "Open source"
msgstr "오픈 소스"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:110
msgid ""
"Godot offers a fully open source codebase under the **MIT license**. This "
"means all the technologies that ship with it have to be Free (as in freedom) "
"as well. For the most part, they’re developed from the ground up by "
"contributors."
msgstr ""
"Godot는 **MIT 라이선스** 하에 완전한 오픈 소스 코드베이스를 제공합니다. 이는 "
"여기서 제공하는 모든 기술들은 (자유로서의) 무료임을 의미합니다. 대부분의 기술"
"들은, 참여자들에 의해 기초부터 개발되었습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:115
msgid ""
"Anyone can plug in proprietary tools for the needs of their projects — they "
"just won’t ship with the engine. This may include NVIDIA PhysX, Google "
"AdMob, or an FBX model importer. Any of these can come as third-party "
"plugins instead."
msgstr ""
"누구든지 프로젝트에 필요한 도구들을 연결할 수 있습니다 — 다만 그것들이 엔진"
"과 함께 제공되지 않습니다. 이것들은 아마 NViDia PhysX나 구글 애드몹, 혹은 "
"FBX 파일 importer일 것입니다. 이들은 대신 제 3자 플러그인으로서 넣을 수 있습"
"니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:120
msgid ""
"On the other hand, an open codebase means you can **learn from and extend "
"the engine** to your heart’s content. You can also debug games easily, as "
"Godot will print errors with a stack trace, even if they come from the "
"engine itself."
msgstr ""
"한편, 오픈 코드베이스는 당신이 **엔진에서 배우고 확장하여** 당신의 마음대로 "
"콘텐츠를 만들 수 있다는 것을 의미합니다. 또한 Godot는 에러가 엔진 자체에서 발"
"생하는 것일지라도, 스택 추적을 포함한 에러를 출력하므로, 게임을 쉽게 디버깅 "
"할 수 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:126
msgid ""
"This **does not affect the work you do with Godot** in any way: there’s no "
"strings attached to the engine or anything you make with it."
msgstr ""
"이것은 어떤 방식으로라도 **Godot를 사용하는 작업에 영향을 주지 않습니다** : "
"엔진에는 어떤 문자열도 붙어있지 않고 문자열로 만들 것도 없습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:130
msgid "Community-driven"
msgstr "커뮤니티 중심"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:132
msgid ""
"**Godot is made by its community, for the community, and for all game "
"creators out there.** It’s the needs of the users and open discussions that "
"drive the core updates. New features from the core developers often focus on "
"what will benefit the most users first."
msgstr ""
"**Godot는 커뮤니티에 의해, 커뮤니티를 위해, 그리고 모든 게임 개발자들을 위해 "
"만들어졌습니다.** 이것은 핵심 업데이트를 이끌어 내는 열린 토론과 사용자들의 "
"요구가 반영된 것입니다. 새로은 기능은 핵심 개발자로부터 나오며 대부분의 사용"
"자들에게 도움을 주는 것을 최우선으로 봅니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:137
msgid ""
"That said, although a handful of core developers work on it full-time, the "
"project has over 600 contributors at the time of writing. Benevolent "
"programmers work on features they may need themselves, so you’ll see "
"improvements in all corners of the engine at the same time in every major "
"release."
msgstr ""
"이는 즉, 비록 소수의 핵심 개발자들이 하루 종일 일할지라도, 프로젝트는 그 시간"
"에 600명이 넘는 참여자가 활동합니다. 자애로운 프로그래머들이 스스로에게 필요"
"한 기능들을 작업하기 때문에, 모든 주요 릴리즈 마다 엔진의 모든 방면에서 개선"
"되는 것을 볼 수 있을 겁니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:144
msgid "The Godot editor is a Godot game"
msgstr "Godot 에디터는 Godot 게임입니다"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:146
msgid ""
"The Godot editor runs on the game engine. It uses the engine’s own UI "
"system, it can hot-reload code and scenes when you test your projects, or "
"run game code in the editor. This means you can **use the same code** and "
"scenes for your games, or **build plugins and extend the editor.**"
msgstr ""
"Godot 에디터는 게임 엔진으로 돌아갑니다. 이것은 엔진 스스로의 UI 시스템을 사"
"용하고, 프로젝트를 테스트하거나 에디터에서 게임 코드를 실행할 때 코드와 씬을 "
"핫 리로드 할 수 있습니다. 이는 당신이 게임에 쓰는 코드와 **같은 코드와 씬을 "
"사용해서** , **플러그인을 만들거나 에디터를 확장** 시킬 수 있다는 것을 의미합"
"니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:151
msgid ""
"This leads to a reliable and flexible UI system, as it powers the editor "
"itself. With the ``tool`` keyword, you can run any game code in the editor."
msgstr ""
"이것은 에디터 자체에 권한을 부여하기 때문에 안정적이고 유연한 UI 시스템을 만"
"듭니다. ``tool`` 키워드로 당신은 에디터에서 어떤 게임 코드도 실행시킬 수 있습"
"니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:156
msgid ""
"*RPG in a Box is a voxel RPG editor made with Godot 2. It uses Godot’s UI "
"tools for its node-based programming system and for the rest of the "
"interface.*"
msgstr ""
"*RPG in a Box는 복셀 RPG 에디터로 Godot 2 에서 만들어졌습니다. 노드 기반 프로"
"그래밍 시스템과 인터페이스의 일부를 위해 Godot UI 툴을 사용했습니다.*"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:160
msgid ""
"Put the ``tool`` keyword at the top of any GDScript file and it will run in "
"the editor. This lets you import and export plugins, create plugins like "
"custom level editors, or create scripts with the same nodes and API you use "
"in your projects."
msgstr ""
"``tool`` 키워드를 GDscript 파일의 맨 위에 놓으면 에디터에서 파일이 실행될 것"
"입니다. 이걸로 당신은 프로젝트에 쓰이는 것과 똑같은 노드와 API를 가지고 플러"
"그인을 내보내거나 가져올 수 있고, 사용자 지정 레벨 에디터 같은 플러그인을 제"
"작하거나, 스크립트를 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:166
msgid "Separate 2D and 3D engines"
msgstr "2D 와 3D 엔진을 분리함"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:168
msgid ""
"Godot offers dedicated 2D and 3D rendering engines. As a result, **the base "
"unit for 2D scenes is pixels.** Even though the engines are separate, you "
"can render 2D in 3D, 3D in 2D, and overlay 2D sprites and interfaces over "
"your 3D world."
msgstr ""
"Godot는 전용 2D 와 3D 렌더링 엔진을 제공합니다. 그 결과 **2D 씬의 기본 단위"
"는 픽셀입니다.** 비록 엔진이 분리되더라도, 당신은 3D에서 2D를, 2D에서 3D를 렌"
"더할 수 있고, 3D 월드에 2D 스프라이트와 인터페이스를 씌울 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:4
msgid "Design interfaces with the Control nodes"
msgstr "컨트롤(Control) 노드로 인터페이스를 설계하기"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:6
msgid ""
"Computer displays, mobile phones, and TV screen come in all shapes and "
"sizes. To ship a game, you'll need to support different screen ratios and "
"resolutions. It can be hard to build responsive interfaces that adapt to all "
"platforms. Thankfully, Godot comes with robust tools to design and manage a "
"responsive User Interface. To design your UI, you'll use the Control nodes. "
"These are the nodes with green icons in the editor. There are dozens of "
"them, to create anything from life bars to complex applications. Godot's "
"entire editor and plugins use these nodes."
msgstr ""
"컴퓨터 디스플레이, 모바일 폰, 그리고 TV 화면은 모든 크기와 모양을 갖습니다. "
"게임을 출시하려면, 당신은 다양한 화면 비율과 해상도를 지원해야 합니다. 모든 "
"플랫폼에 적용되는 반응형 인터페이스를 만드는 것은 어려울 수 있습니다. 감사하"
"게도, Godot의 든든한 도구들로 반응형 인터페이스를 제작하고 관리할 수 있습니"
"다. UI를 설계하기 위해선, 당신은 Control 노드들을 사용할 겁니다. 이들은 에디"
"터 내 초록 아이콘을 갖고 있는 노드입니다. 이들은 많기 때문에 체력 막대부터 복"
"잡한 애플리케이션까지 만들 수 있습니다. Godot의 모든 에디터와 플러그인은 이 "
"노드들을 사용합니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:17
msgid "Godot's editor is made with the engine's UI framework"
msgstr "Godot 에디터는 엔진의 UI 프레임 워크로 제작되었습니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:19
msgid "This guide will get you started with UI design. You will learn:"
msgstr ""
"이 강좌는 UI 디자인으로 시작할 것입니다. 당신은 이러한 것들을 배울 겁니다:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:21
msgid "The five most useful control nodes to build your games’ interface"
msgstr "게임 인터페이스를 제작하는 가장 유용한 다섯 가지 컨트롤 노드들"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:22
msgid "How to work with the anchor of UI elements"
msgstr "UI 요소들의 앵커 작업 방법"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:23
msgid ""
"How to efficiently place and arrange your user interface using containers"
msgstr ""
"컨테이너를 사용해서 사용자 인터페이스를 효율적으로 배치하고 배열하는 방법"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:25
msgid "The five most common containers"
msgstr "가장 일반적인 다섯 가지 컨테이너"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:27
msgid ""
"To learn how to control the interface and connect it to other scripts, read :"
"ref:`Build your first game UI in Godot <doc_ui_game_user_interface>`."
msgstr ""
"인터페이스를 컨트롤하고 다른 스크립트에 연결하는 방법을 배우려면, `Build "
"your first game UI in Godot <doc_ui_game_user_interface>` 를 읽어주세요."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:30
msgid ""
"Only use Control nodes when you design your interfaces. They have unique "
"properties that allow them to work with one another. Other nodes, like "
"Node2D, Sprite, etc. will not work. You can still use some nodes that work "
"with others, like the AnimationPlayer, Tween or the StreamPlayer. Control "
"nodes are CanvasItems like Node2D, so you can apply shaders to them."
msgstr ""
"인터페이스를 설계할 때 오직 컨트롤 노드만 사용하세요. 그들은 서로 상호작용하"
"는 독특한 속성을 지닙니다. Node2D, Sprite 등 과 같은 다른 노드들은 할 수 없습"
"니다. 당신은 AnimationPlayer나 Tween, StreamPlayer같은 다른 노드들과 작동하"
"는 일부 노드들을 사용할 수 있습니다. 컨트롤 노드는 Node2D와 같은 CanvasItems"
"이므로, 그것들에 쉐이더를 적용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:37
msgid "All control nodes share the same main properties:"
msgstr "모든 컨트롤 노드는 동일한 메인 속성을 공유합니다:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:39
msgid "Anchor"
msgstr "앵커(Anchor)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:40
msgid "Bounding rectangle"
msgstr "경계 사각형(Bounding rectangle)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:41
msgid "Focus and focus neighbor"
msgstr "포커스(Focus)와 포커스 이웃(Focus neighbor)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:42
msgid "Size flags"
msgstr "사이즈 플래그(Size flags)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:43
msgid "Margin"
msgstr "마진(Margin)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:44
msgid "The optional UI theme"
msgstr "선택적인 UI 테마"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:46
msgid ""
"Once you understand the basics of the Control node, it will take you less "
"time to learn all the nodes that derive from it."
msgstr ""
"일단 당신이 컨트롤 노드의 기초를 이해했다면, 노드에서 파생되는 모든 다른 노드"
"들을 이해하는 데 오래 걸리지 않을 겁니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:51
msgid "The 5 most common UI elements"
msgstr "가장 일반적인 5개의 UI 요소들"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:53
msgid ""
"Godot ships with dozens of Control nodes. A lot of them are here to help you "
"build editor plugins and applications."
msgstr ""
"Godot는 수십 개의 컨트롤 노드를 갖고 있습니다. 이들이 당신이 에디터 플러그인"
"과 애플리케이션을 만드는 것을 도와줍니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:56
msgid ""
"For most games, you'll only need five types of UI elements, and a few "
"Containers. These five Control nodes are:"
msgstr ""
"대부분의 게임에, 당신은 오로지 다섯 가지 UI 요소와, 몇 개의 컨테이너들만 필요"
"합니다. 컨트롤 노드들은 이렇습니다:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:59
msgid "Label: for displaying text"
msgstr "Label: 문자를 보여주기 위해 사용합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:60
msgid ""
"TextureRect: used mostly for backgrounds, or everything that should be a "
"static image"
msgstr ""
"TextureRect: 보통은 배경으로 사용되고, 그 외 모든 정적 이미지에 사용합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:62
msgid ""
"TextureProgress: for lifebars, loading bars, horizontal, vertical or radial"
msgstr ""
"TextureProgress: 체력 막대, 로딩 막대, 가로 형태, 세로 형태, 혹은 방사 형태"
"에 사용합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:64
msgid "NinePatchRect: for scalable panels"
msgstr "NinePatchRect: 확장 가능한 패널에 사용합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:65
msgid "TextureButton: to create buttons"
msgstr "TextureButton: 버튼을 만들기 위해 사용합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:69
msgid "The 5 most common Control nodes for UI design"
msgstr "UI 디자인을 위한 5개의 가장 일반적인 컨트롤 노드들"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:72
msgid "TextureRect"
msgstr "TextureRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:74
msgid ""
"**TextureRect** displays a texture or image inside a UI. It seems similar to "
"the Sprite node, but it offers multiple scaling modes. Set the Stretch Mode "
"property to change its behavior:"
msgstr ""
"**TextureRect** 은 UI 내에 텍스쳐나 이미지를 보여줍니다. 이것은 Sprite 노드"
"와 비슷하지만 다중 크기 조절 모드를 제공합니다. Sprite 노드의 동작을 변경하려"
"면 Stretch Mode 속성을 설정하세요:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:78
msgid ""
"``Scale On Expand (compat)`` scales the texture to fit the node’s bounding "
"rectangle, only if ``expand`` property is ``true``; otherwise, it behaves "
"like ``Keep`` mode. Default mode for backwards compatibility."
msgstr ""
"``Scale On Expand (compat)`` 는 오직 ``expand`` 속성이 ``true`` 로 되어 있을 "
"때 텍스쳐가 노드의 경계 사각형에 꽉 차도록 크기를 조절하고; 그렇지 않으면 이"
"것은 ``Keep`` 모드와 다르지 않습니다. 호환성을 되돌리기 위한 기본 모드."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:79
msgid "``Scale`` scales the texture to fit the node’s bounding rectangle"
msgstr "``Scale`` 은 텍스쳐가 노드의 경계 사각형에 꽉 차도록 크기를 조절합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:80
msgid "``Tile`` makes the texture repeat, but it won't scale"
msgstr ""
"``Tile`` 은 텍스쳐가 바둑판으로 배열되도록 만들고, 크기를 조절하지 않습니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:81
msgid ""
"``Keep`` and ``Keep Centered`` force the texture to remain at its original "
"size, in the top left corner or the center of the frame respectively"
msgstr ""
"``Keep`` 과 ``Keep Centered`` 는 텍스쳐가 그 크기를 유지하게 합니다, 각각 경"
"계의 좌측 상단과 중심에 위치시킵니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:84
msgid ""
"``Keep Aspect`` and ``Keep Aspect Centered`` scales the texture but force it "
"to remain its original aspect ratio, in the top left corner or the center of "
"the frame respectively"
msgstr ""
"``Keep Aspect`` 와 ``Keep Aspect Centered`` 는 텍스쳐의 크기를 조절하지만 그"
"것의 크기 비율은 유지합니다, 각각 경계의 좌측 상단과 중심에 위치시킵니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:85
msgid ""
"``Keep Aspect Covered`` works just like ``Keep Aspect Centered`` but the "
"shorter side fits the bounding rectangle and the other one clips to the "
"node’s limits"
msgstr ""
"``Keep Aspect Covered`` 는 ``Keep Aspect Centered`` 와 비슷하지만 경계 직사각"
"형의 짧은 변 쪽은 꽉 차는 반면, 긴 변 쪽은 노드의 경계까지만 보여주고 짤립니"
"다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:87
msgid ""
"As with Sprite nodes, you can modulate the TextureRect's color. Click the "
"``Modulate`` property and use the color picker."
msgstr ""
"Sprite 노드와 마찬가지로, 당신은 TextureRect의 색상을 바꿀 수 있습니다. "
"``Modulate`` 속성을 눌러 색상 선택기를 사용하세요."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:92
msgid "TextureRect modulated with a red color"
msgstr "빨강 색으로 바뀐 TextureRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:95
msgid "TextureButton"
msgstr "TextureButton"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:97
msgid ""
"**TextureButton** is like TextureRect, except it has 5 texture slots: one "
"for each of the button's states. Most of the time, you'll use the Normal, "
"Pressed, and Hover textures. Focused is useful if your interface listens to "
"the keyboard's input. The sixth image slot, the Click Mask, lets you define "
"the clickable area using a 2-bit, pure black and white image."
msgstr ""
"**TextureButton** 은 TextureRect와 비슷하지만, 5개의 텍스쳐 슬롯을 갖고 있습"
"니다: 이들은 각 버튼의 상태입니다. 대부분은, Normal, Pressed, 그리고 Hover 텍"
"스쳐를 사용할 겁니다. Focused는 인터페이스가 키보드의 입력을 수신하는 경우에 "
"유용합니다. 여섯 번째 이미지 슬롯인, Click Mask는, 순수한 흰색과 검은색 2-비"
"트를 사용해 클릭할 수 있는 영역을 정의하게 만듭니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:104
msgid ""
"In the Base Button section, you'll find a few checkboxes that change how the "
"button behaves. When ``Toggle Mode`` is on, the button will toggle between "
"active and normal states when you press it. ``Disabled`` makes it disabled "
"by default, in which case it will use the ``Disabled`` texture. "
"TextureButton shares a few properties with the texture frame: it has a "
"``modulate`` property, to change its color, and ``Resize`` and ``Stretch`` "
"modes to change its scale behavior."
msgstr ""
"Base Button 섹션에서, 당신은 버튼이 행동하는 법을 바꾸는 몇 가지 체크 상자를 "
"볼 수 있을 겁니다. ``Toggle Mode`` 가 켜지면, 버튼은 당신이 눌렀을 때 활성화"
"와 기본 상태를 껏다 켯다 할 것입니다. ``Disabled`` 는 버튼을 기본 상태로 만들"
"고, 이 경우에 ``Disabled`` 텍스쳐를 사용합니다. TextureButton은  앞의 노드와 "
"몇 가지 속성들을 공유합니다: ``modulate`` 속성을 갖고 있어서, 색상을 바꿀 수 "
"있고, ``Resize`` 와 ``Stretch`` 모드로 크기의 변화를 바꿀 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:114
msgid "TextureButton and its 5 texture slots"
msgstr "TextureButton과 5개의 텍스쳐 슬롯"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:117
msgid "TextureProgress"
msgstr "TextureProgress"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:119
msgid ""
"**TextureProgress** layers up to 3 sprites to create a progress bar. The "
"Under and Over textures sandwich the Progress one, which displays the bar's "
"value."
msgstr ""
"**TextureProgress** 는 진행 막대를 만들기 위해 3개의 스프라이트로 층을 쌓습니"
"다. Under와 Over 텍스쳐 사이에 막대의 값을 보여줄 Progress를 끼워 넣습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:123
msgid ""
"The ``Mode`` property controls the direction in which the bar grows: "
"horizontally, vertically, or radially. If you set it to radial, the "
"``Initial Angle`` and ``Fill Degrees`` properties let you limit the range of "
"the gauge."
msgstr ""
"``Mode`` 속성은 어느 방향으로 막대가 자라게 할지 제어합니다: 수평, 수직 아니"
"면 방사형으로 말입니다. 방사형으로 설정하면, ``Initial Angle`` 과 ``Fill "
"Degrees``  속성으로 당신은 게이지의 범위를 제한할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:128
msgid ""
"To animate the bar, you'll want to look at the Range section. Set the "
"``Min`` and ``Max`` properties to define the range of the gauge. For "
"instance, to represent a character's life, you'll want to set ``Min`` to ``0,"
"`` and ``Max`` to the character's maximum life. Change the ``Value`` "
"property to update the bar. If you leave the ``Min`` and ``Max`` values to "
"the default of ``1`` and ``100,`` and set the ``Value`` property to ``40``, "
"40% of the ``Progress`` texture will show up, and 60% of it will stay hidden."
msgstr ""
"막대를 애니메이트 하기 위해, 당신은 Range 섹션을 확인해야 합니다. ``Min`` 과 "
"``Max`` 속성으로 게이지의 범위를 설정하세요. 예를 들어, 캐릭터의 체력을 나타"
"내려면, 당신은 ``Min`` 을 ``0`` 으로, ``Max`` 를 캐릭터의 최대 체력으로 설정"
"해야 할 겁니다. ``Value`` 속성을 바꿔서 막대를 업데이트 하세요. 만약 ``Min`` "
"과 ``Max`` 를 기본 값인 ``1`` 과 ``100`` 으로 두고, ``Value`` 속성을 ``40`` "
"으로 하면, ``Progress`` 텍스쳐의 40%가 보여지고 60%는 계속 안 보일 겁니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:138
msgid "TextureProgress bar, two thirds filled"
msgstr "3분의 2가 채워진 TextureProgress 막대"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:143
msgid ""
"**Label** prints text to the screen. You'll find all its properties in the "
"Label section, in the Inspector. Write the text in the ``Text`` property, "
"and check Autowrap if you want it to respect the textbox's size. If Autowrap "
"is off, you won't be able to scale the node. You can align the text "
"horizontally and vertically with Align and Valign, respectively."
msgstr ""
"**Label** 은 문자를 화면에 출력합니다. 당신은 이것의 모든 속성을 인스펙터의 "
"Label 섹션에서 찾으실 수 있습니다. ``Text`` 속성에서 문자를 쓰고, 텍스트 상자"
"의 크기에 맞추어 자동줄바꿈을 하여 글자가 표시되기를 원한다면 Autowrap을 체크"
"하세요. Autowrap이 체크가 풀려있으면, 노드의 크기를 조절할 수 없습니다. 당신"
"은 Align과 Valign을 사용해서 문자를 가로와 세로로 정렬할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:152
msgid "Picture of a Label"
msgstr "Label의 사진"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:155
msgid "NinePatchRect"
msgstr "NinePatchRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:157
msgid ""
"**NinePatchRect** takes a texture split in 3 rows and 3 columns. The center "
"and the sides tile when you scale the texture, but it never scales the "
"corners. It is useful to build panels, dialog boxes and scalable backgrounds "
"for your UI."
msgstr ""
"**NinePatchRect** 텍스쳐를 3행과 3열로 분할합니다. 중앙과 가장자리는 텍스쳐"
"의 크기에 맞추어지지만, 모서리 부분은 크기가 바뀌지 않습니다. 이것은 패널이"
"나 대화 상자, UI에서 크기 조절이 가능한 배경을 만들 때 유용합니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:164
msgid "NinePatchRect scaled with the min\\_size property"
msgstr "min\\_size 속성으로 조절된 NinePatchRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:167
msgid "There are two workflows to build responsive UIs"
msgstr "반응형 UI를 만들기 위한 두 가지 워크플로우가 있습니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:169
msgid ""
"There are two workflows to build scalable and flexible interfaces in Godot:"
msgstr ""
"Godot에서 확장성 있고 유연한 인터페이스를 만들기 위한 두 가지 워크플로우가 있"
"습니다:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:171
msgid ""
"You have many container nodes at your disposal that scale and place UI "
"elements for you. They take control over their children."
msgstr ""
"원하는 만큼의 UI 요소들을 확장하고 배치할 수 있는 많은 컨테이너 노드들이 있습"
"니다. 컨테이너는 그들의 자식인 UI 요소들을 제어합니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:172
msgid ""
"On the other side, you have the layout menu. It helps you to anchor, place "
"and resize a UI element within its parent."
msgstr ""
"반대로, 당신은 레이아웃 메뉴가 있습니다. 이것은 UI 요소들을 부모 내에서 부모"
"위치를 기준로 위치를 고정하거나 배치하고 크기 조절하도록 돕습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:174
msgid ""
"The two approaches are not always compatible. Because a container controls "
"its children, you cannot use the layout menu on them. Each container has a "
"specific effect, so you may need to nest several of them to get a working "
"interface. With the layout approach you work from the bottom up, on the "
"children. As you don't insert extra containers in the scene it can make for "
"cleaner hierarchies, but it's harder to arrange items in a row, column, "
"grid, etc."
msgstr ""
"두 가지 방법(컨테이너와 레이아웃)이 항상 호환되는 것은 아닙니다. 컨테이너는 "
"자식을 제어하기 때문에, 레이아웃 메뉴를 그것들에게 사용할 수 없습니다. 각 컨"
"테이너는 특정한 효과를 갖고 있으므로 당신은 제대로 동작하는 인터페이스를 얻"
"기 위해 그들을 중첩해서 사용할지도 모릅니다. 레이아웃 접근으로는 자식들을 계"
"층상 아래에서 위로 작업합니다. 씬에 추가적인 컨테이너를 사용하지 않으므로 더 "
"깨끗한 계층 구조를 만들 수 있지만, 항목을 행이나 열, 격자 등으로 배열하기는 "
"더 어렵습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:176
msgid ""
"As you create UIs for your games and tools, you'll develop a sense for what "
"fits best in each situation."
msgstr ""
"게임과 도구를 위해 UI를 만들 때, 당신은 각 상황에서 무엇이 가장 적당한지에 대"
"한 감각을 기르게 될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:180
msgid "Place UI elements precisely with anchors"
msgstr "앵커를 사용하여 UI 요소를 정밀하게 배치하세요"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:182
msgid ""
"Control nodes have a position and size, but they also have anchors and "
"margins. Anchors define the origin, or the reference point, for the Left, "
"Top, Right and Bottom edges of the node. Change any of the 4 anchors to "
"change the reference point of the margins."
msgstr ""
"컨트롤 노드는 position과 size를 갖고 있고, anchors와 margins도 있습니다. "
"Anchors는 노드의 Left, Top, Right, Bottom 모서리를 위해 원점이나 기준점을 정"
"의합니다. 4개의 앵커 중 아무거나 바꿔서 margins의 기준점을 변경하세요."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:189
msgid "The anchor property"
msgstr "앵커 속성"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:192
msgid "How to change the anchor"
msgstr "앵커를 바꾸는 방법"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:194
msgid ""
"Like any properties, you can edit the 4 anchor points in the Inspector, but "
"this is not the most convenient way. When you select a control node, the "
"layout menu appears above the viewport, in the toolbar. It gives you a list "
"of icons to set all 4 anchors with a single click, instead of using the "
"inspector’s 4 properties. The layout menu will only show up when you select "
"a control node."
msgstr ""
"모든 속성과 마찬가지로, 인스펙터에서 4개의 앵커 포인트를 편집할 수 있습니다"
"만, 가장 편리한 방법은 아닙니다. 당신이 컨트롤 노드를 선택할 때, 레이아웃 메"
"뉴가 뷰포트 위의 툴바에 나타납니다. 이것은 클릭 만으로 4개의 앵커들을 모두 설"
"정할 수 있습니다, 인스펙터의 4개의 속성을 사용하는 대신 말이죠. 레이아웃 메뉴"
"는 오직 컨트롤 노드를 선택할 때만 보여집니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:203
msgid "The layout menu in the viewport"
msgstr "뷰포트 내의 레이아웃 메뉴"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:206
msgid "Anchors are relative to the parent container"
msgstr "앵커는 부모 컨테이너를 기준로 합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:208
msgid ""
"Each anchor is a value between 0 and 1. For the left and top anchors, a "
"value of 0 means that without any margin, the node's edges will align with "
"the left and top edges of its parent. For the right and bottom edges, a "
"value of 1 means they'll align with the parent container's right and bottom "
"edges. On the other hand, margins represent a distance to the anchor "
"position in pixels, while anchors are relative to the parent container's "
"size."
msgstr ""
"각 앵커는 0부터 1사이의 값을 갖습니다. 왼쪽과 위 앵커가 0의 값을 갖는 것은 마"
"진이 없다는 것을 의미하고, 노드의 가장자리는 부모 노드의 왼쪽 위에 정렬됩니"
"다. 오른쪽과 아래 가장자리가 1의 값을 갖는 것은 부모 컨테이너의 오른쪽과 아"
"래 가장자리에 정렬된다는 것을 의미합니다. 한편, 마진은 앵커의 위치에서 거리"
"를 픽셀 단위로 나타냅니다, 반면에 앵커는 부모 컨테이너의 크기와 관련이 있습니"
"다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:218
msgid ""
"Margins are relative to the anchor position, which is relative to the "
"anchors. In practice, you'll often let the container update margins for you"
msgstr ""
"마진은 앵커 위치에 상대적이고, 앵커 위치는 앵커와 상대적입니다. 실제의 경우, "
"당신은 종종 컨테이너가 마진을 업데이트하도록 할 것입니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:223
msgid "Margins change with the anchor"
msgstr "마진은 앵커가 변하면 같이 변합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:225
msgid ""
"Margins update automatically when you move or resize a control node. They "
"represent the distance from the control node's edges to its anchor, which is "
"relative to the parent control node or container. That's why your control "
"nodes should always be inside a container, as we'll see in a moment. If "
"there's no parent, the margins will be relative to the node's own bounding "
"Rectangle, set in the Rect section, in the inspector."
msgstr ""
"컨트롤 노드를 움직이고 크기를 조정할 때 마진은 자동으로 업데이트 됩니다. 마진"
"은 컨트롤 노드의 모서리에서 앵커까지의 거리를 나타내고, 앵커는 부모 컨트롤 노"
"드나 컨테이너의 위치에 대해 상대적입니다. 이것이 우리가 곧 알게 될, 컨트롤 노"
"드가 항상 컨테이너에 있는 이유입니다. 부모가 없다면, 마진은 인스펙터 내에 "
"Rect 섹션에 설정된, 자신의 경계 사각형에 상대적으로 될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:235
msgid "Margins on a CenterContainer set to the \"Full Rect\" anchor"
msgstr "CenterContainer에 있는 \"Full Rect\" 앵커로 설정된 마진"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:237
msgid ""
"Try to change the anchors or nest your Control nodes inside Containers: the "
"margins will update. You'll rarely need to edit the margins manually. Always "
"try to find a container to help you first; Godot comes with nodes to solve "
"all the common cases for you. Need to add space between a lifebar and the "
"border of the screen? Use the MarginContainer. Want to build a vertical "
"menu? Use the VBoxContainer. More on these below."
msgstr ""
"한번 앵커 위치를 바꾸거나 컨트롤 노드를 컨테이너 안에 넣어보세요: 마진은 업데"
"이트 될 것입니다. 당신은 거의 마진을 수동으로 편집하진 않을 것입니다. 항상 당"
"신을 도와줄 컨테이너를 골라보세요; Godot는 모든 일반적인 경우를 해결하기 위"
"한 노드를 제공합니다. 체력 막대와 화면 테두리 사이에 빈 공간이 필요한가요? "
"MarginContainer를 사용하세요. 세로 메뉴를 만들고 싶나요? VBoxContainer를 사용"
"하세요. 아래에서 더 자세히 설명하겠습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:246
msgid "Use size tags to change how UI elements fill the available space"
msgstr ""
"UI 요소가 이용 가능한 영역을 채우는 방식을 바꾸기 위해서 사이즈 태그를 사용하"
"세요"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:248
msgid ""
"Every control node has Size Flags. They tell containers how the UI elements "
"should scale. If you add the \"Fill\" flag to the Horizontal or Vertical "
"property, the node's bounding box will take all the space it can, but it'll "
"respect its siblings and retain its size. If there are 3 TextureRect nodes "
"in an HBoxContainer, with the \"Fill\" flags on both axes, they'll each take "
"up to a third of the available space, but no more. The container will take "
"over the node and resize it automatically."
msgstr ""
"모든 컨트롤 노드는 Size Flags를 가지고 있습니다. 이들은 컨테이너가 어떻게 UI "
"요소들이 크기가 조정될 지를 말합니다. 만약 \"Fill\" 플래그를 Horizontal이나 "
"Vertical 속성에 추가한다면, 노드의 경계 사각형은 가능한 모든 공간을 차지할 것"
"이지만, 형제 노드를 가리지 않는 한에서 크기를 조절할 겁니다. 만약 "
"HBoxContainer에 3개의 TextureRect 노드가 있고, \"Fill\" 플래그가 두 방향 모두"
"에 있다면, 그들은 각자의 가능한 공간의 3분의 1을 차지하고 그 외는 사용하지 않"
"을 겁니다. 컨테이너는 노드를 제어하여 크기를 자동으로 조절합니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:258
msgid "3 UI elements in an HBoxContainer, they align horizontally"
msgstr "HBoxContainer에 있는 3개의 UI 요소들, 이들은 수평으로 정렬됩니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:260
msgid ""
"The \"Expand\" flag lets the UI element take all the space it can, and push "
"against its siblings. Its bounding rectangle will grow against the edges of "
"its parent, or until it's blocked by another UI node."
msgstr ""
"\"Expand\" 플래그는 UI 요소가 가능한 모든 공간을 차지하게 만들고, 형제 노드"
"를 밀어냅니다. 경계 사각형은 부모의 모서리까지, 혹은 다른 UI 노드로 가로막힐 "
"때까지 커집니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:266
msgid ""
"The same example as above, but the center node has the \"Expand\" size flag"
msgstr ""
"위와 같은 샘플 예제에서, 가운데 노드는 \"Expand\" 사이즈 플래그가 설정되어 있"
"습니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:269
msgid ""
"You'll need some practice to understand the size tags, as their effect can "
"change quite a bit depending on how you set up your interface."
msgstr ""
"당신이 사이즈 태그를 이해하려면 몇 번의 연습이 필요할 겁니다, 왜냐하면 당신"
"이 인터페이스를 만드는 방식에 따라서 결과가 많이 달라지기 때문입니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:273
msgid "Arrange control nodes automatically with containers"
msgstr "컨테이너에 컨트롤 노드를 자동으로 배열하기"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:275
msgid ""
"Containers automatically arrange all children Control nodes including other "
"containers in rows, columns, and more. Use them to add padding around your "
"interface or center nodes in their bounding rectangles. All built-in "
"containers update in the editor, so you can see the effect instantly."
msgstr ""
"컨테이너는 자동으로 모든 자식 컨트롤 노드와 자식 컨테이너들을 열이나 행이나 "
"그 밖의 형태로 배열합니다. 컨테이너를 사용해서 이것의 경계 사각형 내에서 인터"
"페이스나 중심 노드 주위에 패딩을 추가합니다. 모든 내장 컨테이너는 에디터 내에"
"서 업데이트 되므로 컨테이너가 작동되는 것을 바로 확인하실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:281
msgid ""
"Containers have a few special properties to control how they arrange UI "
"elements. To change them, navigate down to the Custom Constants section in "
"the Inspector."
msgstr ""
"컨테이너는 UI 요소들을 배열하는 방법을 제어하기 위한 일부 특별한 속성을 지닙"
"니다. 컨테이너를 변화하기 위해, 인스펙터의  Custom Constants 섹션으로 갑시다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:286
msgid "The 5 most useful containers"
msgstr "다섯 가지 가장 유용한 컨테이너들"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:288
msgid ""
"If you build tools, you might need all of the containers. But for most "
"games, a handful will be enough:"
msgstr ""
"당신이 도구를 제작하는 것이라면, 모든 컨테이너가 필요할 수도 있겠지만, 대부분"
"의 게임들은, 이정도만 있어도 충분합니다:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:291
msgid "MarginContainer, to add margins around part of the UI"
msgstr "MarginContainer, UI의 가장자리에 여백을 추가함"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:292
msgid "CenterContainer, to center its children in its bounding box"
msgstr "CenterContainer, 경계 사각형 안에 자식을 중앙에 둠"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:293
msgid ""
"VboxContainer and HboxContainer, to arrange UI elements in rows or columns"
msgstr "VboxContainer와 HboxContainer, UI 요소들을 행이나 열로 배열함"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:295
msgid "GridContainer, to arrange Controls nodes in a grid-like pattern"
msgstr "GridContainer, 컨트롤 노드를 바둑판 같은 무늬로 배열함"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:297
msgid ""
"CenterContainer centers all its children inside of its bounding rectangle. "
"It's one you typically use for title screens, if you want the options to "
"stay in the center of the viewport. As it centers everything, you'll often "
"want a single container nested inside it. If you use textures and buttons "
"instead, they'll stack up."
msgstr ""
"CenterContainer는 경계 사각형의 안에 모든 자식들을 가운데로 놓습니다. 이것은 "
"당신이 뷰포트의 중앙에 있을 타이틀 화면에 일반적으로 사용합니다. 모든 것을 중"
"앙에 두기 때문에, 내부에 하나의 컨테이너가 중첩되어 있어야 합니다. 대신 텍스"
"쳐나 버튼을 놓는다면, 그들은 쌓일 것입니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:305
msgid ""
"CenterContainer in action. The life bar centers inside its parent container."
msgstr "실행 중인 CenterContainer. 체력 막대가 부모 컨테이너의 중앙에 있다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:308
msgid ""
"The MarginContainer adds a margin on any side of the child nodes. Add a "
"MarginContainer that encompasses the entire viewport to add a separation "
"between the edge of the window and the UI. You can set a margin on the top, "
"left, right, or bottom side of the container. No need to tick the checkbox: "
"click the corresponding value box and type any number. It will activate "
"automatically."
msgstr ""
"MarginContainer는 자식 노드의 사방에 여백을 추가합니다. 모든 뷰포트를 둘러싸"
"는 MarginContainer를 추가하고 창과 UI의 가장자리 사이에 간격을 두세요. 당신"
"은 컨테이너의 top, left, right, 아니면 bottom 방향에 여백을 설정할 수 있습니"
"다. 체크박스는 건들지 않아도 됩니다: 해당하는 값의 상자를 선택하고 아무 숫자"
"나 치세요. 자동으로 작동합니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:317
msgid "The MarginContainer adds a 40px margin around the Game User Interface"
msgstr ""
"게임 사용자 인터페이스 주변에 MarginContainer가 40px의 여백을 추가합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:319
msgid ""
"There are two BoxContainers: VBoxContainer and HBoxContainer. You cannot add "
"the BoxContainer node itself, as it is a helper class, but you can use "
"vertical and horizontal box containers. They arrange nodes either in rows or "
"columns. Use them to line up items in a shop, or to build complex grids with "
"rows and columns of different sizes, as you can nest them to your heart's "
"content."
msgstr ""
"두 개의 박스컨테이너가 있습니다: VBoxContainer와 HBoxContainer이죠. "
"BoxContainer 노드는 도움을 주는 클래스이므로 그대로 사용하지 못합니다, 하지"
"만 수직이나 수평으로 된 박스컨테이너는 사용할 수 있습니다. 이들은 노드를 행이"
"나 열로 배열합니다. 이들을 사용해서 상점의 아이템을 늘어놓거나, 행과 열을 다"
"른 크기로 하여 복잡한 격자를 만들 수 있고, 이걸로 당신은 마음 속 내용을 만들"
"어낼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:328
msgid "The HBoxContainer horizontally aligns UI elements"
msgstr "HBoxContainer가 UI 요소들을 수평으로 배열합니다"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:330
msgid ""
"VBoxContainer automatically arranges its children into a column. It puts "
"them one after the other. If you use the separation parameter, it will leave "
"a gap between its children. HBoxContainer arranges UI elements in a row. "
"It's similar to the VBoxContainer, with an extra ``add_spacer`` method to "
"add a spacer control node before its first child or after its last child, "
"from a script."
msgstr ""
"VBoxContainer는 자동으로 자식들을 세로로 배열합니다. 자식들을 차례로 하나 씩 "
"놓습니다. 당신이 separation 한도를 설정하면, 자식들 사이에 틈이 생기게 됩니"
"다. HBoxContainer는 자식들을 가로로 배열합니다. 이것은 VBoxContainer와 유사하"
"게, 스크립트에서 맨 앞이나 맨 뒤에 간격을 띄우는 컨트롤 노드를 추가하는, "
"``add_spacer`` 메서드를 갖고 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:337
msgid ""
"The GridContainer lets you arrange UI elements in a grid-like pattern. You "
"can only control the number of columns it has, and it will set the number of "
"rows by itself, based on its children's count. If you have nine children and "
"three columns, you will have 9÷3 = 3 rows. Add three more children and "
"you'll have four rows. In other words, it will create new rows as you add "
"more textures and buttons. Like the box containers, it has two properties to "
"set the vertical and horizontal separation between the rows and columns "
"respectively."
msgstr ""
"GridContainer는 UI 요소들을 격자 같은 무늬로 배열합니다. 당신은 오직 세로 열"
"의 숫자만 제어할 수 있는데, 가로 행의 수는 자식의 수에 따라 스스로 설정됩니"
"다. 당신이 9개의 자식을 3열로 배열한다면, 9÷3 = 3행을 가지게 됩니다. 자식이 3"
"개 더 늘어나면 4행을 가지게 됩니다. 이는 즉, 당신이 더 많은 텍스쳐와 버튼을 "
"추가해 행을 늘릴 수 있습니다. 박스 컨테이너처럼, 이것도 각기 행과 열 사이에 "
"수직과 수평 분리를 설정하는 두 개의 속성이 있습니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:348
msgid "A GridContainer with 2 columns. It sizes each column automatically."
msgstr "2열로 된 GridContainer. 각 행은 자동으로 크기가 조절됩니다."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:350
msgid ""
"Godot's UI system is complex, and has a lot more to offer. To learn how to "
"design more advanced interfaces, head to the :ref:`GUI section <toc-learn-"
"features-gui>` of the docs."
msgstr ""
"Godot의 UI 시스템은 복잡하고, 그만큼 많은 것을 제공합니다. 더 좋은 인터페이스"
"를 만드는 방법을 배우기 위해선, 문서의 :ref:`GUI 섹션 <toc-learn-features-"
"gui>`\\ 으로 가십시오."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:4
msgid "Design a title screen"
msgstr "타이틀 화면 만들기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:6
msgid ""
"In the next two tutorials, you will build two responsive UI (user interface) "
"scenes step-by-step using the engine's UI system:"
msgstr ""
"이 다음 두 개의 튜토리얼에서, 당신은 엔진의 UI 시스템을 사용해서 두 개의 반"
"응 형 UI (사용자 인터페이스) 씬을 단계별로 만들게 될 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:9
msgid "A main menu"
msgstr "메인 메뉴"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:10
msgid "A game UI with a health bar, energy bar, bomb and money counters"
msgstr "체력 막대, 에너지 막대, 폭탄과 돈의 수를 표시하는 게임 UI"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:12
msgid ""
"You will learn how to design game UIs efficiently, and how to use Godot's "
"Control nodes. This page focuses on the visual part: everything you do from "
"the editor. To learn how to code a life bar, read :doc:`ui_code_a_life_bar`"
msgstr ""
"어떻게 게임 UI를 효율적으로 설계하는지, 그리고 어떻게 Godot의 컨트롤 노드를 "
"사용하는지 배울겁니다. 이 페이지에서는 시각적인 부분에 중점을 두겠습니다: 모"
"든 것은 에디터에서 할 수 있습니다. 어떻게 체력 막대를 코딩하는지 배우려면 :"
"doc:`ui_code_a_life_bar`\\ 를 읽어주세요"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:20
msgid "The GUI you're going to create"
msgstr "당신이 곧 만들게 될 GUI"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:22
msgid ""
"Download the project files: :download:`ui_main_menu_design.zip <files/"
"ui_main_menu_design.zip>` and extract the archive. Import the ``start/`` "
"project in Godot to follow this tutorial. The ``end/`` folder contains the "
"final result. You'll find all the sprites in the ``start/assets/main_menu``` "
"folder."
msgstr ""
"프로젝트 파일을 내려받으세요: :download:`ui_main_menu_design.zip <files/"
"ui_main_menu_design.zip>` 그리고 압축을 푸세요. 이 튜토리얼을 따라오려면 "
"``start/`` 프로젝트를 가져오세요. ``end/`` 폴더는 결과물이 들어있습니다. 모"
"든 스프라이트는 ``start/assets/main_menu`` 폴더에서 찾으실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:33
msgid "How to design your game UI"
msgstr "게임 UI를 디자인하는 방법"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:35
msgid ""
"To design a good UI, you want to come up with a rough mockup first: a plain "
"drawing version that focuses on the placement of your UI components, their "
"size, and user interaction. Pen and paper is all you need. You shouldn't use "
"fancy and final graphics at this stage. Then, you only need simple "
"placeholder sprites and you're good to jump into Godot. You want to make "
"sure the players can find their way around the interface using those "
"placeholders."
msgstr ""
"좋은 UI를 디자인하기 위해, 당신은 대략적인 모형을 먼저 생각해내고 싶습니다: "
"UI 구성 요소들의 위치 및 크기, 사용자 상호작용에 초점을 둔 평범한 그림으로 말"
"입니다. 펜과 종이로 할 수 있습니다. 이 부분에서는 화려한 최종 그래픽을 사용하"
"지 않는 것이 좋습니다. 그러므로, 당신은 간단한 자리 표시 스프라이트만 가지고 "
"Godot로 뛰어드는 겁니다. 이것을 사용하여 플레이어가 인터페이스 주변에서 자신"
"의 길을 찾을 수 있도록 확인하려고 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:45
msgid "The UI's rough plan or mockup"
msgstr "UI의 대략적인 계획이나 모형"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:47
msgid ""
"Placeholder doesn't have to mean ugly, but you should keep the graphics "
"simple and clean. Avoid special effects, animation, and detailed "
"illustration before you have players playtest your UI. Otherwise:"
msgstr ""
"자리 표시자가 꼭 지저분할 필요는 없지만, 그래픽을 간단하고 깨끗하게 유지해야 "
"합니다. 당신이 UI를 실행 및 테스트 하기 전까진 특수 효과나, 애니메이션, 그리"
"고 구체적인 삽화는 피하세요. 그렇지 않으면:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:51
msgid ""
"The graphics might skew the players' perception of the experience and you'll "
"miss out on valuable feedback"
msgstr ""
"그래픽이 플레이어의 경험에 의한 인식에서 벗어나고 귀중한 피드백을 놓칠 수도 "
"있습니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:53
msgid "If the User Experience doesn't work, you'll have to redo some sprites"
msgstr ""
"User Experience가 제대로 작동하지 않으면, 일부 스프라이트를 다시 실행해야 합"
"니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:57
msgid ""
"Always try to make the interface work with simple text and boxes first. It's "
"easy to replace the textures later. Professional UX designers often work "
"with plain outlines and boxes in greyscale. When you take colors and fancy "
"visuals away, it's a lot easier to size and place UI elements properly. It "
"helps you refine the design foundation you'll build upon."
msgstr ""
"항상 먼저 간단한 문자와 상자로 인터페이스 작업을 해보세요. 나중에 텍스쳐를 쉽"
"게 교체할 수 있습니다. 전문적인 UX 디자이너들은 작업을 흑백으로 된 선과 상자"
"만으로 작업하기도 합니다. 당신이 색깔이나 멋진 비주얼을 멀리할 때, UI 요소들"
"을 적절하게 배치하고 크기를 조정하기가 훨씬 쉬워집니다. 이를 기초로 하여 디자"
"인 기반을 수정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:64
msgid "There are two ways to design your UI in Godot. You can:"
msgstr "Godot에는 UI를 디자인하는 두 가지 방법이 있습니다. 먼저 당신은:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:66
msgid ""
"Build it all in a single scene, and eventually save some branches as "
"reusable scenes"
msgstr ""
"하나의 씬에 모든 것들을 제작하여, 결국 몇 개의 분기를 재사용 가능한 씬으로 저"
"장할 수 있습니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:68
msgid ""
"Build template scenes for reusable components and create specific components "
"that inherit from your base scenes"
msgstr ""
"혹은 재사용 가능한 구성 요소들을 위한 템플릿 씬들을 만들고 기본 씬에 종속 시"
"킬 특정 구성 요소들을 만들 수 있습니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:71
msgid ""
"We will use the first approach, because the first version of your UI may not "
"work as well as you’d like. You’re likely to throw parts away and redesign "
"components as you go. When you're sure everything works, it's easy to make "
"some parts reusable, as you'll see below."
msgstr ""
"우리는 첫 번째 접근 법을 사용할 것입니다, 왜냐하면 처음으로 만든 UI는 당신이 "
"원하는 대로 잘 작동하지 않을 수 있기 때문입니다. 아마 당신은 일부분을 버리고 "
"구성 요소를 다시 디자인할 것입니다. 모든 것이 작동된다고 확신할 때, 아래에 보"
"시는 바와 같이 일부분을 재사용 가능하게 만들기는 쉽습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:78
msgid ""
"The files you'll find in Godot. The graphics look cleaner than on the rough "
"design, but they're still placeholders"
msgstr ""
"Godot에서 찾을 수 있는 파일들. 대략적인 디자인보다 더 깨끗해 보이지만, 그들"
"은 여전히 플레이스 홀더입니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:82
msgid "Design the main menu"
msgstr "메인 메뉴 디자인하기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:84
msgid ""
"Before we jump into the editor, we want to plan how we'll nest containers "
"based on our mockup image."
msgstr ""
"에디터로 가기 전에, 우리는 모형 이미지를 통해 어떻게 컨테이너를 중첩할 지 계"
"획을 세워야 됩니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:88
#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:278
msgid "Break down the UI mockup"
msgstr "UI 모형 파헤치기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:90
msgid "Here are my three rules of thumb to find the right containers:"
msgstr "적당한 컨테이너를 찾는 저의 세 가지 규칙이 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:92
msgid ""
"Break down the UI into nested boxes, from the largest that contains "
"everything, to the smallest ones, that encompass one widget, like a bar with "
"its label, a panel or a button"
msgstr ""
"UI를 모든 것을 포괄하는 가장 큰 것부터, 라벨을 가진 막대나 버튼을 가진 패널같"
"이, 하나의 위젯을 포함하는 가장 작은 것까지 중첩된 상자로 분해해야 합니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:95
msgid "If there's some padding around an area, use a ``MarginContainer``"
msgstr "영역 주변을 메꾸어야 한다면, ``MarginContainer`` 를 사용해야 합니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:96
msgid ""
"If the elements are arranged in rows or columns, use an ``HBoxContainer`` or "
"``VBoxContainer``"
msgstr ""
"요소들을 열이나 행으로 배열한다면, ``HBoxContainer`` 나 ``VBoxContainer`` 를 "
"사용해야 합니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:99
msgid ""
"These rules are enough to get us started, and work well for simple "
"interfaces."
msgstr ""
"이 규칙들로 충분히 우리는 시작할 수 있고, 간단한 인터페이스 설계도 잘 할 수 "
"있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:102
msgid ""
"For the main menu, the largest box is the entire game window. There's "
"padding between the edges of the window and the first components: this "
"should be a ``MarginContainer``. Then, the screen is split into two columns, "
"so we'll use an ``HBoxContainer``. In the left column, we'll manage the rows "
"with a ``VBoxContainer``. And in the right column, we'll center the "
"illustration with a ``CenterContainer``."
msgstr ""
"메인 메뉴에서, 가장 큰 상자는 전체 게임 창입니다. 창의 모서리와 첫 번째 구성 "
"요소 사이에는 여백이 있습니다: 이들은 ``MarginContainer`` 가 되야합니다. 그 "
"후, 화면은 두 열로 나뉘기에, ``HBoxContainer`` 를 사용합니다. 왼쪽 열에서는, "
"우리는 ``VBoxContainer`` 로 그 행을 관리할 것입니다. 그리고 오른쪽 열에서, "
"``CenterContainer`` 로 그림을 중앙에 위치하게 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:111
msgid "Interface building blocks, broken down using the three rules of thumb"
msgstr "세 가지 규칙을 사용하여 세분화된 인터페이스 건축 블록"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:115
msgid ""
"Containers adapt to the window's resolution and width-to-height ratio. "
"Although we could place UI elements by hand, containers are faster, more "
"precise, and **responsive**."
msgstr ""
"컨테이너는 창의 해상도와 가로-세로 비율에 맞춰 조정됩니다. 비록 우리가 UI 요"
"소들을 손으로 놓을 순 있지만, 컨테이너는 더 빠르고 더 정확하며, **반응이 빠릅"
"니다**."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:120
msgid "Prepare the Main Menu scene"
msgstr "메인 메뉴 씬 준비하기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:122
msgid ""
"Let's create the main menu. We'll build it in a single scene. To create an "
"empty scene, click on the Scene menu -> New Scene."
msgstr ""
"메인 메뉴를 만들어 봅시다. 하나의 씬에 메뉴를 만들겠습니다. 아무것도 없는 씬"
"을 생성하기 위해, 씬 메뉴 -> 새 씬을 클릭합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:125
msgid ""
"We have to add a root node before we can save the scene. Your UI's root "
"should be the outermost container or element. In this case it's a "
"``MarginContainer``. ``MarginContainer`` is a good starting point for most "
"interfaces, as you often need padding around the UI. Press ``Meta+S`` to "
"save the scene to the disk. Name it *MainMenu*."
msgstr ""
"씬을 저장하기 전에 루트 노드를 추가해야 합니다. UI의 루트 노드는 가장 바깥쪽"
"의 컨테이너나 요소가 되어야 합니다. 이 경우에는 ``MarginContainer`` 가 되어야"
"겠군요. ``MarginContainer`` 는 대부분의 인터페이스에 있어 좋은 출발점이 되는 "
"것이, UI 주변에 여백을 메꾸어야 하기 때문입니다. ``Control+S`` 를 눌러 씬을 "
"저장합니다. *MainMenu* 로 이름을 짓습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:131
msgid ""
"Select the ``MarginContainer`` again, and head to the inspector to define "
"the margins' size. Scroll down the ``Control`` class, to the ``Custom "
"Constants`` section. Unfold it. Set the margins as such:"
msgstr ""
"``MarginContainer`` 를 다시 선택하고, 인스펙터로 가서 마진의 크기를 정의하세"
"요. ``Control`` 클래스에서, ``Custom Constants`` 섹션으로 창을 내려보세요. 그"
"것을 펼치세요. 다음과 같이 마진을 설정하세요:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:135
msgid "Margin Right: *120*"
msgstr "Margin Right: *120*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:136
msgid "Margin Top: *80*"
msgstr "Margin Top: *80*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:137
msgid "Margin Left: *120*"
msgstr "Margin Left: *120*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:138
msgid "Margin Bottom: *80*"
msgstr "Margin Bottom: *80*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:140
msgid ""
"We want the container to fit the window. In the Viewport, open the "
"``Layout`` menu and select the last option, ``Full Rect``."
msgstr ""
"컨테이너가 창에 알맞게 하고 싶습니다. 뷰포트 에서, ``레이아웃`` 메뉴를 열고 "
"맨 끝의 옵션인, ``Full Rect`` 를 선택하세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:144
msgid "Add the UI sprites"
msgstr "UI 스프라이트 추가하기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:146
msgid ""
"Select the ``MarginContainer``, and create the UI elements as "
"``TextureRect`` nodes. We need:"
msgstr ""
"``MarginContainer`` 를 선택하고, ``TextureRect``  노드와 같은 UI 요소들을 만"
"드세요. 우리는 이것들이 필요합니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:149
msgid "The title, or logo"
msgstr "타이틀이나 로고"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:150
msgid "The three text options, as individual nodes"
msgstr "독립적인 노드로 된, 세 개의 문자 옵션"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:151
msgid "The version note"
msgstr "버전 노트"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:152
msgid "And the main menu’s illustration"
msgstr "그리고 메인 메뉴의 삽화"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:154
msgid ""
"Click the ``Add Node`` button or press ``Meta+A`` on your keyboard. Start to "
"type ``TextureRect`` to find the corresponding node and press enter. With "
"the new node selected, press ``Meta+D`` five times to create five extra "
"``TextureRect`` instances."
msgstr ""
"``노드 추가`` 버튼을 누르거나 키보드의 ``Control+A`` 를 누르세요. "
"``TextureRect`` 를 검색하고 일치하는 노드를 찾아서 엔터 키를 누르세요. 새로"
"운 노드를 선택하고, ``Control+D`` 를 5 번 눌러 다섯 개의 ``TextureRect`` 인스"
"턴스를 만드세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:159
msgid ""
"Click each of the nodes to select it. In the inspector, click the ``…`` Icon "
"to the right of the Texture property, and click on ``Load``. A file browser "
"opens and lets you pick a sprite to load into the texture slot."
msgstr ""
"각 노드를 선택하세요. 인스펙터에서, Texture 속성의 오른쪽에 있는 ``v`` 아이콘"
"을 클릭하고, ``로드`` 를 클릭하세요. 파일 브라우저가 열려서 당신이 텍스쳐 슬"
"롯 안에 있는 스프라이트를 불러올 수 있게 해줍니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:165
msgid "The file browser lets you find and load textures"
msgstr "파일 브라우저에서 당신은 불러올 텍스쳐를 찾으실 수 있습니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:167
msgid ""
"Repeat the operation for all ``TextureRect`` nodes. You should have the "
"logo, the illustration, the three menu options and the version note, each as "
"a separate node. Then, double click on each of the nodes in the Scene tab to "
"rename them."
msgstr ""
"이 작업을 모든 ``TextureRect`` 노드에 반복하세요. 당신은 각각의 노드에서 로"
"고, 삽화, 세 개의 메뉴 옵션 그리고 버전 노트를 가져야 합니다. 그 후, 씬 탭에"
"서 각 노드들을 더블 클릭하고 이름을 바꿉니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:174
msgid "The six nodes, with textures loaded"
msgstr "텍스쳐가 로드된, 여섯 개의 노드들"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:178
msgid ""
"If you want to support localization in your game, use ``Labels`` for menu "
"options instead of ``TextureRect``."
msgstr ""
"게임에 현지화를 지원하고 싶다면, 메뉴 옵션에 ``TextureRect`` 대신에 "
"``Labels`` 을 사용하세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:182
msgid "Add containers to place UI elements automatically"
msgstr "컨테이너를 추가하여 UI 요소들을 자동으로 놓기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:184
msgid ""
"Our main menu has some margin around the edges of the screen. It is split in "
"two parts: on the left, you have the logo and the menu options. On the "
"right, you have the characters. We can use one of two containers to achieve "
"this: ``HSplitContainer`` or ``HBoxContainer``. Split containers split the "
"area into two: a left and a right side or a top and a bottom side. They also "
"allow the user to resize the left and right areas using an interactive bar. "
"On the other hand, ``HBoxContainer`` just splits itself into as many columns "
"as it has children. Although you can deactivate the split container's resize "
"behaviour, I recommend to favour box containers."
msgstr ""
"우리의 메인 메뉴는 화면의 가장자리에 여백을 가지고 있습니다. 메뉴는 두 부분으"
"로 나뉩니다: 왼쪽은, 로고와 메뉴 옵션이 있습니다. 오른쪽에는, 캐릭터들이 있습"
"니다. 이 작업을 위해 두 개의 컨테이너 중 하나를 사용할 수 있습니다: "
"``HSplitContainer`` 아니면 ``HBoxContainer`` 입니다. 분할 컨테이너는 영역을 "
"두 개로 나눕니다: 왼쪽과 오른쪽 아니면 위쪽과 아래쪽으로 말입니다. 또한 조절 "
"막대를 사용하여 왼쪽과 오른쪽 영역의 크기를 조절할 수 있습니다. 반면에, "
"``HBoxContainer`` 는 단지 스스로를 자식의 수 만큼으로 자신을 나눕니다. 비록 "
"분할 컨테이너가 크기 조절 행동을 비활성화 할 순 있지만, 저는 박스 컨테이너를 "
"추천합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:195
msgid ""
"Select the ``MarginContainer`` and add an ``HBoxContainer``. Then, we need "
"two containers as children of our ``HBoxContainer``: a ``VBoxContainer`` for "
"the menu options on the left, and a ``CenterContainer`` for the illustration "
"on the right."
msgstr ""
"``MarginContainer`` 를 선택하고 ``HBoxContainer`` 를 추가합니다. 그런 다음, "
"우리는 ``HBoxContainer`` 의 자식으로 두 개의 컨테이너가 필요합니다: 메뉴 옵션"
"에 쓸 ``VBoxContainer`` 왼쪽에, 그리고 삽화를 넣을 ``CenterContainer`` 가 오"
"른쪽에 있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:202
msgid ""
"You should have four nested containers, and the TextureRect nodes sitting "
"aside from it"
msgstr ""
"네 개의 중첩된 컨테이너를 갖고 있어야 하고, TextureRect 노드가 밑에 있어야 합"
"니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:205
msgid ""
"In the node tree, select all the ``TextureRect`` nodes that should go on the "
"left side: the logo, the menu options and the version note. Drag and drop "
"them into the ``VBoxContainer``. Then, drag the illustration node into the "
"``CenterContainer``. The nodes should position automatically."
msgstr ""
"노드 트리에서, 왼쪽에 놓을 모든 ``TextureRect`` 노드를 선택하세요: 로고, 메"
"뉴 옵션 그리고 버전 노트입니다. ``VBoxContainer`` 에 드래그 앤 드랍하세요. 그"
"런 다음, 삽화 노드를 ``CenterContainer`` 안으로 드래그 하세요. 노드는 자동으"
"로 위치가 맞춰집니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:212
msgid "Containers automatically place and resize textures"
msgstr "컨테이너가 자동으로 텍스쳐를 위치시키고 크기를 조정합니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:214
msgid "We're left with two problems to solve:"
msgstr "우리는 해결해야 할 두 가지 문제가 남았습니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:216
msgid "The characters on the right aren't centered"
msgstr "오른쪽의 캐릭터가 중앙이 아닙니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:217
msgid "There's no space between the logo and the other UI elements"
msgstr "로고와 다른 UI 요소들 사이에 공간이 없습니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:219
msgid ""
"To center the characters on the right, we'll use a ``CenterContainer``.  Add "
"a ``CenterContainer`` node as a child of the ``HBoxContainer``. Then in the "
"Inspector, scroll down to the ``Size Flags`` category and click on the field "
"to the right of the ``Vertical`` property, and check ``Expand`` in addition "
"to ``Fill``. Do the same for the ``Horizontal`` property. Finally drag and "
"drop the Characters into the ``CenterContainer``. The Characters element "
"will center automatically."
msgstr ""
"오른쪽에 캐릭터가 중앙에 오게 하려면, 우리는 ``CenterContainer``\\ 를 사용할 "
"겁니다. ``CenterContainer`` 노드를 ``HBoxContainer``\\ 의 자식으로 추가합니"
"다. 그 후 인스펙터에서, ``Size Flags`` 카테고리로 내려서 ``Vertical`` 속성의 "
"오른쪽에 있는 영역을 클릭하고, ``Expand``\\ 와 추가로 ``Fill``\\ 을 체크하세"
"요. ``Horizontal`` 속성에도 똑같이 적용합니다. 마지막으로 캐릭터를 "
"``CenterContainer``\\ 에 드래그 앤 드랍 하세요. 캐릭터 요소는 자동으로 중앙"
"에 자리 잡을 것입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:228
msgid ""
"The character node centers inside the right half of the screen as soon as "
"you place it inside the CenterContainer"
msgstr ""
"캐릭터 노드는 CenterContainer에 배치되자마자 화면의 오른쪽의 중앙에 있습니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:231
msgid ""
"To space out the menu options and the logo on the left, we'll use one final "
"container and its size flags. Select the ``VBoxContainer`` and press ``Meta"
"+A`` to add a new node inside it. Add a second ``VBoxContainer`` and name it "
"\"MenuOptions\". Select all three menu options, ``Continue``, ``NewGame`` "
"and ``Options``, and drag and drop them inside the new ``VBoxContainer``. "
"The UI's layout should barely change, if at all."
msgstr ""
"왼쪽에 메뉴 옵션과 로고에 공간을 내기 위해, 우리는 마지막 컨테이너와 사이즈 "
"플래그를 사용할 것입니다. ``VBoxContainer`` 를 선택하고 ``Control+A`` 를 눌"
"러 컨테이너 안에 새 노드를 추가합니다. 두 번째 ``VBoxContainer`` 를 추가하고 "
"\"MenuOptions\"이라고 이름을 짓습니다. 모든 세 개의 메뉴 옵션, ``Continue`` "
"와 ``NewGame`` 그리고 ``Options`` 을 선택하고, 그들을 새로 만든  "
"``VBoxContainer`` 안에 드래그 앤 드랍 합니다. UI의 레이아웃은 거의 변경되지 "
"않아야합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:241
msgid ""
"Place the new container between the other two nodes to retain the UI's layout"
msgstr ""
"UI 레이아웃을 유지하기 위해 다른 두 노드 사이에 새 컨테이너를 배치합니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:244
msgid ""
"Now we grouped the menu options together, we can tell their container to "
"expand to take as much vertical space as possible. Select the "
"``MenuOptions`` node. In the Inspector, scroll down to the ``Size Flags`` "
"category. Click on the field to the right of the ``Vertical`` property, and "
"check ``Expand`` in addition to ``Fill``. The container expands to take all "
"the available vertical space. But it respects its neighbors, the ``Logo`` "
"and ``Version`` elements."
msgstr ""
"이제 우리는 메뉴 옵션들을 그룹화하여, 그들의 컨테이너를 가능한 많은 수직 공간"
"을 차지하도록 확장시킬 수 있습니다. ``MenuOptions`` 노드를 선택합니다. 인스펙"
"터에서, ``Size Flags`` 카테고리로 내립니다. ``Vertical`` 속성의 오른쪽 영역"
"을 클릭하고, ``Expand``\\ 와 추가로 ``Fill``\\ 을 체크합니다. 컨테이너는 모"
"든 사용 가능한 수직 공간을 차지하도록 확장합니다. 하지만 이웃들, ``Logo``\\ "
"와 ``Version`` 요소들은 그렇지 못합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:252
msgid ""
"To center the nodes in the ``VBoxContainer``, scroll to the top of the "
"Inspector and change the ``Alignment`` property to ``Center``."
msgstr ""
"``VBoxContainer`` 에 노드가 중앙에 있게 하기 위해서, 인스펙터의 위쪽으로 가"
"서 ``Alignment`` 속성을 ``Center`` 로 바꿉니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:257
msgid "The menu options should center vertically in the UI's left column"
msgstr "메뉴 옵션은 UI의 왼쪽 행에 세로로 가운데에 있어야 합니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:259
msgid ""
"To wrap things up, let's add some separation between the menu options. "
"Expand the ``Custom Constants`` category below ``Size Flags``, and click the "
"field next to the ``Separation`` parameter. Set it to 30. Once you press "
"enter, the ``Separation`` property becomes active and Godot adds 30 pixels "
"between menu options."
msgstr ""
"일을 마무리하기 위해, 메뉴 옵션 사이에 간격을 추가합시다. ``Size Flags`` 밑"
"에 있는 ``Custom Constants`` 카테고리를 확장하고, ``Separation`` 변수 옆에 있"
"는 영역을 클릭합니다. 그것을 30으로 설정합니다. 엔터 키를 누르면, "
"``Separation`` 속성이 작동하게 되고 Godot는 메뉴 옵션 사이에 30 픽셀을 추가합"
"니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:267
msgid "The final interface"
msgstr "최종 인터페이스"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:269
msgid ""
"Without a single line of code, we have a precise and responsive main menu."
msgstr ""
"코드 한 줄도 안 쓰고, 우리는 정확하고 반응하는 메인 메뉴를 갖게 되었습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:272
msgid ""
"Congratulations for getting there! You can download the final menu :download:"
"`ui_main_menu_design.zip <files/ui_main_menu_design.zip>` to compare with "
"your own. In the next tutorial, you'll create a Game User Interface with "
"bars and item counters."
msgstr ""
"여기까지 오신 것에 축하합니다! 당신의 것과 비교하기 위한 :download:"
"`ui_main_menu_design.zip <files/ui_main_menu_design.zip>`\\ 을 내려받으실 수 "
"있습니다. 다음 튜토리얼에서는, 당신은 막대와 아이템 수 카운터가 있는 게임 사"
"용자 인터페이스를 만들 것입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:280
msgid ""
"A responsive User Interface is all about making sure our UIs scale well on "
"all screen types. TV screens and computer displays have different sizes and "
"ratios. In Godot, we use containers to control the position and the size of "
"UI elements."
msgstr ""
"반응 형 사용자 인터페이스는 UI가 모든 화면 유형에 크기를 맞게 조정하도록 만드"
"는 것을 의미합니다.TV 화면과 컴퓨터는 다른 크기와 비율을 갖습니다. Godot에"
"서, 우리는 컨테이너를 사용하여 UI 요소들의 크기와 위치를 제어합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:285
msgid ""
"The order in which you nest matters. To see if your UI adapts nicely to "
"different screen ratios, select the root node, press the Q key to activate "
"the Select Mode, select the container and click and drag on one of the "
"container's corners to resize it. The UI components should flow inside of it."
msgstr ""
"중첩한 순서가 중요합니다. UI가 다른 화면 비율에 휼륭하게 적응하는지 보기 위"
"해, 루트 노드를 선택하고, Q키를 눌러 선택 모드를 활성화 한 뒤, 컨테이너를 선"
"택하고 컨테이너의 모서리를 클릭하고 드래그 하여 크기를 바꿔보세요. UI 구성 요"
"소들이 내부에 있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:291
msgid ""
"You'll notice that although containers move sprites around, they don't scale "
"them. This is normal. We want the UI system to handle different screen "
"ratios, but we also need the entire game to adapt to different screen "
"resolutions. To do this, Godot scales the entire window up and down."
msgstr ""
"당신은 비록 컨테이너가 스프라이트를 움직이게 하지만, 크기를 조절하지 않는 것"
"을 봤을 것입니다. 이것은 정상입니다. 우리는 UI 시스템이 다른 화면 비율을 처리"
"하기를 원하지만, 또한 게임 전체가 다른 화면 해상도에 적응해야 합니다. 이를 위"
"해, Godot는 창 전체를 위 아래로 크기를 조절합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:297
msgid ""
"You can change the scale mode in the project settings: click the Project "
"menu -> Project Settings. In the window's left column, look for the Display "
"category. Click on the Window sub-category. On the right side of the window, "
"you'll find a Stretch section. The three settings, Mode, Aspect, and Shrink, "
"control the screen size. For more information, see :ref:"
"`doc_multiple_resolutions`."
msgstr ""
"당신은 프로젝트 설정에서 크기를 바꿀 수 있습니다: 프로젝트 -> 프로젝트 설정"
"을 클릭하세요. 창의 왼쪽 행에서, Display 카테고리를 보세요. Window 하위 카테"
"고리를 클릭하세요. 창의 오른쪽에서 Stretch 섹션을 찾으실 수 있습니다. 세 개"
"의 설정, Mode, Aspect 그리고 Shrink는 화면 크기를 제어합니다. 더 많은 정보"
"는 :ref:`doc_multiple_resolutions` 에서 보실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:4
msgid "Design the GUI"
msgstr "GUI 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:6
msgid ""
"Now that you've nailed the basics, we're going to see how to build a game "
"Graphical User Interface (GUI) with reusable UI components: a life bar, an "
"energy bar, and bomb and rupee counters. By the end of this tutorial, you'll "
"have a game GUI, ready to control with GDscript or VisualScript:"
msgstr ""
"이제 기초를 갖췄으니, 재 사용 가능한 UI 구성 요소를 가지고 어떻게 게임 사용"
"자 인터페이스 (GUI)를 만드는지 알아봅시다: 체력 막대, 에너지 막대, 그리고 폭"
"탄과 루피 카운터입니다. 이 튜토리얼이 끝나면, GDscript나 VisualScript를 가지"
"고 제어할 수 있는 게임 GUI를 가지게 될 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:13
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:621
msgid "The final result"
msgstr "최종 결과물"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:15
msgid "You'll also learn to:"
msgstr "또한 배울 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:17
msgid "Create flexible UI components"
msgstr "유연한 UI 구성 요소 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:18
msgid "Use scene inheritance"
msgstr "씬 상속 사용하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:19
msgid "Build a complex UI"
msgstr "복잡한 UI 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:21
msgid ""
"Download the project files: :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` and extract the archive. Import the `start/` project in "
"Godot to follow this tutorial. The `end/` folder contains the final result."
msgstr ""
"프로젝트 파일을 다운로드하세요:  :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` 그리고 압축을 푸세요. 이 튜토리얼을 따라오시려면 `start/"
"` 프로젝트를 Godot로 가져오세요. `end/` 폴더는 최종 결과물을 가지고 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:25
msgid ""
"You can watch this tutorial as a `video on Youtube <https://www.youtube.com/"
"watch?v=y1E_y9AIqow>`_."
msgstr ""
"이 튜토리얼을 `유튜브에서 <https://www.youtube.com/watch?v=y1E_y9AIqow>`_ 보"
"실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:28
msgid "Breaking down the UI"
msgstr "UI 파헤치기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:30
msgid ""
"Let's break down the final UI and plan the containers we'll use. As in the :"
"doc:`ui_main_menu`, it starts with a ``MarginContainer``. Then, we can see "
"up to three columns:"
msgstr ""
"최종 UI를 분해하고 우리가 사용할 컨테이너를 설계해봅시다. :doc:"
"`ui_main_menu` 에서 하던 것처럼, ``MarginContainer`` 로 시작합니다. 그런 뒤, "
"세 개의 열을 보실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:34
msgid "The life and energy counters on the left"
msgstr "왼쪽에서 체력과 에너지 카운터"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:35
msgid "The life and energy bars"
msgstr "체력과 에너지 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:36
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:42
msgid "The bomb and rupee counters on the right"
msgstr "오른쪽에서 폭탄과 루피 카운터"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:38
msgid ""
"But the bar's label and the gauge are two parts of the same UI element. If "
"we think of them this way, we're left with two columns:"
msgstr ""
"하지만 막대의 라벨과 게이지는 같은 UI 요소입니다. 이렇게 생각한다면, 우리는 "
"두 개의 열만 남습니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:41
msgid "The life and energy bars on the left"
msgstr "왼쪽에 체력과 에너지 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:44
msgid ""
"This makes it easier to nest containers: we have some margins around the "
"border of the screen using a ``MarginContainer``, followed by an "
"``HBoxContainer`` to manage our two columns. The two bars stack on top of "
"one another inside a ``VBoxContainer``. And we'll need a last "
"``HBoxContainer`` in the right column to place the bomb and rupee counters "
"side-by-side."
msgstr ""
"이것은 컨테이너를 중첩시키기 더 쉽게 만듭니다: 우리는 ``MarginContainer`` 로 "
"화면 가장자리에 여백을 갖습니다, 그런 뒤 ``HBoxContainer`` 로 두 개의 열을 만"
"드는 것입니다. 두 개의 막대는 ``VBoxContainer`` 안에 이 층으로 쌓여있습니다. "
"그리고 오른쪽 열에 마지막 ``HBoxContainer`` 로 폭탄과 루피 카운터를 나란히 위"
"치시킵니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:53
msgid "We get a clean UI layout with only 4 containers"
msgstr "4개의 컨테이너로 말끔한 UI 레이아웃을 얻었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:55
msgid ""
"We will need extra containers inside the individual UI components, but this "
"gives us the main GUI scene's structure. With this plan in place, we can "
"jump into Godot and create our GUI."
msgstr ""
"아직 각 UI 구성 요소 안에 추가 컨테이너가 필요하지만, 이걸로 우리에게 주요 "
"GUI 씬의 구조를 제공합니다. 계획은 여기 두고, Godot로 들어가서 우리의 GUI를 "
"만듭시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:60
msgid "Create the base GUI"
msgstr "기초 GUI 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:62
msgid ""
"There are two possible approaches to the GUI: we can design elements in "
"separate scenes and put them together, or prototype everything in a single "
"scene and break it down later. I recommend working with a single scene as "
"you can play with your UI's placement and proportions faster this way. Once "
"it looks good, you can save entire sections of the node tree as reusable sub-"
"scenes. We'll do that in a moment."
msgstr ""
"GUI에 두 가지 가능한 접근 방법이 있습니다: 우리는 각기 다른 씬들로 요소들을 "
"만든 후 그들을 하나로 뭉치는 것입니다, 아니면 하나의 씬에 원본 모든 것을 넣"
"고 나중에 분해하는 것입니다. 저는 하나의 씬에서 작업하길 추천하는데 이 방법으"
"로 당신은 UI 배치와 크기를 더 빠르게 할 수 있기 때문입니다. 일단 보기 좋다"
"면, 당신은 노드 트리를 재 사용 가능한 하위 씬으로 저장할 수 있습니다. 그건 나"
"중에 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:69
msgid "For now, let's start with a few containers."
msgstr "일단 지금은, 몇 개의 컨테이너로 시작합시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:71
msgid ""
"Create a new scene and add a ``MarginContainer``. Select the node and name "
"it ``GUI``."
msgstr ""
"새 씬을 만들고 ``MarginContainer`` 를 추가하세요. 노드의 이름을 ``GUI`` 로 지"
"으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:74
msgid ""
"We want our interface to anchor to the top of the screen. Select the ``GUI`` "
"node and click the Layout button at the top of the viewport. Select the "
"``Top Wide`` option. The ``GUI`` node will anchor to the top edge of its "
"parent, the viewport by default. It will resize automatically on the "
"vertical axis to make space for its child UI components."
msgstr ""
"우리는 화면 맨 위에 우리의 인터페이스가 고정되기를 원합니다. \"GUI\" 노드를 "
"선택하고 뷰포트 상단에 있는 레이아웃 버튼을 클릭합니다. ``Top Wide\" 옵션을 "
"선택합니다. \"GUI\" 노드는 기본적으로 뷰포트의 상위 가장자리에 고정됩니다. 하"
"위 UI 구성 요소를 위한 공간을 확보하기 위해 수직 축에서 자동으로 크기가 조정"
"됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:80
msgid "Save the scene as ``GUI.tscn``. We will put the entire GUI in it."
msgstr ""
"'GUI.tscn으로 씬을 저장합니다. 우리는 그 씬 안에 전체적인 GUI를 놓습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:82
msgid ""
"With the ``MarginContainer`` selected, head to the inspector and scroll down "
"to the custom constants section. Unfold it and click the field next to each "
"of the ``Margin`` properties. Set them all to ``20`` pixels. Next, add an "
"``HBoxContainer`` node. This one will contain our two bars on the left and "
"separate them from the two counters on the right."
msgstr ""
"``MarginContainer`` 가 선택된 채로, 인스펙터에서 custom constants 섹션으로 창"
"을 내립니다. 창을 펼치고 각 ``Margin``  속성 옆에 빈 공간을 클릭합니다.  이"
"들 모두를 ``20`` 으로 설정합니다. 다음으로, ``HBoxContainer`` 노드를 추가합니"
"다. 이것은 왼쪽에 두 개의 막대와 오른쪽에 두 개의 카운터를 분리할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:88
msgid ""
"We want to stack the bars vertically inside the ``HBoxContainer``. Add a "
"``VBoxContainer`` as a child of ``HBoxContainer`` and name it ``Bars``. "
"Select the parent ``HBoxContainer`` again and this time, add another "
"``HBoxContainer`` as a child of it. Call it ``Counters``. With these four "
"containers, we have the base for our GUI scene."
msgstr ""
"``HBoxContainer`` 안에 막대를 세로로 쌓을 겁니다. ``GUI``의 자식으로 "
"``VBoxContainer``\\ 를 추가하고 ``Bars`` 라고 이름 짓습니다. 부모 "
"``HBoxContainer``\\\\ 를 다시 선택하고, 이번엔 다른 ``HBoxContainer``\\ 를 자"
"식으로 추가합니다. ``Counters``\\ 라고 이름 짓습니다. 이 네 개의 컨테이너로 "
"우리는 GUI 씬의 기초를 만들었습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:95
msgid "You should have 4 containers that look like this"
msgstr "4개의 컨테이너가 이렇게 있어야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:99
msgid ""
"We can work this way because we first broke down our UI design and took a "
"few moments to think about the containers we'd use. When you follow a "
"tutorial like this, it may seem weird. But once you're working on real "
"games, you'll see it's an efficient workflow."
msgstr ""
"먼저 UI 디자인을 부수고 사용할 컨테이너를 생각했기 때문에 이 방법이 가능한 것"
"입니다. 당신이 튜토리얼을 그대로 따라간다면, 이것이 이상하게 보일 것입니다. "
"하지만 실제 게임에서 이것이 효과적인 작업 흐름임을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:105
msgid "Create the bars' base"
msgstr "막대의 기초 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:107
msgid ""
"Each bar is split into two sub-elements that align horizontally: the label "
"with the health count on the left, and the gauge on the right. Once again, "
"the ``HBoxContainer`` is the perfect tool for the job. Select the ``Bars`` "
"node and add a new ``HBoxContainer`` inside of it. Name it ``Bar``."
msgstr ""
"각 막대는 수평으로 정렬된 두 개의 세부 요소로 나뉩니다: 왼쪽에는 체력을 표시"
"하는 라벨, 그리고 오른쪽에서 게이지를 표시합니다. 앞서 말했듯이, "
"``HBoxContainer`` 는 이 작업에 적합합니다. ``Bars`` 노드를 선택하고 그 안에 "
"``HBoxContainer`` 를 추가하세요. 이름을 ``Bar`` 로 짓습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:113
msgid ""
"The label itself requires at least three nodes: a ``NinePatchRect`` for the "
"background, on top of which we'll add a texture on the left, either ``HP`` "
"or ``EP``, and a ``Label`` on the right for the value. We can nest "
"``Control`` nodes however we want. We could use the ``NinePatchRect`` as a "
"parent for the two other elements, as it encompasses them. In general, you "
"want to use containers instead, as their role is to help organize UI "
"components. We'll need a ``MarginContainer`` later anyway to add some space "
"between the life count and the gauge. Select the ``Bar`` and add a "
"``MarginContainer``. Name it ``Count``. Inside of it, add three nodes:"
msgstr ""
"라벨에는 적어도 세 개의 노드가 더 필요합니다: 배경에 쓸 ``NinePatchRect``, "
"그 배경에서 왼쪽에는 ``HP`` 나 ``EP`` 를 쓸 텍스쳐, 그리고 값을 나타내는 "
"``Label``  입니다. 우리는 원하는 대로  ``Control`` 노드를 중첩시킬 수 있습니"
"다. 즉, ``NinePatchRect`` 를 다른 두 개의 요소를 포괄하는 부모로 사용할 수 있"
"다는 것입니다. 일반적으로, 우리는 컨테이너를 사용합니다, 그것이 그들의 역할이"
"니까요. 라이프 카운터와 게이지 사이에 공간이 필요하니 나중에 "
"`MarginContainer`` 가 필요할 것입니다. ``Bar`` 를 선택하고 "
"``MarginContainer`` 를 추가하세요. ``Count`` 라고 이름짓습니다. 그 안에는, 다"
"음의 노드들을 추가하세요:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:124
msgid "A ``NinePatchRect`` named ``Background``"
msgstr "``NinePatchRect``, 이름은 ``Background``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:125
msgid "A ``TextureRect`` named ``Title``"
msgstr "``TextureRect``, 이름은 ``Title``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:126
msgid "And a ``Label`` named ``Number``"
msgstr "``Label``, 이름은 ``Number``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:128
msgid "To add the nodes as siblings, always select the ``Count`` node first."
msgstr ""
"노드들을 형제로 만들기 위해, 항상 ``Count`` 노드를 먼저 선택해야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:132
msgid ""
"Your scene tree should look like this. We're ready to throw in some textures"
msgstr ""
"당신의 씬 트리는 이렇게 되야 합니다. 이제 텍스쳐를 넣을 준비가 끝났습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:135
msgid ""
"Our scene is still empty. It's time to throw in some textures. To load the "
"textures, head to the FileSystem dock to the left of the viewport. Browse "
"down to the res://assets/GUI folder."
msgstr ""
"씬은 아직 텅 빈 상태입니다. 이제 텍스쳐를 추가해 봅시다. 텍스쳐를 불러오기 위"
"해선, 뷰포트의 왼쪽에 있는 파일 시스템 독으로 가세요. 경로를 res://assets/"
"GUI 로 하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:141
msgid "You should see a list of textures that we'll use to skin our interface."
msgstr "우리가 인터페이스에 쓸 텍스쳐의 목록이 이렇게 나와야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:144
msgid ""
"Select the ``Background`` in the Scene dock. In the Inspector, you should "
"see a ``Texture`` property. In the FileSystem tab, click and drag "
"``label_HP_bg.png`` onto the ``Texture`` slot. It stays squashed. The parent "
"MarginContainer will force its size down to 0 until we force elements inside "
"the container to have a minimum size. Select the ``Background`` node. In the "
"Inspector, scroll down to the Rect section. Set ``Min Size`` to (100, 40). "
"You should see the ``Background`` resize along with its parent containers."
msgstr ""
"씬 독에서 ``Background`` 를 선택합니다. 인스펙터에서, ``Texture`` 속성을 보세"
"요. 파일 시스템 탭에서 ``label_HP_bg.png`` 를 ``Texture`` 슬롯으로 드래그 합"
"니다. 찌그러진 채로 있습니다. 텍스쳐가 부모 MarginContainer의 영향을 받기 때"
"문에 그 영향을 최소화 하지 않으면 컨테이너는 텍스쳐의 크기를 0으로 만듭니다. "
"``Background`` 노드를 선택합니다. 인스펙터에서, Rect 섹션으로 갑니다. ``Min "
"Size`` 를 (100, 40)으로 설정합니다. ``Background`` 가 부모 컨테이너에 크기가 "
"조정된 것을 보실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:153
msgid ""
"Next, select the ``Title`` and drag and drop ``label_HP.png`` into its "
"``Texture`` slot. Select the ``Number`` node, click the field next to the "
"``Text`` property and type ``10``. This way, we can see both nodes in the "
"viewport. They should stack up in the top-left corner of their parent "
"``MarginContainer``."
msgstr ""
"다음으로, ``Title`` 을 선택하고 ``label_HP.png`` 를 ``Texture`` 슬롯으로 드래"
"그 앤 드롭 하세요. ``Number`` 노드를 선택하고, ``Text`` 속성 우측 공간을 클릭"
"하고 ``10`` 을 칩니다. 이걸로, 당신은 두 노드 모두를 뷰포트에서 볼 수 있습니"
"다. 이 둘은 부모 ``MarginContainer`` 의 왼쪽 위에 포개져있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:161
msgid "If you select both nodes, you should see something like this"
msgstr "두 노드를 선택하면, 이렇게 보여야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:163
msgid ""
"As they have a container as their direct parent, we cannot move them freely: "
"the ``Count`` node will always reset their anchors, their size and position. "
"Try to move and resize the nodes in the viewport. Then, select any of the "
"three textures and press Ctrl Up or Ctrl Down to reorder them in the Scene "
"dock. They'll snap back to their previous size and position."
msgstr ""
"직계 부모인 컨테이너를 갖게 되었으니, 우리는 이들을 자유롭게 움직일 수 없습니"
"다: ``Count`` 노드는 앵커나 크기, 위치가 항상 원상복귀 됩니다. 뷰포트에서 노"
"드를 움직이거나 크기를 바꾸려고 시도해보시죠. 그 이후에는, 세 개의 텍스쳐 중 "
"하나를 선택하고 Ctrl 위 아니면 Ctrl 아래를 눌러 그들을 씬 독에 다시 맞춰주세"
"요. 텍스쳐들은 이전 크기와 위치로 돌아갈 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:170
msgid ""
"Parent containers control the size, the scale, the margins, and the anchors "
"of their direct children. To modify the nodes, you must nest them inside a "
"regular Control or another UI element. We'll use the ``Background`` as a "
"parent for the ``Title`` and ``Number``. Select both the ``Title`` and "
"``Number``, and drag and drop them onto ``Background``."
msgstr ""
"부모 컨테이너는 크기, 규모, 여백, 그리고 직계 자식의 앵커를 제어합니다. 노드"
"를 수정하기 위해, 그들을 기본 Control 노드나 다른 UI 요소들 안에 중첩시켜야 "
"합니다. 우리는 ``Title`` 과 ``Number`` 의 부모로 ``Background`` 를 사용할 겁"
"니다. ``Title`` 과 ``Number`` 를 선택하고, ``Background`` 에 드래그 앤 드롭 "
"하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:179
msgid ""
"By using the Background node as the two textures' parent, we take control "
"away from the Count MarginContainer"
msgstr ""
"두 텍스쳐의 부모로 Background 노드를 사용해서, 우리는 Count MarginContainer"
"의 통제권을 빼앗아 버립니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:182
msgid ""
"Select the ``Title`` and in the Inspector, change its ``Stretch Mode`` "
"property to ``Keep Centered``. Next find the ``Rect`` category in the "
"Inspector and change the ``Size`` property to (50, 40) so it only takes the "
"left half of the background.  Next, select the ``Number`` node. In the "
"viewport, click the ``Layout`` menu and click ``Full Rect``. The node will "
"resize to fit the ``Background``. Head to the Inspector and change its "
"``Align`` property to ``Right``, and the ``VAlign`` property to ``Center``. "
"The text should snap to the center of the ``Background``'s right edge. "
"Resize the node horizontally, so it takes the right half of the "
"``Background`` and there's a bit of padding with the right edge."
msgstr ""
"``Title``\\ 을 선택하고 인스펙터에서, ``Stretch Mode`` 속성을 ``Keep "
"Centered``\\ 로 바꿔줍니다. 그런 다음 ``Rect`` 카테고리로 간 후 ``Size`` 속성"
"을 (50, 40)으로 해서 배경의 왼쪽 절반을 차지하게 합니다.  다음으로, "
"``Number`` 노드를 선택합니다. 뷰포트에서, ``레이아웃`` 메뉴를 클릭하고 "
"``Full Rect``\\ 를 클릭합니다. 노드의 크기가 ``Background``\\ 에 맞게 조정될 "
"겁니다. 인스펙터로 가서 ``Align`` 속성을 ``Right``\\ 로 설정하고, ``VAlign`` "
"속성을 ``Center``\\ 로 설정합니다. 텍스트는 ``Background``\\ 의 오른쪽 부분에"
"서 중앙에 스냅되어야 합니다. 노드의 크기를 가로로 조정하면, 노드는 "
"``Background``\\ 의 오른쪽 절반을 차지하게 되고 오른쪽에 약간의 공간이 남습니"
"다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:195
msgid ""
"Here's how the nodes' bounding boxes should look in the viewport. Keep it "
"rough, you don't need to place them too precisely for now."
msgstr ""
"노드의 경계 사각형이 뷰포트에 이렇게 보여야 합니다. 대략적으로만 하세요, 아"
"직 너무 세밀해야 할 필요는 없습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:199
msgid "Replace the Label's font"
msgstr "라벨의 폰트 바꾸기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:201
msgid ""
"The label's font is too small. We need to replace it. Select the ``Number`` "
"node and in the Inspector, scroll down to the ``Control`` class, and find "
"the ``Custom Font`` category. Click the field next to the ``Font`` property "
"and click on ``New Dynamic Font``. Click on the field again and select Edit."
msgstr ""
"라벨의 폰트가 너무 작습니다. 우리는 바꿔야 합니다. ``Number`` 노드를 선택하"
"고 인스펙터에서, ``Control`` 클래스로 가서, ``Custom Font`` 카테고리로 갑니"
"다. ``Font`` 속성 옆의 영역을 클릭하고 ``새 Dynamic Font`` 를 클릭합니다. 다"
"시 그 영역을 클릭하고 편집을 선택합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:207
msgid ""
"You will enter the ``Dynamic Font`` resource. Unfold the ``Font`` category "
"and click the field next to ``Font Data``. Click the ``Load`` button. In the "
"file browser, navigate down to the assets/font folder and double click "
"``Comfortaa-Bold.ttf`` to open it. You should see the font update in the "
"viewport. Unfold the settings category to change the font size. Set the "
"``Size`` property to a higher value, like ``24`` or ``28``."
msgstr ""
"``Dynamic Font`` 리소스로 들어갑니다. ``Font`` 카테고리를 열고 ``Font Data`` "
"옆의 영역을 클릭하세요. ``로드`` 버튼을 클릭하세요. 파일 브라우저에서, "
"assets/font folder 경로를 치시고 ``Comfortaa-Bold.ttf`` 를 클릭해서 여세요. "
"뷰포트가 업데이트 된 것을 보실 수 있습니다. Settings 카테고리를 열고 폰트 사"
"이즈를 변경하세요. ``Size`` 속성을 ``24`` 나 ``28`` 정도로 설정하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:215
msgid ""
"We now need the text's baseline, the number's lower edge, to align with the "
"HP texture on the left. To do so, still in the ``DynamicFont`` resource, you "
"can tweak the ``Bottom`` property under the ``Extra Spacing`` category. It "
"adds some bottom padding to the text. Click the ``Number`` node in the Scene "
"tab to go back to the node's properties and change the ``VAlign`` to "
"``Bottom``. To adjust the text's baseline, click on the font field under the "
"``Custom Font`` category again and tweak the ``Bottom`` property until the "
"text aligns with the ``Title`` node. I used a value of ``2`` pixels."
msgstr ""
"이제 왼쪽의 HP 텍스쳐와 일직선으로 하기 위해, 텍스트의 기준선과 숫자 하단의 "
"가장자리가 필요합니다. 그러기 위해, 다시 ``DynamicFont`` 리소스에서, ``Extra "
"Spacing``  카테고리의 ``Bottom`` 속성을 잡아당길 수 있습니다. 그것은 텍스트"
"에 하단 여백을 추가합니다. 씬 탭에 있는 ``Number`` 노드를 클릭하고 노드 속성"
"으로 돌아가서 ``VAlign`` 을 ``Bottom`` 으로 바꿉니다. 텍스트의 기준선을 적용"
"하기 위해 ``Custom Font`` 카테고리의 폰트 영역을 다시 클릭하고 ``Bottom`` 속"
"성을 ``Title`` 노드와 일직선이 될 때까지 잡아당깁니다. 저는 ``2`` 픽셀 값을 "
"사용했습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:227
msgid "With a Bottom value of 2 pixels, the Number aligns with the Title"
msgstr "Bottom 에 2픽셀 값으로, Number는 Title과 일직선이 됨"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:229
msgid ""
"With this, we finished the hardest part of the GUI. Congratulations! Let's "
"move on to the simpler nodes."
msgstr ""
"이걸로, 우리는 GUI의 가장 어려운 부분을 마쳤습니다. 축하합니다! 더 단순한 노"
"드로 넘어갑시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:233
msgid "Add the progress bar"
msgstr "경과 막대를 추가하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:235
msgid ""
"We need one last element to complete our life bar: the gauge itself. Godot "
"ships with a ``TextureProgress`` node that has everything we need."
msgstr ""
"우리는 체력 막대를 완성하기 위해 마지막 요소가 필요합니다: 게이지 그 자체이"
"죠. 우리가 필요한 모든 것은 ``TextureProgress`` 노드에 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:238
msgid ""
"Select the Bar node and add a ``TextureProgress`` inside of it. Name it "
"``Gauge``. In the inspector unfold the ``Textures`` section. Head to the "
"FileSystem dock and drag and drop the ``lifebar_bg.png`` texture onto the "
"``Under`` slot. Do the same with the ``lifebar_fill.png`` image and drop it "
"onto the ``Progress`` slot. Under the ``Range`` class in the inspector, "
"change the ``Value`` property to ``50`` to see the gauge fill up."
msgstr ""
"Bar 노드를 선택하고 안에 ``TextureProgress`` 를 추가합니다. ``Gauge`` 라고 이"
"름을 짓습니다. 인스펙터에서 ``Textures`` 섹션을 엽니다. 파일 시스템 독에서 "
"``lifebar_bg.png`` 텍스쳐를 ``Under`` 슬롯에 드래그 앤 드롭 합니다.  "
"``lifebar_fill.png`` 이미지도 ``Progress`` 슬롯에 넣어줍니다. 인스펙터에서 "
"``Range`` 클래스 하단에, ``Value`` 속성을 ``50`` 으로 설정하면 게이지가 찬 모"
"습을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:246
msgid "With only five ``Control`` nodes, our first bar is ready to use."
msgstr "오직 다섯 ``Control`` 노드로, 우리의 첫 막대가 준비되었습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:250
msgid ""
"That's it, our life bar is ready. This last part was quick, wasn't it? "
"That's thanks to our robust container setup."
msgstr ""
"이겁니다, 우리의 막대는 준비가 되었습니다. 마지막 부분은 빨리 끝났네요, 그렇"
"지 않나요? 강력한 컨테이너 설정 덕분입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:254
msgid "Design the bomb and rupee counters"
msgstr "폭탄과 루피 카운터를 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:256
msgid ""
"The bomb and rupee counters are like the bar's ``Count`` node. So we'll "
"duplicate it and use it as a template."
msgstr ""
"폭탄과 루피 카운터는 바의 ``Count`` 노드와 비슷합니다. 따라서 복사해서 템플릿"
"으로 사용해서 만들어 보도록 하죠."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:259
msgid ""
"Under the ``Bar`` node, select ``Count`` and press Ctrl D to duplicate it. "
"Drag and drop the new node under the ``Counters`` ``HBoxContainer`` at the "
"bottom of the scene tree. You should see it resize automatically. Don't "
"worry about this for now, we'll fix the size soon."
msgstr ""
"``Bar`` 노드 아래에 있는 ``Count`` 를 선택한뒤, Ctrl D 를 눌러 노드를 복사합"
"니다. 그리고 새로 만들어진 노드를 드래그-앤-드롭 으로 씬트리 가장 아래에 있"
"는 ``Counter`` ``HBoxContainer`` 에 넣어 줍니다. 사이즈가 자동으로 변경되는것"
"을 볼 수 있을겁니다. 걱정하지 마시고 조금 뒤에 수정하기로 하고 다음으로 넘어"
"가가로 하죠."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:264
msgid ""
"Rename the ``Count2`` node to ``Counter``. Unlike the bars, we want the "
"number to be on the left, and an icon to sit on the right. The setup is the "
"same: we need a background (a ``NinePatchRect``), the title, and the number "
"nodes. The ``Title`` node is a ``TextureRect``, so it's what we need to "
"display the icon. In the scene tree, select the ``Title`` node, and rename "
"it to ``Icon``."
msgstr ""
"``Count2`` 노드의 이름을 ``Counter``로 변경합니다. 바와는 다르게 숫자는 왼"
"쪽, 아이콘은 오른쪽에 오도록 작업할 겁니다. 구성은 동일합니다: 배경 "
"(``NinePatchRect``), 타이틀, 그리고 숫자 노드가 들어갑니다. ``Title`` 노드는 "
"``TextureRect`` 노드이므로, 아이콘을 표시합니다. 씬 트리에서 ``Title`` 노드"
"를 선택하고 이름을 ``Icon`` 으로 변경합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:273
msgid "Here's how your node tree should look so far"
msgstr "이것이 현재까지 작업한 노드 트리의 모습입니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:275
msgid ""
"With the ``Icon`` node selected, in the inspector, scroll to the top to see "
"the ``Texture`` slot. Head to the FileSystem dock on the left and select the "
"``bombs_icon.png``. Drag and drop it onto the ``Texture`` slot. In the Scene "
"Tab select both the ``Icon`` and the ``Number`` nodes. Click the Layout menu "
"in the toolbar at the top of the viewport and select ``Full Rect``. Both "
"nodes will update to fit the size of the ``Background``."
msgstr ""
"``Icon`` 노드를 선택하고 인스펙터를 스크롤하여 ``Texture`` 슬롯을 찾습니다. "
"파일 시스템 독에서 ``bombs_icon.png`` 를 드래그하여 ``Texture`` 슬롯에 놓습니"
"다. 씬 탭에서 ``Icon`` 과 ``Number`` 노드를 선택 하고 뷰포트 상단에 도구 모음"
"에서 레이아웃 메뉴를 클릭하고 ``Full Rect`` 를 선택 합니다. 두 노드 모두 "
"``Background`` 의 크기에 맞게 업데이트될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:285
msgid "The nodes anchor to the entire Background, but their position is off"
msgstr "노드는 전체 배경에 앵커됐지만, 위치가 알맞지 않네요"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:287
msgid ""
"Let's change the ``Number``'s align properties to move it to the left and "
"center of the ``Background``. Select the ``Number`` node, change its "
"``Align`` property to left and the ``VAlign`` property to centre. Then "
"resize its left edge a little bit to add some padding between the left edge "
"of the ``Background`` and the text."
msgstr ""
"``Number`` 의 align 속성을 변경하여 그것이 왼쪽이고 ``Background`` 의 중앙에 "
"있게 할 겁니다. ``Number`` 노드를 선택하고, ``Align`` 속성을 왼쪽으로 하고 "
"``VAlign`` 속성을 가운데로 바꿉니다. 그 후 그것의 왼쪽 모서리를 살짝 건드리"
"면 ``Background`` 의 왼쪽 모서리와 텍스트 사이에 채우기가 적용됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:295
msgid "The Number node aligned to the left and centre"
msgstr "왼쪽과 중앙에 정렬된 Number 노드"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:297
msgid ""
"To overlap the Icon and the background, we need a few tweaks. First, our "
"background is a bit too tall. It's because it's inside a margin container "
"that is controlled by the top-most GUI node. Select the GUI node at the top "
"of the scene tree and downsize it vertically so that it's as thin as "
"possible. You'll see the gauge prevents you from making it too small. A "
"container cannot be smaller than the minimal size of its children. The "
"container's margins also weigh in."
msgstr ""
"아이콘과 배경을 씌우기 위해, 이들을 조금 비틀 필요가 있습니다. 먼저, 배경은 "
"약간 좀 큽니다. 왜냐하면 가장 위에있는 GUI 노드에 의해 제어되는 마진 컨테이"
"너 안에 있기 때문입니다. 씬 트릭 꼭대기의 GUI 노드를 선택하고 세로 크기를 줄"
"여서 가능한 얇게 만듭니다. 게이지가 너무 작게 만들어지지 않게 되는 것을 볼 "
"수 있을 겁니다. 컨테이너는 자식의 최소 크기보다 더 작아질 수 없습니다. 컨테이"
"너의 마진 또한 마찬가지입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:305
msgid ""
"Select the Icon, click the Layout menu, and select ``Full Rect`` to re-"
"center it. We need it to anchor to the ``Background``'s right edge. Open the "
"Layout menu again and select ``Center Right``. Move the icon up so it is "
"centered vertically with the ``Background``."
msgstr ""
"Icon을 선택하고, 레이아웃 메뉴를 클릭하고, 다시 중앙에 놓이도록 ``Full "
"Rect`` 를 선택하세요. 우리는 이것이 ``Background`` 의 오른쪽 모서리에 앵커하"
"도록 해야 합니다. 다시 레이아웃 메뉴를 열고 ``Center Rignt`` 를 선택하세요. "
"아이콘을 위로 움직여서 ``Background`` 에 세로로 가운데에 있도록 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:313
msgid ""
"The bomb icon anchors to the Background's right edge. Resize the Counter "
"container to see the Icon node stick to its right side"
msgstr ""
"폭탄 아이콘의 앵커는 Background의 오른쪽 가장자리로 설정합니다. Counter 컨테"
"이너의 크기를 변경하여 Icon 노드가 오른쪽 모서리에 고정되도록 하십시오"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:316
msgid ""
"Because we duplicated the ``Counter`` from the bar's ``Count``, the "
"``Number`` node's font is off. Select the ``Number`` node again, head to the "
"``Font`` property, and click it to access the ``DynamicFont`` resource. In "
"the ``Extra Spacing`` section, change the ``Bottom`` value to ``0`` to reset "
"the font's baseline. Our counter now works as expected."
msgstr ""
"우리가 막대의 ``Count`` 에서 ``Counter`` 를 복제했기 때문에, ``Number`` 노드"
"의 폰트는 꺼져 있습니다. ``Number`` 노드를 다시 선택하고 ``Font`` 속성으로 갑"
"니다, 그리고 클릭하고 ``DynamicFont`` 리소스에 접근합니다. ``Extra Spacing`` "
"섹션에서, 폰트의 기준선을 재 설정하기 위해 ``Bottom`` 값을 ``0`` 으로 합니"
"다. 카운터는 이제 생각한 대로 작동합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:323
msgid ""
"Let's make the ``Counters`` anchor to the right edge of the viewport. To do "
"so, we need to set the ``Bars`` container take all the available horizontal "
"space it can. Select the ``Bars`` node and scroll down to the ``Size Flags`` "
"category. In the ``Horizontal`` category, check the ``Expand`` value. The "
"``Bars`` node should resize and push the counter to the right side of the "
"screen."
msgstr ""
"``Counters``\\ 가 뷰포트의 오른쪽 모서리에 고정되도록 만듭니다. 그러기 위해 "
"``Bars`` 컨테이너가 전체 수평 공간을 차지하도록 설정해야 합니다. ``Bars`` 노"
"드를 선택하고 ``Size Flags`` 카테고리로 갑니다. ``Horizontal`` 카테고리에서, "
"``Expand`` 값을 체크합니다. ``Bars`` 노드는 크기가 조절되면서 카운터를 화면 "
"가장 오른쪽으로 밀어냅니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:331
msgid ""
"An expanding container eats all the space it can from its parent, pushing "
"everything else along the way"
msgstr ""
"확장된 컨테이너가 부모의 모든 공간을 차지하고, 나머지 것들을 치워버립니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:335
msgid "Turn the bar and counter into reusable UI components"
msgstr "막대와 카운터를 재사용 가능한 UI 구성 요소로 바꾸기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:337
msgid ""
"We have one bar and one counter widget. But we need two of each. We may need "
"to change the bars' design or their functionality later on. It'd be great if "
"we could have a single scene to store a UI element's template, and child "
"scenes to work on variations. Godot lets us do this with Inherited Scenes."
msgstr ""
"우리는 하나의 막대와 카운터 도구를 갖고 있습니다. 하지만 각자 두 가지가 필요"
"합니다. 나중에 막대의 디자인이나 기능성을 바꿔야 될지도 모릅니다. 그럴 때 UI "
"요소들의 템플릿을 저장하는 하나의 씬과, 유사한 작업에 쓸 자식 씬들을 가진다"
"면 멋질 것입니다. Godot는 상속된 씬으로 이를 제공합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:343
msgid ""
"Let's save both the ``Counter`` and the ``Bar`` branches as separate scenes "
"that we'll reduce to create the ``LifeBar``, the ``EnergyBar``, the "
"``BombCounter``, and the ``RupeeCounter``. Select the ``Bar`` HBoxContainer. "
"Right click on it and click on ``Save Branch as Scene``. Save the scene as "
"``Bar.tscn``. You should see the node branch turn it to a single ``Bar`` "
"node."
msgstr ""
"``Counter`` 와 ``Bar`` 분기를 각각의 씬으로 저장해서 ``LifeBar``, "
"``EnergyBar``, ``BombCounter``, 그리고 ``RupeeCounter`` 를 만들 겁니다. "
"``Bar`` HBoxContainer를 선택합니다. 우클릭을 한 후 ``선택 노드를 다른 씬으로 "
"저장`` 을 클릭합니다. 씬을 ``Bar.tscn`` 이란 이름으로 저장합니다. 노드 분기"
"가 이제 하나의 ``Bar`` 노드로 된 것을 보실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:352
msgid ""
"A scene is a tree of nodes. The topmost node is the tree's **root**, and the "
"children at the bottom of the hierarchy are **leaves**. Any node other than "
"the root along with one or more children is a **branch**. We can encapsulate "
"node branches into separate scenes, or load and merge them from other scenes "
"into the active one. Right click on any node in the Scene dock and select "
"``Save Branch as Scene`` or ``Merge from Scene``."
msgstr ""
"하나의 씬은 하나의 노드 트리 입니다. 가장 위의 노드가 트리의 **루트** 이고 계"
"층 구조 밑의 자식들이 **잎**\\ 이 됩니다. 루트를 제외하고 하나의 자식을 가진 "
"노드가 **분기**\\ 입니다. 노드 분기를 각각의 씬으로 캡슐화 할 수 있고, 혹은 "
"다른 씬에서 활성 상태로 불러와 병합할 수 있습니다. 씬 독에서 아무 노드나 선택"
"하고 ``선택 노드를 다른 씬으로 저장``\\ 이나 ``다른 씬에서 가져오기``\\ 를 선"
"택하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:360
msgid ""
"Then, select the ``Counter`` node and do the same. Right click, ``Save "
"Branch as Scene``, and save it as ``Counter.tscn``. A new edit scene icon "
"appears to the right of the nodes in the scene tree. Click on the one next "
"to ``Bar`` to open the corresponding scene. Resize the ``Bar`` node so that "
"its bounding box fits its content. The way we named and placed the Control "
"nodes, we're ready to inherit this template and create the life bar. It's "
"the same for the ``Counter``."
msgstr ""
"그런 후, ``Counter`` 노드를 선택하고 똑같이 반복하세요. 우클릭하고, ``선택 노"
"드를 다른 씬으로 저장``, 그리고 ``Counter.tscn``\\ 으로 저장하세요. 새로운 편"
"집 씬 아이콘이 씬 트리에 있는 노드 오른쪽에 나타납니다. ``Bar`` 옆에 있는 거"
"를 클릭하고 일치하는 씬을 엽니다. ``Bar`` 노드의 경계 사각형이 내용물에 맞게 "
"크기를 조정합니다. Control 노드의 이름을 짓고 배치하는 방법으로, 우리는 이 템"
"플릿을 상속하여 체력 막대를 만들 준비가 되었습니다. ``Counter``\\ 에서도 마찬"
"가지입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:370
msgid "With no extra changes, our Bar is ready to use"
msgstr "추가적인 변화 없이, 막대를 사용할 수 있음"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:373
msgid "Use scene inheritance to create the remaining elements"
msgstr "씬 상속을 사용해서 나머지 요소들을 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:375
msgid ""
"We need two bars that work the same way: they should feature a label on the "
"left, with some value, and a horizontal gauge on the right. The only "
"difference is that one has the HP label and is green, while the other is "
"called EP and is yellow. Godot gives us a powerful tool to create a common "
"base to reuse for all bars in the game: **inherited scenes**."
msgstr ""
"우리는 같은 방법으로 작동하는 두 막대가 필요합니다: 왼쪽에 라벨이 있고, 값을 "
"지니고 있습니다, 그리고 오른쪽에 수평 게이지가 있습니다. 차이라면 하나는 HP "
"라벨이고 초록색이라는 것, 그리고 다른 것은 EP 이고 노란색인 것입니다. Godot"
"는 게임 내에 모든 막대에 다시 사용할 수 있는 기본 기반을 만드는 강력한 도구"
"를 제공합니다: **상속된 씬** 입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:383
msgid ""
"Inherited scenes help us keep the GUI scene clean. In the end, we will only "
"have containers and one node for each UI component."
msgstr ""
"상속된 씬은 GUI 씬이 깔끔하도록 돕습니다. 마지막에는, 각 UI 구성 요소를 위한 "
"하나의 노드와 컨테이너 만을 갖게 될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:386
msgid ""
"On an inherited scene, you can change any property of every node in the "
"inspector, aside from its name. If you modify and save the parent scene, all "
"the inherited scenes update to reflect the changes. If you change a value in "
"the inherited scene, it will always override the parent's property. It's "
"useful for UIs, as they often require variations of the same elements. In "
"general, in UI design, buttons, panels etc. share a common base style and "
"interactions. We don't want to copy it over to all variations manually."
msgstr ""
"상속된 씬에서, 당신은 이름을 제외하고, 인스펙터에서 모든 노드의 속성을 바꿀 "
"수 있습니다. 부모 씬을 변형하고 저장한다면, 모든 상속된 씬은 그 변화를 반영"
"해 업데이트 됩니다. 상속된 씬에서 값을 바꾼다면, 항상 부모의 속성보다 우선시"
"됩니다. 종종 동일한 요소를 변화 시켜야 하는 UI에 유용합니다. 일반적으로, UI "
"디자인, 버튼, 패널 등등이 기본 스타일과 상호작용을 공유합니다. 우리는 모든 변"
"화를 수동으로 복사하지 않으려 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:395
msgid ""
"A reload icon will appear next to the properties you override. Click it to "
"reset the value to the parent scene's default."
msgstr ""
"새로고침 아이콘이 당신이 오버라이드한 속성 옆에 나타날 것입니다. 클릭하면 값"
"을 부모의 기본형으로 되돌립니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:400
msgid ""
"Think of scene inheritance like the node tree, or the ``extends`` keyword in "
"GDScript. An inherited scene does everything like its parent, but you can "
"override properties, resources and add extra nodes and scripts to extend its "
"functionality."
msgstr ""
"씬 상속의 생각은 노드 트리나, GDScript의 ``extends`` 키워드와 비슷합니다. 상"
"속된 씬은 부모처럼 모든 것을 할 수 있습니다, 그리고 속성, 리소스를 오버라이드"
"하고, 기ㅡㅇ을 확장하기 위해 노드와 스크립트 추가도 가능합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:406
msgid "Inherit the Bar Scene to build the LifeBar"
msgstr "LifeBar를 만들기 위해 Bar 씬을 상속하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:408
msgid ""
"Go to ``Scene -> New Inherited Scene`` to create a new type of ``Bar``. "
"Select the Bar scene and open it. You should see a new [unsaved] tab, that's "
"like your ``Bar``, but with all nodes except the root in grey. Press ``Meta"
"+S`` to save the new inherited scene and name it ``LifeBar``."
msgstr ""
"``씬 -> 새 상속 씬`` 으로 가서 새 타입의 ``Bar`` 를 만듭니다. 막대 씬을 선택"
"하고 엽니다. 새로운 [저장되지 않음] 탬을 보실 수 있는데, 그것은 ``Bar`` 씬에"
"서 루트 노드를 제외한 모든 노드가 회색으로 처리된 씬입니다. ``Control+S`` (맥"
"에서는 ``Meta+S``) 를 눌러 새 상속 씬을 저장하고 ``LifeBar`` 라고 이름짓습니"
"다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:416
msgid "You can't rename grey nodes. This tells you they have a parent scene"
msgstr ""
"회색 노드를 이름을 바꿀 수 없습니다. 이것은 부모 씬을 갖고 있음을 말합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:418
msgid ""
"First, rename the root or top level node to ``LifeBar``. We always want the "
"root to describe exactly what this UI component is. The name differentiates "
"this bar from the ``EnergyBar`` we'll create next. The other nodes inside "
"the scene should describe the component's structure with broad terms, so it "
"works with all inherited scenes. Like our ``TextureProgress`` and ``Number`` "
"nodes."
msgstr ""
"먼저, 루트나 가장 위에 있는 노드를 ``LifeBar`` 라고 이름짓습니다. 우리는 항"
"상 루트가 이 UI 구성 요소를 정확하게 나타내길 원합니다. 나중에 우리가 만들 "
"``EnergyBar`` 와의 차이점도 이름입니다. 씬 안의 다른 노드는 구성 요소의 구조"
"를 광범위하게 나타내야 하기에, 이들은 모두 상속 씬 안에서 작동합니다. "
"``TextureProgress`` 와 ``Number`` 노드처럼 말이죠."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:427
msgid ""
"If you've ever done web design, it's the same spirit as working with CSS: "
"you create a base class, and add variations with modifier classes. From a "
"base button class, you'll have button-green and button-red variations for "
"the user to accept and refuse prompts. The new class contains the name of "
"the parent element and an extra keyword to explain how it modifies it. When "
"we create an inherited scene and change the name of the top level node, "
"we're doing the same thing."
msgstr ""
"이제까지 웹 디자인을 해본 적 있으시다면, 이것은 CSS에서 작업하는 것과 같은 형"
"식입니다: 기초 클래스를 만들고 모디파이어 클래스로 변수를 추가하는 형식입니"
"다. 기본 버튼 클래스에서, 사용자는 초록 버튼과 빨간 버튼으로 프롬포트를 선택"
"하거나 취소할 수 있게 됩니다. 새 클래스는 부모 요소의 이름과 어떻게 그것이 변"
"형하는 지를 설명하는 추가 키워트를 갖고 있습니다. 우리가 상속 씬을 만들고 가"
"장 위에 있는 노드 이름을 바꿀 때, 우리는 같은 것을 하고 있는 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:436
msgid "Design the EnergyBar"
msgstr "에너지 막대 디자인하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:438
msgid ""
"We already setup the ``LifeBar``'s design with the main ``Bar`` scene. Now "
"we need the ``EnergyBar``."
msgstr ""
"우리는 이미 메인 ``Bar`` 씬으로 ``LifeBar`` 의 디자인을 설정했습니다. 이제 "
"``EnergyBar`` 가 필요합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:441
msgid ""
"Let's create a new inherited scene, and once again select the ``Bar.tscn`` "
"scene and open it. Double-click on the ``Bar`` root node and rename it to "
"``EnergyBar``. Save the new scene as ``EnergyBar.tscn``. We need to replace "
"the HP texture with EP one, and to change the textures on the gauge."
msgstr ""
"새 상속 씬을 만듭니다, 그리고 다시 ``Bar.tscn`` 씬을 선택하고 엽니다. "
"``Bar`` 루트 노드를 더블 클릭하고 이름을 ``EnergyBar`` 로 바꿉니다. 새 씬을 "
"``EnergyBar.tscn`` 으로 저장합니다. HP 텍스쳐를 EP로 바꾸고 게이지의 텍스쳐"
"를 바꿔야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:447
msgid ""
"Head to the FileSystem dock on the left, select the ``Title`` node in the "
"Scene tree and drag and drop the ``label_EP.png`` file onto the texture "
"slot. Select the ``Number`` node and change the ``Text`` property to a "
"different value like ``14``."
msgstr ""
"파일 시스템 독으로 가서, 씬 트리에서 ``Title`` 노드를 선택하고 ``label_EP."
"png`` 파일을 텍스쳐 슬롯에 드래그 앤 드롭 합니다. ``Number`` 노드를 선택하고 "
"``Text`` 속성을 ``14`` 처럼 다른 값으로 바꿉니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:452
msgid ""
"You'll notice the EP texture is smaller than the HP one. We should update "
"the ``Number``'s font size to better fit it. A font is a resource. All the "
"nodes in the entire project that use this resource will be affected by any "
"property we change. You can try to change the size to a huge value like "
"``40`` and switch back to the ``LifeBar`` or the ``Bar`` scenes. You will "
"see the text increased in size."
msgstr ""
"EP 텍스쳐가 HP보다 더 작은 것을 눈치채셨을겁니다. 이에 맞추기 위해 "
"``Number`` 폰트 크기를 업데이트해야 합니다. 한 폰트는 하나의 리소스입니다. "
"이 리소스를 사용하는 모든 프로젝트가 리소스의 속성 변화에 영향을 받습니다. 우"
"리는 크기를 ``40`` 처럼 크게 바꾸고 ``LifeBar`` 나 ``Bar`` 씬으로 돌아갑니"
"다. 텍스트가 커진 것을 보실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:461
msgid "If we change the font resource, all the nodes that use it are affected"
msgstr "폰트 리소스를 변경하면, 이것을 사용하는 모든 노드가 영향을 받습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:464
msgid ""
"To change the font size on this node only, we must create a copy of the font "
"resource. Select the ``Number`` node again and click on the wrench and "
"screwdriver icon on the top right of the inspector. In the drop-down menu, "
"select the ``Make Sub-Resources Unique`` option. Godot will find all the "
"resources this node uses and create unique copies for us."
msgstr ""
"이 노드의 폰트 크기 만을 바꾸고 싶다면, 폰트 리소스의 복사본을 만들어야 합니"
"다. ``Number`` 노드를 다시 선택하고 인스펙터 우측 상단에 있는 렌치와 드라이"
"버 아이콘을 클릭하세요. 하단 메뉴에서, ``하위 리소스를 유일하게 만들기`` 설정"
"을 선택합니다. Godot는 이 노드의 모든 리소스를 발견해서 유일한 복사본을 만들"
"어냅니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:472
msgid "Use this option to create unique copies of the resources for one node"
msgstr "이 설정을 사용해서 한 노드를 위한 유일한 리소스 복사본을 만듭니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:476
msgid ""
"When you duplicate a node from the Scene tree, with ``Meta+D``, it shares "
"its resources with the original node. You need to use ``Make Sub-Resources "
"Unique`` before you can tweak the resources without affecting the source "
"node."
msgstr ""
"``Ctrl+D``, 혹은 맥에서 ``Meta+D`` 를 통해 씬트리에서 노드를 복사할 때, 원래 "
"노드의 리소스를 공유합니다. 리소스를 변형시켜도 원래 노드에 영향을 주지 않으"
"려면 ``하위 리소스를 유일하게 만들기`` 를 사용해야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:481
msgid ""
"Scroll down to the ``Custom Font`` section and open ``Font``. Lower the "
"``Size`` to a smaller value like ``20`` or ``22``. You may also need to "
"adjust the ``Bottom`` spacing value to align the text's baseline with the EP "
"label on the left."
msgstr ""
"``Custom Font`` 섹션으로 내려가서 ``Font`` 를 엽니다. ``Size`` 를 ``20`` 이"
"나 ``22`` 와 같은 더 작은 값으로 낮춥니다. 그리고 ``Bottom`` 간격 값을 왼쪽 "
"EP 라벨의 텍스트 기준선에 정렬시킬 필요가 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:488
msgid "The EP Count widget, with a smaller font than its HP counterpart"
msgstr "HP보다 더 작은 폰트를 가진, EP 카운터 위젯"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:490
msgid ""
"Now, select the ``TextureProgress`` node. Drag the ``energy_bar_bg.png`` "
"file onto the ``Under`` slot and do the same for ``energy_bar_fill.png`` and "
"drop it onto the ``Progress`` texture slot."
msgstr ""
"이제, ``TextureProgress`` 노드를 선택합니다. ``energy_bar_bg.png`` 파일을 "
"``Under`` 슬롯에 드래그하고 ``energy_bar_fill.png`` 을 ``Progress`` 텍스쳐 슬"
"롯에 넣습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:494
msgid ""
"You can resize the node vertically so that its bounding rectangle fits the "
"gauge. Do the same with the ``Count`` node until its size aligns with that "
"of the bar. Because the minimal size of ``TextureProgress`` is set based on "
"its textures, you won't be able to downsize the ``Count`` node below that. "
"That is also the size the ``Bar`` container will have. You may downscale "
"this one as well."
msgstr ""
"노드의 경계 사각형이 게이지에 맞도록 노드의 크기를 수직으로 조정해야 합니다."
"``Count`` 노드도 마찬가지로 막대에 경계 사각형에 정렬해야 합니다. "
"``TextureProgress`` 의 최소 크기가 텍스쳐의 크기에 맞춰져 있기 때문에, 당신"
"은 ``Count`` 노드를 축소 시킬 수 없을 겁니다. 그것이 ``Bar`` 컨테이너의 크기"
"이기도 합니다. 이것은 크기를 줄일 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:501
msgid ""
"Last but not least, the ``Background`` container has a minimum size that "
"makes it a bit large. Select it and in the ``Rect`` section, change the "
"``Min Size`` property down to ``80`` pixels. It should resize automatically "
"and the ``Title`` and ``Number`` nodes should reposition as well."
msgstr ""
"마지막으로 중요한 것은, ``Background`` 컨테이너가 최소 크기를 가져서 조금 넓"
"어진 것입니다. 컨테이너를 선택하고 ``Rect`` 섹션에서, ``Min Size`` 속성을 "
"``80`` 픽셀로 낮춥니다. 자동으로 크기가 조절되고 ``Title`` 과 ``Number`` 노드"
"도 다시 자리를 잡게 될 겁니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:509
msgid "The Count looks better now it's a bit smaller"
msgstr "카운터는 이제 약간 더 작아져 더 좋아졌습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:513
msgid ""
"The Count node's size affects the position of the TextureProgress. As we'll "
"align our bars vertically in a moment, we're better off using the Counter's "
"left margin to resize our EP label. This way both the EnergyBar's Count and "
"the LifeBar's Count nodes are one hundred pixels wide, so both gauges will "
"align perfectly."
msgstr ""
"Count 노드의 크기는 TextureProgress 의 위치에 영향을 받습니다. 우리는 막대를 "
"수직으로 정렬할 것이기 때문에, Counter의 왼쪽 여백을 이용해 EP 라벨의 크기를 "
"조정하는 것이 더 좋습니다. EnergyBar의 Count와 LifeBar의 Count 노드가 둘다 "
"100 픽셀 너비이기 때문에, 이 방법으로 두 게이지는 완벽하게 정렬할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:520
msgid "Prepare the bomb and rupee counters"
msgstr "폭탄과 루피 카운터 준비하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:522
msgid ""
"Let us now take care of the counters. Go to ``Scene -> New Inherited Scene`` "
"and select the ``Counter.tscn`` as a base. Rename the root node as "
"``BombCounter`` too. Save the new scene as ``BombCounter.tscn``. That's all "
"for this scene."
msgstr ""
"카운터를 다뤄볼 차례입니다. ``씬 -> 새 상속 씬`` 으로 가서 ``Counter.tscn`` "
"을 기본으로 선택하세요. 루트 노드의 이름을 ``BombCounter`` 로 바꿔줍니다. 새 "
"씬을 ``BombCounter.tscn`` 으로 저장합니다. 이것이 이 씬의 전부입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:529
msgid "The bomb counter is the same as the original Counter scene"
msgstr "폭탄 카운터는 원래 카운터 씬과 같습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:531
msgid ""
"Go to ``Scene -> New Inherited Scene`` again and select ``Counter.tscn`` "
"once more. Rename the root node ``RupeeCounter`` and save the scene as "
"``RupeeCounter.tscn``. For this one, we mainly need to replace the bomb icon "
"with the rupee icon. In the FileSystem tab, drag the ``rupees_icon.png`` "
"onto the ``Icon`` node's ``Texture`` slot. ``Icon`` already anchors to the "
"right edge of the ``Background`` node so we can change its position and it "
"will scale and reposition with the ``RupeeCounter`` container. Shift the "
"rupee icon a little bit to the right and down. Use the Arrow Keys on the "
"keyboard to nudge its position. Save, and we're done with all the UI "
"elements."
msgstr ""
"다시 ``씬 -> 새 상속 씬`` 으로 가서 ``Counter.tscn`` 을 다시 선택합니다. 루"
"트 노드 이름을 ``RupeeCounter`` 로 하고 씬을 ``RupeeCounter.tscn`` 로 저장합"
"니다. 여기에, 우리는 주로 폭탄 아이콘과 루피 아이콘을 재배치 할 필요가 있습니"
"다. 파일 시스템 탭에서, ``rupees_icon.png`` 를 ``Icon`` 노드의 ``Texture`` 슬"
"롯으로 드래그 합니다. ``Icon`` 은 이미 ``Background`` 의 오른쪽 모서리에 앵"
"커 되었으므로 우리는 아이콘의 위치를 바꿀 수 있고 ``RupeeCounter`` 의 크기와 "
"위치를 조정해서 아이콘의 크기를 조정할 수 있습니다.  루피 아이콘을 조금 오른"
"쪽 아래로 옮깁니다. 키보드의 화살표 키를 사용하여 위치를 조금씩 옮길 수 있습"
"니다. 저장하면, 이제 모든 UI 요소가 끝났습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:544
msgid "The rupee counter should look something like this"
msgstr "루피 카운터는 이와 같이 보여야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:547
msgid "Add the UI components to the final GUI"
msgstr "최종 GUI에 UI 구성 요소들을 추가하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:549
msgid ""
"Time to add all the UI elements to the main GUI scene. Open the ``GUI.tscn`` "
"scene again, and delete the ``Bar`` and ``Counter`` nodes. In the FileSystem "
"dock, find the ``LifeBar.tscn`` and drag and drop it onto the ``Bars`` "
"container in the scene tree. Do the same for the ``EnergyBar``. You should "
"see them align vertically."
msgstr ""
"메인 GUI 씬에 모든 UI 요소들을 추가할 시간입니다. ``GUI.tscn`` 다시 열고 "
"``Bar`` 와  ``Counter`` 노드를 삭제합니다. 파일 시스템 독에서, ``LifeBar."
"tscn`` 을 찾아서 씬 트리의 ``Bars`` 컨테이너에 드래그 앤 드랍 합니다. "
"``EnergyBar`` 도 마찬가지입니다. 이들은 수직으로 정렬해 있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:557
msgid "The LifeBar and the EnergyBar align automatically"
msgstr "자동으로 LifeBar와 EnergyBar가 정렬됨"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:559
msgid ""
"Now, drag and drop the ``BombCounter.tscn`` and ``RupeeCounter.tscn`` scenes "
"onto the ``Counters`` node. They'll resize automatically."
msgstr ""
"이제 ``BombCounter.tscn`` 와 ``RupeeCounter.tscn`` 씬을 ``Counters`` 노드에 "
"드래그 앤 드랍 합니다. 이들은 자동으로 크기가 조정될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:564
msgid "The nodes resize to take all the available vertical space"
msgstr "가능한 모든 수직 공간을 차지하기 위해 크기가 조절된 노드들"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:566
msgid ""
"To let the ``RupeeCounter`` and ``BombCounter`` use the size we defined in "
"``Counter.tscn``, we need to change the ``Size Flags`` on the ``Counters`` "
"container. Select the ``Counters`` node and unfold the ``Size Flags`` "
"section in the Inspector. Uncheck the ``Fill`` tag for the ``Vertical`` "
"property, and check ``Shrink Center`` so the container centers inside the "
"``HBoxContainer``."
msgstr ""
"``RupeeCounter`` 와 ``BombCounter`` 가 ``Counter.tscn`` 에 정의한 크기를 사용"
"할 수 있도록, 우리는 ``Counters`` 컨테이너의 ``Size Flags`` 를 바꿔야 합니"
"다. ``Counters`` 노드를 선택하고 인스펙터에서 ``Size Flags`` 섹션을 펼칩니"
"다.  ``Vertical`` 속성에서 ``Fill`` 태그를 해제하고 ``Shrink Center`` 를 체크"
"하여 컨테이너가  ``HBoxContainer`` 에서 중앙에 있도록 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:575
msgid "Now both counters have a decent size"
msgstr "이제 두 카운터 모두 괜찮은 크기입니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:579
msgid ""
"Change the ``Min Size`` property of the ``Counters`` container to control "
"the height of the counters' background."
msgstr ""
"``Counters`` 컨테이너의 ``Min Size`` 속성을 바꿔 카운터의 배경 높이를 조정합"
"니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:582
msgid ""
"We have one small issue left with the EP label on the EnergyBar: the 2 bars "
"should align vertically. Click the icon next to the ``EnergyBar`` node to "
"open its scene. Select the ``Count`` node and scroll down to the ``Custom "
"Constants`` section. Add a ``Margin Left`` of ``20``. In the ``Rect`` "
"section set the node's ``Min Size`` back to 100, the same value as on the "
"LifeBar. The ``Count`` should now have some margin on the left. If you save "
"and go back to the GUI scene, it will be aligned vertically with the "
"``LifeBar``."
msgstr ""
"EnergyBar의 EP 라벨에 한 가지 문제가 남았습니다: 두 막대는 수직으로 정렬되어"
"야 합니다. ``EnergyBar`` 노드 옆의 아이콘을 클릭하여 노드의 씬을 엽니다. "
"``Count`` 노드를 선택하고 ``Custom Constant`` 섹션으로 갑니다.  ``Margin "
"Left``\\ 를 ``20``\\ 으로 추가합니다. ``Rect`` 섹션에서 노드의 ``Min Size``"
"\\ 를 다시 100으로 돌려놓습니다, LifeBar와 같은 값입니다. ``Count``\\ 는 왼쪽"
"에 이제 여백이 생기게 됩니다. 저장하고 다시 GUI 씬으로 돌아가면, 그것이 "
"``LifeBar`` 와 수직으로 정렬될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:593
msgid "The 2 bars align perfectly"
msgstr "완벽하게 정렬된 두 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:597
msgid ""
"We could have set up the ``EnergyBar`` this way a few moments ago. But this "
"shows you that you can go back to any scene anytime, tweak it, and see the "
"changes propagate through the project!"
msgstr ""
"우리는 이 방법으로 ``EnergyBar``\\ 를 설정할 수 있었습니다. 하지만 이것은 언"
"제든지 씬으로 돌아가서, 변형하고, 그리고 프로젝트를 통해 전파된 변화를 볼 수 "
"있다는 것을 보여줍니다!"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:602
msgid "Place the GUI onto the game's mockup"
msgstr "게임 모형에 GUI를 배치하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:604
msgid ""
"To wrap up the tutorial we're going to insert the GUI onto the game's mockup "
"scene."
msgstr "튜토리얼을 마무리하기 위해 GUI를 게임 모형 씬에 삽입할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:607
msgid "Head to the FileSystem dock and open ``LevelMockup.tscn``."
msgstr "파일 시스템 독으로 가서 ``LevelMockup.tscn`` 을 여십시오."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:609
msgid ""
"Drag-and-drop the ``GUI.tscn`` scene right below the ``bg`` node and above "
"the ``Characters``. The GUI will scale to fit the entire viewport. Head to "
"the Layout menu and select the ``Center Top`` option so it anchors to the "
"top edge of the game window. Then resize the GUI to make it as small as "
"possible vertically. Now you can see how the interface looks in the context "
"of the game."
msgstr ""
"``bg`` 노드 아래와 ``Characters`` 노드 위에 ``GUI.tscn`` 씬을 끌어다 놓습니"
"다. GUI는 전체 뷰포트에 맞게 확장할 것입니다. 레이아웃 메뉴로 가서 ``Center "
"Top`` 옵션을 선택하면 그것이 게임 화면의 위쪽 모서리에 고정됩니다. 그 후 GUI"
"가 가능한 수직으로 작아지도록 크기를 조정하세요. 이제 게임의 맥락에서 인터페"
"이스가 어떻게 보이는지 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:616
msgid ""
"Congratulations for getting to the end of this long tutorial. You can find "
"the final project here: :download:`ui_gui_design.zip <files/ui_gui_design."
"zip>`."
msgstr ""
"이 긴 튜토리얼을 마친 것을 축하합니다. 여기서 최종 프로젝트를 찾아가세요: :"
"download:`ui_gui_design.zip <files/ui_gui_design.zip>`."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:625
msgid ""
"**A final note about Responsive Design**. If you resize the GUI, you'll see "
"the nodes move, but the textures and text won't scale. The GUI also has a "
"minimum size, based on the textures inside of it. In games, we don’t need "
"the interface to be as flexible as that of a website. You almost never want "
"to support both landscape and portrait screen orientations. It’s one or the "
"other. In landscape orientation, the most common ratios range from 4:3 to "
"16:9. They are close to one another. That's why it’s enough for the GUI "
"elements to only move horizontally when we change the window size."
msgstr ""
"**반응 형 디자인의 마지막 주석**. GUI의 크기를 조정하면, 노드가 움직이지만, "
"텍스쳐와 문자는 크기가 조정되지 않는 것을 보실 수 있습니다. GUI는 텍스쳐 기반"
"의 최소 크기를 갖고 있습니다. 게임에서, 우리는 인터페이스가 웹 사이트처럼 유"
"연하게 되기를 원하진 않습니다. 당신은 가로와 세로 화면을 모두 지원하고 싶진 "
"않습니다. 그것은 다른 것입니다. 가로 화면에서, 가장 일반적인 비율은 4:3 에서 "
"16:9 입니다. 그들은 서로 가깝습니다. 이것이 우리가 화면 크기를 바꿀 때 GUI 요"
"소가 수평으로만 움직여도 충분한 이유입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:4
msgid "Control the game's UI with code"
msgstr "코드를 통해 게임의 UI를 제어하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:7
#: ../../docs/tutorials/2d/particle_systems_2d.rst:7
msgid "Intro"
msgstr "소개"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:9
msgid ""
"In this tutorial, you will connect a character to a life bar and animate the "
"health loss."
msgstr ""
"이 튜토리얼에서, 당신은 캐릭터를 체력 막대와 연결하고 체력이 줄어드는 것을 구"
"현할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:14
msgid ""
"Here's what you'll create: the bar and the counter animate when the "
"character takes a hit. They fade when it dies."
msgstr ""
"이것이 우리가 만들 것입니다: 캐릭터가 맞을 때 움직이는 막대와 카운터. 캐릭터"
"가 죽으면 서서히 사라집니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:18
msgid "You will learn:"
msgstr "배울 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:20
msgid "How to **connect** a character to a GUI with signals"
msgstr "어떻게 캐릭터를 GUI에 시그널을 통해 **연결** 하는가"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:21
msgid "How to **control** a GUI with GDscript"
msgstr "어떻게 GUI를 GDScript를 통해 **제어** 하는가"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:22
msgid "How to **animate** a life bar with the :ref:`Tween <class_Tween>` node"
msgstr ""
"어떻게 체력 막대를 :ref:`Tween <class_Tween>` 노드를 통해 **애니메이트"
"(animate)** 하는가"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:25
msgid ""
"If you want to learn how to set up the interface instead, check out the step-"
"by-step UI tutorials:"
msgstr ""
"어떻게 인터페이스를 설정하는 지를 배우고 싶다면, 단계별 UI 튜토리얼을 참고하"
"세요:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:28
msgid "Create a main menu screen"
msgstr "메인 메뉴 화면 만들기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:29
msgid "Create a game user interface"
msgstr "게임 사용자 인터페이스 만들기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:32
msgid ""
"When you code a game, you want to build the core gameplay first: the main "
"mechanics, player input, win and loss conditions. The UI comes a bit later. "
"You want to keep all the elements that make up your project separate if "
"possible. Each character should be in its own scene, with its own scripts, "
"and so should the UI elements. This prevents bugs, keeps your project "
"manageable, and allows different team members to work on different parts of "
"the game."
msgstr ""
"게임을 코딩할 때, 당신은 핵심 게임 플레이를 먼저 만들고 싶을 것입니다: 주요 "
"기능, 플레이어 입력, 승패 여부. UI는 나중에나 떠오를 겁니다. 당신은 프로젝트"
"를 만들기 위한 모든 요소들을 가능한 한 분리되도록 하고 싶을 것입니다. 각 캐릭"
"터는 자신의 씬에, 자신의 스크립트를 가지고 있어서, UI 요소가 되어야 합니다. "
"이것은 버그를 예방하고 프로젝트 관리를 유지하며, 다른 팀 구성원들이 게임의 다"
"른 부분을 작업하도록 만듭니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:40
msgid ""
"Once the core gameplay and the UI are ready, you'll need to connect them "
"somehow. In our example, we have the Enemy who attacks the Player at "
"constant time intervals. We want the life bar to update when the Player "
"takes damage."
msgstr ""
"일단 핵심 게임 플레이와 UI가 준비되었다면, 이 들을 어떤 방법으로 연결해야 합"
"니다. 우리의 예제에서는, 우리는 일정한 시간마다 플레이어를 공격하는 적을 가지"
"고 있습니다. 우리는 플레이어가 피해를 입을 때마다 체력 막대가 업데이트 되길 "
"원합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:45
msgid "To do this, we will use **signals**."
msgstr "그러기 위해서, 우리는 **시그널(signals)** 을 사용할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:49
msgid ""
"Signals are Godot's version of the Observer pattern. They allow us to send "
"out some message. Other nodes can connect to the object that **emits** the "
"signal and receive the information. It's a powerful tool we use a lot for "
"User Interface and achievement systems. You don't want to use them "
"everywhere, though. Connecting two nodes adds some coupling between them. "
"When there's a lot of connections, they become hard to manage. For more "
"information, check out the `signals video tutorial <https://youtu.be/"
"l0BkQxF7X3E>`_ on GDquest."
msgstr ""
"시그널은 옵저버 패턴의 Godot 버전입니다. 그들로 메시지를 전달할 수 있습니다. "
"다른 노드들은 시그널을 **방출(emits)** 하고 정보를 받을 수 있는 다른 물체와 "
"연결할 수 있습니다. 이것은 사용자 인터페이스와 업적 달성 시스템에 많이 쓰일 "
"강력한 도구입니다. 그러나 그것들을 남용하기를 권하진 않습니다. 두 노드를 연결"
"하면 노드 간의 커플링이 생겨납니다. 많은 연결이 있다면, 관리하기가 어려워집니"
"다. GDquest의 `signals video tutorial <https://youtu.be/l0BkQxF7X3E>`_ 에서 "
"더 많은 정보를 보실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:53
msgid "Download and explore the start project"
msgstr "시작 프로젝트를 다운로드하고 탐구하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:55
msgid ""
"Download the Godot project: :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. It contains all the assets and scripts you need to "
"get started. Extract the .zip archive to get two folders: `start` and `end`."
msgstr ""
"Godot 프로젝트를 다운로드 하세요: :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. 시작할 모든 에셋과 스크립트가 포함되어 있습니다. ."
"zip 파일을 풀고 두 개의 폴더가 나옵니다: `start` 와 `end` 입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:58
msgid ""
"Load the ``start`` project in Godot. In the ``FileSystem`` dock, double "
"click on LevelMockup.tscn to open it. It's an RPG game's mockup where 2 "
"characters face each other. The pink enemy attacks and damages the green "
"square at regular time intervals, until its death. Feel free to try out the "
"game: the basic combat mechanics already work. But as the character isn't "
"connected to the life bar, the ``GUI`` doesn't do anything."
msgstr ""
"Godot에서 ``start`` 프로젝트를 불러옵니다. ``파일 시스템`` 독에서 "
"LevelMockup.tscn을 더블 클릭해서 엽니다. 이것은 두 캐릭터가 마주 보고 있는 "
"RPG 게임의 모형입니다. 분홍색 적이 일정하게 공격하고 초록색 사각형이 맞는 것"
"을 반복합니다, 죽을 때 까지 말이죠. 게임을 한번 해보세요: 기본 전투 구조는 이"
"미 작동합니다. 하지만 캐릭터가 체력 막대와 연결되어 있지 않기 때문에 ``GUI``"
"\\ 는 아무것도 하지 않습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:68
msgid ""
"This is typical of how you'd code a game: you implement the core gameplay "
"first, handle the player's death, and only then you'll add the interface. "
"That's because the UI listens to what's happening in the game. So it can't "
"work if other systems aren't in place yet. If you design the UI before you "
"prototype and test the gameplay, chances are it won't work well and you'll "
"have to re-create it from scratch."
msgstr ""
"이것은 게임을 코딩하는 일반적인 방법입니다: 먼저 핵심 게임 플레이를 구현합니"
"다, 그리고 플레이어의 사망을 다룹니다, 그런 뒤 인터페이스 만을 추가하는 것입"
"니다. UI는 게임에서 무엇이 일어나는지 듣기 때문입니다. 따라서 다른 시스템이 "
"제 자리를 잡지 못한다면 작동할 수 없습니다. 만일 게임 플레이를 테스트하지 않"
"은 채로 UI를 디자인 한다면, 잘 작동하지 않을 수 있으니 처음부터 다시 만들어"
"야 할 수도 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:71
msgid "The scene contains a background sprite, a GUI, and two characters."
msgstr "씬에는 배경 스프라이트, GUI, 그리고 두 캐릭터가 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:75
msgid "The scene tree, with the GUI scene set to display its children"
msgstr "GUI 씬이 자식으로 보이게 놓은 씬 트리"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:77
msgid ""
"The GUI scene encapsulates all of the game's Graphical User Interface. It "
"comes with a barebones script where we get the path to nodes that exist "
"inside the scene:"
msgstr ""
"GUI 씬은 게임 사용자 인터페이스 전체를 캡슐화 합니다. 씬 안에 존재하는 노드"
"의 경로를 얻는 스크립트와 함께 제공됩니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:105
msgid ""
"``number_label`` displays a life count as a number. It's a ``Label`` node"
msgstr "``number_label`` 은 체력을 숫자로 보여줍니다. ``Label`` 노드입니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:107
msgid "``bar`` is the life bar itself. It's a ``TextureProgress`` node"
msgstr "``bar`` 는 체력 막대입니다. ``TextureProgress`` 노드입니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:108
msgid ""
"``tween`` is a component-style node that can animate and control any value "
"or method from any other node"
msgstr ""
"``tween`` 은 다른 어떤 노드의 값이나 메서드를 제어하고 움직이게 할 수 있는 구"
"성 요소 스타일의 노드입니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:113
msgid ""
"The project uses a simple organisation that works for game jams and tiny "
"games."
msgstr ""
"프로젝트는 게임 잼이나 작은 게임을 위해 작업하는 간단한 조직화를 사용합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:115
msgid ""
"At the root of the project, in the `res://` folder, you will find the "
"`LevelMockup`. That's the main game scene and the one we will work with. All "
"the components that make up the game are in the `scenes/` folder. The "
"`assets/` folder contains the game sprites and the font for the HP counter. "
"In the `scripts/` folder you will find the enemy, the player, and the GUI "
"controller scripts."
msgstr ""
"프로젝트의 뿌리에서, `res://` 폴더에서, `LevelMockup` 을 찾으실 수 있습니다. "
"이것이 같이 작업할 메인 게임 씬입니다. 게임을 만들기 위한 모든 구성 요소는 "
"`scenes/` 폴더에 있습니다. `assets/` 폴더는 게임 스프라이트와 HP 카운터를 위"
"한 폰트가 들어있습니다. `scripts/` 폴더에서 적, 플레이어, 그리고 GUI 컨트롤"
"러 스크립트를 찾으실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:117
msgid ""
"Click the edit scene icon to the right of the node in the scene tree to open "
"the scene in the editor. You'll see the LifeBar and EnergyBar are sub-scenes "
"themselves."
msgstr ""
"에디터에서 씬 트리 오른쪽의 편집 씬 아이콘을 클릭해서 씬을 엽니다. LifeBar와 "
"EnergyBar 가 하위 씬으로 있는 것을 보실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:121
msgid "The scene tree, with the Player scene set to display its children"
msgstr "Player 씬이 자식으로 설정된 씬 트리"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:124
msgid "Set up the Lifebar with the Player's max\\_health"
msgstr "플레이어의 max\\_health로 Lifebar 설정하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:126
msgid ""
"We have to tell the GUI somehow what the player's current health is, to "
"update the lifebar's texture, and to display the remaining health in the HP "
"counter in the top left corner of the screen. To do this we send the "
"player's health to the GUI every time they take damage. The GUI will then "
"update the ``Lifebar`` and ``Number`` nodes with this value."
msgstr ""
"우리는 GUI가 플레이어의 현재 체력이 어떤지 알려주고, 체력 막대의 텍스쳐를 업"
"데이트하고, 화면 좌측 상단에서 HP 카운터가 남은 체력을 보여주어야 합니다. 그"
"러기 위해 우리는 플레이어가 피해를 입을 때마다 체력을 GUI로 보내야 합니다. "
"GUI는 ``Lifebar`` 와 ``Number`` 노드를 주어진 값으로 업데이트할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:132
msgid ""
"We could stop here to display the number, but we need to initialize the "
"bar's ``max_value`` for it to update in the right proportions. The first "
"step is thus to tell the ``GUI`` what the green character's ``max_health`` "
"is."
msgstr ""
"여기서 멈추고 숫자를 보여주러 갈 수 있지만, 그 전에 막대의 ``max_value`` 을 "
"초기화해야 정확한 크기로 업데이트할 수 있습니다. 그러므로 먼저 ``GUI`` 가 초"
"록색 캐릭터의 ``max_health`` 가 어느 정도인지 말해야 합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:139
msgid ""
"The bar, a `TextureProgress`, has a `max_value` of `100` by default. If you "
"don't need to display the character's health with a number, you don't need "
"to change its `max_value` property. You send a percentage from the `Player` "
"to the `GUI` instead:  `health / max_health * 100`."
msgstr ""
"`TextureProgress` 막대는 `100` 의 `max_value` 를  기본적으로 갖고 있습니다. "
"캐릭터의 체력을 숫자로 표시하지 않아도 된다면, 그것의 `max_value` 속성을 바"
"꿀 필요가 없습니다. 대신 `Player` 의 퍼센트를 `GUI` 로 보냅니다: `health / "
"max_health * 100`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:143
msgid ""
"Click the script icon to the right of the ``GUI`` in the Scene dock to open "
"its script. In the ``_ready`` function, we're going to store the "
"``Player``'s ``max_health`` in a new variable and use it to set the "
"``bar``'s ``max_value``:"
msgstr ""
"씬 독에서 ``GUI`` 오른쪽의 스크립트 아이콘을 클릭합니다. ``_ready`` 함수에"
"서, 우리는 ``Player`` 의 ``max_health`` 을 새 변수로 저장하고 그걸로 ``bar`` "
"의 ``max_value`` 를 설정합니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:164
msgid ""
"Let's break it down. ``$\"../Characters/Player\"`` is a shorthand that goes "
"one node up in the scene tree, and retrieves the ``Characters/Player`` node "
"from there. It gives us access to the node. The second part of the "
"statement, ``.max_health``, accesses the ``max_health`` on the Player node."
msgstr ""
"분석해봅시다. ``$\"../Characters/Player\"`` 는 씬 트리의 한 노드를 불러옵니"
"다, 그리고 ``Characters/Player`` 노드를 검색하는 속기입니다. 그것은 노드에게 "
"진입로를 제공합니다. 명령문의 두 번째 부분은, ``.max_health`` 로, Player 노드"
"에 ``max_health`` 를 액세스 합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:170
msgid ""
"The second line assigns this value to ``bar.max_value``. You could combine "
"the two lines into one, but we'll need to use ``player_max_health`` again "
"later in the tutorial."
msgstr ""
"두 번째 줄을 ``bar.max_value`` 의 값을 지정합니다.이 두 줄을 하나로 묶을 수"
"도 있습니다, 하지만  이 튜토리얼에서 ``player_max_health`` 를 나중에도 사용해"
"야 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:174
msgid ""
"``Player.gd`` sets the ``health`` to ``max_health`` at the start of the "
"game, so we could work with this. Why do we still use ``max_health``? There "
"are two reasons:"
msgstr ""
"``Player.gd`` 는 게임 시작 시 ``health`` 를 ``max_health`` 로 설정합니다, 따"
"라서 이것으로 작업할 수 있었습니다. 왜 여전히 ``max_health`` 를 사용하냐고"
"요? 두 가지 이유가 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:178
msgid ""
"We don't have the guarantee that ``health`` will always equal "
"``max_health``: a future version of the game may load a level where the "
"player already lost some health."
msgstr ""
"``health`` 가 항상 ``max_health`` 와 같다는 보장은 없습니다: 게임의 미래 버전"
"에서는 플레이어가 이미 체력을 잃은 채로 레벨을 불러올 지도 모릅니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:184
msgid ""
"When you open a scene in the game, Godot creates nodes one by one, following "
"the order in your Scene dock, from top to bottom. `GUI` and `Player` are not "
"part of the same node branch. To make sure they both exist when we access "
"each other, we have to use the `_ready` function. Godot calls `_ready` right "
"after it loaded all nodes, before the game starts. It's the perfect function "
"to set everything up and prepare the game session. Learn more about _ready: :"
"doc:`scripting_continued`"
msgstr ""
"게임에서 씬을 열 때,Godot는 씬 독에서 위에서 아래로, 순서에 따라, 하나 씩 노"
"드를 만들어 냅니다. `GUI` 와 `Player` 는 같은 노드 분기에 있지 않습니다. 실"
"행 시에 그들이 함께 있게 만들기 위해선, 우리는 `_ready` 함수를 사용해야 합니"
"다. Godot는 게임이 시작하기 전, 모든 노드를 불러온 후에 `_ready` 를 부릅니"
"다. 모든 것을 설정하고 게임 세션을 준비하기에 최고의 함수입니다. _ready 에 대"
"해서는 :doc:`scripting_continued` 를 참고하세요"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:188
msgid "Update health with a signal when the player takes a hit"
msgstr "플레이어가 피해를 입었을 때 시그널로 체력을 업데이트하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:190
msgid ""
"Our GUI is ready to receive the ``health`` value updates from the "
"``Player``. To achieve this we're going to use **signals**."
msgstr ""
"우리의 GUI는 ``Player`` 에서 ``health`` 을 받을 준비가 되었습니다. 그러기 위"
"해 우리는 **시그널(signals)** 을 사용합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:195
msgid ""
"There are many useful built-in signals like `enter_tree` and `exit_tree`, "
"that all nodes emit when they are respectively created and destroyed. You "
"can also create your own using the `signal` keyword. On the `Player` node, "
"you'll find two signals we created for you: `died` and `health_changed`."
msgstr ""
"많은 유용한 내장 시그널이 있습니다, `enter_tree` 와 `exit_tree` 는 모든 노드"
"가 각각 만들어지고 없어질 때 방출하는 것입니다. 또한 자신만의 `시그널` 키워드"
"를 만들어 사용할 수 있습니다. `Player` 노드에서 두 개의 시그널을 찾으실 수 있"
"습니다: `died` 와 `health_changed` 입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:197
msgid ""
"Why don't we directly get the ``Player`` node in the ``_process`` function "
"and look at the health value? Accessing nodes this way creates tight "
"coupling between them. If you did it sparingly it may work. As your game "
"grows bigger, you may have many more connections. If you get nodes this way "
"it gets complex quickly. Not only that: you need to listen to the state "
"change constantly in the ``_process`` function. This check happens 60 times "
"a second and you'll likely break the game because of the order in which the "
"code runs."
msgstr ""
"왜 ``_process`` 함수에서 ``Player`` 노드를 바로 가져오지 않고 체력 값을 보"
"죠? 그 방법으로 노드를 액세스 하는 것은 그들을 단단히 연결합니다. 그걸 원한다"
"면 작동은 할 것입니다. 게임이 커질 수록, 많은 연결을 갖게 될 것입니다. 그 방"
"법으로 노드를 가져오는 것은 복잡해질 것입니다. 그 뿐만이 아니라: 당신은 "
"``_process`` 함수에서 끊임없는 상태 변화를 들어야 합니다. 이 확인은 1초 당 60"
"회이고 코드의 작동 순서 때문에 게임이 꺼질 수도 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:206
msgid ""
"On a given frame you may look at another node's property *before* it was "
"updated: you get a value from the last frame. This leads to obscure bugs "
"that are hard to fix. On the other hand, a signal is emitted right after a "
"change happened. It **guarantees** you're getting a fresh piece of "
"information. And you will update the state of your connected node *right "
"after* the change happened."
msgstr ""
"특정 프레임에서 다른 노드의 속성을 업데이트 되기 *전인* 것을 볼 수 있습니다: "
"마지막 프레임에서 준 값을 가져옵니다. 이로 인해 수정하기 어려운 애매한 버그"
"가 발생합니다. 반면에, 시그널은 변화가 일어난 후에 바로 방출합니다. 당신이 깔"
"끔한 정보를 얻는다는 것을 **보증합니다** 그리고 연결한 노드의 상태가 변화가 "
"일어난 *바로 직후* 에 업데이트 될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:215
msgid ""
"The Observer pattern, that signals derive from, still adds a bit of coupling "
"between node branches. But it's generally lighter and more secure than "
"accessing nodes directly to communicate between two separate classes. It can "
"be okay for a parent node to get values from its children. But you'll want "
"to favor signals if you're working with two separate branches. Read Game "
"Programming Patterns for more information on the `Observer pattern <http://"
"gameprogrammingpatterns.com/observer.html>`_. The `full book <http://"
"gameprogrammingpatterns.com/contents.html>`_ is available online for free."
msgstr ""
"시그널이 파생된, 옵저버 패턴은, 여전히 노드 분기 간의 연결을 추가합니다. 하지"
"만 일반적으로 두 개의 분리된 클래스 사이를 연결하기 위해 직접 노드를 액세스 "
"하는 것보다 더 가볍고 더 안전합니다. 부모 노드가 자식 노드의 값을 가져올 수 "
"있습니다. 하지만 별도의 가지에서 이 작업을 한다면 시그널을 더 선호할 것입니"
"다. 더 많은 정보는 `Observer pattern <http://gameprogrammingpatterns.com/"
"observer.html>`_ 에서 Game Programming Patterns 를 읽어보세요. `전체 책 "
"<http://gameprogrammingpatterns.com/contents.html>`_ 은 온라인에서 무료로 이"
"용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:219
msgid ""
"With this in mind, let's connect the ``GUI`` to the ``Player``. Click on the "
"``Player`` node in the scene dock to select it. Head down to the Inspector "
"and click on the Node tab. This is the place to connect nodes to listen to "
"the one you selected."
msgstr ""
"이것을 염두해두고 ``GUI`` 를 ``Player``\\ 에 연결합시다. 씬 독에서 "
"``Player`` 노드를 클릭하여 선택합니다. 인스펙터에서 노드(Node) 탭을 클릭합니"
"다. 여기가 당신이 선택한 시그널을 받기 위해 노드를 연결하는 곳입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:224
msgid "The first section lists custom signals defined in ``Player.gd``:"
msgstr "첫 번째 섹션은 ``Player.gd`` 에 정의된 커스텀 시그널 목록입니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:226
msgid ""
"``died`` is emitted when the character died. We will use it in a moment to "
"hide the UI."
msgstr ""
"``died`` 는 캐릭터가 죽었을 때 방출합니다. 이것은 UI를 감추는 순간에 사용할 "
"것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:228
msgid "``health_changed`` is emitted when the character got hit."
msgstr "``health_changed`` 는 캐릭터가 피해를 입었을 때 방출됩니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:232
msgid "We're connecting to the health\\_changed signal"
msgstr "우리는  health\\_changed 시그널을 연결합니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:234
msgid ""
"Select ``health_changed`` and click on the Connect button in the bottom "
"right corner to open the Connect Signal window. On the left side you can "
"pick the node that will listen to this signal. Select the ``GUI`` node. The "
"right side of the screen lets you pack optional values with the signal. We "
"already took care of it in ``Player.gd``. In general I recommend not to add "
"too many arguments using this window as they're less convenient than doing "
"it from the code."
msgstr ""
"``health_changed`` 를 선택하고 오른쪽 아래 연결하기 버튼을 누르고 시그널 연"
"결 창을 엽니다. 왼쪽에서 이 시그널을 듣는 노드를 선택할 수 있습니다. ``GUI`` "
"노드를 선택합니다. 화면 오른쪽은 시그널과 함께 선택적인 값을 보낼 수 있습니"
"다. 우리는 이것을 이미 ``Player.gd`` 에서 다루었습니다. 일반적으로 저는 코딩"
"보다 덜 편리하므로 이 창으로 너무 많은 인수를 추가하지 않기를 권장합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:244
msgid "The Connect Signal window with the GUI node selected"
msgstr "GUI 노드가 선택된 시그널 연결 창"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:248
msgid ""
"You can optionally connect nodes from the code. However doing it from the "
"editor has two advantages:"
msgstr ""
"선택적으로 코드로부터 노드를 연결할 수 있습니다. 하지만 에디터로 하면 두 가"
"지 이점이 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:250
msgid "Godot can write new callback functions for you in the connected script"
msgstr "Godot는 연결된 스크립트에서 새 콜백 함수를 쓸 수 있습니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:251
msgid ""
"An emitter icon appears next to the node that emits the signal in the Scene "
"dock"
msgstr "씬 독에서 시그널을 방출하는 노드 옆에 방출 아이콘이 나타납니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:253
msgid ""
"At the bottom of the window you will find the path to the node you selected. "
"We're interested in the second row called \"Method in Node\". This is the "
"method on the ``GUI`` node that gets called when the signal is emitted. This "
"method receives the values sent with the signal and lets you process them. "
"If you look to the right, there is a \"Make Function\" radio button that is "
"on by default. Click the connect button at the bottom of the window. Godot "
"creates the method inside the ``GUI`` node. The script editor opens with the "
"cursor inside a new ``_on_Player_health_changed`` function."
msgstr ""
"창의 아래에 당신이 선택한 노드의 경로를 찾으실 수 있습니다. 우리는 \"Method "
"in Node\"라 부르는 두 번째 줄에 관심을 둘 겁니다. 이것은 ``GUI`` 노드에서 시"
"그널이 방출될 때 호출되는 메서드 입니다. 이 메서드는 시그널과 함께 전송된 값"
"을 받아 처리합니다. 오른쪽을 보시면, \"함수 만들기\" 버튼이 기본적으로 켜진 "
"채로 있습니다. 창 아래의 연결 버튼을 누릅니다. Godot는 ``GUI`` 노드 안에 메서"
"드를 만듭니다. 스크립트 에디터를 열면 새로운 ``_on_Player_health_changed`` 함"
"수가 안에 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:265
msgid ""
"When you connect nodes from the editor, Godot generates a method name with "
"the following pattern: ``_on_EmitterName_signal_name``. If you wrote the "
"method already, the \"Make Function\" option will keep it. You may replace "
"the name with anything you'd like."
msgstr ""
"에디터에서 노드를 연결할 때, Godot는 메서드 이름을 다음과 같은 방식으로 만듭"
"니다: ``_on_방출하는노드이름_시그널_이름``. 이미 메서드를 적었다면, \"함수 만"
"들기\" 설정은 유지될 것입니다. 당신이 원하는 어떤 이름으로도 바꿀 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:272
msgid "Godot writes the callback method for you and takes you to it"
msgstr "Godot는 콜백 메서드를 적어 사용자에게 전달합니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:274
msgid ""
"Inside the parentheses after the function name, add a ``player_health`` "
"argument. When the player emits the ``health_changed`` signal, it will send "
"its current ``health`` alongside it. Your code should look like:"
msgstr ""
"함수 이름 다음의 괄호 안에, ``player_health`` 인수를 추가하세요. 플레이어가 "
"``health_changed`` 시그널을 방출할 때, 현재 ``health``\\ 와 함께 보내질 것입"
"니다. 코드는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:292
msgid ""
"The engine does not convert PascalCase to snake_case, for C# examples we'll "
"be using PascalCase for method names & camelCase for method parameters, "
"which follows the official `C# naming conventions. <https://docs.microsoft."
"com/en-us/dotnet/standard/design-guidelines/capitalization-conventions>`_"
msgstr ""
"엔진은 파스칼 표기법(PascalCase)을 스네이크 표기법(snake_case)으로 변환하지 "
"않기 때문에, C# 예제에서 메서드 이름에는 파스칼 표기법, 메서드 매개 변수에는 "
"카멜 표기법(camelCase)을 사용할 것입니다, 공식 `C# 명명 규칙. <https://docs."
"microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-"
"conventions>`_에 따르는 것입니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:299
msgid ""
"In Player.gd, when the Player emits the health\\_changed signal, it also "
"sends its health value"
msgstr ""
"Player.gd에서, Player가 health\\_changed 시그널을 방출할 때, 체력 값도 보냅니"
"다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:302
msgid ""
"Inside ``_on_Player_health_changed``, let's call a second function called "
"``update_health`` and pass it the ``player_health`` variable."
msgstr ""
"``_on_Player_health_changed`` 안에서, ``update_health`` 라는 두 번째 함수를 "
"호출하고 거기에 ``player_health`` 변수를 전달하게 해봅시다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:307
msgid ""
"We could directly update the health value on `LifeBar` and `Number`. There "
"are two reasons to use this method instead:"
msgstr ""
"우리는 체력 값을 `LifeBar` 와 `Number` 에 직접 업데이트할 수 있습니다. 메서드"
"를 대신 사용하는 이유는 두 가지 입니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:309
msgid ""
"The name makes it clear for our future selves and teammates that when the "
"player took damage, we update the health count on the GUI"
msgstr ""
"플레이어가 피해를 입을 때, 이름은 체력 카운터를 업데이트 해야 하는 미래의 나"
"와 팀원에게 그것을 명확하게 해줍니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:310
msgid "We will reuse this method a bit later"
msgstr "이 메서드를 나중에 다시 사용할 것입니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:312
msgid ""
"Create a new ``update_health`` method below ``_on_Player_health_changed``. "
"It takes a new\\_value as its only argument:"
msgstr ""
"새로운 ``update_health`` 메서드를 ``_on_Player_health_changed`` 아래에 만듭니"
"다.  new\\_value를 유일한 인수로 갖습니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:327
msgid "This method needs to:"
msgstr "이 메서드에는 필요합니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:329
msgid ""
"set the ``Number`` node's ``text`` to ``new_value`` converted to a string"
msgstr ""
"``Number`` 노드의 ``text`` 를 문자열로 변환된 ``new_value`` 로 설정하는 것"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:331
msgid "set the ``TextureProgress``'s ``value`` to ``new_value``"
msgstr "``TextureProgress`` 의 ``value`` 를 ``new_value`` 로 설정하는 것"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:350
msgid ""
"``str`` is a built-in function that converts about any value to text. "
"``Number``'s ``text`` property requires a string, so we can't assign it to "
"``new_value`` directly"
msgstr ""
"``str``\\ 은 내장 함수로 어느 값을 문자로 변환합니다. ``Number``\\ 의 "
"``text`` 속성은 문자열을 요구하기 때문에 ``new_value``\\ 를 직접 지정할 수 없"
"습니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:354
msgid ""
"Also call ``update_health`` at the end of the ``_ready`` function to "
"initialize the ``Number`` node's ``text`` with the right value at the start "
"of the game. Press F5 to test the game: the life bar updates with every "
"attack!"
msgstr ""
"또한 ``update_health`` 를 ``_ready`` 함수의 마지막에 호출하여 게임의 시작에"
"서 ``Number`` 노드의 ``text``  를 적당한 값으로 초기화합니다. F5를 누르면 게"
"임을 테스트합니다: 체력 막대가 매 공격마다 업데이트 됩니다!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:361
msgid ""
"Both the Number node and the TextureProgress update when the Player takes a "
"hit"
msgstr ""
"Player가 피해를 입을 때 Number 노드와 TextureProgress가 둘 다 업데이트합니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:365
msgid "Animate the loss of life with the Tween node"
msgstr "Tween 노드로 체력이 감소하는 것을 애니메이트하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:367
msgid ""
"Our interface is functional, but it could use some animation. That's a good "
"opportunity to introduce the ``Tween`` node, an essential tool to animate "
"properties. ``Tween`` animates anything you'd like from a start to an end "
"state over a certain duration. For example, it can animate the health on the "
"``TextureProgress`` from its current level to the ``Player``'s new "
"``health`` when the character takes damage."
msgstr ""
"인터페이스는 작동하지만, 몇 가지 애니메이션을 사용할 수 있습니다. 지금이 속성"
"을 애니메이트 하는데 필수적인 도구, ``Tween`` 노드를 소개하기에 좋은 순간이네"
"요. ``Tween``\\ 은 어떤 것이든 처음부터 끝을 일정 기간 동안 애니메이트 합니"
"다. 예를 들어 캐릭터가 피해를 입을 때  ``Player``\\ 의 현재 새로운 ``health``"
"\\ 로 ``TextureProgress``\\ 에서 체력을 애니메이트 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:374
msgid ""
"The ``GUI`` scene already contains a ``Tween`` child node stored in the "
"``tween`` variable. Let's now use it. We have to make some changes to "
"``update_health``."
msgstr ""
"``GUI`` 씬에는 이미 ``tween`` 변수가 저장된 ``Tween`` 노드 갖고 있습니다. 이"
"제 사용할 때입니다. 우리는 ``update_health`` 에 몇 가지 변화를 주어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:378
msgid ""
"We will use the ``Tween`` node's ``interpolate_property`` method. It takes "
"seven arguments:"
msgstr ""
"``Tween`` 노드의 ``interpolate_property`` 메서드를 사용할 겁니다. 그것은 일"
"곱 개의 인수들을 가집니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:381
msgid "A reference to the node who owns the property to animate"
msgstr "애니메이트 할 속성을 소유한 노드에 대한 참조"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:382
msgid "The property's identifier as a string"
msgstr "속성 식별자의 문자열"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:383
msgid "The starting value"
msgstr "시작 값"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:384
msgid "The end value"
msgstr "끝 값"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:385
msgid "The animation's duration in seconds"
msgstr "애니메이션의 지속 시간 (초)"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:386
msgid "The type of the transition"
msgstr "전환(transition) 유형"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:387
msgid "The easing to use in combination with the equation."
msgstr "방정식과 함께 사용하는 완화."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:389
msgid ""
"The last two arguments combined correspond to an easing equation. This "
"controls how the value evolves from the start to the end point."
msgstr ""
"마지막 두 인수들은 완화 식(easing equation)으로 동등하게 묶입니다. 이것은 시"
"작에서 끝까지 값이 얼마나 증가하는 지를 제어합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:393
msgid ""
"Click the script icon next to the ``GUI`` node to open it again. The "
"``Number`` node needs text to update itself, and the ``Bar`` needs a float "
"or an integer. We can use ``interpolate_property`` to animate a number, but "
"not to animate text directly. We're going to use it to animate a new ``GUI`` "
"variable named ``animated_health``."
msgstr ""
"``GUI`` 노드 옆에 스크립트 아이콘을 클릭해서 다시 엽니다. ``Number`` 노드는 "
"스스로 업데이트하는 텍스트가 필요합니다, 그리고 ``Bar`` 는 실수 또는 정수가 "
"필요합니다. 우리는 ``interpolate_property`` 를 사용해서 숫자를 애니메이트 할 "
"것입니다, 텍스트에 직접 하진 않을 겁니다. 우리는 이것을 ``animated_health`` "
"라는 새로운 ``GUI`` 변수를 애니메이트 하는데 이용할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:399
msgid ""
"At the top of the script, define a new variable, name it "
"``animated_health``, and set its value to 0. Navigate back to the "
"``update_health`` method and clear its content. Let's animate the "
"``animated_health`` value. Call the ``Tween`` node's "
"``interpolate_property`` method:"
msgstr ""
"스크립트 맨 위에서, 새 변수를 정의합니다, 이름은 ``animated_health`` 입니다, "
"그리고 값을 0으로 설정합니다. 다시 ``update_health`` 메서드로 돌아와서 내용물"
"을 지웁니다. ``animated_health`` 값을 애니메이트 해 봅시다. ``Tween`` 노드의 "
"``interpolate_property`` 메서드를 호출합니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:421
msgid "Let's break down the call:"
msgstr "호출한 것을 파헤쳐 봅시다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:427
msgid ""
"We target ``animated_health`` on ``self``, that is to say the ``GUI`` node. "
"``Tween``'s interpolate\\_property takes the property's name as a string. "
"That's why we write it as ``\"animated_health\"``."
msgstr ""
"``animated_health`` 를, ``self`` 에, 즉 ``GUI`` 노드를 타깃으로 합니다. "
"``Tween`` 의 interpolate\\_property는 속성의 이름을 문자열로 가져옵니다. 이것"
"이 우리가 ``\"animated_health\"`` 로 쓴 이유입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:435
msgid ""
"The starting point is the current value the bar's at. We still have to code "
"this part, but it's going to be ``animated_health``. The end point of the "
"animation is the ``Player``'s ``health`` after the ``health_changed``: "
"that's ``new_value``. And ``0.6`` is the animation's duration in seconds."
msgstr ""
"시작 점은 막대의 현재 값입니다. 이 부분도 코딩을 해야 하지만, 곧 "
"``animated_health`` 가 될 것입니다. 애니메이션의 끝 점은 ``health_changed` 이"
"후의 ``Player`` 의 ``health`` 가 됩니다: 즉, ``new_value`` 입니다. 그리고 "
"``0.6`` 은 애니메이션의 지속 시간입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:445
msgid ""
"The last two arguments are constants from the ``Tween`` class. "
"``TRANS_LINEAR`` means the animation should be linear. ``EASE_IN`` doesn't "
"do anything with a linear transition, but we must provide this last argument "
"or we'll get an error."
msgstr ""
"마지막 두 인수는 ``Tween`` 클래스의 상수입니다. ``TRANS_LINEAR`` 는 애니메이"
"션이 선형적인 것을 의미합니다. ``EASE_IN`` 선형 변환에선 아무것도 하지 않지"
"만, 꼭 이 마지막 인수를 채워야 에러가 나지 않습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:450
msgid ""
"The animation will not play until we activated the ``Tween`` node with "
"``tween.start()``. We only have to do this once if the node is not active. "
"Add this code after the last line:"
msgstr ""
"애니메이션은 ``Tween`` 노드가 ``tween.start()`` 로 활성화되기 전 까지 재생되"
"지 않습니다. 노드가 활성화되어있지 않으면 이 작업만 하면 됩니다. 이 코드를 마"
"지막 줄 이후에 추가하세요:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:469
msgid ""
"Although we could animate the `health` property on the `Player`, we "
"shouldn't. Characters should lose life instantly when they get hit. It makes "
"it a lot easier to manage their state, like to know when one died. You "
"always want to store animations in a separate data container or node. The "
"`tween` node is perfect for code-controlled animations. For hand-made "
"animations, check out `AnimationPlayer`."
msgstr ""
"비록 `Player` 에서 `health` 속성을 애니메이트 할 수 있을지라도, 그렇게 해서"
"는 안 됩니다. 캐릭터는 피해를 입었을 때 즉시 체력이 줄어야 합니다. 한 명이 언"
"제 죽었는 지 알 수 있는 것처럼, 이 방식이 그들의 상태를 다루기에 훨씬 더 쉽습"
"니다. 당신은 애니메이션이 항상 분리된 데이터 컨테이너나 노드에 있기를 원합니"
"다. `tween` 노드는 코드로 제어되는 애니메이션에 완벽합니다. 수제 애니메이션"
"은, `AnimationPlayer` 를 확인하세요."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:472
msgid "Assign the animated\\_health to the LifeBar"
msgstr "animated\\_health를 LifeBar에 지정하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:474
msgid ""
"Now the ``animated_health`` variable animates but we don't update the actual "
"``Bar`` and ``Number`` nodes anymore. Let's fix this."
msgstr ""
"이제 ``animated_health`` 변수가 애니메이트 하지만 실제 ``Bar`` 와 ``Number`` "
"노드는 더 이상 업데이트 할 수 없습니다. 이것을 고칩시다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:477
msgid "So far, the update\\_health method looks like this:"
msgstr "지금까지, update\\_health 메서드는 이렇게 보입니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:501
msgid ""
"In this specific case, because ``number_label`` takes text, we need to use "
"the ``_process`` method to animate it. Let's now update the ``Number`` and "
"``TextureProgress`` nodes like before, inside of ``_process``:"
msgstr ""
"특정한 경우에서, ``number_label`` 이 텍스트를 차지하기 때문에, 우리는 "
"``_process`` 메서드로 그것을 애니메이트 해야 합니다. 이제 ``_process` 안에 "
"``Number`` 와 ``TextureProgress`` 노드를 전과 같이 업데이트 합시다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:523
msgid ""
"`number_label` and `bar` are variables that store references to the `Number` "
"and `TextureProgress` nodes."
msgstr ""
"`number_label` 과 `bar` 는 `Number` 와 `TextureProgress` 노드에 참조로 저장"
"된 변수들입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:525
msgid ""
"Play the game to see the bar animate smoothly. But the text displays decimal "
"number and looks like a mess. And considering the style of the game, it'd be "
"nice for the life bar to animate in a choppier fashion."
msgstr ""
"게임을 실행하시면 막대가 부드럽게 애니메이트 하는 것을 보실 수 있습니다. 하지"
"만 텍스트는 소수 숫자로 보여지고 난잡해 보입니다. 그리고 게임의 스타일을 고려"
"해서, 체력 막대가 더 멋진 방식으로 움직이면 좋을 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:531
msgid "The animation is smooth, but the number is broken"
msgstr "애니메이션은 부드럽지만 숫자는 망가졌습니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:533
msgid ""
"We can fix both problems by rounding out ``animated_health``. Use a local "
"variable named ``round_value`` to store the rounded ``animated_health``. "
"Then assign it to ``number_label.text`` and ``bar.value``:"
msgstr ""
"``animated_health`` 를 반올림해서 이 문제들을 동시에 해결할 수 있습니다. "
"``round_value`` 라는 지역 변수를 사용해서 반올림 된 ``animated_health`` 를 저"
"장합니다. 그런 뒤 그것을 ``number_label.text`` 와 ``bar.value`` 에 지정합니"
"다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:555
msgid "Try the game again to see a nice blocky animation."
msgstr "게임을 다시 실행하면 멋진 블록 애니메이션을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:559
msgid "By rounding out animated\\_health, we kill two birds with one stone"
msgstr "animated\\_health를 반올림 해서 일석이조의 효과를 냈습니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:563
msgid ""
"Every time the player takes a hit, the ``GUI`` calls "
"``_on_Player_health_changed``, which in turn calls ``update_health``. This "
"updates the animation and the ``number_label`` and ``bar`` follow in "
"``_process``. The animated life bar that shows the health going down "
"gradually is a trick. It makes the GUI feel alive. If the ``Player`` takes 3 "
"damage, it happens in an instant."
msgstr ""
"매 시간 플레이어가 피해를 입을 때, ``GUI`` 는 ``_on_Player_health_changed`` "
"를 호출합니다, 그리고 그것은 ``update_health`` 를 호출합니다. 이것은 애니메이"
"션을 업데이트 하고 ``number_label`` 과 ``bar`` 가 ``_process`` 에서 따라옵니"
"다. 체력이 점차 줄어드는 애니메이트 된 체력 막대는 트릭입니다. 그것은 GUI가 "
"살아있는 것처럼 느끼도록 만듭니다. ``Player`` 가 3 데미지를 입으면, 즉각적으"
"로 발생합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:571
msgid "Fade the bar when the Player dies"
msgstr "Player가 죽을 때 막대가 사라지게 하기"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:573
msgid ""
"When the green character dies, it plays a death animation and fades out. At "
"this point, we shouldn't show the interface anymore. Let's fade the bar as "
"well when the character died. We will reuse the same ``Tween`` node as it "
"manages multiple animations in parallel for us."
msgstr ""
"초록색 캐릭터가 죽을 때, 죽음 애니메이션을 재생하고 사라집니다. 이 점에서, 우"
"리는 인터페이스를 더 이상 표시해서는 안됩니다. 캐릭터가 죽을 때 처럼 막대를 "
"사라지게 해봅시다. 우리는 ``Tween`` 노드가 여러 애니메이션을 동시에 관리하므"
"로 같은 노드를 다시 사용할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:578
msgid ""
"First, the ``GUI`` needs to connect to the ``Player``'s ``died`` signal to "
"know when it died. Press :kbd:`F1` to jump back to the 2D Workspace. Select "
"the ``Player`` node in the Scene dock and click on the Node tab next to the "
"Inspector."
msgstr ""
"먼저, ``GUI`` 는 ``Player`` 의 ``died`` 시그널에 연결해서 언제 죽었는 지를 알"
"아야 합니다. :kbd:`F1` 키를 눌러 2D 작업 공간으로 돌아갑니다. 씬 독에서 "
"``Player`` 노드를 선택하고 인스펙터 옆의 노드 탭을 클릭합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:583
msgid "Find the ``died`` signal, select it, and click the Connect button."
msgstr "``died`` 시그널을 찾아서, 선택하고, 연결하기 버튼을 누릅니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:587
msgid "The signal should already have the Enemy connected to it"
msgstr "시그널에는 이미 Enemy와 연결되어 있어야 합니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:589
msgid ""
"In the Connecting Signal window, connect to the ``GUI`` node again. The Path "
"to Node should be ``../../GUI`` and the Method in Node should show "
"``_on_Player_died``. Leave the Make Function option on and click Connect at "
"the bottom of the window. This will take you to the ``GUI.gd`` file in the "
"Script Workspace."
msgstr ""
"시그널 연결 창에서, ``GUI`` 노드를 다시 연결합니다. 노드 경로는 ``../../"
"GUI`` 가 되어야 하고 Method in Node는 ``_on_Player_died`` 가 되어야 합니다. "
"함수 만들기 설정을 둔 채로 창 아래 연결 버튼을 누릅니다. 이걸로 Script 작업 "
"공간에서 ``GUI.gd`` 파일로 진입하게 됩니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:597
msgid "You should get these values in the Connecting Signal window"
msgstr "시그널 연결 창에서 이 값들을 받아야 합니다"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:601
msgid ""
"You should see a pattern by now: every time the GUI needs a new piece of "
"information, we emit a new signal. Use them wisely: the more connections you "
"add, the harder they are to track."
msgstr ""
"지금부터는 패턴을 보아야 합니다: 매 순간 GUI가 새로운 정보가 필요하면, 우리"
"는 새 시그널을 방출합니다. 그들을 현명하게 사용하세요: 더 많은 연결을 추가할"
"수록, 추적하는 일은 더 어려워집니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:603
msgid ""
"To animate a fade on a UI element, we have to use its ``modulate`` property. "
"``modulate`` is a ``Color`` that multiplies the colors of our textures."
msgstr ""
"UI 요소가 사라지도록 애니메이트 하기 위해, 우리는 그것의 ``modulate`` 속성을 "
"사용해야 합니다. ``modulate`` 는 ``Color`` 로 텍스쳐의 색상을 곱합니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:609
msgid ""
"`modulate` comes from the `CanvasItem` class, All 2D and UI nodes inherit "
"from it. It lets you toggle the visibility of the node, assign a shader to "
"it, and modify it using a color with `modulate`."
msgstr ""
"`modulate` 는 `CanvasItem` 클래스에서 나옵니다. 모든 2D와 UI  노드는 여기에 "
"상속됩니다. 이것은 노드의 가시성을 켜고 끌 수 있고, 셰이더를 지정하고, "
"`modulate` 에서 색상을 사용하여 수정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:611
msgid ""
"``modulate`` takes a ``Color`` value with 4 channels: red, green, blue and "
"alpha. If we darken any of the first three channels it darkens the "
"interface. If we lower the alpha channel, our interface fades out."
msgstr ""
"``modulate``\\ 는 4개의 채널로 ``Color`` 값을 갖습니다: 빨강, 초록, 파랑, 그"
"리고 알파입니다. 처음 세 개의 채널들 중 하나를 어둡게 하면 그것은 인터페이스"
"에서 어두워집니다. 알파 채널을 낮추면 인터페이스는 희미해집니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:615
msgid ""
"We're going to tween between two color values: from a white with an alpha of "
"``1``, that is to say at full opacity, to a pure white with an alpha value "
"of ``0``, completely transparent. Let's add two variables at the top of the "
"``_on_Player_died`` method and name them ``start_color`` and ``end_color``. "
"Use the ``Color()`` constructor to build two ``Color`` values."
msgstr ""
"우리는 두 색상 값을 tween할 것입니다: 완전한 불투명을 의미하는, 흰색이고 "
"``1`` 의 알파 값에서, 완전한 투명을 의미하는, 흰색이지만 ``0`` 의 알파 값까"
"지 입니다. 두 변수를 ``_on_Player_died`` 메서드에 추가하고 이 둘을 각각 "
"``start_color`` 과 ``end_color`` 라고 이름짓습니다. ``Color()`` 생성자"
"(constructor)를 사용해서 두 ``Color`` 값을 만듭니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:637
msgid ""
"``Color(1.0, 1.0, 1.0)`` corresponds to white. The fourth argument, "
"respectively ``1.0`` and ``0.0`` in ``start_color`` and ``end_color``, is "
"the alpha channel."
msgstr ""
"``Color(1.0, 1.0, 1.0)`` 는 흰색과 같습니다. 네 번째 인수는, ``start_color`` "
"와 ``end_color`` 에서 각각 ``1.0`` 과 ``0.0`` 인, 알파 채널입니다."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:641
msgid ""
"We then have to call the ``interpolate_property`` method of the ``Tween`` "
"node again:"
msgstr ""
"우리는 ``Tween`` 노드의 ``interpolate_property`` 메서드를 다시 호출해야 합니"
"다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:654
msgid ""
"This time, we change the ``modulate`` property and have it animate from "
"``start_color`` to the ``end_color``. The duration is of one second, with a "
"linear transition. Here again, because the transition is linear, the easing "
"does not matter. Here's the complete ``_on_Player_died`` method:"
msgstr ""
"이번엔 ``modulate`` 속성을 바꾸고 그것이 ``start_color``\\ 에서 ``end_color``"
"\\ 로 애니메이트 해야 합니다. 지속 시간은 1초로 선형 전환입니다. 다시 말하지"
"만, 전환이 선형이기 때문에 완화는 아무 문제가 없습니다. 이것이 완전한 "
"``_on_Player_died`` 메서드 입니다:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:679
msgid "And that is it. You may now play the game to see the final result!"
msgstr "그리고 됬습니다. 이제 게임을 실행해서 최종 결과물을 봅시다!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:683
msgid "The final result. Congratulations for getting there!"
msgstr "최종 결과물. 여기까지 오신 것에 축하합니다!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:687
msgid ""
"Using the exact same techniques, you can change the color of the bar when "
"the Player gets poisoned, turn the bar red when its health drops low, shake "
"the UI when they take a critical hit... the principle is the same: emit a "
"signal to forward the information from the `Player` to the `GUI` and let the "
"`GUI` process it."
msgstr ""
"똑같은 기법을 사용해서, Player가 독에 걸렸을 때 막대의 색상을 바꿀 수 있고, "
"체력이 천천히 줄어들 때 막대가 붉게 바뀌거나, 크리티컬 피해를 입을 때 UI가 흔"
"들리게 하거나... 원리는 같습니다: `Player` 의 정보를 `GUI` 로 보내고 `GUI` "
"가 이를 처리하는 시그널을 방출합니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:4
msgid "Splash screen"
msgstr "스플래시 화면"

#: ../../docs/getting_started/step_by_step/splash_screen.rst:7
msgid "Tutorial"
msgstr "튜토리얼"

#: ../../docs/getting_started/step_by_step/splash_screen.rst:9
msgid ""
"This is a simple tutorial to establish the basic idea of how the GUI "
"subsystem works. The goal is to create a simple, static splash screen."
msgstr ""
"이것은 어떻게 GUI 서브 시스템이 작동하는 지에 대한 기본 생각을 세우는 간단한 "
"튜토리얼입니다. 목표는 간단한, 정적인 스플래시 화면을 만드는 것입니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:15
msgid ""
"Following is a file with the assets that will be used. The extracted files "
"can be placed directly in your project folder and Godot will import them "
"automatically."
msgstr ""
"다음은 우리가 사용할 파일과 에셋입니다. 추출된 파일을 직접 프로젝트 폴더에 놓"
"으면 Godot가 자동으로 가져올 것입니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:18
msgid ":download:`robisplash_assets.zip <files/robisplash_assets.zip>`."
msgstr ":download:`robisplash_assets.zip <files/robisplash_assets.zip>`."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:21
#: ../../docs/tutorials/3d/reflection_probes.rst:21
#: ../../docs/tutorials/3d/gi_probes.rst:32
#: ../../docs/tutorials/3d/baked_lightmaps.rst:40
#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:16
msgid "Setting up"
msgstr "설정하기"

#: ../../docs/getting_started/step_by_step/splash_screen.rst:23
msgid ""
"Set the display resolution to 800x450 in Project Settings, and set up a new "
"scene like this:"
msgstr ""
"프로젝트 설정에서 화면 비율을 800X450으로 설정하세요, 그리고 새 씬을 다음과 "
"같이 설정하세요:"

#: ../../docs/getting_started/step_by_step/splash_screen.rst:27
msgid ""
"The nodes \"background\" and \"logo\" are of :ref:`TextureRect "
"<class_TextureRect>` type. To display an image, drag the corresponding asset "
"to the texture property."
msgstr ""
"\"background\"와 \"logo\" 노드는 :ref:`TextureRect <class_TextureRect>` 타입 "
"입니다. 이미지를 보이기 위해, 해당하는 에셋을 텍스쳐 속성으로 끌어옵니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:32
msgid ""
"The node \"start\" is a :ref:`TextureButton <class_TextureButton>`. It takes "
"several images for different states, but only the normal and pressed will be "
"supplied in this example:"
msgstr ""
"\"start\" 노드는 :ref:`TextureButton <class_TextureButton>` 입니다. 각기 다"
"른 상태에 따라 여러 이미지를 가질 수 있지만, 이 예제에서는 normal과 pressed"
"만 갖습니다:"

#: ../../docs/getting_started/step_by_step/splash_screen.rst:38
msgid "Finally, the node \"copyright\" is a :ref:`Label <class_Label>`."
msgstr "마지막으로 \"copyright\" 노드는 :ref:`Label <class_Label>` 입니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:40
msgid "Your final scene should look something like this."
msgstr "당신의 최종 씬은 이렇게 보여야 할 것입니다."

#: ../../docs/getting_started/step_by_step/splash_screen.rst:44
msgid ""
"Go ahead and run the project.  If you're satisfied with the results, "
"continue to the next tutorial."
msgstr ""
"프로젝트를 실행합시다. 결과물에 만족한다면, 다음 튜토리얼을 계속 진행합니다."

#: ../../docs/getting_started/step_by_step/animations.rst:4
msgid "Animations"
msgstr "애니메이션(Animations)"

#: ../../docs/getting_started/step_by_step/animations.rst:9
msgid "Godot's animation system is extremely powerful and flexible."
msgstr "Godot의 애니메이션 시스템은 매우 강력하고 유연합니다."

#: ../../docs/getting_started/step_by_step/animations.rst:11
msgid ""
"To begin, let's use the scene from the previous tutorial (:ref:"
"`doc_splash_screen`). The goal is to add a \"fade-in\" animation to the "
"splash image. Here's a copy just in case: :download:`robisplash.zip <files/"
"robisplash.zip>`."
msgstr ""
"시작하기 위해, 우리는 지난 튜토리얼의 씬을 사용할 것입니다 (:ref:"
"`doc_splash_screen`). 목표는 \"희미해지는\" 애니메이션을 스플래시 이미지에 추"
"가하는 것입니다. 혹시나 해서 여기 복사본이 있습니다:  :download:`robisplash."
"zip <files/robisplash.zip>`."

#: ../../docs/getting_started/step_by_step/animations.rst:16
msgid "Add an animation player"
msgstr "애니메이션 플레이어 추가하기"

#: ../../docs/getting_started/step_by_step/animations.rst:18
msgid ""
"First of all, add an :ref:`AnimationPlayer <class_AnimationPlayer>` node to "
"the scene as a child of \"background\" (the root node):"
msgstr ""
"먼저,  :ref:`AnimationPlayer <class_AnimationPlayer>` 노드를 \"background"
"\" (루트 노드) 의 자식으로 추가합니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:23
msgid ""
"When a node of this type is selected, the animation editor panel will appear:"
msgstr "이 타입의 노드가 선택될 때, 애니메이션 에디터 패널이 나타날 것입니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:28
msgid "The animation editor panel stays visible until manually hidden."
msgstr "애니메이션 에디터 패널은 수동으로 숨기지 않는 이상 표시됩니다."

#: ../../docs/getting_started/step_by_step/animations.rst:31
msgid "Creating the animation"
msgstr "애니메이션 만들기"

#: ../../docs/getting_started/step_by_step/animations.rst:33
msgid ""
"It's time to create a new animation! Press the new animation button and name "
"the animation \"intro\" when the dialog appears."
msgstr ""
"새 애니메이션을 만들 시간입니다! 새로운 애니메이션 버튼을 누르고 대화 상자가 "
"뜨면 애니메이션 이름을 \"intro\" 라고 적습니다."

#: ../../docs/getting_started/step_by_step/animations.rst:38
msgid ""
"Now that we have an animation, the property editor enters \"animation editing"
"\" mode. In this mode, a key icon appears next to every property of the "
"property editor. In Godot, any property of an object can be animated:"
msgstr ""
"이제 애니메이션이 있으므로 속성 에디터는 \"애니메이션 편집\" 모드로 들어갑니"
"다. 이 모드에서, 속성 에디터의 모든 속성에 키 아이콘이 나타납니다. Godot에서"
"는 대상의 어떤 속성도 애니메이트 할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:46
msgid "Editing the animation"
msgstr "애니메이션 편집하기"

#: ../../docs/getting_started/step_by_step/animations.rst:48
msgid "The logo will appear from the top of the screen."
msgstr "로고는 화면의 위에서 나타날 것입니다."

#: ../../docs/getting_started/step_by_step/animations.rst:50
msgid ""
"With the animation editor panel open, select the \"logo\" node and set the "
"\"Rect / Position\" property to ``(118, -400)`` and press the key button "
"next to the property:"
msgstr ""
"애니메이션 패널을 열고, \"logo\" 노드를 선택하고 \"Rect / Position\" 속성을 "
"``(118, -400)`` 으로 설정합니다, 그리고 속성 옆의 키 버튼을 클릭합니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:56
msgid "When the dialog appears, confirm that you are creating a new track."
msgstr "대화 상자가 나타나면, 새 트랙을 만들겠다고 확인합니다."

#: ../../docs/getting_started/step_by_step/animations.rst:58
msgid "The keyframe will be added in the animation player editor:"
msgstr "키프레임이 애니메이션 플레이어 에디터에 나타날 것입니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:62
msgid "Move the editor cursor to the end by clicking here:"
msgstr "여기를 클릭해서 에디터 커서를 끝으로 움직입니다:"

#: ../../docs/getting_started/step_by_step/animations.rst:66
msgid ""
"Change the logo position to ``(118, 0)`` and add a keyframe again. With two "
"keyframes, the animation happens."
msgstr ""
"로고 위치를 ``(118, 0)`` 으로 바꾸고 다시 키프레임을 추가합니다. 두 키프레임"
"으로, 애니메이션이 발생합니다."

#: ../../docs/getting_started/step_by_step/animations.rst:71
msgid ""
"Pressing \"Play selected animation from start. (Shift-D)\" on the animation "
"panel will make the logo descend."
msgstr ""
"애니메이션 패널에서 \"선택된 애니메이션을 처음부터 재생. (Shift+D)\" 를 누르"
"면 로고가 내려갈 것입니다."

#: ../../docs/getting_started/step_by_step/animations.rst:76
msgid ""
"Click the \"Autoplay on Load\" button to set the animation to start "
"automatically when the scene starts."
msgstr ""
"\"로드 시 자동 플레이\" 버튼을 눌러 씬이 시작할 때 애니메이션이 자동으로 시작"
"하도록 설정합니다."

#: ../../docs/getting_started/step_by_step/animations.rst:81
msgid ""
"And finally, when running the scene, the animation should look like this:"
msgstr ""
"그리고 마침내, 씬을 실행시키면, 애니메이션은 이렇게 보여야 할 것입니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:4
#: ../../docs/tutorials/threads/thread_safe_apis.rst:48
#: ../../docs/development/cpp/creating_android_modules.rst:204
#: ../../docs/development/file_formats/tscn.rst:249
#: ../../docs/community/resources.rst:4
msgid "Resources"
msgstr "리소스(Resources)"

#: ../../docs/getting_started/step_by_step/resources.rst:7
msgid "Nodes and resources"
msgstr "노드와 리소스"

#: ../../docs/getting_started/step_by_step/resources.rst:9
msgid ""
"Up to this tutorial, we focused on the :ref:`Node <class_Node>` class in "
"Godot as that's the one you use to code behavior and most of the engine's "
"features rely on it. There is another datatype that is just as important: :"
"ref:`Resource <class_Resource>`."
msgstr ""
"지금까지, :ref:`Node <class_Node>` 클래스는  Godot에서 가장 중요한 데이터 형"
"식으로 엔진 내 대부분의 기능과 작동이 이것으로 이루어 졌다는 것에 초점을 두었"
"습니다. 이와 똑같이 중요한 데이터 형식이 있습니다: :ref:`Resource "
"<class_Resource>` 입니다."

#: ../../docs/getting_started/step_by_step/resources.rst:15
msgid ""
"*Nodes* give you functionality: they draw sprites, 3D models, simulate "
"physics, arrange user interfaces, etc. **Resources** are **data "
"containers**. They don't do anything on their own: instead, nodes use the "
"data contained in resources."
msgstr ""
"*노드*\\ 는 다음과 같은 기능을 제공합니다: 스프라이트를 그려주고 3D 모델링을 "
"해주며 물리 시뮬레이션을 해주고, 유저 인터페이스 정리 등을 해줍니다.\n"
"**리소스**\\ 는 **데이터 컨테이너**\\ 입니다. 리소스 그 자체로는 아무 일도 하"
"지 않습니다: 대신에 노드가 리소스에 포함되어 있는 데이터를 사용합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:19
msgid ""
"Anything Godot saves or loads from disk is a resource. Be it a scene (a ."
"tscn or an .scn file), an image, a script... Here are some ``Resource`` "
"examples: :ref:`Texture <class_Texture>`, :ref:`Script <class_Script>`, :ref:"
"`Mesh <class_Mesh>`, :ref:`Animation <class_Animation>`, :ref:`AudioStream "
"<class_AudioStream>`, :ref:`Font <class_Font>`, :ref:`Translation "
"<class_Translation>`."
msgstr ""
"Godot에서 디스크에 저장하고 불러오는 모든 것이 리소스입니다. 씬이나 (.tscn 이"
"나 .scn 파일), 이미지, 스크립트... ``리소스`` 예제들입니다: ref:`Texture "
"<class_Texture>`, ref:`Script <class_Script>`, :ref:`Mesh <class_Mesh>`, :"
"ref:`Animation <class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :"
"ref:`Font <class_Font>`, :ref:`Translation <class_Translation>`."

#: ../../docs/getting_started/step_by_step/resources.rst:26
msgid ""
"When the engine loads a resource from disk, **it only loads it once**. If a "
"copy of that resource is already in memory, trying to load the resource "
"again will return the same copy every time. As resources only contain data, "
"there is no need to duplicate them."
msgstr ""
"리소스가 디스크에서 불러올 때, **항상 한번만 불러옵니다**. 즉, 메모리에서 이"
"미 불러온 리소스의 복사본이 있다면, 다시 리소스를 불러 오려고 해도 같은 복사"
"본을 계속해서 반환될 것입니다. 리소스는 오직 데이터 컨테이너로 복사할 필요가 "
"없습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:31
msgid ""
"Every object, be it a Node or a Resource, can export properties. There are "
"many types of Properties, like String, integer, Vector2, etc., and any of "
"these types can become a resource. This means that both nodes and resources "
"can contain resources as properties:"
msgstr ""
"노드가 될 수 있는 모든 대상은 속성을 내보낼 수 있습니다. 속성은 문자열, 정"
"수, Vector2, 등과 같은 많은 타입이 될 수 있고, 그 유형들 중 하나가 리소스가 "
"될 수 있습니다. 이는 노드와 리소스가 모두 리소스를 속성으로 가질 수 있다는 것"
"을 의미합니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:39
msgid "External vs built-in"
msgstr "외부(External) vs 내장(built-in)"

#: ../../docs/getting_started/step_by_step/resources.rst:41
msgid "There are two ways to save resources. They can be:"
msgstr "리소스를 저장하는 두 가지 방법이 있습니다. 이렇게 될 수 있습니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:43
msgid "**External** to a scene, saved on the disk as individual files."
msgstr "씬의 **외부**에 개별 파일로 저장."

#: ../../docs/getting_started/step_by_step/resources.rst:44
msgid ""
"**Built-in**, saved inside the \\*.tscn or the \\*.scn file they're attached "
"to."
msgstr "\\*.tscn 이나 \\*.scn 파일 내부에 첨부하여 씬에 **내장**하여 저장."

#: ../../docs/getting_started/step_by_step/resources.rst:46
msgid ""
"To be more specific, here's a :ref:`Texture <class_Texture>` in a :ref:"
"`Sprite <class_Sprite>` node:"
msgstr ""
"보다 구체적으로는, :ref:`Sprite <class_Sprite>` 노드의 :ref:`Texture "
"<class_Texture>` 가 있습니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:51
msgid ""
"Clicking the resource preview allows us to view and edit the resource's "
"properties."
msgstr "리소스 미리보기를 클릭해서 리소스를 보고 속성을 편집합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:55
msgid ""
"The path property tells us where the resource comes from. In this case, it "
"comes from a PNG image called ``robi.png``. When the resource comes from a "
"file like this, it is an external resource. If you erase the path or this "
"path is empty, it becomes a built-in resource."
msgstr ""
"경로 속성은 리소스가 어디에서 오는 지를 알려줍니다. 이 경우에 리소스는  "
"``robi.png``\\ 라 부르는 PNG 이미지에서 왔습니다. 리소스가 이와 같은 파일에"
"서 올 때, 그것은 외부 리소스 입니다. 경로를 지우거나 경로가 비어있다면, 그것"
"은 내장 리소스가 됩니다."

#: ../../docs/getting_started/step_by_step/resources.rst:60
msgid ""
"The switch between built-in and external resources happens when you save the "
"scene. In the example above, if you erase the path \\`\"res://robi.png\"\\` "
"and save, Godot will save the image inside the .tscn scene file."
msgstr ""
"내장과 외부 리소스 간의 전환은 씬을 저장할 때 발생합니다. 위의 예시에서, 경"
"로  \\`\"res://robi.png\"\\`를 지우고 저장한다면 Godot는 .tscn 씬 파일 안에 "
"이미지를 저장합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:66
msgid ""
"Even if you save a built-in resource, when you instance a scene multiple "
"times, the engine will only load one copy of it."
msgstr ""
"씬을 여러 번 인스턴스 할 때, 내장 리소스를 저장하더라도 엔진은 오직 하나의 사"
"본으로만 불러옵니다."

#: ../../docs/getting_started/step_by_step/resources.rst:70
msgid "Loading resources from code"
msgstr "코드에서 리소스를 불러오기"

#: ../../docs/getting_started/step_by_step/resources.rst:72
msgid ""
"There are two ways to load resources from code. First, you can use the "
"``load()`` function anytime:"
msgstr ""
"코드에서 리소스를 불러오는 두 가지 방법이 있습니다. 첫 번째로, 언제든지 "
"``load()`` 함수를 사용할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:90
msgid ""
"You can also ``preload`` resources. Unlike ``load``, this function will read "
"the file from disk and load it at compile-time. As a result, you cannot call "
"preload with a variable path: you need to use a constant string."
msgstr ""
"또한 리소스를 ``미리 불러올 수(preload)`` 있습니다. ``load`` 와는 다르게, 이 "
"함수는 디스크에서 파일을 읽고 컴파일 시간에 파일을 불러옵니다. 그 결과, 변수 "
"경로로 미리 불러오기를 호출할 수 없습니다: 상수 문자열을 사용해야 합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:106
msgid "Loading scenes"
msgstr "씬 불러오기"

#: ../../docs/getting_started/step_by_step/resources.rst:108
msgid ""
"Scenes are also resources, but there is a catch. Scenes saved to disk are "
"resources of type :ref:`PackedScene <class_PackedScene>`. The scene is "
"packed inside a resource."
msgstr ""
"씬 또한 리소스 입니다, 하지만 함정이 있습니다. 씬은 디스크에 :ref:"
"`PackedScene <class_PackedScene>` 타입의 리소스로 저장됩니다. 씹은 리소스 안"
"에 압축됩니다."

#: ../../docs/getting_started/step_by_step/resources.rst:112
msgid ""
"To get an instance of the scene, you have to use the :ref:`PackedScene."
"instance() <class_PackedScene_method_instance>` method."
msgstr ""
"씬의 인스턴스를 얻기 위해, :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` 메서드를 사용해야 합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:133
msgid ""
"This method creates the nodes in the scene's hierarchy, configures them, and "
"returns the root node of the scene. You can then add it as a child of any "
"other node."
msgstr ""
"이 메서드는 씬의 계층 구조에 노드들을 만들고, 그들을 구성하고, 씬의 루트 노드"
"로 반환합니다. 그런 뒤 이것을 다른 노드의 자식으로 추가할 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:137
msgid ""
"The approach has several advantages. As the :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` function is pretty fast, you can create "
"new enemies, bullets, effects, etc. without having to load them again from "
"disk each time. Remember that, as always, images, meshes, etc. are all "
"shared between the scene instances."
msgstr ""
"이 접근은 여러 장점이 있습니다. :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` 함수가 꽤 빠르기 때문에, 씬에 새로운 "
"적, 총알, 효과 등이 빠르게 추가되고 삭제될 수 있습니다, 각각을 디스크에서 불"
"러올 필요가 없다는 것입니다. 항상 그래왔듯, 이미지, 메시 등은 모두 씬 인스턴"
"스와 공유한다는 것을 명심하세요."

#: ../../docs/getting_started/step_by_step/resources.rst:144
msgid "Freeing resources"
msgstr "리소스 해제(Free)하기"

#: ../../docs/getting_started/step_by_step/resources.rst:146
msgid ""
"When a ``Resource`` is no longer in use, it will automatically free itself. "
"Since, in most cases, Resources are contained in Nodes, when you free a "
"node, the engine frees all the resources it owns as well if no other node "
"uses them."
msgstr ""
"``리소스``\\ 가 더 이상 사용되지 않을 때, 그것은 자동으로 스스로를 해제(Free)"
"합니다. 대부분의 경우, 리소스는 노드, 스크립트 혹은 다른 리소스에 포함되어 있"
"기 때문에, 노드를 해제할 때, 엔진은 이 노드 외에 다른 노드가 더 이상 쓰지 않"
"는 리소스도 해제합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:151
msgid "Creating your own resources"
msgstr "자신의 리소스 만들기"

#: ../../docs/getting_started/step_by_step/resources.rst:153
msgid ""
"Like any Object in Godot, users can also script Resources. Resource scripts "
"inherit the ability to freely translate between object properties and "
"serialized text or binary data (/*.tres, /*.res). They also inherit the "
"reference-counting memory management from the Reference type."
msgstr ""
"Godot에서 어느 객체와 마찬가지로, 사용자는 리소스를 작성할 수 있습니다. 리소"
"스 스크립트는 객체 속성간의 자유로운 변환과 텍스트 또는 이진 데이터 (/*."
"tres, /*.res)를 직렬화하는 기능을 상속합니다. 그리고 참조 타입으로부터 참조 "
"계산 메모리 관리를 상속합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:158
msgid ""
"This comes with many distinct advantages over alternative data structures, "
"such as JSON, CSV, or custom TXT files. Users can only import these assets "
"as a :ref:`Dictionary <class_Dictionary>` (JSON) or as a :ref:`File "
"<class_File>` to parse. What sets Resources apart is their inheritance of :"
"ref:`Object <class_Object>`, :ref:`Reference <class_Reference>`, and :ref:"
"`Resource <class_Resource>` features:"
msgstr ""
"JSON, CSV, 혹은 커스텀 TXT 파일로 이루어진 이것은 대체 데이터 구조를 넘어서 "
"많은 뚜렷한 이점을 제공합니다. 사용자는 이 에셋을 구문 분석하기 위해 :ref:"
"`Dictionary <class_Dictionary>` (JSON) 혹은 :ref:`File <class_File>`\\ 로만 "
"가져올 수 있습니다. 리소스는 :ref:`Object <class_Object>`, :ref:`Reference "
"<class_Reference>`, 그리고 :ref:`Resource <class_Resource>` 기능의 상속을 통"
"해 구분합니다:"

#: ../../docs/getting_started/step_by_step/resources.rst:165
msgid ""
"They can define constants, so constants from other data fields or objects "
"are not needed."
msgstr ""
"그들은 상수를 정의할 수 있기 때문에, 다른 데이터 필드나 객체의 상수는 필요하"
"지 않습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:167
msgid ""
"They can define methods, including setter/getter methods for properties. "
"This allows for abstraction and encapsulation of the underlying data. If the "
"Resource script's structure needs to change, the game using the Resource "
"need not also change."
msgstr ""
"그들은 속성을 위한 setter/getter 메서드를 포함한 메서드를 정의할 수 있습니"
"다. 이것으로 기본 데이터의 추출과 캡슐화를 할 수 있습니다. 리소스 스크립트의 "
"구조가 변경되어야 하더라도, 리소스를 사용하는 게임이 변경되지 않아도 됩니다."

#: ../../docs/getting_started/step_by_step/resources.rst:169
msgid ""
"They can define signals, so Resources can trigger responses to changes in "
"the data they manage."
msgstr ""
"그들은 시그널을 정의할 수 있기 때문에, 리소스는 관리한 데이터의 변경에 대한 "
"응답을 트리거 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:171
msgid ""
"They have defined properties, so users know 100% that their data will exist."
msgstr ""
"그들은 속성을 정의하기 때문에, 사용자는 데이터가 존재한다는 것을 100% 압니다."

#: ../../docs/getting_started/step_by_step/resources.rst:173
msgid ""
"Resource auto-serialization and deserialization is a built-in Godot Engine "
"feature. Users do not need to implement custom logic to import/export a "
"resource file's data."
msgstr ""
"리소스 자동 직렬화와 비 직렬화는 Godot 엔진 내장 기능입니다. 사용자는 리소스 "
"파일의 데이터를 가져오기/내보내기 위해 커스텀 로직을 구현할 필요가 없습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:175
msgid ""
"Resources can even serialize sub-Resources recursively, meaning users can "
"design even more sophisticated data structures."
msgstr ""
"리소스는 심지어 하위 리소스를 재귀적으로 직렬화 할 수 있습니다, 즉 사용자는 "
"훨씬 더 정교한 데이터 구조를 설계할 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:177
msgid ""
"Users can save Resources as version-control-friendly text files (\\*.tres). "
"Upon exporting a game, Godot serializes resource files as binary files (\\*."
"res) for increased speed and compression."
msgstr ""
"사용자는 리소스를 버전 제어 친화적 텍스트 파일 (\\*.tres)로 저장할 수 있습니"
"다. 게임을 내보낼 때, Godot는 리소스 파일을 이진 파일 (\\*.res)로 직렬화 하"
"여 속도와 압축을 증가시킵니다."

#: ../../docs/getting_started/step_by_step/resources.rst:179
msgid ""
"Godot Engine's Inspector renders and edits Resource files out-of-the-box. As "
"such, users often do not need to implement custom logic to visualize or edit "
"their data. To do so, double-click the resource file in the FileSystem dock "
"or click the folder icon in the Inspector and open the file in the dialog."
msgstr ""
"Godot 엔진의 인스펙터는 리소스 파일을 즉시 렌더링하고 편집합니다. 이와 같이, "
"사용자는 종종 데이터를 시각화 하거나 편집하기 위한 커스텀 로직을 구현할 필요"
"가 없습니다. 그러기 위해서, 파일 시스템 독에서 리소스를 더블 클릭하거나 인스"
"펙터에서 폴더 아이콘을 클릭하고 대화 상자에서 파일을 엽니다."

#: ../../docs/getting_started/step_by_step/resources.rst:181
msgid ""
"They can extend **other** resource types besides just the base Resource."
msgstr "그들은 기본 리소스 외에도 **다른** 리소스 타입도 확장할 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:185
msgid ""
"Resources and Dictionaries are also different in that both are passed by "
"reference, but only Resources are reference-counted. This means that if a "
"Dictionary is passed between objects, and the first object is deleted, it "
"will invalidate the second object's variable. This is not so for Resources "
"which won't free their memory until *all* instances are gone."
msgstr ""
"리소스와 딕셔너리는 둘 다 참조로서 전달되지만, 오직 리소스는 참조 카운트가 된"
"다는 점에서 다릅니다. 이는 즉 딕셔너리가 객체 사이를 지나가고, 첫 번째 객체"
"가 삭제된다면, 두 번째 객체의 변수를 무효화 할 것입니다. 하지만 리소스는 *모"
"든* 인스턴스가 사라질 때까지 메모리를 해제하지 않습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:215
msgid "Godot makes it easy to create custom Resources in the Inspector."
msgstr "Godot는 인스펙터에서 커스텀 리소스를 만들기 쉽게 합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:217
msgid ""
"Create a plain Resource object in the Inspector. This can even be a type "
"that derives Resource, so long as your script is extending that type."
msgstr ""
"인스펙터에서 순수한 리소스를 만듭니다. 스크립트가 해당 타입을 확장하는 동안, "
"이것은 심지어 리소스를 파생하는 타입일 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:218
msgid "Set the ``script`` property in the Inspector to be your script."
msgstr "인스펙터에서 ``script`` 속성을 당신의 스크립트로 설정합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:220
msgid ""
"The Inspector will now display your Resource script's custom properties. If "
"one edits those values and saves the resource, the Inspector serializes the "
"custom properties too! To save a resource from the Inspector, click the "
"Inspector's tools menu (top right), and select \"Save\" or \"Save As...\"."
msgstr ""
"인스펙터는 이제 리소스 스크립트의 커스텀 속성을 보여줍니다. 이 값을 편집하고 "
"리소스를 저장하면, 인스펙터는 커스텀 속성 역시 직렬화 합니다! 인스펙터에서 리"
"소스를 저장하기 위해, 인스펙터의 도구 메뉴 (우측 상단)를 클릭하고, \"저장하기"
"\"나 \"다른 이름으로 저장...\"을 선택합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:225
msgid ""
"If the script's language supports :ref:`script classes "
"<doc_scripting_continued_class_name>`, then it streamlines the process. "
"Defining a name for your script alone will add it to the Inspector's "
"creation dialog. This will auto-add your script to the Resource object you "
"create."
msgstr ""
"스크립트의 언어가 :ref:`스크립트 클래스 <doc_scripting_continued_class_name>`"
"\\를 지원한다면, 프로세스가 간소화됩니다. 스크립트에 이름만 정의하는 것으로 "
"인스펙터의 생성 대화 상자에 리소스를 추가할 것입니다. 이렇게 하면 생성된 리소"
"스 객체에 스크립트가 자동으로 추가됩니다."

#: ../../docs/getting_started/step_by_step/resources.rst:230
msgid "Let's see some examples."
msgstr "몇 가지 예를 살펴보겠습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:303
msgid ""
"Resource scripts are similar to Unity's ScriptableObjects. The Inspector "
"provides built-in support for custom resources. If desired though, users can "
"even design their own Control-based tool scripts and combine them with an :"
"ref:`EditorPlugin <class_EditorPlugin>` to create custom visualizations and "
"editors for their data."
msgstr ""
"리소스 스크립트는 유니티의 ScriptableObjects(스크립트 가능한 객체)와 유사합니"
"다. 인스펙터는 커스텀 리소스를 위한 내장 지원을 제공합니다. 그래도 원한다면, "
"사용자는 자신만의 제어 기반 도구 스크립트를 설계하고 그들을 :ref:"
"`EditorPlugin <class_EditorPlugin>`\\ 으로 결합하여 커스텀 시각화와 데이터를 "
"위한 편집기를 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:309
msgid ""
"Unreal Engine 4's DataTables and CurveTables are also easy to recreate with "
"Resource scripts. DataTables are a String mapped to a custom struct, similar "
"to a Dictionary mapping a String to a secondary custom Resource script."
msgstr ""
"언리얼 엔진 4의 DataTables와 CurveTables 또한 리소스 스크립트로 쉽게 재생성 "
"할 수 있습니다. DataTables은 커스텀 구조체에 매핑된 문자열로, 이차적인 커스"
"텀 리소스 스크립트에 문자열을 매핑하는 딕셔너리와 유사합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:345
msgid ""
"Instead of just inlining the Dictionary values, one could also, "
"alternatively..."
msgstr ""
"딕셔너리 값을 inlining(인라이닝)하는 대신, 또 다른 할 수 있는 대안으로..."

#: ../../docs/getting_started/step_by_step/resources.rst:347
msgid ""
"Import a table of values from a spreadsheet and generate these key-value "
"pairs, or..."
msgstr "스프레드 시트에서 테이블 값을 가져오고 키 값 쌍을 생성합니다, 혹은..."

#: ../../docs/getting_started/step_by_step/resources.rst:349
msgid ""
"Design a visualization within the editor and create a simple plugin that "
"adds it to the Inspector when you open these types of Resources."
msgstr ""
"에디터 내에서 시각화를 설계하고 해당 타입 리소스를 열 때 인스펙터에 리소스를 "
"추가하는 간단한 플러그인을 제작합니다."

#: ../../docs/getting_started/step_by_step/resources.rst:352
msgid ""
"CurveTables are the same thing, except mapped to an Array of float values or "
"a :ref:`Curve <class_Curve>`/:ref:`Curve2D <class_Curve2D>` resource object."
msgstr ""
"두 가지 방법이 항상 호환되는 것은 아닙니다. 컨테이너는 자식을 제어하기 때문"
"에, 레이아웃 메뉴를 그것들에게 사용할 수 없습니다. 각 컨테이너는 특정한 효과"
"를 갖고 있으므로 당신은 제대로 동작하는 인터페이스를 얻기 위해 그들을 중첩"
"(nest)할지도 모릅니다. 레이아웃 접근을 사용하는 경우 자식들을 아래계층에서 위"
"계층 방향으로 작업합니다. 씬에 추가적이 컨테이너를 사용하지 않으므로 더 깨끗"
"한 계층 구조를 만들 수 있지만, 항목을 행이나 열, 격자 등으로 배열하기는 더 어"
"렵습니다."

#: ../../docs/getting_started/step_by_step/resources.rst:357
msgid ""
"Beware that resource files (\\*.tres/\\*.res) will store the path of the "
"script they use in the file. When loaded, they will fetch and load this "
"script as an extension of their type. This means that trying to assign a "
"subclass, i.e. an inner class of a script (such as using the ``class`` "
"keyword in GDScript) won't work. Godot will not serialize the custom "
"properties on the script subclass properly."
msgstr ""
"리소스 파일 (\\*.tres/\\*.res)이 파일에서 사용하는 스크립트의 경로를 저장한다"
"는 점에 주의하세요. 스크립트를 불러올 때, 이 스크립트를 가져와서 해당 타입의 "
"확장으로 불러옵니다. 다시 말해 하위 클래스, 즉 스크립트의 내부 클래스 "
"(GDScript에서 ``class`` 키워드를 사용하는 것)를 할당할 수 없습니다. Godot는 "
"스크립트 하위 클래스에 커스텀 속성을 정확하게 직렬화 하지 않을 것입니다."

#: ../../docs/getting_started/step_by_step/resources.rst:363
msgid ""
"In the example below, Godot would load the ``Node`` script, see that it "
"doesn't extend ``Resource``, and then determine that the script failed to "
"load for the Resource object since the types are incompatible."
msgstr ""
"아래 예시에서, Godot는 ``Node`` 스크립트를 불러오고, ``Resource``\\ 를 확장"
"(extend)하지 않음을 확인합니다, 그런 다음 타입이 맞지 않으면 스크립트가 리소"
"스 객체에 대해 불러오지 못했음을 확인합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:4
msgid "File system"
msgstr "파일 시스템(File system)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:9
msgid ""
"File systems are yet another hot topic in engine development. The file "
"system manages how the assets are stored and how they are accessed. A well-"
"designed file system also allows multiple developers to edit the same source "
"files and assets while collaborating."
msgstr ""
"파일 시스템은 하지만 엔진 개발에 있어 또 다른 주요 주제입니다. 파일 시스템은 "
"어떻게 에셋이 저장되고 액세스 되는 지를 관리합니다. 잘 설계된 파일 시스템은 "
"여러 개발자들에게도 또한 서로 협력하면서 같은 소스 파일과 에셋을 편집할 수 있"
"게 합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:14
msgid ""
"Initial versions of the Godot engine (and previous iterations before it was "
"named Godot) used a database. Assets were stored in it and assigned an ID. "
"Other approaches were tried as well, such as local databases, files with "
"metadata, etc. In the end, the simple approach won and now Godot stores all "
"assets as files in the file system."
msgstr ""
"Godot 엔진의 초기 버전에는 (그리고 아직 Godot라는 이름이 붙기 전) 데이터베이"
"스를 사용했습니다. 에셋은 그곳에 있었고 ID가 지정되었습니다. 다른 접근도 시도"
"해보았습니다, 지역 데이터베이스나, 메타데이터가 있는 파일 등등을 말이죠. 결"
"국 간단한 접근법을 얻게 되었고 지금 Godot는 모든 에셋을 파일 시스템에 저장합"
"니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:21
msgid "Implementation"
msgstr "구현"

#: ../../docs/getting_started/step_by_step/filesystem.rst:23
msgid ""
"The file system stores resources on disk. Anything, from a script, to a "
"scene or a PNG image is a resource to the engine. If a resource contains "
"properties that reference other resources on disk, the paths to those "
"resources are also included. If a resource has sub-resources that are built-"
"in, the resource is saved in a single file together with all the bundled sub-"
"resources. For example, a font resource is often bundled together with the "
"font textures."
msgstr ""
"파일 시스템은 리소스를 디스크에 저장합니다. 스크립트에서 씬이나 PNG 이미지까"
"지 어떤 것이든, 엔진에게는 리소스 입니다. 리소스가 디스크 내 다른 리소스의 참"
"조를 속성으로 갖고 있다면, 그 리소스로 가는 경로 또한 포함됩니다. 리소스가 내"
"장 하위 리소스를 갖는다면, 그 리소스는 모든 묶인 하위 리소스들과 함께 단일 파"
"일로 저장됩니다. 예를 들어, 폰트 리소스는 종종 폰트 텍스쳐와 묶여집니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:30
msgid ""
"In general, the Godot file system avoids using metadata files. The reason "
"for this is simple, existing asset managers and VCSs are simply much better "
"than anything we can implement, so Godot tries its best to play along with "
"SVN, Git, Mercurial, Perforce, etc."
msgstr ""
"일반적으로 Godot 파일 시스템은 메타데이터 파일 사용을 피합니다. 그 이유는 간"
"단합니다, 기존 에셋 관리자와 버전 관리 시스템(VCS)은 우리가 구현할 수 있는 것"
"보다 훨씬 더 뛰어나기 때문에, Godot는 SVN, Git, Mercurial, Perforce 등과 함"
"께 최선을 다합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:35
msgid "Example of a file system contents:"
msgstr "파일 시스템 내용물 예시:"

#: ../../docs/getting_started/step_by_step/filesystem.rst:46
msgid "project.godot"
msgstr "project.godot"

#: ../../docs/getting_started/step_by_step/filesystem.rst:48
msgid ""
"The project.godot file is the project description file, and it is always "
"found at the root of the project. In fact, its location defines where the "
"root is. This is the first file that Godot looks for when opening a project."
msgstr ""
"project.godot 파일은 프로젝트 설명 파일이고, 항상 프로젝트의 루트에서 찾으실 "
"수 있습니다. 사실 파일 위치가 루트의 위치를 정의합니다. 이 파일은 프로젝트를 "
"열 때 Godot가 제일 먼저 찾는 파일입니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:52
msgid ""
"This file contains the project configuration in plain text, using the win."
"ini format. Even an empty project.godot can function as a basic definition "
"of a blank project."
msgstr ""
"이 파일은 프로젝트 설정을 win.ini 형식을 사용해, 일반 텍스트로 갖습니다. 심지"
"어 비어있는 project.godot도 비어있는 프로젝트의 기본 정의 기능을 할 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:57
msgid "Path delimiter"
msgstr "경로 구분 기호"

#: ../../docs/getting_started/step_by_step/filesystem.rst:59
msgid ""
"Godot only supports ``/`` as a path delimiter. This is done for portability "
"reasons. All operating systems support this, even Windows, so a path such as "
"``c:\\project\\project.godot`` needs to be typed as ``c:/project/project."
"godot``."
msgstr ""
"Godot는 오직 ``/`` 만을 경로 구분 기호로 지원합니다. 그 이유는 이식 능력 입니"
"다. 모든 운영 시스템이, 심지어 윈도우까지, 이를 지원하기 때문에, ``c:"
"\\project\\project.godot`` 같은 경로는 ``c:/project/project.godot`` 와 같은 "
"타입이 되어야 합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:65
#: ../../docs/tutorials/io/data_paths.rst:16
msgid "Resource path"
msgstr "리소스 경로(Resource path)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:67
msgid ""
"When accessing resources, using the host OS file system layout can be "
"cumbersome and non-portable. To solve this problem, the special path ``res://"
"`` was created."
msgstr ""
"리소스를 액세스 할 때, 호스트 OS 파일 시스템 레이아웃을 사용하는 것은 성가시"
"고 휴대성이 떨어질 수 있습니다. 이 문제를 해결하기 위해, ``res://`` 라는 특"
"수 경로가 만들어졌습니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:71
msgid ""
"The path ``res://`` will always point at the project root (where project."
"godot is located, so in fact ``res://project.godot`` is always valid)."
msgstr ""
"``res://`` 경로는 항상 프로젝트 루트를 향할 것입니다 (거기에는 project.godot"
"이 있고, 그래서 사실 ``res://project.godot`` 경로가 항상 있습니다)."

#: ../../docs/getting_started/step_by_step/filesystem.rst:75
msgid ""
"This file system is read-write only when running the project locally from "
"the editor. When exported or when running on different devices (such as "
"phones or consoles, or running from DVD), the file system will become read-"
"only and writing will no longer be permitted."
msgstr ""
"파일 시스템은 에디터에서 프로젝트를 로컬로 실행 중일 때만 읽고 씁니다. 내보내"
"질 때나 아니면 다른 기기에서 실행 중일 때 (휴대전화나 콘솔, 혹은 DVD로 실"
"행), 파일 시스템은 읽기만 하고 더 이상 쓰기가 용납되지 않습니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:81
msgid "User path"
msgstr "사용자 경로(User path)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:83
msgid ""
"Writing to disk is often still needed for various tasks such as saving game "
"state or downloading content packs. To this end, the engine ensures that "
"there is a special path ``user://`` that is always writable."
msgstr ""
"디스크에 쓰기는 게임 상태를 저장하거나 콘텐츠 팩을 다운로드하는 등의 다양한 "
"작업에 종종 필요합니다. 이를 위해, 엔진은 ``user://`` 라는 항상 쓸 수 있는 경"
"로를 보장합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:88
msgid "Host file system"
msgstr "호스트 파일 시스템(Host file system)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:90
msgid ""
"Alternatively host file system paths can also be used, but this is not "
"recommended for a released product as these paths are not guaranteed to work "
"on all platforms. However, using host file system paths can be useful when "
"writing development tools in Godot!"
msgstr ""
"또는 호스트 파일 시스템 경로도 사용될 수 있습니다, 하지만 이것이 모든 플랫폼"
"에서 작동된다는 보장은 없으니 출시된 제품에 이 경로를 쓰는 것을 추천하지는 않"
"습니다. 하지만, 호스트 파일 시스템 경로를 사용하면 Godot에서 개발 도구를 쓸 "
"때 유용할 수 있습니다!"

#: ../../docs/getting_started/step_by_step/filesystem.rst:96
msgid "Drawbacks"
msgstr "단점"

#: ../../docs/getting_started/step_by_step/filesystem.rst:98
msgid ""
"There are some drawbacks to this simple file system design. The first issue "
"is that moving assets around (renaming them or moving them from one path to "
"another inside the project) will break existing references to these assets. "
"These references will have to be re-defined to point at the new asset "
"location."
msgstr ""
"이 간단한 파일 시스템 설계에는 몇 가지 단점이 있습니다. 첫 번째 문제는 에셋"
"의 이동으로 (프로젝트 내에서 이름을 바꾸거나 한 경로를 다른 곳으로 옮기는 "
"등) 이 에셋에 관해 존재하는 참조를 깨버릴 것입니다. 이 참조는 새 에셋 위치를 "
"향하도록 다시 정의해야만 합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:103
msgid ""
"To avoid this, do all your move, delete and rename operations from within "
"Godot, on the FileSystem dock. Never move assets from outside Godot, or "
"dependencies will have to be fixed manually (Godot detects this and helps "
"you fix them anyway, but why go the hard route?)."
msgstr ""
"이를 피하기 위해, Godot에서, 파일 시스템 독 내에서, 위치를 바꾸거나 이름을 바"
"꾸거나 삭제하는 등의 모든 작업을 해야만 합니다. Godot 밖에서 에셋을 움직이지 "
"마세요, 그렇지 않으면 종속 여부를 수동으로 설정해야만 합니다 (Godot는 이를 감"
"지하고 당신이 고치는 것을 어쨌든 도울 것이지만, 왜 어려운 길로 가시나요?)."

#: ../../docs/getting_started/step_by_step/filesystem.rst:108
msgid ""
"The second is that, under Windows and macOS, file and path names are case "
"insensitive. If a developer working in a case insensitive host file system "
"saves an asset as \"myfile.PNG\", but then references it as \"myfile.png\", "
"it will work fine on their platform, but not on other platforms, such as "
"Linux, Android, etc. This may also apply to exported binaries, which use a "
"compressed package to store all files."
msgstr ""
"두 번째로 윈도우와 macOS에서는 파일과 경로 이름을 대소문자를 구별하지 않는 것"
"입니다. 대소문자를 구분하지 않는 호스트 파일 시스템이 에셋을 \"myfile.PNG\"라"
"고 저장하지만, \"myfile.png\" 로 참조됩니다, 그 플랫폼 내에서는 작동이 잘 될 "
"것입니다, 하지만 리눅스, 안드로이드 등의 플랫폼에서는 작동하지 않습니다. 이"
"는 압축된 패키지로 모든 파일을 저장하는 내보낸 바이너리에도 적용될 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:114
msgid ""
"It is recommended that your team clearly define a naming convention for "
"files when working with Godot! One simple fool-proof convention is to only "
"allow lowercase file and path names."
msgstr ""
"Godot로 작업할 때 팀이 명명 규칙을 분명하게 정의하는 것을 추천합니다! 간단히 "
"바보 같은 규칙이라면 파일과 경로 이름을 소문자로만 허락하는 것입니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:4
#: ../../docs/getting_started/step_by_step/scene_tree.rst:41
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:288
msgid "SceneTree"
msgstr "SceneTree"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:9
msgid ""
"This is where things start getting abstract, but don't panic. There's not "
"much more depth than this."
msgstr ""
"여기서 내용이 추상적으로 되기 시작합니다, 하지만 당황하지 마세요. 여기보다 훨"
"씬 더 깊게 보는 곳은 없습니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:12
msgid ""
"In previous tutorials, everything revolved around the concept of nodes. "
"Scenes are simply a collection of nodes. They become active once they enter "
"the *scene tree*."
msgstr ""
"이전 튜토리얼에서, 모든 것은 노드 개념을 중심으로 돌아갔습니다. 씬은 간단히 "
"노드의 집합입니다. 그들이 *씬 트리(scene tree)* 에 들어가면 활성화됩니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:16
msgid ""
"This concept deserves going into a little more detail. In fact, the scene "
"system is not even a core component of Godot as it is possible to skip it "
"and write a script (or C++ code) that talks directly to the servers, but "
"making a game that way would be a lot of work."
msgstr ""
"이 개념은 조금 더 자세히 설명할 가치가 있습니다. 사실, 씬 시스템은 Godot의 핵"
"심 구성 요소도 아니기에 넘어가서 바로 서버와 직접 대화하는 스크립트를 (혹은 C"
"++ 코드를) 쓸 수 있습니다, 하지만 그런 방식으로 게임을 만드는 일은 많은 작업"
"이 될 것입니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:22
msgid "MainLoop"
msgstr "MainLoop"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:24
msgid ""
"The way Godot works internally is as follows. There is the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the beginning. "
"Afterwards, all drivers, servers, scripting languages, scene system, etc are "
"loaded."
msgstr ""
"Godot가 내부적으로 작동되는 과정은 다음과 같습니다. :ref:`OS <class_OS>` 클래"
"스는 처음에 실행되는 유일한 인스턴스 입니다. 그 이후에, 모든 드라이버, 서버, "
"스크립트 언어, 씬 시스템 등을 불러옵니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:29
msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be supplied "
"a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all this is "
"internals working (you can check main/main.cpp file in the source code if "
"you are ever interested to see how this works internally)."
msgstr ""
"초기화를 마칠 때, :ref:`OS <class_OS>` 를 실행하기 위해 :ref:`MainLoop "
"<class_MainLoop>` 가 공급되어야 합니다. 여기까지, 이 모든 것이 내부 작업입니"
"다 (어떻게 내부 작업이 이루어지는지 관심이 있으시다면, 소스 코드의 main/main."
"cpp 파일에서 이를 확인하실 수 있습니다)."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:35
msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-synchronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is low level and "
"when making games in Godot, writing your own MainLoop seldom makes sense."
msgstr ""
"사용자 프로그램, 게임은 MainLoop에서 시작합니다. 이 클래스는 몇 가지 메소드"
"를 갖고 있는데, 초기화, 휴식(Idle)(프레임 동기화된 콜백), 고정된(fixed)(물리 "
"동기화된 콜백), 그리고 입력입니다. 이것은 로우 레벨이며, Godot에서 게임을 만"
"들 때 당신만의 MainLoop를 만드는 일은 드뭅니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:43
msgid ""
"One of the ways to explain how Godot works is that it's a high level game "
"engine over a low level middleware."
msgstr ""
"Godot가 어떻게 작동하는지 설명하는 방법으로 이것은 로우 레벨 미들웨어에 비해 "
"높은 수준의 게임 엔진이란 것입니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:46
msgid ""
"The scene system is the game engine, while the :ref:`OS <class_OS>` and "
"servers are the low level API."
msgstr ""
"씬 시스템은 게임 엔진입니다, 반면에 :ref:`OS <class_OS>` 와 서버는 로우 레벨 "
"API입니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:49
msgid ""
"In any case, the scene system provides its own main loop to OS, :ref:"
"`SceneTree <class_SceneTree>`. This is automatically instanced and set when "
"running a scene, no need to do any extra work."
msgstr ""
"어쨌든, 씬 시스템은 고유의 메인 루프(main loop)인, :ref:`SceneTree "
"<class_SceneTree>` 를 OS로 보냅니다. 이것은 자동으로 씬이 실행되는 동안 자동"
"으로 인스턴스 되고 설정됩니다, 다른 추가 작업은 필요가 없습니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:54
msgid ""
"It's important to know that this class exists because it has a few important "
"uses:"
msgstr ""
"이 클래스가 몇 가지 중요한 용도에 쓰이기 때문에 존재하는 것을 알아야 합니다:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:57
msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, to which a scene is "
"added as a child when it's first opened to become part of the *Scene Tree* "
"(more on that next)"
msgstr ""
"처음 열렸을 때 *씬 트리* 의 일부분이 되도록 씬이 자식으로 추가되는, 루트 :"
"ref:`Viewport <class_Viewport>` 를 포함합니다, (자세한 설명은 다음에)"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:60
msgid ""
"It contains information about the groups and has the means to call all nodes "
"in a group or get a list of them."
msgstr ""
"그룹에 관한 정보를 포함하고 그룹의 모든 노드를 호출하거나 그룹의 목록을 가져"
"옵니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:62
msgid ""
"It contains some global state functionality, such as setting pause mode or "
"quitting the process."
msgstr ""
"일시 정지 모드 설정이나 프로세스 종료하기와 같은, 일부 전역 상태 기능성을 포"
"함합니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:65
msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by simply calling :ref:`Node."
"get_tree() <class_Node_method_get_tree>`."
msgstr ""
"노드가 씬 트리의 일부분일 때, :ref:`SceneTree <class_SceneTree>` 싱글톤"
"(Singleton)은 간단히 :ref:`Node.get_tree() <class_Node_method_get_tree>` 를 "
"호출해서 포함될 수 있습니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:71
msgid "Root viewport"
msgstr "루트 뷰포트(Root viewport)"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:73
msgid ""
"The root :ref:`Viewport <class_Viewport>` is always at the top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""
"루트 :ref:`Viewport <class_Viewport>` 는 항상 씬의 맨 위에 있습니다. 노드에"
"서, 두 가지 다른 방법으로 포함할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:88
msgid ""
"This node contains the main viewport, anything that is a child of a :ref:"
"`Viewport <class_Viewport>` is drawn inside of it by default, so it makes "
"sense that the top of all nodes is always a node of this type otherwise "
"nothing would be seen!"
msgstr ""
"이 노드는 메인 뷰포트를 갖고 있습니다, 어떤 것이든 :ref:`Viewport "
"<class_Viewport>` 의 자식으로 기본적으로 안에 있습니다, 그래서 모든 노드의 "
"맨 위에는 이 노드가 있고 그렇지 않다면 아무것도 볼 수 없을 것입니다!"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:93
msgid ""
"While other viewports can be created in the scene (for split-screen effects "
"and such), this one is the only one that is never created by the user. It's "
"created automatically inside SceneTree."
msgstr ""
"반면에 다른 뷰포트는 씬에서 만들 수 있지만(분리 화면 효과와 같은 것을 위해), "
"사용자가 절대 만들 수 없는 유일한 것입니다. 씬 트리에서 자동으로 생성됩니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:98
#: ../../docs/tutorials/threads/thread_safe_apis.rst:22
msgid "Scene tree"
msgstr "씬 트리"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:100
msgid ""
"When a node is connected, directly or indirectly, to the root viewport, it "
"becomes part of the *scene tree*."
msgstr ""
"노드가 뷰포트에 연결될 때, 직접적이든 아니든, 그것은 *씬 트리* 의 일부분이 됩"
"니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:103
msgid ""
"This means that as explained in previous tutorials, it will get the "
"_enter_tree() and _ready() callbacks (as well as _exit_tree())."
msgstr ""
"이전 튜토리얼에서 설명했듯이, 그것은 (_exit_tree()과 마찬가지로)  "
"_enter_tree()와 _ready() 콜백을 가질 것입니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:108
msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access to "
"everything they need to process, get input, display 2D and 3D, "
"notifications, play sound, groups, etc. When they are removed from the "
"*scene tree*, they lose access."
msgstr ""
"노드가 *씬 트리* 에 들어오게 되면, 활성화됩니다. 그들은 프로세스, 입력, 2D와 "
"3D 디스플레이, 알림, 소리 재생, 그룹 등 필요로 하는 모든 것을 액세스 합니다. "
"그들이 *씬 트리* 에서 제거될 때, 액세스를 잃습니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:114
msgid "Tree order"
msgstr "트리 순서"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:116
msgid ""
"Most node operations in Godot, such as drawing 2D, processing, or getting "
"notifications are done in tree order. This means that parents and siblings "
"with a smaller rank in the tree order will get notified before the current "
"node."
msgstr ""
"2D 그리기, 프로세싱, 혹은 알림과 같은 대부분의 노드 운영은 트리 순서에서 완료"
"됩니다. 이는 트리 순서에서 부모와 더 낮은 등급의 형제 노드들이 현재 노드 이전"
"에 알림을 받을 것을 의미합니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:124
msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr "*씬 트리* 에 들어가서 \"활성화하기\""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:126
msgid "A scene is loaded from disk or created by scripting."
msgstr "씬은 디스크에서 불러오거나 스크립트에 의해 만들어집니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:127
msgid ""
"The root node of that scene (only one root, remember?) is added as either a "
"child of the \"root\" Viewport (from SceneTree), or to any child or "
"grandchild of it."
msgstr ""
"씬의 루트 노드 (단 하나의 루트, 기억하시나요?) 는 \"루트\" 뷰포트의 자식으"
"로, 혹은 노드의 자식으로 (씬 트리에서) 추가됩니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:130
msgid ""
"Every node of the newly added scene, will receive the \"enter_tree\" "
"notification ( _enter_tree() callback in GDScript) in top-to-bottom order."
msgstr ""
"새롭게 추가되는 씬의 각 노드는, 위에서 아래 순으로 \"enter_tree\" 알림을 "
"(GDScript에서  _enter_tree() 콜백을) 받습니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:133
msgid ""
"An extra notification, \"ready\" ( _ready() callback in GDScript) is "
"provided for convenience, when a node and all its children are inside the "
"active scene."
msgstr ""
"추가 알림으로, 노드와 모든 자식이 활성화된 씬 안에 있을 때, \"ready\"가 "
"(GDScript에서는 _ready() 콜백이) 편의로 제공됩니다."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:136
msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( _exit_tree() callback in GDScript) in bottom-to-top order"
msgstr ""
"씬(이나 일부분)이 제거될 때, 그들은 아래에서 위 순으로 \"exit scene\" 알림을 "
"(GDScript에서는 _exit_tree() 콜백을) 받습니다"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:141
msgid "Changing current scene"
msgstr "현재 씬 변경하기"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:143
msgid ""
"After a scene is loaded, it is often desired to change this scene for "
"another one. The simple way to do this is to use the :ref:`SceneTree."
"change_scene() <class_SceneTree_method_change_scene>` function:"
msgstr ""
"씬이 불러온 후, 그것을 다른 씬으로 바꾸고 싶을 수 있습니다. 간단한 방법으로 :"
"ref:`SceneTree.change_scene() <class_SceneTree_method_change_scene>` 함수를 "
"사용하는 것입니다:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:161
msgid ""
"Rather than using file paths, one can also use ready-made :ref:`PackedScene "
"<class_PackedScene>` resources using the equivalent function :ref:`SceneTree."
"change_scene_to(PackedScene scene) <class_SceneTree_method_change_scene_to>`:"
msgstr ""
"파일의 경로를 사용하기보다는, :ref:`SceneTree.change_scene_to(PackedScene "
"scene) <class_SceneTree_method_change_scene_to>` 함수를 사용하여 이미 만들어"
"져 있는 :ref:`PackedScene <class_PackedScene>` 리소스를 사용합니다:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:182
msgid ""
"These are quick and useful ways to switch scenes but have the drawback that "
"the game will stall until the new scene is loaded and running. At some point "
"in your game, it may be desired to create proper loading screens with "
"progress bar, animated indicators or thread (background) loading. This must "
"be done manually using autoloads (see next chapter!) and :ref:"
"`doc_background_loading`."
msgstr ""
"이것은 씬을 바꾸기에 빠르고 유용하지만 새로운 씬이 불러오고 실행될 때까지 멈"
"춰있는 단점이 있습니다. 게임의 어느 시점에서, 진행 막대, 애니메이션 표시기, "
"혹은 스레드(배경) 로딩으로 적절한 로딩 화면을 만드는 것이 좋습니다. 이것은 수"
"동으로 오토로드(Autoload)를 사용하거나(다음 챕터를 보십시오!)  :ref:"
"`doc_background_loading`\\ 으로 해결할 수 있습니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:4
msgid "Singletons (AutoLoad)"
msgstr "싱글톤(오토로드)(Singletons(AutoLoad))"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:9
msgid ""
"Godot's scene system, while powerful and flexible, has a drawback: there is "
"no method for storing information (e.g. a player's score or inventory) that "
"is needed by more than one scene."
msgstr ""
"Godot의 씬 시스템은, 강력하고 유연하지만, 단점이 있습니다: 하나 이상의 씬이 "
"필요하기 때문에 정보를 저장할 방법이 없습니다 (예: 플래이어의 점수나 인벤토"
"리)."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:13
msgid ""
"It's possible to address this with some workarounds, but they come with "
"their own limitations:"
msgstr "이러한 문제들을 해결할 방법은 있지만, 그것만의 한계점이 있습니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:16
msgid ""
"You can use a \"master\" scene that loads and unloads other scenes as its "
"children. However, this means you can no longer run those scenes "
"individually and expect them to work correctly."
msgstr ""
"다른 씬을 자식으로 불러오거나 그렇지 않을 \"마스터\" 씬을 사용할 수 있습니"
"다. 하지만 그렇게 하면 바르게 작동하기 위해 더 이상 씬들을 개별적으로 실행할 "
"수 없다는 것을 의미합니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:19
msgid ""
"Information can be stored to disk in ``user://`` and then loaded by scenes "
"that require it, but frequently saving and loading data is cumbersome and "
"may be slow."
msgstr ""
"정보를 ``user://`` 에 저장하고 필요할 때 불러올 수 있습니다, 하지만 자주 데이"
"터를 저장하고 불러오는 것은 성가시고 느려질 수 있습니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:23
msgid ""
"The `Singleton Pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`_ "
"is a useful tool for solving the common use case where you need to store "
"persistent information between scenes. In our case it is possible re-use the "
"same scene or class for multiple singletons, so long as they have different "
"names."
msgstr ""
"`Singleton Pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`_\\ 은 "
"씬들 사이에서 지속적인 정보를 저장하는 일반적인 사례를 해결하는 유용한 도구입"
"니다. 우리의 경우에는 서로 다른 이름을 가진 여러가지 싱글톤을 같은 씬이나 클"
"래스에 재사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:29
msgid "Using this concept, you can create objects that:"
msgstr "이 개념을 사용해서, 다음과 같은 객체를 만드실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:31
msgid "Are always loaded, no matter which scene is currently running"
msgstr "현재 실행 중인 씬과 상관없이, 항상 불러와집니다"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:32
msgid "Can store global variables, such as player information"
msgstr "플레이어 정보와 같은, 전역 변수를 저장할 수 있습니다"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:33
msgid "Can handle switching scenes and between-scene transitions"
msgstr "씬을 바꾸는 것과 씬 전환 사이를 다룰 수 있습니다"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:34
msgid ""
"Act like a singleton, since GDScript does not support global variables by "
"design"
msgstr "GDScript가 전역 변수를 지원하지 않기 때문에 싱글톤처럼 행동합니다"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:36
msgid "Autoloading nodes and scripts caters to this need."
msgstr "노드와 스크립트 오토로드는 이러한 필요를 충족시킵니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:39
msgid "AutoLoad"
msgstr "오토로드(AutoLoad)"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:41
msgid ""
"You can use AutoLoad to load a scene or a script that inherits from :ref:"
"`Node <class_Node>`. Note: when autoloading a script, a Node will be created "
"and the script will be attached to it. This node will be added to the root "
"viewport before any other scenes are loaded."
msgstr ""
":ref:`Node <class_Node>` 에서 상속하는 씬이나 스크립트를 불러오기 위해 오토로"
"드(AutoLoad)를 사용할 수 있습니다. 주석: 스크립트를 오토로드 할 떄, 노드가 만"
"들어지고 스크립트가 거기에 붙습니다. 이 노드는 다른 씬이 불러오기 전까지 루"
"트 뷰포트에 추가될 것입니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:48
msgid ""
"To autoload a scene or script, select ``Project -> Project Settings`` from "
"the menu and switch to the \"AutoLoad\" tab."
msgstr ""
"씬이나 스크립트를 오토로드 하기 위해, 메뉴에서 ``프로젝트 -> 프로젝트 설정`` "
"을 선택하고 \"오토로드\" 탭으로 갑니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:53
msgid ""
"Here you can add any number of scenes or scripts. Each entry in the list "
"requires a name, which is assigned as the node's ``name`` property. The "
"order of the entries as they are added to the global scene tree can be "
"manipulated using the up/down arrow keys."
msgstr ""
"여기서 원하는 씬이나 스크립트를 추가하실 수 있습니다. 목록에서 각 항목에는 노"
"드의 ``name`` 속성으로 지정하는 이름이 필요합니다. 글로벌 씬 트리에 추가된 항"
"목의 순서는 위/아래 방향키를 사용해 조작할 수 있습니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:60
msgid ""
"This means that any node can access a singleton named \"PlayerVariables\" "
"with:"
msgstr ""
"위의 경우, 어느 노드든지 \"PlayerVariables\" 라는 싱글톤을 액세스 할 수 있습"
"니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:73
msgid ""
"If the \"Enable\" column is checked (default true) then the singleton can "
"simply be accessed directly:"
msgstr ""
"\"Enable\" 항목이 체크 되어 있다면 (기본값은 true) 싱글톤은 쉽게 직접 액세스 "
"될 수 있습니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:86
msgid ""
"Note that autoload objects (scripts and/or scenes) are accessed just like "
"any other node in the scene tree. In fact, if you look at the running scene "
"tree, you'll see the autoloaded nodes appear:"
msgstr ""
"씬 트리에서 다른 노드와 마찬가지로 오토로드 객체 (스크립트 혹은 씬)는 액세스"
"됩니다. 사실, 실행하는 씬 트리를 보신다면, 오토로드 된 노드가 나타나는 것을 "
"보실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:93
msgid "Custom scene switcher"
msgstr "커스텀 씬 전환기"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:95
msgid ""
"This tutorial will demonstrate building a scene switcher using autoload. For "
"basic scene switching, you can use the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method (see :ref:`doc_scene_tree` for "
"details). However, if you need more complex behavior when changing scenes, "
"this method provides more functionality."
msgstr ""
"이 튜토리얼은 오토로드를 사용해 씬 전환기를 만드는 법을 설명할 것입니다. 기"
"본 씬 전환을 위해, :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` 메서드를 사용할 수 있습니다 (자세한 점"
"은 :ref:`doc_scene_tree`\\ 를 참고하세요). 하지만, 씬을 전환할 때 더 복잡한 "
"행동을 원한다면, 이 메서드가 더 많은 기능성을 제공합니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:101
msgid ""
"To begin, download the template from here: :download:`autoload.zip <files/"
"autoload.zip>` and open it in Godot."
msgstr ""
"시작하기 위해, 여기서 템플릿을 다운로드 하시고 :download:`autoload.zip "
"<files/autoload.zip>` 그리고 Godot에서 여세요."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:104
msgid ""
"The project contains two scenes: ``Scene1.tscn`` and ``Scene2.tscn``. Each "
"scene contains a label displaying the scene name and a button with its "
"``pressed()`` signal connected. When you run the project, it starts in "
"``Scene1.tscn``. However, pressing the button does nothing."
msgstr ""
"프로젝트는 두 개의 씬을 갖고 있습니다:  ``Scene1.tscn`` 과 ``Scene2.tscn`` 입"
"니다. 각 씬은 씬의 이름을 보여주는 라벨과 ``pressed()`` 시그널이 연결된 버튼"
"이 있습니다. 프로젝트를 실행할 때, ``Scene1.tscn`` 에서 시작합니다. 하지만, "
"버튼을 눌러도 아무렇지 않습니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:110
msgid "Global.gd"
msgstr "Global.gd"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:112
msgid ""
"Switch to the \"Script\" tab and create a new script called Global.gd. Make "
"sure it inherits from ``Node``:"
msgstr ""
"\"Script\" 탭으로 전환하고 Global.gd 라는 새 스크립트를 만듭니다. ``Node`` 에"
"서 상속하도록 하십시오:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:117
msgid ""
"The next step is to add this script to the autoLoad list. Open ``Project > "
"Project Settings`` from the menu, switch to the \"AutoLoad\" tab and select "
"the script by clicking the ``..`` button or typing its path: ``res://Global."
"gd``. Press \"Add\" to add it to the autoload list:"
msgstr ""
"다음은 이 스크립트를 오토로드 목록으로 추가하는 것입니다. 메뉴에서 ``프로젝"
"트 > 프로젝트 설정`` 을 열고, \"오토로드\" 탭으로 가서 ``..`` 를 클릭하거나 "
"경로 ``res://Global.gd`` 를 입력해서 스크립트를 선택합니다. \"추가\"를 눌러 "
"오토로드 목록에 추가하십시오:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:124
msgid ""
"Now whenever we run any scene in the project, this script will always be "
"loaded."
msgstr ""
"이제 언제든지 우리는 어떤 씬이 프로젝트에서 실행하든지, 이 스크립트가 항상 불"
"러와질 것입니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:126
msgid ""
"Returning to the script, it needs to fetch the current scene in the "
"`_ready()` function. Both the current scene (the one with the button) and "
"``global.gd`` are children of root, but autoloaded nodes are always first. "
"This means that the last child of root is always the loaded scene."
msgstr ""
"스크립트로 돌아가서, `_ready()` 함수에서 현재 씬을 가져와야 합니다. (버튼이 "
"있는) 현재 씬과 ``global.gd`` 는 둘 다 루트의 자식이지만, 오토로드 된 노드는 "
"항상 첫 번째 입니다. 즉, 루트의 마지막 자식은 항상 불러온 씬이라는 것입니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:158
msgid ""
"Now we need a function for changing the scene. This function needs to free "
"the current scene and replace it with the requested one."
msgstr ""
"이제, 우리는 씬을 바꾸기 위한 함수가 필요합니다. 이 함수는 현재 씬을 해제하"
"고 요청하는 것으로 바꾸어야 합니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:227
msgid ""
"As mentioned in the comments above, we need to avoid the situation of "
"deleting the current scene while it is still being used (i.e. its code is "
"still running), so using :ref:`Object.call_deferred() "
"<class_Object_method_call_deferred>` is required at this point. The result "
"is that the second function will run at a later time when any code from the "
"current scene has completed."
msgstr ""
"위의 설명에서 언급했듯이, 우리는 현재 씬을 사용하는 도중 (즉 코드가 여전히 실"
"행하는 도중) 삭제하는 상황을 피해야 합니다, 이 점에서 :ref:`Object."
"call_deferred() <class_Object_method_call_deferred>`\\ 를 사용해야 합니다. 결"
"과는 현재 씬의 코드가 완료될 때 두 번째 함수가 나중에 실행하는 것입니다."

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:233
msgid ""
"Finally, we need to fill the empty callback functions in the two scenes:"
msgstr "마지막으로, 두 씬에 비어있는 콜백 함수를 채워야 합니다:"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:253
#: ../../docs/tutorials/math/vector_math.rst:276
msgid "and"
msgstr "그리고"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:273
msgid ""
"Run the project and test that you can switch between scenes by pressing the "
"button!"
msgstr "프로젝트를 실행하고 버튼을 눌러 씬이 전환되는 지를 확인하세요!"

#: ../../docs/getting_started/step_by_step/singletons_autoload.rst:276
msgid ""
"Note: When scenes are small, the transition is instantaneous. However, if "
"your scenes are more complex, they may take a noticeable amount of time to "
"appear. To learn how to handle this, see the next tutorial: :ref:"
"`doc_background_loading`"
msgstr ""
"주석: 씬이 작을 때, 전환은 동시에 일어납니다. 하지만 씬이 더 복잡하다면, 눈"
"에 띄는 시간 차가 발생합니다. 어떻게 이를 다루는 지 배우기 위해, 다음 튜토리"
"얼을 확인하세요: :ref:`doc_background_loading`"

#: ../../docs/getting_started/editor/index.rst:2
msgid "Editor manual"
msgstr "에디터 매뉴얼"

#: ../../docs/getting_started/editor/unity_to_godot.rst:8
msgid "From Unity to Godot Engine"
msgstr "유니티(Unity)에서 Godot 엔진까지"

#: ../../docs/getting_started/editor/unity_to_godot.rst:10
msgid ""
"This guide provides an overview of Godot Engine from the viewpoint of a "
"Unity user, and aims to help you migrate your existing Unity experience into "
"the world of Godot."
msgstr ""
"이 가이드는 유니티 사용자의 관점에서 Godot 엔진의 개요를 제공합니다, 그리고 "
"존재하는 유니티 경험을 Godot라는 세상에 옮기도록 돕는 것에 중점을 둡니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:14
msgid "Differences"
msgstr "차이점"

#: ../../docs/getting_started/editor/unity_to_godot.rst:17
msgid "Unity"
msgstr "유니티(Unity)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:17
msgid "Godot"
msgstr "Godot(Godot)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:19
#: ../../docs/community/contributing/documentation_guidelines.rst:102
msgid "License"
msgstr "라이선스"

#: ../../docs/getting_started/editor/unity_to_godot.rst:19
msgid ""
"Proprietary, closed, free license with revenue caps and usage restrictions"
msgstr "수익 상한과 사용 제한이 있는 독점적이고 폐쇄적인 무료 라이선스"

#: ../../docs/getting_started/editor/unity_to_godot.rst:19
msgid "MIT license, free and fully open source without any restriction"
msgstr "MIT 라이선스로, 어떤 제한 없이 무료이고 완전한 오픈 소스"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "OS (editor)"
msgstr "OS (에디터)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "Windows, macOS, Linux (unofficial and unsupported)"
msgstr "윈도우, macOS, 리눅스 (비공식이고 지원되지 않음)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "Windows, macOS, X11 (Linux, \\*BSD)"
msgstr "윈도우, macOS, X11 (리눅스, \\*BSD)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "OS (export)"
msgstr "OS (내보내기)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "**Desktop:** Windows, macOS, Linux"
msgstr "**데스크톱:** 윈도우, macOS, 리눅스"

#: ../../docs/getting_started/editor/unity_to_godot.rst:24
msgid "**Mobile:** Android, iOS, Windows Phone, Tizen"
msgstr "**모바일:** 안드로이드, iOS, 윈도우 폰, 타이젠(Tizen)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "**Web:** WebAssembly or asm.js"
msgstr "**웹:** WebAssembly이나 asm.js"

#: ../../docs/getting_started/editor/unity_to_godot.rst:26
msgid "**Consoles:** PS4, PS Vita, Xbox One, Xbox 360, Wii U, Nintendo 3DS"
msgstr "**콘솔:** PS4, PS Vita, Xbox One, Xbox 360, Wii U, Nintendo 3DS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
msgid ""
"**VR:** Oculus Rift, SteamVR, Google Cardboard, Playstation VR, Gear VR, "
"HoloLens"
msgstr ""
"**VR:** 오큘러스 리프트, SteamVR, 구글 카드보드, 플레이스테이션 VR, Gear VR, "
"HoloLens"

#: ../../docs/getting_started/editor/unity_to_godot.rst:28
msgid "**TV:** Android TV, Samsung SMART TV, tvOS"
msgstr "**TV:** 안드로이드 TV, 삼성 스마트 TV, tvOS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "**Desktop:** Windows, macOS, X11"
msgstr "**데스크톱:** 윈도우, macOS, X11"

#: ../../docs/getting_started/editor/unity_to_godot.rst:24
msgid "**Mobile:** Android, iOS"
msgstr "**모바일:** 안드로이드, iOS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "**Web:** WebAssembly"
msgstr "**웹:** WebAssembly"

#: ../../docs/getting_started/editor/unity_to_godot.rst:26
msgid "**Console:** See :ref:`doc_consoles`"
msgstr "**콘솔:** :ref:`doc_consoles` 을 확인하세요"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
msgid "**VR:** Oculus Rift, SteamVR"
msgstr "**VR:** 오큘러스 리프트, SteamVR"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid "Scene system"
msgstr "씬 시스템"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid "Component/Scene (GameObject > Component)"
msgstr "컴포넌트/씬(GameObject > Component)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:31
msgid "Prefabs"
msgstr "프리펩"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid ""
":ref:`Scene tree and nodes <doc_scenes_and_nodes>`, allowing scenes to be "
"nested and/or inherit other scenes"
msgstr ""
":ref:`Scene tree and nodes <doc_scenes_and_nodes>`, 씬을 중첩하거나 다른 씬"
"을 상속할 수 있습니다"

#: ../../docs/getting_started/editor/unity_to_godot.rst:33
msgid "Third-party tools"
msgstr "타사 도구"

#: ../../docs/getting_started/editor/unity_to_godot.rst:33
msgid "Visual Studio or VS Code"
msgstr "비주얼 스튜디오 혹은 VS Code"

#: ../../docs/getting_started/editor/unity_to_godot.rst:33
msgid ":ref:`External editors are possible <doc_external_editor>`"
msgstr ":ref:`External editors are possible <doc_external_editor>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:34
msgid ":ref:`Android SDK for Android export <doc_exporting_for_android>`"
msgstr ":ref:`Android SDK for Android export <doc_exporting_for_android>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:36
msgid "Killer features"
msgstr "킬러 기능"

#: ../../docs/getting_started/editor/unity_to_godot.rst:36
msgid "Huge community"
msgstr "거대한 커뮤니티"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid "Large assets store"
msgstr "넓은 에셋 스토어"

#: ../../docs/getting_started/editor/unity_to_godot.rst:36
msgid "Scene System"
msgstr "씬 시스템"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid ":ref:`Animation Pipeline <doc_animations>`"
msgstr ":ref:`Animation Pipeline <doc_animations>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:38
msgid ":ref:`Easy to write Shaders <doc_shading_language>`"
msgstr ":ref:`Easy to write Shaders <doc_shading_language>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:39
msgid "Debug on Device"
msgstr "기기에서 디버그"

#: ../../docs/getting_started/editor/unity_to_godot.rst:46
msgid "The editor"
msgstr "에디터"

#: ../../docs/getting_started/editor/unity_to_godot.rst:48
msgid ""
"Godot Engine provides a rich-featured editor that allows you to build your "
"games. The pictures below display both editors with colored blocks to "
"indicate common functionalities."
msgstr ""
"Godot 엔진은 당신이 게임을 만들기 위한 풍부한 기능을 가진 에디터를 제공합니"
"다. 아래의 그림은 두 에디터 간 공통 기능을 표시하는 색칠된 사각형을 보여줍니"
"다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:55
msgid ""
"Note that Godot editor allows you to dock each panel at the side of the "
"scene editor you wish."
msgstr ""
"Godot 에디터는 당신이 원하는 씬 에디터 옆에 각 패널을 고정할 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:57
msgid ""
"While both editors may seem similar, there are many differences below the "
"surface. Both let you organize the project using the filesystem, but Godot's "
"approach is simpler with a single configuration file, minimalist text "
"format, and no metadata. All this contributes to Godot being much friendlier "
"to VCS systems, such as Git, Subversion, or Mercurial."
msgstr ""
"두 에디터가 비슷해 보이지만, 외양 아래에 많은 차이가 있습니다. 둘 다 파일 시"
"스템을 사용해서 프로젝트를 조직할 수 있지만, Godot의 접근은 하나의 구성 파"
"일, 미니멀리스트 텍스트 형식, 그리고 메타데이터가 없는 것으로 더 간단합니다. "
"이 모든 것이 Godot가 Git, Subversion, Mercurial와 같은 버전 관리 시스템에 훨"
"씬 더 친숙한 데 기여합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:62
msgid ""
"Godot's Scene panel is similar to Unity's Hierarchy panel but, as each node "
"has a specific function, the approach used by Godot is more visually "
"descriptive. In other words, it's easier to understand what a specific scene "
"does at a glance."
msgstr ""
"Godot의 씬 패널은 유니티의 계층 패널과 비슷하지만,각 노드는 특정 기능을 갖고 "
"있기 때문에, Godot에서 사용하는 접근은 더 시작적으로 묘사됩니다. 즉, 특정 씬"
"이 한눈에 무엇을 하는지 더 쉽게 이해할 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:66
msgid ""
"The Inspector in Godot is more minimalist and designed to only show "
"properties. Thanks to this, objects can export a much larger amount of "
"useful parameters to the user without having to hide functionality in "
"language APIs. As a plus, Godot allows animating any of those properties "
"visually, so changing colors, textures, enumerations, or even links to "
"resources in real-time is possible without involving code."
msgstr ""
"Godot의 인스펙터는 더 미니멀리스트하고 속성 만을 보여주기 위해 설계되었습니"
"다. 덕분에, 객체는 언어 API에서 기능성을 숨길 필요 없이 훨씬 더 넓은 유용한 "
"매개 변수를 사용자에게 내보낼 수 있습니다. 거기에, Godot는 어떤 시각적 속성"
"도 애니메이트 할 수 있기 때문에, 색상이나 텍스쳐, 열거, 혹은 심지어 리소스 링"
"크를 실시간으로 변경하는 것이 코드 없이 가능합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:71
msgid ""
"Finally, the Toolbar at the top of the screen is similar in the sense that "
"it allows controlling the project playback, but projects in Godot run in a "
"separate window, as they don't execute inside the editor (but the tree and "
"objects can still be explored in the debugger window)."
msgstr ""
"마지막으로, 화면 위의 툴바는 프로젝트 재생을 다루는 의미 상 비슷해 보입니다. "
"하지만 Godot의 프로젝트는 편집기 내부에서 실행되지 않고, 분리된 창에서 실행됩"
"니다 (하지만 디버거 창에서 트리와 객체를 계속 탐구할 수 있습니다)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:75
msgid ""
"This approach has the disadvantage that the running game can't be explored "
"from different angles (though this may be supported in the future and "
"displaying collision gizmos in the running game is already possible), but in "
"exchange has several advantages:"
msgstr ""
"이 접근은 실행 중인 게임을 다른 각도롤 볼 수 없다는 단점이 있습니다 (이 기능"
"을 향후 지원할지도 모르고 실행 중인 게임에 충돌 기즈모를 보여주는 것이 이미 "
"가능합니다), 하지만 그 대가로 몇 가지 이점을 갖습니다:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:79
msgid ""
"Running the project and closing it is fast (Unity has to save, run the "
"project, close the project, and then reload the previous state)."
msgstr ""
"프로젝트를 실행하고 종료하는 것이 빠릅니다 (유니티는 저장하고, 프로젝트를 실"
"행하고, 프로젝트를 종료하고, 그리고 이전 상태를 다시 불러와야 합니다)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:80
msgid ""
"Live editing is a lot more useful because changes done to the editor take "
"effect immediately in the game and are not lost (nor have to be synced) when "
"the game is closed. This allows fantastic workflows, like creating levels "
"while you play them."
msgstr ""
"실시간 편집은 에디터에서 변경한 사항이 게임에 즉시 적용되고 게임을 끌 때 (동"
"기화 할 필요도 없이) 사라지지 않으니 훨씬 더 유용합니다. 이것으로 플레이 도"
"중 레벨을 만드는 등의 환상적인 워크플로우가 가능합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:81
msgid "The editor is more stable because the game runs in a separate process."
msgstr "게임이 별도의 프로세스에서 실행되기 때문에 에디터는 더 안정적입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:83
msgid ""
"Finally, the top toolbar includes a menu for remote debugging. These options "
"make it simple to deploy to a device (connected phone, tablet, or browser "
"via HTML5), and debug/live edit on it after the game was exported."
msgstr ""
"마지막으로, 상단 툴바는 원격 디버깅을 위한 메뉴가 있습니다. 이 설정은 기기에 "
"배포하기 쉽도록 만듭니다 (핸드폰, 태블릿, 혹은 HTML5를 통한 브라우저를 연"
"결), 그리고 게임을 내보낸 후 디버그/실시간 편집을 거기서 하도록 만듭니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:88
msgid "The scene system"
msgstr "씬 시스템"

#: ../../docs/getting_started/editor/unity_to_godot.rst:90
msgid ""
"This is the most important difference between Unity and Godot and, actually, "
"the favourite feature of most Godot users."
msgstr ""
"유니티와 Godot와의 가장 중요한 차이점이자, Godot 사용자들이 가장 좋아하는 기"
"능입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:92
msgid ""
"Unity's scene system consists of embedding all the required assets in a "
"scene and linking them together by setting components and scripts to them."
msgstr ""
"유니티의 씬 시스템은 필요한 씬에 모든 에셋을 포함하고 구성 요소와 스크립트를 "
"설정함으로써 그들을 연결하도록 구성되어 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:95
msgid ""
"Godot's scene system is different: it actually consists of a tree made of "
"nodes. Each node serves a purpose: Sprite, Mesh, Light, etc. Basically, this "
"is similar to the Unity scene system. However, each node can have multiple "
"children, which makes each a subscene of the main scene. This means you can "
"compose a whole scene with different scenes stored in different files."
msgstr ""
"Godot의 씬 시스템은 다릅니다: 사실 노드로 이루어진 트리를 구성하고 있습니다. "
"각 노드는 용도를 지니고 있습니다: 스프라이트, 메시, 빛 등. 기본적으로 유니티"
"의 씬 시스템과 유사합니다. 하지만, 각 노드는 여러 개의 자식을 가질 수 있습니"
"다, 그리고 그 자식들을 각기 다른 하위 씬으로 만들 수 있습니다. 즉, 서로 다른 "
"파일에 저장된 여러 씬으로 전체 씬을 작업할 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:100
msgid ""
"For example, think of a platformer level. You would compose it with multiple "
"elements:"
msgstr ""
"예를 들어, 플랫포머 레벨을 생각해보자. 당신은 여러 요소들을 가지고 작업할 것"
"입니다:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:102
msgid "Bricks"
msgstr "벽돌"

#: ../../docs/getting_started/editor/unity_to_godot.rst:103
msgid "Coins"
msgstr "동전"

#: ../../docs/getting_started/editor/unity_to_godot.rst:104
msgid "The player"
msgstr "플레이어"

#: ../../docs/getting_started/editor/unity_to_godot.rst:105
msgid "The enemies"
msgstr "적"

#: ../../docs/getting_started/editor/unity_to_godot.rst:108
msgid ""
"In Unity, you would put all the GameObjects in the scene: the player, "
"multiple instances of enemies, bricks everywhere to form the ground of the "
"level and then multiple instances of coins all over the level. You would "
"then add various components to each element to link them and add logic in "
"the level: For example, you'd add a BoxCollider2D to all the elements of the "
"scene so that they can collide. This principle is different in Godot."
msgstr ""
"유니티에서, 모든 GameObjects를 씬에 넣을 것입니다: 플레이어, 여러 인스턴스 "
"된 적, 레벨을 만드는 벽돌, 그리고 모든 레벨에 있는 여러 인스턴스 된 동전입니"
"다. 그런 다음 각 요소들을 연결하고 레벨의 타당성을 주기 위한 다양한 구성 요소"
"를 추가할 것입니다: 예를 들어 모든 요소에 BoxCollider2D를 추가해서 씬의 모든 "
"요소가 충돌할 수 있도록 합니다. 이 원리가 Godot에서는 다릅니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:113
msgid ""
"In Godot, you would split your whole scene into 3 separate, smaller scenes, "
"which you would then instance in the main scene."
msgstr ""
"Godot에서, 전체 씬을 3개의, 더 작은 씬으로 나누고, 그들을 메인 씬에 인스턴스 "
"합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:115
msgid "**First, a scene for the Player alone.**"
msgstr "**먼저, 플레이어만 있는 씬입니다.**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:117
msgid ""
"Consider the player as a reusable element in other levels. It is composed of "
"one node in particular: an AnimatedSprite node, which contains the sprite "
"textures to form various animations (for example, walking animation)"
msgstr ""
"플레이어를 다른 레벨에도 재 사용 가능한 요소라고 생각해보세요. 특히 하나의 노"
"드로 구성됩니다: 다양한 애니메이션을 구성하기 위한 스프라이트 텍스쳐를 가진 "
"AnimatedSprite 노드 (예를 들면, 걷는 애니메이션)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:120
msgid "**Second, a scene for the Enemy.**"
msgstr "**두 번째, 적을 위한 씬입니다.**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:122
msgid ""
"There again, an enemy is a reusable element in other levels. It is almost "
"the same as the Player node - the only differences are the script (that "
"manages AI, mostly) and sprite textures used by the AnimatedSprite."
msgstr ""
"역시, 적은 다른 레벨에서 재 사용 가능합니다. Player 노드와 거의 똑같습니다 - "
"유일한 차이는 스크립트 입니다 (주로 AI를 다룹니다) 그리고 AnimatedSprite가 사"
"용되는 스프라이트 텍스쳐입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:126
msgid "**Lastly, the Level scene.**"
msgstr "**마지막으로, 레벨 씬입니다.**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:128
msgid ""
"It is composed of Bricks (for platforms), Coins (for the player to grab) and "
"a certain number of instances of the previous Enemy scene. These will be "
"different, separate enemies, whose behaviour and appearance will be the same "
"as defined in the Enemy scene. Each instance is then considered as a node in "
"the Level scene tree. Of course, you can set different properties for each "
"Enemy node (to change its color, for example)."
msgstr ""
"이것은 (플랫폼을 위한)블럭, (플레이어가 집을)동전 그리고 이전의 Enemy 씬의 일"
"정한 수의 인스턴스로 구성되어 있습니다. 이들은 다른, 분리된 적으로, 행동과 양"
"상은 같은 Enemy 씬에서 정의된 것과 같을 것입니다. 각 인스턴스는 이제 레벨 씬 "
"트리의 노드로 취급됩니다. 물론, 각 Enemy 노드 마다 다른 속성을 설정할 수 있습"
"니다 (예를 들어, 색상을 바꾸는 것)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:134
msgid ""
"Finally, the main scene would then be composed of one root node with 2 "
"children: a Player instance node, and a Level instance node. The root node "
"can be anything, generally a \"root\" type such as \"Node\" which is the "
"most global type, or \"Node2D\" (root type of all 2D-related nodes), "
"\"Spatial\" (root type of all 3D-related nodes) or \"Control\" (root type of "
"all GUI-related nodes)."
msgstr ""
"마지막으로, 메인 씬은 이제 한 루트 노드와 2개의 자식으로 구성될 것입니다: "
"Player 인스턴스 노드, 그리고 레벨 인스턴스 노드입니다. 루트 노드는 어떤 것도 "
"될 수 있지만, 일반적으로 \"루트\" 타입은 가장 전역 타입인 \"Node\"나, (모든 "
"2D 관련 노드의 루트 타입인) \"Node2D\", (모든 3D 관련 노드의 루트 타입인) "
"\"Spatial\", (모든 GUI 관련 노드의 루트 타입인) \"Control\"이 됩니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:140
msgid ""
"As you can see, every scene is organized as a tree. The same goes for nodes' "
"properties: you don't *add* a collision component to a node to make it "
"collidable like Unity does. Instead, you make this node a *child* of a new "
"specific node that has collision properties. Godot features various "
"collision types nodes, depending on the usage (see the :ref:`Physics "
"introduction <doc_physics_introduction>`)."
msgstr ""
"보시다시피, 모든 씬이 트리로 조직됩니다. 노드의 속성도 동일합니다: 유니티처"
"럼 노드가 충돌 가능하도록 충돌 구성 요소를 *추가* 할 수는 없습니다. 대신 충"
"돌 속성을 가진 새로운 특정 노드를 *자식* 으로 만들 수 있습니다. Godot는 사용"
"법에 따른 다양한 충돌 타입 노드가 있습니다 (:ref:`Physics introduction "
"<doc_physics_introduction>` 를 참고하세요)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:145
msgid ""
"Question: What are the advantages of this system? Wouldn't this system "
"potentially increase the depth of the scene tree? Besides, Unity allows "
"organizing GameObjects by putting them in empty GameObjects."
msgstr ""
"문제: 이 시스템의 장점은 무엇일까요? 이 시스템이 잠재적으로 씬 트리의 깊이를 "
"증가시키지 않을까요? 게다가, 유니티는 비어있는 GameObjects에 그들을 넣어서 "
"GameObjects를 조직할 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:147
msgid ""
"First, this system is closer to the well-known object-oriented paradigm: "
"Godot provides a number of nodes which are not clearly \"Game Objects\", but "
"they provide their children with their own capabilities: this is inheritance."
msgstr ""
"먼저, 이 시스템은 잘 알려진 객체 기반 어형 변화표와 근접합니다: Godot는 분명"
"하지 않은 \"Game Objects\"인 여러 노드들을 제공합니다, 하지만 그들은 자식에"
"게 자신의 능력을 제공합니다: 이것이 상속입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:148
msgid ""
"Second, it allows the extraction of a subtree of the scene to make it a "
"scene of its own, which answers the second and third questions: even if a "
"scene tree gets too deep, it can be split into smaller subtrees. This also "
"allows a better solution for reusability, as you can include any subtree as "
"a child of any node. Putting multiple nodes in an empty GameObject in Unity "
"does not provide the same possibility, apart from a visual organization."
msgstr ""
"두 번째로, 씬의 하위 트리를 추출하여 고유의 씬을 만들 수 있습니다, 이걸로 두 "
"번째와 세 번째 문제에 답할 수 있습니다: 비록 씬 트리가 너무 깊어지더라도, 더 "
"작은 하위 트리로 나눌 수 있습니다. 또한 하위 트리가 어떤 노드의 자식이든지 추"
"가될 수 있다는 점에서 재 사용 가능성에 더 좋은 해결책이 됩니다. 유니티에서 "
"빈 GameObject에 많은 노드를 넣는 것으로는 시각적인 조직과는 별개로, 이와 같"
"은 가능성을 제공하진 못합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:151
msgid ""
"These are the most important concepts you need to remember: \"node\", "
"\"parent node\", and \"child node\"."
msgstr ""
"기억해야 할 가장 중요한 개념들 입니다: \"노드\", \"부모 노드\" 그리고 \"자식 "
"노드\"."

#: ../../docs/getting_started/editor/unity_to_godot.rst:155
#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:4
msgid "Project organization"
msgstr "프로젝트 조직"

#: ../../docs/getting_started/editor/unity_to_godot.rst:159
msgid ""
"We previously observed that there is no perfect solution to set a project "
"architecture. Any solution will work for Unity and Godot, so this point has "
"a lesser importance."
msgstr ""
"우리는 이전에 프로젝트 구조를 설정하는 완벽한 해결책이 없다는 것을 인지하였습"
"니다. 어떤 해결책이든 유니티와 Godot를 위해 작동할 것이기에, 이 점은 덜 중요"
"합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:162
msgid ""
"However, we often observe a common architecture for Unity projects, which "
"consists of having one Assets folder in the root directory that contains "
"various folders, one per type of asset: Audio, Graphics, Models, Materials, "
"Scripts, Scenes, etc."
msgstr ""
"하지만, 우리는 종종 유니티 프로젝트를 위한 공통 구조를 발견합니다, 하나의 "
"Assets 폴더가 루트 디렉토리로 하여 타입에 맞는 다양한 폴더를 가지고 있습니"
"다: Audio, Graphics, Models, Materials, Scripts, Scenes 등."

#: ../../docs/getting_started/editor/unity_to_godot.rst:165
msgid ""
"As described before, the Godot scene system allows splitting scenes into "
"smaller scenes. Since each scene and subscene is actually one scene file in "
"the project, we recommend organizing your project a bit differently. This "
"wiki provides a page for this: :ref:`doc_project_organization`."
msgstr ""
"앞에서 설명한 것처럼, Godot 씬 시스템은 씬을 더 작은 씬으로 분리합니다. 각 씬"
"과 하위 씬은 사실 프로젝트에서 하나의 씬 파일이기 때문에, 우리는 프로젝트를 "
"약간 다르게 구성하기를 추천합니다. 이 위키는 이것을 위한 페이지를 제공합니"
"다: :ref:`doc_project_organization`."

#: ../../docs/getting_started/editor/unity_to_godot.rst:171
msgid "Where are my prefabs?"
msgstr "프리펩은 어디갔나요?"

#: ../../docs/getting_started/editor/unity_to_godot.rst:173
msgid ""
"The concept of prefabs as provided by Unity is a 'template' element of the "
"scene. It is reusable, and each instance of the prefab that exists in the "
"scene has an existence of its own, but all of them have the same properties "
"as defined by the prefab."
msgstr ""
"유니티가 제공하는 프리펩의 개념은 씬의 '템플릿' 요소입니다. 그것은 씬에 존재"
"하는 재 사용이 가능하며 씬에 존재하는 프리펩의 각 인스턴스는 주체성이 있지"
"만, 이 모두는 프리펩에 의해 정의된 같은 속성을 지닙니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:177
msgid ""
"Godot does not provide prefabs as such, but this functionality is here, "
"again, filled thanks to its scene system: As we saw, the scene system is "
"organized as a tree. Godot allows you to save a subtree of a scene as its "
"own scene, thus saved into its own file. This new scene can then be "
"instanced as many times as you want. Any change you make to this new, "
"separate scene will be applied to its instances. However, any change you "
"make to the instance will not have any impact on the 'template' scene."
msgstr ""
"Godot는 그러한 프리펩을 제공하진 않지만, 씬 시스템 덕분에 그 기능이 있습니"
"다: 우리가 씬 시스템이 트리처럼 조직된 것을 보셨습니다. Godot는 씬의 하위 트"
"리를 자체 씬으로 저장하여 자체 파일로 저장합니다. 이 새로운 씬은 그 뒤 원하"
"는 만큼 인스턴스 될 수 있습니다. 이 새로운 씬에 준 변화는 모든 인스턴스에 적"
"용될 것입니다. 하지만 그 변화가 '템플릿' 씬에 영향을 주지는 않을 것입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:185
msgid ""
"To be precise, you can modify the parameters of the instance in the "
"Inspector panel. However, the nodes that compose this instance are locked "
"although you can unlock them if you need to by right-clicking the instance "
"in the Scene tree and selecting \"Editable children\" in the menu. You don't "
"need to do this to add new children nodes to this node, but it is possible. "
"Remember that these new children will belong to the instance, not the "
"'template' scene. If you want to add new children to all the instances of "
"your 'template' scene, then you need to add them in the 'template' scene."
msgstr ""
"정확하게 말하면, 당신은 인스펙터 패널에서 인스턴스의 매개 변수를 수정할 수 있"
"습니다. 하지만, 비록 당신이 씬 트리에서 인스턴스를 우클릭하고 \"자식노드 편"
"집 가능\"를 선택하여 인스턴스를 잠금 해제할 수 있지만 이 인스턴스를 만드는 노"
"드는 잠겨있습니다. 새 자식 노드를 추가하려고 이 작업을 할 필요는 없지만 가능"
"은 합니다. 새 자식 은 인스턴스에 속해 있습니다, '템플릿' 씬이 아닙니다. '템플"
"릿' 씬의 모든 인스턴스에 새 자식을 추가하려면, '템플릿' 씬에 새 자식을 추가해"
"야 합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:195
msgid "Glossary correspondence"
msgstr "어휘 일치"

#: ../../docs/getting_started/editor/unity_to_godot.rst:197
msgid "GameObject -> Node"
msgstr "GameObject -> 노드"

#: ../../docs/getting_started/editor/unity_to_godot.rst:198
msgid "Add a component -> Inheriting"
msgstr "컴포넌트 추가 -> 상속"

#: ../../docs/getting_started/editor/unity_to_godot.rst:199
msgid "Prefab -> Externalized branch"
msgstr "프리펩 -> 외부화된 분기"

#: ../../docs/getting_started/editor/unity_to_godot.rst:203
msgid "Scripting: GDScript, C# and Visual Script"
msgstr "스크립팅: GDScript, C# and Visual Script"

#: ../../docs/getting_started/editor/unity_to_godot.rst:206
msgid "Design"
msgstr "디자인"

#: ../../docs/getting_started/editor/unity_to_godot.rst:208
msgid ""
"As you may know already, Unity supports C#. C# benefits from its integration "
"with Visual Studio and other features, such as static typing."
msgstr ""
"이미 알고 계시겠지만, Unity는 C#을 지원합니다. C#은 Visual Studio 및 정적 타"
"입과 같은 다른 기능과의 통합을 통해 이익을 얻습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:210
msgid ""
"Godot provides its own scripting language, :ref:`GDScript <doc_scripting>` "
"as well as support for :ref:`Visual Script <toc-learn-scripting-"
"visual_script>` and :ref:`C# <doc_c_sharp>`. GDScript borrows its syntax "
"from Python, but is not related to it. If you wonder about the reasoning for "
"a custom scripting language, please read the :ref:`doc_gdscript` and :ref:"
"`doc_faq` pages. GDScript is strongly attached to the Godot API and is "
"really easy to learn: Between one evening for an experienced programmer and "
"a week for a complete beginner."
msgstr ""
"Godot는 독자적인 스크립트 언어를 제공합니다, :ref:`GDScript <doc_scripting>`"
"\\ 와 :ref:`Visual Script <toc-learn-scripting-visual_script>`, 그리고 :ref:"
"`doc_c_sharp`\\ 을 지원합니다. GDScript는 Python의 구문을 빌려오지만, 관련은 "
"없습니다. 커스텀 스크립트 언어를 쓰는 이유가 궁금하시다면, :ref:"
"`doc_gdscript`\\ 와 :ref:`doc_faq`\\ 페이지를 읽어주시기 바랍니다. GDScript"
"는 Godot API와 밀접하고 배우기 쉽습니다: 숙련된 프로그래머든지 막 개발을 시작"
"한 사람이든지 말입니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:216
msgid ""
"Unity allows you to attach as many scripts as you want to a GameObject. Each "
"script adds a behaviour to the GameObject: For example, you can attach a "
"script so that it reacts to the player's controls, and another that controls "
"its specific game logic."
msgstr ""
"유니티는 GameObject에 원하는 만큼의 스크립트를 붙일 수 있습니다. 각 스크립트"
"는 GameObject에 행동을 추가합니다: 예를 들어 스크립트를 붙여서 플레이어의 조"
"작이나 특정 게임을 조작하는 다른 것을 넣을 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:220
msgid ""
"In Godot, you can only attach one script per node. You can use either an "
"external GDScript file or include the script directly in the node. If you "
"need to attach more scripts to one node, then you may consider two "
"solutions, depending on your scene and on what you want to achieve:"
msgstr ""
"Godot에서, 우리는 각 노드에 하나의 스크립트만 붙일 수 있습니다. 외부 "
"GDScript 파일이나 노드에 스크립트를 직접 넣어서 사용할 수 있습니다. 한 노드"
"에 더 많은 스크립트를 붙이고 싶다면, 씬이랑 원하는 것을 얻기 위해, 두 가지 방"
"안을 고려하셔야 합니다:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:224
msgid ""
"either add a new node between your target node and its current parent, then "
"add a script to this new node."
msgstr ""
"대상 노드와 현재 부모 노드 사이에 새 노드를 추가 한 다음, 이 노드에 스크립트"
"를 추가합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:225
msgid ""
"or, you can split your target node into multiple children and attach one "
"script to each of them."
msgstr ""
"또는, 대상 노드를 여러 자식 노드로 분할하고 각각마다 하나의 스크립트를 붙일 "
"수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:227
msgid ""
"As you can see, it can be easy to turn a scene tree to a mess. This is why "
"it is important to have a real reflection and consider splitting a "
"complicated scene into multiple, smaller branches."
msgstr ""
"보시다시피 씬 트리를 뒤죽박죽으로 만드는 것은 쉽습니다. 그렇기 때문에 실제 상"
"황을 반영하고 복잡한 씬을 여러 개의 작은 분기로 나누는 것이 중요합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:231
msgid "Connections: groups and signals"
msgstr "연결: 그룹과 시그널"

#: ../../docs/getting_started/editor/unity_to_godot.rst:233
msgid ""
"You can control nodes by accessing them using a script and calling functions "
"(built-in or user-defined) on them. But there's more: You can also place "
"them in a group and call a function on all nodes contained in this group! "
"This is explained in the :ref:`scripting documentation "
"<doc_scripting_continued>`."
msgstr ""
"스크립트를 사용하여 노드에 접속하고 노드에서 (내장 또는 커스텀) 함수를 호출하"
"여 노드를 제어할 수 있습니다. 하지만 더 있습니다: 노드를 그룹에 배치하고 이 "
"그룹에 있는 모든 노드에서 함수를 호출할 수도 있습니다! :ref:`스크립팅 문서에"
"서 <doc_scripting_continued>` 설명합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:237
msgid ""
"But there's more! Certain nodes throw signals when certain actions happen. "
"You can connect these signals to call a specific function when they happen. "
"Note that you can define your own signals and send them whenever you want. "
"See the :ref:`signals documentation <doc_gdscript_signals>` for details."
msgstr ""
"하지만 더 있습니다! 특정 노드는 특정 동작이 발생할 때 시그널을 보냅니다. 이러"
"한 신호를 연결하여 특정 기능을 호출할 수 있습니다. 자신만의 시그널을 정의하"
"고 원할 때마다 시그널을 보낼 수도 있습니다.  자세한 설명은 :ref:`시그널 문서"
"를 <doc_gdscript_signals>` 참고하세요."

#: ../../docs/getting_started/editor/unity_to_godot.rst:243
msgid "Script serialization"
msgstr "스크립트 직렬화"

#: ../../docs/getting_started/editor/unity_to_godot.rst:245
msgid "Unity can handle script serialization in two ways:"
msgstr "유니티는 두 가지 방법으로 스크립트 직렬화를 다룰 수 있습니다:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:247
msgid ""
"Implicit: All public fields in a class are automatically serialized if the "
"type is a serializable type (``Dictionary`` is not serializable)."
msgstr ""
"Implicit(암시적):  한 클래스의 모든 퍼블릭 필드가 직렬화 할 수 있는 타입이면 "
"(``Dictionary``\\ 는 직렬화 할 수 없음) 자동으로 직렬화 됩니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:248
msgid ""
"Explicit: Non-public fields can be serialized using the ``[SerializeField]`` "
"attribute."
msgstr ""
"Explicit(명시적): 비 퍼블릭 필드를 ``[SerializeField]`` 속성을 사용하여 직렬"
"화 되도록 할 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:250
#, fuzzy
msgid ""
"Godot also has a built-in script serialization system, but it works only "
"explicitly. You can serialize any serializable type (:ref:`built-in and "
"various engine types <doc_binary_serialization_api>`, including :ref:"
"`class_Array` and :ref:`class_Dictionary`) using the ``export`` keyword. See "
"the :ref:`exports documentation <doc_gdscript_exports>` for details."
msgstr ""
"Godot 또한 내장 스크립트 직렬화 시스템을 갖추고 있지만, 오직 명시적으로만 작"
"동합니다. 어떤 직렬화 가능한 타입이라도 (:ref:`built-in and various engine "
"types <doc_binary_serialization_api>`, 그리고 :ref:`class_Array`\\ 와 :ref:"
"`class_Dictionary`\\ 도 포함하여) ``export`` 키워드를 사용해 직렬화 할 수 있"
"습니다. 워크플로우는 `여기서 <../scripting/gdscript/gdscript_basics."
"html#exports>`_ 설명합니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:255
msgid ""
"Unity also has a data type called ``ScriptableObject`` used to serialize "
"custom asset objects. Its equivalent in Godot is the base class for all "
"resources: :ref:`class_Resource`. Creating a script that inherits :ref:"
"`class_Resource` will allow you to create custom serializable objects. More "
"information about resources can be found :ref:`here <doc_resources>`."
msgstr ""
"유니티 또한 커스텀 에셋 객체를 직렬화 하기 위해 사용되는 "
"``ScriptableObject`` 라는 데이터 타입을 갖고 있습니다. Godot에서 이것은 모든 "
"리소스의 기본 클래스에 해당합니다: :ref:`class_Resource`. :ref:"
"`class_Resource`\\ 를 상속하는 스크립트를 만드는 것으로 커스텀 직렬화 가능한 "
"객체를 만들 수 있게 됩니다. 리소스에 관한 더 많은 정보는 :ref:`여기서 "
"<doc_resources>` 볼 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:260
msgid "Using Godot in C++"
msgstr "C++로 Godot 사용하기"

#: ../../docs/getting_started/editor/unity_to_godot.rst:262
msgid ""
"For your information, Godot also allows you to develop your project directly "
"in C++ by using its API, which is not possible with Unity at the moment. As "
"an example, you can consider Godot Engine's editor as a \"game\" written in C"
"++ using Godot API."
msgstr ""
"정보를 위해, Godot는 또한 API를 사용하여 C ++로 프로젝트를 직접 개발할 수 있"
"게 해줍니다, 이는 현재 유니티에서는 불가능합니다. 예를 들어 Godot 엔진의 에디"
"터를 Godot API를 사용한 C ++로 작성된 \"게임\"으로 간주할 수 있습니다."

#: ../../docs/getting_started/editor/unity_to_godot.rst:264
msgid ""
"If you are interested in using Godot in C++, you may want to start reading "
"the :ref:`Developing in C++ <doc_introduction_to_godot_development>` page."
msgstr ""
"C++로 Godot를 사용하는 것에 관심이 있으시다면, :ref:`C++로 개발하기 "
"<doc_introduction_to_godot_development>` 페이지를 읽고 시작하시면 됩니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:4
msgid "Command line tutorial"
msgstr "명령 행(Command line) 튜토리얼"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:8
#, fuzzy
msgid ""
"Some developers like using the command line extensively. Godot is designed "
"to be friendly to them, so here are the steps for working entirely from the "
"command line. Given the engine relies on almost no external libraries, "
"initialization times are pretty fast, making it suitable for this workflow."
msgstr ""
"일부 개발자들은 명령 행을 광범위하게 사용하는 것을 좋아합니다. Godot는 그들에"
"게 친절하게 설계되었고, 여기에 명령 행에서 완전히 작업하는 과정이 있습니다. "
"엔진은 외부 라이브러리에 거의 의존하지 않아서, 초기화 시간이 매우 빠르고, 이 "
"워크플로우에 적합하게 만듭니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:15
msgid "Path"
msgstr "경로"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:17
#, fuzzy
msgid ""
"It is recommended that your Godot binary be in your PATH environment "
"variable, so it can be executed easily from any place by typing ``godot``. "
"You can do so on Linux by placing the Godot binary in ``/usr/local/bin`` and "
"making sure it is called ``godot``."
msgstr ""
"Godot 바이너리를 PATH 환경 변수에 넣어서, ``godot`` 을 입력하면 어느 곳이든 "
"쉽게 실행하도록 하는 것을 추천합니다. 리눅스에서 Godot 바이너리를 ``/ usr / "
"local / bin`` 에 배치하여, ``godot`` 라고 부르게 하십시오."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:23
msgid "Setting the project path"
msgstr "프로젝트 경로 설정하기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:25
msgid ""
"Depending on where your Godot binary is located and what your current "
"working directory is, you may need to set the path to your project for any "
"of the following commands to work correctly."
msgstr ""
"Godot 바이너리의 위치와 현재 작업 디렉토리의 위치에 따라, 다음 명령 중 하나"
"가 제대로 작동하려면 프로젝트의 경로를 설정해야 합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:29
msgid ""
"This can be done by giving the path to the ``project.godot`` file of your "
"project as either the first argument, like this:"
msgstr ""
"프로젝트의``project.godot`` 파일에 대한 경로를 다음과 같이 첫 번째 인자로 주"
"면 됩니다:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:36
msgid "Or by using the ``--path`` argument:"
msgstr "혹은 ``--path`` 인자를 사용합니다:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:42
msgid ""
"For example, the full command for exporting your game (as explained below) "
"might look like this:"
msgstr ""
"예를 들어, (아래에서 설명할) 게임을 내보내는 전체 명령은 다음과 같을 것입니"
"다:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:49
msgid "Creating a project"
msgstr "프로젝트 생성하기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:52
msgid ""
"Creating a project from the command line can be done by navigating the shell "
"to the desired place and making a project.godot file."
msgstr ""
"명령 행에서 프로젝트를 생성하려면 셸을 원하는 위치로 이동하고 project.godot "
"파일을 작성하십시오."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:63
msgid "The project can now be opened with Godot."
msgstr "프로젝트는 이제 Godot로 열릴 수 있습니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:67
msgid "Running the editor"
msgstr "에디터 실행하기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:69
#, fuzzy
msgid ""
"Running the editor is done by executing Godot with the ``-e`` flag. This "
"must be done from within the project directory or a subdirectory, otherwise "
"the command is ignored and the project manager appears."
msgstr ""
"에디터는 ``-e`` 플래그를 실행해서 실행됩니다. 작업은 프로젝트 디렉토리 또는 "
"하위 디렉토리에서 수행해야 합니다, 그렇지 않으면 명령이 무시되고 프로젝트 관"
"리자가 나타납니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:77
msgid ""
"If a scene has been created and saved, it can be edited later by running the "
"same code with that scene as argument."
msgstr ""
"씬을 만들고 저장한다면, 나중에 해당 씬을 인수로 사용하여 동일한 코드를 실행하"
"여 편집할 수 있습니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:85
msgid "Erasing a scene"
msgstr "씬 지우기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:87
msgid ""
"Godot is friends with your filesystem and will not create extra metadata "
"files. Use ``rm`` to erase a scene file. Make sure nothing references that "
"scene or else an error will be thrown upon opening."
msgstr ""
"Godot는 당신의 파일 시스템과 친하고 추가적인 메타데이터 파일을 만들기 않을 것"
"입니다. ``rm`` 을 사용해 씬 파일을 지웁니다. 참조하는 씬이 없다면 오류가 발생"
"할 것입니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:96
msgid "Running the game"
msgstr "게임 실행하기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:98
msgid ""
"To run the game, simply execute Godot within the project directory or "
"subdirectory."
msgstr ""
"게임을 실행하려면, 간단히 프로젝트 디렉토리나 하위 디렉토리에서 Godot를 실행"
"하면 됩니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:105
msgid ""
"When a specific scene needs to be tested, pass that scene to the command "
"line."
msgstr "특정 씬을 테스트 해야 하는 경우 씬을 명령 행으로 전달하십시오."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:113
msgid "Debugging"
msgstr "디버깅"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:115
#, fuzzy
msgid ""
"Catching errors in the command line can be a difficult task because they "
"just fly by. For this, a command line debugger is provided by adding ``-d``. "
"It works for running either the game or a simple scene."
msgstr ""
"명령 행에서 에러를 계산하는 것은 그냥 지나칠 수 있기 때문에 어려운 작업이 될 "
"수 있습니다. 이를 위해 명령 행 디버거는 ``-d`` 를 추가하여 제공합니다. 게임이"
"나 간단한 씬을 실행하는 데 모두 사용됩니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:132
msgid ""
"Exporting the project from the command line is also supported. This is "
"especially useful for continuous integration setups. The version of Godot "
"that is headless (server build, no video) is ideal for this."
msgstr ""
"명령 행에서 프로젝트를 내보내는 것도 지원됩니다. 특히 연속적인 통합 설정에 유"
"용합니다. 이 때문에 Godot의 헤드리스 버전은 (서버 빌드, 비디오 없음) 이상적입"
"니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:141
msgid ""
"The platform names recognized by the ``--export`` switch are the same as "
"displayed in the export wizard of the editor. To get a list of supported "
"platforms from the command line, try exporting to a non-recognized platform "
"and the full listing of platforms your configuration supports will be shown."
msgstr ""
"``--export`` 스위치가 인식하는 플랫폼 이름은 에디터의 내보내기 마법사에 표시"
"된 것과 동일합니다. 명령 행에서 지원하는 플랫폼 목록을 얻기 위해, 인지하지 않"
"는 플랫폼으로 내보내기를 시도하고 그러면 구성이 지원되는 전체 플랫폼 목록이 "
"나타날 것입니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:147
msgid ""
"To export a debug version of the game, use the ``--export-debug`` switch "
"instead of ``--export``. Their parameters and usage are the same."
msgstr ""
"게임의 디버그 버전을 내보내기 위해, ``--export`` 대신 ``--export-debug`` 스위"
"치를 사용하세요. 매개 변수와 사용법은 동일합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:151
msgid "Running a script"
msgstr "스크립트 실행하기"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:153
msgid ""
"It is possible to run a simple .gd script from the command line. This "
"feature is especially useful in large projects, for batch conversion of "
"assets or custom import/export."
msgstr ""
"명령 행에서 .gd 스크립트를 간단하게 실행할 수 있습니다.특히 일괄 변환 또는 커"
"스텀 가져 오기/내보내기를 위한, 큰 프로젝트에서 유용합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:157
msgid "The script must inherit from SceneTree or MainLoop."
msgstr "스크립트는 SceneTree나 MainLoop에서 상속해야 합니다."

#: ../../docs/getting_started/editor/command_line_tutorial.rst:159
msgid "Here is a simple example of how it works:"
msgstr "어떻게 작동하는 지의 예제입니다:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:170
msgid "And how to run it:"
msgstr "그리고 어떻게 실행하는 지의 예제입니다:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:177
msgid ""
"If no project.godot exists at the path, current path is assumed to be the "
"current working directory (unless ``-path`` is specified)."
msgstr ""
"project.godot이 경로에 존재하지 않으면, 현재 경로는 (``-path`` 가 지정되지 않"
"는 한) 현재 작업 디렉토리로 가정합니다."

#: ../../docs/getting_started/editor/external_editor.rst:4
msgid "Using an external text editor"
msgstr "외부 텍스트 에디터 사용하기"

#: ../../docs/getting_started/editor/external_editor.rst:6
msgid ""
"While Godot has an inbuilt text editor, some developers have a tendency to "
"want to use a text editor they are familiar with. Godot provides this option "
"via the options under ``Editor -> Editor Settings -> Text Editor -> "
"External``"
msgstr ""
"Godot에는 내장 텍스트 에디터가 있지만, 일부 개발자들은 그들에게 익숙한 텍스"
"트 에디터를 사용하려는 경향이 있습니다. Godot는 ``에디터 -> 에디터 설정 -> "
"Text Editor -> External`` 의 설정을 통해 이 선택을 제공합니다."

#: ../../docs/getting_started/editor/external_editor.rst:13
#, fuzzy
msgid ""
"There are two fields: the executable path and command line flags. The flags "
"allow you to better integrate the editor with Godot. Godot will replace the "
"following inside the flags parameter:"
msgstr ""
"두 필드가 있습니다: 실행 경로 그리고 명령 행 플래그 입니다. 플래그를 사용하"
"면 에디터를 Godot와 보다 잘 통합할 수 있습니다. Godot는 플래그 매개 변수에서 "
"다음을 바꿉니다:"

#: ../../docs/getting_started/editor/external_editor.rst:18
msgid "Field in Exec Flags"
msgstr "Exec Flags의 필드"

#: ../../docs/getting_started/editor/external_editor.rst:18
msgid "Is replaced with"
msgstr "를 이것으로 바꿉니다"

#: ../../docs/getting_started/editor/external_editor.rst:20
msgid "{project}"
msgstr "{project}"

#: ../../docs/getting_started/editor/external_editor.rst:20
msgid "The absolute path to the project directory"
msgstr "프로젝트 디렉토리의 절대 경로"

#: ../../docs/getting_started/editor/external_editor.rst:22
msgid "{file}"
msgstr "{file}"

#: ../../docs/getting_started/editor/external_editor.rst:22
msgid "The absolute path to the file"
msgstr "파일의 절대 경로"

#: ../../docs/getting_started/editor/external_editor.rst:24
msgid "{col}"
msgstr "{col}"

#: ../../docs/getting_started/editor/external_editor.rst:24
msgid "The column number of the error"
msgstr "오류의 열 번호"

#: ../../docs/getting_started/editor/external_editor.rst:26
msgid "{line}"
msgstr "{line}"

#: ../../docs/getting_started/editor/external_editor.rst:26
msgid "The line number of the error"
msgstr "오류의 행 번호"

#: ../../docs/getting_started/editor/external_editor.rst:29
msgid "Some example Exec Flags for various editors include:"
msgstr "다양한 에디터의 Exec Flags의 예는 다음과 같습니다:"

#: ../../docs/getting_started/editor/external_editor.rst:32
msgid "Exec Flags"
msgstr "Exec Flags"

#: ../../docs/getting_started/editor/external_editor.rst:34
#, fuzzy
msgid "Geany/Kate"
msgstr "기니(geany)/kate"

#: ../../docs/getting_started/editor/external_editor.rst:34
msgid "{file} --line {line} --column {col}"
msgstr "{file} --line {line} --column {col}"

#: ../../docs/getting_started/editor/external_editor.rst:36
#, fuzzy
msgid "Atom/Sublime Text"
msgstr "아톰(atom)/서브라임 텍스트(sublime text)"

#: ../../docs/getting_started/editor/external_editor.rst:36
msgid "{file}:{line}"
msgstr "{file}:{line}"

#: ../../docs/getting_started/editor/external_editor.rst:38
#, fuzzy
msgid "JetBrains Rider"
msgstr "Jetbrains rider (일종의 통합 개발환경)"

#: ../../docs/getting_started/editor/external_editor.rst:38
msgid "--line {line} {file}"
msgstr "--line {line} {file}"

#: ../../docs/getting_started/editor/external_editor.rst:40
#: ../../docs/development/cpp/configuring_an_ide.rst:267
#, fuzzy
msgid "Visual Studio Code"
msgstr "비주얼 스튜디오 혹은 VS Code"

#: ../../docs/getting_started/editor/external_editor.rst:40
msgid "{project} --goto {file}:{line}:{col}"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:4
#, fuzzy
msgid "GDScript basics"
msgstr "GDScript"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:9
msgid ""
"*GDScript* is a high level, dynamically typed programming language used to "
"create content. It uses a syntax similar to `Python <https://en.wikipedia."
"org/wiki/Python_%28programming_language%29>`_ (blocks are indent-based and "
"many keywords are similar). Its goal is to be optimized for and tightly "
"integrated with Godot Engine, allowing great flexibility for content "
"creation and integration."
msgstr ""
"*GDScript* 는 내용물을 생성하는데 사용되는, 하이 레벨인 동적 언어 프로그래밍 "
"언어입니다. `Python <https://en.wikipedia.org/wiki/Python_"
"%28programming_language%29>`_ 과 비슷한 구문을 사용합니다(블록은 들여쓰기 기"
"반이고 많은 키워드가 유사합니다). 목적은 Godot 엔진에 최적화되고 긴밀하게 통"
"합하도록 조직하여 콘텐츠 창작과 통합에 뛰어난 유연성을 주도록 하는 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:17
msgid "History"
msgstr "역사"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:19
msgid ""
"In the early days, the engine used the `Lua <http://www.lua.org>`__ "
"scripting language. Lua is fast, but creating bindings to an object oriented "
"system (by using fallbacks) was complex and slow and took an enormous amount "
"of code. After some experiments with `Python <https://www.python.org>`__, it "
"also proved difficult to embed."
msgstr ""
"초기에, 엔진은 `Lua <http://www.lua.org>`__ 스크립트 언어를 사용했습니다. Lua"
"는 빠르지만,(폴백(fallbacks)을 사용해서) 객체 지향 시스템에 대한 바인딩 만들"
"기는 복잡하고 느리고 엄청난 양의 코드를 사용했습니다. 이후 `Python <https://"
"www.python.org>`__ 을 사용해 보았지만, 이 또한 끼워 맞추기는 어려웠습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:25
msgid ""
"The last third party scripting language that was used for shipped games was "
"`Squirrel <http://squirrel-lang.org>`__, but it was dropped as well. At that "
"point, it became evident that a custom scripting language could more "
"optimally make use of Godot's particular architecture:"
msgstr ""
"게임에 옮기기 위해 사용한 마지막 외부 스크립트 언어는 `Squirrel <http://"
"squirrel-lang.org>`__ 이었습니다, 하지만 역시 떨어졌습니다. 이 시점에서, 커스"
"텀 스크립트 언어가 Godot의 특정 구조를 보다 최적으로 활용할 수 있다는 것이 분"
"명해졌습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:30
msgid ""
"Godot embeds scripts in nodes. Most languages are not designed with this in "
"mind."
msgstr ""
"Godot는 노드에 스크립트를 끼워 넣습니다. 대부분의 언어는 이를 염두에 두고 설"
"계되지 않았습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:32
msgid ""
"Godot uses several built-in data types for 2D and 3D math. Script languages "
"do not provide this, and binding them is inefficient."
msgstr ""
"Godot는 2D와 3D 수학에 몇 가지 내장 데이터 타입을 사용합니다. 스크립트 언어"
"는 이를 제공하지 않으며, 바인딩 하는 것은 비효율적입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:34
msgid ""
"Godot uses threads heavily for lifting and initializing data from the net or "
"disk. Script interpreters for common languages are not friendly to this."
msgstr ""
"Godot는 네트 혹은 디스크의 데이터를 들어 올리고 초기화하기 위해 스레드를 많"
"이 사용합니다. 일반적인 언어의 스크립트 인터프리터는 이것에 친절하지 않습니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:37
msgid ""
"Godot already has a memory management model for resources, most script "
"languages provide their own, which results in duplicate effort and bugs."
msgstr ""
"Godot는 이미 리소스를 위한 메모리 관리 모델을 갖고 있지만, 대부분의 스크립트 "
"언어는 자신들의 것을 제공하므로, 중복되는 노력과 버그가 발생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:40
msgid ""
"Binding code is always messy and results in several failure points, "
"unexpected bugs and generally low maintainability."
msgstr ""
"코드를 바인딩 하는 것은 항상 엉망이고 여러 오류 지점, 예측할 수 없는 버그, 그"
"리고 일반적으로 낮은 유지 능력을 초래합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:43
msgid ""
"The result of these considerations is *GDScript*. The language and "
"interpreter for GDScript ended up being smaller than the binding code itself "
"for Lua and Squirrel, while having equal functionality. With time, having a "
"built-in language has proven to be a huge advantage."
msgstr ""
"이 고려 사항의 결과물이 *GDScript* 입니다. GDScript의 언어와 인터프리터는 Lua"
"와 Squirrel의 바인딩 코드보다 작아졌습니다, 반면 같은 기능성을 갖습니다. 시간"
"이 흐르면서, 내장 언어는 큰 장점이 되었습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:49
msgid "Example of GDScript"
msgstr "GDScript 예제"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:51
msgid ""
"Some people can learn better by taking a look at the syntax, so here's a "
"simple example of how GDScript looks."
msgstr ""
"어떤 사람들은 구문을 보고 더 잘 배울 수도 있습니다, 그래서 여기 GDScript가 어"
"떻게 보이는 지에 대한 간단한 예제가 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:129
msgid ""
"If you have previous experience with statically typed languages such as C, C+"
"+, or C# but never used a dynamically typed one before, it is advised you "
"read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""
"이전에 동적 타입 언어가 아닌, C, C++, 아니면 C#과 같은 정적 타입 언어를 사용"
"해본 경험이 있으시다면, 이 튜토리얼을 읽으시기 바랍니다: :ref:"
"`doc_gdscript_more_efficiently`."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:134
msgid "Language"
msgstr "언어"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:136
msgid ""
"In the following, an overview is given to GDScript. Details, such as which "
"methods are available to arrays or other objects, should be looked up in the "
"linked class descriptions."
msgstr ""
"다음은, GDScript에 대한 개요입니다. 배열이나 다른 객체에 사용할 수 있는 메서"
"드와 같은 세부 정보는, 연결된 클래스 설명을 보시기 바랍니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:141
msgid "Identifiers"
msgstr "식별자(Identifiers)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:143
msgid ""
"Any string that restricts itself to alphabetic characters (``a`` to ``z`` "
"and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an "
"identifier. Additionally, identifiers must not begin with a digit. "
"Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""
"알파벳 물자로 제한하는 문자열 (``a`` 부터 ``z`` 그리고 ``A`` 부터 ``Z``), 숫"
"자 (digit) (``0`` 부터 ``9``) 그리고 ``_`` 는 식별자로서 권한을 지닙니다. 또"
"한, 식별자는 숫자로 시작할 수 없습니다. 식별자는 대소문자를 구별합니다 "
"(``foo`` 는 ``FOO`` 와 다릅니다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:149
msgid "Keywords"
msgstr "키워드(Keywords)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:151
msgid ""
"The following is the list of keywords supported by the language. Since "
"keywords are reserved words (tokens), they can't be used as identifiers. "
"Operators (like ``in``, ``not``, ``and`` or ``or``) and names of built-in "
"types as listed in the following sections are also reserved."
msgstr ""
"다음은 언어에서 지원하는 키워드 목록입니다. 키워드는 예약된 단어(토큰)이기 때"
"문에, 식별자로 사용될 수 없습니다. 다음 섹션에 나열된(``in``, ``not``, "
"``and`` 혹은 ``or`` 와 같은) 연산자와 내장 타입 이름 역시 예약된 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:156
msgid ""
"Keywords are defined in the `GDScript tokenizer <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ in "
"case you want to take a look under the hood."
msgstr ""
"키워드의 정체를 보고 싶다면 그들이 정의되는 `GDScript tokenizer <https://"
"github.com/godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer."
"cpp>`_ 에서 보십시오."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:160
msgid "Keyword"
msgstr "키워드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:160
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:7
#: ../../docs/getting_started/workflow/assets/importing_images.rst:50
#: ../../docs/tutorials/inputs/inputevent.rst:130
#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:27
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:21
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:322
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:366
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:431
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:15
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:115
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:166
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:262
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:17
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:70
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:115
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:164
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:30
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:51
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:92
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:158
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:218
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:242
#: ../../docs/tutorials/misc/binary_serialization_api.rst:92
#: ../../docs/tutorials/misc/binary_serialization_api.rst:101
#: ../../docs/tutorials/misc/binary_serialization_api.rst:110
#: ../../docs/tutorials/misc/binary_serialization_api.rst:119
#: ../../docs/tutorials/misc/binary_serialization_api.rst:132
#: ../../docs/tutorials/misc/binary_serialization_api.rst:143
#: ../../docs/tutorials/misc/binary_serialization_api.rst:158
#: ../../docs/tutorials/misc/binary_serialization_api.rst:171
#: ../../docs/tutorials/misc/binary_serialization_api.rst:190
#: ../../docs/tutorials/misc/binary_serialization_api.rst:205
#: ../../docs/tutorials/misc/binary_serialization_api.rst:220
#: ../../docs/tutorials/misc/binary_serialization_api.rst:239
#: ../../docs/tutorials/misc/binary_serialization_api.rst:264
#: ../../docs/tutorials/misc/binary_serialization_api.rst:295
#: ../../docs/tutorials/misc/binary_serialization_api.rst:310
#: ../../docs/tutorials/misc/binary_serialization_api.rst:319
#: ../../docs/tutorials/misc/binary_serialization_api.rst:330
#: ../../docs/tutorials/misc/binary_serialization_api.rst:340
#: ../../docs/tutorials/misc/binary_serialization_api.rst:359
#: ../../docs/tutorials/misc/binary_serialization_api.rst:371
#: ../../docs/tutorials/misc/binary_serialization_api.rst:383
#: ../../docs/tutorials/misc/binary_serialization_api.rst:396
#: ../../docs/tutorials/misc/binary_serialization_api.rst:407
#: ../../docs/tutorials/misc/binary_serialization_api.rst:418
#: ../../docs/tutorials/misc/binary_serialization_api.rst:426
#: ../../docs/tutorials/misc/binary_serialization_api.rst:439
#: ../../docs/tutorials/misc/binary_serialization_api.rst:452
#: ../../docs/tutorials/misc/binary_serialization_api.rst:467
msgid "Description"
msgstr "설명"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:162
msgid "if"
msgstr "if"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:162
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:164
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:166
msgid "See `if/else/elif`_."
msgstr "`if/else/elif`_ 를 보십시오."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:164
msgid "elif"
msgstr "elif"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:166
msgid "else"
msgstr "else"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:168
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:821
msgid "for"
msgstr "for"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:168
msgid "See for_."
msgstr "for_ 를 보십시오."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:170
msgid "do"
msgstr "do"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:170
msgid "Reserved for future implementation of do...while loops."
msgstr "do...while 루프의 향후 구현을 위해 예약됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:172
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:810
msgid "while"
msgstr "while"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:172
msgid "See while_."
msgstr "while_ 을 보십시오."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:174
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:850
msgid "match"
msgstr "match"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:174
msgid "See match_."
msgstr "match_ 를 보십시오."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:176
msgid "switch"
msgstr "switch"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:176
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:178
msgid "Reserved for future implementation."
msgstr "향후 구현을 위해 예약됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:178
msgid "case"
msgstr "case"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:180
msgid "break"
msgstr "break"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:180
msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr "현재의 ``for`` 또는 ``while`` 루프 실행을 끝냅니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:182
msgid "continue"
msgstr "continue"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:182
msgid ""
"Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr "즉시 ``for`` 또는``while`` 루프의 다음 반복으로 건너 뜁니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:184
msgid "pass"
msgstr "pass"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:184
msgid ""
"Used where a statement is required syntactically but execution of code is "
"undesired, e.g. in empty functions."
msgstr ""
"명령문이 문법적으로 필요하지만 코드의 실행이 바람직하지 않을 때 사용됩니다, "
"예를 들어 비어있는 함수에서 쓰입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:186
msgid "return"
msgstr "return"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:186
msgid "Returns a value from a function."
msgstr "함수에서 값을 반환합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:188
msgid "class"
msgstr "class"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:188
msgid "Defines a class."
msgstr "클래스를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:190
msgid "extends"
msgstr "extends"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:190
msgid "Defines what class to extend with the current class."
msgstr "현재 클래스로 확장할 클래스를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:192
#: ../../docs/tutorials/i18n/locales.rst:360
msgid "is"
msgstr "is"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:192
msgid ""
"Tests whether a variable extends a given class, or is of a given built-in "
"type."
msgstr ""
"변수가 주어진 클래스를 확장하는지, 혹은 변수가 주어진 내장 타입인지 여부를 테"
"스트합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:194
msgid "as"
msgstr "as"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:194
msgid "Cast the value to a given type if possible."
msgstr "가능한 경우 값은 주어진 타입으로 캐스트 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:196
msgid "self"
msgstr "self"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:196
msgid "Refers to current class instance."
msgstr "현재 클래스 인스턴스를 참조합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:198
msgid "tool"
msgstr "tool"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:198
msgid "Executes the script in the editor."
msgstr "에디터에서 스크립트를 실행합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:200
msgid "signal"
msgstr "signal"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:200
msgid "Defines a signal."
msgstr "시그널을 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:202
msgid "func"
msgstr "func"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:202
msgid "Defines a function."
msgstr "함수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:204
msgid "static"
msgstr "static"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:204
msgid "Defines a static function. Static member variables are not allowed."
msgstr "정적 함수를 정의합니다. 정적 멤버 변수는 허용되지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:206
msgid "const"
msgstr "const"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:206
msgid "Defines a constant."
msgstr "상수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:208
msgid "enum"
msgstr "enum"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:208
msgid "Defines an enum."
msgstr "열거 형을 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:210
msgid "var"
msgstr "var"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:210
msgid "Defines a variable."
msgstr "변수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:212
msgid "onready"
msgstr "onready"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:212
msgid ""
"Initializes a variable once the Node the script is attached to and its "
"children are part of the scene tree."
msgstr ""
"스크립트가 첨부된 노드와 그것의 자식이 씬 트리의 일부인 경우 변수를 초기화합"
"니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:214
msgid "export"
msgstr "export"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:214
msgid ""
"Saves a variable along with the resource it's attached to and makes it "
"visible and modifiable in the editor."
msgstr ""
"첨부된 리소스를 변수와 함께 저장하고 에디터에서 변수를 표시하고 수정할 수 있"
"게 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:216
msgid "setget"
msgstr "setget"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:216
msgid "Defines setter and getter functions for a variable."
msgstr "변수에 대한 setter와 getter 함수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:218
msgid "breakpoint"
msgstr "breakpoint"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:218
msgid "Editor helper for debugger breakpoints."
msgstr "디버거 중단점을 위한 에디터 도우미."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:220
msgid "preload"
msgstr "preload"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:220
msgid "Preloads a class or variable. See `Classes as resources`_."
msgstr ""
"클래스나 변수를 미리 로드 (Preload)합니다. `Classes as resources`_ 를 참고하"
"세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:222
msgid "yield"
msgstr "yield"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:222
msgid "Coroutine support. See `Coroutines with yield`_."
msgstr "코루틴을 지원합니다. `Coroutines with yield`_ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:224
msgid "assert"
msgstr "assert"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:224
msgid ""
"Asserts a condition, logs error on failure. Ignored in non-debug builds. See "
"`Assert keyword`_."
msgstr ""
"조건을 가정하고 실패 시 오류를 기록합니다. 디버그가 아닌 빌드에는 무시됩니"
"다. `Assert keyword`_ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:226
msgid "remote"
msgstr "remote"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:226
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:228
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:230
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:232
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:234
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:236
msgid ""
"Networking RPC annotation. See :ref:`high-level multiplayer docs "
"<doc_high_level_multiplayer>`."
msgstr ""
"네트워킹 RPC(원격 절차 호출) 주석. :ref:`high-level multiplayer docs "
"<doc_high_level_multiplayer>` 을 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:228
msgid "master"
msgstr "master"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:230
msgid "puppet"
msgstr "puppet"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:232
msgid "remotesync"
msgstr "remotesync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:234
msgid "mastersync"
msgstr "mastersync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:236
msgid "puppetsync"
msgstr "puppetsync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:238
msgid "PI"
msgstr "PI"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:238
msgid "PI constant."
msgstr "PI 상수."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:240
msgid "TAU"
msgstr "TAU"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:240
msgid "TAU constant."
msgstr "TAU 상수."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:242
msgid "INF"
msgstr "INF"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:242
msgid "Infinity constant. Used for comparisons."
msgstr "무한대 상수. 비교에 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:244
msgid "NAN"
msgstr "NAN"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:244
msgid "NAN (not a number) constant. Used for comparisons."
msgstr "NAN (숫자 아님) 상수. 비교에 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:248
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:472
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:179
msgid "Operators"
msgstr "연산자(Operators)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:250
msgid "The following is the list of supported operators and their precedence."
msgstr "다음은 지원되는 연산자 목록과 그 우선 순위 입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:253
msgid "**Operator**"
msgstr "**연산자**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:253
#: ../../docs/getting_started/workflow/export/feature_tags.rst:33
msgid "**Description**"
msgstr "**설명**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:255
msgid "``x[index]``"
msgstr "``x[index]``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:255
msgid "Subscription, Highest Priority"
msgstr "구독(Subscription), 최우선 순위"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:257
msgid "``x.attribute``"
msgstr "``x.attribute``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:257
msgid "Attribute Reference"
msgstr "속성 참조"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:259
msgid "``is``"
msgstr "``is``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:259
msgid "Instance Type Checker"
msgstr "인스턴스 타입 검사기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:261
msgid "``~``"
msgstr "``~``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:261
msgid "Bitwise NOT"
msgstr "비트 단위 NOT"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:263
msgid "``-x``"
msgstr "``-x``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:263
msgid "Negative / Unary Negation"
msgstr "음수 / 단항 부정"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:265
msgid "``*`` ``/`` ``%``"
msgstr "``*`` ``/`` ``%``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:265
msgid "Multiplication / Division / Remainder"
msgstr "곱하기 / 나누기 / 나머지"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:267
msgid ""
"These operators have the same behavior as C++. Integer division is truncated "
"rather than returning a fractional number, and the % operator is only "
"available for ints (\"fmod\" for floats)"
msgstr ""
"이 연산자들은 C++의 연산자들처럼 행동합니다. 정수로 분할 시에 소수점 부분은 "
"반환되지 않고 잘려나가며, % 연산자는 정수형(float의 경우는 \"fmod\") 끼리의 "
"연산에서만 사용할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:273
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:134
msgid "``+``"
msgstr "``+``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:273
msgid "Addition / Concatenation of Arrays"
msgstr "배열의 추가 / 연결"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:275
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:143
msgid "``-``"
msgstr "``-``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:275
msgid "Subtraction"
msgstr "빼기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:277
msgid "``<<`` ``>>``"
msgstr "``<<`` ``>>``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:277
msgid "Bit Shifting"
msgstr "비트 자리 옮김"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:279
msgid "``&``"
msgstr "``&``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:279
msgid "Bitwise AND"
msgstr "비트 단위 AND"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:281
msgid "``^``"
msgstr "``^``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:281
msgid "Bitwise XOR"
msgstr "비트 단위 XOR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:283
msgid "``|``"
msgstr "``|``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:283
msgid "Bitwise OR"
msgstr "비트 단위 OR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:285
msgid "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"
msgstr "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:285
msgid "Comparisons"
msgstr "비교"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:287
msgid "``in``"
msgstr "``in``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:287
msgid "Content Test"
msgstr "콘텐츠 테스트"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:289
msgid "``!`` ``not``"
msgstr "``!`` ``not``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:289
msgid "Boolean NOT"
msgstr "불 방식 NOT"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:291
msgid "``and`` ``&&``"
msgstr "``and`` ``&&``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:291
msgid "Boolean AND"
msgstr "불 방식 AND"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:293
msgid "``or`` ``||``"
msgstr "``or`` ``||``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:293
msgid "Boolean OR"
msgstr "불 방식 OR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:295
msgid "``if x else``"
msgstr "``if x else``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:295
msgid "Ternary if/else"
msgstr "3진 if/else"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:297
msgid "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=``"
msgstr "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:297
msgid "Assignment, Lowest Priority"
msgstr "할당, 최하위 우선 순위"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:301
msgid "Literals"
msgstr "상수(Literal)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:304
msgid "**Literal**"
msgstr "**상수**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:304
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:242
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:264
msgid "**Type**"
msgstr "**타입**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:306
msgid "``45``"
msgstr "``45``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:306
msgid "Base 10 integer"
msgstr "기본 10 정수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:308
msgid "``0x8F51``"
msgstr "``0x8F51``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:308
msgid "Base 16 (hex) integer"
msgstr "기본 16 (hex) 정수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:310
msgid "``3.14``, ``58.1e-10``"
msgstr "``3.14``, ``58.1e-10``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:310
msgid "Floating point number (real)"
msgstr "부동 소수점 숫자 (실수)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:312
msgid "``\"Hello\"``, ``\"Hi\"``"
msgstr "``\"안녕하세요\"``, ``\"안녕\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:312
msgid "Strings"
msgstr "문자열"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:314
msgid "``\"\"\"Hello\"\"\"``"
msgstr "``\"\"\"안녕하세요\"\"\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:314
msgid "Multiline string"
msgstr "여러 줄 문자열"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:316
msgid "``@\"Node/Label\"``"
msgstr "``@\"Node/Label\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:316
msgid "NodePath or StringName"
msgstr "노드 경로(NodePath) 혹은 문자열 이름(StringName)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:318
msgid "``$NodePath``"
msgstr "``$NodePath``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:318
msgid "Shorthand for ``get_node(\"NodePath\")``"
msgstr "``get_node(\"NodePath\")`` 의 속기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:322
msgid "Comments"
msgstr "주석(Comment)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:324
msgid ""
"Anything from a ``#`` to the end of the line is ignored and is considered a "
"comment."
msgstr "``#`` 부터 줄 끝까지는 주석으로 간주되어 무시됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:332
msgid ""
"Multi-line comments can be created using \"\"\" (three quotes in a row) at "
"the beginning and end of a block of text. Note that this creates a string, "
"therefore, it will not be stripped away when the script is compiled."
msgstr ""
"여러 줄 주석은 \"\"\" (3 행 따옴표)를 시작과 끝에 사용해서 만들 수 있습니다. "
"이렇게 하면 문자열이 만들어지므로 스크립트를 컴파일할 때 문자열이 제거되지 않"
"습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:345
msgid "Built-in types"
msgstr "내장 타입(Built-in type)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:347
msgid ""
"Built-in types are stack-allocated. They are passed as values. This means a "
"copy is created on each assignment or when passing them as arguments to "
"functions. The only exceptions are ``Array``\\ s and ``Dictionaries``, which "
"are passed by reference so they are shared. (Not ``PoolArray``\\ s like "
"``PoolByteArray`` though, those are passed as values too, so consider this "
"when deciding which to use!)"
msgstr ""
"내장 타입은 스택 할당됩니다. 그들은 값으로 전달됩니다. 즉, 함수로 그들을 각 "
"할당이나 인수로 전달할 때 복사본이 만들어집니다. 유일한 예외는 ``Array`` 형식"
"과 ``Dictionaries`` 입니다, 그들은 참조로 전달되어 공유됩니다.(``PoolArray`` "
"형식은 ``PoolByteArray`` 와 다르지만, 이것도 값으로 전달되므로, 사용할 것을 "
"결정할 때 이를 고려하십시오!)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:354
msgid "Basic built-in types"
msgstr "기본 내장 타입"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:356
msgid "A variable in GDScript can be assigned to several built-in types."
msgstr "GDScript의 변수는 여러가지 내장 타입에 할당될 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:359
#: ../../docs/tutorials/misc/binary_serialization_api.rst:25
msgid "null"
msgstr "null"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:361
msgid ""
"``null`` is an empty data type that contains no information and can not be "
"assigned any other value."
msgstr ""
"``null`` 은 빈 데이터 타입으로 정보를 포함하고 있지 않고 다른 값을 할당할 수 "
"없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:365
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:104
#: ../../docs/tutorials/misc/binary_serialization_api.rst:27
msgid "bool"
msgstr "bool"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:367
msgid "The Boolean data type can only contain ``true`` or ``false``."
msgstr "불 데이터 타입으로 ``true`` 나 ``false`` 만을 가지고 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:370
msgid "int"
msgstr "int"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:372
msgid ""
"The integer data type can only contain integer numbers, (both negative and "
"positive)."
msgstr "정수 데이터 타입은 오직 정수만 가질 수 있습니다, (음수와 양수 둘 다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:376
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:100
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:166
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:168
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:170
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:172
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:226
#: ../../docs/tutorials/misc/binary_serialization_api.rst:31
msgid "float"
msgstr "float"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:378
msgid "Used to contain a floating point value (real numbers)."
msgstr "부동 소수점 값 (실수)을 갖기 위해 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:381
msgid ":ref:`String <class_String>`"
msgstr ":ref:`String <class_String>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:383
msgid ""
"A sequence of characters in `Unicode format <https://en.wikipedia.org/wiki/"
"Unicode>`_. Strings can contain the `standard C escape sequences <https://en."
"wikipedia.org/wiki/Escape_sequences_in_C>`_. GDScript supports :ref:`format "
"strings aka printf functionality <doc_gdscript_printf>`."
msgstr ""
"`유니 코드 형식 <https://en.wikipedia.org/wiki/Unicode>`_ 에 있는 문자열. 문"
"자열은 `표준 C 이스케이프 시퀀스 <https://en.wikipedia.org/wiki/"
"Escape_sequences_in_C>`_ 를 가질 수 있습니다. GDScript는 :ref:`형식 문자열 일"
"명 printf 기능 <doc_gdscript_printf>` 을 지원합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:389
msgid "Vector built-in types"
msgstr "벡터 내장 타입"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:392
msgid ":ref:`Vector2 <class_Vector2>`"
msgstr ":ref:`Vector2 <class_Vector2>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:394
msgid ""
"2D vector type containing ``x`` and ``y`` fields. Can also be accessed as "
"array."
msgstr ""
"2D 벡터 타입으로 ``x`` 와 ``y`` 필드를 가지고 있습니다. 배열로 접근될 수도 있"
"습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:398
msgid ":ref:`Rect2 <class_Rect2>`"
msgstr ":ref:`Rect2 <class_Rect2>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:400
msgid ""
"2D Rectangle type containing two vectors fields: ``position`` and ``size``. "
"Alternatively contains an ``end`` field which is ``position+size``."
msgstr ""
"2D 사각형 타입으로 두 개의 벡터 필드를 가지고 있습니다: ``position`` 과 "
"``size`` 입니다. 또는 ``position+size`` 를 뜻하는 ``end`` 필드를 가집니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:404
msgid ":ref:`Vector3 <class_Vector3>`"
msgstr ":ref:`Vector3 <class_Vector3>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:406
msgid ""
"3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be "
"accessed as an array."
msgstr ""
"3D 벡터 타입으로 ``x``, ``y`` 그리고 ``z`` 필드를 가지고 있습니다. 배열로 접"
"근될 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:410
msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr ":ref:`Transform2D <class_Transform2D>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:412
msgid "3x2 matrix used for 2D transforms."
msgstr "3x2 행렬로 2D 변형에 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:415
msgid ":ref:`Plane <class_Plane>`"
msgstr ":ref:`Plane <class_Plane>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:417
msgid ""
"3D Plane type in normalized form that contains a ``normal`` vector field and "
"a ``d`` scalar distance."
msgstr ""
"3D 평면 타입의 표준화된 형태로 ``normal`` 벡터 필드와 ``d`` 스칼라 거리를 포"
"함합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:421
msgid ":ref:`Quat <class_Quat>`"
msgstr ":ref:`Quat <class_Quat>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:423
msgid ""
"Quaternion is a datatype used for representing a 3D rotation. It's useful "
"for interpolating rotations."
msgstr ""
"사원수(Quaternion)는 3D 회전을 표현하기 위해 사용되는 데이터 타입입니다. 회전"
"을 보간하기에 유용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:427
msgid ":ref:`AABB <class_AABB>`"
msgstr ":ref:`AABB <class_AABB>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:429
msgid ""
"Axis-aligned bounding box (or 3D box) contains 2 vectors fields: "
"``position`` and ``size``. Alternatively contains an ``end`` field which is "
"``position+size``."
msgstr ""
"축이 정렬된 경계 상자로 (혹은 3D 상자) 2개의 벡터 필드를 갖습니다: "
"``position`` 과 ``size`` 입니다. 또는 ``position+size`` 를 뜻하는 ``end`` 필"
"드를 갖습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:434
msgid ":ref:`Basis <class_Basis>`"
msgstr ":ref:`Basis <class_Basis>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:436
msgid ""
"3x3 matrix used for 3D rotation and scale. It contains 3 vector fields "
"(``x``, ``y`` and ``z``) and can also be accessed as an array of 3D vectors."
msgstr ""
"3x3 행렬로 3D 회전과 규모에 사용됩니다. 3 개의 벡터 필드 (``x``, ``y`` 그리"
"고 ``z``)를 가지며 3D 벡터의 배열로 접근될 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:441
msgid ":ref:`Transform <class_Transform>`"
msgstr ":ref:`Transform <class_Transform>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:443
msgid ""
"3D Transform contains a Basis field ``basis`` and a Vector3 field ``origin``."
msgstr ""
"3D 변형(Transform)으로 기반 필드인 ``basis`` 와 Vector3 필드인 ``origin`` 을 "
"갖습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:447
msgid "Engine built-in types"
msgstr "엔진 내장 타입"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:450
msgid ":ref:`Color <class_Color>`"
msgstr ":ref:`Color <class_Color>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:452
msgid ""
"Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can also "
"be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""
"색상 데이터 타입으로 ``r``, ``g``, ``b``, 그리고 ``a`` 필드를 갖습니다. 색조/"
"채도/색가를 위한 ``h``, ``s``, 그리고 ``v`` 로 접근될 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:456
msgid ":ref:`NodePath <class_NodePath>`"
msgstr ":ref:`NodePath <class_NodePath>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:458
msgid ""
"Compiled path to a node used mainly in the scene system. It can be easily "
"assigned to, and from, a String."
msgstr ""
"주로 씬 시스템에 사용되는 노드로 컴파일 된 경로. 쉽게 문자열에 할당하거나 문"
"자열이 될 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:462
msgid ":ref:`RID <class_RID>`"
msgstr ":ref:`RID <class_RID>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:464
msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""
"리소스 ID (RID). 서버는 불투명한 데이터를 참조하기 위해 기본 RID를 사용합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:467
msgid ":ref:`Object <class_Object>`"
msgstr ":ref:`Object <class_Object>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:469
msgid "Base class for anything that is not a built-in type."
msgstr "내장 타입이 아닌 것을 위한 기본 클래스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:472
msgid "Container built-in types"
msgstr "컨테이너 내장 타입"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:475
msgid ":ref:`Array <class_Array>`"
msgstr ":ref:`Array <class_Array>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:477
msgid ""
"Generic sequence of arbitrary object types, including other arrays or "
"dictionaries (see below). The array can resize dynamically. Arrays are "
"indexed starting from index ``0``. Starting with Godot 2.1, indices may be "
"negative like in Python, to count from the end."
msgstr ""
"임의 객체 타입의 일반적인 열로, 다른 배열이다 딕셔너리를 포함하고 있습니다 "
"(아래를 참고하세요). 배열의 크기는 동적으로 변경할 수 있습니다. 배열은 인덱"
"스 ``0`` 부터 인덱스가 붙기 시작합니다. Godot 2.1부터는, 끝에서 세도록 하기 "
"위해, Python처럼 인덱스가 음수일 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:491
#, fuzzy
msgid ""
"GDScript arrays are allocated linearly in memory for speed. Large arrays "
"(more than tens of thousands of elements) may however cause memory "
"fragmentation. If this is a concern, special types of arrays are available. "
"These only accept a single data type. They avoid memory fragmentation and "
"also use less memory but are atomic and tend to run slower than generic "
"arrays. They are therefore only recommended to use for large data sets:"
msgstr ""
"GDScript 배열은 속도를 위해 선형적으로 메모리에 할당됩니다. (수 만개보다 더) "
"많은 배열은 메모리 조각화를 발생할 수 있습니다. 이것이 염려된다면 특수 타입"
"의 배열을 사용하실 수 있습니다. 이것들은 하나의 데이터 타입만을 허용합니다. "
"메모리 조각화를 방지할 뿐더러 더 적은 메모리를 사용하지만 원자적이고 기본 배"
"열보다 더 느리게 실행됩니다. 따라서 오직 많은 데이터 집합을 사용할 때만 추천"
"합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:498
msgid ""
":ref:`PoolByteArray <class_PoolByteArray>`: An array of bytes (integers from "
"0 to 255)."
msgstr ""
":ref:`PoolByteArray <class_PoolByteArray>`: 비트의 배열 (0부터 255까지의 정"
"수)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:499
msgid ":ref:`PoolIntArray <class_PoolIntArray>`: An array of integers."
msgstr ":ref:`PoolIntArray <class_PoolIntArray>`: 정수의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:500
msgid ":ref:`PoolRealArray <class_PoolRealArray>`: An array of floats."
msgstr ":ref:`PoolRealArray <class_PoolRealArray>`: 실수의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:501
msgid ":ref:`PoolStringArray <class_PoolStringArray>`: An array of strings."
msgstr ":ref:`PoolStringArray <class_PoolStringArray>`: 문자열의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:502
msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: An array of :ref:`Vector2 "
"<class_Vector2>` objects."
msgstr ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: :ref:`Vector2 "
"<class_Vector2>` 객체의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:503
msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: An array of :ref:`Vector3 "
"<class_Vector3>` objects."
msgstr ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: :ref:`Vector3 "
"<class_Vector3>` 객체의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:504
msgid ""
":ref:`PoolColorArray <class_PoolColorArray>`: An array of :ref:`Color "
"<class_Color>` objects."
msgstr ""
":ref:`PoolColorArray <class_PoolColorArray>`: :ref:`Color <class_Color>` 객체"
"의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:507
msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr "딕셔너리 (:ref:`Dictionary <class_Dictionary>`)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:509
msgid "Associative container which contains values referenced by unique keys."
msgstr "고유 키에 의해 참조되는 값을 갖는 연관 컨테이너입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:522
msgid ""
"Lua-style table syntax is also supported. Lua-style uses ``=`` instead of ``:"
"`` and doesn't use quotes to mark string keys (making for slightly less to "
"write). Note however that like any GDScript identifier, keys written in this "
"form cannot start with a digit."
msgstr ""
"Lua 스타일의 테이블 구문 역시 지원됩니다. Lua 스타일은 ``:`` 대신 ``=`` 를 사"
"용하고 (쓰는 것을 적게 만들기 위해) 문자열 키를 표시하기 위해 따옴표를 사용하"
"지 않습니다.\n"
"하지만 모든 GDScript 식별자와 마찬가지로, 이 양식으로 작성된 키는 숫자로 시작"
"할 수 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:536
msgid ""
"To add a key to an existing dictionary, access it like an existing key and "
"assign to it::"
msgstr ""
"존재하는 딕셔너리에 키를 추가하기 위해선, 기존 키와 마찬가지로 딕셔너리에 접"
"속하고 할당해야 합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:545
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:228
msgid "Data"
msgstr "데이터"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:548
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:131
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:86
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:148
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:212
msgid "Variables"
msgstr "변수(Variable)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:550
msgid ""
"Variables can exist as class members or local to functions. They are created "
"with the ``var`` keyword and may, optionally, be assigned a value upon "
"initialization."
msgstr ""
"변수는 클래스 멤버로 혹은 함수에 로컬 변수로 존재할 수 있습니다. ``var`` 키워"
"드로 만들 수 있고, 선택적으로, 초기화 시 값을 지정할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:561
msgid ""
"Variables can optionally have a type specification. When a type is "
"specified, the variable will be forced to have always that same type, and "
"trying to assign an incompatible value will raise an error."
msgstr ""
"변수는 선택적으로 타입 지정을 가질 수 있습니다. 타입이 지정될 때, 변수는 항"
"상 같은 타입을 갖도록 강제됩니다, 그리고 호환하지 않은 값을 할당하려 하면 오"
"류가 발생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:565
msgid ""
"Types are specified in the variable declaration using a ``:`` (colon) symbol "
"after the variable name, followed by the type."
msgstr ""
"타입은 변수 선언에서 ``:`` (콜론)을 사용하여 변수 이름과 타입 사이에서 지정됩"
"니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:573
#, fuzzy
msgid ""
"If the variable is initialized within the declaration, the type can be "
"inferred, so it's possible to omit the type name::"
msgstr ""
"변수가 선언 내에 초기화된다면 타입을 유추할 수 있습니다, 따라서 타입 이름을 "
"생략할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:579
msgid ""
"Type inference is only possible if the assigned value has a defined type, "
"otherwise it will raise an error."
msgstr ""
"타입 함축은 오직 할당된 값이 정의된 타입을 갖고 있어야만 가능합니다, 그렇지 "
"않으면 오류가 발생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:582
#: ../../docs/tutorials/shading/shading_reference/shaders.rst:39
msgid "Valid types are:"
msgstr "유효한 타입은 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:584
msgid "Built-in types (Array, Vector2, int, String, etc.)"
msgstr "내장 타입 (Array, Vector2, int, String 등)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:585
msgid "Engine classes (Node, Resource, Reference, etc.)"
msgstr "엔진 클래스 (노드, 리소스, 참조 등)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:586
msgid ""
"Constant names if they contain a script resource (``MyScript`` if you "
"declared ``const MyScript = preload(\"res://my_script.gd\")``)."
msgstr ""
"스크립트 리소스가 포함된 상수 이름 (``const MyScript = preload(\"res://"
"my_script.gd\")``\\ 를 선언했다면 ``MyScript``\\ 가 이에 속합니다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:587
msgid ""
"Other classes in the same script, respecting scope (``InnerClass."
"NestedClass`` if you declared ``class NestedClass`` inside the ``class "
"InnerClass`` in the same scope)"
msgstr ""
"같은 스크립트에서 유효 범위를 준수하는 다른 클래스 (같은 유효 범위에서 "
"``class InnerClass`` 안에 ``class NestedClass``\\ 를 선언했다면 ``InnerClass."
"NestedClass``\\ 가 이에 속합니다)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:588
msgid "Script classes declared with the ``class_name`` keyword."
msgstr "``class_name`` 키워드로 선언된 스크립트 클래스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:591
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:73
msgid "Casting"
msgstr "캐스팅(Casting)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:593
msgid ""
"Values assigned to typed variables must have a compatible type. If it's "
"needed to coerce a value to be of a certain type, in particular for object "
"types, you can use the casting operator ``as``."
msgstr ""
"타입이 지정된 변수에 지정된 값은 호환 가능한 타입을 갖고 있어야 합니다. 값을 "
"특정 유형, 특히 객체 타입에 강제로 변환해야 하는 경우, 캐스팅 연산자 ``as``"
"\\ 를 사용할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:597
#, fuzzy
msgid ""
"Casting between object types results in the same object if the value is of "
"the same type or a subtype of the cast type."
msgstr ""
"값이 캐스트(cast)된 타입과 같은, 타입이나 하위 타입이라면 객체 타입 간의 캐스"
"팅은 동일한 객체에서 수행됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:605
msgid ""
"If the value is not a subtype, the casting operation will result in a "
"``null`` value."
msgstr "값이 하위 타입이 아니라면, 캐스팅 연산자는 ``null`` 값을 내보냅니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:612
msgid ""
"For built-in types, they will be forcibly converted if possible, otherwise "
"the engine will raise an error."
msgstr ""
"내장 타입의 경우, 가능하다면 강제로 변환됩니다, 그렇지 않으면 엔진에 오류가 "
"발생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:621
msgid ""
"Casting is also useful to have better type-safe variables when interacting "
"with tree::"
msgstr ""
"캐스팅은 또한 트리와 상호 작용할 때 더 안전한 타입 변수를 가질 수 있기에 유용"
"합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:631
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:193
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:211
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:71
#: ../../docs/development/cpp/object_class.rst:94
msgid "Constants"
msgstr "상수(Constant)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:633
msgid ""
"Constants are similar to variables, but must be constants or constant "
"expressions and must be assigned on initialization."
msgstr ""
"상수는 변수와 비슷하지만, 상수 또는 상수 식이어야만 하며 초기화 시 값이 지정"
"되어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:647
#, fuzzy
msgid ""
"Although the type of constants is inferred from the assigned value, it's "
"also possible to add explicit type specification::"
msgstr ""
"상수의 타입은 지정된 값에서 유추되지만, 명시적 타입 지정을 추가하는 것도 가능"
"합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:653
msgid "Assigning a value of an incompatible type will raise an error."
msgstr "호환하지 않은 타입의 값을 지정하면 오류가 발생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:656
msgid "Enums"
msgstr "이넘(Enum)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:658
msgid ""
"Enums are basically a shorthand for constants, and are pretty useful if you "
"want to assign consecutive integers to some constant."
msgstr ""
"이넘은 기본적으로 상수의 축약 형이고, 연속적인 정수를 일부 상수에 지정할 때 "
"꽤 유용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:661
msgid ""
"If you pass a name to the enum, it would also put all the values inside a "
"constant dictionary of that name."
msgstr ""
"이넘에 이름을 전달하면, 그 이름의 상수 딕셔너리 내에 모든 값을 넣을 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:682
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:391
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:245
msgid "Functions"
msgstr "함수(Function)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:684
msgid ""
"Functions always belong to a `class <Classes_>`_. The scope priority for "
"variable look-up is: local → class member → global. The ``self`` variable is "
"always available and is provided as an option for accessing class members, "
"but is not always required (and should *not* be sent as the function's first "
"argument, unlike Python)."
msgstr ""
"함수는 항상 `class <Classes_>`_ 에 속해 있습니다. 변수를 조회하는 범위 우선 "
"순위는: 지역 → 클래스 멤버 → 전역 순입니다. ``self`` 변수는 항상 사용할 수 있"
"고 클래스 멤버에 접근하는 옵션으로 제공될 수 있지만, 항상 필요한 것은 아닙니"
"다 (그리고 Python과 달리, 함수의 첫 인수로 보내서는 *안 됩니다*)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:697
msgid ""
"A function can ``return`` at any point. The default return value is ``null``."
msgstr ""
"함수는 언제든지 ``반환(return)`` 될 수 있습니다. 기본 반환 값은 ``null`` 입니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:699
msgid ""
"Functions can also have type specification for the arguments and for the "
"return value. Types for arguments can be added in a similar way to "
"variables::"
msgstr ""
"함수는 또한 인수와 반환 값을 위한 타입 지정을 가질 수 있습니다. 인수를 위한 "
"타입은 변수와 비슷한 방법으로 추가할 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:705
msgid ""
"If a function argument has a default value, it's possible to infer the type::"
msgstr "함수 인수가 기본 값을 갖는다면, 타입을 유추하는 것이 가능합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:710
msgid ""
"The return type of the function can be specified after the arguments list "
"using the arrow token (``->``)::"
msgstr ""
"함수의 반환 값은 화살표 토큰 (``->``)을 사용하여 인수 목록 다음에 지정될 수 "
"있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:716
msgid ""
"Functions that have a return type **must** return a proper value. Setting "
"the type as ``void`` means the function doesn't return anything. Void "
"functions can return early with the ``return`` keyword, but they can't "
"return any value."
msgstr ""
"반환 값을 갖는 함수는 **반드시** 적절한 값을 반환해야 합니다. ``void(빈)``\\ "
"로 타입을 설정하는 것은 함수가 어느 것도 반환하지 않음을 의미합니다. 빈 함수"
"는 ``return`` 키워드로 일찍 반환할 수 있지만 어떤 값도 반환할 수 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:725
#, fuzzy
msgid ""
"Non-void functions must **always** return a value, so if your code has "
"branching statements (such as an ``if``/``else`` construct), all the "
"possible paths must have a return. E.g., if you have a ``return`` inside an "
"``if`` block but not after it, the editor will raise an error because if the "
"block is not executed, the function won't have a valid value to return."
msgstr ""
"Void가 아닌 함수는 반드시 **항상** 값을 반환해야 하므로, 코드가 (``if``/"
"``else`` 구조와 같은) 명령문을 뻗고 있다면, 모든 가능한 경로가 반환을 가져야 "
"합니다. 예를 들어, ``if`` 블록 안에 ``return`` 을 갖지만 그 뒤가 없는 경우, "
"블록이 실행되지 않으면 반환할 유효한 값을 함수가 가질 수 없기 때문에, 에디터"
"는 오류를 발생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:733
msgid "Referencing Functions"
msgstr "함수 참조하기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:735
msgid ""
"Contrary to Python, functions are *not* first class objects in GDScript. "
"This means they cannot be stored in variables, passed as an argument to "
"another function or be returned from other functions. This is for "
"performance reasons."
msgstr ""
"Python과 달리, 함수는 GDScript에서 첫 클래스 객체가 *아닙니다*. 즉, 함수를 변"
"수에 저장할 수 없고, 다른 함수에 인수로 전달되거나 다른 함수로 부터 반환될 "
"수 있습니다. 이것은 성능을 위해 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:739
msgid ""
"To reference a function by name at runtime, (e.g. to store it in a variable, "
"or pass it to another function as an argument) one must use the ``call`` or "
"``funcref`` helpers::"
msgstr ""
"런타임에 함수를  이름으로 참조하기 위해 (예를 들어 그것을 변수로 저장하거나, "
"다른 함수에 인수로 전달하기 위해), ``call`` 이나 ``funcref`` 도우미를 사용해"
"야 합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:752
#, fuzzy
msgid ""
"Remember that default functions, like  ``_init``, and most notifications, "
"such as ``_enter_tree``, ``_exit_tree``, ``_process``, ``_physics_process``, "
"etc. are called in all base classes automatically. So there is only a need "
"to call the function explicitly when overloading them in some way."
msgstr ""
"``_init`` 과 같은 기본 함수와, ``_enter_tree``, ``_exit_tree``, "
"``_process``, ``_physics_process`` 등과 같은 대부분의 알림은 모든 기본 클래스"
"에서 자동으로 호출된다는 것을 기억하세요. 그래서 어떤 방법이든 함수를 오버로"
"딩 할 때 명시적으로 함수를 호출할 필요가 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:760
msgid "Static functions"
msgstr "정적 함수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:762
#, fuzzy
msgid ""
"A function can be declared static. When a function is static, it has no "
"access to the instance member variables or ``self``. This is mainly useful "
"to make libraries of helper functions:"
msgstr ""
"함수는 정적으로 선언될 수 있습니다. 함수가 정적일 때 인스턴스 멤버 변수나 "
"``self`` 로 접근할 수 없습니다. 주로 도우미 함수의 라이브러리를 만드는 데 유"
"용합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:773
msgid "Statements and control flow"
msgstr "명령문(statement)과 제어 흐름(control flow)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:775
msgid ""
"Statements are standard and can be assignments, function calls, control flow "
"structures, etc (see below). ``;`` as a statement separator is entirely "
"optional."
msgstr ""
"명령문은 표준이고 할당, 함수 호출, 제어 흐름 구조 등이 될 수 있습니다 (하단"
"을 참고하세요). 명령문 분리 기호로 쓰인 ``;`` 는 전적으로 선택 사항입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:780
msgid "if/else/elif"
msgstr "if/else/elif"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:782
msgid ""
"Simple conditions are created by using the ``if``/``else``/``elif`` syntax. "
"Parenthesis around conditions are allowed, but not required. Given the "
"nature of the tab-based indentation, ``elif`` can be used instead of "
"``else``/``if`` to maintain a level of indentation."
msgstr ""
"간단한 조건은 ``if``/``else``/``elif`` 구문을 사용해 만들 수 있습니다. 조건 "
"주변의 괄호를 써도 되지만 필수는 아닙니다. 탭 기반 들여쓰기의 특성을 감안하"
"여, ``elif`` 는 ``else``/``if`` 대신 사용하여 들여쓰기 수준을 유지할 수 있습"
"니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:796
msgid "Short statements can be written on the same line as the condition::"
msgstr "간단한 명령문은 조건처럼 같은 줄에 적을 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:803
#, fuzzy
msgid ""
"Sometimes you might want to assign a different initial value based on a "
"boolean expression. In this case, ternary-if expressions come in handy::"
msgstr ""
"때때로 불 식을 기반으로 한 다른 초기 값을 지정하고 싶을 수도 있습니다. 이 경"
"우 3진 if 식이 유용합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:812
msgid ""
"Simple loops are created by using ``while`` syntax. Loops can be broken "
"using ``break`` or continued using ``continue``:"
msgstr ""
"간단한 루프는 ``while`` 구문을 사용하여 만들 수 있습니다. 루프는 ``break`` "
"를 사용하여 끊거나 ``continue`` 를 사용하여 진행할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:823
msgid ""
"To iterate through a range, such as an array or table, a *for* loop is used. "
"When iterating over an array, the current array element is stored in the "
"loop variable. When iterating over a dictionary, the *index* is stored in "
"the loop variable."
msgstr ""
"배열이나 테이블 같은, 범위를 반복하려면, *for* 루프가 사용됩니다. 한 배열을 "
"반복할 때, 현재 배열 요소는 루프 변수에 저장됩니다. 딕셔너리를 반복할 때, *인"
"덱스* 는 루프 변수에 저장됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:852
#, fuzzy
msgid ""
"A ``match`` statement is used to branch execution of a program. It's the "
"equivalent of the ``switch`` statement found in many other languages, but "
"offers some additional features."
msgstr ""
"``match`` 명령문은 프로그램 실행을 분기화 하는 데 사용됩니다. 이것은 많은 다"
"른 언어에서 찾을 수 있는 ``switch`` 명령문과 유사하지만 몇 가지 추가 기능을 "
"제공합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:855
msgid "Basic syntax:"
msgstr "기본 구문:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:868
#, fuzzy
msgid "**Crash-course for people who are familiar with switch statements**:"
msgstr "**switch 명령문에 익숙한 사람들을 위한 집중 강좌**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:870
msgid "Replace ``switch`` with ``match``"
msgstr "``switch`` 를 ``match`` 로 바꾸십시오"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:871
msgid "Remove ``case``"
msgstr "``case`` 를 제거하십시오"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:872
#, fuzzy
msgid ""
"Remove any ``break``\\ s. If you don't want to ``break`` by default, you can "
"use ``continue`` for a fallthrough."
msgstr ""
"모든 ``break`` 를 제거하십시오. 기본적으로 ``break`` 가 되지 않도록 하고 싶다"
"면 fallthrough를 위해 ``continue`` 를 사용하실 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:873
msgid "Change ``default`` to a single underscore."
msgstr "``default`` 를 하나의 밑줄로 변경하십시오."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:876
msgid "**Control flow**:"
msgstr "**제어 흐름**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:878
#, fuzzy
msgid ""
"The patterns are matched from top to bottom. If a pattern matches, the "
"corresponding block will be executed. After that, the execution continues "
"below the ``match`` statement. If you want to have a fallthrough, you can "
"use ``continue`` to stop execution in the current block and check the ones "
"below it."
msgstr ""
"패턴은 위에서 아래로 대조됩니다. 패턴이 일치하면, 해당 블록이 실행됩니다. 그"
"런 후, 실행은 ``match`` 명령문 아래에서 계속됩니다. fallthrough를 원한다면 "
"``continue`` 를 사용하여 해당 블록의 실행을 멈추고 그 아래에 있는 것을 확인하"
"게 할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:882
msgid "There are 6 pattern types:"
msgstr "6가지 패턴 타입이 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:894
msgid "constant pattern"
msgstr "상수 패턴"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:885
msgid "constant primitives, like numbers and strings ::"
msgstr "숫자와 문자열과 같은 상수 ::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:906
msgid "variable pattern"
msgstr "변수 패턴"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:897
msgid "matches the contents of a variable/enum ::"
msgstr "변수/이넘의 상수를 대조합니다 ::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:920
msgid "wildcard pattern"
msgstr "임의 문자 기호 패턴"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:909
msgid "This pattern matches everything. It's written as a single underscore."
msgstr "이 패턴은 모든 것을 대조합니다. 하나의 밑줄로 쓰여집니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:911
msgid ""
"It can be used as the equivalent of the ``default`` in a ``switch`` "
"statement in other languages. ::"
msgstr ""
"다른 언어의 ``switch`` 명령문에서 ``default`` 와 동등하게 사용될 수 있습니"
"다. ::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:933
msgid "binding pattern"
msgstr "바인딩 패턴"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:923
msgid ""
"A binding pattern introduces a new variable. Like the wildcard pattern, it "
"matches everything - and also gives that value a name. It's especially "
"useful in array and dictionary patterns. ::"
msgstr ""
"바인딩 패턴은 새 변수를 도입합니다. 임의 문자 기호 패턴과 마찬가지로, 모든 것"
"을 대조합니다 - 그리고 값에 이름을 부여합니다. 특히 배열 패턴과 딕셔너리 패턴"
"에 유용합니다. ::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:952
msgid "array pattern"
msgstr "배열 패턴"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:936
#, fuzzy
msgid ""
"matches an array. Every single element of the array pattern is a pattern "
"itself, so you can nest them."
msgstr ""
"배열을 대조합니다. 배열 패턴의 모든 단일 요소는 패턴 그 자체이므로 그들을 중"
"첩 할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:938
#, fuzzy
msgid ""
"The length of the array is tested first, it has to be the same size as the "
"pattern, otherwise the pattern doesn't match."
msgstr ""
"배열의 길이가 먼저 테스트 되고, 그것이 패턴과 같은 크기이어야 합니다, 그렇지 "
"않으면 패턴이 일치하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:940
msgid ""
"**Open-ended array**: An array can be bigger than the pattern by making the "
"last subpattern ``..``"
msgstr ""
"**개방형 배열**: 마지막 하위 패턴을 ``..`` 로 만들어서 배열이 패턴보다 더 커"
"지도록 만들 수 있습니다"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:942
msgid "Every subpattern has to be comma separated. ::"
msgstr "모든 하위 패턴은 쉼표로 분리되어야 합니다. ::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:977
msgid "dictionary pattern"
msgstr "딕셔너리 패턴"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:955
msgid ""
"Works in the same way as the array pattern. Every key has to be a constant "
"pattern."
msgstr ""
"배열 패턴과 같은 방식으로 작동합니다. 모든 키는 일정한 패턴이어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:957
#, fuzzy
msgid ""
"The size of the dictionary is tested first, it has to be the same size as "
"the pattern, otherwise the pattern doesn't match."
msgstr ""
"딕셔너리의 크기가 먼저 테스트 되고, 그것이 패턴과 같은 크기이어야 합니다, 그"
"렇지 않으면 패턴이 일치하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:959
msgid ""
"**Open-ended dictionary**: A dictionary can be bigger than the pattern by "
"making the last subpattern ``..``"
msgstr ""
"**개방형 딕셔너리**: 마지막 하위 패턴을 ``..`` 로 만들어서 딕셔너리가 패턴보"
"다 더 커지도록 만들 수 있습니다"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:961
msgid "Every subpattern has to be comma separated."
msgstr "모든 하위 패턴은 쉼표로 분리되어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:963
msgid ""
"If you don't specify a value, then only the existence of the key is checked."
msgstr "값을 지정하지 않으면, 키의 존재 여부만 확인됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:965
msgid "A value pattern is separated from the key pattern with a ``:`` ::"
msgstr "값 패턴은 키 패턴과 ``:`` 로 분리됩니다 ::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:988
msgid "Multipatterns:"
msgstr "다중 패턴:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:980
msgid ""
"You can also specify multiple patterns separated by a comma. These patterns "
"aren't allowed to have any bindings in them. ::"
msgstr ""
"쉼표로 분리된 다중 패턴을 지정할 수도 있습니다. 이 패턴은 바인딩을 가질 수 없"
"습니다. ::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:991
msgid "Classes"
msgstr "클래스(Class)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:993
msgid ""
"By default, all script files are unnamed classes. In this case, you can only "
"reference them using the file's path, using either a relative or an absolute "
"path. For example, if you name a script file ``character.gd``"
msgstr ""
"기본적으로, 모든 스크립트 파일은 이름 없는 클래스 입니다. 이 경우, 우리는 파"
"일 경로를 사용하거나 상대 경로 혹은 절대 경로를 사용하여 그들을 참조할 수 있"
"습니다. 예를 들어 스크립트의 이름이 ``character.gd`` 라면"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1008
msgid ""
"Instead, you can give your class a name to register it as a new type in "
"Godot's editor. For that, you use the 'class_name' keyword. You can add an "
"optional comma followed by a path to an image, to use it as an icon. Your "
"class will then appear with its new icon in the editor:"
msgstr ""
"대신, 클래스에 이름을 지정하여 Godot 에디터에 새 타입으로 등록할 수 있습니"
"다. 이를 위해, 'class_name' 키워드를 사용합니다. 선택적 쉼표와 이미지 경로를 "
"추가하여 아이콘으로 사용할 수 있습니다. 클래스는 이제 에디터에서 새로운 아이"
"콘으로 나타납니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1023
msgid "Here's a class file example:"
msgstr "클래스 파일 예제입니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1042
msgid ""
"Godot's class syntax is compact: it can only contain member variables or "
"functions. You can use static functions, but not static member variables. In "
"the same way, the engine initializes variables every time you create an "
"instance, and this includes arrays and dictionaries. This is in the spirit "
"of thread safety, since scripts can be initialized in separate threads "
"without the user knowing."
msgstr ""
"Godot의 클래스 구문은 간결합니다: 오직 멤버 변수나 함수만을 가질 수 있습니"
"다. 정적 함수를 사용할 수 있지만, 정적 멤버 변수는 사용할 수 없습니다. 같은 "
"방식으로, 엔진은 매 시간 인스턴스를 만들 때마다 변수를 초기화합니다, 이것에"
"는 배열과 딕셔너리도 포함됩니다. 이것은 스레드 안정성의 정신에 있습니다, 스크"
"립트가 사용자가 모르는 분리된 스레드에서 초기화될 수 있기 때문입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1050
msgid "Inheritance"
msgstr "상속(Inheritance)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1052
msgid "A class (stored as a file) can inherit from"
msgstr "(파일로 저장된) 클래스는 여기서 상속될 수 있습니다"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1054
msgid "A global class"
msgstr "전역 클래스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1055
msgid "Another class file"
msgstr "다른 클래스 파일"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1056
msgid "An inner class inside another class file."
msgstr "다른 클래스 파일 안의 내부 클래스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1058
msgid "Multiple inheritance is not allowed."
msgstr "다중 상속은 허용되지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1060
msgid "Inheritance uses the ``extends`` keyword:"
msgstr "상속은 ``extends`` 키워드를 사용합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1074
#, fuzzy
msgid ""
"To check if a given instance inherits from a given class, the ``is`` keyword "
"can be used:"
msgstr ""
"주어진 인스턴스가 주어진 클래스로부터 상속 받았는지 확인하려면 ``is`` 키워드"
"를 사용할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1088
msgid ""
"To call a function in a *base class* (i.e. one ``extend``-ed in your current "
"class), prepend ``.`` to the function name:"
msgstr ""
"*기본 클래스* (즉, 현재 클래스에서 ``extend`` 된 것)에서 함수를 호출하려면, "
"``.`` 를 함수 이름 앞에 붙이세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1095
msgid ""
"This is especially useful because functions in extending classes replace "
"functions with the same name in their base classes. So if you still want to "
"call them, you can use ``.`` like the ``super`` keyword in other languages:"
msgstr ""
"이는 확장 클래스의 함수가 함수를 기본 클래스의 동일한 이름으로 대체하기 때문"
"에 특히 유용합니다. 따라서 여전히 그들을 호출하고 싶다면, 다른 언어의 "
"``super`` 키워드처럼 ``.`` 을 사용할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1105
msgid "Class Constructor"
msgstr "클래스 생성자"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1107
msgid ""
"The class constructor, called on class instantiation, is named ``_init``. As "
"mentioned earlier, the constructors of parent classes are called "
"automatically when inheriting a class. So there is usually no need to call "
"``._init()`` explicitly."
msgstr ""
"클래스 인스턴스에 호출되는, 클래스 생성자의 이름은 ``_init`` 입니다. 앞서 언"
"급한 바와 같이, 부모 클래스의 생성자는 클래스를 상속할 때 자동으로 호출됩니"
"다. 그래서 보통 ``._init()`` 을 명시적으로 호출할 필요는 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1111
#, fuzzy
msgid ""
"Unlike the call of a regular function, like in the above example with ``."
"some_func``, if the constructor from the inherited class takes arguments, "
"they are passed like this:"
msgstr ""
"앞의 예제와 같은 ``.some_func`` 을 사용한 규칙적인 함수의 호출과 달리, 상속"
"된 클래스로부터 생성자가 인수를 갖게 되면, 그들은 다음과 같이 전달됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1119
msgid "This is better explained through examples. Say we have this scenario:"
msgstr ""
"이것은 예제를 통해 더 잘 설명됩니다. 이 시나리오가 있다고 가정하십시오:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1141
msgid "There are a few things to keep in mind here:"
msgstr "유의해야 할 몇 가지 사항이 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1143
#, fuzzy
msgid ""
"if the inherited class (``State.gd``) defines a ``_init`` constructor that "
"takes arguments (``e`` in this case), then the inheriting class (``Idle."
"gd``) *has* to define ``_init`` as well and pass appropriate parameters to "
"``_init`` from ``State.gd``"
msgstr ""
"상속된 클래스 (``State.gd``)가 인수를 갖는 (이 경우에는 ``e``) ``_init`` 생성"
"자를 정의한다면 상속하는 클래스 (``Idle.gd``)는 ``State.gd`` 에서 적절한 매"
"개 변수를 ``_init`` 에게 전달하고 ``_init`` 정의 *해야* 만 합니다"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1146
msgid ""
"``Idle.gd`` can have a different number of arguments than the base class "
"``State.gd``"
msgstr ""
"``Idle.gd`` 는 기본 클래스 ``State.gd`` 와 다른 수의 인수들을 가질 수 있습니"
"다"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1147
#, fuzzy
msgid ""
"in the example above, ``e`` passed to the ``State.gd`` constructor is the "
"same ``e`` passed in to ``Idle.gd``"
msgstr ""
"위의 예제에서 ``State.gd`` 생성자에 전달된 ``e`` 는 ``Idle.gd`` 로 전달된 "
"``e`` 와 같습니다"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1149
#, fuzzy
msgid ""
"if ``Idle.gd``'s ``_init`` constructor takes 0 arguments, it still needs to "
"pass some value to the ``State.gd`` base class even if it does nothing. "
"Which brings us to the fact that you can pass literals in the base "
"constructor as well, not just variables. Eg.:"
msgstr ""
"``Idle.gd`` 의 ``_init`` 생성자가 0개의 인수를 갖는다면 심지어 아무것도 하지 "
"않아도 ``State.gd`` 기본 클래스에 어떤 값을 전달해야 합니다. 이를 통해 우리"
"는 기본 생성자에 변수 뿐만 아니라 리터럴을 전달할 수 있음을 알 수 있습니다. "
"예:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1161
msgid "Inner classes"
msgstr "내부 클래스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1163
msgid ""
"A class file can contain inner classes. Inner classes are defined using the "
"``class`` keyword. They are instanced using the ``ClassName.new()`` function."
msgstr ""
"클래스는 내부 클래스를 포함할 수 있습니다. 내부 클래스는 ``class`` 키워드를 "
"사용하여 정의됩니다. ``ClassName.new()`` 함수를 사용해 인스턴스 됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1183
msgid "Classes as resources"
msgstr "리소스 클래스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1185
msgid ""
"Classes stored as files are treated as :ref:`resources <class_GDScript>`. "
"They must be loaded from disk to access them in other classes. This is done "
"using either the ``load`` or ``preload`` functions (see below). Instancing "
"of a loaded class resource is done by calling the ``new`` function on the "
"class object::"
msgstr ""
"파일로 저장된 클래스는 :ref:`resources <class_GDScript>` 로 취급됩니다. 다른 "
"클래스에서 접근하려면 반드시 불러와 있어야 합니다. 이것에는 ``load`` 나 "
"``preload`` 함수를 사용합니다 (하단을 참고하세요). 불러온 클래스를 인스턴스 "
"하려면 클래스 객체에 ``new`` 함수를 호출합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1203
msgid "Exports"
msgstr "내보내기(Export)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1205
msgid ""
"Class members can be exported. This means their value gets saved along with "
"the resource (e.g. the :ref:`scene <class_PackedScene>`) they're attached "
"to. They will also be available for editing in the property editor. "
"Exporting is done by using the ``export`` keyword::"
msgstr ""
"클래스 멤버는 내보내질 수 있습니다. 즉, 값이 첨부된 리소스와 함께 저장됩니다 "
"(예 the :ref:`scene <class_PackedScene>`). 그들은 또한 속성 에디터에서 편집하"
"는 것이 가능합니다. 내보내는 것은 ``export`` 키워드를 사용합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1214
msgid ""
"An exported variable must be initialized to a constant expression or have an "
"export hint in the form of an argument to the export keyword (see below)."
msgstr ""
"내보낸 변수는 상수 표현식으로 초기화 되거나 내보내기 힌트를 export 키워드에 "
"인수의 형태로 가져야 합니다 (하단을 참고하세요)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1217
#, fuzzy
msgid ""
"One of the fundamental benefits of exporting member variables is to have "
"them visible and editable in the editor. This way, artists and game "
"designers can modify values that later influence how the program runs. For "
"this, a special export syntax is provided."
msgstr ""
"멤버 변수 내보내기의 기본적인 이점은 에디터에서 보이고 편집할 수 있는 것입니"
"다. 이 방법으로 아티스트와 게임 디자이너가 프로그램이 실행 방법에 영향을 주"
"는 값을 수정할 수 있습니다. 이를 위해, 특수 내보내기 구문이 제공됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1303
msgid ""
"It must be noted that even if the script is not being run while at the "
"editor, the exported properties are still editable (see below for \"tool\")."
msgstr ""
"심지어 스크립트가 에디터에서 실행되지 않더라도, 내보낸 속성은 여전히 편집 가"
"능합니다 (아래 \"도구\"를 참고하세요)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1308
msgid "Exporting bit flags"
msgstr "비트 플래그(bit flags) 내보내기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1310
msgid ""
"Integers used as bit flags can store multiple ``true``/``false`` (boolean) "
"values in one property. By using the export hint ``int, FLAGS``, they can be "
"set from the editor:"
msgstr ""
"비트 플래그로 사용되는 정수는 한 속성에 많은 ``참``/``거짓`` (불) 값을 저장"
"할 수 있습니다. 내보내기 힌트 ``int, FLAGS`` 를 사용하여, 이를 에디터에서 설"
"정할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1319
msgid ""
"Restricting the flags to a certain number of named flags is also possible. "
"The syntax is similar to the enumeration syntax:"
msgstr ""
"플래그를 특정 수의 명명된 플래그로 제한하는 것도 가능합니다. 구문은 열거 구문"
"과 비슷합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1327
msgid ""
"In this example, ``Fire`` has value 1, ``Water`` has value 2, ``Earth`` has "
"value 4 and ``Wind`` corresponds to value 8. Usually, constants should be "
"defined accordingly (e.g. ``const ELEMENT_WIND = 8`` and so on)."
msgstr ""
"이 예제에서, ``Fire`` 는 값 1, ``Water`` 는 값 2, ``Earth`` 는 값 4, 그리고 "
"``Wind`` 는 값 8에 해당합니다. 일반적으로, 상수는 이에 따라 정의되어야 합니"
"다 (예 ``const ELEMENT_WIND = 8`` 등등)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1332
msgid ""
"Using bit flags requires some understanding of bitwise operations. If in "
"doubt, boolean variables should be exported instead."
msgstr ""
"비트 플래그를 사용하려면 비트 연산에 대한 이해가 필요합니다. 의심스럽다면, "
"불 변수를 대신 내보내어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1336
msgid "Exporting arrays"
msgstr "배열 내보내기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1338
#, fuzzy
msgid ""
"Exporting arrays works, but with an important caveat: While regular arrays "
"are created local to every class instance, exported arrays are *shared* "
"between all instances. This means that editing them in one instance will "
"cause them to change in all other instances. Exported arrays can have "
"initializers, but they must be constant expressions."
msgstr ""
"배열을 내보낼 수 있지만 중요한 주의 사항이 있습니다: 정규 배열은 모든 클래스 "
"인스턴스에 로컬로 만들어 지지만, 내보낸 배열은 모든 인스턴스 간에 *공유됩니다"
"*. 즉, 한 인스턴스에서 배열을 편집하면 다른 인스턴스에서도 영향을 줍니다. 내"
"보낸 배열은 이니셜라이저를 가질 수 있지만, 반드시 상수 표현식이 되어야 합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1375
msgid "Setters/getters"
msgstr "Setters/getters"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1377
msgid ""
"It is often useful to know when a class' member variable changes for "
"whatever reason. It may also be desired to encapsulate its access in some "
"way."
msgstr ""
"클래스 멤버 변수가 어떤 이유로든 언제 변경되는지를 아는 것은 종종 유용합니"
"다. 어떤 방식으로 그것의 접근을 캡슐화 하는 것이 필요할 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1380
msgid ""
"For this, GDScript provides a *setter/getter* syntax using the ``setget`` "
"keyword. It is used directly after a variable definition:"
msgstr ""
"이를 위해, GDScript는 ``setget`` 키워드를 사용하는 *setter/getter* 구문을 제"
"공합니다. 변수 정의 바로 뒤에 사용됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1387
#, fuzzy
msgid ""
"Whenever the value of ``variable`` is modified by an *external* source (i.e. "
"not from local usage in the class), the *setter* function (``setterfunc`` "
"above) will be called. This happens *before* the value is changed. The "
"*setter* must decide what to do with the new value. Vice versa, when "
"``variable`` is accessed, the *getter* function (``getterfunc`` above) must "
"``return`` the desired value. Below is an example:"
msgstr ""
"*외부* 소스에 의해 (즉, 클래스에서의 로컬 사용이 아닌) ``variable`` 의 값이 "
"수정될 때는, 언제나 *setter* 함수 (위의 ``setterfunc``)는 호출됩니다. 이것은 "
"값이 변경되기 *전에* 발생합니다. *setter* 는 새로운 값으로 무엇을 해야 할 지 "
"결정해야 합니다. 반대로, ``variable``이 액세스될 때, *getter* 함수 (위의 "
"``getterfunc``)는 원하는 값을 ``return`` 해야 합니다. 아래에 있는 것은 예제입"
"니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1404
msgid "Either of the *setter* or *getter* functions can be omitted:"
msgstr "*setter* 혹은 *getter* 함수 둘 중 하나는 생략될 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1413
msgid ""
"Get/Setters are especially useful when exporting variables to editor in tool "
"scripts or plugins, for validating input."
msgstr ""
"Get/Setter는 입력이 유효한지 알아보기 위해, 툴 스크립트나 플러그인에서 에디터"
"로 변수를 내보낼 때 특히 유용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1416
#, fuzzy
msgid ""
"As said, *local* access will *not* trigger the setter and getter. Here is an "
"illustration of this:"
msgstr ""
"말한 대로 *로컬* 액세스는 setter와 getter를 트리거 하지 않을 것입니다. 여기"
"에 그 예가 나와 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1431
msgid "Tool mode"
msgstr "툴 모드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1433
#, fuzzy
msgid ""
"Scripts, by default, don't run inside the editor and only the exported "
"properties can be changed. In some cases, it is desired that they do run "
"inside the editor (as long as they don't execute game code or manually avoid "
"doing so). For this, the ``tool`` keyword exists and must be placed at the "
"top of the file:"
msgstr ""
"기본적으로, 스크립트는 에디터 내에서 실행되지 않고 내보낸 속성만 변경할 수 있"
"습니다. 경우에 따라 에디터 내에서 실행하는 것이 바람직합니다 (게임코드를 실행"
"하지 않거나 수동으로 실행하려 하지 않는 한). 이를 위해 ``tool`` 키워드가 존재"
"하며 파일의 맨 위에 배치해야 합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1448
msgid "Memory management"
msgstr "메모리 관리"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1450
msgid ""
"If a class inherits from :ref:`class_Reference`, then instances will be "
"freed when no longer in use. No garbage collector exists, just reference "
"counting. By default, all classes that don't define inheritance extend "
"**Reference**. If this is not desired, then a class must inherit :ref:"
"`class_Object` manually and must call instance.free(). To avoid reference "
"cycles that can't be freed, a ``weakref`` function is provided for creating "
"weak references."
msgstr ""
"클래스가 :ref:`class_Reference` 에서 상속할 때, 더 이상 사용하지 않게 되면 인"
"스턴스는 해제됩니다. 가비지 콜렉터 없이, 참조만 계산됩니다. 기본적으로, 상속"
"을 정의하지 않는 모든 클래스는 **참조** 를 확장합니다. 바람직하지 않다면, 클"
"래스는 :ref:`class_Object` 를 수동으로 상속해야만 하고 instance.free()를 호출"
"해야만 합니다. 해제할 수 없는 참조 사이클을 피하기 위해, 약한 참조를 생성하"
"는 ``weakref`` 함수가 제공됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1458
msgid ""
"Alternatively, when not using references, the "
"``is_instance_valid(instance)`` can be used to check if an object has been "
"freed."
msgstr ""
"또는, 참조를 사용하지 않을 때, ``is_instance_valid(instance)`` 가 객체가 해제"
"되었는 지를 확인하는데 사용될 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1467
msgid ""
"It is often desired to send a notification that something happened in an "
"instance. GDScript supports creation of built-in Godot signals. Declaring a "
"signal in GDScript is easy using the `signal` keyword."
msgstr ""
"인스턴스에 어떤 일이 발생했다는 알림을 보내는 것이 종종 요구됩니다. GDScript"
"는 내장 Godot 시그널을 지원합니다. `signal` 키워드를 사용하여 GDScript에 쉽"
"게 시그널을 선언할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1478
msgid ""
"These signals can be connected in the editor or from code like regular "
"signals. Take the instance of a class where the signal was declared and "
"connect it to the method of another instance:"
msgstr ""
"이 시그널은 에디터나 다른 코드에서 정규 시그널처럼 연결될 수 있습니다. 시그널"
"이 선언된 인스턴스에서 시그널을 가져와 다른 인스턴스의 메서드에 연결합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1494
msgid ""
"It is also possible to bind arguments to a signal that lacks them with your "
"custom values:"
msgstr "또한 커스텀 값으로 인수가 없는 시그널에 인수를 바인딩 할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1502
msgid ""
"This is useful when a signal from many objects is connected to a single "
"callback and the sender must be identified:"
msgstr ""
"다양한 객체들의 시그널이 단일 콜백함수에 연결되어 있고, 보내는 자(sender)가 "
"식별되야 할 때 유용합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1514
msgid ""
"Finally, emitting a custom signal is done by using the Object.emit_signal "
"method:"
msgstr ""
"마지막으로, 커스텀 시그널은 Object.emit_signal 메서드를 사용해 방출됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1525
msgid "Coroutines with yield"
msgstr "yield를 가진 코루틴(Coroutine)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1527
#, fuzzy
msgid ""
"GDScript offers support for `coroutines <https://en.wikipedia.org/wiki/"
"Coroutine>`_ via the ``yield`` built-in function. Calling ``yield()`` will "
"immediately return from the current function, with the current frozen state "
"of the same function as the return value. Calling ``resume`` on this "
"resulting object will continue execution and return whatever the function "
"returns. Once resumed, the state object becomes invalid. Here is an example:"
msgstr ""
"GDScript ``yield`` 내장 함수를 통해 `coroutines <https://en.wikipedia.org/"
"wiki/Coroutine>`_ 을 지원합니다. ``yield()`` 를 호출하면 반환 값과 같은 함수"
"의 고정 상태로 현재 함수에서 즉시 반환됩니다. 이 결과 ``resume`` 을 호출하면 "
"실행이 계속되고 함수가 반환하는 값을 반환합니다. 다시 시작하면 상태 객체는 무"
"효화됩니다. 여기 예제가 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1549
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1573
msgid "Will print:"
msgstr "이렇게 프린트 될 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1557
msgid ""
"It is also possible to pass values between yield() and resume(), for example:"
msgstr "yield()와 resume() 사이에 값을 보내는 것도 가능합니다, 예를 들어:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1582
msgid "Coroutines & signals"
msgstr "코루틴 & 시그널"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1584
#, fuzzy
msgid ""
"The real strength of using ``yield`` is when combined with signals. "
"``yield`` can accept two arguments, an object and a signal. When the signal "
"is received, execution will recommence. Here are some examples:"
msgstr ""
"``yield`` 를 사용하는 진정한 힘은 시그널과 결합될 때 나타납니다. ``yield`` "
"는 두 개의 매개 변수를 받아 들일 수 있는데, 객체와 시그널 입니다. 시그널이 수"
"신되면, 실행이 다시 시작됩니다. 여기 몇 가지 예제가 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1599
msgid ""
"Coroutines themselves use the ``completed`` signal when they transition into "
"an invalid state, for example:"
msgstr ""
"코루틴은 무효 상태로 전환 될 때, ``completed`` 시그널을 사용합니다, 예를 들"
"어:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1612
#, fuzzy
msgid ""
"``my_func`` will only continue execution once both buttons have been pressed."
msgstr "``my_func`` 오직 두 버튼이 한번에 눌릴 때 계속 실행됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1615
msgid "Onready keyword"
msgstr "Onready 키워드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1617
msgid ""
"When using nodes, it's common to desire to keep references to parts of the "
"scene in a variable. As scenes are only warranted to be configured when "
"entering the active scene tree, the sub-nodes can only be obtained when a "
"call to Node._ready() is made."
msgstr ""
"노드를 사용할 때, 변수에서 씬의 일부에 대한 참조를 유지하려는 것이 일반적입니"
"다. 활성 씬 트리에 들어갈 때 씬만 구성되므로, 하위 노드는 오직 Node._ready()"
"에 대한 호출이 있을 때만 얻을 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1629
msgid ""
"This can get a little cumbersome, especially when nodes and external "
"references pile up. For this, GDScript has the ``onready`` keyword, that "
"defers initialization of a member variable until _ready is called. It can "
"replace the above code with a single line:"
msgstr ""
"특히 노드와 외부 참조가 쌓이면서 성가시게 됩니다. 이를 위해, GDScript는 "
"``onready`` 라는, _ready가 호출될 때까지 멤버 변수의 초기화를 지연하는 키워드"
"를 갖고 있습니다. 이걸로 위의 코드를 한 줄로 바꿀 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1639
msgid "Assert keyword"
msgstr "Assert 키워드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1641
msgid ""
"The ``assert`` keyword can be used to check conditions in debug builds. "
"These assertions are ignored in non-debug builds."
msgstr ""
"``assert`` 키워드는 디버그 빌드에서 정황을 확인하는 데 사용할 수 있습니다. 디"
"버그가 아닌 빌드에서는 무시됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:4
msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript: 동적 언어 소개"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:9
msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"이 튜토리얼은 GDScript를 더 효과적으로 사용하는 방법에 대한 빠른 참고 문헌입"
"니다. 언어와 관련된 일반적인 사례 뿐만 아니라, 동적 타입 언어의 많은 정보도 "
"다루고 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:13
msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""
"이전까지 동적 타입 언어에 대한 경험이 없던 프로그래머에게 이 문서는 특히 더 "
"유용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:17
msgid "Dynamic nature"
msgstr "동적 성격"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:20
msgid "Pros & cons of dynamic typing"
msgstr "동적 타이핑의 장단점"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:22
msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr "GDScript는 동적 타입 언어입니다. 따라서, 주요 이점은 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:25
msgid "The language is simple and easy to learn."
msgstr "언어가 간결하고 배우기 쉽습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:26
msgid "Most code can be written and changed quickly and without hassle."
msgstr "대부분의 코드를 쉽고 빠르게 작성하고 변경할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:27
msgid "Less code written means less errors & mistakes to fix."
msgstr "적은 코드 작성으로 오류와 실수를 줄일 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:28
msgid "Easier to read the code (less clutter)."
msgstr "코드를 읽기 더 쉽습니다 (덜 혼란스러움)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:29
msgid "No compilation is required to test."
msgstr "테스트하기 위한 컴파일 작업이 필요 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:30
msgid "Runtime is tiny."
msgstr "런타임이 작습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:31
msgid "Duck-typing and polymorphism by nature."
msgstr "덕 타이핑(Duck-typing)과 폴리모피즘(polymorphism)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:33
msgid "While the main disadvantages are:"
msgstr "반면 주요 단점은 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:35
msgid "Less performance than statically typed languages."
msgstr "정적 타입 언어보다 낮은 퍼포먼스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:36
msgid "More difficult to refactor (symbols can't be traced)"
msgstr "refactor하기 더 어려움(기호를 추적할 수 없음)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:37
msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"정적 타입 언어에서 컴파일 시간에 감지되는 오류가 오직 코드를 실행할 때만 나타"
"납니다 (표현 구문 분석이 더 엄격하기 때문입니다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:40
msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr "코드 완성에 덜 유연함 (일부 변수 타입은 런타임에만 알려짐)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:43
#, fuzzy
msgid ""
"This, translated to reality, means that Godot+GDScript are a combination "
"designed to create games quickly and efficiently. For games that are very "
"computationally intensive and can't benefit from the engine built-in tools "
"(such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""
"현실로 번역된 이 말은 Godot + GDScript가 게임을 빠르고 효율적으로 만들 수 있"
"는 조합임을 의미합니다. 매우 계산 집약적이고 엔진 내장 도구 (벡터 타입, 물리 "
"엔진, 수학 라이브러리 등)의 이점을 누릴 수 없는 게임의 경우, C++를 사용하는 "
"경우의 수도 존재합니다. 이걸로 GDScript에서 전체적인 게임을, 그리고 퍼포먼스 "
"가속이 필요한 영역에 약간의 C++를 첨가하는 것이 가능합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:52
msgid "Variables & assignment"
msgstr "변수 & 지정"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:54
msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"동적 타입 언어의 모든 변수는 \"변형\"과 유사합니다. 즉, 그들의 타입은 고정되"
"어 있지 않고, 오직 지정을 통해 수정됩니다. 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:58
#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:80
msgid "Static:"
msgstr "정적 언어:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:66
#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:94
msgid "Dynamic:"
msgstr "동적 언어:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:75
msgid "As function arguments:"
msgstr "함수 인수로:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:77
msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr ""
"함수도 동적인 특성을 지닙니다, 그래서 함수를 다른 인수로 호출할 수 있습니다, "
"예를 들어:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:107
msgid "Pointers & referencing:"
msgstr "포인터(Pointer) & 참조:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:109
#, fuzzy
msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""
"C 나 C++ (그리고 어느 정도는 Java와 C#) 같은 정적 언어에서, 변수와 변수에 대"
"한 포인터/참조는 구별됩니다. 후자는 원래의 참조를 전달하여 다른 함수에 의해 "
"객체가 수정되도록 할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:114
#, fuzzy
msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""
"C#이나 Java에서, 모든 것이 내장 타입 (정수, 실수, 때때로 문자열)이 아닌 포인"
"터나 참조입니다. 참조는 또한 자동으로 가비지 수집하고, 더 이상 사용되지 않으"
"면 삭제됩니다. 동적 타입 언어 역시 이런 메모리 모델을 사용하는 경향이 있습니"
"다. 몇 가지 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:120
msgid "C++:"
msgstr "C++:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:136
msgid "Java:"
msgstr "Java:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:154
msgid "GDScript:"
msgstr "GDScript:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:166
msgid ""
"In GDScript, only base types (int, float, string and the vector types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"arrays, dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_Reference` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""
"GDScript에서 기본 타입 (정수, 실수, 문자열 그리고 벡터 타입)만이 함수에 값으"
"로 보낼 수 있습니다 (값은 복사됩니다). 나머지 (인스턴스, 배열, 딕셔너리 등)"
"는 참조로 보내집니다. :ref:`class_Reference` 를 상속한 클래스 (지정한 것이 없"
"으면 기본 값)는 사용되지 않을 때 해제되지만, :ref:`class_Object` 로 부터 수동"
"으로 상속하는 경우 수동 메모리 관리가 가능합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:174
msgid "Arrays"
msgstr "배열"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:176
msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""
"동적 타입 언어에서의 배열은 다양한 혼합 데이터 타입을 포함할 수 있으며 항상 "
"동적입니다 (어느 때나 크기가 조절될 수 있습니다). 정적 타입 언어의 배열과 비"
"교하는 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:203
msgid "And in GDScript:"
msgstr "그리고 GDScript에서는:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:212
msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr ""
"동적 타입 언어에서, 배열은 목록과 같이, 다른 데이터 타입으로 두 배가 될 수도 "
"있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:222
msgid "Or unordered sets:"
msgstr "또는 순서가 없는 세트가 될 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:231
msgid "Dictionaries"
msgstr "딕셔너리"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:233
#, fuzzy
msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""
"딕셔너리는 동적 타입 언어에서 강력한 도구입니다. 정적 타입 언어 (C++나 C#)에"
"서 온 대부분의 프로그래머들이 이 존재를 무시한 채 그들의 삶을 더 어렵게 만들"
"고 있습니다. 이 데이터 타입은 일반적으로 그러한 언어 (또는 제한된 형태)로 존"
"재하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:239
msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"딕셔너리는 키 또는 값으로 사용되는 데이터 타입을 무시하고 다른 값으로 매핑 "
"할 수 있습니다. 대중적 신념과는 반대로, 그들은 해시 테이블로 구현될 수 있기 "
"때문에 효과적입니다. 사실, 일부 언어는 배열을 딕셔너리로 구현하는 것이 더 효"
"과적입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:245
msgid "Example of Dictionary:"
msgstr "딕셔너리의 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:252
msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr ""
"딕셔너리 또한 동적이기에, 적은 손해로 어디에나 키를 추가하고 삭제할 수 있습니"
"다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:261
msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a simple battleship game example:"
msgstr ""
"대부분의 경우, 2 차원 배열은 종종 딕셔너리로 더 쉽게 구현될 수 있습니다. 여"
"기 간단한 전함 게임 예제가 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:294
#, fuzzy
msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""
"딕셔너리는 또한 데이터 마크업이나 빠른 구조에도 사용될 수 있습니다. GDScript "
"딕셔너리가 python 딕셔너리와 닮은 한편, GDScript는 초기 상태와 빠른 구조체를 "
"작성하는 데 유용한 Lua 스타일 구문과 인덱싱도 지원합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:318
msgid "For & while"
msgstr "For & while"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:320
msgid "Iterating in some statically typed languages can be quite complex:"
msgstr "일부 정적 타입 언어에서 반복은 꽤 복잡해질 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:341
msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr "보통 동적 타입 언어에서는 이것이 매우 단순화됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:348
msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr ""
"컨테이너 데이터 타입 (배열과 딕셔너리)도 반복 가능합니다. 딕셔너리는 키를 반"
"복할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:356
msgid "Iterating with indices is also possible:"
msgstr "인덱스로 반복하기도 가능합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:363
msgid "The range() function can take 3 arguments:"
msgstr "range() 함수는 3개의 인수를 가질 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:371
#, fuzzy
msgid "Some statically typed programming language examples:"
msgstr "일부 정적 타입 언어에서 반복은 꽤 복잡해질 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:381
msgid "Translate to:"
msgstr "번역:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:394
msgid "And backwards looping is done through a negative counter:"
msgstr "그리고 음수 카운터를 통해 역방향 루프가 됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:400
msgid "Becomes:"
msgstr "이렇게 됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:408
#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:384
msgid "While"
msgstr "While"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:410
msgid "while() loops are the same everywhere:"
msgstr "while() 루프는 모든 곳에서 동일합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:421
msgid "Custom iterators"
msgstr "커스텀 반복자(Iterator)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:422
msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"기본 반복자가 필요에 맞지 않는다면 변수 클래스의 스크립트의 ``_iter_init``, "
"``_iter_next``, 그리고 ``_iter_get`` 함수를 오버라이딩하여 커스텀 반복자를 생"
"성하실 수 있습니다. forward 반복자의 예제 구현은 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:454
msgid "And it can be used like any other iterator:"
msgstr "그리고 모든 다른 반복자처럼 사용될 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:462
msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"``_iter_init`` 에서 반복자의 상태를 리셋해야 합니다, 그렇지 않으면 커스텀 반"
"복자에 사용하는 중첩된 for 루프가 예상대로 작동하지 않을 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:466
msgid "Duck typing"
msgstr "덕 타이핑(Duck typing)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:468
msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"정적 타입 언어에서 동적 타입 언어로 바꿀 때 이해하기 어려운 개념들 중 하나가 "
"덕 타이핑입니다. 덕 타이핑은 전체 코드 설계를 더 간단하고 쓰기 쉽게 만들어주"
"지만, 어떻게 작동하는지 분명하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:473
msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"예제와 같이, 큰 바위가 터널로 떨어지고 있는 상황을 생각해보세요, 그 길의 모"
"든 것들을 박살내 버립니다. 바위의 코드는, 정적 언어에서는 다음과 같이 될 것입"
"니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:484
msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""
"이 방법은, 바위에 의해 박살날 수 있는 모든 것들은 Smashable(박살날 수 있음)"
"을 상속해야 합니다. 캐릭터, 적, 가구의 일부, 작은 돌들은 모두 박살날 수 있"
"고, 그들은 클래스 Smashable로 부터 상속해야 하고, 거기에 다중 상속이 필요할 "
"수도 있습니다. 다중 상속이 바람직하지 않은 경우, 그들은 Entity와 같은 일반 클"
"래스에 상속해야 합니다. 그러나 Entity들 중 일부만이 박살날 수 있다고 해서 가"
"상 메서드 ``smash()`` 를 추가하는 것은 그리 우아하지 않을 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:492
msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""
"동적 타입 언어에서는, 문제없습니다. 덕 타이핑이 ``smash()`` 함수가 필요한 곳"
"에만 정의하도록 만듭니다. 상속, 기본 클래스 등등을 고려할 필요가 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:501
msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""
"그리고 됐습니다. 큰 오리를 치는 물체가 smash() 메서드를 갖고 있다면, 호출될 "
"것입니다. 상속이나 폴리모피즘이 필요 없습니다. 동적 타입 언어는 상속된 인스턴"
"스나 클래스 타입이 아니라, 바람직한 메서드나 멤버를 가진 인스턴스가 맞는지 관"
"리하시면 됩니다. 덕 타이핑의 정의는 이를 명확하게 만듭니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:507
msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""
"*\"내가 오리처럼 걷고 오리처럼 수영하고 오리처럼 우는 새를 볼 때, 나는 그 새"
"를 오리라고 부른다\"*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:510
msgid "In this case, it translates to:"
msgstr "우리의 경우에는, 다음과 같이 번역됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:512
msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr "*\"물체를 박살낼 수 있다면, 무엇이든 상관없이, 그냥 박살낸다.\"*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:514
msgid "Yes, we should call it Hulk typing instead."
msgstr "예, 우리는 이를 대신 헐크 타이핑이라 불러야겠네요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:516
#, fuzzy
msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist (like Objective C), but GDScript is stricter, so checking if the "
"function exists is desirable:"
msgstr ""
"맞은 물체가 smash() 함수를 갖지 않을 수 있습니다. 일부 동적 타입 언어는 존재"
"하지 않는 메서드 호출은 간단히 무시합니다 (Objective C 처럼 말이죠), 하지만 "
"GDScript는 더 엄격합니다, 그래서 함수가 존재하는 지 확인하는 것이 바람직합니"
"다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:527
msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""
"그런 다음, 간단히 바위에 닿는 모든 것들을 메서드로 정의하여 박살날 수 있도록 "
"합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:4
msgid "GDScript style guide"
msgstr "GDScript 스타일 가이드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:9
msgid ""
"This styleguide lists conventions to write elegant GDScript. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also encourage "
"development of auto-formatting tools."
msgstr ""
"이 스타일 가이드는 GDScript를 우아하게 작성하는 규정 목록을 보여줍니다. 이를 "
"통해 깔끔하고 읽을 수 있는 코드를 작성하고, 프로젝트와 토론, 튜토리얼에 걸쳐 "
"일관성을 유지하는 것이 목적입니다. 바라건대, 이것이 자동 서식 지정 도구의 개"
"발을 장려할 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:14
msgid ""
"Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ programming styleguide."
msgstr ""
"GDScript가 Python과 밀접하기 때문에, 이 가이드는 Python의 `PEP 8 <https://"
"www.python.org/dev/peps/pep-0008/>`__ 프로그래밍 스타일 가이드에서 영감을 얻"
"었습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:18
msgid ""
"Godot's built-in script editor uses a lot of these conventions by default. "
"Let it help you."
msgstr ""
"Godot의 내장 스크립트 에디터는 기본적으로 많은 규정을 사용합니다. 그것이 당신"
"을 돕도록 하십시오."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:22
msgid "Code structure"
msgstr "코드 구조"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:25
msgid "Indentation"
msgstr "들여쓰기(Indentation)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:27
msgid "Indent type: Tabs *(editor default)*"
msgstr "들여쓰기 유형: Tabs *(에디터 기본)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:29
msgid "Indent size: 4 *(editor default)*"
msgstr "들여쓰기 크기: 4 *(에디터 기본)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:31
msgid "Each indent level should be one greater than the block containing it."
msgstr "각 들여쓰기 수준은 그것을 포함하는 블록보다 한 단계 더 커야합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:33
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:53
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:83
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:107
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:127
msgid "**Good**:"
msgstr "**좋음**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:40
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:61
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:93
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:114
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:137
msgid "**Bad**:"
msgstr "**나쁨**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:50
msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr ""
"계속되는 줄은 정규 코드 블록과 구분하기 위해 2단계의 들여쓰기 수준을 사용합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:70
msgid "Blank lines"
msgstr "공백 줄"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:72
#, fuzzy
msgid "Surround functions and class definitions with a blank line."
msgstr "함수와 클래스 정의를 공백 줄로 묶습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:74
msgid "Use one blank line inside functions to separate logical sections."
msgstr "논리 섹션을 분리하기 위해 함수 안에 하나의 공백 줄을 사용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:77
msgid "One statement per line"
msgstr "한 줄에 하나의 명령문"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:79
msgid ""
"Never combine multiple statements on a single line. No, C programmers, not "
"with a single line conditional statement (except with the ternary operator)!"
msgstr ""
"한 줄에 여러 명령문을 결합하지 마십시오. C 프로그래머는, 한 줄에 조건문과 함"
"께 사용하지 마십시오 (삼항 연산자 제외)!"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:102
msgid "Avoid unnecessary parentheses"
msgstr "불필요한 괄호 피하기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:104
msgid ""
"Avoid parentheses in expressions and conditional statements. Unless "
"necessary for order of operations, they only reduce readability."
msgstr ""
"표현식과 조건문에 괄호를 사용하지 마십시오. 연산 명령에 필요한 경우가 아니라"
"면, 가독성만 떨어뜨릴 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:122
msgid "Whitespace"
msgstr "공백"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:124
msgid ""
"Always use one space around operators and after commas. Avoid extra spaces "
"in dictionary references and function calls, or to create \"columns.\""
msgstr ""
"연산자와 쉼표 뒤에 하나의 빈칸을 반드시 사용합니다. 사전 참조나 함수 호출에 "
"여분의 공백을 피하거나, \"열\"을 생성하십시오."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:147
msgid "**NEVER**:"
msgstr "**절대 금지**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:156
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:193
msgid "Naming conventions"
msgstr "명명 규칙"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:158
msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, which is ugly."
msgstr ""
"이러한 명명 규칙은 Godot 엔진 스타일을 따릅니다. 이 규칙을 깬다면 코드가 보기"
"에도 못생기고, 내장된 명명 규칙으로 충돌하게 됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:163
msgid "Classes and nodes"
msgstr "클래스와 노드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:165
msgid "Use PascalCase: ``extends KinematicBody``"
msgstr "파스칼 표기법(PascalCase)을 사용: ``extends KinematicBody``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:167
msgid "Also when loading a class into a constant or variable:"
msgstr "또한 상수나 변수 안으로 클래스를 불러올 때 사용:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:174
msgid "Functions and variables"
msgstr "함수와 변수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:176
msgid "Use snake\\_case: ``get_node()``"
msgstr "스네이크 표기법(snake\\_case)을 사용: ``get_node()``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:178
msgid ""
"Prepend a single underscore (\\_) to virtual methods (functions the user "
"must override), private functions, and private variables: ``func _ready()``"
msgstr ""
"가상 메서드 (사용자가 치환해야 하는 함수), 개인 함수, 그리고 개인 함수에 단"
"일 밑줄 (\\_)을 추가하십시오: ``func _ready()``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:185
msgid "Use past tense:"
msgstr "과거 시제 사용:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:195
msgid ""
"Use CONSTANT\\_CASE, all caps, with an underscore (\\_) to separate words: "
"``const MAX_SPEED = 200``"
msgstr ""
"CONSTANT\\_CASE 사용, 모두 대문자로, 밑줄 (\\_)로 단어를 분리함: ``const "
"MAX_SPEED = 200``"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:4
msgid "Static typing in GDScript"
msgstr "GDScript에서 정적 타이핑(Static typing)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:6
#: ../../docs/tutorials/physics/physics_introduction.rst:16
msgid "In this guide, you will learn:"
msgstr "이 가이드에서 다음 내용을 배울 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:8
msgid "**How to use types in GDScript**"
msgstr "**GDScript에서 자료형(Type)을 사용하는 방법**"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:9
msgid "That **static types can help you avoid bugs**"
msgstr "이 **정적 타입(Type)은 버그를 피하는데 도움을 줍니다**"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:11
msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"새로운 언어 기능을 사용하는 위치와 방법은 당신에게 달렸습니다: 일부 민감한 "
"GDScript 파일에서만 이것을 사용할 수 있고, 어디에든 사용할 수 있고, 항상 그래"
"왔듯이 코드를 작성할 수 있습니다!"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:15
msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"정적 타입은 변수, 상수, 함수, 매개 변수, 그리고 반환 타입에 사용될 수 있습니"
"다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:20
msgid "Typed GDScript is available since Godot 3.1."
msgstr "타입된 GDScript는 Godot 3.1부터 사용할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:23
msgid "A brief look at static typing"
msgstr "정적 타이핑에 대한 간단한 설명"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:25
msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you’re working, as the "
"arguments’ types show up when you call a method."
msgstr ""
"타입된 GDScript로, 코드를 작성할 수록 훨씬 더 많은 오류를 Godot가 감지할 수 "
"있습니다! 즉, 메서드를 호출할 때, 인수의 타입이 나타나기 때문에 작업하는 동"
"안 당신과 당신의 동료에게 더 많은 정보를 제공합니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:29
msgid ""
"Imagine you’re programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"인벤토리 시스템을 프로그래밍 한다고 상상해보세요. 당신은 ``Item`` 노드를 코딩"
"하고, ``Inventory``\\ 를 코딩합니다. 아이템은 인벤토리에 넣기 위해, 당신의 코"
"드로 작업하는 사람들은 항상 ``Item``\\ 을 ``Inventory.add``\\ 으로 전달해야 "
"합니다. 타입으로는, 다음을 시행할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:48
msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"타입형 GDScript의 또 다른 두드러진 장점은 새로운 **경고 시스템**입니다. 3.1버"
"전부터 Godot 은 당신이 코딩을 하는 중에 바로 경고를 보여줍니다: 엔진은 실행 "
"중에 문제가 될 수 있는 코드 부분을 식별하지만 당신이 코드를 그대로 둘지 말지"
"는 당신이 결정할 수 있도록 합니다. 잠시후에 더 설명합니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:54
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"정적 타입 또한 더 나은 코드 완성 옵션을 제공합니다. 아래에서"
"``PlayerController``라는 클래스에 대한 동적 및 정적 타입 완료 옵션의 차이점"
"을 볼 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:58
msgid ""
"You’ve probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"당신은 아마 전에 변수에 노드를 저장하고, 변수이름 뒤에 점을 입력했으나 자동완"
"성 제안이 표시되지 않았던 경험이 있었을 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:64
msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you’re passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"이는 동적 코드 때문입니다. Godot는 함수에 전달하는 노드나 값 타입을 알 수 없"
"습니다. 그러나 유형을 명시적으로 작성해주면, 노드에서 모든 공용 메서드 및 변"
"수를 가져옵니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:71
msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"향후에, 타입형 GDScript는 또한 코드 실행 속도 등의 성능을 개선할 것입니다: 즉"
"석(Just-In-Time) 컴파일과 다른 컴파일러 성능 향상이 이미 로드맵에 대기 중입니"
"다!"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:75
msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you’re working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people’s code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"전체적으로, 타입형 프로그래밍은 더 구조화된 경험을 제공합니다. 에러를 방지하"
"고 스크립트가 자체문서화되도록 돕습니다. 이러한 점은 긴 프로젝트를 하거난 팀 "
"프로젝트에서 유용합니다: 연구는 개발자들이 다른 개발자의 코드나 또는 자신이 "
"오래전에 작성하여 내용을 잊어버린 스크립트를 보는데 대부분의 시간을 보낸다고 "
"합니다. 코드가 더 명확하고 구조화될수록 이해하는 것은 더 빨라지며 더 빨리 진"
"도를 나갈 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:84
msgid "How to use static typing"
msgstr "정적 타입 사용법"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:86
msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable’s name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"변수나 상수의 형(type)을 정의하기 위해서, 변수이름뒤에 콜론을 붙이고 타입을 "
"명시하세요. 예를 들면 \"var health:int\". 이것은 변수의 타입이 항상 동일하도"
"록 강제합니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:95
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""
"Godot은 당신이 콜론을 입력했지만 타입을 생략한 경우 타입을 예측하기 위해서 노"
"력합니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:104
msgid "Currently you can use three types of… types:"
msgstr "현재 세 개의 타입을 사용할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:106
#, fuzzy
msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`내장형 타입<gdscript_basics.html#built-in-types>`"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:107
msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""
"핵심 클래스와 노드 (``Object``, ``Node``, ``Area2D``, ``Camera2D``, 등등)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:109
msgid ""
"Your own, custom classes. Look at the new :ref:`class_name "
"<doc_scripting_continued_class_name>` feature to register types in the "
"editor."
msgstr ""
"당신이 만들고 수정한 클래스들. 에디터에서 타입을 등록하려면 새로운 :ref:`클래"
"스이름 <doc_scripting_continued_class_name>` 특징을 보세요."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:114
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"상수에 대해서는 Godot이 자동으로 대입된 값으로부터 타입을 인식하기 때문에 타"
"입 힌트를 쓸 필요가 없습니다. 하지만 여전히 코드의 의도를 명확히 하려면 그렇"
"게 하는게 좋습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:117
msgid "Custom variable types"
msgstr "커스텀 변수 타입"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:119
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"당신이 만든 클래스를 포함해 어떤 클래스든지 타입으로 사용할 수 있습니다. 스크"
"립트에서 쓸 수 있는 방법이 두 가지가 있는데, 첫번째 방법은 타입으로 사용할 스"
"크립트를 미리 로딩하여 상수로 저장하는 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:128
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:136
msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:145
msgid "Variable casting"
msgstr "변수 캐스팅(casting)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:147
msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""
"형 변환은 타입 언어에서의 주요된 개념입니다. 어떤 값의 타입을 다른 타입으로 "
"바꾸는 것이지요."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:150
msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:157
msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:170
msgid ""
"As we’re dealing with a custom type, if the ``body`` doesn’t extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:177
msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:180
msgid "Safe lines"
msgstr "안전 라인"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:182
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn’t have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"안전 라인을 보장하기 위해 형 변환을 사용할 수도 있습니다. 안전 라인은 애매모"
"호한 코드가 형안전한지 알려주는 Godot 3.1에서 새로 추가된 도구입니다. 정적 타"
"입과 동적 타입을 섞어서 대입시킬 수 있기 때문에 Godot은 런타임에 오류가 발생"
"할 지에 대한 여부를 판명할 충분한 정보가 없습니다."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:188
msgid ""
"This happens when you get a child node. Let’s take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don’t care about the "
"node’s type as long as it has the methods you need to call."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:196
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:204
msgid "Safe vs Unsafe Line"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:208
msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:211
msgid "Define the return type of a function with the arrow ->"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:213
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after it’s declaration, followed by the return type:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:221
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:230
msgid "You can also use your own nodes as return types:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:245
msgid "Typed or dynamic: stick to one style"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:247
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But I "
"recommended to stick to either style for consistency in your codebase, and "
"for your peers. It’s easier for everyone to work together if you follow the "
"same guidelines, and faster to read and understand other people’s code."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:253
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here’s an example of the same, empty script, in a dynamic "
"style:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:265
msgid "And with static typing:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:275
msgid ""
"As you can see, you can also use types with the engine’s virtual methods. "
"Signal callbacks, like any methods, can also use types. Here’s a "
"``body_entered`` signal in a dynamic style:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:284
msgid "And the same callback, with type hints:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:291
msgid ""
"You’re free to replace, e.g. the ``PhysicsBody2D``, with your own type, to "
"cast parameters automatically:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:301
msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it’s "
"anything else, like an ``Area2D``, or any node that doesn’t extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:307
msgid "Warning system"
msgstr "경고 시스템(Warning system)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:309
msgid ""
"The warning system complements typed GDScript. It’s here to help you avoid "
"mistakes that are hard to spot during development, and that may lead to "
"runtime errors."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:313
msgid ""
"You can configure warnings in the Project Settings under a new section "
"called ``GDScript``:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:319
msgid "warning system project settings"
msgstr "경고 시스템 프로젝트 설정"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:321
msgid ""
"You can find a list of warnings for the active GDScript file in the script "
"editor’s status bar. The example below has 3 warnings:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:327
msgid "warning system example"
msgstr "경고 시스템 예제"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:329
msgid ""
"To ignore specific warnings in one file, insert a special comment of the "
"form ``#warning-ignore:warning-id``, or click on the ignore link to the "
"right of the warning’s description. Godot will add a comment above the "
"corresponding line and the code won’t trigger the corresponding warning "
"anymore:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:338
msgid "warning system ignore example"
msgstr "경고 시스템 무시 예제"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:340
msgid ""
"Warnings won’t prevent the game from running, but you can turn them into "
"errors if you’d like. This way your game won’t compile unless you fix all "
"warnings. Head to the ``GDScript`` section of the Project Settings to turn "
"on this option. Here’s the same file as the previous example with warnings "
"as errors turned on:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:349
msgid "warnings as errors"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:352
msgid "Cases where you can’t specify types"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:354
msgid ""
"To wrap up this introduction, let’s cover a few cases where you can’t use "
"type hints. All the examples below **will trigger errors**."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:357
msgid "You can’t use Enums as types:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:364
msgid ""
"You can’t specify the type of individual members in an array. This will give "
"you an error:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:371
msgid ""
"You can’t force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:381
msgid "Two scripts can’t depend on each other in a cyclic fashion:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:400
#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:124
#: ../../docs/tutorials/2d/2d_movement.rst:354
msgid "Summary"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:402
msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:4
msgid "GDScript format strings"
msgstr "GDScript 형식 문자열(format strings)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:6
#, fuzzy
msgid ""
"GDScript offers a feature called *format strings*, which allows reusing text "
"templates to succinctly create different but similar strings."
msgstr ""
"GDscript는 비슷한 문자열들을 간결하게 만들어 텍스트 템플릿으로 재사용 가능하"
"도록 만드는 *형식 문자열* 이란 기능을 제공합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:9
msgid ""
"Format strings are just like normal strings, except they contain certain "
"placeholder character-sequences. These placeholders can then easily be "
"replaced by parameters handed to the format string."
msgstr ""
"형식 문자열은 평범한 문자열과 달리, 특정 플레이스 홀더 문자 순서를 갖습니다. "
"이 플레이스 홀더는 형식 문자열에 전달된 매개변수로 쉽게 대체될 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:13
msgid ""
"As an example, with ``%s`` as a placeholder, the format string ``\"Hello %s, "
"how are you?`` can easily be changed to ``\"Hello World, how are you?\"``. "
"Notice the placeholder is in the middle of the string; modifying it without "
"format strings could be cumbersome."
msgstr ""
"예를 들어, ``%s`` 인 플레이스 홀더는, 형식 문자열 ``\"Hello %s, how are you?"
"`` 을 간단히  ``\"Hello World, how are you?\"`` 로 바꿉니다. 플레이스 홀더가 "
"문자열의 핵심입니다; 형식 문자열 없이 문자열을 수정하는 것은 성가신 일이기 때"
"문입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:20
msgid "Usage in GDScript"
msgstr "GDScript에서 사용법"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:22
msgid "Examine this concrete GDScript example:"
msgstr "구체적인 GDScript 예시를 참고해보세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:35
msgid ""
"Placeholders always start with a ``%``, but the next character or "
"characters, the *format specifier*, determines how the given value is "
"converted to a string."
msgstr ""
"플레이스 홀더는 항상 ``%`` 로 시작하지만, 다음 문자나 문자열인 *형식 지정자"
"(format specifier)* 는 주어진 값을 문자로 전환하는 방법을 결정합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:39
msgid ""
"The ``%s`` seen in the example above is the simplest placeholder and works "
"for most use cases: it converts the value by the same method by which an "
"implicit String conversion or ``str()`` would convert it. Strings remain "
"unchanged, Booleans turn into either ``\"True\"`` or ``\"False\"``, an "
"integral or real number becomes a decimal, other types usually return their "
"data in a human-readable string."
msgstr ""
"``%s`` 는 가장 간단하고 작업에 자주 쓰이는 플레이스 홀더입니다: 암묵적 문자"
"열 변환이나 ``str()`` 이 문자열을 전환하는 방식과 같은 방식으로 값을 전환시킵"
"니다. 문자열은 바꾸지 않고, 불 방식은 ``\"True\"`` 나 ``\"False\"`` 로, 정수"
"나 실수는 십진수로, 그 외 다른 형식도 사람이 읽을 수 있는 정보로 바꿉니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:46
msgid ""
"There is also another way to format text in GDScript, namely the ``String."
"format()`` method. It replaces all occurrences of a key in the string with "
"the corresponding value. The method can handle arrays or dictionaries for "
"the key/value pairs."
msgstr ""
"그리고 GDScript에서 텍스트를 형식화하는 또 다른 방법으로,``String.format()`` "
"메서드가 있습니다. 이것은 문자열 내 모든 항목의 키를 해당 값으로 바꿉니다. 이"
"것으로 배열이나 딕셔너리를 키/값 묶음으로 다룰 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:50
msgid ""
"Arrays can be used as key, index, or mixed style (see below examples). Order "
"only matters when the index or mixed style of Array is used."
msgstr ""
"배열은 키, 인덱스, 아니면 혼합 스타일로 사용됩니다 (밑의 예시를 참고하세요). "
"순서는 배열의 인덱스나 혼합 스타일을 사용할 때만 중요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:53
msgid "A quick example in GDScript:"
msgstr "GDScript의 빠른 예제:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:66
msgid ""
"There are other `format specifiers`_, but they are only applicable when "
"using the ``%`` operator."
msgstr ""
"오직 ``%`` 연산자에만 적용할 수 있는 `형식 지정자(format specifiers)`_ 도 있"
"습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:71
msgid "Multiple placeholders"
msgstr "많은 플레이스 홀더"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:73
msgid ""
"Format strings may contain multiple placeholders. In such a case, the values "
"are handed in the form of an array, one value per placeholder (unless using "
"a format specifier with ``*``, see `dynamic padding`_):"
msgstr ""
"형식 문자열은 여러가지 플레이스 홀더를 가질 수 있습니다. 예를 들어, 값은 배열"
"의 형식으로, 각각의 플레이스 홀더에 단일 값으로 전달됩니다 (``*`` 으로 이루어"
"진 형식 지정자를 사용하지 않는다면, `동적 패딩`_ 을 참고하세요):"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:85
msgid ""
"Note the values are inserted in order. Remember all placeholders must be "
"replaced at once, so there must be an appropriate number of values."
msgstr ""
"값은 순서대로 삽입됩니다. 모든 플레이스 홀더는 한번에 바꾸어야 하기 때문에, "
"적절한 수의 값이 있어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:90
msgid "Format specifiers"
msgstr "형식 지정자(Format specifiers)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:92
msgid ""
"There are format specifiers other than ``s`` that can be used in "
"placeholders. They consist of one or more characters. Some of them work by "
"themselves like ``s``, some appear before other characters, some only work "
"with certain values or characters."
msgstr ""
"플레이스 홀더에 사용되는 ``s`` 이외에도 다른 형식 지정자가 있습니다. 이들은 "
"하나 이상의 문자로 구성됩니다. ``s`` 처럼 스스로 작동하는 것이 있는 반면, 일"
"부는 다른 문자 앞에 나타나기도 하며, 어떤 것은 오직 특정 값이나 문자에만 작동"
"합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:99
msgid "Placeholder types"
msgstr "플레이스 홀더 유형"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:101
msgid ""
"One and only one of these must always appear as the last character in a "
"format specifier. Apart from ``s``, these require certain types of "
"parameters."
msgstr ""
"이들 중 하나가 반드시 형식 지정자의 마지막 문자로 항상 나타나야 합니다. "
"``s`` 와는 별개로, 이들은 특정 유형의 매개변수가 필요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:105
msgid "``s``"
msgstr "``s``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:105
msgid ""
"**Simple** conversion to String by the same method as implicit String "
"conversion."
msgstr "암시적 문자열 변환과 같은 방법으로 문자열을 **간단히** 변환합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:108
msgid "``c``"
msgstr "``c``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:108
msgid ""
"A single **Unicode character**. Expects an unsigned 8-bit integer (0-255) "
"for a code point or a single-character string."
msgstr ""
"하나의 **유니코드 문자**. 코드 포인트나 단일 문자의 경우 부호가 없는 8비트 정"
"수 (0-255) 가 필요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:111
msgid "``d``"
msgstr "``d``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:111
msgid ""
"A **decimal integral** number. Expects an integral or real number (will be "
"floored)."
msgstr "**십진법 정수**. 정수나 (반올림 되는) 실수가 필요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:114
msgid "``o``"
msgstr "``o``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:114
msgid ""
"An **octal integral** number. Expects an integral or real number (will be "
"floored)."
msgstr "**8진법 정수**. 정수나 (반올림 되는) 실수가 필요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:117
msgid "``x``"
msgstr "``x``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:117
msgid ""
"A **hexadecimal integral** number with **lower-case** letters. Expects an "
"integral or real number (will be floored)."
msgstr ""
"**소문자** 로 이루어진 **16진법 정수**. 정수나 (반올림 되는) 실수가 필요합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:120
msgid "``X``"
msgstr "``X``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:120
msgid ""
"A **hexadecimal integral** number with **upper-case** letters. Expects an "
"integral or real number (will be floored)."
msgstr ""
"**대문자** 로 이루어진 **16진법 정수**. 정수나 (반올림 되는) 실수가 필요합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:123
msgid "``f``"
msgstr "``f``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:123
msgid "A **decimal real** number. Expects an integral or real number."
msgstr "**실수**. 정수나 실수가 필요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:128
msgid "Placeholder modifiers"
msgstr "플레이스 홀더 수정자"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:130
msgid ""
"These characters appear before the above. Some of them work only under "
"certain conditions."
msgstr ""
"이 문자는 위 문자들보다 앞에서 나타납니다. 일부는 특정 조건에서만 작동합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:134
msgid "In number specifiers, **show + sign** if positive."
msgstr "숫자 지정자에서, 숫자가 양수라면 **+ 부호를 표시합니다**."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:136
#: ../../docs/tutorials/misc/binary_serialization_api.rst:94
#: ../../docs/tutorials/misc/binary_serialization_api.rst:103
#: ../../docs/tutorials/misc/binary_serialization_api.rst:121
#: ../../docs/tutorials/misc/binary_serialization_api.rst:312
#: ../../docs/tutorials/misc/binary_serialization_api.rst:332
#: ../../docs/tutorials/misc/binary_serialization_api.rst:334
#: ../../docs/tutorials/misc/binary_serialization_api.rst:342
#: ../../docs/tutorials/misc/binary_serialization_api.rst:361
#: ../../docs/tutorials/misc/binary_serialization_api.rst:373
#: ../../docs/tutorials/misc/binary_serialization_api.rst:385
#: ../../docs/tutorials/misc/binary_serialization_api.rst:398
#: ../../docs/tutorials/misc/binary_serialization_api.rst:400
#: ../../docs/tutorials/misc/binary_serialization_api.rst:409
#: ../../docs/tutorials/misc/binary_serialization_api.rst:411
#: ../../docs/tutorials/misc/binary_serialization_api.rst:420
#: ../../docs/tutorials/misc/binary_serialization_api.rst:428
#: ../../docs/tutorials/misc/binary_serialization_api.rst:441
#: ../../docs/tutorials/misc/binary_serialization_api.rst:454
#: ../../docs/tutorials/misc/binary_serialization_api.rst:469
msgid "Integer"
msgstr "정수(Integer)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:136
msgid ""
"Set **padding**. Padded with spaces or with zeroes if integer starts with "
"``0`` in an integer placeholder. When used after ``.``, see ``.``."
msgstr ""
"**패딩** 를 설정합니다. 정수 플레이스 홀더에서 정수가 ``0`` 으로 시작한다면 "
"그곳을 0이나 공백으로 채웁니다. ``.`` 뒤에서 쓰는 경우는, ``.`` 를 참고하세"
"요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:140
msgid "``.``"
msgstr "``.``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:140
msgid ""
"Before ``f``, set **precision** to 0 decimal places. Can be followed up with "
"numbers to change. Padded with zeroes."
msgstr ""
"``f``이전에, **정밀도** 를 소수점 이하 자릿수 0으로 설정합니다. 변경할 숫자"
"를 뒤따라 갈 수 있습니다. 0으로 채워집니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:143
msgid "**Pad to the right** rather than the left."
msgstr "왼쪽 대신 **오른쪽을 채웁니다**."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:145
msgid "``*``"
msgstr "``*``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:145
msgid ""
"**Dynamic padding**, expect additional integral parameter to set padding or "
"precision after ``.``, see `dynamic padding`_."
msgstr ""
"**동적 패딩(Dynamic padding)** 으로, 패딩이나 ``.`` 이후의 정밀도를 설정하기 "
"위한 추가 적분 매개변수가 필요합니다, `동적 패딩`_ 을 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:151
msgid "Padding"
msgstr "패딩(Padding)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:153
msgid ""
"The ``.`` (*dot*), ``*`` (*asterisk*), ``-`` (*minus sign*) and digit (``0``-"
"``9``) characters are used for padding. This allows printing several values "
"aligned vertically as if in a column, provided a fixed-width font is used."
msgstr ""
"``.`` (*점*), ``*`` (*별표*), ``-`` (*빼기 문자*) 그리고 한 자리 수 (``0``-"
"``9``) 문자들이 패딩에 사용됩니다. 이것을 고정 너비 글꼴에 사용한다면, 세로"
"로 정렬된 여러 값들을 프린트할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:158
msgid "To pad a string to a minimum length, add an integer to the specifier:"
msgstr "문자열을 최소 길이로 패딩하기 위해선, 지정자에 정수를 추가하십시오:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:166
msgid ""
"If the integer starts with ``0``, integral values are padded with zeroes "
"instead of white space:"
msgstr "정수가 ``0``으로 시작한다면, 적분 값은 공백 대신 0으로 패딩됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:174
msgid ""
"Precision can be specified for real numbers by adding a ``.`` (*dot*) with "
"an integer following it. With no integer after ``.``, a precision of 0 is "
"used, rounding to integral value. The integer to use for padding must appear "
"before the dot."
msgstr ""
"정밀도는 정수 뒤에 ``.``(*점*)을 추가해서 실수로 지정할 수 있습니다. ``.``뒤"
"에 정수가 없다면, 정밀도가 0으로, 적분 값에 반올림됩니다. 패딩에 쓰이는 정수"
"는 점 앞에 나와야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:186
msgid ""
"The ``-`` character will cause padding to the right rather than the left, "
"useful for right text alignment:"
msgstr ""
"``-`` 문자는 왼쪽이 아닌 오른쪽으로 채우므로, 오른쪽 텍스트 정렬에 유용합니"
"다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:197
msgid "Dynamic padding"
msgstr "동적 패딩"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:199
msgid ""
"By using the ``*`` (*asterisk*) character, the padding or precision can be "
"set without modifying the format string. It is used in place of an integer "
"in the format specifier. The values for padding and precision are then "
"passed when formatting:"
msgstr ""
"``*`` (*별표*) 문자를 사용해서, 형식 문자열을 수정하지 않고 패딩이나 정밀도"
"를 설정할 수 있습니다. 이것은 형식 지정자에서 정수 대신 사용됩니다. 패딩과 정"
"밀도의 값은 서식을 지정할 때 전달됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:212
msgid ""
"It is still possible to pad with zeroes in integer placeholders by adding "
"``0`` before ``*``:"
msgstr ""
"``*`` 앞에 ``0`` 을 추가해 정수 플레이스 홀더를 0으로 채울 수도 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:222
msgid "Escape sequence"
msgstr "이스케이프 시퀀스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:224
msgid ""
"To insert a literal ``%`` character into a format string, it must be escaped "
"to avoid reading it as a placeholder. This is done by doubling the character:"
msgstr ""
"상수 ``%`` 문자를 형식 문자열에 넣으려면, 플레이스 홀더처럼 읽히지 않도록 이"
"스케이프 해야 합니다. 잘못하면 문자를 두 배로 만들 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:235
msgid "Format method examples"
msgstr "형식 메서드 예제"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:237
msgid ""
"The following are some examples of how to use the various invocations of the "
"``String.format``  method."
msgstr "``String.format`` 메서드의 호출을 사용하는 방법은 다음과 같습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:242
msgid "**Style**"
msgstr "**스타일**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:242
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:264
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:277
msgid "**Example**"
msgstr "**예제**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:242
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:264
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:277
msgid "**Result**"
msgstr "**결과**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:244
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:246
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:248
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:195
msgid "Dictionary"
msgstr "딕셔너리"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:244
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:250
msgid "key"
msgstr "키"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:244
msgid ""
"``\"Hi, {name} v{version}!\".format({\"name\":\"Godette\", \"version\":"
"\"3.0\"})``"
msgstr ""
"``\"안녕, {이름} v{버전}!\".format({\"이름\":\"Godette\", \"버전\":"
"\"3.0\"})``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:244
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:246
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:248
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:250
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:252
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:254
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:256
msgid "Hi, Godette v3.0!"
msgstr "안녕, Godette v3.0!"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:246
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:252
msgid "index"
msgstr "인덱스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:246
msgid "``\"Hi, {0} v{1}!\".format({\"0\":\"Godette\", \"1\":\"3.0\"})``"
msgstr "``\"안녕, {0} v{1}!\".format({\"0\":\"Godette\", \"1\":\"3.0\"})``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:248
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:254
msgid "mix"
msgstr "믹스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:248
msgid ""
"``\"Hi, {0} v{version}!\".format({\"0\":\"Godette\", \"version\":\"3.0\"})``"
msgstr ""
"``\"안녕, {0} v{버전}!\".format({\"0\":\"Godette\", \"버전\":\"3.0\"})``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:250
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:252
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:254
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:256
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:174
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:182
msgid "Array"
msgstr "배열"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:250
msgid ""
"``\"Hi, {name} v{version}!\".format([[\"version\",\"3.0\"], [\"name\","
"\"Godette\"]])``"
msgstr ""
"``\"안녕, {이름} v{버전}!\".format([[\"버전\":\"3.0\"], [\"이름\":\"Godette"
"\"]])``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:252
msgid "``\"Hi, {0} v{1}!\".format([\"Godette\",\"3.0\"])``"
msgstr "``\"안녕, {0} v{1}!\".format([\"Godette\",\"3.0\"])``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:254
msgid "``\"Hi, {name} v{0}!\".format([3.0, [\"name\",\"Godette\"]])``"
msgstr "``\"안녕, {이름} v{0}!\".format([3.0, [\"이름\":\"Godette\"]])``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:256
msgid "no index"
msgstr "인덱스 없음"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:256
msgid "``\"Hi, {} v{}!\".format([\"Godette\", 3.0], \"{}\")``"
msgstr "``\"안녕, {} v{}!\".format([\"Godette\", 3.0], \"{}\")``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:259
msgid ""
"Placeholders can also be customized when using ``String.format``, here's "
"some examples of that functionality."
msgstr ""
"플레이스 홀더도 ``String.format``을 사용할 때 사용자 정의를 할 수 있습니다, "
"이 기능의 몇 가지 예를 소개합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:266
msgid "Infix (default)"
msgstr "중위 (기본)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:266
msgid "``\"Hi, {0} v{1}\".format([\"Godette\", \"3.0\"], \"{_}\")``"
msgstr "``\"안녕, {0} v{1}\".format([\"Godette\", \"3.0\"], \"{_}\")``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:266
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:268
#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:270
msgid "Hi, Godette v3.0"
msgstr "안녕, Godette v3.0"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:268
msgid "Postfix"
msgstr "후위"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:268
msgid "``\"Hi, 0% v1%\".format([\"Godette\", \"3.0\"], \"_%\")``"
msgstr "``\"안녕, 0% v1%\".format([\"Godette\", \"3.0\"], \"_%\")``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:270
msgid "Prefix"
msgstr "접두사"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:270
msgid "``\"Hi, %0 v%1\".format([\"Godette\", \"3.0\"], \"%_\")``"
msgstr "``\"안녕, %0 v%1\".format([\"Godette\", \"3.0\"], \"%_\")``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:273
#, fuzzy
msgid ""
"Combining both the ``String.format`` method and the ``%`` operator could be "
"useful, as ``String.format`` does not have a way to manipulate the "
"representation of numbers."
msgstr ""
"``String.format`` 메서드와 ``%`` 연산자를 결합함으로써 ``String.format`` 가 "
"다룰 수 없는 숫자 표현을 다룰 수 있게 됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:279
msgid ""
"``\"Hi, {0} v{version}\".format({0:\"Godette\", \"version\":\"%0.2f\" % "
"3.114})``"
msgstr ""
"``\"안녕, {0} v{버전}\".format({0:\"Godette\", \"버전\":\"%0.2f\" % 3.114})``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_format_string.rst:279
msgid "Hi, Godette v3.11"
msgstr "안녕, Godette v3.11"

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:4
msgid "What is Visual Scripting"
msgstr "Visual Scripting(비주얼 스크립팅)은 무엇인가요"

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:6
msgid ""
"Visual Scripting is a tool designed to make the entry barrier to programming "
"much lower. As code is more visual, it needs less abstract thinking to be "
"understood. Any artist, animator, game designer, etc. can look at it and "
"quickly grasp the flow of logic."
msgstr ""
"Visual Scripting은 프로그래밍 진입 장벽을 낮추기 위해 고안된 도구입니다. 코드"
"보다 더 시각적이어서 이해하는데 쉽습니다. 아티스트, 애니메이터, 게임 디자이"
"너 및 다른 사람들도 논리의 흐름을 쉽고 빠르게 파악할 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:11
msgid ""
"The reason it does not make existing programming obsolete is, simply, that "
"it does not scale as well. It takes considerably more time to create code "
"with it, and it's often more difficult to modify than just writing a few "
"characters."
msgstr ""
"이것이 기존의 프로그래밍을 구식으로 만들지는 못합니다, 간단히 말해 확장이 잘 "
"되지 못합니다. 코드로 만드는 것보다 훨씬 더 많은 시간이 소요되고, 때로는 단"
"지 몇 글자를 수정하는 것보다 더 어렵습니다."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:15
msgid ""
"With the misunderstanding cleared up, the question that remains is what are "
"the practical uses for Visual Scripting."
msgstr "오해가 해결되면서, 남은 질문은 Visual Scripting의 실용적인 용도입니다."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:18
msgid "The most common use cases are as follows:"
msgstr "가장 일반적인 사용 케이스는 다음과 같습니다:"

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:20
msgid ""
"Game development beginners who want to learn an engine but have no "
"programming experience yet."
msgstr ""
"엔진을 배우고 싶지만 아직 프로그래밍 경험이 전혀 없는 게임 개발 입문자."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:21
msgid ""
"Artists and Game Designers who have no experience in programming and want to "
"create quick prototypes or simple games."
msgstr ""
"프로그래밍에 대한 경험이 없고 간단한 프로토타입이나 게임을 만들과 싶어하는 아"
"티스트와 게임 디자이너."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:22
msgid ""
"Programmers working in a team that want to make part of the game logic "
"available to Artists or Game Designers in order to offload some of their "
"work."
msgstr ""
"팀으로 일하면서 아티스트나 게임 디자이너에게 게임 논리의 일부를 주어 그들의 "
"작업량을 줄이기 원하는 프로그래머."

#: ../../docs/getting_started/scripting/visual_script/what_is_visual_scripting.rst:24
msgid ""
"These scenarios are far more common than one might think, so this is why "
"Godot has added this feature."
msgstr ""
"이 시나리오는 생각보다 훨씬 더 흔합니다, 그래서 Godot가 이 기능을 추가한 것입"
"니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:4
msgid "Getting started with Visual Scripting"
msgstr "Visual Scripting 시작하기"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:6
msgid ""
"As with everything in Godot, we prioritize a good experience over copying or "
"integrating third party solutions which might not fit nicely in the current "
"workflow. This led us to write our own version of how we believe this "
"feature would work best with the engine."
msgstr ""
"Godot의 모든 기능과 마찬가지로, 우리는 현재 워크플로우에 적합하지 않을 수 있"
"는 타사 솔루션을 복사하거나 통합하는 것에 대한 좋은 경험을 우선순위로 둡니"
"다. 이것으로 우리는 이 기능이 엔진에서 가장 잘 작동할 것이라고 생각하는 우리"
"의 설명을 적을 수 있었습니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:10
msgid ""
"In Godot, a Visual Script fits smoothly together with regular scripts in the "
"Editor tab"
msgstr ""
"Godot에서, Visual Script가 에디터 탭의 일반 스크립트와 매끄럽게 호환합니다"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:15
msgid ""
"In fact, Visual Scripting integrates so well to Godot that it's hard to "
"believe it was added only in version 3.0. This is because, when editing, the "
"rest of Godot panels and docks act like a palette from where you can drag "
"and drop all sorts of information to the script canvas:"
msgstr ""
"사실, Visual Scripting이 Godot에 잘 통합되기 때문에 버전 3.0에 추가되었다고 "
"보기 어렵습니다. 왜냐하면 Visual Script를 편집할 때, Godot 패널과 독의 나머"
"지 부분이 모든 종류의 정보를 스크립트 캔버스로 끌어다 놓을 수 있는 팔레트처"
"럼 작동하기 때문입니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:23
#, fuzzy
msgid "Creating a script"
msgstr "스크립트 생성하기"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:25
msgid ""
"Creating scripts works the same as with other scripting languages: Select "
"any node in the scene and push the \"New Script\" button at the top right "
"corner of the Scene Tree dock:"
msgstr ""
"스크립트 생성은 다른 스크립팅 언어와 동일하게 작동합니다: 씬의 아무 노드나 선"
"택하고 씬 트리 독의 오른쪽 상단 모서리에 있는 \"새 스크립트\" 버튼을 누릅니"
"다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:31
msgid ""
"Once it opens, the script type \"Visual Script\" must be selected from the "
"drop down list. The script extension must be \".vs\" (for Visual Script!)."
msgstr ""
"열리면 드롭 다운 목록에서 스크립트 타입 \"Visual Script\"를 선택해야 합니다. "
"스크립트 확장은 \".vs\"(Visual Script를 위해!) 이어야 합니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:37
#, fuzzy
msgid ""
"Finally, the Script Editor will open, allowing you to start editing the "
"visual script:"
msgstr ""
"마침내, Script 에디터가 열리고, Visual script 편집을 시작할 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:43
#, fuzzy
msgid "Adding a function"
msgstr "함수 추가하기"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:45
msgid ""
"Unlike other visual scripting implementations, Visual Scripting in Godot is "
"heavily based on functions. This happens because it uses the same interface "
"to communicate with the engine as other scripting engines. In Godot, the "
"scripting interface is universal and all implementations conform to it."
msgstr ""
"다른 시각적 스크립팅 실행과 달리 Godot의 Visual Scripting은 함수를 기반으로 "
"합니다. 왜냐하면 다른 스크립팅 엔진처럼 엔진과 통신하는 동일한 인터페이스를 "
"사용하기 때문에 일어납니다. Godot에서는 스크립팅 인터페이스가 보편적이며 모"
"든 실행이 이 인터페이스를 준수합니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:49
msgid "A function is an individual canvas with nodes connected."
msgstr "함수는 노드가 연결된 개별 캔버스입니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:51
msgid ""
"A single script can contain many functions, each of which will have a canvas "
"of its own, allowing for more organization."
msgstr ""
"단일 스크립트에는 많은 함수를 포함할 수 있으며, 각각 고유의 캔버스를 갖고 있"
"고, 더 많은 구성을 할 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:53
msgid "There are three main ways to add functions in a script:"
msgstr "스크립트에 함수를 추가하는 세 가지 주요 방법이 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:56
#, fuzzy
msgid "Overriding a virtual function"
msgstr "가상 함수 재정의하기(Override)"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:58
msgid ""
"Most types of nodes and other types of objects in Godot contain virtual "
"functions. These are functions that will be called (run your code) when "
"something happens and can be looked up in the reference. Virtual functions "
"are listed when pressing the \"Override\" icon in the member panel:"
msgstr ""
"Godot에 있는 대부분의 타입의 노드와 다른 타입의 객체는 가상 함수를 포함합니"
"다. 이들은 무언가가 발생했을 때 (코드를 실행하여) 호출될 함수로 참조에서 볼 "
"수 있습니다. 멤버 패널에서 \"재정의\" 아이콘을 누르면 가상 함수가 나열됩니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:65
msgid ""
"In the following example, a function will be executed when the node is "
"loaded and added to the running scene. For this, the _ready() virtual method "
"will be overridden:"
msgstr ""
"다음 예시에서는, 노드를 불러와서 실행 씬에 추가될 때 함수가 실행될 것입니다. "
"이를 위해 _ready () 가상 메서드가 재정의 될 것입니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:71
msgid "Finally, a canvas appears for this function, showing the override:"
msgstr "마침내, 이 함수를 위해 재정의를 보여주는 캔버스가 나타났습니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:76
msgid ""
"As some functions expect you to return a value, they will also add a return "
"node where such value is supposed to be provided:"
msgstr ""
"일부 함수는 값을 반환할 것을 예상하며, 그들에게는 반환 노드를 추가하여 해당 "
"값을 제공해야 합니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:83
#, fuzzy
msgid "Connecting a signal to a function"
msgstr "함수에 시그널 연결하기"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:85
msgid ""
"Nodes in a tree emit signals when something happens. Godot uses signals for "
"all sorts of things. A typical example would be a button that emits a "
"\"pressed\" signal when actually pressed."
msgstr ""
"트리의 노드는 무언가가 발생하면 시그널을 방출(emit)합니다. Godot는 모든 종류"
"의 시그널을 사용합니다. 전형적인 예로 버튼이 실제로 눌렀을 때 \"pressed\"(눌"
"렸음) 시그널을 내보내는 것이 있습니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:88
msgid ""
"For this, a node must be selected and the Node tab opened. This will allow "
"inspecting the signals. Once they are displayed, connect the \"pressed\" "
"signal:"
msgstr ""
"이를 위해, 노드를 선택하고 Node 탭을 열어줍니다. 이렇게 하면 시그널을 볼 수 "
"있습니다. 일단 보여지면, \"pressed\" 시그널을 연결하십시오:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:94
msgid ""
"This will open the connection dialog. In this dialog, you must select the "
"node where the signal will be connected to, and the function that will "
"receive the signal:"
msgstr ""
"연결 대화 상자가 열립니다. 이 대화 상자에서 시그널을 연결할 노드를 선택하고 "
"시그널을 받을 함수를 선택해야 합니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:100
msgid ""
"If this is done right, a new function will be created in our script and a "
"signal will automatically be connected to it:"
msgstr ""
"잘 작동된다면, 스크립트에 새 함수가 만들어지며 시그널이 자동으로 연결됩니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:107
#, fuzzy
msgid "Creating a function manually"
msgstr "수동으로 함수 만들기"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:109
#, fuzzy
msgid ""
"The last way to create functions is to do it manually. In general, this is "
"not as common unless you really need it. Custom functions work when another "
"(or the same) script calls them manually. The main use cases for this are "
"breaking a larger function up into several manageable chunks and reusing "
"your visual code."
msgstr ""
"마지막 방법으로는 함수를 수동으로 생성하는 것입니다. 일반적으로 정말로 필요"
"한 경우가 아니라면 수동 생성은 쓰이지 않습니다. 커스텀 함수는 다른 (또는 같"
"은) 스크립트가 수동으로 호출할 때 작동합니다. 주요 사용 사례로는 함수를 더 작"
"게 분리하는 것이나, 시각적 코드를 재 사용하는 것입니다."

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:113
msgid ""
"To create a function manually, push the big \"Plus\" button, and a new "
"function will be added with a default name:"
msgstr ""
"함수를 수동으로 생성하려면, 큰 \"더하기\" 버튼을 누르세요, 그러면 기본 이름으"
"로 새로운 함수가 추가됩니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:119
msgid ""
"This will add a new function, which can be renamed by simply double clicking "
"its name:"
msgstr "이름을 더블 클릭하여 이름을 바꿀 수 있는 새 함수가 추가됩니다:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:125
msgid ""
"To edit the \"arguments\" this function can get (the values you pass to it "
"when you call this function), simply click the Function node and check the "
"inspector:"
msgstr ""
"이 함수가 가질 수 있는 \"인수(arguments)\"를 편집하려면 (이 함수를 호출할 때 "
"전달하는 값), 함수 노드를 클릭하고 인스펙터를 확인하세요:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:131
msgid "More on that will be explained later in this document."
msgstr "자세한 내용은 이 문서의 뒷부분에서 설명합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:4
msgid "Nodes and terminology"
msgstr "노드 그리고 용어"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:6
msgid ""
"Before continuing, it must be noted that the *Node* terminology needs to be "
"used with care. When referring to *Visual Script Nodes* (or generally "
"*Nodes*) this text will refer to the little boxes you connect with lines, "
"which are part of a graph. When referring to *Scene Nodes*, it is implied "
"that the elements that make up a Scene are being referred, which are part of "
"a tree. Their naming is similar but their function is different. When "
"referring to *Node* here, it will be implied that a *Visual Script Node* is "
"referred to unless indicated otherwise."
msgstr ""
"계속 하기 전에, *Node* 용어 사용에 유의해야 합니다. *Visual Script Nodes* (또"
"는 일반적으로 *Nodes*)를 볼 때 이 텍스트는 당신이 그래프의 일부인 선으로 연결"
"한 작은 상자를 보여줄 것입니다. *Scene Nodes*\\ 를 볼 때, 씬이 보이도록 구성"
"하는 요소로, 트리의 일부분임을 상징합니다. 그들의 이름은 비슷하지만 그들의 함"
"수는 다릅니다. 여기에서 *Node*\\ 를 본다면, 달리 명시되지 않는 한 *Visual "
"Script Node*\\ 가 보여지는 것을 상징할 것입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:15
msgid "Node properties"
msgstr "노드 속성"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:17
msgid ""
"Like in most visual scripting implementations, each node has editable "
"properties. In Godot, though, we try to avoid bloating the nodes with "
"editable controls for the sake of readability."
msgstr ""
"대부분의 Visual scripting 구현과 마찬가지로, 각 노드에는 편집 가능한 속성이 "
"있습니다. 하지만 godot에서는, 가독성을 높이기 위해 편집 가능한 제어 수단을 사"
"용하여 노드가 팽창하는 것을 방지하려고 합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:20
msgid ""
"Nodes still display the required information as text, but editing is done "
"via the *Inspector*. To edit them, select any node and edit its properties "
"in the *Inspector*."
msgstr ""
"노드는 여전히 필요한 정보를 텍스트로 표시하지만, 편집은 *인스펙터*\\ 를 통해 "
"이루어집니다. 노드를 편집하려면, 아무 노드나 선택하고 *인스펙터*\\ 에서 해당 "
"속성을 편집합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:25
msgid "Ports and connections"
msgstr "포트 그리고 연결"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:27
msgid ""
"Programming in Godot Visual Scripting is done via *Nodes* and *Port "
"Connections* inside each function."
msgstr ""
"Godot Visual Scripting에서 프로그래밍은 각 함수 안에서 *노드*\\ 와 *포트 연결"
"*\\ 을 통해 이루어집니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:31
msgid "Ports"
msgstr "포트(Ports)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:33
msgid ""
"Nodes in Godot Visual Scripting have *Ports*. These are endpoints that "
"appear to the left and right of nodes and which can be used to make "
"*Connections*: There are two types of *Ports*: *Sequence* and *Data*."
msgstr ""
"Godot Visual Scripting의 노드는 *포트*\\ 를 가지고 있습니다. 노드의 왼쪽과 오"
"른쪽에는 끝 점이 나타나고 거기서 *연결(Connections)*\\ 을 만들 수 있습니다: "
"두 가지 유형의 *포트*\\ 가 있습니다: *시퀀스(Sequence)* 그리고 *데이터"
"(Data)*."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:40
#, fuzzy
msgid ""
"*Sequence Ports* indicate the order in which operations are executed. "
"Typically when a *Node* is done processing, it will go to the next node from "
"one of the ports at the right. If nothing is connected, the function may "
"end, or another output *Sequence Port* might be tried (this depends on the "
"node). Thanks to this, you can follow the logic flow within a function by "
"following the white lines. Not every *Node* has *Sequence Ports*. In fact, "
"most do not."
msgstr ""
"*시퀀스 포트*\\ 는 작업이 실행되는 순서를 나타냅니다. 일반적으로 *노드*\\ 가 "
"처리를 완료하면, 오른쪽에 있는 포트 중 하나에서 다음 노드로 이동합니다. 연결"
"된 것이 없으면 함수는 종료되거나, 다른 출력 *시퀀스 포트*\\ 가 작업될 수 있습"
"니다 (노드마다 다름). 이 덕분에, 흰색 선을 따라 함수 내의 논리 흐름을 따라갈 "
"수 있습니다. 모든 *노드*\\ 가 *시퀀스 포트*\\ 를 가지고 있지는 않습니다. 사"
"실, 대부분이 없습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:46
msgid ""
"*Data Ports* ports contain typed values. Types can be any regular Godot "
"types, such as a boolean, an integer, a string, a Vector3, an array, any "
"Object or Scene Node, etc. A *Data Port* on the right side of a node is "
"considered an output, while, a port on the left side is an input. Connecting "
"them allows information to flow to the next node."
msgstr ""
"*데이터 포트(Data Ports)* 포트는 타입 값을 포함합니다. 타입은 부울, 정수, 문"
"자열, Vector3, 배열, 모든 객체 또는 씬 노드 등과 같은 일반 Godot 타입이 될 "
"수 있습니다. 노드의 오른쪽에 있는 *데이터 포트*는 출력으로 간주되며, 한편 왼"
"쪽의 포트는 입력입니다. 이들을 연결하면 정보를 다음 노드로 전달할 수 있습니"
"다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:51
msgid ""
"Not all *Data Port* types are compatible and will allow connections, though. "
"Pay special attention to colors and icons, as each type has a different "
"representation:"
msgstr ""
"모든 *데이터 포트* 타입이 호환되거나 연결이 되는 것은 아닙니다. 각 타입마다 "
"다르게 표현되어있는, 색상과 아이콘에 특히 주의를 기울이세요:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:58
#: ../../docs/development/file_formats/tscn.rst:27
msgid "Connections"
msgstr "연결(Connections)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:60
msgid ""
"Connecting is a relatively simple process. Drag an *Output Port* towards an "
"*Input Port*."
msgstr ""
"연결은 비교적 간단한 과정입니다. *출력 포트(Output Port)*\\ 를 *입력 포트"
"(Input Port)*\\ 로 드래그 합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:65
msgid ""
"Disconnecting takes a bit more practice. Disconnecting in *Data Ports* "
"happens by dragging the *Input* away, while for *Sequence Ports*, this "
"happens by dragging the *Output* away."
msgstr ""
"연결 해제는 좀 더 연습이 필요합니다. *데이터 포트*\\ 에서 연결 해제는 *입력*"
"\\ 을 드래그 하는 것으로 이루어지는 반면, *시퀀스 포트*\\ 의 경우 *출력*\\ "
"을 드래그 하는 것으로 이루어집니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:71
#, fuzzy
msgid ""
"This may seem strange at first, but it happens because *Data Ports* are 1:N "
"(A single output port can connect to many inputs), while *Sequence Ports* "
"are N:1 (Many sequence outputs can be connected to a single input)."
msgstr ""
"처음에는 이상하게 보일 수도 있습니다, 하지만 *데이터 포트*\\ 는 1:N (단일 출"
"력 포트가 많은 입력에 연결될 수 있음)인 반면, *시퀀스 포트*\\ 는 N:1 (많은 시"
"퀀스 출력이 단일 입력에 연결될 수 있음)이기 때문입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:75
msgid ""
"Connecting to empty space (drag to connect but unpress over empty space) is "
"also context sensitive, it will supply a list of most common operations. For "
"sequences, it will be conditional nodes:"
msgstr ""
"빈 공간에 연결하는 것 (드래그 하여 연결하고 빈 공간을 누르지 않은 경우) 또한 "
"컨텍스트에 민감하여, 가장 흔한 작업 목록을 제공 합니다. 시퀀스의 경우에는 조"
"건부 노드가 됩니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:81
msgid "While, for data, a contextual set/get/call menu will open:"
msgstr "한편 데이터의 경우, 컨텍스트적 Set/Get/Call 메뉴가 열립니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:87
msgid "Adding nodes"
msgstr "노드 추가하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:89
msgid ""
"Finally! We got to the fun part! But, before explaining in more detail what "
"each type of node does, let's take a short look at how nodes are most "
"commonly added and dealt with."
msgstr ""
"마침내! 재미있는 부분에 도착했습니다! 하지만 각 노드 타입이 하는 일에 대해 구"
"체적으로 설명하기 전에, 어떻게 노드가 가장 일반적으로 추가되고 처리되는 지 짧"
"게 한번 알아봅시다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:94
msgid "Accessing scene nodes"
msgstr "씬 노드 액세스하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:96
msgid ""
"One of the most common tasks is accessing Scene Tree Nodes (again, not to "
"mistake with *Visual Script Nodes*). Dragging from the Scene Tree and "
"dropping into the canvas will ask you to *call a method* (sometimes referred "
"to as *member function*) on this node."
msgstr ""
"흔한 작업들 중 하나로는 씬 트리 노드(Scene Tree Nodes)에 액세스하는 것이 있습"
"니다 (다시 한번 말하건데, *Visual Script Nodes*\\ 로 착각하지 마십시오). 씬 "
"트리에서 캔버스로 드래그 하여 놓으면 이 노드에서 \"메서드 호출(call a "
"method)\" (*멤버 함수(member function)*\\ 라고 하기도 함) 여부를 물어봅니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:102
msgid ""
"While accessing properties is desired in most cases (more on that below), "
"sometimes *calling methods* can be useful too. Methods execute specific "
"actions on objects. In the above case, the mouse pointer can be warped to a "
"position in local coordinates to the control. Another common use case is "
"queueing a node for deletion, which is done with the *queue_free* method."
msgstr ""
"대부분의 경우 속성에 액세스하는 것이 좋지만 (아래에 자세히 설명되어 있음), 때"
"로는 *메서드 호출*\\ 도 유용할 수 있습니다. 메서드는 객체에서 특정 작업을 실"
"행합니다. 위의 경우로는, 마우스 포인터는 컨트롤에 대한 로컬 좌표의 위치로 비"
"틀 수 있습니다. 또 다른 일반적인 사용 사례는 노드를 삭제하기 위해 대기하는 것"
"으로, *queue_free* 메서드를 사용하여 이루어집니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:109
msgid ""
"Care must be taken that this only works if the scene being edited contains "
"your *Visual Script* in one of the nodes! Otherwise, a warning will be shown."
msgstr ""
"편집 중인 씬들 중 한 노드가 *Visual Script*\\ 를 포함하고 있어야만 작동된다"
"는 것에 주의하세요! 그렇지 않으면, 경고가 표시됩니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:113
msgid "Accessing scene node properties"
msgstr "씬 노드 속성 액세스하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:115
msgid ""
"This is the most common way to edit *Scene Nodes* in Visual Scripting. "
"Select a *Scene Node* from the *Scene Tree*, go to the Inspector, find *the "
"Name* of the property you want to edit (hint, *not* the value!) and drag it "
"to the canvas:"
msgstr ""
"이것은 Visual Scripting에서 *씬 노드*\\ 를 편집하는 가장 일반적인 방법입니"
"다. *씬 트리*\\ 에서 *씬 노드*\\ 를 선택하고, 인스펙터로 가서, 편집하려는 속"
"성의 *이름*\\ 을 찾고 (힌트, 값이 *아닙니다!*) 캔버스로 드래그 해옵니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:120
msgid ""
"The result is that this value can be changed from your script by writing to "
"a *Data Port*."
msgstr ""
"결과적으로 이 값은 *데이터 포트*\\ 에 기록하여 스크립트에서 변경할 수 있습니"
"다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:122
msgid ""
"If instead reading this value is desired, drag the node again but hold the "
"*Control* key (or Command on Mac). This will create a getter:"
msgstr ""
"이 값을 가져오는 대신, *Ctrl* 키 (혹은 Mac에서 Command 키)를 누른 채로 드래"
"그 합니다. Getter가 생성됩니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:127
msgid "In this case, the value can be read from a *Data Port*."
msgstr "이 경우에, *데이터 포트*\\ 에서 값을 읽을 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:133
msgid ""
"Variables are memory containers local to the script which can hold a value. "
"This value can be read from any of the functions of the script or from other "
"scripts via the method described in the previous step."
msgstr ""
"변수는 값을 저장할 수 있는 스크립트의 로컬 메모리 컨테이너입니다. 이 값은 스"
"크립트의 모든 기능이나 이전 단계에서 설명한 방법을 통해 다른 스크립트에서 읽"
"을 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:135
msgid ""
"To add a Variable, push the \"+\" button on the *Variables* section of the "
"Members panel. Double-click the new variable to rename it:"
msgstr ""
"변수를 추가하려면, 멤버 패널의 *변수* 섹션에 있는 \"+\"버튼을 누릅니다. 새 변"
"수를 더블 클릭하여 이름을 바꿉니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:140
msgid "Right-clicking the variable allows you to configure its properties:"
msgstr "우클릭으로 변수의 속성을 구성할 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:147
#, fuzzy
msgid ""
"As it can be seen above, the type and initial value of the variable can be "
"changed, as well as some property hints. Ticking the \"Export\" option makes "
"the variable visible in the Inspector when selecting the node. This also "
"makes it available to other scripts via the method described in the previous "
"step."
msgstr ""
"위에서 볼 수 있듯이, 변수의 타입과 초기 값은 물론 일부 속성 힌트도 변경할 수 "
"있습니다. \"Export\"옵션을 선택하면 노드를 선택할 때 인스펙터에 변수가 표시됩"
"니다. 이 또한 이전 단계에서 설명한 방법으로 다른 스크립트에서도 사용할 수 있"
"습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:153
msgid ""
"To use the variable in the script, simply drag it to the canvas to create a "
"getter:"
msgstr ""
"스크립트에서 변수를 사용하려면, 간단히 캔버스로 드래그 하여 Getter를 생성합니"
"다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:158
msgid "Likewise, hold *Control* (*Command* on Mac) to drop a setter:"
msgstr ""
"마찬가지로, *Ctrl* (혹은 Mac에서 *Command*)을 눌러서 Setter를 놓습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:166
msgid ""
"It is also possible to create your own signals in a script and use them. For "
"this, do the same steps you did for variables in the previous step, except "
"for *Signals*:"
msgstr ""
"스크립트에서 자신의 시그널을 만들어서 사용하는 것도 가능합니다. 이를 위해 *시"
"그널*\\ 을 제외하고, 이전 단계의 변수에 작업한 것과 같은 절차를 진행해야 합니"
"다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:171
#, fuzzy
msgid ""
"A signal can also be edited via the right-click menu to customize its "
"arguments:"
msgstr "우클릭 메뉴를 통해 시그널의 인수를 정의하도록 편집할 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:176
#, fuzzy
msgid ""
"The signal you have created will appear in the Inspector, along with the "
"built-in node signals. This allows you to connect it from another script "
"from another *Scene Node*:"
msgstr ""
"생성된 시그널은 내장 노드 시그널과 함께 인스펙터에 나타납니다. 이를 통해 다"
"른 *씬 노드*\\ 의 다른 스크립트에 시그널을 연결할 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:181
msgid "Finally, to emit the signal, simply drag it to the canvas:"
msgstr "마침내, 시그널이 방출하도록, 간단히 캔버스로 드래그 합니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:186
msgid ""
"Remember that emitting a signal is a sequenced operation, so it must come "
"from a Sequence port."
msgstr ""
"시그널이 방출한다는 것은 시퀀스 된 동작이므로, 반드시 시퀀스 포트로부터 와야 "
"한다는 것을 잊지 마세요."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:190
msgid "Adding more nodes"
msgstr "더 많은 노드 추가하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:192
msgid ""
"Now that the basics are covered, let's discuss the large amount of utility "
"nodes available for your canvas! Below the member panel, exists the list of "
"all available node types:"
msgstr ""
"이제 기초가 다듬어졌으니, 캔버스에 쓸 수 있는 많은 양의 유용한 노드에 대해 이"
"야기해봅시다! 멤버 패널 아래에, 이용 가능한 노드 타입 목록이 존재합니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:198
msgid "Ctrl-F (Command-F on Mac) allows you to search the list."
msgstr "Ctrl-F (혹은 Mac에서 Command-F)로 목록을 검색할 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:200
msgid ""
"Any of them can be dragged to the scene. Unlike nodes (e.g. dragging a "
"property from the Inspector sets the context to the node being edited "
"automatically), these are added without any \"contextual\" information, so "
"this has to be done manually."
msgstr ""
"어느 것들이든 씬으로 드래그 할 수 있습니다. 노드와 달리 (예를 들어 인스펙터에"
"서 속성을 드래그 하는 것으로 자동으로 편집된 노드에 대한 컨텍스트를 설정하는 "
"것), 그들은 어떤 \"컨텍스트적\" 정보 없이 추가됩니다, 따라서 작업을 수동으로 "
"수행하여야 합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:206
msgid ""
"Remember that you can check the class reference for what each node does, as "
"they are documented there. That mentioned, a brief overview of node types "
"follows:"
msgstr ""
"노드들이 문서화 되어있기 때문에, 어떤 각각의 노드가 무엇을 하는지 알기 위해 "
"클래스 레퍼런스를 확인할 수 있다는 것을 기억하세요. 즉, 노드 타입의 간단한 개"
"요는 다음과 같습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:213
msgid ""
"Constant nodes are nodes that provide values that, while not changing over "
"time, can be useful as reference values. Most of the time they are integer "
"or float."
msgstr ""
"상수 노드는 값을 제공하고, 시간이 지나도 값이 변하지 않는 노드로서, 참조 값으"
"로 유용합니다. 대부분 정수 또는 실수입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:219
#, fuzzy
msgid ""
"The first one is \"Constant\", which allows you to select any value of any "
"type as constant, from an integer (42) to a String (\"Hello!\"). In general, "
"this node is not used that often because of default input values in *Data "
"Ports*, but it's good to know it exists."
msgstr ""
"첫 번째 것은 \"Constant\"로 상수 값이나 타입을 선택할 수 있습니다, 상수 (42)"
"부터 문자열 (\"Hello!\")까지 말이죠. 기본적으로 이 노드는 *데이터 포트*\\ 의 "
"기본 입력 값 때문에 자주 쓰이지는 않지만, 알아두면 좋습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:221
msgid ""
"The second is the GlobalConstant node, which contains a long list of "
"constants for global types in Godot. In there you can find some useful "
"constants to refer to key names, joystick or mouse buttons, etc."
msgstr ""
"두 번째 것은 GlobalConstant 노드로, Godot에서 글로벌 타입을 위한 긴 상수 목록"
"을 포함합니다. 여기서는 키 이름, 조이스틱이나 마우스 버튼 등을 나타내는 유용"
"한 상수를 볼 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:224
#, fuzzy
msgid ""
"The third one is MathConstant, which provides typical mathematical "
"constants, such as PI, E, etc."
msgstr ""
"세 번째 것은 MathConstant로, PI, E 등과 같은 전형적인 수학적 상수를 제공합니"
"다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:230
msgid ""
"Data nodes deal with all sorts of access to information. Any information in "
"Godot is accessed via these nodes, so they are some of the most important "
"ones to use and pretty diverse."
msgstr ""
"데이터 노드는 정보에 대한 모든 종류의 액세스를 처리합니다. Godot에서는 어떤 "
"정보도 이 노드를 통해 액세스 되므로, 그들은 중요하게 쓰이는 것들 중 하나로서 "
"꽤 다양합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:236
msgid ""
"There are many types of nodes of interest here, so a short attempt to "
"describe them will follow:"
msgstr ""
"흥미를 가질만한 많은 타입의 노드가 있으므로, 그들을 설명하기 위한 간단한 시도"
"가 따르겠습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:240
msgid "Action"
msgstr "액션(Action)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:242
msgid ""
"Action nodes are vital when dealing with input from a device. You can read "
"more about actions in the (@TODO ACTION TUTE LINK). In the following example "
"below, the control is moved to the right when the \"move_right\" action is "
"pressed."
msgstr ""
"액션 노드는 기기의 입력을 처리할 때 중요합니다. 액션에 대한 더 자세한 것은 "
"(@TODO ACTION TUTE LINK)에서 볼 수 있습니다. 아래의 다음 예시는, \"move_right"
"\" 액션이 눌렸을 때 컨트롤이 오른쪽으로 움직이는 것입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:249
msgid "Engine Singleton"
msgstr "엔진 싱글톤(Engine Singleton)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:251
#, fuzzy
msgid ""
"Engine singletons are global interfaces (meaning they can be accessed "
"without a reference; unlike Scene Nodes, they are always available). They "
"have several purposes, but in general, they are useful for low-level access "
"or OS-related access."
msgstr ""
"엔진 싱글톤은 글로벌 인터페이스입니다 (즉 씬 노드와 달리, 참조 없이 액세스 "
"될 수 있고 항상 이용 가능합니다). 그들은 여러 목적을 지니지만, 대개 로우 레"
"벨 액세스나 OS 관련 액세스에 유용합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:257
msgid ""
"Remember that dragging a connection to empty space will help you call "
"functions or set/get properties on these:"
msgstr ""
"연결을 빈 공간에 드래그 하는 것으로 함수나 Set/Get 속성을 불러오는 것(Call)"
"을 기억하세요:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:263
msgid "Local Variables"
msgstr "로컬 변수(Local Variables)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:265
msgid ""
"These are nodes you can use as temporary storage for your graphs. Make sure "
"they all have the same name and type when using them and they will reference "
"the same piece of memory."
msgstr ""
"이 노드는 그래프의 임시 저장소로 사용할 수 있는 노드입니다. 반드시 그들을 사"
"용할 때 모두 같은 이름과 타입을 가져야 한다는 것을 명심하세요, 그러면 그들은 "
"같은 메모리를 참조할 것입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:270
msgid ""
"As it can be seen above, there are two nodes available: A simple getter, and "
"a sequenced getter (setting requires a sequence port)."
msgstr ""
"위에서 볼 수 있듯이, 두 개의 노드를 사용할 수 있습니다: 간단한 Getter, 그리"
"고 시퀀스된 Getter (설정에 시퀀스 포트가 필요합니다)."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:274
msgid "Scene Node"
msgstr "씬 노드(Scene Node)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:276
msgid ""
"This is just a reference to a node in the tree, but it's easier to use this "
"node by dragging the actual node from the scene tree to the canvas (this "
"will create it and configure it)."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:281
msgid "Self"
msgstr "Self(셀프)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:283
msgid ""
"In some rare occasions, it may be desired to pass this Scene Node as "
"argument. It can be used to call functions and set/get properties, or drag "
"nodes (or event the node itself that has the script) from the Scene Tree to "
"the canvas for this."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:290
msgid ""
"This node is similar to the Singleton node because it references the "
"SceneTree, which contains the active scene. SceneTree, however, only works "
"when the node is sitting in the scene and active, otherwise accessing it "
"will return an error."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:294
msgid ""
"SceneTree allows for many low-level things, like setting stretch options, "
"calling groups, make timers, or even load another scene. It's a good class "
"to get familiar with."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:299
msgid "Preload"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:301
msgid ""
"This does the same function as preload() in GDScript. It maintains this "
"resource loaded and ready to use. Rather than instancing the node, it's "
"simpler to drag the desired resource from the filesystem dock to the canvas."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:306
msgid "Resource Path"
msgstr "리소스 경로"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:308
msgid ""
"This node is a simple helper to get a string with a path to a resource you "
"can pick. It's useful in functions that load things from disk."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:313
msgid "Comment"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:315
msgid ""
"A Comment node works as a node you can resize to put around other nodes. It "
"will not try to get focus or be brought to top when selecting it. It can "
"also be used to write text on it."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:322
msgid "Flow Control"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:324
msgid ""
"Flow control nodes allow the execution to take different branches, usually "
"depending on a given condition."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:331
msgid "Condition"
msgstr "조건"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:333
msgid ""
"This is a simple node that checks a bool port. If true, it will go via the "
"\"true\" sequence port. If false, the second. After going for either of "
"them, it goes via the \"done\" port. Leaving sequence ports disconnected is "
"fine if not all of them are used."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:339
msgid "Iterator"
msgstr "반복자"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:341
msgid ""
"Some data types in Godot (ie, arrays, dictionaries) are iterable. This means "
"that a bit of code can run for each element that it has."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:344
msgid ""
"The Iterator node goes through all elements and, for each of them, it goes "
"via the \"each\" sequence port, making the element available in the \"elem\" "
"data port."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:347
msgid "When done, it goes via the \"exit\" sequence port."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:351
msgid "Return"
msgstr "리턴"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:353
msgid ""
"Some functions can return values. In general for virtual ones, Godot will "
"add the Return node for you. A return node forces the function to end."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:358
msgid "Sequence"
msgstr "시퀀스"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:360
msgid ""
"This node is useful mostly for organizing your graph. It calls its sequence "
"ports in order."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:364
msgid "TypeCast"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:366
msgid ""
"This is a useful and commonly used node. You can use it to cast arguments or "
"other objects to the type you desire. Afterwards, you can even drag the "
"object output to get full completion."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:372
msgid ""
"It is also possible to cast to a script, which will allow complete script "
"properties and functions:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:378
msgid "Switch"
msgstr "스위치"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:380
msgid ""
"The Switch node is similar to the Condition node, but it matches many values "
"at the same time."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:386
msgid ""
"This is a more primitive form of iteration. \"repeat\" sequence output will "
"be called as long as the condition in the \"cond\" data port is met."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:393
msgid ""
"Functions are simple helpers, most of the time deterministic. They take some "
"arguments as input and return an output. They are almost never sequenced."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:398
msgid "Built-In"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:400
msgid ""
"There is a list of built-in helpers. The list is almost identical to the one "
"from GDScript (@TODO, link to gdscript methods?). Most of them are "
"mathematical functions, but others can be useful helpers. Make sure to take "
"a look at the list at some point."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:406
msgid "By Type"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:408
msgid ""
"Those are the methods available to basic types. For example, if you want a "
"dot-product, you can search for \"dot\" instead of the Vector3 category. In "
"most cases just search the list of nodes, it should be faster."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:413
msgid "Call"
msgstr "호출"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:415
msgid ""
"This is the generic calling node. It is rarely used directly but by dragging "
"to empty space on an already configured node."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:419
msgid "Constructors"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:421
msgid ""
"These are all the functions needed to create Godot basic datatypes. For "
"example, If you need to create a Vector3 out of 3 floats, a constructor must "
"be used."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:427
msgid "Destructor"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:429
msgid ""
"This is the opposite to Constructor, it allows to separate any basic type "
"(ie, Vector3) into its sub-elements."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:435
msgid "Emit Signal"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:437
msgid ""
"Emits signals from any object. In general it's not that useful, as dragging "
"a signal to the canvas works better."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:441
msgid "Get/Set"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:443
msgid ""
"Generic Getter/Setter node. Dragging properties from the Inspector works "
"better, as they appear properly configured on drop."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:447
msgid "Wait"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:449
msgid ""
"The Wait nodes will suspend execution of the function until something "
"happens (many frames can pass until resuming, in fact). Default nodes allow "
"you to wait for a frame to pass, a fixed frame or a given amount of time "
"until execution is resumed."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:454
msgid "Yield"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:456
msgid ""
"This node completely suspends the execution of the script, and it will make "
"the function return a value that can be used to resume execution."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:460
msgid "Yield Signal"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:462
msgid "Same as Yield, but will wait until a given signal is emitted."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:466
msgid "Index"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:468
msgid ""
"Generic indexing operator, not often used but it's good that it exists just "
"in case."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:474
msgid ""
"These are mostly generic operators, such as addition, multiplication, "
"comparison, etc. By default, these mostly accept any datatype (and will "
"throw an error at run-time if the types fed do not match those expected by "
"the operator). It is always recommended to set the right type for operators "
"to catch errors faster and make the graph easier to read."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:483
msgid "Expression Node"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:485
msgid ""
"Among the operators, the *Expression* node is the most powerful. If well "
"used, it allows you to enormously simplify visual scripts that are math or "
"logic heavy. Type any expression on it and it will be executed in real-time."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:488
msgid "Expression nodes can:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:490
msgid ""
"Perform math and logic expressions based on custom inputs (eg: \"a*5+b\", "
"where a and b are custom inputs):"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:495
msgid "Access local variables or properties:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:500
msgid ""
"Use most of the existing built-in functions that are available to GDScript, "
"such as sin(),cos(),print(), as well as constructors, such as Vector3(x,y,z),"
"Rect2(..), etc.:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:505
msgid "Call API functions:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:510
msgid ""
"Use sequenced mode, which makes more sense in case of respecting the "
"processing order:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/index.rst:2
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:114
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:129
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:142
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:153
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:161
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:180
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:223
msgid "C#"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:6
msgid ""
"C# support is a new feature in Godot 3.0. As such, you may still run into "
"some issues, or find spots where the documentation could be improved. Please "
"report issues with C# in Godot on the `engine Github page <https://github."
"com/godotengine/godot/issues>`_. And any documentation issues on the "
"`documentation Github Page <https://github.com/godotengine/godot-docs/"
"issues>`_."
msgstr ""
"C# 지원은 Godot 3.0의 새로운 기능입니다. 따라서, 실행 중 여전히 문제가 발생"
"할 수 있고, 문서를 개선할 수 있는 부분을 발견할 수도 있습니다. `엔진 Github "
"페이지 <https://github.com/godotengine/godot/issues>`_에서 Godot의 C#관련 문"
"제들을 보고해주세요. 그리고 문서상의 문제는`문서 Github 페이지 <https://"
"github.com/godotengine/godot-docs/issues>`_에서 보고해주세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:11
msgid ""
"This page provides a brief intro to C#, both what it is and how to use it in "
"Godot. Afterwards, you may want to look at :ref:`how to use specific "
"features <doc_c_sharp_features>`, read about the :ref:`differences between "
"the C# and the GDScript API <doc_c_sharp_differences>` and (re)visit the :"
"ref:`Scripting section <doc_scripting>` of the step-by-step tutorial."
msgstr ""
"이 페이지는 C#에 대한 간단한 소개와 그것이 무엇인지, 그리고 그것을 Godot에서 "
"사용하는 방법을 제공합니다. 그런 다음, :ref:`특정 기능을 사용하는 방법 "
"<doc_c_sharp_features>` 을 살펴보고, :ref:`C# 과 GDScript API의 차이점 "
"<doc_c_sharp_differences>`에 대해 읽고 단계별 튜토리얼의 :ref:`스크립팅 섹션 "
"<doc_scripting>`을 확인하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:16
msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with the Mono 5.x .NET framework, including full support for "
"C# 7.0. Mono is an open source implementation of Microsoft's .NET Framework "
"based on the ECMA standards for C# and the Common Language Runtime. A good "
"starting point for checking its capabilities is the `Compatibility <http://"
"www.mono-project.com/docs/about-mono/compatibility/>`_ page in the Mono "
"documentation."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:20
msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:25
msgid "Setup C# for Godot"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:27
msgid ""
"Download and install the `Mono <http://www.mono-project.com/download/>`_ SDK."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:29
msgid "If you are using Godot 3.0.2, you must use Mono 5.4."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:31
msgid "Godot 3.0.3+ requires Mono 5.12 on all platforms."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:33
msgid ""
"To download Mono v5.12+ on a Mac, locate the \"Stable Channel\" link from "
"the `Mono Downloads Page <http://www.mono-project.com/download/>`_. The "
"Visual Studio channel is an earlier version of Mono and will not work with "
"Godot 3.0.3+."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:35
msgid ""
"You also need MSBuild (at least version 15.0), which should come with the "
"Mono installation."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:37
msgid ""
"For instructions on installing older versions of Mono on Linux, see `this "
"page <http://www.mono-project.com/docs/getting-started/install/linux/"
"#accessing-older-releases>`_. Older versions of Mono for macOS and Windows "
"can be found `here <https://download.mono-project.com/archive/>`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:40
msgid ""
"Additionally, your Godot version must have Mono support enabled, so ensure "
"you download the **Mono version** of Godot."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:42
msgid ""
"If you are building Godot from source, make sure to follow the steps to "
"include Mono support in your build outlined on the :ref:"
"`doc_compiling_with_mono` page."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:44
msgid ""
"In summary, you must have installed 1) the correct Mono SDK version for your "
"Godot version, and 2) The Mono version of Godot."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:47
msgid "Configuring an external editor"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:49
msgid ""
"While Godot does have its own scripting editor, its support for C# is kept "
"minimal, and it's recommended that you use an external IDE or editor, such "
"as Microsoft Visual Studio Code, or MonoDevelop, which provide auto-"
"completion, debugging and other features useful when working with C#. To set "
"it up, in Godot click on ``Editor``, then ``Editor Settings``. Scroll down "
"to the bottom, to the ``Mono`` settings. Under Mono click on ``Editor``, and "
"on that page choose your external editor of choice."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:57
msgid ""
"If you are using Visual Studio Code, ensure you download and install the ."
"NET tools extension. Without this, Godot will crash when trying to create a "
"new C# project or edit a C# script."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:60
msgid "Creating a C# script"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:62
msgid ""
"After you successfully setup C# for Godot, you should see the following "
"option when selecting ``Attach script`` in the context menu of a node in "
"your scene:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:66
msgid ""
"Note that while some specifics change, most of the things work the same when "
"using C# for scripting. If you're new to Godot, you may want to peruse the "
"tutorials on :ref:`doc_scripting` at this point. While some places in the "
"documentation still lack C# examples, most things can be transferred easily "
"from GDScript."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:71
msgid "Project setup and workflow"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:73
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project (``.csproj``) file, as well as some utility files and folders "
"(``.mono``, sometimes ``Properties``). All of these but ``.mono`` are "
"important and should be kept in your version control system. ``.mono`` can "
"be safely added to the ignore list of your VCS. When troubleshooting, it can "
"sometimes help to delete the ``.mono`` folder and let it regenerate."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:78
msgid ""
"Note that currently, there are some issues where Godot and the C# project "
"don't stay in sync; if you delete, rename or move things, like scripts or "
"nodes, they may no longer match up. In this case, it can help to edit the "
"solution files manually."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:81
msgid ""
"Example: If you created a script (e.g. ``Test.cs``) and delete it in Godot, "
"the compilation will fail because now the missing file is still expected to "
"be there by the CS project. For now, you can simply open up the ``.csproj`` "
"file and look for the ``ItemGroup``, there should be a line included like "
"the following:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:92
msgid ""
"Simply remove that line and your project should now again build fine. Same "
"for renaming and moving things, simply rename and move them in the project "
"file if needed."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:95
#: ../../docs/tutorials/io/background_loading.rst:87
#: ../../docs/tutorials/misc/pausing_games.rst:71
msgid "Example"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:97
msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:124
msgid ""
"As you can see, the things normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` namespace. For a list of "
"those, see the class reference pages for :ref:`@GDScript <class_@gdscript>` "
"and :ref:`@GlobalScope <class_@globalscope>`."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:128
msgid ""
"Keep in mind that the class you wish to attach to your node should be named "
"as the ``.cs`` file. If not, you will get the following error and won't be "
"able to run the scene: ``Cannot find class XXX for script res://XXX.cs``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:132
msgid "General differences between C# and GDScript"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:134
msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:138
msgid "For more, see the :ref:`doc_c_sharp_differences` page."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:141
msgid "Current gotchas and known issues"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:143
msgid ""
"As C# support is quite new to Godot, there are some growing pains and things "
"that still need to be ironed out. Below is a list of the most important "
"issues you should be aware of when diving into C# in Godot, but if in doubt "
"also take a look over the official `issue tracker for Mono issues <https://"
"github.com/godotengine/godot/labels/topic%3Amono>`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:146
msgid ""
"As explained above, the C# project isn't always kept in sync automatically "
"when things are deleted, renamed or moved in Godot (`#12917 <https://github."
"com/godotengine/godot/issues/12917>`_)"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:147
msgid "Writing editor plugins and tool scripts in C# are not yet supported"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:148
msgid ""
"Exporting Mono projects is only supported for desktop platforms (Linux, "
"Windows and macOS). HTML5, Android, iOS and UWP are not currently supported "
"(`#18364 comment <https://github.com/godotengine/godot/"
"issues/18364#issuecomment-406222102>`_)"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:149
msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name and is unique within the project assembly (`#7402 "
"comment <https://github.com/godotengine/godot/"
"issues/7402#issuecomment-269910926>`_)"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:152
msgid "Performance of C# in Godot"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:154
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot - while generally in the same "
"order of magnitude - is roughly **~4x** that of GDScript in some naive "
"cases. For full performance, C++ is still a little faster; the specifics are "
"going to vary according to your use case. GDScript is likely fast enough for "
"most general scripting workloads. C# is faster, but requires some expensive "
"marshalling when talking to Godot."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:159
msgid "Using Nuget packages in Godot"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:161
msgid ""
"`Nuget <https://www.nuget.org/>`_ Packages can be installed and used with "
"Godot, as with any project. Many IDEs (such as vs code) can add packages "
"directly. They can also be added manually by adding the package reference in "
"the ``.csproj`` file located in the project root:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:176
msgid ""
"Whenever packages are added or modified, run nuget restore in the root of "
"the project directory, to ensure that the nuget packages will be available "
"for msbuild to use, run::"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:4
msgid "Features"
msgstr "기능"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:6
msgid ""
"This page provides an overview of the commonly used features of both C# and "
"Godot and how they are used together."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:10
msgid "Type conversion and casting"
msgstr "형 변환(Type conversion)과 캐스팅(casting)"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:12
msgid ""
"C# is a statically typed language. Therefore, you can't do the following:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:19
msgid ""
"The method ``GetNode()`` returns a ``Node`` instance. You must explicitly "
"convert it to the desired derived type, ``Sprite`` in this case."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:22
msgid "For this, you have various options in C#."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:24
msgid "**Casting and Type Checking**"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:26
msgid ""
"Throws ``InvalidCastException`` if the returned node cannot be cast to "
"Sprite. You would use it instead of the ``as`` operator if you are pretty "
"sure it won't fail."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:34
msgid "**Using the AS operator**"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:36
msgid ""
"The ``as`` operator returns null if the node cannot be cast to Sprite, and "
"for that reason, it cannot be used with value types."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:45
msgid "**Using the generic methods**"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:47
msgid ""
"Generic methods are also provided to make this type conversion transparent."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:49
msgid ""
"``GetNode<T>()`` casts the node before returning it. It will throw an "
"``InvalidCastException`` if the node cannot be cast to the desired type."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:56
msgid ""
"``GetNodeOrNull<T>()`` uses the ``as`` operator and will return ``null`` if "
"the node cannot be cast to the desired type."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:64
msgid "**Type checking using the IS operator**"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:66
msgid ""
"To check if the node can be cast to Sprite, you can use the ``is`` operator. "
"The ``is`` operator returns false if the node cannot be cast to Sprite, "
"otherwise it returns true."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:77
msgid ""
"For more advanced type checking, you can look into `Pattern Matching "
"<https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching>`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:82
msgid "C# signals"
msgstr "C# 시그널"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:84
msgid ""
"For a complete C# example, see the **Handling a signal** section in the step "
"by step :ref:`doc_scripting` tutorial."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:86
msgid ""
"Declaring a signal in C# is done with the ``[Signal]`` attribute on a "
"delegate."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:96
msgid ""
"These signals can then be connected either in the editor or from code with "
"``Connect``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:116
msgid "Emitting signals is done with the ``EmitSignal`` method."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:126
msgid ""
"Notice that you can always reference a signal name with the ``nameof`` "
"keyword (applied on the delegate itself)."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:128
msgid ""
"It is possible to bind values when establishing a connection by passing an "
"object array."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:148
msgid ""
"Signals support parameters and bound values of all the `built-in types "
"<https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/"
"built-in-types-table>`_ and Classes derived from :ref:`Godot.Object "
"<class_Object>`. Consequently, any ``Node`` or ``Reference`` will be "
"compatible automatically, but custom data objects will need to extend from "
"`Godot.Object` or one of its subclasses."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:160
msgid ""
"Finally, signals can be created by calling ``AddUserSignal``, but be aware "
"that it should be executed before any use of said signals (with ``Connect`` "
"or ``EmitSignal``)."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:4
msgid "API differences to GDScript"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:6
msgid "This is a (incomplete) list of API differences between C# and GDScript."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:9
msgid "General differences"
msgstr "일반적인 차이점"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:11
msgid ""
"As explained in the :ref:`doc_c_sharp`, C# generally uses ``PascalCase`` "
"instead of the ``snake_case`` in GDScript and C++."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:15
#: ../../docs/tutorials/threads/thread_safe_apis.rst:15
msgid "Global scope"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:17
msgid ""
"Available under ``Godot.GD``. Some things were moved to their own classes, "
"like Math and Random. See below."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:20
msgid ""
"Global functions like ``print``, ``var2str`` and ``weakref`` are located "
"under ``GD`` in C#."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:23
msgid "``ERR_*`` constants were moved to ``Godot.Error``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:26
#: ../../docs/tutorials/math/index.rst:2
msgid "Math"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:28
msgid ""
"Math functions, like ``abs``, ``acos``, ``asin``, ``atan`` and ``atan2``, "
"are located under ``Mathf`` as ``Abs``, ``Acos``, ``Asin``, ``Atan`` and "
"``Atan2``, instead of in global scope. ``PI`` is ``Mathf.Pi``"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:33
msgid "Random"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:35
msgid ""
"Random functions, like ``rand_range`` and ``rand_seed``, are located under "
"``Random``, so use ``Random.RandRange`` instead of ``rand_range``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:39
msgid "Export keyword"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:41
msgid ""
"Use the ``[Export]`` attribute instead of the GDScript ``export`` keyword."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:44
msgid "Signal keyword"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:46
msgid ""
"Use the ``[Signal]`` attribute instead of the GDScript ``signal`` keyword. "
"This attribute should be used on a `delegate`, whose name signature will be "
"used to define the signal."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:54
msgid "See also: :ref:`c_sharp_signals`"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:57
msgid "Singletons"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:59
msgid ""
"Singletons provide static methods rather than using the singleton pattern in "
"C#. This is to make code less verbose and similar to GDScript. Example:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:67
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:244
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
#: ../../docs/development/cpp/core_types.rst:174
msgid "String"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:69
msgid ""
"Use ``System.String`` (``string``). All the Godot String methods are "
"provided by the ``StringExtensions`` class as extension methods. Example:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:77
#, fuzzy
msgid "There are a few differences, though:"
msgstr "유의해야 할 몇 가지 사항이 있습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:79
msgid ""
"``erase``: Strings are immutable in C#, so we cannot modify the string "
"passed to the extension method. For this reason, ``Erase`` was added as an "
"extension method of ``StringBuilder`` instead of string. Alternatively, you "
"can use ``string.Remove``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:83
msgid ""
"``IsSubsequenceOf``/``IsSubsequenceOfi``: An additional method is provided, "
"which is an overload of ``IsSubsequenceOf``, allowing you to explicitly "
"specify case sensitivity:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:94
msgid ""
"``Match``/``Matchn``/``ExprMatch``: An additional method is provided besides "
"``Match`` and ``Matchn``, which allows you to explicitly specify case "
"sensitivity:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:105
#: ../../docs/tutorials/math/matrices_and_transforms.rst:126
#: ../../docs/tutorials/math/matrices_and_transforms.rst:614
msgid "Basis"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:107
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Basis()`` initializes all primitive members to their default value. Use "
"``Basis.Identity`` for the equivalent of ``Basis()`` in GDScript and C++."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:111
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:158
msgid "The following method was converted to a property with a different name:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:116
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:133
msgid "get_scale()"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:116
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:133
#: ../../docs/tutorials/2d/particle_systems_2d.rst:271
#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:87
#: ../../docs/tutorials/math/matrices_and_transforms.rst:309
msgid "Scale"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:120
#: ../../docs/tutorials/math/matrices_and_transforms.rst:157
msgid "Transform2D"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:122
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Transform2D()`` initializes all primitive members to their default value. "
"Please use ``Transform2D.Identity`` for the equivalent of ``Transform2D()`` "
"in GDScript and C++."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:126
msgid ""
"The following methods were converted to properties with their respective "
"names changed:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:131
msgid "get_origin()"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:131
msgid "Origin"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:132
msgid "get_rotation()"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:132
#: ../../docs/tutorials/math/matrices_and_transforms.rst:223
#: ../../docs/tutorials/animation/cutout_animation.rst:320
msgid "Rotation"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:137
msgid "Plane"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:139
msgid ""
"The following method was converted to a property with a *slightly* different "
"name:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:144
msgid "center()"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:144
msgid "Center"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:148
msgid "Rect2"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:150
msgid ""
"The following field was converted to a property with a *slightly* different "
"name:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:155
msgid "end"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:155
msgid "End"
msgstr "끝"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:163
msgid "get_area()"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:163
msgid "Area"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:167
msgid "Quat"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:169
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Quat()`` initializes all primitive members to their default value. Please "
"use ``Quat.Identity`` for the equivalent of ``Quat()`` in GDScript and C++."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:176
msgid ""
"*This is temporary. Array is ref-counted, so it will need its own type that "
"wraps the native side. PoolArrays will also need their own type to be used "
"the way they are meant to.*"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:182
msgid "object[]"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:183
msgid "PoolIntArray"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:183
msgid "int[]"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:184
msgid "PoolByteArray"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:184
msgid "byte[]"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:185
msgid "PoolFloatArray"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:185
msgid "float[]"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:186
msgid "PoolStringArray"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:186
msgid "String[]"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:187
msgid "PoolColorArray"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:187
msgid "Color[]"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:188
msgid "PoolVector2Array"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:188
msgid "Vector2[]"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:189
msgid "PoolVector3Array"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:189
msgid "Vector3[]"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:192
msgid ""
"In some exceptional cases, a raw array (``type[]``) may be required instead "
"of a ``List``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:197
msgid ""
"*This is temporary. Array is ref-counted, so it will need its own type that "
"wraps the native side.*"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:199
msgid "Use ``Dictionary<object, object>``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:202
msgid "Variant"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:204
msgid "``System.Object`` (``object``) is used instead of ``Variant``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:207
msgid "Communicating with other scripting languages"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:209
msgid ""
"The methods ``object Object.call(string method, params object[] args)``, "
"``object Object.get(string field)`` and ``object Object.set(string field, "
"object value)`` are provided to communicate with instances of other "
"scripting languages via the Variant API."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:215
msgid "Other differences"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:217
msgid ""
"``preload``, ``assert`` and ``yield``, as they work in GDScript, are "
"currently not available in C#."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:220
msgid "Other differences:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:225
msgid "Color8"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:225
msgid "Color.Color8"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:226
msgid "is_inf"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:226
msgid "float.IsInfinity"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:227
msgid "is_nan"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:227
msgid "float.IsNaN"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:228
msgid "dict2inst"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:228
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:229
msgid "? TODO"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:229
msgid "inst2dict"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:230
msgid "load"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:230
msgid "GD.load, which is the same as ResourceLoader.load"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:4
msgid "C# style guide"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:6
msgid ""
"Having well-defined and consistent coding conventions is important for every "
"project, and Godot is no exception to this rule."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:9
msgid ""
"This page contains a coding style guide, which is followed by developers of "
"and contributors to Godot itself. As such, it is mainly intended for those "
"who want to contribute to the project, but since the conventions and "
"guidelines mentioned in this article are those most widely adopted by the "
"users of the language, we encourage you to do the same, especially if you do "
"not have such a guide yet."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:14
msgid ""
"This article is by no means an exhaustive guide on how to follow the "
"standard coding conventions or best practices. If you feel unsure of an "
"aspect which is not covered here, please refer to more comprehensive "
"documentation, such as `C# Coding Conventions <https://docs.microsoft.com/en-"
"us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions>`_ or "
"`Framework Design Guidelines <https://docs.microsoft.com/en-us/dotnet/"
"standard/design-guidelines/naming-guidelines>`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:21
msgid "Language specification"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:23
msgid ""
"Currently, Godot uses C# version 6.0 in its engine and example source code. "
"So, before we move to a newer version, care must be taken to avoid mixing "
"language features only available in C# 7.0 or later, such as pattern "
"matching or expression-bodied members inside get/set accessors."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:27
msgid ""
"For detailed information on C# features in different versions, please see "
"`What's New in C# <https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/"
">`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:31
msgid "Formatting conventions"
msgstr "형식 규칙"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:33
msgid ""
"If you create a new file, make sure that it uses linefeed (*LF*) characters "
"to break lines, not *CRLF* or *CR*."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:34
msgid ""
"Use UTF-8 encoding without a byte order mark (BOM <https://en.wikipedia.org/"
"wiki/Byte_order_mark>)."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:35
msgid ""
"Use 4 spaces instead of tabs for indentation (which is referred to as 'soft "
"tabs')."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:38
msgid "Line breaks and blank lines"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:40
msgid ""
"For a general indentation rule, follow `The 'Allman Style' <https://en."
"wikipedia.org/wiki/Indentation_style#Allman_style>`_ which recommends "
"placing the brace associated with a control statement on the next line, "
"indented to the same level:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:57
msgid "However, you may choose to omit line breaks inside brackets:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:59
msgid "For simple property accessors."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:60
msgid "For simple object, array, or collection initializers."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:61
msgid "For abstract auto property, indexer, or event declarations."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:83
msgid "Insert a blank line:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:85
msgid "After *using* statement list."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:86
msgid "Between method, properties, and inner type declarations."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:88
msgid ""
"Field and constant declarations can be grouped together according to "
"relevance. In that case, consider inserting a blank line between the groups "
"for easier reading."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:91
#, fuzzy
msgid "Avoid inserting a blank line:"
msgstr "2D로 평면 구성하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:93
msgid "After ``{``, the opening brace."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:94
msgid "Before ``}``, the closing brace."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:95
msgid "After a comment block, or a single line comment."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:96
msgid "Adjacent to another blank line."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:133
msgid ""
"Consider breaking a line when it's longer than 100 characters. And it's also "
"a good practice to insert a line feed (LF) character at the end of a file "
"because some utilities have trouble recognizing the last line without it (e."
"g. the *cat* command on Linux)."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:138
msgid "Using spaces"
msgstr "공백 사용하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:140
msgid "Insert a space:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:142
msgid "Around a binary and tertiary operator."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:143
msgid ""
"Between an opening parenthesis and *if*, *for*, *foreach*, *catch*, *while*, "
"*lock* or *using* keywords."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:144
msgid "Before and within a single line accessor block."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:145
msgid "Between accessors in a single line accessor block."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:146
msgid "After a comma."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:147
msgid "After a semi-colon in a *for* statement."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:148
msgid "After a colon in a single line *case* statement."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:149
msgid "Around a colon in a type declaration."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:150
msgid "Around a lambda arrow."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:151
msgid ""
"After a single line comment symbol ('//'), and before it if used at the end "
"of a line."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:153
msgid "Do not use a space:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:155
msgid "After type cast parentheses."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:156
msgid "Within single line initializer braces."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:158
msgid ""
"The following example shows a proper use of spaces, according to some of the "
"above mentioned conventions:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:195
msgid ""
"Use *PascalCase* for all namespaces, type names and member level identifiers "
"(i.e. methods, properties, constants, events), except for private fields:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:216
msgid ""
"Use *camelCase* for all other identifiers (i.e. local variables, method "
"arguments), and use underscore('_') as a prefix for private fields (but not "
"for methods or properties, as explained above):"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:230
msgid ""
"There's an exception with acronyms which consist of two letters, like "
"*'UI'*, which should be written in uppercase letters when used where Pascal "
"case would be expected, and in lowercase letters otherwise."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:233
msgid ""
"Note that *'id'* is **not** an acronym, so it should be treated as a normal "
"identifier:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:244
msgid ""
"It is generally discouraged to use a type name as a prefix of an identifier, "
"like *'string strText'* or *'float fPower'*, for example. An exception is "
"made, however, for interfaces, which **should**, in fact, have an uppercase "
"letter *'I'* prefixed to their names, like *'IInventoryHolder'* or "
"*'IDamageable'*."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:248
msgid ""
"Lastly, consider choosing descriptive names and do not try to shorten them "
"too much if it affects readability."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:251
msgid ""
"For instance, if you want to write code to find a nearby enemy and hit it "
"with a weapon, prefer"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:257
msgid "Rather than,"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:264
msgid "Implicitly typed local variables"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:266
msgid ""
"Consider using implicitly typing (*'var'*) for declaration of a local "
"variable, but do so **only when the type is evident** from the right side of "
"the assignment:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:296
msgid "Other considerations"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:298
msgid "Use explicit access modifiers."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:299
msgid "Use properties instead of non-private fields."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:300
msgid ""
"Use modifiers in this order: *'public/protected/private/internal virtual/"
"override/abstract/new static readonly'*."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:301
msgid ""
"Avoid using fully qualified names or *'this.'* prefix for members when it's "
"not necessary."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:302
msgid "Remove unused *'using'* statements and unnecessary parentheses."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:303
msgid "Consider omitting default initial value for a type."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:304
msgid ""
"Consider using null-conditional operators or type initializers to make the "
"code more compact."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_style_guide.rst:305
msgid ""
"Use safe cast when there is a possibility of the value being a different "
"type, and use direct cast otherwise."
msgstr ""

#: ../../docs/getting_started/workflow/index.rst:2
msgid "Project workflow"
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:9
msgid ""
"This tutorial aims to propose a simple workflow on how to organize projects. "
"Since Godot allows the programmer to use the filesystem as they please, "
"figuring out a way to organize projects when starting to use the engine can "
"be a little challenging. Because of this, the tutorial describes a simple "
"workflow, which should work as a starting point, regardless of whether it is "
"used."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:16
msgid ""
"Additionally, using version control can be challenging, so this proposition "
"will include that too."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:20
msgid "Organization"
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:22
msgid ""
"Godot is scene-based in nature, and uses the filesystem as-is, without "
"metadata or an asset database."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:25
msgid ""
"Unlike other engines, many resources are contained within the scene itself, "
"so the amount of files in the filesystem is considerably lower."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:28
msgid ""
"Considering that, the most common approach is to group assets as close to "
"scenes as possible; when a project grows, it makes it more maintainable."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:32
msgid ""
"As an example, one can usually place into a single folder their basic "
"assets, such as sprite images, 3D model meshes, materials, and music, etc. "
"They can then use a separate folder to store built levels that use them."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:53
msgid "Importing"
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:55
msgid ""
"Godot versions prior to 3.0 did the import process from files outside the "
"project. While this can be useful in large projects, it resulted in an "
"organization hassle for most developers."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:59
msgid ""
"Because of this, assets are now transparently imported from within the "
"project folder."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:62
msgid ""
"If a folder shouldn't be imported into Godot, an exception can be made with "
"a .gdignore file."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:2
msgid "Blender ESCN exporter"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:4
msgid ""
"This chapter relates to the Blender plugin called \"Godot Blender Exporter"
"\", which can be downloaded here: https://github.com/godotengine/godot-"
"blender-exporter"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:7
msgid ""
"This plugin can be used to export Blender scenes in a Godot-specific scene "
"format called ESCN, which is similar to TSCN (text format) but will be "
"imported as binary SCN for performance."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:12
msgid "Details on exporting"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:27
msgid "Disabling specific objects"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:29
msgid ""
"Sometimes you don't want some objects exported (e.g. high-res models used "
"for baking). An object will not be exported if it is not rendered in the "
"scene. This can be set in the outliner:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:35
msgid ""
"Objects hidden in the viewport will be exported, but will be hidden in the "
"Godot scene."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:40
msgid "Build pipeline integration"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/index.rst:42
msgid ""
"If you have hundreds of model files, you don't want your artists to waste "
"time manually exporting their blend files. To combat this, the exporter "
"provides a python function ``io_scene_godot.export(out_file_path)`` that can "
"be called to export a file. This allows easy integration with other build "
"systems. An example Makefile and python script that exports all the blends "
"in a directory are present in the Godot-Blender-exporter repository."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:2
#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:132
msgid "Materials"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:5
msgid "Using existing Godot materials"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:6
msgid ""
"One way in which the exporter can handle materials is to attempt to match "
"the Blender material with an existing Godot material. This has the advantage "
"of being able to use all of the features of Godot's material system, but it "
"means that you cannot see your model with the material applied inside "
"Blender."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:11
msgid ""
"To do this, the exporter attempts to find Godot materials with names that "
"match those of the material name in Blender. So if you export an object in "
"Blender with the material name ``PurpleDots`` then the exporter will search "
"for the file ``PurpleDots.tres`` and assign it to the object. If this file "
"is not a ``SpatialMaterial`` or ``ShaderMaterial`` or if it cannot be found, "
"then the exporter will fall back to exporting the material from Blender."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:19
msgid ""
"Where the exporter searches for the ``.tres`` file is determined by the "
"\"Material Search Paths\" option:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:33
msgid "This can take the value of:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:25
msgid ""
"Project Directory - Attempts to find the ``project.Godot`` and recursively "
"searches through subdirectories. If ``project.Godot`` cannot be found it "
"will throw an error. This is useful for most projects where naming conflicts "
"are unlikely."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:29
msgid ""
"Export Directory - Look for materials in subdirectories of the export "
"location. This is useful for projects where you may have duplicate material "
"names and need more control over what material gets assigned."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:32
msgid "None - Do not search for materials. Export them from the Blender file."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:36
msgid "Export of Blender materials"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:38
msgid ""
"The other way materials are handled is for the exporter to export them from "
"Blender. Currently only the diffuse color and a few flags (e.g. unshaded) "
"are exported."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:43
msgid ""
"Export of Blender materials is currently very primitive. However, it is the "
"focus of a current GSoC project"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/material.rst:47
msgid ""
"Materials are currently exported using their \"Blender Render\" settings. "
"When Blender 2.8 is released, this will be removed and this part of the "
"exporter will change."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:2
#, fuzzy
msgid "Physics properties"
msgstr "노드 속성"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:4
msgid ""
"Exporting physics properties is done by enabling \"Rigid Body\" in Blender's "
"physics tab:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:10
msgid ""
"By default, a single Blender object with rigid body enabled will export as "
"three nodes: a PhysicsBody, a CollisionShape, and a MeshInstance."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:14
#, fuzzy
msgid "Body type"
msgstr "바디 유형"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:16
msgid ""
"Blender only has the concept of \"Active\" and \"Passive\" rigid bodies. "
"These turn into Static and RigidBody nodes. To create a kinematic body, "
"enable the \"animated\" checkbox on an \"Active\" body:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:23
#: ../../docs/tutorials/physics/physics_introduction.rst:55
#, fuzzy
msgid "Collision shapes"
msgstr "충돌 마스크"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:25
msgid ""
"Many of the parameters for collision shapes are missing from Blender, and "
"many of the collision shapes are also not present. However, almost all of "
"the options in Blender's rigid body collision and rigid body dynamics "
"interfaces are supported:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:39
msgid "There are the following caveats:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:33
msgid ""
"Not all of the collision shapes are supported. Only ``Mesh``, ``Convex "
"Hull``, ``Capsule``, ``Sphere`` and ``Box`` are supported in both Blender "
"and Godot"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:36
msgid ""
"In Godot, you can have different collision groups and collision masks. In "
"Blender you only have collision groups. As a result, the exported object's "
"collision mask is equal to its collision group. Most of the time, this is "
"what you want."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:42
msgid ""
"To build compound physics shapes, parent together multiple objects with "
"rigid body enabled. The physics properties are taken from the parent-most "
"rigid body, and the rest are used as collision shapes."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:47
#, fuzzy
msgid "Collision geometry only"
msgstr "충돌 예외"

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:49
msgid ""
"Frequently you want different geometry for your collision meshes and your "
"graphical meshes, but by default the exporter will export a mesh along with "
"the collision shape. To only export the collision shape, set the object's "
"maximum draw type to Wire:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/physics.rst:56
msgid ""
"This will also influence how the object is shown in Blender's viewport. Most "
"of the time, you want your collision geometry to be shown see-through when "
"working on the models, so this works out fairly nicely."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:2
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:68
#: ../../docs/tutorials/3d/introduction_to_3d.rst:223
msgid "Lights"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:4
msgid ""
"By default, lamps in Blender have shadows enabled. This can cause "
"performance issues in Godot."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:8
msgid ""
"Lamps are exported using their \"Blender Render\" settings. When Blender 2.8 "
"is released, this will be removed and this part of the exporter will change."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:11
msgid ""
"Sun, point and spot lamps are all exported from Blender along with many of "
"their properties:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:16
msgid "There are some things to note:"
msgstr "적어 놓을 만한 사항들이 있습니다:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:18
msgid ""
"In Blender, a light casts light all the way to infinity. In Godot, it is "
"clamped by the attenuation distance. To most closely match between the "
"viewport and Godot, enable the \"Sphere\" checkbox. (Highlighted green)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:21
msgid ""
"Light attenuation models differ between Godot and Blender. The exporter "
"attempts to make them match, but it isn't always very good."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:23
msgid ""
"Spotlight angular attenuation models also differ between Godot and Blender. "
"The exporter attempts to make them similar, but it doesn't always look the "
"same."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/lights.rst:26
msgid ""
"There is no difference between buffer shadow and ray shadow in the export."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:2
msgid "Mesh"
msgstr "Mesh"

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:5
msgid "Modifiers"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:6
msgid ""
"There is an exporting option :code:`Apply Modifiers` to control whether mesh "
"modifiers are applied to the exported mesh."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:11
msgid "Shape Key"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:12
msgid ""
"Exporting mesh shape key is supported, however exporting each shape key is "
"almost like exporting the mesh again, so don't be surprised it takes a "
"relatively long time."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/mesh.rst:17
msgid ""
"A lot of modifiers are not compatible with shape keys (e.g. subsurface "
"modifier), so if you found you have incorrect shape keys exported, try to "
"disable :code:`Apply Modifiers` and do the exporting again. Besides, it is "
"worthwhile to report the incompatible modifier to the `issue list <https://"
"github.com/godotengine/godot-blender-exporter/issues>`__, which helps to "
"develop the exporter to have a more precise check of modifiers."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:2
#: ../../docs/development/file_formats/tscn.rst:153
msgid "Skeleton"
msgstr "스켈레톤"

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:7
msgid "Rest Bone"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:9
msgid ""
"Armature object in Blender is exported as a Skeleton node along with rest "
"position (transform in Godot) of bones."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:13
msgid ""
"The three check boxes :code:`Inherit Rotation`, :code:`Inherit Scale`, :code:"
"`Local Location` (colored in red) must be ticked when building armature in "
"Blender, so that the exported bone transform be consistent between Blender "
"and Godot"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:19
msgid "Bone Weights"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:21
msgid ""
"Blender put rigged mesh vertices which has no bone weights at its original "
"position, but these vertices would be placed at (0, 0, 0) in Godot, making "
"the mesh deformed. Therefore, the exporter would raise an error for any "
"vertex with no bone weights detected in a rigged mesh."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:27
msgid "Non-Deform Bone"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:29
msgid ""
"Note that the non-deform bone can be configured as not exported by enabling "
"the :code:`Exclude Control Bones`; the deform bone checkbox is shown in the "
"picture."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:35
msgid "Bone Attachment"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/skeleton.rst:36
msgid ""
"A bone can be the parent of an object in Blender; this relation is exported "
"as a BoneAttachment node in the Godot scene."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:2
#: ../../docs/tutorials/animation/index.rst:2
#: ../../docs/tutorials/animation/cutout_animation.rst:279
#: ../../docs/development/file_formats/tscn.rst:365
msgid "Animation"
msgstr "애니메이션"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:8
msgid "Animation supported:"
msgstr "애니메이션 지원:"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:4
msgid "transform animation of all types of objects"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:5
msgid "transform animation of pose bones"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:6
msgid "shape key animation"
msgstr "모양 키 애니메이션"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:7
msgid "light animation"
msgstr "빛 애니메이션"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:8
msgid "camera animation"
msgstr "카메라 애니메이션"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:11
msgid "Multiple Actions For Single Object"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:12
msgid ""
"In most games, one object would have several animations to switch between. "
"This add-on has support for exporting multiple actions all at once into a "
"single AnimationPlayer and makes it easy to switch actions."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:16
msgid ""
"This workflow makes use of blender nla_tracks. Here is a brief guide on how "
"to use this feature:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:19
msgid "**1. Switch workspace to 'Dope Sheet'**"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:23
msgid "**2. Stash the active action**"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:25
msgid "The stashed action, while not active, will still be exported."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:29
msgid "**3. Check stashed actions in 'NLA Editor' [optional]**"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:31
msgid "Switch workspace to 'NLA Editor'."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:35
msgid "Make sure all stashed actions are muted."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:39
msgid "**4. Export the scene**"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:41
msgid ""
"All the stashed actions, as well as the active action, are exported to an "
"AnimationPlayer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:48
msgid "Constraints"
msgstr "제약(Constraints)"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:49
msgid ""
"Sometimes complicated animation is built with object constraint; a usual "
"example is inverse kinematics. The add-on would automatically check if an "
"object has some constraint; if it does, all the constraints are baked into "
"every action the object has and then exported."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:56
msgid "Animation Mode"
msgstr "애니메이션 모드"

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:57
msgid ""
"Godot and Blender have different structure to store animation data. In Godot "
"animation data is stored in an AnimationPlayer node, instead of in each "
"animated node. In order to fix this inconsistence and still make the "
"animation play versatile, this add-on has three animation exporting modes."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:64
msgid "**Mode 'Animation as Actions'**"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:66
msgid ""
"Treat all the animations as object actions, so in the exported scene, every "
"object would have its own AnimationPlayer and hold its actions."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:70
msgid "**Mode 'Scene Animation'**"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:72
msgid ""
"If you want your animation to generate the same result as playing at "
"Blender's timeline, this is what you want. In this mode, all the animations "
"in the scene are placed in just one AnimationPlayer in the scene root."
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:76
msgid "**Mode 'Animation as Action with Squash'**"
msgstr ""

#: ../../docs/getting_started/workflow/assets/escn_exporter/animation.rst:78
msgid ""
"This mode has very similar behaviour of mode 'Animation as Action', but it "
"can generate fewer AnimationPlayers; objects in parent-children relationship "
"would share their AnimationPlayer. It is useful when you have several rigs, "
"and each Skeleton and Mesh has actions; then one rig would have just one "
"AnimationPlayer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/index.rst:2
msgid "Assets workflow"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:4
msgid "Import process"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:7
msgid "Importing assets in Godot 3.0+"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:9
msgid ""
"Previously, importing assets in Godot 2.x required manual maintenance of a "
"separate directory with source assets. Without doing this, it was impossible "
"to specify how to convert and change import flags for textures, audio files, "
"scenes, etc."
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:14
msgid ""
"In Godot 3.0, we use a more modern approach to importing: Simply drop your "
"assets (image files, scenes, audio files, fonts, etc) directly in the "
"project folder (copy them manually with your OS file explorer). Godot will "
"automatically import these files internally and keep the imported resources "
"hidden in a res://.import folder."
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:20
msgid "This allows changing all the import parameters transparently."
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:23
msgid "Changing import parameters"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:25
msgid ""
"Changing the import parameters of an asset in Godot (again, keep in mind "
"import parameters are only present in non-native Godot resource types) is "
"easy. Select the relevant resource in the filesystem dock:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:31
msgid ""
"Then, after adjusting the parameters, press \"Reimport\". These parameters "
"will only be used for this asset and on future reimports."
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:34
msgid ""
"Changing the import parameters of several assets at the same time is also "
"possible. Simply select all of them together in the resources dock and the "
"exposed parameters will apply to all of them when reimporting."
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:39
msgid "Automatic reimport"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:41
msgid ""
"When the MD5 checksum of the source asset changes, Godot will perform an "
"automatic reimport of it, applying the preset configured for that specific "
"asset."
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:46
msgid "Files generated"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:48
msgid ""
"Importing will add an extra <asset>.import file, containing the import "
"configuration. Make sure to commit these to your version control system!"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:53
msgid ""
"Additionally, extra assets will be preset in the hidden res://.import folder:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:57
msgid ""
"If any of the files present in this folder is erased (or the whole folder), "
"the asset or assets will be reimported automatically. As such, committing "
"this folder to the version control system is optional. It can shorten "
"reimporting time when checking out on another computer, but it takes "
"considerably more space and transfer time. Pick your poison!"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:64
msgid "Changing import resource type"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:66
msgid ""
"Some source assets can be imported as different types of resources. For "
"this, select the relevant type of resource desired and press \"Reimport\":"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:74
msgid "Changing default import parameters"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:76
msgid ""
"Different types of games might require different defaults. Changing the "
"defaults per project can be achieved by using the \"Preset..\" Menu. Besides "
"some resource types offering presets, the default setting can be saved and "
"cleared too:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:84
msgid "Simplicity is key!"
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:86
msgid ""
"This is a very simple workflow which should take very little time to get "
"used to. It also enforces a more correct way to deal with resources."
msgstr ""

#: ../../docs/getting_started/workflow/assets/import_process.rst:89
msgid ""
"There are many types of assets available for import, so please continue "
"reading to understand how to work with all of them!"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:4
msgid "Importing images"
msgstr "이미지 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:7
msgid "Why import them?"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:9
msgid ""
"In Godot 3+, image files are no longer native resources and they must be "
"imported. The reason behind this is the large amount of configuration "
"parameters that image files can be imported with."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:13
msgid ""
"This small tutorial will explain what these parameters are and how to best "
"make use of them."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:17
msgid "Importing textures"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:19
msgid ""
"The default action in Godot is to import images as textures. Textures are "
"stored in video memory and can't be accessed directly. This is what makes "
"drawing them efficient."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:23
msgid "Import options are vast:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:28
msgid "Compression"
msgstr "압축"

#: ../../docs/getting_started/workflow/assets/importing_images.rst:30
msgid ""
"Images are one of the largest assets in a game. To handle them efficiently, "
"they need to be compressed. Godot offers several compression methods, "
"depending on the use case."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:34
msgid "Compress Mode"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:36
msgid ""
"VRAM Compression: This is the most common compression mode for 3D assets. "
"File on disk is reduced and video memory usage is also reduced considerably. "
"For 3D, it may present unwanted artifacts, though."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:38
msgid ""
"Lossless Compression: This is the most common compression for 2D assets. It "
"shows assets without any kind of artifacting, and disk compression is "
"decent. It will use considerably more amount of video memory than VRAM, "
"though."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:40
msgid ""
"Lossy Compression: For games with lots of large 2D assets, lossy compression "
"can be a great choice. It has some artifacting, but less than VRAM and the "
"file size is almost a tenth of Lossless."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:42
msgid ""
"Uncompressed: Only useful for formats that can't be compressed (like, raw "
"float)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:44
msgid ""
"In this table, each of the four options are described together with their "
"advantages and disadvantages ( |good| = Best, |bad| =Worst ):"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:48
msgid "Uncompressed"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:48
msgid "Compress Lossless (PNG)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:48
msgid "Compress Lossy (WebP)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:48
msgid "Compress VRAM"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:50
msgid "Stored as raw pixels"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:50
msgid "Stored as PNG"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:50
msgid "Stored as WebP"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:50
msgid "Stored as S3TC/BC,PVRTC/ETC, depending on platform"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:52
msgid "Size on Disk"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:52
#: ../../docs/getting_started/workflow/assets/importing_images.rst:54
msgid "|bad| Large"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:52
msgid "|regular| Small"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:52
msgid "|good| Very Small"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:54
msgid "Memory Usage"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:54
msgid "|good| Small"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:56
#: ../../docs/tutorials/2d/canvas_layers.rst:70
msgid "Performance"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:56
#: ../../docs/getting_started/workflow/assets/importing_images.rst:60
msgid "|regular| Normal"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:56
#: ../../docs/getting_started/workflow/assets/importing_images.rst:60
msgid "|good| Fast"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:58
msgid "Quality Loss"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:58
msgid "|good| None"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:58
msgid "|regular| Slight"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:58
msgid "|bad| Moderate"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:60
msgid "Load Time"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:60
msgid "|bad| Slow"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:70
msgid "HDR Mode"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:72
msgid ""
"Godot supports high dynamic range textures (as .HDR or .EXR). These are "
"mostly useful as high dynamic range equirectangular panorama skies (the "
"internet has plenty if you search for them), which replace Cubemaps in Godot "
"2.x. Modern PCs support the BC6H VRAM format, but there are still plenty "
"that do not."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:75
msgid ""
"If you want Godot to ensure full compatibility in terms of the kind of "
"textures, enable the \"Force RGBE\" option."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:78
msgid "Normal Map"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:80
msgid ""
"When using a texture as normal map, only the red and green channels are "
"required. Given regular texture compression algorithms produce artifacts "
"that don't look that nice in normal maps, the RGTC compression format is the "
"best fit for this data. Forcing this option to \"Enabled\" will make Godot "
"import the image as RGTC compressed. By default, it's set to \"Detect\", "
"which means that if the texture is ever used as a normal map, it will be "
"changed to \"Enabled\" and reimported automatically."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:86
#: ../../docs/tutorials/3d/spatial_material.rst:19
msgid "Flags"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:88
msgid ""
"There are plenty of settings that can be toggled when importing an image as "
"a texture, depending on the use case."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:91
msgid "Repeat"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:93
msgid ""
"This setting is most commonly used in 3D, and is therefore generally "
"disabled in 2D. It sets UV coordinates going beyond the 0,0 - 1,1 range to "
"\"loop\"."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:95
msgid "Repeating can optionally be set to mirrored mode."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:98
msgid "Filter"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:100
msgid ""
"When pixels become larger than the screen pixels, this option enables linear "
"interpolation for them. The result is a smoother (less blocky) texture. This "
"setting can be commonly used in 2D and 3D, but it's usually disabled when "
"making pixel perfect games."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:103
msgid "Mipmaps"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:105
msgid ""
"When pixels become smaller than the screen, mipmaps kick in. This helps "
"reduce the grainy effect when shrinking the textures. Keep in mind that, in "
"older hardware (GLES2, mainly mobile), there are some requirements to use "
"mipmaps:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:108
msgid "Texture width and height must be powers of 2"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:109
msgid "Repeat must be enabled"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:111
msgid ""
"Keep in mind the above when making phone games and applications, want to aim "
"for full compatibility, and need mipmaps."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:113
msgid ""
"When doing 3D, mipmap should be turned on, as this also improves performance "
"(smaller versions of the texture are used for objects further away)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:116
msgid "Anisotropic"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:118
msgid ""
"When textures are near parallel to the view (like floors), this option makes "
"them have more detail by reducing blurriness."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:121
msgid "SRGB"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:123
msgid ""
"Godot uses Linear colorspace when rendering 3D. Textures mapped to albedo or "
"detail channels need to have this option turned on in order for colors to "
"look correct. When set to \"Detect\" mode, the texture will be marked as "
"SRGB when used in albedo channels."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:127
msgid "Process"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:129
msgid ""
"Some special processes can be applied to images when imported as textures."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:132
msgid "Fix Alpha Border"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:134
msgid ""
"This puts pixels of the same surrounding color in transition from "
"transparency to non transparency. It helps mitigate the outline effect when "
"exporting images from Photoshop and the like."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:139
msgid ""
"It's a good idea to leave it on by default, unless specific values are "
"needed."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:142
msgid "Premultiplied Alpha"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:144
msgid ""
"An alternative to fix darkened borders is to use premultiplied alpha. By "
"enabling this option, the texture will be converted to this format. Keep in "
"mind that a material will need to be created that uses the PREMULT ALPHA "
"blend mode on canvas items that need it."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:148
msgid "HDR as sRGB"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:150
msgid ""
"A few HDR files are broken and contain sRGB color data. It is advised not to "
"use them, but, in the worst-case scenario, toggling this option on will make "
"them look right."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:153
msgid "Invert Color"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:155
msgid ""
"Reverses the image's color. This is useful, for example, to convert a height "
"map generated by external programs to depth map to use with :ref:"
"`doc_spatial_material`."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:158
msgid "Detect 3D"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_images.rst:160
msgid ""
"This option makes Godot be aware of when a texture (which is imported for 2D "
"as default) is used in 3D. If this happens, setting are changed so the "
"texture flags are friendlier to 3D (mipmaps, filter and repeat become "
"enabled and compression is changed to VRAM). Texture is also reimported "
"automatically."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:4
msgid "Importing audio samples"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:7
msgid "Why import?"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:9
msgid ""
"Raw audio data in general is large and undesired. Godot provides two main "
"options to import your audio data: WAV and OGG Vorbis."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:12
msgid ""
"Each has different advantages. * Wav files use raw data or light "
"compression, make few demands on the CPU to play back (hundreds of "
"simultaneous voices in this format are fine), but take up significant space. "
"* Ogg Vorbis files use a stronger compression that results in much smaller "
"file size, but require significantly more processing power to play back."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:19
msgid "Here is a comparative chart."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:22
msgid "Format"
msgstr "형식"

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:22
msgid "1 Second of Audio"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:24
msgid "WAV 24 bits, 96 kHz, Stereo"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:24
msgid "576kb"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:26
msgid "WAV 16 bits, 44 kHz, Mono"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:26
msgid "88kb"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:28
msgid "WAV 16 bits, IMA-ADPCM, Mono"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:28
msgid "22kb"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:30
msgid "OGG 128kbps, Stereo"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:30
msgid "16kb"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:32
msgid "OGG Vorbis 96kbps, Stereo"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:32
msgid "12kb"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:35
msgid ""
"In general, what is recommended, is to use WAV for most sound effects, "
"especially those that are short and repetitive, and OGG for music, voice and "
"long sound effects."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:38
msgid "Best practices"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:40
msgid ""
"Godot 3+ has an amazing bus system with built-in effects. This saves SFX "
"artists the need to add reverb to the sound effects, reducing their size "
"greatly and ensuring correct trimming. Say no to SFX with baked reverb!"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:47
msgid "As you can see above, sound effects become huge with reverb added."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:50
msgid "Trimming"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:52
msgid ""
"One issue that happens often is that the waveform is exported with long "
"silences at the beginning and at the end. These are inserted by DAWs when "
"saving to a waveform, increase their size unnecessarily and add latency to "
"the moment they are played back."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:57
msgid "Importing as WAV with the Trimming option enabled solves this."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:61
msgid "Looping"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:63
msgid ""
"Godot supports looping in the samples (tools such as Sound Forge or Audition "
"can add loop points to wav files). This is useful for sound effects, such as "
"engines, machine guns etc. Ping-pong looping is also supported."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_audio_samples.rst:68
msgid ""
"As an alternative, the import screen has a \"loop\" option that enables "
"looping for the entire sample when importing."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:4
msgid "Importing translations"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:7
msgid "Games and internationalization"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:9
msgid ""
"The world is full of different markets and cultures and, to maximize "
"profits™, nowadays games are released in several languages. To solve this, "
"internationalized text must be supported in any modern game engine."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:14
msgid ""
"In regular desktop or mobile applications, internationalized text is usually "
"located in resource files (or .po files for GNU stuff). Games, however, can "
"use several orders of magnitude more text than applications, so they must "
"support efficient methods for dealing with loads of multilingual text."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:20
msgid ""
"There are two approaches to generate multilingual language games and "
"applications. Both are based on a key:value system. The first is to use one "
"of the languages as the key (usually English), the second is to use a "
"specific identifier. The first approach is probably easier for development "
"if a game is released first in English, later in other languages, but a "
"complete nightmare if working with many languages at the same time."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:28
msgid ""
"In general, games use the second approach and a unique ID is used for each "
"string. This allows you to revise the text while it is being translated to "
"other languages. The unique ID can be a number, a string, or a string with a "
"number (it's just a unique string anyway)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:33
msgid "Translators also usually prefer to work with spreadsheets."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:36
msgid "Translation format"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:38
msgid ""
"To complete the picture and allow efficient support for translations, Godot "
"has a special importer that can read CSV files. All spreadsheet editors (be "
"it Libreoffice, Microsoft Office, Google Docs, etc.) can export to this "
"format, so the only requirement is that the files have a special "
"arrangement. The CSV files must be saved in UTF-8 encoding and be formatted "
"as follows:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:46
msgid "<lang1>"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:46
msgid "<lang2>"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:46
msgid "<langN>"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:48
msgid "KEY1"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:48
#: ../../docs/getting_started/workflow/assets/importing_translations.rst:50
#: ../../docs/getting_started/workflow/assets/importing_translations.rst:52
#: ../../docs/tutorials/misc/binary_serialization_api.rst:33
msgid "string"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:50
msgid "KEY2"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:52
msgid "KEYN"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:55
msgid ""
"The \"lang\" tags must represent a language, which must be one of the :ref:"
"`valid locales <doc_locales>` supported by the engine. The \"KEY\" tags must "
"be unique and represent a string universally (they are usually in uppercase, "
"to differentiate from other strings). Here's an example:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:61
#: ../../docs/tutorials/i18n/locales.rst:352
msgid "id"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:61
#: ../../docs/tutorials/i18n/locales.rst:178
msgid "en"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:61
#: ../../docs/tutorials/i18n/locales.rst:220
msgid "es"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:61
#: ../../docs/tutorials/i18n/locales.rst:372
msgid "ja"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:63
msgid "GREET"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:63
msgid "Hello, friend!"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:63
msgid "Hola, Amigo!"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:63
msgid "こんにちは"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:65
msgid "ASK"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:65
msgid "How are you?"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:65
msgid "Cómo está?"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:65
msgid "元気ですか"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:67
msgid "BYE"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:67
msgid "Good Bye"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:67
msgid "Adiós"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:67
msgid "さようなら"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:71
msgid "CSV importer"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:73
msgid ""
"Godot will treat CSV files as translations by default. It will import them "
"and generate one or more compressed translation resource files next to it."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_translations.rst:76
msgid ""
"Importing will also add the translation to the list of translations to load "
"when the game runs, specified in project.godot (or the project settings). "
"Godot allows loading and removing translations at runtime as well."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:4
msgid "Importing 3D scenes"
msgstr "3D 씬 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:7
msgid "Godot scene importer"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:9
msgid ""
"When dealing with 3D assets, Godot has a flexible and configurable importer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:11
msgid ""
"Godot works with *scenes*. This means that the entire scene being worked on "
"in your favorite 3D DCC will be transferred as close as possible."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:14
msgid "Godot supports the following 3D *scene file fomats*:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:16
msgid "DAE (COLLADA), which is currently the most mature workflow."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:17
msgid ""
"GLTF 2.0. Both text and binary formats are supported. Godot has full support "
"for it, but the format is new and gaining traction."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:18
msgid ""
"OBJ (Wavefront) formats. It is also fully supported, but pretty limited (no "
"support for pivots, skeletons, etc)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:20
msgid ""
"Just copy the scene file together with the texture to the project "
"repository, and Godot will do a full import."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:23
msgid "Why not FBX?"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:25
msgid ""
"Most game engines use the FBX format for importing 3D scenes, which is "
"definitely one of the most standardized in the industry. However, this "
"format requires the use of a closed library from Autodesk, which is "
"distributed with more restrictive licensing terms than Godot."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:30
msgid ""
"The plan is, sometime in the future, to offer a binary plug-in using "
"GDNative."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:33
msgid "Exporting DAE files from Maya and 3DS Max"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:35
msgid ""
"Autodesk added built-in COLLADA support to Maya and 3DS Max, but it's broken "
"by default and should not be used. The best way to export this format is by "
"using the `OpenCollada <https://github.com/KhronosGroup/OpenCOLLADA/wiki/"
"OpenCOLLADA-Tools>`__ plugins. They work well, although they are not always "
"up-to date with the latest version of the software."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:43
msgid "Exporting DAE files from Blender"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:45
msgid ""
"Blender has built-in COLLADA support too, but it's also broken and should "
"not be used."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:48
msgid ""
"Godot provides a `Python Plugin <https://github.com/godotengine/collada-"
"exporter>`__ that will do a much better job of exporting the scenes."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:53
msgid "Exporting ESCN files from Blender"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:55
msgid ""
"The most powerful one, called `godot-blender-exporter <https://github.com/"
"godotengine/godot-blender-exporter>`__. It uses a .escn file, which is kind "
"of another name for a .tscn file (Godot scene file); it keeps as much "
"information as possible from a Blender scene."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:60
msgid ""
"The ESCN exporter has a detailed `document <escn_exporter/index.html>`__ "
"describing its functionality and usage."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:64
msgid "Import workflows"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:66
msgid ""
"Godot scene importer allows different workflows regarding how data is "
"imported. Depending on many options, it is possible to import a scene with:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:69
msgid ""
"External materials (default): Where each material is saved to a file "
"resource. Modifications to them are kept."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:70
msgid ""
"External meshes: Where each mesh is saved to a different file. Many users "
"prefer to deal with meshes directly."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:71
msgid ""
"External animations: Allowing saved animations to be modified and merged "
"when sources change."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:72
msgid ""
"External scenes: Save each of the root nodes of the imported scenes as a "
"separate scene."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:73
msgid "Single scene: A single scene file with everything built in."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:77
msgid ""
"As different developers have different needs, this import process is highly "
"customizable."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:80
msgid "Import options"
msgstr "옵션들 가져오기"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:82
msgid "The importer has several options, which will be discussed below:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:90
msgid "Root Type"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:92
msgid ""
"By default, the type of the root node in imported scenes is \"Spatial\", but "
"this can be modified."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:95
msgid "Root Name"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:97
msgid "Allows setting a specific name to the generated root node."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:100
msgid "Custom Script"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:102
msgid ""
"A special script to process the whole scene after import can be provided. "
"This is great for post processing, changing materials, doing funny stuff "
"with the geometry etc."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:106
#, fuzzy
msgid "Create a script like this:"
msgstr "최종 스크립트는 다음과 같아야 합니다:"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:117
msgid ""
"The ``post_import`` function takes the imported scene as argument (the "
"parameter is actually the root node of the scene). The scene that will "
"finally be used must be returned. It can be a different one."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:122
#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:141
#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:196
#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:236
msgid "Storage"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:124
msgid ""
"By default, Godot imports a single scene. This option allows specifying that "
"nodes below the root will each be a separate scene and instanced into the "
"imported one."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:128
msgid ""
"Of course, instancing such imported scenes in other places manually works, "
"too."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:135
msgid "Location"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:137
msgid ""
"Godot supports materials in meshes or nodes. By default, materials will be "
"put on each node."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:143
msgid ""
"Materials can be stored within the scene or in external files. By default, "
"they are stored in external files so editing them is possible. This is "
"because most 3D DCCs don't have the same material options as those present "
"in Godot."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:147
msgid ""
"When materials are built-in, they will be lost each time the source scene is "
"modified and re-imported."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:151
msgid "Keep On Reimport"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:153
msgid ""
"Once materials are edited to use Godot features, the importer will keep the "
"edited ones and ignore the ones coming from the source scene. This option is "
"only present if materials are saved as files."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:158
msgid "Meshes"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:161
msgid "Compress"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:163
msgid ""
"Makes meshes use less precise numbers for multiple aspects of the mesh in "
"order to save space."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:176
msgid "These are:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:167
msgid ""
"Transform Matrix (Location, rotation, and scale)             : 32-bit float "
"to 16-bit signed integer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:168
msgid ""
"Vertices                                                     : 32-bit float "
"to 16-bit signed integer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:169
msgid ""
"Normals                                                      : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:170
msgid ""
"Tangents                                                     : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:171
msgid ""
"Vertex Colors                                                : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:172
msgid ""
"UV                                                           : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:173
msgid ""
"UV2                                                          : 32-bit float "
"to 32-bit unsigned integer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:174
msgid ""
"Vertex weights                                               : 32-bit float "
"to 16-bit unsigned integer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:175
msgid ""
"Armature bones                                               : 32-bit float "
"to 16-bit unsigned integer."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:176
msgid ""
"Array index                                                  : 32-bit or 16-"
"bit unsigned integer based on how many elements there are."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:180
msgid "Additional info:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:179
msgid ""
"UV2 = The second UV channel for detail textures and baked lightmap textures."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:180
msgid ""
"Array index = An array of numbers that number each element of the arrays "
"above; i.e. they number the vertices and normals."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:182
msgid ""
"In some cases, this might lead to loss of precision, so disabling this "
"option may be needed. For instance, if a mesh is very big or there are "
"multiple meshes being imported that cover a large area, compressing the "
"import of this mesh(es) may lead to gaps in geometry or vertices not being "
"exactly where they should be."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:188
msgid "Ensure Tangents"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:190
msgid ""
"If textures with normal mapping are to be used, meshes need to have tangent "
"arrays. This option ensures that these are generated if not present in the "
"source scene. Godot uses Mikktspace for this, but it's always better to have "
"them generated in the exporter."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:198
msgid ""
"Meshes can be stored in separate files (resources) instead of built-in. This "
"does not have much practical use unless one wants to build objects with them "
"directly."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:201
msgid ""
"This option is provided to help those who prefer working directly with "
"meshes instead of scenes."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:205
msgid "External Files"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:207
msgid ""
"Generated meshes and materials can be optionally stored in a subdirectory "
"with the name of the scene."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:211
#, fuzzy
msgid "Animation options"
msgstr "애니메이션(Animations)"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:213
msgid ""
"Godot provides many options regarding how animation data is dealt with. Some "
"exporters (such as Blender) can generate many animations in a single file. "
"Others, such as 3DS Max or Maya, need many animations put into the same "
"timeline or, at worst, put each animation in a separate file."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:220
msgid "Import of animations is enabled by default."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:223
msgid "FPS"
msgstr "초당 프레임"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:225
msgid ""
"Most 3D export formats store animation timeline in seconds instead of "
"frames. To ensure animations are imported as faithfully as possible, please "
"specify the frames per second used to edit them. Failing to do this may "
"result in shaky animations."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:230
msgid "Filter Script"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:232
msgid ""
"It is possible to specify a filter script in a special syntax to decide "
"which tracks from which animations should be kept. (@TODO this needs "
"documentation)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:238
msgid ""
"By default, animations are saved as built-in. It is possible to save them to "
"a file instead. This allows adding custom tracks to the animations and "
"keeping them after a reimport."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:242
msgid "Optimizer"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:244
msgid ""
"When animations are imported, an optimizer is run, which reduces the size of "
"the animation considerably. In general, this should always be turned on "
"unless you suspect that an animation might be broken due to it being enabled."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:248
msgid "Clips"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:250
msgid ""
"It is possible to specify multiple animations from a single timeline as "
"clips. Specify from which frame to which frame each clip must be taken (and, "
"of course, don't forget to specify the FPS option above)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:254
msgid "Scene inheritance"
msgstr "씬 상속"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:256
msgid ""
"In many cases, it may be desired to make modifications to the imported "
"scene. By default, this is not possible because if the source asset changes "
"(source .dae, .gltf, .obj file re-exported from 3D modelling app), Godot "
"will re-import the whole scene."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:259
msgid ""
"It is possible, however, to make local modifications by using *Scene "
"Inheritance*. Try to open the imported scene and the following dialog will "
"appear:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:264
msgid "In inherited scenes, the only limitations for modifications are:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:266
msgid "Nodes can't be removed (but can be added anywhere)."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:267
msgid ""
"Sub-Resources can't be edited (save them externally as described above for "
"this)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:269
msgid "Other than that, everything is allowed!"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:272
msgid "Import hints"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:274
msgid ""
"Many times, when editing a scene, there are common tasks that need to be "
"done after exporting:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:276
#, fuzzy
msgid "Adding collision detection to objects"
msgstr "3차원에서 충돌 감지"

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:277
msgid "Setting objects as navigation meshes"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:278
msgid ""
"Deleting nodes that are not used in the game engine (like specific lights "
"used for modelling)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:280
msgid ""
"To simplify this workflow, Godot offers a few suffixes that can be added to "
"the names of the objects in your 3D modelling software. When imported, Godot "
"will detect them and perform actions automatically:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:285
msgid "Remove nodes (-noimp)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:287
msgid ""
"Node names that have this suffix will be removed at import time, no matter "
"what their type is. They will not appear in the imported scene."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:291
msgid "Create collisions (-col, -colonly, -convcolonly)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:293
msgid ""
"Option \"-col\" will work only for Mesh nodes. If it is detected, a child "
"static collision node will be added, using the same geometry as the mesh."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:296
msgid ""
"However, it is often the case that the visual geometry is too complex or too "
"un-smooth for collisions, which ends up not working well."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:299
msgid ""
"To solve this, the \"-colonly\" modifier exists, which will remove the mesh "
"upon import and create a :ref:`class_staticbody` collision instead. This "
"helps the visual mesh and actual collision to be separated."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:303
msgid ""
"Option \"-convcolonly\" will create a :ref:`class_convexpolygonshape` "
"instead of a :ref:`class_concavepolygonshape`."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:305
msgid ""
"Option \"-colonly\" can also be used with Blender's empty objects. On "
"import, it will create a :ref:`class_staticbody` with a collision node as a "
"child. The collision node will have one of a number of predefined shapes, "
"depending on Blender's empty draw type:"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:312
msgid "Single arrow will create a :ref:`class_rayshape`"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:313
msgid "Cube will create a :ref:`class_boxshape`"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:314
msgid "Image will create a :ref:`class_planeshape`"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:315
msgid ""
"Sphere (and the others not listed) will create a :ref:`class_sphereshape`"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:317
msgid ""
"For better visibility in Blender's editor, the user can set \"X-Ray\" option "
"on collision empties and set some distinct color for them in User "
"Preferences / Themes / 3D View / Empty."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:321
msgid "Create navigation (-navmesh)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:323
msgid ""
"A mesh node with this suffix will be converted to a navigation mesh. "
"Original Mesh node will be removed."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:327
msgid "Rigid Body (-rigid)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:329
msgid "Creates a rigid body from this mesh."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:332
msgid "Animation loop (-loop, -cycle)"
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:334
msgid ""
"Animation clips in the COLLADA document that start or end with the token "
"\"loop\" or \"cycle\" will be imported as a Godot Animation with the loop "
"flag set. This is case-sensitive and does not require a hyphen."
msgstr ""

#: ../../docs/getting_started/workflow/assets/importing_scenes.rst:338
msgid ""
"In Blender, this requires using the NLA Editor and naming the Action with "
"the \"loop\" or \"cycle\" prefix or suffix."
msgstr ""

#: ../../docs/getting_started/workflow/export/index.rst:2
msgid "Export"
msgstr "내보내기"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:4
msgid "Exporting projects"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:9
#, fuzzy
msgid "Why export?"
msgstr "export"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:11
msgid ""
"Originally, Godot did not have any means to export projects. The developers "
"would compile the proper binaries and build the packages for each platform "
"manually."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:15
msgid ""
"When more developers (and even non-programmers) started using it, and when "
"our company started taking more projects at the same time, it became evident "
"that this was a bottleneck."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:20
msgid "On PC"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:22
msgid ""
"Distributing a game project on PC with Godot is rather easy. Drop the Godot "
"binary in the same directory as the ``project.godot`` file, then compress "
"the project directory and you are done."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:26
msgid ""
"It sounds simple, but there are probably a few reasons why the developer may "
"not want to do this. The first one is that it may not be desirable to "
"distribute loads of files. Some developers may not like curious users "
"peeking at how the game was made, others may find it inelegant, and so on. "
"Another reason is that the developer might prefer a specially-compiled "
"binary, which is smaller in size, more optimized and does not include tools "
"like the editor and debugger."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:34
msgid ""
"Finally, Godot has a simple but efficient system for creating DLCs as extra "
"package files."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:38
msgid "On mobile"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:40
msgid ""
"The same scenario on mobile platforms is a little worse. To distribute a "
"project on those devices, a binary for each of those platforms is built, "
"then added to a native project together with the game data."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:45
msgid ""
"This can be troublesome because it means that the developer must be "
"familiarized with the SDK of each platform before even being able to export. "
"While learning each SDK is always encouraged, it can be frustrating to be "
"forced to do it at an undesired time."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:50
msgid ""
"There is also another problem with this approach: different devices prefer "
"some data in different formats to run. The main example of this is texture "
"compression. All PC hardware uses S3TC (BC) compression and that has been "
"standardized for more than a decade, but mobile devices use different "
"formats for texture compression, such as PVRTC (iOS) or ETC (Android)."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:58
msgid "Export menu"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:60
msgid ""
"After many attempts at different export workflows, the current one has "
"proven to work the best. At the time of this writing, not all platforms are "
"supported yet, but the supported platforms continue to grow."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:64
msgid "To open the export menu, click the **Export** button:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:68
msgid ""
"The export menu will open. However, it will be completely empty. This is "
"because we need to add an export preset."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:73
msgid ""
"To create an export preset, click the **Add…** button at the top of the "
"export menu. This will open a drop-down list of platforms to choose from for "
"an export preset."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:79
msgid ""
"The default options are often enough to export, so tweaking them is usually "
"not necessary. However, many platforms require additional tools (SDKs) to be "
"installed to be able to export. Additionally, Godot needs export templates "
"installed to create packages. The export menu will complain when something "
"is missing and will not allow the user to export for that platform until "
"they resolve it:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:88
msgid ""
"At that time, the user is expected to come back to the documentation and "
"follow instructions on how to properly set up that platform."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:94
msgid ""
"Apart from setting up the platform, the export templates must be installed "
"to be able to export projects. They can be obtained as a TPZ file (which is "
"a renamed ZIP archive) from the `download page of the website <https://www."
"godotengine.org/download>`_."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:99
msgid ""
"Once downloaded, they can be installed using the **Install Export "
"Templates** option in the editor:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:105
msgid "Export mode"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:107
msgid ""
"When exporting, Godot makes a list of all the files to export and then "
"creates the package. There are 3 different modes for exporting:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:110
msgid "Export every single file in the project"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:111
msgid "Export only resources (+ custom filter), this is the default."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:112
msgid "Export only selected resources (+ custom filter)"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:116
msgid ""
"**Export every single file** - This mode exports every single file in the "
"project. This is good to test if something is being forgotten, but "
"developers often have a lot of unrelated stuff around in the project "
"directory, which makes it a bad idea."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:121
msgid ""
"**Export only resources** - Only resources are exported. For most projects, "
"this is enough. However many developers like to use custom datafiles in "
"their games. To compensate for this, filters can be added for extra "
"extensions (for instance, ``*.txt,*.csv``)."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:126
msgid ""
"**Export only selected resources** - Only select resources from a list are "
"exported. This is probably overkill for most projects, but in some cases it "
"is justified (usually huge projects). This mode offers total control of what "
"is exported. Individual resources can be selected and dependency detection "
"is performed to ensure that everything needed is added."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:136
msgid "Exporting from the command line"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:138
msgid ""
"In production, it is useful to automate builds, and Godot supports this with "
"the ``--export`` and ``--export-debug`` command line parameters. Exporting "
"from the command line still requires an export preset to define the export "
"parameters. A basic invocation of the command would be:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:147
msgid ""
"This will export to ``some_name.exe``, assuming there is a preset called "
"\"Windows Desktop\" and the template can be found. The output path is "
"relative to the project path or absolute; it does not respect the directory "
"the command was invoked from."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:152
msgid ""
"You can also configure it to export only the PCK or ZIP file (allowing a "
"single export to be used with multiple Godot executables). This takes place "
"if:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:156
msgid "the export preset is not marked as runnable,"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:157
msgid "the target name ends with ``.pck`` or ``.zip``."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:159
msgid ""
"It is often useful to combine the ``--export`` flag with the ``--path`` "
"flag, and to create a dedicated export preset for automated export:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:4
msgid "Exporting packs, patches, and mods"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:7
#, fuzzy
msgid "Use cases"
msgstr "과거 시제 사용:"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:9
msgid ""
"Oftentimes one would like to add functionality to one's game after it has "
"been deployed."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:12
msgid "Examples of this include..."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:14
msgid ""
"Downloadable Content: the ability to add features and content to one's game."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:15
msgid "Patches: the ability to fix a bug that is present in a shipped product."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:16
msgid "Mods: grant other people the ability to create content for one's game."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:18
msgid ""
"These tools help developers to extend their development beyond the initial "
"release."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:22
msgid "Overview of PCK files"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:24
msgid ""
"Godot enables this via a feature called **resource packs** (PCK files, with "
"extension ``.pck``)."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:27
msgid "**Advantages:**"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:29
msgid "incremental updates/patches"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:30
msgid "offer DLCs"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:31
msgid "offer mod support"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:32
msgid "no source code disclosure needed for mods"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:33
msgid "more modular project structure"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:34
msgid "users don’t have to replace the entire game"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:36
msgid ""
"The first part of using them involves exporting and delivering the project "
"to players. Then, when one wants to add functionality or content later on, "
"they just deliver the updates via PCK files to the users."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:40
msgid "PCK files usually contain, but are not limited to:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:42
#, fuzzy
msgid "scripts"
msgstr "메인 스크립트"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:43
#, fuzzy
msgid "scenes"
msgstr "씬(Scenes)"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:44
msgid "shaders"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:45
msgid "models"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:46
#, fuzzy
msgid "textures"
msgstr "기능"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:47
#, fuzzy
msgid "sound effects"
msgstr "사운드 이펙트(Sound effects)"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:48
msgid "music"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:49
msgid "any other asset suitable for import into the game"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:51
msgid ""
"The PCK files can even be an entirely different Godot project, which the "
"original game loads in at runtime."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:55
msgid "Generating PCK files"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:57
msgid ""
"In order to pack all resources of a project into a PCK file open the project "
"and go to Project/Export and click on “Export PCK/Zip”. Also make sure to "
"have an export template selected while doing so."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:63
msgid ""
"Another method would be to :ref:`export from the command line "
"<doc_command_line_tutorial_exporting>`. If the output file ends with a PCK "
"or ZIP file extension, then the export process will build that type of file "
"for the chosen platform."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:69
msgid ""
"If one wishes to support mods for their game, they will need their users to "
"create similarly exported files. Assuming the original game expects a "
"certain structure for the PCK's resources and/or a certain interface for its "
"scripts, then either..."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:74
msgid ""
"The developer must publicize documentation of these expected structures/ "
"interfaces, expect modders to install Godot Engine, and then also expect "
"those modders to conform to the documentation's defined API when building "
"mod content for the game (so that it will work). Users would then use "
"Godot's built in exporting tools to create a PCK file, as detailed above."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:80
msgid ""
"The developer uses Godot to build a GUI tool for adding their exact API "
"content to a project. This Godot tool must either run on a tools-enabled "
"build of the engine or have access to one (distributed alongside or perhaps "
"in the original game's files). The tool can then use the Godot executable to "
"export a PCK file from the command line with :ref:`OS.execute() "
"<class_OS_method_execute>`. It makes the most sense for the game to not use "
"a tool-build though (for security) and for the modding tools to *do* use a "
"tool-enabled engine build."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:90
msgid "Opening PCK files at runtime"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:92
msgid ""
"To import a PCK file, one uses a one-liner. Keep in mind, there is no error "
"or exception if the import fails. Instead, one might have to create some "
"validation code as a layer on top. The following example expects a “mod.pck” "
"file in the directory of the games executable. The PCK file contains a "
"“mod_scene.tscn” test scene in its root."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:117
msgid ""
"If you import a file with the same file path/name as one you already have in "
"your project, the imported one will replace it. This is something to watch "
"out for when creating DLC or mods (solved easily with a tool isolating mods "
"to a specific mods subfolder). However, it is also a way of creating patches "
"for one's own game. A PCK file of this kind can fix the content of a "
"previously loaded PCK."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:126
msgid ""
"This tutorial should illustrate how easy adding mods, patches or DLC to a "
"game is. The most important thing is to identify how one plans to distribute "
"future content for their game and develop a workflow that is customized for "
"that purpose. Godot should make that process smooth regardless of which "
"route a developer pursues."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:4
msgid "Feature tags"
msgstr "기능 태그"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:9
msgid ""
"Godot has a special system to tag availability of features. Each *feature* "
"is represented as a string, which can refer to many of the following:"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:12
msgid "Platform name."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:13
msgid "Platform architecture (64-bit or 32-bit, x86 or ARM)."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:14
msgid "Platform type (desktop, mobile, Web)."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:15
msgid "Supported texture compression algorithms on the platform."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:16
msgid ""
"Whether a build is ``debug`` or ``release`` (``debug`` includes the editor)."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:17
msgid ""
"Whether the project is running from the editor or a \"standalone\" binary."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:18
msgid "Many more things."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:20
msgid "Features can be queried at run-time from the singleton API by calling:"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:28
msgid "Default features"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:30
msgid ""
"Here is a list of most feature tags in Godot. Keep in mind they are **case-"
"sensitive**:"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:33
msgid "**Feature tag**"
msgstr "**기능 태그**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:35
msgid "**Android**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:35
msgid "Running on Android"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:37
msgid "**HTML5**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:37
msgid "Running on HTML5"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:39
msgid "**JavaScript**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:39
msgid ":ref:`JavaScript singleton <doc_javascript_eval>` is available"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:42
msgid "**OSX**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:42
msgid "Running on macOS"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:44
msgid "**iOS**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:44
msgid "Running on iOS"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:46
msgid "**UWP**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:46
msgid "Running on UWP"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:48
msgid "**Windows**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:48
msgid "Running on Windows"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:50
msgid "**X11**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:50
msgid "Running on X11 (Linux/BSD desktop)"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:52
msgid "**Server**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:52
msgid "Running on the headless server platform"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:54
msgid "**debug**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:54
msgid "Running on a debug build (including the editor)"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:56
msgid "**release**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:56
msgid "Running on a release build"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:58
msgid "**editor**"
msgstr "**에디터**"

#: ../../docs/getting_started/workflow/export/feature_tags.rst:58
msgid "Running on an editor build"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:60
msgid "**standalone**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:60
msgid "Running on a non-editor build"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:62
msgid "**64**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:62
msgid "Running on a 64-bit build (any architecture)"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:64
msgid "**32**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:64
msgid "Running on a 32-bit build (any architecture)"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:66
msgid "**x86_64**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:66
msgid "Running on a 64-bit x86 build"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:68
msgid "**x86**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:68
msgid "Running on a 32-bit x86 build"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:70
msgid "**arm64**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:70
msgid "Running on a 64-bit ARM build"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:72
msgid "**arm**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:72
msgid "Running on a 32-bit ARM build"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:74
msgid "**mobile**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:74
msgid "Host OS is a mobile platform"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:76
msgid "**pc**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:76
msgid "Host OS is a PC platform (desktop/laptop)"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:78
msgid "**web**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:78
msgid "Host OS is a Web browser"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:80
msgid "**etc**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:80
msgid "Textures using ETC1 compression are supported"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:82
msgid "**etc2**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:82
msgid "Textures using ETC2 compression are supported"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:84
msgid "**s3tc**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:84
msgid "Textures using S3TC (DXT/BC) compression are supported"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:86
msgid "**pvrtc**"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:86
msgid "Textures using PVRTC compression are supported"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:90
msgid "Custom features"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:92
msgid ""
"It is possible to add custom features to a build; use the relevant field in "
"the *export preset* used to generate it:"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:98
msgid "Overriding project settings"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:100
msgid ""
"Features can be used to override specific configuration values in the "
"*Project Settings*. This allows you to better customize any configuration "
"when doing a build."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:103
msgid ""
"In the following example, a different icon is added for the demo build of "
"the game (which was customized in a special export preset, which, in turn, "
"includes only demo levels)."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:108
msgid "After overriding, a new field is added for this specific configuration:"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:113
msgid "Default overrides"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:115
msgid ""
"There are already a lot of settings that come with overrides by default; "
"they can be found in many sections of the project settings."
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:121
msgid "Customizing the build"
msgstr ""

#: ../../docs/getting_started/workflow/export/feature_tags.rst:123
msgid ""
"Feature tags can be used to customize a build process too, by writing a "
"custom **ExportPlugin**. They are also used to specify which shared library "
"is loaded and exported in **GDNative**."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_pc.rst:4
msgid "Exporting for PC"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_pc.rst:6
msgid ""
"The simplest way to distribute a game for PC is to copy the executables "
"(``godot.exe`` on Windows, ``godot`` on the rest), compress the folder and "
"send it to someone else. However, this is often not desired."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_pc.rst:10
msgid ""
"Godot offers a more elegant approach for PC distribution when using the "
"export system. When exporting for PC (Linux, Windows, macOS), the exporter "
"takes all the project files and creates a ``data.pck`` file. This file is "
"bundled with a specially optimized binary that is smaller, faster and does "
"not contain the editor and debugger."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:4
msgid "Exporting for iOS"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:6
msgid ""
"These are the steps to load a Godot project in Xcode. This allows you to "
"build and deploy to an iOS device, build a release for the App Store, and do "
"everything else you can normally do with Xcode."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:11
#: ../../docs/development/compiling/compiling_for_windows.rst:9
#: ../../docs/development/compiling/compiling_for_x11.rst:9
#: ../../docs/development/compiling/compiling_for_osx.rst:9
#: ../../docs/development/compiling/compiling_for_android.rst:20
#: ../../docs/development/compiling/compiling_for_ios.rst:9
#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:27
#: ../../docs/development/compiling/compiling_for_uwp.rst:9
#: ../../docs/development/compiling/compiling_for_web.rst:9
#: ../../docs/development/compiling/compiling_with_mono.rst:9
msgid "Requirements"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:13
msgid ""
"You must export for iOS from a computer running macOS with Xcode installed."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:14
msgid ""
"Download the Godot export templates. Use the Godot menu: Editor > Manage "
"Export Templates"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:17
msgid "Export a Godot project to Xcode"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:19
msgid ""
"In the Godot editor, open the **Export** window from the **Project** menu. "
"When the Export window opens, click **Add..** and select **iOS**."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:22
msgid ""
"The following export options are required. Leaving any blank will cause the "
"exporter to throw an error:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:25
msgid "In the **Application** category * **App Store Team ID**"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:27
msgid "Everything in the **Required Icons** category"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:28
msgid "Everything in the **Landscape Launch Screens** category"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:29
msgid "Everything in the **Portrait Launch Screens** category"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:31
msgid ""
"After you click **Export Project**, there are still two important options "
"left:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:33
msgid ""
"**Path** is an empty folder that will contain the exported Xcode project "
"files."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:34
msgid ""
"**File** will be the name of the Xcode project and several project specific "
"files and directories."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:38
msgid ""
"This tutorial uses **exported_xcode_project_name**, but you will use your "
"project's name. When you see **exported_xcode_project_name** in the "
"following steps, replace it with the name you used instead."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:42
msgid "When the export completes, the output folder should look like this:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:46
msgid ""
"Opening **exported_xcode_project_name.xcodeproj** lets you build and deploy "
"like any other iOS app."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:50
msgid "Active development considerations"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:52
msgid ""
"The above method creates an exported project that you can build for release, "
"but you have to re-export every time you make a change in Godot."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:55
msgid ""
"While developing, you can speed this process up by linking your Godot "
"project files directly into your app."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:58
msgid "In the following example:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:60
msgid ""
"**exported_xcode_project_name** is the name of the exported iOS application "
"(as above)."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:61
msgid "**godot_project_to_export** is the name of the Godot project."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:64
msgid "Steps to link a Godot project folder to Xcode"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:66
msgid "Start from an exported iOS project (follow the steps above)."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:67
msgid "In Finder, drag the Godot project folder into the Xcode file browser."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:71
msgid ""
"3. In the dialog, make sure **Create folder references** is selected. This "
"means you will be able to continue to edit your Godot project in its current "
"location."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:76
msgid "See the **godot_project_to_export** folder in the Xcode file browser."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:77
msgid "Delete **exported_xcode_project_name.pck** from the Xcode project."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:81
msgid ""
"6. Open **exported_xcode_project_name-Info.plist** and add a string property "
"named **godot_path** (this is the real key name) with a value "
"**godot_project_to_export** (this is the name of your project)"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:87
msgid ""
"That's it! You can now edit your project in the Godot editor and build it in "
"Xcode when you want to run it on a device."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:91
#: ../../docs/tutorials/platform/services_for_ios.rst:4
msgid "Services for iOS"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_ios.rst:93
msgid ""
"Special iOS services can be used in Godot. Check out the :ref:"
"`doc_services_for_ios` page."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:4
msgid "Exporting for Universal Windows Platform"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:6
msgid ""
"There's no extra requirement to export an ``.appx`` package that can be "
"installed as a Windows App or submitted to the Windows Store. Exporting UWP "
"packages also works from any platform, not only from Windows."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:10
msgid ""
"However, if you want to install and run the app, you need to sign it with a "
"trusted signature. Currently, Godot does not support signing of packages, so "
"you need to use external tools to do so."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:14
msgid ""
"Also, make sure the Publisher Name you set when exporting the package "
"matches the name used on the certificate."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:18
msgid "Limitations on Xbox One"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:20
msgid ""
"As described in the `UWP documentation <https://docs.microsoft.com/en-us/"
"windows/uwp/xbox-apps/system-resource-allocation>`__:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:25
msgid "Submitted as an \"App\""
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:23
msgid "available memory is 1GB"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:24
msgid "share of 2-4 CPU cores"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:25
msgid "shared access of GPU power (45%)"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:30
msgid ""
"Submitted as a \"Game\" (through `Xbox Live Creators Program <https://www."
"xbox.com/en-US/developers/creators-program>`__)"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:28
msgid "available memory is 5GB"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:29
msgid "4 exclusive CPU cores and 2 shared CPU cores"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:30
msgid "exclusive access to GPU power (100%)"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:32
msgid ""
"Exceeding these memory limitations will cause allocation failures and the "
"application will crash."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:35
msgid "Creating a signing certificate"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:37
msgid ""
"This requires the ``MakeCert.exe`` and ``Pvk2Pfx.exe`` tools, which come "
"with the Windows SDK. If you use Visual Studio, you can open one of its "
"Developer Prompts, since it comes with these tools and they can be located "
"in the path."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:41
msgid ""
"You can get more detailed instructions from `Microsoft's documentation "
"<https://msdn.microsoft.com/en-us/library/windows/desktop/jj835832(v=vs.85)."
"aspx>`__."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:44
msgid "First, run ``MakeCert`` to create a private key::"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:48
msgid ""
"Where ``publisherName`` matches the Publisher Name of your package and "
"``expirationDate`` is in the ``mm/dd/yyyy`` format."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:51
msgid ""
"Next, create a Personal Information Exchange (.pfx) file using ``Pvk2Pfx."
"exe``::"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:55
msgid ""
"If you don't specify a password with ``/po`` argument, the PFX will have the "
"same password as the private key."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:58
msgid ""
"You will also need to trust this certificate in order to be able to install "
"your app. Open the Command Prompt as Administrator and run the following "
"command::"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:64
msgid "Signing the package"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:66
msgid "Finally, use ``SignTool.exe`` from the Windows SDK or Visual Studio::"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:71
msgid "Installing the package"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:73
msgid ""
"As of the Windows 10 Anniversary Update, you are able to install packages "
"simply by double clicking the ``.appx`` file from Windows Explorer."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:76
msgid ""
"It's also possible to install by using the ``Add-AppxPackage`` PowerShell "
"cmdlet."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_uwp.rst:78
msgid ""
"If you want to update your already installed app, you must update the "
"version number on the new package or first uninstall the previous package."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:4
msgid "Exporting for Android"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:6
msgid ""
"Exporting for Android has fewer requirements than compiling Godot for it. "
"The following steps detail what is needed to setup the SDK and the engine."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:10
msgid "Download the Android SDK"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:12
msgid ""
"Download and install the Android SDK from https://developer.android.com/"
"studio/"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:16
msgid "Install OpenJDK or Oracle JDK"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:18
msgid ""
"Download and install  `OpenJDK <https://github.com/ojdkbuild/ojdkbuild>`__ "
"or `Oracle JDK <http://www.oracle.com/technetwork/java/javase/downloads/"
"index.html>`__. Versions below JDK 8 may not work; some users have reported "
"issues with the jarsigner (used to sign the APKs) in JDK 7."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:21
msgid "Create a debug.keystore"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:23
msgid ""
"Android needs a debug keystore file to install to devices and distribute non-"
"release APKs. If you have used the SDK before and have built projects, ant "
"or eclipse probably generated one for you (on Linux and macOS, you can find "
"it in the ``~/.android`` directory)."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:28
msgid ""
"If you can't find it or need to generate one, the keytool command from the "
"JDK can be used for this purpose:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:36
msgid "Make sure you have adb"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:38
msgid ""
"Android Debug Bridge (adb) is the command line tool used to communicate with "
"Android devices. It's installed with the SDK, but you may need to install "
"one (any) of the Android API levels for it to be installed in the SDK "
"directory."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:43
msgid "Setting it up in Godot"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:45
msgid ""
"Enter the Editor Settings screen. This screen contains the editor settings "
"for the user account in the computer (it's independent from the project)."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:51
msgid "Scroll down to the section where the Android settings are located:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:55
msgid "In that screen, the path to 3 files needs to be set:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:57
msgid "The *adb* executable (adb.exe on Windows)"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:58
msgid "The *jarsigner* executable (from JDK 6 or 8)"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:59
msgid "The debug *keystore*"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:61
msgid "Once that is configured, everything is ready to export to Android!"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:64
msgid "Exporting for Google Play Store"
msgstr "Google Play Store로 내보내기"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:66
msgid ""
"Uploading an APK to Google's Play Store requires you to sign using a non-"
"debug keystore file; such file can be generated like this:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:73
msgid ""
"This keystore and key are used to verify your developer identity, remember "
"the password and keep it in a safe place! Use Google's Android Developer "
"guides to learn more about `APK signing <https://developer.android.com/"
"studio/publish/app-signing>`__."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:76
msgid "Now fill in the following forms in your Android Export Presets:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:80
msgid "Release: Enter the path to the keystore file you just generated."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:81
msgid "Release User: Replace with the key alias."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:82
msgid ""
"Release Password: Key password. Note that the keystore password and the key "
"password currently have to be the same."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:84
msgid ""
"**Now your export_presets.cfg file contains sensitive info;** if using a "
"Version Control System, it is a good idea to remove it from public "
"repositories."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:86
msgid ""
"Don't forget to disable the ``Export With Debug`` button while choosing the "
"APK's name."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:4
msgid "Exporting for the Web"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:6
msgid ""
"HTML5 export allows publishing games made in Godot Engine to the browser. "
"This requires support for the recent technologies `WebAssembly <https://"
"webassembly.org/>`__ and `WebGL 2.0 <https://www.khronos.org/webgl/>`__ in "
"the user's browser. **Firefox** and **Chromium** (Chrome, Opera) are the "
"most popular supported browsers, **Safari** and **Edge** do not work yet. On "
"**iOS**, all browsers must be based on WebKit (i.e. Safari), so they will "
"also not work."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:15
msgid "Limitations"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:17
msgid ""
"For security and privacy reasons, many features that work effortlessly on "
"native platforms are more complicated on the web platform. Following is a "
"list of limitations you should be aware of when porting a Godot game to the "
"web."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:22
msgid "Exported ``.html`` file must not be reused"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:24
msgid ""
"On export, several text placeholders are replaced in the **generated HTML "
"file** specifically for the given export options. It must not be reused in "
"further exports."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:29
msgid "Using cookies for data persistence"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:31
msgid ""
"Users must **allow cookies** (specifically IndexedDB) if persistence of the "
"``user://`` file system is desired. When playing a game presented in an "
"``iframe``, **third-party** cookies must also be enabled. Incognito/private "
"browsing mode also prevents persistence."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:36
msgid ""
"The method ``OS.is_userfs_persistent()`` can be used to check if the "
"``user://`` file system is persistent, but can give false positives in some "
"cases."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:41
msgid "Full screen and mouse capture"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:43
msgid ""
"Browsers do not allow arbitrarily **entering full screen** at any time. The "
"same goes for **capturing the cursor**. Instead, these actions have to occur "
"as a response to a JavaScript input event. In Godot, this is most easily "
"done by entering full screen from within an input callback such as "
"``_input`` or ``_unhandled_input``."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:49
msgid "For the same reason, the full screen project setting is ignored."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:52
msgid "HTTPClient"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:54
msgid ""
"The ``HTTPClient`` implementation for the HTML5 platform has several "
"restrictions:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:57
msgid "Accessing or changing the ``StreamPeer`` is not possible"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:58
msgid "Blocking mode is not available"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:59
msgid ""
"Cannot progress more than once per frame, so polling in a loop will freeze"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:60
msgid "No chunked responses"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:61
msgid "Host verification cannot be disabled"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:62
msgid ""
"Subject to `same-origin policy <https://developer.mozilla.org/en-US/docs/Web/"
"Security/Same-origin_policy>`_"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:65
msgid "Unimplemented functionality"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:67
msgid ""
"The following functionality is currently unavailable on the HTML5 platform:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:69
#: ../../docs/tutorials/threads/thread_safe_apis.rst:7
msgid "Threads"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:70
#: ../../docs/tutorials/plugins/gdnative/index.rst:2
msgid "GDNative"
msgstr "GD네이티브"

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:71
msgid "Clipboard synchronisation between engine and operating system"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:72
msgid "Networking other than ``HTTPClient``"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:74
msgid ""
"Check the `list of open HTML5 issues on Github <https://github.com/"
"godotengine/godot/issues?q=is:open+is:issue+label:platform:html5>`_ to see "
"if functionality you're interested in has an issue yet. If not, open one to "
"communicate your interest."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:79
msgid "Starting exported games from the local file system"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:81
msgid ""
"Many browsers, Chromium-based browsers specifically, will not load exported "
"projects when **opened locally** per ``file://`` protocol. To get around "
"this, use a local server."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:85
msgid ""
"Python offers an easy method for this; using ``python -m SimpleHTTPServer`` "
"with Python 2 or ``python -m http.server`` with Python 3 will serve the "
"current working directory on ``http://localhost:8000``."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:90
msgid "Serving the files"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:92
msgid ""
"Exporting for the web generates several files to be served from a web "
"server, including a default HTML page for presentation. A custom HTML file "
"can be used, see :ref:`doc_customizing_html5_shell`."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:96
msgid ""
"The generated ``.html`` file can be used as ``DirectoryIndex`` in Apache "
"servers and can be renamed to e.g. ``index.html`` at any time, its name is "
"never depended on by default."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:100
msgid ""
"The HTML page is designed to fit the game perfectly without cutting off "
"parts of the canvas when the browser window is scaled to the game's "
"dimensions. This way it can be inserted into an ``<iframe>`` with the game's "
"size, as is common on most web game hosting sites."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:105
msgid ""
"The other exported files are served as they are, next to the ``.html`` file, "
"names unchanged. The ``.wasm`` file is a binary WebAssembly module "
"implementing the engine. The ``.pck`` file is the Godot main pack containing "
"your game. The ``.js`` file contains start-up code and is used by the ``."
"html`` file to access the engine. The ``.png`` file contains the boot splash "
"image. It is not used in the default HTML page, but is included for :ref:"
"`custom HTML pages <doc_customizing_html5_shell>`."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:113
msgid ""
"The ``.pck`` file is binary, usually delivered with the MIME-type "
"``application/octet-stream``. The ``.wasm`` file is delivered as "
"``application/wasm``."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:117
msgid ""
"Delivering the files with server-side compression is recommended especially "
"for the ``.pck`` and ``.wasm`` files, which are usually large in size. The "
"WebAssembly module compresses particularly well, down to around a quarter of "
"its original size with gzip compression."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:123
msgid "Export options"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:125
msgid ""
"If a runnable web export template is available, a button appears between the "
"*Stop scene* and *Play edited Scene* buttons in the editor to quickly open "
"the game in the default browser for testing."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:129
msgid ""
"If a path to a **Custom HTML shell** file is given, it will be used instead "
"of the default HTML page. See :ref:`doc_customizing_html5_shell`."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:132
msgid ""
"**Head Include** is appended into the ``<head>`` element of the generated "
"HTML page. This allows to, for example, load webfonts and third-party "
"JavaScript APIs, include CSS, or run JavaScript code."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:136
msgid ""
"Turning on **Export with Debug** when exporting will, in addition to "
"enabling various debug features of the engine, display a debug output below "
"the canvas when using the default HTML page, displaying JavaScript and "
"engine errors. You can also use the browser-integrated developer console, "
"usually opened with the F12 key, which often shows more information, "
"including WebGL errors."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:145
msgid "Calling JavaScript from script"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:147
msgid ""
"In web builds, the ``JavaScript`` singleton is implemented. If offers a "
"single method called ``eval`` that works similarly to the JavaScript "
"function of the same name. It takes a string as an argument and executes it "
"as JavaScript code. This allows interacting with the browser in ways not "
"possible with script languages integrated into Godot."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:158
msgid ""
"The value of the last JavaScript statement is converted to a GDScript value "
"and returned by ``eval()`` under certain circumstances:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:161
msgid "JavaScript ``number`` is returned as GDScript :ref:`class_float`"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:162
msgid "JavaScript ``boolean`` is returned as GDScript :ref:`class_bool`"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:163
msgid "JavaScript ``string`` is returned as GDScript :ref:`class_String`"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:164
msgid ""
"JavaScript ``ArrayBuffer``, ``TypedArray`` and ``DataView`` are returned as "
"GDScript :ref:`class_PoolByteArray`"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:173
msgid "Any other JavaScript value is returned as ``null``."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:175
msgid ""
"HTML5 export templates may be built without support for the singleton. With "
"such templates, and on platforms other than HTML5, calling ``JavaScript."
"eval`` will also return ``null``.  The availability of the singleton can be "
"checked with the ``JavaScript`` :ref:`feature tag <doc_feature_tags>`::"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_for_web.rst:186
msgid ""
"The ``eval`` method also accepts a second, optional Boolean argument, which "
"specifies whether to execute the code in the global execution context, "
"defaulting to ``false`` to prevent polluting the global namespace::"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:4
msgid "Customizing the Web export HTML page"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:6
msgid ""
"Rather than the default HTML page that comes with the export templates, it "
"is also possible to use a custom HTML page. This allows drastic "
"customization of the final web presentation and behavior. The path to the "
"custom HTML page is specified in the export options as ``Html/Custom Html "
"Shell``."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:11
msgid ""
"The default HTML page is available in the Godot Engine repository at `/misc/"
"dist/html/default.html <https://github.com/godotengine/godot/blob/master/"
"misc/dist/html/default.html>`_. Some simple use-cases where customizing the "
"default page is useful include:"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:15
msgid "Loading files from a different directory"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:16
msgid "Loading a ``.zip`` file instead of a ``.pck`` file as main pack"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:17
msgid "Loading engine files from a different directory than the main pack file"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:18
msgid ""
"Loading some extra files before the engine starts, so they are available in "
"the file system later"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:20
msgid ""
"Passing custom \"command line\" arguments, e.g. ``-s`` to start a MainLoop "
"script"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:23
msgid "Placeholder substitution"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:25
msgid ""
"When exporting the game, several placeholders in the HTML page are replaced "
"with values depending on the export:"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:29
msgid "Placeholder"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:29
msgid "substituted by"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:31
msgid "``$GODOT_BASENAME``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:31
msgid ""
"Basename of exported files without suffixes, e.g. ``game`` when exporting "
"``game.html``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:34
msgid "``$GODOT_DEBUG_ENABLED``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:34
msgid "``true`` if debugging, ``false`` otherwise"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:36
msgid "``$GODOT_HEAD_INCLUDE``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:36
msgid ""
"Custom string to include just before the end of the HTML ``<head>`` element"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:40
msgid ""
"The HTML file must evaluate the JavaScript file ``$GODOT_BASENAME.js``. This "
"file defines a global ``Engine`` object used to start the engine, :ref:`see "
"below <doc_javascript_engine_object>` for details."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:44
msgid ""
"The boot splash image is exported as ``$GODOT_BASENAME.png`` and can be used "
"e.g. in ``<img />`` elements."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:47
msgid ""
"``$GODOT_DEBUG_ENABLED`` can be useful to optionally display e.g. an output "
"console or other debug tools."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:50
msgid ""
"``$GODOT_HEAD_INCLUDE`` is replaced with the string specified by the export "
"option ``Html/Head Include``."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:56
msgid "The ``Engine`` object"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:58
msgid ""
"The JavaScript global object ``Engine`` is defined by ``$GODOT_BASENAME.js`` "
"and serves as an interface to the engine start-up process."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:61
msgid "The object itself has only two methods, ``load()`` and ``unload()``."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:64
msgid "``Engine.load(basePath)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:66
msgid "Loads the engine from the passed base path."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:68
msgid "Returns a promise that resolves once the engine is loaded."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:71
msgid "``Engine.unload()``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:73
msgid ""
"Unloads the module to free memory. This is called automatically once the "
"module is instantiated unless explicitly disabled."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:77
msgid "``Engine.isWebGLAvailable(majorVersion = 1)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:79
msgid ""
"Returns ``true`` if the given major version of WebGL is available, ``false`` "
"otherwise. Defaults to ``1`` for WebGL 1.0."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:83
msgid "Starting an ``Engine`` instance"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:85
msgid ""
"The more interesting interface is accessed by instantiating ``Engine`` using "
"the ``new`` operator:"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:92
msgid ""
"This ``Engine`` instance, referred to as ``engine`` with a lower-case ``e`` "
"from here, is a startable instance of the engine, usually a game. To start "
"such an instance, the global ``Engine`` object must be loaded, then the "
"``engine`` instance must be initialized and started."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:98
msgid "``engine.init(basePath)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:100
msgid ""
"Initializes the instance. If the engine wasn't loaded yet, a base path must "
"be passed from which the engine will be loaded."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:103
msgid ""
"Returns a promise that resolves once the engine is loaded and initialized. "
"It can then be started with ``engine.startGame()``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:107
msgid "``engine.preloadFile(file, path)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:109
msgid ""
"This loads a file so it is available in the file system once the instance is "
"started. This must be called **before** starting the instance."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:112
msgid ""
"If ``file`` is a string, the file will be loaded from that URL. If ``file`` "
"is an ``ArrayBuffer`` or a view on one, the buffer will used as the content "
"of the file."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:116
msgid ""
"If ``path`` is a string, it specifies the path by which the file will be "
"available. This is mandatory if ``file`` is not a string. Otherwise, the "
"path is derived from the URL of the loaded file."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:120
msgid "Returns a promise that resolves once the file is preloaded."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:123
msgid "``engine.start(arg1, arg2, …)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:125
msgid ""
"Starts the instance of the engine, handing the passed strings as arguments "
"to the ``main()`` function. This allows great control over how the engine is "
"used, but usually the other methods whose names start with ``engine.start`` "
"are simpler to use."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:130
msgid "Returns a promise that resolves once the engine started."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:133
msgid "``engine.startGame(mainPack)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:135
msgid ""
"Starts the game with the main pack loaded from the passed URL string and "
"starts the engine with it."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:138
msgid ""
"If the engine isn't loaded yet, the base path of the passed URL will be used "
"to load the engine."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:141
msgid "Returns a promise that resolves once the game started."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:144
msgid "Configuring start-up behaviour"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:146
msgid ""
"Beside starting the engine, other methods of the engine instance allow "
"configuring the behavior:"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:150
msgid "``engine.setUnloadAfterInit(enabled)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:152
msgid ""
"Sets whether the Engine will be unloaded automatically after the instance is "
"initialized. This frees browser memory by unloading files that are no longer "
"needed once the instance is initialized. However, if more instances of the "
"engine will be started, the Engine will have to be loaded again."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:157
msgid "Defaults to ``true``."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:160
msgid "``engine.setCanvas(canvasElem)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:162
msgid ""
"By default, the first canvas element on the page is used for rendering. By "
"calling this method, another canvas can be specified."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:166
msgid "``engine.setCanvasResizedOnStart(enabled)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:168
msgid ""
"Sets whether the canvas will be resized to the width and height specified in "
"the project settings on start. Defaults to ``true``."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:172
msgid "``engine.setLocale(locale)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:174
msgid ""
"By default, the engine will try to guess the locale to use from the "
"JavaScript environment. It is usually preferable to use a server-side user-"
"specified locale, or at least use the locale requested in the HTTP ``Accept-"
"Language`` header. This method allows specifying such a custom locale string."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:181
msgid "``engine.setExecutableName(execName)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:183
msgid ""
"By default, the base name of the loaded engine files is used for the "
"executable name. This method allows specifying another name."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:187
msgid "Customizing the presentation"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:189
msgid "The following methods are used to implement the presentation:"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:192
msgid "``engine.setProgressFunc(func)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:194
msgid ""
"This method is used to display download progress. The passed callback "
"function is called with two number arguments, the first argument specifies "
"bytes loaded so far, the second argument specifies the total number of bytes "
"to load."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:206
msgid "If the total is 0, it couldn't be calculated. Possible reasons include:"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:209
msgid "Files are delivered with server-side chunked compression"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:210
msgid "Files are delivered with server-side compression on Chromium"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:211
msgid ""
"Not all file downloads have started yet (usually on servers without multi-"
"threading)"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:214
msgid "``engine.setStdoutFunc(func)``, ``engine.setStderrFunc(func)``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:216
msgid ""
"These methods allow implementing custom behavior for the ``stdout`` and "
"``stderr`` streams. The functions passed in will be called with one string "
"argument specifying the string to print."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:227
msgid ""
"These methods should usually only be used in debug pages. The ``"
"$GODOT_DEBUG_ENABLED`` placeholder can be used to check for this."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:230
msgid ""
"By default, ``console.log()`` and ``console.warn()`` are used respectively."
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:233
msgid "Accessing the Emscripten ``Module``"
msgstr ""

#: ../../docs/getting_started/workflow/export/customizing_html5_shell.rst:235
msgid ""
"If you know what you're doing, you can access the runtime environment "
"(Emscripten's ``Module``) as ``engine.rtenv``. Check the official Emscripten "
"documentation for information on how to use it: https://kripken.github.io/"
"emscripten-site/docs/api_reference/module.html"
msgstr ""

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:4
msgid "One-click deploy"
msgstr ""

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:7
msgid "Sounds good, what is it?"
msgstr ""

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:9
msgid ""
"This feature will pop up automatically once a platform is properly "
"configured and a supported device is connected to the computer. Since things "
"can go wrong at many levels (platform may not be configured correctly, SDK "
"may be incorrectly installed, device may be improperly configured, kitty ate "
"the USB cable, etc.), it's good to let the user know that it exists."
msgstr ""

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:16
msgid ""
"Some platforms (at the time of this writing, only Android and Blackberry 10) "
"can detect when a USB device is connected to the computer, and offer the "
"user to automatically export, install and run the project (in debug mode) on "
"the device. This feature is called, in industry buzz-words, \"One Click "
"Deploy\" (though, it's technically two clicks...)."
msgstr ""

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:23
msgid "Steps for one-click deploy"
msgstr ""

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:25
msgid "Configure target platform."
msgstr ""

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:26
msgid ""
"Configure device (make sure it's in developer mode, likes the computer, usb "
"cable is plugged, usb is recognized, etc.)."
msgstr ""

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:28
msgid "Connect the device.."
msgstr ""

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:29
msgid "And voilà!"
msgstr ""

#: ../../docs/getting_started/workflow/export/one-click_deploy.rst:33
msgid "Click once.. and deploy!"
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:4
msgid "Changing application icon for Windows"
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:6
msgid ""
"By default, the exported project's icon will be the Godot icon. You will "
"most likely want to change that for your project. There are two types of "
"icons that can be changed on Windows: the file icon and the taskbar icon."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:11
msgid "Changing the taskbar icon"
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:13
msgid ""
"The taskbar icon is the icon that shows up on the taskbar when your project "
"is running."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:18
msgid ""
"To change the taskbar icon, go to **Project → Project Settings → Application "
"→ Config → Icon**. Click on the folder icon and select your desired icon."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:22
msgid "This is also the icon that gets displayed in the Godot project list."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:27
msgid "Changing the file icon"
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:29
msgid ""
"The file icon is the icon of the executable that you click on to start the "
"project."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:34
msgid ""
"Before selecting it in the export options, you will need to install an extra "
"tool called **rcedit**. You can download it `here <https://github.com/"
"electron/rcedit/releases>`_."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:38
msgid ""
"After downloading, you need to tell Godot the path to the rcedit executable "
"on your computer. Go to **Editor → Editor Settings → Export → Windows**. "
"Click on the folder icon for the **rcedit** entry. Navigate to and select "
"the rcedit executable."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:44
msgid ""
"Linux and macOS users will also need to install `WINE <https://www.winehq."
"org/>`_ to use rcedit."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:49
msgid ""
"You should now have everything in place to change the file icon. To do that, "
"you will need to specify the icon when exporting. Go to **Project → "
"Export**. Assuming you have already created a Windows Desktop preset, select "
"your icon in ICO format in the **Application → Icon** field."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:55
msgid ""
"You can use software such as GIMP to export an ICO image. For more "
"information, please refer to `this tutorial <http://skyboygames.com/easily-"
"create-a-windows-app-icon-with-gimp/>`_."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:62
msgid "Testing the result"
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:64
msgid ""
"You can now export the project. If it worked correctly, you should see this:"
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:69
msgid "ICO file requirements"
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:71
msgid ""
"Regardless of which program you use to create your `ICO file <https://en."
"wikipedia.org/wiki/ICO_(file_format)>`_, there are some requirements to "
"ensure the icon (and your executable) works on Windows."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:75
msgid ""
"This is a bit tricky, as can be seen in the following Stack Overflow "
"threads: `one <https://stackoverflow.com/q/3236115/>`_, `two <https://"
"stackoverflow.com/q/40749785/>`_."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:79
msgid ""
"Your ICO file should at least contain icons in the following resolutions: "
"16×16, 48×48 and 256×256."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:82
msgid ""
"If you want to fully support high-DPI screens, this is the full list of "
"supported icon sizes on Windows 10: 16, 20, 24, 28, 30, 31, 32, 40, 42, 47, "
"48, 56, 60, 63, 84 and one larger than 255 pixels (such as 256, 512 or 1024)."
msgstr ""

#: ../../docs/getting_started/workflow/export/changing_application_icon_for_windows.rst:87
msgid ""
"It is also possible to convert a PNG image to an hiDPI-friendly ICO file "
"using this `ImageMagick <https://www.imagemagick.org/>`_ command:"
msgstr ""

#: ../../docs/tutorials/2d/index.rst:2
msgid "2D"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:4
msgid "Canvas layers"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:7
msgid "Viewport and Canvas items"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:9
msgid ""
"Regular 2D nodes, such as :ref:`Node2D <class_Node2D>` or :ref:`Control "
"<class_Control>` both inherit from :ref:`CanvasItem <class_CanvasItem>`, "
"which is the base for all 2D nodes. CanvasItems can be arranged in trees and "
"they will inherit their transform. This means that when moving the parent, "
"the children will be moved too."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:16
msgid ""
"These nodes are placed as direct or indirect children of a :ref:`Viewport "
"<class_Viewport>`, and will be displayed through it."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:19
msgid ""
"Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, which allows to transform all "
"the CanvasItem hierarchy by a custom :ref:`Transform2D <class_Transform2D>` "
"transform. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:25
msgid ""
"Changing the canvas transform is useful because it is a lot more efficient "
"than moving the root canvas item (and hence the whole scene). Canvas "
"transform is a simple matrix that offsets the whole 2D drawing, so it's the "
"most efficient way to do scrolling."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:31
msgid "Not enough..."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:33
msgid ""
"But this is not enough. There are often situations where the game or "
"application may not want *everything* transformed by the canvas transform. "
"Examples of this are:"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:37
msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:39
msgid ""
"**HUD**: Heads-up display, or user interface. If the world moves, the life "
"counter, score, etc. must stay static."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:41
msgid ""
"**Transitions**: Effects used for transitions (fades, blends) may also want "
"it to remain at a fixed location."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:44
msgid "How can these problems be solved in a single scene tree?"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:47
msgid "CanvasLayers"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:49
msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in-place while the world moves."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:58
msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:62
msgid "Here's a diagram of how it looks:"
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:66
msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""

#: ../../docs/tutorials/2d/canvas_layers.rst:72
msgid ""
"Even though there shouldn't be any performance limitation, it is not advised "
"to use excessive amount of layers to arrange drawing order of nodes. The "
"most optimal way will always be arranging them by tree order. 2d nodes also "
"have a property for controlling their drawing order (see :ref:`Node2D."
"z_index <class_Node2D_property_z_index>`)."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:4
msgid "Viewport and canvas transforms"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:9
msgid ""
"This is an overview of the 2D transforms going on for nodes from the moment "
"they draw their content locally to the time they are drawn onto the screen. "
"This overview discusses very low level details of the engine."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:14
msgid "Canvas transform"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:16
msgid ""
"As mentioned in the previous tutorial, :ref:`doc_canvas_layers`, every "
"CanvasItem node (remember that Node2D and Control based nodes use CanvasItem "
"as their common root) will reside in a *Canvas Layer*. Every canvas layer "
"has a transform (translation, rotation, scale, etc.) that can be accessed as "
"a :ref:`Transform2D <class_Transform2D>`."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:22
msgid ""
"Also covered in the previous tutorial, nodes are drawn by default in Layer "
"0, in the built-in canvas. To put nodes in a different layer, a :ref:"
"`CanvasLayer <class_CanvasLayer>` node can be used."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:27
msgid "Global canvas transform"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:29
msgid ""
"Viewports also have a Global Canvas transform (also a :ref:`Transform2D "
"<class_Transform2D>`). This is the master transform and affects all "
"individual *Canvas Layer* transforms. Generally, this transform is not of "
"much use, but is used in the CanvasItem Editor in Godot's editor."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:36
msgid "Stretch transform"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:38
msgid ""
"Finally, viewports have a *Stretch Transform*, which is used when resizing "
"or stretching the screen. This transform is used internally (as described "
"in :ref:`doc_multiple_resolutions`), but can also be manually set on each "
"viewport."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:43
msgid ""
"Input events received in the :ref:`MainLoop._input_event() "
"<class_MainLoop_method__input_event>` callback are multiplied by this "
"transform but lack the ones above. To convert InputEvent coordinates to "
"local CanvasItem coordinates, the :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` function was added for "
"convenience."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:50
msgid "Transform order"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:52
msgid ""
"For a coordinate in CanvasItem local properties to become an actual screen "
"coordinate, the following chain of transforms must be applied:"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:58
msgid "Transform functions"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:60
msgid "Obtaining each transform can be achieved with the following functions:"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:63
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:21
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:366
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:92
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:158
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:218
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:242
#: ../../docs/tutorials/misc/binary_serialization_api.rst:23
#: ../../docs/tutorials/misc/binary_serialization_api.rst:92
#: ../../docs/tutorials/misc/binary_serialization_api.rst:101
#: ../../docs/tutorials/misc/binary_serialization_api.rst:110
#: ../../docs/tutorials/misc/binary_serialization_api.rst:119
#: ../../docs/tutorials/misc/binary_serialization_api.rst:132
#: ../../docs/tutorials/misc/binary_serialization_api.rst:143
#: ../../docs/tutorials/misc/binary_serialization_api.rst:158
#: ../../docs/tutorials/misc/binary_serialization_api.rst:171
#: ../../docs/tutorials/misc/binary_serialization_api.rst:190
#: ../../docs/tutorials/misc/binary_serialization_api.rst:205
#: ../../docs/tutorials/misc/binary_serialization_api.rst:220
#: ../../docs/tutorials/misc/binary_serialization_api.rst:239
#: ../../docs/tutorials/misc/binary_serialization_api.rst:264
#: ../../docs/tutorials/misc/binary_serialization_api.rst:295
#: ../../docs/tutorials/misc/binary_serialization_api.rst:310
#: ../../docs/tutorials/misc/binary_serialization_api.rst:319
#: ../../docs/tutorials/misc/binary_serialization_api.rst:330
#: ../../docs/tutorials/misc/binary_serialization_api.rst:340
#: ../../docs/tutorials/misc/binary_serialization_api.rst:359
#: ../../docs/tutorials/misc/binary_serialization_api.rst:371
#: ../../docs/tutorials/misc/binary_serialization_api.rst:383
#: ../../docs/tutorials/misc/binary_serialization_api.rst:396
#: ../../docs/tutorials/misc/binary_serialization_api.rst:407
#: ../../docs/tutorials/misc/binary_serialization_api.rst:418
#: ../../docs/tutorials/misc/binary_serialization_api.rst:426
#: ../../docs/tutorials/misc/binary_serialization_api.rst:439
#: ../../docs/tutorials/misc/binary_serialization_api.rst:452
#: ../../docs/tutorials/misc/binary_serialization_api.rst:467
msgid "Type"
msgstr "타입"

#: ../../docs/tutorials/2d/2d_transforms.rst:63
#: ../../docs/tutorials/math/matrices_and_transforms.rst:342
#: ../../docs/tutorials/math/matrices_and_transforms.rst:703
msgid "Transform"
msgstr "변형"

#: ../../docs/tutorials/2d/2d_transforms.rst:65
msgid "CanvasItem"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:65
msgid ""
":ref:`CanvasItem.get_global_transform() "
"<class_CanvasItem_method_get_global_transform>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:67
msgid "CanvasLayer"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:67
msgid ""
":ref:`CanvasItem.get_canvas_transform() "
"<class_CanvasItem_method_get_canvas_transform>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:69
msgid "CanvasLayer+GlobalCanvas+Stretch"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:69
msgid ""
":ref:`CanvasItem.get_viewport_transform() "
"<class_CanvasItem_method_get_viewport_transform>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:72
msgid ""
"Finally, then, to convert a CanvasItem local coordinates to screen "
"coordinates, just multiply in the following order:"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:84
msgid ""
"Keep in mind, however, that it is generally not desired to work with screen "
"coordinates. The recommended approach is to simply work in Canvas "
"coordinates (``CanvasItem.get_global_transform()``), to allow automatic "
"screen resolution resizing to work properly."
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:90
msgid "Feeding custom input events"
msgstr ""

#: ../../docs/tutorials/2d/2d_transforms.rst:92
msgid ""
"It is often desired to feed custom input events to the scene tree. With the "
"above knowledge, to correctly do this, it must be done the following way:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:4
msgid "Using tilemaps"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:9
msgid ""
"Tilemaps are a simple and quick way to make 2D game levels. Basically, you "
"start with a bunch of reference tiles (or pieces) that can be put on a grid, "
"as many times each as desired - think of it like a map editor:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:15
msgid ""
"Collisions can also be added to the tiles, allowing for both 2D side "
"scrolling and top down games."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:19
msgid "Making a tileset"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:21
msgid ""
"To begin, a tileset needs to be made. Here are some tiles for it. They are "
"all in the same image for optimization reasons. There are so-called *texture "
"packers* that will generate these spritesheets out of your separate texture "
"files. Having them as separate images also works."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:29
msgid ""
"Create a new project and move the above PNG image into the directory. Next, "
"go into the image's import settings and turn off ``Filter``, keeping it on "
"will cause issues later. ``Mipmaps`` should already be disabled; if not, "
"disable this too."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:33
msgid ""
"We will be creating a :ref:`TileSet <class_TileSet>` resource. While this "
"resource exports properties, it's pretty difficult to get complex data into "
"it and maintain it. Here is what it would look like to manually edit the "
"resource:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:40
msgid ""
"There are enough properties to get by. With some effort, editing this way "
"can work. But the easiest way to edit and maintain a tileset is exporting it "
"from a specially-crafted scene!"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:45
msgid "TileSet scene"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:47
msgid ""
"Create a new scene with a regular Node or Node2D as root. For each tile you "
"want to define, add a sprite node as a child. Since tiles here are 50x50, "
"you should turn on the grid (``View -> Show Grid`` or ``G`` key) and enable "
"snap (``Use Snap`` icon or ``S`` key). Moving tiles with the mouse might "
"still be a bit inaccurate, so use your arrow keys as well."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:53
msgid ""
"If more than one tile is present in the source image, make sure to use the "
"region property of the sprite to adjust which part of the texture is being "
"used."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:57
msgid ""
"Finally, make sure to name your sprite node correctly. This will ensure "
"that, in subsequent edits to the tileset (for example, if you've added "
"collision, changed the region, etc), the tile will still be **identified "
"correctly and updated**. This name should be unique."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:62
msgid ""
"Sounds like quite a few requirements, so here's a screenshot that shows "
"where everything of relevance is:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:67
msgid ""
"Continue adding all the tiles, adjusting the offsets if needed (that is, if "
"you have multiple tiles in a single source image). Again, *remember that "
"their names must be unique*."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:74
msgid "Collision"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:76
msgid ""
"To add collision to a tile, create a StaticBody2D child for each sprite. "
"This is a static collision node. Then create a CollisionShape2D or "
"CollisionPolygon as a child of the StaticBody2D. The CollisionPolygon is "
"recommended because it is easier to edit."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:83
msgid ""
"Finally, edit the polygon; this will give the tile a collision and fix the "
"warning icon next to the CollisionPolygon node. **Remember to use snap!** "
"Using snap will make sure collision polygons are aligned properly, allowing "
"a character to walk seamlessly from tile to tile. Also **do not scale or "
"move** the collision and/or collision polygon nodes. Leave them at offset "
"0,0, with scale 1,1 and rotation 0 with respect to the parent sprite."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:92
msgid ""
"Keep adding collisions to the tiles until we are done. Note that BG is just "
"a background, so it should not have a collision."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:97
msgid ""
"OK! We're done! Remember to save this scene for future edit. Name it "
"\"tileset_edit.scn\" or something like that."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:101
msgid "Exporting a TileSet"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:103
msgid ""
"With the scene created and opened in the editor, the next step will be to "
"create a tileset. Use Scene > Convert To > Tile Set from the Scene Menu:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:108
msgid ""
"Then choose a filename, like \"mytiles.tres\". Make sure the \"Merge With "
"Existing\" option is toggled on. This way, every time the tileset resource "
"file is overwritten, existing tiles are merged and updated (they are "
"referenced by their unique name, so again, **name your tiles properly**)."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:117
msgid "Using the TileSet in a TileMap"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:119
msgid ""
"Create a new scene, using any node or node2d as root, and then create a :ref:"
"`TileMap <class_TileMap>` as a child."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:125
msgid ""
"Go to the TileSet property of this node and assign the one created in "
"previous steps:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:130
msgid ""
"Also set the cell size to '50', since that is the size used by the tiles. "
"Quadrant size is a tuning value, which means that the engine will draw and "
"cull the tilemap in blocks of 16x16 tiles. This value is usually fine and "
"does not need to be changed, but can be used to fine tune performance in "
"specific cases (if you know what you are doing)."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:137
msgid "Painting your world"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:139
msgid ""
"With all set, make sure the TileMap node is selected. A red grid will appear "
"on the screen, allowing you to paint on it with the selected tile on the "
"left palette."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:145
msgid ""
"To avoid accidentally moving and selecting the tilemap node (something "
"common, given it's a huge node), it is recommended that you lock it, using "
"the lock button:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:151
msgid ""
"If you accidentally place a tile somewhere you don't want it to be, you can "
"delete it with ``RMB`` (the right mouse button) while in the tilemap editor."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:154
msgid ""
"You can also flip and rotate sprites in the TileMap editor (note: flipping "
"the sprite in the TileSet will have no effect). Icons at the top right of "
"the editor allow flipping and rotating of the currently selected sprite - "
"you can also use the A and S keys to flip the sprite horizontally and "
"vertically. With a brick pattern like this tutorial uses, flipping the "
"sprites would create unpleasant discontinuities unless you're flipping an "
"entire region of bricks. But for some kinds of tiles, flipping can be a "
"convenient and space-saving feature."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:164
msgid "Offset and scaling artifacts"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:166
msgid ""
"When using a single texture for all the tiles, scaling the tileset (or even "
"moving to a non pixel-aligned location) will most likely result in filtering "
"artifacts like so:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:172
msgid ""
"This is unavoidable, as it is the way the hardware bilinear filter works. To "
"avoid this situation, there are a few workarounds. Try the one that looks "
"better for you:"
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:177
msgid ""
"Disable filtering and mipmaps for either the tileset texture or all tile "
"textures if using separate images (see the :ref:`doc_import_images` asset "
"pipeline tutorial)."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:178
msgid ""
"Enable pixel snap (Set ``Project > Project Settings > Rendering > Quality > "
"2d > Use Pixel Snap`` to true; you can also search for ``Pixel Snap``)."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:180
msgid ""
"Viewport Scaling can often help with shrinking the map (see the :ref:"
"`doc_viewports` tutorial). Simply adding a camera, setting it to ``Current`` "
"and playing around with its ``Zoom`` may be a good starting point."
msgstr ""

#: ../../docs/tutorials/2d/using_tilemaps.rst:182
msgid ""
"You can use a single, separate image for each tile. This will remove all "
"artifacts, but can be more cumbersome to implement and is less optimized."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:4
msgid "Particle systems (2D)"
msgstr "파티클 시스템(2D)"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:9
msgid ""
"A simple (but flexible enough for most uses) particle system is provided. "
"Particle systems are used to simulate complex physical effects, such as "
"sparks, fire, magic particles, smoke, mist, etc."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:13
msgid ""
"The idea is that a \"particle\" is emitted at a fixed interval and with a "
"fixed lifetime. During its lifetime, every particle will have the same base "
"behavior. What makes each particle different from the rest and provides a "
"more organic look is the \"randomness\" associated with each parameter. In "
"essence, creating a particle system means setting base physics parameters "
"and then adding randomness to them."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:21
msgid "Particles2D"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:23
msgid ""
"Particle systems are added to the scene via the :ref:`Particles2D "
"<class_Particles2D>` node. However, after creating that node you will notice "
"that only a white dot was created, and that there is a warning icon next to "
"your Particles2D node in the inspector. This is because the node needs a "
"ParticlesMaterial to function."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:30
msgid "ParticlesMaterial"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:32
msgid ""
"To add a process material to your particles node, go to ``Process Material`` "
"in your inspector panel. Click on the box next to ``Material``, and from the "
"dropdown menu select ``New ParticlesMaterial``."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:38
msgid "Your Particles2D node should now be emitting white points downward."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:44
msgid "Texture"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:46
msgid ""
"A particle system uses a single texture (in the future this might be "
"extended to animated textures via spritesheet). The texture is set via the "
"relevant texture property:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:53
msgid "Time parameters"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:56
msgid "Lifetime"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:58
msgid ""
"The time in seconds that every particle will stay alive. When lifetime ends, "
"a new particle is created to replace it."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:61
msgid "Lifetime: 0.5"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:65
msgid "Lifetime: 4.0"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:70
msgid "One Shot"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:72
msgid ""
"When enabled, a Particles2D node will emit all of its particles once and "
"then never again."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:76
msgid "Preprocess"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:78
msgid ""
"Particle systems begin with zero particles emitted, then start emitting. "
"This can be an inconvenience when loading a scene and systems like a torch, "
"mist, etc. begin emitting the moment you enter. Preprocess is used to let "
"the system process a given number of seconds before it is actually drawn the "
"first time."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:85
msgid "Speed Scale"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:87
msgid ""
"The speed scale has a default value of ``1`` and is used to adjust the speed "
"of a particle system. Lowering the value will make the particles slower "
"while increasing the value will make the particles much faster."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:92
msgid "Explosiveness"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:94
msgid ""
"If lifetime is ``1`` and there are 10 particles, it means a particle will be "
"emitted every 0.1 seconds. The explosiveness parameter changes this, and "
"forces particles to be emitted all together. Ranges are:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:98
msgid "0: Emit particles at regular intervals (default value)."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:99
msgid "1: Emit all particles simultaneously."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:101
msgid ""
"Values in the middle are also allowed. This feature is useful for creating "
"explosions or sudden bursts of particles:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:107
msgid "Randomness"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:109
msgid ""
"All physics parameters can be randomized. Random values range from ``0`` to "
"``1``. The formula to randomize a parameter is:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:117
msgid "Fixed FPS"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:119
msgid ""
"This setting can be used to set the particle system to render at a fixed "
"FPS. For instance, changing the value to ``2`` will make the particles "
"render at 2 frames per second. Note this does not slow down the particle "
"system itself."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:124
msgid "Fract Delta"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:126
msgid "This can be used to turn Fract Delta on or off."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:129
msgid "Drawing parameters"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:132
msgid "Visibility Rect"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:135
msgid ""
"The visibility rectangle controls the visibility of the particles on screen. "
"If this rectangle is outside of the viewport, the engine will not render the "
"particles on screen."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:137
msgid ""
"The rectangle's ``W`` and ``H`` properties respectively control its Width "
"and its Height. The ``X`` and ``Y`` properties control the position of the "
"upper-left corner of the rectangle, relative to the particle emitter."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:141
msgid ""
"You can have Godot generate a Visibility Rect automatically using the "
"toolbar above the 2d view. To do so, select the Particles2D node and Click "
"``Particles > Generate Visibility Rect``. Godot will simulate the "
"Particles2D node emitting particles for a few seconds and set the rectangle "
"to fit the surface the particles take."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:143
msgid ""
"You can control the emit duration with the ``Generation Time (sec)`` option. "
"The maximum value is 25 seconds. If you need more time for your particles to "
"move around, you can temporarily change the ``preprocess`` duration on the "
"Particles2D node."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:146
msgid "Local Coords"
msgstr "로컬 좌표"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:148
msgid ""
"By default this option is on, and it means that the space that particles are "
"emitted to is relative to the node. If the node is moved, all particles are "
"moved with it:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:154
msgid ""
"If disabled, particles will emit to global space, meaning that if the node "
"is moved, already emitted particles are not affected:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:160
msgid "Draw Order"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:162
msgid ""
"This controls the order in which individual particles are drawn. ``Index`` "
"means particles are drawn according to their emission order (default). "
"``Lifetime`` means they are drawn in order of remaining lifetime."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:167
msgid "ParticlesMaterial settings"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:169
msgid "Particles2D > Process Material > Material > drop-down menu > Edit:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:188
msgid "Spread"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:190
msgid ""
"This parameter is the angle in degrees which will be randomly added in "
"either direction to the base ``Direction``. A spread of ``180`` will emit in "
"all directions (+/- 180)."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:197
msgid "Gravity"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:199
msgid "The gravity applied to every particle."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:204
msgid "Initial Velocity"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:206
msgid ""
"Linear velocity is the speed at which particles will be emitted (in pixels/"
"sec). Speed might later be modified by gravity or other accelerations (as "
"described further below)."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:213
msgid "Angular Velocity"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:215
msgid "Angular velocity is the initial angular velocity applied to particles."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:218
msgid "Spin Velocity"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:220
msgid ""
"Spin velocity is the speed at which particles turn around their center (in "
"degrees/sec)."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:226
msgid "Orbit Velocity"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:228
msgid "Orbit velocity is used to make particles turn around their center."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:233
msgid "Linear Acceleration"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:235
msgid "The linear acceleration applied to each particle."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:238
msgid "Radial Acceleration"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:240
msgid ""
"If this acceleration is positive, particles are accelerated away from the "
"center. If negative, they are absorbed towards it."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:246
msgid "Tangential Acceleration"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:248
msgid ""
"This acceleration will use the tangent vector to the center. Combining with "
"radial acceleration can do nice effects."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:254
msgid "Damping"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:256
msgid ""
"Damping applies friction to the particles, forcing them to stop. It is "
"especially useful for sparks or explosions, which usually begin with a high "
"linear velocity and then stop as they fade."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:263
msgid "Angle"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:265
msgid ""
"Determines the initial angle of the particle (in degress). This parameter is "
"mostly useful randomized."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:273
msgid "Determines the initial scale of the particles."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:278
msgid "Color"
msgstr "색깔"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:280
msgid "Used to change the color of the particles being emitted."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:283
msgid "Hue variation"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:285
msgid ""
"The ``Variation`` value sets the initial hue variation applied to each "
"particle. The ``Variation Random`` value controls the hue variation "
"randomness ratio."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:4
msgid "2D movement overview"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:9
msgid ""
"Every beginner has been there: \"How do I move my character?\" Depending on "
"the style of game you're making, you may have special requirements, but in "
"general the movement in most 2D games is based on a small number of designs."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:13
msgid ""
"We'll use :ref:`KinematicBody2D <class_KinematicBody2D>` for these examples, "
"but the principles will apply to other node types (Area2D, RigidBody2D) as "
"well."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:17
#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:22
#: ../../docs/tutorials/animation/2d_skeletons.rst:25
#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:41
msgid "Setup"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:19
msgid ""
"Each example below uses the same scene setup. Start with a "
"``KinematicBody2D`` with two children: ``Sprite`` and ``CollisionShape2D``. "
"You can use the Godot icon (\"icon.png\") for the Sprite's texture or use "
"any other 2D image you have."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:23
msgid ""
"Open ``Project -> Project Settings`` and select the \"Input Map\" tab. Add "
"the following input actions (see :ref:`InputEvent <doc_inputevent>` for "
"details):"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:29
msgid "8-way movement"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:31
msgid ""
"In this scenario, you want the user to press the four directional keys (up/"
"left/down/right or W/A/S/D) and move in the selected direction. The name \"8-"
"way movement\" comes from the fact that the player can move diagonally by "
"pressing two keys at the same time."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:37
msgid "Add a script to the kinematic body and add the following code:"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:104
msgid ""
"In the ``get_input()`` function we check for the four key events and sum "
"them up to get the velocity vector. This has the benefit of making two "
"opposite keys cancel each other out, but will also result in diagonal "
"movement being faster due to the two directions being added together."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:109
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, and multiply by the desired speed."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:112
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:116
msgid "Rotation + movement"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:118
msgid ""
"This type of movement is sometimes called \"Asteroids-style\" because it "
"resembles how that classic arcade game worked. Pressing left/right rotates "
"the character, while up/down moves it forward or backward in whatever "
"direction it's facing."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:196
msgid ""
"Here we've added two new variables to track our rotation direction and "
"speed. Again, pressing both keys at once will cancel out and result in no "
"rotation. The rotation is applied directly to the body's ``rotation`` "
"property."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:200
msgid ""
"To set the velocity, we use the ``Vector2.rotated()`` method, so that it "
"points in the same direction as the body. ``rotated()`` is a useful vector "
"function that you can use in many circumstances where you would otherwise "
"need to apply trigonometric functions."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:206
msgid "Rotation + movement (mouse)"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:208
msgid ""
"This style of movement is a variation of the previous one. This time, the "
"direction is set by the mouse position instead of the keyboard. The "
"character will always \"look at\" the mouse pointer. The forward/back inputs "
"remain the same, however."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:268
msgid ""
"Here we're using the :ref:`Node2D <class_Node2D>` ``look_at()`` method to "
"point the player towards a given position. Without this function, you could "
"get the same effect by setting the angle like this:"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:283
msgid "Click-and-move"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:285
msgid ""
"This last example uses only the mouse to control the character. Clicking on "
"the screen will cause the player to move to the target location."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:342
msgid ""
"Note the ``length()`` check we make prior to movement. Without this test, "
"the body would \"jitter\" upon reaching the target position, as it moves "
"slightly past the position and tries to move back, only to move too far and "
"repeat."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:347
msgid ""
"Uncommenting the ``rotation`` line will also turn the body to point in its "
"direction of motion if you prefer."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:350
msgid ""
"This technique can also be used as the basis of a \"following\" character. "
"The ``target`` position can be that of any object you want to move to."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:356
msgid ""
"You may find these code samples useful as starting points for your own "
"projects. Feel free to use them and experiment with them to see what you can "
"make."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:359
msgid ""
"You can download this sample project here: :download:`2D_movement_demo.zip "
"<files/2D_movement_demo.zip>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:4
msgid "2D lights and shadows"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:9
msgid ""
"This tutorial explains how the 2D lighting works in the `lights and shadows "
"<https://github.com/godotengine/godot-demo-projects/tree/master/2d/"
"lights_and_shadows>`_ demo project. It begins with a brief description of "
"the resources used in the final demo and then describes how to make a scene "
"like the demo step by step."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:16
msgid ""
"All the resources for this tutorial can be found in the `official demo "
"repository <https://github.com/godotengine/godot-demo-projects>`_ on github. "
"I suggest you download it before starting. Alternatively, it can be "
"downloaded from the Project Manager. Launch Godot and in the top bar select "
"\"Templates\" and search for \"2D Lights and Shadows Demo\"."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:24
msgid ""
"For this demo we use four textures: two for the lights, one for the shadow "
"casters, and one for the background. I've included links to them all here if "
"you want to download them separately from the demo."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:28
msgid ""
"The first is the background image (`bg.png <https://raw.githubusercontent."
"com/godotengine/godot-demo-projects/master/2d/lights_and_shadows/bg.png>`_) "
"used in the demo. You do not necessarily need a background, but we use one "
"for the demo."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:31
msgid ""
"The second is a plain black image (`caster.png <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/caster.png>`_) to use as our shadow caster object. For a "
"top down game this could be a wall or any other object that casts a shadow."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:35
msgid ""
"Next is the light itself (`light.png <https://raw.githubusercontent.com/"
"godotengine/godot-demo-projects/master/2d/lights_and_shadows/light.png>`_). "
"If you click the link you will notice how large it is. The image you use for "
"a light should cover the area you want your light to cover. This image is "
"1024x1024 pixels, so you should use it to cover 1024x1024 pixels in your "
"game."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:40
msgid ""
"Lastly, we have the spotlight image (`spot.png <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/spot.png>`_). The demo uses a blob to show where the "
"light is and the larger light image to show the effect of the light upon the "
"rest of the scene."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:52
msgid "The demo uses four different nodes:"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:49
msgid ":ref:`CanvasModulate <class_CanvasModulate>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:50
msgid ":ref:`Sprite <class_Sprite>`"
msgstr ":ref:`Sprite <class_Sprite>`"

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:51
msgid ":ref:`Light2D <class_Light2D>`"
msgstr ":ref:`Light2D <class_Light2D>`"

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:52
msgid ":ref:`LightOccluder2D <class_LightOccluder2D>`"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:54
msgid ""
":ref:`CanvasModulate<class_CanvasModulate>` is used to darken the scene."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:56
msgid ""
":ref:`Sprites <class_Sprite>` are used to display the textures for the light "
"blobs, the background, and for the shadow casters."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:59
msgid ""
":ref:`Light2Ds <class_Light2D>` are used to light the scene. The way a light "
"typically works is by adding a selected texture over the rest of the scene "
"to simulate lighting. But it can be used in other ways, for example masking "
"out parts of the scene."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:63
msgid ""
":ref:`LightOccluder2Ds <class_LightOccluder2D>` are used to tell the shader "
"which parts of the scene cast shadows. The shadows appear only on areas "
"covered by the :ref:`Light2D <class_Light2D>` and their direction is based "
"on the center of the :ref:`Light <class_Light2D>`."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:70
msgid ""
":ref:`Lights <class_Light2D>` cover the entire extent of their respective "
"Texture. They use additive blending to add the color of their texture to the "
"scene."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:75
msgid ""
":ref:`Lights <class_Light2D>` have four ``Modes``: ``Add``, ``Sub``, "
"``Mix``, and ``Mask``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:77
msgid ""
"``Add`` adds the color of the light texture to the scene. It brightens the "
"area under the light."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:79
msgid ""
"``Sub`` subtracts the color of the light from the scene. It darkens the area "
"under the light."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:81
msgid ""
"``Mix`` mixes the color of the light with the underlying scene. The "
"resulting brightness is halfway between the color of the light and the color "
"underneath."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:84
msgid ""
"``Mask`` is used to mask out areas that are covered by the light. Masked out "
"areas are hidden or revealed based on the color of the light."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:87
msgid ""
"For the demo the lights have two components, the :ref:`Light "
"<class_Light2D>` itself (which is the effect of the light), and a :ref:"
"`Sprite <class_Sprite>` blob which is an image showing the location of the "
"light source. A child :ref:`Sprite <class_Sprite>` is not necessary to make "
"a :ref:`Light <class_Light2D>` work."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:95
msgid "Shadows"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:97
msgid ""
"Shadows are made by intersecting a :ref:`Light <class_Light2D>` with a :ref:"
"`LightOccluder2D <class_LightOccluder2D>`."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:99
msgid ""
"By default shadows are turned off. To turn them on click on the :ref:`Light "
"<class_Light2D>` and under the Shadows section check ``Enabled``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:102
msgid ""
"In the demo we are using a :ref:`Sprite <class_Sprite>` with a Texture on it "
"to make the \"Shadow Casters\", but in reality all you need is a couple of :"
"ref:`LightOccluder2Ds <class_LightOccluder2D>`. By itself the :ref:"
"`LightOccluder2D <class_LightOccluder2D>` looks like a dark spot and in this "
"demo the :ref:`Sprite <class_Sprite>` is just a black square."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:110
msgid ""
"Now that we have covered the basics of the nodes being used, we can now walk "
"step by step through the process of making a scene like the one found in the "
"demo."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:113
msgid ""
"First add a :ref:`Sprite <class_Sprite>` and set its texture to the "
"`background image <https://raw.githubusercontent.com/godotengine/godot-demo-"
"projects/master/2d/lights_and_shadows/bg.png>`_. For your game this can be "
"any background you choose. For this style of shadow it is most likely to be "
"a floor texture."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:118
msgid ""
"Next create three :ref:`Light2D's <class_Light2D>` and set their textures to "
"the `light image <https://raw.githubusercontent.com/godotengine/godot-demo-"
"projects/master/2d/lights_and_shadows/light.png>`_. You can alter their "
"color in the top section. By default shadows are turned off and the ``mode`` "
"is set to ``add``. This means that each light adds its own color to whatever "
"is underneath."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:124
msgid ""
"Next add a child :ref:`Sprite <class_Sprite>` to each of the :ref:`Light "
"<class_Light2D>` nodes, and set the :ref:`Sprite's <class_Sprite>` texture "
"to the `blob image <https://raw.githubusercontent.com/godotengine/godot-demo-"
"projects/master/2d/lights_and_shadows/spot.png>`_. Each of these should stay "
"centered on the :ref:`Light <class_Light2D>` node. The blob is the image of "
"the light itself while the :ref:`Light <class_Light2D>` shows the effect "
"that the light has on the scene. The :ref:`LightOccluder2D's "
"<class_LightOccluder2D>` will treat the position of the light as the center "
"of the :ref:`Light <class_Light2D>` node, which is why we want the blob to "
"be centered on its parent :ref:`Light <class_Light2D>`."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:133
msgid ""
"At the time of writing, 3.0 is the stable release version. The 3.1 "
"development branch contains many changes to the animation system, so the "
"animations in the demo will not be covered here. See :ref:"
"`doc_introduction_2d_animation` for more information."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:137
msgid ""
"Right now the scene should look too bright. This is because all three lights "
"are adding color to the scene. This is why the demo uses a :ref:"
"`CanvasModulate <class_CanvasModulate>` in the scene. The :ref:"
"`CanvasModulate <class_CanvasModulate>` multiples the entire viewport by a "
"specific color."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:141
msgid ""
"Add a :ref:`CanvasModulate <class_CanvasModulate>` to the scene and set its "
"color to ``rgb(70, 70, 70)``. This will make the scene sufficiently dark to "
"see the effects of the lights distinctly."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:146
msgid "Now we add the shadow casters."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:148
msgid ""
"The demo uses a :ref:`Node <class_Node2D>` named \"casters\" to organize the "
"shadow casters. Add a :ref:`Node2D <class_Node2D>` to the scene. It will be "
"used to group all the shadow casters together. This way we can show and hide "
"them all at the same time."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:152
msgid ""
"Each shadow caster is made of a :ref:`Sprite <class_Sprite>`, with a :ref:"
"`LightOccluder2D <class_LightOccluder2D>` child. For the demo the :ref:"
"`Sprite <class_Sprite>` has a texture set to the `caster image <https://raw."
"githubusercontent.com/godotengine/godot-demo-projects/master/2d/"
"lights_and_shadows/caster.png>`_ and nothing else. The child :ref:"
"`LightOccluder2D <class_LightOccluder2D>` is where all the magic happens. In "
"a game the :ref:`Sprite <class_Sprite>` could be more than a black box; it "
"could be an image of whatever object is casting the shadow: a wall, a "
"magical chest, or anything else."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:160
msgid ""
":ref:`LightOccluder2Ds <class_LightOccluder2D>` tell the game what shape the "
"occluder has. They hold an :ref:`OccluderPolygon2D "
"<class_OccluderPolygon2D>`, which is a container for a polygon and some "
"other information. For this demo, since our wall is a square, we set "
"``Polygon`` to a square. The other default settings are fine."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:165
msgid ""
"The first setting, ``Closed`` can be either ``on`` or ``off``. A closed "
"polygon occludes light coming from all directions. An open polygon only "
"occludes light from one direction"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:168
msgid ""
"``Cull Mode`` lets you select which direction gets culled. The default is "
"``Disabled``, meaning the occluder will cast a shadow no matter which side "
"the light is on. The other two settings ``Clockwise`` and ``Counter-"
"Clockwise`` refer to the winding order of the vertices of the polygon. The "
"winding order is used to determine which side of the line is inside the "
"polygon. Only outward facing lines cast shadows."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:173
msgid ""
"To illustrate the difference, here is an image of a :ref:`LightOccluder2D "
"<class_LightOccluder2D>` with ``Closed`` set to ``off`` in the "
"corresponding :ref:`OccluderPolygon2D <class_OccluderPolygon2D>`, so that "
"the lines of the polygon can be seen:"
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:179
msgid "``Cull Mode`` is set to ``Disabled``. All three lines cast shadows."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:183
msgid ""
"``Cull Mode`` is set to ``Clockwise``. Only the top and right lines cast "
"shadows."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:187
msgid ""
"``Cull Mode`` is set to ``Counter-Clockwise``. Only the bottom line casts a "
"shadow. If ``Closed`` was set to ``on`` there would be an additional "
"vertical line on the left which would cast a shadow as well."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:191
msgid ""
"When you have added the :ref:`LightOccluder2Ds <class_LightOccluder2D>` the "
"shadows still won't appear. You need to go back into the :ref:`Light2Ds "
"<class_Light2D>` and under the Shadow section set ``Enable`` to ``on``. This "
"turns on shadows with hard edges like in the image below."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:197
msgid ""
"To give the shadows that nice, soft edge look we set the variables "
"``filter``, ``filter smooth``, and ``gradient length``. Godot supports "
"`Percentage Closer Filtering <https://developer.nvidia.com/gpugems/GPUGems/"
"gpugems_ch11.html>`_ (PCF), which takes multiple samples of the shadow map "
"around a pixel and blurs them to create a smooth shadow effect. The higher "
"the number of samples the smoother the shadow will look, but the slower it "
"will run. That is why Godot provides 3-13 samples by default and allows you "
"to choose. The demo uses PCF7."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:206
msgid ""
"This is a shadow rendered with the demo's settings. ``gradient length`` is "
"set to ``1.3``, ``filter smooth`` is set to ``11.1``, and ``filter`` is set "
"to ``PCF7``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:211
msgid ""
"``filter`` is set to ``PCF13``. Notice how the shadow becomes wider, this is "
"because the distance between samples is based on the variable ``filter "
"smooth``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:214
msgid ""
"In order to make use of filtering you need to set the ``filter smooth`` "
"variable. This dictates how far apart the samples are. If you want the soft "
"area to extend quite far, you can increase the size of ``filter smooth``. "
"However, with few samples and a large filter smooth, you can see lines "
"forming between the samples."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:221
msgid "``filter smooth`` is set to ``30``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:223
msgid ""
"The different :ref:`Light <class_Light2D>` nodes in the demo use different "
"values for filter smooth. Play around with it and see what you like."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:228
msgid "``filter smooth`` is set to ``0``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:230
msgid ""
"Lastly, there is the variable ``gradient length``. For some smooth shadows "
"it is preferable not to have the shadow start immediately on the object, as "
"this produces a hard edge. The gradient length variable creates a smooth "
"gradient to begin the shadow to reduce the effect of the hard edge."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:236
msgid "``gradient length`` is set to ``0``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:240
msgid "``gradient length`` is set to ``10``."
msgstr ""

#: ../../docs/tutorials/2d/2d_lights_and_shadows.rst:242
msgid ""
"You will need to play around with the options a bit to find settings that "
"suit your project. There is no right solution for everyone, which is why "
"Godot provides so much flexibility. Just keep in mind that the higher "
"``filter`` set the more expensive the shadows will be."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:4
#, fuzzy
msgid "2D meshes"
msgstr "커스텀 시그널"

#: ../../docs/tutorials/2d/2d_meshes.rst:9
msgid ""
"In 3D, meshes are used to display the world. In 2D, they are rare as images "
"are used more often. Godot's 2D engine is a pure two dimensional engine, so "
"it can't really display 3D meshes directly (although it can be done via "
"``Viewport`` and ``ViewportTexture``)."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:13
msgid ""
"If you are interested in displaying 3D meshes on a 2D viewport, see the :ref:"
"`doc_viewport_as_texture` tutorial."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:15
msgid ""
"2D meshes are meshes that contain two dimensional geometry (Z can be omitted "
"or ignored) instead of 3D. You can experiment creating them yourself using "
"``SurfaceTool`` from code and displaying them in a ``MeshInstance2D`` node."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:18
msgid ""
"Currently, the only way to generate a 2D mesh within the editor is by either "
"importing an OBJ file as a mesh, or converting it from a Sprite."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:21
msgid "Optimizing pixels drawn"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:23
msgid ""
"This workflow is useful for optimizing 2D drawing in some situations. When "
"drawing large images with transparency, Godot will draw the whole quad to "
"the screen. The large transparent areas will still be drawn."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:25
msgid ""
"This can affect performance, especially on mobile devices, when drawing very "
"large images (generally screen sized), or layering multiple images on top of "
"each other with large transparent areas (for example, when using "
"``ParallaxBackground``)."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:28
msgid ""
"Converting to a mesh will ensure that only the opaque parts will be drawn "
"and the rest will be ignored."
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:31
msgid "Converting Sprites to 2D meshes"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:33
msgid ""
"You can take advantage of this optimization by converting a ``Sprite`` to a "
"``MeshInstance2D``. Start with an image that contains large amounts of "
"transparency on the edges, like this tree:"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:38
msgid "Put it in a ``Sprite`` and select \"Convert to 2D Mesh\" from the menu:"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:42
msgid ""
"A dialog will appear, showing a preview of how the 2D mesh will be created:"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:46
msgid ""
"The default values are good enough for many cases, but you can change growth "
"and simplification according to your needs:"
msgstr ""

#: ../../docs/tutorials/2d/2d_meshes.rst:50
msgid ""
"Finally, push the ``Convert 2D Mesh`` button and your Sprite will be "
"replaced:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:4
msgid "Custom drawing in 2D"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:7
#: ../../docs/tutorials/io/encrypting_save_games.rst:7
msgid "Why?"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:9
msgid ""
"Godot has nodes to draw sprites, polygons, particles, and all sorts of "
"stuff. For most cases, this is enough; but not always. Before crying in "
"fear, angst, and rage because a node to draw that specific *something* does "
"not exist... it would be good to know that it is possible to easily make any "
"2D node (be it :ref:`Control <class_Control>` or :ref:`Node2D "
"<class_Node2D>` based) draw custom commands. It is *really* easy to do it, "
"too."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:17
msgid "But..."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:19
msgid ""
"Custom drawing manually in a node is *really* useful. Here are some examples "
"why:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:22
msgid ""
"Drawing shapes or logic that is not handled by nodes (example: making a node "
"that draws a circle, an image with trails, a special kind of animated "
"polygon, etc)."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:25
msgid ""
"Visualizations that are not that compatible with nodes: (example: a tetris "
"board). The tetris example uses a custom draw function to draw the blocks."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:28
msgid ""
"Drawing a large number of simple objects. Custom drawing avoids the overhead "
"of using nodes which makes it less memory intensive and potentially faster."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:31
msgid ""
"Making a custom UI control. There are plenty of controls available, but it's "
"easy to run into the need to make a new, custom one."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:35
msgid "OK, how?"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:37
msgid ""
"Add a script to any :ref:`CanvasItem <class_CanvasItem>` derived node, like :"
"ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`. Then override "
"the ``_draw()`` function."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:57
msgid ""
"Draw commands are described in the :ref:`CanvasItem <class_CanvasItem>` "
"class reference. There are plenty of them."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:61
msgid "Updating"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:63
msgid ""
"The ``_draw()`` function is only called once, and then the draw commands are "
"cached and remembered, so further calls are unnecessary."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:66
msgid ""
"If re-drawing is required because a state or something else changed, simply "
"call :ref:`CanvasItem.update() <class_CanvasItem_method_update>` in that "
"same node and a new ``_draw()`` call will happen."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:70
msgid ""
"Here is a little more complex example, a texture variable that will be "
"redrawn if modified:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:114
msgid ""
"In some cases, it may be desired to draw every frame. For this, just call "
"``update()`` from the ``_process()`` callback, like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:146
msgid "An example: drawing circular arcs"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:148
msgid ""
"We will now use the custom drawing functionality of the Godot Engine to draw "
"something that Godot doesn't provide functions for. As an example, Godot "
"provides a ``draw_circle()`` function that draws a whole circle. However, "
"what about drawing a portion of a circle? You will have to code a function "
"to perform this and draw it yourself."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:154
msgid "Arc function"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:156
msgid ""
"An arc is defined by its support circle parameters, that is, the center "
"position and the radius. The arc itself is then defined by the angle it "
"starts from and the angle at which it stops. These are the 4 arguments that "
"we have to provide to our drawing function. We'll also provide the color "
"value, so we can draw the arc in different colors if we wish."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:161
msgid ""
"Basically, drawing a shape on the screen requires it to be decomposed into a "
"certain number of points linked from one to the next. As you can imagine, "
"the more points your shape is made of, the smoother it will appear, but the "
"heavier it will also be in terms of processing cost. In general, if your "
"shape is huge (or in 3D, close to the camera), it will require more points "
"to be drawn without it being angular-looking. On the contrary, if your shape "
"is small (or in 3D, far from the camera), you may decrease its number of "
"points to save processing costs; this is known as *Level of Detail (LoD)*. "
"In our example, we will simply use a fixed number of points, no matter the "
"radius."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:201
msgid ""
"Remember the number of points our shape has to be decomposed into? We fixed "
"this number in the ``nb_points`` variable to a value of ``32``. Then, we "
"initialize an empty ``PoolVector2Array``, which is simply an array of "
"``Vector2``\\ s."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:205
msgid ""
"The next step consists of computing the actual positions of these 32 points "
"that compose an arc. This is done in the first for-loop: we iterate over the "
"number of points for which we want to compute the positions, plus one to "
"include the last point. We first determine the angle of each point, between "
"the starting and ending angles."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:210
msgid ""
"The reason why each angle is decreased by 90° is that we will compute 2D "
"positions out of each angle using trigonometry (you know, cosine and sine "
"stuff...). However, to be simple, ``cos()`` and ``sin()`` use radians, not "
"degrees. The angle of 0° (0 radian) starts at 3 o'clock, although we want to "
"start counting at 12 o'clock. So we decrease each angle by 90° in order to "
"start counting from 12 o'clock."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:216
msgid ""
"The actual position of a point located on a circle at angle ``angle`` (in "
"radians) is given by ``Vector2(cos(angle), sin(angle))``. Since ``cos()`` "
"and ``sin()`` return values between -1 and 1, the position is located on a "
"circle of radius 1. To have this position on our support circle, which has a "
"radius of ``radius``, we simply need to multiply the position by ``radius``. "
"Finally, we need to position our support circle at the ``center`` position, "
"which is performed by adding it to our ``Vector2`` value. Finally, we insert "
"the point in the ``PoolVector2Array`` which was previously defined."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:224
msgid ""
"Now, we need to actually draw our points. As you can imagine, we will not "
"simply draw our 32 points: we need to draw everything that is between each "
"of them. We could have computed every point ourselves using the previous "
"method, and drew it one by one. But this is too complicated and inefficient "
"(except if explicitly needed), so we simply draw lines between each pair of "
"points. Unless the radius of our support circle is big, the length of each "
"line between a pair of points will never be long enough to see them. If that "
"were to happen, we would simply need to increase the number of points."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:234
#, fuzzy
msgid "Draw the arc on the screen"
msgstr "메인 메뉴 화면 만들기"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:236
msgid ""
"We now have a function that draws stuff on the screen; it is time to call it "
"inside the ``_draw()`` function:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:263
msgid "Result:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:268
msgid "Arc polygon function"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:270
msgid ""
"We can take this a step further and not only write a function that draws the "
"plain portion of the disc defined by the arc, but also its shape. The method "
"is exactly the same as before, except that we draw a polygon instead of "
"lines:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:310
msgid "Dynamic custom drawing"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:312
msgid ""
"All right, we are now able to draw custom stuff on the screen. However, it "
"is static; let's make this shape turn around the center. The solution to do "
"this is simply to change the angle_from and angle_to values over time. For "
"our example, we will simply increment them by 50. This increment value has "
"to remain constant or else the rotation speed will change accordingly."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:318
msgid ""
"First, we have to make both angle_from and angle_to variables global at the "
"top of our script. Also note that you can store them in other nodes and "
"access them using ``get_node()``."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:340
msgid "We make these values change in the _process(delta) function."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:342
msgid ""
"We also increment our angle_from and angle_to values here. However, we must "
"not forget to ``wrap()`` the resulting values between 0 and 360°! That is, "
"if the angle is 361°, then it is actually 1°. If you don't wrap these "
"values, the script will work correctly, but the angle values will grow "
"bigger and bigger over time until they reach the maximum integer value Godot "
"can manage (``2^31 - 1``). When this happens, Godot may crash or produce "
"unexpected behavior. Since Godot doesn't provide a ``wrap()`` function, "
"we'll create it here, as it is relatively simple."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:351
msgid ""
"Finally, we must not forget to call the ``update()`` function, which "
"automatically calls ``_draw()``. This way, you can control when you want to "
"refresh the frame."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:396
msgid ""
"Also, don't forget to modify the ``_draw()`` function to make use of these "
"variables:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:420
msgid ""
"Let's run! It works, but the arc is rotating insanely fast! What's wrong?"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:423
msgid ""
"The reason is that your GPU is actually displaying the frames as fast as it "
"can. We need to \"normalize\" the drawing by this speed; to achieve that, we "
"have to make use of the ``delta`` parameter of the ``_process()`` function. "
"``delta`` contains the time elapsed between the two last rendered frames. It "
"is generally small (about 0.0003 seconds, but this depends on your "
"hardware), so using ``delta`` to control your drawing ensures that your "
"program runs at the same speed on everybody's hardware."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:431
msgid ""
"In our case, we simply need to multiply our ``rotation_angle`` variable by "
"``delta`` in the ``_process()`` function. This way, our 2 angles will be "
"increased by a much smaller value, which directly depends on the rendering "
"speed."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:465
msgid "Let's run again! This time, the rotation displays fine!"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:468
#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:133
msgid "Tools"
msgstr "도구"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:470
msgid ""
"Drawing your own nodes might also be desired while running them in the "
"editor to use as a preview or visualization of some feature or behavior."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:474
msgid ""
"Remember to use the \"tool\" keyword at the top of the script (check the :"
"ref:`doc_gdscript` reference if you forgot what this does)."
msgstr ""

#: ../../docs/tutorials/3d/index.rst:2
msgid "3D"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:4
msgid "Introduction to 3D"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:6
msgid ""
"Creating a 3D game can be challenging. That extra Z coordinate makes many of "
"the common techniques that helped to make 2D games simple no longer work. To "
"aid in this transition, it is worth mentioning that Godot uses similar APIs "
"for 2D and 3D. Most nodes are the same and are present in both 2D and 3D "
"versions. In fact, it is worth checking the 3D platformer tutorial, or the "
"3D kinematic character tutorials, which are almost identical to their 2D "
"counterparts."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:14
msgid ""
"In 3D, math is a little more complex than in 2D, so also checking the :ref:"
"`doc_vector_math` entry in the wiki (which was especially created for game "
"developers, not mathematicians or engineers) will help pave the way for you "
"to develop 3D games efficiently."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:20
msgid "Spatial node"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:22
msgid ""
":ref:`Node2D <class_Node2D>` is the base node for 2D. :ref:`Control "
"<class_Control>` is the base node for everything GUI. Following this "
"reasoning, the 3D engine uses the :ref:`Spatial <class_Spatial>` node for "
"everything 3D."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:29
msgid ""
"Spatial nodes have a local transform, which is relative to the parent node "
"(as long as the parent node is also of **or inherits** from the type "
"Spatial). This transform can be accessed as a 4x3 :ref:`Transform "
"<class_Transform>`, or as 3 :ref:`Vector3 <class_Vector3>` members "
"representing location, Euler rotation (x,y and z angles) and scale."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:39
msgid "3D content"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:41
msgid ""
"Unlike 2D, where loading image content and drawing is straightforward, 3D is "
"a little more difficult. The content needs to be created with special 3D "
"tools (usually referred to as DCCs) and exported to an exchange file format "
"in order to be imported in Godot (3D formats are not as standardized as "
"images)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:48
msgid "DCC-created models"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:53
msgid ""
"There are two pipelines to import 3D models in Godot. The first and most "
"common one is by :ref:`doc_importing_3d_scenes`, which allows you to import "
"entire scenes (just as they look in the DCC), including animation, skeletal "
"rigs, blend shapes, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:58
msgid ""
"The second pipeline is by importing simple .OBJ files as mesh resources, "
"which can be then put inside a :ref:`MeshInstance <class_MeshInstance>` node "
"for display."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:63
msgid "Generated geometry"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:65
msgid ""
"It is possible to create custom geometry by using the :ref:`ArrayMesh "
"<class_ArrayMesh>` resource directly. Simply create your arrays and use the :"
"ref:`ArrayMesh.add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` function. A helper class "
"is also available, :ref:`SurfaceTool <class_SurfaceTool>`, which provides a "
"more straightforward API and helpers for indexing, generating normals, "
"tangents, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:72
msgid ""
"In any case, this method is meant for generating static geometry (models "
"that will not be updated often), as creating vertex arrays and submitting "
"them to the 3D API has a significant performance cost."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:77
msgid "Immediate geometry"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:79
msgid ""
"If, instead, there is a requirement to generate simple geometry that will be "
"updated often, Godot provides a special node, :ref:`ImmediateGeometry "
"<class_ImmediateGeometry>`, which provides an OpenGL 1.x style immediate-"
"mode API to create points, lines, triangles, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:86
msgid "2D in 3D"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:88
msgid ""
"While Godot packs a powerful 2D engine, many types of games use 2D in a 3D "
"environment. By using a fixed camera (either orthogonal or perspective) that "
"does not rotate, nodes such as :ref:`Sprite3D <class_Sprite3D>` and :ref:"
"`AnimatedSprite3D <class_AnimatedSprite3D>` can be used to create 2D games "
"that take advantage of mixing with 3D backgrounds, more realistic parallax, "
"lighting/shadow effects, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:96
msgid ""
"The disadvantage is, of course, that added complexity and reduced "
"performance in comparison to plain 2D, as well as the lack of reference of "
"working in pixels."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:101
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:10
msgid "Environment"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:103
msgid ""
"Besides editing a scene, it is often common to edit the environment. Godot "
"provides a :ref:`WorldEnvironment <class_WorldEnvironment>` node that allows "
"changing the background color, mode (as in, put a skybox), and applying "
"several types of built-in post-processing effects. Environments can also be "
"overridden in the Camera."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:110
msgid "3D viewport"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:112
msgid ""
"Editing 3D scenes is done in the 3D tab. This tab can be selected manually, "
"but it will be automatically enabled when a Spatial node is selected."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:118
msgid ""
"Default 3D scene navigation controls are similar to Blender (aiming to have "
"some sort of consistency in the free software pipeline..), but options are "
"included to customize mouse buttons and behavior to be similar to other "
"tools in the Editor Settings:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:126
msgid "Coordinate system"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:128
msgid ""
"Godot uses the `metric <https://en.wikipedia.org/wiki/Metric_system>`__ "
"system for everything. 3D Physics and other areas are tuned for this, so "
"attempting to use a different scale is usually a bad idea (unless you know "
"what you are doing)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:133
msgid ""
"When working with 3D assets, it's always best to work in the correct scale "
"(set your DCC to metric). Godot allows scaling post-import and, while this "
"works in most cases, in rare situations it may introduce floating point "
"precision issues (and thus, glitches or artifacts) in delicate areas, such "
"as rendering or physics, so make sure your artists always work in the right "
"scale!"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:140
msgid ""
"The Y coordinate is used for \"up\", though for most objects that need "
"alignment (like lights, cameras, capsule collider, vehicle, etc.), the Z "
"axis is used as a \"pointing towards\" direction. This convention roughly "
"means that:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:145
msgid "**X** is sides"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:146
msgid "**Y** is up/down"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:147
msgid "**Z** is front/back"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:150
msgid "Space and manipulation gizmos"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:152
msgid ""
"Moving objects in the 3D view is done through the manipulator gizmos. Each "
"axis is represented by a color: Red, Green, Blue represent X,Y,Z "
"respectively. This convention applies to the grid and other gizmos too (and "
"also to the shader language, ordering of components for Vector3,Color,etc.)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:160
msgid "Some useful keybindings:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:162
msgid ""
"To snap placement or rotation, press the \"s\" key while moving, scaling or "
"rotating."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:164
msgid "To center the view on the selected object, press the \"f\" key."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:167
msgid "View menu"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:169
msgid ""
"The view options are controlled by the \"View\" menu in the viewport's "
"toolbar."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:173
msgid "You can hide the gizmos in the 3D view of the editor through this menu:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:177
msgid ""
"To hide a specific type of gizmos, you can toggle them off in the \"View\" "
"menu."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:182
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:40
msgid "Default environment"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:184
msgid ""
"When created from the Project Manager, the 3D environment has a default sky."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:188
msgid ""
"Given how physically based rendering works, it is advised to always try to "
"work with a default environment in order to provide indirect and reflected "
"light to your objects."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:193
msgid "Cameras"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:195
msgid ""
"No matter how many objects are placed in the 3D space, nothing will be "
"displayed unless a :ref:`Camera <class_Camera>` is also added to the scene. "
"Cameras can work in either orthogonal or perspective projections:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:202
msgid ""
"Cameras are associated with (and only display to) a parent or grandparent "
"viewport. Since the root of the scene tree is a viewport, cameras will "
"display on it by default, but if sub-viewports (either as render target or "
"picture-in-picture) are desired, they need their own children cameras to "
"display."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:210
msgid ""
"When dealing with multiple cameras, the following rules are enforced for "
"each viewport:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:213
msgid ""
"If no cameras are present in the scene tree, the first one that enters it "
"will become the active camera. Further cameras entering the scene will be "
"ignored (unless they are set as *current*)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:216
msgid ""
"If a camera has the \"*current*\" property set, it will be used regardless "
"of any other camera in the scene. If the property is set, it will become "
"active, replacing the previous camera."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:219
msgid ""
"If an active camera leaves the scene tree, the first camera in tree-order "
"will take its place."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:225
msgid ""
"There is no limitation on the number of lights, nor of types of lights, in "
"Godot. As many as desired can be added (as long as performance allows)."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:4
msgid "Using 3D transforms"
msgstr "3D 변형(transform) 사용하기"

#: ../../docs/tutorials/3d/using_transforms.rst:9
msgid ""
"If you have never made 3D games before, working with rotations in three "
"dimensions can be confusing at first. Coming from 2D, the natural way of "
"thinking is along the lines of *\"Oh, it's just like rotating in 2D, except "
"now rotations happen in X, Y and Z\"*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:12
msgid ""
"At first this seems easy and for simple games, this way of thinking may even "
"be enough. Unfortunately, it's often incorrect."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:14
msgid ""
"Angles in three dimensions are most commonly referred to as \"Euler Angles\"."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:18
msgid ""
"Euler angles were introduced by mathematician Leonhard Euler in the early "
"1700s."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:22
msgid ""
"This way of representing 3D rotations was groundbreaking at the time, but it "
"has several shortcomings when used in game development (which is to be "
"expected from a guy with a funny hat). The idea of this document is to "
"explain why, as well as outlining best practices for dealing with transforms "
"when programming 3D games."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:28
msgid "Problems of Euler angles"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:30
msgid ""
"While it may seem intuitive that each axis has a rotation, the truth is that "
"it's just not practical."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:33
msgid "Axis order"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:35
msgid ""
"The main reason for this is that there isn't a *unique* way to construct an "
"orientation from the angles. There isn't a standard mathematical function "
"that takes all the angles together and produces an actual 3D rotation. The "
"only way an orientation can be produced from angles is to rotate the object "
"angle by angle, in an *arbitrary order*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:39
msgid ""
"This could be done by first rotating in *X*, then *Y* and then in *Z*. "
"Alternatively, you could first rotate in *Y*, then in *Z* and finally in "
"*X*. Anything works, but depending on the order, the final orientation of "
"the object will *not necessarily be the same*. Indeed, this means that there "
"are several ways to construct an orientation from 3 different angles, "
"depending on *the order of the rotations*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:43
msgid ""
"Following is a visualization of rotation axes (in X,Y,Z order) in a gimbal "
"(from Wikipedia). As you can see, the orientation of each axis depends on "
"the rotation of the previous one:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:47
msgid ""
"You may be wondering how this affects you. Let's look at a practical example:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:49
msgid ""
"Imagine you are working on a first-person controller (e.g. an FPS game). "
"Moving the mouse left and right controls your view angle parallel to the "
"ground, while moving it up and down moves the player's view up and down."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:51
msgid ""
"In this case to achieve the desired effect, rotation must be applied first "
"in the *Y* axis (\"up\" in this case, since Godot uses a \"Y-Up\" "
"orientation), followed by rotation in the *X* axis."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:55
msgid ""
"If we were to apply rotation in the *X* axis first, and then in *Y*, the "
"effect would be undesired:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:59
msgid ""
"Depending on the type of game or effect desired, the order in which you want "
"axis rotations to be applied may differ. Therefore, applying rotations in X, "
"Y, and Z is not enough: you also need a *rotation order*."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:62
msgid "Interpolation"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:64
msgid ""
"Another problem with using Euler angles is interpolation. Imagine you want "
"to transition between two different camera or enemy positions (including "
"rotations). One logical way to approach this is to interpolate the angles "
"from one position to the next. One would expect it to look like this:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:68
msgid "But this does not always have the expected effect when using angles:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:72
msgid "The camera actually rotated the opposite direction!"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:74
msgid "There are a few reasons this may happen:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:76
msgid ""
"Rotations don't map linearly to orientation, so interpolating them does not "
"always result in the shortest path (i.e., to go from ``270`` to ``0`` "
"degrees is not the same as going from ``270`` to ``360``, even though the "
"angles are equivalent)."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:77
msgid ""
"Gimbal lock is at play (first and last rotated axis align, so a degree of "
"freedom is lost). See `Wikipedia's page on Gimbal Lock <https://en.wikipedia."
"org/wiki/Gimbal_lock>`_ for a detailed explanation of this problem."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:80
msgid "Say no to Euler angles"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:82
msgid ""
"The result of all this is that you should **not use** the ``rotation`` "
"property of :ref:`class_Spatial` nodes in Godot for games. It's there to be "
"used mainly in the editor, for coherence with the 2D engine, and for simple "
"rotations (generally just one axis, or even two in limited cases). As much "
"as you may be tempted, don't use it."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:84
msgid "Instead, there is a better way to solve your rotation problems."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:87
msgid "Introducing transforms"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:89
msgid ""
"Godot uses the :ref:`class_Transform` datatype for orientations. Each :ref:"
"`class_Spatial` node contains a ``transform`` property which is relative to "
"the parent's transform, if the parent is a Spatial-derived type."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:91
msgid ""
"It is also possible to access the world coordinate transform via the "
"``global_transform`` property."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:93
msgid ""
"A transform has a :ref:`class_Basis` (transform.basis sub-property), which "
"consists of three :ref:`class_Vector3` vectors. These are accessed via the "
"``transform.basis`` property and can be accessed directly by ``transform."
"basis.x``, ``transform.basis.y``, and ``transform.basis.z``. Each vector "
"points in the direction its axis has been rotated, so they effectively "
"describe the node's total rotation. The scale (as long as it's uniform) can "
"also be inferred from the length of the axes. A *basis* can also be "
"interpreted as a 3x3 matrix and used as ``transform.basis[x][y]``."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:95
msgid "A default basis (unmodified) is akin to:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:123
msgid "This is also an analog of a 3x3 identity matrix."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:125
msgid ""
"Following the OpenGL convention, ``X`` is the *Right* axis, ``Y`` is the "
"*Up* axis and ``Z`` is the *Forward* axis."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:127
msgid ""
"Together with the *basis*, a transform also has an *origin*. This is a "
"*Vector3* specifying how far away from the actual origin ``(0, 0, 0)`` this "
"transform is. Combining the *basis* with the *origin*, a *transform* "
"efficiently represents a unique translation, rotation, and scale in space."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:132
msgid ""
"One way to visualize a transform is to look at an object's 3D gizmo while in "
"\"local space\" mode."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:136
msgid ""
"The gizmo's arrows show the ``X``, ``Y``, and ``Z`` axes (in red, green, and "
"blue respectively) of the basis, while the gizmo's center is at the object's "
"origin."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:140
msgid ""
"For more information on the mathematics of vectors and transforms, please "
"read the :ref:`doc_vector_math` tutorials."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:143
msgid "Manipulating transforms"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:145
msgid ""
"Of course, transforms are not as straightforward to manipulate as angles and "
"have problems of their own."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:147
msgid ""
"It is possible to rotate a transform, either by multiplying its basis by "
"another (this is called accumulation), or by using the rotation methods."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:164
msgid "A method in Spatial simplifies this:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:181
msgid "This rotates the node relative to the parent node."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:183
msgid ""
"To rotate relative to object space (the node's own transform), use the "
"following:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:197
msgid "Precision errors"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:199
msgid ""
"Doing successive operations on transforms will result in a loss of precision "
"due to floating-point error. This means the scale of each axis may no longer "
"be exactly ``1.0``, and they may not be exactly ``90`` degrees from each "
"other."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:201
msgid ""
"If a transform is rotated every frame, it will eventually start deforming "
"over time. This is unavoidable."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:203
msgid ""
"There are two different ways to handle this. The first is to "
"*orthonormalize* the transform after some time (maybe once per frame if you "
"modify it every frame):"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:214
msgid ""
"This will make all axes have ``1.0`` length again and be ``90`` degrees from "
"each other. However, any scale applied to the transform will be lost."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:216
msgid ""
"It is recommended you not scale nodes that are going to be manipulated; "
"scale their children nodes instead (such as MeshInstance). If you absolutely "
"must scale the node, then re-apply it at the end:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:230
msgid "Obtaining information"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:232
msgid ""
"You might be thinking at this point: **\"Ok, but how do I get angles from a "
"transform?\"**. The answer again is: you don't. You must do your best to "
"stop thinking in angles."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:234
msgid ""
"Imagine you need to shoot a bullet in the direction your player is facing. "
"Just use the forward axis (commonly ``Z`` or ``-Z``)."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:247
msgid ""
"Is the enemy looking at the player? Use the dot product for this (see the :"
"ref:`doc_vector_math` tutorial for an explanation of the dot product):"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:266
msgid "Strafe left:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:283
msgid "Jump:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:303
msgid "All common behaviors and logic can be done with just vectors."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:306
msgid "Setting information"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:308
msgid ""
"There are, of course, cases where you want to set information to a "
"transform. Imagine a first person controller or orbiting camera. Those are "
"definitely done using angles, because you *do want* the transforms to happen "
"in a specific order."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:310
msgid ""
"For such cases, keep the angles and rotations *outside* the transform and "
"set them every frame. Don't try to retrieve and re-use them because the "
"transform is not meant to be used this way."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:312
msgid "Example of looking around, FPS style:"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:355
msgid ""
"As you can see, in such cases it's even simpler to keep the rotation "
"outside, then use the transform as the *final* orientation."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:358
msgid "Interpolating with quaternions"
msgstr "쿼터니언(quaternions) 으로 보간하기"

#: ../../docs/tutorials/3d/using_transforms.rst:360
msgid ""
"Interpolating between two transforms can efficiently be done with "
"quaternions. More information about how quaternions work can be found in "
"other places around the Internet. For practical use, it's enough to "
"understand that pretty much their main use is doing a closest path "
"interpolation. As in, if you have two rotations, a quaternion will smoothly "
"allow interpolation between them using the closest axis."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:362
msgid "Converting a rotation to quaternion is straightforward."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:385
msgid ""
"The :ref:`class_Quat` type reference has more information on the datatype "
"(it can also do transform accumulation, transform points, etc., though this "
"is used less often). If you interpolate or apply operations to quaternions "
"many times, keep in mind they need to be eventually normalized or they also "
"may suffer from numerical precision errors."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:387
msgid ""
"Quaternions are useful when doing camera/path/etc. interpolations, as the "
"result will always be correct and smooth."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:390
msgid "Transforms are your friend"
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:392
msgid ""
"For most beginners, getting used to working with transforms can take some "
"time. However, once you get used to them, you will appreciate their "
"simplicity and power."
msgstr ""

#: ../../docs/tutorials/3d/using_transforms.rst:394
msgid ""
"Don't hesitate to ask for help on this topic in any of Godot's `online "
"communities <https://godotengine.org/community>`_ and, once you become "
"confident enough, please help others!"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:4
msgid "3D performance and limitations"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:9
msgid ""
"Godot follows a balanced performance philosophy. In the performance world, "
"there are always trade-offs, which consist of trading speed for usability "
"and flexibility. Some practical examples of this are:"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:13
msgid ""
"Rendering objects efficiently in high amounts is easy, but when a large "
"scene must be rendered, it can become inefficient. To solve this, visibility "
"computation must be added to the rendering, which makes rendering less "
"efficient, but, at the same time, fewer objects are rendered, so efficiency "
"overall improves."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:18
msgid ""
"Configuring the properties of every material for every object that needs to "
"be rendered is also slow. To solve this, objects are sorted by material to "
"reduce the costs, but at the same time sorting has a cost."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:22
msgid ""
"In 3D physics a similar situation happens. The best algorithms to handle "
"large amounts of physics objects (such as SAP) are slow at insertion/removal "
"of objects and ray-casting. Algorithms that allow faster insertion and "
"removal, as well as ray-casting, will not be able to handle as many active "
"objects."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:28
msgid ""
"And there are many more examples of this! Game engines strive to be general "
"purpose in nature, so balanced algorithms are always favored over algorithms "
"that might be fast in some situations and slow in others.. or algorithms "
"that are fast but make usability more difficult."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:33
msgid ""
"Godot is not an exception and, while it is designed to have backends "
"swappable for different algorithms, the default ones (or more like, the only "
"ones that are there for now) prioritize balance and flexibility over "
"performance."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:38
msgid ""
"With this clear, the aim of this tutorial is to explain how to get the "
"maximum performance out of Godot."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:42
#: ../../docs/tutorials/viewports/viewports.rst:174
msgid "Rendering"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:44
msgid ""
"3D rendering is one of the most difficult areas to get performance from, so "
"this section will have a list of tips."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:48
msgid "Reuse shaders and materials"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:50
msgid ""
"The Godot renderer is a little different to what is out there. It's designed "
"to minimize GPU state changes as much as possible. :ref:"
"`class_SpatialMaterial` does a good job at reusing materials that need "
"similar shaders but, if custom shaders are used, make sure to reuse them as "
"much as possible. Godot's priorities will be like this:"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:57
msgid ""
"**Reusing Materials**: The fewer different materials in the scene, the "
"faster the rendering will be. If a scene has a huge amount of objects (in "
"the hundreds or thousands) try reusing the materials or in the worst case "
"use atlases."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:61
msgid ""
"**Reusing Shaders**: If materials can't be reused, at least try to re-use "
"shaders (or SpatialMaterials with different parameters but the same "
"configuration)."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:65
msgid ""
"If a scene has, for example, 20.000 objects with 20.000 different materials "
"each, rendering will be slow. If the same scene has 20.000 objects, but only "
"uses 100 materials, rendering will be blazingly fast."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:71
msgid "Pixel cost vs vertex cost"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:73
msgid ""
"It is a common thought that the lower the number of polygons in a model, the "
"faster it will be rendered. This is *really* relative and depends on many "
"factors."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:77
msgid ""
"On a modern PC and console, vertex cost is low. GPUs originally only "
"rendered triangles, so all the vertices:"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:80
msgid "Had to be transformed by the CPU (including clipping)."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:82
msgid "Had to be sent to the GPU memory from the main RAM."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:84
msgid ""
"Nowadays, all this is handled inside the GPU, so the performance is "
"extremely high. 3D artists usually have the wrong feeling about polycount "
"performance because 3D DCCs (such as Blender, Max, etc.) need to keep "
"geometry in CPU memory in order for it to be edited, reducing actual "
"performance. Truth is, a model rendered by a 3D engine is much more optimal "
"than how 3D DCCs display them."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:91
msgid ""
"On mobile devices, the story is different. PC and Console GPUs are brute-"
"force monsters that can pull as much electricity as they need from the power "
"grid. Mobile GPUs are limited to a tiny battery, so they need to be a lot "
"more power efficient."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:96
msgid ""
"To be more efficient, mobile GPUs attempt to avoid *overdraw*. This means, "
"the same pixel on the screen being rendered (as in, with lighting "
"calculation, etc.) more than once. Imagine a town with several buildings, "
"GPUs don't know what is visible and what is hidden until they draw it. A "
"house might be drawn and then another house in front of it (rendering "
"happened twice for the same pixel!). PC GPUs normally don't care much about "
"this and just throw more pixel processors to the hardware to increase "
"performance (but this also increases power consumption)."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:106
msgid ""
"On mobile, pulling more power is not an option, so a technique called \"Tile "
"Based Rendering\" is used (almost every mobile hardware uses a variant of "
"it), which divides the screen into a grid. Each cell keeps the list of "
"triangles drawn to it and sorts them by depth to minimize *overdraw*. This "
"technique improves performance and reduces power consumption, but takes a "
"toll on vertex performance. As a result, fewer vertices and triangles can be "
"processed for drawing."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:114
msgid ""
"Generally, this is not so bad, but there is a corner case on mobile that "
"must be avoided, which is to have small objects with a lot of geometry "
"within a small portion of the screen. This forces mobile GPUs to put a lot "
"of strain on a single screen cell, considerably decreasing performance (as "
"all the other cells must wait for it to complete in order to display the "
"frame)."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:121
msgid ""
"To make it short, do not worry about vertex count so much on mobile, but "
"avoid concentration of vertices in small parts of the screen. If, for "
"example, a character, NPC, vehicle, etc. is far away (so it looks tiny), use "
"a smaller level of detail (LOD) model instead."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:126
msgid ""
"An extra situation where vertex cost must be considered is objects that have "
"extra processing per vertex, such as:"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:129
msgid "Skinning (skeletal animation)"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:130
msgid "Morphs (shape keys)"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:131
msgid "Vertex Lit Objects (common on mobile)"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:134
msgid "Texture compression"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:136
msgid ""
"Godot offers to compress textures of 3D models when imported (VRAM "
"compression). Video RAM compression is not as efficient in size as PNG or "
"JPG when stored, but increases performance enormously when drawing."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:140
msgid ""
"This is because the main goal of texture compression is bandwidth reduction "
"between memory and the GPU."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:143
msgid ""
"In 3D, the shapes of objects depend more on the geometry than the texture, "
"so compression is generally not noticeable. In 2D, compression depends more "
"on shapes inside the textures, so the artifacts resulting from 2D "
"compression are more noticeable."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:148
msgid ""
"As a warning, most Android devices do not support texture compression of "
"textures with transparency (only opaque), so keep this in mind."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:152
msgid "Transparent objects"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:154
msgid ""
"As mentioned before, Godot sorts objects by material and shader to improve "
"performance. This, however, can not be done on transparent objects. "
"Transparent objects are rendered from back to front to make blending with "
"what is behind work. As a result, please try to keep transparent objects to "
"a minimum! If an object has a small section with transparency, try to make "
"that section a separate material."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:162
msgid "Level of detail (LOD)"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:164
msgid ""
"As also mentioned before, using objects with fewer vertices can improve "
"performance in some cases. Godot has a simple system to change level of "
"detail, :ref:`GeometryInstance <class_GeometryInstance>` based objects have "
"a visibility range that can be defined. Having several GeometryInstance "
"objects in different ranges works as LOD."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:172
msgid "Use instancing (MultiMesh)"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:174
msgid ""
"If several identical objects have to be drawn in the same place or nearby, "
"try using :ref:`MultiMesh <class_MultiMesh>` instead. MultiMesh allows the "
"drawing of dozens of thousands of objects at very little performance cost, "
"making it ideal for flocks, grass, particles, etc."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:181
msgid "Bake lighting"
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:183
msgid ""
"Small lights are usually not a performance issue. Shadows a little more. In "
"general, if several lights need to affect a scene, it's ideal to bake it (:"
"ref:`doc_baked_lightmaps`). Baking can also improve the scene quality by "
"adding indirect light bounces."
msgstr ""

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:188
msgid ""
"If working on mobile, baking to texture is recommended, since this method is "
"even faster."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:4
msgid "Spatial Material"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:9
msgid ""
"``SpatialMaterial`` is a default 3D material that aims to provide most of "
"the features artists look for in a material, without the need for writing "
"shader code. However, it can be converted to shader code if additional "
"functionality is needed."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:13
msgid "This tutorial explains most parameters present in ``SpatialMaterial``."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:15
msgid ""
"You can add a ``SpatialMaterial`` to an object by choosing \"New "
"SpatialMaterial\" in the *Material* property of the Inspector."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:21
msgid ""
"Spatial materials have many flags determining the general usage of a "
"material."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:26
msgid "Transparent"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:28
msgid ""
"In Godot, materials are not transparent unless specifically configured to "
"be. The main reason behind this is that transparent materials are rendered "
"using a different technique (sorted from back to front and rendered in "
"order)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:32
msgid ""
"This technique is less efficient (many state changes happen) and makes the "
"materials unusable with many mid- and post-processing effects (such as SSAO, "
"SSR, etc.) that require perfectly opaque geometry."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:36
msgid ""
"For this reason, materials in Godot are assumed opaque unless specified "
"otherwise. The main settings that enable transparency are:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:39
msgid "Transparent flag (this one)"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:40
msgid "Blend mode set to other than \"Mix\""
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:41
msgid "Enabling distance or proximity fade"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:44
msgid "Unshaded"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:46
msgid ""
"In most cases it is common for materials to be affected by lighting (shaded)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:48
msgid ""
"However, in some cases you might want to show just the albedo (color) and "
"ignore the rest. Toggling this flag on will remove all shading and display "
"pure, unlit color."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:55
msgid "Vertex Lighting"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:57
msgid ""
"Godot has a more or less uniform cost per pixel thanks to depth pre-pass. "
"All lighting calculations are made by running the lighting shader on every "
"pixel."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:60
msgid ""
"As these calculations are costly, performance can be brought down "
"considerably in some corner cases such as drawing several layers of "
"transparency (which is common in particle systems). Switching to per-vertex "
"lighting may help in these cases."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:65
msgid ""
"Additionally, on low-end or mobile devices, switching to vertex lighting can "
"considerably increase rendering performance."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:70
msgid ""
"Keep in mind that when vertex lighting is enabled, only directional lighting "
"can produce shadows (for performance reasons)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:74
msgid "No Depth Test"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:76
msgid ""
"In order for close objects to appear over far away objects, depth testing is "
"performed. Disabling it has the result of objects appearing over (or under) "
"everything else."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:80
msgid ""
"Disabling this makes the most sense for drawing indicators in world space, "
"and works very well with the *Render Priority* property of Material (see the "
"bottom of this page)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:87
msgid "Use Point Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:89
msgid ""
"This option is only effective when the geometry rendered is made of points "
"(generally it's made of triangles when imported from 3D DCCs). If so, then "
"those points can be resized (see below)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:94
msgid "World Triplanar"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:96
msgid ""
"When using triplanar mapping (see below, in the UV1 and UV2 settings), "
"triplanar is computed in object local space. This option makes triplanar "
"work in world space."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:101
msgid "Fixed Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:103
msgid ""
"This causes the object to be rendered at the same size no matter the "
"distance. This is useful mostly for indicators (no depth test and high "
"render priority) and some types of billboards."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:108
msgid "Do Not Receive Shadows"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:110
msgid ""
"Makes the object not receive any kind of shadow that would otherwise be cast "
"onto it."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:114
msgid "Disable Ambient Light"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:116
msgid ""
"Makes the object not receive any kind of ambient lighting that would "
"otherwise light it."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:120
msgid "Vertex Color"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:122
msgid ""
"This setting allows choosing what is done by default to vertex colors that "
"come from your 3D modelling application. By default they are ignored."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:128
msgid "Use as Albedo"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:130
msgid "Choosing this option means vertex color is used as albedo color."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:133
msgid "Is sRGB"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:135
msgid ""
"Most 3D DCCs will likely export vertex colors as sRGB, so toggling this "
"option on will help them look correct."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:139
#: ../../docs/tutorials/platform/services_for_ios.rst:87
#: ../../docs/tutorials/platform/services_for_ios.rst:127
#: ../../docs/tutorials/platform/services_for_ios.rst:196
#: ../../docs/tutorials/platform/services_for_ios.rst:240
#: ../../docs/tutorials/platform/services_for_ios.rst:385
msgid "Parameters"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:141
msgid ""
"``SpatialMaterial`` also has several configurable parameters to tweak many "
"aspects of the rendering:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:147
msgid "Diffuse Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:149
msgid ""
"Specifies the algorithm used by diffuse scattering of light when hitting the "
"object. The default is *Burley*. Other modes are also available:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:152
msgid ""
"**Burley:** Default mode, the original Disney Principled PBS diffuse "
"algorithm."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:153
msgid "**Lambert:** Is not affected by roughness."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:154
msgid ""
"**Lambert Wrap:** Extends Lambert to cover more than 90 degrees when "
"roughness increases. Works great for hair and simulating cheap subsurface "
"scattering. This implementation is energy conserving."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:157
msgid ""
"**Oren Nayar:** This implementation aims to take microsurfacing into account "
"(via roughness). Works well for clay-like materials and some types of cloth."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:159
msgid ""
"**Toon:** Provides a hard cut for lighting, with smoothing affected by "
"roughness. It is recommended you disable sky contribution from your "
"environment's ambient light settings or disable ambient light in the spatial "
"material to achieve a better effect."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:167
msgid "Specular Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:169
msgid ""
"Specifies how the specular blob will be rendered. The specular blob "
"represents the shape of a light source reflected in the object."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:172
msgid "**ShlickGGX:** The most common blob used by PBR 3D engines nowadays."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:173
msgid ""
"**Blinn:** Common in previous-generation engines. Not worth using nowadays, "
"but left here for the sake of compatibility."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:175
msgid "**Phong:** Same as above."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:176
msgid ""
"**Toon:** Creates a toon blob, which changes size depending on roughness."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:177
msgid "**Disabled:** Sometimes the blob gets in the way. Begone!"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:182
msgid "Blend Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:184
msgid ""
"Controls the blend mode for the material. Keep in mind that any mode other "
"than *Mix* forces the object to go through the transparent pipeline."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:187
msgid ""
"**Mix:** Default blend mode, alpha controls how much the object is visible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:188
msgid ""
"**Add:** Object is blended additively, nice for flares or some fire-like "
"effects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:190
msgid "**Sub:** Object is subtracted."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:191
msgid "**Mul:** Object is multiplied."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:196
msgid "Cull Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:198
msgid ""
"Determines which side of the object is not drawn when backfaces are rendered:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:200
msgid "**Back:** The back of the object is culled when not visible (default)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:201
msgid "**Front:** The front of the object is culled when not visible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:202
msgid ""
"**Disabled:** Used for objects that are double-sided (no culling is "
"performed)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:205
msgid "Depth Draw Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:207
msgid "Specifies when depth rendering must take place."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:209
msgid "**Opaque Only (default):** Depth is only drawn for opaque objects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:210
msgid ""
"**Always:** Depth draw is drawn for both opaque and transparent objects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:211
msgid ""
"**Never:** No depth draw takes place (do not confuse this with the No Depth "
"Test option above)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:213
msgid ""
"**Depth Pre-Pass:** For transparent objects, an opaque pass is made first "
"with the opaque parts, then transparency is drawn above. Use this option "
"with transparent grass or tree foliage."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:220
msgid "Line Width"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:222
msgid ""
"When drawing lines, specify the width of the lines being drawn. This option "
"is not available on most modern hardware."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:226
msgid "Point Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:228
msgid "When drawing points, specify the point size in pixels."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:231
msgid "Billboard Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:233
msgid ""
"Enables billboard mode for drawing materials. This controls how the object "
"faces the camera:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:236
msgid "**Disabled:** Billboard mode is disabled."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:237
msgid ""
"**Enabled:** Billboard mode is enabled, the object's -Z axis will always "
"face the camera."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:239
msgid ""
"**Y-Billboard:** The object's X axis will always be aligned with the camera."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:240
msgid ""
"**Particles:** Most suited for particle systems, because it allows "
"specifying animation options."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:245
msgid "The above options are only enabled for Particle Billboard."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:248
msgid "Grow"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:250
msgid "Grows the object vertices in the direction pointed by their normals:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:254
msgid ""
"This is commonly used to create cheap outlines. Add a second material pass, "
"make it black and unshaded, reverse culling (Cull Front), and add some grow:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:261
msgid "Use Alpha Scissor"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:263
msgid ""
"When transparency other than ``0`` or ``1`` is not needed, it's possible to "
"set a threshold to prevent the object from rendering semi-transparent pixels."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:268
msgid ""
"This renders the object via the opaque pipeline, which is faster and allows "
"it to use mid- and post-process effects such as SSAO, SSR, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:272
msgid "Material colors, maps and channels"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:274
msgid ""
"Besides the parameters, what defines materials themselves are the colors, "
"textures, and channels. Godot supports an extensive list of them. They are "
"described in detail below:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:279
msgid "Albedo"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:281
msgid ""
"*Albedo* is the base color for the material, on which all the other settings "
"operate. When set to *Unshaded*, this is the only color that is visible. In "
"previous versions of Godot, this channel was named *Diffuse*. The change of "
"name mainly happened because, in PBR (Physically Based Rendering), this "
"color affects many more calculations than just the diffuse lighting path."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:287
msgid "Albedo color and texture can be used together as they are multiplied."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:289
msgid ""
"*Alpha channel* in albedo color and texture is also used for the object "
"transparency. If you use a color or texture with *alpha channel*, make sure "
"to either enable transparency or *alpha scissoring* for it to work."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:294
msgid "Metallic"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:296
msgid ""
"Godot uses a metallic model over competing models due to its simplicity. "
"This parameter defines how reflective the material is. The more reflective, "
"the less diffuse/ambient light affects the material and the more light is "
"reflected. This model is called \"energy-conserving\"."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:301
msgid ""
"The *Specular* parameter is a general amount for the reflectivity (unlike "
"*Metallic*, this is not energy-conserving, so leave it at ``0.5`` and don't "
"touch it unless you need to)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:305
msgid ""
"The minimum internal reflectivity is ``0.04``, so it's impossible to make a "
"material completely unreflective, just like in real life."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:311
msgid "Roughness"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:313
msgid ""
"*Roughness* affects the way reflection happens. A value of ``0`` makes it a "
"perfect mirror while a value of ``1`` completely blurs the reflection "
"(simulating natural microsurfacing). Most common types of materials can be "
"achieved with the right combination of *Metallic* and *Roughness*."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:321
msgid "Emission"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:323
msgid ""
"*Emission* specifies how much light is emitted by the material (keep in mind "
"this does not include light surrounding geometry unless :ref:`doc_gi_probes` "
"are used). This value is added to the resulting final image and is not "
"affected by other lighting in the scene."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:331
msgid "Normalmap"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:333
msgid ""
"Normal mapping allows you to set a texture that represents finer shape "
"detail. This does not modify geometry, only the incident angle for light. In "
"Godot, only the red and green channels of normal maps are used for wider "
"compatibility."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:340
msgid "Rim"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:342
msgid ""
"Some fabrics have small micro-fur that causes light to scatter around it. "
"Godot emulates this with the *Rim* parameter. Unlike other rim lighting "
"implementations, which just use the emission channel, this one actually "
"takes light into account (no light means no rim). This makes the effect "
"considerably more believable."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:349
msgid ""
"Rim size depends on roughness, and there is a special parameter to specify "
"how it must be colored. If *Tint* is ``0``, the color of the light is used "
"for the rim. If *Tint* is ``1``, then the albedo of the material is used. "
"Using intermediate values generally works best."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:355
msgid "Clearcoat"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:357
msgid ""
"The *Clearcoat* parameter is used to add a secondary pass of transparent "
"coat to the material. This is common in car paint and toys. In practice, "
"it's a smaller specular blob added on top of the existing material."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:362
msgid "Anisotropy"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:364
msgid ""
"This changes the shape of the specular blob and aligns it to tangent space. "
"Anisotropy is commonly used with hair, or to make materials such as brushed "
"aluminum more realistic. It works especially well when combined with "
"flowmaps."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:371
msgid "Ambient Occlusion"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:373
msgid ""
"It is possible to specify a baked ambient occlusion map. This map affects "
"how much ambient light reaches each surface of the object (it does not "
"affect direct light by default). While it is possible to use Screen-Space "
"Ambient Occlusion (SSAO) to generate ambient occlusion, nothing beats the "
"quality of a well-baked AO map. It is recommended to bake ambient occlusion "
"whenever possible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:382
msgid "Depth"
msgstr "깊이"

#: ../../docs/tutorials/3d/spatial_material.rst:384
msgid ""
"Setting a depth map on a material produces a ray-marched search to emulate "
"the proper displacement of cavities along the view direction. This is not "
"real added geometry, but an illusion of depth. It may not work for complex "
"objects, but it produces a realistic depth effect for textures. For best "
"results, *Depth* should be used together with normal mapping."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:393
msgid "Subsurface Scattering"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:395
msgid ""
"This effect emulates light that penetrates an object's surface, is "
"scattered, and then comes out. It is useful to create realistic skin, "
"marble, colored liquids, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:402
msgid "Transmission"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:404
msgid ""
"This controls how much light from the lit side (visible to light) is "
"transferred to the dark side (opposite from the light). This works well for "
"thin objects such as plant leaves, grass, human ears, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:411
msgid "Refraction"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:413
msgid ""
"When refraction is enabled, it supersedes alpha blending, and Godot attempts "
"to fetch information from behind the object being rendered instead. This "
"allows distorting the transparency in a way similar to refraction in real "
"life."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:420
msgid "Detail"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:422
msgid ""
"Godot allows using secondary albedo and normal maps to generate a detail "
"texture, which can be blended in many ways. By combining this with secondary "
"UV or triplanar modes, many interesting textures can be achieved."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:429
msgid "UV1 and UV2"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:431
msgid ""
"Godot supports two UV channels per material. Secondary UV is often useful "
"for ambient occlusion or emission (baked light). UVs can be scaled and "
"offset, which is useful when using repeating textures."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:436
msgid "Triplanar Mapping"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:438
msgid ""
"Triplanar mapping is supported for both UV1 and UV2. This is an alternative "
"way to obtain texture coordinates, sometimes called \"Autotexture\". "
"Textures are sampled in X, Y and Z and blended by the normal. Triplanar "
"mapping can be performed in either world space or object space."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:443
msgid ""
"In the image below, you can see how all primitives share the same material "
"with world triplanar, so the brick texture continues smoothly between them."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:449
msgid "Proximity and distance fade"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:451
msgid ""
"Godot allows materials to fade by proximity to each other as well as "
"depending on the distance from the viewer. Proximity fade is useful for "
"effects such as soft particles or a mass of water with a smooth blending to "
"the shores. Distance fade is useful for light shafts or indicators that are "
"only present after a given distance."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:457
msgid ""
"Keep in mind enabling these enables alpha blending, so abusing them for an "
"entire scene is usually not a good idea."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:463
msgid "Render priority"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:465
msgid ""
"The rendering order of objects can be changed, although this is mostly "
"useful for transparent objects (or opaque objects that perform depth draw "
"but no color draw, such as cracks on the floor)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:4
msgid "Lights and shadows"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:9
msgid ""
"Light sources emit light that mixes with the materials and produces a "
"visible result. Light can come from several types of sources in a scene:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:12
msgid ""
"From the Material itself in the form of the emission color (though it does "
"not affect nearby objects unless baked)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:14
msgid "Light Nodes: Directional, Omni and Spot."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:15
msgid "Ambient Light in the :ref:`Environment <class_Environment>`."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:17
msgid "Baked Light (read :ref:`doc_baked_lightmaps`)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:19
msgid ""
"The emission color is a material property. You can read more about it in "
"the :ref:`doc_spatial_material` tutorial."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:23
msgid "Light nodes"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:25
msgid ""
"As mentioned before, there are three types of light nodes: Directional, Omni "
"and Spot. Each has different uses and will be described in detail below, but "
"first let's take a look at the common parameters for lights:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:32
msgid "Each one has a specific function:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:34
msgid "**Color**: Base color for emitted light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:35
msgid ""
"**Energy**: Energy multiplier. This is useful for saturating lights or "
"working with :ref:`doc_high_dynamic_range`."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:36
msgid ""
"**Indirect Energy**: Secondary multiplier used with indirect light (light "
"bounces). This works in baked light or GIProbe."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:37
msgid ""
"**Negative**: Light becomes subtractive instead of additive. It's sometimes "
"useful to manually compensate some dark corners."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:38
msgid ""
"**Specular**: Affects the intensity of the specular blob in objects affected "
"by this light. At zero, this light becomes a pure diffuse light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:39
msgid ""
"**Cull Mask**: Objects that are in the selected layers below will be "
"affected by this light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:42
msgid "Shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:44
msgid ""
"Lights can optionally cast shadows. This gives them greater realism (light "
"does not reach occluded areas), but it can incur a bigger performance cost. "
"There is a list of generic shadow parameters, each also has a specific "
"function:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:48
msgid "**Enabled**: Check to enable shadow mapping in this light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:49
msgid ""
"**Color**: Areas occluded are multiplied by this color. It is black by "
"default, but it can be changed to tint shadows."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:50
msgid ""
"**Bias**: When this parameter is too small, self shadowing occurs. When too "
"large, shadows separate from the casters. Tweak to what works best for you."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:51
msgid ""
"**Contact**: Performs a short screen-space raycast to reduce the gap "
"generated by the bias."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:52
msgid ""
"**Reverse Cull Faces**: Some scenes work better when shadow mapping is "
"rendered with face-culling inverted."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:54
msgid ""
"Below is an image of what tweaking bias looks like. Default values work for "
"most cases, but in general it depends on the size and complexity of geometry."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:59
msgid "Finally, if gaps can't be solved, the **Contact** option can help:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:63
msgid ""
"Any sort of bias issues can always be fixed by increasing the shadow map "
"resolution, although that may lead to decreased performance on low-end "
"hardware."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:67
msgid "Directional light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:69
msgid ""
"This is the most common type of light and represents a light source very far "
"away (such as the sun). It is also the cheapest light to compute and should "
"be used whenever possible (although it's not the cheapest shadow-map to "
"compute, but more on that later)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:73
msgid ""
"Directional light models an infinite number of parallel light rays covering "
"the whole scene. The directional light node is represented by a big arrow "
"which indicates the direction of the light rays. However, the position of "
"the node does not affect the lighting at all and can be anywhere."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:80
msgid ""
"Every face whose front-side is hit by the light rays is lit, while the "
"others stay dark. Most light types have specific parameters, but directional "
"lights are pretty simple in nature, so they don't."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:84
msgid "Directional shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:86
msgid ""
"To compute shadow maps, the scene is rendered (only depth) from an "
"orthogonal point of view that covers the whole scene (or up to the max "
"distance). There is, however, a problem with this approach because objects "
"closer to the camera receive blocky shadows."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:92
msgid ""
"To fix this, a technique named \"Parallel Split Shadow Maps\" (or PSSM) is "
"used. This splits the view frustum in 2 or 4 areas. Each area gets its own "
"shadow map. This allows small areas close to the viewer to have the same "
"shadow resolution as a huge, far-away area."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:97
msgid "With this, shadows become more detailed:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:101
msgid "To control PSSM, a number of parameters are exposed:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:105
msgid ""
"Each split distance is controlled relative to the camera far (or shadow "
"**Max Distance** if greater than zero), so *0.0* is the eye position and "
"*1.0* is where the shadow ends at a distance. Splits are in-between. Default "
"values generally work well, but tweaking the first split a bit is common to "
"give more detail to close objects (like a character in a third person game)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:111
msgid ""
"Always make sure to set a shadow *Max Distance* according to what the scene "
"needs. A lower maximum distance will result in better-looking shadows."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:114
msgid ""
"Sometimes, the transition between a split and the next can look bad. To fix "
"this, the **\"Blend Splits\"** option can be turned on, which sacrifices "
"detail in exchange for smoother transitions:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:120
msgid ""
"The **\"Normal Bias\"** parameter can be used to fix special cases of self "
"shadowing when objects are perpendicular to the light. The only downside is "
"that it makes the shadow a bit thinner."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:126
msgid ""
"The **\"Bias Split Scale\"** parameter can control extra bias for the splits "
"that are far away. If self shadowing occurs only on the splits far away, "
"this value can fix them."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:129
msgid "Finally, the **\"Depth Range\"** has two settings:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:131
msgid ""
"**Stable**: Keeps the shadow stable while the camera moves, and the blocks "
"that appear in the outline when close to the shadow edges remain in-place. "
"This is the default and generally desired, but it reduces the effective "
"shadow resolution."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:132
msgid ""
"**Optimized**: Tries to achieve the maximum resolution available at any "
"given time. This may result in a \"moving saw\" effect on shadow edges, but "
"at the same time the shadow looks more detailed (so this effect may be "
"subtle enough to be forgiven)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:134
msgid "Just experiment which setting works better for your scene."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:136
msgid ""
"Shadowmap size for directional lights can be changed in Project Settings -> "
"Rendering -> Quality:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:140
msgid ""
"Increasing it can solve bias problems, but decrease performance. Shadow "
"mapping is an art of tweaking."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:143
msgid "Omni light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:145
msgid ""
"Omni light is a point source that emits light spherically in all directions "
"up to a given radius."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:150
msgid ""
"In real life, light attenuation is an inverse function, which means omni "
"lights don't have a radius. This is a problem because it means computing "
"several omni lights would become demanding."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:153
msgid ""
"To solve this, a *Range* is introduced together with an attenuation function."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:157
msgid ""
"These two parameters allow tweaking how this works visually in order to find "
"aesthetically pleasing results."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:163
msgid "Omni shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:165
msgid ""
"Omni light shadow mapping is relatively straightforward. The main issue that "
"needs to be considered is the algorithm used to render it."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:168
msgid ""
"Omni Shadows can be rendered as either **\"Dual Paraboloid\" or \"Cube Mapped"
"\"**. The former renders quickly, but can cause deformations, while the "
"later is more correct, but costlier."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:174
msgid ""
"If the objects being rendered are mostly irregular, Dual Paraboloid is "
"usually enough. In any case, as these shadows are cached in a shadow atlas "
"(more on that at the end), it may not make a difference in performance for "
"most scenes."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:179
msgid "Spot light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:181
msgid ""
"Spot lights are similar to omni lights, except they emit light only into a "
"cone (or \"cutoff\"). They are useful to simulate flashlights, car lights, "
"reflectors, spots, etc. This type of light is also attenuated towards the "
"opposite direction it points to."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:188
msgid ""
"Spot lights share the same **Range** and **Attenuation** as **OmniLight**, "
"and add two extra parameters:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:190
msgid "**Angle**: The aperture angle of the light"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:191
msgid ""
"**Angle Attenuation**: The cone attenuation, which helps soften the cone "
"borders."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:194
msgid "Spot shadow mapping"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:196
msgid ""
"Spots don't need any parameters for shadow mapping. Keep in mind that, at "
"more than 89 degrees of aperture, shadows stop functioning for spots, and "
"you should consider using an Omni light instead."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:200
msgid "Shadow atlas"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:202
msgid ""
"Unlike Directional lights, which have their own shadow texture, Omni and "
"Spot lights are assigned to slots of a shadow atlas. This atlas can be "
"configured in Project Settings -> Rendering -> Quality -> Shadow Atlas."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:207
msgid ""
"The resolution applies to the whole Shadow Atlas. This atlas is divided into "
"four quadrants:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:211
msgid ""
"Each quadrant can be subdivided to allocate any number of shadow maps; the "
"following is the default subdivision:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:215
msgid ""
"The allocation logic is simple. The biggest shadow map size (when no "
"subdivision is used) represents a light the size of the screen (or bigger). "
"Subdivisions (smaller maps) represent shadows for lights that are further "
"away from view and proportionally smaller."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:220
msgid "Every frame, the following procedure is performed for all lights:"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:222
msgid ""
"Check if the light is on a slot of the right size. If not, re-render it and "
"move it to a larger/smaller slot."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:223
msgid ""
"Check if any object affecting the shadow map has changed. If it did, re-"
"render the light."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:224
msgid ""
"If neither of the above has happened, nothing is done, and the shadow is "
"left untouched."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:226
msgid ""
"If the slots in a quadrant are full, lights are pushed back to smaller "
"slots, depending on size and distance."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:228
msgid ""
"This allocation strategy works for most games, but you may want to use a "
"separate one in some cases (for example, a top-down game where all lights "
"are around the same size and quadrants may all have the same subdivision)."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:232
msgid "Shadow filter quality"
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:234
msgid ""
"The filter quality of shadows can be tweaked. This can be found in Project "
"Settings -> Rendering -> Quality -> Shadows. Godot supports no filter, PCF5 "
"and PCF13."
msgstr ""

#: ../../docs/tutorials/3d/lights_and_shadows.rst:240
msgid "It affects the blockyness of the shadow outline:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:4
msgid "Reflection probes"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:9
msgid ""
"As stated in the :ref:`doc_spatial_material`, objects can show reflected or "
"diffuse light. Reflection probes are used as a source of reflected and "
"ambient light for objects inside their area of influence."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:12
msgid ""
"A probe of this type captures the surroundings (as a sort of 360 degrees "
"image), and stores versions of it with increasing levels of *blur*. This is "
"used to simulate roughness in materials, as well as ambient lighting."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:15
msgid ""
"While these probes are an efficient way of storing reflections, they have a "
"few shortcomings:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:17
msgid ""
"They are efficient to render, but expensive to compute. This leads to a "
"default behavior where they only capture on scene load."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:18
msgid ""
"They work best for rectangular shaped rooms or places, otherwise the "
"reflections shown are not as faithful (especially when roughness is 0)."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:23
msgid ""
"Create a ReflectionProbe node and wrap it around the area where you want to "
"have reflections:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:27
msgid ""
"This should result in immediate local reflections. If you are using a Sky "
"texture, reflections are by default blended with it."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:30
msgid ""
"By default, on interiors, reflections may appear not to have much "
"consistence. In this scenario, make sure to tick the *\"Box Correct\"* "
"property."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:36
msgid ""
"This setting changes the reflection from an infinite skybox to reflecting a "
"box the size of the probe:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:41
msgid ""
"Adjusting the box walls may help improve the reflection a bit, but it will "
"always look best in box shaped rooms."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:44
msgid ""
"The probe captures the surrounding from the center of the gizmo. If, for "
"some reason, the room shape or contents occlude the center, it can be "
"displaced to an empty place by moving the handles in the center:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:50
msgid ""
"By default, shadow mapping is disabled when rendering probes (only in the "
"rendered image inside the probe, not the actual scene). This is a simple way "
"to save on performance and memory. If you want shadows in the probe, they "
"can be toggled on/off with the *Enable Shadow* setting:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:57
msgid ""
"Finally, keep in mind that you may not want the Reflection Probe to render "
"some objects. A typical scenario is an enemy inside the room which will move "
"around. To keep objects from being rendered in the reflections, use the "
"*Cull Mask* setting:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:65
#: ../../docs/tutorials/3d/gi_probes.rst:84
msgid "Interior vs exterior"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:67
msgid ""
"If you are using reflection probes in an interior setting, it is recommended "
"that the **Interior** property be enabled. This stops the probe from "
"rendering the sky and also allows custom ambient lighting settings."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:73
msgid ""
"When probes are set to **Interior**, custom constant ambient lighting can be "
"specified per probe. Just choose a color and an energy."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:76
msgid ""
"Optionally, you can blend this ambient light with the probe diffuse capture "
"by tweaking the **Ambient Contribution** property (0.0 means pure ambient "
"color, while 1.0 means pure diffuse capture)."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:81
msgid "Blending"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:83
msgid ""
"Multiple reflection probes can be used, and Godot will blend them where they "
"overlap using a smart algorithm:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:87
msgid ""
"As you can see, this blending is never perfect (after all, these are box "
"reflections, not real reflections), but these artifacts are only visible "
"when using perfectly mirrored reflections. Normally, scenes have normal "
"mapping and varying levels of roughness, which can hide this."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:93
msgid ""
"Alternatively, Reflection Probes work well blended together with Screen "
"Space Reflections to solve these problems. Combining them makes local "
"reflections appear more faithful, while probes are only used as a fallback "
"when no screen-space information is found:"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:99
msgid ""
"Finally, blending interior and exterior probes is the recommended approach "
"when making levels that combine both interiors and exteriors. Near the door, "
"a probe can be marked as *exterior* (so it will get sky reflections) while "
"on the inside, it can be interior."
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:104
msgid "Reflection atlas"
msgstr ""

#: ../../docs/tutorials/3d/reflection_probes.rst:106
msgid ""
"In the current renderer implementation, all probes are the same size and are "
"fit into a Reflection Atlas. The size and amount of probes can be customized "
"in Project Settings -> Quality -> Reflections"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:4
msgid "GI Probes"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:9
msgid ""
"Just like with :ref:`doc_reflection_probes`, and as stated in the :ref:"
"`doc_spatial_material`, objects can show reflected or diffuse light. GI "
"Probes are similar to Reflection Probes, but they use a different and more "
"complex technique to produce indirect light and reflections."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:14
msgid ""
"The strength of GI Probes is real-time, high quality, indirect light. While "
"the scene needs a quick pre-bake for the static objects that will be used, "
"lights can be added, changed or removed, and this will be updated in real-"
"time. Dynamic objects that move within one of these probes will also receive "
"indirect lighting from the scene automatically."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:20
msgid ""
"Just like with ``ReflectionProbe``, ``GIProbe`` can be blended (in a bit "
"more limited way), so it is possible to provide full real-time lighting for "
"a stage without having to resort to lightmaps."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:24
#, fuzzy
msgid "The main downsides of ``GIProbe`` are:"
msgstr "GIProbe의 주요 단점은 이러합니다:"

#: ../../docs/tutorials/3d/gi_probes.rst:26
msgid ""
"A small amount of light leaking can occur if the level is not carefully "
"designed. This must be artist-tweaked."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:27
msgid ""
"Performance requirements are higher than for lightmaps, so it may not run "
"properly in low-end integrated GPUs (may need to reduce resolution)."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:28
msgid ""
"Reflections are voxelized, so they don't look as sharp as with "
"``ReflectionProbe``. However, in exchange they are volumetric, so any room "
"size or shape works for them. Mixing them with Screen Space Reflection also "
"works well."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:29
msgid ""
"They consume considerably more video memory than Reflection Probes, so they "
"must be used with care in the right subdivision sizes."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:34
msgid ""
"Just like a ``ReflectionProbe``, simply set up the ``GIProbe`` by wrapping "
"it around the geometry that will be affected."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:39
msgid ""
"Afterwards, make sure to enable the geometry will be baked. This is "
"important in order for ``GIProbe`` to recognize objects, otherwise they will "
"be ignored:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:44
msgid ""
"Once the geometry is set up, push the Bake button that appears on the 3D "
"editor toolbar to begin the pre-baking process:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:50
msgid "Adding lights"
msgstr "빛 추가하기"

#: ../../docs/tutorials/3d/gi_probes.rst:52
msgid ""
"Unless there are materials with emission, ``GIProbe`` does nothing by "
"default. Lights need to be added to the scene to have an effect."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:55
msgid ""
"The effect of indirect light can be viewed quickly (it is recommended you "
"turn off all ambient/sky lighting to tweak this, though, as shown below):"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:60
msgid ""
"In some situations, though, indirect light may be too weak. Lights have an "
"indirect multiplier to tweak this:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:65
msgid ""
"And, as ``GIProbe`` lighting updates in real-time, this effect is immediate:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:70
msgid "Reflections"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:72
msgid ""
"For very metallic materials with low roughness, it's possible to appreciate "
"voxel reflections. Keep in mind that these have far less detail than "
"Reflection Probes or Screen Space Reflections, but fully reflect "
"volumetrically."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:78
msgid ""
"``GIProbe``\\ s can be easily mixed with Reflection Probes and Screen Space "
"Reflections, as a full 3-stage fallback-chain. This allows to have precise "
"reflections where needed:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:86
msgid ""
"GI Probes normally allow mixing with lighting from the sky. This can be "
"disabled when turning on the *Interior* setting."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:91
msgid ""
"The difference becomes clear in the image below, where light from the sky "
"goes from spreading inside to being ignored."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:96
msgid ""
"As complex buildings may mix interiors with exteriors, combining GIProbes "
"for both parts works well."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:100
msgid "Tweaking"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:102
msgid "GI Probes support a few parameters for tweaking:"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:106
msgid ""
"**Subdiv** Subdivision used for the probe. The default (128) is generally "
"good for small- to medium-sized areas. Bigger subdivisions use more memory."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:107
msgid "**Extents** Size of the probe. Can be tweaked from the gizmo."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:108
msgid ""
"**Dynamic Range** Maximum light energy the probe can absorb. Higher values "
"allow brighter light, but with less color detail."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:109
msgid ""
"**Energy** Multiplier for all the probe. Can be used to make the indirect "
"light brighter (although it's better to tweak this from the light itself)."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:110
msgid "**Propagation** How much light propagates through the probe internally."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:111
msgid ""
"**Bias** Value used to avoid self-occlusion when doing voxel cone tracing, "
"should generally be above 1.0 (1==voxel size)."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:112
msgid ""
"**Normal Bias** Alternative type of bias useful for some scenes. Experiment "
"with this one if regular bias does not work."
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:115
msgid "Quality"
msgstr ""

#: ../../docs/tutorials/3d/gi_probes.rst:117
msgid ""
"``GIProbe``\\ s are quite demanding. It is possible to use lower quality "
"voxel cone tracing in exchange for more performance."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:4
msgid "Baked lightmaps"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:9
msgid ""
"Baked lightmaps are an alternative workflow for adding indirect (or baked) "
"lighting to a scene. Unlike the :ref:`doc_gi_probes` approach, baked "
"lightmaps work fine on low-end PCs and mobile devices, as they consume "
"almost no resources at run-time."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:14
msgid ""
"Unlike ``GIProbe``\\ s, Baked Lightmaps are completely static. Once baked, "
"they can't be modified at all. They also don't provide the scene with "
"reflections, so using :ref:`doc_reflection_probes` together with it on "
"interiors (or using a Sky on exteriors) is a requirement to get good quality."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:19
msgid ""
"As they are baked, they have fewer problems than ``GIProbe`` regarding light "
"bleeding, and indirect light can look better if using Raytrace mode on high "
"quality setting (but baking can take a while)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:23
msgid ""
"In the end, deciding which indirect lighting approach is better depends on "
"your use case. In general, GIProbe looks better and is much easier to set "
"up. For mobile or low-end compatibility, though, Baked Lightmaps are your "
"only choice."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:29
msgid "Visual comparison"
msgstr "시각적 비교"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:31
msgid ""
"Here are some comparisons of how Baked Lightmaps vs. GIProbe look. Notice "
"that lightmaps are more accurate, but also suffer from the fact that "
"lighting is on an unwrapped texture, so transitions and resolution may not "
"be that good. GIProbe looks less accurate (as it's an approximation), but "
"smoother overall."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:42
msgid ""
"First of all, before the lightmapper can do anything, the objects to be "
"baked need an UV2 layer and a texture size. An UV2 layer is a set of "
"secondary texture coordinates that ensures any face in the object has its "
"own place in the UV map. Faces must not share pixels in the texture."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:47
msgid ""
"There are a few ways to ensure your object has a unique UV2 layer and "
"texture size:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:50
msgid "Unwrap from your 3D DCC"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:52
msgid ""
"One option is to do it from your favorite 3D app. This approach is generally "
"not recommended, but it's explained first so that you know it exists. The "
"main advantage is that, on complex objects that you may want to re-import a "
"lot, the texture generation process can be quite costly within Godot, so "
"having it unwrapped before import can be faster."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:58
msgid "Simply do an unwrap on the second UV2 layer."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:62
msgid ""
"And import normally. Remember you will need to set the texture size on the "
"mesh after import."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:67
msgid ""
"If you use external meshes on import, the size will be kept. Be wary that "
"most unwrappers in 3D DCCs are not quality oriented, as they are meant to "
"work quickly. You will mostly need to use seams or other techniques to "
"create better unwrapping."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:73
msgid "Unwrap from within Godot"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:75
msgid ""
"Godot has an option to unwrap meshes and visualize the UV channels. It can "
"be found in the Mesh menu:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:80
msgid ""
"This will generate a second set of UV2 coordinates which can be used for "
"baking, and it will also set the texture size automatically."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:84
msgid "Unwrap on scene import"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:86
msgid ""
"This is probably the best approach overall. The only downside is that, on "
"large models, unwrapping can take a while on import. Just select the "
"imported scene in the filesystem dock, then go to the Import tab. There, the "
"following option can be modified:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:93
msgid ""
"The **Light Baking** mode needs to be set to **\"Gen Lightmaps\"**. A texel "
"size in world units must also be provided, as this will determine the final "
"size of the lightmap texture (and, in consequence, the UV padding in the "
"map)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:97
msgid ""
"The effect of setting this option is that all meshes within the scene will "
"have their UV2 maps properly generated."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:100
msgid ""
"As a word of warning: When reusing a mesh within a scene, keep in mind that "
"UVs will be generated for the first instance found. If the mesh is re-used "
"with different scales (and the scales are wildly different, more than half "
"or twice), this will result in inefficient lightmaps. Just don't reuse a "
"source mesh at different scales if you are planning to use lightmapping."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:107
msgid "Checking UV2"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:109
msgid ""
"In the mesh menu mentioned before, the UV2 texture coordinates can be "
"visualized. Make sure, if something is failing, to check that the meshes "
"have these UV2 coordinates:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:115
msgid "Setting up the scene"
msgstr "씬 설정하기"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:117
msgid ""
"Before anything is done, a **BakedLightmap** Node needs to be added to a "
"scene. This will enable light baking on all nodes (and sub-nodes) in that "
"scene, even on instanced scenes."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:123
msgid ""
"A sub-scene can be instanced several times, as this is supported by the "
"baker, and each will be assigned a lightmap of its own (just make sure to "
"respect the rule about scaling mentioned before):"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:128
msgid "Configure bounds"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:130
msgid ""
"Lightmap needs an approximate volume of the area affected because it uses it "
"to transfer light to dynamic objects inside it (more on that later). Just "
"cover the scene with the volume as you do with ``GIProbe``:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:137
msgid "Setting up meshes"
msgstr "메시(mesh) 설정하기"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:139
msgid ""
"For a **MeshInstance** node to take part in the baking process, it needs to "
"have the \"Use in Baked Light\" property enabled."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:144
msgid ""
"When auto-generating lightmaps on scene import, this is enabled "
"automatically."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:147
msgid "Setting up lights"
msgstr "빛 설정하기"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:149
msgid ""
"Lights are baked with indirect light by default. This means that "
"shadowmapping and lighting are still dynamic and affect moving objects, but "
"light bounces from that light will be baked."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:153
msgid ""
"Lights can be disabled (no bake) or be fully baked (direct and indirect). "
"This can be controlled from the **Bake Mode** menu in lights:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:158
msgid "The modes are:"
msgstr "이 모드는:"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:160
msgid ""
"**Disabled:** Light is ignored in baking. Keep in mind hiding a light will "
"have no effect for baking, so this must be used instead."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:161
msgid ""
"**Indirect:** This is the default mode. Only indirect lighting will be baked."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:162
msgid ""
"**All:** Both indirect and direct lighting will be baked. If you don't want "
"the light to appear twice (dynamically and statically), simply hide it."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:165
msgid "Baking quality"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:167
msgid ""
"``BakedLightmap`` uses, for simplicity, a voxelized version of the scene to "
"compute lighting. Voxel size can be adjusted with the **Bake Subdiv** "
"parameter. More subdivision results in more detail, but also takes more time "
"to bake."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:171
msgid ""
"In general, the defaults are good enough. There is also a **Capture "
"Subdivision** (that must always be equal to or less than the main "
"subdivision), which is used for capturing light in dynamic objects (more on "
"that later). Its default value is also good enough for most cases."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:178
msgid ""
"Besides the capture size, quality can be modified by setting the **Bake "
"Mode**. Two modes of capturing indirect are provided:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:183
msgid ""
"**Voxel Cone**: Trace: Is the default one; it's less precise, but faster. "
"Looks similar to (but slightly better than) ``GIProbe``."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:184
msgid ""
"**Ray Tracing**: This method is more precise, but can take considerably "
"longer to bake. If used in low or medium quality, some scenes may produce "
"grain."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:187
msgid "Baking"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:189
msgid ""
"To begin the bake process, just push the big **Bake Lightmaps** button on "
"top when selecting the ``BakedLightmap`` node:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:194
msgid ""
"This can take from seconds to minutes (or hours) depending on scene size, "
"bake method and quality selected."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:198
msgid "Configuring bake"
msgstr "베이크 구성"

#: ../../docs/tutorials/3d/baked_lightmaps.rst:200
msgid "Several more options are present for baking:"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:202
msgid ""
"**Bake Subdiv**: The Godot lightmapper uses a grid to transfer light "
"information around; the default value is fine and should work for most "
"cases. Increase it in case you want better lighting on small details or your "
"scene is large."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:203
msgid ""
"**Capture Subdiv**: This is the grid used for real-time capture information "
"(lighting dynamic objects). Default value is generally OK, it's usually "
"smaller than Bake Subdiv and can't be larger than it."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:204
msgid ""
"**Bake Quality**: Three bake quality modes are provided, Low, Medium and "
"High. Higher quality takes more time."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:205
msgid ""
"**Bake Mode**: The baker can use two different techniques: *Voxel Cone "
"Tracing* (fast, but approximate), or *RayTracing* (slow, but accurate)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:206
msgid ""
"**Propagation**: Used for the *Voxel Cone Trace* mode. Works just like in "
"``GIProbe``."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:207
msgid ""
"**HDR**: If disabled, lightmaps are smaller, but can't capture any light "
"over white (1.0)."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:208
msgid ""
"**Image Path**: Where lightmaps will be saved. By default, on the same "
"directory as the scene (\".\"), but can be tweaked."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:209
msgid "**Extents**: Size of the area affected (can be edited visually)"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:210
msgid ""
"**Light Data**: Contains the light baked data after baking. Textures are "
"saved to disk, but this also contains the capture data for dynamic objects, "
"which can be a bit heavy. If you are using .tscn formats (instead of .scn), "
"you can save it to disk."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:213
msgid "Dynamic objects"
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:215
msgid ""
"In other engines or lightmapper implementations, you are required to "
"manually place small objects called \"lightprobes\" all around the level to "
"generate *capture* data. This is used to, then, transfer the light to "
"dynamic objects that move around the scene."
msgstr ""

#: ../../docs/tutorials/3d/baked_lightmaps.rst:220
msgid ""
"However, this implementation of lightmapping uses a different method. The "
"process is automatic, so you don't have to do anything. Just move your "
"objects around, and they will be lit accordingly. Of course, you have to "
"make sure you set up your scene bounds accordingly or it won't work."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:4
msgid "Environment and post-processing"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:6
msgid ""
"Godot 3 provides a redesigned Environment resource, as well as a brand new "
"post-processing system with many available effects right out of the box."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:12
msgid ""
"The Environment resource stores all the information required for controlling "
"rendering environment. This includes sky, ambient lighting, tone mapping, "
"effects, and adjustments. By itself it does nothing, but it becomes enabled "
"once used in one of the following locations in order of priority:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:18
msgid "Camera node"
msgstr "카메라 노드"

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:20
msgid ""
"An Environment can be set to a camera. It will have priority over any other "
"setting."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:24
msgid ""
"This is mostly useful when wanting to override an existing environment, but "
"in general it's a better idea to use the option below."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:28
msgid "WorldEnvironment node"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:30
msgid ""
"The WorldEnvironment node can be added to any scene, but only one can exist "
"per active scene tree. Adding more than one will result in a warning."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:35
msgid ""
"Any Environment added has higher priority than the default Environment "
"(explained below). This means it can be overridden on a per-scene basis, "
"which makes it quite useful."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:42
msgid ""
"A default environment can be set, which acts as a fallback when no "
"Environment was set to a Camera or WorldEnvironment. Just head to Project "
"Settings -> Rendering -> Environment:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:48
msgid ""
"New projects created from the Project Manager come with a default "
"environment (``default_env.tres``). If one needs to be created, save it to "
"disk before referencing it here."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:53
msgid "Environment options"
msgstr "환경 옵션"

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:55
msgid ""
"Following is a detailed description of all environment options and how they "
"are intended to be used."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:61
msgid ""
"The Background section contains settings on how to fill the background "
"(parts of the screen where objects were not drawn). In Godot 3.0, the "
"background not only serves the purpose of displaying an image or color, it "
"can also change how objects are affected by ambient and reflected light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:68
msgid "There are many ways to set the background:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:70
msgid ""
"**Clear Color** uses the default clear color defined by the project. The "
"background will be a constant color."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:71
msgid "**Custom Color** is like Clear Color, but with a custom color value."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:72
msgid ""
"**Sky** lets you define a panorama sky (a 360 degree sphere texture) or a "
"procedural sky (a simple sky featuring a gradient and an optional sun). "
"Objects will reflect it and absorb ambient light from it."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:73
msgid ""
"**Color+Sky** lets you define a sky (as above), but uses a constant color "
"value for drawing the background. The sky will only be used for reflection "
"and ambient light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:76
msgid "Ambient Light"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:78
msgid ""
"Ambient (as defined here) is a type of light that affects every piece of "
"geometry with the same intensity. It is global and independent of lights "
"that might be added to the scene."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:82
msgid ""
"There are two types of ambient light: the *Ambient Color* (which is a "
"constant color multiplied by the material albedo) and then one obtained from "
"the *Sky* (as described before, but a sky needs to be set as background for "
"this to be enabled)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:89
msgid ""
"When a *Sky* is set as background, it's possible to blend between ambient "
"color and sky using the **Sky Contribution** setting (this value is 1.0 by "
"default for convenience, so only the sky affects objects)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:93
msgid "Here is a comparison of how different ambient light affects a scene:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:97
msgid ""
"Finally there is an **Energy** setting, which is a multiplier, useful when "
"working with HDR."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:99
msgid ""
"In general, ambient light should only be used for simple scenes, large "
"exteriors, or for performance reasons (ambient light is cheap), as it does "
"not provide the best lighting quality. It's better to generate ambient light "
"from ReflectionProbe or GIProbe, which will more faithfully simulate how "
"indirect light propagates. Below is a comparison, in terms of quality, "
"between using a flat ambient color and a GIProbe:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:108
msgid ""
"Using one of the methods described above, objects get constant ambient "
"lighting replaced by ambient light from the probes."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:112
msgid "Fog"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:114
msgid ""
"Fog, as in real life, makes distant objects fade away into an uniform color. "
"The physical effect is actually pretty complex, but Godot provides a good "
"approximation. There are two kinds of fog in Godot:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:118
msgid ""
"**Depth Fog:** This one is applied based on the distance from the camera."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:119
msgid ""
"**Height Fog:** This one is applied to any objects below (or above) a "
"certain height, regardless of the distance from the camera."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:123
msgid ""
"Both of these fog types can have their curve tweaked, making their "
"transition more or less sharp."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:125
msgid "Two properties can be tweaked to make the fog effect more interesting:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:127
msgid ""
"The first is **Sun Amount**, which makes use of the Sun Color property of "
"the fog. When looking towards a directional light (usually a sun), the color "
"of the fog will be changed, simulating the sunlight passing through the fog."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:131
msgid ""
"The second is **Transmit Enabled** which simulates more realistic light "
"transmittance. In practice, it makes light stand out more across the fog."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:137
msgid "Tonemap"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:139
msgid ""
"Selects the tone-mapping curve that will be applied to the scene, from a "
"short list of standard curves used in the film and game industry. Tone "
"mapping can make light and dark areas more homogeneous, even though the "
"result is not that strong. Tone mapping options are:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:144
msgid ""
"**Mode:** Tone mapping mode, which can be Linear, Reindhart, Filmic, or Aces."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:145
msgid ""
"**Exposure:** Tone mapping exposure which simulates amount of light received "
"over time."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:146
msgid ""
"**White:** Tone mapping white, which simulates where in the scale white is "
"located (by default 1.0)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:149
msgid "Auto Exposure (HDR)"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:151
msgid ""
"Even though, in most cases, lighting and texturing are heavily artist "
"controlled, Godot supports a simple high dynamic range implementation with "
"the auto exposure mechanism. This is generally used for the sake of realism "
"when combining interior areas with low light and outdoors. Auto exposure "
"simulates the camera (or eye) in an effort to adapt between light and dark "
"locations and their different amounts of light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:160
msgid ""
"The simplest way to use auto exposure is to make sure outdoor lights (or "
"other strong lights) have energy beyond 1.0. This is done by tweaking their "
"**Energy** multiplier (on the Light itself). To make it consistent, the "
"**Sky** usually needs to use the energy multiplier too, to match with the "
"directional light. Normally, values between 3.0 and 6.0 are enough to "
"simulate indoor-outdoor conditions."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:166
msgid ""
"By combining Auto Exposure with *Glow* post processing (more on that below), "
"pixels that go over the tonemap **White** will bleed to the glow buffer, "
"creating the typical bloom effect in photography."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:172
msgid ""
"The user-controllable values in the Auto Exposure section come with sensible "
"defaults, but you can still tweak them:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:177
msgid ""
"**Scale:** Value to scale the lighting. Brighter values produce brighter "
"images, smaller ones produce darker ones."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:178
msgid ""
"**Min Luma:** Minimum luminance that auto exposure will aim to adjust for. "
"Luminance is the average of the light in all the pixels of the screen."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:179
msgid ""
"**Max Luma:** Maximum luminance that auto exposure will aim to adjust for."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:180
msgid ""
"**Speed:** Speed at which luminance corrects itself. The higher the value, "
"the faster correction happens."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:183
msgid "Mid- and post-processing effects"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:185
msgid ""
"A large amount of widely-used mid- and post-processing effects are supported "
"in the Environment."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:189
msgid "Screen-Space Reflections (SSR)"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:191
msgid ""
"While Godot supports three sources of reflection data (Sky, ReflectionProbe, "
"and GIProbe), they may not provide enough detail for all situations. "
"Scenarios where Screen Space Reflections make the most sense are when "
"objects are in contact with each other (object over floor, over a table, "
"floating on water, etc)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:198
msgid ""
"The other advantage (even if only enabled to a minimum), is that it works in "
"real-time (while the other types of reflections are pre-computed). This can "
"be used to make characters, cars, etc. reflect on surrounding surfaces when "
"moving around."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:202
msgid ""
"A few user-controlled parameters are available to better tweak the technique:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:204
msgid ""
"**Max Steps** determines the length of the reflection. The bigger this "
"number, the more costly it is to compute."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:205
msgid ""
"**Fade In** allows adjusting the fade-in curve, which is useful to make the "
"contact area softer."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:206
msgid ""
"**Fade Out** allows adjusting the fade-out curve, so the step limit fades "
"out softly."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:207
msgid ""
"**Depth Tolerance** can be used for screen-space-ray hit tolerance to gaps. "
"The bigger the value, the more gaps will be ignored."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:208
msgid ""
"**Roughness** will apply a screen-space blur to approximate roughness in "
"objects with this material characteristic."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:210
msgid ""
"Keep in mind that screen-space-reflections only work for reflecting opaque "
"geometry. Transparent objects can't be reflected."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:213
msgid "Screen-Space Ambient Occlusion (SSAO)"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:215
msgid ""
"As mentioned in the **Ambient** section, areas where light from light nodes "
"does not reach (either because it's outside the radius or shadowed) are lit "
"with ambient light. Godot can simulate this using GIProbe, ReflectionProbe, "
"the Sky, or a constant ambient color. The problem, however, is that all the "
"methods proposed previously act more on a larger scale (large regions) than "
"at the smaller geometry level."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:222
msgid ""
"Constant ambient color and Sky are the same everywhere, while GI and "
"Reflection probes have more local detail, but not enough to simulate "
"situations where light is not able to fill inside hollow or concave features."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:226
msgid ""
"This can be simulated with Screen Space Ambient Occlusion. As you can see in "
"the image below, its purpose is to make sure concave areas are darker, "
"simulating a narrower path for the light to enter:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:232
msgid ""
"It is a common mistake to enable this effect, turn on a light, and not be "
"able to appreciate it. This is because SSAO only acts on *ambient* light, "
"not direct light."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:235
msgid ""
"This is why, in the image above, the effect is less noticeable under the "
"direct light (on the left). If you want to force SSAO to work with direct "
"light too, use the **Light Affect** parameter (even though this is not "
"correct, some artists like how it looks)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:239
msgid ""
"SSAO looks best when combined with a real source of indirect light, like "
"GIProbe:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:243
msgid "Tweaking SSAO is possible with several parameters:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:247
msgid ""
"**Radius/Intensity:** To control the radius or intensity of the occlusion, "
"these two parameters are available. Radius is in world (Metric) units."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:248
msgid ""
"**Radius2/Intensity2:** A Secondary radius/intensity can be used. Combining "
"a large and a small radius AO generally works well."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:249
msgid ""
"**Bias:** This can be tweaked to solve self occlusion, though the default "
"generally works well enough."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:250
msgid ""
"**Light Affect:** SSAO only affects ambient light, but increasing this "
"slider can make it also affect direct light. Some artists prefer this effect."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:251
msgid ""
"**Quality:** Depending on quality, SSAO will take more samples over a sphere "
"for every pixel. High quality only works well on modern GPUs."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:252
msgid ""
"**Blur:** Type of blur kernel used. The 1x1 kernel is a simple blur that "
"preserves local detail better, but is not as efficient (generally works "
"better with the high quality setting above), while 3x3 will soften the image "
"better (with a bit of dithering-like effect), but does not preserve local "
"detail as well."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:253
msgid ""
"**Edge Sharpness**: This can be used to preserve the sharpness of edges "
"(avoids areas without AO on creases)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:256
msgid "Depth of Field / Far Blur"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:258
msgid ""
"This effect simulates focal distance on high end cameras. It blurs objects "
"behind a given range. It has an initial **Distance** with a **Transition** "
"region (in world units):"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:264
#: ../../docs/tutorials/3d/environment_and_post_processing.rst:276
msgid ""
"The **Amount** parameter controls the amount of blur. For larger blurs, "
"tweaking the **Quality** may be needed in order to avoid artifacts."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:268
msgid "Depth of Field / Near Blur"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:270
msgid ""
"This effect simulates focal distance on high end cameras. It blurs objects "
"close to the camera (acts in the opposite direction as far blur). It has an "
"initial **Distance** with a **Transition** region (in world units):"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:279
msgid ""
"It is common to use both blurs together to focus the viewer's attention on a "
"given object:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:285
msgid "Glow"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:287
msgid ""
"In photography and film, when light amount exceeds the maximum supported by "
"the media (be it analog or digital), it generally bleeds outwards to darker "
"regions of the image. This is simulated in Godot with the **Glow** effect."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:293
msgid ""
"By default, even if the effect is enabled, it will be weak or invisible. One "
"of two conditions need to happen for it to actually show:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:296
msgid ""
"The light in a pixel surpasses the **HDR Threshold** (where 0 is all light "
"surpasses it, and 1.0 is light over the tonemapper **White** value). "
"Normally, this value is expected to be at 1.0, but it can be lowered to "
"allow more light to bleed. There is also an extra parameter, **HDR Scale**, "
"that allows scaling (making brighter or darker) the light surpassing the "
"threshold."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:300
msgid ""
"The Bloom effect has a value set greater than 0. As it increases, it sends "
"the whole screen to the glow processor at higher amounts."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:304
msgid "Both will cause the light to start bleeding out of the brighter areas."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:306
msgid "Once glow is visible, it can be controlled with a few extra parameters:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:308
msgid ""
"**Intensity** is an overall scale for the effect, it can be made stronger or "
"weaker (0.0 removes it)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:309
msgid ""
"**Strength** is how strong the gaussian filter kernel is processed. Greater "
"values make the filter saturate and expand outwards. In general, changing "
"this is not needed, as the size can be more efficiently adjusted with the "
"**Levels**."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:311
msgid "The **Blend Mode** of the effect can also be changed:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:313
msgid ""
"**Additive** is the strongest one, as it just adds the glow effect over the "
"image with no blending involved. In general, it's too strong to be used, but "
"can look good with low intensity Bloom (produces a dream-like effect)."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:314
msgid ""
"**Screen** is the default one. It ensures glow never brights more than "
"itself and works great as an all around."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:315
msgid ""
"**Softlight** is the weakest one, producing only a subtle color disturbance "
"around the objects. This mode works best on dark scenes."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:316
msgid ""
"**Replace** can be used to blur the whole screen or debug the effect. It "
"just shows the glow effect without the image below."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:318
msgid ""
"To change the glow effect size and shape, Godot provides **Levels**. Smaller "
"levels are strong glows that appear around objects, while large levels are "
"hazy glows covering the whole screen:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:324
msgid ""
"The real strength of this system, though, is to combine levels to create "
"more interesting glow patterns:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:329
msgid ""
"Finally, as the highest layers are created by stretching small blurred "
"images, it is possible that some blockiness may be visible. Enabling "
"**Bicubic Upscaling** gets rids of it, at a minimal performance cost."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:336
msgid "Adjustments"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:338
msgid ""
"At the end of processing, Godot offers the possibility to do some standard "
"image adjustments."
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:343
msgid ""
"The first one is being able to change the typical Brightness, Contrast, and "
"Saturation:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:348
msgid ""
"The second is by supplying a color correction gradient. A regular black to "
"white gradient like the following one will produce no effect:"
msgstr ""

#: ../../docs/tutorials/3d/environment_and_post_processing.rst:353
msgid ""
"But creating custom ones will allow to map each channel to a different color:"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:4
msgid "High dynamic range"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:9
msgid ""
"Normally, an artist does all the 3D modelling, then all the texturing, looks "
"at their awesome looking model in the 3D DCC and says \"looks fantastic, "
"ready for integration!\" then goes into the game, lighting is setup and the "
"game runs."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:14
msgid ""
"So at what point does all this HDR business come into play? The idea is that "
"instead of dealing with colors that go from black to white (0 to 1), we use "
"colors whiter than white (for example, 0 to 8 times white)."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:18
msgid ""
"To be more practical, imagine that in a regular scene, the intensity of a "
"light (generally 1.0) is set to 5.0. The whole scene will turn very bright "
"(towards white) and look horrible."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:22
msgid ""
"After this, the luminance of the scene is computed by averaging the "
"luminance of every pixel of it, and this value is used to bring the scene "
"back to normal ranges. This last operation is called tone-mapping. Finally, "
"we are at a similar place from where we started:"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:30
msgid ""
"Except the scene is more contrasted because there is a higher light range at "
"play. What is this all useful for? The idea is that the scene luminance will "
"change while you move through the world, allowing situations like this to "
"happen:"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:37
msgid ""
"Additionally, it is possible to set a threshold value to send to the glow "
"buffer depending on the pixel luminance. This allows for more realistic "
"light bleeding effects in the scene."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:42
msgid "Linear color space"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:44
msgid ""
"The problem with this technique is that computer monitors apply a gamma "
"curve to adapt better to the way the human eye sees. Artists create their "
"art on the screen too, so their art has an implicit gamma curve applied to "
"it."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:49
msgid ""
"The color space where images created on computer monitors exist is called "
"\"sRGB\". All visual content that people have on their computers or download "
"from the internet (such as pictures, movies, etc.) is in this colorspace."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:56
msgid ""
"The mathematics of HDR require that we multiply the scene by different "
"values to adjust the luminance and exposure to different light ranges, and "
"this curve gets in the way, as we need colors in linear space for this."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:62
msgid "Linear color space & asset pipeline"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:64
msgid ""
"Working in HDR is not just pressing a switch. First, imported image assets "
"must be converted to linear space on import. There are two ways to do this:"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:69
msgid "sRGB -> linear conversion on image import"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:71
msgid ""
"This is the most compatible way of using linear-space assets, and it will "
"work everywhere, including all mobile devices. The main issue with this is "
"loss of quality, as sRGB exists to avoid this same problem. Using 8 bits per "
"channel to represent linear colors is inefficient from the point of view of "
"the human eye. These textures might later be compressed too, which makes the "
"problem worse."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:78
msgid "In any case, though, this is the easy solution that works everywhere."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:81
msgid "Hardware sRGB -> linear conversion"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:83
msgid ""
"This is the most correct way to use assets in linear-space, as the texture "
"sampler on the GPU will do the conversion after reading the texel using "
"floating point. This works fine on PC and consoles, but most mobile devices "
"do no support it, or do not support it on compressed texture format (iOS for "
"example)."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:90
msgid "Linear -> sRGB at the end"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:92
msgid ""
"After all the rendering is done, the linear-space rendered image must be "
"converted back to sRGB. To do this, simply enable sRGB conversion in the "
"current :ref:`Environment <class_Environment>` (more on that below)."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:96
msgid ""
"Keep in mind that sRGB -> Linear and Linear -> sRGB conversions must always "
"be **both** enabled. Failing to enable one of them will result in horrible "
"visuals suitable only for avant-garde experimental indie games."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:102
msgid "Parameters of HDR"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:104
msgid ""
"HDR is found in the :ref:`Environment <class_Environment>` resource. These "
"are found most of the time inside a :ref:`WorldEnvironment "
"<class_WorldEnvironment>` node or set in a camera. There are many parameters "
"for HDR:"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:112
msgid "ToneMapper"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:114
msgid ""
"The ToneMapper is the heart of the algorithm. Many options for tonemappers "
"are provided:"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:117
msgid ""
"**Linear:** Simplest tonemapper. It does its job for adjusting scene "
"brightness, but if the differences in light are too big, it will cause "
"colors to be too saturated."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:120
msgid "**Log:** Similar to linear but not as extreme."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:121
msgid ""
"**Reinhardt:** Classical tonemapper (modified, so it will not desaturate as "
"much)"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:123
msgid ""
"**ReinhardtAutoWhite:** Same as above, but uses the max scene luminance to "
"adjust the white value."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:127
msgid "Exposure"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:129
msgid ""
"The same exposure parameter as in real cameras. Controls how much light "
"enters the camera. Higher values will result in a brighter scene, and lower "
"values will result in a darker scene."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:134
msgid "White"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:136
msgid "Maximum value of white."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:139
msgid "Glow threshold"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:141
msgid ""
"Determines above which value (from 0 to 1 after the scene is tonemapped) "
"light will start bleeding."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:145
msgid "Glow scale"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:147
msgid "Determines how much light will bleed."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:150
msgid "Min luminance"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:152
msgid ""
"Lower bound value of light for the scene at which the tonemapper stops "
"working. This allows dark scenes to remain dark."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:156
msgid "Max luminance"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:158
msgid ""
"Upper bound value of light for the scene at which the tonemapper stops "
"working. This allows bright scenes to remain saturated."
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:162
msgid "Exposure adjustment speed"
msgstr ""

#: ../../docs/tutorials/3d/high_dynamic_range.rst:164
msgid ""
"Auto-exposure will change slowly and will take a while to adjust (like in "
"real cameras). Bigger values mean faster adjustment."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:4
msgid "Using gridmaps"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:9
msgid ""
":ref:`Gridmaps <class_GridMap>` are a tool for creating 3D game levels, "
"similar to the way :ref:`TileMap <doc_using_tilemaps>` works in 2D. You "
"start with a predefined collection of 3D meshes (a :ref:`class_MeshLibrary`) "
"that can be placed on a grid, as if you were building a level with an "
"unlimited amount of Lego blocks."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:15
msgid ""
"Collisions and navigation can also be added to the meshes, just like you "
"would do with the tiles of a tilemap."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:19
msgid "Example project"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:21
msgid ""
"To learn how GridMaps work, start by downloading the sample project: :"
"download:`gridmap_demo.zip <files/gridmap_demo.zip>`."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:24
msgid ""
"Unzip this project and add it to the Project Manager using the \"Import\" "
"button."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:28
msgid "Creating a MeshLibrary"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:30
msgid ""
"To begin, you need a :ref:`class_MeshLibrary`, which is a collection of "
"individual meshes that can be used in the gridmap. Open the "
"\"MeshLibrary_Source.tscn\" scene to see an example of how to set up the "
"mesh library."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:36
msgid ""
"As you can see, this scene has a :ref:`class_Spatial` node as its root, and "
"a number of :ref:`class_MeshInstance` node children."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:39
msgid ""
"If you don't need any physics in your scene, then you're done. However, in "
"most cases you'll want to assign collision bodies to the meshes."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:43
msgid "Collisions"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:45
msgid ""
"You can manually assign a :ref:`class_StaticBody` and :ref:"
"`class_CollisionShape` to each mesh. Alternatively, you can use the \"Mesh\" "
"menu to automatically create the collision body based on the mesh data."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:51
msgid ""
"Note that a \"Convex\" collision body will work better for simple meshes. "
"For more complex shapes, select \"Create Trimesh Static Body\". Once each "
"mesh has a physics body and collision shape assigned, your mesh library is "
"ready to be used."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:60
msgid "Exporting the MeshLibrary"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:62
msgid ""
"To export the library, click on Scene -> Convert To.. -> MeshLibrary.., and "
"save it as a resource."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:67
msgid ""
"You can find an already exported MeshLibrary in the project named "
"\"MeshLibrary.tres\"."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:70
msgid "Using GridMap"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:72
msgid ""
"Create a new scene and add a GridMap node. Add the mesh library by dragging "
"the resource file from the FileSystem dock and dropping it in the \"Theme\" "
"property in the Inspector."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:78
msgid ""
"The \"Cell/Size\" property should be set to the size of your meshes. You can "
"leave it at the default value for the demo. Set the \"Center Y\" property to "
"\"Off\"."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:81
msgid ""
"Now you can start designing the level by choosing a tile from the palette "
"and placing it with Left-Click in the editor window. To remove a tile, use "
"Shift+Right-click."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:85
msgid ""
"Click on the \"GridMap\" menu to see options and shortcuts. For example, "
"pressing \"S\" rotates a tile around the y-axis."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:90
msgid ""
"Holding <Shift> and dragging with the left mouse button will draw a "
"selection box. You can duplicate or clear the selected area using the "
"respective menu options."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:96
msgid ""
"In the menu, you can also change the axis you're drawing on, as well as "
"shift the drawing plane higher or lower on its axis."
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:102
msgid "Using GridMap in code"
msgstr ""

#: ../../docs/tutorials/3d/using_gridmaps.rst:104
msgid ""
"See :ref:`class_GridMap` for details on the node's methods and member "
"variables."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:4
msgid "Using MultiMeshInstance"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:9
msgid ""
"In a normal scenario, you would use a :ref:`MeshInstance "
"<class_MeshInstance>` node to display a 3D mesh like a human model for the "
"main character, but in some cases, you would like to create multiple "
"instances of the same mesh in a scene. You *could* duplicate the same node "
"multiple times and adjust the transforms manually. This may be a tedious "
"process and the result may look mechanical. Also, this method is not "
"conducive to rapid iterations. :ref:`MultiMeshInstance "
"<class_MultiMeshInstance>` is one of the possible solutions to this problem."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:18
msgid ""
"MultiMeshInstance, as the name suggests, creates multiple copies of a "
"MeshInstance over a surface of a specific mesh. An example would be having a "
"tree mesh populate a landscape mesh with trees of random scales and "
"orientations."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:23
msgid "Setting up the nodes"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:25
msgid ""
"The basic setup requires three nodes: the MultiMeshInstance node and two "
"MeshInstance nodes."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:28
msgid ""
"One node is used as the target, the mesh that you want to place multiple "
"meshes on. In the tree example, this would be the landscape."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:31
msgid ""
"The other node is used as the source, the mesh that you want to have "
"duplicated. In the tree case, this would be the tree itself."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:34
msgid ""
"In our example, we would use a :ref:`Node <class_Node>` as the root node of "
"the scene. Your scene tree would look like this:"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:39
msgid "For simplicity's sake, this tutorial uses built-in primitives."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:41
msgid ""
"Now you have everything ready. Select the MultiMeshInstance node and look at "
"the toolbar, you should see an extra button called ``MultiMesh`` next to "
"``View``. Click it and select *Populate surface* in the dropdown menu. A new "
"window titled *Populate MultiMesh* will pop up."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:51
msgid "MultiMesh settings"
msgstr "MultiMesh 설정"

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:53
msgid "Below are descriptions of the options."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:56
msgid "Target Surface"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:58
msgid ""
"The mesh used as the target surface on which to place copies of your source "
"mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:62
msgid "Source Mesh"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:64
msgid "The mesh you want duplicated on the target surface."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:67
msgid "Mesh Up Axis"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:69
msgid "The axis used as the up axis of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:72
msgid "Random Rotation"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:74
msgid "Randomizing the rotation around the up axis of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:77
msgid "Random Tilt"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:79
msgid "Randomizing the overall rotation of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:82
msgid "Random Scale"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:84
msgid "Randomizing the scale of the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:89
msgid ""
"The scale of the source mesh that will be placed over the target surface."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:92
msgid "Amount"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:94
msgid "The amount of mesh instances placed over the target surface."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:96
msgid ""
"Select the target surface. In the tree case, this should be the landscape "
"node. The source mesh should be the tree node. Adjust the other parameters "
"according to your preference. Press ``Populate`` and multiple copies of the "
"source mesh will be placed over the target mesh. If you are satisfied with "
"the result, you can delete the mesh instance used as the source mesh."
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:102
msgid "The end result should look like this:"
msgstr ""

#: ../../docs/tutorials/3d/using_multi_mesh_instance.rst:106
msgid ""
"To change the result, repeat the previous steps with different parameters."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:4
msgid "CSG"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:6
msgid ""
"CSG stands for \"Constructive Solid Geometry\", and is a tool to combine "
"basic shapes or custom meshes to create more complex shapes. In 3D modelling "
"software, CSG is mostly known as \"Boolean Operators\"."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:8
msgid ""
"The aim of CSG in Godot is for it to be used in level prototyping. This "
"technique allows users to create simple versions of most common shapes by "
"combining primitives. Interior environments can be created by using inverted "
"primitives."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:13
#, fuzzy
msgid "Introduction to CSG nodes"
msgstr "Godot 에디터 소개"

#: ../../docs/tutorials/3d/csg_tools.rst:15
msgid ""
"Like other features of Godot, CSG is supported in the form of nodes; these "
"are the CSG nodes:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:17
#, fuzzy
msgid ":ref:`CSGBox <class_CSGBox>`"
msgstr ":ref:`Color <class_Color>`"

#: ../../docs/tutorials/3d/csg_tools.rst:18
#, fuzzy
msgid ":ref:`CSGCylinder <class_CSGCylinder>` (Also supports cone)"
msgstr ":ref:`Color <class_Color>`"

#: ../../docs/tutorials/3d/csg_tools.rst:19
#, fuzzy
msgid ":ref:`CSGSphere <class_CSGSphere>`"
msgstr ":ref:`Sprite <class_Sprite>`"

#: ../../docs/tutorials/3d/csg_tools.rst:20
#, fuzzy
msgid ":ref:`CSGTorus <class_CSGTorus>`"
msgstr ":ref:`Color <class_Color>`"

#: ../../docs/tutorials/3d/csg_tools.rst:21
#, fuzzy
msgid ":ref:`CSGPolygon <class_CSGPolygon>`"
msgstr ":ref:`Color <class_Color>`"

#: ../../docs/tutorials/3d/csg_tools.rst:22
#, fuzzy
msgid ":ref:`CSGMesh <class_CSGMesh>`"
msgstr ":ref:`Sprite <class_Sprite>`"

#: ../../docs/tutorials/3d/csg_tools.rst:23
#, fuzzy
msgid ":ref:`CSGCombiner <class_CSGcombiner>`"
msgstr ":ref:`Color <class_Color>`"

#: ../../docs/tutorials/3d/csg_tools.rst:30
#, fuzzy
msgid "CSG tools features"
msgstr "킬러 기능"

#: ../../docs/tutorials/3d/csg_tools.rst:32
msgid "Every CSG node supports 3 kinds of boolean operations:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:34
msgid ""
"Union: Geometry of both primitives is merged, intersecting geometry is "
"removed."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:35
msgid "Intersection: Only intersecting geometry remains, the rest is removed."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:36
msgid ""
"Subtraction: The second shape is subtracted from the first, leaving a dent "
"with its shape."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:43
msgid "CSGPolygon"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:45
msgid ""
"The :ref:`CSGPolygon <class_CSGPolygon>` node extrude along a Polygon drawn "
"in 2D (in X,Y coordinates) in the following ways:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:47
msgid "Depth: Extruded back a given amount."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:48
msgid "Spin: Extruded while spinning around it's origin."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:49
msgid ""
"Path: Extruded along a Path node. This operation is commonly called lofting."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:55
msgid ""
"The ``Path`` mode must be provided with a :ref:`Path <class_Path>` node to "
"work. In the ``Path`` node, draw the path and the polygon in ``CSGPolygon`` "
"will extrude along the given path."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:59
#, fuzzy
msgid "Custom meshes"
msgstr "커스텀 시그널"

#: ../../docs/tutorials/3d/csg_tools.rst:61
msgid ""
"Any mesh can be used for :ref:`CSGMesh <class_CSGMesh>`; the mesh can be "
"modelled in other software and imported into Godot. Multiple materials are "
"supported. There are some restrictions for geometry:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:63
msgid "It must be closed"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:64
msgid "It must not self-intersect"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:65
msgid "It must not contain internal faces"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:66
msgid "Every edge must connect to only two other faces"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:71
msgid "CSGCombiner"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:72
msgid ""
"The :ref:`CSGCombiner <class_CSGCombiner>` node is an empty shape used for "
"organization. It will only combine children nodes."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:75
#, fuzzy
msgid "Process order"
msgstr "트리 순서"

#: ../../docs/tutorials/3d/csg_tools.rst:77
msgid ""
"Every CSG node will first process its children nodes and their operations: "
"union, intersection or subtraction, in tree order, and apply them to itself "
"one after the other."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:79
msgid ""
"A note on performance : Make sure CSG geometry remains relatively simple, as "
"complex meshes can take a while to process. If adding objects together (such "
"as table and room objects), please create them as separate CSG trees. "
"Forcing too many objects in a single tree will eventually start affecting "
"performance. Only use binary operations where you actually need them."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:82
msgid "Prototyping a level"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:84
msgid "We will prototype a room to practice the use of CSG tools."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:86
msgid ""
"Working in ``Orthogonal`` projection gives a better view when combining the "
"CSG shapes."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:88
msgid "Our level will contain these objects:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:90
msgid "A room"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:91
msgid "A bed"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:92
msgid "A lamp"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:93
msgid "A desk"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:94
msgid "A bookshelf"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:96
msgid "Create a scene with a Spatial node as root node."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:98
msgid ""
"The default lighting of the environment cannot provide clear shading at some "
"angles; display in ``overdraw`` mode or add a direction light to help you "
"see clearly."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:102
msgid ""
"Then, create a CSGBox and name it room, enable ``Invert Faces`` and change "
"the dimensions of your room."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:108
msgid "Next, create a CSGCombiner and name it ``desk``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:110
msgid "A desk has one surface and 4 legs."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:112
msgid ""
"Create 1 ``CSGBox`` children node in ``union`` mode for the surface and "
"adjust the dimensions."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:114
msgid ""
"Create 4 ``CSGBox`` children nodes in ``union`` mode for the legs and adjust "
"the dimensions."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:116
msgid "Adjust their placement to resemble a desk."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:120
msgid ""
"CSG nodes inside a ``CSGCombiner`` will only process their operation within "
"the combiner, therefore ``CSGCombiners`` are used to organize the CSG nodes."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:122
msgid "Create a ``CSGCombiner`` and name it ``bed``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:124
msgid "Our bed consists of 3 parts: the bed, the mattress, and a pillow."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:126
msgid ""
"Create a ``CSGBox`` and adjust its dimension for the bed. Create another "
"``CSGBox`` and adjust its dimension for the mattress."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:130
msgid ""
"We will create another ``CSGCombiner``, named ``pillow``, as the child of  "
"``bed``. The scene tree should look like this:"
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:134
msgid ""
"We will combine 3 ``CSGshpere`` in ``union`` mode to form a pillow. Scale "
"the y-axis of the spheres and enable ``smooth faces``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:138
msgid ""
"Select the `pillow` node and switch the mode to ``subtraction``; the "
"combined spheres will cut a hole into the mattress."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:142
msgid ""
"Try to re-parent the ``pillow`` node to the root ``Spatial`` node; the hole "
"will disappear."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:144
msgid ""
"This is to illustrate the effect of CSG process order. Since the root node "
"is not a CSG node, the ``CSGCombiner`` nodes are the end of the operations; "
"this shows the use of ``CSGCombiner`` to organize the CSG scene."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:146
msgid "Undo the re-parent after observing the effect."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:148
#, fuzzy
msgid "The bed you built should look like this:"
msgstr "씬 트리는 다음과 같아야 합니다:"

#: ../../docs/tutorials/3d/csg_tools.rst:153
msgid "Create a ``CSGCombiner`` and name it ``lamp``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:155
msgid "A lamp consists of 3 parts: the stand, the pole, and the lampshade."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:157
msgid ""
"Create a ``CSGCylinder``, enable the ``cone`` option and make it the stand. "
"Create another ``CSGCylinder`` and adjust the dimensions to use it as a pole."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:161
msgid ""
"We will use a ``CSGPolygon`` for the lampshade. Use the ``Spin`` mode for "
"the ``CSGPolygon`` and draw a `trapezoid <https://en.wikipedia.org/wiki/"
"Trapezoid>`_ while in ``Front View`` (numeric keypad 1); this shape will "
"extrude around the origin and form the lampshade."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:169
msgid "Adjust the placement of the 3 parts to make it a ``lamp``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:173
msgid "Create a ``CSGCombiner`` and name it ``bookshelf``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:175
msgid ""
"We will use 3 ``CSGBox`` for the bookshelf. Create a ``CSGBox`` and adjust "
"its dimension, this will be the size of the bookshelf."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:179
msgid ""
"Duplicate the ``CSGBox`` and shorten the dimension of each axis and change "
"the mode to ``Subtraction``."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:185
msgid ""
"You've almost built a shelf. Create one more ``CSGBox`` for dividing the "
"shelf into two levels."
msgstr ""

#: ../../docs/tutorials/3d/csg_tools.rst:189
#, fuzzy
msgid ""
"Position your furniture in your room as you like and your scene should look "
"this:"
msgstr "다 되셨다면, 당신의 ``Player`` 씬은 이렇게 되어야 합니다:"

#: ../../docs/tutorials/3d/csg_tools.rst:193
msgid ""
"You've successfully prototyped a room level with the CSG tools in Godot. CSG "
"tools can be used for designing all kinds of level, such as a maze or a "
"city; explore the limitations of it when designing your game."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/index.rst:2
msgid "FPS tutorial"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:4
msgid "Part 1"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:7
msgid "Tutorial introduction"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:11
msgid ""
"This tutorial series will show you how to make a single player FPS game."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:13
msgid "Throughout the course of this tutorial series, we will cover how:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:15
msgid "To make a first person character that can move, sprint, and jump."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:16
msgid ""
"To make a simple animation state machine for handling animation transitions."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:17
msgid ""
"To add three weapons to the first person character, each using a different "
"way to handle bullet collisions:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:18
msgid "A knife (using an :ref:`Area <class_Area>`)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:19
msgid "A pistol (Bullet scenes)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:20
msgid "A rifle (using a :ref:`Raycast <class_Raycast>`)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:21
msgid "To add two different types of grenades to the first person character:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:22
msgid "A normal grenade"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:23
msgid "A sticky grenade"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:24
msgid ""
"To add the ability to grab and throw :ref:`RigidBody <class_RigidBody>` nodes"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:25
msgid "To add joypad input for the player"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:26
msgid "To add ammo and reloading for all weapons that consume ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:27
msgid "To add ammo and health pick ups"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:28
msgid "In two sizes: big and small"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:29
msgid "To add an automatic turret"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:30
msgid "That can fire using bullet objects or a :ref:`Raycast <class_Raycast>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:31
msgid "To add targets that break when they've taken enough damage"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:32
msgid "To add sounds that play when the guns fire."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:33
msgid "To add a simple main menu:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:34
msgid "With an options menu for changing how the game runs"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:35
msgid "With a level select screen"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:36
msgid "To add a universal pause menu we can access anywhere"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:38
msgid ""
"While this tutorial can be completed by beginners, it is highly advised to "
"complete :ref:`doc_your_first_game`, if you are new to Godot and/or game "
"development **before** going through this tutorial series."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:43
msgid ""
"Remember: Making 3D games is much harder than making 2D games. If you do not "
"know how to make 2D games, you will likely struggle making 3D games."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:46
msgid ""
"This tutorial assumes you have experience working with the Godot editor, "
"basic programming experience in GDScript, and basic experience in game "
"development."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:49
msgid ""
"You can find the start assets for this tutorial here: :download:"
"`Godot_FPS_Starter.zip <files/Godot_FPS_Starter.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:51
msgid ""
"The provided starter assets contain an animated 3D model, a bunch of 3D "
"models for making levels, and a few scenes already configured for this "
"tutorial."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:54
msgid ""
"All assets provided (unless otherwise noted) were originally created by "
"TwistedTwigleg, with changes/additions by the Godot community. All original "
"assets provided for this tutorial are released under the ``MIT`` license."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:57
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1027
#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:45
msgid ""
"Feel free to use these assets however you want! All original assets belong "
"to the Godot community, with the other assets belonging to those listed "
"below:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:59
msgid ""
"The skybox is created by **StumpyStrust** on OpenGameArt. The skybox used is "
"licensed under ``CC0``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:62
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1032
msgid ""
"The font used is **Titillium-Regular**, and is licensed under the ``SIL Open "
"Font License, Version 1.1``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:64
msgid ""
"You can find the finished project for each part at the bottom of each part's "
"page"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:67
#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:7
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:7
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:7
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:7
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:7
#, fuzzy
msgid "Part overview"
msgstr "개요"

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:69
msgid ""
"In this part we will be making a first person player that can move around "
"the environment."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:74
msgid ""
"By the end of this part, you will have a working first-person character who "
"can move around the game environment, sprint, look around with a mouse based "
"first person camera, jump into the air, and turn a flash light on and off."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:78
#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:61
msgid "Getting everything ready"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:80
#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:63
msgid "Launch Godot and open up the project included in the starter assets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:82
msgid ""
"While these assets are not necessarily required to use the scripts provided "
"in this tutorial, they will make the tutorial much easier to follow, as "
"there are several pre-setup scenes we will be using throughout the tutorial "
"series."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:86
msgid ""
"First, open the project settings and go to the \"Input Map\" tab. You'll "
"find several actions have already been defined. We will be using these "
"actions for our player. Feel free to change the keys bound to these actions "
"if you want."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:92
msgid "Let's take a second to see what we have in the starter assets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:94
msgid ""
"Included in the starter assets are several scenes. For example, in ``res://"
"`` we have 14 scenes, most of which we will be visiting as we go through "
"this tutorial series."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:97
msgid "For now let's open up ``Player.tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:99
msgid ""
"There are a bunch of scenes and a few textures in the ``Assets`` folder. You "
"can look at these if you want, but we will not be exploring through "
"``Assets`` in this tutorial series. ``Assets`` contains all the models used "
"for each of the levels, as well as some textures and materials."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:104
msgid "Making the FPS movement logic"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:106
msgid ""
"Once you have ``Player.tscn`` open, let's take a quick look at how it is set "
"up"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:110
msgid ""
"First, notice how the player's collision shapes are set up. Using a vertical "
"pointing capsule as the collision shape for the player is fairly common in "
"most first person games."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:113
msgid ""
"We are adding a small square to the 'feet' of the player so the player does "
"not feel like they are balancing on a single point."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:116
msgid ""
"We do want the 'feet' slightly higher than the bottom of the capsule so we "
"can roll over slight edges. Where to place the 'feet' is dependent on your "
"levels and how you want your player to feel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:119
msgid ""
"Many times the player will notice the collision shape being circular when "
"they walk to an edge and slide off. We are adding the small square at the "
"bottom of the capsule to reduce sliding on, and around, edges."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:123
msgid ""
"Another thing to notice is how many nodes are children of "
"``Rotation_Helper``. This is because ``Rotation_Helper`` contains all the "
"nodes we want to rotate on the ``X`` axis (up and down). The reason behind "
"this is so we can rotate ``Player`` on the ``Y`` axis, and "
"``Rotation_helper`` on the ``X`` axis."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:128
msgid ""
"Had we not used ``Rotation_helper``, we would've likely had cases of "
"rotating on both the ``X`` and ``Y`` axes simultaneously, potentially futher "
"degenerating into a state of rotation on all three axes in some cases."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:132
msgid "See :ref:`using transforms <doc_using_transforms>` for more information"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:136
msgid "Attach a new script to the ``Player`` node and call it ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:138
msgid ""
"Let's program our player by adding the ability to move around, look around "
"with the mouse, and jump. Add the following code to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:243
msgid "This is a lot of code, so let's break it down function by function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:245
msgid ""
"While copy and pasting code is ill advised, as you can learn a lot from "
"manually typing the code in, you can copy and paste the code from this page "
"directly into the script editor."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:248
msgid ""
"If you do this, all of the code copied will be using spaces instead of tabs."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:250
msgid ""
"To convert the spaces to tabs in the script editor, click the \"edit\" menu "
"and select \"Convert Indent To Tabs\". This will convert all the spaces into "
"tabs. You can select \"Convert Indent To Spaces\" to convert tabs back into "
"spaces."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:255
msgid ""
"First, we define some class variables to dictate how our player will move "
"about the world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:257
msgid ""
"Throughout this tutorial, **variables defined outside functions will be "
"referred to as \"class variables\"**. This is because we can access any of "
"these variables from any place in the script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:261
msgid "Let's go through each of the class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:263
msgid "``GRAVITY``: How strong gravity pulls us down."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:264
msgid "``vel``: Our :ref:`KinematicBody <class_KinematicBody>`'s velocity."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:265
msgid ""
"``MAX_SPEED``: The fastest speed we can reach. Once we hit this speed, we "
"will not go any faster."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:266
msgid "``JUMP_SPEED``: How high we can jump."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:267
msgid ""
"``ACCEL``: How quickly we accelerate. The higher the value, the sooner we "
"get to max speed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:268
msgid ""
"``DEACCEL``: How quickly we are going to decelerate. The higher the value, "
"the sooner we will come to a complete stop."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:269
msgid ""
"``MAX_SLOPE_ANGLE``: The steepest angle our :ref:`KinematicBody "
"<class_KinematicBody>` will consider as a 'floor'."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:270
msgid "``camera``: The :ref:`Camera <class_Camera>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:271
msgid ""
"``rotation_helper``: A :ref:`Spatial <class_Spatial>` node holding "
"everything we want to rotate on the X axis (up and down)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:272
msgid ""
"``MOUSE_SENSITIVITY``: How sensitive the mouse is. I find a value of "
"``0.05`` works well for my mouse, but you may need to change it based on how "
"sensitive your mouse is."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:274
msgid ""
"You can tweak many of these variables to get different results. For example, "
"by lowering ``GRAVITY`` and/or increasing ``JUMP_SPEED`` you can get a more "
"'floaty' feeling character. Feel free to experiment!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:278
msgid ""
"You may have noticed that ``MOUSE_SENSITIVITY`` is written in all caps like "
"the other constants, but ``MOUSE_SENSITIVITY`` is not a constant."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:280
msgid ""
"The reason behind this is we want to treat it like a constant variable (a "
"variable that cannot change) throughout our script, but we want to be able "
"to change the value later when we add customizable settings. So, in an "
"effort to remind ourselves to treat it like a constant, it's named in all "
"caps."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:285
msgid "Now let's look at the ``_ready`` function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:287
msgid ""
"First we get the ``camera`` and ``rotation_helper`` nodes and store them "
"into their variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:289
msgid ""
"Then we need to set the mouse mode to captured, so the mouse cannot leave "
"the game window."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:291
msgid ""
"This will hide the mouse and keep it at the center of the screen. We do this "
"for two reasons: The first reason being we do not want the player to see "
"their mouse cursor as they play."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:294
msgid ""
"The second reason is because we do not want the cursor to leave the game "
"window. If the cursor leaves the game window there could be instances where "
"the player clicks outside the window, and then the game would lose focus. To "
"assure neither of these issues happens, we capture the mouse cursor."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:298
msgid ""
"see :ref:`Input documentation <class_Input>` for the various mouse modes. We "
"will only be using ``MOUSE_MODE_CAPTURED`` and ``MOUSE_MODE_VISIBLE`` in "
"this tutorial series."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:303
msgid "Next let's take a look at ``_physics_process``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:305
msgid ""
"All we're doing in ``_physics_process`` is calling two functions: "
"``process_input`` and ``process_movement``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:307
msgid ""
"``process_input`` will be where we store all the code relating to player "
"input. We want to call it first, before anything else, so we have fresh "
"player input to work with."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:310
msgid ""
"``process_movement`` is where we'll send all the data necessary to the :ref:"
"`KinematicBody <class_KinematicBody>` so it can move through the game world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:315
msgid "Let's look at ``process_input`` next:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:317
msgid "First we set ``dir`` to an empty :ref:`Vector3 <class_Vector3>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:319
msgid ""
"``dir`` will be used for storing the direction the player intends to move "
"towards. Because we do not want the player's previous input to effect the "
"player beyond a single ``process_movement`` call, we reset ``dir``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:322
msgid ""
"Next we get the camera's global transform and store it as well, into the "
"``cam_xform`` variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:324
msgid ""
"The reason we need the camera's global transform is so we can use its "
"directional vectors. Many have found directional vectors confusing, so let's "
"take a second to explain how they work:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:329
msgid ""
"World space can be defined as: The space in which all objects are placed in, "
"relative to a constant origin point. Every object, no matter if it is 2D or "
"3D, has a position in world space."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:332
msgid ""
"To put it another way: world space is the space in a universe where every "
"object's position, rotation, and scale can be measured by a single, known, "
"fixed point called the origin."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:335
msgid ""
"In Godot, the origin is at position ``(0, 0, 0)`` with a rotation of ``(0, "
"0, 0)`` and a scale of ``(1, 1, 1)``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:337
msgid ""
"When you open up the Godot editor and select a :ref:`Spatial "
"<class_Spatial>` based node, a gizmo pops up. Each of the arrows points "
"using world space directions by default."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:340
msgid ""
"If you want to move using the world space directional vectors, you'd do "
"something like this:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:353
msgid ""
"Notice how we do not need to do any calculations to get world space "
"directional vectors. We can define a few :ref:`Vector3 <class_Vector3>` "
"variables and input the values pointing in each direction."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:356
msgid "Here is what world space looks like in 2D:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:358
msgid ""
"The following images are just examples. Each arrow/rectangle represents a "
"directional vector"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:362
#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:405
msgid "And here is what it looks like for 3D:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:366
msgid ""
"Notice how in both examples, the rotation of the node does not change the "
"directional arrows. This is because world space is a constant. No matter how "
"you translate, rotate, or scale an object, world space will *always point in "
"the same direction*."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:370
msgid ""
"Local space is different, because it takes the rotation of the object into "
"account."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:372
msgid ""
"Local space can be defined as follows: The space in which an object's "
"position is the origin of the universe. Because the position of the origin "
"can be at ``N`` many locations, the values derived from local space change "
"with the position of the origin."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:377
msgid ""
"This stack overflow question has a much better explanation of world space "
"and local space."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:379
msgid ""
"https://gamedev.stackexchange.com/questions/65783/what-are-world-space-and-"
"eye-space-in-game-development (Local space and eye space are essentially the "
"same thing in this context)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:382
msgid ""
"To get a :ref:`Spatial <class_Spatial>` node's local space, we need to get "
"its :ref:`Transform <class_Transform>`, so then we can get the :ref:`Basis "
"<class_Basis>` from the :ref:`Transform <class_Transform>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:385
msgid ""
"Each :ref:`Basis <class_Basis>` has three vectors: ``X``, ``Y``, and ``Z``. "
"Each of those vectors point towards each of the local space vectors coming "
"from that object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:388
msgid ""
"To use the :ref:`Spatial <class_Spatial>` node's local directional vectors, "
"we use this code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:401
msgid "Here is what local space looks like in 2D:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:409
msgid ""
"Here is what the :ref:`Spatial <class_Spatial>` gizmo shows when you are "
"using local space mode. Notice how the arrows follow the rotation of the "
"object on the left, which looks exactly the same as the 3D example for local "
"space."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:413
msgid ""
"You can change between local and world space modes by pressing T or the "
"little cube button when you have a :ref:`Spatial <class_Spatial>` based node "
"selected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:418
msgid ""
"Local vectors are confusing even for more experienced game developers, so do "
"not worry if this all doesn't make a lot of sense. The key thing to remember "
"about local vectors is that we are using local coordinates to get direction "
"from the object's point of view, as opposed to using world vectors, which "
"give direction from the world's point of view."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:424
msgid "Okay, back to ``process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:426
msgid ""
"Next we make a new variable called ``input_movement_vector`` and assign it "
"to an empty :ref:`Vector2 <class_Vector2>`. We will use this to make a "
"virtual axis of sorts, to map the player's input to movement."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:429
msgid ""
"This may seem overkill for just the keyboard, but this will make sense later "
"when we add joypad input."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:431
msgid ""
"Based on which directional movement action is pressed, we add to or subtract "
"from ``input_movement_vector``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:433
msgid ""
"After we've checked each of the directional movement actions, we normalize "
"``input_movement_vector``. This makes it where ``input_movement_vector``'s "
"values are within a ``1`` radius unit circle."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:436
msgid ""
"Next we add the camera's local ``Z`` vector times ``input_movement_vector."
"y`` to ``dir``. This is so when the player presses forward or backwards, we "
"add the camera's local ``Z`` axis so the player moves forward or backwards "
"in relation to the camera."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:439
msgid ""
"Because the camera is rotated by ``-180`` degrees, we have to flip the ``Z`` "
"directional vector. Normally forward would be the positive Z axis, so using "
"``basis.z.normalized()`` would work, but we are using ``-basis.z."
"normalized()`` because our camera's Z axis faces backwards in relation to "
"the rest of the player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:444
msgid ""
"We do the same thing for the camera's local ``X`` vector, and instead of "
"using ``input_movement_vector.y`` we instead use ``input_movement_vector."
"x``. This makes it where the player moves left/right in relation to the "
"camera when the player presses left/right."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:447
msgid ""
"Next we check if the player is on the floor using :ref:`KinematicBody "
"<class_KinematicBody>`'s ``is_on_floor`` function. If it is, then we check "
"to see if the \"movement_jump\" action has just been pressed. If it has, "
"then we set the player's ``Y`` velocity to ``JUMP_SPEED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:451
msgid ""
"Because we're setting the Y velocity, the player will jump into the air."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:453
msgid ""
"Then we check for the ``ui_cancel`` action. This is so we can free/capture "
"the mouse cursor when the ``escape`` button is pressed. We do this because "
"otherwise we'd have no way to free the cursor, meaning it would be stuck "
"until you terminate the runtime."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:457
msgid ""
"To free/capture the cursor, we check to see if the mouse is visible (freed) "
"or not. If it is, we capture it, and if it's not, we make it visible (free "
"it)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:459
msgid ""
"That's all we're doing right now for ``process_input``. We'll come back "
"several times to this function as we add more complexities to our player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:463
msgid "Now let's look at ``process_movement``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:465
msgid ""
"First we ensure that ``dir`` does not have any movement on the ``Y`` axis by "
"setting it's ``Y`` value to zero."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:467
msgid ""
"Next we normalize ``dir`` to ensure we're within a ``1`` radius unit circle. "
"This makes it where we're moving at a constant speed regardless of whether "
"the player is moving straight or diagonally. If we did not normalize, the "
"player would move faster on the diagonal than when going straight."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:470
msgid ""
"Next we add gravity to the player by adding ``GRAVITY * delta`` to the "
"player's ``Y`` velocity."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:472
msgid ""
"After that we assign the player's velocity to a new variable (called "
"``hvel``) and remove any movement on the ``Y`` axis."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:474
msgid ""
"Next we set a new variable (``target``) to the player's direction vector. "
"Then we multiply that by the player's max speed so we know how far the "
"player will move in the direction provided by ``dir``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:477
msgid "After that we make a new variable for acceleration, named ``accel``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:479
msgid ""
"We then take the dot product of ``hvel`` to see if the player is moving "
"according to ``hvel``. Remember, ``hvel`` does not have any ``Y`` velocity, "
"meaning we are only checking if the player is moving forwards, backwards, "
"left, or right."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:483
msgid ""
"If the player is moving according to ``hvel``, then we set ``accel`` to the "
"``ACCEL`` constant so the player will accelerate, otherwise we set ``accel`` "
"to our ``DEACCEL`` constant so the player will decelerate."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:486
msgid ""
"Then we interpolate the horizontal velocity, set the player's ``X`` and "
"``Z`` velocity to the interpolated horizontal velocity, and call "
"``move_and_slide`` to let the :ref:`KinematicBody <class_KinematicBody>` "
"handle moving the player through the physics world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:489
msgid ""
"All of the code in ``process_movement`` is exactly the same as the movement "
"code from the Kinematic Character demo!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:493
msgid ""
"The final function we have is the ``_input`` function, and thankfully it's "
"fairly short:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:495
msgid ""
"First we make sure that the event we are dealing with is an :ref:"
"`InputEventMouseMotion <class_InputEventMouseMotion>` event. We also want to "
"check if the cursor is captured, as we do not want to rotate if it is not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:498
msgid ""
"See :ref:`Mouse and input coordinates <doc_mouse_and_input_coordinates>` for "
"a list of possible input events."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:501
msgid ""
"If the event is indeed a mouse motion event and the cursor is captured, we "
"rotate based on the relative mouse motion provided by :ref:"
"`InputEventMouseMotion <class_InputEventMouseMotion>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:504
msgid ""
"First we rotate the ``rotation_helper`` node on the ``X`` axis, using the "
"relative mouse motion's ``Y`` value, provided by :ref:`InputEventMouseMotion "
"<class_InputEventMouseMotion>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:507
msgid ""
"Then we rotate the entire :ref:`KinematicBody <class_KinematicBody>` on the "
"``Y`` axis by the relative mouse motion's ``X`` value."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:509
msgid ""
"Godot converts relative mouse motion into a :ref:`Vector2 <class_Vector2>` "
"where mouse movement going up and down is ``1`` and ``-1`` respectively. "
"Right and Left movement is ``1`` and ``-1`` respectively."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:513
msgid ""
"Because of how we are rotating the player, we multiply the relative mouse "
"motion's ``X`` value by ``-1`` so mouse motion going left and right rotates "
"the player left and right in the same direction."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:517
msgid ""
"Finally, we clamp the ``rotation_helper``'s ``X`` rotation to be between "
"``-70`` and ``70`` degrees so the player cannot rotate themselves upside "
"down."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:520
msgid ""
"See :ref:`using transforms <doc_using_transforms>` for more information on "
"rotating transforms."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:524
msgid ""
"To test the code, open up the scene named ``Testing_Area.tscn``, if it's not "
"already opened up. We will be using this scene as we go through the next few "
"tutorial parts, so be sure to keep it open in one of your scene tabs."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:527
msgid ""
"Go ahead and test your code either by pressing ``F6`` with ``Testing_Area."
"tscn`` as the open tab, by pressing the play button in the top right corner, "
"or by pressing ``F5``. You should now be able to walk around, jump in the "
"air, and look around using the mouse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:533
msgid "Giving the player a flash light and the option to sprint"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:535
msgid ""
"Before we get to making the weapons work, there are a couple more things we "
"should add."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:537
msgid ""
"Many FPS games have an option to sprint and a flashlight. We can easily add "
"these to our player, so let's do that!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:540
msgid "First we need a few more class variables in our player script:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:550
msgid ""
"All the sprinting variables work exactly the same as the non sprinting "
"variables with similar names."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:553
msgid ""
"``is_sprinting`` is a boolean to track whether the player is currently "
"sprinting, and ``flashlight`` is a variable we will be using to hold the "
"player's flash light node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:556
msgid ""
"Now we need to add a few lines of code, starting in ``_ready``. Add the "
"following to ``_ready``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:562
msgid ""
"This gets the ``Flashlight`` node and assigns it to the ``flashlight`` "
"variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:566
msgid ""
"Now we need to change some of the code in ``process_input``. Add the "
"following somewhere in ``process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:587
msgid "Let's go over the additions:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:589
msgid ""
"We set ``is_sprinting`` to true when the player is holding down the "
"``movement_sprint`` action, and false when the ``movement_sprint`` action is "
"released. In ``process_movement`` we'll add the code that makes the player "
"faster when they sprint. Here in ``process_input`` we are just going to "
"change the ``is_sprinting`` variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:593
msgid ""
"We do something similar to freeing/capturing the cursor for handling the "
"flashlight. We first check to see if the ``flashlight`` action was just "
"pressed. If it was, we then check to see if ``flashlight`` is visible in the "
"scene tree. If it is, then we hide it, and if it's not, we show it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:598
msgid ""
"Now we need to change a couple things in ``process_movement``. First, "
"replace ``target *= MAX_SPEED`` with the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:607
msgid ""
"Now instead of always multiplying ``target`` by ``MAX_SPEED``, we first "
"check to see if the player is sprinting or not. If the player is sprinting, "
"we instead multiply ``target`` by ``MAX_SPRINT_SPEED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:610
msgid ""
"Now all that's left is to change the acceleration when sprinting. Change "
"``accel = ACCEL`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:620
msgid ""
"Now, when the player is sprinting, we'll use ``SPRINT_ACCEL`` instead of "
"``ACCEL``, which will accelerate the player faster."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:624
msgid ""
"You should now be able to sprint if you press the ``shift`` button, and can "
"toggle the flash light on and off by pressing the ``F`` button!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:626
msgid ""
"Go try it out! You can change the sprint-related class variables to make the "
"player faster or slower when sprinting!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:629
#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1246
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:666
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:778
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:951
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:994
#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1410
msgid "Final notes"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:633
msgid ""
"Whew! That was a lot of work. Now you have a fully working first person "
"character!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:635
msgid ""
"In :ref:`doc_fps_tutorial_part_two` we will add some guns to our player "
"character."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:637
msgid ""
"At this point we've recreated the Kinematic character demo from first person "
"perspective with sprinting and a flash light!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:639
msgid ""
"Currently the player script would be at an ideal state for making all sorts "
"of first person games. For example: Horror games, platformer games, "
"adventure games, and more!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:642
#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1257
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:681
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:787
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:960
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1002
#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1416
msgid "If you ever get lost, be sure to read over the code again!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_one.rst:644
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_1.zip <files/Godot_FPS_Part_1.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:4
msgid "Part 2"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:9
msgid "In this part we will be giving our player weapons to play with."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:13
msgid ""
"By the end of this part, you will have a player that can fire a pistol, "
"rifle, and attack using a knife. The player will also now have animations "
"with transitions, and the weapons will interact with objects in the "
"environment."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:17
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_one` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_one` will be the starting project for part 2"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:20
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:18
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:16
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:16
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:19
msgid "Let's get started!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:23
msgid "Making a system to handle animations"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:25
msgid ""
"First we need a way to handle changing animations. Open up ``Player.tscn`` "
"and select the :ref:`AnimationPlayer <class_AnimationPlayer>` Node "
"(``Player`` -> ``Rotation_Helper`` -> ``Model`` -> ``Animation_Player``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:28
msgid ""
"Create a new script called ``AnimationPlayer_Manager.gd`` and attach that to "
"the :ref:`AnimationPlayer <class_AnimationPlayer>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:30
msgid "Add the following code to ``AnimationPlayer_Manager.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:152
msgid "Lets go over what this script is doing:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:156
msgid "Lets start with this script's class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:158
msgid ""
"``states``: A dictionary for holding our animation states. (Further "
"explanation below)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:159
msgid ""
"``animation_speeds``: A dictionary for holding all the speeds at which we "
"want to play our animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:160
msgid ""
"``current_state``: A variable for holding the name of the animation state we "
"are currently in."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:161
msgid ""
"``callback_function``: A variable for holding the callback function. "
"(Further explanation below)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:163
msgid ""
"If you are familiar with state machines, then you may have noticed that "
"``states`` is structured like a basic state machine. Here is roughly how "
"``states`` is set up:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:166
msgid ""
"``states`` is a dictionary with the key being the name of the current state, "
"and the value being an array holding all the animations (states) we can "
"transition to. For example, if we are currently in the ``Idle_unarmed`` "
"state, we can only transition to ``Knife_equip``, ``Pistol_equip``, "
"``Rifle_equip``, and ``Idle_unarmed``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:171
msgid ""
"If we try to transition to a state that is not included in the possible "
"transitions states for the state we are in, then we get a warning message "
"and the animation does not change. We can also automatically transition from "
"some states into others, as will be explained further below in "
"``animation_ended``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:175
msgid ""
"For the sake of keeping this tutorial simple, we are not using a 'proper' "
"state machine. If you are interested to know more about state machines, see "
"the following articles:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:179
msgid ""
"(Python example) https://dev.to/karn/building-a-simple-state-machine-in-"
"python"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:180
msgid ""
"(C# example) https://www.codeproject.com/Articles/489136/"
"UnderstandingplusandplusImplementingplusStateplusP"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:181
msgid "(Wiki article) https://en.wikipedia.org/wiki/Finite-state_machine"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:183
msgid ""
"``animation_speeds`` is how fast each animation will play. Some of the "
"animations are a little slow and in an effort to make everything look "
"smooth, we need to play them at faster speeds."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:186
msgid ""
"Notice that all of the firing animations are faster than their normal speed. "
"Remember this for later!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:188
msgid ""
"``current_state`` will hold the name of the animation state we are currently "
"in."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:190
msgid ""
"Finally, ``callback_function`` will be a :ref:`FuncRef <class_FuncRef>` "
"passed in by the player for spawning bullets at the proper frame of "
"animation. A :ref:`FuncRef <class_FuncRef>` allows us to pass in a function "
"as an argument, effectively allowing us to call a function from another "
"script, which is how we will use it later."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:196
msgid "Now let's look at ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:198
msgid ""
"First we are setting our animation to ``Idle_unarmed`` using the "
"``set_animation`` function, so we for sure start in that animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:201
msgid ""
"Next we connect the ``animation_finished`` signal to this script and assign "
"it to call ``animation_ended``. This means whenever an animation is "
"finished, ``animation_ended`` will be called."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:206
msgid "Lets look at ``set_animation`` next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:208
msgid ""
"``set_animation`` changes the animation to the animation named "
"``animation_name`` *if* we can transition to it. In other words, if the "
"animation state we are currently in has the passed in animation state name "
"in ``states``, then we will change to that animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:212
msgid ""
"Firstly, we check if the passed in animation name is the same name as the "
"animation currently playing. If they are the same, then we write a warning "
"to the console and return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:215
msgid ""
"Secondly, we see if :ref:`AnimationPlayer <class_AnimationPlayer>` has the "
"animation with the name ``animation_name`` using ``has_animation``. If it "
"does not, we return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:218
msgid ""
"Thirdly, we check whether ``current_state`` is set. If ``current_state`` is "
"*not* currently set, then we set ``current_state`` to the passed in "
"animation name and tell :ref:`AnimationPlayer <class_AnimationPlayer>` to "
"start playing the animation with a blend time of ``-1`` at the speed set in "
"``animation_speeds`` and then we return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:222
msgid "Blend time is how long to blend/mix the two animations together."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:224
msgid ""
"By putting in a value of ``-1``, the new animation instantly plays, "
"overriding whatever animation is already playing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:226
msgid ""
"If you put in a value of ``1``, for one second the new animation will play "
"with increasing strength, blending the two animations together for one "
"second before playing only the new animation. This leads to a smooth "
"transition between animations, which looks great when you are changing from "
"a walking animation to a running animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:230
msgid ""
"We set the blend time to ``-1`` because we want to instantly change "
"animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:232
msgid ""
"If we have a state in ``current_state``, then we get all the possible states "
"we can transition to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:234
msgid ""
"If the animation name is in the list of possible transitions, we set "
"``current_state`` to the passed in animation (``animation_name``), tell :ref:"
"`AnimationPlayer <class_AnimationPlayer>` to play the animation with a blend "
"time of ``-1`` at the speed set in ``animation_speeds`` and return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:240
msgid "Now lets look at ``animation_ended``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:242
msgid ""
"``animation_ended`` is the function that will be called by :ref:"
"`AnimationPlayer <class_AnimationPlayer>` when it's done playing an "
"animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:245
msgid ""
"For certain animation states, we may need to transition into another state "
"when it's finished. To handle this, we check for every possible animation "
"state. If we need to, we will transition into another state."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:248
msgid ""
"If you are using your own animated models, make sure that none of the "
"animations are set to loop. Looping animations do not send the "
"``animation_finished`` signal when they reach the end of the animation and "
"are about to loop again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:252
msgid ""
"The transitions in ``animation_ended`` would ideally be part of the data in "
"``states``, but in an effort to make the tutorial easier to understand, "
"we'll hard code each state transition in ``animation_ended``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:258
msgid ""
"Finally, there is ``animation_callback``. This function will be called by a "
"function track in our animations. If we have a :ref:`FuncRef "
"<class_FuncRef>` assigned to ``callback_function``, then we call that passed "
"in function. If we do not have a :ref:`FuncRef <class_FuncRef>` assigned to "
"``callback_function``, we print out a warning to the console."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:262
msgid ""
"Try running ``Testing_Area.tscn`` to make sure there are no runtime issues. "
"If the game runs but nothing seems to have changed, then everything is "
"working correctly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:266
msgid "Getting the animations ready"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:268
msgid ""
"Now that we have a working animation manager, we need to call it from our "
"player script. Before that, though, we need to set some animation callback "
"tracks in our firing animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:271
msgid ""
"Open up ``Player.tscn`` if you don't have it open and navigate to the :ref:"
"`AnimationPlayer <class_AnimationPlayer>` node (``Player`` -> "
"``Rotation_Helper`` -> ``Model`` -> ``Animation_Player``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:274
msgid ""
"We need to attach a function track to three of our animations: The firing "
"animation for the pistol, rifle, and knife. Let's start with the pistol. "
"Click the animation drop down list and select \"Pistol_fire\"."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:277
msgid ""
"Now scroll down to the bottom of the list of animation tracks. The final "
"item in the list should read ``Armature/Skeleton:Left_UpperPointer``. Now at "
"the bottom of the list, click the plus icon on the bottom bar of animation "
"window, right next to the loop button and the up arrow."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:283
msgid ""
"This will bring up a window with three choices. We want to add a function "
"callback track, so click the option that reads \"Add Call Func Track\". This "
"will open a window showing the entire node tree. Navigate to the :ref:"
"`AnimationPlayer <class_AnimationPlayer>` node, select it, and press OK."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:289
msgid ""
"Now at the bottom of list of animation tracks you will have a green track "
"that reads \"AnimationPlayer\". Now we need to add the point where we want "
"to call our callback function. Scrub the timeline until you reach the point "
"where the muzzle starts to flash."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:293
msgid ""
"The timeline is the window where all the points in our animation are stored. "
"Each of the little points represents a point of animation data."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:296
msgid ""
"Scrubbing the timeline means moving ourselves through the animation. So when "
"we say \"scrub the timeline until you reach a point\", what we mean is move "
"through the animation window until you reach the point on the timeline."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:300
msgid ""
"Also, the muzzle of a gun is the end point where the bullet comes out. The "
"muzzle flash is the flash of light that escapes the muzzle when a bullet is "
"fired. The muzzle is also sometimes referred to as the barrel of the gun."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:304
msgid ""
"For finer control when scrubbing the timeline, press ``control`` and scroll "
"forward with the mouse wheel to zoom in. Scrolling backwards will zoom out."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:307
msgid ""
"You can also change how the timeline scrubbing snaps by changing the value "
"in ``Step (s)`` to a lower/higher value."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:309
msgid ""
"Once you get to a point you like, press the little green plus symbol on the "
"far right side of the ``AnimationPlayer`` track. This will place a little "
"green point at the position you are currently at in the animation on your "
"``AnimationPlayer`` track."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:315
msgid ""
"Now we have one more step before we are done with the pistol. Select the "
"\"enable editing of individual keys\" button on the far right corner of the "
"animation window. It looks like a pencil with a little point beside it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:320
msgid ""
"Once you've clicked that, a new window will open on the right side. Now "
"click the green point on the ``AnimationPlayer`` track. This will bring up "
"the information associated with that point in the timeline. In the empty "
"name field, enter ``animation_callback`` and press ``enter``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:324
msgid ""
"Now when we are playing this animation the callback function will be "
"triggered at that specific point of the animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:326
msgid ""
"Be sure to press the \"enable editing of individual keys\" button again to "
"turn off the ability to edit individual keys so you cannot change one of the "
"transform tracks by accident!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:331
msgid "Let's repeat the process for the rifle and knife firing animations!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:333
msgid ""
"Because the process is exactly the same as the pistol, the process is going "
"to explained in a little less depth. Follow the steps from above if you get "
"lost! It is exactly the same, just on a different animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:336
msgid ""
"Go to the \"Rifle_fire\" animation from the animation drop down. Add the "
"function callback track once you reach the bottom of the animation track "
"list by clicking the little plus icon at the bottom of the screen. Find the "
"point where the muzzle starts to flash and click the little green plus "
"symbol to add a function callback point at that position on the track."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:340
msgid ""
"Next, click the \"enable editing of individual keys\" button. Select the "
"newly created function callback point, put \"animation_callback\" into the "
"name field and press ``enter``. Click the \"enable editing of individual keys"
"\" button again to turn off individual key editing. so we cannot change one "
"of the transform tracks by accident."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:345
msgid ""
"Now we need to apply the callback function track to the knife animation. "
"Select the \"Knife_fire\" animation and scroll to the bottom of the "
"animation tracks. Click the plus symbol at the bottom of the animation "
"window and add a function callback track. Next find a point around the first "
"third of the animation to place the animation callback function point at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:349
msgid ""
"We will not actually be firing the knife, and the animation is a stabbing "
"animation rather than a firing one. For this tutorial we are reusing the gun "
"firing logic for our knife, so the animation has been named in a style that "
"is consistent with the other animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:353
msgid ""
"From there click the little green plus to add a function callback point at "
"the current position. Then click the \"enable editing of individual keys\" "
"button, the button with a plus at the bottom right side of the animation "
"window. Select the newly created function callback point, put "
"\"animation_callback\" into the name field and press ``enter``. Click the "
"\"enable editing of individual keys\" button again to turn off individual "
"key editing, so we cannot change one of the transform tracks by accident."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:359
msgid "Be sure to save your work!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:361
msgid ""
"With that done, we are almost ready to start adding the ability to fire to "
"our player script! We need to set up one last scene: The scene for our "
"bullet object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:365
msgid "Creating the bullet scene"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:367
msgid ""
"There are several ways to handle a gun's bullets in video games. In this "
"tutorial series, we will be exploring two of the more common ways: Objects, "
"and raycasts."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:372
msgid ""
"One of the two ways is using a bullet object. This will be an object that "
"travels through the world and handles its own collision code. In this method "
"we create/spawn a bullet object in the direction our gun is facing, and then "
"it travels forward."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:376
msgid ""
"There are several advantages to this method. The first being we do not have "
"to store the bullets in our player. We can simply create the bullet and then "
"move on, and the bullet itself with handle checking for collisions, sending "
"the proper signal(s) to the object it collides with, and destroying itself."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:379
msgid ""
"Another advantage is we can have more complex bullet movement. If we want to "
"make the bullet fall ever so slightly as time goes on, we can make the "
"bullet controlling script slowly push the bullet towards the ground. Using "
"an object also makes the bullet take time to reach its target, it doesn't "
"instantly hit whatever it's pointed at. This feels more realistic because "
"nothing in real life moves instantly from one point to another."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:383
msgid ""
"One of the huge disadvantages is performance. While having each bullet "
"calculate their own paths and handle their own collision allows for a lot of "
"flexibility, it comes at the cost of performance. With this method we are "
"calculating every bullet's movement every step, and while this may not be a "
"problem for a few dozen bullets, it can become a huge problem when you "
"potentially have several hundred bullets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:387
msgid ""
"Despite the performance hit, many first person shooters include some form of "
"object bullets. Rocket launchers are a prime example because in many first "
"person shooters, rockets do not just instantly explode at their target "
"position. You can also find bullets as objects many times with grenades "
"because they generally bounce around the world before exploding."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:391
msgid ""
"While I cannot say for sure this is the case, these games *probably* use "
"bullet objects in some form or another: (These are entirely from my "
"observations. **They may be entirely wrong**. I have never worked on **any** "
"of the following games)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:394
msgid ""
"Halo (Rocket launchers, fragmentation grenades, sniper rifles, brute shot, "
"and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:395
msgid ""
"Destiny (Rocket launchers, grenades, fusion rifles, sniper rifles, super "
"moves, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:396
msgid ""
"Call of Duty (Rocket launchers, grenades, ballistic knives, crossbows, and "
"more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:397
msgid "Battlefield (Rocket launchers, grenades, claymores, mortars, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:399
msgid ""
"Another disadvantage with bullet objects is networking. Bullet objects have "
"to sync the positions (at least) with all the clients that are connected to "
"the server."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:402
msgid ""
"While we are not implementing any form of networking (as that would be in "
"its own entire tutorial series), it is a consideration to keep in mind when "
"creating your first person shooter, especially if you plan on adding some "
"form of networking in the future."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:407
msgid ""
"The other way of handling bullet collisions we will be looking at is "
"raycasting."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:409
msgid ""
"This method is extremely common in guns that have fast moving bullets that "
"rarely change trajectory over time."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:411
msgid ""
"Instead of creating a bullet object and sending it through space, we instead "
"send a ray starting from the barrel/muzzle of the gun forwards. We set the "
"raycast's origin to the starting position of the bullet, and based on the "
"length we can adjust how far the bullet 'travels' through space."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:414
msgid ""
"While I cannot say for sure this is the case, these games *probably* use "
"raycasts in some form or another: (These are entirely from my observations. "
"**They may be entirely wrong**. I have never worked on **any** of the "
"following games)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:417
msgid ""
"Halo (Assault rifles, DMRs, battle rifles, covenant carbine, spartan laser, "
"and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:418
msgid ""
"Destiny (Auto rifles, pulse rifles, scout rifles, hand cannons, machine "
"guns, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:419
msgid ""
"Call of Duty (Assault rifles, light machine guns, sub machine guns, pistols, "
"and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:420
msgid "Battlefield (Assault rifles, SMGs, carbines, pistols, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:422
msgid ""
"One huge advantage of this method is that it's light on performance. Sending "
"a couple hundred rays through space is *much* easier for the computer to "
"calculate than sending a couple hundred bullet objects."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:426
msgid ""
"Another advantage is we can instantly know if we've hit something or not "
"exactly when we call for it. For networking this is important because we do "
"not need to sync the bullet movements over the Internet, we only need to "
"send whether or not the raycast hit."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:429
msgid ""
"Raycasting does have some disadvantages, though. One major disadvantage is "
"we cannot easily cast a ray in anything but a linear line. This means we can "
"only fire in a straight line for however long our ray length is. You can "
"create the illusion of bullet movement by casting multiple rays at different "
"positions, but not only is this hard to implement in code, it is also "
"heavier on performance."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:433
msgid ""
"Another disadvantage is we cannot see the bullet. With bullet objects we can "
"actually see the bullet travel through space if we attach a mesh to it, but "
"because raycasts happen instantly, we do not have a decent way of showing "
"the bullets. You could draw a line from the origin of the raycast to the "
"point where the raycast collided, and that is one popular way of showing "
"raycasts. Another way is simply not drawing the raycast at all, because "
"theoretically the bullets move so fast our eyes could not see it anyway."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:440
msgid ""
"Let's get the bullet object set up. This is what our pistol will create when "
"the \"Pistol_fire\" animation callback function is called."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:443
msgid ""
"Open up ``Bullet_Scene.tscn``. The scene contains :ref:`Spatial "
"<class_Spatial>` node called bullet, with a :ref:`MeshInstance "
"<class_MeshInstance>` and an :ref:`Area <class_Area>` with a :ref:"
"`CollisionShape <class_CollisionShape>` children to it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:447
msgid ""
"Create a new script called ``Bullet_script.gd`` and attach it to the "
"``Bullet`` :ref:`Spatial <class_Spatial>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:449
msgid ""
"We are going to move the entire bullet object at the root (``Bullet``). We "
"will be using the :ref:`Area <class_Area>` to check whether or not we've "
"collided with something"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:451
msgid ""
"Why are we using an :ref:`Area <class_Area>` and not a :ref:`RigidBody "
"<class_RigidBody>`? The main reason we're not using a :ref:`RigidBody "
"<class_RigidBody>` is because we do not want the bullet to interact with "
"other :ref:`RigidBody <class_RigidBody>` nodes. By using an :ref:`Area "
"<class_Area>` we are ensuring that none of the other :ref:`RigidBody "
"<class_RigidBody>` nodes, including other bullets, will be effected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:455
msgid ""
"Another reason is simply because it is easier to detect collisions with an :"
"ref:`Area <class_Area>`!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:457
msgid "Here's the script that will control our bullet:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:493
#, fuzzy
msgid "Let's go through the script:"
msgstr "스크립트의 역할"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:497
msgid "First we define a few class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:499
msgid "``BULLET_SPEED``: The speed at which the bullet travels."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:500
msgid ""
"``BULLET_DAMAGE``: The damage the bullet will cause to anything with which "
"it collides."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:501
msgid "``KILL_TIMER``: How long the bullet can last without hitting anything."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:502
msgid "``timer``: A float for tracking how long the bullet has been alive."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:503
msgid ""
"``hit_something``: A boolean for tracking whether or not we've hit something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:505
msgid ""
"With the exception of ``timer`` and ``hit_something``, all of these "
"variables change how the bullet interacts with the world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:508
msgid ""
"The reason we are using a kill timer is so we do not have a case where we "
"get a bullet travelling forever. By using a kill timer, we can ensure that "
"no bullets will travel forever and consume resources."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:512
msgid ""
"As in :ref:`doc_fps_tutorial_part_one`, we have a couple all uppercase class "
"variables. The reason behind this is the same as the reason given in :ref:"
"`doc_fps_tutorial_part_one`: We want to treat these variables like "
"constants, but we want to be able to change them. In this case we will later "
"need to change the damage and speed of these bullets, so we need them to be "
"variables and not constants."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:519
msgid ""
"In ``_ready`` we set the area's ``body_entered`` signal to ourself so that "
"it calls the ``collided`` function when a body enters the area."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:524
msgid ""
"``_physics_process`` gets the bullet's local ``Z`` axis. If you look at the "
"scene in local mode, you will find that the bullet faces the positive local "
"``Z`` axis."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:527
msgid ""
"Next we translate the entire bullet by that forward direction, multiplying "
"in our speed and delta time."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:529
msgid ""
"After that we add delta time to our timer and check whether the timer has "
"reached a value as big or greater than our ``KILL_TIME`` constant. If it "
"has, we use ``queue_free`` to free the bullet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:534
msgid "In ``collided`` we check whether we've hit something yet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:536
msgid ""
"Remember that ``collided`` is only called when a body has entered the :ref:"
"`Area <class_Area>` node. If the bullet has not already collided with "
"something, we then proceed to check if the body the bullet has collided with "
"has a function/method called ``bullet_hit``. If it does, we call it and pass "
"in the bullet's damage and the bullet's global transform so we can get the "
"bullet's rotation and position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:541
msgid ""
"in ``collided``, the passed in body can be a :ref:`StaticBody "
"<class_StaticBody>`, :ref:`RigidBody <class_RigidBody>`, or :ref:"
"`KinematicBody <class_KinematicBody>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:544
msgid ""
"We set the Bullet's ``hit_something`` variable to ``true`` because "
"regardless of whether or not the body that the bullet collided with has the "
"``bullet_hit`` function/method, it has hit something and so we need to make "
"sure the bullet does not hit anything else."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:547
msgid "Then we free the bullet using ``queue_free``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:549
msgid ""
"You may be wondering why we even have a ``hit_something`` variable if we "
"free the bullet using ``queue_free`` as soon as it hits something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:552
msgid ""
"The reason we need to track whether we've hit something or not is because "
"``queue_free`` does not immediately free the node, so the bullet could "
"collide with another body before Godot has a chance to free it. By tracking "
"whether the bullet has hit something, we can make sure that the bullet will "
"only hit one object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:560
msgid ""
"Before we start programming the player again, let's take a quick look at "
"``Player.tscn``. Open up ``Player.tscn`` again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:563
msgid ""
"Expand ``Rotation_Helper`` and notice how it has two nodes: "
"``Gun_Fire_Points`` and ``Gun_Aim_Point``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:566
msgid ""
"``Gun_aim_point`` is the point that the bullets will be aiming at. Notice "
"how it is lined up with the center of the screen and pulled a distance "
"forward on the Z axis. ``Gun_aim_point`` will serve as the point where the "
"bullets will for sure collide with as it goes along."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:571
msgid ""
"There is a invisible mesh instance for debugging purposes. The mesh is a "
"small sphere that visually shows at which target the bullets will be aiming."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:574
msgid ""
"Open up ``Gun_Fire_Points`` and you'll find three more :ref:`Spatial "
"<class_Spatial>` nodes, one for each weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:577
msgid ""
"Open up ``Rifle_Point`` and you'll find a :ref:`Raycast <class_Raycast>` "
"node. This is where we will be sending the raycasts for our rifle's bullets. "
"The length of the raycast will dictate how far our bullets will travel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:581
msgid ""
"We are using a :ref:`Raycast <class_Raycast>` node to handle the rifle's "
"bullet because we want to fire lots of bullets quickly. If we use bullet "
"objects, it is quite possible we could run into performance issues on older "
"machines."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:585
msgid ""
"If you are wondering from where the positions of the points came, they are "
"the rough positions of the ends of each weapon. You can see this by going to "
"``AnimationPlayer``, selecting one of the firing animations and scrubbing "
"through the timeline. The point for each weapon should mostly line up with "
"the end of each weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:591
msgid ""
"Open up ``Knife_Point`` and you'll find an :ref:`Area <class_Area>` node. We "
"are using an :ref:`Area <class_Area>` for the knife because we only care for "
"all the bodies close to us, and because our knife does not fire into space. "
"If we were making a throwing knife, we would likely spawn a bullet object "
"that looks like a knife."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:596
msgid ""
"Finally, we have ``Pistol_Point``. This is the point where we will be "
"creating/instancing our bullet objects. We do not need any additional nodes "
"here, as the bullet handles all of its own collision detection."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:600
msgid ""
"Now that we've seen how we will handle our other weapons, and where we will "
"spawn the bullets, let's start working on making them work."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:603
msgid ""
"You can also look at the HUD nodes if you want. There is nothing fancy there "
"and other than using a single :ref:`Label <class_Label>`, we will not be "
"touching any of those nodes. Check :ref:"
"`doc_design_interfaces_with_the_control_nodes` for a tutorial on using GUI "
"nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:609
msgid "Creating the first weapon"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:611
msgid "Lets write the code for each of our weapons, starting with the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:613
msgid ""
"Select ``Pistol_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Pistol_Point``) and create a new script called "
"``Weapon_Pistol.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:615
msgid "Add the following code to ``Weapon_Pistol.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:666
msgid "Let's go over how the script works."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:670
msgid "First we define some class variables we'll need in the script:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:672
msgid "``DAMAGE``: The amount of damage a single bullet does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:673
msgid "``IDLE_ANIM_NAME``: The name of the pistol's idle animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:674
msgid "``FIRE_ANIM_NAME``: The name of the pistol's fire animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:675
msgid ""
"``is_weapon_enabled``: A variable for checking whether this weapon is in use/"
"enabled."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:676
msgid "``bullet_scene``: The bullet scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:677
msgid "``player_node``: A variable to hold ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:679
msgid ""
"The reason we define most of these variables is so we can use them in "
"``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:681
msgid ""
"Each of the weapons we'll make will have all these variables (minus "
"``bullet_scene``) so we have a consistent interface to interact with in "
"``Player.gd``. By using the same variables/functions in each weapon, we can "
"interact with them without having to know which weapon we are using, which "
"makes our code much more modular because we can add weapons without having "
"to change much of the code in ``Player.gd`` and it will just work."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:686
msgid ""
"We could write all the code in ``Player.gd``, but then ``Player.gd`` will "
"get increasingly harder to manage as we add weapons. By using a modular "
"design with a consistent interface, we can keep ``Player.gd`` nice and neat, "
"while also making it easier to add/remove/modify weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:691
msgid "In ``_ready`` we simply pass over it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:693
msgid ""
"There is one thing of note though, an assumption that we'll fill in ``Player."
"gd`` at some point."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:695
msgid ""
"We are going to assume that ``Player.gd`` will pass themselves in before "
"calling any of the functions in ``Weapon_Pistol.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:697
msgid ""
"While this can lead to situations where the player does not pass themselves "
"in (because we forget), we would have to have a long string of "
"``get_parent`` calls to traverse up the scene tree to retrieve the player. "
"This does not look pretty (``get_parent().get_parent().get_parent()`` and so "
"on) and it is relatively safe to assume we will remember to pass ourselves "
"to each weapon in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:703
msgid "Next let's look at ``fire_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:705
msgid "The first thing we do is instance the bullet scene we made earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:707
msgid ""
"By instancing the scene, we are creating a new node holding all the node(s) "
"in the scene we instanced, effectively cloning that scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:709
msgid ""
"Then we add a ``clone`` to the first child node of the root of the scene we "
"are currently in. By doing this, we're making it a child of the root node of "
"the currently loaded scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:711
msgid ""
"In other words, we are adding a ``clone`` as a child of the first node "
"(whatever is at the top of the scene tree) in the currently loaded/opened "
"scene. If the currently loaded/open scene is ``Testing_Area.tscn``, we'd be "
"adding our ``clone`` as a child of ``Testing_Area``, the root node in that "
"scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:714
msgid ""
"As mentioned later below in the section on adding sounds, this method makes "
"an assumption. This will be explained later in the section on adding sounds "
"in :ref:`doc_fps_tutorial_part_three`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:717
msgid ""
"Next we set the global transform of the clone to the ``Pistol_Aim_Point``'s "
"global transform. The reason we do this is so the bullet is spawned at the "
"end of the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:719
msgid ""
"You can see that ``Pistol_Aim_Point`` is positioned right at the end of the "
"pistol by clicking the :ref:`AnimationPlayer <class_AnimationPlayer>` and "
"scrolling through ``Pistol_fire``. You'll find the position is more or less "
"at the end of the pistol when it fires."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:722
msgid ""
"Next we scale it up by a factor of ``4`` because the bullet scene is a "
"little too small by default."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:724
msgid ""
"Then we set the bullet's damage (``BULLET_DAMAGE``) to the amount of damage "
"a single pistol bullet does (``DAMAGE``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:728
msgid "Now let's look at ``equip_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:730
msgid ""
"The first thing we do is check to see whether the animation manager is in "
"the pistol's idle animation. If we are in the pistol's idle animation, we "
"set ``is_weapon_enabled`` to ``true`` and return ``true`` because the pistol "
"has successfully been equipped."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:734
msgid ""
"Because we know our pistol's ``equip`` animation automatically transitions "
"to the pistol's idle animation, if we are in the pistol's idle animation the "
"pistol must have finished playing the equip animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:737
msgid ""
"We know these animations will transition because we wrote the code to make "
"them transition in ``Animation_Manager.gd``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:739
msgid ""
"Next we check to see if the player is in the ``Idle_unarmed`` animation "
"state. Because all unequipping animations go to this state, and because any "
"weapon can be equipped from this state, we change animations to "
"``Pistol_equip`` if the player is in the ``Idle_unarmed`` state."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:742
msgid ""
"Since we know ``Pistol_equip`` will transition to ``Pistol_idle``, we do not "
"need to do any more additional processing for equipping weapons, but since "
"we were not able to equip the pistol yet, we return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:747
msgid "Finally, let's look at ``unequip_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:749
msgid ""
"``unequip_weapon`` is similar to ``equip_weapon``, but instead we're "
"checking things in reverse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:751
msgid ""
"First we check to see whether the player is in the idle animation state. "
"Then we check to make sure the player is not in the ``Pistol_unequip`` "
"animation. If the player is not in the ``Pistol_unequip`` animation, we want "
"to play the ``pistol_unequip`` animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:754
msgid ""
"You may be wondering why we are checking to see whether the player is in the "
"pistol's idle animation, and then making sure the player is not unequipping "
"right after. The reason behind the additional check is because we could (in "
"rare cases) call ``unequip_weapon`` twice before we've had a chance to "
"process ``set_animation``, so we add this additional check to make sure the "
"unequip animation plays."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:758
msgid ""
"Next we check to see whether the player is in ``Idle_unarmed``, which is the "
"animation state we will transition into from ``Pistol_unequip``. If the "
"player is in ``Idle_unarmed``, then we set ``is_weapon_enabled`` to "
"``false`` since we are no longer using this weapon, and return ``true`` "
"because we have successfully unequipped the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:761
msgid ""
"If the player is not in ``Idle_unarmed``, we return ``false`` because we "
"have not yet successfully unequipped the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:764
msgid "Creating the other two weapons"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:766
msgid ""
"Now that we have all the code we'll need for the pistol, let's add the code "
"for the rifle and knife next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:768
msgid ""
"Select ``Rifle_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Rifle_Point``) and create a new script called "
"``Weapon_Rifle.gd``, then add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:821
msgid ""
"Most of this is exactly the same as ``Weapon_Pistol.gd``, so we're only "
"going to look at what's changed: ``fire_weapon``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:823
msgid ""
"The first thing we do is get the :ref:`Raycast <class_Raycast>` node, which "
"is a child of ``Rifle_Point``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:825
msgid ""
"Next we force the :ref:`Raycast <class_Raycast>` to update using "
"``force_raycast_update``. This will force the :ref:`Raycast <class_Raycast>` "
"to detect collisions when we call it, meaning we get a frame perfect "
"collision check with the 3D physics world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:828
msgid ""
"Then we check to see if the :ref:`Raycast <class_Raycast>` collided with "
"something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:830
msgid ""
"If the :ref:`Raycast <class_Raycast>` has collided with something, we first "
"get the collision body it collided with. This can be a :ref:`StaticBody "
"<class_StaticBody>`, :ref:`RigidBody <class_RigidBody>`, or a :ref:"
"`KinematicBody <class_KinematicBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:833
msgid ""
"Next we want to make sure the body we've collided with is not the player, "
"since we (probably) do not want to give the player the ability to shoot "
"themselves in the foot."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:835
msgid ""
"If the body is not the player, we then check to see if it has a function/"
"method called ``bullet_hit``. If it does, we call it and pass in the amount "
"of damage this bullet does (``DAMAGE``), and the global transform of the :"
"ref:`Raycast <class_Raycast>` so we can tell from which direction the bullet "
"came."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:840
msgid "Now all we need to do is write the code for the knife."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:842
msgid ""
"Select ``Knife_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Knife_Point``) and create a new script called "
"``Weapon_Knife.gd``, then add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:893
msgid ""
"As with ``Weapon_Rifle.gd``, the only differences are in ``fire_weapon``, so "
"let's look at that:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:895
msgid ""
"The first thing we do is get the :ref:`Area <class_Area>` child node of "
"``Knife_Point``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:897
msgid ""
"Next we want to get all the collision bodies inside the :ref:`Area "
"<class_Area>` using ``get_overlapping_bodies``. This will return a list of "
"every body that touches the :ref:`Area <class_Area>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:900
msgid "We next want to go through each of those bodies."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:902
msgid ""
"First we check to make sure the body is not the player, because we do not "
"want to let the player be able to stab themselves. If the body is the "
"player, we use ``continue`` so we jump and look at the next body in "
"``bodies``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:905
msgid ""
"If we have not jumped to the next body, we then check to see if the body has "
"the ``bullet_hit`` function/method. If it does, we call it, passing in the "
"amount of damage a single knife swipe does (``DAMAGE``) and the global "
"transform of the :ref:`Area <class_Area>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:908
msgid ""
"While we could attempt to calculate a rough location for where the knife hit "
"exactly, we are not going to because using the :ref:`Area <class_Area>`'s "
"position works well enough and the extra time needed to calculate a rough "
"position for each body is not worth the effort."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:913
msgid "Making the weapons work"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:915
msgid "Let's start making the weapons work in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:917
msgid ""
"First let's start by adding some class variables we'll need for the weapons:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:935
msgid "Let's go over what these new variables will do:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:937
msgid ""
"``animation_manager``: This will hold the :ref:`AnimationPlayer "
"<class_AnimationPlayer>` node and its script, which we wrote previously."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:938
msgid ""
"``current_weapon_name``: The name of the weapon we are currently using. It "
"has four possible values: ``UNARMED``, ``KNIFE``, ``PISTOL``, and ``RIFLE``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:939
msgid "``weapons``: A dictionary that will hold all the weapon nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:940
msgid ""
"``WEAPON_NUMBER_TO_NAME``: A dictionary allowing us to convert from a "
"weapon's number to its name. We'll use this for changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:941
msgid ""
"``WEAPON_NAME_TO_NUMBER``: A dictionary allowing us to convert from a "
"weapon's name to its number. We'll use this for changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:942
msgid ""
"``changing_weapon``: A boolean to track whether or not we are changing guns/"
"weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:943
msgid "``changing_weapon_name``: The name of the weapon we want to change to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:944
msgid ""
"``health``: How much health our player has. In this part of the tutorial we "
"will not be using it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:945
msgid ""
"``UI_status_label``: A label to show how much health we have, and how much "
"ammo we have both in our gun and in reserve."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:949
msgid ""
"Next we need to add a few things in ``_ready``. Here's the new ``_ready`` "
"function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:981
msgid "Let's go over what's changed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:983
msgid ""
"First we get the :ref:`AnimationPlayer <class_AnimationPlayer>` node and "
"assign it to the ``animation_manager`` variable. Then we set the callback "
"function to a :ref:`FuncRef <class_FuncRef>` that will call the player's "
"``fire_bullet`` function. Right now we haven't written the ``fire_bullet`` "
"function, but we'll get there soon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:987
msgid ""
"Next we get all the weapon nodes and assign them to ``weapons``. This will "
"allow us to access the weapon nodes only with their name (``KNIFE``, "
"``PISTOL``, or ``RIFLE``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:990
msgid ""
"We then get ``Gun_Aim_Point``'s global position so we can rotate the "
"player's weapons to aim at it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:992
msgid "Then we go through each weapon in ``weapons``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:994
msgid ""
"We first get the weapon node. If the weapon node is not ``null``, we then "
"set its ``player_node`` variable to this script (``Player.gd``). Then we "
"have it look at ``gun_aim_point_pos`` using the ``look_at`` function, and "
"then rotate it by ``180`` degrees on the ``Y`` axis."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:997
msgid ""
"We rotate all of those weapon points by ``180`` degrees on their ``Y`` axis "
"because our camera is pointing backwards. If we did not rotate all of these "
"weapon points by ``180`` degrees, all of the weapons would fire backwards."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1000
msgid ""
"Then we set ``current_weapon_name`` and ``changing_weapon_name`` to "
"``UNARMED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1002
msgid "Finally, we get the UI :ref:`Label <class_Label>` from our HUD."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1006
msgid ""
"Let's add a new function call to ``_physics_process`` so we can change "
"weapons. Here's the new code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1016
msgid "Now we will call ``process_changing_weapons``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1020
msgid ""
"Now let's add all the player input code for the weapons in "
"``process_input``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1060
msgid "Let's go over the additions, starting with how we're changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1062
msgid ""
"First we get the current weapon's number and assign it to "
"``weapon_change_number``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1064
msgid ""
"Then we check to see if any of the number keys (keys 1-4) are pressed. If "
"they are, we set ``weapon_change_number`` to the value mapped at that key."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1067
msgid ""
"The reason key 1 is mapped to ``0`` is because the first element in a list "
"is mapped to zero, not one. Most list/array accessors in most programming "
"languages start at ``0`` instead of ``1``. See https://en.wikipedia.org/wiki/"
"Zero-based_numbering for more information."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1070
msgid ""
"Next we check to see if ``shift_weapon_positive`` or "
"``shift_weapon_negative`` is pressed. If one of them is, we add/subtract "
"``1`` from ``weapon_change_number``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1073
msgid ""
"Because the player may have shifted ``weapon_change_number`` outside of the "
"number of weapons the player has, we clamp it so it cannot exceed the "
"maximum number of weapons the player has and it ensures "
"``weapon_change_number`` is ``0`` or more."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1076
msgid ""
"Then we check to make sure the player is not already changing weapons. If "
"the player is not, we then check to see if the weapon the player wants to "
"change to is a new weapon and not the weapon the player is currently using. "
"If the weapon the player is wanting to change to is a new weapon, we then "
"set ``changing_weapon_name`` to the weapon at ``weapon_change_number`` and "
"set ``changing_weapon`` to true."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1080
msgid ""
"For firing the weapon we first check to see if the ``fire`` action is "
"pressed. Then we check to make sure the player is not changing weapons. Next "
"we get the weapon node for the current weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1084
msgid ""
"If the current weapon node does not equal null, and the player is in its "
"``IDLE_ANIM_NAME`` state, we set the player's animation to the current "
"weapon's ``FIRE_ANIM_NAME``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1089
msgid "Let's add ``process_changing_weapons`` next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1127
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:533
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:290
msgid "Let's go over what's happening here:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1129
msgid ""
"The first thing we do is make sure we've received input to change weapons. "
"We do this by making sure ``changing_weapons`` is ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1131
msgid ""
"Next we define a variable (``weapon_unequipped``) so we can check whether "
"the current weapon has been successfully unequipped or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1133
msgid "Then we get the current weapon from ``weapons``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1135
msgid ""
"If the current weapon is not ``null``, then we need to check whether the "
"weapon is enabled. If the weapon is enabled, we call its ``unequip_weapon`` "
"function so it will start the unequip animation. If the weapon is not "
"enabled, we set ``weapon_unequipped`` to ``true`` because the weapon has "
"successfully been unequipped."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1138
msgid ""
"If the current weapon is ``null``, then we can simply set "
"``weapon_unequipped`` to ``true``. The reason we do this check is because "
"there is no weapon script/node for ``UNARMED``, but there is also no "
"animations for ``UNARMED``, so we can just start equipping the weapon the "
"player wants to change to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1141
msgid ""
"If the player has successfully unequipped the current weapon "
"(``weapon_unequipped == true``), we need to equip the new weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1143
msgid ""
"First we define a new variable (``weapon_equipped``) for tracking whether "
"the player has successfully equipped the new weapon or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1145
msgid ""
"Then we get the weapon the player wants to change to. If the weapon the "
"player wants to change to is not ``null``, we then check to see whether it's "
"enabled or not. If it is not enabled, we call its ``equip_weapon`` function "
"so it starts to equip the weapon. If the weapon is enabled, we set "
"``weapon_equipped`` to ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1148
msgid ""
"If the weapon the player wants to change to is ``null``, we simply set "
"``weapon_equipped`` to ``true`` because we do not have any node/script for "
"``UNARMED``, nor do we have any animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1151
msgid ""
"Finally, we check to see whether the player has successfully equipped the "
"new weapon. If (s)he has done so, we set ``changing_weapon`` to ``false`` "
"because the player is no longer changing weapons. We also set "
"``current_weapon_name`` to ``changing_weapon_name`` since the current weapon "
"has changed, and then we set ``changing_weapon_name`` to an empty string."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1157
msgid ""
"Now, we need to add one more function to the player, and then the player is "
"ready to start firing the weapons!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1159
msgid ""
"We need to add ``fire_bullet``, which will be called by the :ref:"
"`AnimationPlayer <class_AnimationPlayer>` at those points we set earlier in "
"the :ref:`AnimationPlayer <class_AnimationPlayer>` function track:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1171
msgid "Let's go over what this function does:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1173
msgid ""
"First we check to see whether the player is changing weapons. If the player "
"is changing weapons, we do not want shoot, so we ``return``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1175
msgid ""
"Calling ``return`` stops the rest of the function from being called. In this "
"case, we are not returning a variable because we are only interested in not "
"running the rest of the code, and because we are not looking for a returned "
"variable either when we call this function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1179
msgid ""
"Then we tell the current weapon the player is using to fire by calling its "
"``fire_weapon`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1181
msgid ""
"Remember how we mentioned the speed of the animations for firing was faster "
"than the other animations? By changing the firing animation speeds, you can "
"change how fast the weapon fires bullets!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1187
msgid ""
"Before we are ready to test our new weapons, we still have a little bit of "
"work to do."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1190
msgid "Creating some test subjects"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1192
msgid ""
"Create a new script by going to the scripting window, clicking \"file\", and "
"selecting new. Name this script ``RigidBody_hit_test`` and make sure it "
"extends :ref:`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1195
msgid "Now we need to add this code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1212
msgid "Let's go over how ``bullet_hit`` works:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1215
msgid ""
"First we get the bullet's forward directional vector. This is so we can tell "
"from which direction the bullet will hit the :ref:`RigidBody "
"<class_RigidBody>`. We will use this to push the :ref:`RigidBody "
"<class_RigidBody>` in the same direction as the bullet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1218
msgid ""
"We need to boost the directional vector by ``BASE_BULLET_BOOST`` so the "
"bullets pack a bit more of a punch and move the :ref:`RigidBody "
"<class_RigidBody>` nodes in a visible way. You can just set "
"``BASE_BULLET_BOOST`` to lower or higher values if you want less or more of "
"a reaction when the bullets collide with the :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1222
msgid "Then we apply an impulse using ``apply_impulse``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1224
msgid ""
"First, we need to calculate the position for the impulse. Because "
"``apply_impulse`` takes a vector relative to the :ref:`RigidBody "
"<class_RigidBody>`, we need to calculate the distance from the :ref:"
"`RigidBody <class_RigidBody>` to the bullet. We do this by subtracting the :"
"ref:`RigidBody <class_RigidBody>`'s global origin/position from the bullet's "
"global origin/position. This gets us the distance from the :ref:`RigidBody "
"<class_RigidBody>` to the bullet. We normalize this vector so the size of "
"the collider does not effect how much the bullets move the :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1230
msgid ""
"Finally, we need to calculate the force for the impulse. For this, we use "
"the direction the bullet is facing and multiply it by the bullet's damage. "
"This gives a nice result and for stronger bullets, we get a stronger result."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1235
msgid ""
"Now we need to attach this script to all of the :ref:`RigidBody "
"<class_RigidBody>` nodes we want to affect."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1237
msgid ""
"Open up ``Testing_Area.tscn`` and select all the cubes parented to the "
"``Cubes`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1239
msgid ""
"If you select the top cube, and then hold down ``shift`` and select the last "
"cube, Godot will select all the cubes in-between!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1242
msgid ""
"Once you have all the cubes selected, scroll down in the inspector until you "
"get to the \"scripts\" section. Click the drop down and select \"Load\". "
"Open your newly created ``RigidBody_hit_test.gd`` script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1250
msgid ""
"That was a lot of code! But now, with all that done, you can go and give "
"your weapons a test!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1252
msgid ""
"You should now be able to fire as many bullets as you want at the cubes and "
"they will move in response to the bullets colliding with them."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1255
msgid ""
"In :ref:`doc_fps_tutorial_part_three`, we will add ammo to the weapons, as "
"well as some sounds!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1259
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_2.zip <files/Godot_FPS_Part_2.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:4
msgid "Part 3"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:9
msgid ""
"In this part, we will be limiting the player's weapons by giving them ammo. "
"We will also be giving the player the ability to reload, and we will be "
"adding sounds when the weapons fire."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:15
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_two` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_two` will be the starting project for part 3"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:22
msgid "Changing levels"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:24
msgid ""
"Now that we have a fully working FPS, let's move to a more FPS-like level."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:26
msgid ""
"Open up ``Space_Level.tscn`` (``assets/Space_Level_Objects/Space_Level."
"tscn``) and/or ``Ruins_Level.tscn`` (``assets/Ruin_Level_Objects/Ruins_Level."
"tscn``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:28
msgid ""
"``Space_Level.tscn`` and ``Ruins_Level.tscn`` are complete custom FPS levels "
"created for the purpose of this tutorial. Press ``F6`` to play the open "
"scene, or press the ``play current scene button``, and give each a try."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:31
msgid ""
"``Space_Level.tscn`` is more graphically demanding of the GPU than "
"``Ruins_Level.tscn``. If your computer is struggling to render ``Space_Level."
"tscn``, try using ``Ruins_Level.tscn`` instead."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:34
msgid ""
"You might have noticed there are several :ref:`RigidBody <class_RigidBody>` "
"nodes placed throughout the level. We can place ``RigidBody_hit_test.gd`` on "
"them and then they will react to being hit with bullets, so let's do that!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:37
msgid ""
"Follow the instructions below for either (or both) of the scenes you want to "
"use"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:73
msgid ""
"Now you can fire at all the rigid bodies in either level and they will react "
"to bullets hitting them!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:76
msgid "Adding ammo"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:78
msgid ""
"Now that the player has working guns, let's give them a limited amount of "
"ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:80
msgid ""
"Firstly, we need to define a few variables in each of our weapon scripts."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:82
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:191
msgid "Open up ``Weapon_Pistol.gd`` and add the following class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:90
msgid "``ammo_in_weapon``: The amount of ammo currently in the pistol"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:91
msgid ""
"``spare_ammo``: The amount of ammo we have left in reserve for the pistol"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:92
msgid "``AMMO_IN_MAG``: The amount of ammo in a fully reloaded weapon/magazine"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:94
msgid "Now all we need to do is add a single line of code to ``fire_weapon``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:96
msgid ""
"Add the following right under ``Clone.BULLET_DAMAGE = DAMAGE``: "
"``ammo_in_weapon -= 1``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:98
msgid ""
"This will remove one from ``ammo_in_weapon`` every time the player fires. "
"Notice we're not checking to see if the player has enough ammo or not in "
"``fire_weapon``. Instead, we're going to check to see if the player has "
"enough ammo in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:103
msgid "Now we need to add ammo for both the rifle and the knife."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:105
msgid ""
"You may be wondering why we are adding ammo for the knife given it does not "
"consume any ammunition. The reason we want to add ammo to the knife is so we "
"have a consistent interface for all our weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:108
msgid ""
"If we did not add ammo variables for the knife, we would have to add checks "
"for the knife. By adding the ammo variables to the knife, we don't need to "
"worry about whether or not all our weapons have the same variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:111
msgid "Add the following class variables to ``Weapon_Rifle.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:119
msgid ""
"And then add the following to ``fire_weapon``: ``ammo_in_weapon -= 1``. Make "
"sure that ``ammo_in_weapon -= 1`` is outside of the ``if ray."
"is_colliding()`` check so the player loses ammo regardless of whether the "
"player hit something or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:122
msgid ""
"Now all that's left is the knife. Add the following to ``Weapon_Knife.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:130
msgid "Because the knife does not consume ammo, that is all we need to add."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:134
msgid "Now we need to change one thing in ``Player.gd``, that is to say,"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:136
msgid ""
"how we're firing the weapons in ``process_input``. Change the code for "
"firing weapons to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:151
msgid ""
"Now the weapons have a limited amount of ammo, and will stop firing when the "
"player runs out."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:155
msgid ""
"Ideally, we'd like to let the player be able to see how much ammo is left. "
"Let's make a new function called ``process_UI``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:157
msgid "First, add ``process_UI(delta)`` to ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:159
msgid "Now add the following to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:171
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:233
#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:216
msgid "Let's go over what's happening:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:173
msgid ""
"Firstly, we check to see if the current weapon is either ``UNARMED`` or "
"``KNIFE``. If it is, we change the ``UI_status_label``'s text to only show "
"the player's health since ``UNARMED`` and ``KNIFE`` do not consume ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:176
msgid ""
"If the player is using a weapon that consumes ammo, we first get the weapon "
"node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:178
msgid ""
"Then we change ``UI_status_label``'s text to show the player's health, along "
"with how much ammo the player has in the weapon and how much spare ammo the "
"player has for that weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:182
msgid "Now we can see how much ammo the player has through the HUD."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:185
msgid "Adding reloading to the weapons"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:187
msgid ""
"Now that the player can run out of ammo, we need a way to let the player "
"fill them back up. Let's add reloading next!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:189
msgid ""
"For reloading, we need to add a few more variables and a function to every "
"weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:200
msgid ""
"``CAN_RELOAD``: A boolean to track whether this weapon has the ability to "
"reload"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:201
msgid ""
"``CAN_REFILL``: A boolean to track whether we can refill this weapon's spare "
"ammo. We will not be using ``CAN_REFILL`` in this part, but we will in the "
"next part!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:202
msgid ""
"``RELOADING_ANIM_NAME``: The name of the reloading animation for this weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:204
msgid ""
"Now we need to add a function for handling reloading. Add the following "
"function to ``Weapon_Pistol.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:235
msgid ""
"First we define a variable to see whether or not this weapon can reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:237
msgid ""
"Then we check to see if the player is in this weapon's idle animation state "
"because we only want to be able to reload when the player is not firing, "
"equipping, or unequipping."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:240
msgid ""
"Next we check to see if the player has spare ammo, and if the ammo already "
"in the weapon is equal to a fully reloaded weapon. This way we can ensure "
"the player cannot reload when the player has no ammo or when the weapon is "
"already full of ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:243
msgid ""
"If we can still reload, then we calculate the amount of ammo needed to "
"reload the weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:245
msgid ""
"If the player has enough ammo to fill the weapon, we remove the ammo needed "
"from ``spare_ammo`` and then set ``ammo_in_weapon`` to a full weapon/"
"magazine."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:247
msgid ""
"If the player does not have enough ammo, we add all the ammo left in "
"``spare_ammo``, and then set ``spare_ammo`` to ``0``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:249
msgid ""
"Next we play the reloading animation for this weapon, and then return "
"``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:251
msgid "If the player could not reload, we return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:255
msgid ""
"Now we need to add reloading to the rifle. Open up ``Weapon_Rifle.gd`` and "
"add the following class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:264
msgid ""
"These variables are exactly the same as the pistol, just with "
"``RELOADING_ANIM_NAME`` changed to the rifle's reloading animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:266
msgid "Now we need to add ``reload_weapon`` to ``Weapon_Rifle.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:295
msgid "This code is exactly the same as the one for the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:299
msgid ""
"The last bit we need to do for the weapons is add 'reloading' to the knife. "
"Add the following class variables to ``Weapon_Knife.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:308
msgid ""
"Since we both cannot reload or refill a knife, we set both constants to "
"``false``. We also define ``RELOADING_ANIM_NAME`` as an empty string, since "
"the knife has no reloading animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:311
msgid "Now we need to add ``reloading_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:318
msgid "Since we cannot reload a knife, we always return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:321
msgid "Adding reloading to the player"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:323
msgid ""
"Now we need to add a few things to ``Player.gd``. First we need to define a "
"new class variable:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:329
msgid ""
"``reloading_weapon``: A variable to track whether or not the player is "
"currently trying to reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:332
msgid "Next we need to add another function call to ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:334
msgid ""
"Add ``process_reloading(delta)`` to ``_physics_process``. Now "
"``_physics_process`` should look something like this:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:345
msgid ""
"Now we need to add ``process_reloading``. Add the following function to "
"``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:356
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:407
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:362
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:424
msgid "Let's go over what's happening here."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:358
msgid "Firstly, we check to make sure the player is trying to reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:360
msgid ""
"If the player is trying to reload, we then get the current weapon. If the "
"current weapon does not equal ``null``, we call its ``reload_weapon`` "
"function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:362
msgid ""
"If the current weapon is equal to ``null``, then the current weapon is "
"``UNARMED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:364
msgid ""
"Finally, we set ``reloading_weapon`` to ``false`` because, regardless of "
"whether the player successfully reloaded, we've tried reloading and no "
"longer need to keep trying."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:369
msgid ""
"Before we can let the player reload, we need to change a few things in "
"``process_input``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:371
msgid ""
"The first thing we need to change is in the code for changing weapons. We "
"need to add an additional check (``if reloading_weapon == false:``) to see "
"if the player is reloading:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:382
msgid ""
"This makes it so the player cannot change weapons if the player is reloading."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:384
msgid ""
"Now we need to add the code to trigger a reload when the player pushes the "
"``reload`` action. Add the following code to ``process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:409
msgid ""
"First we make sure the player is not reloading already, nor is the player "
"trying to change weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:411
msgid "Then we check to see if the ``reload`` action has been pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:413
msgid ""
"If the player has pressed ``reload``, we then get the current weapon and "
"check to make sure it is not ``null``. Then we check to see whether the "
"weapon can reload or not using its ``CAN_RELOAD`` constant."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:416
msgid ""
"If the weapon can reload, we then get the current animation state, and make "
"a variable for tracking whether the player is already reloading or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:418
msgid ""
"We then go through every weapon to make sure the player is not already "
"playing that weapon's reloading animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:420
msgid ""
"If the player is not reloading any weapon, we set ``reloading_weapon`` to "
"``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:424
msgid ""
"One thing I like to add is where the weapon will reload itself if you try to "
"fire it and it's out of ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:426
msgid ""
"We also need to add an additional if check (``is_reloading_weapon == false:"
"``) so the player cannot fire the current weapon while reloading."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:429
msgid ""
"Let's change our firing code in ``process_input`` so it reloads when trying "
"to fire an empty weapon:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:447
msgid ""
"Now we check to make sure the player is not reloading before we fire the "
"weapon, and when we have ``0`` or less ammo in the current weapon, we set "
"``reloading_weapon`` to ``true`` if the player tries to fire."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:450
msgid ""
"This will make it so the player will try to reload when attempting to fire "
"an empty weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:454
msgid ""
"With that done, the player can now reload! Give it a try! Now you can fire "
"all the spare ammo for each weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:457
msgid "Adding sounds"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:459
msgid ""
"Finally, let's add some sounds that accompany the player firing, reloading "
"and changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:461
msgid ""
"There are no game sounds provided in this tutorial (for legal reasons). "
"https://gamesounds.xyz/ is a collection of **\"royalty free or public domain "
"music and sounds suitable for games\"**. I used Gamemaster's Gun Sound Pack, "
"which can be found in the Sonniss.com GDC 2017 Game Audio Bundle."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:465
msgid ""
"Open up ``Simple_Audio_Player.tscn``. It is simply a :ref:`Spatial "
"<class_Spatial>` with an :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` "
"as its child."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:467
msgid ""
"The reason this is called a 'simple' audio player is because we are not "
"taking performance into account and because the code is designed to provide "
"sound in the simplest way possible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:470
msgid ""
"If you want to use 3D audio, so it sounds like it's coming from a location "
"in 3D space, right click the :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` and select \"Change type\"."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:473
msgid ""
"This will open the node browser. Navigate to :ref:`AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>` and select \"change\". In the source for this "
"tutorial, we will be using :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>`, but you can optionally use :ref:"
"`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` if you desire, and the "
"code provided below will work regardless of which one you chose."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:478
msgid ""
"Create a new script and call it ``Simple_Audio_Player.gd``. Attach it to "
"the :ref:`Spatial <class_Spatial>` in ``Simple_Audio_Player.tscn`` and "
"insert the following code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:530
msgid ""
"By setting ``position`` to ``null`` by default in ``play_sound``, we are "
"making it an optional argument, meaning ``position`` doesn't necessarily "
"have to be passed in to call ``play_sound``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:537
msgid ""
"In ``_ready``, we get the :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` "
"and connect its ``finished`` signal to the ``destroy_self`` function. It "
"doesn't matter if it's an :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` "
"or :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node, as they both "
"have the finished signal. To make sure it is not playing any sounds, we call "
"``stop`` on the :ref:`AudioStreamPlayer <class_AudioStreamPlayer>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:541
msgid ""
"Make sure your sound files are **not** set to loop! If it is set to loop, "
"the sounds will continue to play infinitely and the script will not work!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:544
msgid ""
"The ``play_sound`` function is what we will be calling from ``Player.gd``. "
"We check if the sound is one of the three possible sounds, and if it is one "
"of the three sounds we set the audio stream in :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` to the correct sound."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:548
msgid ""
"If it is an unknown sound, we print an error message to the console and free "
"the audio player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:550
msgid ""
"If you are using an :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>`, "
"remove the ``#`` to set the position of the audio player node so it plays at "
"the correct position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:553
msgid ""
"Finally, we tell the :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` to "
"play."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:555
msgid ""
"When the :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` is finished "
"playing the sound, it will call ``destroy_self`` because we connected the "
"``finished`` signal in ``_ready``. We stop the :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` and free the audio player to save on resources."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:559
msgid "This system is extremely simple and has some major flaws:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:561
msgid ""
"One flaw is we have to pass in a string value to play a sound. While it is "
"relatively simple to remember the names of the three sounds, it can be "
"increasingly complex when you have more sounds. Ideally, we'd place these "
"sounds in some sort of container with exposed variables so we do not have to "
"remember the name(s) of each sound effect we want to play."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:566
msgid ""
"Another flaw is we cannot play looping sounds effects, nor background music, "
"easily with this system. Because we cannot play looping sounds, certain "
"effects, like footstep sounds, are harder to accomplish because we then have "
"to keep track of whether or not there is a sound effect and whether or not "
"we need to continue playing it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:571
msgid ""
"One of the biggest flaws with this system is we can only play sounds from "
"``Player.gd``. Ideally we'd like to be able to play sounds from any script "
"at any time."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:576
msgid ""
"With that done, let's open up ``Player.gd`` again. First we need to load the "
"``Simple_Audio_Player.tscn``. Place the following code in the class "
"variables section of the script:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:583
msgid ""
"Now we need to instance the simple audio player when we need it, and then "
"call its ``play_sound`` function and pass the name of the sound we want to "
"play. To make the process simpler, let's create a ``create_sound`` function "
"in ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:595
msgid "Let's walk through what this function does:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:599
msgid ""
"The first line instances the ``Simple_Audio_Player.tscn`` scene and assigns "
"it to a variable named ``audio_clone``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:602
msgid ""
"The second line gets the scene root, and this has a large (though safe) "
"assumption."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:604
msgid ""
"We first get this node's :ref:`SceneTree <class_SceneTree>`, and then access "
"the root node, which in this case is the :ref:`Viewport <class_Viewport>` "
"this entire game is running under. Then we get the first child of the :ref:"
"`Viewport <class_Viewport>`, which in our case happens to be the root node "
"in ``Test_Area.tscn`` or any of the other provided levels. **We are making a "
"huge assumption that the first child of the root node is the root scene that "
"the player is under, which may not always be the case**."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:610
msgid ""
"If this doesn't make sense to you, don't worry too much about it. The second "
"line of code only does not work reliably if you have multiple scenes loaded "
"as children of the root node at a time, which will rarely happen for most "
"projects and will not be happening in this tutorial series. This is only "
"potentially a issue depending on how you handle scene loading."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:614
msgid ""
"The third line adds our newly created ``Simple_Audio_Player`` scene to be a "
"child of the scene root. This works exactly the same as when we are spawning "
"bullets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:617
msgid ""
"Finally, we call the ``play_sound`` function and pass in the arguments "
"passed in to ``create_sound``. This will call ``Simple_Audio_Player.gd``'s "
"``play_sound`` function with the passed in arguments."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:622
msgid ""
"Now all that is left is playing the sounds when we want to. Let's add sound "
"to the pistol first!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:624
msgid "Open up ``Weapon_Pistol.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:626
msgid ""
"Now, we want to make a noise when the player fires the pistol, so add the "
"following to the end of the ``fire_weapon`` function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:632
msgid ""
"Now when the player fires the pistol, we'll play the ``Pistol_shot`` sound."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:634
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:656
msgid ""
"To make a sound when the player reloads, we need to add the following right "
"under ``player_node.animation_manager.set_animation(RELOADING_ANIM_NAME)`` "
"in the ``reload_weapon`` function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:641
#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:663
msgid "Now when the player reloads, we'll play the ``Gun_cock`` sound."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:645
msgid "Now let's add sounds to the rifle. Open up ``Weapon_Rifle.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:648
msgid ""
"To play sounds when the rifle is fired, add the following to the end of the "
"``fire_weapon`` function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:654
msgid ""
"Now when the player fires the rifle, we'll play the ``Rifle_shot`` sound."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:670
msgid ""
"Now you have weapons with limited ammo that play sounds when you fire them!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:672
msgid ""
"At this point, we have all the basics of an FPS game working. There are "
"still a few things that would be nice to add, and we're going to add them in "
"the next three parts!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:675
msgid ""
"For example, right now we have no way to add ammo to our spares, so we'll "
"eventually run out. Also, we don't have anything to shoot at outside of the :"
"ref:`RigidBody <class_RigidBody>` nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:678
msgid ""
"In :ref:`doc_fps_tutorial_part_four` we'll add some targets to shoot at, "
"along with some health and ammo pick ups! We're also going to add joypad "
"support, so we can play with wired Xbox 360 controllers!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_three.rst:683
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_3.zip <files/Godot_FPS_Part_3.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:4
msgid "Part 4"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:9
msgid ""
"In this part, we will be adding health pickups, ammo pickups, targets the "
"player can destroy, support for joypads, and add the ability to change "
"weapons with the scroll wheel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:13
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_three` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_three` will be the starting project for part 4"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:19
msgid "Adding joypad input"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:21
msgid ""
"In Godot, any game controller is referred to as a joypad. This includes: "
"Console controllers, Joysticks (like for flight simulators), Wheels (like "
"for driving simulators), VR Controllers, and more!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:24
msgid ""
"Firstly, we need to change a few things in our project's input map. Open up "
"the project settings and select the ``Input Map`` tab."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:26
msgid ""
"Now we need to add some joypad buttons to our various actions. Click the "
"plus icon and select ``Joy Button``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:30
msgid ""
"Feel free to use whatever button layout you want. Make sure that the device "
"selected is set to ``0``. In the finished project, we will be using the "
"following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:32
msgid "movement_sprint: ``Device 0, Button 4 (L, L1)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:33
msgid "fire: ``Device 0, Button 0 (PS Cross, XBox A, Nintendo B)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:34
msgid "reload: ``Device 0, Button 0 (PS Square, XBox X, Nintendo Y)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:35
msgid "flashlight: ``Device 0, Button 12 (D-Pad Up)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:36
msgid "shift_weapon_positive: ``Device 0, Button 15 (D-Pad Right)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:37
msgid "shift_weapon_negative: ``Device 0, Button 14 (D-Pad Left)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:38
msgid "fire_grenade: ``Device 0, Button 1 (PS Circle, XBox B, Nintendo A).``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:40
msgid "These are already set up for you if you downloaded the starter assets"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:42
msgid "Once you are happy with the input, close the project settings and save."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:46
msgid "Now let's open up ``Player.gd`` and add joypad input."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:48
msgid ""
"First, we need to define a few new class variables. Add the following class "
"variables to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:56
#, fuzzy
msgid "Let's go over what each of these does:"
msgstr "각 속성을 차례대로 살펴보겠습니다:"

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:58
msgid ""
"``JOYPAD_SENSITIVITY``: This is how fast the joypad's joysticks will move "
"the camera."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:59
msgid ""
"``JOYPAD_DEADZONE``: The dead zone for the joypad. You may need to adjust "
"depending on your joypad."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:61
msgid ""
"Many joypads jitter around a certain point. To counter this, we ignore any "
"movement within a radius of JOYPAD_DEADZONE. If we did not ignore said "
"movement, the camera would jitter."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:64
msgid ""
"Also, we are defining ``JOYPAD_SENSITIVITY`` as a variable instead of a "
"constant because we'll later be changing it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:66
msgid "Now we are ready to start handling joypad input!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:70
msgid ""
"In ``process_input``, add the following code just before "
"``input_movement_vector = input_movement_vector.normalized()``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:113
msgid "Let's go over what we're doing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:115
msgid "Firstly, we check to see if there is a connected joypad."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:117
msgid ""
"If there is a joypad connected, we then get its left stick axes for right/"
"left and up/down. Because a wired Xbox 360 controller has different joystick "
"axis mapping based on OS, we will use different axes based on the OS."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:121
msgid ""
"This tutorial assumes you are using a XBox 360 or a Playstation wired "
"controller. Also, I do not (currently) have access to a Mac computer, so the "
"joystick axes may need changing. If they do, please open a GitHub issue on "
"the Godot documentation repository! Thanks!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:125
msgid ""
"Next, we check to see if the joypad vector length is within the "
"``JOYPAD_DEADZONE`` radius. If it is, we set ``joypad_vec`` to an empty "
"Vector2. If it is not, we use a scaled Radial Dead zone for precise dead "
"zone calculation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:128
msgid ""
"You can find a great article explaining all about how to handle joypad/"
"controller dead zones here: http://www.third-helix.com/2013/04/12/doing-"
"thumbstick-dead-zones-right.html"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:131
msgid ""
"We're using a translated version of the scaled radial dead zone code "
"provided in that article. The article is a great read, and I highly suggest "
"giving it a look!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:134
msgid "Finally, we add ``joypad_vec`` to ``input_movement_vector``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:136
msgid ""
"Remember how we normalize ``input_movement_vector``? This is why! If we did "
"not normalize ``input_movement_vector``, the player could move faster if "
"they pushed in the same direction with both the keyboard and the joypad!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:141
msgid ""
"Make a new function called ``process_view_input`` and add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:218
msgid ""
"Firstly, we check the mouse mode. If the mouse mode is not "
"``MOUSE_MODE_CAPTURED``, we want to return, which will skip the code below."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:220
msgid ""
"Next, we define a new :ref:`Vector2 <class_Vector2>` called ``joypad_vec``. "
"This will hold the right joystick position. Based on the OS, we set its "
"values so it is mapped to the proper axes for the right joystick."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:223
msgid ""
"As stated above, I do not (currently) have access to a Mac computer, so the "
"joystick axes may need changing. If they do, please open a GitHub issue on "
"the Godot documentation repository! Thanks!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:226
msgid ""
"We then account for the joypad's dead zone, exactly like in "
"``process_input``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:228
msgid ""
"Then, we rotate ``rotation_helper`` and the player's :ref:`KinematicBody "
"<class_KinematicBody>` using ``joypad_vec``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:230
msgid ""
"Notice how the code that handles rotating the player and ``rotation_helper`` "
"is exactly the same as the code in ``_input``. All we've done is change the "
"values to use ``joypad_vec`` and ``JOYPAD_SENSITIVITY``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:233
msgid ""
"Due to a few mouse-related bugs on Windows, we cannot put mouse rotation in "
"``process_view`` as well. Once these bugs are fixed, this will likely be "
"updated to place the mouse rotation here in ``process_view_input`` as well."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:236
msgid ""
"Finally, we clamp the camera's rotation so the player cannot look upside "
"down."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:240
msgid ""
"The last thing we need to do is add ``process_view_input`` to "
"``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:242
msgid ""
"Once ``process_view_input`` is added to ``_physics_process``, you should be "
"able to play using a joypad!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:244
msgid ""
"I decided not to use the joypad triggers for firing because we'd then have "
"to do some more axis managing, and because I prefer to use a shoulder "
"buttons to fire."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:246
msgid ""
"If you want to use the triggers for firing, you will need to change how "
"firing works in ``process_input``. You need to get the axis values for the "
"triggers, and check if it's over a certain value, say ``0.8`` for example. "
"If it is, you add the same code as when the ``fire`` action was pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:250
msgid "Adding mouse scroll wheel input"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:252
msgid ""
"Let's add one more input related feature before we start working on the "
"pickups and the target. Let's add the ability to change weapons using the "
"scroll wheel on the mouse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:254
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:457
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:526
msgid "Open up ``Player.gd`` and add the following class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:261
msgid "Let's go over what each of these new variables will be doing:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:263
msgid "``mouse_scroll_value``: The value of the mouse scroll wheel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:264
msgid ""
"``MOUSE_SENSITIVITY_SCROLL_WHEEL``: How much a single scroll action "
"increases mouse_scroll_value"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:268
msgid "Now let's add the following to ``_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:292
msgid ""
"Firstly, we check if the event is an ``InputEventMouseButton`` event and "
"that the mouse mode is ``MOUSE_MODE_CAPTURED``. Then, we check to see if the "
"button index is either a ``BUTTON_WHEEL_UP`` or ``BUTTON_WHEEL_DOWN`` index."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:295
msgid ""
"If the event's index is indeed a button wheel index, we then check to see if "
"it is a ``BUTTON_WHEEL_UP`` or ``BUTTON_WHEEL_DOWN`` index. Based on whether "
"it is up or down, we add or subtract ``MOUSE_SENSITIVITY_SCROLL_WHEEL`` to/"
"from ``mouse_scroll_value``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:298
msgid ""
"Next, we clamp mouse scroll value to ensure it is inside the range of "
"selectable weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:300
msgid ""
"We then check to see if the player is changing weapons or reloading. If the "
"player is doing neither, we round ``mouse_scroll_value`` and cast it to an "
"``int``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:302
msgid ""
"We are casting ``mouse_scroll_value`` to an ``int`` so we can use it as a "
"key in our dictionary. If we left it as a float, we would get an error when "
"we tried to run the project."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:305
msgid ""
"Next, we check to see if the weapon name at ``round_mouse_scroll_value`` is "
"not equal to the current weapon name using ``WEAPON_NUMBER_TO_NAME``. If the "
"weapon is different than the player's current weapon, we assign "
"``changing_weapon_name``, set ``changing_weapon`` to ``true`` so the player "
"will change weapons in ``process_changing_weapon``, and set "
"``mouse_scroll_value`` to ``round_mouse_scroll_value``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:309
msgid ""
"The reason we are setting ``mouse_scroll_value`` to the rounded scroll value "
"is because we do not want the player to keep their mouse scroll wheel just "
"in between values, giving them the ability to switch almost extremely fast. "
"By assigning ``mouse_scroll_value`` to ``round_mouse_scroll_value``, we "
"ensure that each weapon takes exactly the same amount of scrolling to change."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:315
msgid ""
"One more thing we need to change is in ``process_input``. In the code for "
"changing weapons, add the following right after the line ``changing_weapon = "
"true``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:321
msgid ""
"Now the scroll value will be changed with the keyboard input. If we did not "
"change this, the scroll value would be out of sync. If the scroll wheel were "
"out of sync, scrolling forwards or backwards would not transition to the "
"next/last weapon, but rather the next/last weapon the scroll wheel changed "
"to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:326
msgid "Now you can change weapons using the scroll wheel! Go give it a whirl!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:329
#, fuzzy
msgid "Adding the health pickups"
msgstr "권총을 추가하기"

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:331
msgid ""
"Now that the player has health and ammo, we ideally need a way to replenish "
"those resources."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:333
msgid "Open up ``Health_Pickup.tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:335
msgid ""
"Expand ``Holder`` if it's not already expanded. Notice how we have two "
"Spatial nodes, one called ``Health_Kit`` and another called "
"``Health_Kit_Small``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:337
msgid ""
"This is because we're actually going to be making two sizes of health "
"pickups, one small and one large/normal. ``Health_Kit`` and "
"``Health_Kit_Small`` only have a single :ref:`MeshInstance "
"<class_MeshInstance>` as their children."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:340
msgid ""
"Next expand ``Health_Pickup_Trigger``. This is an :ref:`Area <class_Area>` "
"node we're going to use to check if the player has walked close enough to "
"pick up the health kit. If you expand it, you'll find two collision shapes, "
"one for each size. We will be using a different collision shape size based "
"on the size of the health pickup, so the smaller health pickup has a trigger "
"collision shape closer to its size."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:344
#, fuzzy
msgid ""
"The last thing to note is how we have an :ref:`AnimationPlayer "
"<class_AnimationPlayer>` node so the health kit bobs and spins around slowly."
msgstr ""
"먼저,  :ref:`AnimationPlayer <class_AnimationPlayer>` 노드를 \"background"
"\" (루트 노드) 의 자식으로 추가합니다:"

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:346
msgid ""
"Select ``Health_Pickup`` and add a new script called ``Health_Pickup.gd``. "
"Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:405
msgid ""
"Let's go over what this script is doing, starting with its class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:407
msgid ""
"``kit_size``: The size of the health pickup. Notice how we're using a "
"``setget`` function to tell if it's changed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:408
msgid ""
"``HEALTH_AMMOUNTS``: The amount of health each pickup in each size contains."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:409
msgid ""
"``RESPAWN_TIME``: The amount of time, in seconds, it takes for the health "
"pickup to respawn"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:410
msgid ""
"``respawn_timer``: A variable used to track how long the health pickup has "
"been waiting to respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:411
msgid ""
"``is_ready``: A variable to track whether the ``_ready`` function has been "
"called or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:413
msgid ""
"We're using ``is_ready`` because ``setget`` functions are called before "
"``_ready``; we need to ignore the first kit_size_change call, because we "
"cannot access child nodes until ``_ready`` is called. If we did not ignore "
"the first ``setget`` call, we would get several errors in the debugger."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:417
msgid ""
"Also, notice how we are using an exported variable. This is so we can change "
"the size of the health pickups in the editor. This makes it so we do not "
"have to make two scenes for the two sizes, since we can easily change sizes "
"in the editor using the exported variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:420
msgid ""
"See :ref:`doc_GDScript` and scroll down to the Exports section for a list of "
"export hints you can use."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:424
msgid "Let's look at ``_ready``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:426
msgid ""
"Firstly, we connect the ``body_entered`` signal from the "
"``Health_Pickup_Trigger`` to the ``trigger_body_entered`` function. This "
"makes it so any body that enters the :ref:`Area <class_Area>` triggers the "
"``trigger_body_entered`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:429
msgid ""
"Next, we set ``is_ready`` to ``true`` so we can use the ``setget`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:431
msgid ""
"Then we hide all the possible kits and their collision shapes using "
"``kit_size_change_values``. The first argument is the size of the kit, while "
"the second argument is whether to enable or disable the collision shape and "
"mesh at that size."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:434
msgid ""
"Then we make only the kit size we selected visible, calling "
"``kit_size_change_values`` and passing in ``kit_size`` and ``true``, so the "
"size at ``kit_size`` is enabled."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:438
msgid "Next let's look at ``kit_size_change``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:440
msgid "The first thing we do is check to see if ``is_ready`` is ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:442
msgid ""
"If ``is_ready`` is ``true``, we then make whatever kit already assigned to "
"``kit_size`` disabled using ``kit_size_change_values``, passing in "
"``kit_size`` and ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:444
msgid ""
"Then we assign ``kit_size`` to the new value passed in, ``value``. Then we "
"call ``kit_size_change_values`` passing in ``kit_size`` again, but this time "
"with the second argument as ``true`` so we enable it. Because we changed "
"``kit_size`` to the passed in value, this will make whatever kit size was "
"passed in visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:447
msgid ""
"If ``is_ready`` is not ``true``, we simply assign ``kit_size`` to the passed "
"in ``value``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:451
msgid "Now let's look at ``kit_size_change_values``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:453
msgid ""
"The first thing we do is check to see which size was passed in. Based on "
"which size we want to enable/disable, we want to get different nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:455
msgid ""
"We get the collision shape for the node corresponding to ``size`` and "
"disable it based on the ``enabled`` passed in argument/variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:457
msgid ""
"Why are we using ``!enable`` instead of ``enable``? This is so when we say "
"we want to enable the node, we can pass in ``true``, but since :ref:"
"`CollisionShape <class_CollisionShape>` uses disabled instead of enabled, we "
"need to flip it. By flipping it, we can enable the collision shape and make "
"the mesh visible when ``true`` is passed in."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:461
msgid ""
"We then get the correct :ref:`Spatial <class_Spatial>` node holding the mesh "
"and set its visibility to ``enable``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:463
msgid ""
"This function may be a little confusing; try to think of it like this: We're "
"enabling/disabling the proper nodes for ``size`` using ``enabled``. This is "
"so we cannot pick up health for a size that is not visible, and so only the "
"mesh for the proper size will be visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:468
msgid "Finally, let's look at ``trigger_body_entered``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:470
msgid ""
"The first thing we do is check whether or not the body that has just entered "
"has a method/function called ``add_health``. If it does, we then call "
"``add_health`` and pass in the health provided by the current kit size."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:473
msgid ""
"Then we set ``respawn_timer`` to ``RESPAWN_TIME`` so the player has to wait "
"before the player can get health again. Finally, call "
"``kit_size_change_values``, passing in ``kit_size`` and ``false`` so the kit "
"at ``kit_size`` is invisible until it has waited long enough to respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:478
msgid ""
"The last thing we need to do before the player can use this health pickup is "
"add a few things to ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:480
msgid "Open up ``Player.gd`` and add the following class variable:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:486
msgid "``MAX_HEALTH``: The maximum amount of health a player can have."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:488
msgid ""
"Now we need to add the ``add_health`` function to the player. Add the "
"following to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:496
msgid "Let's quickly go over what this does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:498
msgid ""
"We first add ``additional_health`` to the player's current health. We then "
"clamp the health so that it cannot take on a value higher than "
"``MAX_HEALTH``, nor a value lower than ``0``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:503
msgid ""
"With that done, the player can now collect health! Go place a few "
"``Health_Pickup`` scenes around and give it a try. You can change the size "
"of the health pickup in the editor when a ``Health_Pickup`` instanced scene "
"is selected, from a convenient drop down."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:507
#, fuzzy
msgid "Adding the ammo pickups"
msgstr "권총을 추가하기"

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:509
msgid ""
"While adding health is good and all, we can't reap the rewards from adding "
"it since nothing can (currently) damage us. Let's add some ammo pickups next!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:512
msgid ""
"Open up ``Ammo_Pickup.tscn``. Notice how it's structured exactly the same as "
"``Health_Pickup.tscn``, but with the meshes and trigger collision shapes "
"changed slightly to account for the difference in mesh sizes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:515
msgid ""
"Select ``Ammo_Pickup`` and add a new script called ``Ammo_Pickup.gd``. Add "
"the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:576
msgid ""
"You may have noticed this code looks almost exactly the same as the health "
"pickup. That's because it largely is the same! Only a few things have been "
"changed, and that's what we're going to go over."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:579
msgid ""
"Firstly, notice the change to ``AMMO_AMOUNTS`` from ``HEALTH_AMMOUNTS``. "
"``AMMO_AMOUNTS`` will be how many ammo clips/magazines the pickup adds to "
"the current weapon. (Unlike in the case of ``HEALTH_AMMOUNTS``, which has "
"stood for how many health points would be awarded, we add an entire clip to "
"the current weapon instead of the raw ammo amount)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:582
msgid ""
"The only other thing to notice is in ``trigger_body_entered``. We're "
"checking for the existence of and calling a function called ``add_ammo`` "
"instead of ``add_health``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:584
msgid ""
"Other than those two small changes, everything else is the same as the "
"health pickup!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:588
msgid ""
"All we need to do to make the ammo pickups work is add a new function to the "
"player. Open ``Player.gd`` and add the following function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:597
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:759
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:941
msgid "Let's go over what this function does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:599
msgid ""
"The first thing we check is whether the player is ``UNARMED``. Because "
"``UNARMED`` does not have a node/script, we want to make sure the player is "
"not ``UNARMED`` before trying to get the node/script attached to "
"``current_weapon_name``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:602
msgid ""
"Next, we check to see if the current weapon can be refilled. If the current "
"weapon can, we add a full clip/magazine worth of ammo to the weapon by "
"multiplying the current weapon's ``AMMO_IN_MAG`` value by however many ammo "
"clips we're adding (``additional_ammo``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:607
msgid ""
"With that done, you should now be able to get additional ammo! Go place some "
"ammo pickups in one/both/all of the scenes and give it a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:609
msgid ""
"Notice how we're not limiting the amount of ammo you can carry. To limit the "
"amount of ammo each weapon can carry, you need to add an additional variable "
"to each weapon's script, and then clamp the weapon's ``spare_ammo`` variable "
"after adding ammo in ``add_ammo``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:613
msgid "Adding breakable targets"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:615
msgid "Before we end this part, let's add some targets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:617
msgid ""
"Open up ``Target.tscn`` and take a look at the scenes in the scene tree."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:619
msgid ""
"Firstly, notice how we're not using a :ref:`RigidBody <class_RigidBody>` "
"node, but a :ref:`StaticBody <class_StaticBody>` one. The reason behind this "
"is our non-broken targets will not be moving anywhere; using a :ref:"
"`RigidBody <class_RigidBody>` would be more hassle than it's worth since all "
"it has to do is stay still."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:623
msgid ""
"We also save a tiny bit of performance using a :ref:`StaticBody "
"<class_StaticBody>` over a :ref:`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:625
msgid ""
"The other thing to note is we have a node called ``Broken_Target_Holder``. "
"This node is going to hold a spawned/instanced scene called ``Broken_Target."
"tscn``. Open up ``Broken_Target.tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:628
msgid ""
"Notice how the target is broken up into five pieces, each a :ref:`RigidBody "
"<class_RigidBody>` node. We're going to spawn/instance this scene when the "
"target takes too much damage and needs to be destroyed. Then, we're going to "
"hide the non-broken target, so it looks like the target shattered rather "
"than a shattered target was spawned/instanced."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:632
msgid ""
"While you still have ``Broken_Target.tscn`` open, attach "
"``RigidBody_hit_test.gd`` to all of the :ref:`RigidBody <class_RigidBody>` "
"nodes. This will make it so the player can shoot at the broken pieces and "
"they will react to the bullets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:635
msgid ""
"Alright, now switch back to ``Target.tscn``, select the ``Target`` :ref:"
"`StaticBody <class_StaticBody>` node and create a new script called ``Target."
"gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:637
msgid "Add the following code to ``Target.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:695
#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:892
msgid "Let's go over what this script does, starting with the class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:697
msgid ""
"``TARGET_HEALTH``: The amount of damage needed to break a fully healed "
"target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:698
msgid "``current_health``: The amount of health this target currently has."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:699
msgid ""
"``broken_target_holder``: A variable to hold the ``Broken_Target_Holder`` "
"node so we can use it easily."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:700
msgid ""
"``target_collision_shape``: A variable to hold the :ref:`CollisionShape "
"<class_CollisionShape>` for the non-broken target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:701
msgid ""
"``TARGET_RESPAWN_TIME``: The length of time, in seconds, it takes for a "
"target to respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:702
msgid ""
"``target_respawn_timer``: A variable to track how long a target has been "
"broken."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:703
msgid ""
"``destroyed_target``: A :ref:`PackedScene <class_PackedScene>` to hold the "
"broken target scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:705
msgid ""
"Notice how we're using an exported variable (a :ref:`PackedScene "
"<class_PackedScene>`) to get the broken target scene instead of using "
"``preload``. By using an exported variable, we can choose the scene from the "
"editor, and if we need to use a different scene, it's as easy as selecting a "
"different scene in the editor; we don't need to go to the code to change the "
"scene we're using."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:711
msgid "Let's look at ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:713
msgid ""
"The first thing we do is get the broken target holder and assign it to "
"``broken_target_holder``. Notice how we're using ``get_parent().get_node()`` "
"here, instead of ``$``. If you wanted to use ``$``, then you'd need to "
"change ``get_parent().get_node()`` to ``$\"../Broken_Target_Holder\"``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:716
msgid ""
"At the time of when this was written, I did not realize you can use ``$\"../"
"NodeName\"`` to get the parent nodes using ``$``, which is why "
"``get_parent().get_node()`` is used instead."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:719
msgid ""
"Next, we get the collision shape and assign it to "
"``target_collision_shape``. The reason we need the collision shape is "
"because even when the mesh is invisible, the collision shape will still "
"exist in the physics world. This makes it so the player could interact with "
"a non-broken target even though it's invisible, which is not what we want. "
"To get around this, we will disable/enable the collision shape as we make "
"the mesh visible/invisible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:725
msgid "Next let's look at ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:727
msgid ""
"We're only going to be using ``_physics_process`` for respawning, and so the "
"first thing we do is check to see if ``target_respawn_timer`` is greater "
"than ``0``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:729
msgid "If it is, we then subtract ``delta`` from it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:731
msgid ""
"Then we check to see if ``target_respawn_timer`` is ``0`` or less. The "
"reason behind this is since we just removed ``delta`` from "
"``target_respawn_timer``, if it's ``0`` or less, then the target just got "
"here, effectively allowing us to do whatever we need to do when the timer is "
"finished."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:734
msgid "In this case, we want to respawn the target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:736
msgid ""
"The first thing we do is remove all children in the broken target holder. We "
"do this by iterating over all of the children in ``broken_target_holder`` "
"and free them using ``queue_free``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:738
msgid ""
"Next, we enable the collision shape by setting its ``disabled`` boolean to "
"``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:740
msgid "Then we make the target, and all of its children nodes, visible again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:742
msgid ""
"Finally, we reset the target's health (``current_health``) to "
"``TARGET_HEALTH``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:746
#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:903
msgid "Finally, let's look at ``bullet_hit``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:748
msgid ""
"The first thing we do is subtract however much damage the bullet does from "
"the target's health."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:750
msgid ""
"Next we check to see if the target is at ``0`` health or lower. If it is, "
"the target has just died and we need to spawn a broken target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:752
msgid ""
"We first instance a new destroyed target scene, and assign it to a new "
"variable, a ``clone``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:754
msgid "Next we add the ``clone`` as a child of the broken target holder."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:756
msgid ""
"For bonus effect, we want to make all the target pieces explode outwards. To "
"do this, we iterate over all the children in ``clone``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:758
msgid ""
"For each child, we first check to see if it's a :ref:`RigidBody "
"<class_RigidBody>` node. If it is, we then calculate the center position of "
"the target relative to the child node. Then we figure out which direction "
"the child node is relative to the center. Using those calculated variables, "
"we push the child from the calculated center, in the direction away from the "
"center, using the damage of the bullet as the force."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:762
msgid ""
"We multiply the damage by ``12`` so it has a more dramatic effect. You can "
"change this to a higher or lower value depending on how explosively you want "
"your targets to shatter."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:765
msgid ""
"Next, we set the target's respawn timer. We set the timer to "
"``TARGET_RESPAWN_TIME``, so it takes ``TARGET_RESPAWN_TIME`` in seconds "
"until it is respawned."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:767
msgid ""
"Then we disable the non-broken target's collision shape, and set the "
"target's visibility to ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:771
msgid ""
"Make sure to set the exported ``destroyed_target`` value for ``Target.tscn`` "
"in the editor! Otherwise the targets will not be destroyed and you will get "
"an error!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:774
msgid ""
"With that done, go place some ``Target.tscn`` instances around in one/both/"
"all of the levels. You should find they explode into five pieces after "
"they've taken enough damage. After a little while, they'll respawn into a "
"whole target again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:782
msgid ""
"Now you can use a joypad, change weapons with the mouse's scroll wheel, "
"replenish your health and ammo, and break targets with your weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:784
msgid ""
"In the next part, :ref:`doc_fps_tutorial_part_five`, we're going to add "
"grenades to our player, give our player the ability to grab and throw "
"objects, and add turrets!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:789
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_4.zip <files/Godot_FPS_Part_4.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:4
msgid "Part 5"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:9
msgid ""
"In this part, we're going to add grenades to the player, give the player the "
"ability to grab and throw objects, and add turrets!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:13
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_four` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_four` will be the starting project for part 5"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:19
msgid "Adding grenades"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:21
msgid ""
"Firstly, let's give the player some grenades to play with. Open up ``Grenade."
"tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:23
msgid ""
"There are a few things to note here, the first and foremost being that the "
"grenades are going to use :ref:`RigidBody <class_RigidBody>` nodes. We're "
"going to use :ref:`RigidBody <class_RigidBody>` nodes for our grenades so "
"they bounce around the world in a (somewhat) realistic manner."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:26
msgid ""
"The second thing to note is ``Blast_Area``. This is an :ref:`Area "
"<class_Area>` node that will represent the blast radius of the grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:28
msgid ""
"Finally, the last thing to note is ``Explosion``. This is the :ref:"
"`Particles <class_Particles>` node that will emit an explosion effect when "
"the grenade explodes. One thing to note here is that we have ``One shot`` "
"enabled. This is so we emit all the particles at once. The particles are "
"also emitted using world coordinates instead of local coordinates, so we "
"have ``Local Coords`` unchecked as well."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:32
msgid ""
"If you want, you can see how the particles are set up by looking through the "
"particle's ``Process Material`` and ``Draw Passes``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:34
msgid ""
"Let's write the code needed for the grenade. Select ``Grenade`` and make a "
"new script called ``Grenade.gd``. Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:90
msgid "Let's go over what's happening, starting with the class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:92
msgid ""
"``GRENADE_DAMAGE``: The amount of damage the grenade causes when it explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:93
msgid ""
"``GRENADE_TIME``: The amount of time the grenade takes (in seconds) to "
"explode once it's created/thrown."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:94
msgid ""
"``grenade_timer``: A variable for tracking how long the grenade has been "
"created/thrown."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:95
msgid ""
"``EXPLOSION_WAIT_TIME``: The amount of time needed (in seconds) to wait "
"before we destroy the grenade scene after the explosion"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:96
msgid ""
"``explosion_wait_timer``: A variable for tracking how much time has passed "
"since the grenade exploded."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:97
msgid ""
"``rigid_shape``: The :ref:`CollisionShape <class_CollisionShape>` for the "
"grenade's :ref:`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:98
msgid ""
"``grenade_mesh``: The :ref:`MeshInstance <class_MeshInstance>` for the "
"grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:99
msgid ""
"``blast_area``: The blast :ref:`Area <class_Area>` used to damage things "
"when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:100
msgid ""
"``explosion_particles``: The :ref:`Particles <class_Particles>` that come "
"out when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:102
msgid ""
"Notice how ``EXPLOSION_WAIT_TIME`` is a rather strange number (``0.48``). "
"This is because we want ``EXPLOSION_WAIT_TIME`` to be equal to the length of "
"time the explosion particles are emitting, so when the particles are done we "
"destroy/free the grenade. We calculate ``EXPLOSION_WAIT_TIME`` by taking the "
"particle's life time and dividing it by the particle's speed scale. This "
"gets us the exact time the explosion particles will last."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:108
msgid "Now let's turn our attention to ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:110
msgid ""
"First we get all the nodes we'll need and assign them to the proper class "
"variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:112
msgid ""
"We need to get the :ref:`CollisionShape <class_CollisionShape>` and :ref:"
"`MeshInstance <class_MeshInstance>` because similarly to the target in :ref:"
"`doc_fps_tutorial_part_four`, we will be hiding the grenade's mesh and "
"disabling the collision shape when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:115
msgid ""
"The reason we need to get the blast :ref:`Area <class_Area>` is so we can "
"damage everything inside it when the grenade explodes. We'll be using code "
"similar to the knife code in the player. We need the :ref:`Particles "
"<class_Particles>` so we can emit particles when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:118
msgid ""
"After we get all the nodes and assign them to their class variables, we then "
"make sure the explosion particles are not emitting, and that they are set to "
"emit in one shot. This is to be extra sure the particles will behave the way "
"we expect them to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:123
msgid "Now let's look at ``_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:125
msgid ""
"Firstly, we check to see if the ``grenade_timer`` is less than "
"``GRENADE_TIME``. If it is, we add ``delta`` and return. This is so the "
"grenade has to wait ``GRENADE_TIME`` seconds before exploding, allowing the :"
"ref:`RigidBody <class_RigidBody>` to move around."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:128
msgid ""
"If ``grenade_timer`` is at ``GRENADE_TIMER`` or higher, we then need to "
"check if the grenade has waited long enough and needs to explode. We do this "
"by checking to see if ``explosion_wait_timer`` is equal to ``0`` or less. "
"Since we will be adding ``delta`` to ``explosion_wait_timer`` right after, "
"whatever code under the check will only be called once, right when the "
"grenade has waited long enough and needs to explode."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:132
msgid ""
"If the grenade has waited long enough to explode, we first tell the "
"``explosion_particles`` to emit. Then we make ``grenade_mesh`` invisible, "
"and disable ``rigid_shape``, effectively hiding the grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:135
msgid ""
"We then set the :ref:`RigidBody <class_RigidBody>`'s mode to ``MODE_STATIC`` "
"so the grenade does not move."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:137
msgid ""
"Then we get all the bodies in ``blast_area``, check to see if they have the "
"``bullet_hit`` method/function, and if they do, we call it and pass in "
"``GRENADE_DAMAGE`` and the transform from the body looking at the grenade. "
"This makes it where the bodies exploded by the grenade will explode outwards "
"from the grenade's position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:140
msgid ""
"We then check to see if ``explosion_wait_timer`` is less than "
"``EXPLOSION_WAIT_TIME``. If it is, we add ``delta`` to "
"``explosion_wait_timer``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:142
msgid ""
"Next, we check to see if ``explosion_wait_timer`` is greater than or equal "
"to ``EXPLOSION_WAIT_TIME``. Because we added ``delta``, this will only be "
"called once. If ``explosion_wait_timer`` is greater or equal to "
"``EXPLOSION_WAIT_TIME``, the grenade has waited long enough to let the :ref:"
"`Particles <class_Particles>` play and we can free/destroy the grenade, as "
"we no longer need it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:148
msgid ""
"Let's quickly get the sticky grenade set up too. Open up ``Sticky_Grenade."
"tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:150
msgid ""
"``Sticky_Grenade.tscn`` is almost identical to ``Grenade.tscn``, with one "
"small addition. We now have a second :ref:`Area <class_Area>`, called "
"``Sticky_Area``. We will be using ``Stick_Area`` to detect when the sticky "
"grenade has collided with the environment and needs to stick to something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:154
msgid ""
"Select ``Sticky_Grenade`` and make a new script called ``Sticky_Grenade."
"gd``. Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:244
msgid ""
"The code above is almost identical to the code for ``Grenade.gd``, so let's "
"just go over what's changed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:246
msgid "Firstly, we have a few more class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:248
msgid ""
"``attached``: A variable for tracking whether or not the sticky grenade has "
"attached to a :ref:`PhysicsBody <class_PhysicsBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:249
msgid ""
"``attach_point``: A variable to hold a :ref:`Spatial <class_Spatial>` that "
"will be at the position where the sticky grenade collided."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:250
msgid ""
"``player_body``: The player's :ref:`KinematicBody <class_KinematicBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:252
msgid ""
"They have been added to enable the sticky grenade to stick to any :ref:"
"`PhysicsBody <class_PhysicsBody>` it might hit. We also now need the "
"player's :ref:`KinematicBody <class_KinematicBody>` so the sticky grenade "
"does not stick to the player when the player throws it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:257
msgid ""
"Now let's look at the small change in ``_ready``. In ``_ready`` we've added "
"a line of code so when any body enters ``Stick_Area``, the "
"``collided_with_body`` function is called."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:262
msgid "Next let's take a look at ``collided_with_body``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:264
msgid ""
"Firstly, we make sure the sticky grenade is not colliding with itself. "
"Because the sticky :ref:`Area <class_Area>` does not know it's attached to "
"the grenade's :ref:`RigidBody <class_RigidBody>`, we need to make sure it's "
"not going to stick to itself by checking to make sure the body it has "
"collided with is not itself. If we have collided with ourself, we ignore it "
"by returning."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:269
msgid ""
"We then check to see if we have something assigned to ``player_body``, and "
"if the body the sticky grenade has collided with is the player that threw "
"it. If the body the sticky grenade has collided with is indeed "
"``player_body``, we ignore it by returning."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:272
msgid ""
"Next, we check if the sticky grenade has attached to something already or "
"not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:274
msgid ""
"If the sticky grenade is not attached, we then set ``attached`` to true so "
"we know the sticky grenade has attached to something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:276
msgid ""
"We then make a new :ref:`Spatial <class_Spatial>` node, and make it a child "
"of the body the sticky grenade collided with. We then set the :ref:`Spatial "
"<class_Spatial>`'s position to the sticky grenade's current global position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:279
msgid ""
"Because we've added the :ref:`Spatial <class_Spatial>` as a child of the "
"body the sticky grenade has collided with, it will follow along with said "
"body. We can then use this :ref:`Spatial <class_Spatial>` to set the sticky "
"grenade's position, so it is always at the same position relative to the "
"body it collided with."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:282
msgid ""
"We then disable ``rigid_shape`` so the sticky grenade is not constantly "
"moving whatever body it has collided with. Finally, we set our mode to "
"``MODE_STATIC`` so the grenade does not move."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:287
msgid "Finally, lets go over the few changes in ``_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:289
msgid ""
"Now we're checking to see if the sticky grenade is attached right at the top "
"of ``_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:291
msgid ""
"If the sticky grenade is attached, we then make sure the attached point is "
"not equal to ``null``. If the attached point is not equal to ``null``, we "
"set the sticky grenade's global position (using its global :ref:`Transform "
"<class_Transform>`'s origin) to the global position of the :ref:`Spatial "
"<class_Spatial>` assigned to ``attach_point`` (using its global :ref:"
"`Transform <class_Transform>`'s origin)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:295
msgid ""
"The only other change is now before we free/destroy the sticky grenade is to "
"check to see if the sticky grenade has an attached point. If it does, we "
"also call ``queue_free`` on the attach point, so it's also freed/destroyed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:299
msgid "Adding grenades to the player"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:301
msgid ""
"Now we need to add some code to ``Player.gd`` so we can use the grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:303
msgid ""
"Firstly, open up ``Player.tscn`` and expand the node tree until you get to "
"``Rotation_Helper``. Notice how in ``Rotation_Helper`` we have a node called "
"``Grenade_Toss_Pos``. This is where we will be spawning the grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:306
msgid ""
"Also notice how it's slightly rotated on the ``X`` axis, so it's not "
"pointing straight, but rather slightly up. By changing the rotation of "
"``Grenade_Toss_Pos``, you can change the angle at which the grenades are "
"tossed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:309
msgid ""
"Okay, now let's start making the grenades work with the player. Add the "
"following class variables to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:319
msgid ""
"``grenade_amounts``: The amount of grenades the player is currently carrying "
"(for each type of grenade)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:320
msgid ""
"``current_grenade``: The name of the grenade the player is currently using."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:321
msgid "``grenade_scene``: The grenade scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:322
msgid ""
"``sticky_grenade_scene``: The sticky grenade scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:323
msgid ""
"``GRENADE_THROW_FORCE``: The force at which the player will throw the "
"grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:325
msgid "Most of these variables are similar to how we have our weapons set up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:327
msgid ""
"While it's possible to make a more modular grenade system, I found it was "
"not worth the additional complexity for just two grenades. If you were going "
"to make a more complex FPS with more grenades, you'd likely want to make a "
"system for grenades similar to how we have the weapons set up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:332
msgid ""
"Now we need to add some code in ``_process_input`` Add the following to "
"``_process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:364
msgid ""
"Firstly, we check to see if the ``change_grenade`` action has just been "
"pressed. If it has, we then check to see which grenade the player is "
"currently using. Based on the name of the grenade the player is currently "
"using, we change ``current_grenade`` to the opposite grenade name."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:367
msgid ""
"Next we check to see if the ``fire_grenade`` action has just been pressed. "
"If it has, we then check to see if the player has more than ``0`` grenades "
"for the current grenade type selected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:370
msgid ""
"If the player has more than ``0`` grenades, we then remove one from the "
"grenade amounts for the current grenade. Then, based on the grenade the "
"player is currently using, we instance the proper grenade scene and assign "
"it to ``grenade_clone``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:373
msgid ""
"Next we add ``grenade_clone`` as a child of the node at the root and set its "
"global :ref:`Transform <class_Transform>` to ``Grenade_Toss_Pos``'s global :"
"ref:`Transform <class_Transform>`. Finally, we apply an impulse to the "
"grenade so that it is launched forward, relative to the ``Z`` directional "
"vector of ``grenade_clone``'s."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:379
msgid ""
"Now the player can use both types of grenades, but there are still a few "
"things we should probably add before we move on to adding the other things."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:381
msgid ""
"We still need a way to show the player how many grenades are left, and we "
"should probably add a way to get more grenades when the player picks up ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:383
msgid ""
"Firstly, let's change some of the code in ``Player.gd`` to show how many "
"grenades are left. Change ``process_UI`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:399
msgid "Now we'll show how many grenades the player has left in the UI."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:401
msgid ""
"While we're still in ``Player.gd``, let's add a function to add grenades to "
"the player. Add the following function to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:409
msgid ""
"Now we can add a grenade using ``add_grenade``, and it will automatically be "
"clamped to a maximum of ``4`` grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:411
msgid ""
"You can change the ``4`` to a constant if you want. You'd need to make a new "
"global constant, something like ``MAX_GRENADES``, and then change the clamp "
"from ``clamp(grenade_amounts[current_grenade], 0, 4)`` to "
"``clamp(grenade_amounts[current_grenade], 0, MAX_GRENADES)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:414
msgid ""
"If you do not want to limit how many grenades the player can carry, remove "
"the line that clamps the grenades altogether!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:416
msgid ""
"Now we have a function to add grenades, let's open up ``AmmoPickup.gd`` and "
"use it!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:418
msgid ""
"Open up ``AmmoPickup.gd`` and go to the ``trigger_body_entered`` function. "
"Change it to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:433
msgid ""
"Now we are also checking to see if the body has the ``add_grenade`` "
"function. If it does, we call it like we call ``add_ammo``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:435
msgid ""
"You may have noticed we are using a new constant we have not defined yet, "
"``GRENADE_AMOUNTS``. Let's add it! Add the following class variable to "
"``AmmoPickup.gd`` with the other class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:442
msgid "``GRENADE_AMOUNTS``: The amount of grenades each pickup contains."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:444
msgid ""
"Notice how the second element in ``GRENADE_AMOUNTS`` is ``0``. This is so "
"the small ammo pickup does not give the player any additional grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:449
msgid "Now you should be able to throw grenades! Go give it a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:453
msgid "Adding the ability to grab and throw RigidBody nodes to the player"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:455
msgid ""
"Next, let's give the player the ability to pick up and throw :ref:`RigidBody "
"<class_RigidBody>` nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:466
msgid ""
"``grabbed_object``: A variable to hold the grabbed :ref:`RigidBody "
"<class_RigidBody>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:467
msgid ""
"``OBJECT_THROW_FORCE``: The force with which the player throws the grabbed "
"object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:468
msgid ""
"``OBJECT_GRAB_DISTANCE``: The distance away from the camera at which the "
"player holds the grabbed object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:469
msgid ""
"``OBJECT_GRAB_RAY_DISTANCE``: The distance the :ref:`Raycast "
"<class_Raycast>` goes. This is the player's grab distance."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:471
msgid ""
"With that done, all we need to do is add some code to ``process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:509
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:354
msgid "Let's go over what's happening."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:511
msgid ""
"Firstly, we check to see if the action pressed is the ``fire`` action, and "
"that the player is using the ``UNARMED`` 'weapon'. This is because we only "
"want the player to be able to pick up and throw objects when the player is "
"not using any weapons. This is a design choice, but I feel it gives "
"``UNARMED`` a use."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:515
msgid "Next we check to see whether or not ``grabbed_object`` is ``null``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:519
msgid ""
"If ``grabbed_object`` is ``null``, we want to see if we can pick up a :ref:"
"`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:521
msgid ""
"We first get the direct space state from the current :ref:`World "
"<class_World>`. This is so we can cast a ray entirely from code, instead of "
"having to use a :ref:`Raycast <class_Raycast>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:524
msgid ""
"see :ref:`Ray-casting <doc_ray-casting>` for more information on raycasting "
"in Godot."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:526
msgid ""
"Then we get the center of the screen by dividing the current :ref:`Viewport "
"<class_Viewport>` size in half. We then get the ray's origin point and end "
"point using ``project_ray_origin`` and ``project_ray_normal`` from the "
"camera. If you want to know more about how these functions work, see :ref:"
"`Ray-casting <doc_ray-casting>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:529
msgid ""
"Next we send the ray into the space state and see if it gets a result. We "
"add the player and the knife's :ref:`Area <class_Area>` as two exceptions so "
"the player cannot carry themselves or the knife's collision :ref:`Area "
"<class_Area>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:532
msgid ""
"Then we check to see if we got a result back from the ray. If we have, we "
"then see if the collider the ray collided with is a :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:534
msgid ""
"If the ray collided with a :ref:`RigidBody <class_RigidBody>`, we set "
"``grabbed_object`` to the collider the ray collided with. We then set the "
"mode on the :ref:`RigidBody <class_RigidBody>` we collided with to "
"``MODE_STATIC`` so it doesn't move in our hands."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:537
msgid ""
"Finally, we set the grabbed :ref:`RigidBody <class_RigidBody>`'s collision "
"layer and collision mask to ``0``. This will make the grabbed :ref:"
"`RigidBody <class_RigidBody>` have no collision layer or mask, which means "
"it will not be able to collide with anything as long as we are holding it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:542
msgid ""
"If ``grabbed_object`` is not ``null``, then we need to throw the :ref:"
"`RigidBody <class_RigidBody>` the player is holding."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:544
#, fuzzy
msgid ""
"We first set the mode of the :ref:`RigidBody <class_RigidBody>` we are "
"holding to ``MODE_RIGID``."
msgstr ""
"먼저 우리가 잡고 있는 :ref:`RigidBody2D <class_RigidBody2D>` 의 모드를 "
"``MODE_RIGID`` 로 설정합니다."

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:546
msgid ""
"This is making a rather large assumption that all the rigid bodies will be "
"using ``MODE_RIGID``. While that is the case for this tutorial series, that "
"may not be the case in other projects."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:549
msgid ""
"If you have rigid bodies with different modes, you may need to store the "
"mode of the :ref:`RigidBody <class_RigidBody>` you have picked up into a "
"class variable so you can change it back to the mode it was in before you "
"picked it up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:552
msgid ""
"Then we apply an impulse to send it flying forward. We send it flying in the "
"direction the camera is facing, using the force we set in the "
"``OBJECT_THROW_FORCE`` variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:554
msgid ""
"We then set the grabbed :ref:`RigidBody <class_RigidBody>`'s collision layer "
"and mask to ``1``, so it can collide with anything on layer ``1`` again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:556
msgid ""
"This is, once again, making a rather large assumption that all the rigid "
"bodies will be only on collision layer ``1``, and all collision masks will "
"be on layer ``1``. If you are using this script in other projects, you may "
"need to store the collision layer/mask of the :ref:`RigidBody "
"<class_RigidBody>` in a variable before you change them to ``0``, so you "
"would have the original collision layer/mask to set for them when you are "
"reversing the process."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:559
msgid ""
"Finally, we set ``grabbed_object`` to ``null`` since the player has "
"successfully thrown the held object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:563
msgid ""
"The last thing we do is check to see whether or not ``grabbed_object`` is "
"equal to ``null``, outside all of the grabbing/throwing related code."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:565
msgid ""
"While technically not input related, it's easy enough to place the code "
"moving the grabbed object here because it's only two lines, and then all of "
"the grabbing/throwing code is in one place"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:568
msgid ""
"If the player is holding an object, we set its global position to the "
"camera's position plus ``OBJECT_GRAB_DISTANCE`` in the direction the camera "
"is facing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:572
msgid ""
"Before we test this, we need to change something in ``_physics_process``. "
"While the player is holding an object, we do not want the player to be able "
"to change weapons or reload, so change ``_physics_process`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:589
msgid "Now the player cannot change weapons or reload while holding an object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:591
msgid ""
"Now you can grab and throw RigidBody nodes while you're in the ``UNARMED`` "
"state! Go give it a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:594
msgid "Adding a turret"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:596
msgid "Next, let's make a turret to shoot the player!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:598
msgid ""
"Open up ``Turret.tscn``. Expand ``Turret`` if it's not already expanded."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:600
msgid ""
"Notice how the turret is broken up into several parts: ``Base``, ``Head``, "
"``Vision_Area``, and a ``Smoke`` :ref:`Particles <class_Particles>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:602
msgid ""
"Open up ``Base`` and you'll find it's a :ref:`StaticBody <class_StaticBody>` "
"and a mesh. Open up ``Head`` and you'll find there are several meshes, a :"
"ref:`StaticBody <class_StaticBody>` and a :ref:`Raycast <class_Raycast>` "
"node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:605
msgid ""
"One thing to note with the ``Head`` is that the raycast will be where the "
"turret's bullets will fire from if we are using raycasting. We also have two "
"meshes called ``Flash`` and ``Flash_2``. These will be the muzzle flash that "
"briefly shows when the turret fires."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:608
msgid ""
"``Vision_Area`` is an :ref:`Area <class_Area>` we'll use as the turret's "
"ability to see. When something enters ``Vision_Area``, we'll assume the "
"turret can see it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:610
msgid ""
"``Smoke`` is a :ref:`Particles <class_Particles>` node that will play when "
"the turret is destroyed and repairing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:614
msgid ""
"Now that we've looked at how the scene is set up, lets start writing the "
"code for the turret. Select ``Turret`` and create a new script called "
"``Turret.gd``. Add the following to ``Turret.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:780
msgid ""
"This is quite a bit of code, so let's break it down function by function. "
"Let's first look at the class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:782
msgid ""
"``use_raycast``: An exported boolean so we can change whether the turret "
"uses objects or raycasting for bullets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:783
msgid ""
"``TURRET_DAMAGE_BULLET``: The amount of damage a single bullet scene does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:784
msgid ""
"``TURRET_DAMAGE_RAYCAST``: The amount of damage a single :ref:`Raycast "
"<class_Raycast>` bullet does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:785
msgid ""
"``FLASH_TIME``: The amount of time (in seconds) the muzzle flash meshes are "
"visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:786
msgid ""
"``flash_timer``: A variable for tracking how long the muzzle flash meshes "
"have been visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:787
msgid "``FIRE_TIME``: The amount of time (in seconds) needed to fire a bullet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:788
msgid ""
"``fire_timer``: A variable for tracking how much time has passed since the "
"turret last fired."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:789
msgid "``node_turret_head``: A variable to hold the ``Head`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:790
msgid ""
"``node_raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` node "
"attached to the turret's head."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:791
msgid ""
"``node_flash_one``: A variable to hold the first muzzle flash :ref:"
"`MeshInstance <class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:792
msgid ""
"``node_flash_two``: A variable to hold the second muzzle flash :ref:"
"`MeshInstance <class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:793
msgid "``ammo_in_turret``: The amount of ammo currently in the turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:794
msgid "``AMMO_IN_FULL_TURRET``: The amount of ammo in a full turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:795
msgid "``AMMO_RELOAD_TIME``: The amount of time it takes the turret to reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:796
msgid ""
"``ammo_reload_timer``: A variable for tracking how long the turret has been "
"reloading."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:797
msgid "``current_target``: The turret's current target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:798
msgid ""
"``is_active``: A variable for tracking whether the turret is able to fire at "
"the target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:799
msgid ""
"``PLAYER_HEIGHT``: The amount of height we're adding to the target so we're "
"not shooting at its feet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:800
msgid "``smoke_particles``: A variable to hold the smoke particles node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:801
msgid "``turret_health``: The amount of health the turret currently has."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:802
msgid "``MAX_TURRET_HEALTH``: The amount of health a fully healed turret has."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:803
msgid ""
"``DESTROYED_TIME``: The amount of time (in seconds) it takes for a destroyed "
"turret to repair itself."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:804
msgid ""
"``destroyed_timer``: A variable for tracking the amount of time a turret has "
"been destroyed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:805
msgid ""
"``bullet_scene``: The bullet scene the turret fires (same scene as the "
"player's pistol)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:807
msgid "Whew, that's quite a few class variables!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:811
msgid "Let's go through ``_ready`` next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:813
msgid ""
"Firstly, we get the vision area and connect the ``body_entered`` and "
"``body_exited`` signals to ``body_entered_vision`` and "
"``body_exited_vision``, respectively."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:815
msgid ""
"We then get all the nodes and assign them to their respective variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:817
msgid ""
"Next, we add some exceptions to the :ref:`Raycast <class_Raycast>` so the "
"turret cannot hurt itself."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:819
msgid ""
"Then we make both flash meshes invisible at start, since we are not going to "
"be firing during ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:821
msgid ""
"We then get the smoke particles node and assign it to the "
"``smoke_particles`` variable. We also set ``emitting`` to ``false`` to "
"ensure the particles are not emitting until the turret is broken."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:824
msgid ""
"Finally, we set the turret's health to ``MAX_TURRET_HEALTH`` so it starts at "
"full health."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:828
#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:452
msgid "Now let's go through ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:830
msgid ""
"Firstly, we check whether the turret is active. If the turret is active, we "
"want to process the firing code."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:832
msgid ""
"Next, if ``flash_timer`` is greater than zero, meaning the flash meshes are "
"visible, we want to remove delta from ``flash_timer``. If ``flash_timer`` "
"gets to zero or less after we've subtracted ``delta``, we want to hide both "
"of the flash meshes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:836
msgid ""
"Next, we check whether the turret has a target. If the turret has a target, "
"we make the turret head look at it, adding ``PLAYER_HEIGHT`` so it is not "
"aiming at the player's feet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:839
msgid ""
"We then check whether the turret's health is greater than zero. If it is, we "
"then check whether there is ammo in the turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:841
msgid ""
"If there is, we then check whether ``fire_timer`` is greater than zero. If "
"it is, the turret cannot fire and we need to remove ``delta`` from "
"``fire_timer``. If ``fire_timer`` is less than or equal to zero, the turret "
"can fire a bullet, so we call the ``fire_bullet`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:844
msgid ""
"If there isn't any ammo in the turret, we check whether "
"``ammo_reload_timer`` is greater than zero. If it is, we subtract ``delta`` "
"from ``ammo_reload_timer``. If ``ammo_reload_timer`` is less than or equal "
"to zero, we set ``ammo_in_turret`` to ``AMMO_IN_FULL_TURRET`` because the "
"turret has waited long enough to refill its ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:848
msgid ""
"Next, we check whether the turret's health is less than or equal to ``0`` "
"outside of whether it is active or not. If the turret's health is zero or "
"less, we then check whether ``destroyed_timer`` is greater than zero. If it "
"is, we subtract ``delta`` from ``destroyed_timer``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:851
msgid ""
"If ``destroyed_timer`` is less than or equal to zero, we set "
"``turret_health`` to ``MAX_TURRET_HEALTH`` and stop emitting smoke particles "
"by setting ``smoke_particles.emitting`` to ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:856
msgid "Next let's go through ``fire_bullet``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:858
msgid "Firstly, we check whether the turret is using a raycast."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:860
msgid ""
"The code for using a raycast is almost entirely the same as the code in the "
"rifle from :ref:`doc_fps_tutorial_part_two`, so I'm only going to go over it "
"briefly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:863
msgid ""
"We first make the raycast look at the target, ensuring the raycast will hit "
"the target if nothing is in the way. We then force the raycast to update so "
"we get a frame perfect collision check. We then check whether the raycast "
"has collided with anything. If it has, we then check whether the collided "
"body has the ``bullet_hit`` method. If it does, we call it and pass in the "
"damage a single raycast bullet does along with the raycast's transform. We "
"then subtract ``1`` from ``ammo_in_turret``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:868
msgid ""
"If the turret is not using a raycast, we spawn a bullet object instead. This "
"code is almost entirely the same as the code in the pistol from :ref:"
"`doc_fps_tutorial_part_two`, so like with the raycast code, I'm only going "
"to go over it briefly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:871
msgid ""
"We first make a bullet clone and assign it to ``clone``. We then add that as "
"a child of the root node. We set the bullet's global transform to the barrel "
"end, scale it up since it's too small, and set its damage and speed using "
"the turret's constant class variables. We then subtract ``1`` from "
"``ammo_in_turret``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:875
msgid ""
"Then, regardless of which bullet method we used, we make both of the muzzle "
"flash meshes visible. We set ``flash_timer`` and ``fire_timer`` to "
"``FLASH_TIME`` and ``FIRE_TIME``, respectively. We then check whether the "
"turret has used the last bullet in its ammo. If it has, we set "
"``ammo_reload_timer`` to ``AMMO_RELOAD_TIME`` so the turret reloads."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:881
msgid ""
"Let's look at ``body_entered_vision`` next, and thankfully it is rather "
"short."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:883
msgid ""
"We first check whether the turret currently has a target by checking if "
"``current_target`` is equal to ``null``. If the turret does not have a "
"target, we then check whether the body that has just entered the vision :ref:"
"`Area <class_Area>` is a :ref:`KinematicBody <class_KinematicBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:886
msgid ""
"We're assuming the turret should only fire at :ref:`KinematicBody "
"<class_KinematicBody>` nodes since that is what the player is using."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:888
msgid ""
"If the body that just entered the vision :ref:`Area <class_Area>` is a :ref:"
"`KinematicBody <class_KinematicBody>`, we set ``current_target`` to the "
"body, and set ``is_active`` to ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:893
msgid "Now let's look at ``body_exited_vision``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:895
msgid ""
"Firstly, we check whether the turret has a target. If it does, we then check "
"whether the body that has just left the turret's vision :ref:`Area "
"<class_Area>` is the turret's target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:898
msgid ""
"If the body that has just left the vision :ref:`Area <class_Area>` is the "
"turret's current target, we set ``current_target`` to ``null``, set "
"``is_active`` to ``false``, and reset all the variables related to firing "
"the turret since the turret no longer has a target to fire at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:905
msgid ""
"We first subtract however much damage the bullet causes from the turret's "
"health."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:907
msgid ""
"Then, we check whether the turret has been destroyed (health being zero or "
"less). If the turret is destroyed, we start emitting the smoke particles and "
"set ``destroyed_timer`` to ``DESTROYED_TIME`` so the turret has to wait "
"before being repaired."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:912
msgid ""
"Whew, with all of that done and coded, we only have one last thing to do "
"before the turret is ready for use. Open up ``Turret.tscn`` if it's not "
"already open and select one of the :ref:`StaticBody <class_StaticBody>` "
"nodes from either ``Base`` or ``Head``. Create a new script called "
"``TurretBodies.gd`` and attach it to whichever :ref:`StaticBody "
"<class_StaticBody>` you have selected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:916
msgid "Add the following code to ``TurretBodies.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:931
msgid ""
"All this code does is call ``bullet_hit`` on whatever node to which "
"``path_to_turret_root`` leads. Go back to the editor and assign the :ref:"
"`NodePath <class_NodePath>` to the ``Turret`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:934
msgid ""
"Now select the other :ref:`StaticBody <class_StaticBody>` node (either in "
"``Body`` or ``Head``) and assign ``TurretBodies.gd`` script to it. Once the "
"script is attached, assign again the :ref:`NodePath <class_NodePath>` to the "
"``Turret`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:939
msgid ""
"The last thing we need to do is add a way for the player to be hurt. Since "
"all the bullets use the ``bullet_hit`` function, we need to add that "
"function to the player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:941
msgid "Open ``Player.gd`` and add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:948
msgid ""
"With all that done, you should have fully operational turrets! Go place a "
"few in one/both/all of the scenes and give them a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:955
msgid ""
"Now you can pick up :ref:`RigidBody <class_RigidBody>` nodes and throw "
"grenades. We now also have turrets to fire at the player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:957
msgid ""
"In :ref:`doc_fps_tutorial_part_six`, we're going to add a main menu and a "
"pause menu, add a respawn system for the player, and change/move the sound "
"system so we can use it from any script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:962
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_5.zip <files/Godot_FPS_Part_5.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:4
msgid "Part 6"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:9
msgid ""
"In this part, we're going to add a main menu and pause menu, add a respawn "
"system for the player, and change/move the sound system so we can use it "
"from any script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:12
msgid ""
"This is the last part of the FPS tutorial; by the end of this, you will have "
"a solid base to build amazing FPS games with Godot!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:16
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_five` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_five` will be the starting project for part 6"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:22
msgid "Adding the main menu"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:24
msgid ""
"Firstly, open up ``Main_Menu.tscn`` and take a look at how the scene is set "
"up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:26
msgid ""
"The main menu is broken up into three different panels, each representing a "
"different 'screen' of our main menu."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:29
msgid ""
"The ``Background_Animation`` node is just so the background of the menu is a "
"bit more interesting than a solid color. It's a camera looking around the "
"skybox, nothing fancy."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:32
msgid ""
"Feel free to expand all the nodes and see how they're set up. Remember to "
"keep only ``Start_Menu`` visible when you're done, as that's the screen we "
"want to show first when we enter the main menu."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:35
msgid ""
"Select ``Main_Menu`` (the root node) and create a new script called "
"``Main_Menu.gd``. Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:122
msgid ""
"Most of the code here relates to making UIs, which is outside of the purpose "
"of this tutorial series. **We're only going to look at the UI related code "
"briefly.**"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:125
msgid ""
"See :ref:`doc_ui_main_menu` and the tutorials following for better ways to "
"make GUIs and UIs!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:127
msgid "Let's look at the class variables first."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:129
msgid ""
"``start_menu``: A variable to hold the ``Start_Menu`` :ref:`Panel "
"<class_Panel>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:130
msgid ""
"``level_select_menu``: A variable to hold the ``Level_Select_Menu`` :ref:"
"`Panel <class_Panel>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:131
msgid ""
"``options_menu``: A variable to hold the ``Options_Menu`` :ref:`Panel "
"<class_Panel>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:132
msgid ""
"``testing_area_scene``: The path to the ``Testing_Area.tscn`` file, so we "
"can change to it from this scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:133
msgid ""
"``space_level_scene``: The path to the ``Space_Level.tscn`` file, so we can "
"change to it from this scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:134
msgid ""
"``ruins_level_scene``: The path to the ``Ruins_Level.tscn`` file, so we can "
"change to it from this scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:136
msgid ""
"You'll have to set the paths to the correct files in the editor before "
"testing this script! Otherwise it will not work!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:140
msgid "Now let's go over ``_ready``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:142
msgid ""
"Firstly, we get all the :ref:`Panel <class_Panel>` nodes and assign them to "
"the proper variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:144
msgid ""
"Next, we connect all the buttons ``pressed`` signals to their respective "
"``[panel_name_here]_button_pressed`` functions."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:146
msgid ""
"We then set the mouse mode to ``MOUSE_MODE_VISIBLE`` to ensure whenever the "
"player returns to this scene, the mouse will be visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:148
msgid ""
"Then we get a singleton, called ``Globals``. We then set the values for the :"
"ref:`HSlider <class_HSlider>` nodes so their values line up with the mouse "
"and joypad sensitivity in the singleton."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:151
msgid ""
"We have not made the ``Globals`` singleton yet, so don't worry! We're going "
"to make it soon!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:155
msgid ""
"In ``start_menu_button_pressed``, we check to see which button is pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:157
msgid ""
"Based on the button pressed, we either change the currently visible panel, "
"quit the application, or open the Godot website."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:161
msgid ""
"In ``level_select_menu_button_pressed``, we check to see which button is "
"pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:163
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:175
msgid ""
"If the ``back`` button has been pressed, we change the currently visible "
"panels to return to the main menu."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:165
msgid ""
"If one of the scene changing buttons is pressed, we fist call "
"``set_mouse_and_joypad_sensitivity`` so the singleton (``Globals.gd``) has "
"the values from the :ref:`HSlider <class_HSlider>` nodes. Then, we tell the "
"singleton to change nodes using its ``load_new_scene`` function, passing in "
"the file path of the scene the player has selected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:169
msgid "Don't worry about the singleton, we'll get there soon!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:173
msgid ""
"In ``options_menu_button_pressed``, we check to see which button is pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:177
msgid ""
"If the ``fullscreen`` button is pressed, we toggle the :ref:`OS "
"<class_OS>`'s full screen mode by setting it to the flipped version of its "
"current value."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:179
msgid ""
"If the ``vsync`` button is pressed, we set the :ref:`OS <class_OS>`'s Vsync "
"based on the state of the Vsync check button."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:183
msgid "Finally, lets take a look at ``set_mouse_and_joypad_sensitivity``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:185
msgid ""
"Firstly, we get the ``Globals`` singleton and assign it to a local variable."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:187
msgid ""
"We then set the ``mouse_sensitivity`` and ``joypad_sensitivity`` variables "
"to the values in their respective :ref:`HSlider <class_HSlider>` node "
"counterparts."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:190
msgid "Making the ``Globals`` singleton"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:192
msgid ""
"Now, for all this to work, we need to create the ``Globals`` singleton. Make "
"a new script in the ``Script`` tab and call it ``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:194
msgid ""
"To make the ``Globals`` singleton, go to the ``Script`` tab in the editor, "
"then click ``New`` and a ``Create Script`` box will appear, leave everything "
"unchanged except for the ``Path`` where you need to insert the script's name "
"``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:196
msgid "Add the following to ``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:211
msgid ""
"As you can see, it's quite small and simple. As this part progresses, we "
"will keep adding more complex logic to ``Globals.gd``, but for now, all it "
"is doing is holding two class variables, and abstract defining how we change "
"scenes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:214
msgid ""
"``mouse_sensitivity``: The current sensitivity for our mouse, so we can load "
"it in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:215
msgid ""
"``joypad_sensitivity``: The current sensitivity for our joypad, so we can "
"load it in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:217
msgid ""
"Right now, all we will be using ``Globals.gd`` for is a way to carry "
"variables across scenes. Because the sensitivities of our mouse and joypad "
"are stored in ``Globals.gd``, any changes we make in one scene (like in "
"``Options_Menu``) will affect the sensitivity for the player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:220
msgid ""
"All we're doing in ``load_new_scene`` is calling :ref:`SceneTree "
"<class_SceneTree>`'s ``change_scene`` function, passing in the scene path "
"given in ``load_new_scene``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:222
msgid ""
"That's all the code needed for ``Globals.gd`` right now! Before we can test "
"the main menu, we first need to set ``Globals.gd`` as an autoload script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:224
msgid "Open up the ``Project Settings`` and click the ``AutoLoad`` tab."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:228
msgid ""
"Then select the path to ``Globals.gd`` in the ``Path`` field by clicking the "
"button (``..``) beside it. Make sure the name in the ``Node Name`` field is "
"``Globals``. If you have everything like in the picture above, then press "
"``Add``!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:231
msgid ""
"This will make ``Globals.gd`` a singleton/autoload script, which will allow "
"us to access it from any script, in any scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:233
msgid ""
"For more information on singleton/autoload scripts, see :ref:"
"`doc_singletons_autoload`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:235
msgid ""
"Now that ``Globals.gd`` is a singleton/autoload script, you can test the "
"main menu!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:237
msgid ""
"You may want to change the main scene from ``Testing_Area.tscn`` to "
"``Main_Menu.tscn`` so when we export the game the player will start at the "
"main menu. You can do this through the ``Project Settings``, under the "
"``General`` tab. Then in the ``Application`` category, click the ``Run`` "
"subcategory and you can change the main scene by changing the value in "
"``Main Scene``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:241
msgid ""
"You'll have to set the paths to the correct files in ``Main_Menu`` in the "
"editor before testing the main menu! Otherwise you will not be able to "
"change scenes from the level select menu/screen."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:245
msgid "Adding the debug menu"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:247
msgid ""
"Now, let's add a simple debugging scene so we can track things like FPS "
"(Frames Per Second) in-game. Open up ``Debug_Display.tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:249
msgid ""
"You can see it's a :ref:`Panel <class_Panel>` positioned in the top right "
"corner of the screen. It has three :ref:`Labels <class_Label>`, one for "
"displaying the FPS at which the game is running, one for showing on what OS "
"the game is running, and a label for showing with which Godot version the "
"game is running."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:252
msgid ""
"Let's add the code needed to fill these :ref:`Labels <class_Label>`. Select "
"``Debug_Display`` and create a new script called ``Debug_Display.gd``. Add "
"the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:265
msgid "Let's go over what this script does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:269
msgid ""
"In ``_ready``, we set the ``OS_Label``'s text to the name provided by :ref:"
"`OS <class_OS>` using the ``get_name`` function. This will return the name "
"of the OS (or Operating System) for which Godot was compiled. For example, "
"when you are running Windows, it will return ``Windows``, while when you are "
"running Linux, it will return ``X11``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:273
msgid ""
"Then, we set the ``Engine_Label``'s text to the version info provided by "
"``Engine.get_version_info``. ``Engine.get_version_info`` returns a "
"dictionary full of useful information about the version of Godot which is "
"currently running. We only care about the string version, for this label at "
"least, so we get the string and assign that as the ``text`` in "
"``Engine_Label``. See :ref:`Engine <class_Engine>` for more information on "
"the values ``get_version_info`` returns."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:277
msgid ""
"In ``_process``, we set the text of the ``FPS_Label`` to ``Engine."
"get_frames_per_second``, but because ``get_frames_per_second`` returns an "
"integer, we have to cast it to a string using ``str`` before we can add it "
"to the :ref:`Label <class_Label>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:282
msgid ""
"Now let's jump back to ``Main_Menu.gd`` and change the following in "
"``options_menu_button_pressed``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:289
msgid "to this instead:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:296
msgid ""
"This will call a new function called ``set_debug_display`` in our singleton, "
"so let's add that next!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:300
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:391
msgid "Open up ``Globals.gd`` and add the following class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:314
msgid ""
"``canvas_layer``: A canvas layer so the GUI/UI created in ``Globals.gd`` is "
"always drawn on top."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:315
msgid "``DEBUG_DISPLAY``: The debug display scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:316
msgid ""
"``debug_display``: A variable to hold the debug display when/if there is one."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:318
msgid ""
"Now that we have the class variables defined, we need to add a few lines to "
"``_ready`` so ``Globals.gd`` will have a canvas layer to use (which we will "
"store in ``canvas_layer``). Change ``_ready`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:327
msgid ""
"Now in ``_ready``, we create a new canvas layer, assign it to "
"``canvas_layer`` and add it as a child. Because ``Globals.gd`` is an "
"autoload/singleton, Godot will make a :ref:`Node <class_Node>` when the game "
"is launched, and it will have ``Globals.gd`` attached to it. Since Godot "
"makes a :ref:`Node <class_Node>`, we can treat ``Globals.gd`` like any other "
"node with regard to adding/removing children nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:331
msgid ""
"The reason we're adding a :ref:`CanvasLayer <class_CanvasLayer>` is so all "
"our GUI and UI nodes we instance/spawn in ``Globals.gd`` are always drawn on "
"top of everything else."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:334
msgid ""
"When adding nodes to a singleton/autoload, you have to be careful not to "
"lose reference to any of the child nodes. This is because nodes will not be "
"freed/destroyed when you change the active scene, meaning you can run into "
"memory problems if you are instancing/spawning lots of nodes and you are not "
"freeing them."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:340
msgid "Now we need to add ``set_debug_display`` to ``Globals.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:356
msgid ""
"First we check to see if ``Globals.gd`` is trying to turn on the debug "
"display, or turn it off."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:358
msgid ""
"If ``Globals.gd`` is turning off the display, we then check to see if "
"``debug_display`` is not equal to ``null``. If ``debug_display`` is not "
"equal to ``null``, then ``Globals.gd`` must have a debug display currently "
"active. If ``Globals.gd`` has a debug display active, we free it using "
"``queue_free`` and then assign ``debug_display`` to ``null``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:361
msgid ""
"If ``Globals.gd`` is turning on the display, we then check to make sure "
"``Globals.gd`` do not already have a debug display active. We do this by "
"making sure ``debug_display`` is equal to ``null``. If ``debug_display`` is "
"``null``, we instance a new ``DEBUG_DISPLAY_SCENE``, and add it as a child "
"of ``canvas_layer``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:367
msgid ""
"With that done, we can now toggle the debug display on and off by switching "
"the :ref:`CheckButton <class_CheckButton>` in the ``Options_Menu`` panel. Go "
"give it a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:369
msgid ""
"Notice how the debug display stays even when you change scenes from the "
"``Main_Menu.tscn`` to another scene (like ``Testing_Area.tscn``). This is "
"the beauty of instancing/spawning nodes in a singleton/autoload and adding "
"them as children to the singleton/autoload. Any of the nodes added as "
"children of the singleton/autoload will stay for as long as the game is "
"running, without any additional work on our part!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:374
msgid "Adding a pause menu"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:376
msgid ""
"Let's add a pause menu so we can return to the main menu when we press the "
"``ui_cancel`` action."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:378
msgid "Open up ``Pause_Popup.tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:380
msgid ""
"Notice how the root node in ``Pause_Popup`` is a :ref:`WindowDialog "
"<class_WindowDialog>`; :ref:`WindowDialog <class_WindowDialog>` inherits "
"from :ref:`Popup <class_Popup>`, which means :ref:`WindowDialog "
"<class_WindowDialog>` can act like a popup."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:383
msgid ""
"Select ``Pause_Popup`` and scroll down all the way till you get to the "
"``Pause`` menu in the inspector. Notice how the pause mode is set to "
"``process`` instead of ``inherit`` like it is normally set by default. This "
"makes it so it will continue to process even when the game is paused, which "
"we need in order to interact with the UI elements."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:387
msgid ""
"Now that we've looked at how ``Pause_Popup.tscn`` is set up, let's write the "
"code to make it work. Normally, we'd attach a script to the root node of the "
"scene, ``Pause_Popup`` in this case, but since we'll need to receive a "
"couple of signals in ``Globals.gd``, we'll write all the code for the popup "
"there."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:399
msgid "``MAIN_MENU_PATH``: The path to the main menu scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:400
msgid "``POPUP_SCENE``: The pop up scene we looked at earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:401
msgid "``popup``: A variable to hold the pop up scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:403
msgid ""
"Now we need to add ``_process`` to ``Globals.gd`` so it can respond when the "
"``ui_cancel`` action is pressed. Add the following to ``_process``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:428
msgid ""
"Firstly, we check to see if the ``ui_cancel`` action is pressed. Then, we "
"check to make sure ``Globals.gd`` does not already have a ``popup`` open by "
"checking to see if ``popup`` is equal to ``null``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:431
msgid ""
"If ``Globals.gd`` do not have a pop-up open, we instance ``POPUP_SCENE`` and "
"assign it to ``popup``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:433
msgid ""
"We then get the quit button and assign its ``pressed`` signal to "
"``popup_quit``, which we will be adding shortly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:435
msgid ""
"Next, we assign both the ``popup_hide`` signal from the :ref:`WindowDialog "
"<class_WindowDialog>` and the ``pressed`` signal from the resume button to "
"``popup_closed``, which we will be adding shortly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:438
msgid ""
"Then, we add ``popup`` as a child of ``canvas_layer`` so it's drawn on top. "
"We then tell ``popup`` to pop up at the center of the screen using "
"``popup_centered``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:440
msgid ""
"Next, we make sure the mouse mode is ``MOUSE_MODE_VISIBLE`` so the player "
"can interact with the pop-up. If we did not do this, the player would not be "
"able to interact with the pop up in any scene where the mouse mode is "
"``MOUSE_MODE_CAPTURED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:443
msgid "Finally, we pause the entire :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:445
msgid "For more information on pausing in Godot, see :ref:`doc_pausing_games`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:449
msgid ""
"Now, we need to add the functions to which we've connected the signals. "
"Let's add ``popup_closed`` first."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:451
#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:466
msgid "Add the following to ``Globals.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:462
msgid ""
"``popup_closed`` will resume the game and destroy the pop-up if there is one."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:464
msgid ""
"``popup_quit`` is similar, but we're also making sure the mouse is visible "
"and changing scenes to the title screen."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:481
msgid ""
"``popup_quit`` will resume the game, set the mouse mode to "
"``MOUSE_MODE_VISIBLE`` to ensure the mouse is visible in the main menu, "
"destroy the pop-up if there is one, and change scenes to the main menu."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:486
msgid ""
"Before we're ready to test the pop-up, we should change one thing in "
"``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:488
msgid ""
"Open up ``Player.gd`` and in ``process_input``, change the code for "
"capturing/freeing the cursor to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:490
msgid "Instead of:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:501
msgid "You will leave only:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:509
msgid ""
"Now, instead of capturing/freeing the mouse, we check whether the current "
"mouse mode is ``MOUSE_MODE_VISIBLE``. If it is, we set it back to "
"``MOUSE_MODE_CAPTURED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:512
msgid ""
"Because the pop-up makes the mouse mode ``MOUSE_MODE_VISIBLE`` whenever you "
"pause, we no longer have to worry about freeing and capturing the cursor in "
"``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:516
msgid ""
"Now the pause menu pop-up is finished. You can now pause at any point in the "
"game and return to the main menu!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:519
msgid "Starting the respawn system"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:521
msgid ""
"Since the player can lose all their health, it would be ideal if the player "
"died and respawned too, so let's add that next!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:523
msgid ""
"Firstly, open up ``Player.tscn`` and expand ``HUD``. Notice how there is a :"
"ref:`ColorRect <class_ColorRect>` called ``Death_Screen``. When the player "
"dies, we're going to make ``Death_Screen`` visible, and show them how long "
"they have to wait before the player is able to respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:536
msgid "``RESPAWN_TIME``: The amount of time (in seconds) it takes to respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:537
msgid "``dead_time``: A variable to track how long the player has been dead."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:538
msgid ""
"``is_dead``: A variable to track whether or not the player is currently dead."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:539
msgid "``globals``: A variable to hold the ``Globals.gd`` singleton."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:543
msgid ""
"We now need to add a couple lines to ``_ready``, so we can use ``Globals."
"gd`` in ``Player.gd``. Add the following to ``_ready``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:551
msgid ""
"Now we're getting the ``Globals.gd`` singleton and assigning it to "
"``globals``. We also set the player's global position by setting the origin "
"in the player's global :ref:`Transform <class_Transform>` to the position "
"returned by ``globals.get_respawn_position``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:554
msgid "Don't worry, we will be adding ``get_respawn_position`` further below!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:558
msgid ""
"Next, we need to make a few changes to ``_physics_process``. Change "
"``_physics_process`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:576
msgid ""
"Now the player will not be processing input or movement input when the "
"player is dead. We are also now calling ``process_respawn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:578
msgid ""
"The ``if !is_dead:`` expression is equivalent and works in the same way as "
"the expression ``if is_dead == false:``. And by removing the ``!`` sign from "
"the expression we obtain the opposite expression ``if is_dead == true:``. It "
"is just a shorter way of writing the same code functionality."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:580
msgid "We have not made ``process_respawn`` yet, so let's change that."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:584
msgid "Let's add ``process_respawn``. Add the following to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:643
msgid "Let's go through what this function is doing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:647
msgid ""
"Firstly, we check whether the player has just died by checking if ``health`` "
"is less than or equal to ``0`` and ``is_dead`` is ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:649
msgid ""
"If the player has just died, we disable the collision shapes for the player. "
"We do this to make sure the player is not blocking anything with their dead "
"body."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:651
msgid ""
"Next, we set ``changing_weapon`` to ``true`` and set "
"``changing_weapon_name`` to ``UNARMED``. This is so, if the player is using "
"a weapon, it is put away when they dies."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:654
msgid ""
"We then make the ``Death_Screen`` :ref:`ColorRect <class_ColorRect>` visible "
"so the player gets a nice grey overlay over everything when they have died. "
"We then make the rest of the UI, the ``Panel`` and ``Crosshair`` nodes, "
"invisible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:657
msgid ""
"Next, we set ``dead_time`` to ``RESPAWN_TIME`` so we can start counting down "
"how long the player has been dead. We also set ``is_dead`` to ``true`` so we "
"know the player has died."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:659
msgid ""
"If the player is holding an object when they died, we need to throw it. We "
"first check whether the player is holding an object or not. If the player is "
"holding a object, we throw it using the same code as the throwing code we "
"added in :ref:`doc_fps_tutorial_part_five`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:662
msgid ""
"The ``\\n`` combination from the expression ``You have died\\n`` is a "
"command used to display the text following after it on a new line below. "
"This is always useful when you want to nicely group displayed text in "
"multiple lines so it looks better and is more readable by the players of "
"your games."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:666
msgid ""
"Then we check whether the player is dead. If so, we then remove ``delta`` "
"from ``dead_time``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:668
msgid ""
"We then make a new variable called ``dead_time_pretty``, where we convert "
"``dead_time`` to a string, using only the first three characters starting "
"from the left. This gives the player a nice looking string showing how much "
"time the player has left to wait before the player can respawn."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:671
msgid ""
"We then change the :ref:`Label <class_Label>` in ``Death_Screen`` to show "
"how much time the player has left."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:673
msgid ""
"Next we check to see if the player has waited long enough and can respawn. "
"We do this by checking to see if ``dead_time`` is ``0`` or less."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:675
msgid ""
"If the player has waited long enough to respawn, we set the player's "
"position to a new respawn position provided by ``get_respawn_position``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:677
msgid ""
"We then enable both of the player's collision shapes so the player can "
"collide again with the environment."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:679
msgid ""
"Next, we make the ``Death_Screen`` invisible and make the rest of the UI, "
"the ``Panel`` and ``Crosshair`` nodes, visible again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:681
msgid ""
"We then go through each weapon and call its ``reset_weapon`` function, which "
"we will add soon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:683
msgid ""
"Then, we reset ``health`` to ``100``, ``grenade_amounts`` to its default "
"values, and change ``current_grenade`` to ``Grenade``. This effectively "
"resets these variables to their default values."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:686
msgid "Finally, we set ``is_dead`` to ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:690
msgid ""
"Before we leave ``Player.gd``, we need to add one quick thing to ``_input``. "
"Add the following at the beginning of ``_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:697
msgid "Now, when the player is dead, they cannot look around with the mouse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:700
msgid "Finishing the respawn system"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:702
msgid ""
"Firstly, let's open ``Weapon_Pistol.gd`` and add the ``reset_weapon`` "
"function. Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:710
msgid ""
"Now, when we call ``reset_weapon``, the ammo in the pistol and the ammo in "
"the spares will be reset to their default values."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:712
msgid "Now let's add ``reset_weapon`` in ``Weapon_Rifle.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:720
msgid "And add the following to ``Weapon_Knife.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:728
#, fuzzy
msgid "Now all the weapons will reset when the player dies."
msgstr "Player가 죽을 때 막대가 사라지게 하기"

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:732
msgid ""
"Now we need to add a few things to ``Globals.gd``. Firstly, add the "
"following class variable:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:738
msgid ""
"``respawn_points``: A variable to hold all the respawn points in a level"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:740
msgid ""
"Because we're getting a random spawn point each time, we need to randomize "
"the number generator. Add the following to ``_ready``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:746
msgid ""
"``randomize`` will get us a new random seed so we get a (relatively) random "
"string of numbers when we use any of the random functions."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:748
msgid "Now let's add ``get_respawn_position`` to ``Globals.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:763
msgid ""
"Firstly, we check if ``Globals.gd`` has any ``respawn_points`` by checking "
"whether ``respawn_points`` is ``null`` or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:765
msgid ""
"If ``respawn_points`` is ``null``, we return a position of empty :ref:"
"`Vector 3 <class_Vector3>` with the position ``(0, 0, 0)``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:767
msgid ""
"If ``respawn_points`` is not ``null``, we then get a random number between "
"``0`` and the number of elements we have in ``respawn_points``, minus ``1`` "
"since most programming languages, including ``GDScript``, start counting "
"from ``0`` when you are accessing elements in a list."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:770
msgid ""
"We then return the position of the :ref:`Spatial <class_Spatial>` node at "
"``respawn_point`` position in ``respawn_points``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:774
msgid ""
"Before we are done with ``Globals.gd``, we need to add the following to "
"``load_new_scene``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:780
msgid ""
"We set ``respawn_points`` to ``null`` so when/if the player gets to a level "
"with no respawn points, we do not respawn the player at the respawn points "
"that were in the level prior."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:785
msgid ""
"Now all we need is a way to set the respawn points. Open up ``Ruins_Level."
"tscn`` and select ``Spawn_Points``. Add a new script called "
"``Respawn_Point_Setter.gd`` and attach it to ``Spawn_Points``. Add the "
"following to ``Respawn_Point_Setter.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:796
msgid ""
"Now, when a node with ``Respawn_Point_Setter.gd`` has its ``_ready`` "
"function called, all the children nodes of the node with "
"``Respawn_Point_Setter.gd``, ``Spawn_Points`` in the case of ``Ruins_Level."
"tscn``, will be added to ``respawn_points`` in ``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:800
msgid ""
"Any node with ``Respawn_Point_Setter.gd`` has to be above the player in the :"
"ref:`SceneTree <class_SceneTree>` so the respawn points are set before the "
"player needs them in the player's ``_ready`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:805
msgid ""
"Now, when the player dies, they will respawn after waiting ``4`` seconds!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:807
msgid ""
"No spawn points are already set up for any of the levels besides "
"``Ruins_Level.tscn``! Adding spawn points to ``Space_Level.tscn`` is left as "
"an exercise for the reader."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:811
msgid "Writing a sound system we can use anywhere"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:813
msgid ""
"Finally, let's make a sound system so we can play sounds from anywhere, "
"without having to use the player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:815
#, fuzzy
msgid ""
"Firstly, open up ``SimpleAudioPlayer.gd`` and change it to the following:"
msgstr "먼저 ``Game.gd`` 를 열고 다음의 멤버 변수를 추가해주세요:"

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:859
msgid ""
"There are several changes from the old version, first and foremost being we "
"are no longer storing the sound files in ``SimpleAudioPlayer.gd`` anymore. "
"This is much better for performance since we're no longer loading each audio "
"clip when we create a sound, but instead we are forcing an audio stream to "
"be passed in to ``play_sound``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:863
msgid ""
"Another change is we have a new class variable called ``should_loop``. "
"Instead of just destroying the audio player every time it's finished, we "
"instead want to check and see if the audio player is set to loop or not. "
"This allows us to have audio like looping background music without having to "
"spawn a new audio player with the music when the old one is finished."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:865
msgid ""
"Finally, instead of being instanced/spawned in ``Player.gd``, the audio "
"player is instead going to be spawned in ``Globals.gd`` so we can create "
"sounds from any scene. Now the audio player stores ``Globals.gd`` singleton "
"so when the audio player is destroyed, we can also remove it from a list in "
"``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:868
msgid "Let's go over the changes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:872
msgid ""
"For the class variables, we removed all the ``audio_[insert name here]`` "
"variables since we will instead have these passed in from ``Globals.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:874
msgid ""
"We also added two new class variables, ``should_loop`` and ``globals``. "
"We'll use ``should_loop`` to tell whether the audio player should loop when "
"the sound has finished, and ``globals`` will hold the ``Globals.gd`` "
"singleton."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:877
msgid ""
"The only change in ``_ready`` is now audio player is getting the ``Globals."
"gd`` singleton and assigning it to ``globals``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:879
msgid ""
"``play_sound`` now expects an audio stream, named ``audio_stream``, to be "
"passed in, instead of ``sound_name``. Instead of checking the sound name and "
"setting the stream for the audio player, we instead check to make sure an "
"audio stream was passed in. If an audio stream was not passed in, we print "
"an error message, remove the audio player from a list in the ``Globals.gd`` "
"singleton called ``created_audio``, and then free the audio player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:883
msgid ""
"Finally, in ``sound_finished`` we first check to see if the audio player is "
"supposed to loop or not using ``should_loop``. If the audio player is "
"supposed to loop, we play the sound again from the start, at position "
"``0.0``. If the audio player is not supposed to loop, we remove the audio "
"player from a list in the ``Globals.gd`` singleton called ``created_audio``, "
"and then free the audio player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:889
msgid ""
"Now that we've finished our changes to ``SimpleAudioPlayer.gd``, we now need "
"to turn our attention to ``Globals.gd``. First, add the following class "
"variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:905
msgid "Let's go over these global variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:907
msgid ""
"``audio_clips``: A dictionary holding all the audio clips ``Globals.gd`` can "
"play."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:908
msgid "``SIMPLE_AUDIO_PLAYER_SCENE``: The simple audio player scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:909
msgid ""
"``created_audio``: A list to hold all the simple audio players ``Globals."
"gd`` has created."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:911
msgid ""
"If you want to add additional audio, you need to add it to ``audio_clips``. "
"No audio files are provided in this tutorial, so you will have to provide "
"your own."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:914
msgid ""
"One site I'd recommend is **GameSounds.xyz**. I'm using the Gamemaster audio "
"gun sound pack included in the Sonniss' GDC Game Audio bundle for 2017. The "
"tracks I've used (with some minor editing) are as follows:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:918
msgid "gun_revolver_pistol_shot_04,"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:919
msgid "gun_semi_auto_rifle_cock_02,"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:920
msgid "gun_submachine_auto_shot_00_automatic_preview_01"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:924
msgid ""
"Now we need to add a new function called ``play_sound`` to ``Globals.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:943
msgid ""
"Firstly, we check whether ``Globals.gd`` has an audio clip with the name "
"``sound_name`` in ``audio_clips``. If it does not, we print an error message."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:945
msgid ""
"If ``Globals.gd`` has an audio clip with the name ``sound_name``, we then "
"instance/spawn a new ``SIMPLE_AUDIO_PLAYER_SCENE`` and assign it to "
"``new_audio``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:947
msgid ""
"We then set ``should_loop``, and add ``new_audio`` as a child of ``Globals."
"gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:949
msgid ""
"Remember, we have to be careful adding nodes to a singleton, since these "
"nodes will not be destroyed when changing scenes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:951
msgid ""
"We then call ``play_sound``, passing in the audio clip associated with "
"``sound_name`` and the sound position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:955
msgid ""
"Before we leave ``Globals.gd``, we need to add a few lines of code to "
"``load_new_scene`` so when the player changes scenes, all the audio is "
"destroyed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:957
msgid "Add the following to ``load_new_scene``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:966
msgid ""
"Now, before ``Globals.gd`` changes scenes, it goes through each simple audio "
"player in ``created_sounds`` and frees/destroys them. Once ``Globals.gd`` "
"has gone through all the sounds in ``created_audio``, we clear "
"``created_audio`` so it no longer holds any references to any (now freed/"
"destroyed) simple audio players."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:971
msgid ""
"Let's change ``create_sound`` in ``Player.gd`` to use this new system. "
"First, remove ``simple_audio_player`` from ``Player.gd``'s class variables "
"since we will no longer be directly instancing/spawning sounds in ``Player."
"gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:974
msgid "Now, change ``create_sound`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:981
msgid ""
"Now, whenever ``create_sound`` is called, we simply call ``play_sound`` in "
"``Globals.gd``, passing in all the arguments received."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:985
msgid ""
"Now all the sounds in our FPS can be played from anywhere. All we have to do "
"is get the ``Globals.gd`` singleton, and call ``play_sound``, pass in the "
"name of the sound we want to play, whether we want it to loop or not, and "
"the position from which to play the sound."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:988
msgid ""
"For example, if you want to play an explosion sound when the grenade "
"explodes you'd need to add a new sound to ``audio_clips`` in ``Globals.gd``, "
"get the ``Globals.gd`` singleton, and then you just need to add something "
"like ``globals.play_sound(\"explosion\", false, global_transform.origin)`` "
"in the grenades ``_process`` function, right after the grenade damages all "
"the bodies within its blast radius."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:998
msgid "Now you have a fully working single player FPS!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1000
msgid ""
"At this point, you have a good base to build more complicated FPS games."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1004
msgid ""
"You can download the finished project for the entire tutorial here: :"
"download:`Godot_FPS_Part_6.zip <files/Godot_FPS_Finished.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1006
msgid ""
"The finished project source files contain the same code, just written in a "
"different order. This is because the finished project source files are what "
"the tutorial is based on."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1009
msgid ""
"The finished project code was written in the order that features were "
"created, not necessarily in a order that is ideal for learning."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1012
msgid ""
"Other than that, the source is exactly the same, just with helpful comments "
"explaining what each part does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1015
msgid ""
"The finished project source is hosted on Github as well: https://github.com/"
"TwistedTwigleg/Godot_FPS_Tutorial"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1017
msgid ""
"**Please note that the code in Github may or may not be in sync with the "
"tutorial in the documentation**."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1019
msgid ""
"The code in the documentation is likely better managed and/or more up to "
"date. If you are unsure of which to use, use the project(s) provided in the "
"documentation, as they are maintained by the Godot community."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1022
msgid ""
"You can download all the ``.blend`` files used in this tutorial here: :"
"download:`Godot_FPS_BlenderFiles.zip <files/Godot_FPS_BlenderFiles.zip>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1024
msgid ""
"All assets provided in the started assets (unless otherwise noted) were "
"**originally created by TwistedTwigleg, with changes/additions by the Godot "
"community.** All original assets provided for this tutorial are released "
"under the ``MIT`` license."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1029
msgid ""
"The skybox is created by **StumpyStrust** and can be found at OpenGameArt."
"org. https://opengameart.org/content/space-skyboxes-0 . The skybox is "
"licensed under the ``CC0`` license."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1034
msgid ""
"The skybox was converted to a 360 equirectangular image using this tool: "
"https://www.360toolkit.co/convert-cubemap-to-spherical-equirectangular.html"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1036
msgid ""
"While no sounds are provided, you can find many game ready sounds at https://"
"gamesounds.xyz/"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_six.rst:1038
msgid ""
"**OpenGameArt.org, 360toolkit.co, the creator(s) of Titillium-Regular, "
"StumpyStrust, and GameSounds.xyz are in no way involved in this tutorial.**"
msgstr ""

#: ../../docs/tutorials/audio/index.rst:2
msgid "Audio"
msgstr "오디오"

#: ../../docs/tutorials/audio/audio_buses.rst:4
#: ../../docs/tutorials/audio/audio_buses.rst:43
msgid "Audio buses"
msgstr "오디오 버스(Audio buses)"

#: ../../docs/tutorials/audio/audio_buses.rst:9
msgid ""
"Beginning with Godot 3.0, the audio engine has been rewritten from scratch. "
"The aim now is to present an interface much friendlier to sound design "
"professionals. To achieve this, the audio engine contains a virtual rack "
"where unlimited audio buses can be created and, on each of it, unlimited "
"amount of effect processors can be added (or more like, as long as your CPU "
"holds up!)"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:16
msgid ""
"The implementation in Godot is pretty efficient and has been written "
"entirely from the ground up, without relying on any existing audio libraries."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:19
msgid ""
"Even the effect processors were written exclusively for Godot (save for the "
"pitch shifting library), with games in mind. This allows an efficient "
"tradeoff between performance and sound quality."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:24
msgid "Decibel scale"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:26
msgid ""
"The new audio engine works primarily using the decibel scale. We have chosen "
"this over linear representation of amplitude because it's more intuitive for "
"audio professionals."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:30
msgid "For those unfamiliar with it, it can be explained with a few facts:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:32
msgid ""
"The decibel (dB) scale is a relative scale. It represents the ratio of sound "
"power by using 10 times the base 10 logarithm of the ratio (10×log\\ :sub:"
"`10`\\ (P/P\\ :sub:`0`\\ ))."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:33
msgid ""
"For every 3dB, sound doubles or halves. 6dB represents a factor 4, 9dB a "
"factor 8, 10dB a factor 10, 20dB a factor 100, etc."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:34
msgid ""
"Since the scale is logarithmic, true zero (no audio) can't be represented."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:35
msgid ""
"0dB is considered the maximum audible volume without *clipping*. This limit "
"is not the human limit, but a limit from the sound hardware. Your sound "
"output simply can't output any sound louder than 0dB without distorting it "
"(clipping it)."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:36
msgid ""
"Because of the above, your sound mix should work in a way where the sound "
"output of the *Master Bus* (more on that later), should never be above 0dB."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:37
msgid ""
"Every 3dB below the 0dB limit, sound energy is *halved*. It means the sound "
"volume at -3dB is half as loud as 0dB. -6dB is half as loud as -3dB and so "
"on."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:38
msgid ""
"When working with decibels, sound is considered no longer audible between "
"-60dB and -80dB. This makes your working range generally between -60dB and "
"0dB."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:40
msgid ""
"This can take a bit getting used to, but it's friendlier in the end and will "
"allow you to communicate better with audio professionals."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:45
msgid "Audio buses can be found in the bottom panel of the Godot Editor:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:49
msgid ""
"An *Audio Bus* bus (often called *Audio Channel* too) is a device where "
"audio is channeled. Audio data passes through it and can be *modified* and "
"*re-routed*. A VU meter (the bars that go up and down when sound is played) "
"can measure the loudness of the sound in Decibel scale."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:51
msgid ""
"The leftmost bus is the *Master Bus*. This bus outputs the mix to your "
"speakers so, as mentioned in the item above (Decibel Scale), make sure that "
"your mix rarely or never goes above 0dB in this bus. The rest of the audio "
"buses are used for *routing*. This means that, after modifying the sound, "
"they must send it to another bus to the left. Routing is always from right "
"to left without exception as this avoids creating infinite routing loops!"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:57
msgid "In the above image, *Bus 2* is routing its output to the *Master* bus."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:60
msgid "Playback of audio to a bus"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:62
msgid ""
"To test playback to a bus, create an AudioStreamPlayer node, load an "
"AudioStream and select a target bus for playback:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:66
msgid "Finally, toggle the \"playing\" property to on and sound will flow."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:68
msgid ""
"You may also be interested in reading about :ref:`doc_audio-streams` now."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:71
msgid "Adding effects"
msgstr "효과 추가하기"

#: ../../docs/tutorials/audio/audio_buses.rst:73
msgid ""
"Audio buses can contain all sorts of effects. These effects modify the sound "
"in one way or another and are applied in order."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:77
msgid "Following is a short description of available effects:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:80
msgid "Amplify"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:82
msgid ""
"It's the most basic effect. It changes the sound volume. Amplifying too much "
"can make the sound clip, so be wary of that."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:85
msgid "BandLimit and BandPass"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:87
msgid ""
"These are resonant filters which block frequencies around the *Cutoff* "
"point. BandPass is resonant, while BandLimit stretches to the sides."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:90
msgid "Chorus"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:92
msgid ""
"This effect adds extra voices, detuned by LFO and with a small delay, to add "
"more richness to the sound harmonics and stereo width."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:95
msgid "Compressor"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:97
msgid ""
"The aim of a dynamic range compressor is to reduce the level of the sound "
"when the amplitude goes over a certain threshold in Decibels. One of the "
"main uses of a compressor is to increase the dynamic range while clipping "
"the least possible (when sound goes over 0dB)."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:100
msgid "The compressor has many uses in the mix, for example:"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:102
msgid ""
"It can be used in the Master bus to compress the whole output (Although a "
"Limiter would probably be better)"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:103
msgid ""
"It can be used in voice channels to ensure they sound as even as possible."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:104
msgid ""
"It can be *Sidechained*. This means it can reduce the sound level using "
"another audio bus for threshold detection. This technique is very common in "
"video game mixing to download the level of Music/SFX while voices are being "
"heard."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:105
msgid ""
"It can accentuate transients by using a bit wider attack, meaning it can "
"make sound effects sound more punchy."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:107
msgid ""
"There is a lot of bibliography written about compressors, and the Godot "
"implementation is rather standard."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:110
msgid "Delay"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:112
msgid ""
"Adds an \"Echo\" effect with a feedback loop. It can be used, together with "
"Reverb, to simulate wide rooms, canyons, etc. where sound bounces are far "
"apart."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:115
msgid "Distortion"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:117
msgid ""
"Adds classical effects to modify the sound and make it dirty. Godot supports "
"effects like overdrive, tan, or bit crushing. For games, it can simulate "
"sound coming from some saturated device or speaker efficiently."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:121
msgid "EQ6, EQ10, EQ21"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:123
msgid ""
"Godot provides three models of equalizers with different band counts. "
"Equalizers are useful on the Master Bus to completely master a mix and give "
"it character. They are also useful when a game is run on a mobile device, to "
"adjust the mix to that kind of speakers (it can be added but disabled when "
"headphones are plugged)."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:127
msgid "HighPassFilter, HighShelfFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:129
msgid ""
"These are filters that cut frequencies below a specific *Cutoff*. A common "
"use of high pass filters is to add it to effects (or voice) that were "
"recorded too close to a mic and need to sound more realistic. It is commonly "
"used for some types of environment, like space."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:133
msgid "Limiter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:135
msgid ""
"A limiter is similar to a compressor, but it's less flexible and designed to "
"disallow sound going over a given dB threshold. Adding one in the *Master "
"Bus* is always recommended to reduce the effects of clipping."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:139
msgid "LowPassFilter, LowShelfFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:141
msgid ""
"These are the most common filters, they cut frequencies above a specific "
"*Cutoff* and can also resonate. They can be used for a wide amount of "
"effects, from underwater sound to simulating a sound coming from far away."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:145
msgid "NotchFilter"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:147
msgid ""
"The opposite to the BandPassFilter, it removes a band of sound from the "
"frequency spectrum at a given *Cutoff*."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:150
msgid "Panner"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:152
msgid "This is a simple helper to pan sound left or right."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:155
msgid "Phaser"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:157
msgid ""
"It probably does not make much sense to explain that this effect is formed "
"by two signals being dephased and cancelling each other out. It will be "
"sufficient to note that you can make a Darth Vader voice with it, or jet-"
"like sounds."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:161
msgid "PitchShift"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:163
msgid ""
"This effect allows for modulating pitch independently of tempo. All "
"frequencies can be increased/decreased with minimal effect on transients. "
"Can be used for effects such as voice modulation."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:166
msgid "Reverb"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:168
msgid ""
"Reverb simulates rooms of different sizes. It has adjustable parameters that "
"can be tweaked to obtain the sound of a specific room. Reverb is commonly "
"outputted from :ref:`Areas <class_Area>` (see :ref:`doc_audio-streams` "
"tutorial, look for the \"Reverb buses\" section), or to apply chamber feel "
"to all sounds."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:172
msgid "StereoEnhance"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:174
msgid ""
"This effect has a few algorithms available to enhance the stereo spectrum, "
"in case this is needed."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:177
msgid "Automatic bus disabling"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:179
msgid ""
"There is no need to disable buses manually when not in use; Godot detects "
"that the bus has been silent for a few seconds and disables it (including "
"all effects)."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:183
msgid "Disabled buses have a blue VU meter."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:186
msgid "Bus rearrangement"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:188
msgid ""
"Stream Players use bus names to identify a bus, which allows adding, "
"removing and moving buses around while the reference to them is kept. If a "
"bus is renamed, however, the reference will be lost and the Stream Player "
"will output to Master. This system was chosen because rearranging buses is a "
"more common process than renaming them."
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:192
msgid "Default bus layout"
msgstr ""

#: ../../docs/tutorials/audio/audio_buses.rst:194
msgid ""
"The default bus layout is automatically saved to the ``res://"
"default_bus_layout.tres`` file. Other bus layouts can be saved to/retrieved "
"from files in case of having to change snapshots, but in most cases, this is "
"not necessary."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:4
msgid "Audio streams"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:9
msgid ""
"As you might have already read in the :ref:`Audio Buses Tutorial<doc_audio-"
"buses>` , sound is sent to each bus via an AudioStreamPlayer."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:12
msgid ""
"There are many types of AudioStreamPlayer, which will be explained in "
"detail. Each one loads an AudioStream and plays it back."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:16
msgid "AudioStream"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:18
msgid ""
"An audio stream is an abstract object that emits sound. It can come from "
"many places, but most commonly from the filesystem. Audio files, such as ."
"wav or .ogg, can be loaded as AudioStreams and placed inside an "
"AudioStreamPlayer."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:22
msgid ""
"Here is a comparison of the two, to help you choose which one fits your "
"specific use case best:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:24
msgid ""
"Audio files of type *.wav* are quite large, but use little CPU power to play "
"back. Hundreds of them can be played simultaneously with little impact to "
"performance. This format is usually best for short sound effects, as the "
"importer will trim and convert them to IMA-ADPCM."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:25
msgid ""
"Audio files of type *.ogg* are much smaller, but use considerably more CPU "
"power to play back, so only a few can be played back (especially on "
"mobile!). This format is usually best for music or long sound effect "
"sequences. It also works well for voice at relatively low bitrates."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:27
msgid ""
"Keep in mind neither .wav nor .ogg usually contains looping information, so "
"this information must be set on the import options of each:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:31
msgid ""
"There are other types of AudioStream, such as AudioStreamRandomPitch, which "
"takes an existing AudioStream and modulates the pitch every time it's played "
"back randomly (great for some sound effects), and more will keep appearing "
"in the future."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:35
msgid "AudioStreamPlayer"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:37
msgid ""
"This is the standard stream player; it can play to any given bus. In 5.1 "
"sound, it can send to stereo mix or front speakers."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:40
msgid "AudioStreamPlayer2D"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:42
msgid ""
"This is a variant of AudioStreamPlayer, but emits sound in a 2D positional "
"environment. When close to the left of the screen, the panning will go left. "
"When close to the right side, it will go right."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:44
msgid ""
"While it's possible to send these effects to specific audio buses, one of "
"the best strategies is to use an Area2D to divert sound to a specific bus. "
"This allows you to create buses with different reverb or sound qualities and "
"make it so the emitter will automatically send to them when entering the "
"Area2D shapes."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:50
msgid "AudioStreamPlayer3D"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:52
msgid ""
"This is a variant of AudioStreamPlayer, but emits sound in a 3D positional "
"environment. Depending on the location of the player relative to the screen, "
"it can position sound in Stereo, 5.1 or 7.1 depending on the chosen audio "
"setup."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:55
msgid ""
"Similar to AudioStreamPlayer2D, an Area can divert the sound to an audio bus."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:59
msgid ""
"Unlike for 2D, the 3D version of AudioStreamPlayer has a few more advanced "
"options:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:62
msgid "Reverb buses"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:64
msgid ""
"Godot allows 3D Audio Streams that enter a specific *Area* to send dry and "
"wet audio to separate buses. This is useful when you have several reverb "
"configurations for different types of rooms. This is done by enabling this "
"type of reverb in the *Reverb Bus* section of *Area* properties:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:69
msgid ""
"At the same time, a special bus layout is created where each area receives "
"the reverb info from each area. Of course, an actual Reverb effect must be "
"created in that bus for anything to happen:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:73
msgid ""
"The Area Reverb Bus section also has a specific parameter named \"Uniformity"
"\". Some types of rooms bounce sounds more than others (like for example, a "
"typical warehouse), so reverberation can be heard almost uniformly across "
"the room even though the source is far away. Playing around with this "
"parameter can simulate that effect."
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:77
msgid "Doppler"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:79
msgid ""
"When the relative velocity between an emitter and listener changes, this is "
"perceived as an increase or decrease of the pitch shift. Godot can track "
"changes in velocities of *AudioStreamPlayer3D* or *Camera*. Both have this "
"property, which must be enabled manually:"
msgstr ""

#: ../../docs/tutorials/audio/audio_streams.rst:84
msgid ""
"Simply enable it by setting it depending on how objects will be moved "
"(whether on regular *process* or *physics_process* step) and the tracking "
"will happen automatically!"
msgstr ""

#: ../../docs/tutorials/physics/index.rst:2
msgid "Physics"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:4
msgid "Physics introduction"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:6
#, fuzzy
msgid ""
"In game development, you often need to know when two objects in the game "
"intersect or come into contact. This is known as **collision detection**. "
"When a collision is detected, you typically want something to happen. This "
"is known as **collision response**."
msgstr ""
"게임 개발 중 당신은 종종 게임의 두 물체가 교차하거나 접촉할 때를 알아야 합니"
"다. 이를 **충돌 감지**라고 합니다. 충돌이 감지되면, 당신은 일반적으로 무언가"
"가 발생하기를 원합니다. 이를 **충돌 응답**이라고 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:11
msgid ""
"Godot offers a number of collision objects in 2D and 3D to provide both "
"collision detection and response. Trying to decide which one to use for your "
"project can be confusing. You can avoid problems and simplify development if "
"you understand how each works and what their pros and cons are."
msgstr ""
"Godot는 충돌 감지와 반응을 모두 제공하기 위해 2D와 3D로 구성된 다수의 충돌 객"
"체를 제공합니다. 프로젝트에 이 중 어떠한 것을 사용할지 결정하려는 것은 혼란스"
"러울 수 있습니다. 하지만 각각의 작동 방식과 장단점을 이해한다면 이러한 문제"
"를 피하고 개발을 간소화할 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:18
msgid "Godot's four collision object types"
msgstr "Godot의 4가지 충돌 객체 유형"

#: ../../docs/tutorials/physics/physics_introduction.rst:19
msgid "How each collision object works"
msgstr "각 충돌 객체의 작동 방식"

#: ../../docs/tutorials/physics/physics_introduction.rst:20
msgid "When and why to choose one type over another"
msgstr "한 유형을 다른 유형보다 선택해야 하는 시기 및 이유"

#: ../../docs/tutorials/physics/physics_introduction.rst:22
msgid ""
"This document's examples will use 2D objects. Every 2D physics object and "
"collision shape has a direct equivalent in 3D and in most cases they work in "
"much the same way."
msgstr ""
"이 문서의 예제에서는 2D 객체를 사용합니다. 모든 2D 객체와 충돌 모양은 3D에서 "
"직접적으로 동등하며 대부분의 경우 거의 동일한 방식으로 작동합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:27
#, fuzzy
msgid "Collision objects"
msgstr "충돌 객체"

#: ../../docs/tutorials/physics/physics_introduction.rst:29
msgid ""
"Godot offers four kinds of physics bodies, extending :ref:`CollisionObject2D "
"<class_CollisionObject2D>`:"
msgstr ""
"Godot는 :ref:`CollisionObject2D <class_CollisionObject2D>`에서 확장되는 4가"
"지 종류의 물리적 body를 제공합니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:35
msgid ":ref:`Area2D <class_Area2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:32
#, fuzzy
msgid ""
"``Area2D`` nodes provide **detection** and **influence**. They can detect "
"when objects overlap and can emit signals when bodies enter or exit. An "
"``Area2D`` can also be used to override physics properties, such as gravity "
"or damping, in a defined area."
msgstr ""
"``Area2D`` 노드는 **탐지** 와 **영향력** 을 제공합니다. 그들은 객체가 언제 겹"
"치는지를 탐지할 수 있고, body가 들어가거나 나올 때 시그널을 보낼 수 있습니"
"다. ``Area2D``는 또한 정의된 영역에서 중력이나 제동과 같은 물리적 특성을 치환"
"하는데 사용될 수도 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:37
#, fuzzy
msgid ""
"The other three bodies extend :ref:`PhysicsBody2D <class_PhysicsBody2D>`:"
msgstr ""
"나머지 3개의 body는 :ref:`PhysicsBody2D <class_PhysicsBody2D>`에서 확장됩니"
"다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:43
msgid ":ref:`StaticBody2D <class_StaticBody2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:40
msgid ""
"A static body is one that is not moved by the physics engine. It "
"participates in collision detection, but does not move in response to the "
"collision. They are most often used for objects that are part of the "
"environment or that do not need to have any dynamic behavior."
msgstr ""
"정적인 body는 물리엔진에 의해 움직이지 않는 물체입니다. 그것은 충돌 감지에는 "
"관여하지만, 충돌에 대응하여 움직이지는 않습니다. 이것들은 환경의 일부이거나 "
"동적 동작이 필요하지 않은 객체에 가장 많이 사용됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:48
msgid ":ref:`RigidBody2D <class_RigidBody2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:46
msgid ""
"This is the node that implements simulated 2D physics. You do not control a "
"``RigidBody2D`` directly, but instead you apply forces to it (gravity, "
"impulses, etc.) and the physics engine calculates the resulting movement. :"
"ref:`Read more about using rigid bodies. <doc_rigid_body>`"
msgstr ""
"이것은 시뮬레이션된 2D 물리를 구현하는 노드입니다. ``RigidBody2D``을 직접적으"
"로 제어하지는 않지만, 그대신 중력이나 충격 등에 힘을 가하며 물리 엔진은 그것"
"의 결과적인 움직임을 계산합니다. :ref:`rigid bodies 사용에 대해 더 알아보기. "
"<doc_rigid_body>`"

#: ../../docs/tutorials/physics/physics_introduction.rst:52
msgid ":ref:`KinematicBody2D <class_KinematicBody2D>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:51
msgid ""
"A body that provides collision detection, but no physics. All movement and "
"collision response must be implemented in code."
msgstr ""
"충돌 감지 기능을 제공하지만 물리는 제공하지 않는 body입니다. 모든 이동 및 충"
"돌 반응은 코드로 구현되어야 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:57
msgid ""
"A physics body can hold any number of :ref:`Shape2D <class_Shape2D>` objects "
"as children. These shapes are used to define the object's collision bounds "
"and to detect contact with other objects."
msgstr ""
"물리 body는 원하는 수만큼의 :ref:`Shape2D <class_Shape2D>`객체를 자식으로 수"
"용할 수 있습니다. 이러한 모양은 객체의 충돌 한계를 정의하고 다른 객체와의 접"
"촉을 감지하는 데 사용됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:61
msgid ""
"In order to detect collisions, at least one ``Shape2D`` must be assigned to "
"the object."
msgstr ""
"충돌을 감지하기 위해, 최소한 하나 이상의 ``Shape2D`` 가 객체어 할당되어야 합"
"니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:64
msgid ""
"The most common way to assign a shape is by adding a :ref:`CollisionShape2D "
"<class_CollisionShape2D>` or :ref:`CollisionPolygon2D "
"<class_CollisionPolygon2D>` as a child of the object. These nodes allow you "
"to draw the shape directly in the editor workspace."
msgstr ""
"모양을 지정하는 가장 일반적인 방법은 객체의 하위 항목으로 :ref:"
"`CollisionShape2D <class_CollisionShape2D>` 또는 :ref:`CollisionPolygon2D "
"<class_CollisionPolygon2D>` 를 추가하는 것입니다. 이러한 노드들은 에디터의 작"
"업 공간에서 직접 모양을 그릴 수 있도록 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:68
#, fuzzy
msgid ""
"Be careful to never scale your collision shapes in the editor. The \"Scale\" "
"property in the Inspector should remain ``(1, 1)``. When changing the size "
"of the collision shape, you should always use the size handles, **not** the "
"``Node2D`` scale handles. Scaling a shape can result in unexpected collision "
"behavior."
msgstr ""
"에디터에서 충돌 모양을 변경하지 않도록 주의하십시오. 인스펙터의 \"Scale\" 속"
"성은  ``(1, 1)`` 로 유지되어야 합니다. 충돌 모양을 변경할 때는 항상 "
"``Node2D`` 가 **아닌** 크기 핸들을 사용해야 합니다. 도형의 크기를 조절하는것"
"은 예기치 않은 충돌 동작을 발생시킬 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:77
msgid "Physics process callback"
msgstr "물리 프로세스 콜백 함수"

#: ../../docs/tutorials/physics/physics_introduction.rst:79
msgid ""
"The physics engine may spawn multiple threads to improve performance, so it "
"can use up to a full frame to process physics. Because of this, the value of "
"a body's state variables such as ``position`` or ``linear velocity`` may not "
"be accurate for the current frame."
msgstr ""
"물리 엔진은 성능을 향상시키기 위해 여러 개의 스레드를 생성할 수 있으므로, 물"
"리적 작업을 처리하는 데 최대 프레임까지 사용할 수 있습니다. 이로 인해, ``위치"
"`` 또는 ``선형 속도`` 와 같은 body의 상태 변수의 값이 현재 프레임에 정확하지 "
"않을 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:84
#, fuzzy
msgid ""
"In order to avoid this inaccuracy, any code that needs to access a body's "
"properties should be run in the :ref:`Node._physics_process() "
"<class_Node_method__physics_process>` callback, which is called before each "
"physics step at a constant frame rate (60 times per second by default)."
msgstr ""
"이러한 부정확성을 피하기 위해, body의 속성에 접근해야 하는 모든 코드는 각 물"
"리 단계 전에 일정한 프레임률(초당 60회 가 디폴트)로 호출되는 :ref:`Node."
"_physics_process() <class_Node_method__physics_process>` 콜백 함수로 실행되어"
"야 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:90
#, fuzzy
msgid "Collision layers and masks"
msgstr "충돌 레이어와 마스크"

#: ../../docs/tutorials/physics/physics_introduction.rst:92
#, fuzzy
msgid ""
"One of the most powerful, but frequently misunderstood, collision features "
"is the collision layer system. This system allows you to build up complex "
"interactions between a variety of objects. The key concepts are **layers** "
"and **masks**. Each ``CollisionObject2D`` has 20 different physics layers it "
"can interact with."
msgstr ""
"가장 강력하지만 자주 오해되는 충돌 기능 중 하나는 충돌 레이어 시스템입니다. "
"이 시스템을 사용하면 다양한 객체 간에 복잡한 상호 작용을 구축할 수 있습니다. "
"주요 개념은 **레이어** 와 **마스크** 입니다. 각 ``CollisionObject2D`` 에는 서"
"로 상호작용할 수 있는 20여개의 서로 다른 물리 레이어가 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:98
msgid "Let's look at each of the properties in turn:"
msgstr "각 속성을 차례대로 살펴보겠습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:102
msgid "collision_layer"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:101
msgid ""
"This describes the layers that the object appears **in**. By default, all "
"bodies are on layer ``1``."
msgstr ""
"이것은 객체가 **나타나는** 레이어를 형성합니다. 기본적으로 모든 body는 계층 "
"``1``에 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:107
msgid "collision_mask"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:105
msgid ""
"This describes what layers the body will **scan** for collisions. If an "
"object isn't in one of the mask layers, the body will ignore it. By default, "
"all bodies scan layer ``1``."
msgstr ""
"이것은 body가 충돌을 위해 **스캔**하는 레이어를 형성합니다. 객체가 마스크 레"
"이어 중 하나에 있지 않으면, body는 이를 무시합니다. 기본적으로 모든 body는 레"
"이어 ``1``을 스캔합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:109
msgid ""
"These properties can be configured via code, or by editing them in the "
"Inspector."
msgstr ""
"이러한 속성은 코드를 통해 구성하거나 인스펙터에서 편집하여 구성할 수 있습니"
"다."

#: ../../docs/tutorials/physics/physics_introduction.rst:111
msgid ""
"Keeping track of what you're using each layer for can be difficult, so you "
"may find it useful to assign names to the layers you're using. Names can be "
"assigned in Project Settings -> Layer Names."
msgstr ""
"각 레이어를 사용하는 대상을 추적하는 것은 어려울 수 있으므로, 사용중인 레이어"
"에 이름을 할당하는 것이 유용할 수 있습니다. 이름은 프로젝트 설정 -> 레이어 이"
"름 에서 할당할 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:117
msgid "**Example:**"
msgstr "**예시:**"

#: ../../docs/tutorials/physics/physics_introduction.rst:119
msgid ""
"You have four node types in your game: Walls, Player, Enemy, and Coin. Both "
"Player and Enemy should collide with Walls. The Player node should detect "
"collisions with both Enemy and Coin, but Enemy and Coin should ignore each "
"other."
msgstr ""
"당신의 게임에는 4가지의 노드 유형이 있습니다: 벽, 플레이어, 적, 코인. 플레이"
"어와 적 모두 벽과 충돌해야 합니다. 플레이어 노드는 적과 코인과의 충돌을 모두 "
"감지해야 하지만, 적과 코인은 서로 무시해야 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:124
msgid ""
"Start by naming layers 1-4 \"walls\", \"player\", \"enemies\", and \"coins\" "
"and place each node type in its respective layer using the \"Layer\" "
"property. Then set each node's \"Mask\" property by selecting the layers it "
"should interact with. For example, the Player's settings would look like "
"this:"
msgstr ""
"레이어 1-4를 \"walls\", \"player\", \"enemies\", 그리고 \"coins\" 으로 이름"
"을 지정하는 걸로 시작하고, \"Layer\" 특성을 사용하여 각 노드 유형을 해당 레이"
"어에 배치합니다. 그런 다음 각 노드가 상호작용할 계층을 선택하여 각 노드의 "
"\"Mask\" 속성을 설정합니다. 예를 들어, 플레이어의 설정은 다음과 같습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:133
msgid "Area2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:135
#, fuzzy
msgid ""
"Area nodes provide **detection** and **influence**. They can detect when "
"objects overlap and emit signals when bodies enter or exit. Areas can also "
"be used to override physics properties, such as gravity or damping, in a "
"defined area."
msgstr ""
"Area 노드는 **탐지** 및 **영향**을 제공합니다. 그들은 물체가 중복되는 때를 감"
"지하고 body가 들어가거나 나올 때 시그널을 보낼 수 있습니다.  Area는 정의된 영"
"역에서 중력 또는 제동과 같은 물리적 특성을 치환하는 데 사용될 수도 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:140
msgid "There are three main uses for :ref:`Area2D <class_Area2D>`:"
msgstr ":ref:`Area2D <class_Area2D>` 에는 3가지 주요 용도가 있습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:142
#, fuzzy
msgid "Overriding physics parameters (such as gravity) in a given region."
msgstr "특정 지역에서 중력과 같은 물리적 매개변수를 재정의합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:144
msgid ""
"Detecting when other bodies enter or exit a region or what bodies are "
"currently in a region."
msgstr ""
"다른 body가 특정 지역에 들어오거나 나가는 때를 탐지하거나 현재 지역에 있는 "
"body가 무엇인지를 탐지합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:146
msgid "Checking other areas for overlap."
msgstr "다른 영역들이 겹치는지 확인합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:148
msgid "By default, areas also receive mouse and touchscreen input."
msgstr "기본적으로, 영역은 마우스 및 터치스크린 입력도 받습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:151
msgid "StaticBody2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:153
msgid ""
"A static body is one that is not moved by the physics engine. It "
"participates in collision detection, but does not move in response to the "
"collision. However, it can impart motion or rotation to a colliding body "
"**as if** it were moving, using its ``constant_linear_velocity`` and "
"``constant_angular_velocity`` properties."
msgstr ""
"정적인 body는 물리 엔진에 의해 움직이지 않는 물체입니다. 그것은 충돌 감지에"
"는 참여하지만 충돌에 대응하여 움직이지 않습니다. 그러나, "
"``constant_linear_velocity``와 ``constant_angular_velocity``의 특성을 이용하"
"여 **마치** 움직이는 것처럼 충돌하는 body에 움직임이나 회전을 전달할 수 있습"
"니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:158
msgid ""
"``StaticBody2D`` nodes are most often used for objects that are part of the "
"environment or that do not need to have any dynamic behavior."
msgstr ""
"``StaticBody2D``노드는 환경에 속하거나 동적 동작을 수행할 필요가 없는 객체에 "
"가장 많이 사용됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:161
msgid "Example uses for ``StaticBody2D``:"
msgstr "``StaticBody2D``이용 예시:"

#: ../../docs/tutorials/physics/physics_introduction.rst:163
msgid "Platforms (including moving platforms)"
msgstr "플랫폼(이동 플랫폼 포함)"

#: ../../docs/tutorials/physics/physics_introduction.rst:164
msgid "Conveyor belts"
msgstr "컨베이어 벨트"

#: ../../docs/tutorials/physics/physics_introduction.rst:165
msgid "Walls and other obstacles"
msgstr "벽 및 기타 장애물"

#: ../../docs/tutorials/physics/physics_introduction.rst:168
msgid "RigidBody2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:170
#, fuzzy
msgid ""
"This is the node that implements simulated 2D physics. You do not control a :"
"ref:`RigidBody2D <class_RigidBody2D>` directly. Instead, you apply forces to "
"it and the physics engine calculates the resulting movement, including "
"collisions with other bodies, and collision responses, such as bouncing, "
"rotating, etc."
msgstr ""
"이것은 시뮬레이션 된 2D 물리를 구현하는 노드입니다. 당신은:ref:`RigidBody2D "
"<class_RigidBody2D>`를 직접 제어하지는 않습니다. 대신 힘을 가하게 되면 물리 "
"엔진은 다른 물체와의 충돌을 포함한 결과 움직임과 충돌, 회전 등의 충돌 반응을 "
"계산합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:176
msgid ""
"You can modify a rigid body's behavior via  properties such as \"Mass\", "
"\"Friction\", or \"Bounce\", which can be set in the Inspector."
msgstr ""
"인스펙터에서 설정할 수 있는 \"Mass\", \"Friction\", 또는 \"Bounce\" 와 같은 "
"특성을 통해 rigid body의 동작을 수정할 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:179
msgid ""
"The body's behavior is also affected by the world's properties, as set in "
"`Project Settings -> Physics`, or by entering an :ref:`Area2D "
"<class_Area2D>` that is overriding the global physics properties."
msgstr ""
"body의 행동은 또한 `Project Settings -> Physics` 에서 설정한 세계 속성의 영향"
"을 받거나 전역 물리 특성을 재정의하는 :ref:`Area2D <class_Area2D>`를 입력한 "
"것에 영향을 받습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:183
#, fuzzy
msgid ""
"When a rigid body is at rest and hasn't moved for a while, it goes to sleep. "
"A sleeping body acts like a static body, and its forces are not calculated "
"by the physics engine. The body will wake up when forces are applied, either "
"by a collision or via code."
msgstr ""
"rigid body가 쉬는 상태이고 한동안 움직이지 않으면, 잠들게 됩니다. 잠든 body"
"는 정적인body처럼 작용하며, 그 힘은 물리 엔진에 의해 계산되지 않습니다. 충돌 "
"또는 코드를 통해 힘이 가해지면 body가 깨어나게 됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:189
msgid "Rigid body modes"
msgstr "Rigid body 모드"

#: ../../docs/tutorials/physics/physics_introduction.rst:191
msgid "A rigid body can be set to one of four modes:"
msgstr "rigid body는 다음 네 가지 모드 중 하나로 설정할 수 있습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:193
msgid ""
"**Rigid** - The body behaves as a physical object. It collides with other "
"bodies and responds to forces applied to it. This is the default mode."
msgstr ""
"**Rigid** - 이 body는 물리적 물체처럼 작동합니다. 그것은 다른 body들과 충돌하"
"고 그것에 적용되는 힘에 반응합니다. 기본 모드입니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:194
msgid ""
"**Static** - The body behaves like a :ref:`StaticBody2D "
"<class_StaticBody2D>` and does not move."
msgstr ""
"**Static** - 이 body는 :ref:`StaticBody2D <class_StaticBody2D>` 처럼 동작하"
"며 움직이지 않습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:195
#, fuzzy
msgid "**Character** - Similar to \"Rigid\" mode, but the body cannot rotate."
msgstr ""
"**Character** - \"Rigid\" 모드와 유사하지만 body를 회전할 수는 없습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:196
msgid ""
"**Kinematic** - The body behaves like a :ref:`KinematicBody2D "
"<class_KinematicBody2D>` and must be moved by code."
msgstr ""
"**Kinematic** - 이 body는 :ref:`KinematicBody2D <class_KinematicBody2D>` 처"
"럼 작동하며 코드를 통해 움직여야 한다."

#: ../../docs/tutorials/physics/physics_introduction.rst:199
msgid "Using RigidBody2D"
msgstr "RigidBody2D 사용하기"

#: ../../docs/tutorials/physics/physics_introduction.rst:201
msgid ""
"One of the benefits of using a rigid body is that a lot of behavior can be "
"had \"for free\" without writing any code. For example, if you were making "
"an \"Angry Birds\"-style game with falling blocks, you would only need to "
"create RigidBody2Ds and adjust their properties. Stacking, falling, and "
"bouncing would automatically be calculated by the physics engine."
msgstr ""
"rigid body를 사용하는 것의 이점 중 하나는 코드를 쓰지 않고도 많은 행동을 \"자"
"유롭게\" 할 수 있다는 것입니다. 예를 들어, 떨어지는 블록으로 \"앵그리 버드\"-"
"스타일의 게임을 만드는 경우, RiddleBody2D를 만들고 해당 속성을 조정하기만 하"
"면 됩니다. 쌓기, 낙하 및 튕김은 물리 엔진에 의해 자동으로 계산됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:207
#, fuzzy
msgid ""
"However, if you do wish to have some control over the body, you should take "
"care - altering the ``position``, ``linear_velocity``, or other physics "
"properties of a rigid body can result in unexpected behavior. If you need to "
"alter any of the physics-related properties, you should use the :ref:"
"`_integrate_forces() <class_RigidBody2D_method__integrate_forces>` callback "
"instead of ``_physics_process()``. In this callback, you have access to the "
"body's :ref:`Physics2DDirectBodyState <class_Physics2DDirectBodyState>`, "
"which allows for safely changing properties and synchronizing them with the "
"physics engine."
msgstr ""
"하지만, 만약 여러분이 body를 어느 정도 통제하고 싶다면, 조심히 다루어야 합니"
"다 - ``위치``, ``선형_속도`` 또는 rigid body의 다른 물리적 특성들을 바꾸면 예"
"상치 못한 행동을 초래할 수 있습니다. 물리학 관련 속성을 변경해야 하는 경우 "
"``_physics_process()``대신 :ref:`_integrate_forces() "
"<class_RigidBody2D_method__integrate_forces>` 콜백을 사용해야 합니다. 이 콜백"
"에서는 안전하게 속성을 변경하고 물리 엔진과 동기화할 수 있는 :ref:"
"`Physics2DDirectBodyState <class_Physics2DDirectBodyState>`에 접근 할 수 있습"
"니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:216
msgid "For example, here is the code for an \"Asteroids\" style spaceship:"
msgstr "예를 들어, 다음은 \"소행성\" 스타일 우주선의 코드입니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:261
msgid ""
"Note that we are not setting the ``linear_velocity`` or ``angular_velocity`` "
"properties directly, but rather applying forces (``thrust`` and ``torque``) "
"to the body and letting the physics engine calculate the resulting movement."
msgstr ""
"``linear_velocity`` 또는 ``angular_velocity`` 를 직접 설정하는 것이 아니라 "
"힘 (``추력`` 과 ``토크``) 을 body에 적용하고 그 결과적인 움직임을 물리엔진이 "
"계산하도록 한다는 점에 유의해야 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:265
#, fuzzy
msgid ""
"When a rigid body goes to sleep, the ``_integrate_forces()`` function will "
"not be called. To override this behavior, you will need to keep the body "
"awake by creating a collision, applying a force to it, or by disabling the :"
"ref:`can_sleep <class_RigidBody2D_property_can_sleep>` property. Be aware "
"that this can have a negative effect on performance."
msgstr ""
"rigid body가 잠에 들 때 ``_integrate_forces()`` 함수는 호출되지 않을 것입니"
"다. 이 동작을 오버라이드하려면 충돌을 만들거나, 충돌을 적용하거나, 힘을 가하"
"거나, :ref:`can_sleep <class_RigidBody2D_property_can_sleep>` 속성을 비활성화"
"하여 body를 깨어 있게 해야 합니다. 이 경우 성능에 부정적인 영향을 미칠 수 있"
"습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:272
msgid "Contact reporting"
msgstr "접촉 알림"

#: ../../docs/tutorials/physics/physics_introduction.rst:274
#, fuzzy
msgid ""
"By default, rigid bodies do not keep track of contacts, because this can "
"require a huge amount of memory if many bodies are in the scene. To enable "
"contact reporting, set the :ref:`contacts_reported "
"<class_RigidBody2D_property_contacts_reported>` property to a non-zero "
"value. The contacts can then be obtained via :ref:`Physics2DDirectBodyState."
"get_contact_count() "
"<class_Physics2DDirectBodyState_method_get_contact_count>` and related "
"functions."
msgstr ""
"기본적으로 rigid body는 접촉면을 추적하지 않는데, 많은 body가 장면에 있을 경"
"우 엄청난 양의 메모리가 필요할 수 있기 때문입니다. 접촉 알림를 사용하려면 :"
"ref:`contacts_reported <class_RigidBody2D_property_contacts_reported>` 속성"
"을 0이 아닌 값으로 설정하십시오. 그런 다음 접촉은 :ref:"
"`Physics2DDirectBodyState.get_contact_count() "
"<class_Physics2DDirectBodyState_method_get_contact_count>` 및 관련 기능을 통"
"해 얻을 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:281
#, fuzzy
msgid ""
"Contact monitoring via signals can be enabled via the :ref:`contact_monitor "
"<class_RigidBody2D_property_contact_monitor>` property. See :ref:"
"`RigidBody2D <class_RigidBody2D>` for the list of available signals."
msgstr ""
"신호를 통한 접점 모니터링은 :ref:`contact_monitor "
"<class_RigidBody2D_property_contact_monitor>` 속성을 통해 활성화할 수 있습니"
"다. 사용 가능한 신호 목록은 :ref:`RigidBody2D <class_RigidBody2D>`를 참조하십"
"시오."

#: ../../docs/tutorials/physics/physics_introduction.rst:286
msgid "KinematicBody2D"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:288
msgid ""
":ref:`KinematicBody2D <class_KinematicBody2D>` bodies detect collisions with "
"other bodies, but are not affected by physics properties like gravity or "
"friction. Instead, they must be controlled by the user via code. The physics "
"engine will not move a kinematic body."
msgstr ""
":ref:`KinematicBody2D <class_KinematicBody2D>` body는 다른 물체와의 충돌을 감"
"지하지만 중력이나 마찰과 같은 물리적 성질의 영향을 받지 않습니다. 대신 코드"
"를 통해 사용자가 제어해야 합니다. 물리 엔진은 kinematic body를 움직이지 않습"
"니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:293
msgid ""
"When moving a kinematic body, you should not set its ``position`` directly. "
"Instead, you use the ``move_and_collide()`` or ``move_and_slide()`` methods. "
"These methods move the body along a given vector, and it will instantly stop "
"if a collision is detected with another body. After the body has collided, "
"any collision response must be coded manually."
msgstr ""
"kinematic body를 옮길 때는 ``위치``를 직접 정해서는 안 됩니다. 대신 "
"``move_and_collide()`` 또는 ``move_and_slide()`` 방법을 사용합니다. 이러한 방"
"법은 주어진 벡터를 따라 body를 움직이며, 다른 body와의 충돌이 감지되면 즉시 "
"정지합니다. body가 충돌한 후에는 모든 충돌 응답을 수동으로 코딩해야 합니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:300
msgid "Kinematic collision response"
msgstr "Kinematic 충돌 반응"

#: ../../docs/tutorials/physics/physics_introduction.rst:302
msgid ""
"After a collision, you may want the body to bounce, to slide along a wall, "
"or to alter the properties of the object it hit. The way you handle "
"collision response depends on which method you used to move the "
"KinematicBody2D."
msgstr ""
"충돌 후 body가 튀어 오르거나, 벽을 따라 미끄러지거나, 부딪힌 개체의 속성을 변"
"경하기를 원할 수 있습니다. 충돌 응답을 처리하는 방법은 KineticBody2D를 이동하"
"는 데 사용한 방법에 따라 달라집니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:307
msgid ":ref:`move_and_collide <class_KinematicBody2D_method_move_and_collide>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:309
msgid ""
"When using ``move_and_collide()``, the function returns a :ref:"
"`KinematicCollision2D <class_KinematicCollision2D>` object, which contains "
"information about the collision and the colliding body. You can use this "
"information to determine the response."
msgstr ""
"이 기능은 ``move_and_collide()``를 사용할 때 충돌 및 충돌 물체에 대한 정보가 "
"포함된 :ref:`KinematicCollision2D <class_KinematicCollision2D>` 개체를 반환합"
"니다. 이 정보를 사용하여 응답을 확인할 수 있습니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:314
msgid ""
"For example, if you want to find the point in space where the collision "
"occurred:"
msgstr "예를 들어, 충돌이 발생한 공간의 지점을 찾으려면 다음과 같이 하십시오:"

#: ../../docs/tutorials/physics/physics_introduction.rst:345
msgid "Or to bounce off of the colliding object:"
msgstr "충돌 개체가 튀어나오도록 하기 위해선 다음과 같이 하십시오:"

#: ../../docs/tutorials/physics/physics_introduction.rst:374
msgid ":ref:`move_and_slide <class_KinematicBody2D_method_move_and_slide>`"
msgstr ""

#: ../../docs/tutorials/physics/physics_introduction.rst:376
msgid ""
"Sliding is a common collision response; imagine a player moving along walls "
"in a top-down game or running up and down slopes in a platformer. While it's "
"possible to code this response yourself after using ``move_and_collide()``, "
"``move_and_slide()`` provides a convenient way to implement sliding movement "
"without writing much code."
msgstr ""
"슬라이딩은 일반적인 충돌 반응입니다. 플레이어가 하향식 게임에서 벽을 따라 움"
"직이거나 플랫폼 안에서 오르내리는 경사를 상상해 보십시오. "
"``move_and_collide()``를 사용한 후 직접 코드화할 수 있지만 "
"``move_and_slide()``는 많은 코드를 작성하지 않고 슬라이딩 이동을 실행할 수 있"
"는 편리한 방법입니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:382
msgid ""
"``move_and_slide()`` automatically includes the timestep in its calculation, "
"so you should **not** multiply the velocity vector by ``delta``."
msgstr ""
"``move_and_slide()`` 는 자동으로 타임스탬프를 계산에 포함하므로, 속도 벡터에 "
"``delta`` 를 곱하면 **안** 됩니다."

#: ../../docs/tutorials/physics/physics_introduction.rst:386
msgid ""
"For example, use the following code to make a character that can walk along "
"the ground (including slopes) and jump when standing on the ground:"
msgstr ""
"예를 들어, 다음 코드를 사용하여 지면(경사 포함)을 따라 걸을 수 있고 지면에 있"
"을 때 점프할 수 있는 캐릭터를 만들 수 있습니다:"

#: ../../docs/tutorials/physics/physics_introduction.rst:451
msgid ""
"See :ref:`doc_kinematic_character_2d` for more details on using "
"``move_and_slide()``, including a demo project with detailed code."
msgstr ""
"자세한 코드가 포함된 데모 프로젝트를 포함하여 ``move_and_slide()`` 사용에 대"
"한 자세한 내용은 :ref:`doc_kinematic_character_2d`를 참조하십시오."

#: ../../docs/tutorials/physics/rigid_body.rst:4
#, fuzzy
msgid "RigidBody"
msgstr "RigidBody2D 사용하기"

#: ../../docs/tutorials/physics/rigid_body.rst:7
msgid "What is a rigid body?"
msgstr "rigid body란?"

#: ../../docs/tutorials/physics/rigid_body.rst:9
msgid ""
"A rigid body is one that is directly controlled by the physics engine in "
"order to simulate the behavior of physical objects. In order to define the "
"shape of the body, it must have one or more :ref:`Shape <class_Shape>` "
"objects assigned. Note that setting the position of these shapes will affect "
"the body's center of mass."
msgstr ""
"rigid body는 물리적인 물체의 행동을 시뮬레이션하기 위해 물리 엔진에 의해 직"
"접 제어되는 body이다. body의 모양을 정의하려면 하나 이상의 :ref:`Shape "
"<class_Shape>`개체가 할당되어 있어야 합니다. 이러한 모양의 위치를 설정하면 "
"body의 무게 중심에 영향을 미칩니다."

#: ../../docs/tutorials/physics/rigid_body.rst:13
#, fuzzy
msgid "How to control a rigid body"
msgstr "rigid body 제어 방법"

#: ../../docs/tutorials/physics/rigid_body.rst:15
#, fuzzy
msgid ""
"A rigid body's behavior can be altered by setting its properties, such as "
"friction, mass, bounce, etc. These properties can be set in the Inspector or "
"via code. See :ref:`RigidBody <class_RigidBody>` for the full list of "
"properties and their effects."
msgstr ""
"rigid body의 동작은 마찰, 질량, 바운스 등의 특성을 설정하여 변경할 수 있습니"
"다. 이러한 속성은 인스펙터 또는 코드를 통해 설정할 수 있습니다. 속성과 그 효"
"과의 전체 목록은 :ref:`RigidBody <class_RigidBody>`를 참조하십시오."

#: ../../docs/tutorials/physics/rigid_body.rst:17
msgid ""
"There are several ways to control a rigid body's movement, depending on your "
"desired application."
msgstr ""
"원하는 용도에 따라 rigid body의 움직임을 제어하는 몇 가지 방법이 있습니다."

#: ../../docs/tutorials/physics/rigid_body.rst:19
#, fuzzy
msgid ""
"If you only need to place a rigid body once, for example to set its initial "
"location, you can use the methods provided by the :ref:`Spatial "
"<class_Spatial>` node, such as ``set_global_transform()`` or ``look_at()``. "
"However, these methods cannot be called every frame or the physics engine "
"will not be able to correctly simulate the body's state. As an example, "
"consider a rigid body that you want to rotate so that it points towards "
"another object. A common mistake when implementing this kind of behavior is "
"to use ``look_at()`` every frame, which breaks the physics simulation. "
"Below, we'll demonstrate how to implement this correctly."
msgstr ""
"예를 들어, 초기 위치를 설정하기 위해 rigid body를 한 번만 배치해야 된다면 "
"``set_global_transform()``또는 ``look_at()``와 같은 :ref:`Spatial "
"<class_Spatial>`노드가 제공하는 방법을 사용할 수 있습니다. 그러나 이 함수들"
"이 모든 프레임을 호출하지 못하거나 물리 엔진이 body 상태를 정확하게 시뮬레이"
"션할 수 없을 것입니다. 예를 들어, 다른 물체를 가리키도록 회전할 rigid body를 "
"고려하는것이 있습니다. 이런 행동을 시행할 때 흔히 저지르는 실수는 "
"``look_at()``을 모든 틀에서 사용하는 것인데 이것은 물리학적 시뮬레이션을 깨뜨"
"리게 됩니다. 아래에서는, 이를 올바르게 구현하는 방법을 시연합니다."

#: ../../docs/tutorials/physics/rigid_body.rst:22
#, fuzzy
msgid ""
"The fact that you can't use ``set_global_transform()`` or ``look_at()`` "
"methods doesn't mean that you can't have full control of a rigid body. "
"Instead, you can control it by using the ``_integrate_forces()`` callback. "
"In this method, you can add *forces*, apply *impulses*, or set the "
"*velocity* in order to achieve any movement you desire."
msgstr ""
"``set_global_transform()``이나 ``look_at()``의 방법을 사용할 수 없다는 사실"
"이 당신이 rigid body을 완전히 통제할 수 없다는 것을 의미하지는 않습니다. 대"
"신 ``_integrate_forces()``의 콜백을 사용하여 제어할 수 있습니다. 이 기능에서 "
"원하는 이동을 달성하기 위해 *forces*를 추가하거나 *impulses*를 적용하거나 "
"*velocity*를 설정할 수 있습니다."

#: ../../docs/tutorials/physics/rigid_body.rst:25
msgid "The \"look at\" method"
msgstr ""

#: ../../docs/tutorials/physics/rigid_body.rst:27
#, fuzzy
msgid ""
"As described above, using the Spatial node's ``look_at()`` method can't be "
"used each frame to follow a target. Here is a custom ``look_at()`` method "
"that will work reliably with rigid bodies:"
msgstr ""
"위에서 설명한 것처럼, 공간 노드의 ``look_at()``를 사용하여 각 프레임을 표적"
"을 따라갈 수는 없다. 다음은 rigid body에서 안정적으로 작동하는 커스텀 "
"``look_at()`` 함수이다:"

#: ../../docs/tutorials/physics/rigid_body.rst:69
#, fuzzy
msgid ""
"This method uses the rigid body's ``set_angular_velocity()`` method to "
"rotate the body. It first calculates the difference between the current and "
"desired angle and then adds the velocity needed to rotate by that amount in "
"one frame's time."
msgstr ""
"이 함수는 body를 회전시키기 위해 rigid body의 ``set_angular_velocity()`` 매서"
"드를 사용합니다. 먼저 현재와 원하는 각도의 차이를 계산한 다음 한 프레임의 시"
"간에 해당 양만큼 회전하는 데 필요한 속도를 추가합니다."

#: ../../docs/tutorials/physics/rigid_body.rst:71
#, fuzzy
msgid ""
"This script will not work with rigid bodies in *character mode* because "
"then, the body's rotation is locked. In that case, you would have to rotate "
"the attached mesh node instead using the standard Spatial methods."
msgstr ""
"이 모드에서는 body의 회전이 잠겨 있기 때문에 *character mode*의 rigid bodies"
"에서는 이 스크립트를 사용할 수 없습니다. 이 경우 표준 공간 메서드를 사용하여 "
"연결된 메시 노드를 회전해야 합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:4
msgid "Using KinematicBody2D"
msgstr "KinematicBody2D 사용하기"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:9
msgid ""
"Godot offers a number of collision objects to provide both collision "
"detection and response. Trying to decide which one to use for your project "
"can be confusing. You can avoid problems and simplify development if you "
"understand how each of them works and what their pros and cons are. In this "
"tutorial, we'll look at the :ref:`KinematicBody2D <class_KinematicBody2D>` "
"node and show some examples of how it can be used."
msgstr ""
"Godot은 충돌 감지와 반응성을 모두 제공하기 위해 많은 충돌 물체를 제공합니다. "
"프로젝트에 사용할 항목을 결정하는 것은 혼란스러울 수 있습니다. 각각의 작동 방"
"식 및 장단점이 무엇인지 이해한다면 문제를 피하고 개발을 간소화할 수 있습니"
"다. 이 튜토리얼에서는:ref:`KinematicBody2D <class_KinematicBody2D> 노드를 살"
"펴보고 사용 방법에 대한 몇 가지 예를 보여 드리겠습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:16
msgid ""
"This document assumes you're familiar with Godot's various physics bodies. "
"Please read :ref:`doc_physics_introduction` first."
msgstr ""
"이 문서는 당신이 Godot의 다양한 물리학 body들에 대해 잘 알고 있다고 가정합니"
"다. 먼저 :ref:`doc_physics_introduction`를 읽어주세요."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:20
msgid "What is a kinematic body?"
msgstr "kinematic body란 무엇인가?"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:22
#, fuzzy
msgid ""
"``KinematicBody2D`` is for implementing bodies that are to be controlled via "
"code. They detect collisions with other bodies when moving, but are not "
"affected by engine physics properties, like gravity or friction. While this "
"means that you have to write some code to create their behavior, it also "
"means you have more precise control over how they move and react."
msgstr ""
"``KinematicBody2D``는 코드로 통제될 body를 구현하기 위한 것입니다. 이들은 이"
"동할 때 다른 body와의 충돌을 감지하지만, 중력이나 마찰과 같은 물리 엔진 특성"
"에 의해 영향을 받지 않습니다. 이것은 당신이 그것들의 행동을 만들어내기 위해 "
"몇 개의 코드를 써야 한다는 것을 의미하지만, 또한 그것들이 어떻게 움직이고 반"
"응하는지 더 정확히 제어할 수 있다는 것을 의미합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:28
msgid ""
"A `KinematicBody2D` can be affected by gravity and other forces, but you "
"must calculate the movement in code. The physics engine will not move a "
"`KinematicBody2D`."
msgstr ""
"`KinematicBody2D`는 중력과 다른 힘에 의해 영향을 받을 수 있지만 코드로 움직임"
"을 계산해야 합니다. 물리 엔진은 `KinematicBody2D`를 움직이지 않습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:33
#, fuzzy
msgid "Movement and collision"
msgstr "이동 및 충돌"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:35
msgid ""
"When moving a ``KinematicBody2D``, you should not set its ``position`` "
"property directly. Instead, you use the ``move_and_collide()`` or "
"``move_and_slide()`` methods. These methods move the body along a given "
"vector and will instantly stop if a collision is detected with another body. "
"After a KinematicBody2D has collided, any *collision response* must be coded "
"manually."
msgstr ""
"``KinematicBody2D``를 옮길 때 ``position``속성을 직접 설정해서는 안 됩니다. "
"대신 ``move_and_collide()`` 또는 ``move_and_slide()`` 매서드를 사용해야 합니"
"다. 이러한 방법은 주어진 벡터를 따라 body를 움직이며 충돌이 감지될 경우 즉시 "
"중지됩니다. KineticBody2D가 충돌한 후에는 *충돌 반응*을 수동으로 코딩해야 합"
"니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:41
msgid ""
"Kinematic body movement should only be done in the ``_physics_process()`` "
"callback."
msgstr ""
"Kinematic body의 움직임은 ``_physics_process()`` 콜백 함수 로만 이루어져야 합"
"니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:43
#, fuzzy
msgid ""
"The two movement methods serve different purposes, and later in this "
"tutorial, you'll see examples of how they work."
msgstr ""
"두 이동 메서드는 서로 다른 용도로 사용되며, 이 튜토리얼의 뒷부분에는 작동 방"
"법에 대한 예가 나와 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:47
msgid "``move_and_collide``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:49
msgid ""
"This method takes one parameter: a :ref:`Vector2 <class_Vector2>` indicating "
"the body's relative movement. Typically, this is your velocity vector "
"multiplied by the frame timestep (``delta``). If the engine detects a "
"collision anywhere along this vector, the body will immediately stop moving. "
"If this happens, the method will return a :ref:`KinematicCollision2D "
"<class_KinematicCollision2D>` object."
msgstr ""
"이 메서드는 하나의 매개 변수를 가집니다: body의 상대적인 움직임을 나타내는 :"
"ref:`Vector2 <class_Vector2>`. 일반적으로 이것은 속도 벡터에 프레임 타임스탬"
"프(``delta``)를 곱한 것입니다. 엔진이 이 벡터를 따라 어느 곳에서든 충돌을 감"
"지하면 body는 즉시 작동을 멈춥니다. 이 경우 메서드는 :ref:"
"`KinematicCollision2D <class_KinematicCollision2D>` 개체를 반환합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:55
#, fuzzy
msgid ""
"``KinematicCollision2D`` is an object containing data about the collision "
"and the colliding object. Using this data, you can calculate your collision "
"response."
msgstr ""
"``KinematicCollision2D`` 는 충돌과 충돌하는 물체에 대한 데이터를 담고 있는 물"
"체입니다. 이 데이터를 사용하여 충돌 반응을 계산할 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:60
msgid "``move_and_slide``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:62
msgid ""
"The ``move_and_slide()`` method is intended to simplify the collision "
"response in the common case where you want one body to slide along the "
"other. This is especially useful in platformers or top-down games, for "
"example."
msgstr ""
"``move_and_slide()`` 방법은 하나의 body가 다른 하나의 body를 따라 미끄러지도"
"록 하려는 일반적인 경우에서 충돌 반응을 단순화하기 위한 것입니다. 이것은 예"
"를 들어 플랫포머나 하향식 게임에서 특히 유용합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:66
msgid ""
"``move_and_slide()`` automatically calculates frame-based movement using "
"``delta``. Do *not* multiply your velocity vector by ``delta`` before "
"passing it to ``move_and_slide()``."
msgstr ""
"``move_and_slide()``는 ``delta``를 사용하여 프레임 기반 이동을 자동으로 계산"
"합니다. 속도 벡터를 ``move_and_slide()``에 전달하기 전에 ``delta`` 로 곱하지 "
"마십시오."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:70
msgid ""
"In addition to the velocity vector, ``move_and_slide()`` takes a number of "
"other parameters allowing you to customize the slide behavior:"
msgstr ""
"속도 벡터 외에도 ``move_and_slide()``에는 여러 가지 다른 매개 변수가 포함되"
"어 있어 슬라이드 동작을 지정할 수 있습니다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:73
msgid "``floor_normal`` - *default value:* ``Vector2( 0, 0 )``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:75
msgid ""
"This parameter allows you to define what surfaces the engine should consider "
"to be the floor. Setting this lets you use the ``is_on_floor()``, "
"``is_on_wall()``, and ``is_on_ceiling()`` methods to detect what type of "
"surface the body is in contact with. The default value means that all "
"surfaces are considered walls."
msgstr ""
"이 매개 변수를 사용하면 엔진이 바닥으로 간주해야 하는 표면을 정의할 수 있습니"
"다. 이를 설정하면 ``is_on_floor()``, `is_on_wall()``, ``is_on_ceiling()`` 매"
"서드를 사용하여 신체와 접촉하는 표면의 유형을 탐지할 수 있습니다. 기본값으론 "
"모든 표면이 벽으로 간주됩니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:80
msgid "``slope_stop_min_velocity`` - *default value:* ``5``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:82
msgid ""
"This is the minimum velocity when standing on a slope. This prevents a body "
"from sliding down a slope when standing still."
msgstr ""
"이것은 경사면에 서 있을 때의 최소 속도입니다. 이렇게 하면 정지 상태에서 body"
"가 비탈 아래로 미끄러지는 것을 방지할 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:85
msgid "``max_bounces`` - *default value:* ``4``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:87
msgid ""
"This is the maximum number of collisions before the body stops moving. "
"Setting this too low may prevent movement entirely."
msgstr ""
"이것은 body가 움직임을 멈추기 전의 최대 충돌 횟수입니다. 이 값을 너무 낮게 설"
"정하면 이동이 완전히 차단될 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:90
msgid ""
"``floor_max_angle`` - *default value:* ``0.785398`` (in radians, equivalent "
"to ``45`` degrees)"
msgstr ""
"``floor_max_angle`` - *default value:* ``0.785398`` (라디안으론, ``45`` 도와 "
"같다)"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:92
msgid ""
"This is the maximum angle before a surface is no longer considered a \"floor"
"\"."
msgstr "이것은 지표면이 더 이상 \"바닥\"으로 간주되지 않는 최대 각도입니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:95
msgid "``move_and_slide_with_snap``"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:97
msgid ""
"This method adds some additional functionality to ``move_and_slide()`` by "
"adding the ``snap`` parameter. As long as this vector is in contact with the "
"ground, the body will remain attached to the surface. Note that this means "
"you must disable snapping when jumping, for example. You can do this either "
"by setting ``snap`` to ``Vector2(0, 0)`` or by using ``move_and_slide()`` "
"instead."
msgstr ""
"이 방법은 ``snap`` 매개 변수를 추가하여 ``move_and_slide()``에 몇 가지 기능"
"을 더합니다. 이 벡터가 지면과 접촉하는 한 body는 표면에 부착된 상태를 유지합"
"니다. 이는 점프할 때 스냅을 비활성화해야 함을 의미합니다. ``snap``을"
"``Vector2(0, 0)`` 로 설정하거나 ``move_and_slide()`` 를 대신 사용하여 이 작업"
"을 수행할 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:104
msgid "Which movement method to use?"
msgstr "사용해야할 이동 매서드는 무엇입니까?"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:106
#, fuzzy
msgid ""
"A common question from new Godot users is: \"How do you decide which "
"movement function to use?\" Often, the response is to use "
"``move_and_slide()`` because it's \"simpler\", but this is not necessarily "
"the case. One way to think of it is that ``move_and_slide()`` is a special "
"case, and ``move_and_collide()`` is more general. For example, the following "
"two code snippets result in the same collision response:"
msgstr ""
"새로운 Godot 사용자들의 일반적인 질문은 다음과 같습니다: \"어떤 이동 기능을 "
"사용할지 어떻게 결정합니까?\" 종종 ``move_and_slide()``가 \"간단\"하기 때문"
"에 사용하라고 하지만, 반드시 그런 것은 아닙니다. 생각해 볼 수 있는 한 가지 방"
"법은``move_and_slide()``가 특별한 경우이고, ``move_and_collide()``가 더 일반"
"적이라는 것입니다. 예를 들어, 다음 두 코드 조각은 동일한 충돌 응답을 생성합니"
"다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:137
msgid ""
"Anything you do with ``move_and_slide()`` can also be done with "
"``move_and_collide()``, but it might take a little more code. However, as "
"we'll see in the examples below, there are cases where ``move_and_slide()`` "
"doesn't provide the response you want."
msgstr ""
"당신이 ``move_and_slide()``로 하는 것은 또한 ``move_and_collide()``로 할 수 "
"있지만 좀 더 많은 코드가 필요할 수도 있습니다. 그러나 아래 예에서 볼 수 있듯"
"이 ``move_and_slide()``가 당신이 원하는 대답을 제공하지 않는 경우도 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:142
#: ../../docs/development/compiling/compiling_with_mono.rst:84
msgid "Examples"
msgstr "예시"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:144
msgid ""
"To see these examples in action, download the sample project: :download:"
"`using_kinematic2d.zip <files/using_kinematic2d.zip>`."
msgstr ""
"예제가 실행되는것을 보기 위해선, 샘플 프로젝트를 다운로드하십시오: :download:"
"`using_kinematic2d.zip <files/using_kinematic2d.zip>`."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:148
msgid "Movement and walls"
msgstr "이동 및 벽"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:150
#, fuzzy
msgid ""
"If you've downloaded the sample project, this example is in \"BasicMovement."
"tscn\"."
msgstr ""
"샘플 프로젝트를 다운로드했다면, 이 예는 \"BasicMovement.tscn\" 의 장면입니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:152
#, fuzzy
msgid ""
"For this example, add a ``KinematicBody2D`` with two children: a ``Sprite`` "
"and a ``CollisionShape2D``. Use the Godot \"icon.png\" as the Sprite's "
"texture (drag it from the Filesystem dock to the *Texture* property of the "
"``Sprite``). In the ``CollisionShape2D``'s *Shape* property, select \"New "
"RectangleShape2D\" and size the rectangle to fit over the sprite image."
msgstr ""
"이 예시에서 ``KinematicBody2D``를 두 자식과 함께 추가합니다: ``Sprite``와 "
"``CollisionShape2D``. Godot \"icon.png\"를 Sprite의 텍스쳐 속성으로 사용합니"
"다 (파일 시스템 독에서 ``Sprite``의 *Texture* 속성으로 끌어다 놓으십시오). "
"``CollisionShape2D``의 *Shape* 속성에서 \"New RectangleShape2D\"를 선택하고 "
"스프라이트 이미지에 맞게 사각형 크기를 조정합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:158
msgid ""
"See :ref:`doc_2d_movement` for examples of implementing 2D movement schemes."
msgstr "2D 이동 계획을 구현하는 예는 :ref:`doc_2d_movement`을 참조하시오."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:160
msgid "Attach a script to the KinematicBody2D and add the following code:"
msgstr "KineticBody2D에 스크립트를 연결하고 다음 코드를 추가합니다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:227
msgid ""
"Run this scene and you'll see that ``move_and_collide()`` works as expected, "
"moving the body along the velocity vector. Now let's see what happens when "
"you add some obstacles. Add a :ref:`StaticBody2D <class_StaticBody2D>` with "
"a rectangular collision shape. For visibility, you can use a sprite, a "
"Polygon2D, or turn on \"Visible Collision Shapes\" from the \"Debug\" menu."
msgstr ""
"이 장면을 보면 ``move_and_collide()``가 예상대로 작동하면서 body가 속도 벡터"
"를 따라 움직이는 것을 볼 수 있습니다. 이제 장애물을 추가하면 어떻게 되는지 봅"
"시다. 직사각형 충돌 모양으로 :ref:`StaticBody2D <class_StaticBody2D>`를 추가"
"합니다. 가시성을 위해 \"Debug\" 메뉴에서 스프라이트, Polygon2D를 사용하거나 "
"\"Visible Collision Shapes\"를 켤 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:233
msgid ""
"Run the scene again and try moving into the obstacle. You'll see that the "
"``KinematicBody2D`` can't penetrate the obstacle. However, try moving into "
"the obstacle at an angle and you'll find that the obstacle acts like glue - "
"it feels like the body gets stuck."
msgstr ""
"장면을 다시 실행하고 장애물 안으로 들어가 보십시오. 당신은 "
"``KinematicBody2D``가 장애물을 통과할 수 없다는 것을 알게 될 것입니다. 하지"
"만, 한 각도로 장애물 안으로 들어가 보세요. 그러면 장애물이 접착제처럼 작용한"
"다는 것을 알 수 있을 것입니다 - 마치 body가 달라붙는 것 같은 느낌이 듭니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:237
msgid ""
"This happens because there is no *collision response*. "
"``move_and_collide()`` stops the body's movement when a collision occurs. We "
"need to code whatever response we want from the collision."
msgstr ""
"이 문제는 *충돌 대응*이 없기 때문에 발생합니다. ``move_and_collide()``는 충돌"
"이 일어날 때 몸의 움직임을 멈춥니다. 우리는 충돌 로부터 우리가 원하는 어떤 대"
"응도 코드화 할 필요가 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:241
msgid ""
"Try changing the function to ``move_and_slide(velocity)`` and running again. "
"Note that we removed ``delta`` from the velocity calculation."
msgstr ""
"함수를 ``move_and_slide(velocity)``로 변경하고 다시 실행해 보십시오. 속도 계"
"산에서 ``delta``를 제거했습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:244
msgid ""
"``move_and_slide()`` provides a default collision response of sliding the "
"body along the collision object. This is useful for a great many game types, "
"and may be all you need to get the behavior you want."
msgstr ""
"``move_and_slide()`` 는 충돌 물체를 따라 몸을 미끄러뜨리는 기본 충돌 반응을 "
"제공합니다. 이것은 많은 게임 유형에 유용하며, 여러분이 원하는 행동을 하기 위"
"해 필요한 모든 것일 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:249
msgid "Bouncing/reflecting"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:251
msgid ""
"What if you don't want a sliding collision response? For this example "
"(\"BounceandCollide.tscn\" in the sample project), we have a character "
"shooting bullets and we want the bullets to bounce off the walls."
msgstr ""
"슬라이딩 충돌 반응을 원하지 않을 경우 어떻게 해야 할까요? 이 예시(샘플 프로젝"
"트의 \"BounceandCollide.tscn\") 에서, 우리는 총알을 쏘는 캐릭터가 있고 총알"
"이 벽에서 튀어 나오길 바랍니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:255
msgid ""
"This example uses three scenes. The main scene contains the Player and "
"Walls. The Bullet and Wall are separate scenes so that they can be instanced."
msgstr ""
"이 예시에서는 세 장면을 사용합니다. 메인 장면에는 플레이어와 벽이 포함됩니"
"다. 총알과 벽은 각각 다른 장면이기 때문에 예시로 들 수 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:258
msgid ""
"The Player is controlled by the `w` and `s` keys for forward and back. "
"Aiming uses the mouse pointer. Here is the code for the Player, using "
"``move_and_slide()``:"
msgstr ""
"플레이어는 앞뒤로 `w`와 `s` 키를 통해 제어됩니다. 조준은 마우스 포인터를 사용"
"합니다. 다음은 ``move_and_slide()``를 사용한 플레이어 코드입니다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:345
msgid "And the code for the Bullet:"
msgstr "그리고 총알에 대한 코드입니다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:407
#, fuzzy
msgid ""
"The action happens in ``_physics_process()``. After using "
"``move_and_collide()``, if a collision occurs, a ``KinematicCollision2D`` "
"object is returned (otherwise, the return is ``Nil``)."
msgstr ""
"이러한 동작은 ``_physics_process()``로 일어납니다. ``move_and_collide()``를 "
"사용한 후 충돌이 발생할 경우, ``KinematicCollision2D`` 개체가 반환됩니다 (그 "
"외의 경우에는, ``Nil``이 반환됩니다)."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:411
msgid ""
"If there is a returned collision, we use the ``normal`` of the collision to "
"reflect the bullet's ``velocity`` with the ``Vector2.bounce()`` method."
msgstr ""
"만약 다시 충돌이 일어난다면, 우리는 충돌의 ``normal``을 총알의 ``velocity``"
"를  ``Vector2.bounce()`` 메서드로 반영하는 데 사용합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:414
msgid ""
"If the colliding object (``collider``) has a ``hit`` method, we also call "
"it. In the example project, we've added a flashing color effect to the Wall "
"to demonstrate this."
msgstr ""
"충돌물체(``collider``)가 ``hit`` 메서드를 갖고 있다면, 우리도 그것을 호출한"
"다. 예제 프로젝트에서는, 이를 시연하기 위해 벽에 깜박이는 색 효과를 추가했습"
"니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:421
msgid "Platformer movement"
msgstr ""

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:423
msgid ""
"Let's try one more popular example: the 2D platformer. ``move_and_slide()`` "
"is ideal for quickly getting a functional character controller up and "
"running. If you've downloaded the sample project, you can find this in "
"\"Platformer.tscn\"."
msgstr ""
"인기 있는 예를 하나 더 들어 보겠습니다: 2D 플랫포머입니다. "
"``move_and_slide()``는 기능성 캐릭터 제어기를 신속하게 작동하는 데 이상적입니"
"다. 샘플 프로젝트를 다운로드한 경우, \"Platformer.tscn\"에서 찾을 수 있습니"
"다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:427
msgid ""
"For this example, we'll assume you have a level made of ``StaticBody2D`` "
"objects. They can be any shape and size. In the sample project, we're using :"
"ref:`Polygon2D <class_Polygon2D>` to create the platform shapes."
msgstr ""
"이 예에서는, ``StaticBody2D``로 구성된 레벨이 있다고 가정합니다. 그들은 어떤 "
"모양이나 크기가 될 수 있습니다. 샘플 프로젝트에서는, 플랫폼 모양을 만들기 위"
"해 :ref:`Polygon2D <class_Polygon2D>`를 사용하고 있습니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:431
msgid "Here's the code for the player body:"
msgstr "플레이어 body의 코드는 다음과 같습니다:"

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:517
#, fuzzy
msgid ""
"When using ``move_and_slide()``, the function returns a vector representing "
"the movement that remained after the slide collision occurred. Setting that "
"value back to the character's ``velocity`` allows us to smoothly move up and "
"down slopes. Try removing ``velocity =`` and see what happens if you don't "
"do this."
msgstr ""
"이 기능은 ``move_and_slide()``를 사용할 때 슬라이드 충돌이 발생한 후에도 남"
"아 있는 움직임을 나타내는 벡터를 반환합니다. 그 값을 캐릭터의 ``velocity``로 "
"되돌리면 경사면을 부드럽게 오르내릴 수 있습니다. ``velocity =``를 없애보고 만"
"약 그렇게 하지 않으면 어떻게 되는지 확인해 보십시오."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:522
msgid ""
"Also note that we've added ``Vector2(0, -1)`` as the floor normal. This is a "
"vector pointing straight upward. This means that if the character collides "
"with an object that has this normal, it will be considered a floor."
msgstr ""
"또한 우리는 ``Vector2(0, -1)``를 바닥의 정상으로 추가했습니다. 이것은 바로 위"
"쪽을 가리키는 벡터입니다. 즉, 캐릭터가 이와 같은 정상 상태의 개체와 충돌하면 "
"바닥으로 간주됩니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:526
msgid ""
"Using the floor normal allows us to make jumping work, using "
"``is_on_floor()``. This function will only return ``true`` after a "
"``move_and_slide()`` collision where the colliding body's normal is within "
"45 degrees of the given floor vector (this can be adjusted by setting "
"``floor_max_angle``)."
msgstr ""
"바닥을 정상적으로 사용하면 ``is_on_floor()``을 사용함으로써 점프 작업을 할 "
"수 있습니다. 이 함수는 충돌 본체의 정상이 주어진 바닥 벡터에서 45도 이내인 "
"``move_and_slide()`` 충돌 후에만 ``true`` 를 반환합니다."

#: ../../docs/tutorials/physics/using_kinematic_body_2d.rst:531
#, fuzzy
msgid ""
"This also allows you to implement other features (like wall jumps) using "
"``is_on_wall()``, for example."
msgstr ""
"이를 통해 예를 들어 ``is_on_wall()`` 과 같이 벽 점프와 같은 다른 기능을 구현"
"할 수 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:4
msgid "Ray-casting"
msgstr ""

#: ../../docs/tutorials/physics/ray-casting.rst:9
msgid ""
"One of the most common tasks in game development is casting a ray (or custom "
"shaped object) and checking what it hits. This enables complex behaviors, "
"AI, etc. to take place. This tutorial will explain how to do this in 2D and "
"3D."
msgstr ""
"게임 개발에서 가장 일반적인 작업 중 하나는 광선(또는 사용자 지정 모양의 물체)"
"를 투사하고 그것이 부딪히는 것을 확인하는 것입니다. 이를 통해 복잡한 행동, "
"AI 등이 발생할 수 있습니다. 이 튜토리얼에서는 2D 및 3D로 이 작업을 수행하는 "
"방법에 대해 설명합니다."

#: ../../docs/tutorials/physics/ray-casting.rst:14
msgid ""
"Godot stores all the low level game information in servers, while the scene "
"is just a frontend. As such, ray casting is generally a lower-level task. "
"For simple raycasts, node such as :ref:`RayCast <class_RayCast>` and :ref:"
"`RayCast2D <class_RayCast2D>` will work, as they will return every frame "
"what the result of a raycast is."
msgstr ""
"씬이 단지 프론트엔드일 동안, Godot는 모든 낮은 레벨의 게임 정보를 서버에 저장"
"합니다. 따라서 일반적으로 레이 캐스팅은 하위 작업입니다. 단순 레이캐스트의 경"
"우, :ref:`RayCast <class_RayCast>` 및 :ref:`RayCast2D <class_RayCast2D>`와 같"
"은 노드는 모든 프레임의 레이캐스트의 결과가 어떤 것인지 반환함으로써 작동 할 "
"것입니다."

#: ../../docs/tutorials/physics/ray-casting.rst:21
msgid ""
"Many times, though, ray-casting needs to be a more interactive process so a "
"way to do this by code must exist."
msgstr ""
"그러나, 많은 경우, 광선 투사는 보다 상호작용적인 과정이 필요하므로 코드로 이"
"를 수행하는 방법이 있어야만 합니다."

#: ../../docs/tutorials/physics/ray-casting.rst:25
msgid "Space"
msgstr "공간"

#: ../../docs/tutorials/physics/ray-casting.rst:27
#, fuzzy
msgid ""
"In the physics world, Godot stores all the low level collision and physics "
"information in a *space*. The current 2d space (for 2D Physics) can be "
"obtained by accessing :ref:`CanvasItem.get_world_2d().space "
"<class_CanvasItem_method_get_world_2d>`. For 3D, it's :ref:`Spatial."
"get_world().space <class_Spatial_method_get_world>`."
msgstr ""
"물리 세계에서, Godot는 모든 낮은 수준의 충돌과 물리학 정보를 한 *공간*에 저장"
"합니다. 현재 2D 공간(2D 물리용)은 :ref:`CanvasItem.get_world_2d().space "
"<class_CanvasItem_method_get_world_2d>`에 액세스하여 얻을 수 있습니다. 3D의 "
"경우 :ref:`Spatial.get_world().space <class_Spatial_method_get_world>`입니다."

#: ../../docs/tutorials/physics/ray-casting.rst:33
msgid ""
"The resulting space :ref:`RID <class_RID>` can be used in :ref:"
"`PhysicsServer <class_PhysicsServer>` and :ref:`Physics2DServer "
"<class_Physics2DServer>` respectively for 3D and 2D."
msgstr ""
"결과적인 공간 :ref:`RID <class_RID>`는 3D 및 2D에 대해 각각 :ref:"
"`PhysicsServer <class_PhysicsServer>` 및 :ref:`Physics2DServer "
"<class_Physics2DServer>` 에서 사용할 수 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:38
msgid "Accessing space"
msgstr "공간에 접근하기"

#: ../../docs/tutorials/physics/ray-casting.rst:40
#, fuzzy
msgid ""
"Godot physics runs by default in the same thread as game logic, but may be "
"set to run on a separate thread to work more efficiently. Due to this, the "
"only time accessing space is safe is during the :ref:`Node."
"_physics_process() <class_Node_method__physics_process>` callback. Accessing "
"it from outside this function may result in an error due to space being "
"*locked*."
msgstr ""
"Godot은 기본적으로 게임 로직과 동일한 스레드에서 실행되지만, 보다 효율적으로 "
"작동하기 위해 별도의 스레드에서 실행되도록 설정할 수 있습니다. 이러한 이유"
"로, 공간에 액세스하는 시간은 :ref:`Node._physics_process() "
"<class_Node_method__physics_process>` 콜백 함수 동안은 안전합니다. 이 함수 외"
"부에서 액세스할 경우 공간이 *잠겨* 있기 때문에 오류가 발생할 수 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:47
msgid ""
"To perform queries into physics space, the :ref:`Physics2DDirectSpaceState "
"<class_Physics2DDirectSpaceState>` and :ref:`PhysicsDirectSpaceState "
"<class_PhysicsDirectSpaceState>` must be used."
msgstr ""
"물리 공간에 대한 쿼리를 수행하려면 :ref:`Physics2DDirectSpaceState "
"<class_Physics2DDirectSpaceState>` 및 :ref:`PhysicsDirectSpaceState "
"<class_PhysicsDirectSpaceState>` 를 사용해야 합니다."

#: ../../docs/tutorials/physics/ray-casting.rst:52
msgid "Use the following code in 2D:"
msgstr "2D에서는 다음 코드를 사용합니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:69
msgid "Or more directly:"
msgstr "더욱더 직접적인 코드:"

#: ../../docs/tutorials/physics/ray-casting.rst:84
msgid "And in 3D:"
msgstr "3D에서는 다음 코드를 사용합니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:100
msgid "Raycast query"
msgstr "광선 투사 쿼리"

#: ../../docs/tutorials/physics/ray-casting.rst:102
#, fuzzy
msgid ""
"For performing a 2D raycast query, the method :ref:"
"`Physics2DDirectSpaceState.intersect_ray() "
"<class_Physics2DDirectSpaceState_method_intersect_ray>` may be used. For "
"example:"
msgstr ""
"2D 광선 투사 쿼리를 수행하려면 :ref:`Physics2DDirectSpaceState."
"intersect_ray() <class_Physics2DDirectSpaceState_method_intersect_ray>` 방법"
"을 사용할 수 있습니다. 예를 들면 다음과 같습니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:123
#, fuzzy
msgid ""
"The result is a dictionary. If the ray didn't hit anything, the dictionary "
"will be empty. If it did hit something, it will contain collision "
"information:"
msgstr ""
"결과는 딕셔너리입니다. 만약 광선이 아무 것도 건드리지 않으면, 딕셔너리는 텅 "
"비게 될 것입니다. 만약 충돌했을 경우 충돌 정보가 포함됩니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:137
msgid ""
"The ``result`` dictionary when a collision occurs contains the following "
"data:"
msgstr "충돌이 발생할 경우 ``결과`` 딕셔너리에는 다음 데이터가 포함됩니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:152
msgid "The data is similar in 3D space, using Vector3 coordinates."
msgstr "데이터는 Vector3 좌표를 사용하는 3D 공간에서와 유사합니다."

#: ../../docs/tutorials/physics/ray-casting.rst:155
msgid "Collision exceptions"
msgstr "충돌 예외"

#: ../../docs/tutorials/physics/ray-casting.rst:157
msgid ""
"A common use case for ray casting is to enable a character to gather data "
"about the world around it. One problem with this is that the same character "
"has a collider, so the ray will only detect its parent's collider, as shown "
"in the following image:"
msgstr ""
"광선 투사의 일반적인 용도는 캐릭터가 주변 세계에 대한 데이터를 수집할 수 있도"
"록 하는 것입니다. 이것의 한 가지 문제점은 다음 이미지와 같이 같은 캐릭터가 충"
"돌체를 가지고 있어서, 광선은 부모의 충돌체만 감지한다는 것입니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:164
msgid ""
"To avoid self-intersection, the ``intersect_ray()`` function can take an "
"optional third parameter which is an array of exceptions. This is an example "
"of how to use it from a KinematicBody2D or any other collision object node:"
msgstr ""
"자체 교차를 방지하기 위해, ``intersect_ray()`` 함수는 예외 배열인 선택적 세 "
"번째 파라미터를 취할 수 있습니다. 이것은 KinematicBody2D 또는 다른 충돌 개체 "
"노드에서 사용하는 방법의 예입니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:189
msgid "The exceptions array can contain objects or RIDs."
msgstr "예외 배열에는 개체 또는 RID가 포함될 수 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:192
msgid "Collision Mask"
msgstr "충돌 마스크"

#: ../../docs/tutorials/physics/ray-casting.rst:194
msgid ""
"While the exceptions method works fine for excluding the parent body, it "
"becomes very inconvenient if you need a large and/or dynamic list of "
"exceptions. In this case, it is much more efficient to use the collision "
"layer/mask system."
msgstr ""
"예외 방법은 부모 body를 제외하고도 잘 작동하지만, 많은 and/or 동적 예외 목록"
"이 필요한 경우 매우 불편하게 됩니다. 이 경우 충돌 계층/마스크 시스템을 사용하"
"는 것이 훨씬 효율적입니다."

#: ../../docs/tutorials/physics/ray-casting.rst:198
#, fuzzy
msgid ""
"The optional fourth argument for ``intersect_ray()`` is a collision mask. "
"For example, to use the same mask as the parent body, use the "
"``collision_mask`` member variable:"
msgstr ""
"``intersect_ray()`` 의 네 번째 선택적인 인수는 충돌 마스크이다. 예를 들어 부"
"모body와 동일한 마스크를 사용하려면 ``collision_mask`` 멤버 변수를 사용해야 "
"합니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:226
msgid "3D ray casting from screen"
msgstr "화면에서의 3D ray casting(광선 투사)"

#: ../../docs/tutorials/physics/ray-casting.rst:228
#, fuzzy
msgid ""
"Casting a ray from screen to 3D physics space is useful for object picking. "
"There is not much need to do this because :ref:`CollisionObject "
"<class_CollisionObject>` has an \"input_event\" signal that will let you "
"know when it was clicked, but in case there is any desire to do it manually, "
"here's how."
msgstr ""
"화면에서 3D 물리학 공간으로 광선을 투사하는 것은 물체를 선택하는 데 유용합니"
"다. :ref:`CollisionObject <class_CollisionObject>` 에는 \"input_event\" 신호"
"가 있어 클릭 시 이를 알 수 있지만, 수동으로 수행할 수 있는 방법이 있습니다."

#: ../../docs/tutorials/physics/ray-casting.rst:234
msgid ""
"To cast a ray from the screen, you need a :ref:`Camera <class_Camera>` node. "
"A ``Camera`` can be in two projection modes: perspective and orthogonal. "
"Because of this, both the ray origin and direction must be obtained. This is "
"because ``origin`` changes in orthogonal mode, while ``normal`` changes in "
"perspective mode:"
msgstr ""
"화면에서 광선을 캐스팅하려면 :ref:`Camera <class_Camera>` 노드가 필요합니다. "
"``카메라``는 두 가지 투영 모드일 수 있습니다: 원근법과 직교. 이로 인해 광선 "
"원점과 방향을 모두 얻어야 합니다. 이는 직교 모드의 ``원래`` 변화, 원근법 모드"
"에서의 ``정상`` 변화 때문입니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:242
msgid "To obtain it using a camera, the following code can be used:"
msgstr "카메라를 사용하여 얻기 위해선, 다음 코드를 사용할 수 있습니다:"

#: ../../docs/tutorials/physics/ray-casting.rst:270
msgid ""
"Remember that during ``_input()``, the space may be locked, so in practice "
"this query should be run in ``_physics_process()``."
msgstr ""
"``_input()`` 동안 공간이 잠겨 있을 수 있으므로 실제로 이 쿼리는 "
"``_physics_process()``에서 실행해야 한다는 점을 기억하십시오."

#: ../../docs/tutorials/physics/ragdoll_system.rst:4
msgid "Ragdoll system"
msgstr "래그돌(Ragdoll) 시스템"

#: ../../docs/tutorials/physics/ragdoll_system.rst:9
msgid ""
"Since version 3.1, Godot supports ragdoll physics. Ragdolls rely on physics "
"simulation to create realistic procedural animation. They are used for death "
"animations in many games."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:11
msgid ""
"In this tutorial, we will be using the Platformer3D demo to set up a ragdoll."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:13
msgid ""
"You can download the Platformer3D demo on `GitHub <https://github.com/"
"godotengine/godot-demo-projects/tree/master/3d/platformer>`_ or using the "
"`Asset Library <https://godotengine.org/asset-library/asset/125>`_."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:16
msgid "Setting up the ragdoll"
msgstr "래그돌 설정하기"

#: ../../docs/tutorials/physics/ragdoll_system.rst:19
msgid "Creating physical bones"
msgstr "물리적 본 만들기"

#: ../../docs/tutorials/physics/ragdoll_system.rst:21
msgid ""
"Like many other features in the engine, there is a node to set up a ragdoll: "
"the :ref:`PhysicalBone <class_PhysicalBone>` node. To simplify the setup, "
"you can generate ``PhysicalBone`` nodes with the \"Create physical skeleton"
"\" feature in the skeleton node."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:23
msgid ""
"Open the platformer demo in Godot, and then the Robi scene. Select the "
"``Skeleton`` node. A skeleton button appears on the top bar menu:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:27
msgid ""
"Click it and select the ``Create physical skeleton`` option. Godot will "
"generate ``PhysicalBone`` nodes and collision shapes for each bone in the "
"skeleton and pin joints to connect them together:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:31
msgid ""
"Some of the generated bones aren't necessary: the ``MASTER`` bone for "
"example. So we're going to clean up the skeleton by removing them."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:34
msgid "Cleaning up the skeleton"
msgstr "스켈레톤(Skeleton) 정리하기"

#: ../../docs/tutorials/physics/ragdoll_system.rst:36
msgid ""
"Each ``PhysicalBone`` the engine needs to simulate has a performance cost, "
"so you want to remove every bone that is too small to make a difference in "
"the simulation, as well as all utility bones."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:38
msgid ""
"For example, if we take a humanoid, you do not want to have physical bones "
"for each finger. you can use a single bone for the entire hand instead, or "
"one for the palm, one for the thumb, and a last one for the other four "
"fingers."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:40
msgid ""
"Remove these physical bones : ``MASTER``, ``waist``, ``neck``, "
"``headtracker``. This gives us an optimized skeleton and makes it easier to "
"control the ragdoll."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:43
msgid "Collision shape adjustment"
msgstr "충돌 모양 조정"

#: ../../docs/tutorials/physics/ragdoll_system.rst:45
msgid ""
"The next task is adjusting the collision shape and the size of physical "
"bones to match the part of the body that each bone should simulate."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:50
msgid "Joints adjustment"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:52
msgid ""
"Once you adjusted the collision shapes, your ragdoll is almost ready. You "
"just want to adjust the pin joints to get a better simulation. "
"``PhysicalBone`` nodes have an unconstrained pin joint assigned to them by "
"default. To change the pin joint, select the ``PhysicalBone`` and change the "
"constraint type in the ``Joint`` section. There, you can change the "
"constraint's orientation and its limits."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:56
msgid "This is the final result:"
msgstr "최종 결과물입니다:"

#: ../../docs/tutorials/physics/ragdoll_system.rst:61
msgid "Simulating the ragdoll"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:63
msgid ""
"The ragdoll is now ready to use. To start the simulation and play the "
"ragdoll animation, you need to call the ``physical_bones_start_simulation`` "
"method. Attach a script to the skeleton node and call the method in the "
"``_ready`` method:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:71
msgid ""
"To stop the simulation, call the ``physical_bones_stop_simulation()`` method."
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:75
msgid ""
"You can also limit the simulation to only a few bones. To do so, pass the "
"bone names as a parameter. Here's an example of partial ragdoll simulation:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:80
msgid "Collision layer and mask"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:82
msgid ""
"Make sure to set up your collision layers and masks properly so the "
"``KinematicBody``'s capsule doesn't get in the way of the physics simulation:"
msgstr ""

#: ../../docs/tutorials/physics/ragdoll_system.rst:86
msgid "For more information, read :ref:`doc_physics_introduction`"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:4
msgid "Kinematic character (2D)"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:9
msgid ""
"Yes, the name sounds strange. \"Kinematic Character\". What is that? The "
"reason for the name is that, when physics engines came out, they were called "
"\"Dynamics\" engines (because they dealt mainly with collision responses). "
"Many attempts were made to create a character controller using the dynamics "
"engines, but it wasn't as easy as it seemed. Godot has one of the best "
"implementations of dynamic character controller you can find (as it can be "
"seen in the 2d/platformer demo), but using it requires a considerable level "
"of skill and understanding of physics engines (or a lot of patience with "
"trial and error)."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:19
msgid ""
"Some physics engines, such as Havok seem to swear by dynamic character "
"controllers as the best option, while others (PhysX) would rather promote "
"the kinematic one."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:23
msgid "So, what is the difference?:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:25
msgid ""
"A **dynamic character controller** uses a rigid body with an infinite "
"inertia tensor. Basically, it's a rigid body that can't rotate. Physics "
"engines always let objects collide, then solve their collisions all "
"together. This makes dynamic character controllers able to interact with "
"other physics objects seamlessly (as seen in the platformer demo), however "
"these interactions are not always predictable. Collisions can also take more "
"than one frame to be solved, so a few collisions may seem to displace a tiny "
"bit. Those problems can be fixed, but require a certain amount of skill."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:34
msgid ""
"A **kinematic character controller** is assumed to always begin in a non-"
"colliding state, and will always move to a non colliding state. If it starts "
"in a colliding state, it will try to free itself (like rigid bodies do), but "
"this is the exception, not the rule. This makes their control and motion a "
"lot more predictable and easier to program. However, as a downside, they "
"can't directly interact with other physics objects (unless done by hand in "
"code)."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:42
msgid ""
"This short tutorial will focus on the kinematic character controller. "
"Basically, the old-school way of handling collisions (which is not "
"necessarily simpler under the hood, but well hidden and presented as a nice "
"and simple API)."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:48
msgid "Physics process"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:50
msgid ""
"To manage the logic of a kinematic body or character, it is always advised "
"to use physics process, because it's called before physics step and its "
"execution is in sync with physics server, also it is called the same amount "
"of times per second, always. This makes physics and motion calculation work "
"in a more predictable way than using regular process, which might have "
"spikes or lose precision if the frame rate is too high or too low."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:82
msgid ""
"To have something to test, here's the scene (from the tilemap tutorial): :"
"download:`kbscene.zip <files/kbscene.zip>`. We'll be creating a new scene "
"for the character. Use the robot sprite and create a scene like this:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:88
msgid ""
"You'll notice that there's a warning icon next to our CollisionShape2D node; "
"that's because we haven't defined a shape for it. Create a new CircleShape2D "
"in the shape property of CollisionShape2D. Click on <CircleShape2D> to go to "
"the options for it, and set the radius to 30:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:95
msgid ""
"**Note: As mentioned before in the physics tutorial, the physics engine "
"can't handle scale on most types of shapes (only collision polygons, planes "
"and segments work), so always change the parameters (such as radius) of the "
"shape instead of scaling it. The same is also true for the kinematic/rigid/"
"static bodies themselves, as their scale affects the shape scale.**"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:102
msgid ""
"Now, create a script for the character, the one used as an example above "
"should work as a base."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:105
msgid ""
"Finally, instance that character scene in the tilemap, and make the map "
"scene the main one, so it runs when pressing play."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:111
#, fuzzy
msgid "Moving the kinematic character"
msgstr "인터페이스 변경"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:113
msgid ""
"Go back to the character scene, and open the script, the magic begins now! "
"Kinematic body will do nothing by default, but it has a useful function "
"called :ref:`KinematicBody2D.move_and_collide() "
"<class_KinematicBody2D_method_move_and_collide>`. This function takes a :ref:"
"`Vector2 <class_Vector2>` as an argument, and tries to apply that motion to "
"the kinematic body. If a collision happens, it stops right at the moment of "
"the collision."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:121
msgid "So, let's move our sprite downwards until it hits the floor:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:146
msgid ""
"The result is that the character will move, but stop right when hitting the "
"floor. Pretty cool, huh?"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:149
msgid ""
"The next step will be adding gravity to the mix, this way it behaves a "
"little more like a regular game character:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:185
msgid ""
"Now the character falls smoothly. Let's make it walk to the sides, left and "
"right when touching the directional keys. Remember that the values being "
"used (for speed at least) are pixels/second."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:189
msgid "This adds simple walking support by pressing left and right:"
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:254
msgid "And give it a try."
msgstr ""

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:256
msgid ""
"This is a good starting point for a platformer. A more complete demo can be "
"found in the demo zip distributed with the engine, or in the https://github."
"com/godotengine/godot-demo-projects/tree/master/2d/kinematic_character."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:4
msgid "SoftBody"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:6
msgid ""
"Soft bodies (or *soft-body dynamics*) simulate movement, changing shape and "
"other physical properties of deformable objects. This can for example be "
"used to simulate cloth or to create more realistic characters."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:10
#, fuzzy
msgid "Basic set-up"
msgstr "기본 구문:"

#: ../../docs/tutorials/physics/soft_body.rst:12
msgid ""
"A :ref:`SoftBody <class_SoftBody>` node is used for soft body simulations."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:14
msgid "We will create a bouncy cube to demonstrate the setup of a soft body."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:16
msgid ""
"Create a new scene with a ``Spatial`` node as root. Then, create a "
"``Softbody`` node. Add a ``CubeMesh`` in the ``mesh`` property of the node "
"in the inspector and increase the subdivision of the mesh for simulation."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:20
msgid ""
"Set the parameters to obtain the type of soft body you aim for. Try to keep "
"the ``Simulation Precision`` above 5, otherwise, the soft body may collapse."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:24
msgid ""
"Handle some parameters with care, as some value can lead to strange results. "
"For example, if the shape is not completely closed and you set pressure to "
"more than 0, the softbody will fly around like a plastic bag under strong "
"wind."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:26
#, fuzzy
msgid "Play the scene to view the simulation."
msgstr "적절한 애니메이션을 재생."

#: ../../docs/tutorials/physics/soft_body.rst:28
msgid ""
"To improve the simulation's result, increase the ``Simulation Precision``, "
"this will give significant improvement at the cost of performance."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:31
msgid "Cloak simulation"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:33
msgid "Let's make a cloak in the Platformer3D demo."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:35
msgid ""
"You can download the Platformer3D demo on `GitHub <https://github.com/"
"godotengine/godot-demo-projects/tree/master/3d/platformer>` or `the Asset "
"Library <https://godotengine.org/asset-library/asset/125>`_."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:37
msgid ""
"Open the ``Player`` scene, add a ``SoftBody`` node and assign a "
"``PlaneMesh`` to it."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:39
msgid ""
"Open the ``PlaneMesh`` properties and set the size(x: 0.5 y: 1) then set "
"``Subdivide Width`` and ``Subdivide Depth`` to 5. Adjust the ``SoftBody``'s "
"position. You should end up with something like this:"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:43
msgid "Subdivision generates a more tessellated mesh for better simulations."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:45
msgid ""
"Add a :ref:`BoneAttachment <class_BoneAttachment>` node under the skeleton "
"node and select the Neck bone to attach the cloak to the character skeleton."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:47
msgid ""
"``BoneAttachment`` node is to attach objects to a bone of a armature. The "
"attached object will follow the bone's movement, weapon of a character can "
"be attached this way."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:51
msgid ""
"To create pinned joints, select the upper vertices in the ``SoftBody`` node:"
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:55
msgid ""
"The pinned joints can be find in ``SoftBody``'s ``Attachments`` property, "
"choose the ``BoneAttachment`` as the ``SpatialAttachment`` for each pinned "
"joints, the pinned joints are now attached to the neck."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:59
msgid ""
"Last step is to avoid clipping by adding the Kinematic Body `Player` to "
"``Parent Collision Ignore`` of the ``SoftBody``."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:63
msgid "Play the scene and the cloak should simulate correctly."
msgstr ""

#: ../../docs/tutorials/physics/soft_body.rst:67
msgid ""
"This covers the basic settings of softbody, experiment with the parameters "
"to achieve the effect you are aiming for when making your game."
msgstr ""

#: ../../docs/tutorials/math/vector_math.rst:4
msgid "Vector math"
msgstr "벡터"

#: ../../docs/tutorials/math/vector_math.rst:9
msgid ""
"This tutorial is a short and practical introduction to linear algebra as it "
"applies to game development. Linear algebra is the study of vectors and "
"their uses. Vectors have many applications in both 2D and 3D development and "
"Godot uses them extensively. Developing a good understanding of vector math "
"is essential to becoming a strong game developer."
msgstr ""
"이 튜토리얼은 게임 개발에 적용되는 선형대수에 대한 짧고 실용적인 소개입니"
"다. \n"
"선형 대수란 벡터와 벡터 사용에 대한 학문입니다. 벡터는 2D 및 3D 개발 모두에"
"서 많은 애플리케이션을 가지고 있으며 Godot는 이를 광범위하게 사용합니다. 벡"
"터 수학에 대한 올바른 이해는 강력한 게임 개발자가 되기 위해 필수적입니다."

#: ../../docs/tutorials/math/vector_math.rst:15
msgid ""
"This tutorial is **not** a formal textbook on linear algebra. We will only "
"be looking at how it is applied to game development. For a broader look at "
"the mathematics, see https://www.khanacademy.org/math/linear-algebra"
msgstr ""
"이 튜토리얼은 선형대수에 관한 공식 교과서가 **절대** 아닙니다. 우리는 단지 그"
"것이 어떻게 게임 개발에 적용되는지 지켜볼 것입니다. 수학에 대한 자세한 내용"
"은 https://www.khanacademy.org/math/linear-algebra을 참조하십시오"

#: ../../docs/tutorials/math/vector_math.rst:21
msgid "Coordinate systems (2D)"
msgstr "좌표계 (2차원)"

#: ../../docs/tutorials/math/vector_math.rst:23
msgid ""
"In 2D space, coordinates are defined using a horizontal axis (``x``) and a "
"vertical axis (``y``). A particular position in 2D space is written as a "
"pair of values such as ``(4, 3)``."
msgstr ""
"2차원 공간에서, 좌표계들은 가로축(x)과 세로축(y)을 사요하며 정의됩니다.\n"
"2차원 공간에서의 특정한 위치는 (4,3)과 같이 한 쌍의 값으로 쓰여집니다."

#: ../../docs/tutorials/math/vector_math.rst:29
msgid ""
"If you're new to computer graphics, it might seem odd that the positive "
"``y`` axis points **downwards** instead of upwards, as you probably learned "
"in math class. However, this is common in most computer graphics "
"applications."
msgstr ""
"컴퓨터 그래픽을 처음 접하는 사람이라면 아마 수학 수업에서 배웠듯이 양의``y\" "
"축이 위쪽이 아니라 **아래쪽**을 가리키는 것이 이상하게 보일지도 모릅니다. 그"
"러나 대부분의 컴퓨터 그래픽 응용 프로그램에서는 일반적으로 이러한 현상이 발생"
"합니다."

#: ../../docs/tutorials/math/vector_math.rst:34
msgid ""
"Any position in the 2D plane can be identified by a pair of numbers in this "
"way. However, we can also think of the position ``(4, 3)`` as an **offset** "
"from the ``(0, 0)`` point, or **origin**. Draw an arrow pointing from the "
"origin to the point:"
msgstr ""
"2D 평면의 모든 위치는 이러한 방식으로 한 쌍의 수들로 식별할 수 있습니다. \n"
"그러나 우리는 또한  (4, 3)의 위치를  (0, 0)으로 부터 상쇄되었다고 생각하거나 "
"기원으로 생각할 수 있습니다. \n"
"원점에서 점까지 가리키는 화살표를 그리세요:"

#: ../../docs/tutorials/math/vector_math.rst:41
msgid ""
"This is a **vector**. A vector represents a lot of useful information. As "
"well as telling us that the point is at ``(4, 3)``, we can also think of it "
"as an angle ``θ`` and a length (or magnitude) ``m``. In this case, the arrow "
"is a **position vector** - it denotes a position in space, relative to the "
"origin."
msgstr ""
"이것은 벡터입니다. 벡터는 유용한 많은 정보들을 보여줍니다. 점이 (4, 3)에 있다"
"고 알려줄 뿐 아니라,  우리는 각도 'θ' 그리고 길이 (또는 크기) 'm' 또한 생각해"
"낼 수 있습니다. 이러한  경우 화살표는 **위치 벡터**로, 원점에 상대적인 공간"
"의 위치를 나타냅니다."

#: ../../docs/tutorials/math/vector_math.rst:47
msgid ""
"A very important point to consider about vectors is that they only represent "
"**relative** direction and magnitude. There is no concept of a vector's "
"position. The following two vectors are identical:"
msgstr ""
"벡터에 대해 고려해야 할 매우 중요한 점은 벡터가 **상대적인** 방향과 크기만 나"
"타낸다는 것입니다. 벡터의 위치에 대한 개념이 없습니다. 다음 두 벡터는 동일합"
"니다:"

#: ../../docs/tutorials/math/vector_math.rst:53
msgid ""
"Both vectors represent a point 4 units to the right and 3 units below some "
"starting point. It does not matter where on the plane you draw the vector, "
"it always represents a relative direction and magnitude."
msgstr ""
"두 벡터 모두 시작점으로 부터 오른쪽으로 4만큼 아랫쪽으로 3만큼 의 단위를 나타"
"냅니다.  평면에서 벡터를 그리는 것은 중요하지 않습니다. 이것은 항상 상대적인 "
"방향과 크기를 나타냅니다."

#: ../../docs/tutorials/math/vector_math.rst:58
msgid "Vector operations"
msgstr "벡터 연산"

#: ../../docs/tutorials/math/vector_math.rst:60
#, fuzzy
msgid ""
"You can use either method (x and y coordinates or angle and magnitude) to "
"refer to a vector, but for convenience, programmers typically use the "
"coordinate notation. For example, in Godot, the origin is the top-left "
"corner of the screen, so to place a 2D node named ``Node2D`` 400 pixels to "
"the right and 300 pixels down, use the following code:"
msgstr ""
"당신은 둘 중 하나의 방법(x 및 y 좌표 또는 각도 및 크기)을 사용하여 벡터를 참"
"조할 수 있지만, 편리한 프로그래머는 전형적으로 좌표 표기법을 사용합니다.\n"
" 예를 들어 Godot에서 원점은 화면의 왼쪽 상단 모서리이고, \"Node2D\"라는 2차원"
"의 교점을  400픽셀 오른쪽, 300픽셀 아래로 배치하려면 다음 코드를 사용하십시"
"오:"

#: ../../docs/tutorials/math/vector_math.rst:76
#, fuzzy
msgid ""
"Godot supports both :ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>` for 2D and 3D usage, respectively. The same mathematical "
"rules discussed in this article apply to both types."
msgstr ""
"Godot는 2D 및 3D 사용 시 각각 :ref: Vector2 <class_Vector2>와 :ref:`Vector3 "
"<class_Vector3>를 지원합니다. 이 문서에서 논의된 동일한 수학적 규칙은 두 가"
"지 유형 모두에 적용됩니다."

#: ../../docs/tutorials/math/vector_math.rst:80
msgid "Member access"
msgstr "멤버 접근"

#: ../../docs/tutorials/math/vector_math.rst:82
msgid ""
"The individual components of the vector can be accessed directly by name."
msgstr "벡터의 각각의 구성요소는 이름으로 직접 접근할 수 있다."

#: ../../docs/tutorials/math/vector_math.rst:103
msgid "Adding vectors"
msgstr "벡터의 합"

#: ../../docs/tutorials/math/vector_math.rst:105
msgid ""
"When adding or subtracting two vectors, the corresponding components are "
"added:"
msgstr "두 벡터를 더하거나 뺼 떄, 해당하는 구성요소는 더해집니다:"

#: ../../docs/tutorials/math/vector_math.rst:116
msgid ""
"We can also see this visually by adding the second vector at the end of the "
"first:"
msgstr ""
"첫번째 벡터의 끝에 두번째 벡터를 더함으로써 우리는 시각적으로도 이것을 확인"
"할 수 있습니다:"

#: ../../docs/tutorials/math/vector_math.rst:121
msgid "Note that adding ``a + b`` gives the same result as ``b + a``."
msgstr "즉 더하기 a+b는 b+a 와 같은 결과 값을 갖는다."

#: ../../docs/tutorials/math/vector_math.rst:123
msgid "Scalar multiplication"
msgstr "스칼라 곱"

#: ../../docs/tutorials/math/vector_math.rst:125
msgid ""
"Vectors represent both direction and magnitude. A value representing only "
"magnitude is called a **scalar**."
msgstr ""
"벡터는 방향과 크기 둘 다를 나타냅니다. 크기만 나타내고 있는 값을  **스칼라**"
"라고 합니다."

#: ../../docs/tutorials/math/vector_math.rst:128
msgid "A vector can be multiplied by a **scalar**:"
msgstr "벡터는 스칼라에 의해 곱해질 수 있습니다:"

#: ../../docs/tutorials/math/vector_math.rst:143
msgid ""
"Multiplying a vector by a scalar does not change its direction, only its "
"magnitude. This is how you **scale** a vector."
msgstr ""
"벡터에 스칼라를 곱하는 것은 벡터의 방향을 바꾸지는 않고, 이것의 크기만 바꿉니"
"다. 이것이 바로 벡터의 크기를 조정하는 방법입니다."

#: ../../docs/tutorials/math/vector_math.rst:147
msgid "Practical applications"
msgstr "실용적인 응용"

#: ../../docs/tutorials/math/vector_math.rst:149
msgid "Let's look at two common uses for vector addition and subtraction."
msgstr "벡터 덧셈과 뺄셈의 두 가지 일반적인 용법을 살펴보자."

#: ../../docs/tutorials/math/vector_math.rst:151
msgid "Movement"
msgstr "이동"

#: ../../docs/tutorials/math/vector_math.rst:153
msgid ""
"A vector can represent **any** quantity with a magnitude and direction. "
"Typical examples are: position, velocity, acceleration, and force. In this "
"image, the spaceship at step 1 has a position vector of ``(1,3)`` and a "
"velocity vector of ``(2,1)``. The velocity vector represents how far the "
"ship moves each step. We can find the position for step 2 by adding the "
"velocity to the current position."
msgstr ""
"벡터는 크기와 방향을 가진 모든 양을 나타낼 수 있습니다. \n"
"대표적인 예 : 위치, 속도, 가속도, 힘\n"
"이 그림에서 1단계의 우주선은 위치 벡터 '(1,3)' 과  속도 벡터 '(2,1)'을  가지"
"고 있습니다. \n"
"속도 벡터는 배가 각 단계를 이동하는 정도를 나타냅니다.\n"
"현재 위치에 속도를 더함으로써 2단계의 위치를 찾을 수 있습니다."

#: ../../docs/tutorials/math/vector_math.rst:161
msgid ""
"Velocity measures the **change** in position per unit of time. The new "
"position is found by adding velocity to the previous position."
msgstr ""
"속도는 시간 단위당 위치의 변화를 측정합니다. 새로운 위치는 이전 위치에 속도"
"를 더함으로써 찾을 수 있습니다."

#: ../../docs/tutorials/math/vector_math.rst:164
msgid "Pointing toward a target"
msgstr "표적을 향하기"

#: ../../docs/tutorials/math/vector_math.rst:166
msgid ""
"In this scenario, you have a tank that wishes to point its turret at a "
"robot. Subtracting the tank's position from the robot's position gives the "
"vector pointing from the tank to the robot."
msgstr ""
"이 시나리오에서, 당신은 회전포탑을 로봇에게 겨누고자 하는 탱크를 가지고 있"
"다. \n"
"로봇의 위치에서 탱크의 위치를 빼면 벡터가 탱크에서 로봇으로 가리킬 수 있습니"
"다."

#: ../../docs/tutorials/math/vector_math.rst:172
msgid "To find a vector pointing from ``A`` to ``B`` use ``B - A``."
msgstr "\"A\"에서 \"B\"로 향하는 벡터를 찾으려면 \"B - A\"를 사용합니다."

#: ../../docs/tutorials/math/vector_math.rst:175
msgid "Unit vectors"
msgstr "단위 벡터"

#: ../../docs/tutorials/math/vector_math.rst:177
msgid ""
"A vector with **magnitude** of ``1`` is called a **unit vector**. They are "
"also sometimes referred to as **direction vectors** or **normals**. Unit "
"vectors are helpful when you need to keep track of a direction."
msgstr ""
"**크기**가 1인 벡터를 **단위 벡터** 라고 합니다. 또한 이러한 벡터는 **방향 벡"
"터** 또는 **법선벡터**라고도 합니다. 단위 벡터는 방향을 추적해야 할 때 유용합"
"니다."

#: ../../docs/tutorials/math/vector_math.rst:182
msgid "Normalization"
msgstr "표준화"

#: ../../docs/tutorials/math/vector_math.rst:184
msgid ""
"**Normalizing** a vector means reducing its length to ``1`` while preserving "
"its direction. This is done by dividing each of its components by its "
"magnitude:"
msgstr ""
"벡터를 **표준화**한다는 것의 의미는 벡터의 방향은 유지하면서 벡터의 길이를 1"
"로 줄이는 것입니다. 이것은 각 벡터를 그것의 크기로 나누면서 이루어집니다:"

#: ../../docs/tutorials/math/vector_math.rst:203
msgid ""
"Because this is such a common operation, ``Vector2`` and ``Vector3`` provide "
"a method for normalizing:"
msgstr ""
"이것은 일반적인 계산이기 때문에, vector 2와 vector3는 표준화하는 방법을 제공"
"한다:"

#: ../../docs/tutorials/math/vector_math.rst:216
msgid ""
"Because normalization involves dividing by the vector's length, you cannot "
"normalize a vector of length ``0``. Attempting to do so will result in an "
"error."
msgstr ""
"표준화는 벡터 길이로 나누어지기 때문에 길이 \"0\"의 벡터를 표준화할 수 없습니"
"다. 이렇게 시도한다면 오류가 발생할 것입니다."

#: ../../docs/tutorials/math/vector_math.rst:221
msgid "Reflection"
msgstr "반사"

#: ../../docs/tutorials/math/vector_math.rst:223
msgid ""
"A common use of unit vectors is to indicate **normals**. Normal vectors are "
"unit vectors aligned perpendicularly to a surface, defining its direction. "
"They are commonly used for lighting, collisions, and other operations "
"involving surfaces."
msgstr ""
"단위벡터의 일반적인 용도는 **법벡터**를 나타내는 것입니다. 법선 벡터는 표면"
"에 수직으로 정렬된 단위 벡터를 말하며, 방향을 정의합니다. 이 장치는 일반적으"
"로 조명, 충돌 및 표면과 관련된 기타 작업에 사용됩니다."

#: ../../docs/tutorials/math/vector_math.rst:228
msgid ""
"For example, imagine we have a moving ball that we want to bounce off a wall "
"or other object:"
msgstr ""
"예를 들어, 우리가 벽이나 다른 물체에서 튀기길 원하는 움직이는 공을 가지고 있"
"다고 상상해 보세요:"

#: ../../docs/tutorials/math/vector_math.rst:233
msgid ""
"The surface normal has a value of ``(0, -1)`` because this is a horizontal "
"surface. When the ball collides, we take its remaining motion (the amount "
"left over when it hits the surface) and reflect it using the normal. In "
"Godot, the :ref:`Vector2 <class_Vector2>` class has a ``bounce()`` method to "
"handle this. Here is a GDScript example of the diagram above using a :ref:"
"`KinematicBody2D <class_KinematicBody2D>`:"
msgstr ""
"이 표면은 수평면이기 때문에 표면 법선벡터 값은 \"(0, -1)\"입니다.\n"
" 공이 충돌할 때, 우리는 그것의 남은 동작(표면에 부딪힐 때 남은 양)을 취하고 "
"이것을 법선벡터를 이용하는데에 반영합니다. \n"
"고도에서 :ref :vector2 <class_Vector2> 클래스는 이것을 다루는 \"bounce()\" 메"
"소드를 가지고 있습니다.\n"
" 위 다이어그램의 GDScript 예제는 :ref:\"KinemicalBody2D "
"<class_KinemicalBody2D>를 이용하는 것입니다:"

#: ../../docs/tutorials/math/vector_math.rst:263
msgid "Dot product"
msgstr "내적"

#: ../../docs/tutorials/math/vector_math.rst:265
msgid ""
"The **dot product** is one of the most important concepts in vector math, "
"but is often misunderstood. Dot product is an operation on two vectors that "
"returns a **scalar**. Unlike a vector, which contains both magnitude and "
"direction, a scalar value has only magnitude."
msgstr ""
"**내적**이란 벡터 수학에서 가장 중요한 개념 중 하나이지만 종종 잘못이해된"
"다.\n"
"내적은 두 벡터를 **스칼라**로 반환해주는 연산이다.  크기와 방향 모두를 포함하"
"는 벡터와는 다르게 스칼라 값은 오직 크기만 갖는다."

#: ../../docs/tutorials/math/vector_math.rst:270
msgid "The formula for dot product takes two common forms:"
msgstr "내적의 공식은 두가지 형식을 취한다:"

#: ../../docs/tutorials/math/vector_math.rst:272
msgid ""
"A \\cdot B = \\left \\| A \\right \\|\\left \\| B \\right \\|\\cos \\Theta"
msgstr "A·B = ||A|| ||B|| cosθ"

#: ../../docs/tutorials/math/vector_math.rst:278
msgid "A \\cdot B = A_{x}B_{x} + A_{y}B_{y}"
msgstr "A·B = Ax Bx + Ay By"

#: ../../docs/tutorials/math/vector_math.rst:282
msgid ""
"However, in most cases it is easiest to use the built-in method. Note that "
"the order of the two vectors does not matter:"
msgstr ""
"그러나, 대부분의 경우에서 기본 방법을 사용하는 것이 가장 쉽습니다. \n"
"두 벡터의 순서는 중요하지 않습니다:"

#: ../../docs/tutorials/math/vector_math.rst:296
msgid ""
"The dot product is most useful when used with unit vectors, making the first "
"formula reduce to just ``cosθ``. This means we can use the dot product to "
"tell us something about the angle between two vectors:"
msgstr ""
"내적은 첫 번째 공식을 cosθ로 줄이면서 단위벡터를 사용할 때 가장 유용합니다.\n"
"즉, 단위벡터를 사용하여 두 벡터 간의 각도에 대해 설명할 수 있습니다:"

#: ../../docs/tutorials/math/vector_math.rst:302
msgid ""
"When using unit vectors, the result will always be between ``-1`` (180°) and "
"``1`` (0°)."
msgstr "단위벡터를 사용할때, 결과는 항상 -1(180°)에서 1(0°) 사이일 것이다."

#: ../../docs/tutorials/math/vector_math.rst:306
msgid "Facing"
msgstr "직면"

#: ../../docs/tutorials/math/vector_math.rst:308
msgid ""
"We can use this fact to detect whether an object is facing toward another "
"object. In the diagram below, the player ``P`` is trying to avoid the "
"zombies ``A`` and ``B``. Assuming a zombie's field of view is **180°**, can "
"they see the player?"
msgstr ""
"우리는 이 사실을 어떤 물체가 다른 물체를 향하고 있는지 감지하는데에 이용할 "
"수 있습니다. \n"
"아래 그림에서 \"P\" 선수는 좀비 \"A\"와 \"B\"를 피하려고 합니다.\n"
"좀비의 시야가 **180°**라고 가정하면, 플레이어를 볼 수 있습니까?"

#: ../../docs/tutorials/math/vector_math.rst:314
msgid ""
"The green arrows ``fA`` and ``fB`` are **unit vectors** representing the "
"zombies' facing directions and the blue semicircle represents its field of "
"view. For zombie ``A``, we find the direction vector ``AP`` pointing to the "
"player using ``P - A`` and normalize it. If the angle between this vector "
"and the facing vector is less than 90°, then the zombie can see the player."
msgstr ""
"녹색 화살표 \"fA\"와 \"fB\"는 좀비들이 마주보는 방향을 나타내는 **단위 벡터**"
"이고 파란 반원형은 그것의 시야를 나타낸다. \n"
"좀비 ``A\"의 경우 방향 벡터인 \"AP\"가 \"P - A\"를 사용하여 선수를 가리키는 "
"것을 발견해 법선벡터를 만든다. \n"
"이 벡터와 마주보는 벡터 사이의 각도가 90° 미만일 경우 좀비는 플레이어를 볼 "
"수 있다."

#: ../../docs/tutorials/math/vector_math.rst:321
msgid "In code it would look like this:"
msgstr "코드에서는 이렇게 보일 것이다:"

#: ../../docs/tutorials/math/vector_math.rst:339
msgid "Cross product"
msgstr "외적"

#: ../../docs/tutorials/math/vector_math.rst:341
#, fuzzy
msgid ""
"Like the dot product, the **cross product** is an operation on two vectors. "
"However, the result of the cross product is a vector with a direction that "
"is perpendicular to both. Its magnitude depends on their relative angle. If "
"two vectors are parallel, the result of their cross product will be a null "
"vector."
msgstr ""
"내적과 같이, 외적은 두 벡터사이의 연산입니다. 그러나 외적의 결과는 양쪽과 수"
"직의 방향을 가진 벡터입니다. 그것의 크기는 그것들의 상대적인 각도에 의존합니"
"다. 만약 두 벡터가 평행이라면, 외적의 결과는 0벡터일 것입니다."

#: ../../docs/tutorials/math/vector_math.rst:346
msgid ""
"\\left \\|a \\times b  \\right \\| = \\left \\| a \\right \\|\\left \\| b "
"\\right \\|\\ |\\sin(a,b)|"
msgstr "||a X b|| = ||a|| ||b|| |sin(a,b)|"

#: ../../docs/tutorials/math/vector_math.rst:352
msgid "The cross product is calculated like this:"
msgstr "외적은 이렇게 계산된다:"

#: ../../docs/tutorials/math/vector_math.rst:371
msgid "With Godot, you can use the built-in method:"
msgstr "고도에서는, 기본 방법을 사용할 수 있습니다:"

#: ../../docs/tutorials/math/vector_math.rst:382
msgid ""
"In the cross product, order matters. ``a.cross(b)`` does not give the same "
"result as ``b.cross(a)``. The resulting vectors point in **opposite** "
"directions."
msgstr ""
"외적에서는, 순서가 중요합니다. \"a.cross(b)\"는 \"b.cross(a)\"와 같은 결가가 "
"나오지 않습니다.  결과 벡터는 **반대쪽** 방향을 가리킵니다."

#: ../../docs/tutorials/math/vector_math.rst:387
msgid "Calculating normals"
msgstr "법선 계산하기"

#: ../../docs/tutorials/math/vector_math.rst:389
msgid ""
"One common use of cross products is to find the surface normal of a plane or "
"surface in 3D space. If we have the triangle ``ABC`` we can use vector "
"subtraction to find two edges ``AB`` and ``AC``. Using the cross product, "
"``AB x AC`` produces a vector perpendicular to both: the surface normal."
msgstr ""
"외적의 일반적인 용도는 3D 공간에서 표면 또는 평명의 법선 표면을 찾는 것입니"
"다. 삼각형 \"ABC\"가 있다면 벡터 뺄셈을 사용하여 \"AB\"와 \"AC\"의 두 모서리"
"를 찾을 수 있습니다. 외적을 이용하여 \"AB x AC\"는 두 가지 모두에 수직인 벡터"
"를 생성합니다: 표면에 수직방향."

#: ../../docs/tutorials/math/vector_math.rst:394
msgid "Here is a function to calculate a triangle's normal:"
msgstr "이것은 삼각형에 수직인 평면을 계산하는 함수이다:"

#: ../../docs/tutorials/math/vector_math.rst:418
msgid "Pointing to a target"
msgstr "대상 가리키기"

#: ../../docs/tutorials/math/vector_math.rst:420
#, fuzzy
msgid ""
"In the dot product section above, we saw how it could be used to find the "
"angle between two vectors. However, in 3D, this is not enough information. "
"We also need to know what axis to rotate around. We can find that by "
"calculating the cross product of the current facing direction and the target "
"direction. The resulting perpendicular vector is the axis of rotation."
msgstr ""
"위의 외적 섹션에서, 우리는 두 벡터 간의 각도를 찾는 데 어떻게 이것을 이용할 "
"수 있는지 확인했습니다. \n"
"그러나 3차원에서는 정보가 충분하지 않습니다. 우리는 또한 어떤 축을 중심으로 "
"회전해야 하는지 알아야 합니다.\n"
"우리는 현재 마주보는 방향과 목표 방향의 외적을 계산함으로써 그것을 발견할 수 "
"있습니다. 결과 수직 벡터는 회전의 축입니다."

#: ../../docs/tutorials/math/vector_math.rst:428
msgid "More information"
msgstr "더 많은 정보"

#: ../../docs/tutorials/math/vector_math.rst:430
msgid ""
"For more information on using vector math in Godot, see the following "
"articles:"
msgstr ""
"고도에서 벡터 수학을 이용하는 것에 대해 더 많은 정보를 원한다면, 다음 글들을 "
"봐주십시오:"

#: ../../docs/tutorials/math/vector_math.rst:432
msgid ":ref:`doc_vectors_advanced`"
msgstr ":ref:`doc_vectors_advanced`"

#: ../../docs/tutorials/math/vector_math.rst:433
msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"

#: ../../docs/tutorials/math/vectors_advanced.rst:4
msgid "Advanced vector math"
msgstr "고급 벡터 연산"

#: ../../docs/tutorials/math/vectors_advanced.rst:7
msgid "Planes"
msgstr "평면"

#: ../../docs/tutorials/math/vectors_advanced.rst:9
msgid ""
"The dot product has another interesting property with unit vectors. Imagine "
"that perpendicular to that vector (and through the origin) passes a plane. "
"Planes divide the entire space into positive (over the plane) and negative "
"(under the plane), and (contrary to popular belief) you can also use their "
"math in 2D:"
msgstr ""
"외적은 단위 벡터에 대한 또 다른 흥미로운 속성을 갖고있습니다. 벡터에 수직이"
"고 (원점을 통해) 평면을 통과한다고 상상해보십시오. 평면은 전체 공간을 양(비행"
"기 위)과 음(비행기 아래)으로 나누면, (일반적으로 믿는 것과 무관) 그 연산들을 "
"2차원에서도 사용할 수 있습니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:17
msgid ""
"Unit vectors that are perpendicular to a surface (so, they describe the "
"orientation of the surface) are called **unit normal vectors**. Though, "
"usually they are just abbreviated as *normals*. Normals appear in planes, 3D "
"geometry (to determine where each face or vertex is siding), etc. A "
"**normal** *is* a **unit vector**, but it's called *normal* because of its "
"usage. (Just like we call (0,0) the Origin!)."
msgstr ""
"표면에 수직인 단위 벡터를 **단위 법선 벡터**라고 합니다. \n"
"그러나 일반적으로 *법선벡터*으로 단축됩니다.\n"
" 평면, 3차원(각 면 또는 정점이 면으로 있는 위치를 결정하기 위해) 등에 법선벡"
"터가 나타납니다. **법선벡터** 는 **단위벡터**이지만, 이것의 사용 때문에 *법선"
"벡터*라고 합니다. (원점을 (0,0)이라고 부르는 것처럼!)."

#: ../../docs/tutorials/math/vectors_advanced.rst:24
msgid ""
"It's as simple as it looks. The plane passes by the origin and the surface "
"of it is perpendicular to the unit vector (or *normal*). The side towards "
"the vector points to is the positive half-space, while the other side is the "
"negative half-space. In 3D this is exactly the same, except that the plane "
"is an infinite surface (imagine an infinite, flat sheet of paper that you "
"can orient and is pinned to the origin) instead of a line."
msgstr ""
"그것은 보이는 것 만큼 간단합니다. 평면은 원점을 통과하며 그 표면은 단위 벡터"
"(또는 *법선벡터*)에 수직입니다. 벡터 점을 향하는 측면은 양의 반쪽 공간이고, "
"다른 쪽은 음의 반쪽 공간입니다. 3차원에서는 평면이 선 대신 무한 표면(방향을 "
"지정할 수 있고 원점에 고정되는 무한 평면 용지)이라는 점을 제외하면 정확하게 "
"동일합니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:33
msgid "Distance to plane"
msgstr "평면과의 거리"

#: ../../docs/tutorials/math/vectors_advanced.rst:35
msgid ""
"Now that it's clear what a plane is, let's go back to the dot product. The "
"dot product between a **unit vector** and any **point in space** (yes, this "
"time we do dot product between vector and position), returns the **distance "
"from the point to the plane**:"
msgstr ""
"이제 평면이 무엇인지 알았으니, 다시 내적으로 돌아가 봅시다. **단위벡터**와 **"
"공간 내 모든 점** 사이의 내적 (예, 이번에는 벡터와 위치 간에 내적을수행함)은 "
"점에서 평면까지의 ** 거리를 반환합니다**:"

#: ../../docs/tutorials/math/vectors_advanced.rst:49
msgid ""
"But not just the absolute distance, if the point is in the negative half "
"space the distance will be negative, too:"
msgstr ""
"그러나 절대적인 거리가 아니라, 만약 점이 음수인 경우에는 거리도 음수입니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:54
msgid "This allows us to tell which side of the plane a point is."
msgstr "이것은 우리가 평면의 어느 쪽을 가리키는 것을 허락한다."

#: ../../docs/tutorials/math/vectors_advanced.rst:57
msgid "Away from the origin"
msgstr "원점으로부터 멀리"

#: ../../docs/tutorials/math/vectors_advanced.rst:59
msgid ""
"I know what you are thinking! So far this is nice, but *real* planes are "
"everywhere in space, not only passing through the origin. You want real "
"*plane* action and you want it *now*."
msgstr ""
"난 당신이 무슨 생각을 하는지 압니다! 지금까지 이것은 좋았지만, *실제* 평면은 "
"원점만 통과하는 것이 아니라 공간 어디에나 있습니다. 실제 *평면* 작업을 원하"
"는 경우 *지금*."

#: ../../docs/tutorials/math/vectors_advanced.rst:63
msgid ""
"Remember that planes not only split space in two, but they also have "
"*polarity*. This means that it is possible to have perfectly overlapping "
"planes, but their negative and positive half-spaces are swapped."
msgstr ""
"평면은 공간을 둘로 나눌 뿐만 아니라 *극성*도 가지고 있다는 것을 기억하세요. "
"이는 완벽하게 겹치는 평면을 가질 수 있지만, 음의 면과 양의 면은 서로 교환된다"
"는 것을 의미합니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:67
msgid ""
"With this in mind, let's describe a full plane as a **normal** *N* and a "
"**distance from the origin** scalar *D*. Thus, our plane is represented by N "
"and D. For example:"
msgstr ""
"이를 위해 전체 평면을 ** 법선벡터** *N*과 원점으로부터** 스칼라 *D*의 ** 거리"
"로 설명하겠습니다. 따라서 우리 평면는 N과 D로 보여집니다. 예를 들면 다음과 같"
"습니다.:"

#: ../../docs/tutorials/math/vectors_advanced.rst:73
msgid ""
"For 3D math, Godot provides a :ref:`Plane <class_Plane>` built-in type that "
"handles this."
msgstr ""
"3차원 수학에서, 고도는 이를 처리하는 :ref:`Plane <class_Plane>`의 내장 유형"
"을 제공합니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:76
msgid ""
"Basically, N and D can represent any plane in space, be it for 2D or 3D "
"(depending on the amount of dimensions of N) and the math is the same for "
"both. It's the same as before, but D is the distance from the origin to the "
"plane, travelling in N direction. As an example, imagine you want to reach a "
"point in the plane, you will just do:"
msgstr ""
"기본적으로 N과 D는 공간의 평면을 나타낼 수 있으며(N의 크기에 따라 다름) 2차"
"원 또는 3차원의 경우 모두 수학이 동일합니다. 이전과 동일하지만, D는 원점에서"
"부터 평면까지 N 방향으로 이동하는 거리입니다. 예를 들어, 평면의 한 지점에 도"
"달하고 싶다고 가정해 보십시오:"

#: ../../docs/tutorials/math/vectors_advanced.rst:91
msgid ""
"This will stretch (resize) the normal vector and make it touch the plane. "
"This math might seem confusing, but it's actually much simpler than it "
"seems. If we want to tell, again, the distance from the point to the plane, "
"we do the same but adjusting for distance:"
msgstr ""
"이것은 법선 벡터를 늘려 그것이 평면에 닿게 할 것입니다. 이 수학은 혼란스러워 "
"보일지 모르지만 실제로는 보이는 것보다 훨씬 더 간단합니다. 만약 우리가 다시 "
"한 번 점에서부터 평면까지의 거리를 알려고 한다면, 우리는 거리에 따라 조정만 "
"하면 됩니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:105
msgid "The same thing, using a built-in function:"
msgstr "이것도 마찬가지로, 내장 함수 사용:"

#: ../../docs/tutorials/math/vectors_advanced.rst:116
msgid "This will, again, return either a positive or negative distance."
msgstr "이것은 또 양수나 음수의 거리를 반환할 것입니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:118
msgid ""
"Flipping the polarity of the plane can be done by negating both N and D. "
"This will result in a plane in the same position, but with inverted negative "
"and positive half spaces:"
msgstr ""
"평면의 극성 N과 D를 모두 부정함으로써 뒤집을 수 있습니다. 이렇게 하면 평면이 "
"동일한 위치에 있지만 반전된 음과 양의 절반 공간이 있는 평면이 됩니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:133
msgid ""
"Of course, Godot also implements this operator in :ref:`Plane "
"<class_Plane>`, so doing:"
msgstr ""
"물론 고도는 또한 이 연산자를 :ref:`Plane <class_Plane>`에 구현하여 다음과 같"
"은 작업을 수행합니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:145
msgid "Will work as expected."
msgstr "기대한 대로 작동할 것입니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:147
msgid ""
"So, remember, a plane is just that and its main practical use is calculating "
"the distance to it. So, why is it useful to calculate the distance from a "
"point to a plane? It's extremely useful! Let's see some simple examples.."
msgstr ""
"기억하세요, 평면은 단지 그것입니다 그리고 그것의 주요한 실용적 용도는 그것에 "
"대한 거리를 계산하는 것입니다. 그렇다면, 한 지점에서 평면까지의 거리를 계산하"
"는 것이 왜 유용한가? 그것은 매우 유용합니다! 몇 가지 간단한 예를 봅시다."

#: ../../docs/tutorials/math/vectors_advanced.rst:153
msgid "Constructing a plane in 2D"
msgstr "2D로 평면 구성하기"

#: ../../docs/tutorials/math/vectors_advanced.rst:155
msgid ""
"Planes clearly don't come out of nowhere, so they must be built. "
"Constructing them in 2D is easy, this can be done from either a normal (unit "
"vector) and a point, or from two points in space."
msgstr ""
"평면이 갑자기 나오지 않는 게 분명하니까 꼭 만들어져야합니다. 2D로 구성하는 것"
"은 쉽습니다. 이것은 법선(단위 벡터)와 점 또는 공간의 두 점으로부터 수행될 수 "
"있습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:159
msgid ""
"In the case of a normal and a point, most of the work is done, as the normal "
"is already computed, so just calculate D from the dot product of the normal "
"and the point."
msgstr ""
"법선벡터 및 점의 경우, 대부분의 작업이 완료됩니다. 법선벡터가 이미 계산되어 "
"있으므로, 점과 법선벡터의 내적 으로 부터 D를 계산하기만 하면 됩니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:174
msgid ""
"For two points in space, there are actually two planes that pass through "
"them, sharing the same space but with normal pointing to the opposite "
"directions. To compute the normal from the two points, the direction vector "
"must be obtained first, and then it needs to be rotated 90° degrees to "
"either side:"
msgstr ""
"평면에서의 두 점에는, 실제로 두 개의 평면이 그들을 통과하면서, 같은 공간을 공"
"유하지만, 보통 반대 방향을 가리킨다. \n"
"두 지점에서 법선벡터를 계산하려면 먼저 방향 벡터를 얻은 다음 어느 쪽으로든 "
"90° 회전해야 합니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:201
msgid ""
"The rest is the same as the previous example, either point_a or point_b will "
"work since they are in the same plane:"
msgstr ""
"나머지는 이전 예와 동일합니다. point_a 또는 point_b는 동일한 평면에 있으므로 "
"작동합니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:219
msgid ""
"Doing the same in 3D is a little more complex and will be explained further "
"down."
msgstr ""
"3차원에서 동일한 작업을 수행하는 것은 약간 더 복잡하며, 아래에 자세히 설명되"
"어 있습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:223
msgid "Some examples of planes"
msgstr "평면의 예"

#: ../../docs/tutorials/math/vectors_advanced.rst:225
msgid ""
"Here is a simple example of what planes are useful for. Imagine you have a "
"`convex <https://www.mathsisfun.com/definitions/convex.html>`__ polygon. For "
"example, a rectangle, a trapezoid, a triangle, or just any polygon where no "
"faces bend inwards."
msgstr ""
"여기 유용한 평면들의 간단한 예가 있습니다. 여러분이 'convex <https://www."
"mathsisfun.com/definitions/convex.html>' 다각형을 가지고 있다고 상상해 보세"
"요. 예를 들어 직사각형, 사다리꼴, 삼각형 또는 어떤 면이 안쪽으로 굽히지 않는 "
"모든 다각형이 있습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:230
msgid ""
"For every segment of the polygon, we compute the plane that passes by that "
"segment. Once we have the list of planes, we can do neat things, for example "
"checking if a point is inside the polygon."
msgstr ""
"다각형의 모든 부분에 대해 해당 부분을 통과하는 평면을 계산합니다. 평면 목록"
"이 있으면 다각형 내부에 점이 있는지 확인하는 등 깔끔한 작업을 수행할 수 있습"
"니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:234
msgid ""
"We go through all planes, if we can find a plane where the distance to the "
"point is positive, then the point is outside the polygon. If we can't, then "
"the point is inside."
msgstr ""
"우리는 모든 평면을 통과합니다, 점까지의 거리가 양수인 평면을 찾을 수 있으면 "
"점은 다각형 외부에 있습니다. 아니면 점은 다각형 내부에 있습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:240
#: ../../docs/tutorials/math/vectors_advanced.rst:279
msgid "Code should be something like this:"
msgstr "코드는 다음과 같아야 합니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:265
msgid ""
"Pretty cool, huh? But this gets much better! With a little more effort, "
"similar logic will let us know when two convex polygons are overlapping too. "
"This is called the Separating Axis Theorem (or SAT) and most physics engines "
"use this to detect collision."
msgstr ""
"꽤 멋지죠, 네? 하지만 이것은 훨씬 더 나아집니다! 조금만 더 노력하면, 유사한 "
"논리가 우리에게 두 개의 볼록 다각형이 겹치는 때를 알려줄 것입니다. 이것을 분"
"리축 이론(SAT)이라고 하며 대부분의 물리학 엔진은 이것을 충돌을 감지하기 위해 "
"사용한다."

#: ../../docs/tutorials/math/vectors_advanced.rst:270
msgid ""
"With a point, just checking if a plane returns a positive distance is enough "
"to tell if the point is outside. With another polygon, we must find a plane "
"where *all* *the* *other* *polygon* *points* return a positive distance to "
"it. This check is performed with the planes of A against the points of B, "
"and then with the planes of B against the points of A:"
msgstr ""
"점을 사용하면 평면이 양의 거리를 반환하는지 확인하는 것으로 점이 외부에 있는"
"지 여부를 충분히 알 수 있습니다. 다른 다각형을 사용하면 *모두* *기타* *다각형"
"* *점*으로 양의 거리를 반환하는 평면을 찾아야 합니다. 이 확인은 A의 평면을 B"
"의 점에 대해 수행한 다음 B의 평면을 A의 점에 대해 수행합니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:370
msgid ""
"As you can see, planes are quite useful, and this is the tip of the iceberg. "
"You might be wondering what happens with non convex polygons. This is "
"usually just handled by splitting the concave polygon into smaller convex "
"polygons, or using a technique such as BSP (which is not used much nowadays)."
msgstr ""
"보시다시피 평면은 매우 유용하며, 이것이 빙산의 일각일 뿐입니다. 여러분은 아"
"마 볼록하지 않은 다각형에 무슨 일이 일어날지 궁금해 할 것입니다. 일반적으로 "
"오목한 다각형은 작은 볼록 다각형으로 분할하거나 BSP(요즘 많이 사용되지 않는 "
"기술)와 같은 기술을 사용하여 처리됩니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:377
msgid "Collision detection in 3D"
msgstr "3차원에서 충돌 감지"

#: ../../docs/tutorials/math/vectors_advanced.rst:379
msgid ""
"This is another bonus bit, a reward for being patient and keeping up with "
"this long tutorial. Here is another piece of wisdom. This might not be "
"something with a direct use case (Godot already does collision detection "
"pretty well) but it's used by almost all physics engines and collision "
"detection libraries :)"
msgstr ""
"이것은 또 다른 보너스 비트인데, 이것은 인내심을 갖고 이 긴 튜토리얼을 따라가"
"는 것에 대한 보상입니다. 여기 또 다른 지혜가 있습니다. 직접 사용 사례(고도는 "
"이미 충돌 감지를 매우 잘 수행함)는 아니지만 거의 모든 물리적 엔진과 충돌 감"
"지 라이브러리에 사용됩니다:)"

#: ../../docs/tutorials/math/vectors_advanced.rst:385
msgid ""
"Remember that converting a convex shape in 2D to an array of 2D planes was "
"useful for collision detection? You could detect if a point was inside any "
"convex shape, or if two 2D convex shapes were overlapping."
msgstr ""
"볼록한 모양을 2D로 변환하는 것이 충돌 탐지에 유용했다는 것을 기억하시나요? 당"
"신은 점이 볼록 모양 안에 있는지 또는 두 개의 2D 볼록 모양이 겹치는지를 탐지"
"할 수 있습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:389
msgid ""
"Well, this works in 3D too, if two 3D polyhedral shapes are colliding, you "
"won't be able to find a separating plane. If a separating plane is found, "
"then the shapes are definitely not colliding."
msgstr ""
"네, 3차원에서도 작동합니다. 만일 두 개의 3차원 다면체 모양이 충돌하면 분리면"
"을 찾을 수 없습니다. 분리면이 발견되면 형상은 확실히 충돌하지 않습니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:393
msgid ""
"To refresh a bit a separating plane means that all vertices of polygon A are "
"in one side of the plane, and all vertices of polygon B are in the other "
"side. This plane is always one of the face-planes of either polygon A or "
"polygon B."
msgstr ""
"비트를 새로 고치려면 폴리곤 A의 모든 정점이 평면의 한 쪽에 있고 폴리곤 B의 모"
"든 정점이 다른 쪽에 있음을 의미합니다. 이 평면은 항상 폴리곤 A 또는 폴리곤 B"
"의 면 평면 중 하나입니다."

#: ../../docs/tutorials/math/vectors_advanced.rst:398
msgid ""
"In 3D though, there is a problem to this approach, because it is possible "
"that, in some cases a separating plane can't be found. This is an example of "
"such situation:"
msgstr ""
"그러나 3차원에서는 분리면을 찾을 수 없기 때문에 이 접근법에 문제가 있습니다. "
"다음은 이러한 상황의 예입니다:"

#: ../../docs/tutorials/math/vectors_advanced.rst:404
msgid ""
"To avoid it, some extra planes need to be tested as separators, these planes "
"are the cross product between the edges of polygon A and the edges of "
"polygon B"
msgstr ""
"이를 방지하려면 일부 추가 평면을 분리기로 테스트해야 합니다. 이러한 평면은 다"
"각형 A의 모서리와 다각형 B의 모서리 사이의 외적입니다"

#: ../../docs/tutorials/math/vectors_advanced.rst:410
msgid "So the final algorithm is something like:"
msgstr "마지막 알고리즘은 다음과 같습니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:4
msgid "Matrices and transforms"
msgstr "행렬과 변환"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:9
msgid ""
"Before reading this tutorial, it is advised to read the previous one about :"
"ref:`doc_vector_math` as this one is a direct continuation."
msgstr ""
"본 튜토리얼을 읽기 전에 \"ref:doc_vector_math\"에 대한 이전 튜토리얼을 읽어 "
"보는 것이 좋습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:12
msgid ""
"This tutorial will be about *transformations* and will cover a little about "
"matrices (but not in-depth)."
msgstr ""
"본 튜토리얼에서는 *변환*에 대해 다루며 행렬에 대해 설명합니다(심층적이지는 않"
"음)."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:15
msgid ""
"Transformations are most of the time applied as translation, rotation and "
"scale so they will be considered as priority here."
msgstr ""
"변환은 변환, 회전 및 척도로 사용되는 대부분의 시간이기 때문에 여기서는 변환"
"이 우선으로 간주됩니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:19
msgid "Oriented coordinate system (OCS)"
msgstr "OCS(주요 좌표계)"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:21
msgid ""
"Imagine we have a spaceship somewhere in space. In Godot this is easy, just "
"move the ship somewhere and rotate it:"
msgstr ""
"우주 어딘가에 우주선이 있다고 상상해 보세요. Godot에서 이것은 쉽습니다. 배를 "
"어딘가로 옮겨서 돌리십시오:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:26
msgid ""
"Ok, so in 2D this looks simple, a position and an angle for a rotation. But "
"remember, we are grown ups here and don't use angles (plus, angles are not "
"even that useful when working in 3D)."
msgstr ""
"2D에서는 단순한 위치 및 회전각으로 보입니다. 하지만 기억하세요, 우리는 여기"
"서 더 나아갔고, 각도는 사용하지 않습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:30
msgid ""
"We should realize that at some point, someone *designed* this spaceship. Be "
"it for 2D in a drawing such as Paint.net, Gimp, Photoshop, etc. or in 3D "
"through a 3D DCC tool such as Blender, Max, Maya, etc."
msgstr ""
"우리는 언젠가 누군가가 이 우주선을 *설계*했다는 것을 깨달아야 합니다.  Paint."
"net, Gimp, Photoshop 등과 같은 도면에서 2D로 제작하거나 Blender, Max, Maya 등"
"과 같은 3D DCC 도구를 통해 3D로 제작해야 합니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:35
msgid ""
"When it was designed, it was not rotated. It was designed in its own "
"*coordinate system*."
msgstr ""
"이것은 설계 시 회전하지 않았습니다. 그것은 자체적인 *좌표계 시스템*으로 설계"
"되었습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:40
msgid ""
"This means that the tip of the ship has a coordinate, the fin has another, "
"etc. Be it in pixels (2D) or vertices (3D)."
msgstr ""
"이것은 우주선의 끝이 좌표를 가지고 있고 판부분은 다른 것을 가지고 있다는 것"
"을 의미합니다. 픽셀(2D) 또는 정점(3D)으로 지정합니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:43
msgid "So, let's recall again that the ship was somewhere in space:"
msgstr "그러면, 우주 어딘가에 우주선이 있었다는 것을 회상해봅시다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:47
msgid ""
"How did it get there? What moved it and rotated it from the place it was "
"designed to its current position? The answer is... a **transform**, the ship "
"was *transformed* from their original position to the new one. This allows "
"the ship to be displayed where it is."
msgstr ""
"그건 어떻게 그곳에 도착했나요? 무엇을 움직여서 디자인된 위치에서 현재 위치로 "
"회전시킨건가요? 답은... **변환**입니다. 우주선은 원래 위치에서 새 위치로 *변"
"환되었습니다. 이렇게 하면 우주선이 있는 곳에 표시될 수 있습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:52
msgid ""
"But transform is too generic of a term to describe this process. To solve "
"this puzzle, we will superimpose the ship's original design position at "
"their current position:"
msgstr ""
"그러나 변환은 이 과정을 설명하기에는 너무 일반적인 용어이다. 이 퍼즐을 해결하"
"기 위해 우주선의 원래 설계 위치를 현재 위치에 겹치게 됩니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:58
msgid ""
"So, we can see that the \"design space\" has been transformed too. How can "
"we best represent this transformation? Let's use 3 vectors for this (in 2D), "
"a unit vector pointing towards X positive, a unit vector pointing towards Y "
"positive and a translation."
msgstr ""
"\"설계된 우주\"도 바뀌었습니다. 이러한 변화를 가장 잘 표현할 수 있는 방법은 "
"무엇일까요? 이를 위해 (2D 단위) 3개의 벡터를 사용하겠습니다. X 양수를 가리키"
"는 단위 벡터, Y 양수를 가리키는 단위 벡터 및 변환을 사용합니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:65
msgid ""
"Let's call the 3 vectors \"X\", \"Y\" and \"Origin\", and let's also "
"superimpose them over the ship so it makes more sense:"
msgstr ""
"이 세 벡터를 \"X\", \"Y\" 및 \"Origin\"이라고 부르고, 이 세 벡터를 우주선 위"
"에 겹쳐보자:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:70
msgid ""
"Ok, this is nicer, but it still does not make sense. What do X,Y and Origin "
"have to do with how the ship got there?"
msgstr ""
"좋아요, 이게 더 좋긴 한데, 그래도 말이 안 돼요. X,Y,Origin이 우주선이 어떻게 "
"그곳에 도착했는지와 무슨 관계가 있는걸까요?"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:73
msgid "Well, let's take the point from top tip of the ship as reference:"
msgstr "자, 우주선으로부터 참고할 수 있는 요점부터 말씀드리겠습니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:77
msgid ""
"And let's apply the following operation to it (and to all the points in the "
"ship too, but we'll track the top tip as our reference point):"
msgstr ""
"다음 작업을 여기에 적용해 보겠습니다(그리고 우주선의 모든 지점에도 적용하되, "
"맨위의 꼭지 부분을 기준점으로 추적해 보겠습니다):"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:89
msgid "Doing this to the selected point will move it back to the center:"
msgstr "이렇게 하면 선택한 지점으로 다시 이동합니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:93
msgid ""
"This was expected, but then let's do something more interesting. Use the dot "
"product of X and the point, and add it to the dot product of Y and the point:"
msgstr ""
"이것은 예상된 것이지만, 좀 더 흥미로운 것을 해봅시다. X와 점의 외적에 Y와 점"
"의 외적을 더해보는 것을 사용합시다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:106
msgid ""
"Then what we have is.. wait a minute, it's the ship in its design position!"
msgstr "그럼 우리가 얻는 건.. 잠깐만, 우주선이 설계된 위치에 있습니다!"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:111
msgid ""
"How did this black magic happen? The ship was lost in space, and now it's "
"back home!"
msgstr ""
"어떻게 이런 일이 일어난거죠? 우주선을 우주에서 잃어버렸는데 지금은 돌아왔어"
"요!"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:114
msgid ""
"It might seem strange, but it does have plenty of logic. Remember, as we "
"have seen in the :ref:`doc_vector_math`, what happened is that the distance "
"to X axis, and the distance to Y axis were computed. Calculating distance in "
"a direction or plane was one of the uses for the dot product. This was "
"enough to obtain back the design coordinates for every point in the ship."
msgstr ""
"이상하게 보일지 모르지만, 그것은 많은 논리를 가지고 있습니다. \"ref:"
"doc_vector_math\"에서 보았던 바와 같이 X축까지의 거리와 Y축까지의 거리가 계산"
"되었다는 것을 기억하세요. 방향 또는 평면에서 거리를 계산하는 것은 외적을 사용"
"하는 방법 중 하나입니다. 이것은 우주선 안의 모든 지점에 대한 설계 좌표를 다"
"시 얻기에 충분했습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:121
msgid ""
"So, what we have been working with so far (with X, Y and Origin) is an "
"*Oriented Coordinate System*. X an Y are the **Basis**, and *Origin* is the "
"offset."
msgstr ""
"지금까지 X, Y, 원점과 함께 작업한 것은 *지향적 좌표계*입니다. X, Y는 "
"**Basis**이고 *원점*은 오프셋입니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:128
msgid ""
"We know what the Origin is. It's where the 0,0 (origin) of the design "
"coordinate system ended up after being transformed to a new position. This "
"is why it's called *Origin*, But in practice, it's just an offset to the new "
"position."
msgstr ""
"우리는 원점이 무엇인지 압니다. 그것은 설계 좌표계의 0,0(원래)이 새로운 위치"
"로 변환된 후에 종료되는 곳입니다. 이것이 바로 *원점*이라고 불리는 이유지만 실"
"제로는 새로운 위치로의 상쇄에 불과합니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:133
msgid ""
"The Basis is more interesting. The basis is the direction of X and Y in the "
"OCS from the new, transformed location. It tells what has changed, in either "
"2D or 3D. The Origin (offset) and Basis (direction) communicate \"Hey, the "
"original X and Y axes of your design are *right here*, pointing towards "
"*these directions*.\""
msgstr ""
"기저는 더 흥미롭다. 기저는 새로운 변환된 위치에서 OCS의 X와 Y의 방향입니다. "
"그것은 2D나 3D로 무엇이 바뀌었는지 말해줍니다. 원점(오프셋)과 베이스(방향)는 "
"\"너의 설계된 원래 X와 Y 축은 바로 *여기에 있어* *이러한 방향*을 가리킵니다."
"\""

#: ../../docs/tutorials/math/matrices_and_transforms.rst:139
msgid ""
"So, let's change the representation of the basis. Instead of 2 vectors, "
"let's use a *matrix*."
msgstr ""
"그러면, 기저의 표현을 바꿔보겠습니다. 2개의 벡터 대신에 *matrix*를 사용합니"
"다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:144
msgid ""
"The vectors are up there in the matrix, horizontally. The next problem now "
"is that.. what is this matrix thing? Well, we'll assume you've never heard "
"of a matrix."
msgstr ""
"벡터는 위쪽에 수평으로 있습니다. 다음 문제는.. 이 매트릭스란 무엇인가? 음, 우"
"리는 당신이 매트릭스에 대해 들어본 적이 없다고 가정하겠습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:149
msgid "Transforms in Godot"
msgstr "Godot 에서의 변환"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:151
msgid ""
"This tutorial will not explain matrix math (and their operations) in depth, "
"only its practical use. There is plenty of material for that, which should "
"be a lot simpler to understand after completing this tutorial. We'll just "
"explain how to use transforms."
msgstr ""
"본 튜토리얼에서는 행렬 수학(및 그 연산)을 실제로 사용하기만 하고 자세히 설명"
"하지는 않습니다. 이 튜토리얼을 완수한 후 이해하기 훨씬 더 간단할 수 있습니"
"다. 변환 사용법에 대해 설명하겠습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:159
msgid ""
":ref:`class_Transform2D` is a 3x2 matrix. It has 3 Vector2 elements and it's "
"used for 2D. The \"X\" axis is the element 0, \"Y\" axis is the element 1 "
"and \"Origin\" is element 2. It's not divided in basis/origin for "
"convenience, due to its simplicity."
msgstr ""
"ref=class_Transform2D는 3x2 행렬입니다. 이것은 3Vector2 원소들이 있고 2D에 사"
"용됩니다. \"X\" 축은 원소 0, \"Y\" 축은 원소 1이고 \"원점\"은 요소 2입니다. "
"단순성 때문에 편의상 기저/원점으로 구분되지 않습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:179
msgid ""
"Most operations will be explained with this datatype (Transform2D), but the "
"same logic applies to 3D."
msgstr ""
"대부분의 연산들은 이 데이터 타입(Transform2D)으로 설명되지만 3D에도 동일한 논"
"리가 적용됩니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:183
msgid "Identity"
msgstr "항등성"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:185
msgid "An important transform is the \"identity\" matrix. This means:"
msgstr "중요한 변환은 항등행렬이다. 이것의 의미는:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:187
msgid "'X' Points right: Vector2(1,0)"
msgstr "X점 오른쪽: 벡터2(1.0)"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:188
msgid "'Y' Points up (or down in pixels): Vector2(0,1)"
msgstr "'Y' 점 위(또는 픽셀 단위 아래): Vector2(0,1)"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:189
msgid "'Origin' is the origin Vector2(0,0)"
msgstr "'원점'은 원점 벡터2(0,0)입니다"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:193
msgid ""
"It's easy to guess that an *identity* matrix is just a matrix that aligns "
"the transform to its parent coordinate system. It's an *OCS* that hasn't "
"been translated, rotated or scaled."
msgstr ""
"*항등* 행렬은 상위 좌표계에 대한 변환을 조정하는 행렬일 뿐입니다. *OCS*는 변"
"환, 회전 또는 스케일링되지 않았습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:220
msgid "Operations"
msgstr "연산"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:225
msgid "Rotating Transform2D is done by using the \"rotated\" function:"
msgstr "Rotated(회전) 기능을 사용하여 Transform2D를 회전합니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:241
msgid "Translation"
msgstr "변환"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:243
msgid ""
"There are two ways to translate a Transform2D, the first one is moving the "
"origin:"
msgstr ""
"Transform2D를 변환하는 두 가지 방법이 있습니다. 첫 번째 방법은 원점을 이동하"
"는 것입니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:263
msgid "This will always work in global coordinates."
msgstr "이 기능은 항상 전반적인 좌표에 적용됩니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:265
#, fuzzy
msgid ""
"If instead, translation is desired in *local* coordinates of the matrix "
"(towards where the *basis* is oriented), there is the :ref:`Transform2D."
"translated() <class_Transform2D_method_translated>` method:"
msgstr ""
"대신 행렬의 *로컬* 좌표에 변환을 원하는 경우(*기저가 있는 위치), :ref:"
"\"Transform2D.translated() <class_Transform2D_method_translated>`방법이 있다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:287
msgid ""
"You could also transform the global coordinates to local coordinates "
"manually:"
msgstr "전역 좌표를 수동으로 로컬 좌표로 변환할 수도 있습니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:298
msgid ""
"But even better, there are helper functions for this as you can read in the "
"next sections."
msgstr ""
"더군다나, 다음 섹션에서 읽을 수 있는 것처럼 이것에 대한 도우미 기능도 있다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:301
msgid "Local to global coordinates and vice versa"
msgstr "로컬에서 글로벌 좌표로 또는 그 반대로"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:303
msgid ""
"There are helper methods for converting between local and global coordinates."
msgstr "로컬 좌표와 전역 좌표 사이를 변환하는 도우미 방법이 있습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:305
#, fuzzy
msgid ""
"There are :ref:`Node2D.to_local() <class_Node2D_method_to_local>` and :ref:"
"`Node2D.to_global() <class_Node2D_method_to_global>` for 2D as well as :ref:"
"`Spatial.to_local() <class_Spatial_method_to_local>` and :ref:`Spatial."
"to_global() <class_Spatial_method_to_global>` for 3D."
msgstr ""
"2D를 위한 것에는 :ref:`Node2D.to_local() <class_Node2D_to_local>` and :ref:"
"`Node2D.to_global() <class_Node2D_method_to_global>` , 뿐만아니라 3D를 위한 :"
"ref:`Spatial.to_local() <class_Spatial_to_local>` and :ref:`Spatial."
"to_global() <class_Spatial_method_to_global>` 방법들이 있다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:311
msgid ""
"A matrix can be scaled too. Scaling will multiply the basis vectors by a "
"vector (X vector by x component of the scale, Y vector by y component of the "
"scale). It will leave the origin alone:"
msgstr ""
"행렬도 스케일링할 수 있습니다. 스케일링은 기저에 벡터를 곱할 것입니다(스케일"
"링의 X 성분별 X 벡터, 스케일의 y 성분별 Y 벡터). 원점은 그대로 둡니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:330
msgid ""
"These kind of operations in matrices are accumulative. It means every one "
"starts relative to the previous one. For those who have been living on this "
"planet long enough, a good reference of how transform works is this:"
msgstr ""
"이런 종류의 행렬에서의 연산들은 축적되어 있습니다. 이것은 모든 사람들이 이전 "
"것과 비교하여 시작한다는 것을 의미합니다. 이 지구에서 충분히 오래 살아온 사람"
"들에게, 변환이 어떻게 작용하는지에 대한 좋은 참조는 다음과 같습니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:337
msgid ""
"A matrix is used similarly to a turtle. The turtle most likely had a matrix "
"inside (and you are likely learning this many years *after* discovering "
"Santa is not real)."
msgstr ""
"행렬은 거북이와 비슷하게 사용됩니다. 거북이는 안에 행렬을 가지고 있을 가능성"
"이 높습니다. (그리고 여러분은 산타는 진짜가 아니라는 것을 알게 된 후 수년 동"
"안 이 사실을 배우게 될 것입니다)."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:344
msgid ""
"Transform is the act of switching between coordinate systems. To convert a "
"position (either 2D or 3D) from \"designer\" coordinate system to the OCS, "
"the \"xform\" method is used."
msgstr ""
"변환은 좌표계 사이를 전환하는 행위입니다. 위치(2D 또는 3D)를 \"설계자\" 좌표"
"계에서 OCS로 변환하려면 \"xform\" 방법을 사용합니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:357
msgid "And only for basis (no translation):"
msgstr "그리고 오직 기저를 위한(변환 없음):"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:369
msgid "Inverse transform"
msgstr "역변환"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:371
msgid ""
"To do the opposite operation (what we did up there with the rocket), the "
"\"xform_inv\" method is used:"
msgstr ""
"반대되는 연산을 하기 위해 (우리가 위에서 로켓 가지고 했던 것) \"xform_inv\" "
"방법이 사용됩니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:383
msgid "Only for Basis:"
msgstr "기저에만 해당:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:395
msgid "Orthonormal matrices"
msgstr "직교 행렬"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:397
msgid ""
"However, if the matrix has been scaled (vectors are not unit length), or the "
"basis vectors are not orthogonal (90°), the inverse transform will not work."
msgstr ""
"그러나 만약 행렬의 벡터가 단위 길이가 아니거나 기본 벡터가 직교(90°)가 아닌 "
"경우 역변환이 작동하지 않습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:401
msgid ""
"In other words, inverse transform is only valid in *orthonormal* matrices. "
"For this, these cases an affine inverse must be computed."
msgstr ""
"즉, 역변환은 *직교* 행렬에서만 유효합니다.  이러한 경우, 아핀 역을 계산해야"
"만 한다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:404
msgid ""
"The transform, or inverse transform of an identity matrix will return the "
"position unchanged:"
msgstr "항등 행렬의 변환 또는 역 변환은 위치를 변경하지 않고 반환합니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:419
msgid "Affine inverse"
msgstr "아핀 역"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:421
msgid ""
"The affine inverse is a matrix that does the inverse operation of another "
"matrix, no matter if the matrix has scale or the axis vectors are not "
"orthogonal. The affine inverse is calculated with the affine_inverse() "
"method:"
msgstr ""
"아핀 역은 행렬에 축척이 있거나 축 벡터가 직교하지 않더라도 다른 행렬의 역 연"
"산을 수행하는 행렬입니다. 아핀 역은 the affine_inverse() 방법으로 계산됩니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:441
msgid "If the matrix is orthonormal, then:"
msgstr "만약 행렬이 직교한다면:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:459
msgid "Matrix multiplication"
msgstr "행렬 곱"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:461
msgid ""
"Matrices can be multiplied. Multiplication of two matrices \"chains"
"\" (concatenates) their transforms."
msgstr "행렬은 곱해질 수 있습니다. 두 행렬의 곱은 그들의 변환을 연결합니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:464
msgid ""
"However, as per convention, multiplication takes place in reverse order."
msgstr "그러나 관례에 따라 곱은 역순으로 진행됩니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:467
#: ../../docs/tutorials/io/background_loading.rst:268
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:78
#: ../../docs/tutorials/platform/services_for_ios.rst:203
#: ../../docs/tutorials/platform/services_for_ios.rst:250
#: ../../docs/community/contributing/code_style_guidelines.rst:150
msgid "Example:"
msgstr "예:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:478
msgid "To make it a little clearer, this:"
msgstr "조금 더 깔끔하게 만들면, 이것이다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:491
msgid "Is the same as:"
msgstr "이것은 다음과 같다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:504
msgid "However, this is not the same:"
msgstr "그러나 이것은 같지 않다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:517
msgid "Because in matrix math, A * B is not the same as B * A."
msgstr "왜냐하면 행렬 연산에서, A*B는 B*A와 같지 않다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:520
msgid "Multiplication by inverse"
msgstr "역 곱하기"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:522
msgid "Multiplying a matrix by its inverse, results in identity:"
msgstr "행렬에 그것의 역을 곱하는 것의 결과는 그것의 항등행렬이다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:536
msgid "Multiplication by identity"
msgstr "항등행렬 곱하기"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:538
msgid "Multiplying a matrix by identity, will result in the unchanged matrix:"
msgstr "항등행렬을 행렬에 곱하면 결과는 원래 행렬에서 변화가 없을 것이다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:552
msgid "Matrix tips"
msgstr "행렬 팁"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:554
msgid ""
"When using a transform hierarchy, remember that matrix multiplication is "
"reversed! To obtain the global transform for a hierarchy, do:"
msgstr ""
"변환 층을 사용할 때 행렬 곱셈이 반전된다는 점을 기억하세요! 층에 대한 전역 변"
"환을 얻으려면 다음을 수행합니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:566
msgid "For 3 levels:"
msgstr "3단계:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:577
msgid ""
"To make a matrix relative to the parent, use the affine inverse (or regular "
"inverse for orthonormal matrices)."
msgstr ""
"상위에 상대적인 행렬을 만들려면 항렬 역(또는 직교 행렬의 경우 정규 역)을 사용"
"합니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:591
msgid "Revert it just like the example above:"
msgstr "위의 예와 같이 되돌리시오:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:604
msgid ""
"OK, hopefully this should be enough! Let's complete the tutorial by moving "
"to 3D matrices."
msgstr ""
"좋아요, 이 정도면 됐어요! 튜토리얼을 완료하고 3D 행렬로 이동하겠습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:608
msgid "Matrices & transforms in 3D"
msgstr "3D에서의 행렬과 변환"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:610
msgid ""
"As mentioned before, for 3D, we deal with 3 :ref:`Vector3 <class_Vector3>` "
"vectors for the rotation matrix, and an extra one for the origin."
msgstr ""
"앞서 언급한 바와 같이 3D의 경우 :ref:`Vector3 <class_Vector3>`  회전 행렬용 "
"벡터 3개와 원점용 벡터 1개를 추가로 취급합니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:616
#, fuzzy
msgid ""
"Godot has a special type for a 3x3 matrix, named :ref:`Basis <class_Basis>`. "
"It can be used to represent a 3D rotation and scale. Sub vectors can be "
"accessed as:"
msgstr ""
"고도는 3x3 매트릭스의 특별한 유형을 가지고 있습니다. 이름 :ref:`Basis "
"<class_basis>`. 이것은 3D 회전 및 스케일을 나타내는 데 사용할 수 있습니다. 다"
"음과 같이 하위 벡터에 액세스할 수 있습니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:635
msgid "Or, alternatively as:"
msgstr "또는 대신에:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:652
msgid "The Identity Basis has the following values:"
msgstr "항등 기저는 다음과 같은 값을 가집니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:656
msgid "And can be accessed like this:"
msgstr "다음과 같이 접근할 수 있습니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:680
msgid "Rotation in 3D"
msgstr "3D에서의 회전"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:682
msgid ""
"Rotation in 3D is more complex than in 2D (translation and scale are the "
"same), because rotation is an implicit 2D operation. To rotate in 3D, an "
"*axis*, must be picked. Rotation, then, happens around this axis."
msgstr ""
"3D에서의 회전은 암시적인 2D 연산이므로 3D 회전은 2D보다 더 복잡합니다(변환 "
"및 배율은 동일). 3D로 회전하려면 *축*을 선택해야 합니다. 그런 다음 이 축을 중"
"심으로 회전합니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:686
msgid ""
"The axis for the rotation must be a *normal vector*. As in, a vector that "
"can point to any direction, but length must be one (1.0)."
msgstr ""
"회전 축은 *법선 벡터*이어야 합니다. 임의의 방향을 가리킬 수 있지만 길이는 하"
"나(1.0)여야 합니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:705
msgid ""
"To add the final component to the mix, Godot provides the :ref:`Transform "
"<class_Transform>` type. Transform has two members:"
msgstr ""
"믹스에 최종 구성요소를 추가하기 위해 고도는 :ref:\"Transform "
"<class_Transform> 유형을 제공합니다. Transform에는 두 개의 멤버가 있습니다:"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:708
msgid "*basis* (of type :ref:`Basis <class_Basis>`)"
msgstr "*기저* (of type :ref:`Basis <class_Basis>`)"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:709
msgid "*origin* (of type :ref:`Vector3 <class_Vector3>`)"
msgstr "*원점*(of type :ref:`Vector3 <class_Vector3>`)"

#: ../../docs/tutorials/math/matrices_and_transforms.rst:711
msgid ""
"Any 3D transform can be represented with Transform, and the separation of "
"basis and origin makes it easier to work translation and rotation separately."
msgstr ""
"모든 3D 변환은 Transform(변환)으로 나타낼 수 있으며, 기준 및 원점을 분리하면 "
"변환 및 회전을 개별적으로 더 쉽게 수행할 수 있습니다."

#: ../../docs/tutorials/math/matrices_and_transforms.rst:715
msgid "An example:"
msgstr "예:"

#: ../../docs/tutorials/animation/introduction_2d.rst:4
msgid "Introduction to the 2D animation features"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:9
msgid ""
"The :ref:`class_AnimationPlayer` node allows you to create anything from "
"simple to complex animations."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:12
msgid "In this guide you learn to:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:14
msgid "Work with the Animation Panel"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:15
msgid "Animate any property of any node"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:16
msgid "Create a simple animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:17
msgid "Call functions with the powerful Call Function Tracks"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:19
msgid ""
"In Godot you can animate anything you find in the Inspector. Animations are "
"changes to properties over time. This means you can animate anything visual "
"in nature: sprites, UI elements, particles, the visibility, and color of "
"textures. But not only. You can also control gameplay related values and "
"call any function."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:26
msgid "Create an AnimationPlayer node"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:28
msgid ""
"To use the animation tools we first have to create an :ref:"
"`class_AnimationPlayer` node."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:31
msgid ""
"The AnimationPlayer node type is the data container for your animations. One "
"AnimationPlayer node can hold multiple animations, that can automatically "
"transition to one another."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:38
msgid "The AnimationPlayer node"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:40
msgid ""
"Click on the AnimationPlayer node in the Node tab to open the Animation "
"Panel at the bottom of the viewport."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:46
msgid "The animation panel position"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:48
msgid "It consists of five parts:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:53
msgid "The animation panel"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:55
msgid "Animation controls (i.e. add, load, save, and delete animations)"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:56
msgid "The tracks listing"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:57
msgid "The timeline with keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:58
msgid "The keyframe editor (when enabled)"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:59
msgid ""
"The timeline and track controls, where you can zoom the timeline and edit "
"tracks for example."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:62
msgid ""
"See the `animation panel reference <#animation-panel-reference>`__ below for "
"details."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:66
msgid "Computer animation relies on keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:68
msgid "A keyframe defines the value of a property at a certain point in time."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:70
msgid "White and blue diamond shapes represent keyframes in the timeline."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:75
msgid "Keyframes in Godot"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:77
msgid ""
"The engine interpolates values between keyframes, resulting in a gradual "
"change in values over time."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:83
msgid "Two keyframes are all it takes to obtain a smooth motion"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:85
msgid ""
"The timeline lets you insert keyframes and change their timing. It also "
"defines how long the animation is."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:91
msgid "The timeline in the animation panel"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:93
msgid ""
"Each line of the Animation Panel is an animation track. Normal and Transform "
"tracks reference node properties. Their name or id is a path to the node and "
"the affected property."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:100
msgid "Example of Normal animation tracks"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:104
msgid ""
"If you animate the wrong property, you can edit a track's path anytime. "
"Double click on it and type the new path. Play the animation using the "
"\"Play from beginning\" button |Play from beginning| (Default shortcut: Shift"
"+D) to see the changes instantly."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:110
msgid "Tutorial: Creating a simple animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:115
msgid ""
"For this tutorial, we'll going to create an AnimationPlayer node and a "
"sprite node as an AnimationPlayer node child."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:121
msgid "Our scene setup"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:123
msgid ""
"The sprite holds an image texture and we animate that sprite to move between "
"two points on the screen. As a starting point, move the sprite to a left "
"position on the screen."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:129
msgid ""
"Adding animated nodes as children to the AnimationPlayer node is not "
"required, but it is a nice way of distinguishing animated nodes from non-"
"animated nodes in the Scene Tree."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:133
msgid ""
"Select the AnimationPlayer node and click on \"Add animation\" (|Add "
"Animation|) in the animation tab to add a new animation."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:136
msgid "Enter a name for the animation in the dialog box."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:141
msgid "Add a new animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:144
msgid "Adding a track"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:146
msgid ""
"To add a new track for our sprite, select it and take a look in the toolbar:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:152
msgid "Convenience buttons"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:154
msgid ""
"These switches and buttons allow you to add keyframes for the selected "
"node's location, rotation, and scale respectively."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:157
msgid ""
"Deselect rotation, because we are only interested in the location of our "
"sprite for this tutorial and click on the key button."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:160
msgid ""
"As we don't have a track already set up for the transform/location property, "
"Godot asks, whether it should set it up for us. Click on \"Create\"."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:164
msgid ""
"This creates a new track and our first keyframe at the beginning of the "
"timeline:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:170
msgid "The sprite track"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:172
msgid ""
"The track name consists of a Node Path, followed by a colon, followed by a "
"reference to its property, that we would like to modify."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:175
msgid ""
"In our example, the path is ``AnimationPlayer/Sprite`` and the property is "
"``position``."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:178
msgid ""
"The path always starts at the AnimationPlayer node's parent (so paths always "
"have to include the AnimationPlayer node itself)."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:183
msgid ""
"Don't worry if you change the names of nodes in the Scene Tree, that you "
"already have tracks for. Godot automatically updates the paths in the tracks."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:188
msgid "The second keyframe"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:190
msgid ""
"Now we need to set the destination where our sprite should be headed and how "
"much time it takes to get there."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:193
msgid ""
"Let's say, we want it to take 2 seconds to go to the other point. By default "
"the animation is set to last only 1 second, so change this in the timeline "
"controls in animation panel's lower panel to 2."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:200
msgid "Animation length"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:202
msgid ""
"Click on the timeline header near the 2 second mark and move the sprite to "
"the target destination on the right side."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:205
msgid ""
"Again, click the key button in the toolbar. This creates our second keyframe."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:209
msgid "Run the animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:211
msgid "Click on the \"Play from beginning\" (|Play from beginning|) button."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:213
msgid "Yay! Our animation runs:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:218
msgid "The animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:221
msgid "Back and forth"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:223
msgid ""
"As you can see, the \"loop\" button is enabled by default and our animation "
"loops. Godot has an additional feature here. Like said before, Godot always "
"calculates the frames between two keyframes. In a loop, the first keyframe "
"is also the last keyframe, if no keyframe is specified at the end."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:232
msgid "Animation loop"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:234
msgid ""
"If you set the animation length to 4 seconds now, the animation moves back "
"and forth. You can change this behaviour if you change the track's loop "
"mode. This is covered in the next chapter."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:239
#: ../../docs/tutorials/animation/introduction_2d.rst:247
msgid "Track settings"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:241
msgid ""
"Each track has a settings panel at the end, where you can set the update "
"rate, the track interpolation, and the loop mode."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:249
msgid ""
"The update rate of a track tells Godot when to update the property values. "
"This can be:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:252
msgid "Continuous: Update the property on each frame"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:253
msgid "Discrete: Only update the property on keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:254
msgid "Trigger: Only update the property on keyframes or triggers"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:259
msgid "Track rate"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:261
msgid ""
"In normal animations, you usually use \"Continuous\". The other types are "
"used to script complex animations."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:264
msgid ""
"The interpolation tells Godot how to calculate the frame values between the "
"keyframes. These interpolation modes are supported:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:267
msgid "Nearest: Set the nearest keyframe value"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:268
msgid ""
"Linear: Set the value based on a linear function calculation between the two "
"keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:270
msgid ""
"Cubic: Set the value based on a cubic function calculation between the two "
"keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:276
msgid "Track interpolation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:278
msgid ""
"Cubic interpolation leads to a more natural movement, where the animation is "
"slower at a keyframe and faster between keyframes. This is usually used for "
"character animation. Linear interpolation creates more of a robotic movement."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:283
msgid ""
"Godot supports two loop modes, which affect the animation if it's set to "
"loop:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:289
msgid "Loop modes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:291
msgid ""
"Clamp loop interpolation: When this is selected, the animation stops after "
"the last keyframe for this track. When the first keyframe is reached again, "
"the animation will reset to its values."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:294
msgid ""
"Wrap loop interpolation: When this is selected, Godot calculates the "
"animation after the last keyframe to reach the values of the first keyframe "
"again."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:299
#: ../../docs/tutorials/animation/introduction_2d.rst:312
msgid "Keyframes for other properties"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:301
msgid ""
"Godot doesn't restrict you to only edit transform properties. Every property "
"can be used as a track where you can set keyframes."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:304
msgid ""
"If you select your sprite while the animation panel is visible, you get a "
"small keyframe button for all of the sprite's properties. Click on this "
"button and Godot automatically adds a track and keyframe to the current "
"animation."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:315
msgid "Edit keyframes"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:317
msgid ""
"For advanced use and to edit keyframe in detail, enable the keyframe editor "
"(|Keyframe editor|)."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:320
msgid ""
"This adds an editor pane on the right side of the track settings. When you "
"select a keyframe, you can directly edit its values in this editor:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:326
msgid "Keyframe editor editing a key"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:328
msgid "Additionally, you can also edit the transition value for this keyframe:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:333
msgid "Keyframe editor editing a transition"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:335
msgid ""
"This tells Godot, how to change the property values when it reaches this "
"keyframe."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:338
msgid ""
"You usually tweak your animations this way, when the movement doesn't \"look "
"right\"."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:342
msgid "Advanced: Call Func tracks"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:344
msgid ""
"Godot's animation engine doesn't stop here. If you're already comfortable "
"with Godot's scripting language :ref:`doc_gdscript` and :doc:`/classes/"
"index` you know that each node type is a class and has a bunch of callable "
"functions."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:350
msgid ""
"For example, the :ref:`class_AudioStreamPlayer` node type has a function to "
"play an audio stream."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:353
msgid ""
"Wouldn't it be great to play a stream at a specific keyframe in an "
"animation? This is where \"Call Func Tracks\" come in handy. These tracks "
"reference a node again, this time without a reference to a property. "
"Instead, a keyframe holds the name and arguments of a function, that Godot "
"should call when it reaches this keyframe."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:359
msgid ""
"To let Godot play a sample when it reaches a keyframe, follow this list:"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:361
msgid ""
"Add a :ref:`class_AudioStreamPlayer` to the Scene Tree and setup a stream "
"using an audio file you put in your project."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:367
msgid "Add AudioStreamPlayer"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:369
msgid ""
"Click on \"Add track\" (|Add track|) on the animation panel's track controls."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:372
msgid "Select \"Add Call Func Track\" from the list of possible track types."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:377
msgid "Add Call Func Track"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:379
msgid ""
"Select the :ref:`class_AudioStreamPlayer` node in the selection window. "
"Godot adds the track with the reference to the node."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:385
msgid "Select AudioStreamPlayer"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:387
msgid ""
"Select the timeline position, where Godot should play the sample by clicking "
"on the timeline header."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:390
msgid "Enable the Keyframe Editor by clicking on |Keyframe editor|."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:392
msgid ""
"Click on \"Add keyframe\" near the settings of our func track (|Add "
"keyframe|) and select the keyframe."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:398
msgid "Add a keyframe to the call func track"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:400
msgid "Enter \"play\" as the function name."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:405
msgid "Keyframe settings of a call func track"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:407
msgid ""
"When Godot reaches the keyframe, Godot calls the :ref:"
"`class_AnimationPlayer` node's \"play\" function and the stream plays."
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:412
#: ../../docs/development/cpp/object_class.rst:233
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:18
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:39
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:213
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:247
#: ../../docs/development/cpp/custom_godot_servers.rst:19
#: ../../docs/development/cpp/custom_godot_servers.rst:316
msgid "References"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:415
msgid "Animation panel reference"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:420
msgid "The animation panel reference"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:422
msgid "The animation panel has the following parts (from left to right):"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:425
#: ../../docs/tutorials/animation/introduction_2d.rst:430
msgid "Animation controls"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:432
msgid "Play animation backwards from current position"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:433
msgid "Play animation backwards from the animation end"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:434
msgid "Stop animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:435
msgid "Play animation forwards from the animation beginning"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:436
msgid "Play animation forwards from the current position"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:437
msgid "Direct time selection"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:440
#: ../../docs/tutorials/animation/introduction_2d.rst:445
msgid "Animation management"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:447
msgid "Create a new animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:448
msgid "Load animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:449
msgid "Save animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:450
msgid "Duplicate animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:451
msgid "Rename animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:452
msgid "Delete animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:453
msgid "Animation selection"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:454
msgid "Automatically play selected animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:455
msgid "Edit animation blend times"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:456
msgid "Extended animation Tools"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:459
msgid "Timeline zoom level control"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:464
msgid "Timeline zoom level contro"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:467
#: ../../docs/tutorials/animation/introduction_2d.rst:472
msgid "Timeline control"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:474
msgid "Length of animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:475
msgid "Steps of animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:476
msgid "Toggle loop animation"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:479
#: ../../docs/tutorials/animation/introduction_2d.rst:484
msgid "Track control"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:486
msgid "Add track"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:487
msgid "Move track up"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:488
msgid "Move track down"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:489
msgid "Delete track"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:490
msgid "Extended track tools"
msgstr ""

#: ../../docs/tutorials/animation/introduction_2d.rst:491
msgid "Toggle keyframe editor"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:4
msgid "Cutout animation"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:7
#: ../../docs/tutorials/inputs/inputevent.rst:7
msgid "What is it?"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:9
msgid ""
"Cut-out is a technique of animating in 2D where pieces of paper (or similar "
"material) are cut in special shapes and laid one over the other. The papers "
"are animated and photographed, frame by frame using a stop motion technique "
"(more info `here <https://en.wikipedia.org/wiki/Cutout_animation>`__)."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:15
msgid ""
"With the advent of the digital age, this technique became possible using "
"computers, which resulted in an increased amount of animation TV shows using "
"digital Cut-out. Notable examples are `South Park <https://en.wikipedia.org/"
"wiki/South_Park>`__ or `Jake and the Never Land Pirates <https://en."
"wikipedia.org/wiki/Jake_and_the_Never_Land_Pirates>`__ ."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:23
msgid ""
"In video games, this technique has also become popular. Examples of this are "
"`Paper Mario <https://en.wikipedia.org/wiki/Super_Paper_Mario>`__ or `Rayman "
"Origins <https://en.wikipedia.org/wiki/Rayman_Origins>`__ ."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:29
msgid "Cutout in Godot"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:31
msgid ""
"Godot provides a few tools for working with these kind of assets, but its "
"overall design makes it ideal for the workflow. The reason is that, unlike "
"other tools meant for this, Godot has the following advantages:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:35
msgid ""
"**The animation system is fully integrated with the engine**: This means, "
"animations can control much more than just motion of objects, such as "
"textures, sprite sizes, pivots, opacity, color modulation, etc. Everything "
"can be animated and blended."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:39
msgid ""
"**Mix with Traditional**: AnimatedSprite allows traditional animation to be "
"mixed, useful for complex objects, such as shape of hands and foot, changing "
"facial expression, etc."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:42
msgid ""
"**Custom Shaped Elements**: Can be created with :ref:`Polygon2D "
"<class_Polygon2D>` allowing the mixing of UV animation, deformations, etc."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:45
msgid ""
"**Particle Systems**: Can also be mixed with the traditional animation "
"hierarchy, useful for magic effects, jetpacks, etc."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:47
msgid ""
"**Custom Colliders**: Set colliders and influence areas in different parts "
"of the skeletons, great for bosses, fighting games, etc."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:49
msgid ""
"**Animation Tree**: Allows complex combinations and blendings of several "
"animations, the same way it works in 3D."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:52
#: ../../docs/tutorials/shading/shader_materials.rst:24
msgid "And much more!"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:55
msgid "Making of GBot"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:57
msgid ""
"For this tutorial, we will use as demo content the pieces of the `GBot "
"<https://www.youtube.com/watch?"
"v=S13FrWuBMx4&list=UUckpus81gNin1aV8WSffRKw>`__ character, created by "
"Andreas Esau."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:63
msgid ""
"Get your assets: :download:`gbot_resources.zip <files/gbot_resources.zip>`."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:66
msgid "Setting up the rig"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:68
msgid "Create an empty Node2D as root of the scene, we will work under it:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:72
msgid ""
"OK, the first node of the model that we will create will be the hip. "
"Generally, both in 2D and 3D, the hip is the root of the skeleton. This "
"makes it easier to animate:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:78
msgid ""
"Next will be the torso. The torso needs to be a child of the hip, so create "
"a child sprite and load the torso, later accommodate it properly:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:83
msgid ""
"This looks good. Let's see if our hierarchy works as a skeleton by rotating "
"the torso. We can do this be pressing ``E`` to enter rotate mode, and "
"dragging with the left mouse button. To exit rotate mode hit ``ESC``."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:89
msgid ""
"Ouch, that doesn't look good! The rotation pivot is wrong, this means it "
"needs to be adjusted."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:92
msgid ""
"This small little cross in the middle of the :ref:`Sprite <class_Sprite>` is "
"the rotation pivot:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:99
msgid "Adjusting the pivot"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:101
msgid ""
"The pivot can be adjusted by changing the *offset* property in the Sprite:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:106
msgid ""
"However, there is a way to do it more *visually*. While hovering over the "
"desired pivot point, simply press the \"v\" key to move the pivot there for "
"the selected Sprite. Alternately, there is a tool in the tool bar that has a "
"similar function."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:113
msgid ""
"Now it looks good! Let's continue adding body pieces, starting by the right "
"arm. Make sure to put the sprites in hierarchy, so their rotations and "
"translations are relative to the parent:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:119
msgid ""
"This seems easy, so continue with the left arm. The rest should be simple! "
"Or maybe not:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:124
msgid ""
"Right. In 2D, parent nodes appear below children nodes. Well, this sucks. "
"But how can this problem be solved? We want the left arm to appear behind "
"the hip and the torso. For this, we can move the nodes behind the hip (note "
"that you can bypass this by setting the Node2D Z property, but then you "
"won't learn about all this!):"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:132
msgid ""
"But then, we lose the hierarchy layout, which allows to control the skeleton "
"like.. a skeleton. Is there any hope?.. Of Course!"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:136
msgid "RemoteTransform2D node"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:138
msgid ""
"Godot provides a special node, :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>`. This node will transform nodes that are sitting "
"somewhere else in the hierarchy, by applying the transform to the remote "
"nodes."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:142
msgid "This enables to have a visibility order independent from the hierarchy."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:145
msgid ""
"Simply create two more nodes as children from torso, remote_arm_l and "
"remote_hand_l and link them to the actual sprites:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:150
msgid ""
"Moving the remote transform nodes will move the sprites, allowing you to "
"easily animate and pose the character:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:156
msgid "Completing the skeleton"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:158
msgid ""
"Complete the skeleton by following the same steps for the rest of the parts. "
"The resulting scene should look similar to this:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:163
msgid ""
"The resulting rig will be easy to animate. By selecting the nodes and "
"rotating them you can animate forward kinematics (FK) efficiently."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:166
msgid ""
"For simple objects and rigs this is fine, however the following problems are "
"common:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:169
msgid ""
"Selecting sprites can become difficult for complex rigs, and the scene tree "
"ends being used due to the difficulty of clicking over the proper sprite."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:172
msgid "Inverse Kinematics is often desired for extremities."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:174
msgid "To solve these problems, Godot supports a simple method of skeletons."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:177
msgid "Skeletons"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:179
msgid ""
"Godot doesn't actually support *true* Skeletons, but it does feature a "
"helper to create \"bones\" between nodes. This is enough for most cases, but "
"the way it works is not completely obvious."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:185
msgid ""
"As an example, let's turn the right arm into a skeleton. To create "
"skeletons, a chain of nodes must be selected from top to bottom:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:190
msgid "Then, click on the Skeleton menu and select ``Make Bones``."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:194
msgid ""
"This will add bones covering the arm, but the result is not quite what is "
"expected."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:199
msgid ""
"It looks like the bones are shifted up in the hierarchy. The hand connects "
"to the arm, and the arm to the body. So the question is:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:202
msgid "Why does the hand lack a bone?"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:203
msgid "Why does the arm connect to the body?"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:205
msgid ""
"This might seem strange at first, but will make sense later on. In "
"traditional skeleton systems, bones have a position, an orientation and a "
"length. In Godot, bones are mostly helpers so they connect the current node "
"with the parent. Because of this, **toggling a node as a bone will just "
"connect it to the parent**."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:211
msgid ""
"So, with this knowledge. Let's do the same again so we have an actual, "
"useful skeleton."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:214
msgid ""
"The first step is creating an endpoint node. Any kind of node will do, but :"
"ref:`Position2D <class_Position2D>` is preferred because it's visible in the "
"editor. The endpoint node will ensure that the last bone has orientation."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:221
msgid ""
"Now select the whole chain, from the endpoint to the arm and create bones:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:226
msgid ""
"The result resembles a skeleton a lot more, and now the arm and forearm can "
"be selected and animated."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:229
msgid ""
"Finally, create endpoints in all meaningful extremities and connect the "
"whole skeleton with bones up to the hip."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:232
msgid ""
"You may notice when connecting the hip and torso, that an extra bone is "
"created. To fix this, select the root and hip node, open the Skeleton menu, "
"click ``clear bones``."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:238
msgid "After fixing that your final skeleton should look something like this:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:242
msgid ""
"Finally! the whole skeleton is rigged! On close look, it is noticeable that "
"there is a second set of endpoints in the hands. This will make sense soon."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:246
msgid ""
"Now that a whole skeleton is rigged, the next step is setting up the IK "
"chains. IK chains allow for more natural control of extremities."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:250
msgid "IK chains"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:252
msgid ""
"IK chains are a powerful animation tool. Imagine you want to pose a "
"character's foot in a specific position on the ground. Without IK chains, "
"each motion of the foot would require rotating and positioning several other "
"bones. This would be quite complex and lead to imprecise results."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:254
msgid "What if we could move the foot and let the rest of the leg self-adjust?"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:256
msgid "This type of posing is called IK (Inverse Kinematic)."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:258
msgid ""
"To create an IK chain, simply select a chain of bones from endpoint to the "
"base for the chain. For example, to create an IK chain for the right leg, "
"select the following:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:264
msgid "Then enable this chain for IK. Go to Edit > Make IK Chain."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:268
msgid "As a result, the base of the chain will turn *Yellow*."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:272
msgid ""
"Once the IK chain is set-up, simply grab any of the bones in the extremity, "
"any child or grand-child of the base of the chain and try to grab it and "
"move it. Result will be pleasant, satisfaction warranted!"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:281
msgid ""
"The following section will be a collection of tips for creating animation "
"for your rigs. If unsure about how the animation system in Godot works, "
"refresh it by checking again the :ref:`doc_animations`."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:286
msgid "2D animation"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:288
msgid ""
"When doing animation in 2D, a helper will be present in the top menu. This "
"helper only appears when the animation editor window is opened:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:293
msgid ""
"The key button will insert location/rotation/scale keyframes to the selected "
"objects or bones. This depends on the mask enabled. Green items will insert "
"keys while red ones will not, so modify the key insertion mask to your "
"preference."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:299
msgid "Rest pose"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:301
msgid ""
"These kind of rigs do not have a \"rest\" pose, so it's recommended to "
"create a reference rest pose in one of the animations."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:304
msgid "Simply do the following steps:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:306
msgid "Make sure the rig is in \"rest\" (not doing any specific pose)."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:308
msgid "Create a new animation, rename it to \"rest\"."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:310
msgid "Select all nodes (box selection should work fine)."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:312
msgid "Select \"loc\" and \"rot\" on the top menu."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:314
msgid ""
"Push the key button. Keys will be inserted for everything, creating a "
"default pose."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:322
msgid ""
"Animating these models means only modifying the rotation of the nodes. "
"Location and scale are rarely used, with the only exception of moving the "
"entire rig from the hip (which is the root node)."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:326
msgid ""
"As a result, when inserting keys, only the \"rot\" button needs to be "
"pressed most of the time:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:331
msgid ""
"This will avoid the creation of extra animation tracks for the position that "
"will remain unused."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:335
msgid "Keyframing IK"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:337
msgid ""
"When editing IK chains, it is not necessary to select the whole chain to add "
"keyframes. Selecting the endpoint of the chain and inserting a keyframe will "
"automatically insert keyframes until the chain base too. This makes the task "
"of animating extremities much simpler."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:343
msgid "Moving sprites above and behind others"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:345
msgid ""
"RemoteTransform2D works in most cases, but sometimes it is necessary to have "
"a node above and below others during an animation. To aid on this the "
"\"Behind Parent\" property exists on any Node2D:"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:352
msgid "Batch setting transition curves"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:354
msgid ""
"When creating complex animations and inserting many keyframes, editing the "
"individual keyframe curves for each can become an endless task. For this, "
"the Animation Editor has a small menu where changing animation curves is "
"easy. First select the appropriate keys. Next click on the pencil icon in "
"the bottom right of the animation panel, this will open the transition "
"editor. Now click on one of the curve options most appropriate for your "
"animation."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:365
msgid "2D Skeletal deform"
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:367
msgid ""
"Starting with Godot 3.1, 2D skeletal deform is supported, which can be used "
"to enhance this workflow and add more flexibility (single pieces can deform "
"more organically instead of having to use many separate ones)."
msgstr ""

#: ../../docs/tutorials/animation/cutout_animation.rst:370
msgid ""
"This process is described in a :ref:`separate tutorial <doc_2d_skeletons>`."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:4
#, fuzzy
msgid "2D skeletons"
msgstr "스켈레톤"

#: ../../docs/tutorials/animation/2d_skeletons.rst:9
msgid ""
"When working with 3D, skeletal deforms are common for characters and "
"creatures and most 3D modelling applications support it. For 2D, as this "
"function is not used as often, it's difficult to find mainstream software "
"aimed for this."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:13
msgid ""
"One option is to create animations in third-party software such as Spine or "
"Dragonbones. From Godot 3.1 onwards, though, this functionality is supported "
"built-in."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:16
msgid ""
"Why would you want to do skeletal animations directly in Godot? The answer "
"is that there are many advantages to it:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:18
msgid ""
"Better integration with the engine, so less hassle importing and editing "
"from an external tool."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:19
msgid ""
"Ability to control particle systems, shaders, sounds, call scripts, colors, "
"transparency, etc. in animations."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:20
msgid ""
"The built-in skeletal system in Godot is very efficient and designed for "
"performance."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:22
msgid "The following tutorial will, then, explain 2D skeletal deformations."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:27
msgid ""
"Before starting, it is advised to go through the :ref:`doc_cutout_animation` "
"tutorial to gain a general understanding of animating within Godot."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:30
msgid ""
"For this tutorial, we will be using a single image to construct our "
"character. Download it from :download:`gBot_pieces.png <img/gBot_pieces."
"png>` or save the image below."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:35
msgid ""
"It is also advised to download the final character image :download:"
"`gBot_complete.png <img/gBot_complete.png>` to have a good reference for "
"putting the different pieces together."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:41
#, fuzzy
msgid "Creating the polygons"
msgstr "애니메이션 만들기"

#: ../../docs/tutorials/animation/2d_skeletons.rst:43
msgid ""
"Create a new scene for your model (if it's going to be an animated "
"character, you may want to use a ``KinematicBody2D``). For ease of use, an "
"empty 2D node is created as a root for the polygons."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:46
msgid ""
"Begin with a ``Polygon2D`` node. There is no need to place it anywhere in "
"the scene for now, so simply create it like this:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:50
msgid ""
"Select it and assign the texture with the character pieces you have "
"downloaded before:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:54
msgid ""
"Drawing a polygon directly is not advised. Instead, open the \"UV\" dialog "
"for the polygon:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:58
msgid ""
"Head over to the *Points* mode, select the pencil and draw a polygon around "
"the desired piece:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:62
msgid ""
"Duplicate the polygon node, rename it properly, enter the \"UV\" dialog "
"again and replace the old polygon with another one in the new desired piece."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:66
msgid "Keep doing this until all pieces have been mapped."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:70
msgid ""
"You will notice that pieces for nodes appear in the same layout as they do "
"in the original texture. This is because (by default) when you draw a "
"polygon, the UV and points are the same."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:73
msgid ""
"Rearrange the pieces and build the character. This should be pretty quick. "
"There is no need to change pivots, so don't bother making sure rotation "
"pivots for each piece are right; you can leave them be for now."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:78
msgid ""
"Ah, the visual order of the pieces is not correct yet, as some are covering "
"wrong pieces. Rearrange the order of the nodes to fix this:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:82
msgid ""
"And there you go! It was definitely much easier than in the cutout tutorial."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:85
#, fuzzy
msgid "Creating the skeleton"
msgstr "스켈레톤(Skeleton) 정리하기"

#: ../../docs/tutorials/animation/2d_skeletons.rst:87
msgid ""
"Create a ``Skeleton2D`` node as a child of the root node. This will be the "
"base of our skeleton:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:91
msgid ""
"Create a ``Bone2D`` node as a child of the skeleton. Put it on the hip "
"(usually skeletons start here). The bone will be pointing to the right, but "
"you can ignore this for now."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:96
msgid "Keep creating bones in hierarchy and naming them accordingly."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:100
msgid ""
"At the end of this chain, there will be a *jaw* node. It is, again, very "
"short and pointing to the right. This is normal for bones without children. "
"The length of *tip* bones can be changed with a property in the inspector:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:105
msgid ""
"In this case, we don't need to rotate the bone (coincidentially the jaw "
"points right in the sprite), but in case you need to, feel free to do it. "
"Again, this is only really needed for tip bones as nodes with children don't "
"usually need a length or a specific rotation."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:108
msgid "Keep going and build the whole skeleton:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:112
msgid ""
"You will notice that all bones raise an annoying warning about a missing "
"rest pose. This means that it's time to set one. Go to the *skeleton* node "
"and create a rest pose. This pose is the default one, you can come back to "
"it anytime you want (which is very handy for animating):"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:117
msgid ""
"The warnings will go away. If you modify the skeleton (add/remove bones) you "
"will need to set the rest pose again."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:120
#, fuzzy
msgid "Deforming the polygons"
msgstr "행성 색칠하기"

#: ../../docs/tutorials/animation/2d_skeletons.rst:122
msgid ""
"Select the previously created polygons and assign the skeleton node to their "
"``Skeleton`` property. This will ensure that they can eventually by deformed "
"by it."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:126
msgid "Click the property highlighted above and select the skeleton node:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:130
msgid ""
"Again, open the UV editor for the polygon and go to the *Bones* section."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:134
msgid ""
"You will not be able to paint weights yet. For this you need to synchronize "
"the list of bones from the skeleton with the polygon. This step is done only "
"once and manually (unless you modify the skeleton by adding/removing/"
"renaming bones). It ensures that your rigging information is kept in the "
"polygon, even if a skeleton node is accidentally lost or the skeleton "
"modified. Push the \"Sync Bones to Polygon\" button to sync the list."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:140
msgid ""
"The list of bones will automatically appear. By default, your polygon has no "
"weight assigned to any of them. Select the bones you want to assign weight "
"to and paint them:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:145
msgid ""
"Points in white have a full weight assigned, while points in black are not "
"influenced by the bone. If the same point is painted white for multiple "
"bones, the influence will be distributed amongst them (so usually there is "
"not that much need to use shades in-between unless you want to polish the "
"bending effect)."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:151
msgid ""
"After painting the weights, animating the bones (NOT the polygons!) will "
"have the desired effect of modifying and bending the polygons accordingly. "
"As you only need to animate bones in this approach, work becomes much easier!"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:154
msgid ""
"But it's not all roses. Trying to animate bones that bend the polygon will "
"often yield unexpected results:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:158
msgid ""
"This happens because Godot generates internal triangles that connect the "
"points when drawing the polygon. They don't always bend the way you would "
"expect. To solve this, you need to set hints in the geometry to clarify how "
"you expect it to deform."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:162
msgid "Internal vertices"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:164
msgid ""
"Open the UV menu for each bone again and go to the *Points* section. Add "
"some internal vertices in the regions where you expect the geometry to bend:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:168
msgid ""
"Now, go to the *Polygon* section and redraw your own polygons with more "
"detail. Imagine that, as your polygons bend, you need to make sure they "
"deform the least possible, so experiment a bit to find the right setup."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:173
msgid ""
"Once you start drawing, the original polygon will disappear and you will be "
"free to create your own:"
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:177
msgid ""
"This amount of detail is usually fine, though you may want to have more fine-"
"grained control over where triangles go. Experiment by yourself until you "
"get the results you like."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:179
msgid ""
"**Note:** Don't forget that your newly added internal vertices also need "
"weight painting! Go to the *Bones* section again to assign them to the right "
"bones."
msgstr ""

#: ../../docs/tutorials/animation/2d_skeletons.rst:181
msgid "Once you are all set, you will get much better results:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:4
#, fuzzy
msgid "AnimationTree"
msgstr "애니메이션"

#: ../../docs/tutorials/animation/animation_tree.rst:9
msgid ""
"With :ref:`AnimationPlayer <class_AnimationPlayer>`, Godot has one of the "
"most flexible animation systems that you can find in any game engine. The "
"ability to animate pretty much any property in any node or resource, as well "
"as having dedicated transform, bezier, function calling, audio and sub-"
"animation tracks, is pretty much unique."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:13
msgid ""
"However, the support for blending those animations via ``AnimationPlayer`` "
"is relatively limited, as only a fixed cross-fade transition time can be set."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:15
msgid ""
":ref:`AnimationTree <class_AnimationTree>` is a new node introduced in Godot "
"3.1 to deal with advanced transitions. It supersedes the ancient "
"``AnimationTreePlayer``, while adding a huge amount of features and "
"flexibility."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:19
#, fuzzy
msgid "Creating an AnimationTree"
msgstr "애니메이션 만들기"

#: ../../docs/tutorials/animation/animation_tree.rst:21
msgid ""
"Before starting, it must be made clear that an ``AnimationTree`` node does "
"not contain its own animations. Instead, it uses animations contained in an "
"``AnimationPlayer`` node. This way, you can edit your animations (or import "
"them from a 3D scene) as usual and then use this extra node to control the "
"playback."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:25
msgid ""
"The most common way to use ``AnimationTree`` is in a 3D scene. When "
"importing your scenes from a 3D exchange format, they will usually come with "
"animations built-in (either multiple ones or split from a large one on "
"import). At the end, the imported Godot scene will contain the animations in "
"a ``AnimationPlayer`` node."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:29
msgid ""
"As you rarely use imported scenes directly in Godot (they are either "
"instantiated or inherited from), you can place the ``AnimationTree`` node in "
"your new scene which contains the imported one. Afterwards, point the "
"``AnimationTree`` node to the ``AnimationPlayer`` that was created in the "
"imported scene."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:32
msgid ""
"This is how it's done in the `Third Person Shooter demo <https://github.com/"
"godotengine/tps-demo>`_, for reference:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:36
msgid ""
"A new scene was created for the player with a ``KinematicBody`` as root. "
"Inside this scene, the original ``.dae`` (Collada) file was instantiated and "
"an ``AnimationTree`` node was created."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:40
#, fuzzy
msgid "Creating a tree"
msgstr "프로젝트 생성하기"

#: ../../docs/tutorials/animation/animation_tree.rst:42
msgid ""
"There are three main types of nodes that can be used in ``AnimationTree``:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:44
msgid ""
"Animation nodes, which reference an animation from the linked "
"``AnimationTree``."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:45
msgid "Animation Root nodes, which are used to blend sub-nodes."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:46
msgid ""
"Animation Blend nodes, which are used within ``AnimationNodeBlendTree`` as "
"single-graph blending via multiple input ports."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:48
msgid "To set a root node in ``AnimationTree``, a few types are available:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:52
msgid ""
"``AnimationNodeAnimation``: Selects an animation from the list and plays it. "
"This is the simplest root node, and generally not used directly as root."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:53
msgid ""
"``AnimationNodeBlendTree``: Contains many *blend* type nodes, such as mix, "
"blend2, blend3, one shot, etc. This is one of the most commonly used roots."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:54
msgid ""
"``AnimationNodeStateMachine``: Contains multiple root nodes as children in a "
"graph. Each node is used as a *state*, and provides multiple functions to "
"alternate between states."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:55
msgid ""
"``AnimationNodeBlendSpace2D``: Allows placing root nodes in a 2D blend "
"space. Control the blend position in 2D to mix between multiple animations."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:56
msgid "``AnimationNodeBlendSpace1D``: Simplified version of the above (1D)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:59
#, fuzzy
msgid "Blend tree"
msgstr "씬 트리"

#: ../../docs/tutorials/animation/animation_tree.rst:61
msgid ""
"An ``AnimationNodeBlendTree`` can contain both root and regular nodes used "
"for blending. Nodes are added to the graph from a menu:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:65
msgid ""
"All blend trees contain an ``Output`` node by default, and something has to "
"be connected to it in order for animations to play."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:67
msgid ""
"The easiest way to test this functionality is to connect an ``Animation`` "
"node to it directly:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:71
msgid ""
"This will simply play back the animation. Make sure that the "
"``AnimationTree`` is active for something to actually happen."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:73
msgid "Following is a short description of available nodes:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:76
msgid "Blend2 / Blend3"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:78
msgid ""
"These nodes will blend between two or three inputs by a user-specified blend "
"value:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:82
msgid "For more complex blending, it is advised to use blend spaces instead."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:84
msgid ""
"Blending can also use filters, i.e. you can control individually which "
"tracks go through the blend function. This is very useful for layering "
"animations on top of each other."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:90
msgid "OneShot"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:92
msgid ""
"This node will execute a sub-animation and return once it finishes. Blend "
"times for fading in and out can be customized, as well as filters."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:97
msgid "Seek"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:99
msgid ""
"This node can be used to cause a seek command to happen to any sub-children "
"of the graph. After setting the time, this value returns to -1."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:102
#, fuzzy
msgid "TimeScale"
msgstr "타이머(Timer) 예제"

#: ../../docs/tutorials/animation/animation_tree.rst:104
msgid ""
"Allows scaling the speed of the animation (or reverse it) in any children "
"nodes. Setting it to 0 will pause the animation."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:107
#, fuzzy
msgid "Transition"
msgstr "변환"

#: ../../docs/tutorials/animation/animation_tree.rst:109
msgid ""
"Very simple state machine (when you don't want to cope with a "
"``StateMachine`` node). Animations can be connected to the outputs and "
"transition times can be specified."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:112
msgid "BlendSpace2D"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:114
msgid ""
"``BlendSpace2D`` is a node to do advanced blending in two dimensions. Points "
"are added to a two dimensional space and then a position can be controlled "
"to determine blending:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:119
msgid ""
"The ranges in X and Y can be controlled (and labeled for convenience). By "
"default, points can be placed anywhere (just right-click on the coordinate "
"system or use the *add point* button) and triangles will be generated "
"automatically using Delaunay."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:124
msgid ""
"It is also possible to draw the triangles manually by disabling the *auto "
"triangle* option, though this is rarely necessary:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:128
msgid ""
"Finally, it is possible to change the blend mode. By default, blending "
"happens by interpolating points inside the closest triangle. When dealing "
"with 2D animations (frame by frame), you may want to switch to *Discrete* "
"mode. Alternatively, if you want to keep the current play position when "
"switching between discrete animations, there is a *Carry* mode. This mode "
"can be changed in the *Blend* menu:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:136
msgid "BlendSpace1D"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:138
msgid ""
"This is similar to 2D blend spaces, but in one dimension (so triangles are "
"not needed)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:141
msgid "StateMachine"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:143
msgid ""
"This node is a relatively simple state machine. Root nodes can be created "
"and connected via lines. States are connected via *Transitions*, which are "
"connections with special properties. Transitions are uni-directional, but "
"two can be used to connect in both ways."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:148
#, fuzzy
msgid "There are many types of transitions:"
msgstr "전환(transition) 유형"

#: ../../docs/tutorials/animation/animation_tree.rst:152
msgid ""
"*Immeditate*: Will switch to the next state immediately. The current state "
"will end and blend into the beginning of the new one."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:153
msgid ""
"*Sync*: Will switch to the next state immediately, but will seek the new "
"state to the playback position of the old state."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:154
msgid ""
"*At End*: Will wait for the current state playback to end, then switch to "
"the beginning of the next state animation."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:156
msgid ""
"Transitions also have a few properties. Click any transition and it will be "
"displayed in the inspector dock:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:160
msgid ""
"*Switch Mode* is the transition type (see above), it can be modified after "
"creation here."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:161
msgid ""
"*Auto Advance* will turn on the transition automatically when this state is "
"reached. This works best with the *At End* switch mode."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:162
msgid ""
"*Advance Condition* will turn on auto advance when this condition is set. "
"This is a custom text field that can be filled with a variable name. The "
"variable can be modified from code (more on this later)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:164
msgid "*Xfade Time* is the time to cross-fade between this state and the next."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:165
msgid ""
"*Priority* is used together with the ``travel()`` function from code (more "
"on this later). When travelling from a state to another, give more priority "
"to this node."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:166
msgid ""
"*Disabled* allows to disable this transition (it will not be used during "
"travel or auto advance)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:170
#, fuzzy
msgid "Root motion"
msgstr "옵션들 가져오기"

#: ../../docs/tutorials/animation/animation_tree.rst:172
msgid ""
"When working with 3D animations, a popular technique is for animators to use "
"the root skeleton bone to give motion to the rest of the skeleton. This "
"allows animating characters in a way where steps actually match the floor "
"below. It also allows precise interaction with objects during cinematics."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:175
msgid ""
"When playing back the animation in Godot, it is possible to select this bone "
"as the *root motion track*. Doing so will cancel the bone transformation "
"visually (the animation will stay in place)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:180
msgid ""
"Afterwards, the actual motion can be retrieved via the :ref:`AnimationTree "
"<class_AnimationTree>` API as a transform:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:191
msgid ""
"This can be fed to functions such as :ref:`KinematicBody.move_and_slide "
"<class_KinematicBody_method_move_and_slide>` to control the character "
"movement."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:193
msgid ""
"There is also a tool node, ``RootMotionView``, that can be placed in a scene "
"and will act as a custom floor for your character and animations (this node "
"is normally disabled during the game)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:200
msgid "Controlling from code"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:202
msgid ""
"After building the tree and previewing it, the only question remaining is "
"\"How is all this controlled from code?\"."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:204
msgid ""
"Keep in mind that the animaton nodes are just resources and, as such, they "
"are shared between all the instances. Setting values in the nodes directly "
"will affect all instances of the scene that uses this ``AnimationTree``. "
"This has some cool use cases, though, e.g. you can copy and paste parts of "
"your animation tree, or reuse nodes with a complex layout (such as a state "
"machine or blend space) in different animation trees."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:209
msgid ""
"The actual animation data is contained in the ``AnimationTree`` node and is "
"accessed via properties. Check the \"Parameters\" section of the "
"``AnimationTree`` node to see all the parameters that can be modified in "
"real-time:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:214
msgid ""
"This is handy because it makes it possible to animate them from an "
"``AnimationPlayer``, or even the ``AnimationTree`` itself, allowing the "
"realisation of very complex animation logic."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:217
msgid ""
"To modify these values from code, the property path must be obtained. This "
"is done easily by hovering the mouse over any of the parameters:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:221
msgid "Which allows setting them or reading them:"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:236
msgid "State machine travel"
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:238
msgid ""
"One of the nice features in Godot's ``StateMachine`` implementation is the "
"ability to travel. The graph can be instructed to go from the current state "
"to another one, while visiting all the intermediate ones. This is done via "
"the A\\* algorithm."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:241
msgid ""
"To use the travel ability, you should first retrieve the :ref:"
"`AnimationNodeStateMachinePlayback "
"<class_AnimationNodeStateMachinePlayback>` object from the ``AnimationTree`` "
"node (it is exported as a property)."
msgstr ""

#: ../../docs/tutorials/animation/animation_tree.rst:254
msgid ""
"Once retrieved, it can be used by calling one of the many functions it "
"offers:"
msgstr ""

#: ../../docs/tutorials/inputs/index.rst:2
msgid "Inputs"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:4
msgid "InputEvent"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:9
msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:15
msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:34
msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. they keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:40
msgid ""
"You can setup your InputMap under **Project > Project Settings > Input Map** "
"and then use those actions like this:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:60
msgid "How does it work?"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:62
msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The OS object for each platform will read events from the "
"device, then feed them to MainLoop. As :ref:`SceneTree <class_SceneTree>` is "
"the default MainLoop implementation, events are fed to it. Godot provides a "
"function to get the current SceneTree object : **get_tree()**."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:70
msgid ""
"But SceneTree does not know what to do with the event, so it will give it to "
"the viewports, starting by the \"root\" :ref:`Viewport <class_Viewport>` "
"(the first node of the scene tree). Viewport does quite a lot of stuff with "
"the received input, in order:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:77
msgid ""
"First of all, the standard :ref:`Node._input() <class_Node_method__input>` "
"function will be called in any node that overrides it (and hasn't disabled "
"input processing with :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input>`). If any function consumes the event, "
"it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. This ensures that you can filter all events of interest, "
"even before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` is generally a better fit, because it "
"allows the GUI to intercept the events."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:82
msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` and the signal \"input_event\" will be "
"emitted (this function is re-implementable by script by inheriting from it). "
"If the control wants to \"consume\" the event, it will call :ref:`Control."
"accept_event() <class_Control_method_accept_event>` and the event will not "
"spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` callback, and whether these "
"events are propagated further."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:92
msgid ""
"If so far no one consumed the event, the unhandled input callback will be "
"called if overridden (and not disabled with :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. The unhandled input callback is ideal for full-screen "
"gameplay events, so they are not received when a GUI is active."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:97
msgid ""
"If no one wanted the event so far, and a :ref:`Camera <class_Camera>` is "
"assigned to the Viewport, a ray to the physics world (in the ray direction "
"from the click) will be cast. If this ray hits an object, it will call the :"
"ref:`CollisionObject._input_event() "
"<class_CollisionObject_method__input_event>` function in the relevant "
"physics object (bodies receive this callback by default, but areas do not. "
"This can be configured through :ref:`Area <class_Area>` properties)."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:103
msgid ""
"Finally, if the event was unhandled, it will be passed to the next Viewport "
"in the tree, otherwise it will be ignored."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:106
msgid ""
"When sending events to all listening nodes within a scene, the viewport will "
"do so in a reverse depth-first order: Starting with the node at the bottom "
"of the scene tree, and ending at the root node:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:112
msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:115
msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behaviour if needed."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:121
msgid "Anatomy of an InputEvent"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:123
msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:127
msgid ""
"There are several specialised types of InputEvent, described in the table "
"below:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:130
msgid "Event"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:130
msgid "Type Index"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid "NONE"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid "Empty Input Event."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid "KEY"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid "Contains a scancode and unicode value, as well as modifiers."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid "MOUSE_BUTTON"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid "Contains click information, such as button, modifiers, etc."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid "MOUSE_MOTION"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid ""
"Contains motion information, such as relative, absolute positions and speed."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid "JOYSTICK_MOTION"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid "Contains Joystick/Joypad analog axis information."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid "JOYSTICK_BUTTON"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid "Contains Joystick/Joypad button information."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid "SCREEN_TOUCH"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid "SCREEN_DRAG"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid "SCREEN_ACTION"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:162
msgid "Actions"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:164
msgid ""
"An InputEvent may or may not represent a pre-defined action. Actions are "
"useful because they abstract the input device when programming the game "
"logic. This allows for:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:168
msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:170
msgid "Input to be reconfigured at run-time."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:172
msgid ""
"Actions can be created from the Project Settings menu in the Actions tab."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:175
msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:178
msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:202
msgid "InputMap"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:204
msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:4
msgid "Mouse and input coordinates"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:9
msgid ""
"The reason for this small tutorial is to clear up many common mistakes about "
"input coordinates, obtaining mouse position and screen resolution, etc."
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:14
msgid "Hardware display coordinates"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:16
msgid ""
"Using hardware coordinates makes sense in the case of writing complex UIs "
"meant to run on PC, such as editors, MMOs, tools, etc. However, it does not "
"make as much sense outside of that scope."
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:21
msgid "Viewport display coordinates"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:23
msgid ""
"Godot uses viewports to display content, and viewports can be scaled by "
"several options (see :ref:`doc_multiple_resolutions` tutorial). Use, then, "
"the functions in nodes to obtain the mouse coordinates and viewport size, "
"for example:"
msgstr ""

#: ../../docs/tutorials/inputs/mouse_and_input_coordinates.rst:55
msgid ""
"Alternatively, it's possible to ask the viewport for the mouse position:"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:4
msgid "Customizing mouse cursor"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:6
msgid ""
"You might want to change the appearance of the mouse cursor in your game in "
"order to suit the overall design. There are two ways to customize the mouse "
"cursor:"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:8
#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:14
msgid "Using project settings"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:9
#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:26
msgid "Using a script"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:11
msgid ""
"Using project settings is a simpler (but more limited) way to customize the "
"mouse cursor. The second way is more customizable, but involves scripting."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:16
msgid ""
"Open project settings, go to Display>Mouse Cursor. You will see Custom Image "
"and Custom Image Hotspot."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:20
msgid ""
"Custom Image is the desired image that you would like to set as the mouse "
"cursor. Custom Hotspot is the point in the image that you would like to use "
"as the cursor's detection point."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:23
msgid "The custom image **must** be less than 256x256."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:28
msgid "Create a Node and attach the following script."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:64
msgid ""
"Check :ref:`Input.set_custom_mouse_cursor() "
"<class_Input_method_set_custom_mouse_cursor>`."
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:68
msgid "Demo project"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:70
msgid ""
"Find out more by studying this demo project: https://github.com/"
"guilhermefelipecgs/custom_hardware_cursor"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:74
msgid "Cursor list"
msgstr ""

#: ../../docs/tutorials/inputs/custom_mouse_cursor.rst:76
msgid ""
"As documented in the :ref:`Input <class_Input>` class (see the "
"**CursorShape** enum), there are multiple mouse cursors you can define. "
"Which ones you want to use depends on your use case."
msgstr ""

#: ../../docs/tutorials/io/index.rst:2
msgid "I/O"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:4
msgid "Background loading"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:6
msgid ""
"When switching the main scene of your game (e.g. going to a new level), you "
"might want to show a loading screen with some indication that progress is "
"being made. The main load method (``ResourceLoader::load`` or just ``load`` "
"from GDScript) blocks your thread while the resource is being loaded, so "
"it's not good. This document discusses the ``ResourceInteractiveLoader`` "
"class for smoother load screens."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:15
msgid "ResourceInteractiveLoader"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:17
msgid ""
"The ``ResourceInteractiveLoader`` class allows you to load a resource in "
"stages. Every time the method ``poll`` is called, a new stage is loaded, and "
"control is returned to the caller. Each stage is generally a sub-resource "
"that is loaded by the main resource. For example, if you're loading a scene "
"that loads 10 images, each image will be one stage."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:24
#: ../../docs/community/contributing/updating_the_class_reference.rst:227
msgid "Usage"
msgstr "사용"

#: ../../docs/tutorials/io/background_loading.rst:26
msgid "Usage is generally as follows"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:29
msgid "Obtaining a ResourceInteractiveLoader"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:35
msgid ""
"This method will give you a ResourceInteractiveLoader that you will use to "
"manage the load operation."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:39
msgid "Polling"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:45
msgid ""
"Use this method to advance the progress of the load. Each call to ``poll`` "
"will load the next stage of your resource. Keep in mind that each stage is "
"one entire \"atomic\" resource, such as an image, or a mesh, so it will take "
"several frames to load."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:50
msgid ""
"Returns ``OK`` on no errors, ``ERR_FILE_EOF`` when loading is finished. Any "
"other return value means there was an error and loading has stopped."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:54
msgid "Load progress (optional)"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:56
msgid "To query the progress of the load, use the following methods:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:63
msgid ""
"``get_stage_count`` returns the total number of stages to load. "
"``get_stage`` returns the current stage being loaded."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:67
msgid "Forcing completion (optional)"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:73
msgid ""
"Use this method if you need to load the entire resource in the current "
"frame, without any more steps."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:77
msgid "Obtaining the resource"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:83
msgid ""
"If everything goes well, use this method to retrieve your loaded resource."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:89
msgid ""
"This example demonstrates how to load a new scene. Consider it in the "
"context of the :ref:`doc_singletons_autoload` example."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:92
msgid ""
"Firstly, we set up some variables and initialize the ``current_scene`` with "
"the main scene of the game:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:106
msgid ""
"The function ``goto_scene`` is called from the game when the scene needs to "
"be switched. It requests an interactive loader, and calls "
"``set_process(true)`` to start polling the loader in the ``_process`` "
"callback. It also starts a \"loading\" animation, which can show a progress "
"bar or loading screen, etc."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:128
msgid ""
"``_process`` is where the loader is polled. ``poll`` is called, and then we "
"deal with the return value from that call. ``OK`` means keep polling, "
"``ERR_FILE_EOF`` means load is done, anything else means there was an error. "
"Also note we skip one frame (via ``wait_frames``, set on the ``goto_scene`` "
"function) to allow the loading screen to show up."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:134
msgid ""
"Note how we use ``OS.get_ticks_msec`` to control how long we block the "
"thread. Some stages might load fast, which means we might be able to cram "
"more than one call to ``poll`` in one frame; some might take way more than "
"your value for ``time_max``, so keep in mind we won't have precise control "
"over the timings."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:170
msgid ""
"Some extra helper functions. ``update_progress`` updates a progress bar, or "
"can also update a paused animation (the animation represents the entire load "
"process from beginning to end). ``set_new_scene`` puts the newly loaded "
"scene on the tree. Because it's a scene being loaded, ``instance()`` needs "
"to be called on the resource obtained from the loader."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:195
msgid "Using multiple threads"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:197
msgid ""
"ResourceInteractiveLoader can be used from multiple threads. A couple of "
"things to keep in mind if you attempt it:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:201
msgid "Use a semaphore"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:203
msgid ""
"While your thread waits for the main thread to request a new resource, use a "
"``Semaphore`` to sleep (instead of a busy loop or anything similar)."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:207
msgid "Not blocking main thread during the polling"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:209
msgid ""
"If you have a mutex to allow calls from the main thread to your loader "
"class, don't lock the former while you call ``poll`` on the latter. When a "
"resource is done loading, it might require some resources from the low-level "
"APIs (VisualServer, etc), which might need to lock the main thread to "
"acquire them. This might cause a deadlock if the main thread is waiting for "
"your mutex while your thread is waiting to load a resource."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:218
msgid "Example class"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:220
msgid ""
"You can find an example class for loading resources in threads here: :"
"download:`resource_queue.gd <files/resource_queue.gd>`. Usage is as follows:"
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:227
msgid "Call after you instance the class to start the thread."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:233
msgid ""
"Queue a resource. Use optional argument \"p_in_front\" to put it in front of "
"the queue."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:240
msgid "Remove a resource from the queue, discarding any loading done."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:246
msgid "Returns true if a resource is done loading and ready to be retrieved."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:252
msgid ""
"Get the progress of a resource. Returns -1 on error (for example if the "
"resource is not on the queue), or a number between 0.0 and 1.0 with the "
"progress of the load. Use mostly for cosmetic purposes (updating progress "
"bars, etc), use ``is_ready`` to find out if a resource is actually ready."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:262
msgid ""
"Returns the fully loaded resource, or null on error. If the resource is not "
"done loading (``is_ready`` returns false), it will block your thread and "
"finish the load. If the resource is not on the queue, it will call "
"``ResourceLoader::load`` to load it normally and return it."
msgstr ""

#: ../../docs/tutorials/io/background_loading.rst:298
msgid ""
"**Note**: this code, in its current form, is not tested in real world "
"scenarios. Ask punto on IRC (#godotengine on irc.freenode.net) for help."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:4
msgid "Data paths"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:7
msgid "Path separators"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:9
msgid ""
"For the sake of supporting as many platforms as possible, Godot only accepts "
"UNIX-style path separators (``/``). These work on all platforms, including "
"Windows."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:13
msgid "A path like ``C:\\Projects`` will become ``C:/Projects``."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:18
msgid ""
"As mentioned before, Godot considers that a project exists in any given "
"folder that contains a ``project.godot`` text file, even if such file is "
"empty."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:22
msgid ""
"Accessing project files can be done by opening any path with ``res://`` as a "
"base. For example, a texture located in the root of the project folder may "
"be opened from the following path: ``res://some_texture.png``."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:27
msgid "User path (persistent data)"
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:29
msgid ""
"While the project is running, it is a common scenario that the resource path "
"will be read-only, due to it being inside a package, self-contained "
"executable, or system-wide install location."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:33
msgid ""
"Storing persistent files in such scenarios should be done by using the "
"``user://`` prefix, for example: ``user://game_save.txt``."
msgstr ""

#: ../../docs/tutorials/io/data_paths.rst:36
msgid ""
"On some devices (for example, mobile and consoles), this path is unique to "
"the project. On desktop operating systems, the engine uses the typical ``~/."
"local/share/godot/app_userdata/Name`` on macOS and Linux, and ``%APPDATA%/"
"Name`` on Windows. ``Name`` is taken from the application name defined in "
"the Project Settings, but it can be overridden on a per-platform basis "
"using :ref:`feature tags <doc_feature_tags>`."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:4
msgid "Saving games"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:9
msgid ""
"Save games can be complicated. It can be desired to store more information "
"than the current level or number of stars earned on a level. More advanced "
"save games may need to store additional information about an arbitrary "
"number of objects. This will allow the save function to scale as the game "
"grows more complex."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:16
msgid "Identify persistent objects"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:18
msgid ""
"Firstly, we should identify what objects we want to keep between game "
"sessions and what information we want to keep from those objects. For this "
"tutorial, we will use groups to mark and handle objects to be saved, but "
"other methods are certainly possible."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:23
msgid ""
"We will start by adding objects we wish to save to the \"Persist\" group. As "
"in the :ref:`doc_scripting_continued` tutorial, we can do this through "
"either the GUI or script. Let's add the relevant nodes using the GUI:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:29
msgid ""
"Once this is done, when we need to save the game, we can get all objects to "
"save them and then tell them all to save with this script:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:49
msgid "Serializing"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:51
msgid ""
"The next step is to serialize the data. This makes it much easier to read "
"from and store to disk. In this case, we're assuming each member of group "
"Persist is an instanced node and thus has a path. GDScript has helper "
"functions for this, such as :ref:`to_json() "
"<class_@GDScript_method_to_json>` and :ref:`parse_json() "
"<class_@GDScript_method_parse_json>`, so we will use a dictionary. Our node "
"needs to contain a save function that returns this data. The save function "
"will look like this:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:114
msgid ""
"This gives us a dictionary with the style ``{ \"variable_name\":"
"value_of_variable }``, which will be useful when loading."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:119
msgid "Saving and reading data"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:121
msgid ""
"As covered in the :ref:`doc_filesystem` tutorial, we'll need to open a file "
"and write to it and then later, read from it. Now that we have a way to call "
"our groups and get their relevant data, let's use to_json() to convert it "
"into an easily stored string and store them in a file. Doing it this way "
"ensures that each line is its own object, so we have an easy way to pull the "
"data out of the file as well."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:166
msgid ""
"Game saved! Loading is fairly simple as well. For that, we'll read each "
"line, use parse_json() to read it back to a dict, and then iterate over the "
"dict to read our values. But we'll need to first create the object and we "
"can use the filename and parent values to achieve that. Here is our load "
"function:"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:254
msgid ""
"And now, we can save and load an arbitrary number of objects laid out almost "
"anywhere across the scene tree! Each object can store different data "
"depending on what it needs to save."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:259
msgid "Some notes"
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:261
msgid ""
"We may have glossed over a step, but setting the game state to one fit to "
"start loading data can be complicated. This step will need to be heavily "
"customized based on the needs of an individual project."
msgstr ""

#: ../../docs/tutorials/io/saving_games.rst:265
msgid ""
"This implementation assumes no Persist objects are children of other Persist "
"objects. Doing so would create invalid paths. If this is one of the needs of "
"a project, this needs to be considered. Saving objects in stages (parent "
"objects first), so they are available when child objects are loaded, will "
"make sure they're available for the add_child() call. There will also need "
"to be some way to link children to parents, as the NodePath will likely be "
"invalid."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:4
msgid "Encrypting save games"
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:9
msgid ""
"Because the world today is not the world of yesterday. A capitalist "
"oligarchy runs the world and forces us to consume in order to keep the gears "
"of this rotten society on track. As such, the biggest market for video game "
"consumption today is the mobile one. It is a market of poor souls forced to "
"compulsively consume digital content in order to forget the misery of their "
"everyday life, commute, or just any other brief free moment they have that "
"they are not using to produce goods or services for the ruling class. These "
"individuals need to keep focusing on their video games (because not doing so "
"will fill them with tremendous existential angst), so they go as far as "
"spending money on them to extend their experience, and their preferred way "
"of doing so is through in-app purchases and virtual currency."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:22
msgid ""
"But what if someone were to find a way to edit the saved games and assign "
"the items and currency without effort? That would be terrible, because it "
"would help players consume the content much faster, and therefore run out of "
"it sooner than expected. If that happens, they will have nothing that avoids "
"them to think, and the tremendous agony of realizing their own irrelevance "
"would again take over their life."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:29
msgid ""
"No, we definitely do not want that to happen, so let's see how to encrypt "
"savegames and protect the world order."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:33
msgid "How?"
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:35
msgid ""
"The class :ref:`File <class_File>` can open a file at a location and read/"
"write data (integers, strings and variants). It also supports encryption. To "
"create an encrypted file, a passphrase must be provided, like this:"
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:55
msgid ""
"This will make the file unreadable to users, but will still not prevent them "
"from sharing savefiles. To solve this, use the device unique id or some "
"unique user identifier, for example:"
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:74
msgid "Note that ``OS.get_unique_id()`` only works on iOS and Android."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:76
msgid "That is all! Thank you for your cooperation, citizen."
msgstr ""

#: ../../docs/tutorials/io/encrypting_save_games.rst:78
msgid ""
"This method cannot really prevent players from editing their savegames "
"locally because, since the encryption key is stored inside the game, the "
"player can still decrypt and edit the file themselves. The only way to "
"prevent this from being possible is to store the save data on a remote "
"server, where players can only make authorized changes to their save data. "
"If your game deals with real money, you need to be doing this anyway."
msgstr ""

#: ../../docs/tutorials/i18n/index.rst:2
msgid "Internationalization"
msgstr "현지화"

#: ../../docs/tutorials/i18n/internationalizing_games.rst:4
msgid "Internationalizing games"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:9
msgid ""
"Sería excelente que el mundo hablara solo un idioma (It would be great if "
"the world spoke only one language). Unfortunately for us developers, that is "
"not the case. While indie or niche games usually do not need localization, "
"games targeting a more massive market often require localization. Godot "
"offers many tools to make this process more straightforward, so this "
"tutorial is more like a collection of tips and tricks."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:17
msgid ""
"Localization is usually done by specific studios hired for the job and, "
"despite the huge amount of software and file formats available for this, the "
"most common way to do localization to this day is still with spreadsheets. "
"The process of creating the spreadsheets and importing them is already "
"covered in the :ref:`doc_importing_translations` tutorial, so this one could "
"be seen more like a follow-up to that one."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:25
msgid ""
"We will be using the official demo as an example; you can `download it from "
"the Asset Library <https://godotengine.org/asset-library/asset/134>`_."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:29
msgid "Configuring the imported translation"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:31
msgid ""
"Translations can get updated and re-imported when they change, but they "
"still have to be added to the project. This is done in **Project → Project "
"Settings → Localization**:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:37
msgid "The above dialog is used to add or remove translations project-wide."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:40
msgid "Localizing resources"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:42
msgid ""
"It is also possible to instruct Godot to use alternate versions of assets "
"(resources) depending on the current language. The **Remaps** tab can be "
"used for this:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:48
msgid ""
"Select the resource to be remapped, then add some alternatives for each "
"locale."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:52
msgid "Converting keys to text"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:54
msgid ""
"Some controls, such as :ref:`Button <class_Button>` and :ref:`Label "
"<class_Label>`, will automatically fetch a translation if their text matches "
"a translation key. For example, if a label's text is "
"\"MAIN_SCREEN_GREETING1\" and that key exists in the current translation, "
"then the text will automatically be translated."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:59
msgid ""
"In code, the :ref:`Object.tr() <class_Object_method_tr>` function can be "
"used. This will just look up the text in the translations and convert it if "
"found:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:69
msgid "Making controls resizable"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:71
msgid ""
"The same text in different languages can vary greatly in length. For this, "
"make sure to read the tutorial on :ref:`doc_size_and_anchors`, as "
"dynamically adjusting control sizes may help. :ref:`Container "
"<class_Container>` can be useful, as well as the text wrapping options "
"available in :ref:`Label <class_Label>`."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:78
msgid "TranslationServer"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:80
msgid ""
"Godot has a server handling low-level translation management called the :ref:"
"`TranslationServer <class_TranslationServer>`. Translations can be added or "
"removed during run-time; the current language can also be changed at run-"
"time."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:86
msgid "Command line"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:88
msgid ""
"Language can be tested when running Godot from the command line. For "
"example, to test a game in French, the following argument can be supplied:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:97
msgid "Translating the project name"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:99
msgid ""
"The project name becomes the app name when exporting to different operating "
"systems and platforms. To specify the project name in more than one "
"language, create a new setting ``application/name`` in the **Project "
"Settings** and append the locale identifier to it. For instance, for "
"Spanish, this would be ``application/name_es``:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:107
msgid ""
"If you are unsure about the language code to use, refer to the :ref:`list of "
"locale codes <doc_locales>`."
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:4
msgid "Locales"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:6
msgid ""
"This is the list of supported locales and variants in the engine. It's based "
"on the Unix standard locale strings:"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:10
msgid "Locale"
msgstr "로케일"

#: ../../docs/tutorials/i18n/locales.rst:10
msgid "Language and Variant"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:12
msgid "aa"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:12
msgid "Afar"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:14
msgid "aa_DJ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:14
msgid "Afar (Djibouti)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:16
msgid "aa_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:16
msgid "Afar (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:18
msgid "aa_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:18
msgid "Afar (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:20
msgid "af"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:20
msgid "Afrikaans"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:22
msgid "af_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:22
msgid "Afrikaans (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:24
msgid "agr_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:24
msgid "Aguaruna (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:26
msgid "ak_GH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:26
msgid "Akan (Ghana)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:28
msgid "am_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:28
msgid "Amharic (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:30
msgid "an_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:30
msgid "Aragonese (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:32
msgid "anp_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:32
msgid "Angika (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:34
msgid "ar"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:34
msgid "Arabic"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:36
msgid "ar_AE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:36
msgid "Arabic (United Arab Emirates)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:38
msgid "ar_BH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:38
msgid "Arabic (Bahrain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:40
msgid "ar_DZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:40
msgid "Arabic (Algeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:42
msgid "ar_EG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:42
msgid "Arabic (Egypt)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:44
msgid "ar_IQ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:44
msgid "Arabic (Iraq)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:46
msgid "ar_JO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:46
msgid "Arabic (Jordan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:48
msgid "ar_KW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:48
msgid "Arabic (Kuwait)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:50
msgid "ar_LB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:50
msgid "Arabic (Lebanon)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:52
msgid "ar_LY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:52
msgid "Arabic (Libya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:54
msgid "ar_MA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:54
msgid "Arabic (Morocco)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:56
msgid "ar_OM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:56
msgid "Arabic (Oman)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:58
msgid "ar_QA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:58
msgid "Arabic (Qatar)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:60
msgid "ar_SA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:60
msgid "Arabic (Saudi Arabia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:62
msgid "ar_SD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:62
msgid "Arabic (Sudan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:64
msgid "ar_SY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:64
msgid "Arabic (Syria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:66
msgid "ar_TN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:66
msgid "Arabic (Tunisia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:68
msgid "ar_YE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:68
msgid "Arabic (Yemen)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:70
msgid "as_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:70
msgid "Assamese (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:72
msgid "ast_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:72
msgid "Asturian (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:74
msgid "ayc_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:74
msgid "Southern Aymara (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:76
msgid "ay_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:76
msgid "Aymara (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:78
msgid "az_AZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:78
msgid "Azerbaijani (Azerbaijan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:80
msgid "be"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:80
msgid "Belarusian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:82
msgid "be_BY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:82
msgid "Belarusian (Belarus)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:84
msgid "bem_ZM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:84
msgid "Bemba (Zambia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:86
msgid "ber_DZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:86
msgid "Berber languages (Algeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:88
msgid "ber_MA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:88
msgid "Berber languages (Morocco)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:90
msgid "bg"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:90
msgid "Bulgarian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:92
msgid "bg_BG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:92
msgid "Bulgarian (Bulgaria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:94
msgid "bhb_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:94
msgid "Bhili (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:96
msgid "bho_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:96
msgid "Bhojpuri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:98
msgid "bi_TV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:98
msgid "Bislama (Tuvalu)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:100
msgid "bn"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:100
msgid "Bengali"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:102
msgid "bn_BD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:102
msgid "Bengali (Bangladesh)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:104
msgid "bn_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:104
msgid "Bengali (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:106
msgid "bo"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:106
msgid "Tibetan"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:108
msgid "bo_CN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:108
msgid "Tibetan (China)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:110
msgid "bo_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:110
msgid "Tibetan (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:112
msgid "br_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:112
msgid "Breton (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:114
msgid "brx_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:114
msgid "Bodo (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:116
msgid "bs_BA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:116
msgid "Bosnian (Bosnia and Herzegovina)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:118
msgid "byn_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:118
msgid "Bilin (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:120
msgid "ca"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:120
msgid "Catalan"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:122
msgid "ca_AD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:122
msgid "Catalan (Andorra)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:124
msgid "ca_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:124
msgid "Catalan (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:126
msgid "ca_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:126
msgid "Catalan (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:128
msgid "ca_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:128
msgid "Catalan (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:130
msgid "ce_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:130
msgid "Chechen (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:132
msgid "chr_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:132
msgid "Cherokee (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:134
msgid "cmn_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:134
msgid "Mandarin Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:136
msgid "crh_UA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:136
msgid "Crimean Tatar (Ukraine)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:138
msgid "csb_PL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:138
msgid "Kashubian (Poland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:140
msgid "cs"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:140
msgid "Czech"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:142
msgid "cs_CZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:142
msgid "Czech (Czech Republic)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:144
msgid "cv_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:144
msgid "Chuvash (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:146
msgid "cy_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:146
msgid "Welsh (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:148
msgid "da"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:148
msgid "Danish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:150
msgid "da_DK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:150
msgid "Danish (Denmark)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:152
msgid "de"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:152
msgid "German"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:154
msgid "de_AT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:154
msgid "German (Austria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:156
msgid "de_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:156
msgid "German (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:158
msgid "de_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:158
msgid "German (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:160
msgid "de_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:160
msgid "German (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:162
msgid "de_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:162
msgid "German (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:164
msgid "de_LU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:164
msgid "German (Luxembourg)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:166
msgid "doi_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:166
msgid "Dogri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:168
msgid "dv_MV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:168
msgid "Dhivehi (Maldives)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:170
msgid "dz_BT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:170
msgid "Dzongkha (Bhutan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:172
msgid "el"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:172
msgid "Greek"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:174
msgid "el_CY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:174
msgid "Greek (Cyprus)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:176
msgid "el_GR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:176
msgid "Greek (Greece)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:178
msgid "English"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:180
msgid "en_AG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:180
msgid "English (Antigua and Barbuda)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:182
msgid "en_AU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:182
msgid "English (Australia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:184
msgid "en_BW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:184
msgid "English (Botswana)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:186
msgid "en_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:186
msgid "English (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:188
msgid "en_DK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:188
msgid "English (Denmark)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:190
msgid "en_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:190
msgid "English (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:192
msgid "en_HK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:192
msgid "English (Hong Kong)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:194
msgid "en_IE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:194
msgid "English (Ireland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:196
msgid "en_IL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:196
msgid "English (Israel)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:198
msgid "en_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:198
msgid "English (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:200
msgid "en_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:200
msgid "English (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:202
msgid "en_MT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:202
msgid "English (Malta)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:204
msgid "en_NZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:204
msgid "English (New Zealand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:206
msgid "en_PH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:206
msgid "English (Philippines)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:208
msgid "en_SG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:208
msgid "English (Singapore)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:210
msgid "en_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:210
msgid "English (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:212
msgid "en_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:212
msgid "English (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:214
msgid "en_ZM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:214
msgid "English (Zambia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:216
msgid "en_ZW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:216
msgid "English (Zimbabwe)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:218
msgid "eo"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:218
msgid "Esperanto"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:220
msgid "Spanish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:222
msgid "es_AR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:222
msgid "Spanish (Argentina)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:224
msgid "es_BO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:224
msgid "Spanish (Bolivia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:226
msgid "es_CL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:226
msgid "Spanish (Chile)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:228
msgid "es_CO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:228
msgid "Spanish (Colombia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:230
msgid "es_CR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:230
msgid "Spanish (Costa Rica)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:232
msgid "en_CU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:232
msgid "Spanish (Cuba)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:234
msgid "es_DO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:234
msgid "Spanish (Dominican Republic)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:236
msgid "es_EC"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:236
msgid "Spanish (Ecuador)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:238
msgid "es_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:238
msgid "Spanish (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:240
msgid "es_GT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:240
msgid "Spanish (Guatemala)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:242
msgid "es_HN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:242
msgid "Spanish (Honduras)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:244
msgid "es_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:244
msgid "Spanish (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:246
msgid "es_NI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:246
msgid "Spanish (Nicaragua)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:248
msgid "es_PA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:248
msgid "Spanish (Panama)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:250
msgid "es_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:250
msgid "Spanish (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:252
msgid "es_PR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:252
msgid "Spanish (Puerto Rico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:254
msgid "es_PY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:254
msgid "Spanish (Paraguay)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:256
msgid "es_SV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:256
msgid "Spanish (El Salvador)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:258
msgid "es_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:258
msgid "Spanish (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:260
msgid "es_UY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:260
msgid "Spanish (Uruguay)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:262
msgid "es_VE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:262
msgid "Spanish (Venezuela)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:264
msgid "et"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:264
msgid "Estonian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:266
msgid "et_EE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:266
msgid "Estonian (Estonia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:268
msgid "eu"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:268
msgid "Basque"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:270
msgid "eu_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:270
msgid "Basque (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:272
msgid "fa"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:272
msgid "Persian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:274
msgid "fa_IR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:274
msgid "Persian (Iran)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:276
msgid "ff_SN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:276
msgid "Fulah (Senegal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:278
msgid "fi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:278
msgid "Finnish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:280
msgid "fi_FI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:280
msgid "Finnish (Finland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:282
msgid "fil_PH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:282
msgid "Filipino (Philippines)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:284
msgid "fo_FO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:284
msgid "Faroese (Faroe Islands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:286
msgid "fr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:286
msgid "French"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:288
msgid "fr_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:288
msgid "French (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:290
msgid "fr_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:290
msgid "French (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:292
msgid "fr_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:292
msgid "French (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:294
msgid "fr_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:294
msgid "French (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:296
msgid "fr_LU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:296
msgid "French (Luxembourg)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:298
msgid "fur_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:298
msgid "Friulian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:300
msgid "fy_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:300
msgid "Western Frisian (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:302
msgid "fy_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:302
msgid "Western Frisian (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:304
msgid "ga"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:304
msgid "Irish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:306
msgid "ga_IE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:306
msgid "Irish (Ireland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:308
msgid "gd_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:308
msgid "Scottish Gaelic (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:310
msgid "gez_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:310
msgid "Geez (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:312
msgid "gez_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:312
msgid "Geez (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:314
msgid "gl_ES"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:314
msgid "Galician (Spain)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:316
msgid "gu_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:316
msgid "Gujarati (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:318
msgid "gv_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:318
msgid "Manx (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:320
msgid "hak_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:320
msgid "Hakka Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:322
msgid "ha_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:322
msgid "Hausa (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:324
msgid "he"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:324
msgid "Hebrew"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:326
msgid "he_IL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:326
msgid "Hebrew (Israel)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:328
msgid "hi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:328
msgid "Hindi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:330
msgid "hi_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:330
msgid "Hindi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:332
msgid "hne_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:332
msgid "Chhattisgarhi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:334
msgid "hr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:334
msgid "Croatian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:336
msgid "hr_HR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:336
msgid "Croatian (Croatia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:338
msgid "hsb_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:338
msgid "Upper Sorbian (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:340
msgid "ht_HT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:340
msgid "Haitian (Haiti)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:342
msgid "hu"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:342
msgid "Hungarian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:344
msgid "hu_HU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:344
msgid "Hungarian (Hungary)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:346
msgid "hus_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:346
msgid "Huastec (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:348
msgid "hy_AM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:348
msgid "Armenian (Armenia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:350
msgid "ia_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:350
msgid "Interlingua (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:352
msgid "Indonesian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:354
msgid "id_ID"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:354
msgid "Indonesian (Indonesia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:356
msgid "ig_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:356
msgid "Igbo (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:358
msgid "ik_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:358
msgid "Inupiaq (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:360
msgid "Icelandic"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:362
msgid "is_IS"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:362
msgid "Icelandic (Iceland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:364
msgid "it"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:364
msgid "Italian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:366
msgid "it_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:366
msgid "Italian (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:368
msgid "it_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:368
msgid "Italian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:370
msgid "iu_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:370
msgid "Inuktitut (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:372
msgid "Japanese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:374
msgid "ja_JP"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:374
msgid "Japanese (Japan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:376
msgid "kab_DZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:376
msgid "Kabyle (Algeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:378
msgid "ka_GE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:378
msgid "Georgian (Georgia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:380
msgid "kk_KZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:380
msgid "Kazakh (Kazakhstan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:382
msgid "kl_GL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:382
msgid "Kalaallisut (Greenland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:384
msgid "km_KH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:384
msgid "Central Khmer (Cambodia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:386
msgid "kn_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:386
msgid "Kannada (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:388
msgid "kok_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:388
msgid "Konkani (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:390
msgid "ko"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:390
msgid "Korean"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:392
msgid "ko_KR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:392
msgid "Korean (South Korea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:394
msgid "ks_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:394
msgid "Kashmiri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:396
msgid "ku"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:396
msgid "Kurdish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:398
msgid "ku_TR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:398
msgid "Kurdish (Turkey)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:400
msgid "kw_GB"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:400
msgid "Cornish (United Kingdom)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:402
msgid "ky_KG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:402
msgid "Kirghiz (Kyrgyzstan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:404
msgid "lb_LU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:404
msgid "Luxembourgish (Luxembourg)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:406
msgid "lg_UG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:406
msgid "Ganda (Uganda)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:408
msgid "li_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:408
msgid "Limburgan (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:410
msgid "li_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:410
msgid "Limburgan (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:412
msgid "lij_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:412
msgid "Ligurian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:414
msgid "ln_CD"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:414
msgid "Lingala (Congo)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:416
msgid "lo_LA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:416
msgid "Lao (Laos)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:418
msgid "lt"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:418
msgid "Lithuanian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:420
msgid "lt_LT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:420
msgid "Lithuanian (Lithuania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:422
msgid "lv"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:422
msgid "Latvian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:424
msgid "lv_LV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:424
msgid "Latvian (Latvia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:426
msgid "lzh_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:426
msgid "Literary Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:428
msgid "mag_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:428
msgid "Magahi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:430
msgid "mai_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:430
msgid "Maithili (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:432
msgid "mg_MG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:432
msgid "Malagasy (Madagascar)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:434
msgid "mh_MH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:434
msgid "Marshallese (Marshall Islands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:436
msgid "mhr_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:436
msgid "Eastern Mari (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:438
msgid "mi_NZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:438
msgid "Maori (New Zealand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:440
msgid "miq_NI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:440
msgid "Mískito  (Nicaragua)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:442
msgid "mk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:442
msgid "Macedonian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:444
msgid "mk_MK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:444
msgid "Macedonian (Macedonia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:446
msgid "ml_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:446
msgid "Malayalam (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:448
msgid "mni_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:448
msgid "Manipuri (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:450
msgid "mn_MN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:450
msgid "Mongolian (Mongolia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:452
msgid "mr_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:452
msgid "Marathi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:454
msgid "ms"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:454
msgid "Malay"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:456
msgid "ms_MY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:456
msgid "Malay (Malaysia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:458
msgid "mt"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:458
msgid "Maltese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:460
msgid "mt_MT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:460
msgid "Maltese (Malta)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:462
msgid "my_MM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:462
msgid "Burmese (Myanmar)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:464
msgid "myv_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:464
msgid "Erzya  (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:466
msgid "nah_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:466
msgid "Nahuatl languages (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:468
msgid "nan_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:468
msgid "Min Nan Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:470
msgid "nb"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:470
msgid "Norwegian Bokmål"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:472
msgid "nb_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:472
msgid "Norwegian Bokmål (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:474
msgid "nds_DE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:474
msgid "Low German (Germany)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:476
msgid "nds_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:476
msgid "Low German (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:478
msgid "ne_NP"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:478
msgid "Nepali (Nepal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:480
msgid "nhn_MX"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:480
msgid "Central Nahuatl (Mexico)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:482
msgid "niu_NU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:482
msgid "Niuean (Niue)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:484
msgid "niu_NZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:484
msgid "Niuean (New Zealand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:486
msgid "nl"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:486
msgid "Dutch"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:488
msgid "nl_AW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:488
msgid "Dutch (Aruba)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:490
msgid "nl_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:490
msgid "Dutch (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:492
msgid "nl_NL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:492
msgid "Dutch (Netherlands)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:494
msgid "nn"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:494
msgid "Norwegian Nynorsk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:496
msgid "nn_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:496
msgid "Norwegian Nynorsk (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:498
msgid "no"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:498
msgid "Norwegian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:500
msgid "no_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:500
msgid "Norwegian (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:502
msgid "nr_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:502
msgid "South Ndebele (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:504
msgid "nso_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:504
msgid "Pedi (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:506
msgid "oc_FR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:506
msgid "Occitan (France)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:508
msgid "om"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:508
msgid "Oromo"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:510
msgid "om_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:510
msgid "Oromo (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:512
msgid "om_KE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:512
msgid "Oromo (Kenya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:514
msgid "or_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:514
msgid "Oriya (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:516
msgid "os_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:516
msgid "Ossetian (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:518
msgid "pa_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:518
msgid "Panjabi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:520
msgid "pap"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:520
msgid "Papiamento"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:522
msgid "pap_AN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:522
msgid "Papiamento (Netherlands Antilles)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:524
msgid "pap_AW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:524
msgid "Papiamento (Aruba)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:526
msgid "pap_CW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:526
msgid "Papiamento (Curaçao)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:528
msgid "pa_PK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:528
msgid "Panjabi (Pakistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:530
msgid "pl"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:530
msgid "Polish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:532
msgid "pl_PL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:532
msgid "Polish (Poland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:534
msgid "pr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:534
msgid "Pirate"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:536
msgid "ps_AF"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:536
msgid "Pushto (Afghanistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:538
msgid "pt"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:538
msgid "Portuguese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:540
msgid "pt_BR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:540
msgid "Portuguese (Brazil)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:542
msgid "pt_PT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:542
msgid "Portuguese (Portugal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:544
msgid "quy_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:544
msgid "Ayacucho Quechua (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:546
msgid "quz_PE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:546
msgid "Cusco Quechua (Peru)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:548
msgid "raj_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:548
msgid "Rajasthani (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:550
msgid "ro"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:550
msgid "Romanian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:552
msgid "ro_RO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:552
msgid "Romanian (Romania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:554
msgid "ru"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:554
msgid "Russian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:556
msgid "ru_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:556
msgid "Russian (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:558
msgid "ru_UA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:558
msgid "Russian (Ukraine)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:560
msgid "rw_RW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:560
msgid "Kinyarwanda (Rwanda)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:562
msgid "sa_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:562
msgid "Sanskrit (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:564
msgid "sat_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:564
msgid "Santali (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:566
msgid "sc_IT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:566
msgid "Sardinian (Italy)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:568
msgid "sco"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:568
msgid "Scots"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:570
msgid "sd_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:570
msgid "Sindhi (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:572
msgid "se_NO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:572
msgid "Northern Sami (Norway)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:574
msgid "sgs_LT"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:574
msgid "Samogitian (Lithuania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:576
msgid "shs_CA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:576
msgid "Shuswap (Canada)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:578
msgid "sid_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:578
msgid "Sidamo (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:580
msgid "si_LK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:580
msgid "Sinhala (Sri Lanka)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:582
msgid "sk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:582
msgid "Slovak"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:584
msgid "sk_SK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:584
msgid "Slovak (Slovakia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:586
msgid "sl"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:586
msgid "Slovenian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:588
msgid "so"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:588
msgid "Somali"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:590
msgid "so_DJ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:590
msgid "Somali (Djibouti)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:592
msgid "so_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:592
msgid "Somali (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:594
msgid "so_KE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:594
msgid "Somali (Kenya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:596
msgid "so_SO"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:596
msgid "Somali (Somalia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:598
msgid "son_ML"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:598
msgid "Songhai languages (Mali)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:600
msgid "sq"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:600
msgid "Albanian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:602
msgid "sq_AL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:602
msgid "Albanian (Albania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:604
msgid "sq_KV"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:604
msgid "Albanian (Kosovo)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:606
msgid "sq_MK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:606
msgid "Albanian (Macedonia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:608
msgid "sr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:608
msgid "Serbian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:610
msgid "sr_BA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:610
msgid "Serbian (Bosnia and Herzegovina)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:612
msgid "sr_CS"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:612
msgid "Serbian (Serbia and Montenegro)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:614
msgid "sr_ME"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:614
msgid "Serbian (Montenegro)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:616
msgid "sr_RS"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:616
msgid "Serbian (Serbia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:618
msgid "ss_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:618
msgid "Swati (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:620
msgid "st_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:620
msgid "Southern Sotho (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:622
msgid "sv"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:622
msgid "Swedish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:624
msgid "sv_FI"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:624
msgid "Swedish (Finland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:626
msgid "sv_SE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:626
msgid "Swedish (Sweden)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:628
msgid "sw_KE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:628
msgid "Swahili (Kenya)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:630
msgid "sw_TZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:630
msgid "Swahili (Tanzania)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:632
msgid "szl_PL"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:632
msgid "Silesian (Poland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:634
msgid "ta"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:634
msgid "Tamil"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:636
msgid "ta_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:636
msgid "Tamil (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:638
msgid "ta_LK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:638
msgid "Tamil (Sri Lanka)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:640
msgid "tcy_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:640
msgid "Tulu (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:642
msgid "te_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:642
msgid "Telugu (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:644
msgid "tg_TJ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:644
msgid "Tajik (Tajikistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:646
msgid "the_NP"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:646
msgid "Chitwania Tharu (Nepal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:648
msgid "th"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:648
msgid "Thai"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:650
msgid "th_TH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:650
msgid "Thai (Thailand)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:652
msgid "th_TH_TH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:652
msgid "Thai (Thailand,TH)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:654
msgid "ti"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:654
msgid "Tigrinya"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:656
msgid "ti_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:656
msgid "Tigrinya (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:658
msgid "ti_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:658
msgid "Tigrinya (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:660
msgid "tig_ER"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:660
msgid "Tigre (Eritrea)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:662
msgid "tk_TM"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:662
msgid "Turkmen (Turkmenistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:664
msgid "tl_PH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:664
msgid "Tagalog (Philippines)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:666
msgid "tn_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:666
msgid "Tswana (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:668
msgid "tr"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:668
msgid "Turkish"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:670
msgid "tr_CY"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:670
msgid "Turkish (Cyprus)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:672
msgid "tr_TR"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:672
msgid "Turkish (Turkey)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:674
msgid "ts_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:674
msgid "Tsonga (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:676
msgid "tt_RU"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:676
msgid "Tatar (Russia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:678
msgid "ug_CN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:678
msgid "Uighur (China)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:680
msgid "uk"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:680
msgid "Ukrainian"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:682
msgid "uk_UA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:682
msgid "Ukrainian (Ukraine)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:684
msgid "unm_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:684
msgid "Unami (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:686
msgid "ur"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:686
msgid "Urdu"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:688
msgid "ur_IN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:688
msgid "Urdu (India)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:690
msgid "ur_PK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:690
msgid "Urdu (Pakistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:692
msgid "uz"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:692
msgid "Uzbek"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:694
msgid "uz_UZ"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:694
msgid "Uzbek (Uzbekistan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:696
msgid "ve_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:696
msgid "Venda (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:698
msgid "vi"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:698
msgid "Vietnamese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:700
msgid "vi_VN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:700
msgid "Vietnamese (Vietnam)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:702
msgid "wa_BE"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:702
msgid "Walloon (Belgium)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:704
msgid "wae_CH"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:704
msgid "Walser (Switzerland)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:706
msgid "wal_ET"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:706
msgid "Wolaytta (Ethiopia)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:708
msgid "wo_SN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:708
msgid "Wolof (Senegal)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:710
msgid "xh_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:710
msgid "Xhosa (South Africa)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:712
msgid "yi_US"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:712
msgid "Yiddish (United States)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:714
msgid "yo_NG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:714
msgid "Yoruba (Nigeria)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:716
msgid "yue_HK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:716
msgid "Yue Chinese (Hong Kong)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:718
msgid "zh"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:718
msgid "Chinese"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:720
msgid "zh_CN"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:720
msgid "Chinese (China)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:722
msgid "zh_HK"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:722
msgid "Chinese (Hong Kong)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:724
msgid "zh_SG"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:724
msgid "Chinese (Singapore)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:726
msgid "zh_TW"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:726
msgid "Chinese (Taiwan)"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:728
msgid "zu_ZA"
msgstr ""

#: ../../docs/tutorials/i18n/locales.rst:728
msgid "Zulu (South Africa)"
msgstr ""

#: ../../docs/tutorials/gui/index.rst:2
msgid "GUI"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:4
msgid "GUI skinning"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:7
msgid "Oh, beautiful GUI!"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:9
msgid ""
"This tutorial is about advanced skinning of an user interface. Most games "
"generally don't need this, as they end up just relying on :ref:`Label "
"<class_Label>`, :ref:`TextureRect <class_TextureRect>`, :ref:`TextureButton "
"<class_TextureButton>` and :ref:`TextureProgress <class_TextureProgress>`."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:15
msgid ""
"However, many types of games often need complex user interfaces, like MMOs, "
"traditional RPGs, Simulators, Strategy, etc. These kinds of interface are "
"also common in some games that include editors to create content, or "
"interfaces for network connectivity."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:20
msgid ""
"Godot's user interface uses these kinds of control with the default theme, "
"but they can be skinned to resemble pretty much any kind of user interface."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:25
msgid "Theme"
msgstr "테마"

#: ../../docs/tutorials/gui/gui_skinning.rst:27
msgid ""
"The GUI is skinned through the :ref:`Theme <class_Theme>` resource. Theme "
"contains all the information required to change the entire visual styling of "
"all controls. Theme options are named, so it's not obvious which name "
"changes what (especially from code), but several tools are provided. The "
"ultimate place to look at what each theme option is for each control, which "
"will always be more up to date than any documentation, is the file `scene/"
"resources/default_theme/default_theme.cpp <https://github.com/godotengine/"
"godot/blob/master/scene/resources/default_theme/default_theme.cpp>`__. The "
"rest of this document will explain the different tools used to customize the "
"theme."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:38
msgid ""
"A Theme can be applied to any control in the scene. As a result, all "
"children and grand-children controls will use that same theme, too (unless "
"another theme is specified further down the tree). If a value is not found "
"in a theme, it will be searched in themes higher up in the hierarchy, "
"towards the root. If nothing was found, the default theme is used. This "
"system allows for flexible overriding of themes in complex user interfaces."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:47
msgid "Theme options"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:49
msgid "Each kind of option in a theme can be:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:51
msgid ""
"**An integer constant**: A single numerical constant. Generally used to "
"define spacing between components or alignment."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:53
msgid ""
"**A Color**: A single color, with or without transparency. Colors are "
"usually applied to fonts and icons."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:55
msgid ""
"**A Texture**: A single image. Textures are not often used, but when they "
"are, they represent handles to pick or icons in a complex control (such as a "
"file dialog)."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:58
msgid ""
"**A Font**: Every control that uses text can be assigned the fonts used to "
"draw strings."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:60
msgid ""
"**A StyleBox**: Stylebox is a resource that defines how to draw a panel in "
"varying sizes (more information on them later)."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:63
msgid "Every option is associated with:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:65
msgid "A name (the name of the option)"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:66
msgid "A Control (the name of the control)"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:68
msgid "An example usage:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:87
msgid ""
"In the example above, a new theme is created. The \"font_color\" option is "
"changed and then applied to a label. As a result, the label (and all "
"children and grandchildren labels) will use that color."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:91
msgid ""
"It is possible to override those options without using the theme directly, "
"and only for a specific control, by using the override API in :ref:`Control."
"add_color_override() <class_Control_method_add_color_override>`:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:106
msgid ""
"In the inline help of Godot (in the script tab) you can check which theme "
"options are overrideable, or check the :ref:`Control <class_Control>` class "
"reference."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:110
msgid "Customizing a control"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:112
msgid ""
"If only a few controls need to be skinned, it is often not necessary to "
"create a new theme. Controls offer their theme options as special kinds of "
"properties. If checked, overriding will take place:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:118
msgid ""
"As can be seen in the image above, theme options have little check boxes. If "
"checked, they can be used to override the value of the theme just for that "
"control."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:123
msgid "Creating a theme"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:125
msgid ""
"The simplest way to create a theme is to edit a theme resource. Create a "
"Theme from the resource menu; the editor will appear immediately. After "
"that, save it (for example, with the name mytheme.theme):"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:131
msgid ""
"This will create an empty theme that can later be loaded and assigned to "
"controls."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:135
msgid "Example: theming a button"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:137
msgid ""
"Take some assets (:download:`skin_assets.zip <files/skin_assets.zip>`), go "
"to the \"theme\" menu and select \"Add Class Item\":"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:142
msgid ""
"A menu will appear prompting the type of control to create. Select \"Button"
"\":"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:147
msgid ""
"Immediately, all button theme options will appear in the property editor, "
"where they can be edited:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:152
msgid ""
"From ``Styles``, open the \"Normal\" drop-down menu next to where it "
"probably says \"null\" and create a \"New StyleBoxTexture\", then edit it. A "
"texture stylebox basically contains a texture and the size of the margins "
"that will not stretch when the texture is stretched. This is called \"3x3\" "
"stretching:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:160
msgid ""
"Repeat the steps and add the other assets. There is no hover or disabled "
"image in the example files, so use the same stylebox as in normal. Set the "
"supplied font as the button font and change the font color to black. Soon, "
"your button will look different and retro:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:167
msgid ""
"Save this theme to the .theme file. Go to the 2D editor and create a few "
"buttons:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:172
msgid ""
"Now, go to the root node of the scene and locate the \"theme\" property, "
"replace it with the theme that was just created. It should look like this:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:177
msgid "Congratulations! You have created a reusable GUI Theme!"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:4
msgid "Custom GUI controls"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:7
msgid "So many controls..."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:9
msgid ""
"Yet there are never enough. Creating your own custom controls that act just "
"the way you want them to is an obsession of almost every GUI programmer. "
"Godot provides plenty of them, but they may not work exactly the way you "
"want. Before contacting the developers with a pull-request to support "
"diagonal scrollbars, at least it will be good to know how to create these "
"controls easily from script."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:17
msgid "Drawing"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:19
msgid ""
"For drawing, it is recommended to check the :ref:`doc_custom_drawing_in_2d` "
"tutorial. The same applies. Some functions are worth mentioning due to their "
"usefulness when drawing, so they will be detailed next:"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:24
msgid "Checking control size"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:26
msgid ""
"Unlike 2D nodes, \"size\" is important with controls, as it helps to "
"organize them in proper layouts. For this, the :ref:`Control.rect_size "
"<class_Control_property_rect_size>` property is provided. Checking it during "
"``_draw()`` is vital to ensure everything is kept in-bounds."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:33
msgid "Checking focus"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:35
msgid ""
"Some controls (such as buttons or text editors) might provide input focus "
"for keyboard or joypad input. Examples of this are entering text or pressing "
"a button. This is controlled with the :ref:`Control.focus_mode "
"<class_Control_property_focus_mode>` property. When drawing, and if the "
"control supports input focus, it is always desired to show some sort of "
"indicator (highlight, box, etc.) to indicate that this is the currently "
"focused control. To check for this status, the :ref:`Control.has_focus() "
"<class_Control_method_has_focus>` method exists. Example"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:69
msgid "Sizing"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:71
msgid ""
"As mentioned before, size is important to controls. This allows them to lay "
"out properly, when set into grids, containers, or anchored. Controls, most "
"of the time, provide a *minimum size* to help properly lay them out. For "
"example, if controls are placed vertically on top of each other using a :ref:"
"`VBoxContainer <class_VBoxContainer>`, the minimum size will make sure your "
"custom control is not squished by the other controls in the container."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:79
msgid ""
"To provide this callback, just override :ref:`Control.get_minimum_size() "
"<class_Control_method_get_minimum_size>`, for example:"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:96
msgid "Or alternatively, set it via function:"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:112
#: ../../docs/tutorials/viewports/viewports.rst:38
msgid "Input"
msgstr "입력"

#: ../../docs/tutorials/gui/custom_gui_controls.rst:114
msgid ""
"Controls provide a few helpers to make managing input events much easier "
"than regular nodes."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:118
msgid "Input events"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:120
msgid ""
"There are a few tutorials about input before this one, but it's worth "
"mentioning that controls have a special input method that only works when:"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:124
msgid "The mouse pointer is over the control."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:125
msgid ""
"The button was pressed over this control (control always captures input "
"until button is released)"
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:127
msgid ""
"Control provides keyboard/joypad focus via :ref:`Control.focus_mode "
"<class_Control_property_focus_mode>`."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:130
msgid ""
"This function is :ref:`Control._gui_input() "
"<class_Control_method__gui_input>`. Simply override it in your control. No "
"processing needs to be set."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:167
msgid ""
"For more information about events themselves, check the :ref:"
"`doc_inputevent` tutorial."
msgstr ""

#: ../../docs/tutorials/gui/custom_gui_controls.rst:173
msgid ""
"Controls also have many useful notifications for which no dedicated callback "
"exists, but which can be checked with the _notification callback:"
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:4
msgid "Size and anchors"
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:6
msgid ""
"If a game was always going to be run on the same device and at the same "
"resolution, positioning controls would be a simple matter of setting the "
"position and size of each one of them. Unfortunately, that is rarely the "
"case."
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:11
msgid ""
"Only TVs nowadays have a standard resolution and aspect ratio. Everything "
"else, from computer monitors to tablets, portable consoles and mobile phones "
"have different resolutions and aspect ratios."
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:15
msgid ""
"There are several ways to handle this, but for now, let's just imagine that "
"the screen resolution has changed and the controls need to be re-positioned. "
"Some will need to follow the bottom of the screen, others the top of the "
"screen, or maybe the right or left margins."
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:22
msgid ""
"This is done by editing the *margin* properties of controls. Each control "
"has four margins: left, right, bottom and top. By default, all of them "
"represent a distance in pixels relative to the top-left corner of the parent "
"control or (in case there is no parent control) the viewport."
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:29
msgid ""
"When horizontal (left,right) and/or vertical (top,bottom) anchors are "
"changed to END, the margin values become relative to the bottom-right corner "
"of the parent control or viewport."
msgstr ""

#: ../../docs/tutorials/gui/size_and_anchors.rst:35
msgid ""
"Here, the control is set to expand its bottom-right corner with that of the "
"parent, so when re-sizing the parent, the control will always cover it, "
"leaving a 20 pixel margin:"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:4
msgid "BBCode in RichTextLabel"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:9
msgid ""
":ref:`class_RichTextLabel` allows the display of complex text markup in a "
"control. It has a built-in API for generating the markup, but can also parse "
"a BBCode."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:12
msgid ""
"Note that the BBCode tags can also be used, to some extent, in the :ref:`XML "
"source of the class reference <doc_updating_the_class_reference>`."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:18
msgid ""
"For a ``RichTextLabel`` to work properly, it must be set up. That means "
"loading the intended fonts in the relevant properties:"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:24
#: ../../docs/development/cpp/inheritance_class_tree.rst:10
msgid "Reference"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:27
msgid "Command"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:27
#: ../../docs/community/contributing/updating_the_class_reference.rst:227
msgid "Tag"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:29
msgid "**bold**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:29
msgid "``[b]{text}[/b]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:29
msgid "Makes {text} bold."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:31
msgid "**italics**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:31
msgid "``[i]{text}[/i]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:31
msgid "Makes {text} italics."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:33
msgid "**underline**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:33
msgid "``[u]{text}[/u]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:33
msgid "Makes {text} underline."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:35
msgid "**strikethrough**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:35
msgid "``[s]{text}[/s]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:35
msgid "Makes {text} strikethrough."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:37
msgid "**code**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:37
msgid "``[code]{text}[/code]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:37
msgid "Makes {text} monospace."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:39
msgid "**center**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:39
msgid "``[center]{text}[/center]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:39
msgid "Makes {text} centered."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:41
msgid "**right**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:41
msgid "``[right]{text}[/right]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:41
msgid "Makes {text} right-aligned."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:43
msgid "**fill**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:43
msgid "``[fill]{text}[/fill]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:43
msgid "Makes {text} fill width."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:45
msgid "**indent**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:45
msgid "``[indent]{text}[/indent]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:45
msgid "Increase indent level of {text}."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:47
msgid "**url**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:47
msgid "``[url]{url}[/url]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:47
msgid "Show {url} as such."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:49
msgid "**url (ref)**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:49
msgid "``[url=<url>]{text}[/url]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:49
msgid "Makes {text} reference <url>."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:51
msgid "**image**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:51
msgid "``[img]{path}[/img]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:51
msgid "Insert image at resource {path}."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:53
msgid "**font**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:53
msgid "``[font=<path>]{text}[/font]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:53
msgid "Use custom font at <path> for {text}."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:55
msgid "**color**"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:55
msgid "``[color=<code/name>]{text}[/color]``"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:55
msgid "Change {text} color; use name or # format, such as #ff00ff."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:59
msgid "Built-in color names"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:61
msgid "List of valid color names for the [color=<name>] tag:"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:63
msgid "aqua"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:64
msgid "black"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:65
msgid "blue"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:66
msgid "fuchsia"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:67
msgid "gray"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:68
msgid "green"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:69
msgid "lime"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:70
msgid "maroon"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:71
msgid "navy"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:72
msgid "purple"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:73
msgid "red"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:74
msgid "silver"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:75
msgid "teal"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:76
msgid "white"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:77
msgid "yellow"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:80
msgid "Hexadecimal color codes"
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:82
msgid ""
"For opaque RGB colors, any valid 6-digit hexadecimal code is supported, e.g. "
"``[color=#ffffff]white[/color]``."
msgstr ""

#: ../../docs/tutorials/gui/bbcode_in_richtextlabel.rst:84
msgid ""
"For transparent RGB colors, any 8-digit hexadecimal code can be used, e.g. "
"``[color=#88ffffff]translucent white[/color]``. In this case, note that the "
"alpha channel is the **first** component of the color code, not the last one."
msgstr ""

#: ../../docs/tutorials/viewports/index.rst:2
#: ../../docs/tutorials/viewports/viewports.rst:4
msgid "Viewports"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:9
msgid ""
"Think of a :ref:`Viewport <class_Viewport>` as a screen onto which the game "
"is projected. In order to see the game, we need to have a surface on which "
"to draw it; that surface is the Root :ref:`Viewport <class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:16
msgid ""
":ref:`Viewports <class_Viewport>` can also be added to the scene so that "
"there are multiple surfaces to draw on. When we are drawing to a :ref:"
"`Viewport <class_Viewport>` that is not the Root, we call it a render "
"target. We can access the contents of a render target by accessing its "
"corresponding :ref:`texture <class_ViewportTexture>`. By using a :ref:"
"`Viewport <class_Viewport>` as a render target, we can either render "
"multiple scenes simultaneously or we can render to a :ref:`texture "
"<class_ViewportTexture>` which is applied to an object in the scene, for "
"example a dynamic skybox."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:25
msgid ""
":ref:`Viewports <class_Viewport>` have a variety of use cases, including:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:27
msgid "Rendering 3D objects within a 2D game"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:28
msgid "Rendering 2D elements in a 3D game"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:29
msgid "Rendering dynamic textures"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:30
msgid "Generating procedural textures at runtime"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:31
msgid "Rendering multiple cameras in the same scene"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:33
msgid ""
"What all these use cases have in common is that you are given the ability to "
"draw objects to a texture as if it were another screen and can then choose "
"what to do with the resulting texture."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:40
msgid ""
":ref:`Viewports <class_Viewport>` are also responsible for delivering "
"properly adjusted and scaled input events to all their children nodes. "
"Typically, input is received by the nearest :ref:`Viewport <class_Viewport>` "
"in the tree, but you can set :ref:`Viewports <class_Viewport>` not to "
"receive input by checking 'Disable Input' to 'on'; this will allow the next "
"nearest :ref:`Viewport <class_Viewport>` in the tree to capture the input."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:48
msgid ""
"For more information on how Godot handles input, please read the :ref:`Input "
"Event Tutorial<doc_inputevent>`."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:51
msgid "Listener"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:53
msgid ""
"Godot supports 3D sound (in both 2D and 3D nodes); more on this can be found "
"in the :ref:`Audio Streams Tutorial<doc_audio-streams>`. For this type of "
"sound to be audible, the :ref:`Viewport <class_Viewport>` needs to be "
"enabled as a listener (for 2D or 3D). If you are using a custom :ref:"
"`Viewport <class_Viewport>` to display your :ref:`World <class_World>`, "
"don't forget to enable this!"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:60
msgid "Cameras (2D & 3D)"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:62
msgid ""
"When using a :ref:`Camera <class_Camera>` / :ref:`Camera2D "
"<class_Camera2D>`, cameras will always display on the closest parent :ref:"
"`Viewport <class_Viewport>` (going towards the root). For example, in the "
"following hierarchy:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:69
msgid ""
"CameraA will display on the Root :ref:`Viewport <class_Viewport>` and it "
"will draw MeshA. CameraB will be captured by the :ref:`Viewport "
"<class_Viewport>` Node along with MeshB. Even though MeshB is in the scene "
"hierarchy, it will still not be drawn to the Root :ref:`Viewport "
"<class_Viewport>`. Similarly MeshA will not be visible from the :ref:"
"`Viewport <class_Viewport>` node because :ref:`Viewport <class_Viewport>` "
"nodes only capture nodes below them in the hierarchy."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:75
msgid ""
"There can only be one active camera per :ref:`Viewport <class_Viewport>`, so "
"if there is more than one, make sure that the desired one has the \"current"
"\" property set, or make it the current camera by calling:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:84
msgid "Scale & stretching"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:86
msgid ""
":ref:`Viewports <class_Viewport>` have a \"size\" property, which represents "
"the size of the :ref:`Viewport <class_Viewport>` in pixels. For :ref:"
"`Viewports <class_Viewport>` which are children of :ref:`ViewportContainers "
"<class_viewportcontainer>`, these values are overridden, but for all others, "
"this sets their resolution."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:90
msgid ""
"It is also possible to scale the 2D content and make the :ref:`Viewport "
"<class_Viewport>` resolution different from the one specified in size, by "
"calling:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:98
msgid ""
"The root :ref:`Viewport <class_Viewport>` uses this for the stretch options "
"in the project settings. For more information on scaling and stretching "
"visit the :ref:`Multiple Resolutions Tutorial <doc_multiple_resolutions>`"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:102
msgid "Worlds"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:104
msgid ""
"For 3D, a :ref:`Viewport <class_Viewport>` will contain a :ref:`World "
"<class_World>`. This is basically the universe that links physics and "
"rendering together. Spatial-base nodes will register using the :ref:`World "
"<class_World>` of the closest :ref:`Viewport <class_Viewport>`. By default, "
"newly created :ref:`Viewports <class_Viewport>` do not contain a :ref:`World "
"<class_World>` but use the same as their parent :ref:`Viewport "
"<class_Viewport>` (the root :ref:`Viewport <class_Viewport>` always contains "
"a :ref:`World <class_World>`, which is the one objects are rendered to by "
"default). A :ref:`World <class_World>` can be set in a :ref:`Viewport "
"<class_Viewport>` using the \"world\" property, and that will separate all "
"children nodes of that :ref:`Viewport <class_Viewport>` from interacting "
"with the parent :ref:`Viewport's <class_Viewport>` :ref:`World "
"<class_World>`. This is especially useful in scenarios where, for example, "
"you might want to show a separate character in 3D imposed over the game "
"(like in StarCraft)."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:116
msgid ""
"As a helper for situations where you want to create :ref:`Viewports "
"<class_Viewport>` that display single objects and don't want to create a :"
"ref:`World <class_World>`, :ref:`Viewport <class_Viewport>` has the option "
"to use its own :ref:`World <class_World>`. This is useful when you want to "
"instance 3D characters or objects in a 2D :ref:`World <class_World2D>`."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:121
msgid ""
"For 2D, each :ref:`Viewport <class_Viewport>` always contains its own :ref:"
"`World2D <class_World2D>`. This suffices in most cases, but in case sharing "
"them may be desired, it is possible to do so by setting the :ref:`Viewport's "
"<class_Viewport>` :ref:`World2D <class_World2D>` manually."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:125
msgid ""
"For an example of how this works, see the demo projects `3D in 2D <https://"
"github.com/godotengine/godot-demo-projects/tree/master/viewport/3d_in_2d>`_ "
"and `2D in 3D <https://github.com/godotengine/godot-demo-projects/tree/"
"master/viewport/2d_in_3d>`_ respectively."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:128
msgid "Capture"
msgstr "캡쳐"

#: ../../docs/tutorials/viewports/viewports.rst:130
msgid ""
"It is possible to query a capture of the :ref:`Viewport <class_Viewport>` "
"contents. For the root :ref:`Viewport <class_Viewport>`, this is effectively "
"a screen capture. This is done with the following code:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:147
msgid ""
"But if you use this in _ready() or from the first frame of the :ref:"
"`Viewport's <class_Viewport>` initialization, you will get an empty texture "
"because there is nothing to get as texture. You can deal with it using (for "
"example):"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:158
msgid ""
"If the returned image is empty, capture still didn't happen, wait a little "
"more, as Godot's rendering API is asynchronous. For a working example of "
"this, check out the `Screen Capture example <https://github.com/godotengine/"
"godot-demo-projects/tree/master/viewport/screen_capture>`_ in the demo "
"projects"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:163
msgid "Viewport Container"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:165
msgid ""
"If the :ref:`Viewport <class_Viewport>` is a child of a :ref:"
"`ViewportContainer <class_viewportcontainer>`, it will become active and "
"display anything it has inside. The layout looks like this:"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:169
msgid ""
"The :ref:`Viewport <class_Viewport>` will cover the area of its parent :ref:"
"`ViewportContainer <class_viewportcontainer>` completely if stretch is set "
"to true in :ref:`ViewportContainer <class_viewportcontainer>`. Note: The "
"size of the :ref:`ViewportContainer <class_viewportcontainer>` cannot be "
"smaller than the size of the :ref:`Viewport <class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:176
msgid ""
"Due to the fact that the :ref:`Viewport <class_Viewport>` is an entryway "
"into another rendering surface, it exposes a few rendering properties that "
"can be different from the project settings. The first is MSAA; you can "
"choose to use a different level of MSAA for each :ref:`Viewport "
"<class_Viewport>`; the default behavior is DISABLED. You can also set the :"
"ref:`Viewport <class_Viewport>` to use HDR, HDR is very useful for when you "
"want to store values in the texture that are outside the range 0.0 - 1.0."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:181
msgid ""
"If you know how the :ref:`Viewport <class_Viewport>` is going to be used, "
"you can set its Usage to either 3D or 2D. Godot will then restrict how the :"
"ref:`Viewport <class_Viewport>` is drawn to in accordance with your choice; "
"default is 3D."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:184
msgid ""
"Godot also provides a way of customizing how everything is drawn inside :ref:"
"`Viewports <class_Viewport>` using “Debug Draw”. Debug Draw allows you to "
"specify one of four options for how the :ref:`Viewport <class_Viewport>` "
"will display things drawn inside it. Debug Draw is disabled by default."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:190
msgid "*A scene drawn with Debug Draw disabled*"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:192
msgid ""
"The other three options are Unshaded, Overdraw, and Wireframe. Unshaded "
"draws the scene without using lighting information so all the objects appear "
"flatly colored the color of their albedo."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:198
msgid "*The same scene with Debug Draw set to Unshaded*"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:200
msgid ""
"Overdraw draws the meshes semi-transparent with an additive blend so you can "
"see how the meshes overlap."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:204
msgid "*The same scene with Debug Draw set to Overdraw*"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:206
msgid ""
"Lastly, Wireframe draws the scene using only the edges of triangles in the "
"meshes. NOTE: As of this writing (v3.0.2), wireframe mode is not functional "
"and currently renders the scene normally."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:210
msgid "Render target"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:212
msgid ""
"When rendering to a :ref:`Viewport <class_Viewport>`, whatever is inside "
"will not be visible in the scene editor. To display the contents, you have "
"to draw the :ref:`Viewport's <class_Viewport>` :ref:`ViewportTexture "
"<class_ViewportTexture>` somewhere. This can be requested via code using "
"(for example):"
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:222
msgid ""
"Or it can be assigned in the editor by selecting \"New ViewportTexture\""
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:226
msgid ""
"and then selecting the :ref:`Viewport <class_Viewport>` you want to use."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:230
msgid ""
"Every frame, the :ref:`Viewport <class_Viewport>`'s texture is cleared away "
"with the default clear color (or a transparent color if Transparent BG is "
"set to true). This can be changed by setting Clear Mode to Never or Next "
"Frame. As the name implies, Never means the texture will never be cleared, "
"while next frame will clear the texture on the next frame and then set "
"itself to Never."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:235
msgid ""
"By default, re-rendering of the :ref:`Viewport <class_Viewport>` happens "
"when the :ref:`Viewport <class_Viewport>`'s :ref:`ViewportTexture "
"<class_ViewportTexture>` has been drawn in a frame. If visible, it will be "
"rendered; otherwise, it will not. This behavior can be changed to manual "
"rendering (once), or always render, no matter if visible or not. This "
"flexibility allows users to render an image once and then use the texture "
"without incurring the cost of rendering every frame."
msgstr ""

#: ../../docs/tutorials/viewports/viewports.rst:243
msgid ""
"Make sure to check the Viewport demos! Viewport folder in the demos archive "
"available to download, or https://github.com/godotengine/godot-demo-projects/"
"tree/master/viewport"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:4
msgid "Multiple resolutions"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:7
msgid "Base size"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:9
msgid ""
"A base size for the window can be specified in the project settings under "
"\"Display\", \"Window\"."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:14
msgid ""
"However, what it does is not completely obvious; the engine will *not* "
"attempt to switch the monitor to this resolution. Rather, think of this "
"setting as the \"design size\", i.e. the size of the area that you work with "
"in the editor. This setting corresponds directly to the size of the blue "
"rectangle in the 2D editor."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:20
msgid ""
"There is often a need to support devices with screen and window sizes that "
"are different from this base size. Godot offers many ways to control how the "
"viewport will be resized and stretched to different screen sizes."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:26
msgid "Resizing"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:28
msgid ""
"There are several types of devices, with several types of screens, which in "
"turn have different pixel density and resolutions. Handling all of them can "
"be a lot of work, so Godot tries to make the developer's life a little "
"easier. The :ref:`Viewport <class_Viewport>` node has several functions to "
"handle resizing, and the root node of the scene tree is always a viewport "
"(scenes loaded are instanced as a child of it, and it can always be accessed "
"by calling ``get_tree().get_root()`` or ``get_node(\"/root\")``)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:37
msgid ""
"In any case, while changing the root Viewport params is probably the most "
"flexible way to deal with the problem, it can be a lot of work, code and "
"guessing, so Godot provides a simple set of parameters in the project "
"settings to handle multiple resolutions."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:43
msgid "Stretch settings"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:45
msgid ""
"Stretch settings are located in the project settings, it's just a bunch of "
"configuration variables that provide several options:"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:51
msgid "Stretch Mode"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:53
msgid ""
"The \"Stretch Mode\" setting defines how the base size is stretched to fit "
"the resolution of the window or screen."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:58
msgid ""
"The animations below use a \"base size\" of just 16×9 pixels to demonstrate "
"the effect of different stretch modes. A single sprite, also 16×9 pixels in "
"size, covers the entire viewport, and a diagonal :ref:`Line2D "
"<class_Line2D>` is added on top of it:"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:68
msgid ""
"Stretch Mode = **Disabled** (default): No stretching happens. One unit in "
"the scene corresponds to one pixel on the screen. In this mode, the "
"\"Stretch Aspect\" setting has no effect."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:72
msgid ""
"This is a good option if you want full control over every screen pixel, and "
"is probably the best option for 3D games."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:77
msgid ""
"Stretch Mode = **2D**: In this mode, the size specified in display/width and "
"display/height in the project settings will be stretched to cover the whole "
"screen (taking the \"Stretch Aspect\" setting into account). This means that "
"everything will be rendered directly at the target resolution. 3D will be "
"largely unaffected, while in 2D there is no longer a 1:1 correspondence "
"between sprite pixels and screen pixels, which may result in scaling "
"artifacts."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:85
msgid ""
"This is a good option if your 2D artwork has a sufficiently high resolution "
"and does not require pixel-perfect rendering. Consider enabling texture "
"filtering and mipmapping on your 2D textures and fonts."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:92
msgid ""
"Stretch Mode = **Viewport**: Viewport scaling means that the size of the "
"root :ref:`Viewport <class_Viewport>` is set precisely to the base size "
"specified in the \"Display\" section of the project settings. The scene is "
"rendered to this viewport first. Finally, this viewport is scaled to fit the "
"screen (taking the \"Stretch Aspect\" setting into account)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:99
msgid ""
"This mode is useful when working with pixel-precise games, or for the sake "
"of rendering to a lower resolution for improving performance."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:105
msgid "Stretch Aspect"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:107
msgid ""
"The second setting is the stretch aspect. Note that this only takes effect "
"if \"Stretch Mode\" is set to something other than \"disabled\"."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:110
msgid ""
"In the animations below, you will notice gray and black areas. The black "
"areas are added by the engine and cannot be drawn into. The gray areas are "
"part of your scene, and can be drawn to. The gray areas correspond to the "
"region outside the blue frame you see in the 2D editor."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:115
msgid ""
"Stretch Aspect = **Ignore**: Ignore the aspect ratio when stretching the "
"screen. This means that the original resolution will be stretched to exactly "
"fill the screen, even if it's wider or narrower. This may result in "
"nonuniform stretching: things looking wider or taller than designed."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:123
msgid ""
"Stretch Aspect = **Keep**: Keep aspect ratio when stretching the screen. "
"This means that the viewport retains its original size regardless of the "
"screen resolution, and black bars will be added to the top/bottom of the "
"screen (\"letterboxing\") or the sides (\"pillarboxing\")."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:129
msgid ""
"This is a good option if you know the aspect ratio of your target devices in "
"advance, or if you don't want to handle different aspect ratios."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:135
msgid ""
"Stretch Aspect = **Keep Width**: Keep aspect ratio when stretching the "
"screen. If the screen is wider than the base size, black bars are added at "
"the left and right (pillarboxing). But if the screen is taller than the base "
"resolution, the viewport will be grown in the vertical direction (and more "
"content will be visible to the bottom). You can also think of this as "
"\"Expand Vertically\"."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:142
msgid ""
"This is usually the best option for creating GUIs or HUDs that scale, so "
"some controls can be anchored to the bottom (:ref:`doc_size_and_anchors`)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:148
msgid ""
"Stretch Aspect = **Keep Height**: Keep aspect ratio when stretching the "
"screen. If the screen is taller than the base size, black bars are added at "
"the top and bottom (letterboxing). But if the screen is wider than the base "
"resolution, the viewport will be grown in the horizontal direction (and more "
"content will be visible to the right). You can also think of this as "
"\"Expand Horizontally\"."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:155
msgid ""
"This is usually the best option for 2D games that scroll horizontally (like "
"runners or platformers)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:160
msgid ""
"Stretch Aspect = **Expand**: Keep aspect ratio when stretching the screen, "
"but keep neither the base width nor height. Depending on the screen aspect "
"ratio, the viewport will either be larger in the horizontal direction (if "
"the screen is wider than the base size) or in the vertical direction (if the "
"screen is taller than the original size)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:170
msgid "Stretch Shrink"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:172
msgid ""
"The \"Shrink\" setting allows you to add an extra scaling factor on top of "
"what the \"Stretch\" options above already provide. The default value of 1 "
"means that no scaling occurs."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:176
msgid ""
"If, for example, you set \"Shrink\" to 4 and leave \"Stretch Mode\" on "
"\"Disabled\", each unit in your scene will correspond to 4×4 pixels on the "
"screen."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:180
msgid ""
"If \"Stretch Mode\" is set to something other than \"Disabled\", the size of "
"the root viewport is scaled down by the \"Shrink\" factor, and pixels in the "
"output are scaled up by the same amount. This is rarely useful for 2D games, "
"but can be used to increase performance in 3D games by rendering them at a "
"lower resolution."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:187
msgid "From scripts"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:189
msgid ""
"To configure stretching at runtime from a script, use the ``get_tree()."
"set_screen_stretch()`` function (see :ref:`SceneTree.set_screen_stretch() "
"<class_SceneTree_method_set_screen_stretch>`)."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:4
msgid "Using a Viewport as a texture"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:9
msgid ""
"This tutorial will introduce you to using the :ref:`Viewport "
"<class_Viewport>` as a texture that can be applied to 3D objects. In order "
"to do so, it will walk you through the process of making a procedural planet "
"like the one below:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:15
msgid ""
"This tutorial does not cover how to code a dynamic atmosphere like the one "
"this planet has."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:17
msgid ""
"This tutorial assumes you are familiar with how to set up a basic scene "
"including: a :ref:`Camera <class_Camera>`, a :ref:`light source "
"<class_OmniLight>`, a :ref:`Mesh Instance <class_MeshInstance>` with a :ref:"
"`Primitive Mesh <class_PrimitiveMesh>`, and applying a :ref:`Spatial "
"Material <class_SpatialMaterial>` to the mesh. The focus will be on using "
"the :ref:`Viewport <class_Viewport>` to dynamically create textures that can "
"be applied to the mesh."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:23
#, fuzzy
msgid "During the course of this tutorial, we'll cover the following topics:"
msgstr "적 씬은 다음 노드들을 사용할 것입니다:"

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:25
msgid "How to use a :ref:`Viewport <class_Viewport>` as a render texture"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:26
msgid "Mapping a texture to a sphere with equirectangular mapping"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:27
msgid "Fragment shader techniques for procedural planets"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:28
msgid ""
"Setting a Roughness map from a :ref:`Viewport Texture "
"<class_ViewportTexture>`"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:31
msgid "Setting up the Viewport"
msgstr "뷰포트(Viewport) 설정하기"

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:33
msgid "First, add a :ref:`Viewport <class_Viewport>` to the scene."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:35
msgid ""
"Next, set the size of the :ref:`Viewport <class_Viewport>` to ``(1024, "
"512)``. The :ref:`Viewport <class_Viewport>` can actually be any size so "
"long as the width is double the height. The width needs to be double the "
"height so that the image will accurately map onto the sphere, as we will be "
"using equirectangular projection, but more on that later."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:42
msgid ""
"Next, disable HDR and disable 3D. We don't need HDR because our planet's "
"surface will not be especially bright, so values between ``0`` and ``1`` "
"will be fine. And we will be using a :ref:`ColorRect <class_ColorRect>` to "
"render the surface, so we don't need 3D either."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:46
msgid ""
"Select the Viewport and add a :ref:`ColorRect <class_ColorRect>` as a child."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:48
msgid ""
"Set the anchors \"Right\" and \"Bottom\" to ``1``, then make sure all the "
"margins are set to ``0``. This will ensure that the :ref:`ColorRect "
"<class_ColorRect>` takes up the entire :ref:`Viewport <class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:53
msgid ""
"Next, we add a :ref:`Shader Material <class_ShaderMaterial>` to the :ref:"
"`ColorRect <class_ColorRect>` (ColorRect > CanvasItem > Material > Material "
"> ``New ShaderMaterial``)."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:55
msgid ""
"Basic familiarity with shading is recommended for this tutorial. However, "
"even if you are new to shaders, all the code will be provided, so you should "
"have no problem following along."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:58
msgid ""
"ColorRect > CanvasItem > Material > Material > click / Edit > ShaderMaterial "
"> Shader > ``New Shader`` > click / Edit:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:68
msgid "The above code renders a gradient like the one below."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:72
msgid ""
"Now we have the basics of a :ref:`Viewport <class_Viewport>` that we render "
"to and we have a unique image that we can apply to the sphere."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:76
msgid "Applying the texture"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:78
msgid ""
"MeshInstance > GeometryInstance > Geometry > Material Override > ``New "
"SpatialMaterial``:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:80
msgid ""
"Now we go into the :ref:`Mesh Instance <class_MeshInstance>` and add a :ref:"
"`Spatial Material <class_SpatialMaterial>` to it. No need for a special :ref:"
"`Shader Material <class_ShaderMaterial>` (although that would be a good idea "
"for more advanced effects, like the atmosphere in the example above)."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:84
msgid ""
"MeshInstance > GeometryInstance > Geometry > Material Override > ``click`` / "
"``Edit``:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:86
msgid ""
"Open the newly created :ref:`Spatial Material <class_SpatialMaterial>` and "
"scroll down to the \"Albedo\" section and click beside the \"Texture\" "
"property to add an Albedo Texture. Here we will apply the texture we made. "
"Choose \"New ViewportTexture\""
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:92
msgid ""
"Then, from the menu that pops up, select the Viewport that we rendered to "
"earlier."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:96
msgid ""
"Your sphere should now be colored in with the colors we rendered to the "
"Viewport."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:100
msgid ""
"Notice the ugly seam that forms where the texture wraps around? This is "
"because we are picking a color based on UV coordinates and UV coordinates do "
"not wrap around the texture. This is a classic problem in 2D map projection. "
"Game developers often have a 2-dimensional map they want to project onto a "
"sphere, but when it wraps around, it has large seams. There is an elegant "
"workaround for this problem that we will illustrate in the next section."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:107
msgid "Making the planet texture"
msgstr "행성 텍스쳐 만들기"

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:109
msgid ""
"So now, when we render to our :ref:`Viewport <class_Viewport>`, it appears "
"magically on the sphere. But there is an ugly seam created by our texture "
"coordinates. So how do we get a range of coordinates that wrap around the "
"sphere in a nice way? One solution is to use a function that repeats on the "
"domain of our texture. ``sin`` and ``cos`` are two such functions. Let's "
"apply them to the texture and see what happens."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:120
msgid ""
"Not too bad. If you look around, you can see that the seam has now "
"disappeared, but in its place, we have pinching at the poles. This pinching "
"is due to the way Godot maps textures to spheres in its :ref:`Spatial "
"Material <class_SpatialMaterial>`. It uses a projection technique called "
"equirectangular projection, which translates a spherical map onto a 2D plane."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:125
msgid ""
"If you are interested in a little extra information on the technique, we "
"will be converting from spherical coordinates into Cartesian coordinates. "
"Spherical coordinates map the longitude and latitude of the sphere, while "
"Cartesian coordinates are, for all intents and purposes, a vector from the "
"center of the sphere to the point."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:130
msgid ""
"For each pixel, we will calculate its 3D position on the sphere. From that, "
"we will use 3D noise to determine a color value. By calculating the noise in "
"3D, we solve the problem of the pinching at the poles. To understand why, "
"picture the noise being calculated across the surface of the sphere instead "
"of across the 2D plane. When you calculate across the surface of the sphere, "
"you never hit an edge, and hence you never create a seam or a pinch point on "
"the pole. The following code converts the ``UVs`` into Cartesian coordinates."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:149
msgid "And if we use ``unit`` as an output ``COLOR`` value, we get:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:153
msgid ""
"Now that we can calculate the 3D position of the surface of the sphere, we "
"can use 3D noise to make the planet. We will be using this noise function "
"directly from a `Shadertoy <https://www.shadertoy.com/view/Xsl3Dl>`_:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:181
msgid ""
"All credit goes to the author, Inigo Quilez. It is published under the "
"``MIT`` licence."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:183
msgid ""
"Now to use ``noise``, add the following to the    ``fragment`` function:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:192
msgid "In order to highlight the texture, we set the material to unshaded."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:194
msgid ""
"You can see now that the noise indeed wraps seamlessly around the sphere. "
"Although this looks nothing like the planet you were promised. So let's move "
"onto something more colorful."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:198
msgid "Coloring the planet"
msgstr "행성 색칠하기"

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:200
msgid ""
"Now to make the planet colors. While there are many ways to do this, for "
"now, we will stick with a gradient between water and land."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:203
msgid ""
"To make a gradient in GLSL, we use the ``mix`` function. ``mix`` takes two "
"values to interpolate between and a third argument to choose how much to "
"interpolate between them; in essence, it *mixes* the two values together. In "
"other APIs, this function is often called ``lerp``. However, ``lerp`` is "
"typically reserved for mixing two floats together; ``mix`` can take any "
"values whether it be floats or vector types."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:213
msgid ""
"The first color is blue for the ocean. The second color is a kind of reddish "
"color (because all alien planets need red terrain). And finally, they are "
"mixed together by ``n * 0.5 + 0.5``. ``n`` smoothly varies between ``-1`` "
"and ``1``. So we map it into the ``0-1`` range that ``mix`` expects. Now you "
"can see that the colors change between blue and red."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:220
msgid ""
"That is a little more blurry than we want. Planets typically have a "
"relatively clear separation between land and sea. In order to do that, we "
"will change the last term to ``smoothstep(-0.1, 0.0, n)``. And thus the "
"whole line becomes:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:228
msgid ""
"What ``smoothstep`` does is return ``0`` if the third argument is below the "
"first and ``1`` if the third argument is larger than the second and smoothly "
"blends between ``0`` and ``1`` if the third number is between the first and "
"the second. So in this line, ``smoothstep`` returns ``0`` whenever ``n`` is "
"less than ``-0.1`` and it returns ``1`` whenever ``n`` is above ``0``."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:235
msgid ""
"One more thing to make this a little more planet-y. The land shouldn't be so "
"blobby; let's make the edges a little rougher. A trick that is often used in "
"shaders to make rough looking terrain with noise is to layer levels of noise "
"over one another at various frequencies. We use one layer to make the "
"overall blobby structure of the continents. Then another layer breaks up the "
"edges a bit, and then another, and so on. What we will do is calculate ``n`` "
"with four lines of shader code instead of just one. ``n`` becomes:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:249
msgid "And now the planet looks like:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:253
msgid "And with shading turned back on, it looks like:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:258
msgid "Making an ocean"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:260
msgid ""
"One final thing to make this look more like a planet. The ocean and the land "
"reflect light differently. So we want the ocean to shine a little more than "
"the land. We can do this by passing a fourth value into the ``alpha`` "
"channel of our output ``COLOR`` and using it as a Roughness map."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:268
msgid ""
"This line returns ``0.3`` for water and ``1.0`` for land. This means that "
"the land is going to be quite rough, while the water will be quite smooth."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:271
msgid ""
"And then, in the material, under the \"Metallic\" section, make sure "
"``Metallic`` is set to ``0`` and ``Specular`` is set to ``1``. The reason "
"for this is the water reflects light really well, but isn't metallic. These "
"values are not physically accurate, but they are good enough for this demo."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:275
msgid ""
"Next, under the \"Roughness\" section, set ``Roughness`` to ``1`` and set "
"the roughness texture to a :ref:`Viewport Texture <class_ViewportTexture>` "
"pointing to our planet texture :ref:`Viewport <class_Viewport>`. Finally, "
"set the ``Texture Channel`` to ``Alpha``. This instructs the renderer to use "
"the ``alpha`` channel of our output ``COLOR`` as the ``Roughness`` value."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:282
msgid ""
"You'll notice that very little changes except that the planet is no longer "
"reflecting the sky. This is happening because, by default, when something is "
"rendered with an alpha value, it gets drawn as a transparent object over the "
"background. And since the default background of the :ref:`Viewport "
"<class_Viewport>` is opaque, the ``alpha`` channel of the :ref:`Viewport "
"Texture <class_ViewportTexture>` is ``1``, resulting in the planet texture "
"being drawn with slightly fainter colors and a ``Roughness`` value of ``1`` "
"everywhere. To correct this, we go into the :ref:`Viewport <class_Viewport>` "
"and set \"Transparent Bg\" to on. Since we are now rendering one transparent "
"object on top of another, we want to enable ``blend_premul_alpha``:"
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:295
msgid ""
"This pre-multiplies the colors by the ``alpha`` value and then blends them "
"correctly together. Typically, when blending one transparent color on top of "
"another, even if the background has an ``alpha`` of ``0`` (as it does in "
"this case), you end up with weird color bleed issues. Setting "
"``blend_premul_alpha`` fixes that."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:299
msgid ""
"Now the planet should look like it is reflecting light on the ocean but not "
"the land. If you haven't done so already, add an :ref:`OmniLight "
"<class_OmniLight>` to the scene so you can move it around and see the effect "
"of the reflections on the ocean."
msgstr ""

#: ../../docs/tutorials/viewports/using_viewport_as_texture.rst:305
msgid ""
"And there you have it. A procedural planet generated using a :ref:`Viewport "
"<class_Viewport>`."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:4
msgid "Custom post-processing"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:9
msgid ""
"Godot provides many post-processing effects out of the box, including Bloom, "
"DOF, and SSAO. Sometimes you want to write your own custom effect. Here's "
"how you can do so."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:12
msgid ""
"Post-processing effects are shaders applied to a frame after Godot rendered "
"it. You first want to render your scene into a :ref:`Viewport "
"<class_Viewport>`, then render the ``Viewport`` inside a :ref:"
"`ViewportTexture <class_ViewportTexture>` and show it on the screen."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:16
msgid ""
"The easiest way to implement a custom post-processing shader is to use "
"Godot's built-in ability to read from the screen texture. If you're not "
"familiar with this, you should read the :ref:`Screen Reading Shaders "
"Tutorial <doc_screen-reading_shaders>` first."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:22
msgid ""
"As of the time of writing, Godot does not support rendering to multiple "
"buffers at the same time. Your post-processing shader will not have access "
"to normals or other render passes. You only have access to the rendered "
"frame."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:27
msgid "Single pass post-processing"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:29
msgid ""
"You will need a ``Viewport`` to render your scene to, and a scene to render "
"your ``Viewport`` on the screen. You can use a :ref:`ViewportContainer "
"<class_ViewportContainer>` to display your ``Viewport`` on the entire screen "
"or inside another :ref:`Control <class_Control>` node."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:36
msgid ""
"Rendering using a ``Viewport`` gives you control over how the scene render, "
"including the framerate, and you can use the ``ViewportContainer`` to render "
"3D objects in a 2D scene."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:40
msgid ""
"For this demo, we will use a :ref:`Node2D <class_Node2D>` with a "
"``ViewportContainer`` and finally a ``Viewport``. Your **Scene** tab should "
"look like this:"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:45
msgid ""
"Inside the ``Viewport``, you can have whatever you want. This will contain "
"your main scene. For this tutorial, we will use a field of random boxes:"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:50
msgid ""
"Add a new :ref:`ShaderMaterial <class_ShaderMaterial>` to the "
"``ViewportContainer``, and assign a new shader resource to it. You can "
"access your rendered ``Viewport`` with the built-in ``TEXTURE`` uniform."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:55
msgid ""
"You can choose not to use a ``ViewportContainer``, but if you do so, you "
"will need to create your own uniform in the shader and pass the ``Viewport`` "
"texture in manually, like so:"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:64
msgid "And you can pass the texture into the shader from GDScript like so:"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:72
msgid ""
"Copy the following code to your shader. The above code is a single pass edge "
"detection filter, a `Sobel filter <https://en.wikipedia.org/wiki/"
"Sobel_operator>`_."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:94
msgid ""
"The Sobel filter reads pixels in a 9x9 grid around the current pixel and "
"adds them together, using weight. What makes it interesting is that it "
"assigns weights to each pixel; +1 for each of the eight around the center "
"and -8 for the center pixel. The choice of weights is called a \"kernel\". "
"You can use different kernels to create edge detection filters, outlines, "
"and all sorts of effects."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:102
msgid "Multi-pass post-processing"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:104
msgid ""
"Some post-processing effects like blur are resource intensive. If you break "
"them down in multiple passes however, you can make them run a lot faster. In "
"a multipass material, each pass takes the result from the previous pass as "
"an input and processes it."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:108
msgid ""
"To make a multi-pass post-processing shader, you stack ``Viewport`` nodes. "
"In the example above, you rendered the content of one ``Viewport`` object "
"into the root ``Viewport``, through a ``ViewportContainer`` node. You can do "
"the same thing for a multi-pass shader by rendering the content of one "
"``Viewport`` into another and then rendering the last ``Viewport`` into the "
"root ``Viewport``."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:113
msgid "Your scene hierarchy will look something like this:"
msgstr "씬 계층 구조는 다음과 같이 보일 것입니다:"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:117
msgid ""
"Godot will render the bottom ``Viewport`` node first. So if the order of the "
"passes matters for your shaders, make sure that you assign the shader you "
"want to apply first to the lowest ``ViewportContainer`` in the tree."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:123
msgid ""
"You can also render your Viewports separately without nesting them like "
"this. You just need to use two Viewports and to render them one after the "
"other."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:126
msgid ""
"Apart from the node structure, the steps are the same as with the single-"
"pass post-processing shader."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:128
msgid ""
"As an example, you could write a full screen Gaussian blur effect by "
"attaching the following pieces of code to each of the :ref:"
"`ViewportContainers <class_ViewportContainer>`. The order in which you apply "
"the shaders does not matter:"
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:168
msgid ""
"Using the above code, you should end up with a full screen blur effect like "
"below."
msgstr ""

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:172
msgid ""
"For more information on how ``Viewport`` nodes work, see the :ref:`Viewports "
"Tutorial <doc_viewports>`."
msgstr ""

#: ../../docs/tutorials/shading/index.rst:2
msgid "Shading"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/index.rst:2
#, fuzzy
msgid "Shading reference"
msgstr "현재 씬 변경하기"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:4
msgid "Shaders"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:9
msgid ""
"Shaders are unique programs that run on the GPU. They are used to specify "
"how to take mesh data (vertex positions, colors, normals, etc.) and draw "
"them to the screen. Shaders do not process information the same way a normal "
"program does because they are optimized for running on the GPU. One "
"consequence of this is that shaders do not retain their data after they run; "
"they output a final color to the screen and then move on. Accordingly, there "
"is no way of accessing the color output from the last run of the shader."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:16
msgid ""
"Godot uses a shader language very similar to GLSL, but with added "
"functionality and slightly less flexibility. The reason for doing this is "
"that Godot integrates built-in functionality to make writing complex shaders "
"substantially easier. Godot wraps the user-written shader code in code of "
"its own. That way, Godot handles a lot of the low-level stuff that the user "
"doesn't need to worry about, and it is able to parse your shader code and "
"use it to affect the rendering pipeline. For more advanced shaders, you can "
"turn this functionality off using a render_mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:23
msgid ""
"This document provides you with some information about shaders, specific to "
"Godot. For a detailed reference of the shading language in Godot see the :"
"ref:`Godot shading language doc<doc_shading_language>`."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:27
#, fuzzy
msgid "Shader types"
msgstr "플레이스 홀더 유형"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:29
msgid ""
"Instead of supplying a general purpose configuration for all uses (2D, 3D, "
"particles), Godot shaders must specify what they are intended for. Different "
"types support different render modes, built-in variables, and processing "
"functions."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:33
msgid ""
"All shaders need to specify their type in the first line, in the following "
"format:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:41
msgid ":ref:`spatial <doc_spatial_shader>`: For 3D rendering."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:42
msgid ":ref:`canvas_item <doc_canvas_item_shader>`: For 2D rendering."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:43
msgid ":ref:`particles <doc_particle_shader>`: For particle systems."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:45
msgid ""
"For detailed information on each shading type, see the corresponding "
"reference document."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:48
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:12
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:14
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:27
#, fuzzy
msgid "Render modes"
msgstr "플레이스 홀더 수정자"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:50
msgid ""
"Different shader types support different render modes. They are optional "
"and, if specified, must be after the *shader_type*. Render modes are used to "
"alter the way built-in functionality is handled. For example, it is common "
"to use the render mode ``unshaded`` to skip the built-in light processor "
"function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:55
msgid "Render modes are specified underneath the shader type:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:62
msgid ""
"Each shader type has a different list of render modes available. See the "
"document for each shader type for a complete list of render modes."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:66
#, fuzzy
msgid "Processor functions"
msgstr "프로세싱(Processing)"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:68
msgid ""
"Depending on the shader type, different processor functions may be "
"optionally overridden. For \"spatial\" and \"canvas_item\", it is possible "
"to override ``vertex``, ``fragment``, and ``light``. For \"particles\", only "
"``vertex`` can be overridden."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:73
#, fuzzy
msgid "Vertex processor"
msgstr "``x.attribute``"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:75
msgid ""
"The ``vertex`` processing function is called once for every vertex in "
"\"spatial\" and \"canvas_item\" shaders. For \"particles\" shaders, it is "
"called once for every particle."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:78
msgid ""
"The ``vertex`` function is used to modify per-vertex information that will "
"be passed on to the fragment function. It can also be used to establish "
"variables that will be sent to the fragment function by using varyings(see "
"other doc)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:82
msgid ""
"By default, Godot will take your vertex information and transform it "
"accordingly to be drawn. If this is undesirable, you can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example of this."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:87
msgid "Fragment processor"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:89
msgid ""
"The ``fragment`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in \"spatial\" and \"canvas_item\" "
"shaders."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:93
msgid ""
"The standard use of the fragment function is to set up material properties "
"that will be used to calculate lighting. For example, you would set values "
"for ``ROUGHNESS``, ``RIM``, or ``TRANSMISSION`` which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on effects that you do not use."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:103
msgid "Light processor"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:105
msgid ""
"The ``light`` processor runs per pixel too, but also runs for every light "
"that affects the object (and does not run if no lights affect the object). "
"It exists as a function called inside the ``fragment`` processor and "
"typically operates on the material properties setup inside the ``fragment`` "
"function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:110
msgid ""
"The ``light`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` and :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectively."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:4
msgid "Shading language"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:9
msgid ""
"Godot uses a shading language similar to GLSL ES 3.0. Most datatypes and "
"functions are supported, and the few remaining ones will likely be added "
"over time."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:12
msgid ""
"If you are already familiar with GLSL, the :ref:`Godot Shader Migration "
"Guide<doc_migrating_to_godot_shader_language>` is a resource that will help "
"you transition from regular GLSL to Godot's shading language."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:16
msgid "Data types"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:18
msgid "Most GLSL ES 3.0 datatypes are supported:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:23
msgid "**void**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:23
msgid "Void datatype, useful only for functions that return nothing."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:25
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:391
msgid "**bool**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:25
msgid "Boolean datatype, can only contain \"true\" or \"false\""
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:27
msgid "**bvec2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:27
msgid "Two-component vector of booleans."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:29
msgid "**bvec3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:29
msgid "Three-component vector of booleans."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:31
msgid "**bvec4**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:31
msgid "Four-component vector of booleans."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:33
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:393
msgid "**int**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:33
msgid "Signed scalar integer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:35
msgid "**ivec2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:35
msgid "Two-component vector of signed integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:37
msgid "**ivec3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:37
msgid "Three-component vector of signed integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:39
msgid "**ivec4**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:39
msgid "Four-component vector of signed integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:41
msgid "**uint**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:41
msgid "Unsigned scalar integer; can't contain negative numbers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:43
msgid "**uvec2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:43
msgid "Two-component vector of unsigned integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:45
msgid "**uvec3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:45
msgid "Three-component vector of unsigned integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:47
msgid "**uvec4**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:47
msgid "Four-component vector of unsigned integers."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:49
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:395
msgid "**float**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:49
msgid "Floating point scalar."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:51
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:397
msgid "**vec2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:51
msgid "Two-component vector of floating point values."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:53
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:399
msgid "**vec3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:53
msgid "Three-component vector of floating point values."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:55
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:368
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:401
msgid "**vec4**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:55
msgid "Four-component vector of floating point values."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:57
msgid "**mat2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:57
msgid "2x2 matrix, in column major order."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:59
msgid "**mat3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:59
msgid "3x3 matrix, in column major order."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:61
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:403
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:405
msgid "**mat4**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:61
msgid "4x4 matrix, in column major order."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:63
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:372
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:374
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:376
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:378
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:380
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:382
msgid "**sampler2D**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:63
msgid "Sampler type for binding 2D textures, which are read as float."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:65
msgid "**isampler2D**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:65
msgid "Sampler type for binding 2D textures, which are read as signed integer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:67
msgid "**usampler2D**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:67
msgid ""
"Sampler type for binding 2D textures, which are read as unsigned integer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:69
msgid "**samplerCube**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:69
msgid "Sampler type for binding Cubemaps, which are read as floats."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:75
msgid ""
"Just like GLSL ES 3.0, implicit casting between scalars and vectors of the "
"same size but different type is not allowed. Casting of types of different "
"size is also not allowed. Conversion must be done explicitly via "
"constructors."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:86
msgid ""
"Default integer constants are signed, so casting is always needed to convert "
"to unsigned:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:95
msgid "Members"
msgstr "멤버"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:97
msgid ""
"Individual scalar members of vector types are accessed via the \"x\", \"y\", "
"\"z\" and \"w\" members. Alternatively, using \"r\", \"g\", \"b\" and \"a\" "
"also works and is equivalent. Use whatever fits best for your needs."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:101
msgid ""
"For matrices, use the ``m[row][column]`` indexing syntax to access each "
"scalar, or ``m[idx]`` to access a vector by row index. For example, for "
"accessing the y position of an object in a mat4 you  use ``m[3][1]``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:106
msgid "Constructing"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:108
msgid "Construction of vector types must always pass:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:120
msgid ""
"Construction of matrix types requires vectors of the same dimension as the "
"matrix. You can also build a diagonal matrix using ``matx(float)`` syntax. "
"Accordingly, ``mat4(1.0)`` is an identity matrix."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:130
msgid ""
"Matrices can also be built from a matrix of another dimension. There are two "
"rules : If a larger matrix is constructed from a smaller matrix, the "
"additional rows and columns are set to the values they would have in an "
"identity matrix. If a smaller matrix is constructed from a larger matrix, "
"the top, left submatrix of the larger matrix is used."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:143
msgid "Swizzling"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:145
msgid ""
"It is possible to obtain any combination of components in any order, as long "
"as the result is another vector type (or scalar). This is easier shown than "
"explained:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:158
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:116
msgid "Precision"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:160
msgid ""
"It is possible to add precision modifiers to datatypes; use them for "
"uniforms, variables, arguments and varyings:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:169
msgid ""
"Using lower precision for some operations can speed up the math involved (at "
"the cost of less precision). This is rarely needed in the vertex processor "
"function (where full precision is needed most of the time), but is often "
"useful in the fragment processor."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:173
msgid ""
"Keep in mind that some architectures (mainly mobile) benefit a lot from "
"this, but are also restricted (conversion between precisions has a cost). "
"Please read the relevant documentation on the target architecture to find "
"out more. In all honesty though, mobile drivers are buggy, so, to stay out "
"of trouble, make simple shaders without specifying precision unless you "
"*really* need to."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:181
msgid ""
"Godot shading language supports the same set of operators as GLSL ES 3.0. "
"Below is the list of them in precedence order:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:184
msgid "Precedence"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:184
msgid "Class"
msgstr "클래스"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:184
msgid "Operator"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:186
msgid "1 (highest)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:186
msgid "parenthetical grouping"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:186
msgid "**()**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:188
#: ../../docs/tutorials/misc/binary_serialization_api.rst:29
msgid "2"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:188
msgid "unary"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:188
msgid "**+, -, !, ~**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:190
#: ../../docs/tutorials/misc/binary_serialization_api.rst:31
msgid "3"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:190
msgid "multiplicative"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:190
msgid "**/, \\*, %**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:192
#: ../../docs/tutorials/misc/binary_serialization_api.rst:33
#: ../../docs/tutorials/misc/binary_serialization_api.rst:94
#: ../../docs/tutorials/misc/binary_serialization_api.rst:103
#: ../../docs/tutorials/misc/binary_serialization_api.rst:112
#: ../../docs/tutorials/misc/binary_serialization_api.rst:121
#: ../../docs/tutorials/misc/binary_serialization_api.rst:134
#: ../../docs/tutorials/misc/binary_serialization_api.rst:136
#: ../../docs/tutorials/misc/binary_serialization_api.rst:145
#: ../../docs/tutorials/misc/binary_serialization_api.rst:147
#: ../../docs/tutorials/misc/binary_serialization_api.rst:149
#: ../../docs/tutorials/misc/binary_serialization_api.rst:151
#: ../../docs/tutorials/misc/binary_serialization_api.rst:160
#: ../../docs/tutorials/misc/binary_serialization_api.rst:162
#: ../../docs/tutorials/misc/binary_serialization_api.rst:164
#: ../../docs/tutorials/misc/binary_serialization_api.rst:173
#: ../../docs/tutorials/misc/binary_serialization_api.rst:175
#: ../../docs/tutorials/misc/binary_serialization_api.rst:177
#: ../../docs/tutorials/misc/binary_serialization_api.rst:179
#: ../../docs/tutorials/misc/binary_serialization_api.rst:181
#: ../../docs/tutorials/misc/binary_serialization_api.rst:183
#: ../../docs/tutorials/misc/binary_serialization_api.rst:192
#: ../../docs/tutorials/misc/binary_serialization_api.rst:194
#: ../../docs/tutorials/misc/binary_serialization_api.rst:196
#: ../../docs/tutorials/misc/binary_serialization_api.rst:198
#: ../../docs/tutorials/misc/binary_serialization_api.rst:207
#: ../../docs/tutorials/misc/binary_serialization_api.rst:209
#: ../../docs/tutorials/misc/binary_serialization_api.rst:211
#: ../../docs/tutorials/misc/binary_serialization_api.rst:213
#: ../../docs/tutorials/misc/binary_serialization_api.rst:222
#: ../../docs/tutorials/misc/binary_serialization_api.rst:224
#: ../../docs/tutorials/misc/binary_serialization_api.rst:226
#: ../../docs/tutorials/misc/binary_serialization_api.rst:228
#: ../../docs/tutorials/misc/binary_serialization_api.rst:230
#: ../../docs/tutorials/misc/binary_serialization_api.rst:232
#: ../../docs/tutorials/misc/binary_serialization_api.rst:241
#: ../../docs/tutorials/misc/binary_serialization_api.rst:243
#: ../../docs/tutorials/misc/binary_serialization_api.rst:245
#: ../../docs/tutorials/misc/binary_serialization_api.rst:247
#: ../../docs/tutorials/misc/binary_serialization_api.rst:249
#: ../../docs/tutorials/misc/binary_serialization_api.rst:251
#: ../../docs/tutorials/misc/binary_serialization_api.rst:253
#: ../../docs/tutorials/misc/binary_serialization_api.rst:255
#: ../../docs/tutorials/misc/binary_serialization_api.rst:257
#: ../../docs/tutorials/misc/binary_serialization_api.rst:266
#: ../../docs/tutorials/misc/binary_serialization_api.rst:268
#: ../../docs/tutorials/misc/binary_serialization_api.rst:270
#: ../../docs/tutorials/misc/binary_serialization_api.rst:272
#: ../../docs/tutorials/misc/binary_serialization_api.rst:274
#: ../../docs/tutorials/misc/binary_serialization_api.rst:276
#: ../../docs/tutorials/misc/binary_serialization_api.rst:278
#: ../../docs/tutorials/misc/binary_serialization_api.rst:280
#: ../../docs/tutorials/misc/binary_serialization_api.rst:282
#: ../../docs/tutorials/misc/binary_serialization_api.rst:284
#: ../../docs/tutorials/misc/binary_serialization_api.rst:286
#: ../../docs/tutorials/misc/binary_serialization_api.rst:288
#: ../../docs/tutorials/misc/binary_serialization_api.rst:297
#: ../../docs/tutorials/misc/binary_serialization_api.rst:299
#: ../../docs/tutorials/misc/binary_serialization_api.rst:301
#: ../../docs/tutorials/misc/binary_serialization_api.rst:303
#: ../../docs/tutorials/misc/binary_serialization_api.rst:312
#: ../../docs/tutorials/misc/binary_serialization_api.rst:332
#: ../../docs/tutorials/misc/binary_serialization_api.rst:334
#: ../../docs/tutorials/misc/binary_serialization_api.rst:342
#: ../../docs/tutorials/misc/binary_serialization_api.rst:361
#: ../../docs/tutorials/misc/binary_serialization_api.rst:373
#: ../../docs/tutorials/misc/binary_serialization_api.rst:385
#: ../../docs/tutorials/misc/binary_serialization_api.rst:398
#: ../../docs/tutorials/misc/binary_serialization_api.rst:400
#: ../../docs/tutorials/misc/binary_serialization_api.rst:409
#: ../../docs/tutorials/misc/binary_serialization_api.rst:411
#: ../../docs/tutorials/misc/binary_serialization_api.rst:420
#: ../../docs/tutorials/misc/binary_serialization_api.rst:428
#: ../../docs/tutorials/misc/binary_serialization_api.rst:441
#: ../../docs/tutorials/misc/binary_serialization_api.rst:443
#: ../../docs/tutorials/misc/binary_serialization_api.rst:445
#: ../../docs/tutorials/misc/binary_serialization_api.rst:454
#: ../../docs/tutorials/misc/binary_serialization_api.rst:456
#: ../../docs/tutorials/misc/binary_serialization_api.rst:458
#: ../../docs/tutorials/misc/binary_serialization_api.rst:460
#: ../../docs/tutorials/misc/binary_serialization_api.rst:469
#: ../../docs/tutorials/misc/binary_serialization_api.rst:471
#: ../../docs/tutorials/misc/binary_serialization_api.rst:473
#: ../../docs/tutorials/misc/binary_serialization_api.rst:475
#: ../../docs/tutorials/misc/binary_serialization_api.rst:477
msgid "4"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:192
msgid "additive"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:192
msgid "**+, -**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:194
#: ../../docs/tutorials/misc/binary_serialization_api.rst:35
msgid "5"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:194
msgid "bit-wise shift"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:194
msgid "**<<, >>**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:196
#: ../../docs/tutorials/misc/binary_serialization_api.rst:37
msgid "6"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:196
msgid "relational"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:196
msgid "**<, >, <=, >=**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:198
#: ../../docs/tutorials/misc/binary_serialization_api.rst:39
msgid "7"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:198
msgid "equality"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:198
msgid "**==, !=**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:200
#: ../../docs/tutorials/misc/binary_serialization_api.rst:41
#: ../../docs/tutorials/misc/binary_serialization_api.rst:123
#: ../../docs/tutorials/misc/binary_serialization_api.rst:136
#: ../../docs/tutorials/misc/binary_serialization_api.rst:147
#: ../../docs/tutorials/misc/binary_serialization_api.rst:162
#: ../../docs/tutorials/misc/binary_serialization_api.rst:175
#: ../../docs/tutorials/misc/binary_serialization_api.rst:194
#: ../../docs/tutorials/misc/binary_serialization_api.rst:209
#: ../../docs/tutorials/misc/binary_serialization_api.rst:224
#: ../../docs/tutorials/misc/binary_serialization_api.rst:243
#: ../../docs/tutorials/misc/binary_serialization_api.rst:268
#: ../../docs/tutorials/misc/binary_serialization_api.rst:299
#: ../../docs/tutorials/misc/binary_serialization_api.rst:321
#: ../../docs/tutorials/misc/binary_serialization_api.rst:334
msgid "8"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:200
msgid "bit-wise and"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:200
msgid "**&**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:202
#: ../../docs/tutorials/misc/binary_serialization_api.rst:43
msgid "9"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:202
msgid "bit-wise exclusive or"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:202
msgid "**^**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:204
#: ../../docs/tutorials/misc/binary_serialization_api.rst:45
msgid "10"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:204
msgid "bit-wise inclusive or"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:204
msgid "**|**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:206
#: ../../docs/tutorials/misc/binary_serialization_api.rst:47
msgid "11"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:206
msgid "logical and"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:206
msgid "**&&**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:208
msgid "12 (lowest)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:208
msgid "logical inclusive or"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:208
msgid "**||**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:212
msgid "Flow control"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:214
msgid "Godot Shading language supports the most common types of flow control:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:236
msgid ""
"Keep in mind that, in modern GPUs, an infinite loop can exist and can freeze "
"your application (including editor). Godot can't protect you from this, so "
"be careful not to make this mistake!"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:240
msgid "Discarding"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:242
msgid ""
"Fragment and light functions can use the **discard** keyword. If used, the "
"fragment is discarded and nothing is written."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:247
msgid ""
"It is possible to define functions in a Godot shader. They use the following "
"syntax:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:262
msgid ""
"You can only use functions that have been defined above (higher in the "
"editor) the function from which you are calling them."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:265
msgid "Function arguments can have special qualifiers:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:267
msgid "**in**: Means the argument is only for reading (default)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:268
msgid "**out**: Means the argument is only for writing."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:269
msgid "**inout**: Means the argument is fully passed via reference."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:271
msgid "Example below:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:280
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:57
msgid "Varyings"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:282
msgid ""
"To send data from the vertex to the fragment processor function, *varyings* "
"are used. They are set for every primitive vertex in the *vertex processor*, "
"and the value is interpolated for every pixel in the fragment processor."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:300
msgid "Interpolation qualifiers"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:302
msgid ""
"Certain values are interpolated during the shading pipeline. You can modify "
"how these interpolations are done by using *interpolation qualifiers*."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:319
msgid "There are two possible interpolation qualifiers:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:322
msgid "Qualifier"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:324
msgid "**flat**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:324
msgid "The value is not interpolated."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:326
msgid "**smooth**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:326
msgid ""
"The value is interpolated in a perspective-correct fashion. This is the "
"default."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:331
#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:250
msgid "Uniforms"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:333
msgid ""
"Passing values to shaders is possible. These are global to the whole shader "
"and are called *uniforms*. When a shader is later assigned to a material, "
"the uniforms will appear as editable parameters in it. Uniforms can't be "
"written from within the shader."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:343
msgid ""
"You can set uniforms in the editor in the material. Or you can set them "
"through GDScript:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:349
msgid ""
"The first argument to ``set_shader_param`` is the name of the uniform in the "
"shader. It must match *exactly* to the name of the uniform in the shader or "
"else it will not be recognized."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:352
msgid ""
"Any GLSL type except for *void* can be a uniform. Additionally, Godot "
"provides optional shader hints to make the compiler understand for what the "
"uniform is used."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:363
msgid "Full list of hints below:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:366
msgid "Hint"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:368
msgid "hint_color"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:368
msgid "Used as color"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:370
msgid "**int, float**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:370
msgid "hint_range(min,max [,step] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:370
msgid "Used as range (with min/max/step)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:372
msgid "hint_albedo"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:372
msgid "Used as albedo color, default white"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:374
msgid "hint_black_albedo"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:374
msgid "Used as albedo color, default black"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:376
msgid "hint_normal"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:376
msgid "Used as normalmap"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:378
msgid "hint_white"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:378
msgid "As value, default to white."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:380
msgid "hint_black"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:380
msgid "As value, default to black"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:382
msgid "hint_aniso"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:382
msgid "As flowmap, default to right."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:385
msgid ""
"GDScript uses different variable types than GLSL does, so when passing "
"variables from GDScript to shaders, Godot converts the type automatically. "
"Below is a table of the corresponding types:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:389
#, fuzzy
msgid "GDScript type"
msgstr "GDScript"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:389
msgid "GLSL type"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:397
msgid "**Vector2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:399
msgid "**Vector3**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:401
#, fuzzy
msgid "**Color**"
msgstr "색깔"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:403
#, fuzzy
msgid "**Transform**"
msgstr "변형"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:405
#, fuzzy
msgid "**Transform2D**"
msgstr "변형"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:408
msgid ""
"Be careful when setting shader uniforms from GDScript, no error will be "
"thrown if the type does not match. Your shader will just exhibit undefined "
"behaviour."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:411
msgid ""
"As Godot's 3D engine renders in linear color space, it's important to "
"understand that textures that are supplied as color (i.e. albedo) need to be "
"specified as such for proper sRGB->linear conversion."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:415
msgid "Uniforms can also be assigned default values:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:425
#, fuzzy
msgid "Built-in functions"
msgstr "정적 함수"

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:427
msgid ""
"A large number of built-in functions are supported, conforming mostly to "
"GLSL ES 3.0. When vec_type (float), vec_int_type, vec_uint_type, "
"vec_bool_type nomenclature is used, it can be scalar or vector."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:431
msgid "Function"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:433
msgid "vec_type **radians** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:433
msgid "Convert degrees to radians"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:435
msgid "vec_type **degrees** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:435
msgid "Convert radians to degrees"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:437
msgid "vec_type **sin** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:437
msgid "Sine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:439
msgid "vec_type **cos** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:439
msgid "Cosine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:441
msgid "vec_type **tan** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:441
msgid "Tangent"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:443
msgid "vec_type **asin** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:443
msgid "Arc-Sine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:445
msgid "vec_type **acos** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:445
msgid "Arc-Cosine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:447
msgid "vec_type **atan** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:447
msgid "Arc-Tangent"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:449
msgid "vec_type **atan** ( vec_type x, vec_type y )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:449
msgid "Arc-Tangent to convert vector to angle"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:451
msgid "vec_type **sinh** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:451
msgid "Hyperbolic-Sine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:453
msgid "vec_type **cosh** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:453
msgid "Hyperbolic-Cosine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:455
msgid "vec_type **tanh** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:455
msgid "Hyperbolic-Tangent"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:457
msgid "vec_type **asinh** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:457
msgid "Inverse-Hyperbolic-Sine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:459
msgid "vec_type **acosh** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:459
msgid "Inverse-Hyperbolic-Cosine"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:461
msgid "vec_type **atanh** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:461
msgid "Inverse-Hyperbolic-Tangent"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:463
msgid "vec_type **pow** ( vec_type, vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:463
msgid "Power"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:465
msgid "vec_type **exp** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:465
msgid "Base-e Exponential"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:467
msgid "vec_type **exp2** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:467
msgid "Base-2 Exponential"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:469
msgid "vec_type **log** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:469
msgid "Natural Logarithm"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:471
msgid "vec_type **log2** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:471
msgid "Base-2 Logarithm"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:473
msgid "vec_type **sqrt** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:473
msgid "Square Root"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:475
msgid "vec_type **inversesqrt** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:475
msgid "Inverse Square Root"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:477
msgid "vec_type **abs** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:477
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:479
msgid "Absolute"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:479
msgid "vec_int_type **abs** ( vec_int_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:481
msgid "vec_type **sign** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:481
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:483
msgid "Sign"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:483
msgid "vec_int_type **sign** ( vec_int_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:485
msgid "vec_type **floor** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:485
msgid "Floor"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:487
msgid "vec_type **round** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:487
msgid "Round"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:489
msgid "vec_type **roundEven** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:489
msgid "Round nearest even"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:491
msgid "vec_type **trunc** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:491
msgid "Truncation"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:493
msgid "vec_type **ceil** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:493
msgid "Ceiling"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:495
msgid "vec_type **fract** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:495
msgid "Fractional"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:497
msgid "vec_type **mod** ( vec_type, vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:497
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:499
msgid "Remainder"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:499
msgid "vec_type **mod** ( vec_type, float )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:501
msgid "vec_type **modf** ( vec_type x, out vec_type i )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:501
msgid "Fractional of x, with i has integer part"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:503
msgid "vec_scalar_type **min** ( vec_scalar_type a, vec_scalar_type b )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:503
msgid "Minimum"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:505
msgid "vec_scalar_type **max** ( vec_scalar_type a, vec_scalar_type b )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:505
msgid "Maximum"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:507
msgid ""
"vec_scalar_type **clamp** ( vec_scalar_type value, vec_scalar_type min, "
"vec_scalar_type max )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:507
msgid "Clamp to Min-Max"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:509
msgid "vec_type **mix** ( vec_type a, vec_type b, float c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:509
msgid "Linear Interpolate (Scalar Coef.)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:511
msgid "vec_type **mix** ( vec_type a, vec_type b, vec_type c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:511
msgid "Linear Interpolate (Vector Coef.)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:513
msgid "vec_type **mix** ( vec_type a, vec_type b, bool c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:513
msgid "Linear Interpolate (Bool Selection)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:515
msgid "vec_type **mix** ( vec_type a, vec_type b, vec_bool_type c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:515
msgid "Linear Interpolate (Bool-Vector Selection)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:517
msgid "vec_type **step** ( vec_type a, vec_type b )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:517
msgid "``b[i] < a[i] ? 0.0 : 1.0``"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:519
msgid "vec_type **step** ( float a, vec_type b )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:519
msgid "``b[i] < a ? 0.0 : 1.0``"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:521
msgid "vec_type **smoothstep** ( vec_type a, vec_type b, vec_type c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:521
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:523
msgid "Hermite Interpolate"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:523
msgid "vec_type **smoothstep** ( float a, float b, vec_type c )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:525
msgid "vec_bool_type **isnan** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:525
msgid "Scalar, or vector component being nan"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:527
msgid "vec_bool_type **isinf** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:527
msgid "Scalar, or vector component being inf"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:529
msgid "vec_int_type **floatBitsToInt** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:529
msgid "Float->Int bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:531
msgid "vec_uint_type **floatBitsToUint** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:531
msgid "Float->UInt bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:533
msgid "vec_type **intBitsToFloat** ( vec_int_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:533
msgid "Int->Float bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:535
msgid "vec_type **uintBitsToFloat** ( vec_uint_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:535
msgid "UInt->Float bit copying, no conversion"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:537
msgid "float **length** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:537
msgid "Vector Length"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:539
msgid "float **distance** ( vec_type, vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:539
msgid "Distance between vector"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:541
msgid "float **dot** ( vec_type, vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:541
msgid "Dot Product"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:543
msgid "vec3 **cross** ( vec3, vec3 )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:543
msgid "Cross Product"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:545
msgid "vec_type **normalize** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:545
msgid "Normalize to unit length"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:547
msgid "vec3 **reflect** ( vec3 I, vec3 N )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:547
msgid "Reflect"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:549
msgid "vec3 **refract** ( vec3 I, vec3 N, float eta )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:549
msgid "Refract"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:551
msgid "vec_type **faceforward** ( vec_type N, vec_type I, vec_type Nref )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:551
msgid "If dot(Nref, I) < 0, return N, otherwise –N"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:553
msgid "mat_type **matrixCompMult** ( mat_type, mat_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:553
msgid "Matrix Component Multiplication"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:555
msgid "mat_type **outerProduct** ( vec_type, vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:555
msgid "Matrix Outer Product"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:557
msgid "mat_type **transpose** ( mat_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:557
msgid "Transpose Matrix"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:559
msgid "float **determinant** ( mat_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:559
msgid "Matrix Determinant"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:561
msgid "mat_type **inverse** ( mat_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:561
msgid "Inverse Matrix"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:563
msgid "vec_bool_type **lessThan** ( vec_scalar_type, vec_scalar_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:563
msgid "Bool vector cmp on < int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:565
msgid "vec_bool_type **greaterThan** ( vec_scalar_type, vec_scalar_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:565
msgid "Bool vector cmp on > int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:567
msgid "vec_bool_type **lessThanEqual** ( vec_scalar_type, vec_scalar_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:567
msgid "Bool vector cmp on <= int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:569
msgid "vec_bool_type **greaterThanEqual** ( vec_scalar_type, vec_scalar_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:569
msgid "Bool vector cmp on >= int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:571
msgid "vec_bool_type **equal** ( vec_scalar_type, vec_scalar_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:571
msgid "Bool vector cmp on == int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:573
msgid "vec_bool_type **notEqual** ( vec_scalar_type, vec_scalar_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:573
msgid "Bool vector cmp on != int/uint/float vectors"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:575
msgid "bool **any** ( vec_bool_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:575
msgid "Any component is true"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:577
msgid "bool **all** ( vec_bool_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:577
msgid "All components are true"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:579
msgid "bool **not** ( vec_bool_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:579
msgid "No components are true"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:581
msgid "ivec2 **textureSize** ( sampler2D_type s, int lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:581
msgid "Get the size of a texture"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:583
msgid "ivec2 **textureSize** ( samplerCube s, int lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:583
msgid "Get the size of a cubemap"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:585
msgid "vec4_type **texture** ( sampler2D_type s, vec2 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:585
msgid "Perform a 2D texture read"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:587
msgid "vec4_type **texture** ( samplerCube s, vec3 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:587
msgid "Perform a Cube texture read"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:589
msgid "vec4_type **textureProj** ( sampler2D_type s, vec3 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:589
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:591
msgid "Perform a texture read with projection"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:591
msgid "vec4_type **textureProj** ( sampler2D_type s, vec4 uv [, float bias] )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:593
msgid "vec4_type **textureLod** ( sampler2D_type s, vec2 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:593
msgid "Perform a 2D texture read at custom mipmap"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:595
msgid "vec4_type **textureLod** ( samplerCube s, vec3 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:595
msgid "Perform a Cube texture read at custom mipmap"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:597
msgid "vec4_type **textureProjLod** ( sampler2D_type s, vec3 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:597
#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:599
msgid "Perform a texture read with projection/lod"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:599
msgid "vec4_type **textureProjLod** ( sampler2D_type s, vec4 uv, float lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:601
msgid "vec4_type **texelFetch** ( sampler2D_type s, ivec2 uv, int lod )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:601
msgid "Fetch a single texel using integer coords"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:603
msgid "vec_type **dFdx** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:603
msgid "Derivative in x using local differencing"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:605
msgid "vec_type **dFdy** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:605
msgid "Derivative in y using local differencing"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:607
msgid "vec_type **fwidth** ( vec_type )"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shading_language.rst:607
msgid "Sum of absolute derivative in x and y"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:4
msgid "Spatial shaders"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:6
msgid ""
"Spatial shaders are used for shading 3D objects. They are the most complex "
"type of shader Godot offers. Spatial shaders are highly configurable with "
"different render modes and different rendering options (e.g. Subsurface "
"Scattering, Transmission, Ambient Occlusion, Rim lighting etc). Users can "
"optionally write vertex, fragment, and light processor functions to affect "
"how objects are drawn."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:15
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:17
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:30
msgid "Render mode"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:17
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:19
msgid "**blend_mix**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:17
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:19
msgid "Mix blend mode (alpha is transparency), default."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:19
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:21
msgid "**blend_add**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:19
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:21
msgid "Additive blend mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:21
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:23
msgid "**blend_sub**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:21
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:23
msgid "Subtractive blend mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:23
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:25
msgid "**blend_mul**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:23
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:25
msgid "Multiplicative blend mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:25
msgid "**depth_draw_opaque**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:25
msgid "Only draw depth for opaque geometry (not transparent)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:27
msgid "**depth_draw_always**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:27
msgid "Always draw depth (opaque and transparent)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:29
msgid "**depth_draw_never**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:29
msgid "Never draw depth."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:31
msgid "**depth_draw_alpha_prepass**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:31
msgid "Do opaque depth pre-pass for transparent geometry."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:33
msgid "**depth_test_disable**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:33
msgid "Disable depth testing."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:35
msgid "**cull_front**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:35
msgid "Cull front-faces."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:37
msgid "**cull_back**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:37
msgid "Cull back-faces (default)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:39
msgid "**cull_disabled**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:39
msgid "Culling disabled (double sided)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:41
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:29
msgid "**unshaded**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:41
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:29
msgid "Result is just albedo. No lighting/shading happens in material."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:43
msgid "**diffuse_lambert**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:43
msgid "Lambert shading for diffuse (default)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:45
msgid "**diffuse_lambert_wrap**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:45
msgid "Lambert wrapping (roughness dependent) for diffuse."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:47
msgid "**diffuse_oren_nayar**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:47
msgid "Oren Nayar for diffuse."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:49
msgid "**diffuse_burley**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:49
msgid "Burley (Disney PBS) for diffuse."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:51
msgid "**diffuse_toon**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:51
msgid "Toon shading for diffuse."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:53
msgid "**specular_schlick_ggx**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:53
msgid "Schlick-GGX for specular (default)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:55
msgid "**specular_blinn**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:55
msgid "Blinn for specular (compatibility)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:57
msgid "**specular_phong**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:57
msgid "Phong for specular (compatibility)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:59
msgid "**specular_toon**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:59
msgid "Toon for specular."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:61
msgid "**specular_disabled**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:61
msgid "Disable specular."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:63
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:33
msgid "**skip_vertex_transform**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:63
msgid "VERTEX/NORMAL/etc. need to be transformed manually in vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:65
msgid "**world_vertex_coords**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:65
msgid "VERTEX/NORMAL/etc. are modified in world coordinates instead of local."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:67
msgid "**vertex_lighting**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:67
msgid "Use vertex-based lighting."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:71
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:37
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:40
#, fuzzy
msgid "Vertex built-ins"
msgstr "벡터 내장 타입"

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:73
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:39
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:42
msgid ""
"Values marked as \"in\" are read-only. Values marked as \"out\" are for "
"optional writing and will not necessarily contain sensible values. Values "
"marked as \"inout\" provide a sensible default value, and can optionally be "
"written to. Samplers are not subjects of writing and they are not marked."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:78
msgid ""
"Vertex data (``VERTEX``, ``NORMAL``, ``TANGENT``, ``BITANGENT``) are "
"presented in local model space. If not written to, these values will not be "
"modified and be passed through as they came."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:82
msgid ""
"They can optionally be presented in world space by using the "
"*world_vertex_coords* render mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:84
msgid ""
"Users can disable the built-in modelview transform (projection will still "
"happen later) and do it manually with the following code:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:98
msgid ""
"Other built-ins, such as UV, UV2 and COLOR, are also passed through to the "
"fragment function if not modified."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:100
msgid ""
"Users can override the modelview and projection transforms using the "
"``POSITION`` built-in. When ``POSITION`` is used, the value from ``VERTEX`` "
"is ignored and projection does not happen. However, the value passed to the "
"fragment shader still comes from ``VERTEX``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:104
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:62
msgid ""
"For instancing, the INSTANCE_CUSTOM variable contains the instance custom "
"data. When using particles, this information is usually:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:107
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:65
msgid "**x**: Rotation angle in radians."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:108
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:66
msgid "**y**: Phase during lifetime (0 to 1)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:109
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:67
msgid "**z**: Animation frame."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:111
msgid ""
"This allows you to easily adjust the shader to a particle system using "
"default particles material. When writing a custom particles shader, this "
"value can be used as desired."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:115
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:166
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:262
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:70
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:115
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:164
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:51
msgid "Built-in"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:117
msgid "out mat4 **WORLD_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:117
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:170
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:266
msgid "Model space to world space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:119
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:172
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:268
msgid "in mat4 **INV_CAMERA_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:119
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:172
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:268
msgid "World space to view space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:121
msgid "out mat4 **PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:121
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:174
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:270
msgid "View space to clip space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:123
msgid "in mat4 **CAMERA_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:123
msgid "View space to world space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:125
msgid "out mat4 **MODELVIEW_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:125
msgid "Model space to view space transform (use if possible)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:127
msgid "out mat4 **INV_PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:127
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:176
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:272
msgid "Clip space to view space transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:129
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:178
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:274
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:78
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:145
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:186
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:67
msgid "in float **TIME**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:129
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:178
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:274
msgid "Elapsed total time in seconds."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:131
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:180
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:276
msgid "in vec2 **VIEWPORT_SIZE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:131
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:180
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:276
msgid "Size of viewport (in pixels)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:133
msgid "out vec3 **VERTEX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:133
#, fuzzy
msgid "Vertex in local coordinates."
msgstr "이 기능은 항상 전반적인 좌표에 적용됩니다."

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:135
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:186
msgid "out vec3 **NORMAL**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:135
#, fuzzy
msgid "Normal in local coordinates."
msgstr "이 기능은 항상 전반적인 좌표에 적용됩니다."

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:137
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:188
msgid "out vec3 **TANGENT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:137
#, fuzzy
msgid "Tangent in local coordinates."
msgstr "이 기능은 항상 전반적인 좌표에 적용됩니다."

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:139
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:190
msgid "out vec3 **BINORMAL**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:139
#, fuzzy
msgid "Binormal in local coordinates."
msgstr "이 기능은 항상 전반적인 좌표에 적용됩니다."

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:141
msgid "out vec2 **UV**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:141
msgid "UV main channel."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:143
msgid "out vec2 **UV2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:143
msgid "UV secondary channel."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:145
msgid "out vec4 **COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:145
msgid "Color from vertices."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:147
msgid "out float **POINT_SIZE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:147
msgid "Point size for point rendering."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:149
msgid "out vec4  **POSITION**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:149
msgid "If written to, overrides final vertex position."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:151
msgid "in int **INSTANCE_ID**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:151
msgid "Instance ID for instancing."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:153
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:80
msgid "in vec4 **INSTANCE_CUSTOM**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:153
msgid "Instance custom data (for particles, mostly)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:155
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:210
msgid "out float **ROUGHNESS**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:155
msgid "Roughness for vertex lighting."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:159
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:94
#, fuzzy
msgid "Fragment built-ins"
msgstr "벡터 내장 타입"

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:161
msgid ""
"The default use of a Godot fragment processor function is to set up the "
"material properties of your object and to let the built-in renderer handle "
"the final shading. However, you are not required to use all these "
"properties, and if you don't write to them, Godot will optimize away the "
"corresponding functionality."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:168
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:264
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:117
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:166
msgid "in vec4 **FRAGCOORD**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:168
msgid "Fragment coordinate, pixel adjusted. In screen space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:170
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:266
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:72
msgid "in mat4 **WORLD_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:174
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:270
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:76
msgid "in mat4 **PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:176
#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:272
msgid "in mat4 **INV_PROJECTION_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:182
msgid "in vec3 **VERTEX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:182
msgid "Vertex that comes from vertex function (default, in view space)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:184
msgid "in bool **FRONT_FACING**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:184
msgid "True if current face is front face."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:186
msgid "Normal that comes from vertex function (default, in view space)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:188
msgid "Tangent that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:190
msgid "Binormal that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:192
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:121
msgid "out vec3 **NORMALMAP**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:192
msgid "Set normal here if reading normal from a texture instead of NORMAL."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:194
msgid "out float **NORMALMAP_DEPTH**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:194
msgid "Depth from variable above. Defaults to 1.0."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:196
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:126
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:171
msgid "in vec2 **UV**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:196
msgid "UV that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:198
msgid "in vec2 **UV2**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:198
msgid "UV2 that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:200
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:173
msgid "in vec4 **COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:200
msgid "COLOR that comes from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:202
msgid "out vec3 **ALBEDO**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:202
msgid "Albedo (default white)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:204
msgid "out float **ALPHA**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:204
msgid ""
"Alpha (0..1); if written to, the material will go to the transparent "
"pipeline."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:206
msgid "out float **METALLIC**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:206
msgid "Metallic (0..1)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:208
msgid "out float **SPECULAR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:208
msgid ""
"Specular. Defaults to 0.5, best not to modify unless you want to change IOR."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:210
msgid "Roughness (0..1)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:212
msgid "out float **RIM**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:212
msgid "Rim (0..1). If used, Godot calculates rim lighting."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:214
msgid "out float **RIM_TINT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:214
msgid ""
"Rim Tint, goes from 0 (white) to 1 (albedo). If used, Godot calculates rim "
"lighting."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:216
msgid "out float **CLEARCOAT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:216
msgid "Small added specular blob. If used, Godot calculates Clearcoat."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:218
msgid "out float **CLEARCOAT_GLOSS**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:218
msgid "Gloss of Clearcoat. If used, Godot calculates Clearcoat."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:220
msgid "out float **ANISOTROPY**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:220
msgid "For distorting the specular blob according to tangent space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:222
msgid "out vec2 **ANISOTROPY_FLOW**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:222
msgid "Distortion direction, use with flowmaps."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:224
msgid "out float **SSS_STRENGTH**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:224
msgid ""
"Strength of Subsurface Scattering. If used, Subsurface Scattering will be "
"applied to object."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:226
msgid "out vec3 **TRANSMISSION**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:226
msgid ""
"Transmission mask (default 0,0,0). Allows light to pass through object. Only "
"applied if used."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:228
msgid "out float **AO**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:228
msgid "Strength of Ambient Occlusion. For use with pre-baked AO."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:230
msgid "out float **AO_LIGHT_AFFECT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:230
msgid "How much AO affects lights (0..1; default 0)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:232
msgid "out vec3 **EMISSION**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:232
msgid "Emission color (can go over 1,1,1 for HDR)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:234
msgid "sampler2D **SCREEN_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:234
msgid ""
"Built-in Texture for reading from the screen. Mipmaps contain increasingly "
"blurred copies."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:236
msgid "sampler2D **DEPTH_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:236
msgid ""
"Built-in Texture for reading depth from the screen. Must convert to linear "
"using INV_PROJECTION."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:238
msgid "out float **DEPTH**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:238
msgid "Custom depth value (0..1)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:240
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:139
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:182
msgid "in vec2 **SCREEN_UV**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:240
msgid "Screen UV coordinate for current pixel."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:242
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:143
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:184
msgid "in vec2 **POINT_COORD**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:242
msgid "Point Coordinate for drawing points with POINT_SIZE."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:244
msgid "out float **ALPHA_SCISSOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:244
msgid "If written to, values below a certain amount of alpha are discarded."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:248
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:153
#, fuzzy
msgid "Light built-ins"
msgstr "기본 내장 타입"

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:250
msgid ""
"Writing light processor functions is completely optional. You can skip the "
"light function by setting render_mode to ``unshaded``. If no light function "
"is written, Godot will use the material properties written to in the "
"fragment function to calculate the lighting for you (subject to the "
"render_mode)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:255
msgid ""
"To write a light function, assign something to DIFFUSE_LIGHT or "
"SPECULAR_LIGHT. Assigning nothing means no light is processed."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:258
msgid ""
"The light function is called for every light in every pixel. It is called "
"within a loop for each light type."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:264
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:117
msgid "Fragment coordinate, pixel adjusted."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:278
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:168
msgid "in vec3 **NORMAL**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:278
msgid "Normal vector, in view space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:280
msgid "in vec3 **VIEW**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:280
msgid "View vector, in view space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:282
msgid "in vec3 **LIGHT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:282
msgid "Light Vector, in view space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:284
msgid "in vec3 **LIGHT_COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:284
msgid "Color of light multiplied by energy."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:286
msgid "in vec3 **ATTENUATION**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:286
msgid "Attenuation based on distance or shadow."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:288
msgid "in vec3 **ALBEDO**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:288
msgid "Base albedo."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:290
msgid "in vec3 **TRANSMISSION**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:290
msgid "Transmission mask."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:292
msgid "in float **ROUGHNESS**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:292
msgid "Roughness."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:294
msgid "out vec3 **DIFFUSE_LIGHT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:294
msgid "Diffuse light result."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:296
msgid "out vec3 **SPECULAR_LIGHT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/spatial_shader.rst:296
msgid "Specular light result."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:4
msgid "CanvasItem shaders"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:6
msgid ""
"CanvasItem shaders are used to draw all 2D elements in Godot. These include "
"all nodes that inherit from CanvasItems, and all GUI elements."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:9
msgid ""
"CanvasItem shaders contain less built-in variables and functionality than "
"Spatial shaders, but they maintain the same basic structure with vertex, "
"fragment, and light processor functions."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:27
msgid "**blend_premul_alpha**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:27
msgid "Pre-multiplied alpha blend mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:31
msgid "**light_only**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:31
msgid "Only draw on light pass."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:33
msgid "VERTEX/NORMAL/etc need to be transformed manually in vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:44
msgid ""
"Vertex data (``VERTEX``) is presented in local space (pixel coordinates, "
"relative to the camera). If not written to, these values will not be "
"modified and be passed through as they came."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:47
msgid ""
"The user can disable the built-in modelview transform (projection will still "
"happen later) and do it manually with the following code:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:60
msgid ""
"Other built-ins, such as UV and COLOR, are also passed through to the "
"fragment function if not modified."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:72
msgid "Image to World transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:74
msgid "in mat4 **EXTRA_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:74
msgid "Extra transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:76
msgid "World to view transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:78
msgid "Global time, in seconds."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:80
msgid "Instance custom data."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:82
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:147
msgid "in bool **AT_LIGHT_PASS**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:82
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:147
msgid "True if this is a light pass."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:84
msgid "inout vec2 **VERTEX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:84
msgid "Vertex, in image space."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:86
msgid "inout vec2 **UV**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:86
msgid "UV."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:88
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:128
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:53
msgid "inout vec4 **COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:88
msgid "Color from vertex primitive."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:90
msgid "inout float **POINT_SIZE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:90
msgid "Point size for point drawing."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:96
msgid ""
"Certain Nodes (for example, :ref:`Sprites <class_Sprite>`) display a texture "
"by default. However, when a custom fragment function is attached to these "
"nodes, the texture lookup needs to be done manually. Godot does not provide "
"the texture color in the ``COLOR`` built-in variable; to read the texture "
"color for such nodes, use:"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:105
msgid ""
"This differs from the behaviour of the built-in normal map. If a normal map "
"is attached, Godot uses it by default and assigns its value to the built-in "
"``NORMAL`` variable. If you are using a normal map meant for use in 3D, it "
"will appear inverted. In order to use it in your shader, you must assign it "
"to the ``NORMALMAP`` property. Godot will handle converting it for use in 2D "
"and overwriting ``NORMAL``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:119
msgid "inout vec3 **NORMAL**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:119
msgid "Normal read from **NORMAL_TEXTURE**. Writable."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:121
msgid ""
"Configures normal maps meant for 3D for use in 2D. If used, overwrites "
"**NORMAL**."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:124
msgid "inout float **NORMALMAP_DEPTH**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:124
msgid "Normalmap depth for scaling."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:126
msgid "UV from vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:128
msgid ""
"Color from vertex function and output fragment color. If unused, will be set "
"to **TEXTURE** color."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:131
msgid "in sampler2D **TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:131
msgid "Default 2D texture."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:133
msgid "in sampler2D **NORMAL_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:133
msgid "Default 2D normal texture."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:135
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:178
msgid "in vec2 **TEXTURE_PIXEL_SIZE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:135
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:178
msgid ""
"Normalized pixel size of default 2D texture. For a Sprite with a texture of "
"size 64x32px, **TEXTURE_PIXEL_SIZE** = :code:`vec2(1/64, 1/32)`"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:139
msgid "Screen UV for use with **SCREEN_TEXTURE**."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:141
msgid "in vec2 **SCREEN_PIXEL_SIZE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:141
msgid "Size of individual pixels. Equal to inverse of resolution."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:143
msgid "Coordinate for drawing points."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:145
#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:186
#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:67
msgid "Global time in seconds."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:149
msgid "in sampler2D **SCREEN_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:149
msgid "Screen texture, mipmaps contain gaussian blurred versions."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:155
msgid ""
"Light processor functions work differently in 2D than they do in 3D. In "
"CanvasItem shaders, the shader is called once for the object being drawn, "
"and then once for each light touching that object in the scene. Use "
"render_mode ``unshaded`` if you do not want any light passes to occur for "
"that object. Use render_mode ``light_only`` if you only want light passes to "
"occur for that object; this can be useful when you only want the object "
"visible where it is covered by light."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:161
msgid ""
"When the shader is on a light pass, the ``AT_LIGHT_PASS`` variable will be "
"``true``."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:166
msgid "Fragment coordinate of pixel center. Origin at lower left."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:168
msgid ""
"Input Normal. Although this value is passed in, **normal calculation still "
"happens outside of this function**."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:171
msgid "UV from vertex function, equivalent to the UV in the fragment function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:173
msgid ""
"Input Color. This is the output of the fragment function with final "
"modulation applied."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:176
msgid "sampler2D **TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:176
msgid "Current texture in use for CanvasItem."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:182
msgid "**SCREEN_TEXTURE** Coordinate (for using with screen texture)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:184
msgid "UV for Point Sprite."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:188
msgid "inout vec2 **LIGHT_VEC**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:188
msgid ""
"Vector from light to fragment, can be modified to alter shadow computation."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:190
msgid "inout float **LIGHT_HEIGHT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:190
msgid "Height of Light. Only effective when normals are used."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:192
msgid "inout vec4 **LIGHT_COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:192
msgid "Color of Light."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:194
msgid "in vec2 **LIGHT_UV**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:194
msgid "UV for Light texture."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:196
msgid "out vec4 **SHADOW_COLOR**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:196
msgid "Shadow Color of Light. **(not yet implemented)**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:198
msgid "inout vec4 **LIGHT**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/canvas_item_shader.rst:198
msgid ""
"Value from the Light texture and output color. Can be modified. If not used, "
"the light function is ignored."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:4
#, fuzzy
msgid "Particle shaders"
msgstr "파티클(Particles)"

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:6
msgid ""
"Particle shaders are a special type of vertex shader that runs before the "
"object is drawn. They are used for calculating material properties such as "
"color, position, and rotation. They are drawn with any regular material for "
"CanvasItem or Spatial, depending on whether they are 2D or 3D."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:11
msgid ""
"Particle shaders are unique because they are not used to draw the object "
"itself; they are used to calculate particle properties, which are then used "
"by the CanvasItem of Spatial shader. They contain only a vertex processor "
"function that outputs multiple properties (see built-ins below)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:16
msgid ""
"Particle shaders use a transform feedback shader, which is a special type of "
"vertex shader that runs on its own. It takes in data in a buffer like a "
"regular vertex shader does, but it also outputs to data buffers instead of "
"outputting to the fragment shader for pixel-processing. Because of this, "
"transform feedback shaders can build on themselves each run, unlike other "
"shaders that discard the data they have calculated once they draw to the "
"frame buffer."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:23
msgid ""
"Particle shaders are only available in the GLES3 renderer. If you need "
"particles in GLES2, use :ref:`CPUParticles <class_CPUParticles>`."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:32
msgid "**keep_data**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:32
msgid "Do not clear previous data on restart."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:34
msgid "**disable_force**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:34
msgid "Disable attractor force. (Not currently implemented in 3.1)"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:36
msgid "**disable_velocity**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:36
msgid "Ignore **VELOCITY** value."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:47
msgid ""
"In order to use the ``COLOR`` variable in a SpatialMaterial, set "
"``use_vertex_as_albedo`` to ``true``. In a ShaderMaterial, access it with "
"the ``COLOR`` variable."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:53
msgid ""
"Particle color, can be written to and accessed in mesh's vertex function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:55
msgid "inout vec3 **VELOCITY**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:55
msgid "Particle velocity, can be modified."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:57
msgid "out float **MASS**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:57
msgid "Particle mass, use for attractors (not implemented in 3.1)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:59
msgid "inout bool **ACTIVE**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:59
msgid "True when Particle is active, can be set to false."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:61
msgid "in bool **RESTART**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:61
msgid "True when particle must restart (lifetime cycled)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:63
msgid "inout vec4 **CUSTOM**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:63
msgid ""
"Custom particle data. Accessible from shader of mesh as **INSTANCE_CUSTOM**."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:65
msgid "inout mat4 **TRANSFORM**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:65
msgid "Particle transform."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:69
msgid "in float **LIFETIME**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:69
msgid "Particle lifetime."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:71
msgid "in float **DELTA**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:71
msgid "Delta process time."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:73
msgid "in uint **NUMBER**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:73
msgid "Unique number since emission start."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:75
msgid "in int **INDEX**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:75
msgid "Particle index (from total particles)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:77
msgid "in mat4 **EMISSION_TRANSFORM**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:77
msgid "Emitter transform (used for non-local systems)."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:79
msgid "in uint **RANDOM_SEED**"
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/particle_shader.rst:79
msgid "Random seed used as base for random."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:4
msgid "Shader materials"
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:9
msgid ""
"For the most common cases, Godot provides ready to use materials for most "
"types of shaders, such as SpatialMaterial, CanvasItemMaterial and "
"ParticlesMaterial (@TODO link to tutorials/classes). They are flexible "
"implementations that cover most use cases."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:14
msgid ""
"Shader materials allow writing a custom shader directly, for maximum "
"flexibility. Examples of this are:"
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:17
msgid "Create procedural textures."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:18
msgid "Create complex texture blendings."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:19
msgid "Create animated materials, or materials that change over time."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:20
msgid "Create refractive effects or other advanced effects."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:21
msgid "Create special lighting shaders for more exotic materials."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:22
msgid "Animate vertices, like tree leaves or grass."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:23
msgid ""
"Create custom particle code, that responds to baked animations or force "
"fields."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:26
msgid ""
"Traditionally, most engines will ask you to learn GLSL, HLSL or Cg, which "
"are pretty complex for the skillset of most artists. Godot uses a simplified "
"version of a shader language that will detect errors as you type, so you can "
"see your edited shaders in real-time. Additionally, it is possible to edit "
"shaders using a visual, node-based graph editor."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:33
msgid "Creating a ShaderMaterial"
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:35
msgid ""
"Create a new ShaderMaterial in some object of your choice. Go to the "
"\"Material\" property and create a ShaderMaterial."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:40
msgid "Edit the newly created shader, and the shader editor will open:"
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:45
msgid "Converting to ShaderMaterial"
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:47
msgid ""
"It is possible to convert from SpatialMaterial, CanvasItemMaterial and "
"ParticlesMaterial to ShaderMaterial. To do so, go to the material properties "
"and enable the convert option."
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:4
msgid "Intro to shaders: 2D and 3D water"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:8
msgid ""
"In this hands-on video series, you will create your first water shaders in "
"2D and in 3D. If you're new to shaders, you should start 2D, because you "
"need some basic understanding of the shading language, vertex and fragment "
"shaders, to build upon. 3D adds quite a bit of complexity when it comes to "
"writing shader programs, as you will see in the third video."
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:15
msgid "Watch the tutorials"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:19
msgid ""
"You can watch the `full playlist on YouTube <https://www.youtube.com/watch?"
"v=xoyk_A0RSpI&list=PLhqJJNjsQ7KHqNMYmTwtsYTeTrqrRP_fP>`__. Here are the "
"individual videos:"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:21
msgid ""
"`Intro to Shader Programming <https://www.youtube.com/watch?v=xoyk_A0RSpI>`__"
msgstr ""
"`Intro to Shader Programming <https://www.youtube.com/watch?v=xoyk_A0RSpI>`__"

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:22
msgid ""
"`Animated Water and UV Coordinates <https://www.youtube.com/watch?"
"v=U91nqeUe1qQ>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:24
msgid "`Water in 3D <https://www.youtube.com/watch?v=vm9Sdvhq6ho>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:25
msgid ""
"`Texture-based Deformation <https://www.youtube.com/watch?v=Pg79tztNZeA>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:27
msgid ""
"`Merging the Two Waves Together <https://www.youtube.com/watch?"
"v=aC5Yzx7tS74>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:29
msgid ""
"`Functions in ShaderScript <https://www.youtube.com/watch?v=1eNWPbfph1E>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:31
msgid ""
"`Water Shadow and Masking <https://www.youtube.com/watch?v=Xqv7C9mVhak>`__"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:35
msgid "Download the source code"
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:37
msgid ""
"Download the intro to shaders project here to follow along: :download:"
"`2d_water_shader.zip <files/2d_water_shader.zip>`."
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:40
msgid ""
"It comes with a `start` folder to follow along with the 2D tutorials, and an "
"`end` folder that contains the final code."
msgstr ""

#: ../../docs/tutorials/shading/intro_to_shaders_water_workshop.rst:43
msgid ""
"You will find the 3D water project on `this GitHub repository <https://"
"github.com/BastiaanOlij/shader_tutorial>`_. We didn't include it here, as it "
"is a little heavy."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:4
msgid "Screen-reading shaders"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:9
msgid ""
"Very often, it is desired to make a shader that reads from the same screen "
"to which it's writing. 3D APIs, such as OpenGL or DirectX, make this very "
"difficult because of internal hardware limitations. GPUs are extremely "
"parallel, so reading and writing causes all sorts of cache and coherency "
"problems. As a result, not even the most modern hardware supports this "
"properly."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:16
msgid ""
"The workaround is to make a copy of the screen, or a part of the screen, to "
"a back-buffer and then read from it while drawing. Godot provides a few "
"tools that make this process easy!"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:21
msgid "SCREEN_TEXTURE built-in texture"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:23
msgid ""
"Godot :ref:`doc_shading_language` has a special texture, \"SCREEN_TEXTURE"
"\" (and \"DEPTH_TEXTURE\" for depth, in the case of 3D). It takes as "
"argument the UV of the screen and returns a vec3 RGB with the color. A "
"special built-in varying: SCREEN_UV can be used to obtain the UV for the "
"current fragment. As a result, this simple 2D fragment shader:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:34
msgid "results in an invisible object, because it just shows what lies behind."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:36
msgid ""
"The reason why textureLod must be used is because, when Godot copies back a "
"chunk of the screen, it also does an efficient separatable gaussian blur to "
"its mipmaps."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:39
msgid ""
"This allows for not only reading from the screen, but reading from it with "
"different amounts of blur at no cost."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:43
msgid "SCREEN_TEXTURE example"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:45
msgid ""
"SCREEN_TEXTURE can be used for many things. There is a special demo for "
"*Screen Space Shaders*, that you can download to see and learn. One example "
"is a simple shader to adjust brightness, contrast and saturation:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:69
msgid "Behind the scenes"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:71
msgid ""
"While this seems magical, it's not. The SCREEN_TEXTURE built-in, when first "
"found in a node that is about to be drawn, does a full-screen copy to a back-"
"buffer. Subsequent nodes that use it in shaders will not have the screen "
"copied for them, because this ends up being inefficient."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:77
msgid ""
"As a result, if shaders that use SCREEN_TEXTURE overlap, the second one will "
"not use the result of the first one, resulting in unexpected visuals:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:83
msgid ""
"In the above image, the second sphere (top right) is using the same source "
"for SCREEN_TEXTURE as the first one below, so the first one \"disappears\", "
"or is not visible."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:87
msgid ""
"In 3D, this is unavoidable because copying happens when opaque rendering "
"completes."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:90
msgid ""
"In 2D, this can be corrected via the :ref:`BackBufferCopy "
"<class_BackBufferCopy>` node, which can be instantiated between both "
"spheres. BackBufferCopy can work by either specifying a screen region or the "
"whole screen:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:96
msgid "With correct back-buffer copying, the two spheres blend correctly:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:101
msgid "Back-buffer logic"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:103
msgid ""
"So, to make it clearer, here's how the backbuffer copying logic works in "
"Godot:"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:106
msgid ""
"If a node uses the SCREEN_TEXTURE, the entire screen is copied to the back "
"buffer before drawing that node. This only happens the first time; "
"subsequent nodes do not trigger this."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:109
msgid ""
"If a BackBufferCopy node was processed before the situation in the point "
"above (even if SCREEN_TEXTURE was not used), the behavior described in the "
"point above does not happen. In other words, automatic copying of the entire "
"screen only happens if SCREEN_TEXTURE is used in a node for the first time "
"and no BackBufferCopy node (not disabled) was found before in tree-order."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:115
msgid ""
"BackBufferCopy can copy either the entire screen or a region. If set to only "
"a region (not the whole screen) and your shader uses pixels not in the "
"region copied, the result of that read is undefined (most likely garbage "
"from previous frames). In other words, it's possible to use BackBufferCopy "
"to copy back a region of the screen and then use SCREEN_TEXTURE on a "
"different region. Avoid this behavior!"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:124
msgid "DEPTH_TEXTURE"
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:126
msgid ""
"For 3D Shaders, it's also possible to access the screen depth buffer. For "
"this, the DEPTH_TEXTURE built-in is used. This texture is not linear; it "
"must be converted via the inverse projection matrix."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:130
msgid ""
"The following code retrieves the 3D position below the pixel being drawn:"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:4
msgid "Migrating to Godot's shading language"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:9
msgid ""
"This document explains the differences between Godot's shading language and "
"GLSL and gives practical advice on how to migrate shaders from other "
"sources, such as Shadertoy and The Book of Shaders, into Godot shaders."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:13
msgid ""
"For detailed information on Godot's shading language, please refer to the :"
"ref:`Shading Language <doc_shading_language>` reference."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:17
msgid "GLSL"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:19
msgid ""
"Godot uses a shading language based on GLSL with the addition of a few "
"quality-of-life features. Accordingly, most features available in GLSL are "
"available in Godot's shading language."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:23
msgid "Shader programs"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:25
msgid ""
"In GLSL, each shader uses a separate program. You have one program for the "
"vertex shader and one for the fragment shader. In Godot, you have a single "
"shader that contains a ``vertex`` and/or a ``fragment`` function. If you "
"only choose to write one, Godot will supply the other."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:29
msgid ""
"Godot allows uniform variables and functions to be shared by defining the "
"fragment and vertex shaders in one file. In GLSL, the vertex and fragment "
"programs cannot share variables except when varyings are used."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:34
#, fuzzy
msgid "Vertex attributes"
msgstr "``x.attribute``"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:36
msgid ""
"In GLSL, you can pass in per-vertex information using attributes and have "
"the flexibility to pass in as much or as little as you want. In Godot, you "
"have a set number of input attributes, including ``VERTEX`` (position), "
"``COLOR``, ``UV``, ``UV2``, ``NORMAL``. For a complete list, see the :ref:"
"`Shading language reference <doc_shading_language>`."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:42
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:98
msgid "gl_Position"
msgstr "gl_Position"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:44
msgid ""
"``gl_Position`` receives the final position of a vertex specified in the "
"vertex shader. It is specified by the user in clip space. Typically, in "
"GLSL, the model space vertex position is passed in using a vertex attribute "
"called ``position`` and you handle the conversion from model space to clip "
"space manually."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:49
msgid ""
"In Godot, ``VERTEX`` specifies the vertex position in model space at the "
"beginning of the ``vertex`` function. Godot also handles the final "
"conversion to clip space after the user-defined ``vertex`` function is run. "
"If you want to skip the conversion from model to view space, you can set the "
"``render_mode`` to ``skip_vertex_transform``. If you want to skip all "
"transforms, set ``render_mode`` to ``skip_vertex_transform`` and set the "
"``PROJECTION_MATRIX`` to ``mat4(1.0)`` in order to nullify the final "
"transform from view space to clip space."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:59
msgid ""
"Varyings are a type of variable that can be passed from the vertex shader to "
"the fragment shader. In modern GLSL (3.0 and up), varyings are defined with "
"the ``in`` and ``out`` keywords. A variable going out of the vertex shader "
"is defined with ``out`` in the vertex shader and ``in`` inside the fragment "
"shader."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:64
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:206
msgid "Main"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:66
msgid ""
"In GLSL, each shader program looks like a self-contained C-style program. "
"Accordingly, the main entry point is ``main``. If you are copying a vertex "
"shader, rename ``main`` to ``vertex`` and if you are copying a fragment "
"shader, rename ``main`` to ``fragment``."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:73
msgid ""
"Godot currently does not support constants. You can fake the functionality "
"by using a uniform initialized to the value, but you will not benefit from "
"the increased speed from using a constant."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:77
msgid "Macros"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:79
msgid ""
"In keeping with its similarity to C, GLSL lets you use macros. Commonly "
"``#define`` is used to define constants or small functions. There is no "
"straightforward way to translate defines to Godot's shading language. If it "
"is a function that is defined, then replace with a function, and if it is a "
"constant, then replace with a uniform. For other macros (``#if``, "
"``#ifdef``, etc.), there is no equivalent because they run during the pre-"
"processing stage of compilation."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:88
msgid ""
"GLSL has many built-in variables that are hard-coded. These variables are "
"not uniforms, so they are not editable from the main program."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:92
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:158
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:218
msgid "Variable"
msgstr "변수"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:92
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:158
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:218
msgid "Equivalent"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:94
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:220
msgid "gl_FragColor"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:94
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:160
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:220
msgid "out vec4"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:94
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:160
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:220
msgid "COLOR"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:94
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:160
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:220
msgid "Output color for each pixel."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:96
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:222
msgid "gl_FragCoord"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:96
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:98
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:174
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:176
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:222
msgid "vec4"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:96
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:162
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:222
msgid "FRAGCOORD"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:96
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:162
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:222
msgid "For full screen quads. For smaller quads, use UV."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:98
msgid "VERTEX"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:98
msgid "Position of Vertex, output from Vertex Shader."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:100
msgid "gl_PointSize"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:100
msgid "POINT_SIZE"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:100
msgid "Size of Point primitive."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:102
msgid "gl_PointCoord"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:102
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:162
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:224
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:228
msgid "vec2"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:102
msgid "POINT_COORD"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:102
msgid "Position on point when drawing Point primitives."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:104
msgid "gl_FrontFacing"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:104
msgid "FRONT_FACING"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:104
msgid "True if front face of primitive."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:110
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:184
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:232
msgid "Coordinates"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:112
msgid ""
"``gl_FragCoord`` in GLSL and ``FRAGCOORD`` in the Godot shading language use "
"the same coordinate system. If using UV in Godot, the y-coordinate will be "
"flipped upside down."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:118
msgid ""
"In GLSL, you can define the precision of a given type (float or int) at the "
"top of the shader with the ``precision`` keyword. In Godot, you can set the "
"precision of individual variables as you need by placing precision "
"qualifiers ``lowp``, ``mediump``, and ``highp`` before the type when "
"defining the variable. For more information, see the :ref:`Shading Language "
"<doc_shading_language>` reference."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:124
msgid "Shadertoy"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:126
msgid ""
"`Shadertoy <https://www.shadertoy.com>`_ is a website that makes it easy to "
"write fragment shaders and create `pure magic <https://www.shadertoy.com/"
"view/4tjGRh>`_."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:129
msgid ""
"Shadertoy does not give the user full control over the shader. It handles "
"all the input and uniforms and only lets the user write the fragment shader."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:133
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:200
msgid "Types"
msgstr "타입(Types)"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:135
msgid ""
"Shadertoy uses the webgl spec, so it runs a slightly different version of "
"GLSL. However, it still has the regular types, including `Constants`_ and "
"macros."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:139
msgid "mainImage"
msgstr "메인 이미지(mainImage)"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:141
msgid ""
"The main point of entry to a Shadertoy shader is the ``mainImage`` function. "
"``mainImage`` has two parameters, ``fragColor`` and ``fragCoord``, which "
"correspond to ``COLOR`` and ``FRAGCOORD`` in Godot, respectively. These "
"parameters are handled automatically in Godot, so you do not need to include "
"them as parameters yourself. Anything in the ``mainImage`` function should "
"be copied into the ``fragment`` function when porting to Godot."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:150
msgid ""
"In order to make writing fragment shaders straightforward and easy, "
"Shadertoy handles passing a lot of helpful information from the main program "
"into the fragment shader for you. A few of these have no equivalents in "
"Godot because Godot has chosen not to make them available by default. This "
"is okay because Godot gives you the ability to make your own uniforms. For "
"variables whose equivalents are listed as \"Provide with Uniform\", the user "
"is responsible for creating that uniform themself. The description gives the "
"reader a hint about what they can pass in as a substitute."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:160
msgid "fragColor"
msgstr "fragColor"

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:162
msgid "fragCoord"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:164
msgid "iResolution"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:164
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:178
msgid "vec3"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:164
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:224
msgid "1.0 / SCREEN_PIXEL_SIZE"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:164
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:224
msgid "Can also pass in manually."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:166
msgid "iTime"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:166
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:226
msgid "TIME"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:166
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:226
msgid "Time since shader started."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:168
msgid "iTimeDelta"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:168
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:170
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:172
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:174
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:176
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:228
msgid "Provide with Uniform"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:168
msgid "Time to render previous frame."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:170
msgid "iFrame"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:170
msgid "Frame number."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:172
msgid "iChannelTime[4]"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:172
msgid "Time since that particular texture started."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:174
msgid "iMouse"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:174
#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:228
msgid "Mouse position in pixel coordinates."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:176
msgid "iDate"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:176
msgid "Current date, expressed in seconds."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:178
msgid "iChannelResolution[4]"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:178
msgid "1.0 / TEXTURE_PIXEL_SIZE"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:178
msgid "Resolution of particular texture."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:180
msgid "iChanneli"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:180
msgid "Sampler2D"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:180
msgid "TEXTURE"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:180
msgid "Godot provides only one built-in; user can make more."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:186
msgid ""
"``fragCoord`` behaves the same as ``gl_FragCoord`` in :ref:`GLSL "
"<glsl_coordinates>` and ``FRAGCOORD`` in Godot."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:190
msgid "The Book of Shaders"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:192
msgid ""
"Similar to Shadertoy, `The Book of Shaders <https://thebookofshaders.com>`_ "
"provides access to a fragment shader in the web browser, with which the user "
"may interact. The user is restricted to writing fragment shader code with a "
"set list of uniforms passed in and with no ability to add additional "
"uniforms."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:196
msgid ""
"For further help on porting shaders to various frameworks generally, The "
"Book of Shaders provides a `page <https://thebookofshaders.com/04>`_ on "
"running shaders in various frameworks."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:202
msgid ""
"The Book of Shaders uses the webgl spec, so it runs a slightly different "
"version of GLSL. However, it still has the regular types, including "
"`Constants`_ and macros."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:208
msgid ""
"The entry point for a Book of Shaders fragment shader is ``main``, just like "
"in GLSL. Everything written in a Book of Shaders ``main`` function should be "
"copied into Godot's ``fragment`` function."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:214
msgid ""
"The Book of Shaders sticks closer to plain GLSL than Shadertoy does. It also "
"implements fewer uniforms than Shadertoy."
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:224
msgid "u_resolution"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:226
msgid "u_time"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:228
msgid "u_mouse"
msgstr ""

#: ../../docs/tutorials/shading/migrating_to_godot_shader_language.rst:234
msgid ""
"The Book of Shaders uses the same coordinate system as :ref:`GLSL "
"<glsl_coordinates>`."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:4
msgid "Vertex displacement with shaders"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:9
msgid ""
"This tutorial will teach you how to displace the vertices of a :ref:`Plane "
"Mesh<class_PlaneMesh>` inside a shader. Vertex displacement can be used for "
"a wide variety of effects, but most commonly it is used as a quick way to "
"turn a flat plane into a simple terrain. Typically this is done using a "
"heightmap, but in order to keep everything self contained, in this tutorial, "
"we will use noise in a shader. At the end of this tutorial, we will have a "
"deformed plane that looks like a miniature terrain complete with dynamic "
"lighting."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:18
msgid "By reading this tutorial, you should gain a basic understanding of:"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:20
msgid "How to create and subdivide a :ref:`Plane Mesh<class_PlaneMesh>`"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:21
msgid ""
"How to create and assign a material to a :ref:`Mesh<class_MeshInstance>`"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:22
msgid ""
"How to write a :ref:`Shader<class_Shader>` that displaces the vertices of a :"
"ref:`Mesh<class_MeshInstance>`"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:23
msgid ""
"How to pass values (Uniforms) into a :ref:`Shader<class_Shader>` to update "
"the :ref:`Mesh<class_MeshInstance>` in realtime"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:24
msgid "How to approximate normals from a height function"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:25
msgid "How to use a light with a custom material"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:28
msgid "The plane mesh"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:30
msgid ""
"First, add a :ref:`Spatial<class_Spatial>` node to the scene to act as the "
"root. Next, add a :ref:`MeshInstance<class_MeshInstance>` as a child."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:35
msgid ""
"Select the newly created :ref:`MeshInstance<class_MeshInstance>`. Then click "
"on the button that says \"null\" next to the :ref:`Mesh<class_MeshInstance>` "
"in the Inspector. This will bring up a list of :ref:"
"`PrimitiveMeshes<class_PrimitiveMesh>`. Select \"New PlaneMesh\"."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:41
msgid ""
"The button will change into a small image of a plane. Click on it to enter "
"into the Inspector for the :ref:`Plane Mesh<class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:44
msgid ""
"Then, in the viewport, click in the upper left corner where it says "
"[Perspective]. A menu will appear. In the middle of the menu are options for "
"how to display the scene. Select 'Display Wireframe'."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:50
msgid "This will allow you to see the triangles making up the plane."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:54
msgid "Now set the ``Subdivide Width`` and ``Subdivide Height`` to ``32``."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:58
msgid ""
"You can see that there are now many more triangles in the :ref:"
"`Mesh<class_MeshInstance>`. This will give us more vertices to work with and "
"thus allow us to add more detail."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:65
msgid "Shader magic"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:67
msgid ""
"Now that we have a :ref:`Plane Mesh<class_MeshInstance>` to draw, let's set "
"up the material that will deform the :ref:`Mesh<class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:69
msgid ""
"Click beside material in the :ref:`Plane Mesh<class_MeshInstance>` Menu and "
"create a new :ref:`ShaderMaterial<class_ShaderMaterial>`."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:73
msgid "Then click on the created :ref:`ShaderMaterial<class_ShaderMaterial>`."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:75
msgid ""
"Then click beside 'shader' and create a new :ref:`Shader<class_Shader>`."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:79
msgid ""
"Click into the newly created :ref:`Shader<class_Shader>`. You should now see "
"Godot's Shader editor."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:83
msgid ""
"Notice how it is throwing an error? This is because the shader editor "
"reloads shaders on the fly automatically. The first thing Godot shaders need "
"is a declaration of what type of shader they are. Accordingly, we set the "
"variable ``shader_type`` to ``spatial``. One more thing we will add is the "
"``render_mode``, we will set it to ``unshaded``. This means that Godot won't "
"run the light shader on this object."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:94
msgid ""
"This should remove the errors and your :ref:`Mesh<class_MeshInstance>` "
"should turn white. If you were to comment out the ``render_mode``, the plane "
"would appear blue because it would pick up the sky colors."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:97
msgid ""
"Next we will define a vertex shader. The vertex shader determines where the "
"vertices of your :ref:`Mesh<class_MeshInstance>` appear in the final scene. "
"We will be using it to offset the height of each vertex and make our flat "
"plane appear like a little terrain."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:101
msgid "We define the vertex shader like so:"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:109
msgid ""
"With nothing in the ``vertex`` function, Godot will use its default vertex "
"shader. We can easily start to make changes by adding a single line:"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:118
msgid "Adding this line, you should get an image like the one below."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:122
msgid ""
"Okay, let's unpack this. The ``y`` value of the ``VERTEX`` is being "
"increased. And we are passing the ``x`` and ``z`` components of the "
"``VERTEX`` as arguments to ``cos`` and ``sin``; that gives us a wave-like "
"appearance across the ``x`` and ``z`` axes."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:126
msgid ""
"What we want to achieve is the look of little hills; after all. ``cos`` and "
"``sin`` already look kind of like hills. We do so by scaling the inputs to "
"the ``cos`` and ``sin`` functions."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:137
msgid ""
"This looks better, but it is still too spiky. This is because ``cos`` and "
"``sin`` output values between ``-1`` and ``1``, so the range of the output "
"is much too high. We correct this by multiplying the result by ``0.5`` to "
"reduce the size."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:148
msgid ""
"Looks much more hilly now. But ``cos`` and ``sin`` are boring. Let's move "
"onto something more interesting."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:151
msgid "Noise"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:153
msgid ""
"Noise is a very popular tool for procedural generation. Think of it as "
"similar to the cosine function where you have repeating hills except, with "
"noise, each hill has a different height. Understanding noise is not "
"necessary for this tutorial. There is nothing wrong with simply copying and "
"pasting the code below."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:158
msgid ""
"The first function we use to generate the noise is the ``hash`` function. It "
"gives the random height for each of the hill tops."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:167
msgid ""
"You will find similar functions to this all over the internet. It is "
"lovingly referred to as the 'one-liner hash function'. It works well for "
"simple noise, but there are many better alternatives floating around as "
"well. For this tutorial, it will work fine."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:171
msgid ""
"Next we define the ``noise`` function. It smoothly interpolates between the "
"random heights. Again, if this code seems daunting, do not worry; just copy, "
"paste and move on with the tutorial."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:185
msgid ""
"Lastly, to add detail, we combine successive layers of noise using something "
"called fractal brownian motion or FBM. Scary name aside, FBM noise just adds "
"together layers of noise with increasing frequency and decreasing amplitude. "
"To implement it, we run over a for loop where we increase the frequency each "
"level, decrease the amplitude, and calculate a new layer of noise."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:204
msgid ""
"We can now use this noise function in place of ``cos`` and ``sin`` in the "
"previous section."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:213
msgid ""
"With the noise function in place, we already have something that looks kind "
"of cool. There is a lot of detail, it kind of looks hilly or mountainous."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:217
msgid "Fragment shader"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:219
msgid ""
"The difference between a vertex shader and a fragment shader is that the "
"vertex shader runs per vertex and sets properties such as ``VERTEX`` "
"(position) and ``NORMAL``, while the fragment shader runs per pixel and, "
"most importantly, sets the ``ALBEDO`` color of the :ref:"
"`Mesh<class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:223
msgid ""
"Now let's look at the :ref:`Mesh<class_MeshInstance>` with a regular shader "
"instead of the wireframe. Set the viewport back to 'Display Normal'."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:228
msgid ""
"The :ref:`Mesh<class_MeshInstance>` appears completely white because the "
"fragment shader is coloring each pixel white; but if every pixel is white, "
"we lose detail on the :ref:`Mesh<class_MeshInstance>`. So let's color each "
"pixel based on the height calculated in the vertex shader. We do so by "
"setting the ``COLOR`` variable in the vertex shader. And by setting the "
"``ALBEDO`` in the fragment shader to the calculated ``COLOR`` variable."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:245
msgid ""
"With this change, we can see the detail of the :ref:"
"`Mesh<class_MeshInstance>`, even without displaying the :ref:"
"`Mesh<class_MeshInstance>`'s wireframe."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:252
msgid ""
"Uniform variables allow you to pass data from the game into the shader. They "
"can be very useful for controlling shader effects. Uniforms can be almost "
"any datatype that can be used in the shader. To use a uniform, you declare "
"it in your :ref:`Shader<class_Shader>` using the keyword ``uniform``."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:257
msgid "Let's make a uniform that changes the height of the terrain."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:264
msgid ""
"Godot lets you initialize a uniform with a value; here, ``height_scale`` is "
"set to ``0.5``. You can set uniforms from GDScript by calling the function "
"``set_shader_param`` on the material corresponding to the shader. The value "
"passed from GDScript takes precedence over the value used to initialize it "
"in the shader."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:273
msgid ""
"Remember that the string passed into ``set_shader_param`` must match the "
"name of the uniform variable in the :ref:`Shader<class_Shader>`. You can use "
"the uniform variable anywhere inside your :ref:`Shader<class_Shader>`. Here, "
"we will use it to set the height value instead of arbitrarily multiplying by "
"``0.5``."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:282
msgid ""
"The terrain should look exactly the same, but now we have control over the "
"height easily. Here is the same terrain with ``height_scale`` set to ``1``:"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:287
msgid "And here it is with ``height_scale`` set to ``0.2``:"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:291
msgid ""
"Using uniforms, we can even change the value every frame to animate the "
"height of the terrain. Combined with :ref:`Tweens<class_Tween>`, this can be "
"especially useful for simple animations."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:295
msgid "Interacting with light"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:297
msgid ""
"As a final part of this tutorial, let's try to set up the terrain to "
"interact with light. First, we will add an :ref:`OmniLight<class_OmniLight>` "
"to the scene."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:303
msgid ""
"You should notice that nothing changes. That is because we set the "
"``render_mode`` to ``unshaded`` at the beginning of this tutorial; let's "
"remove that."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:313
msgid ""
"It looks slightly better now; you can see the light affecting the terrain, "
"and it has turned blue as a result of the sky. The problem is the light is "
"affecting the terrain as if it were a flat plane. This is because the light "
"shader uses the normals of the :ref:`Mesh<class_MeshInstance>` to calculate "
"light. The normals are stored in the :ref:`Mesh<class_MeshInstance>`, but we "
"are changing the shape of the :ref:`Mesh<class_MeshInstance>` in the shader, "
"so the normals are no longer correct. To fix this, we need to recalculate "
"the normals in the shader. Godot makes this easy for us; all we have to do "
"is calculate the new normal and set ``NORMAL`` to that value in the vertex "
"shader. With ``NORMAL`` set, Godot will do all the difficult lighting "
"calculations for us."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:322
msgid ""
"To calculate the normal from noise, we are going to use a technique called "
"'central differences'. This is used a lot, especially in places like "
"Shadertoy, to calculate normals in shaders. What we will do is calculate the "
"noise at four points surrounding the vertex in the ``x`` and ``z`` "
"directions and then calculate the slope at the vertex from that. After all, "
"a normal is just an indicator of the slope of the noise."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:328
msgid "We calculate the normal with one line in the vertex shader."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:336
msgid ""
"The variable ``e`` just makes it easier to add and subtract the right value "
"from the ``VERTEX``. Setting ``e`` to a lower number will increase the level "
"of detail of the normal."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:339
msgid "With ``NORMAL`` calculated, the terrain now looks like:"
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:343
msgid ""
"This still does not look how we want it to. The issue here is that the noise "
"changes faster than the vertices do. So when we calculate the normal at the "
"point of the ``VERTEX``, it does not align with what we see in the final :"
"ref:`Mesh<class_MeshInstance>`. In order to fix this, we add more vertices. "
"The below image is made with a :ref:`Mesh<class_MeshInstance>` with "
"``subdivision`` set to ``100``."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:351
msgid ""
"Now, we can drag the light around and the lighting will update automatically."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:357
msgid ""
"If you zoom the camera out, you can see that the :ref:"
"`Mesh<class_MeshInstance>` now looks like a small terrain."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:361
msgid ""
"That is everything for this tutorial. Hopefully, you now understand the "
"basics of vertex shaders in Godot. As a further exercise, try changing the "
"``height_scale`` from gdscript, try using different :ref:`Primitive "
"Meshes<class_PrimitiveMesh>`, and try making your own functions to calculate "
"``height``."
msgstr ""

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:366
msgid ""
"For further information on how to use shaders in Godot, you should check out "
"the :ref:`doc_shading_language` page."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:4
msgid "Advanced post-processing"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:9
msgid ""
"This tutorial describes an advanced method for post-processing in Godot. In "
"particular, it will explain how to write a post-processing shader that uses "
"the depth buffer. You should already be familiar with post-processing "
"generally and, in particular, with the methods outlined in the :ref:`custom "
"post-processing tutorial <doc_custom_postprocessing>`."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:14
msgid ""
"In the previous post-processing tutorial, we rendered the scene to a :ref:"
"`Viewport <class_Viewport>` and then rendered the Viewport in a :ref:"
"`ViewportContainer <class_ViewportContainer>` to the main scene. One "
"limitation of this method is that we could not access the depth buffer "
"because the depth buffer is only available in spatial shaders and Viewports "
"do not maintain depth information."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:21
msgid "Full screen quad"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:23
msgid ""
"In the :ref:`custom post-processing tutorial <doc_custom_postprocessing>`, "
"we covered how to use a Viewport to make custom post-processing effects. "
"There are two main drawbacks of using a Viewport:"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:27
msgid "The depth buffer cannot be accessed"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:28
msgid "The effect of the post-processing shader is not visible in the editor"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:30
msgid ""
"To get around the limitation on using the depth buffer, use a :ref:"
"`MeshInstance <class_MeshInstance>` with a :ref:`QuadMesh <class_QuadMesh>` "
"primitive. This allows us to use a spatial shader and to access the depth "
"texture of the scene. Next, use a vertex shader to make the quad cover the "
"screen at all times so that the post-processing effect will be applied at "
"all times, including in the editor."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:36
msgid ""
"First, create a new MeshInstance and set its mesh to a QuadMesh. This "
"creates a quad centered at position ``(0, 0, 0)`` with a width and height of "
"``1``. Set the width and height to ``2``. Right now, the quad occupies a "
"position in world space at the origin; however, we want it to move with the "
"camera so that it always covers the entire screen. To do this, we will "
"bypass the coordinate transforms that translate the vertex positions through "
"the difference coordinate spaces and treat the vertices as if they were "
"already in clip space."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:44
msgid ""
"The vertex shader expects coordinates to be output in clip space, which are "
"coordinates ranging from ``-1`` at the left and bottom of the screen to "
"``1`` at the top and right of the screen. This is why the QuadMesh needs to "
"have height and width of ``2``. Godot handles the transform from model to "
"view space to clip space behind the scenes, so we need to nullify the "
"effects of Godot's transformations."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:50
msgid ""
"First, set ``render_mode`` to ``skip_vertex_transform``, which removes the "
"transformation from model space to view space. Godot handles the "
"transformation from view space to clip space behind the scenes with the "
"``PROJECTION_MATRIX`` even when ``skip_vertex_transform`` is set. Nullify "
"the projection matrix by setting it to the `identity matrix <https://en."
"wikipedia.org/wiki/Identity_matrix>`_. In Godot, this is done by passing a "
"`1` to a ``mat4``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:65
msgid ""
"Even with this vertex shader, the quad keeps disappearing. This is due to "
"frustum culling, which is done on the CPU. Frustum culling uses the camera "
"matrix and the AABBs of Meshes to determine if the Mesh will be visible "
"*before* passing it to the GPU. The CPU has no knowledge of what we are "
"doing with the vertices, so it assumes the coordinates specified refer to "
"world positions, not clip space positions, which results in Godot culling "
"the quad when we turn away from the center of the scene. In order to keep "
"the quad from being culled, there are a few options:"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:73
msgid ""
"Add the QuadMesh as a child to the camera, so the camera is always pointed "
"at it"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:74
msgid "Make the AABB as large as possible so it can always be seen"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:76
msgid ""
"The second option ensures that the quad is visible in the editor, while the "
"first option guarantees that it will still be visible even if the camera "
"moves outside the AABB. You can also use both options."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:81
msgid "Depth texture"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:83
msgid ""
"To read from the depth texture, perform a texture lookup using ``texture()`` "
"and the uniform variable ``DEPTH_TEXTURE``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:90
msgid ""
"Similar to accessing the screen texture, accessing the depth texture is only "
"possible when reading from the current viewport. The depth texture cannot be "
"accessed from another viewport to which you have rendered."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:94
msgid ""
"The values returned by ``DEPTH_TEXTURE`` are between ``0`` and ``1`` and are "
"nonlinear. When displaying depth directly from the ``DEPTH_TEXTURE``, "
"everything will look almost white unless it is very close. This is because "
"the depth buffer stores objects closer to the camera using more bits than "
"those further, so most of the detail in depth buffer is found close to the "
"camera. In order to make the depth value align with world or model "
"coordinates, we need to linearise the value. When we apply the projection "
"matrix to the vertex position, the z value is made nonlinear, so to "
"linearise it, we multiply it by the inverse of the projection matrix, which "
"in Godot, is accessible with the variable ``INV_PROJECTION_MATRIX``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:104
msgid ""
"Firstly, take the screen space coordinates and transform them into "
"normalized device coordinates (NDC). NDC run from ``-1`` to ``1``, similar "
"to clip space coordinates. Reconstruct the NDC using ``SCREEN_UV`` for the "
"``x`` and ``y`` axis, and the depth value for ``z``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:116
msgid ""
"Convert NDC to view space by multiplying the NDC by "
"``INV_PROJECTION_MATRIX``. Recall that view space gives positions relative "
"to the camera, so the ``z`` value will give us the distance to the point."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:129
msgid ""
"Because the camera is facing the negative ``z`` direction, the position will "
"have a negative ``z`` value. In order to get a usable depth value, we have "
"to negate ``view.z``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:132
msgid ""
"The world position can be constructed from the depth buffer using the "
"following code. Note that the ``CAMERA_MATRIX`` is needed to transform the "
"position from view space into world space, so it needs to be passed to the "
"fragment shader with a varying."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:151
#, fuzzy
msgid "An optimization"
msgstr "애니메이션"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:153
msgid ""
"You can benefit from using a single large triangle rather than using a full "
"screen quad. The reason for this is explained `here <https://michaldrobot."
"com/2014/04/01/gcn-execution-patterns-in-full-screen-passes>`_. However, the "
"benefit is quite small and only beneficial when running especially complex "
"fragment shaders."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:158
msgid ""
"Set the Mesh in the MeshInstance to an :ref:`ArrayMesh <class_ArrayMesh>`. "
"An ArrayMesh is a tool that allows you to easily construct a Mesh from "
"Arrays for vertices, normals, colors, etc."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:162
#, fuzzy
msgid "Now, attach a script to the MeshInstance and use the following code:"
msgstr "KineticBody2D에 스크립트를 연결하고 다음 코드를 추가합니다:"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:184
msgid ""
"The triangle is specified in normalized device coordinates. Recall, NDC run "
"from ``-1`` to ``1`` in both the ``x`` and ``y`` directions. This makes the "
"screen ``2`` units wide and ``2`` units tall. In order to cover the entire "
"screen with a single triangle, use a triangle that is ``4`` units wide and "
"``4`` units tall, double its height and width."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:190
msgid ""
"Assign the same vertex shader from above and everything should look exactly "
"the same."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:192
msgid ""
"The one drawback to using an ArrayMesh over using a QuadMesh is that the "
"ArrayMesh is not visible in the editor because the triangle is not "
"constructed until the scene is run. To get around that, construct a single "
"triangle Mesh in a modelling program and use that in the MeshInstance "
"instead."
msgstr ""

#: ../../docs/tutorials/networking/index.rst:2
msgid "Networking"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:4
msgid "High level multiplayer"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:7
msgid "High level vs low level API"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:9
msgid ""
"The following explains the differences of high- and low-level networking in "
"Godot as well as some fundamentals. If you want to jump in head-first and "
"add networking to your first nodes, skip to `Initializing the network`_ "
"below. But make sure to read the rest later on!"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:11
msgid ""
"Godot always supported standard low-level networking via UDP, TCP and some "
"higher level protocols such as SSL and HTTP. These protocols are flexible "
"and can be used for almost anything. However, using them to synchronize game "
"state manually can be a large amount of work. Sometimes that work can't be "
"avoided or is worth it, for example when working with a custom server "
"implementation on the backend. But in most cases, it's worthwhile to "
"consider Godot's high-level networking API, which sacrifices some of the "
"fine-grained control of low-level networking for greater ease of use."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:14
msgid "This is due to the inherent limitations of the low-level protocols:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:16
msgid ""
"TCP ensures packets will always arrive reliably and in order, but latency is "
"generally higher due to error correction. It's also quite a complex protocol "
"because it understands what a \"connection\" is, and optimizes for goals "
"that often don't suit applications like multiplayer games. Packets are "
"buffered to be sent in larger batches, trading less per-packet overhead for "
"higher latency. This can be useful for things like HTTP, but generally not "
"for games. Some of this can be configured and disabled (e.g. by disabling "
"\"Nagle's algorithm\" for the TCP connection)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:18
msgid ""
"UDP is a simpler protocol, which only sends packets (and has no concept of a "
"\"connection\"). No error correction makes it pretty quick (low latency), "
"but packets may be lost along the way or received in the wrong order. Added "
"to that, the MTU (maximum packet size) for UDP is generally low (only a few "
"hundred bytes), so transmitting larger packets means splitting them, "
"reorganizing them and retrying if a part fails."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:23
msgid ""
"In general, TCP can be thought of as reliable, ordered, and slow; UDP as "
"unreliable, unordered and fast. Because of the large difference in "
"performance, it often makes sense to re-build the parts of TCP wanted for "
"games (optional reliability and packet order), while avoiding the unwanted "
"parts (congestion/traffic control features, Nagle's algorithm, etc). Due to "
"this, most game engines come with such an implementation, and Godot is no "
"exception."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:26
msgid ""
"In summary, you can use the low-level networking API for maximum control and "
"implement everything on top of bare network protocols or use the high-level "
"API based on :ref:`SceneTree <class_SceneTree>` that does most of the heavy "
"lifting behind the scenes in a generally optimized way."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:28
msgid ""
"Most of Godot's supported platforms offer all or most of the mentioned high- "
"and low-level networking features. As networking is always largely hardware "
"and operating system dependent, however, some features may change or not be "
"available on some target platforms. Most notably, the HTML5 platform "
"currently only offers WebSocket support and lacks some of the higher level "
"features as well as raw access to low-level protocols like TCP and UDP."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:34
msgid ""
"More about TCP/IP, UDP, and networking: https://gafferongames.com/post/"
"udp_vs_tcp/"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:37
msgid ""
"Gaffer On Games has a lot of useful articles about networking in Games "
"(`here <https://gafferongames.com/tags/networking>`__), including the "
"comprehensive `introduction to networking models in games <https://"
"gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:41
msgid ""
"If you want to use your low-level networking library of choice instead of "
"Godot's built-in networking, see here for an example: https://github.com/"
"PerduGames/gdnet3"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:45
msgid ""
"Adding networking to your game comes with some responsibility. It can make "
"your application vulnerable if done wrong and may lead to cheats or "
"exploits. It may even allow an attacker to compromise the machines your "
"application runs on and use your servers to send spam, attack others or "
"steal your users data if they play your game."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:50
msgid ""
"This is always the case when networking is involved and has nothing to do "
"with Godot. You can of course experiment, but when you release a networked "
"application, always take care of any possible security concerns."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:55
msgid "Mid level abstraction"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:57
msgid ""
"Before going into how we would like to synchronize a game across the "
"network, it can be helpful to understand how the base network API for "
"synchronization works."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:59
msgid ""
"Godot uses a mid-level object :ref:`NetworkedMultiplayerPeer "
"<class_NetworkedMultiplayerPeer>`. This object is not meant to be created "
"directly, but is designed so that several implementations can provide it:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:64
msgid ""
"This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it "
"inherits all the useful methods for serializing, sending and receiving data. "
"On top of that, it adds methods to set a peer, transfer mode, etc. It also "
"includes signals that will let you know when peers connect or disconnect."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:66
msgid ""
"This class interface can abstract most types of network layers, topologies "
"and libraries. By default, Godot provides an implementation based on ENet (:"
"ref:`NetworkedMultiplayerEnet <class_NetworkedMultiplayerENet>`), but this "
"could be used to implement mobile APIs (for adhoc WiFi, Bluetooth) or custom "
"device/console-specific networking APIs."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:69
msgid ""
"For most common cases, using this object directly is discouraged, as Godot "
"provides even higher level networking facilities. Yet it is made available "
"in case a game has specific needs for a lower level API."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:73
msgid "Initializing the network"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:75
msgid ""
"The object that controls networking in Godot is the same one that controls "
"everything tree-related: :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:77
msgid ""
"To initialize high level networking, the SceneTree must be provided a "
"NetworkedMultiplayerPeer object."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:79
msgid ""
"To create that object, it first has to be initialized as a server or client."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:81
msgid ""
"Initializing as a server, listening on the given port, with a given maximum "
"number of peers:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:89
msgid "Initializing as a client, connecting to a given IP and port:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:97
msgid ""
"Note that it may make sense to store the local network peer instance on the "
"SceneTree to be able to access it later, as there currently is no "
"`get_tree().get_network_peer()`. This can be done via SceneTree's metadata "
"feature:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:104
msgid "Checking whether the tree is initialized as a server or client:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:110
msgid "Terminating the networking feature:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:116
msgid ""
"(Although it may make sense to send a message first to let the other peers "
"know you're going away instead of letting the connection close or timeout, "
"depending on your game.)"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:119
msgid "Managing connections"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:121
msgid ""
"Some games accept connections at any time, others during the lobby phase. "
"Godot can be requested to no longer accept connections at any point (see "
"`set_refuse_new_network_connections(bool)` and related methods on :ref:"
"`SceneTree <class_SceneTree>`). To manage who connects, Godot provides the "
"following signals in SceneTree:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:124
msgid "Server and Clients:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:126
msgid "`network_peer_connected(int id)`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:127
msgid "`network_peer_disconnected(int id)`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:129
msgid ""
"The above signals are called on every peer connected to the server "
"(including on the server) when a new peer connects or disconnects. Clients "
"will connect with a unique ID greater than 1, while network peer ID 1 is "
"always the server. Anything below 1 should be handled as invalid. You can "
"retrieve the ID for the local system via :ref:`SceneTree."
"get_network_unique_id() <class_SceneTree_method_get_network_unique_id>`. "
"These IDs will be useful mostly for lobby management and should generally be "
"stored, as they identify connected peers and thus players. You can also use "
"IDs to send messages only to certain peers."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:135
msgid "Clients:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:137
msgid "`connected_to_server`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:138
msgid "`connection_failed`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:139
msgid "`server_disconnected`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:141
msgid ""
"Again, all these functions are mainly useful for lobby management or for "
"adding/removing players on the fly. For these tasks, the server clearly has "
"to work as a server and you have to perform tasks manually such as sending a "
"newly connected player information about other already connected players (e."
"g. their names, stats, etc)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:145
msgid ""
"Lobbies can be implemented any way you want, but the most common way is to "
"use a node with the same name across scenes in all peers. Generally, an "
"autoloaded node/singleton is a great fit for this, to always have access to, "
"e.g. \"/root/lobby\"."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:149
msgid "RPC"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:151
msgid ""
"To communicate between peers, the easiest way is to use RPCs (remote "
"procedure calls). This is implemented as a set of functions in :ref:`Node "
"<class_Node>`:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:154
msgid "`rpc(\"function_name\", <optional_args>)`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:155
msgid "`rpc_id(<peer_id>,\"function_name\", <optional_args>)`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:156
msgid "`rpc_unreliable(\"function_name\", <optional_args>)`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:157
msgid "`rpc_unreliable_id(<peer_id>, \"function_name\", <optional_args>)`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:159
msgid "Synchronizing member variables is also possible:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:161
msgid "`rset(\"variable\", value)`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:162
msgid "`rset_id(<peer_id>, \"variable\", value)`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:163
msgid "`rset_unreliable(\"variable\", value)`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:164
msgid "`rset_unreliable_id(<peer_id>, \"variable\", value)`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:166
msgid "Functions can be called in two fashions:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:168
msgid ""
"Reliable: the function call will arrive no matter what, but may take longer "
"because it will be re-transmitted in case of failure."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:169
msgid ""
"Unreliable: if the function call does not arrive, it will not be re-"
"transmitted; but if it arrives, it will do it quickly."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:171
msgid ""
"In most cases, reliable is desired. Unreliable is mostly useful when "
"synchronizing object positions (sync must happen constantly, and if a packet "
"is lost, it's not that bad because a new one will eventually arrive and it "
"would likely be outdated because the object moved further in the meantime, "
"even if it was resent reliably)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:174
msgid ""
"There is also the `get_rpc_sender_id` function in `SceneTree`, which can be "
"used to check which peer (or peer ID) sent an RPC."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:177
msgid "Back to lobby"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:179
msgid ""
"Let's get back to the lobby. Imagine that each player that connects to the "
"server will tell everyone about it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:230
msgid ""
"You might have already noticed something different, which is the usage of "
"the `remote` keyword on the `register_player` function:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:236
msgid ""
"This keyword has two main uses. The first is to let Godot know that this "
"function can be called from RPC. If no keywords are added, Godot will block "
"any attempts to call functions for security. This makes security work a lot "
"easier (so a client can't call a function to delete a file on another "
"client's system)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:240
msgid ""
"The second use is to specify how the function will be called via RPC. There "
"are four different keywords:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:242
msgid "`remote`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:243
msgid "`remotesync`"
msgstr "`remotesync`"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:244
msgid "`master`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:245
msgid "`puppet`"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:247
msgid ""
"The `remote` keyword means that the `rpc()` call will go via network and "
"execute remotely."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:249
msgid ""
"The `remotesync` keyword means that the `rpc()` call will go via network and "
"execute remotely, but will also execute locally (do a normal function call)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:251
msgid ""
"The others will be explained further down. Note that you could also use the "
"`get_rpc_sender_id` function on `SceneTree` to check which peer actually "
"made the RPC call to `register_player`."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:254
msgid ""
"With this, lobby management should be more or less explained. Once you have "
"your game going, you will most likely want to add some extra security to "
"make sure clients don't do anything funny (just validate the info they send "
"from time to time, or before game start). For the sake of simplicity and "
"because each game will share different information, this is not shown here."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:259
msgid "Starting the game"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:261
msgid ""
"Once enough players have gathered in the lobby, the server should probably "
"start the game. This is nothing special in itself, but we'll explain a few "
"nice tricks that can be done at this point to make your life much easier."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:265
msgid "Player scenes"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:267
msgid ""
"In most games, each player will likely have its own scene. Remember that "
"this is a multiplayer game, so in every peer you need to instance **one "
"scene for each player connected to it**. For a 4 player game, each peer "
"needs to instance 4 player nodes."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:270
msgid ""
"So, how to name such nodes? In Godot, nodes need to have a unique name. It "
"must also be relatively easy for a player to tell which node represents each "
"player ID."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:273
msgid ""
"The solution is to simply name the *root nodes of the instanced player "
"scenes as their network ID*. This way, they will be the same in every peer "
"and RPC will work great! Here is an example:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:301
msgid ""
"Depending on when you execute pre_configure_game(), you may need to change "
"any calls to ``add_child()`` to be deferred via ``call_deferred()``, as the "
"SceneTree is locked while the scene is being created (e.g. when ``_ready()`` "
"is being called)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:305
msgid "Synchronizing game start"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:307
msgid ""
"Setting up players might take different amounts of time for every peer due "
"to lag, different hardware, or other reasons. To make sure the game will "
"actually start when everyone is ready, pausing the game until all players "
"are ready can be useful:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:316
msgid ""
"When the server gets the OK from all the peers, it can tell them to start, "
"as for example:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:337
msgid "Synchronizing the game"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:339
msgid ""
"In most games, the goal of multiplayer networking is that the game runs "
"synchronized on all the peers playing it. Besides supplying an RPC and "
"remote member variable set implementation, Godot adds the concept of network "
"masters."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:343
msgid "Network master"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:345
msgid ""
"The network master of a node is the peer that has the ultimate authority "
"over it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:347
msgid ""
"When not explicitly set, the network master is inherited from the parent "
"node, which if not changed, is always going to be the server (ID 1). Thus "
"the server has authority over all nodes by default."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:349
msgid ""
"The network master can be set with the function :ref:`Node."
"set_network_master(id, recursive) <class_Node_method_set_network_master>` "
"(recursive is true by default and means the network master is recursively "
"set on all child nodes of the node as well)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:352
msgid ""
"Checking that a specific node instance on a peer is the network master for "
"this node for all connected peers is done by calling :ref:`Node."
"is_network_master() <class_Node_method_is_network_master>`. This will return "
"true when executed on the server and false on all client peers."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:354
msgid ""
"If you have paid attention to the previous example, it's possible you "
"noticed that the local peer is set to have network master authority for "
"their own player instead of the server:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:373
msgid ""
"Each time this piece of code is executed on each peer, the peer makes itself "
"master on the node it controls, and all other nodes remain as puppets with "
"the server being their network master."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:375
msgid ""
"To clarify, here is an example of how this looks in the `bomber demo "
"<https://github.com/godotengine/godot-demo-projects/tree/master/networking/"
"multiplayer_bomber>`_:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:382
msgid "Master and puppet keywords"
msgstr "Master 그리고 puppet 키워드"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:386
msgid ""
"The real advantage of this model is when used with the `master`/`puppet` "
"keywords in GDScript (or their equivalent in C# and Visual Script). "
"Similarly to the `remote` keyword, functions can also be tagged with them:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:389
msgid "Example bomb code:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:397
msgid "Example player code:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:411
msgid ""
"In the above example, a bomb explodes somewhere (likely managed by whoever "
"is master). The bomb knows the bodies in the area, so it checks them and "
"checks that they contain an `exploded` function."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:414
msgid ""
"If they do, the bomb calls `exploded` on it. However, the `exploded` method "
"in the player has a `master` keyword. This means that only the player who is "
"master for that instance will actually get the function."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:417
msgid ""
"This instance, then, calls the `stun` method in the same instances of that "
"same player (but in different peers), and only those which are set as "
"puppet, making the player look stunned in all the peers (as well as the "
"current, master one)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:420
msgid ""
"Note that you could also send the stun() message only to a specific player "
"by using rpc_id(<id>, \"exploded\", bomb_owner). This may not make much "
"sense for an area-of-effect case like the bomb, but in other cases, like "
"single target damage."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:4
msgid "Making HTTP requests"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:6
msgid ""
"The :ref:`HTTPRequest <class_HTTPRequest>` node is the easiest way to make "
"HTTP requests in Godot. It is backed by the more low-level :ref:`HTTPClient "
"<class_HTTPClient>`, for which a tutorial is available :ref:`here "
"<doc_http_client_class>`."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:9
msgid ""
"For the sake of this example, we will create a simple UI with a button, that "
"when pressed will start the HTTP request to the specified URL."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:12
msgid "Preparing scene"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:14
msgid ""
"Create a new empty scene, add a CanvasLayer as the root node and add a "
"script to it. Then add two child nodes to it: a Button and an HTTPRequest "
"node. You will need to connect the following signals to the CanvasLayer "
"script:"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:16
msgid "Button.pressed: When the button is pressed, we will start the request."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:17
msgid ""
"HTTPRequest.request_completed: When the request is completed, we will get "
"the requested data as an argument."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:24
msgid ""
"Below is all the code we need to make it work. The URL points to an online "
"API mocker; it returns a pre-defined JSON string, which we will then parse "
"to get access to the data."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:40
msgid ""
"With this, you should see ``(hello:world)`` printed on the console; hello "
"being a key, and world being a value, both of them strings."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:42
msgid ""
"For more information on parsing JSON, see the class references for :ref:"
"`JSON <class_JSON>` and :ref:`JSONParseResult <class_JSONParseResult>`."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:44
msgid ""
"Note that you may want to check whether the ``result`` equals "
"``RESULT_SUCCESS`` and whether a JSON parsing error occurred, see the JSON "
"class reference and :ref:`HTTPRequest <class_HTTPRequest>` for more."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:46
msgid ""
"Of course, you can also set custom HTTP headers. These are given as a string "
"array, with each string containing a header in the format ``\"header: value"
"\"``. For example, to set a custom user agent (the HTTP ``user-agent`` "
"header) you could use the following:"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:53
msgid ""
"Please note that, for SSL/TLS encryption and thus HTTPS URLs to work, you "
"may need to take some steps as described :ref:`here <doc_ssl_certificates>`."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:55
msgid ""
"Also, when calling APIs using authorization, be aware that someone might "
"analyse and decompile your released application and thus may gain access to "
"any embedded authorization information like tokens, usernames or passwords. "
"That means it is usually not a good idea to embed things such as database "
"access credentials inside your game. Avoid providing information useful to "
"an attacker whenever possible."
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:59
msgid "Sending data to server"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:61
msgid ""
"Until now, we have limited ourselves to requesting data from a server. But "
"what if you need to send data to the server? Here is a common way of doing "
"it:"
msgstr ""

#: ../../docs/tutorials/networking/http_request_class.rst:72
msgid ""
"Keep in mind that you have to wait for a request to finish before sending "
"another one. Making multiple request at once requires you to have one node "
"per request. A common strategy is to create and delete HTTPRequest nodes at "
"runtime as necessary."
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:4
msgid "HTTP client class"
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:6
msgid ""
":ref:`HTTPClient <class_HTTPClient>` provides low-level access to HTTP "
"communication. For a higher-level interface, you may want to take a look at :"
"ref:`HTTPRequest <class_HTTPRequest>` first, which has a tutorial available :"
"ref:`here <doc_http_request_class>`."
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:10
msgid ""
"Here's an example of using the :ref:`HTTPClient <class_HTTPClient>` class. "
"It's just a script, so it can be run by executing:"
msgstr ""

#: ../../docs/tutorials/networking/http_client_class.rst:17
msgid "It will connect and fetch a website."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:4
msgid "SSL certificates"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:9
msgid ""
"It is often desired to use SSL connections for communications to avoid \"man "
"in the middle\" attacks. Godot has a connection wrapper, :ref:`StreamPeerSSL "
"<class_StreamPeerSSL>`, which can take a regular connection and add security "
"around it. The :ref:`HTTPClient <class_HTTPClient>` class also supports "
"HTTPS by using this same wrapper."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:16
msgid ""
"For SSL to work, certificates need to be provided. A .crt file must be "
"specified in the project settings:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:21
msgid ""
"This file should contain any number of public certificates in https://en."
"wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail format."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:24
msgid ""
"Of course, remember to add .crt as filter so the exporter recognizes this "
"when exporting your project."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:29
msgid "There are two ways to obtain certificates:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:32
msgid "Approach 1: self signed cert"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:34
msgid ""
"The first approach is the simplest: generate a private and public key pair, "
"and put the public pair in the .crt file (again, in PEM format). The private "
"key should go to your server."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:38
msgid ""
"OpenSSL has `some documentation <https://raw.githubusercontent.com/openssl/"
"openssl/master/doc/HOWTO/keys.txt>`__ about this. This approach also **does "
"not require domain validation** nor requires you to spend a considerable "
"amount of money in purchasing certificates from a CA."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:45
msgid "Approach 2: CA cert"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:47
msgid ""
"The second approach consists of using a certificate authority (CA) such as "
"Verisign, Geotrust, etc. This is a more cumbersome process, but it's more "
"\"official\" and ensures your identity is clearly represented."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:52
msgid ""
"Unless you are working with large companies or corporations, or need to "
"connect to someone else's servers (i.e., connecting to Google or some other "
"REST API provider via HTTPS), this method is not as useful."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:56
msgid ""
"Also, when using a CA issued cert, **you must enable domain validation**, to "
"ensure the domain you are connecting to is the one intended, otherwise any "
"website can issue any certificate in the same CA and it will work."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:61
msgid ""
"If you are using Linux, you can use the supplied certs file, generally "
"located in:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:68
msgid ""
"This file allows HTTPS connections to virtually any website (i.e., Google, "
"Microsoft, etc.)."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:71
msgid ""
"Or pick any of the more specific certificates there if you are connecting to "
"a specific one."
msgstr ""

#: ../../docs/tutorials/assetlib/index.rst:2
msgid "Asset Library"
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:4
msgid "About the Asset Library"
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:6
msgid ""
"The Godot Asset Library, otherwise known as the AssetLib, is a repository of "
"user-submitted Godot addons, scripts, tools and other resources, "
"collectively referred to as assets. They're available to all Godot users for "
"download directly from within the engine, but it can also be accessed at "
"Godot's `official website <https://godotengine.org/asset-library/asset>`_."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:11
msgid ""
"On the surface, the Asset Library might look and function similar to asset "
"stores available for other engines, such as Unity's Asset Store, or Unreal "
"Engine's Marketplace, where you can submit both freely-available assets, as "
"well as paid, commercial ones. In addition, often times such assets are "
"distributed under non-free, proprietary licenses, limiting what you can do "
"with them."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:17
msgid ""
"The Asset Library is different - all assets are distributed free of charge, "
"and under a host of open-source licenses (such as the MIT license, the GPL, "
"and the Boost Software License). This makes the AssetLib more similar to the "
"software repositories of a Linux distribution."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:21
msgid ""
"This set of pages will cover how to use the AssetLib (both from inside "
"Godot, and on the website), how you can submit your own assets, and what the "
"guidelines for submission are."
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:24
msgid ""
"Please note that the AssetLib is relatively young - it may have various pain "
"points, bugs and usability issues. As with all Godot projects, the code "
"repository is available on `GitHub <https://github.com/godotengine/godot-"
"asset-library>`_, where you can submit pull requests and issues, so please "
"do not hesitate to visit it!"
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:32
msgid "Can paid assets be uploaded to the asset library?"
msgstr ""

#: ../../docs/tutorials/assetlib/what_is_assetlib.rst:34
msgid ""
"Not to the official one, though in the future, there might be other asset "
"libraries which allow it. That said, you are allowed to monetize and sell "
"Godot assets outside the Asset Library."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:4
msgid "Using the AssetLib"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:7
msgid "On the website"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:12
msgid ""
"As mentioned before, you can access the web frontend of the AssetLib on "
"`Godot's official website <https://godotengine.org/asset-library/asset>`_, "
"and this is what it looks like when you first visit it:"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:18
msgid ""
"At the top, you see the **header**, which takes you to various other parts "
"of the AssetLib - at the moment, it's empty, as we are not logged in."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:22
msgid "Searching"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:24
msgid ""
"In the center is the **search bar + settings** section, and the **assets** "
"section below it - this lets you filter out certain kinds of assets based on "
"a host of criteria. These include the asset **category** (such as 2D tools, "
"scripts and demos), **engine version** they are intended for, **sorting "
"order** (by update date, by name, etc.) and **support level**."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:30
msgid ""
"While most other filter settings should be fairly self-explanatory, it's "
"worth going over what \"support level\" means in the Asset Library. "
"Currently there are three support levels, and each asset can belong to only "
"one."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:34
msgid ""
"**Official** assets are created and maintained by the official Godot Engine "
"developers. Currently, these include the official engine demos, which "
"showcase how various areas of the engine work."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:38
msgid ""
"**Community** assets are submitted and maintained by the members of the "
"Godot community."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:41
msgid ""
"**Testing** assets are works-in-progress, and may contain bugs and usability "
"issues. They are not recommended for use in serious projects, but you are "
"encouraged to download, test them, and submit issues to the original authors."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:45
msgid ""
"You can mix and match any of the search filters and criteria, and upon "
"clicking the Search button, receive the list of all assets in the Library "
"that match them."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:50
msgid ""
"Note that the search results are not updated in real-time, so you will have "
"to re-submit the search query each time you change the query settings."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:54
msgid "Breakdown of an asset"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:56
msgid ""
"Now let's take a look at what an asset's page looks like and what it "
"contains."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:60
msgid "Asset's thumbnail/icon."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:61
msgid "Asset's name."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:62
msgid "Current version number of the asset."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:63
msgid ""
"Asset's average rating, displayed in stars. (This is currently "
"unimplemented.)"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:64
msgid "Asset's category, Godot version, and support status."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:65
msgid "Asset's original author/submitter."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:66
msgid "The license the asset is distributed under."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:67
msgid "The date of the asset's latest edit/update."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:68
msgid "A textual description of the asset."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:69
msgid "Links related to the asset (download link, file list, issue tracker)."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:70
msgid "A SHA-256 hash of the asset, for download validation purposes."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:71
msgid "Images and videos showcasing the asset."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:74
msgid "Registering and logging in"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:76
msgid ""
"In order to upload assets to the AssetLib, you need to be logged in, and to "
"do that, you need a registered user account. In the future, this may also "
"give you access to other features, such as commenting on or rating the "
"existing assets. You do *not* need to be logged in to browse and download "
"the assets."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:81
msgid "The login/registration page can be accessed from the AssetLib header."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:85
msgid ""
"From here, you can register your account, which requires a valid email "
"address, a username, and a (preferably strong) password."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:90
msgid "Then, you can use your username and password to log in."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:94
msgid ""
"This will change the look of the AssetLib header. Now you get access to a "
"handful of new functions:"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:97
msgid ""
"The feed, which shows a list of status updates on your submitted assets (and "
"possibly more in the future)."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:98
msgid "A list of your uploaded assets."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:99
msgid "The ability to submit new assets."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:101
msgid "|image6|"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:103
msgid ""
"You can learn how to submit assets to the Library, and what the asset "
"submission guidelines are, in the next part of this tutorial, :ref:"
"`doc_uploading_to_assetlib`."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:107
msgid "In the editor"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:109
msgid ""
"You can also access the AssetLib directly from Godot. It is available from "
"two places - in the Project Manager's Templates tab, and inside of a "
"project, from the workspaces list."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:117
msgid ""
"Click on it, and Godot will fetch info about the assets from the AssetLib. "
"Once it's finished, you will see a window similar to what the AssetLib "
"website looks like, with some differences:"
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:123
msgid ""
"Similarly to the web version of the AssetLib, here you can search for assets "
"by category, name, and sort them by factors such as name or edit date."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:126
msgid ""
"Notably, you can only fetch assets for the current version of Godot you are "
"running. Also, you can only download Projects, Demos and Templates from the "
"Project Manager view of the AssetLib, while Addons (tools, scripts, "
"materials etc.) can only be downloaded from the in-project AssetLib. In "
"addition, unlike when using the web frontend, the search results are updated "
"in real-time (you do not have to press Search after every change to your "
"search query for the changes to take place)."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:134
msgid ""
"In the future, you will be able to choose a different AssetLib provider to "
"fetch assets from (using the Site dropdown menu), however currently only the "
"official `Godot website <https://godotengine.org>`_ version of the AssetLib "
"is supported, as well as the version that may be running on your local "
"machine's web server (the localhost option)."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:140
msgid "When you click on an asset, you will see more information about it."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:144
msgid ""
"If you click on the Install button, Godot will fetch an archive of the "
"asset, and will track download progress of it at the bottom of the editor "
"window. If the download fails, you can retry it using the Retry button."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:150
msgid ""
"When it finishes, you can proceed to install it using the Install button. "
"This will bring up the Package Installer window."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:155
msgid ""
"Here you can see a list of all the files that will be installed. You can "
"tick off any of the files that you do not wish to install, and Godot will "
"also inform you about any problems with files that it cannot install. These "
"files will be shown in red, and hovering over them will show you a message "
"stating why it cannot be installed."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:163
msgid ""
"Once you are done, you can press the Install button, which will unzip all "
"the files in the archive, and import any assets contained therein, such as "
"images or 3D models. Once this is done, you should see a message stating "
"that the Package installation is complete."
msgstr ""

#: ../../docs/tutorials/assetlib/using_assetlib.rst:170
msgid ""
"You may also use the Import button to import asset archives obtained "
"elsewhere (such as downloading them directly from the AssetLib web "
"frontend), which will take you through the same package installation "
"procedure as with the assets downloaded directly via Godot that we just "
"covered."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:4
msgid "Submitting to the Asset Library"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:9
msgid ""
"This tutorial aims to serve as a guide on how you can submit your own assets "
"to the Godot Asset Library and share them with the Godot community."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:12
msgid ""
"As mentioned in the :ref:`doc_using_assetlib` document, in order to be able "
"to submit assets to the AssetLib, you need to have a registered account, and "
"be logged in."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:17
msgid "Submitting"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:19
msgid ""
"Once you are logged in, you will be able to head over to the \"Submit Assets"
"\" page of the AssetLib, which will look like this:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:24
msgid ""
"While it may look like a lot (and there is more as you scroll down), each "
"field is described in terms of what you should put in. We will nonetheless "
"go over what is required in the submission form here as well."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:29
msgid "**Asset Name**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:29
msgid ""
"The name of your asset. Should be a unique, descriptive title of what your "
"asset is."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:35
msgid "**Category**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:32
msgid ""
"The category that your asset belongs to, and will be shown in search "
"results. The category is split into **Addons** and **Projects**. In-editor, "
"assets of the Project type (Templates, Demos, Projects) only show up when "
"viewing the AssetLib from the Project Manager, while assets of the Addon "
"type will only be visible from inside a project."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:41
msgid "**Godot version**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:38
msgid ""
"The version of the engine that the asset works with. Currently, it's not "
"possible to have a single asset entry contain downloads for multiple engine "
"versions, so you may need to re-submit the asset multiple times, with an "
"entry for each Godot version it supports. This is particularly important "
"when dealing with major versions of the engine, such as Godot 2.x and Godot "
"3.x."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:48
msgid "**Version**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:44
msgid ""
"The version number of the asset. While you are free to choose and use any "
"versioning scheme that you like, you may want to look into something such as "
"`SemVer <https://semver.org>`_ if you want your asset's versioning scheme to "
"be clear and consistent. Note that there is also an internal version number, "
"incremented every time the asset download URL is changed or updated."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:53
msgid "**Repository host**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:51
msgid ""
"Assets uploaded to the AssetLib are not hosted on it directly. Instead, they "
"point to repositories hosted on third-party Git providers, such as GitHub, "
"GitLab or Bitbucket. This is where you choose which provider your asset "
"uses, so the site can compute the final download link."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:56
msgid "**Repository URL**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:56
msgid ""
"The URL to your asset's files/webpage. This will vary based on your choice "
"of provider, but it should look similar to `https://github.com/<user>/"
"<project>`."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:61
msgid "**Issues URL**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:59
msgid ""
"The URL to your asset's issue tracker. Again, this will differ from "
"repository host to repository host, but will likely look similar to `https://"
"github.com/<user>/<project>/issues`. You may leave this field empty if you "
"use your provider's issue tracker, and it's part of the same repository."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:65
msgid "**Download Commit/Tag**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:64
msgid ""
"The commit or tag of the asset. For example, "
"`b1d3172f89b86e52465a74f63a74ac84c491d3e1` or `v1.0`. The site computes the "
"actual download URL from this."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:69
msgid "**Icon URL**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:68
msgid ""
"The URL to your asset's icon (which will be used as a thumbnail in the "
"AssetLib search results and on the asset's page). Should be an image in "
"either the PNG or JPG format."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:74
msgid "**License**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:72
msgid ""
"The license under which you are distributing the asset. The list includes a "
"variety of free and open-source software licenses, such as GPL (v2 and v3), "
"MIT, BSD and Boost Software License. You can visit `OpenSource.org <https://"
"opensource.org>`_ for a detailed description of each of the listed licenses."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:80
msgid "**Description**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:77
msgid ""
"Finally, you can use the Description field for a textual overview of your "
"asset, its features and behavior, a changelog, et cetera. In the future, "
"formatting with Markdown will be supported, but currently, your only option "
"is plain text."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:82
msgid ""
"You may also include up to three video and/or image previews, which will be "
"shown at the bottom of the asset page. Use the \"Enable\" checkbox on each "
"of the preview submission boxes to enable them."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:86
msgid "**Type**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:87
msgid "Either an image, or a video."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:88
msgid "**Image/YouTube URL**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:89
msgid "Either a link to the image, or to a video, hosted on YouTube."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:93
msgid "**Thumbnail URL**:"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:91
msgid ""
"A URL to an image that will be used as a thumbnail for the preview. This "
"option will be removed eventually, and thumbnails will be automatically "
"computed instead."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:95
msgid ""
"Once you are done, hit Submit. Your asset will be entered into the pending "
"queue, which you can visit on the AssetLib `here <https://godotengine.org/"
"asset-library/asset/edit?&asset=-1>`_ . The approval process is manual and "
"may take up to a few days for your addon to be accepted (or rejected), so "
"please be patient! You will be informed when your asset is reviewed. If it "
"was rejected, you will be told why that may have been, and you will be able "
"to submit it again with the appropriate changes. You may have some luck "
"accelerating the approval process by messaging the moderators/assetlib "
"reviewers on IRC (the #godotengine-atelier channel on Freenode), or the "
"official Discord server."
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:106
msgid "Submission guidelines"
msgstr ""

#: ../../docs/tutorials/assetlib/uploading_to_assetlib.rst:108
msgid "[TODO]"
msgstr ""

#: ../../docs/tutorials/vr/index.rst:2
msgid "VR"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:4
msgid "AR/VR primer"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:6
msgid ""
"This tutorial gives you a springboard into the world of AR and VR in the "
"Godot game engine."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:8
msgid ""
"A new architecture was introduced in Godot 3 called the AR/VR Server. On top "
"of this architecture, specific implementations are available as interfaces, "
"most of which are plugins based on GDNative. This tutorial focuses purely on "
"the core elements abstracted by the core architecture. This architecture has "
"enough features for you to create an entire VR experience that can then be "
"deployed for various interfaces. However, each platform often has some "
"unique features that are impossible to abstract. Such features will be "
"documented on the relevant interfaces and fall outside of the scope of this "
"primer."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:12
msgid "AR/VR server"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:14
msgid ""
"When Godot starts, each available interface will make itself known to the AR/"
"VR server. GDNative interfaces are setup as singletons; as long as they are "
"added to the list of GDNative singletons in your project, they will make "
"themselves known to the server."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:16
msgid ""
"You can use the function :ref:`get_interfaces() "
"<class_ARVRServer_method_get_interfaces>` to return a list of available "
"interfaces, but for this tutorial, we're going to use the :ref:`native "
"mobile VR interface <class_MobileVRInterface>` in our examples. This "
"interface is a straightforward implementation that uses the 3DOF sensors on "
"your phone for orientation and outputs a stereoscopic image to the screen. "
"It is also available in the Godot core and outputs to screen on desktop, "
"which makes it ideal for prototyping or a tutorial such as this one."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:18
#, fuzzy
msgid "To enable an interface, you execute the following code:"
msgstr "적 씬은 다음 노드들을 사용할 것입니다:"

#: ../../docs/tutorials/vr/vr_primer.rst:35
msgid ""
"This code finds the interface we wish to use, initializes it and, if that is "
"successful, binds the main viewport to the interface. This last step gives "
"some control over the viewport to the interface, which automatically enables "
"things like stereoscopic rendering on the viewport."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:37
msgid ""
"For our mobile VR interface, and any interface where the main input is "
"directly displayed on screen, the main viewport needs to be the viewport "
"where arvr is set to true. But for interfaces that render on an externally "
"attached device, you can use a secondary viewport. In the latter case, a "
"viewport that shows its output on screen will show an undistorted version of "
"the left eye, while showing the fully processed stereoscopic output on the "
"device."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:39
msgid ""
"Finally, you should only initialize an interface once; switching scenes and "
"reinitializing interfaces will just introduce a lot of overhead. If you want "
"to turn the headset off temporarily, just disable the viewport or set arvr "
"to false on the viewport. In most scenarios though, you wouldn't disable the "
"headset once you're in VR, this can be disconcerting to the gamer."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:42
msgid "New AR/VR nodes"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:44
msgid ""
"Three new node types have been added for supporting AR and VR in Godot and "
"one additional node type especially for AR. These are:"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:46
msgid ":ref:`ARVROrigin <class_ARVROrigin>` - our origin point in the world"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:47
msgid ""
":ref:`ARVRCamera <class_ARVRCamera>` - a special subclass of the camera, "
"which is positionally tracked"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:48
msgid ""
":ref:`ARVRController <class_ARVRController>` - a new spatial class, which "
"tracks the location of a controller"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:49
msgid ""
":ref:`ARVRAnchor <class_ARVRAnchor>` - an anchor point for an AR "
"implementation mapping a real world location into your virtual world"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:51
msgid ""
"The first two must exist in your scene for AR/VR to work and this tutorial "
"focuses purely on them."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:53
msgid ""
":ref:`ARVROrigin <class_ARVROrigin>` is an important node, you must have one "
"and only one of these somewhere in your scene. This node maps the center of "
"your real world tracking space to a location in your virtual world. "
"Everything else is positionally tracked in relation to this point. Where "
"this point lies exactly differs from one implementation to another, but the "
"best example to understand how this node works is to take a look at a room "
"scale location. While we have functions to adjust the point to center it on "
"the player by default, the origin point will be the center location of the "
"room you are in. As you physically walk around the room, the location of the "
"HMD is tracked in relation to this center position and the tracking is "
"mirror in the virtual world."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:55
msgid ""
"To keep things simple, when you physically move around your room, the ARVR "
"Origin point stays where it is, the position of the camera and controllers "
"will be adjusted according to your movements. When you move through the "
"virtual world, either through controller input or when you implement a "
"teleport system, it is the position of the origin point which you will have "
"to adjust."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:58
msgid ""
":ref:`ARVRCamera <class_ARVRCamera>` is the second node that must always be "
"a part of your scene and it must always be a child node of your origin node. "
"It is a subclass of Godot's normal camera. However, its position is "
"automatically updated each frame based on the physical orientation and "
"position of the HMD. Also due to the precision required for rendering to an "
"HMD or rendering an AR overlay over a real world camera, most of the "
"standard camera properties are ignored. The only properties of the camera "
"that are used are the near and far plane settings. The FOV, aspect ratio and "
"projection mode are all ignored."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:60
msgid ""
"Note that, for our native mobile VR implementation, there is no positional "
"tracking, only the orientation of the phone and by extension, the HMD is "
"tracked. This implementation artificially places the camera at a height (Y) "
"of 1.85."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:62
#, fuzzy
msgid ""
"Conclusion: your minimum setup in your scene to make AR or VR work should "
"look like this:"
msgstr "다 되셨다면, 당신의 ``Player`` 씬은 이렇게 되어야 합니다:"

#: ../../docs/tutorials/vr/vr_primer.rst:66
msgid ""
"And that's all you need to get started. Obviously, you need to add something "
"more into your scene, so there is something to see, but after that, you can "
"export the game to your phone of choice, pop it into a viewer and away you "
"go."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:69
msgid "Other things to consider"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:71
msgid ""
"There are a few other subjects that we need to briefly touch upon in this "
"primer that are important to know."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:73
msgid ""
"The first are our units. In normal 3D games, you don't have to think a lot "
"about units. As long as everything is at the same scale, a box sized 1 unit "
"by 1 unit by 1 unit can be any size from a cube you can hold in your hand to "
"something the size of a building. In AR and VR, this changes because things "
"in your virtual world are mapped to things in the real world. If you step 1 "
"meter forward in the real world, but you only move 1 cm forward in your "
"virtual world, you have a problem. The same with the position of your "
"controllers; if they don't appear in the right relative space, it breaks the "
"immersion for the player. Most VR platforms, including our AR/VR Server, "
"assume that 1 unit = 1 meter. The AR/VR server, however, has a property "
"that, for convenience, is also exposed on the ARVROrigin node called world "
"scale. For instance, setting this to a value of 10 changes our coordinate "
"system so 10 units = 1 meter."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:77
msgid ""
"Performance is another thing that needs to be carefully considered. "
"Especially VR taxes your game a lot more than most people realise. For "
"mobile VR, you have to be extra careful here, but even for desktop games, "
"there are three factors that make life extra difficult:"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:79
msgid ""
"You are rendering stereoscopic, two for the price of one. While not exactly "
"doubling the work load and with things in the pipeline such as supporting "
"the new MultiView OpenGL extension in mind, there still is an extra workload "
"in rendering images for both eyes"
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:80
msgid ""
"A normal game will run acceptably on 30fps and ideally manages 60fps. That "
"gives you a big range to play with between lower end and higher end "
"hardware. For any HMD application of AR or VR, however, 60fps is the "
"absolute minimum and you should target your games to run at a stable 90fps "
"to ensure your users don't get motion sickness right off the bat."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:81
msgid ""
"The high FOV and related lens distortion effect require many VR experiences "
"to render at double the resolution. Yes a VIVE may only have a resolution of "
"1080x1200 per eye, we're rendering each eye at 2160x2400 as a result. This "
"is less of an issue for most AR applications."
msgstr ""

#: ../../docs/tutorials/vr/vr_primer.rst:83
msgid ""
"All in all, the workload your GPU has in comparison with a normal 3D game is "
"a fair amount higher. While things are in the pipeline to improve this, such "
"as MultiView and foveated rendering, these aren't supported on all devices. "
"This is why you see many VR games using a more art style and if you pay "
"close attention to those VR games that go for realism, you'll probably "
"notice they're a bit more conservative on the effects or use some good old "
"optical trickery."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:4
msgid "VR starter tutorial"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:11
msgid ""
"This tutorial series will show you how to make a simple VR game/project. The "
"intent of this tutorial is to give you an idea on how to make VR games in "
"Godot."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:14
msgid ""
"Keep in mind, **one of the most important things when making VR content is "
"getting the scale of your assets correct**! It can take lots of practice and "
"iterations to get this right, but there are a few things you can do to make "
"it easier:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:17
msgid ""
"In VR, 1 unit is often considered 1 meter. If you design your assets around "
"that standard, you can save yourself a lot of headache."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:18
msgid ""
"In your 3D model program, see if there is a way to measure and use real "
"world distances. In Blender, you can use the MeasureIt add-on; in Maya, you "
"can use the Measure Tool."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:19
msgid ""
"You can make rough models using a tool like `Google Blocks <https://vr."
"google.com/blocks/>`_, and then refine in another 3D modelling program."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:20
msgid ""
"Test often, as the assets can look dramatically different in VR than on a "
"flat screen!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:22
msgid "Throughout the course of this tutorial, we will cover:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:24
msgid "How to tell Godot to run in VR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:25
msgid "How to make a teleportation system for moving the player."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:26
msgid ""
"How to make a directional movement system (locomotion) for moving the player."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:27
#, fuzzy
msgid ""
"How to make a :ref:`RigidBody <class_RigidBody>`-based pick up and drop "
"system."
msgstr ""
":ref:`RigidBody2D <class_RigidBody2D>` 기반으로 잡아서 놓는 시스템을 만드는 "
"방법."

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:28
msgid "How to make various items that can be used in VR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:30
msgid ""
"While this tutorial can be completed by beginners, it is highly advised to "
"complete :ref:`doc_your_first_game`, if you are new to Godot and/or game "
"development and have some experience with making 3D games **before** going "
"through this tutorial series."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:35
msgid ""
"This tutorial assumes you know how to and have experience working with the "
"Godot editor, have basic programming experience in GDScript, and have basic "
"3D game development experience."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:38
msgid ""
"Also, it is assumed you have both an OpenVR-ready headset and two OpenVR-"
"ready controllers! This tutorial was written using a Windows Mixed Reality "
"headset on Windows 10, so the tutorial is written to work on that headset. "
"You may need to adjust the code to work with other VR headsets, such as the "
"Oculus Rift or HTC Vive."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:41
msgid ""
"You can find the start assets for this tutorial here: :download:"
"`VR_Starter_Tutorial_Start.zip <files/VR_Starter_Tutorial_Start.zip>`"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:43
msgid ""
"The provided starter assets contain some 3D models, sounds, and a few scenes "
"already set up and configured for this tutorial."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:47
msgid ""
"The sky panorama was created by **CGTuts** (`original source <https://cgi."
"tutsplus.com/articles/freebie-8-awesome-ocean-hdris--cg-5684>`_)."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:49
msgid ""
"The font used is **Titillium-Regular**, and is licensed under the SIL Open "
"Font License, Version 1.1."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:51
msgid ""
"The audio used are from several different sources, all downloaded from the "
"**Sonnis #GameAudioGDC Bundle** (`license in PDF format <https://sonniss.com/"
"gdc-bundle-license/>`_). The folders where the audio files are stored have "
"the same name as folders in the bundle."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:54
msgid ""
"The **OpenVR addon** was created by Bastiaan Olij and is released under the "
"MIT license. It can be found both `on the Asset Library <https://godotengine."
"org/asset-library/asset/150>`_ and `on GitHub <https://github.com/GodotVR/"
"godot-openvr-asset>`_."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:56
msgid ""
"Everything else is original and created solely for this tutorial by "
"TwistedTwigleg. They are released under the MIT license, so feel free to use "
"them however you see fit!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:58
msgid "You can find the finished project at the bottom of this page."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:65
msgid ""
"While these assets are not necessarily required to use the scripts provided "
"in this tutorial, they will make the tutorial much easier to follow, as "
"there are several premade scenes we will be using throughout the tutorial "
"series."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:69
msgid ""
"First, you may notice there is already quite a bit set up. This includes a "
"pre-built level, several instanced scenes placed around, some background "
"music, and several GUI-related :ref:`MeshInstances <class_MeshInstance>` "
"nodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:72
msgid ""
"You may notice that the GUI-related meshes already have a script attached to "
"them, and this is simply used to show whatever is inside the :ref:`Viewport "
"<class_Viewport>` on the mesh. Feel free to take a look if you want, but "
"this tutorial will not be going over how to use the :ref:`Viewport "
"<class_Viewport>` nodes for making 3D GUI :ref:`MeshInstance "
"<class_MeshInstance>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:76
msgid ""
"The other thing to notice, before we jump into writing the code, is how the :"
"ref:`ARVROrigin <class_ARVROrigin>` node works. How it works is kind of hard "
"to explain, especially if you have never used VR before, but here is the "
"gist of it: The :ref:`ARVROrigin <class_ARVROrigin>` node is the center "
"point of the room. If there is no room-scale tracking, then the :ref:"
"`ARVROrigin <class_ARVROrigin>` will be directly below the player, but if "
"there is room-scale tracking, then the :ref:`ARVROrigin <class_ARVROrigin>` "
"will be the center of the tracked room."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:81
msgid ""
"This is a bit of a simplification, and honestly, I do not know enough about "
"the various different VR headsets and how they work to give a more detailed "
"and complete explanation. The simple way is to look at it like this: The :"
"ref:`ARVROrigin <class_ARVROrigin>` is the center of the VR world. If there "
"is room tracking, the player can move away from the center point, the :ref:"
"`ARVROrigin <class_ARVROrigin>` node, but only as far as the room scaling "
"tracks."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:85
msgid ""
"If you select the :ref:`ARVROrigin <class_ARVROrigin>` node, you may notice "
"that the world scale is set to ``1.4``. This is because I originally made "
"the world too big, and so I needed to scale the VR player slightly so they "
"better fit the world. As mentioned earlier, keeping the scale relatively "
"constant is very important!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:88
msgid ""
"Another thing to notice here is how we have everything set up under the :ref:"
"`ARVROrigin <class_ARVROrigin>` node. The player camera is an :ref:"
"`ARVRCamera <class_ARVRCamera>` that represents the player's head in the "
"game. The :ref:`ARVRCamera <class_ARVRCamera>` will be offset by the "
"player's height, and if there is room tracking, then the camera can move "
"around 3D space as well, relative to the :ref:`ARVROrigin "
"<class_ARVROrigin>`. This is important to note, especially for later when we "
"add teleporting."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:92
msgid ""
"Notice how there is a :ref:`ColorRect <class_ColorRect>` node called "
"``Movement_Vignette``. This will be a vignette shader that will only be "
"visible when the player is moving. We are going to use the vignette shader "
"to help reduce motion sickness while moving in VR. The reason it is a child "
"of :ref:`ARVROrigin <class_ARVROrigin>` is because we want it to easily "
"access the VR controllers."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:96
msgid ""
"The final thing to note is that there are two :ref:`ARVRController "
"<class_ARVRController>` nodes, and these will represent the left and right "
"controllers in 3D space. An :ref:`ARVRController <class_ARVRController>` "
"with an ID of 1 is the left hand, while an :ref:`ARVRController "
"<class_ARVRController>` with an ID of 2 is the right hand."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:100
msgid "Starting VR"
msgstr "VR 시작하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:102
msgid ""
"Firstly, let's get the VR up and going! While ``Game.tscn`` is open, select "
"the ``Game`` node and make a new script called ``Game.gd``. Add the "
"following code:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:119
msgid ""
"For this to work, you will need to have the `OpenVR asset from the Asset "
"Library <https://godotengine.org/asset-library/asset/150>`_. The OpenVR "
"asset is included in the starter assets, but there may be newer versions "
"that work better, so I would highly suggest deleting the ``addons`` folder, "
"then going to the Asset Library and downloading the newest version."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:123
msgid "With that done, let's quickly go over what this script does."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:125
msgid ""
"Firstly, we find a VR interface from the ARVR server. We do this because by "
"default Godot does not include any VR interfaces, but rather exposes an API "
"so anyone can make AR/VR interfaces with GDNative/C++. Next, we check to see "
"if an OpenVR interface was found, and then we initialize it."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:128
msgid ""
"Assuming nothing went wrong with initializing, we then turn the main :ref:"
"`Viewport <class_Viewport>` into an AR/VR viewport, by setting ``arvr`` to "
"``true``. We also set HDR to ``false``, since you cannot use HDR in OpenVR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:131
msgid ""
"Then, we disable V-Sync and set the target FPS to 90 frames per second. Most "
"VR headsets run at 90 Hz, and since the game will display on both the VR "
"headset and the computer's monitor, we want to disable V-Sync and set the "
"target FPS manually, so the computer's monitor does not drag the VR display "
"down to 60 FPS."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:134
msgid ""
"One thing to notice as well is that the physics FPS is also set to 90! This "
"makes the physics run at the same frame rate as the display, which makes "
"things look smoother in VR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:139
msgid ""
"With that done, go ahead and give the game a try! If everything goes well, "
"you will now be able to look around the world! If you have a VR headset with "
"room tracking, you will be able to move around as far as the room tracking "
"allows."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:143
msgid "Coding the controllers"
msgstr "컨트롤러를 코딩하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:145
msgid ""
"While perhaps interesting if we were making a VR film, we really want to do "
"more than stand around and look. Currently, we cannot move outside of the "
"room tracking boundaries (assuming your VR headset has room tracking) and we "
"cannot interact with anything! Let's change that!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:148
msgid ""
"You may have noticed that you have a pair of green and black hands following "
"the controllers. Let's write the code for those controllers, which will "
"allow the player to teleport around the world and allow the player to grab "
"and release :ref:`RigidBody <class_RigidBody>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:151
msgid ""
"Open either ``Left_Controller.tscn`` or ``Right_Controller.tscn``. Feel free "
"to look at how the scene is set up; there are only a couple things of note "
"to point out."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:153
msgid ""
"Firstly, notice how there are a couple :ref:`Raycast <class_Raycast>` nodes. "
"We will be using one :ref:`Raycast <class_Raycast>` to teleport around the "
"game world (``Raycast``) and we will use the other for picking up objects "
"(``GrabCast``) if the player is using :ref:`Raycast <class_Raycast>` nodes "
"to pick up objects."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:156
msgid ""
"The other thing to note is how there is an :ref:`Area <class_Area>` simply "
"called ``Area``, that is a small sphere in the palm of the hand. This will "
"be used to detect objects the player can pick up with that hand if the "
"player is using :ref:`Area <class_Area>` nodes to pick up objects."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:159
msgid ""
"We also have a larger :ref:`Area <class_Area>` called ``Sleep_Area``, which "
"will simply be used to wake :ref:`RigidBody <class_RigidBody>` nodes when "
"the hands get close."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:161
msgid ""
"Select the root node, either ``Left_Controller`` or ``Right_Controller`` "
"depending on which scene you chose, and create a new script called "
"``VR_Controller.gd``. Add the following to ``VR_Controller.gd``:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:415
msgid ""
"This is quite a bit of code to go through, so let's break it down bit by "
"bit. Let's start with the class variables, which are variables outside of "
"any/all functions."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:418
msgid ""
"``controller_velocity``: The velocity the controller is moving at. We will "
"calculate this by changes in position every physics frame."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:419
msgid ""
"``prior_controller_position``: The controller's previous position. We will "
"use this to calculate the controller's velocity."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:420
msgid ""
"``prior_controller_velocities``: The last 30 calculated velocities (1/3 of a "
"second worth of velocities, assuming the game is running at 90 FPS)."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:421
msgid ""
"``held_object``: The currently-held object, a :ref:`RigidBody "
"<class_RigidBody>`, if there is one."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:422
msgid ""
"``held_object_data``: The data of the currently-held object, used to reset "
"the object when it is no longer being held."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:423
msgid "``grab_area``: The :ref:`Area <class_Area>` node used to grab objects."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:424
msgid "``grab_pos_node``: The position where held objects stay."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:425
msgid ""
"``hand_mesh``: The hand mesh, used to represent the player's hand when they "
"are not holding anything."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:426
msgid ""
"``teleport_pos``: The position at which the teleport :ref:`Raycast "
"<class_Raycast>` is aimed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:427
msgid "``teleport_mesh``: The mesh used to represent the teleport position."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:428
msgid ""
"``teleport_button_down``: A variable for tracking whether the teleport "
"button is being held down or not."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:429
msgid ""
"``teleport_raycast``: The teleport :ref:`Raycast <class_Raycast>` node, used "
"for calculating the teleportation position."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:430
msgid ""
"``CONTROLLER_DEADZONE``: The dead zone for both the trackpad and the "
"joystick."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:431
msgid ""
"``MOVEMENT_SPEED``: The speed the player moves at when moving using the "
"trackpad and/or the joystick."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:432
msgid ""
"``directional_movement``: A boolean to track whether the player is moving "
"using this controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:436
msgid "Next, let's go through ``_ready``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:438
msgid ""
"Firstly, we get the teleport :ref:`Raycast <class_Raycast>` node and assign "
"it to ``teleport_raycast``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:440
msgid ""
"Next, we get the teleport mesh; notice how we are getting it from ``Game/"
"Teleport_Mesh`` using ``get_tree().root``. This is because we need the "
"teleport mesh to be separate from the controller, so moving and rotating the "
"controller does not affect the position and rotation of the teleportation "
"mesh."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:443
msgid ""
"Then we get the grab area, grab :ref:`Raycast <class_Raycast>`, and position "
"node and assign them to the proper variables."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:445
msgid ""
"We set the default grab mode to ``AREA`` so it uses the :ref:`Area "
"<class_Area>` node to grab objects by default."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:447
msgid ""
"Then we connect the ``body_entered`` and ``body_exited`` signals from the "
"sleep area node, we get the hand mesh and assign it the proper variable, and "
"finally we connect the ``button_pressed`` and ``button_released`` signals "
"from the :ref:`ARVRController <class_ARVRController>`."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:454
msgid ""
"Firstly, we check to see if the teleportation button is down or not. If the "
"teleportation button is down, we then force the teleportation :ref:`Raycast "
"<class_Raycast>` to update, which will give us frame perfect collision "
"detection. We then check to see if the :ref:`Raycast <class_Raycast>` is "
"colliding with anything."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:457
msgid ""
"Next, we check to see if the collision body the :ref:`Raycast "
"<class_Raycast>` is colliding with is a :ref:`StaticBody "
"<class_StaticBody>`. We do this to ensure the player can only teleport on :"
"ref:`StaticBody <class_StaticBody>` nodes. We then check to see if the ``Y`` "
"value returned by the :ref:`Raycast <class_Raycast>`'s "
"``get_collision_normal`` function is more than ``0.85``, which is mostly "
"pointing straight up. This allows the player only to teleport on fairly flat "
"faces pointing upwards."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:461
msgid ""
"If all those checks for the teleport :ref:`Raycast <class_Raycast>` return "
"true, we then set ``teleport_pos`` to the collision point, and we move the "
"teleportation mesh to ``teleport_pos``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:464
msgid ""
"The next thing we check is to see if the :ref:`ARVRController "
"<class_ARVRController>` is active or not. If the :ref:`ARVRController "
"<class_ARVRController>` is active, then that means there is a controller and "
"it is being tracked. If the controller is active, we then reset "
"``controller_velocity`` to an empty :ref:`Vector3 <class_Vector3>`."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:467
msgid ""
"We then add all of the prior velocity calculations in "
"``prior_controller_velocities`` to ``controller_velocity``. By using the "
"prior calculations, we get a smoother throwing/catching experience, although "
"it is not perfect. We want to get the average of these velocities, as "
"otherwise we'd get crazy high velocity numbers that are not realistic."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:470
msgid ""
"Next, we calculate the velocity from the position where the controller is "
"currently, from the position the controller was at. We can use this "
"difference in position to help track the controller's velocity."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:473
msgid ""
"We then add the velocity from the controller this physics frame and the last "
"physics frame to ``controller_velocity``. We then update "
"``prior_controller_position`` to the current position, so we can use it in "
"the calculations in the velocity next physics frame."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:476
msgid ""
"The way we are calculating velocity is not perfect by any means, since it "
"relies on a consistent amount of frames per second. Ideally, we would be "
"able to find the velocity directly from the VR controller, but currently in "
"OpenVR, there is no way to access the controller's velocity. We can get "
"pretty close to the real velocity by comparing positions between frames "
"though, and this will work just fine for this project."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:480
msgid ""
"Then, we check to see if we have more than 30 stored velocities (more than a "
"third of a second). If there are more than 30, we remove the oldest velocity "
"from ``prior_controller_velocities``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:484
msgid ""
"Next, we check to see whether there is a held object. If there is, we update "
"the position and rotation of the held object to the position and rotation of "
"``grab_pos_node``. Because of how scale works, we need to temporarily store "
"the scale and then reset the scale once we have updated the transform; "
"otherwise, the scale would always be the same as the controller, which would "
"ruin immersion if the player grabbed a scaled object."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:489
msgid ""
"The last thing we are going to do in ``_physics_process`` is move the player "
"if they are moving the trackpad/joystick on the VR controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:491
msgid ""
"Firstly, we convert the axis values into :ref:`Vector2 <class_Vector2>` "
"variables, so we can process them. We invert the X axis, so moving the "
"trackpad/joystick left will move the player left."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:494
msgid ""
"Depending on your VR controller and OS, you may need to change the code so "
"it gets the proper axis values!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:496
msgid ""
"Next, we account for dead zones on both the trackpad and the joystick. The "
"code for doing this is adapted from the link below, and I would highly "
"recommend looking at it."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:498
msgid ""
"You can find a great article explaining joystick dead zones `on Third Helix "
"<http://www.third-helix.com/2013/04/12/doing-thumbstick-dead-zones-right."
"html>`_."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:500
msgid ""
"One thing to note is how large we are making the dead zones. The reason we "
"are using such large dead zones is so the player cannot move themselves "
"accidentally by placing their finger on the center of the touchpad/joystick, "
"which can make players experience motion sickness if they are not expecting "
"it."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:503
msgid ""
"Next, we get the forward and right directional vectors from the VR camera. "
"We need these so we can move the player forward/backwards and right/left "
"based on where they are currently looking."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:506
msgid ""
"Then, we calculate how much the player will be moving by adding both the "
"trackpad and the joystick vectors together and normalizing them."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:508
msgid ""
"Next, we calculate how far the player will go forwards/backwards and right/"
"left by multiplying the VR camera's directional vectors by the combined "
"trackpad/joystick vector."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:510
msgid ""
"We then remove movement on the Y axis so the player cannot fly/fall simply "
"by moving using the trackpad/joystick."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:512
msgid ""
"And finally, we move the player if there is any movement forwards/backwards "
"or right/left. If we are moving the player, we set ``directional_movement`` "
"accordingly."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:516
msgid "Now, let's look at ``button_pressed``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:518
msgid ""
"If the button pressed is button 15, which for the Windows Mixed Reality "
"controllers is the trigger button, we will interact with the held object "
"assuming the controller is holding one, and if the player is not holding an "
"object, we will try to start teleporting."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:521
msgid ""
"If the controller is holding an object, and the held object has a method/"
"function called ``interact``, we call the ``interact`` function on the held "
"object."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:524
msgid ""
"If the controller is not holding an object, we then check to make sure the "
"teleportation mesh is not visible. This check ensures the player cannot "
"teleport with both hands/controllers at the same time. If the teleportation "
"mesh is not visible, we set ``teleport_button_down`` to ``true``, make "
"``teleport_mesh`` visible, and make the teleportation raycast visible. This "
"makes it where the teleportation mesh will follow the :ref:`Raycast "
"<class_Raycast>` coming from the pointer finger of the hand."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:529
msgid ""
"If the button pressed is button 2, which, for the Windows Mixed Reality "
"controllers, is the grab/grip button, we will grab/throw an object."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:531
msgid ""
"Firstly, we make sure the player is not trying to teleport, as we do not "
"want the player to be able to grab something while in the middle of trying "
"to teleport."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:533
msgid ""
"Then, we check to see whether the controller is already holding a object or "
"not."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:535
msgid ""
"If the controller is not holding an object, we check to see which grab mode "
"the player is using."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:537
msgid ""
"If the player is using the ``AREA`` grab mode, we then get all the bodies "
"overlapping the grab :ref:`Area <class_Area>`. We go through all the bodies "
"in the grab :ref:`Area <class_Area>` and see if there is a :ref:`RigidBody "
"<class_RigidBody>`. We also check to make sure any :ref:`RigidBody "
"<class_RigidBody>` nodes in the :ref:`Area <class_Area>` do not have a "
"variable called ``NO_PICKUP``, since we do not want to be able to pick up "
"nodes with that variable."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:541
msgid ""
"Assuming there is a :ref:`RigidBody <class_RigidBody>` node inside the grab :"
"ref:`Area <class_Area>` that does not have a variable called ``NO_PICKUP``, "
"we assign it to ``rigid_body`` for additional processing."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:544
msgid ""
"If the player is using the ``RAYCAST`` grab mode, we first force the :ref:"
"`Raycast <class_Raycast>` to update. We then check to see whether the :ref:"
"`Raycast <class_Raycast>` is colliding with something."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:547
msgid ""
"If the :ref:`Raycast <class_Raycast>` is colliding with something, we then "
"check to see if what it is colliding with is a :ref:`RigidBody "
"<class_RigidBody>`, and that it does not have a variable called "
"``NO_PICKUP``. If the :ref:`Raycast <class_Raycast>` is colliding with a :"
"ref:`RigidBody <class_RigidBody>`, and it does not have a variable called "
"``NO_PICKUP``, we assign it to ``rigid_body`` for additional processing."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:551
msgid ""
"If ``rigid_body`` is not ``null``, meaning we found a :ref:`RigidBody "
"<class_RigidBody>` in the grab :ref:`Area <class_Area>`, we assign "
"``held_object`` to it. Then we store the now held :ref:`RigidBody "
"<class_RigidBody>`'s information in ``held_object_data``. We are storing "
"the :ref:`RigidBody <class_RigidBody>` mode, layer, and mask so later, when "
"we drop it, we can reset all those variables back to what they were before "
"we picked up the :ref:`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:555
msgid ""
"We then set the held object's :ref:`RigidBody <class_RigidBody>` mode to "
"``MODE_STATIC`` and set the collision layer and mask to 0 so it cannot "
"collide with any other physic bodies."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:558
msgid ""
"We make the hand mesh invisible so it does not get in the way of the object "
"we are holding (and also because I did not feel like animating the hand). We "
"also make the grab :ref:`Raycast <class_Raycast>` invisible so the mesh used "
"for showing the :ref:`Raycast <class_Raycast>` is no longer visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:561
msgid ""
"If the :ref:`RigidBody <class_RigidBody>` we picked up has the ``picked_up`` "
"method/function, we call it. If the :ref:`RigidBody <class_RigidBody>` we "
"picked up has a variable called ``controller``, we set it to this controller."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:564
msgid ""
"If the controller is not holding an object, and the button pressed is 2, we "
"want to drop/throw the held object."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:566
msgid ""
"Firstly, we set the held :ref:`RigidBody <class_RigidBody>`'s mode, layer, "
"and mask back to what they were when we picked the object up. We then apply "
"an impulse to the held object, using the controller's velocity as the force."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:569
msgid ""
"If the previously held :ref:`RigidBody <class_RigidBody>` has a function "
"called ``dropped``, we call it. If the :ref:`RigidBody <class_RigidBody>` "
"has a variable called ``controller``, we set it to ``null``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:572
msgid ""
"Then, we set ``held_object`` to ``null``, since we are no longer holding any "
"objects, and we make the hand mesh visible again."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:574
msgid ""
"If we are using the ``RAYCAST`` grab mode, we make the :ref:`Raycast "
"<class_Raycast>` visible so we can see the mesh used for showing the grab :"
"ref:`Raycast <class_Raycast>`."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:576
msgid ""
"Finally, regardless of whether we are grabbing an object or releasing it, we "
"play the sound loaded into ``AudioStreamPlayer3D``, which is a pick-up/drop "
"noise."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:578
msgid ""
"The last thing we are doing in ``button_pressed`` is checking to see if the "
"button pressed is 1, which, for the Windows Mixed Reality controllers, is "
"the menu button."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:580
msgid ""
"If the menu button is pressed, we change grab modes, and set the visibility "
"of the grab :ref:`Raycast <class_Raycast>` so it is only visible when using "
"``RAYCAST`` as the grab mode."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:584
msgid "Let's look at ``button_released`` next."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:586
msgid ""
"If the button released is button 15, the trigger, then we potentially want "
"to teleport."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:588
msgid ""
"Firstly, we check to see whether ``teleport_button_down`` is ``true``. If it "
"is, that means the player is intending to teleport, while if it is "
"``false``, the player has simply released the trigger while holding an "
"object."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:591
msgid ""
"We then check to see if this controller has a teleport position, and we "
"check to make sure the teleport mesh is visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:593
msgid ""
"If both of those conditions are ``true``, we then calculate the offset the :"
"ref:`ARVRCamera <class_ARVRCamera>` has from the :ref:`ARVROrigin "
"<class_ARVROrigin>`. We do this because of how :ref:`ARVRCamera "
"<class_ARVRCamera>` and :ref:`ARVROrigin <class_ARVROrigin>` work with room-"
"scale tracking."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:596
msgid ""
"Because we want to teleport the player in their current position to the "
"teleport position, and remember, because of room-scale tracking, their "
"current position can be offset from the origin, we have to figure out that "
"offset so when we teleport, we can remove it so that player's current "
"position is teleported to the teleport position."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:599
msgid ""
"We set the Y value of the camera_offset to zero because we do not want to "
"account for offsets in the player's height."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:601
msgid ""
"Then, we teleport the :ref:`ARVROrigin <class_ARVROrigin>` to the teleport "
"position, applying the camera offset."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:603
msgid ""
"Regardless of whether we teleported or not, we reset all the teleport-"
"related variables so the controller has to get new ones before teleporting "
"again."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:607
msgid ""
"Finally, let's look at ``sleep_area_entered`` and ``sleep_area_exited``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:609
msgid ""
"When a body enters or exists the sleep area, we check whether it has a "
"variable called ``can_sleep``. If it does, we then set it to ``false`` and "
"wake the body if it has entered the sleep area, while if it has exited, we "
"set it to ``true`` so the :ref:`RigidBody <class_RigidBody>` nodes can sleep "
"(which can decrease CPU usage)."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:614
msgid ""
"Okay, whew! That was a lot of code! Add the same script, ``VR_Controller."
"gd`` to the other controller so both controllers have the same script."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:616
msgid ""
"Now go ahead and try the game again, and you should find you can teleport "
"around by pressing the touch pad, and can grab and throw objects using the "
"grab/grip buttons."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:619
msgid ""
"Now, you may want to try moving using the trackpads and/or joysticks, but "
"**it may make you motion sick!**"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:621
msgid ""
"One of the main reasons this can make you feel motion sick is because your "
"vision tells you that you are moving, while your body is not moving. This "
"conflict of signals makes the body feel sick, so let's fix it!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:625
msgid "Reducing motion sickness"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:627
msgid ""
"There are plenty of ways to reduce motion sickness in VR, and there is no "
"one perfect way to reduce motion sickness. See `this page on the Oculus "
"Developer Center <https://developer.oculus.com/design/latest/concepts/bp-"
"locomotion/>`_ for more information on how to implement locomotion and "
"reducing motion sickness."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:631
msgid ""
"To help reduce motion sickness while moving, we are going to add a vignette "
"effect that will only be visible while the player moves."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:633
msgid ""
"Open up ``Movement_Vignette.tscn``, which you can find in the ``Scenes`` "
"folder. Notice how it is just a :ref:`ColorRect <class_ColorRect>` node with "
"a custom shader. Feel free to look at the custom shader if you want, it is "
"just a slightly modified version of the vignette shader you can find in the "
"Godot demo repository."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:636
msgid ""
"With ``Movement_Vignette`` selected, make a new script called "
"``Movement_Vignette.gd``. Add the following code to ``Movement_Vignette.gd``:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:672
msgid ""
"Because this script is fairly simple, let's quickly go over what it does."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:674
msgid ""
"In ``_ready``, we wait for four frames. We do this to ensure the VR "
"interface is ready and going."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:676
msgid ""
"Next, we get the current VR interface, and resize the :ref:`ColorRect "
"<class_ColorRect>` node's size and position so that it covers the entire "
"view in VR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:678
msgid ""
"Then, we get the left and right controllers, assigning them to "
"``controller_one`` and ``controller_two``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:680
msgid "We then make the vignette invisible by default."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:682
msgid ""
"In ``_process``, we check to see if either of the controllers are moving the "
"player by checking ``directional_movement``. If either controller is moving "
"the player, we make the vignette visible, while if neither controller is "
"moving the player, we make the vignette invisible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:687
msgid ""
"With that done, go ahead and try moving around with the joystick and/or the "
"trackpad. You should find it is much less motion sickness-inducing than "
"before!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:689
msgid ""
"Let's add some special :ref:`RigidBody <class_RigidBody>` nodes we can "
"interact with next."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:692
msgid "Adding destroyable targets"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:694
msgid ""
"Firstly, let's start by making some targets we will destroy in various ways "
"with various special :ref:`RigidBody <class_RigidBody>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:696
msgid ""
"Open up ``Sphere_Target.tscn``, which you can find in the ``Scenes`` folder. "
"``Sphere.tscn`` is just a :ref:`StaticBody <class_StaticBody>` with a :ref:"
"`CollisionShape <class_CollisionShape>`, a mesh, and a audio player."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:699
msgid ""
"Select the ``Sphere_Target`` root node, the :ref:`StaticBody "
"<class_StaticBody>` node, and make a new script called ``Sphere_Target.gd``. "
"Add the following to ``Sphere_Target.gd``:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:746
msgid "Let's go over how this script works, starting with the class variables."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:748
msgid ""
"``destroyed``: A variable to track whether this target is destroyed or not."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:749
msgid ""
"``destroyed_timer``: A variable to track how long the target has been "
"destroyed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:750
msgid ""
"``DESTROY_WAIT_TIME``: A constant to tell the sphere target how long to wait "
"before destroying/deleting itself."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:751
msgid "``health``: The amount of health the target has."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:752
msgid ""
"``RIGID_BODY_TARGET``: The target broken into several smaller :ref:"
"`RigidBody <class_RigidBody>` nodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:756
#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:903
msgid "Let's go over ``_ready``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:758
msgid ""
"All we are doing in ``_ready`` is setting ``_physics_process`` to ``false``. "
"This is because we will only use ``_physics_process`` for destroying the "
"target, so we do not want to call it until the target is broken."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:763
msgid "Next, let's go over ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:765
msgid ""
"Firstly, we add time to ``destroyed_timer``. Then we check to see whether "
"enough time has passed and we can destroy the target. If enough time has "
"passed, we free/destroy the target using ``queue_free``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:770
msgid "Finally, let's go over ``damage``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:772
msgid ""
"Firstly, we check to make sure the target has not already been destroyed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:774
msgid ""
"Then, we remove however much damage the target has taken from the target's "
"health."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:776
msgid ""
"If the target has zero or less health, then it has taken enough damage to "
"break."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:778
msgid ""
"Firstly, we disable the collision shape and make the whole target mesh "
"invisible. Next, we spawn/instance the :ref:`RigidBody <class_RigidBody>` "
"version of the target, and instance it at this target's position."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:781
msgid ""
"Then, we set ``destroyed`` to ``true`` and start processing "
"``_physics_process``. Finally, we play a sound, and remove a sphere from "
"``Game.gd`` by calling ``remove_sphere``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:786
msgid ""
"Now, you may have noticed we are calling a function in ``Game.gd`` we have "
"not made yet, so let's fix that!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:788
#, fuzzy
msgid ""
"Firstly, open up ``Game.gd`` and add the following additional class "
"variables:"
msgstr "먼저 ``Game.gd`` 를 열고 다음의 멤버 변수를 추가해주세요:"

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:795
msgid "``spheres_left``: The amount of sphere targets left in the game world."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:796
msgid "``sphere_ui``: A reference to the sphere UI. We will use this later!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:798
msgid ""
"Next, we need to add the ``remove_sphere`` function. Add the following to "
"``Game.gd``:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:808
msgid "What this function does is it subtracts one from ``spheres_left``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:810
msgid ""
"Then, it checks to see whether ``sphere_ui`` is not null, and if it is not, "
"then it calls its ``update_ui`` function, passing in the amount of spheres "
"left. We'll add the UI code later in this part."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:813
msgid "Now that we have destroyable targets, we need a way to destroy them!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:816
msgid "Adding a pistol"
msgstr "권총을 추가하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:818
msgid ""
"Okay, let's add a simple pistol. Open up ``Pistol.tscn``, which you will "
"find in the ``Scenes`` folder."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:820
msgid ""
"There are a few things to note here. The first thing to note is how "
"everything is rotated. This is to make the pistol rotate correctly when the "
"player grabs it. The other thing to notice is how there is a laser sight "
"mesh, and a flash mesh; both of these do what you'd expect: act as a laser "
"pointer and muzzle flash, respectively."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:823
msgid ""
"The other thing to notice is how there is a :ref:`Raycast <class_Raycast>` "
"node at the end of the pistol. This is what we will be using to calculate "
"where the bullets impact."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:825
msgid ""
"Now that we have looked at the scene, let's write the code. Select the "
"``Pistol`` root node, the :ref:`RigidBody <class_RigidBody>` node, and make "
"a new script called ``Pistol.gd``. Add the following code to ``Pistol.gd``:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:894
msgid "``flash_mesh``: The mesh used to make the muzzle flash."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:895
msgid "``FLASH_TIME``: The length of time the muzzle flash is visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:896
msgid ""
"``flash_timer``: A variable to track how long the muzzle flash has been "
"visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:897
msgid "``laser_sight_mesh``: A long rectangular mesh used for the laser sight."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:898
msgid "``raycast``: The raycast node used for the pistol firing."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:899
msgid "``BULLET_DAMAGE``: The amount of damage a single bullet does."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:905
msgid ""
"All we are doing here is getting the nodes and assigning them to the proper "
"variables. We also make sure the flash and laser sight meshes are invisible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:910
msgid "Next, let's look at ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:912
msgid ""
"Firstly, we check to see if the flash is visible. We do this by checking to "
"see if ``flash_timer`` is more than zero. This is because ``flash_timer`` "
"will be an inverted timer, a timer that counts down instead of counting up."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:915
msgid ""
"If ``flash_timer`` is more than zero, we subtract ``delta`` from it and "
"check to see whether it is equal to zero or less. If it is, we make the "
"flash mesh invisible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:918
msgid ""
"This makes it where the flash mesh becomes invisible after ``FLASH_TIME`` "
"many seconds have gone by."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:922
msgid ""
"Now, let's look at ``interact``, which is called when the trigger button on "
"the VR controller is pressed and the pistol is being held."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:924
msgid ""
"Firstly, we check to see if the flash timer is less than or equal to zero. "
"This check makes it where we cannot fire when the flash is visible, limiting "
"how often the pistol can fire."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:927
msgid ""
"If we can fire, we reset ``flash_timer`` by setting it to ``FLASH_TIME``, "
"and we make the flash mesh visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:929
msgid ""
"We then update the :ref:`Raycast <class_Raycast>` and check to see if it is "
"colliding with anything."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:931
msgid ""
"If the :ref:`Raycast <class_Raycast>` is colliding with something, we get "
"the collider. We check to see if the collider has the ``damage`` function, "
"and if it does, we call it. If it does not, we then check to see if the "
"collider has the ``apply_impulse`` function, and if it does, we call it "
"after calculating the direction from the :ref:`Raycast <class_Raycast>` to "
"the collider."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:935
msgid ""
"Finally, regardless of whether the pistol hit something or not, we play the "
"pistol firing sound."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:939
msgid ""
"Finally, let's look at ``picked_up`` and ``dropped``, which are called when "
"the pistol is picked up and dropped, respectively."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:941
msgid ""
"All we are doing in these functions is making the laser pointer visible when "
"the pistol is picked up, and making it invisible when the pistol is dropped."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:947
msgid ""
"With that done, go ahead and give the game a try! If you climb up the stairs "
"and grab the pistols, you should be able to fire at the spheres and they "
"will break!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:950
msgid "Adding a shotgun"
msgstr "샷건 추가하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:952
msgid ""
"Let's add a different type of shooting :ref:`RigidBody <class_RigidBody>`: A "
"shotgun. This is fairly simple to do, and almost everything is the same as "
"the pistol."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:954
msgid ""
"Open up ``Shotgun.tscn``, which you can find in ``Scenes``. Notice how "
"everything is more or less the same, but instead of a single :ref:`Raycast "
"<class_Raycast>`, there are five, and there is no laser pointer. This is "
"because a shotgun generally fires in a cone shape, and so we are going to "
"emulate that by having several :ref:`Raycast <class_Raycast>` nodes, all "
"rotated randomly in a cone shape, and I removed the laser pointer so the "
"player has to aim without knowing for sure where the shotgun is pointing."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:959
msgid ""
"Alright, select the ``Shotgun`` root node, the :ref:`RigidBody "
"<class_RigidBody>` and make a new script called ``Shotgun.gd``. Add the "
"following to ``Shotgun.gd``:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1019
msgid ""
"You may have noticed this is almost exactly the same as the pistol, and "
"indeed it is, so let's only go over what has changed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1021
msgid ""
"``raycasts``: The node that holds all of the five :ref:`Raycast "
"<class_Raycast>` nodes used for the shotgun's firing."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1023
msgid ""
"In ``_ready``, we get the ``Raycasts`` node, instead of just a single :ref:"
"`Raycast <class_Raycast>`."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1025
msgid ""
"The only other change, besides there being nothing in ``picked_up`` and "
"``dropped``, is in ``interact``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1027
msgid ""
"Now we go through each :ref:`Raycast <class_Raycast>` in ``raycasts``. We "
"then rotate it on the X and Z axes, making within a 10 to ``-10`` cone. From "
"there, we process each :ref:`Raycast <class_Raycast>` like we did the "
"single :ref:`Raycast <class_Raycast>` in the pistol, nothing changed at all, "
"we are just doing it five times, once for each :ref:`Raycast "
"<class_Raycast>` in ``raycasts``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1033
msgid ""
"Now you can find and fire the shotgun too! The shotgun is located around the "
"back behind one of the walls (not in the building though!)."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1036
msgid "Adding a bomb"
msgstr "폭탄 추가하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1038
msgid ""
"While both of those are well and good, let's add something we can throw next "
"— a bomb!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1040
msgid "Open up ``Bomb.tscn``, which you will find in the ``Scenes`` folder."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1042
msgid ""
"First, notice how there is a rather large :ref:`Area <class_Area>` node. "
"This is the explosion radius for the bomb. Anything within this :ref:`Area "
"<class_Area>` will be effected by the explosion when the bomb explodes."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1045
msgid ""
"The other thing to note is how there are two sets of :ref:`Particles "
"<class_Particles>`: one for smoke coming out of the fuse, and another for "
"the explosion itself. Feel free to take a look at the :ref:`Particles "
"<class_Particles>` nodes if you want!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1048
msgid ""
"The only thing to notice is how long the explosion :ref:`Particles "
"<class_Particles>` node will last, their lifetime, which is 0.75 seconds. We "
"need to know this so we can time the removal of the bomb with the end of the "
"explosion :ref:`Particles <class_Particles>`."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1051
msgid ""
"Alright, now let's write the code for the bomb. Select the ``Bomb`` :ref:"
"`RigidBody <class_RigidBody>` node and make a new script called ``Bomb.gd``. "
"Add the following code to ``Bomb.gd``:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1142
msgid ""
"Let's go through what this script does, starting with the class variables:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1144
msgid ""
"``bomb_mesh``: The :ref:`MeshInstance <class_MeshInstance>` used for the "
"bomb mesh."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1145
msgid "``FUSE_TIME``: The length of time for which the fuse burns."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1146
msgid ""
"``fuse_timer``: A variable for tracking how long the fuse has been burning."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1147
msgid ""
"``explosion_area``: The :ref:`Area <class_Area>` node used for detecting "
"what nodes are inside the explosion."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1148
msgid "``EXPLOSION_DAMAGE``: The amount of damage the explosion does."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1149
msgid ""
"``EXPLOSION_TIME``: The length of time the explosion :ref:`Particles "
"<class_Particles>` take (you can calculate this number by multiplying the "
"particles ``lifetime`` by its ``speed scale``)"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1150
msgid ""
"``explosion_timer``: A variable for tracking how long the explosion has "
"lasted."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1151
msgid "``explode``: A boolean for tracking whether the bomb has exploded."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1152
msgid "``fuse_particles``: The fuse :ref:`Particles <class_Particles>` node."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1153
msgid ""
"``explosion_particles``: The explosion :ref:`Particles <class_Particles>` "
"node."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1154
msgid ""
"``controller``: The controller that is currently holding the bomb, if there "
"is one. This is set by the controller, so we do not need to check anything "
"outside of checking if it is ``null``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1158
msgid "Let's go through ``_ready``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1160
msgid ""
"Firstly, we get all the nodes and assign them to the proper variables for "
"later use."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1162
msgid ""
"Then, we make sure ``_physics_process`` is not going to be called. We do "
"this since we will be using ``_physics_process`` only for the fuse and for "
"destroying the bomb, so we do not want to trigger that early, we only want "
"the fuse to start when the player interacts while holding a bomb."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1167
msgid "Now, let's look at ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1169
msgid ""
"Firstly we check to see whether ``fuse_timer`` is less than ``FUSE_TIME``. "
"If ``fuse_timer`` is less than ``FUSE_TIME``, then the bomb must be burning "
"down the fuse."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1171
msgid ""
"We then add time to ``fuse_timer``, and check to see whether the bomb has "
"waited long enough and has burned through the entire fuse."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1173
msgid ""
"If the bomb has waited long enough, then we need to explode the bomb. We do "
"this first by stopping the smoke :ref:`Particles <class_Particles>` from "
"emitting, and making the explosion :ref:`Particles <class_Particles>` emit. "
"We also hide the bomb mesh so it is no longer visible."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1176
msgid ""
"Next, we make the set the collision layer and mask to zero, and set the :ref:"
"`RigidBody <class_RigidBody>` mode to static. This makes it where the now "
"exploded bomb cannot interact with the physics world, and so it will stay in "
"place."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1179
msgid ""
"Then, we go through everything inside the explosion :ref:`Area "
"<class_Area>`. We make sure the bodies inside the explosion :ref:`Area "
"<class_Area>` are not the bomb itself, since we do not want to explode the "
"bomb with itself. We then check to see whether the bodies have the "
"``damage`` method/function, and if it does, we call that, while if it does "
"not, we check to see if it has the ``apply_impulse`` method/function, and "
"call that instead."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1183
msgid ""
"Then, we set ``explode`` to true since the bomb has exploded, and we play a "
"sound."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1185
msgid ""
"Next, we check to see if the bomb has exploded, as we need to wait until the "
"explosion :ref:`Particles <class_Particles>` are done."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1187
msgid ""
"If the bomb has exploded, we add time to ``explosion_timer``. We then check "
"to see if the explosion :ref:`Particles <class_Particles>` are done. If they "
"are, we set the explosion :ref:`Area <class_Area>`'s monitoring property to "
"``false`` to ensure we do not get any bugs in the debugger, we make the "
"controller drop the bomb if it is holding onto it, we make the grab :ref:"
"`Raycast <class_Raycast>` visible if the grab mode is ``RAYCAST``, and we "
"free/destroy the bomb using ``queue_free``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1193
msgid "Finally, let's look at ``interact``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1195
msgid ""
"All we are doing here is making it where ``_physics_process`` will be "
"called, which will start the fuse. We also make the fuse :ref:`Particles "
"<class_Particles>` start emitting, so smoke comes out the top of the bomb."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1200
msgid ""
"With that done, the bombs are ready to go! You can find them in the orange "
"building. Because of how we are calculating velocity, it is easiest to throw "
"bombs in a trusting-like motion as opposed to a more natural throwing like "
"motion. The smooth curve of a throwing-like motion is harder to track, and "
"the because of how we are tracking velocity, it does not always work."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1205
msgid "Adding a sword"
msgstr "검 추가하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1207
msgid "Finally, let's add a sword so we can slice through things!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1209
msgid "Open up ``Sword.tscn``, which you will find in ``Scenes``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1211
msgid ""
"There is not a whole lot to note here, but there is just one thing, and that "
"is how the length of the blade of the sword is broken into several small :"
"ref:`Area <class_Area>` nodes. This is because we need to roughly know where "
"on the blade the sword collided, and this is the easiest (and only) way I "
"could figure out how to do this."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1214
msgid ""
"If you know how to find the point where an :ref:`Area <class_Area>` and a :"
"ref:`CollisionObject <class_CollisionObject>` meet, please let me know and/"
"or make a PR on the Godot documentation! This method of using several small :"
"ref:`Area <class_Area>` nodes works okay, but it is not ideal."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1217
msgid ""
"Other than that, there really is not much of note, so let's write the code. "
"Select the ``Sword`` root node, the :ref:`RigidBody <class_RigidBody>` and "
"make a new script called ``Sword.gd``. Add the following code to ``Sword."
"gd``:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1281
msgid ""
"Let's go over what this script does, starting with the two class variables:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1283
msgid "``SWORD_DAMAGE``: The amount of damage a single sword slice does."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1284
msgid ""
"``controller``: The controller that is holding the sword, if there is one. "
"This is set by the controller, so we do not need to set it here, in ``Sword."
"gd``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1288
msgid "Let's go over ``_ready`` next."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1290
msgid ""
"All we are doing here is connecting each of the :ref:`Area <class_Area>` "
"nodes ``body_entered`` signal to the ``body_entered_sword`` function, "
"passing in an additional argument, which will be the number of the damage :"
"ref:`Area <class_Area>`, so we can figure out where on the sword the body "
"collided."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1295
msgid "Now let's go over ``body_entered_sword``."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1297
msgid ""
"Firstly, we make sure the body the sword has collided with is not itself."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1299
msgid ""
"Then we figure out which part of the sword the body collided with, using the "
"passed-in number."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1301
msgid ""
"Next, we check to see whether the body the sword collided with has the "
"``damage`` function, and if it does, we call it and play a sound."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1303
msgid ""
"If it does not have the damage function, we then check to see whether it has "
"the ``apply_impulse`` function. If it does, we then calculate the direction "
"from the sword part the body collided with to the body. We then check to see "
"whether the sword is being held or not."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1306
msgid ""
"If the sword is not being held, we use the :ref:`RigidBody "
"<class_RigidBody>`'s velocity as the force in ``apply_impulse``, while if "
"the sword is being held, we use the controller's velocity as the force in "
"the impulse."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1309
msgid "Finally, we play a sound."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1315
msgid ""
"With that done, you can now slice through the targets! You can find the "
"sword in the corner in between the shotgun and the pistol."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1318
msgid "Updating the target UI"
msgstr "대상 UI를 업데이트하기"

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1320
msgid "Okay, let's update the UI as the sphere targets are destroyed."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1322
msgid ""
"Open up ``Game.tscn`` and then expand the ``GUI`` :ref:`MeshInstance "
"<class_MeshInstance>`. From there, expand the ``GUI`` :ref:`Viewport "
"<class_Viewport>` node and then select the ``Base_Control`` node. Add a new "
"script called ``Base_Control``, and add the following:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1342
msgid "Let's go over what this script does quickly, as it is fairly simple."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1344
msgid ""
"Firstly, in ``_ready``, we get the :ref:`Label <class_Label>` that shows how "
"many spheres are left and assign it to the ``sphere_count_label`` class "
"variable. Next, we get ``Game.gd`` by using ``get_tree().root`` and assign "
"``sphere_ui`` to this script."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1347
msgid ""
"In ``update_ui``, we change the sphere :ref:`Label <class_Label>`'s text. If "
"there is at least one sphere remaining, we change the text to show how many "
"spheres are still left in the world. If there are no more spheres remaining, "
"we change the text and congratulate the player."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1351
msgid "Adding the final special RigidBody"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1353
msgid ""
"Finally, before we finish this tutorial, let's add a way to reset the game "
"while in VR."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1355
msgid ""
"Open up ``Reset_Box.tscn``, which you will find in ``Scenes``. Select the "
"``Reset_Box`` :ref:`RigidBody <class_RigidBody>` node and make a new script "
"called ``Reset_Box.gd``. Add the following code to ``Reset_Box.gd``:"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1394
msgid "Let's go over what this does quickly, as it is also fairly simple."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1396
msgid ""
"Firstly, we get the starting global :ref:`Transform <class_Transform>` in "
"``_ready``, and assign it to ``start_transform``. We will use this to reset "
"the position of the reset box every so often."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1398
msgid ""
"In ``_physics_process``, we check to see if enough time has passed to reset. "
"If it has, we reset the box's :ref:`Transform <class_Transform>` and then "
"reset the timer."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1400
msgid ""
"If the player interacts while holding the reset box, we reset the scene by "
"calling ``get_tree().change_scene`` and passing in the path to the current "
"scene. This resets/restarts the scene completely."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1403
msgid ""
"When the reset box is dropped, we reset the :ref:`Transform "
"<class_Transform>` and timer."
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1407
msgid ""
"With that done, when you grab and interact with the reset box, the entire "
"scene will reset/restart and you can destroy all the targets again!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1414
msgid "Whew! That was a lot of work. Now you have a fairly simple VR project!"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1418
msgid ""
"You can download the finished project for this part here: :download:"
"`VR_Starter_Tutorial_Complete.zip <files/VR_Starter_Tutorial_Complete.zip>`"
msgstr ""

#: ../../docs/tutorials/vr/vr_starter_tutorial.rst:1420
msgid ""
"This will hopefully serve as an introduction to making fully-featured VR "
"games in Godot! The code written here can be expanded to make puzzle games, "
"action games, story-based games, and more!"
msgstr ""

#: ../../docs/tutorials/plugins/index.rst:2
msgid "Plugins"
msgstr "플러그인"

#: ../../docs/tutorials/plugins/editor/index.rst:2
msgid "Editor plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:4
msgid "Making plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:7
msgid "About plugins"
msgstr "플러그인에 대해서"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:9
msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be "
"made entirely with GDScript and standard scenes, without even reloading the "
"editor. Unlike modules, you don't need to create C++ code nor recompile the "
"engine. While this makes plugins less powerful, there are still many things "
"you can do with them. Note that a plugin is similar to any scene you can "
"already make, except it is created using a script to add functionality."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:16
msgid ""
"This tutorial will guide you through the creation of two simple plugins so "
"you can understand how they work and be able to develop your own. The first "
"will be a custom node that you can add to any scene in the project and the "
"other will be a custom dock added to the editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:22
msgid "Creating a plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:24
msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as a base to develop and test the plugins."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:27
msgid ""
"The first thing you need to do is to create a new plugin the editor can "
"understand as such. You need two files for that: ``plugin.cfg`` for the "
"configuration and a custom GDScript with the functionality."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:31
msgid ""
"Plugins have a standard path like ``addons/plugin_name`` inside the project "
"folder. For this example, create a folder ``my_custom_node`` inside "
"``addons``. You should end up with a directory structure like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:37
msgid ""
"Now, open the script editor, click the **File** menu, choose **New "
"TextFile**, then navigate to the plugin folder and name the file ``plugin."
"cfg``. Add the following structure to ``plugin.cfg``::"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:49
msgid ""
"This is a simple INI file with metadata about your plugin. You need to set "
"the name and description so people can understand what it does. Don't forget "
"to add your own name so you can be properly credited. Add a version number "
"so people can see if they have an outdated version; if you are unsure on how "
"to come up with the version number, check out `Semantic Versioning <https://"
"semver.org/>`_. Finally, set the main script file to load when your plugin "
"is active."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:57
msgid "The script file"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:59
msgid ""
"Open the script editor (F3) and create a new GDScript file called "
"``custom_node.gd`` inside the ``my_custom_node`` folder. This script is "
"special and it has two requirements: it must be a ``tool`` script and it has "
"to inherit from :ref:`class_EditorPlugin`."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:64
msgid ""
"It's important to deal with initialization and clean-up of resources. A good "
"practice is to use the virtual function :ref:`_enter_tree() "
"<class_Node_method__enter_tree>` to initialize your plugin and :ref:"
"`_exit_tree() <class_Node_method__exit_tree>` to clean it up. You can delete "
"the default GDScript template from your file and replace it with the "
"following structure:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:85
msgid "This is a good template to use when creating new plugins."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:88
msgid "A custom node"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:90
msgid ""
"Sometimes you want a certain behavior in many nodes, such as a custom scene "
"or control that can be reused. Instancing is helpful in a lot of cases, but "
"sometimes it can be cumbersome, especially if you're using it in many "
"projects. A good solution to this is to make a plugin that adds a node with "
"a custom behavior."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:96
msgid ""
"To create a new node type, you can use the function :ref:`add_custom_type() "
"<class_EditorPlugin_method_add_custom_type>` from the :ref:"
"`class_EditorPlugin` class. This function can add new types to the editor "
"(nodes or resources). However, before you can create the type, you need a "
"script that will act as the logic for the type. While that script doesn't "
"have to use the ``tool`` keyword, it can be added so the script runs in the "
"editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:103
msgid ""
"For this tutorial, we'll create a simple button that prints a message when "
"clicked. For that, we'll need a simple script that extends from :ref:"
"`class_Button`. It could also extend :ref:`class_BaseButton` if you prefer::"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:117
msgid ""
"That's it for our basic button. You can save this as ``button.gd`` inside "
"the plugin folder. You'll also need a 16×16 icon to show in the scene tree. "
"If you don't have one, you can grab the default one from the engine and save "
"it in your `addons/my_custom_node` folder as `icon.png`, or use the default "
"Godot logo (`preload(\"res://icon.png\")`). You can also use SVG icons if "
"desired."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:125
msgid ""
"Now, we need to add it as a custom type so it shows on the **Create New "
"Node** dialog. For that, change the ``custom_node.gd`` script to the "
"following::"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:141
msgid ""
"With that done, the plugin should already be available in the plugin list in "
"the **Project Settings**, so activate it as explained in `Checking the "
"results`_."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:144
msgid "Then try it out by adding your new node:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:148
msgid ""
"When you add the node, you can see that it already has the script you "
"created attached to it. Set a text to the button, save and run the scene. "
"When you click the button, you can see some text in the console:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:155
msgid "A custom dock"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:157
msgid ""
"Sometimes, you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks "
"are just scenes based on Control, so they are created in a way similar to "
"usual GUI scenes."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:161
msgid ""
"Creating a custom dock is done just like a custom node. Create a new "
"``plugin.cfg`` file in the ``addons/my_custom_dock`` folder, then add the "
"following content to it::"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:173
msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill it with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` to "
"get a good start."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:177
msgid ""
"Since we're trying to add a new custom dock, we need to create the contents "
"of the dock. This is nothing more than a standard Godot scene: just create a "
"new scene in the editor then edit it."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:181
msgid ""
"For an editor dock, the root node **must** be a :ref:`Control "
"<class_Control>` or one of its child classes. For this tutorial, you can "
"create a single button. The name of the root node will also be the name that "
"appears on the dock tab, so be sure to give it a short and descriptive name. "
"Also, don't forget to add some text to your button."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:189
msgid ""
"Save this scene as ``my_dock.tscn``. Now, we need to grab the scene we "
"created then add it as a dock in the editor. For this, you can rely on the "
"function :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` from the :ref:`EditorPlugin "
"<class_EditorPlugin>` class."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:194
msgid ""
"You need to select a dock position and define the control to add (which is "
"the scene you just created). Don't forget to **remove the dock** when the "
"plugin is deactivated. The script could look like this::"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:221
msgid ""
"Note that, while the dock will initially appear at its specified position, "
"the user can freely change its position and save the resulting layout."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:225
msgid "Checking the results"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:227
msgid ""
"It's now time to check the results of your work. Open the **Project "
"Settings** and click on the **Plugins** tab. Your plugin should be the only "
"one on the list. If it is not showing, click on the **Update** button in the "
"top-right corner."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:234
msgid ""
"You can see the plugin is inactive on the **Status** column; click on the "
"status to select **Active**. The dock should become visible before you even "
"close the settings window. You should now have a custom dock:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:241
msgid "Going beyond"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:243
msgid ""
"Now that you've learned how to make basic plugins, you can extend the editor "
"in several ways. Lots of functionality can be added to the editor with "
"GDScript; it is a powerful way to create specialized editors without having "
"to delve into C++ modules."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:248
msgid ""
"You can make your own plugins to help yourself and share them in the `Asset "
"Library <https://godotengine.org/asset-library/>`_ so that people can "
"benefit from your work."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:4
msgid "Import plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:9
msgid ""
"An import plugin is a special type of editor tool that allows custom "
"resources to be imported by Godot and be treated as first-class resources. "
"The editor itself comes bundled with a lot of import plugins to handle the "
"common resources like PNG images, Collada and glTF models, OGG Vorbis "
"sounds, and many more."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:14
msgid ""
"This tutorial will show you how to create a simple import plugin to load a "
"custom text file as a material resource. This text file will contain three "
"numeric values separated by comma, which represents the three channels of a "
"color, and the resulting color will be used as the albedo (main color) of "
"the imported material."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:20
msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page. This also assumes you "
"are acquainted with Godot's import system."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:24
msgid ""
"The sample file to import contains only a line representing the pure blue "
"color (zero red, zero green, and full blue):"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:32
msgid "Configuration"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:34
msgid ""
"First we need a generic plugin that will handle the initialization and "
"destruction of our import plugin. Let's add the ``plugin.cfg`` file first:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:47
msgid ""
"Then we need the ``material_import.gd`` file to add and remove the import "
"plugin when needed:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:66
msgid ""
"When this plugin is activated, it will create a new instance of the import "
"plugin (which we'll soon make) and add it to the editor using the :ref:"
"`add_import_plugin() <class_EditorPlugin_method_add_import_plugin>` method. "
"We store a reference to it in a class member ``import_plugin`` so we can "
"refer to it later when removing it. The :ref:`remove_import_plugin() "
"<class_EditorPlugin_method_remove_import_plugin>` method is called when the "
"plugin is deactivated to clean up the memory and let the editor know the "
"import plugin isn't available anymore."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:75
msgid ""
"Note that the import plugin is a reference type  so it doesn't need to be "
"explicitly released from the memory with the ``free()`` function. It will be "
"released automatically by the engine when it goes out of scope."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:80
msgid "The EditorImportPlugin class"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:82
msgid ""
"The main character of the show is the :ref:`EditorImportPlugin class "
"<class_EditorImportPlugin>`. It is responsible to implement the methods that "
"are called by Godot when it needs to know how to deal with files."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:87
msgid "Let's begin to code our plugin, one method at time:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:98
msgid ""
"The first method is the :ref:"
"`get_importer_name()<class_EditorImportPlugin_method_get_importer_name>`. "
"This is a unique name to your plugin that is used by Godot to know which "
"import was used in a certain file. When the files needs to be reimported, "
"the editor will know which plugin to call."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:109
msgid ""
"The :ref:"
"`get_visible_name()<class_EditorImportPlugin_method_get_visible_name>` "
"method is responsible to inform the name of the type it imports and will be "
"shown to the user in the Import dock."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:113
msgid ""
"You should choose this name as a continuation to \"Import as\". Eg. *"
"\"Import as Silly Material\"*. Yes, this one is a bit silly, but you "
"certainly can come up with a descriptive name for your plugin."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:122
msgid ""
"Godot's import system detects file types by their extension. In the :ref:"
"`get_recognized_extensions()<class_EditorImportPlugin_method_get_recognized_extensions>` "
"method you return an array of strings to represent each extension that this "
"plugin can understand. If an extension is recognized by more than one "
"plugin, the user can select which one to use when importing the files."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:128
msgid ""
"Common extensions like ``.json`` and ``.txt`` might be used by many plugins. "
"Also, there could be files in the project that are just data for the game "
"and should not be imported. You have to be careful when importing to "
"validate the data. Never expect the file to be well-formed."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:138
msgid ""
"The imported files are saved in the ``.import`` folder at the project's "
"root. Their extension should match the type of resource you are importing, "
"but since Godot can't tell what you'll use (because there might be multiple "
"valid extensions for the same resource), you need to inform what will be the "
"used in the import."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:144
msgid ""
"Since we're importing a Material, we'll use the special extension for such "
"resource types. If you are importing a scene, you can use ``scn``. Generic "
"resources can use the ``res`` extension. However, this is not enforced in "
"any way by the engine."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:154
msgid ""
"The imported resource has a specific type, so the editor can know which "
"property slot it belongs to. This allows drag and drop from the FileSystem "
"dock to a property in the Inspector."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:158
msgid ""
"In our case it's a :ref:`class_SpatialMaterial`, which can be applied to 3D "
"objects."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:161
msgid ""
"If you need to import different types from the same extension, you have to "
"create multiple import plugins. You can abstract the import code on another "
"file to avoid duplication in this regard."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:166
msgid "Options and presets"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:168
msgid ""
"Your plugin can provide different options to allow the user to control how "
"the resource will be imported. If a set of selected options is common, you "
"can also create different presets to make it easier for the user. The "
"following image shows how the options will appear in the editor:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:175
msgid ""
"Since there might be many presets and they are identified with a number, "
"it's a good practice to use an enum so you can refer to them using names."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:187
msgid ""
"Now that the enum is defined, let's keep looking at the methods of an import "
"plugin:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:195
msgid ""
"The :ref:`get_preset_count() "
"<class_EditorImportPlugin_method_get_preset_count>` method returns the "
"amount of presets that this plugins defines. We only have one preset now, "
"but we can make this method future-proof by returning the size of our "
"``Presets`` enumeration."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:210
msgid ""
"Here we have the :ref:`get_preset_name() "
"<class_EditorImportPlugin_method_get_preset_name>` method, which gives names "
"to the presets as they will be presented to the user, so be sure to use "
"short and clear names."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:215
msgid ""
"We can use the ``match`` statement here to make the code more structured. "
"This way it's easy to add new presets in the future. We use the catch all "
"pattern to return something too. Although Godot won't ask for presets beyond "
"the preset count you defined, it's always better to be on the safe side."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:220
msgid ""
"If you have only one preset you could simply return its name directly, but "
"if you do this you have to be careful when you add more presets."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:235
msgid ""
"This is the method which defines the available options. :ref:"
"`get_import_options() <class_EditorImportPlugin_method_get_import_options>` "
"returns an array of dictionaries, and each dictionary contains a few keys "
"that are checked to customize the option as its shown to the user. The "
"following table shows the possible keys:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:242
msgid "Key"
msgstr "키"

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:244
msgid "``name``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:244
msgid ""
"The name of the option. When showed, underscores become spaces and first "
"letters are capitalized."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
msgid "``default_value``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
msgid "Any"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:246
msgid "The default value of the option for this preset."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
msgid "``property_hint``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
#: ../../docs/tutorials/plugins/editor/import_plugins.rst:252
msgid "Enum value"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:248
msgid ""
"One of the :ref:`PropertyHint <enum_@GlobalScope_PropertyHint>` values to "
"use as hint."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid "``hint_string``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:250
msgid ""
"The hint text of the property. The same as you'd add in the ``export`` "
"statement in GDScript."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:252
msgid "``usage``"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:252
msgid ""
"One of the :ref:`PropertyUsageFlags <enum_@GlobalScope_PropertyUsageFlags>` "
"values to define the usage."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:255
msgid ""
"The ``name`` and ``default_value`` keys are **mandatory**, the rest are "
"optional."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:257
msgid ""
"Note that the ``get_import_options`` method receives the preset number, so "
"you can configure the options for each different preset (especially the "
"default value). In this example we use the ``match`` statement, but if you "
"have lots of options and the presets only change the value you may want to "
"create the array of options first and then change it based on the preset."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:263
msgid ""
"The ``get_import_options`` method is called even if you don't define presets "
"(by making ``get_preset_count`` return zero). You have to return an array "
"even it's empty, otherwise you can get errors."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:273
msgid ""
"For the :ref:`get_option_visibility() "
"<class_EditorImportPlugin_method_get_option_visibility>` method, we simply "
"return ``true`` because all of our options (i.e. the single one we defined) "
"are visible all the time."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:278
msgid ""
"If you need to make certain option visible only if another is set with a "
"certain value, you can add the logic in this method."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:282
msgid "The ``import`` method"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:284
msgid ""
"The heavy part of the process, responsible for the converting the files into "
"resources, is covered by the :ref:`import() "
"<class_EditorImportPlugin_method_import>` method. Our sample code is a bit "
"long, so let's split in a few parts:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:300
msgid ""
"The first part of our import method opens and reads the source file. We use "
"the :ref:`File <class_File>` class to do that, passing the ``source_file`` "
"parameter which is provided by the editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:304
msgid ""
"If there's an error when opening the file, we return it to let the editor "
"know that the import wasn't successful."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:319
msgid ""
"This code takes the line of the file it read before and splits it in pieces "
"that are separated by a comma. If there are more or less than the three "
"values, it considers the file invalid and reports an error."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:323
msgid ""
"Then it creates a new :ref:`Color <class_Color>` variable and sets its "
"values according to the input file. If the ``use_red_anyway`` option is "
"enabled, then it sets the color as a pure red instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:332
msgid ""
"This part makes a new :ref:`SpatialMaterial <class_SpatialMaterial>` that is "
"the imported resource. We create a new instance of it and then set its "
"albedo color as the value we got before."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:340
msgid ""
"This is the last part and quite an important one, because here we save the "
"made resource to the disk. The path of the saved file is generated and "
"informed by the editor via the ``save_path`` parameter. Note that this comes "
"**without** the extension, so we add it using :ref:`string formatting "
"<doc_gdscript_printf>`. For this we call the ``get_save_extension`` method "
"that we defined earlier, so we can be sure that they won't get out of sync."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:347
msgid ""
"We also return the result from the :ref:`ResourceSaver.save() "
"<class_ResourceSaver_method_save>` method, so if there's an error in this "
"step, the editor will know about it."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:352
msgid "Platform variants and generated files"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:354
msgid ""
"You may have noticed that our plugin ignored two arguments of the ``import`` "
"method. Those are *return arguments* (hence the ``r`` at the beginning of "
"their name), which means that the editor will read from them after calling "
"your import method. Both of them are arrays that you can fill with "
"information."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:359
msgid ""
"The ``r_platform_variants`` argument is used if you need to import the "
"resource differently depending on the target platform. While it's called "
"*platform* variants, it is based on the presence of :ref:`feature tags "
"<doc_feature_tags>`, so even the same platform can have multiple variants "
"depending on the setup."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:364
msgid ""
"To import a platform variant, you need to save it with the feature tag "
"before the extension, and then push the tag to the ``r_platform_variants`` "
"array so the editor can know that you did."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:368
msgid ""
"For an example, let's say we save a different material for mobile platform. "
"We would need to do something like the following:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:376
msgid ""
"The ``r_gen_files`` argument is meant for extra files that are generated "
"during your import process and need to be kept. The editor will look at it "
"to understand the dependencies and make sure the extra file is not "
"inadvertently deleted."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:381
msgid ""
"This is also an array and should be filled with full paths of the files you "
"save. As an example, let's create another material for the next pass and "
"save it in a different file:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:397
msgid "Trying the plugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:399
msgid ""
"This has been theoretical, but now that the import plugin is done, let's "
"test it. Make sure you created the sample file (with the contents described "
"in the introduction section) and save it as ``test.mtxt``. Then activate the "
"plugin in the Project Settings."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:404
msgid ""
"If everything goes well, the import plugin is added to the editor and the "
"file system is scanned, making the custom resource appear on the FileSystem "
"dock. If you select it and focus the Import dock, you can see the only "
"option to select there."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:409
msgid ""
"Create a MeshInstance node in the scene, and for its Mesh property set up a "
"new SphereMesh. Unfold the Material section in the Inspector and then drag "
"the file from the FileSystem dock to the material property. The object will "
"update in the viewport with the blue color of the imported material."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:416
msgid ""
"Go to Import dock, enable the \"Use Red Anyway\" option, and click on "
"\"Reimport\". This will update the imported material and should "
"automatically update the view showing the red color instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/import_plugins.rst:420
msgid ""
"And that's it! Your first import plugin is done! Now get creative and make "
"plugins for your own beloved formats. This can be quite useful to write your "
"data in a custom format and then use it in Godot as if they were native "
"resources. This shows how the import system is powerful and extendable."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:4
msgid "GDNative C example"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:8
msgid ""
"This tutorial will introduce you to the bare minimum required to create "
"GDNative modules. This should be your starting point into the world of "
"GDNative, understanding the contents of this tutorial will help you in "
"understanding all that is to come after this."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:10
msgid ""
"Before we begin, you can download the source code to the example object "
"we'll be describing here by following this link: https://github.com/"
"GodotNativeTools/GDNative-demos/tree/master/c/SimpleDemo"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:13
msgid ""
"This example project also contains a SConstruct file that makes compiling a "
"little easier but in this tutorial we'll be doing things by hand."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:15
msgid ""
":ref:`GDNative <class_GDNative>` can be used to create several types of "
"additions to Godot, from PluginScript to ARVR interfaces. In this tutorial "
"we are going to look at creating a :ref:`NativeScript <class_NativeScript>` "
"module. NativeScript allows you to write logic in C or C++ in similar "
"fashion as you would write a GDScript file. We'll be creating the C "
"equivalent of this GDScript:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:29
msgid ""
"We'll be writing separate tutorials on the other types of GDNative modules "
"and explain what each of them is for as we go through them."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:32
msgid "Prerequisites"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:33
msgid "Before we start you'll need a few things."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:35
msgid "A Godot 3.0 executable"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:36
msgid "A C compiler"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:37
msgid ""
"A copy of this repository: https://github.com/GodotNativeTools/godot_headers"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:39
msgid ""
"The first two pretty much speak for themselves. On Linux, you'll likely have "
"a C compiler, on macOS, it's easiest to install Xcode from the Mac App Store "
"and, on Windows, we've tested this with both MSVC 2015 and 2017."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:41
msgid ""
"For number 3, we suggest that you create a folder somewhere that you use to "
"store your code, open up a terminal and CD into that folder. Then execute:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:47
msgid "This will download the required files into that folder."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:49
msgid ""
"On this repository you will now find different branches. As Godot evolves, "
"so does GDNative. With the exception of one breaking change in ARVR between "
"3.0 and 3.1, GDNative modules build for older versions of Godot will work "
"with newer versions of Godot but not the other way around."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:51
msgid ""
"The master branch of the ``godot_headers`` repository is kept in line with "
"the master branch of Godot and thus contains the GDNative class and "
"structure definitions that will work with the latest Godot master."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:53
msgid ""
"The 3.0 branch of the ``godot_headers`` repository contains the GDNative "
"class and structure definitions that will work with Godot 3.0. You can clone "
"this branch by executing:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:59
msgid ""
"If you are building Godot from source with your own changes that impact "
"GDNative, you can find the updated class and structure definition in "
"``<godotsource>/modules/gdnative/include``"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:62
msgid "Our C source"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:63
msgid ""
"Let's start by writing our main code. Ideally, we want to end up with a file "
"structure that looks something like this:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:81
msgid ""
"Open up Godot and create a new project called simple. This will create the "
"simple folder and project.godot file. Then manually create a bin and src "
"subfolder in this folder."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:83
msgid ""
"We're going to start by having a look at what our simple.c file contains. "
"Now, for our example here we're making a single C source file without a "
"header to keep things simple. Once you start writing bigger projects it is "
"advisable you break your project up into multiple files. That however falls "
"outside of the scope of this tutorial."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:85
msgid ""
"We'll be looking at the source code bit by bit so all the parts below should "
"all be put together into one big file. I'll explain each section as we add "
"it."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:87
msgid ""
"The below code includes our header files that we need and then defines two "
"pointers to two different structs. GDNative supports a large collection for "
"functions for calling back into the main Godot executable. In order for your "
"module to have access to these functions, GDNative provides your application "
"with a struct containing pointers to all these functions."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:90
msgid ""
"To keep this implementation modular and easily extendable, the core "
"functions are available directly through the \"core\" API struct, but "
"additional functions have their own \"GDNative structs\" that are accessible "
"through extensions."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:92
msgid ""
"In our example, we access one of these extension to gain access to the "
"functions specifically needed for NativeScript."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:104
msgid ""
"A NativeScript behaves like any other script in Godot. Because the "
"NativeScript API is rather low level, it requires the library to specify "
"many things more verbosely than other scripting systems, such as GDScript. "
"When a NativeScript instance gets created, a library-given constructor gets "
"called. When that instance gets destroyed, the given destructor will be "
"executed."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:106
msgid ""
"These are forward declarations for the functions we'll be implementing for "
"our object. A constructor and destructor is needed. Additionally, the object "
"will have a single method called get_data."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:115
msgid ""
"Next up is the first of the entry points Godot will call when our dynamic "
"library is loaded. These methods are all prefixed with Godot (you can change "
"this later on) followed by their name. ``gdnative_init`` is a function that "
"initialises our dynamic library. Godot will give it a pointer to a structure "
"that contains various bits of information we may find useful amongst which "
"the pointers to our API structures."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:117
msgid ""
"For any additional API structures we need to loop through our extensions "
"array and check the type of extension."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:135
msgid ""
"Next up is ``gdnative_terminate`` which is called before the library is "
"unloaded. Godot will unload the library when no object uses it anymore. "
"Here, you can do any cleanup you may need to do. For our example, we're "
"simply going to clear our API pointers."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:144
msgid ""
"Finally we have ``nativescript_init`` which is the most important function "
"we'll need today. This function will be called by Godot as part of loading a "
"GDNative library and communicates back to Godot what objects we make "
"available to Godot."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:146
msgid ""
"We first tell Godot which classes are implemented by calling "
"``nativescript_register_class``. The first parameter here is the handle "
"pointer given to us. The second is the name of our object class. The third "
"is the type of object in Godot that we 'inherit' from, this is not true "
"inheritance but it's close enough. Finally, our fourth and fifth parameters "
"are descriptions for our constructor and destructor."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:148
msgid ""
"We then tell Godot about our methods (well our one method in this case), by "
"calling ``nativescript_register_method`` for each method of our class. In "
"our case, that is just ``get_data``. Our first parameter is yet again our "
"handle pointer. The second is again the name of the object class we're "
"registering. The third is the name of our function as it will be known to "
"GDScript. The fourth is our attributes setting. The fifth and final "
"parameter is a description of which function to call when the method gets "
"called."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:150
msgid ""
"The descriptions contain the function pointers to the functions themselves. "
"The other two fields in these structs are for specifying per-method "
"userdata. The value in the ``method_data`` field will be passed on every "
"function call as the ``p_method_data`` argument. This is useful to reuse one "
"function for different methods on possibly multiple different script-"
"classes. If the ``method_data`` value is a pointer to memory that needs to "
"be freed, the ``free_func`` field can contain a pointer to a function that "
"will free that memory. That free function gets called when the script itself "
"(not instance!) gets unloaded (so usually at library-unload time)."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:173
msgid ""
"Now, it's time to start working on the functions of our object. First, we "
"define a structure that we use to store the member data of an instance of "
"our GDNative class."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:181
msgid ""
"And then, we define our constructor. All we do in our constructor is "
"allocate memory for our structure and fill it with some data. Note that we "
"use Godot's memory functions so the memory gets tracked and then return the "
"pointer to our new structure. This pointer will act as our instance "
"identifier in case multiple objects are instantiated."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:183
msgid ""
"This pointer will be passed to any of our functions related to our object as "
"a parameter called ``p_user_data``, and can both be used to identify our "
"instance and to access its member data."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:194
msgid ""
"Our destructor is called when Godot is done with our object and we free our "
"instances' member data."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:202
msgid ""
"And finally, we implement our get_data function. Data is always sent and "
"returned as variants so in order to return our data, which is a string, we "
"first need to convert our C string to a Godot string object, and then copy "
"that string object into the variant we are returning."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:204
msgid ""
"Strings are heap-allocated in Godot, so they have a destructor which frees "
"the memory. Destructors are named ``godot_TYPENAME_destroy``. When a Variant "
"gets created with a String, it references the String. That means that the "
"original String can be \"destroyed\" to decrease the ref-count. If that does "
"not happen the String memory will leak since the ref-count will never be "
"zero and the memory never deallocated. The returned variant gets "
"automatically destroyed by Godot."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:206
msgid ""
"(In more complex operations it can be confusing the keep track of which "
"value needs to be deallocated and which does not. As a general rule: call "
"godot_XXX_destroy when a C++ destructor would be called instead. The String "
"destructor would be called in C++ after the Variant was created, so the same "
"is necessary in C)"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:208
msgid "The variant we return is destroyed automatically by Godot."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:226
msgid "And that is the whole source code of our module."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:228
msgid ""
"If you add a blank .gdignore file to the src folder, Godot will not try to "
"import the compiler-generated temporary files."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:231
#: ../../docs/development/compiling/index.rst:2
#: ../../docs/development/compiling/compiling_for_windows.rst:90
#: ../../docs/development/compiling/compiling_for_x11.rst:83
#: ../../docs/development/compiling/compiling_for_osx.rst:23
#: ../../docs/development/compiling/compiling_for_ios.rst:19
#: ../../docs/development/compiling/compiling_for_uwp.rst:24
msgid "Compiling"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:232
msgid ""
"We now need to compile our source code. As mentioned our example project on "
"GitHub contains a Scons configuration that does all the hard work for you "
"but for our tutorial here we are going to call the compilers directly."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:234
msgid ""
"Assuming you are sticking to the folder structure suggested above it is best "
"to CD into the src subfolder in a terminal session and execute the commands "
"from there. Make sure to create the bin folder before you proceed."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:236
msgid "On Linux:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:243
msgid "On macOS:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:250
msgid "On Windows:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:257
msgid ""
"on the Windows build you also end up with a libsimple.lib library. This is a "
"library that you can compile into a project to provide access to the DLL. We "
"get it as a bonus and we do not need it :) When exporting your game for "
"release this file will be ignored."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:260
msgid "Creating our GDNLIB file"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:261
msgid ""
"With our module compiled we now need to create a gdnlib file for our module "
"which we place alongside our dynamic libraries. This file tells Godot what "
"dynamic libraries are part of our module and need to be loaded per platform. "
"At the time of writing this tutorial work is still being done on making this "
"configurable from within Godot so for now grab your favourite text editor, "
"create a file called libsimple.gdnlib and add the following into this file:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:283
msgid "This file contains 3 sections."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:285
msgid ""
"The **general** section contains some info that tells Godot how to use our "
"module."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:287
msgid ""
"If singleton is true our library is automatically loaded and a function "
"called godot_singleton_init is called. We'll leave that for another tutorial."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:289
msgid ""
"If load_once is true our library is loaded only once and each individual "
"script that uses our library will use the same data. Any variable you define "
"globally will be accessible from any instance of your object you create. If "
"load_once is false a new copy of the library is loaded into memory each time "
"a script access the library."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:291
msgid ""
"The symbol_prefix is a prefix for our core functions. So the Godot in "
"godot_nativescript_init for instance. If you use multiple GDnative libraries "
"that you wish to statically link you'll have to use different prefixes. This "
"again is a subject to dive into deeper in a separate tutorial, it is only "
"needed at this time for deployment to iOS as this platform does not like "
"dynamic libraries."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:293
msgid ""
"The **entry** section tells us for each platform and feature combination "
"which dynamic library has to be loaded. This also informs the exporter which "
"files need to be exported when exporting to a specific platform."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:295
msgid ""
"The **dependencies** section tells Godot what other files need to be "
"exported for each platform in order for our library to work. Say that your "
"GDNative module uses another DLL to implement functionality from a 3rd party "
"library, this is where you list that DLL."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:298
msgid "Putting it all together"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:299
msgid ""
"Now that we should have a working GDNative library it is time to fire up "
"Godot and use it. Open up the sample project if you haven't left it open "
"after creating the project all the way at the beginning of this tutorial."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:302
msgid "Creating our GDNS file"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:303
msgid ""
"With our GDNLIB file we've told Godot how to load our library, now we need "
"to tell it about our \"Simple\" object class. This we do by creating a GDNS "
"resource file."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:305
msgid "Start by clicking the create resource button in the Inspector:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:309
msgid "And select NativeScript:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:313
msgid ""
"Press Create, now the inspector will show a few fields we need to enter. In "
"Class Name we enter \"SIMPLE\" which is the object class name we used in our "
"C source when calling godot_nativescript_register_class. We also need to "
"select our GDNLIB file by clicking on Library and selecting Load:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:317
msgid "Finally click on the save icon and save this as bin/simple.gdns:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:321
msgid ""
"Now it's time to build our scene. Add a control node to your scene as your "
"root and call it main. Then add a button and a label as subnodes. Place them "
"somewhere nice on screen and give your button a name."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:325
msgid "Select the control node and create a script for the control node:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:329
msgid "Next link up the pressed signal on the button to your script:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:333
msgid "Don't forget to save your scene, call it main.tscn."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:335
msgid "Now we can implement our main.gd code:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-c-example.rst:347
msgid ""
"After all that, our project should work. The first time you run it Godot "
"will ask you what your main scene is and you select your main.tscn file and "
"presto:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:4
msgid "GDNative C++ example"
msgstr "GDNative  C++ 예제"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:9
msgid ""
"This tutorial builds on top of the information given in the :ref:`GDNative C "
"example <doc_gdnative_c_example>`, so we highly recommend you read that "
"first."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:13
msgid ""
"The C++ bindings for GDNative are built on top of the NativeScript GDNative "
"API and provide a nicer way to \"extend\" nodes in Godot using C++. This is "
"equivalent to writing scripts in GDScript, but in C++ instead."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:18
msgid ""
"Godot 3.1 saw the introduction of the NativeScript 1.1 additions that "
"enabled the GDNative team to build a nicer C++ bindings library. These "
"changes have now been merged into the master branch and will be the way we "
"go forward. If you want to write a C++ GDNative plugin that also supports "
"Godot 3.0 you will need to use the 3.0 branch and the NativeScript 1.0 "
"syntax. We'll be showing them side by side in this writeup."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:26
msgid ""
"You can download the full example we'll be creating in this tutorial `on "
"GitHub <https://github.com/BastiaanOlij/gdnative_cpp_example>`_."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:30
msgid "Setting up the project"
msgstr "프로젝트 설정하기"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:32
msgid "There are a few prerequisites you'll need:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:34
msgid "a Godot 3.x executable,"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:35
msgid "a C++ compiler,"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:36
msgid "SCons as a build tool,"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:37
msgid ""
"a copy of the `godot-cpp repository <https://github.com/GodotNativeTools/"
"godot-cpp>`_."
msgstr ""
"`godot-cpp 저장소 <https://github.com/GodotNativeTools/godot-cpp>`_ 의 사본."

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:39
msgid ""
"See also :ref:`Compiling <toc-devel-compiling>` as the build tools are "
"identical to the ones you need to compile Godot from source."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:42
msgid ""
"You can download these repositories from GitHub or let Git do the work for "
"you. Note that these repositories now have different branches for different "
"versions of Godot. GDNative modules written for an earlier version of Godot "
"will work in newer versions (with the exception of one breaking change in "
"ARVR interfaces between 3.0 and 3.1) but not vise versa so make sure you "
"download the correct branch. Also note that the version of Godot you use to "
"generate the ``api.json`` with becomes your minimum version."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:52
msgid ""
"If you are versioning your project using Git, it is a good idea to add them "
"as Git submodules:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:74
msgid ""
"If you decide to just download the repositories or clone them into your "
"project folder, make sure to keep the folder layout identical to the one "
"described here, as much of the code we'll be showcasing here assumes the "
"project follows this layout."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:79
msgid "Do make sure you clone recursive to pull in both repositories:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:94
msgid ""
"``godot-cpp`` now includes ``godot_headers`` as a nested submodule, if "
"you've manually downloaded them please make sure to place ``godot_headers`` "
"inside of the ``godot-cpp`` folder."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:96
msgid ""
"You don't have to do it this way but we've found it easiest to manage. If "
"you decide to just download the repositories or just clone them into your "
"folder, make sure to keep the folder layout the same as we've setup here as "
"much of the code we'll be showcasing here assumes the project has this "
"layout."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:98
msgid ""
"If you cloned the example from the link specified in the introduction, the "
"submodules are not automatically initialized. You will need to execute the "
"following commands:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:107
msgid "This will clone these two repositories into your project folder."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:110
msgid "Building the C++ bindings"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:112
msgid ""
"Now that we've downloaded our prerequisites, it is time to build the C++ "
"bindings."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:115
msgid ""
"The repository contains a copy of the metadata for the current Godot "
"release, but if you need to build these bindings for a newer version of "
"Godot, simply call the Godot executable:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:123
msgid ""
"Place the resulting ``api.json`` file in the project folder and add "
"``use_custom_api_file=yes custom_api_file=../api.json`` to the scons command "
"below."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:125
msgid ""
"To generate and compile the bindings, use this command (replacing "
"``<platform>`` with ``windows``, ``x11`` or ``osx`` depending on your OS):"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:134
msgid ""
"This step will take a while. When it is completed, you should have static "
"libraries that can be compiled into your project stored in ``godot-cpp/bin/"
"``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:137
msgid ""
"At some point in the future, compiled binaries will be available, making "
"this step optional."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:140
msgid ""
"You may need to add ``bits=64`` to the command on Windows. We're still "
"working on better auto detection."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:143
msgid "Creating a simple plugin"
msgstr "간단한 플러그인 만들기"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:145
msgid ""
"Now it's time to build an actual plugin. We'll start by creating an empty "
"Godot project in which we'll place a few files."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:148
msgid ""
"Open Godot and create a new project. For this example, we will place it in a "
"folder called ``demo`` inside our GDNative module's folder structure."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:151
msgid ""
"In our demo project, we'll create a scene containing a Node called \"Main\" "
"and we'll save it as ``main.tscn``. We'll come back to that later."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:154
msgid ""
"Back in the top-level GDNative module folder, we're also going to create a "
"subfolder called ``src`` in which we'll place our source files."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:157
msgid ""
"You should now have ``demo``, ``godot-cpp``, ``godot_headers``, and ``src`` "
"directories in your GDNative module."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:160
msgid ""
"In the ``src`` folder, we'll start with creating our header file for the "
"GDNative node we'll be creating. We will name it ``gdexample.h``:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:224
msgid ""
"There are a few things of note to the above. We're including ``Godot.hpp`` "
"which contains all our basic definitions. After that, we include ``Sprite."
"hpp`` which contains bindings to the Sprite class. We'll be extending this "
"class in our module."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:229
msgid ""
"We're using the namespace ``godot``, since everything in GDNative is defined "
"within this namespace."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:232
msgid ""
"Then we have our class definition, which inherits from our Sprite through a "
"container class. We'll see a few side effects of this later on. The "
"``GODOT_CLASS`` macro sets up a few internal things for us."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:236
msgid "After that, we declare a single member variable called ``time_passed``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:238
msgid ""
"In the next block we're defining our methods, we obviously have our "
"constructor and destructor defined, but there are two other functions that "
"will likely look familiar to some, and one new method."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:242
msgid ""
"The first is ``_register_methods``, which is a static function that Godot "
"will call to find out which methods can be called on our NativeScript and "
"which properties it exposes. The second is our ``_process`` function, which "
"will work exactly the same as the ``_process`` function you're used to in "
"GDScript. The third is our ``_init`` function which is called after Godot "
"has properly set up our object. It has to exist even if you don't place any "
"code in it."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:251
msgid "Let's implement our functions by creating our ``gdexample.cpp`` file:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:311
msgid ""
"This one should be straightforward. We're implementing each method of our "
"class that we defined in our header file. Note that the ``register_method`` "
"call **must** expose the ``_process`` method, otherwise Godot will not be "
"able to use it. However, we do not have to tell Godot about our constructor, "
"destructor and ``_init`` functions."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:317
msgid ""
"The other method of note is our ``_process`` function, which simply keeps "
"track of how much time has passed and calculates a new position for our "
"sprite using a simple sine and cosine function. What stands out is calling "
"``owner->set_position`` to call one of the build in methods of our Sprite. "
"This is because our class is a container class; ``owner`` points to the "
"actual Sprite node our script relates to. In the upcoming NativeScript 1.1, "
"``set_position`` can be called directly on our class."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:326
msgid ""
"There is one more C++ file we need; we'll name it ``gdlibrary.cpp``. Our "
"GDNative plugin can contain multiple NativeScripts, each with their own "
"header and source file like we've implemented ``GDExample`` up above. What "
"we need now is a small bit of code that tells Godot about all the "
"NativeScripts in our GDNative plugin."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:350
msgid ""
"Note that we are not using the ``godot`` namespace here, since the three "
"functions implemented here need to be defined without a namespace."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:353
msgid ""
"The ``godot_gdnative_init`` and ``godot_gdnative_terminate`` functions get "
"called respectively when Godot loads our plugin and when it unloads it. All "
"we're doing here is parse through the functions in our bindings module to "
"initialize them, but you might have to set up more things depending on your "
"needs."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:359
msgid ""
"The important function is the third function called "
"``godot_nativescript_init``. We first call a function in our bindings "
"library that does its usual stuff. After that, we call the function "
"``register_class`` for each of our classes in our library."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:365
msgid "Compiling the plugin"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:367
msgid ""
"We cannot easily write by hand a ``SConstruct`` file that SCons would use "
"for building. For the purpose of this example, just use :download:`this "
"hardcoded SConstruct file <files/cpp_example/SConstruct>` we've prepared. "
"We'll cover a more customizable, detailed example on how to use these build "
"files in a subsequent tutorial."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:373
msgid ""
"This ``SConstruct`` file was written to be used with the latest ``godot-"
"cpp`` master, you may need to make small changes using it with older "
"versions or refer to the ``SConstruct`` file in the Godot 3.0 documentation."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:378
msgid ""
"Once you've downloaded the ``SConstruct`` file, place it in your GDNative "
"module folder besides ``godot-cpp``, ``godot_headers`` and ``demo``, then "
"run:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:386
msgid "You should now be able to find the module in ``demo/bin/<platform>``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:390
msgid ""
"Here, we've compiled both godot-cpp and our gdexample library as debug "
"builds. For optimized builds, you should compile them using the "
"``target=release`` switch."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:395
msgid "Using the GDNative module"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:397
msgid ""
"Before we jump back into Godot, we need to create two more files in ``demo/"
"bin/``. Both can be created using the Godot editor, but it may be faster to "
"create them directly."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:401
msgid ""
"The first one is a file that lets Godot know what dynamic libraries should "
"be loaded for each platform and is called ``gdexample.gdnlib``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:425
msgid ""
"This file contains a ``general`` section that controls how the module is "
"loaded. It also contains a prefix section which should be left on ``godot_`` "
"for now. If you change this, you'll need to rename various functions that "
"are used as entry points. This was added for the iPhone platform because it "
"doesn't allow dynamic libraries to be deployed, yet GDNative modules are "
"linked statically."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:432
msgid ""
"The ``entry`` section is the important bit: it tells Godot the location of "
"the dynamic library in the project's filesystem for each supported platform. "
"It will also result in *just* that file being exported when you export the "
"project, which means the data pack won't contain libraries that are "
"incompatible with the target platform."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:438
msgid ""
"Finally, the ``dependencies`` section allows you to name additional dynamic "
"libraries that should be included as well. This is important when your "
"GDNative plugin implements someone else's library and requires you to supply "
"a third-party dynamic library with your project."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:443
msgid ""
"If you double click on the ``gdexample.gdnlib`` file within Godot, you'll "
"see there are far more options to set:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:448
msgid ""
"The second file we need to create is a file used by each NativeScript we've "
"added to our plugin. We'll name it ``gdexample.gdns`` for our gdexample "
"NativeScript."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:465
msgid ""
"This is a standard Godot resource; you could just create it directly in your "
"scene, but saving it to a file makes it much easier to reuse it in other "
"places. This resource points to our gdnlib file, so that Godot can know "
"which dynamic library contains our NativeScript. It also defines the "
"``class_name`` which identifies the NativeScript in our plugin we want to "
"use."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:472
msgid ""
"Time to jump back into Godot. We load up the main scene we created way back "
"in the beginning and now add a Sprite to our scene:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:477
msgid ""
"We're going to assign the Godot logo to this sprite as our texture, disable "
"the ``centered`` property and drag our ``gdexample.gdns`` file onto the "
"``script`` property of the sprite:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:483
msgid "We're finally ready to run the project:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:488
#, fuzzy
msgid "Adding properties"
msgstr "노드 속성"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:490
msgid ""
"GDScript allows you to add properties to your script using the ``export`` "
"keyword. In GDNative you have to register the properties and there are two "
"ways of doing this. You can either bind directly to a member or use a setter "
"and getter function."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:496
msgid ""
"There is a third option, just like in GDScript you can directly implement "
"the ``_get_property_list``, ``_get`` and ``_set`` methods of an object but "
"that goes far beyond the scope of this tutorial."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:500
msgid ""
"We'll examine both starting with the direct bind. Lets add a property that "
"allows us to control the amplitude of our wave."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:503
msgid ""
"In our ``gdexample.h`` file we simply need to add a member variable like so:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:513
msgid ""
"In our ``gdexample.cpp`` file we need to make a number of changes, we will "
"only show the methods we end up changing, don't remove the lines we're "
"omitting:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:565
msgid ""
"Once you compile the module with these changes in place you will see that a "
"property has been added to our interface. You can now change this property "
"and when you run your project, you will see that our Godot icon travels "
"along a larger figure."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:570
msgid ""
"Lets do the same but for the speed of our animation and use a setter and "
"getter function. Our ``gdexample.h`` header file again only needs a few more "
"lines of code:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:584
msgid ""
"This requires a few more changes to our ``gdexample.cpp`` file, again we're "
"only showing the methods that have changed so don't remove anything we're "
"omitting:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:656
msgid ""
"Now when the project is compiled we'll see another property called speed. "
"Changing its value will make the animation go faster or slower."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:659
msgid ""
"For this example there is no obvious advantage of using a setter and getter. "
"It is just more code to write. For a simple example as this there may be a "
"good reason for a setter if you want to react on the variable being changed "
"but in many cases just binding the variable will be enough."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:664
msgid ""
"Getters and setters become far more useful in more complex scenarios where "
"you need to make additional choices based on the state of your object."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:670
msgid ""
"For simplicity we've left out the optional parameters in the "
"register_property<class, type> method call. These parameters are "
"``rpc_mode``, ``usage``, ``hint`` and ``hint_string``. These can be used to "
"further configure how properties are displayed and set on the Godot side."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:676
msgid ""
"Modern C++ compilers are able to infer the class and variable type and allow "
"you to omit the ``<GDExample, float>`` part of our ``register_property`` "
"method. we've had mixed experiences with this however."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:684
msgid ""
"Last but not least, signals fully work in GDNative as well. Having your "
"module react to a signal given out by another object requires you to call "
"``connect`` on that object. We can't think of a good example for our "
"wobbling Godot icon, we would need to showcase a far more complete example."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:690
msgid "This however is the required syntax:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:701
msgid ""
"Note that you can only call ``my_method`` if you've previously registered it "
"in your ``_register_methods`` method."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:704
msgid ""
"Having your object sending out signals is far more common. For our wobbling "
"Godot icon we'll do something silly just to show how it works. We're going "
"to emit a signal every time a second has passed and pass the new location "
"along."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:709
msgid ""
"In our ``gdexample.h`` header file we just need to define a new member "
"``time_emit``:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:719
msgid ""
"The changes in ``gdexample.cpp`` are a bit more elaborate this time. First "
"you'll need to set ``time_emit = 0.0;`` in either our ``_init`` method or in "
"our constructor. But the other two needed changes we'll look at one by one."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:723
msgid ""
"In our ``_register_methods`` method we need to declare our signal and we do "
"this as follows:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:750
msgid ""
"Here we see a nice improvement in the latest version of godot-cpp where our "
"``register_signal`` method can be a single call first taking the signals "
"name, then having pairs of values specificying the parameter name and type "
"of each parameter we'll send along with this signal."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:755
msgid ""
"For NativeScript 1.0 we first build a dictionary in which we tell Godot "
"about the types of arguments we will pass to our signal, and then register "
"it."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:758
msgid "Next we'll need to change our ``_process`` method:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:804
msgid ""
"After a second has passed we emit our signal and reset our counter. Again in "
"the new version of godot-cpp we can add our parameter values directly to "
"``emit_signal``. In NativeScript 1.0 We first build an array of values and "
"then call ``emit_signal``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:810
msgid ""
"Once compiled we can go into Godot and select our sprite node. On our "
"``Node`` tab we find our new signal and link it up by pressing connect. "
"We've added a script on our main node and implemented our signal like this:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:821
msgid "Every second we simply output our position to the console."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:825
msgid "NativeScript 1.1 vs NativeScript 1.0"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:827
msgid ""
"So far in our example above there doesn't seem to be a lot of difference "
"between the old and new syntax. The class is defined slightly differently "
"and we no longer use the ``owner`` member to call methods on the Godot side "
"of our object. A lot of the improvements are hidden under the hood."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:832
msgid ""
"This example only deals with simple variables and simple methods. Especially "
"once you start passing references to other objects or when you start calling "
"methods that require more complex parameters, NativeScript 1.1 does start to "
"show its benefits."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:838
msgid "Next steps"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:840
msgid ""
"The above is only a simple example, but we hope it shows you the basics. You "
"can build upon this example to create full-fledged scripts to control nodes "
"in Godot using C++."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:844
msgid ""
"You should be able to edit and recompile the plugin while the Godot editor "
"remains open; just rerun the project after the library has finished building."
msgstr ""

#: ../../docs/tutorials/platform/index.rst:2
msgid "Platform-specific"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:4
msgid "Android in-app purchases"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:8
msgid ""
"Godot engine has integrated GooglePaymentsV3 module with which we can "
"implement in-app purchases in our game."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:10
msgid ""
"The Godot engine demo project repository has an android-iap example project. "
"It includes a gdscript interface for android IAP."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:12
msgid ""
"Check the repository here https://github.com/godotengine/godot-demo-projects"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:14
msgid "Find the iap.gd script in"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:21
msgid ""
"Add it to the Autoload list and name it as IAP so that we can reference it "
"anywhere in the game."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:24
msgid "Getting the product details"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:26
msgid ""
"When starting our game, we will need to get the item details from Google "
"such as the product price, description and localized price string etc."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:42
msgid ""
"We can use the IAP details to display the title, price and/or description on "
"our shop scene."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:45
msgid "Check if user purchased an item"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:47
msgid ""
"When starting our game, we can check if the user has purchased any product. "
"YOU SHOULD DO THIS ONLY AFTER 2/3 SECONDS AFTER YOUR GAME IS LOADED. If we "
"do this as the first thing when the game is launched, IAP might not be "
"initialized and our game will crash on start."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:60
msgid ""
"Google IAP policy says the game should restore the user's purchases if the "
"user replaces their phone or reinstalls the same app. We can use the above "
"code to check what products the user has purchased and we can make our game "
"respond accordingly."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:63
msgid "Simple Purchase"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:65
msgid "We can put this purchase logic on a product's buy button."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:80
msgid ""
"We can also implement other signals for the purchase flow and improve the "
"user experience as you needed."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:82
msgid "``purchase_fail`` - When the purchase is failed due to any reason"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:84
msgid "``purchase_cancel`` - When the user cancels the purchase"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:86
msgid "``purchase_owned`` - When the user already bought the product earlier"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:90
msgid "Consumables and Non-Consumables"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:92
msgid ""
"There are two types of products - consumables and non-consumables. "
"**Consumables** are purchased and used, for eg: healing potions which can be "
"purchased again and again. **Non-consumables** are one time purchases, for "
"eg: Level packs."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:96
msgid ""
"Google doesn't have this separation in their dashboard. If our product is a "
"consumable, and if a user has purchased it, it will not be available for "
"purchase until it is consumed. So we should call the consume method for our "
"consumables and don't call consume for your non-consumables."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:106
msgid ""
"If our game has only consumables, we don't have to do this. We can set it to "
"consume the item automatically after a purchase."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:112
msgid "If our game has only non-consumables, we can"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:118
msgid "We should set the auto consume value only once when the game starts."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:121
msgid "Testing"
msgstr "테스팅"

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:123
msgid ""
"If we add a gmail id as a tester in Google dashboard, that tester can "
"purchase items and they will not be charged. Another way to test IAP is "
"using redeem codes generated by us for our game because the purchase flow is "
"the same."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:125
msgid ""
"Third way of testing is in development side. If we put the product ids as "
"shown below, we will get a static fixed response according to the product "
"id. This is a quick way of testing things before going to the dashboard."
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:127
msgid "android.test.purchased"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:128
msgid "android.test.canceled"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:129
msgid "android.test.refunded"
msgstr ""

#: ../../docs/tutorials/platform/android_in_app_purchases.rst:130
msgid "android.test.item_unavailable"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:6
msgid ""
"At the moment, there are two iOS APIs partially implemented, GameCenter and "
"Storekit. Both use the same model of asynchronous calls explained below."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:11
msgid "Asynchronous methods"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:13
msgid ""
"When requesting an asynchronous operation, the method will look like this:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:20
msgid ""
"The parameter will usually be a Dictionary, with the information necessary "
"to make the request, and the call will have two phases. First, the method "
"will immediately return an Error value. If the Error is not 'OK', the call "
"operation is completed, with an error probably caused locally (no internet "
"connection, API incorrectly configured, etc). If the error value is 'OK', a "
"response event will be produced and added to the 'pending events' queue. "
"Example:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:47
msgid ""
"Remember that when a call returns OK, the API will *always* produce an event "
"through the pending_event interface, even if it's an error, or a network "
"timeout, etc. You should be able to, for example, safely block the interface "
"waiting for a reply from the server. If any of the APIs don't behave this "
"way it should be treated as a bug."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:53
msgid "The pending event interface consists of two methods:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:55
msgid ""
"``get_pending_event_count()`` Returns the number of pending events on the "
"queue."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:58
msgid ""
"``Variant pop_pending_event()`` Pops the first event from the queue and "
"returns it."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:62
msgid "Store Kit"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:64
msgid "Implemented in platform/iphone/in_app_store.mm"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:66
msgid ""
"The Store Kit API is accessible through the \"InAppStore\" singleton (will "
"always be available from gdscript). It is initialized automatically. It has "
"three methods for purchasing:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:70
msgid "``Error purchase(Variant p_params);``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:71
msgid "``Error request_product_info(Variant p_params);``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:72
msgid "``Error restore_purchases();``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:74
msgid "and the pending_event interface"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:82
msgid "purchase"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:84
msgid "Purchases a product id through the Store Kit API."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:89
msgid ""
"Takes a Dictionary as a parameter, with one field, ``product_id``, a string "
"with your product id. Example:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:97
#: ../../docs/tutorials/platform/services_for_ios.rst:137
#: ../../docs/tutorials/platform/services_for_ios.rst:161
#: ../../docs/tutorials/platform/services_for_ios.rst:210
#: ../../docs/tutorials/platform/services_for_ios.rst:257
#: ../../docs/tutorials/platform/services_for_ios.rst:286
#: ../../docs/tutorials/platform/services_for_ios.rst:316
#: ../../docs/tutorials/platform/services_for_ios.rst:348
#: ../../docs/tutorials/platform/services_for_ios.rst:405
msgid "Response event"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:99
#: ../../docs/tutorials/platform/services_for_ios.rst:139
#: ../../docs/tutorials/platform/services_for_ios.rst:212
#: ../../docs/tutorials/platform/services_for_ios.rst:259
#: ../../docs/tutorials/platform/services_for_ios.rst:288
#: ../../docs/tutorials/platform/services_for_ios.rst:318
#: ../../docs/tutorials/platform/services_for_ios.rst:350
#: ../../docs/tutorials/platform/services_for_ios.rst:407
msgid "The response event will be a dictionary with the following fields:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:101
#: ../../docs/tutorials/platform/services_for_ios.rst:214
#: ../../docs/tutorials/platform/services_for_ios.rst:261
#: ../../docs/tutorials/platform/services_for_ios.rst:290
#: ../../docs/tutorials/platform/services_for_ios.rst:320
#: ../../docs/tutorials/platform/services_for_ios.rst:352
msgid "On error:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:111
#: ../../docs/tutorials/platform/services_for_ios.rst:225
#: ../../docs/tutorials/platform/services_for_ios.rst:271
#: ../../docs/tutorials/platform/services_for_ios.rst:300
#: ../../docs/tutorials/platform/services_for_ios.rst:330
#: ../../docs/tutorials/platform/services_for_ios.rst:362
msgid "On success:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:122
msgid "request_product_info"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:124
msgid "Requests the product info on a list of product IDs."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:129
msgid ""
"Takes a Dictionary as a parameter, with one field, ``product_ids``, a string "
"array with a list of product ids. Example:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:155
msgid "restore_purchases"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:157
msgid ""
"Restores previously made purchases on user's account. This will create "
"response events for each previously purchased product id."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:163
msgid "The response events will be dictionaries with the following fields:"
msgstr "응답 이벤트는 다음 필드가 있는 딕셔너리일 것입니다:"

#: ../../docs/tutorials/platform/services_for_ios.rst:174
msgid "Game Center"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:176
msgid "Implemented in platform/iphone/game_center.mm"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:178
msgid ""
"The Game Center API is available through the \"GameCenter\" singleton. It "
"has 6 methods:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:181
msgid "``Error post_score(Variant p_score);``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:182
msgid "``Erroraward_achievement(Variant p_params);``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:183
msgid "``Error reset_achievements();``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:184
msgid "``Error request_achievements();``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:185
msgid "``Error request_achievement_descriptions();``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:186
msgid "``Error show_game_center(Variant p_params);``"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:188
msgid "plus the standard pending event interface."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:191
msgid "post_score"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:193
msgid "Posts a score to a Game Center leaderboard."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:198
#: ../../docs/tutorials/platform/services_for_ios.rst:387
msgid "Takes a Dictionary as a parameter, with two fields:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:200
msgid "``score`` a float number"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:201
msgid "``category`` a string with the category name"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:235
msgid "award_achievement"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:237
msgid "Modifies the progress of a Game Center achievement."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:242
msgid "Takes a Dictionary as a parameter, with 3 fields:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:244
msgid "``name`` (string) the achievement name"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:245
msgid ""
"``progress`` (float) the achievement progress from 0.0 to 100.0 (passed to "
"``GKAchievement::percentComplete``)"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:247
msgid ""
"``show_completion_banner`` (bool) whether Game Center should display an "
"achievement banner at the top of the screen"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:281
msgid "reset_achievements"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:283
msgid "Clears all Game Center achievements. The function takes no parameters."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:310
msgid "request_achievements"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:312
msgid ""
"Request all the Game Center achievements the player has made progress on. "
"The function takes no parameters."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:342
msgid "request_achievement_descriptions"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:344
msgid ""
"Request the descriptions of all existing Game Center achievements regardless "
"of progress. The function takes no parameters."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:379
msgid "show_game_center"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:381
msgid ""
"Displays the built in Game Center overlay showing leaderboards, "
"achievements, and challenges."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:389
msgid ""
"``view`` (string) (optional) the name of the view to present. Accepts "
"\"default\", \"leaderboards\", \"achievements\", or \"challenges\". Defaults "
"to \"default\"."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:392
msgid ""
"``leaderboard_name`` (string) (optional) the name of the leaderboard to "
"present. Only used when \"view\" is \"leaderboards\" (or \"default\" is "
"configured to show leaderboards). If not specified, Game Center will display "
"the aggregate leaderboard."
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:397
msgid "Examples:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:409
msgid "On close:"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:419
msgid "Multi-platform games"
msgstr ""

#: ../../docs/tutorials/platform/services_for_ios.rst:421
msgid ""
"When working on a multi-platform game, you won't always have the \"GameCenter"
"\" singleton available (for example when running on PC or Android). Because "
"the gdscript compiler looks up the singletons at compile time, you can't "
"just query the singletons to see and use what you need inside a conditional "
"block, you need to also define them as valid identifiers (local variable or "
"class member). This is an example of how to work around this in a class:"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:4
msgid "Console support in Godot"
msgstr "Godot의 콘솔 지원"

#: ../../docs/tutorials/platform/consoles.rst:7
msgid "Official support"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:9
msgid ""
"Godot currently does not officially support consoles (except the Xbox One "
"using UWP)."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:12
msgid "The reasons for this are:"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:14
msgid ""
"To develop for consoles, one must be licensed as a company. As an open "
"source project, Godot does not have such a legal figure."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:16
msgid ""
"Console SDKs are secret and covered by non-disclosure agreements. Even if we "
"could get access to them, we could not publish the platform-specific code "
"under an open source license."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:19
msgid ""
"Consoles require specialized hardware to develop for, so regular individuals "
"can't create games for them anyway."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:22
msgid ""
"However, it is still possible to port your games to consoles thanks to "
"services provided by third-party companies."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:26
msgid "Third-party support"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:28
msgid ""
"Console ports of Godot are offered by third-party companies (which have "
"ported Godot on their own). These companies also offer publishing of your "
"games to various consoles."
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:32
msgid "Following is the list of providers:"
msgstr ""

#: ../../docs/tutorials/platform/consoles.rst:34
msgid ""
"`Lone Wolf Technology <http://www.lonewolftechnology.com/>`_ offers Switch, "
"PS4 and Xbox One porting and publishing of Godot games."
msgstr ""

#: ../../docs/tutorials/threads/index.rst:2
msgid "Multi-threading"
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:4
msgid "Thread safe APIs"
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:9
msgid ""
"Using threads is a common way to balance processing scatter it across CPUs "
"and cores. Godot supports multi threading, but not in the whole engine."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:12
msgid ""
"Below is a list of the areas in Godot and how they can be used with threads."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:17
msgid ""
":ref:`Global Scope<class_@GlobalScope>` singletons are all thread safe. "
"Accessing servers from threads is supported (for VisualServer and Physics "
"servers, ensure threaded or thread safe operation is enabled in the project "
"settings!)."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:19
msgid ""
"This makes them ideal for code that creates dozens of thousands of instances "
"in servers and controls them from threads. Of course, it requires a bit more "
"code, as this is used directly and not within the scene tree."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:24
msgid ""
"Interacting with the active scene tree is **NOT** thread safe. Make sure to "
"use mutexes when sending data between threads. If you want to call functions "
"from a thread, the *call_deferred* function may be used:"
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:33
msgid ""
"However, creating scene chunks (nodes in tree arrangement) outside the "
"active tree is fine. This way, parts of a scene can be built or instantiated "
"in a thread, then added in the main thread:"
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:43
msgid "GDScript arrays, dictionaries"
msgstr "GDScript 배열(arrays), 딕셔너리(dictionaries)"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:45
msgid ""
"In GDScript, reading and writing elements from multiple threads is ok, but "
"anything that changes the container size (resizing, adding or removing "
"elements) requires locking a mutex."
msgstr ""

#: ../../docs/tutorials/threads/thread_safe_apis.rst:50
msgid ""
"Modifying a unique resource from multiple threads is not supported, but "
"loading them on threads or handling a reference is perfectly supported. "
"Scenes, textures, meshes, etc. Can be loaded and manipulated on threads, "
"then added to the active scene in the main thread."
msgstr ""

#: ../../docs/tutorials/misc/index.rst:2
msgid "Miscellaneous"
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:4
msgid "Handling quit requests"
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:7
msgid "Quitting"
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:9
msgid ""
"Most platforms have the option to request the application to quit. On "
"desktops, this is usually done with the \"x\" icon on the window titlebar. "
"On Android, the back button is used to quit when on the main screen (and to "
"go back otherwise)."
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:15
msgid "Handling the notification"
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:17
msgid ""
"The :ref:`MainLoop <class_MainLoop>` has a special notification that is sent "
"to all nodes when quit is requested: MainLoop.NOTIFICATION_WM_QUIT."
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:21
msgid "Handling it is done as follows (on any node):"
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:38
msgid ""
"When developing mobile apps, quitting is not desired unless the user is on "
"the main screen, so the behavior can be changed."
msgstr ""

#: ../../docs/tutorials/misc/handling_quit_requests.rst:41
msgid ""
"It is important to note that by default, Godot apps have the built-in "
"behavior to quit when quit is requested, this can be changed:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:4
msgid "Pausing games"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:7
msgid "Pause?"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:9
msgid ""
"In most games it is desirable to, at some point, interrupt the game to do "
"something else, such as taking a break or changing options. However this is "
"not as simple as it seems. The game might be stopped, but it might be "
"desirable that some menus and animations continue working."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:15
msgid ""
"Implementing a fine-grained control for what can be paused (and what can "
"not) is a lot of work, so a simple framework for pausing is provided in "
"Godot."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:20
msgid "How pausing works"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:22
msgid ""
"To set pause mode, the pause state must be set. This is done by assigning "
"``true`` to the :ref:`SceneTree.paused <class_SceneTree_property_paused>` "
"property:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:34
msgid "Doing so will have the following behavior:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:36
msgid "2D and 3D physics will be stopped."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:37
msgid ""
"``_process and ``_physics_process`` will not be called anymore in nodes."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:38
msgid "``_input`` and ``_input_event`` will not be called anymore either."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:40
msgid ""
"This effectively stops the whole game. Calling this function from a script, "
"by default, will result in an unrecoverable state (nothing will work "
"anymore!)."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:45
msgid "White-listing nodes"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:47
msgid ""
"Before enabling pause, make sure that nodes that must keep working during "
"pause are white-listed. This is done by editing the \"Pause Mode\" property "
"in a node:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:53
msgid ""
"By default all nodes have this property in the \"Inherit\" state. This "
"means, that they will only process (or not) depending on what this same "
"property is set on the parent node. If the parent is set to \"Inherit\" , "
"then the grandparent will be checked and so on. Ultimately, if a state can't "
"be found in any of the grandparents, the pause state in SceneTree is used. "
"This means that, by default, when the game is paused every node will be "
"paused."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:61
msgid "So the three possible states for a node are:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:63
msgid ""
"**Inherit**: Process depending on the state of the parent, grandparent, etc. "
"The first parent that has a non-Inherit state."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:65
msgid ""
"**Stop**: Stop the node no matter what (and children in Inherit mode). When "
"paused this node will not process."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:67
msgid ""
"**Process**: Process the node no matter what (and children in Inherit mode). "
"Paused or not this node will process."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:73
msgid ""
"An example of this is creating a popup or panel with controls inside, and "
"set its pause mode to \"Process\" then hide it:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:78
msgid ""
"Just by setting the root of the pause popup to \"Process\", all children and "
"grandchildren will inherit that state. This way, this branch of the scene "
"tree will continue working when paused."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:82
msgid ""
"Finally, make it so when a pause button is pressed (any button will do), "
"enable the pause and show the pause screen."
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:100
msgid "To remove the pause, do the opposite when the pause screen is closed:"
msgstr ""

#: ../../docs/tutorials/misc/pausing_games.rst:118
msgid "And that should be all!"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:4
msgid "Binary serialization API"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:9
msgid ""
"Godot has a simple serialization API based on Variant. It's used for "
"converting data types to an array of bytes efficiently. This API is used in "
"the functions ``get_var`` and ``store_var`` of :ref:`class_File` as well as "
"the packet APIs for :ref:`class_PacketPeer`. This format is not used for "
"binary scenes and resources."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:16
msgid "Packet specification"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:18
msgid ""
"The packet is designed to be always padded to 4 bytes. All values are little "
"endian encoded. All packets have a 4 byte header representing an integer, "
"specifying the type of data:"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:23
msgid "Value"
msgstr "값"

#: ../../docs/tutorials/misc/binary_serialization_api.rst:25
msgid "0"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:27
#: ../../docs/tutorials/misc/binary_serialization_api.rst:387
msgid "1"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:29
msgid "integer"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:35
msgid "vector2"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:37
msgid "rect2"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:39
msgid "vector3"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:41
msgid "transform2d"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:43
msgid "plane"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:45
msgid "quat"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:47
msgid "aabb"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:49
#: ../../docs/tutorials/misc/binary_serialization_api.rst:149
#: ../../docs/tutorials/misc/binary_serialization_api.rst:164
#: ../../docs/tutorials/misc/binary_serialization_api.rst:177
#: ../../docs/tutorials/misc/binary_serialization_api.rst:196
#: ../../docs/tutorials/misc/binary_serialization_api.rst:211
#: ../../docs/tutorials/misc/binary_serialization_api.rst:226
#: ../../docs/tutorials/misc/binary_serialization_api.rst:245
#: ../../docs/tutorials/misc/binary_serialization_api.rst:270
#: ../../docs/tutorials/misc/binary_serialization_api.rst:301
msgid "12"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:49
msgid "basis"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:51
msgid "13"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:51
msgid "transform"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:53
msgid "14"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:53
msgid "color"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:55
msgid "15"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:55
msgid "node path"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:57
#: ../../docs/tutorials/misc/binary_serialization_api.rst:151
#: ../../docs/tutorials/misc/binary_serialization_api.rst:179
#: ../../docs/tutorials/misc/binary_serialization_api.rst:198
#: ../../docs/tutorials/misc/binary_serialization_api.rst:213
#: ../../docs/tutorials/misc/binary_serialization_api.rst:228
#: ../../docs/tutorials/misc/binary_serialization_api.rst:247
#: ../../docs/tutorials/misc/binary_serialization_api.rst:272
#: ../../docs/tutorials/misc/binary_serialization_api.rst:303
msgid "16"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:57
msgid "rid"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:59
msgid "17"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:59
msgid "object"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:61
msgid "18"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:61
msgid "dictionary"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:63
msgid "19"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:63
msgid "array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:65
#: ../../docs/tutorials/misc/binary_serialization_api.rst:181
#: ../../docs/tutorials/misc/binary_serialization_api.rst:230
#: ../../docs/tutorials/misc/binary_serialization_api.rst:249
#: ../../docs/tutorials/misc/binary_serialization_api.rst:274
msgid "20"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:65
msgid "raw array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:67
msgid "21"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:67
msgid "int array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:69
msgid "22"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:69
msgid "real array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:71
msgid "23"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:71
msgid "string array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:73
#: ../../docs/tutorials/misc/binary_serialization_api.rst:183
#: ../../docs/tutorials/misc/binary_serialization_api.rst:232
#: ../../docs/tutorials/misc/binary_serialization_api.rst:251
#: ../../docs/tutorials/misc/binary_serialization_api.rst:276
msgid "24"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:73
msgid "vector2 array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:75
msgid "25"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:75
msgid "vector3 array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:77
msgid "26"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:77
msgid "color array"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:79
msgid "27"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:79
msgid "max"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:82
msgid ""
"Following this is the actual packet contents, which varies for each type of "
"packet:"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:86
msgid "0: null"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:89
msgid "1: :ref:`bool<class_bool>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:92
#: ../../docs/tutorials/misc/binary_serialization_api.rst:101
#: ../../docs/tutorials/misc/binary_serialization_api.rst:110
#: ../../docs/tutorials/misc/binary_serialization_api.rst:119
#: ../../docs/tutorials/misc/binary_serialization_api.rst:132
#: ../../docs/tutorials/misc/binary_serialization_api.rst:143
#: ../../docs/tutorials/misc/binary_serialization_api.rst:158
#: ../../docs/tutorials/misc/binary_serialization_api.rst:171
#: ../../docs/tutorials/misc/binary_serialization_api.rst:190
#: ../../docs/tutorials/misc/binary_serialization_api.rst:205
#: ../../docs/tutorials/misc/binary_serialization_api.rst:220
#: ../../docs/tutorials/misc/binary_serialization_api.rst:239
#: ../../docs/tutorials/misc/binary_serialization_api.rst:264
#: ../../docs/tutorials/misc/binary_serialization_api.rst:295
#: ../../docs/tutorials/misc/binary_serialization_api.rst:310
#: ../../docs/tutorials/misc/binary_serialization_api.rst:319
#: ../../docs/tutorials/misc/binary_serialization_api.rst:330
#: ../../docs/tutorials/misc/binary_serialization_api.rst:340
#: ../../docs/tutorials/misc/binary_serialization_api.rst:359
#: ../../docs/tutorials/misc/binary_serialization_api.rst:371
#: ../../docs/tutorials/misc/binary_serialization_api.rst:383
#: ../../docs/tutorials/misc/binary_serialization_api.rst:396
#: ../../docs/tutorials/misc/binary_serialization_api.rst:407
#: ../../docs/tutorials/misc/binary_serialization_api.rst:418
#: ../../docs/tutorials/misc/binary_serialization_api.rst:426
#: ../../docs/tutorials/misc/binary_serialization_api.rst:439
#: ../../docs/tutorials/misc/binary_serialization_api.rst:452
#: ../../docs/tutorials/misc/binary_serialization_api.rst:467
msgid "Offset"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:92
#: ../../docs/tutorials/misc/binary_serialization_api.rst:101
#: ../../docs/tutorials/misc/binary_serialization_api.rst:110
#: ../../docs/tutorials/misc/binary_serialization_api.rst:119
#: ../../docs/tutorials/misc/binary_serialization_api.rst:132
#: ../../docs/tutorials/misc/binary_serialization_api.rst:143
#: ../../docs/tutorials/misc/binary_serialization_api.rst:158
#: ../../docs/tutorials/misc/binary_serialization_api.rst:171
#: ../../docs/tutorials/misc/binary_serialization_api.rst:190
#: ../../docs/tutorials/misc/binary_serialization_api.rst:205
#: ../../docs/tutorials/misc/binary_serialization_api.rst:220
#: ../../docs/tutorials/misc/binary_serialization_api.rst:239
#: ../../docs/tutorials/misc/binary_serialization_api.rst:264
#: ../../docs/tutorials/misc/binary_serialization_api.rst:295
#: ../../docs/tutorials/misc/binary_serialization_api.rst:310
#: ../../docs/tutorials/misc/binary_serialization_api.rst:319
#: ../../docs/tutorials/misc/binary_serialization_api.rst:330
#: ../../docs/tutorials/misc/binary_serialization_api.rst:340
#: ../../docs/tutorials/misc/binary_serialization_api.rst:359
#: ../../docs/tutorials/misc/binary_serialization_api.rst:371
#: ../../docs/tutorials/misc/binary_serialization_api.rst:383
#: ../../docs/tutorials/misc/binary_serialization_api.rst:396
#: ../../docs/tutorials/misc/binary_serialization_api.rst:407
#: ../../docs/tutorials/misc/binary_serialization_api.rst:418
#: ../../docs/tutorials/misc/binary_serialization_api.rst:426
#: ../../docs/tutorials/misc/binary_serialization_api.rst:439
#: ../../docs/tutorials/misc/binary_serialization_api.rst:452
#: ../../docs/tutorials/misc/binary_serialization_api.rst:467
msgid "Len"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:94
msgid "0 for False, 1 for True"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:98
msgid "2: :ref:`int<class_int>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:103
msgid "Signed, 32-Bit Integer"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:107
msgid "3: :ref:`float<class_float>`/real"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:112
#: ../../docs/tutorials/misc/binary_serialization_api.rst:134
#: ../../docs/tutorials/misc/binary_serialization_api.rst:136
#: ../../docs/tutorials/misc/binary_serialization_api.rst:145
#: ../../docs/tutorials/misc/binary_serialization_api.rst:147
#: ../../docs/tutorials/misc/binary_serialization_api.rst:149
#: ../../docs/tutorials/misc/binary_serialization_api.rst:151
#: ../../docs/tutorials/misc/binary_serialization_api.rst:160
#: ../../docs/tutorials/misc/binary_serialization_api.rst:162
#: ../../docs/tutorials/misc/binary_serialization_api.rst:164
#: ../../docs/tutorials/misc/binary_serialization_api.rst:173
#: ../../docs/tutorials/misc/binary_serialization_api.rst:175
#: ../../docs/tutorials/misc/binary_serialization_api.rst:177
#: ../../docs/tutorials/misc/binary_serialization_api.rst:179
#: ../../docs/tutorials/misc/binary_serialization_api.rst:181
#: ../../docs/tutorials/misc/binary_serialization_api.rst:183
#: ../../docs/tutorials/misc/binary_serialization_api.rst:192
#: ../../docs/tutorials/misc/binary_serialization_api.rst:194
#: ../../docs/tutorials/misc/binary_serialization_api.rst:196
#: ../../docs/tutorials/misc/binary_serialization_api.rst:198
#: ../../docs/tutorials/misc/binary_serialization_api.rst:207
#: ../../docs/tutorials/misc/binary_serialization_api.rst:209
#: ../../docs/tutorials/misc/binary_serialization_api.rst:211
#: ../../docs/tutorials/misc/binary_serialization_api.rst:213
#: ../../docs/tutorials/misc/binary_serialization_api.rst:222
#: ../../docs/tutorials/misc/binary_serialization_api.rst:224
#: ../../docs/tutorials/misc/binary_serialization_api.rst:226
#: ../../docs/tutorials/misc/binary_serialization_api.rst:228
#: ../../docs/tutorials/misc/binary_serialization_api.rst:230
#: ../../docs/tutorials/misc/binary_serialization_api.rst:232
#: ../../docs/tutorials/misc/binary_serialization_api.rst:241
#: ../../docs/tutorials/misc/binary_serialization_api.rst:243
#: ../../docs/tutorials/misc/binary_serialization_api.rst:245
#: ../../docs/tutorials/misc/binary_serialization_api.rst:247
#: ../../docs/tutorials/misc/binary_serialization_api.rst:249
#: ../../docs/tutorials/misc/binary_serialization_api.rst:251
#: ../../docs/tutorials/misc/binary_serialization_api.rst:253
#: ../../docs/tutorials/misc/binary_serialization_api.rst:255
#: ../../docs/tutorials/misc/binary_serialization_api.rst:257
#: ../../docs/tutorials/misc/binary_serialization_api.rst:266
#: ../../docs/tutorials/misc/binary_serialization_api.rst:268
#: ../../docs/tutorials/misc/binary_serialization_api.rst:270
#: ../../docs/tutorials/misc/binary_serialization_api.rst:272
#: ../../docs/tutorials/misc/binary_serialization_api.rst:274
#: ../../docs/tutorials/misc/binary_serialization_api.rst:276
#: ../../docs/tutorials/misc/binary_serialization_api.rst:278
#: ../../docs/tutorials/misc/binary_serialization_api.rst:280
#: ../../docs/tutorials/misc/binary_serialization_api.rst:282
#: ../../docs/tutorials/misc/binary_serialization_api.rst:284
#: ../../docs/tutorials/misc/binary_serialization_api.rst:286
#: ../../docs/tutorials/misc/binary_serialization_api.rst:288
#: ../../docs/tutorials/misc/binary_serialization_api.rst:297
#: ../../docs/tutorials/misc/binary_serialization_api.rst:299
#: ../../docs/tutorials/misc/binary_serialization_api.rst:301
#: ../../docs/tutorials/misc/binary_serialization_api.rst:303
#: ../../docs/tutorials/misc/binary_serialization_api.rst:443
#: ../../docs/tutorials/misc/binary_serialization_api.rst:445
#: ../../docs/tutorials/misc/binary_serialization_api.rst:456
#: ../../docs/tutorials/misc/binary_serialization_api.rst:458
#: ../../docs/tutorials/misc/binary_serialization_api.rst:460
#: ../../docs/tutorials/misc/binary_serialization_api.rst:471
#: ../../docs/tutorials/misc/binary_serialization_api.rst:473
#: ../../docs/tutorials/misc/binary_serialization_api.rst:475
#: ../../docs/tutorials/misc/binary_serialization_api.rst:477
msgid "Float"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:112
msgid "IEE 754 32-Bits Float"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:116
msgid "4: :ref:`String<class_string>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:121
msgid "String Length (in Bytes)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:123
#: ../../docs/tutorials/misc/binary_serialization_api.rst:321
#: ../../docs/tutorials/misc/binary_serialization_api.rst:344
#: ../../docs/tutorials/misc/binary_serialization_api.rst:430
msgid "X"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:123
#: ../../docs/tutorials/misc/binary_serialization_api.rst:321
#: ../../docs/tutorials/misc/binary_serialization_api.rst:344
#: ../../docs/tutorials/misc/binary_serialization_api.rst:430
msgid "Bytes"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:123
#: ../../docs/tutorials/misc/binary_serialization_api.rst:321
#: ../../docs/tutorials/misc/binary_serialization_api.rst:344
#: ../../docs/tutorials/misc/binary_serialization_api.rst:430
msgid "UTF-8 Encoded String"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:126
msgid "This field is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:129
msgid "5: :ref:`Vector2<class_vector2>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:134
#: ../../docs/tutorials/misc/binary_serialization_api.rst:145
#: ../../docs/tutorials/misc/binary_serialization_api.rst:160
#: ../../docs/tutorials/misc/binary_serialization_api.rst:222
#: ../../docs/tutorials/misc/binary_serialization_api.rst:443
#: ../../docs/tutorials/misc/binary_serialization_api.rst:456
msgid "X Coordinate"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:136
#: ../../docs/tutorials/misc/binary_serialization_api.rst:147
#: ../../docs/tutorials/misc/binary_serialization_api.rst:162
#: ../../docs/tutorials/misc/binary_serialization_api.rst:224
#: ../../docs/tutorials/misc/binary_serialization_api.rst:445
#: ../../docs/tutorials/misc/binary_serialization_api.rst:458
msgid "Y Coordinate"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:140
msgid "6: :ref:`Rect2<class_rect2>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:149
#: ../../docs/tutorials/misc/binary_serialization_api.rst:228
msgid "X Size"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:151
#: ../../docs/tutorials/misc/binary_serialization_api.rst:230
msgid "Y Size"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:155
msgid "7: :ref:`Vector3<class_vector3>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:164
#: ../../docs/tutorials/misc/binary_serialization_api.rst:226
#: ../../docs/tutorials/misc/binary_serialization_api.rst:460
msgid "Z Coordinate"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:168
msgid "8: :ref:`Transform2D<class_transform2d>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:173
#: ../../docs/tutorials/misc/binary_serialization_api.rst:241
#: ../../docs/tutorials/misc/binary_serialization_api.rst:266
msgid "[0][0]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:175
#: ../../docs/tutorials/misc/binary_serialization_api.rst:243
#: ../../docs/tutorials/misc/binary_serialization_api.rst:268
msgid "[0][1]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:177
#: ../../docs/tutorials/misc/binary_serialization_api.rst:247
#: ../../docs/tutorials/misc/binary_serialization_api.rst:272
msgid "[1][0]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:179
#: ../../docs/tutorials/misc/binary_serialization_api.rst:249
#: ../../docs/tutorials/misc/binary_serialization_api.rst:274
msgid "[1][1]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:181
#: ../../docs/tutorials/misc/binary_serialization_api.rst:253
#: ../../docs/tutorials/misc/binary_serialization_api.rst:278
msgid "[2][0]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:183
#: ../../docs/tutorials/misc/binary_serialization_api.rst:255
#: ../../docs/tutorials/misc/binary_serialization_api.rst:280
msgid "[2][1]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:187
msgid "9: :ref:`Plane<class_plane>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:192
msgid "Normal X"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:194
msgid "Normal Y"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:196
msgid "Normal Z"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:198
msgid "Distance"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:202
msgid "10: :ref:`Quat<class_quat>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:207
msgid "Imaginary X"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:209
msgid "Imaginary Y"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:211
msgid "Imaginary Z"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:213
msgid "Real W"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:217
msgid "11: :ref:`AABB<class_aabb>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:232
msgid "Z Size"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:236
msgid "12: :ref:`Basis<class_basis>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:245
#: ../../docs/tutorials/misc/binary_serialization_api.rst:270
msgid "[0][2]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:251
#: ../../docs/tutorials/misc/binary_serialization_api.rst:276
msgid "[1][2]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:253
#: ../../docs/tutorials/misc/binary_serialization_api.rst:278
msgid "28"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:255
#: ../../docs/tutorials/misc/binary_serialization_api.rst:280
msgid "32"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:257
#: ../../docs/tutorials/misc/binary_serialization_api.rst:282
msgid "36"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:257
#: ../../docs/tutorials/misc/binary_serialization_api.rst:282
msgid "[2][2]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:261
msgid "13: :ref:`Transform<class_transform>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:284
msgid "40"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:284
msgid "[3][0]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:286
msgid "44"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:286
msgid "[3][1]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:288
msgid "48"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:288
msgid "[3][2]"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:292
msgid "14: :ref:`Color<class_color>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:297
#: ../../docs/tutorials/misc/binary_serialization_api.rst:471
msgid "Red (0..1)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:299
#: ../../docs/tutorials/misc/binary_serialization_api.rst:473
msgid "Green (0..1)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:301
#: ../../docs/tutorials/misc/binary_serialization_api.rst:475
msgid "Blue (0..1)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:303
#: ../../docs/tutorials/misc/binary_serialization_api.rst:477
msgid "Alpha (0..1)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:307
msgid "15: :ref:`NodePath<class_nodepath>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:312
msgid ""
"String Length, or New Format (val&0x80000000!=0 and NameCount=val&0x7FFFFFFF)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:316
msgid "For old format:"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:324
msgid "Padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:327
msgid "For new format:"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:332
msgid "Sub-Name Count"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:334
msgid "Flags (absolute: val&1 != 0 )"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:337
msgid "For each Name and Sub-Name"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:342
#: ../../docs/tutorials/misc/binary_serialization_api.rst:428
msgid "X+0"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:342
#: ../../docs/tutorials/misc/binary_serialization_api.rst:428
msgid "String Length"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:344
#: ../../docs/tutorials/misc/binary_serialization_api.rst:430
msgid "X+4"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:347
msgid "Every name string is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:350
msgid "16: :ref:`RID<class_rid>` (unsupported)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:353
msgid "17: :ref:`Object<class_object>` (unsupported)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:356
msgid "18: :ref:`Dictionary<class_dictionary>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:361
#: ../../docs/tutorials/misc/binary_serialization_api.rst:373
msgid "val&0x7FFFFFFF = elements, val&0x80000000 = shared (bool)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:364
msgid ""
"Then what follows is, for amount of \"elements\", pairs of key and value, "
"one after the other, using this same format."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:368
msgid "19: :ref:`Array<class_array>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:376
msgid ""
"Then what follows is, for amount of \"elements\", values one after the "
"other, using this same format."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:380
msgid "20: :ref:`PoolByteArray<class_poolbytearray>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:385
msgid "Array Length (Bytes)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:387
msgid "8..8+length"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:387
msgid "Byte"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:387
msgid "Byte (0..255)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:390
msgid "The array data is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:393
msgid "21: :ref:`PoolIntArray<class_poolintarray>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:398
msgid "Array Length (Integers)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:400
#: ../../docs/tutorials/misc/binary_serialization_api.rst:411
msgid "8..8+length\\*4"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:400
msgid "32 Bits Signed Integer"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:404
msgid "22: :ref:`PoolRealArray<class_poolrealarray>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:409
msgid "Array Length (Floats)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:411
msgid "32 Bits IEE 754 Float"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:415
msgid "23: :ref:`PoolStringArray<class_poolstringarray>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:420
msgid "Array Length (Strings)"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:423
msgid "For each String:"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:433
msgid "Every string is padded to 4 bytes."
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:436
msgid "24: :ref:`PoolVector2Array<class_poolvector2array>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:441
#: ../../docs/tutorials/misc/binary_serialization_api.rst:454
#: ../../docs/tutorials/misc/binary_serialization_api.rst:469
msgid "Array Length"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:443
msgid "8..8+length\\*8"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:445
msgid "8..12+length\\*8"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:449
msgid "25: :ref:`PoolVector3Array<class_poolvector3array>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:456
msgid "8..8+length\\*12"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:458
msgid "8..12+length\\*12"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:460
msgid "8..16+length\\*12"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:464
msgid "26: :ref:`PoolColorArray<class_poolcolorarray>`"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:471
msgid "8..8+length\\*16"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:473
msgid "8..12+length\\*16"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:475
msgid "8..16+length\\*16"
msgstr ""

#: ../../docs/tutorials/misc/binary_serialization_api.rst:477
msgid "8..20+length\\*16"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:4
msgid "Running code in the editor"
msgstr "에디터에서 코드 실행하기"

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:7
msgid "What is ``tool``?"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:9
msgid ""
"``tool`` is a powerful line of code that, when added at the top of your "
"script, makes it execute in the editor. You can also decide which parts of "
"the script execute in the editor, which in game, and which in both."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:11
msgid ""
"You can use it for doing many things, but it is mostly useful in level "
"design for visually presenting things that are hard to predict ourselves. "
"Here are some use cases:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:13
msgid ""
"If you have a cannon that shoots cannonballs affected by physics (gravity), "
"you can draw cannonball's trajectory in the editor, making level design a "
"lot easier."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:14
msgid ""
"If you have jumppads with varying jump heights, you can draw the maximum "
"jump height a player would reach if it jumped on one, also making level "
"design easier."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:15
msgid ""
"If your player doesn't use a sprite, but draws itself using code, you can "
"make that drawing code execute in the editor to see your player."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:18
msgid "How to use it"
msgstr "사용하는 법"

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:20
msgid ""
"To turn a script into a tool, add ``tool`` keyword at the top of your code."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:22
msgid ""
"To check if you are currently in the editor, use: ``Engine.editor_hint``."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:24
msgid "For example, if you want to execute some code only in editor, use:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:32
msgid ""
"On the other hand, if you want to execute code only in game, simply negate "
"previous expression:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:40
msgid ""
"Pieces of code that are not having any of the 2 conditions above will run "
"both in editor and in game."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:42
msgid "Here is how a ``_process()`` function might look like for you:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:56
msgid ""
"Modifications in editor are permanent. In our case, when we remove the "
"script, the node will keep its rotation direction. Be careful so that you "
"don't make unwanted modifications."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:59
msgid "Try it out"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:61
msgid ""
"Add a ``Sprite`` node to your scene and set the texture to Godot icon. "
"Attach and open a script, and change it to this:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:72
msgid ""
"Save the script and return to the editor. You should now see your object "
"rotate. If you run the game, it will also rotate."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:76
msgid ""
"If you don't see the changes, reload the scene (close it and open it again)."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:78
msgid ""
"Now let's choose which code runs when. Modify your ``_process()`` function "
"to look like this:"
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:89
msgid ""
"Save the script. Now the object will spin clockwise in the editor, but if "
"you run the game, it will spin counter-clockwise."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:91
msgid ""
"Code from other nodes doesn't run in the editor. Your access to other nodes "
"is limited. You can access the tree and nodes, and their default properties, "
"but you can't access user variables. If you want to do so, other nodes have "
"to run in the editor too. AutoLoad nodes cannot be accessed in the editor at "
"all."
msgstr ""

#: ../../docs/tutorials/misc/running_code_in_the_editor.rst:93
msgid ""
"Using ``tool`` improperly can yield many errors. It is advised to first "
"write the code how you want it, and only then add the ``tool`` keyword to "
"the top. Also make sure you divide your code into part that runs in editor "
"and part that runs in game. This way you can find your bug easier."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:4
#, fuzzy
msgid "Change scenes manually"
msgstr "수동으로 함수 만들기"

#: ../../docs/tutorials/misc/change_scenes_manually.rst:6
msgid ""
"Sometimes it helps to have more control over how one swaps scenes around. As "
"mentioned above, a :ref:`Viewport <class_Viewport>`'s child nodes will "
"render to the image it generates. This holds true even for nodes outside of "
"the \"current\" scene. Autoloads fall into this category, but so do scenes "
"which one instances and adds to the tree at runtime:"
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:38
msgid ""
"To complete the cycle and swap out the new scene with the old one, "
"developers have a choice to make. Many strategies exist for removing a scene "
"from view of the :ref:`Viewport <class_Viewport>`. The tradeoffs involve "
"balancing operation speed and memory consumption as well as balancing data "
"access and integrity."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:44
msgid ""
"**We can delete the existing scene.** :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` and :ref:`SceneTree.change_scene_to() "
"<class_SceneTree_method_change_scene_to>` will delete the current scene "
"immediately. Developers can also delete the main scene though. Assuming the "
"root node's name is \"Main\", one could do ``get_node(\"/root/Main\")."
"free()`` to delete the whole scene."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:51
msgid "Unloads memory."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:53
msgid "Pro: RAM is no longer dragging the dead weight."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:55
msgid ""
"Con: Returning to that scene is now more expensive since it must be loaded "
"back into memory again (takes time AND memory). Not a problem if returning "
"soon is unnecessary."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:59
msgid ""
"Con: No longer have access to that scene's data. Not a problem if using that "
"data soon is unnecessary."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:62
msgid ""
"Note: It can be useful to preserve the data in a soon-to-be-deleted scene by "
"re-attaching one or more of its nodes to a different scene, or even directly "
"to the :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:66
#, fuzzy
msgid "Processing stops."
msgstr "프로세싱(Processing)"

#: ../../docs/tutorials/misc/change_scenes_manually.rst:68
msgid ""
"Pro: No nodes means no process, physics process, or input handling. The CPU "
"is available to work on the new scene's contents."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:71
msgid ""
"Con: Those nodes' processing and input handling no longer operate. Not a "
"problem if using the updated data is unnecessary."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:74
msgid ""
"**We can hide the existing scene.** By changing the visibility or collision "
"detection of the nodes, we can hide the entire node sub-tree from the "
"player's perspective."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:78
msgid "Memory still exists."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:80
msgid "Pro: One can still access the data if need be."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:82
msgid "Pro: There's no need to move any more nodes around to save data."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:84
msgid ""
"Con: More data is being kept in memory which will be become a problem on "
"memory-sensitive platforms like web or mobile."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:87
#, fuzzy
msgid "Processing continues."
msgstr "프로세싱(Processing)"

#: ../../docs/tutorials/misc/change_scenes_manually.rst:89
msgid ""
"Pro: Data continues to receive processing updates, so the scene will keep "
"updated any data within it that relies on delta time or frame data."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:93
msgid ""
"Pro: Nodes are still members of groups (since groups belong to the :ref:"
"`SceneTree <class_SceneTree>`)."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:96
msgid ""
"Con: The CPU's attention is now divided between both scenes. Too much load "
"could result in low frame rates. One should be sure to test performance as "
"they go to ensure the target platform can support the load they are giving "
"it."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:101
msgid ""
"**We can remove the existing scene from the tree.** Assign a variable to the "
"existing scene's root node. Then use :ref:`Node.remove_child(Node) "
"<class_Node_method_remove_child>` to detach the entire scene from the tree."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:106
msgid "Memory still exists (similar pros/cons as with hiding it from view)."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:108
msgid "Processing stops (similar pros/cons as with deleting it completely)."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:110
msgid ""
"Pro: This variation of \"hiding\" it is much easier to show/hide. Rather "
"than potentially keeping track of multiple changes to the scene, one must "
"only call the one method add/remove_child pair of methods. It is similar to "
"disabling game objects in other engines."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:115
msgid ""
"Con: Unlike with hiding it from view only, the data contained within the "
"scene will become stale if it relies on delta time, input, groups, or other "
"data that is derived from :ref:`SceneTree <class_SceneTree>` access."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:120
msgid ""
"There are also cases where one may wish to have many scenes present at the "
"same time. Perhaps one is adding their own singleton at runtime, or "
"preserving a a scene's data between scene changes (adding the scene to the "
"root node)."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:133
msgid ""
"Perhaps instead they wish to display multiple scenes at the same time using "
"a :ref:`ViewportContainers <class_ViewportContainer>`. This is optimal in "
"cases where the intent is to render different content in different parts of "
"the screen. Minimaps and split-screen multiplayer are good examples."
msgstr ""

#: ../../docs/tutorials/misc/change_scenes_manually.rst:138
msgid ""
"Each option will have cases where it is best appropriate, so one must "
"examine the effects of each and determine what path best fits their unique "
"situation."
msgstr ""

#: ../../docs/tutorials/debug/index.rst:2
msgid "Debug"
msgstr "디버그"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:4
msgid "Overview of debugging tools"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:9
msgid ""
"When developing your game, you would want to test your game and debug when "
"problems occurred. Godot provides several debugging options and tools which "
"aid your debugging process."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:12
msgid "Debug options"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:14
msgid ""
"There are a few options that you can enable when running your game in the "
"editor which can help you in debugging your game. These options are located "
"in ``DEBUG`` in the main menus."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:19
msgid "Here are the descriptions of the options:"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:22
msgid "Deploy with Remote Debug"
msgstr "원격 디버그 배포"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:24
msgid ""
"When exporting and deploying, the resulting executable will attempt to "
"connect to the IP of your computer, in order to be debugged."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:27
msgid "Small Deploy with Network FS"
msgstr "네트워크 파일 시스템을 갖는 작은 배포"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:29
msgid ""
"Export or deploy will produce minimal executable. The filesystem will be "
"provided from the project by the editor over the network. On Android, deploy "
"will use the USB cable for faster performance. This option speeds up testing "
"for games with a large footprint."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:33
msgid "Visible Collision Shapes"
msgstr "충돌 모양 보이기"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:35
msgid ""
"Collision shapes and raycast nodes(for 2D and 3D) will be visible on the "
"running game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:38
msgid "Visible Navigation"
msgstr "네비게이션 보이기"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:40
msgid "Navigation meshes and polygons will be visible on the running game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:43
msgid "Sync Scene Changes"
msgstr "씬 변경사항 동기화"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:45
msgid ""
"Any changes made to the scene in the editor will be replicated in the "
"running game. When used remotely on a device, this is more efficient with "
"network filesystem."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:49
msgid "Sync Script Changes"
msgstr "스크립트 변경사항 동기화"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:51
msgid ""
"Any script that is saved will be reloaded on the running game. When used "
"remotely on a device, this is more efficient with network filesystem."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:55
msgid "Debugging tools"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:57
msgid ""
"The ``Debugger`` is the second option in the bottom panel. Click on it and a "
"new panel occurs."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:61
msgid "The ``Debugger`` provides certain tools under different tabs."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:63
msgid "Here are some brief descriptions of the tools:"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:66
msgid "Debugger"
msgstr "디버거"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:68
msgid "Monitor the game running process."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:71
msgid "Errors"
msgstr "에러"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:73
msgid "Print out errors when running the game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:76
msgid "Profiler"
msgstr "프로파일러"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:78
msgid "Profiling the performance of the any function call in the running game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:81
msgid "Monitors"
msgstr "모니터"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:83
msgid ""
"Monitors the performance of the running game, such as the fps and physics "
"collisions."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:86
msgid "Video Mem"
msgstr "비디오 메모리"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:88
msgid "Listing the video memory usage of the running game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:91
msgid "Misc"
msgstr "기타"

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:93
msgid "Miscellaneous options for debug."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:97
msgid "Remote in Scene dock"
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:99
msgid ""
"When running your game, a bar will occur at the top of the ``Scene`` dock. "
"You can switch to ``Remote`` and inspect or change the nodes' parameters in "
"the running game."
msgstr ""

#: ../../docs/tutorials/debug/overview_of_debugging_tools.rst:103
msgid ""
"Some editor settings related to debugging can be found inside the ``Editor "
"Settings``, under Network>Debug and Debugger sections."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:4
msgid "Getting the source"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:7
msgid "Downloading the Godot source code"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:9
msgid ""
"Before :ref:`getting into the SCons build system "
"<doc_introduction_to_the_buildsystem>` and compiling Godot, you need to "
"actually download the Godot source code."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:12
msgid ""
"The source code is available on `GitHub <https://github.com/godotengine/"
"godot>`__ and while you can manually download it via the website, in general "
"you want to do it via the ``git`` version control system."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:16
msgid ""
"If you don't know much about ``git`` yet, there are a great number of "
"`tutorials <https://git-scm.com/book>`__ available on various websites."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:19
msgid ""
"In general, you need to install ``git`` and/or one of the various GUI "
"clients."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:21
msgid ""
"Afterwards, to get the latest development version of the Godot source code "
"(the unstable ``master`` branch), you can use ``git clone``."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:24
msgid ""
"If you are using the ``git`` command line client, this is done by entering "
"the following in a terminal:"
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:31
msgid ""
"For any stable release, visit the `release page <https://github.com/"
"godotengine/godot/releases>`__ and click on the link for the release you "
"want. You can then download and extract the source from the download link on "
"the page."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:35
msgid ""
"There are also generally branches besides ``master`` for each major version."
msgstr ""

#: ../../docs/development/compiling/getting_source.rst:37
msgid ""
"After downloading the Godot source code, you can :ref:`continue to compiling "
"Godot <doc_introduction_to_the_buildsystem>`."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:4
msgid "Introduction to the buildsystem"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:9
msgid "SCons"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:11
msgid ""
"Godot uses `SCons <https://www.scons.org/>`__ to build. We love it, we are "
"not changing it for anything else. We are not even sure other build systems "
"are up to the task of building Godot. We constantly get requests to move the "
"build system to CMake, or Visual Studio, but this is not going to happen. "
"There are many reasons why we have chosen SCons over other alternatives, for "
"example:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:18
msgid ""
"Godot can be compiled for a dozen different platforms. All PC platforms, all "
"mobile platforms, many consoles, and many web-based platforms (such as HTML5 "
"and Chrome PNACL)."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:21
msgid ""
"Developers often need to compile for several of the platforms **at the same "
"time**, or even different targets of the same platform. They can't afford "
"reconfiguring and rebuilding the project each time. SCons can do this with "
"no sweat, without breaking the builds."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:25
msgid ""
"SCons will *never* break a build no matter how many changes, configurations, "
"additions, removals etc. You have more chances to die struck by lightning "
"than needing to clean and rebuild in SCons."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:28
msgid ""
"Godot build process is not simple. Several files are generated by code "
"(binders), others are parsed (shaders), and others need to offer "
"customization (plugins). This requires complex logic which is easier to "
"write in an actual programming language (like Python) rather than using a "
"mostly macro-based language only meant for building."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:33
msgid ""
"Godot build process makes heavy use of cross compiling tools. Each platform "
"has a specific detection process, and all these must be handled as specific "
"cases with special code written for each."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:37
msgid ""
"So, please try to keep an open mind and get at least a little familiar with "
"it if you are planning to build Godot yourself."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:43
msgid ""
"Please refer to the documentation for :ref:`doc_compiling_for_android`, :ref:"
"`doc_compiling_for_ios`, :ref:`doc_compiling_for_osx`, :ref:"
"`doc_compiling_for_uwp`, :ref:`doc_compiling_for_web`, :ref:"
"`doc_compiling_for_windows` and :ref:`doc_compiling_for_x11`."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:45
msgid ""
"Note that for **Windows/Visual Studio**, you need to use ``x86_x64 Cross "
"Tools Command Prompt for VS 2017`` or similar, depending on your install, "
"instead of the standard Windows command prompt to enter the commands below."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:48
msgid "Platform selection"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:50
msgid ""
"Godot's build system will begin by detecting the platforms it can build for. "
"If not detected, the platform will simply not appear on the list of "
"available platforms. The build requirements for each platform are described "
"in the rest of this tutorial section."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:55
msgid "SCons is invoked by just calling ``scons``."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:57
msgid ""
"However, this will do nothing except list the available platforms, for "
"example:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:78
msgid ""
"To build for a platform (for example, x11), run with the ``platform=`` (or "
"just ``p=`` to make it short) argument:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:85
msgid ""
"This will start the build process, which will take a while. If you want "
"scons to build faster, use the ``-j <cores>`` parameter to specify how many "
"cores will be used for the build. Or just leave it using one core, so you "
"can use your computer for something else :)"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:90
msgid "Example for using 4 cores:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:97
msgid "Resulting binary"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:99
msgid ""
"The resulting binaries will be placed in the bin/ subdirectory, generally "
"with this naming convention:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:106
msgid "For the previous build attempt the result would look like this:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:113
msgid ""
"This means that the binary is for X11, is not optimized, has tools (the "
"whole editor) compiled in, and is meant for 64 bits."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:116
msgid "A Windows binary with the same configuration will look like this."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:123
msgid ""
"Just copy that binary to wherever you like, as it contains the project "
"manager, editor and all means to execute the game. However, it lacks the "
"data to export it to the different platforms. For that the export templates "
"are needed (which can be either downloaded from `godotengine.org <https://"
"godotengine.org/>`__, or you can build them yourself)."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:129
msgid ""
"Aside from that, there are a few standard options that can be set in all "
"build targets, and which will be explained below."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:135
msgid ""
"Tools are enabled by default in all PC targets (Linux, Windows, macOS), "
"disabled for everything else. Disabling tools produces a binary that can run "
"projects but that does not include the editor or the project manager."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:145
msgid "Target"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:147
msgid "Target controls optimization and debug flags. Each mode means:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:149
msgid ""
"**debug**: Build with C++ debugging symbols, runtime checks (performs checks "
"and reports error) and none to little optimization."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:151
msgid ""
"**release_debug**: Build without C++ debugging symbols and optimization, but "
"keep the runtime checks (performs checks and reports errors). Official "
"binaries use this configuration."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:154
msgid ""
"**release**: Build without symbols, with optimization and with little to no "
"runtime checks. This target can't be used together with tools=yes, as the "
"tools require some debug functionality and run-time checks to run."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:163
msgid ""
"This flag appends the \".debug\" suffix (for debug), or \".tools\" (for "
"debug with tools enabled). When optimization is enabled (release) it appends "
"the \".opt\" suffix."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:168
msgid "Bits"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:170
msgid ""
"Bits is meant to control the CPU or OS version intended to run the binaries. "
"It is focused mostly on desktop platforms and ignored everywhere else."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:174
msgid "**32**: Build binaries for 32 bits platform."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:175
msgid "**64**: Build binaries for 64 bits platform."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:176
msgid ""
"**default**: Build whatever the build system feels is best. On Linux this "
"depends on the host platform (if not cross compiling), on Mac it defaults to "
"64 bits and on Windows it defaults to 32 bits."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:184
msgid ""
"This flag appends \".32\" or \".64\" suffixes to resulting binaries when "
"relevant."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:188
msgid "Other build options"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:190
msgid ""
"There are several other build options that you can use to configure the way "
"Godot should be built (compiler, debug options, etc.) as well as the "
"features to include/disable."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:194
msgid ""
"Check the output of ``scons --help`` for details about each option for the "
"version you are willing to compile."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:200
msgid ""
"Official export templates are downloaded from the Godot Engine site: "
"`godotengine.org <https://godotengine.org/>`__. However, you might want to "
"build them yourself (in case you want newer ones, you are using custom "
"modules, or simply don't trust your own shadow)."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:205
msgid ""
"If you download the official export templates package and unzip it, you will "
"notice that most are just optimized binaries or packages for each platform:"
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:228
msgid ""
"To create those yourself, just follow the instructions detailed for each "
"platform in this same tutorial section. Each platform explains how to create "
"its own template."
msgstr ""

#: ../../docs/development/compiling/introduction_to_the_buildsystem.rst:232
msgid ""
"If you are developing for multiple platforms, macOS is definitely the most "
"convenient host platform for cross compilation, since you can cross-compile "
"for almost every target (except for UWP). Linux and Windows come in second "
"place, but Linux has the advantage of being the easier platform to set this "
"up."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:4
msgid "Compiling for Windows"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:11
msgid "For compiling under Windows, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:13
msgid ""
"Visual C++, `Visual Studio Community <https://www.visualstudio.com/vs/"
"community/>`__ (recommended), version 2013 (12.0) or later. **Make sure you "
"read Installing Visual Studio caveats below or you will have to run/download "
"the installer again.**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:18
msgid "`Python 2.7+ or Python 3.5+ <https://www.python.org/downloads/>`__."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:19
msgid ""
"`Pywin32 Python Extension <https://github.com/mhammond/pywin32>`__ for "
"parallel builds (which increase the build speed by a great factor)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:21
msgid "`SCons <https://www.scons.org>`__ build system."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:23
#: ../../docs/development/compiling/compiling_for_x11.rst:27
#: ../../docs/development/compiling/compiling_for_osx.rst:19
#: ../../docs/development/compiling/compiling_for_android.rst:37
#: ../../docs/development/compiling/compiling_for_ios.rst:15
#: ../../docs/development/compiling/compiling_for_uwp.rst:20
#: ../../docs/development/compiling/compiling_for_web.rst:19
msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:27
msgid "Setting up SCons"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:29
msgid ""
"Python adds the interpreter (python.exe) to the path. It usually installs in "
"``C:\\Python`` (or ``C:\\Python[Version]``). SCons installs inside the "
"Python install (typically in the ``Scripts`` folder) and provides a batch "
"file called ``scons.bat``. The location of this file can be added to the "
"path or it can simply be copied to ``C:\\Python`` together with the "
"interpreter executable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:36
msgid ""
"To check whether you have installed Python and SCons correctly, you can type "
"``python --version`` and ``scons --version`` into the Windows Command Prompt "
"(``cmd.exe``)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:40
msgid ""
"If commands above do not work, make sure you add Python to your PATH "
"environment variable after installing it, and check again."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:44
msgid "Setting up Pywin32"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:46
msgid ""
"Pywin32 is required for parallel builds using multiple CPU cores. If SCons "
"is issuing a warning about Pywin32 after parsing SConstruct build "
"instructions, when beginning to build, you need to install it properly from "
"the correct installer executable for your Python version `located at Github. "
"<https://github.com/mhammond/pywin32/releases>`__"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:52
msgid ""
"For example, if you installed a 32-bit version of Python 2.7, you would want "
"to install the latest version of Pywin32 that is built for the mentioned "
"version of Python. That executable installer would be named ``pywin32-221."
"win32-py2.7.exe``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:56
msgid ""
"The ``amd64`` version of Pywin32 is for a 64-bit version of Python "
"``pywin32-221.win-amd64-py2.7.exe``. Change the ``py`` number to install for "
"your version of Python (check via ``python --version`` mentioned above)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:63
msgid "Installing Visual Studio caveats"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:65
msgid ""
"If installing Visual Studio 2015 or later, make sure to run **Custom** "
"installation, not **Typical** and select C++ as language there (and any "
"other things you might need). The installer does not install C++ by default. "
"C++ was the `only language made optional <https://blogs.msdn.microsoft.com/"
"vcblog/2015/07/24/setup-changes-in-visual-studio-2015-affecting-c-developers/"
">`__ in Visual Studio 2015."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:71
msgid ""
"If you have already made the mistake of installing a **Typical**, "
"installation, rerun the executable installer you downloaded from internet, "
"it will give you a **Modify** Button option. Running the install from Add/"
"Remove programs will only give you the \"Repair\" option, which will do "
"nothing for your problem."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:77
msgid ""
"If you're using Express, make sure you get/have a version that can compile "
"for ***C++, Desktop***."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:81
msgid "Downloading Godot's source"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:83
msgid ""
"`Godot's <https://github.com/godotengine/godot>`__ source is hosted on "
"GitHub. Downloading it (cloning) via `Git <https://git-scm.com/>`__ is "
"recommended."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:86
msgid ""
"The tutorial will presume from now on that you placed the source into ``C:"
"\\godot``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:92
msgid ""
"SCons will not be able out of the box to compile from the Windows Command "
"Prompt (``cmd.exe``) because SCons and Visual C++ compiler will not be able "
"to locate environment variables and executables they need for compilation."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:97
msgid ""
"Therefore, you need to start a Visual Studio command prompt. It sets up "
"environment variables needed by SCons to locate the compiler. It should be "
"called similar to one of the below names (for your respective version of "
"Visual Studio):"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:102
msgid "\"Developer Command Prompt for VS2013\""
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:103
msgid "\"VS2013 x64 Native Tools Command Prompt\""
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:104
msgid "\"VS2013 x86 Native Tools Command Prompt\""
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:105
msgid "\"VS2013 x64 Cross Tools Command Prompt\""
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:106
msgid "\"VS2013 x86 Cross Tools Command Prompt\""
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:108
msgid ""
"You should be able to find at least the Developer Command Prompt for your "
"version of Visual Studio in your start menu."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:111
msgid ""
"However Visual Studio sometimes seems to not install some of the above "
"shortcuts, except the Developer Console at these locations that are "
"automatically searched by the start menu search option:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:121
msgid ""
"If you found the Developer Console, it will do for now to create a 32-bit "
"version of Godot, but if you want the 64-bit version, you might need to "
"setup the prompts manually for easy access."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:125
msgid ""
"If you don't see some of the shortcuts, \"How the prompts actually work\" "
"section below will explain how to setup these prompts if you need them."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:129
msgid "About the Developer/Tools Command Prompts and the Visual C++ compiler"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:131
msgid ""
"There is a few things you need to know about these consoles and the Visual C+"
"+ compiler."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:134
msgid ""
"Your Visual Studio installation will ship with several Visual C++ compilers, "
"them being more or less identical, however each ``cl.exe`` (Visual C++ "
"compiler) will compile Godot for a different architecture (32-bit x86 or 64-"
"bit x86; the ARM compiler is not supported)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:139
msgid ""
"The **Developer Command Prompt** will build a 32-bit version of Godot by "
"using the 32-bit Visual C++ compiler."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:142
msgid ""
"**Native Tools** Prompts (mentioned above) are used when you want the 32-bit "
"cl.exe to compile a 32-bit executable (x86 Native Tools Command Prompt). For "
"the 64-bit cl.exe, it will compile a 64-bit executable (x64 Native Tools "
"Command Prompt)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:147
msgid ""
"The **Cross Tools** are used when your Windows is using one architecture (32-"
"bit, for example) and you need to compile to a different architecture (64-"
"bit). As you might be familiar, 32-bit Windows can not run 64-bit "
"executables, but you still might need to compile for them."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:152
#: ../../docs/development/cpp/object_class.rst:134
msgid "For example:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:154
msgid ""
"\"VS2013 x64 Cross Tools Command Prompt\" will use a 32-bit cl.exe that will "
"compile a 64 bit application."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:157
msgid ""
"\"VS2013 x86 Cross Tools Command Prompt\" will use a 64-bit cl.exe that will "
"compile a 32-bit application. This one is useful if you are running a 32-bit "
"Windows."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:161
msgid ""
"On a 64-bit Windows, you can run any of above prompts and compilers (``cl."
"exe`` executables) because 64-bit Windows can run any 32-bit application. 32-"
"bit Windows cannot run 64-bit executables, so the Visual Studio installer "
"won't even install shortcuts for some of these prompts."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:167
msgid ""
"Note that you need to choose the **Developer Console** or the correct "
"**Tools Prompt** to build Godot for the correct architecture. Use only "
"Native Prompts if you are not sure yet what exactly Cross Compile Prompts do."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:173
msgid "Running SCons"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:175
msgid ""
"Once inside the **Developer Console/Tools Console Prompt**, go to the root "
"directory of the engine source code and type:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:182
msgid ""
"Tip: if you installed \"Pywin32 Python Extension\" you can append the -j "
"command to instruct SCons to run parallel builds like this:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:189
msgid ""
"In general, it is OK to have at least as many threads compiling Godot as you "
"have cores in your CPU, if not one or two more. Feel free to add the -j "
"option to any SCons command you see below if you setup the \"Pywin32 Python "
"Extension\"."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:194
msgid ""
"If all goes well, the resulting binary executable will be placed in ``C:"
"\\godot\\bin\\`` with the name of ``godot.windows.tools.32.exe`` or ``godot."
"windows.tools.64.exe``. SCons will automatically detect what compiler "
"architecture the environment (the prompt) is setup for and will build a "
"corresponding executable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:200
msgid ""
"This executable file contains the whole engine and runs without any "
"dependencies. Executing it will bring up the Project Manager."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:203
#: ../../docs/development/compiling/compiling_for_x11.rst:111
msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons option "
"``target=release_debug``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:208
msgid "How the prompts actually work"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:210
msgid ""
"The Visual Studio command prompts are just shortcuts that call the standard "
"Command Prompt and have it run a batch file before giving  you control. The "
"batch file itself is called **vcvarsall.bat** and it sets up environment "
"variables, including the PATH variable, so that the correct version of the "
"compiler can be run. The Developer Command Prompt calls a different file "
"called **VsDevCmd.bat** but none of the other tools that this batch file "
"enables are needed by Godot/SCons."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:218
msgid ""
"Since you are probably using Visual Studio 2013 or 2015, if you need to "
"recreate them manually, use the below folders, or place them on the desktop/"
"taskbar:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:227
msgid ""
"Start the creation of the shortcut by pressing the ``right mouse button/New/"
"Shortcut`` in an empty place in your desired location."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:230
msgid ""
"Then copy one of these commands below for the corresponding tool you need "
"into the \"Path\" and \"Name\" sections of the shortcut creation wizard, and "
"fix the path to the batch file if needed."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:234
msgid "Visual Studio 2013 is in the \"Microsoft Visual Studio 12.0\" folder."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:235
msgid "Visual Studio 2015 is in the \"Microsoft Visual Studio 14.0\" folder."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:236
msgid "etc."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:255
msgid ""
"After you create the shortcut, in the shortcut's properties, that you can "
"access by right clicking with your mouse on the shortcut itself, you can "
"choose the starting directory of the command prompt (\"Start in\" field)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:260
msgid ""
"Some of these shortcuts (namely the 64-bit compilers) seem to not be "
"available in the Express edition of Visual Studio or Visual C++. Before "
"recreating the commands, make sure that ``cl.exe`` executables are present "
"in one of these locations, they are the actual compilers for the "
"architecture you want to build from the command prompt."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:281
msgid ""
"In case you are wondering what these prompt shortcuts do, they call ``cmd."
"exe`` with the ``\\k`` option and have it run a Batch file."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:293
msgid "How to run an automated build of Godot"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:295
msgid ""
"If you just need to run the compilation process via a Batch file or directly "
"in the Windows Command Prompt you need to use the following command:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:303
msgid "with one of the following parameters:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:305
msgid "x86 (32-bit cl.exe to compile for the 32-bit architecture)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:306
msgid "amd64 (64-bit cl.exe to compile for the 64-bit architecture)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:307
msgid "x86_amd64 (32-bit cl.exe to compile for the 64-bit architecture)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:308
msgid "amd64_x86 (64-bit cl.exe to compile for the 32-bit architecture)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:310
msgid "and after that one, you can run SCons:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:316
msgid "or you can run them together:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:327
msgid "Development in Visual Studio or other IDEs"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:329
msgid ""
"For most projects, using only scripting is enough but when development in C+"
"+ is needed, for creating modules or extending the engine, working with an "
"IDE is usually desirable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:333
msgid ""
"You can create a Visual Studio solution via SCons by running SCons with the "
"``vsproj=yes`` parameter, like this:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:340
msgid ""
"You will be able to open Godot's source in a Visual Studio solution now, and "
"able to build Godot via the Visual Studio **Build** button. However, make "
"sure that you have installed Pywin32 so that parallel (-j) builds work "
"properly."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:345
msgid ""
"If you need to edit the compilation commands, they are located in \"Godot\" "
"project settings, NMAKE sheet. SCons is called at the end of the commands. "
"If you make a mistake, copy the command from one of the other build "
"configurations (debug, release_debug, release) or architectures (Win32/x64). "
"They are equivalent."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:352
msgid "Cross-compiling for Windows from other operating systems"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:354
msgid ""
"If you are a Linux or macOS user, you need to install `MinGW-w64 <https://"
"mingw-w64.org/doku.php>`_, which typically comes in 32-bit and 64-bit "
"variants. The package names may differ based on your distro, here are some "
"known ones:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:359
#: ../../docs/development/compiling/compiling_for_x11.rst:33
msgid "**Arch**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:363
#: ../../docs/development/compiling/compiling_for_x11.rst:37
msgid "**Debian** / **Ubuntu**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:367
#: ../../docs/development/compiling/compiling_for_x11.rst:43
msgid "**Fedora**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:371
msgid "**macOS**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:375
#: ../../docs/development/compiling/compiling_for_x11.rst:60
msgid "**Mageia**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:380
msgid ""
"Before allowing you to attempt the compilation, SCons will check for the "
"following binaries in your ``$PATH``:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:388
msgid ""
"If the binaries are not located in the ``$PATH`` (e.g. ``/usr/bin``), you "
"can define the following environment variables to give a hint to the build "
"system:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:397
msgid ""
"To make sure you are doing things correctly, executing the following in the "
"shell should result in a working compiler (the version output may differ "
"based on your system):"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:407
#: ../../docs/development/compiling/compiling_for_android.rst:181
#: ../../docs/development/cpp/creating_android_modules.rst:335
msgid "Troubleshooting"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:409
msgid ""
"Cross-compiling from some versions of Ubuntu may lead to `this bug <https://"
"github.com/godotengine/godot/issues/9258>`_, due to a default configuration "
"lacking support for POSIX threading."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:412
msgid ""
"You can change that configuration following those instructions, for 32-bit:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:422
msgid "And for 64-bit:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:432
msgid "Creating Windows export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:434
msgid ""
"Windows export templates are created by compiling Godot as release, with the "
"following flags:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:437
msgid "(using Mingw32 command prompt, using the bits parameter)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:444
msgid "(using Mingw-w64 command prompt, using the bits parameter)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:451
msgid ""
"(using the Visual Studio command prompts for the correct architecture, "
"notice the lack of bits parameter)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:459
msgid "If you plan on replacing the standard templates, copy these to:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:465
msgid "With the following names:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:474
#: ../../docs/development/compiling/compiling_for_x11.rst:153
msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:480
msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin\\`` directory of your Godot source folder, so the next time you "
"build you automatically have the custom templates referenced."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:4
msgid "Compiling for X11 (Linux, \\*BSD)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:11
#: ../../docs/development/compiling/compiling_for_osx.rst:11
msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:14
msgid "GCC or Clang"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:15
msgid "Python 2.7+ (Python 3 only supported as of SCons 3.0)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:16
#: ../../docs/development/compiling/compiling_for_osx.rst:15
msgid "SCons build system"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:17
msgid "pkg-config (used to detect the dependencies below)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:18
msgid "X11, Xcursor, Xinerama, Xi and XRandR development libraries"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:19
msgid "MesaGL development libraries"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:20
msgid "ALSA development libraries"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:21
msgid "PulseAudio development libraries (for sound support)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:22
msgid "Freetype (for the editor)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:23
msgid "OpenSSL (for HTTPS and TLS)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:24
msgid "*Optional* - libudev (build with ``udev=yes``)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:25
#: ../../docs/development/compiling/compiling_for_osx.rst:17
msgid "*Optional* - yasm (for WebM SIMD optimizations)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:31
msgid "Distro-specific oneliners"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:49
msgid "**FreeBSD**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:54
msgid "**Gentoo**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:66
msgid "**OpenBSD**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:70
msgid "**openSUSE**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:76
msgid "**Solus**"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:85
#: ../../docs/development/compiling/compiling_for_osx.rst:25
msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:91
msgid ""
"A good rule of thumb for the ``-j`` (*jobs*) flag, is to have at least as "
"many threads compiling Godot as you have cores in your CPU, if not one or "
"two more. Feel free to add the ``-j`` option to any SCons command you see "
"below."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:95
#: ../../docs/development/compiling/compiling_for_osx.rst:31
msgid ""
"If all goes well, the resulting binary executable will be placed in the \"bin"
"\" subdirectory. This executable file contains the whole engine and runs "
"without any dependencies. Executing it will bring up the project manager."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:102
msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:108
msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:116
#: ../../docs/development/compiling/compiling_for_web.rst:23
msgid "Building export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:118
msgid ""
"To build X11 (Linux, \\*BSD) export templates, run the build system with the "
"following parameters:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:121
msgid "(32 bits)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:128
msgid "(64 bits)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:135
msgid ""
"Note that cross compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:138
msgid ""
"To create standard export templates, the resulting files must be copied to:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:144
msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux X11\" by "
"Godot):"
msgstr ""

#: ../../docs/development/compiling/compiling_for_x11.rst:159
msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the bin/ directory of your Godot source folder, so the next time you "
"build you automatically have the custom templates referenced."
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:4
msgid "Compiling for macOS"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:14
msgid "Python 2.7+ or Python 3.5+"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:16
msgid "Xcode (or the more lightweight Command Line Tools for Xcode)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:36
msgid ""
"To create an .app like in the official builds, you need to use the template "
"located in ``misc/dist/osx_tools.app``. Typically, for a \".64\" optimised "
"binary built with `scons p=osx target=release_debug`:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:48
msgid "Compiling for 32 and 64-bit"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:50
msgid ""
"All macOS versions after 10.6 are 64-bit exclusive, so the executable will "
"be a \".64\" file by default for most users. If you would like to compile a "
"\".fat\" executable which contains both 32 and 64-bit code, you can do so by "
"specifying the bits in the scons command like so:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:60
msgid "Cross-compiling"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:62
msgid ""
"It is possible to compile for macOS in a Linux environment (and maybe also "
"in Windows with Cygwin). For that you will need `OSXCross <https://github."
"com/tpoechtrager/osxcross>`__ to be able to use macOS as target. First, "
"follow the instructions to install it:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:67
msgid ""
"Clone the `OSXCross repository <https://github.com/tpoechtrager/osxcross>` "
"somewhere on your machine (or download a zip file and extract it somewhere), "
"e.g.:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:75
msgid ""
"Follow the instructions to package the SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:77
msgid ""
"Follow the instructions to install OSXCross: https://github.com/tpoechtrager/"
"osxcross#installation"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:80
msgid ""
"After that, you will need to define the ``OSXCROSS_ROOT`` as the path to the "
"OSXCross installation (the same place where you cloned the repository/"
"extracted the zip), e.g.:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:88
msgid "Now you can compile with SCons like you normally would:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_osx.rst:94
msgid ""
"If you have an OSXCross SDK version different from the one expected by the "
"SCons buildsystem, you can specify a custom one with the ``osxcross_sdk`` "
"argument:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:4
msgid "Compiling for Android"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:9
msgid "Note"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:11
msgid ""
"In most cases, using the built-in deployer and export templates is good "
"enough. Compiling the Android APK manually is mostly useful for custom "
"builds or custom packages for the deployer."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:15
msgid ""
"Also, you still need to follow the steps mentioned in the :ref:"
"`doc_exporting_for_android` tutorial before attempting to build a custom "
"export template."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:22
msgid "For compiling under Windows, Linux or macOS, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:24
msgid "`Python 2.7+ or Python 3.5+ <https://www.python.org/downloads/>`_"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:25
msgid "`SCons <https://scons.org/pages/download.html>`_ build system"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:26
#, fuzzy
msgid ""
"`Android SDK <https://developer.android.com/studio/#command-tools>`_ "
"(command-line tools are sufficient)"
msgstr "안드로이드 SDK: https://developer.android.com/studio/"

#: ../../docs/development/compiling/compiling_for_android.rst:28
msgid ""
"Required SDK components will be automatically installed by Gradle (except "
"the NDK)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:30
#, fuzzy
msgid ""
"`Android NDK <https://developer.android.com/ndk/downloads/>`_ r17 or later"
msgstr "안드로이드 SDK: https://developer.android.com/studio/"

#: ../../docs/development/compiling/compiling_for_android.rst:31
msgid "Gradle (will be downloaded and installed automatically if missing)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:32
msgid "JDK 8 (either OpenJDK or Oracle JDK)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:34
msgid "JDK 9 or later are not currently supported"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:35
msgid ""
"You can download a build from `ojdkbuild <https://github.com/ojdkbuild/"
"ojdkbuild>`_"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:41
msgid "Setting up the buildsystem"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:43
msgid ""
"Set the environment variable ``ANDROID_HOME`` to point to the Android SDK. "
"If you downloaded the Android command-line tools, this would be the folder "
"where you extracted the contents of the ZIP archive. Later on, ``gradlew`` "
"will install necessary SDK components in this folder. However, you need to "
"accept the SDK component licenses before they can be downloaded by Gradle. "
"This can be done by running the following command from the root of the SDK "
"directory, then answering all the prompts with ``y``:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:57
msgid ""
"Set the environment variable ``ANDROID_NDK_ROOT`` to point to the Android "
"NDK. You also might need to set the variable ``ANDROID_NDK_HOME`` to the "
"same path, especially if you are using custom Android modules, since some "
"Gradle plugins rely on the NDK and use this variable to determine its "
"location."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:63
msgid ""
"To set those environment variables on Windows, press **Windows + R**, type "
"\"control system\", then click on **Advanced system settings** in the left "
"pane, then click on **Environment variables** on the window that appears."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:68
msgid ""
"To set those environment variables on Linux or macOS, use ``export "
"ANDROID_HOME=/path/to/android-sdk`` and ``export ANDROID_NDK_ROOT=/path/to/"
"android-ndk`` where ``/path/to/android-sdk`` and ``/path/to/android-ndk`` "
"point to the root of the SDK and NDK directories."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:75
msgid "Building the export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:77
msgid ""
"Godot needs two export templates for Android: the optimized \"release\" "
"template (``android_release.apk``) and the debug template (``android_debug."
"apk``). As Google will require all APKs to include ARMv8 (64-bit) libraries "
"starting from August 2019, the commands below will build an APK containing "
"both ARMv7 and ARMv8 libraries."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:83
msgid ""
"Compiling the standard export templates is done by calling SCons with the "
"following arguments:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:86
msgid ""
"Release template (used when exporting with **Debugging Enabled** unchecked)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:99
msgid "The resulting APK will be located at ``bin/android_release.apk``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:101
msgid "Debug template (used when exporting with **Debugging Enabled** checked)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:114
msgid "The resulting APK will be located at ``bin/android_debug.apk``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:117
msgid "Adding support for x86 devices"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:119
msgid ""
"If you also want to include support for x86 devices, run the SCons command a "
"third time with the ``android_arch=x86`` argument before building the APK "
"with Gradle. For example, for the release template:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:135
msgid ""
"This will create a fat binary that works on all platforms. The final APK "
"size of exported projects will depend on the platforms you choose to support "
"when exporting; in other words, unused platforms will be removed from the "
"APK."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:141
msgid "Using the export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:143
msgid ""
"Godot needs release and debug APKs that were compiled against the same "
"version/commit as the editor. If you are using official binaries for the "
"editor, make sure to install the matching export templates, or build your "
"own from the same version."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:148
msgid ""
"When exporting your game, Godot opens the APK, changes a few things inside "
"and adds your files."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:152
msgid "Installing the templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:154
msgid ""
"The newly-compiled templates (``android_debug.apk`` and ``android_release."
"apk``) must be copied to Godot's templates folder with their respective "
"names. The templates folder can be located in:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:158
msgid "Windows: ``%APPDATA%\\Godot\\templates\\<version>\\``"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:159
msgid "Linux: ``$HOME/.local/share/godot/templates/<version>/``"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:160
msgid "macOS: ``$HOME/Library/Application Support/Godot/templates/<version>/``"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:162
msgid ""
"``<version>`` is of the form ``major.minor[.patch].status`` using values "
"from ``version.py`` in your Godot source repository (e.g. ``3.0.5.stable`` "
"or ``3.1.dev``). You also need to write this same version string to a "
"``version.txt`` file located next to your export templates."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:169
msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your APKs as custom export templates here:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:175
msgid ""
"You don't even need to copy them, you can just reference the resulting file "
"in the ``bin\\`` directory of your Godot source folder, so that the next "
"time you build you will automatically have the custom templates referenced."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:184
msgid "Application not installed"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:186
msgid ""
"Android might complain the application is not correctly installed. If so:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:189
msgid "Check that the debug keystore is properly generated."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:190
msgid "Check that the jarsigner executable is from JDK 8."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:192
msgid ""
"If it still fails, open a command line and run `logcat <https://developer."
"android.com/studio/command-line/logcat>`_:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:198
msgid ""
"Then check the output while the application is installed; the error message "
"should be presented there. Seek assistance if you can't figure it out."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:203
msgid "Application exits immediately"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:205
msgid ""
"If the application runs but exits immediately, this might be due to one of "
"the following reasons:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:208
msgid ""
"Make sure to use export templates that match your editor version; if you use "
"a new Godot version, you *have* to update the templates too."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:210
msgid ""
"``libgodot_android.so`` is not in ``libs/<android_arch>/`` where "
"``<android_arch>`` is the device's architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:212
msgid ""
"The device's architecture does not match the exported one(s). Make sure your "
"templates were built for that device's architecture, and that the export "
"settings included support for that architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_for_android.rst:216
msgid "In any case, ``adb logcat`` should also show the cause of the error."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:4
msgid "Compiling for iOS"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:11
msgid ""
"SCons (you can get it from macports, you should be able to run ``scons`` in "
"a terminal when installed)"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:13
msgid "Xcode with the iOS SDK and the command line tools."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:21
msgid "Open a Terminal, go to the root dir of the engine source code and type:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:27
msgid "for a debug build, or:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:33
msgid ""
"for a release build (check ``platform/iphone/detect.py`` for the compiler "
"flags used for each configuration)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:36
msgid "Alternatively, you can run"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:42
msgid "for a Simulator executable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:44
msgid ""
"Additionally since some time Apple requires 64 bit version of application "
"binary when you are uploading to iStore. The best way to provide these is to "
"create a bundle in which there are both 32bit and 64 binaries, so every "
"device will be able to run the game. It can be done in three steps, first "
"compile 32 bit version, then compile 64 bit version and then use ``lipo`` to "
"bundle them into one fat binary, all those steps can be performed with "
"following commands:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:56
msgid "Run"
msgstr "실행"

#: ../../docs/development/compiling/compiling_for_ios.rst:58
msgid ""
"To run on a device or simulator, follow these instructions: :ref:"
"`doc_exporting_for_ios`."
msgstr ""

#: ../../docs/development/compiling/compiling_for_ios.rst:61
msgid ""
"Replace or add your executable to the Xcode project, and change the "
"\"executable name\" property on Info.plist accordingly if you use an "
"alternative build."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:4
msgid "Cross-compiling for iOS on Linux"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:8
msgid ""
"The procedure for this is somewhat complex and requires a lot of steps, but "
"once you have the environment properly configured it will be easy to compile "
"Godot for iOS anytime you want."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:13
msgid "Disclaimer"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:15
msgid ""
"While it is possible to compile for iOS on a Linux environment, Apple is "
"very restrictive about the tools to be used (especially hardware-wise), "
"allowing pretty much only their products to be used for development. So this "
"is **not official**. However, a `statement from Apple in 2010 <http://www."
"apple.com/pr/library/2010/09/09Statement-by-Apple-on-App-Store-Review-"
"Guidelines.html>`__ says they relaxed some of the `App Store review "
"guidelines <https://developer.apple.com/app-store/review/guidelines/>`__ to "
"allow any tool to be used, as long as the resulting binary does not download "
"any code, which means it should be OK to use the procedure described here "
"and cross-compiling the binary."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:29
msgid ""
"`XCode with the iOS SDK <https://developer.apple.com/xcode/download>`__ (a "
"dmg image)"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:31
msgid ""
"`Clang >= 3.5 <http://clang.llvm.org>`__ for your development machine "
"installed and in the ``PATH``. It has to be version >= 3.5 to target "
"``arm64`` architecture."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:34
msgid ""
"`Fuse <https://github.com/libfuse/libfuse>`__ for mounting and umounting the "
"dmg image."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:36
msgid ""
"`darling-dmg <https://github.com/darlinghq/darling-dmg>`__, which needs to "
"be built from source. The procedure for that is explained below."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:40
msgid ""
"For building darling-dmg, you'll need the development packages of the "
"following libraries: fuse, icu, openssl, zlib, bzip2."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:43
msgid ""
"`cctools-port <https://github.com/tpoechtrager/cctools-port>`__ for the "
"needed build tools. The procedure for building is quite peculiar and is "
"described below."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:47
msgid "This also has some extra dependencies: automake, autogen, libtool."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:50
msgid "Configuring the environment"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:53
msgid "darling-dmg"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:55
msgid "Clone the repository on your machine:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:61
msgid "Build it:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:73
msgid "Preparing the SDK"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:75
msgid "Mount the XCode image:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:84
msgid "Extract the iOS SDK:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:93
msgid "Pack the SDK:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:101
msgid "Toolchain"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:103
msgid "Build cctools:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:111
msgid ""
"Copy the tools to a nicer place. Note that the SCons scripts for building "
"will look under ``usr/bin`` inside the directory you provide for the "
"toolchain binaries, so you must copy to such subdirectory, akin to the "
"following commands:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:121
msgid ""
"Now you should have the iOS toolchain binaries in ``/home/user/iostoolchain/"
"usr/bin``."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:125
msgid "Compiling Godot for iPhone"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:127
msgid ""
"Once you've done the above steps, you should keep two things in your "
"environment: the built toolchain and the iPhoneOS SDK directory. Those can "
"stay anywhere you want since you have to provide their paths to the SCons "
"build command."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:132
msgid ""
"For the iPhone platform to be detected, you need the ``OSXCROSS_IOS`` "
"environment variable defined to anything."
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:139
msgid ""
"Now you can compile for iPhone using SCons like the standard Godot way, with "
"some additional arguments to provide the correct paths:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:148
msgid "Producing fat binaries"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:150
msgid ""
"Apple requires a fat binary with both architectures (``armv7`` and "
"``arm64``) in a single file. To do this, use the ``arm-apple-darwin11-lipo`` "
"executable. The following example assumes you are in the root Godot source "
"directory:"
msgstr ""

#: ../../docs/development/compiling/cross-compiling_for_ios_on_linux.rst:159
msgid ""
"Then you will have an iOS fat binary in ``bin/godot.iphone.opt.debug.fat``."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:4
msgid "Compiling for Universal Windows Platform"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:11
msgid "SCons (see :ref:`doc_compiling_for_windows` for more details)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:12
msgid ""
"Visual Studio 2015 Update 2. It may work with earlier versions. See :ref:"
"`doc_compiling_for_windows` about the caveats of installing it and the "
"various prompts."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:15
msgid "Windows 10 SDK (can be selected in Visual Studio installation)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:16
msgid ""
"`ANGLE source <https://github.com/Microsoft/angle>`__. Use the ``ms_master`` "
"(default) branch. Keep it in a path without spaces to avoid problems."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:26
msgid ""
"You need to open a proper Visual Studio prompt for the target architecture "
"you want to build. Check :ref:`doc_compiling_for_windows` to see how these "
"prompts work."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:30
msgid ""
"There are three target architectures for UWP: x86 (32-bits), x64 (64-bits) "
"and ARM (32-bits). For the latter, you can run ``vcvarsall.bat`` with "
"``x86_arm`` or ``amd64_arm`` as argument to set the environment."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:34
msgid ""
"Set the ``ANGLE_SRC_PATH`` to the directory where you downloaded the ANGLE "
"source code. The build process will also build ANGLE to produce the required "
"DLLs for the selected architecture."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:38
msgid ""
"Once you're set, run the SCons command similarly to the other platforms::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:43
msgid "Creating UWP export templates"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:45
msgid ""
"To export using the editor you need to properly build package the templates. "
"You need all three architectures with ``debug`` and ``release`` templates to "
"be able to export."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:49
msgid ""
"Open the command prompt for one architecture and run SCons twice (once for "
"each target)::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:55
msgid "Repeat for the other architectures."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:57
msgid ""
"In the end your ``bin`` folder will have the ``.exe`` binaries with a name "
"like ``godot.uwp.opt.debug.32.x86.exe`` (with variations for each target/"
"arch)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:61
msgid ""
"Copy one of these to ``misc/dist/uwp_template`` inside the Godot source "
"folder and rename the binary to ``godot.uwp.exe``. From the ANGLE source, "
"under ``winrt/10/src/Release_%arch%`` (where ``%arch%`` can be ``Win32``, "
"``x64`` or ``ARM``), get the ``libEGL.dll`` and the ``libGLESv2.dll``, "
"putting them along with the executable."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:67
msgid ""
"Add the files in the ``uwp_template`` folder to a ZIP. Rename the resulting "
"Zip according to the target/architecture of the template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:77
msgid ""
"Move those templates to the ``[versionstring]\\templates`` folder in Godot "
"settings path, where `versionstring` is the version of Godot you have "
"compiled the export templates for - e.g. `3.0.alpha` for the alpha version "
"of Godot 3. If you don't want to replace the templates, you can set the "
"\"Custom Package\" property in the export window."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:84
msgid "Running UWP apps with Visual Studio"
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:86
msgid ""
"If you want to debug the UWP port or simply run your apps without packaging "
"and signing, you can deploy and launch them using Visual Studio. It might be "
"the easiest way if you are testing on a device such as a Windows Phone or an "
"Xbox One."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:91
msgid ""
"Within the ANGLE source folder, open ``templates`` and double-click the "
"``install.bat`` script file. This will install the Visual Studio project "
"templates for ANGLE apps."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:95
msgid ""
"If you have not built Godot yet, open the ``winrt/10/src/angle.sln`` "
"solution from the ANGLE source and build it to Release/Win32 target. You may "
"also need to build it for ARM if you plan to run on a device. You can also "
"use MSBuild if you're comfortable with the command line."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:100
msgid ""
"Create a new Windows App project using the \"App for OpenGL ES (Windows "
"Universal)\" project template, which can be found under the ``Visual C++/"
"Windows/Universal`` category."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:104
msgid ""
"This is a base project with the ANGLE dependencies already set up. However, "
"by default it picks the debug version of the DLLs which usually have poor "
"performance. So in the \"Binaries\" filter, click in each of the DLLs there "
"and in the \"Properties\" window and change the relative path from "
"``Debug_Win32`` to ``Release_Win32`` (or ``Release_ARM`` for devices)."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:110
msgid ""
"In the same \"Binaries\" filter, select \"Add > Existing Item\" and point to "
"the Godot executable for UWP you have. In the \"Properties\" window, set "
"\"Content\" to ``True`` so it's included in the project."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:114
msgid ""
"Right-click the ``Package.appxmanifest`` file and select \"Open With... > "
"XML (Text) Editor\". In the ``Package/Applications/Application`` element, "
"replace the ``Executable`` attribute from ``$targetnametoken$.exe`` to "
"``godot.uwp.exe`` (or whatever your Godot executable is called). Also change "
"the ``EntryPoint`` attribute to ``GodotUWP.App``. This will ensure that the "
"Godot executable is correctly called when the app starts."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:121
msgid ""
"Create a folder (*not* a filter) called ``game`` in your Visual Studio "
"project folder and there you can put either a ``data.pck`` file or your "
"Godot project files. After that, make sure to include it all with the \"Add "
"> Existing Item\" command and set their \"Content\" property to ``True`` so "
"they're copied to the app."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:127
msgid ""
"To ease the workflow, you can open the \"Solution Properties\" and in the "
"\"Configuration\" section untick the \"Build\" option for the app. You still "
"have to build it at least once to generate some needed files, you can do so "
"by right-clicking the project (*not* the solution) in the \"Solution Explorer"
"\" and selecting \"Build\"."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:133
msgid ""
"Now you can just run the project and your app should open. You can use also "
"the \"Start Without Debugging\" from the \"Debug\" menu (Ctrl+F5) to make it "
"launch faster."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:4
msgid "Compiling for the Web"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:11
msgid "To compile export templates for the Web, the following is required:"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:13
msgid ""
"`Emscripten 1.37.9+ <http://kripken.github.io/emscripten-site>`__: If the "
"version available per package manager is not recent enough, the best "
"alternative is to install using the `Emscripten SDK <http://kripken.github."
"io/emscripten-site/docs/getting_started/downloads.html>`__"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:16
msgid "`Python 2.7+ or Python 3.5+ <https://www.python.org/>`__"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:17
msgid "`SCons <https://www.scons.org>`__ build system"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:25
msgid ""
"Before starting, confirm that the Emscripten configuration file exists and "
"specifies all settings correctly. This file is available as ``~/."
"emscripten`` on UNIX-like systems and ``%USERPROFILE%\\.emscripten`` on "
"Windows. It's usually written by the Emscripten SDK, e.g. when invoking "
"``emsdk activate latest``, or by your package manager. It's also created "
"when starting Emscripten's ``emcc`` program if the file doesn't exist."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:32
msgid ""
"Open a terminal and navigate to the root directory of the engine source "
"code. Then instruct SCons to build the JavaScript platform. Specify "
"``target`` as either ``release`` for a release build or ``release_debug`` "
"for a debug build::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:39
msgid ""
"By default, the :ref:`JavaScript singleton <doc_javascript_eval>` will be "
"built into the engine. Since ``eval()`` calls can be a security concern, the "
"``javascript_eval`` option can be used to build without the singleton::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:46
msgid ""
"The engine will now be compiled to WebAssembly by Emscripten. Once finished, "
"the resulting file will be placed in the ``bin`` subdirectory. Its name is "
"``godot.javascript.opt.zip`` for release or ``godot.javascript.opt.debug."
"zip`` for debug."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:51
msgid ""
"Finally, rename the zip archive to ``webassembly_release.zip`` for the "
"release template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:56
msgid "And ``webassembly_debug.zip`` for the debug template::"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:61
msgid "Building per asm.js translation or LLVM backend"
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:63
msgid ""
"WebAssembly can be compiled in two ways: The default is to first compile to "
"asm.js, a highly optimizable subset of JavaScript, using Emscripten's "
"*fastcomp* fork of LLVM. This code is then translated to WebAssembly using a "
"tool called ``asm2wasm``. Emscripten automatically takes care of both "
"processes, we simply run SCons."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:69
msgid ""
"The other method uses LLVM's WebAssembly backend. This backend is not yet "
"available in release versions of LLVM, only in development builds built with "
"``LLVM_EXPERIMENTAL_TARGETS_TO_BUILD=WebAssembly``. Compiling with this "
"backend outputs files in LLVM's ``.s`` format, which is translated into "
"actual WebAssembly using a tool called ``s2wasm``. Emscripten manages these "
"processes as well, so we just invoke SCons."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:76
msgid ""
"In order to choose one of the two methods, the ``LLVM_ROOT`` variable in the "
"Emscripten configuration file is used. If it points to a directory "
"containing binaries of Emscripten's *fastcomp* fork of clang, ``asm2wasm`` "
"is used. This is the default in a normal Emscripten installation. Otherwise, "
"LLVM binaries built with the WebAssembly backend will be expected and "
"``s2wasm`` is used. On Windows, make sure to escape backslashes of paths "
"within this file as double backslashes ``\\\\`` or use Unix-style paths with "
"a single forward slash ``/``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:4
msgid "Compiling with Mono"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:11
msgid "Mono 5.12.0 or greater"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:12
msgid "MSBuild"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:13
#: ../../docs/development/compiling/compiling_with_mono.rst:15
msgid "NuGet"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:14
msgid "pkg-config"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:17
msgid ""
"You may need to import necessary certificates for NuGet to perform HTTPS "
"requests. You can do this with the following command (on Windows, you can "
"run it from the Mono command line prompt):"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:24
msgid "Environment variables"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:26
msgid ""
"By default, SCons will try to find Mono in the Windows Registry on Windows "
"or via ``pkg-config`` on other platforms. You can specify a different "
"installation directory by using the following environment variables for the "
"respective ``bits`` option: ``MONO32_PREFIX`` and ``MONO64_PREFIX``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:28
msgid ""
"The specified directory must contain the subdirectories ``bin``, "
"``include``, and ``lib``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:31
msgid "Enable the Mono module"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:33
msgid ""
"By default, the mono module is disabled for builds. To enable it you can "
"pass the option ``module_mono_enabled=yes`` to your SCons command."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:36
msgid "Generate the glue"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:38
msgid ""
"The glue sources are the wrapper functions that will be called by managed "
"methods. These source files must be generated before building your final "
"binaries. In order to generate them, first, you must build a temporary Godot "
"binary with the options ``tools=yes`` and ``mono_glue=no``:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:44
msgid ""
"After the build finishes, you need to run the compiled executable with the "
"parameter ``--generate-mono-glue`` followed by the path to an output "
"directory. This path must be ``modules/mono/glue`` in the Godot directory."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:50
msgid ""
"This command will tell Godot to generate the file ``modules/mono/glue/"
"mono_glue.gen.cpp``. Once this file is generated, you can build Godot for "
"all the desired targets without the need to repeat this process."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:53
msgid ""
"``<godot_binary>`` refers to the tools binary you compiled above with the "
"Mono module enabled. Its exact name will differ based on your system and "
"configuration, but should be of the form ``bin/godot.<platform>.tools.<bits>."
"mono``, e.g. ``bin/godot.x11.tools.64.mono`` or ``bin/godot.windows.tools.64."
"exe``. Be especially aware of the **.mono** suffix! If you compiled Godot "
"without Mono support previously, you might have similarly named binaries "
"without this suffix which can't be used to generate the Mono glue."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:58
#: ../../docs/development/cpp/custom_godot_servers.rst:506
msgid "Notes"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:59
msgid ""
"**Do not** build your final binaries with ``mono_glue=no``. This disables C# "
"scripting. This option must be used only for the temporary binary that will "
"generate the glue. Godot will print a warning at startup if it was built "
"without the glue sources."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:60
msgid ""
"The glue sources must be regenerated every time the ClassDB bindings "
"changes. That is, for example, when a new method is added to ClassDB or one "
"of the parameter of such a method changes. Godot will print an error at "
"startup if there is an API mismatch between ClassDB and the glue sources."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:63
msgid "Rebuild with Mono glue"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:65
msgid ""
"Once you have generated the Mono glue, you can build the final binary with "
"``mono_glue=yes``. It's the default value for ``mono_glue`` so you can also "
"omit it. You can build the Mono-enabled editor:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:72
msgid "And Mono-enabled export templates:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:78
msgid ""
"If everything went well, apart from the normal output SCons should have "
"created the following files in the ``bin`` directory:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:80
msgid ""
"If you're not static linking the Mono runtime, the build script will place "
"the Mono runtime shared library next to the Godot binary."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:81
msgid ""
"Unlike \"classical\" Godot builds, when building with the mono module "
"enabled a data directory will be created both for the editor and for export "
"templates. This directory is important for proper functioning and must be "
"distributed together with Godot. More details about this directory in :ref:"
"`Data directory<compiling_with_mono_data_directory>`."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:87
msgid "Example (Windows)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:103
msgid "Example (X11)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:121
msgid "Data directory"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:123
msgid ""
"The data directory is a dependency for Godot binaries built with the mono "
"module enabled. It contains files that are important for the correct "
"functioning of Godot. It must be distributed next to the Godot executable."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:128
msgid ""
"The name of the data directory for a export template differs based on the "
"configuration it was built with. The format is ``data.mono.<platform>.<bits>."
"<target>``, e.g. ``data.mono.x11.32.debug`` or ``data.mono.windows.64."
"release``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:130
msgid ""
"In the case of export templates the data directory only contains Mono "
"framework assemblies and configuration files, as well as some shared library "
"dependencies like ``MonoPosixHelper``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:132
msgid ""
"This directory must be placed with its original name next to the Godot "
"export templates. When exporting a project, Godot will also copy this "
"directory with the game executable but the name will be changed to "
"``data_<APPNAME>``, where ``<APPNAME>`` is the application name as specified "
"in the project setting ``application/config/name``."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:134
msgid ""
"In the case of macOS, where the export template is compressed as a zip file, "
"the contents of the data directory can be placed in the following locations "
"inside the zip:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:137
#: ../../docs/development/compiling/compiling_with_mono.rst:196
msgid "``bin/data.mono.<platform>.<bits>.<target>/Mono/lib``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:137
msgid "``/osx_template.app/Contents/Frameworks/GodotSharp/Mono/lib``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:139
#: ../../docs/development/compiling/compiling_with_mono.rst:198
msgid "``bin/data.mono.<platform>.<bits>.<target>/Mono/etc``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:139
msgid "``/osx_template.app/Contents/Resources/GodotSharp/Mono/etc``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:145
msgid ""
"The name of the data directory for the Godot editor will always be "
"``GodotSharp``. The main structure of this directory has the following "
"subdirectories:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:147
msgid "``Api`` (optional)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:148
msgid "``Mono`` (optional)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:149
msgid "``Tools`` (required)"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:151
msgid ""
"The ``Tools`` subdirectory contains tools required by the editor, like the "
"``GodotSharpTools`` assembly."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:153
msgid ""
"The ``Mono`` subdirectory is optional. It can be used to bundle the Mono "
"framework assemblies and configuration files with the Godot editor, as well "
"as some shared library dependencies like ``MonoPosixHelper``. This is "
"important to avoid issues that might arise when the installed Mono version "
"in the user's system may not be the same as the one the Godot editor was "
"built with. You can make SCons copy these files to this subdirectory by "
"passing the option ``copy_mono_root=yes`` when building the editor."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:155
msgid ""
"The ``Api`` directory is also optional. Godot API assemblies are not bundled "
"with the editor by default. Instead the Godot editor will generate and build "
"them on the user's machine the first time they are required. This can be "
"avoided by generating and building them manually and placing them in this "
"subdirectory. If the editor can find them there, it will avoid the step of "
"generating and building them again."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:157
msgid ""
"The following is an example script for building and copying the Godot API "
"assemblies:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:188
msgid ""
"The script assumes it's being executed from the directory where SConstruct "
"is located. ``<godot_binary>`` refers to the tools binary compiled with the "
"Mono module enabled."
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:191
msgid ""
"In the case of macOS, if the Godot editor is distributed as a bundle, the "
"contents of the data directory may be placed in the following locations:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:194
msgid "``bin/data.mono.<platform>.<bits>.<target>/Api``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:194
msgid "``<bundle_name>.app/Contents/Frameworks/GodotSharp/Api``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:196
msgid "``<bundle_name>.app/Contents/Frameworks/GodotSharp/Mono/lib``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:198
msgid "``<bundle_name>.app/Contents/Resources/GodotSharp/Mono/etc``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:200
msgid "``bin/data.mono.<platform>.<bits>.<target>/Tools``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:200
msgid "``<bundle_name>.app/Contents/Frameworks/GodotSharp/Tools``"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:204
msgid "Command-line options"
msgstr "명령 줄 설정"

#: ../../docs/development/compiling/compiling_with_mono.rst:206
msgid ""
"The following is the list of command-line options available when building "
"with the mono module:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:208
msgid ""
"**module_mono_enabled**: Build Godot with the mono module enabled ( yes | "
"**no** )"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:210
msgid ""
"**mono_glue**: Whether to include the glue source files in the build and "
"define `MONO_GLUE_DISABLED` as a preprocessor macro ( **yes** | no )"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:212
msgid ""
"**xbuild_fallback**: Whether to fallback to xbuild if MSBuild is not "
"available ( yes | **no** )"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:214
msgid ""
"**mono_static**: Whether to link the mono runtime statically ( yes | **no** )"
msgstr ""

#: ../../docs/development/compiling/compiling_with_mono.rst:216
msgid ""
"**copy_mono_root**: Whether to copy the Mono framework assemblies and "
"configuration files required by the Godot editor ( yes | **no** )"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:4
msgid "Optimizing a build for size"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:9
msgid "Rationale"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:11
msgid ""
"Sometimes, it is desired to optimize a build for size rather than speed. "
"This means not compiling unused functions from the engine, as well as using "
"specific compiler flags to aid on decreasing build size. Common situations "
"include creating builds for mobile and Web platforms."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:16
msgid ""
"This tutorial aims to give an overview on different methods to create a "
"smaller binary. Before continuing, it is recommended to read the previous "
"tutorials on compiling Godot for each platform."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:21
msgid "Disabling 3D"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:23
msgid ""
"For 2D games, having the whole 3D engine available usually makes no sense. "
"Because of this, there is a build flag to disable it:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:29
msgid ""
"Tools must be disabled in order to use this flag, as the editor is not "
"designed to operate without 3D support. Without it, the binary size can be "
"reduced by about 15%."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:34
msgid "Disabling advanced GUI nodes"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:36
msgid ""
"Most small games don't require complex GUI controls such as Tree, ItemList, "
"TextEditor or GraphEdit. They can be disabled using a build flag:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:44
msgid "Disabling unwanted modules"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:46
msgid ""
"A lot of Godot's functions are offered as modules. You can see a list of "
"modules with the following command:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:53
msgid ""
"The list of modules that can be disabled will appear, together with all "
"build options. If you are working on a simple 2D game, you could disable a "
"lot of them:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:62
msgid "Optimizing for size instead of speed"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:64
msgid ""
"Godot 3.1 onwards allows to compile using size optimizations. To enable "
"this, just set the ``optimize`` flag to ``size``:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:71
msgid "Some platforms such as WebAssembly already use this mode by default."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:74
msgid "Compiling with link-time optimization"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:76
msgid ""
"Enabling link-time optimization produces more efficient binaries, both in "
"terms of performance and file size. It works by eliminating duplicate "
"template functions and unused code. It can currently be used with the GCC "
"and MSVC compilers:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:85
msgid ""
"Linking becomes much slower with this option, so it should be used only for "
"release builds."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:89
msgid "Stripping binaries"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:91
msgid ""
"If you build from source, remember to strip debug symbols from binaries:"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:98
msgid "Using UPX to compress binaries"
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:100
msgid ""
"If you are targeting desktop platforms, the `UPX <https://upx.github.io/>`_ "
"compressor can be used. This can reduce binary size considerably."
msgstr ""

#: ../../docs/development/compiling/optimizing_for_size.rst:104
msgid ""
"However, keep in mind that some antivirus programs may detect UPX-packed "
"binaries as a virus. Therefore, if you are releasing a commercial game, make "
"sure to sign your binaries or use a platform that will distribute them."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:6
msgid "Compiling with script encryption key"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:8
msgid ""
"The export dialog gives you the option to encrypt your scripts with an "
"256bit AES key, when releasing your game. This will make sure your scripts "
"are not stored in plain text and can not easily be ripped by some script "
"kiddie. Of course the key needs to be stored in the binary, but if it's "
"compiled, optimized and without symbols, it would take some effort to find "
"it."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:14
msgid ""
"For this to work, you need to build the export templates from source, with "
"that same key."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:18
#, fuzzy
msgid "Step by step (Linux)"
msgstr "단계별"

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:20
msgid ""
"Generate a 256bit AES key in HEX. You can use the aes-256-cbc variant from "
"`this service <https://asecuritysite.com/encryption/keygen>`_."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:23
msgid "Alternatively, you can generate it yourself by using OpenSSL:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:29
msgid "This should output the following to ``godot.gdkey`` file:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:37
msgid ""
"You can generate the key without redirecting the output to a file, but that "
"way you can minimize the risk of exposing the key."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:41
msgid ""
"Set this key as environment variable in the console that you will use to "
"compile Godot, like this:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:49
msgid ""
"Compile Godot export templates and set them as custom export templates in "
"the export preset options."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:52
msgid "Set the encryption key in the ``Script`` tab of the export preset:"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:56
msgid "Export the project. The game should run with encrypted scripts now."
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:59
msgid "Possible Errors"
msgstr ""

#: ../../docs/development/compiling/compiling_with_script_encryption_key.rst:61
msgid ""
"If you get an error like below, it means the key wasn't properly included in "
"your Godot build. Godot is encrypting the scripts during export, but can't "
"read them at runtime."
msgstr ""

#: ../../docs/development/cpp/index.rst:2
msgid "Engine development"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:4
msgid "Introduction to Godot development"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:6
msgid ""
"This page is meant to introduce the global organization of Godot Engine's "
"source code, and give useful tips for extending/fixing the engine on the C++ "
"side."
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:11
msgid "Architecture diagram"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:13
msgid ""
"The following diagram describes the architecture used by Godot, from the "
"core components down to the abstracted drivers, via the scene structure and "
"the servers."
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:20
msgid "Debugging the editor with gdb"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:22
msgid ""
"If you are writing or correcting bugs affecting Godot Engine's editor, "
"remember that the binary will by default run the project manager first, and "
"then only run the editor in another process once you've selected a project. "
"To launch a project directly, you need to run the editor by passing the ``-"
"e`` argument to Godot Engine's binary from within your project's folder. "
"Typically:"
msgstr ""

#: ../../docs/development/cpp/introduction_to_godot_development.rst:35
msgid "Or:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:4
msgid "Configuring an IDE"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:6
msgid ""
"We assume that you already `cloned <https://github.com/godotengine/godot>`_ "
"and :ref:`compiled <toc-devel-compiling>` Godot."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:9
msgid ""
"You can easily develop Godot with any text editor and by invoking ``scons`` "
"on the command line, but if you want to work with an IDE (Integrated "
"Development Environment), here are setup instructions for some popular ones:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:13
msgid ""
":ref:`Qt Creator <doc_configuring_an_ide_qtcreator>` (all desktop platforms)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:14
msgid ""
":ref:`Kdevelop <doc_configuring_an_ide_kdevelop>` (all desktop platforms)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:15
msgid ":ref:`Xcode <doc_configuring_an_ide_xcode>` (macOS)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:16
msgid ":ref:`Visual Studio <doc_compiling_for_windows_install_vs>` (Windows)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:17
msgid ""
":ref:`Visual Studio Code<doc_configuring_an_ide_vscode>` (all desktop "
"platforms)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:19
msgid ""
"It is possible to use other IDEs, but their setup is not documented yet."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:24
msgid "Qt Creator"
msgstr "Qt Creator"

#: ../../docs/development/cpp/configuring_an_ide.rst:27
msgid "Importing the project"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:29
msgid "Choose *New Project* -> *Import Project* -> *Import Existing Project*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:33
msgid "Set the path to your Godot root directory and enter the project name."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:37
msgid ""
"Here you can choose which folders and files will be visible to the project. "
"C/C++ files are added automatically. Potentially useful additions: \\*.py "
"for buildsystem files, \\*.java for Android development, \\*.mm for macOS. "
"Click \"Next\"."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:43
msgid "Click *Finish*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:44
msgid ""
"Add a line containing ``.`` to *project_name.includes* to get working code "
"completion."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:49
msgid "Build and run"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:51
msgid "Build configuration:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:53
msgid "Click on *Projects* and open the *Build* tab."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:54
msgid "Delete the pre-defined ``make`` build step."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:58
msgid "Click *Add Build Step* -> *Custom Process Step*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:62
msgid ""
"Type ``scons`` in the *Command* field. If it fails with 'Could not start "
"process \"scons\"', it can mean that ``scons`` is not in your ``PATH`` "
"environment variable, so you may have to use the full path to the SCons "
"binary."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:65
msgid ""
"Fill the *Arguments* field with your compilation options. (e.g.: ``p=x11 "
"target=debug -j 4``)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:69
msgid "Run configuration:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:71
msgid "Open the *Run* tab."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:72
msgid ""
"Point the *Executable* to your compiled Godot binary (e.g: ``%{buildDir}/bin/"
"godot.x11.opt.tools.64``)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:73
msgid ""
"If you want to run a specific game or project, point *Working directory* to "
"the game directory."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:74
msgid ""
"If you want to run the editor, add ``-e`` to the *Command line arguments* "
"field."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:79
msgid "Updating sources after pulling latest commits"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:81
msgid ""
"As a developer you usually want to frequently pull the latest commits from "
"the upstream git repository or a specific fork etc. However this brings a "
"little problem with it: as the development continues, source files (and "
"folders) are added or removed. These changes needs to be reflected in your "
"project files for Qt Creator too, so you continue to have a nice experience "
"coding in it. A simple way to check these things, is to right click at your "
"root folder in the \"Projects View\" and click on \"Edit files...\""
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:91
msgid ""
"Now a new dialog should appear that is similar in functionality to the one "
"in the third step of the \"Importing the project\" section. Here now you can "
"check whether you want to add/remove specific files and/or folders. You can "
"chose by clicking with your mouse or just simply by clicking the \"Apply "
"Filter\" button. A simple click on \"Ok\" and you're ready to continue your "
"work."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:99
msgid "Code style configuration"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:101
msgid ""
"Developers must follow the project's :ref:`code style "
"<doc_code_style_guidelines>` and IDE should help them to do it. By default, "
"Qt Creator does use spaces for indentation which is incorrect for Godot "
"project. You can change this behavior by changing the \"Code Style\" in "
"*Options* -> *C++*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:108
msgid ""
"Click on *Edit* to change the current settings, then click on *Copy Built-in "
"Code Style* button to set a new code style. Set a name for it (e.g. Godot) "
"and change the Tab policy to be *Tabs Only*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:117
msgid "KDevelop"
msgstr "KDevelop"

#: ../../docs/development/cpp/configuring_an_ide.rst:119
msgid ""
"`KDevelop <https://www.kdevelop.org>`_ is a free, open source IDE for all "
"desktop platforms."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:121
msgid ""
"You can find a video tutorial `here <https://www.youtube.com/watch?"
"v=yNVoWQi9TJA>`_. Or you may follow this text version tutorial."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:124
msgid "Start by opening KDevelop and choosing \"open project\"."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:128
msgid "Choose the directory where you cloned Godot."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:130
msgid ""
"On the next screen, choose \"Custom Build System\" for the *Project manager*."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:134
msgid "Now that the project has been imported, open the project configuration."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:138
msgid "Add the following includes/imports:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:151
msgid "Apply the changes."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:153
msgid ""
"Switch to the \"Custom Build System\" tab. Add a build configuration and "
"keep the build directory blank. Enable build tools and add ``scons`` as the "
"executable then add ``platform=x11 target=debug`` (``platform=osx`` if "
"you're on macOS) as the arguments."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:160
msgid ""
"Next we need to tell KDevelop where to find the binary. From the \"Run\" "
"menu, choose \"Configure Launches\"."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:165
msgid ""
"Click \"Add\" if no launcher exists. Then add the path to your executable in "
"the executable section. Your executable should be located in the ``bin/`` "
"sub-directory and should be named something like ``godot.x11.tools.64`` (the "
"name could be different depending on your platform and depending on your "
"build options)."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:173
msgid "That's it! Now you should be good to go :)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:179
msgid "Xcode"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:184
msgid "Create an Xcode external build project anywhere"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:188
msgid "Set the *Build tool* to the path to scons"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:190
msgid "Modify Build Target's Xcode Info Tab:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:192
msgid ""
"Set *Arguments* to something like: platform=osx tools=yes bits=64 "
"target=debug"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:193
msgid ""
"Set *Directory* to the path to Godot's source folder. Keep it blank if "
"project is already there."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:194
msgid "You may uncheck *Pass build settings in environment*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:198
msgid "Add a Command Line Target:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:200
msgid ""
"Go to Xcode File > New > Target... and add a new Xcode command line target"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:206
msgid "Name it something so you know not to compile with this target"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:207
msgid "e.g. ``GodotXcodeIndex``"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:208
msgid ""
"Goto the newly created target's *Build Settings* tab and search for *Header "
"Search Paths*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:209
msgid "Set *Header Search Paths* to an absolute path to Godot's source folder"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:210
msgid "Make it recursive by adding two \\*'s to the end of the path"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:211
msgid "e.g. ``/Users/me/repos/godot-source/\\**``"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:213
msgid "Add Godot Source to the Project:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:215
msgid "Drag and drop Godot source into project file browser."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:216
msgid "Uncheck *Create External Build System*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:220
msgid "Click Next"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:221
msgid "Select *create groups*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:225
msgid "Check off only your command line target in the *Add to targets* section"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:226
msgid "Click finish. Xcode will now index the files."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:227
msgid "Grab a cup of coffee... Maybe make something to eat, too"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:228
msgid ""
"You should have jump to definition, auto completion, and full syntax "
"highlighting when it is done."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:231
#, fuzzy
msgid "Scheme setup"
msgstr "씬 설정하기"

#: ../../docs/development/cpp/configuring_an_ide.rst:233
msgid "Edit Build Scheme of External Build Target:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:235
msgid "Open scheme editor of external build target"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:236
msgid "Expand the *Build* menu"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:237
msgid "Goto *Post Actions*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:238
msgid ""
"Add a new script run action, select your project in ``Provide build settings "
"from`` as this allows you to use ``${PROJECT_DIR}`` variable."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:242
msgid "Write a script that gives the binary a name that Xcode will recognize"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:243
msgid ""
"e.g. ``ln -f ${PROJECT_DIR}/godot/bin/godot.osx.tools.64 ${PROJECT_DIR}/"
"godot/bin/godot``"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:244
msgid "Build the external build target"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:246
msgid "Edit Run Scheme of External Build Target:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:248
msgid "Open the scheme editor again"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:249
msgid "Click Run"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:253
msgid ""
"Set the *Executable* to the file you linked in your post build action script"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:254
msgid "Check *Debug executable* if it isn't already"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:255
msgid ""
"You can go to *Arguments* tab and add an -e and a -path to a project to "
"debug the editor not the project selection screen"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:258
msgid "Test it:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:260
msgid "Set a breakpoint in platform/osx/godot_main_osx.mm"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:261
msgid "It should break at the point!"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:269
msgid ""
"Ensure that C/C++ extension is installed. You can find instructions in `docs "
"<https://code.visualstudio.com/docs/languages/cpp>`_."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:271
msgid "Now open cloned godot folder in VS Code (File > Open Folder...)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:273
msgid ""
"In order to build the project, we need configurations files: *launch.json* "
"and *tasks.json*. To create them:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:276
msgid "Open Debug view (Ctrl + Shift + D) and select cogwheel with orange dot:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:280
msgid ""
"Select *C++ (GDB/LLDB)* (it might be slightly differently called on macOS or "
"Windows)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:282
msgid "Update *launch.json* to match:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:286
msgid ""
"(Note that *godot.x11.tools.64* in \"program\" value might be differently "
"called on macOS or Windows)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:288
msgid ""
"Create *tasks.json* by starting Debug process (F5). VS Code will show dialog "
"with *Configure Task* button. Tap it and select *Create tasks.json file from "
"template*, then select *Others*"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:290
msgid "Update *tasks.json* to match:"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:294
msgid "(Note that *platform=x11* will be different for macOX and Windows)"
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:296
msgid "You can now start Debug process again to test that everything works."
msgstr ""

#: ../../docs/development/cpp/configuring_an_ide.rst:298
msgid ""
"If the build phase fails, check console for hints. On Linux it's most likely "
"that some dependencies are missing. Check :ref:`Compiling for X11 (Linux, "
"\\*BSD) <doc_compiling_for_x11>`"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:4
msgid "Core types"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:6
msgid ""
"Godot has a rich set of classes and templates that compose its core, and "
"everything is built upon them."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:9
msgid ""
"This reference will try to list them in order for their better understanding."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:13
msgid "Definitions"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:15
msgid ""
"Godot uses the standard C98 datatypes, such as ``uint8_t``, ``uint32_t``, "
"``int64_t``, etc. which are nowadays supported by every compiler. "
"Reinventing the wheel for those is not fun, as it makes code more difficult "
"to read."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:20
msgid ""
"In general, care is not taken to use the most efficient datatype for a given "
"task unless using large structures or arrays. ``int`` is used through most "
"of the code unless necessary. This is done because nowadays every device has "
"at least a 32 bits bus and can do such operations in one cycle. It makes "
"code more readable too."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:26
msgid ""
"For files or memory sizes, ``size_t`` is used, which is warranted to be 64 "
"bits."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:29
msgid ""
"For Unicode characters, CharType instead of wchar_t is used, because many "
"architectures have 4 bytes long wchar_t, where 2 bytes might be desired. "
"However, by default, this has not been forced and CharType maps directly to "
"wchar_t."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:35
#: ../../docs/development/cpp/core_types.rst:132
#: ../../docs/development/cpp/core_types.rst:166
#: ../../docs/development/cpp/core_types.rst:182
#: ../../docs/development/cpp/core_types.rst:198
#: ../../docs/development/cpp/core_types.rst:209
#: ../../docs/development/cpp/core_types.rst:220
#: ../../docs/development/cpp/core_types.rst:233
#: ../../docs/development/cpp/variant_class.rst:38
#: ../../docs/development/cpp/variant_class.rst:57
#: ../../docs/development/cpp/object_class.rst:31
#: ../../docs/development/cpp/object_class.rst:89
#: ../../docs/development/cpp/object_class.rst:251
#: ../../docs/development/cpp/object_class.rst:267
#: ../../docs/development/cpp/object_class.rst:288
#: ../../docs/development/cpp/object_class.rst:307
#: ../../docs/development/cpp/custom_audiostreams.rst:23
#: ../../docs/development/cpp/custom_audiostreams.rst:117
#: ../../docs/development/cpp/custom_audiostreams.rst:348
#: ../../docs/development/cpp/custom_godot_servers.rst:475
msgid "References:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:37
msgid ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/master/core/"
"typedefs.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:40
msgid "Memory model"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:42
msgid ""
"PC is a wonderful architecture. Computers often have gigabytes of RAM, "
"terabytes of storage and gigahertz of CPU, and when an application needs "
"more resources the OS will swap out the inactive ones. Other architectures "
"(like mobile or consoles) are in general more limited."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:47
msgid ""
"The most common memory model is the heap, where an application will request "
"a region of memory, and the underlying OS will try to fit it somewhere and "
"return it. This often works best and is flexible, but over time and with "
"abuse, this can lead to segmentation."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:52
msgid ""
"Segmentation slowly creates holes that are too small for most common "
"allocations, so that memory is wasted. There is a lot of literature about "
"heap and segmentation, so this topic will not be developed further here. "
"Modern operating systems use paged memory, which helps mitigate the problem "
"of segmentation but doesn't solve it."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:58
msgid ""
"However, in many studies and tests, it is shown that given enough memory, if "
"the maximum allocation size is below a given threshold in proportion to the "
"maximum heap size and proportion of memory intended to be unused, "
"segmentation will not be a problem over time as it will remain constant. In "
"other words, leave 10-20% of your memory free and perform all small "
"allocations and you are fine."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:65
msgid ""
"Godot ensures that all objects that can be allocated dynamically are small "
"(less than a few kb at most). But what happens if an allocation is too large "
"(like an image or mesh geometry or large array)? In this case Godot has the "
"option to use a dynamic memory pool. This memory needs to be locked to be "
"accessed, and if an allocation runs out of memory, the pool will be "
"rearranged and compacted on demand. Depending on the need of the game, the "
"programmer can configure the dynamic memory pool size."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:74
msgid "Allocating memory"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:76
msgid ""
"Godot has many tools for tracking memory usage in a game, especially during "
"debug. Because of this, the regular C and C++ library calls should not be "
"used. Instead, a few other ones are provided."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:80
msgid "For C-style allocation, Godot provides a few macros:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:88
msgid ""
"These are equivalent to the usual malloc, realloc, free of the standard C "
"library."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:91
msgid "For C++-style allocation, special macros are provided:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:101
msgid "which are equivalent to new, delete, new[] and delete[]."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:103
msgid ""
"memnew/memdelete also use a little C++ magic and notify Objects right after "
"they are created, and right before they are deleted."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:106
msgid ""
"For dynamic memory, the PoolVector<> template is provided. PoolVector is a "
"standard vector class, and is very similar to vector in the C++ standard "
"library. To create a PoolVector buffer, use this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:114
msgid ""
"PoolVector can be accessed using the [] operator and a few helpers exist for "
"this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:126
msgid ""
"These operations allow fast read/write from PoolVectors and keep it locked "
"until they go out of scope. However, PoolVectors should be used for small, "
"dynamic memory operations, as read() and write() are too slow for a large "
"amount of accesses."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:134
msgid ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/master/core/os/"
"memory.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:135
msgid ""
"`core/dvector.h <https://github.com/godotengine/godot/blob/master/core/"
"dvector.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:138
msgid "Containers"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:140
msgid "Godot provides also a set of common containers:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:142
msgid "Vector"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:143
msgid "List"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:144
msgid "Set"
msgstr "설정"

#: ../../docs/development/cpp/core_types.rst:145
msgid "Map"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:147
msgid ""
"They are simple and aim to be as minimal as possible, as templates in C++ "
"are often inlined and make the binary size much fatter, both in debug "
"symbols and code. List, Set and Map can be iterated using pointers, like "
"this:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:158
msgid "The Vector<> class also has a few nice features:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:160
msgid ""
"It does copy on write, so making copies of it is cheap as long as they are "
"not modified."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:162
msgid ""
"It supports multi-threading, by using atomic operations on the reference "
"counter."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:168
msgid ""
"`core/vector.h <https://github.com/godotengine/godot/blob/master/core/vector."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:169
msgid ""
"`core/list.h <https://github.com/godotengine/godot/blob/master/core/list."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:170
msgid ""
"`core/set.h <https://github.com/godotengine/godot/blob/master/core/set.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:171
msgid ""
"`core/map.h <https://github.com/godotengine/godot/blob/master/core/map.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:176
msgid ""
"Godot also provides a String class. This class has a huge amount of "
"features, full Unicode support in all the functions (like case operations) "
"and utf8 parsing/extracting, as well as helpers for conversion and "
"visualization."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:184
msgid ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/master/core/"
"ustring.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:187
msgid "StringName"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:189
msgid ""
"StringNames are like a String, but they are unique. Creating a StringName "
"from a string results in a unique internal pointer for all equal strings. "
"StringNames are useful for using strings as identifier, as comparing them is "
"basically comparing a pointer."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:194
msgid ""
"Creation of a StringName (especially a new one) is slow, but comparison is "
"fast."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:200
msgid ""
"`core/string_db.h <https://github.com/godotengine/godot/blob/master/core/"
"string_db.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:203
msgid "Math types"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:205
msgid ""
"There are several linear math types available in the core/math directory."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:211
msgid ""
"`core/math <https://github.com/godotengine/godot/tree/master/core/math>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:214
#: ../../docs/development/file_formats/tscn.rst:128
msgid "NodePath"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:216
msgid ""
"This is a special datatype used for storing paths in a scene tree and "
"referencing them fast."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:222
msgid ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/master/core/"
"node_path.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:225
msgid "RID"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:227
msgid ""
"RIDs are resource IDs. Servers use these to reference data stored in them. "
"RIDs are opaque, meaning that the data they reference can't be accessed "
"directly. RIDs are unique, even for different types of referenced data."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:235
#: ../../docs/development/cpp/custom_godot_servers.rst:319
msgid ""
"`core/rid.h <https://github.com/godotengine/godot/blob/master/core/rid.h>`__"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:4
msgid "Variant class"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:9
msgid ""
"Variant is the most important datatype of Godot, it's the most important "
"class in the engine. A Variant takes up only 20 bytes and can store almost "
"any engine datatype inside of it. Variants are rarely used to hold "
"information for long periods of time, instead they are used mainly for "
"communication, editing, serialization and generally moving data around."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:16
msgid "A Variant can:"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:18
msgid "Store almost any datatype"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:19
msgid ""
"Perform operations between many variants (GDScript uses Variant as its "
"atomic/native datatype)."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:21
msgid "Be hashed, so it can be compared quickly to other variants"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:22
msgid "Be used to convert safely between datatypes"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:23
msgid ""
"Be used to abstract calling methods and their arguments (Godot exports all "
"its functions through variants)"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:25
msgid "Be used to defer calls or move data between threads."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:26
msgid "Be serialized as binary and stored to disk, or transferred via network."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:28
msgid ""
"Be serialized to text and use it for printing values and editable settings."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:30
msgid "Work as an exported property, so the editor can edit it universally."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:31
msgid "Be used for dictionaries, arrays, parsers, etc."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:33
msgid ""
"Basically, thanks to the Variant class, writing Godot itself was a much, "
"much easier task, as it allows for highly dynamic constructs not common of C+"
"+ with little effort. Become a friend of Variant today."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:40
msgid ""
"`core/variant.h <https://github.com/godotengine/godot/blob/master/core/"
"variant.h>`__"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:43
msgid "Containers: Dictionary and Array"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:45
msgid ""
"Both are implemented using variants. A Dictionary can match any datatype "
"used as key to any other datatype. An Array just holds an array of Variants. "
"Of course, a Variant can also hold a Dictionary and an Array inside, making "
"it even more flexible."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:50
msgid ""
"Modifications to a container will modify all references to it. A Mutex "
"should be created to lock it if multi threaded access is desired."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:54
msgid ""
"Copy-on-write (COW) mode support for containers was dropped with Godot 3.0."
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:59
msgid ""
"`core/dictionary.h <https://github.com/godotengine/godot/blob/master/core/"
"dictionary.h>`__"
msgstr ""

#: ../../docs/development/cpp/variant_class.rst:60
msgid ""
"`core/array.h <https://github.com/godotengine/godot/blob/master/core/array."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:4
msgid "Object class"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:7
msgid "General definition"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:9
msgid ""
":ref:`Object <class_object>` is the base class for almost everything. Most "
"classes in Godot inherit directly or indirectly from it. Objects provide "
"reflection and editable properties, and declaring them is a matter of using "
"a single macro like this."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:21
msgid "This makes Objects gain a lot of functionality, like for example"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:33
msgid ""
"`core/object.h <https://github.com/godotengine/godot/blob/master/core/object."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:36
msgid "Registering an Object"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:38
msgid ""
"ClassDB is a static class that holds the entire list of registered classes "
"that inherit from Object, as well as dynamic bindings to all their methods "
"properties and integer constants."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:42
msgid "Classes are registered by calling:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:48
msgid ""
"Registering it will allow the class to be instanced by scripts, code, or "
"creating them again when deserializing."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:51
msgid "Registering as virtual is the same but it can't be instanced."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:57
msgid ""
"Object-derived classes can override the static function ``static void "
"_bind_methods()``. When one class is registered, this static function is "
"called to register all the object methods, properties, constants, etc. It's "
"only called once. If an Object derived class is instanced but has not been "
"registered, it will be registered as virtual automatically."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:64
msgid ""
"Inside ``_bind_methods``, there are a couple of things that can be done. "
"Registering functions is one:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:71
msgid "Default values for arguments can be passed in reverse order:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:77
msgid ""
"``D_METHOD`` is a macro that converts \"methodname\" to a StringName for "
"more efficiency. Argument names are used for introspection, but when "
"compiling on release, the macro ignores them, so the strings are unused and "
"optimized away."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:82
msgid "Check ``_bind_methods`` of Control or Object for more examples."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:84
msgid ""
"If just adding modules and functionality that is not expected to be "
"documented as thoroughly, the ``D_METHOD()`` macro can safely be ignored and "
"a string passing the name can be passed for brevity."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:91
msgid ""
"`core/class_db.h <https://github.com/godotengine/godot/blob/master/core/"
"class_db.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:96
msgid "Classes often have enums such as:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:105
msgid ""
"For these to work when binding to methods, the enum must be declared "
"convertible to int, for this a macro is provided:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:112
msgid "The constants can also be bound inside ``_bind_methods``, by using:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:120
msgid "Properties (set/get)"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:122
msgid "Objects export properties, properties are useful for the following:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:124
msgid "Serializing and deserializing the object."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:125
msgid "Creating a list of editable values for the Object derived class."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:127
msgid ""
"Properties are usually defined by the PropertyInfo() class. Usually "
"constructed as:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:140
msgid ""
"This is an integer property, named \"amount\", hint is a range, range goes "
"from 0 to 49 in steps of 1 (integers). It is only usable for the editor "
"(edit value visually) but won't be serialized."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:144
msgid "Another example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:150
msgid ""
"This is a string property, can take any string but the editor will only "
"allow the defined hint ones. Since no usage flags were specified, the "
"default ones are PROPERTY_USAGE_STORAGE and PROPERTY_USAGE_EDITOR."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:154
msgid ""
"There are plenty of hints and usage flags available in object.h, give them a "
"check."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:157
msgid ""
"Properties can also work like C# properties and be accessed from script "
"using indexing, but this usage is generally discouraged, as using functions "
"is preferred for legibility. Many properties are also bound with categories, "
"such as \"animation/frame\" which also make indexing impossible unless using "
"operator []."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:163
msgid ""
"From ``_bind_methods()``, properties can be created and bound as long as set/"
"get functions exist. Example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:170
msgid "This creates the property using the setter and the getter."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:173
msgid "Binding properties using ``_set``/``_get``/``_get_property_list``"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:175
msgid ""
"An additional method of creating properties exists when more flexibility is "
"desired (i.e. adding or removing properties on context)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:178
msgid ""
"The following functions can be overridden in an Object derived class, they "
"are NOT virtual, DO NOT make them virtual, they are called for every "
"override and the previous ones are not invalidated (multilevel call)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:189
msgid ""
"This is also a little less efficient since ``p_property`` must be compared "
"against the desired names in serial order."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:193
msgid "Dynamic casting"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:195
msgid ""
"Godot provides dynamic casting between Object-derived classes, for example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:205
msgid ""
"If cast fails, NULL is returned. This system uses RTTI, but it also works "
"fine (although a bit slower) when RTTI is disabled. This is useful on "
"platforms where a small binary size is ideal, such as HTML5 or consoles "
"(with low memory footprint)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:213
msgid ""
"Objects can have a set of signals defined (similar to Delegates in other "
"languages). Connecting to them is rather easy:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:222
msgid ""
"The method ``_node_entered_tree`` must be registered to the class using "
"``ClassDB::register_method`` (explained before)."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:225
msgid ""
"Adding signals to a class is done in ``_bind_methods``, using the "
"``ADD_SIGNAL`` macro, for example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:235
msgid ""
":ref:`Reference <class_reference>` inherits from Object and holds a "
"reference count. It is the base for reference counted object types. "
"Declaring them must be done using Ref<> template. For example:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:247
msgid ""
"``myref`` is reference counted. It will be freed when no more Ref<> "
"templates point to it."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:253
msgid ""
"`core/reference.h <https://github.com/godotengine/godot/blob/master/core/"
"reference.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:256
msgid "Resources:"
msgstr "리소스:"

#: ../../docs/development/cpp/object_class.rst:258
msgid ""
":ref:`Resource <class_resource>` inherits from Reference, so all resources "
"are reference counted. Resources can optionally contain a path, which "
"reference a file on disk. This can be set with ``resource.set_path(path)``. "
"This is normally done by the resource loader though. No two different "
"resources can have the same path, attempt to do so will result in an error."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:264
msgid "Resources without a path are fine too."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:269
msgid ""
"`core/resource.h <https://github.com/godotengine/godot/blob/master/core/"
"resource.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:272
msgid "Resource loading"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:274
msgid "Resources can be loaded with the ResourceLoader API, like this:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:280
msgid ""
"If a reference to that resource has been loaded previously and is in memory, "
"the resource loader will return that reference. This means that there can be "
"only one resource loaded from a file referenced on disk at the same time."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:285
msgid "resourceinteractiveloader (TODO)"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:290
msgid ""
"`core/io/resource_loader.h <https://github.com/godotengine/godot/blob/master/"
"core/io/resource_loader.h>`__"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:293
msgid "Resource saving"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:295
msgid "Saving a resource can be done with the resource saver API:"
msgstr ""

#: ../../docs/development/cpp/object_class.rst:301
msgid ""
"Instance will be saved. Sub resources that have a path to a file will be "
"saved as a reference to that resource. Sub resources without a path will be "
"bundled with the saved resource and assigned sub-IDs, like \"res://"
"someresource.res::1\". This also helps to cache them when loaded."
msgstr ""

#: ../../docs/development/cpp/object_class.rst:309
msgid ""
"`core/io/resource_saver.h <https://github.com/godotengine/godot/blob/master/"
"core/io/resource_saver.h>`__"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:2
msgid "Inheritance class tree"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:5
msgid "Object"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:15
msgid "Control"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:20
msgid "Node2D"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:25
msgid "Spatial"
msgstr ""

#: ../../docs/development/cpp/inheritance_class_tree.rst:29
msgid "Source files: :download:`class_tree.zip <files/class_tree.zip>`."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:4
msgid "Custom modules in C++"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:7
#: ../../docs/development/cpp/binding_to_external_libraries.rst:7
msgid "Modules"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:9
msgid ""
"Godot allows extending the engine in a modular way. New modules can be "
"created and then enabled/disabled. This allows for adding new engine "
"functionality at every level without modifying the core, which can be split "
"for use and reuse in different modules."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:14
msgid ""
"Modules are located in the ``modules/`` subdirectory of the build system. By "
"default, many different modules exist, such as GDScript (which, yes, is not "
"part of the base engine), the Mono runtime, a regular expressions module, "
"and others. As many new modules as desired can be created and combined, and "
"the SCons build system will take care of it transparently."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:22
#: ../../docs/development/cpp/custom_resource_format_loaders.rst:24
#: ../../docs/development/cpp/custom_audiostreams.rst:29
#: ../../docs/development/cpp/custom_godot_servers.rst:26
msgid "What for?"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:24
msgid ""
"While it's recommended that most of a game is written in scripting (as it is "
"an enormous time saver), it's perfectly possible to use C++ instead. Adding C"
"++ modules can be useful in the following scenarios:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:28
msgid "Binding an external library to Godot (like PhysX, FMOD, etc)."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:29
msgid "Optimize critical parts of a game."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:30
msgid "Adding new functionality to the engine and/or editor."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:31
msgid "Porting an existing game."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:32
msgid "Write a whole, new game in C++ because you can't live without C++."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:35
msgid "Creating a new module"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:37
msgid ""
"Before creating a module, make sure to download the source code of Godot and "
"manage to compile it. There are tutorials in the documentation for this."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:40
msgid ""
"To create a new module, the first step is creating a directory inside "
"``modules/``. If you want to maintain the module separately, you can "
"checkout a different VCS into modules and use it."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:44
msgid ""
"The example module will be called \"summator\", and is placed inside the "
"Godot source tree (``C:\\godot`` refers to wherever the Godot sources are "
"located):"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:55
msgid "Inside we will create a simple summator class:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:83
msgid "And then the cpp file."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:117
msgid ""
"Then, the new class needs to be registered somehow, so two more files need "
"to be created:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:125
#: ../../docs/development/cpp/binding_to_external_libraries.rst:76
msgid "With the following contents:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:153
msgid ""
"Next, we need to create a ``SCsub`` file so the build system compiles this "
"module:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:163
msgid ""
"With multiple sources, you can also add each file individually to a Python "
"string list:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:171
msgid ""
"This allows for powerful possibilities using Python to construct the file "
"list using loops and logic statements. Look at some of the other modules "
"that ship with Godot by default for examples."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:175
#: ../../docs/development/cpp/binding_to_external_libraries.rst:155
msgid ""
"To add include directories for the compiler to look at you can append it to "
"the environment's paths:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:183
#: ../../docs/development/cpp/binding_to_external_libraries.rst:166
msgid ""
"If you want to add custom compiler flags when building your module, you need "
"to clone `env` first, so it won't add those flags to whole Godot build "
"(which can cause errors). Example `SCsub` with custom flags:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:196
msgid ""
"And finally, the configuration file for the module, this is a simple python "
"script that must be named ``config.py``:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:209
msgid ""
"The module is asked if it's ok to build for the specific platform (in this "
"case, True means it will build for every platform)."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:212
msgid ""
"And that's it. Hope it was not too complex! Your module should look like "
"this:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:224
msgid ""
"You can then zip it and share the module with everyone else. When building "
"for every platform (instructions in the previous sections), your module will "
"be included."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:229
#: ../../docs/development/cpp/binding_to_external_libraries.rst:197
#: ../../docs/development/cpp/creating_android_modules.rst:303
msgid "Using the module"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:231
#: ../../docs/development/cpp/binding_to_external_libraries.rst:199
msgid "You can now use your newly created module from any script:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:242
msgid "And the output will be ``60``."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:244
msgid ""
"The previous Summator example is great for small, custom modules, but what "
"if you want to use a larger, external library?  Refer to :ref:"
"`doc_binding_to_external_libraries` for details about binding to external "
"libraries."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:250
msgid "Improving the build system for development"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:252
msgid ""
"So far we defined a clean and simple SCsub that allows us to add the sources "
"of our new module as part of the Godot binary."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:255
msgid ""
"This static approach is fine when we want to build a release version of our "
"game given we want all the modules in a single binary."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:258
msgid ""
"However the trade-of is every single change means a full recompilation of "
"the game. Even if SCons is able to detect and recompile only the file that "
"have changed, finding such files and eventually linking the final binary is "
"a long and costly part."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:263
msgid ""
"The solution to avoid such a cost is to build our own module as a shared "
"library that will be dynamically loaded when starting our game's binary."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:295
msgid ""
"Once compiled, we should end up with a ``bin`` directory containing both the "
"``godot*`` binary and our ``libsummator*.so``. However given the .so is not "
"in a standard directory (like ``/usr/lib``), we have to help our binary find "
"it during runtime with the ``LD_LIBRARY_PATH`` environ variable:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:305
msgid ""
"**note**: Pay attention you have to ``export`` the environ variable "
"otherwise you won't be able to play you project from within the editor."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:308
msgid ""
"On top of that, it would be nice to be able to select whether to compile our "
"module as shared library (for development) or as a part of the Godot binary "
"(for release). To do that we can define a custom flag to be passed to SCons "
"using the `ARGUMENT` command:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:338
msgid ""
"Now by default ``scons`` command will build our module as part of godot's "
"binary and as a shared library when passing ``summator_shared=yes``."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:341
msgid ""
"Finally you can even speedup build further by explicitly specifying your "
"shared module as target in the scons command:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:349
msgid "Writing custom documentation"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:351
msgid ""
"Writing documentation may seem like a boring task, but it is highly "
"recommended to document your newly created module in order to make it easier "
"for users to benefit from it. Not to mention that the code you've written "
"one year ago may become indistinguishable from the code that was written by "
"someone else, so be kind to your future self!"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:357
msgid "There are several steps in order to setup custom docs for the module:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:359
msgid ""
"Make a new directory in the root of the module. The directory name can be "
"anything, but we'll be using the ``doc_classes`` name throughout this "
"section."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:362
msgid "Append the following code snippet to ``config.py``:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:374
msgid ""
"The ``get_doc_classes()`` method is necessary for the build system to know "
"which documentation classes of the module must be merged, since the module "
"may contain several classes. Replace ``ClassName`` with the name of the "
"class you want to write documentation for. If you need docs for more than "
"one class, append those as well."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:380
msgid ""
"The ``get_doc_path()`` method is used by the build system to determine the "
"location of the docs. In our case, they will be located in the "
"``doc_classes`` directory."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:384
msgid "Run command:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:390
msgid ""
"This will dump the engine API reference to the given ``<path>`` in XML "
"format. Notice that you'll need to configure your ``PATH`` to locate Godot's "
"executable, and make sure that you have write access rights. If not, you "
"might encounter an error similar to the following:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:400
msgid "Get generated doc file from ``godot/doc/classes/ClassName.xml``"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:402
msgid ""
"Copy this file to ``doc_classes``, optionally edit it, then compile the "
"engine."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:404
msgid ""
"The build system will fetch the documentation files from the ``doc_classes`` "
"directory and merge them with the base types. Once the compilation process "
"is finished, the docs will become accessible within the engine's built-in "
"documentation system."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:408
msgid ""
"In order to keep documentation up-to-date, all you'll have to do is simply "
"modify one of the ``ClassName.xml`` files and recompile the engine from now "
"on."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:412
msgid "Summing up"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:414
msgid "Remember to:"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:416
msgid "use ``GDCLASS`` macro for inheritance, so Godot can wrap it"
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:417
msgid ""
"use ``_bind_methods`` to bind your functions to scripting, and to allow them "
"to work as callbacks for signals."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:420
msgid ""
"But this is not all, depending what you do, you will be greeted with some "
"(hopefully positive) surprises."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:423
msgid ""
"If you inherit from :ref:`class_Node` (or any derived node type, such as "
"Sprite), your new class will appear in the editor, in the inheritance tree "
"in the \"Add Node\" dialog."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:426
msgid ""
"If you inherit from :ref:`class_Resource`, it will appear in the resource "
"list, and all the exposed properties can be serialized when saved/loaded."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:429
msgid ""
"By this same logic, you can extend the Editor and almost any area of the "
"engine."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:4
msgid "Binding to external libraries"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:9
msgid ""
"The Summator example in :ref:`doc_custom_modules_in_c++` is great for small, "
"custom modules, but what if you want to use a larger, external library? "
"Let's look at an example using Festival, a speech synthesis (text-to-speech) "
"library written in C++."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:14
msgid ""
"To bind to an external library, set up a module directory similar to the "
"Summator example:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:20
msgid "Next, you will create a header file with a simple TTS class:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:44
msgid "And then you'll add the cpp file."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:68
msgid ""
"Just as before, the new class needs to be registered somehow, so two more "
"files need to be created:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:104
msgid ""
"Next, you need to create a ``SCsub`` file so the build system compiles this "
"module:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:115
msgid ""
"You'll need to install the external library on your machine to get the .a "
"library files.  See the library's official documentation for specific "
"instructions on how to do this for your operation system.  We've included "
"the installation commands for Linux below, for reference."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:126
msgid ""
"**Important:** The voices that Festival uses (and any other potential "
"external/3rd-party resource) all have varying licenses and terms of use; "
"some (if not most) of them may be be problematic with Godot, even if the "
"Festival Library itself is MIT License compatible. Please be sure to check "
"the licenses and terms of use."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:131
msgid ""
"The external library will also need to be installed inside your module to "
"make the source files accessible to the compiler, while also keeping the "
"module code self-contained.  The festival and speech_tools libraries can be "
"installed from the modules/tts/ directory via git using the following "
"commands:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:141
msgid ""
"If you don't want the external repository source files committed to your "
"repository, you can link to them instead by adding them as submodules (from "
"within the modules/tts/ directory), as seen below:"
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:150
msgid ""
"**Important:** Please note that Git submodules are not used in the Godot "
"repository.  If you are developing a module to be merged into the main Godot "
"repository, you should not use submodules.  If your module doesn't get "
"merged in, you can always try to implement the external library as a "
"GDNative C++ plugin."
msgstr ""

#: ../../docs/development/cpp/binding_to_external_libraries.rst:179
#, fuzzy
msgid "The final module should look like this:"
msgstr "최종 스크립트는 다음과 같아야 합니다:"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:208
msgid "And the output will be ``is_spoken: True`` if the text is spoken."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:4
msgid "Custom resource format loaders"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:9
msgid ""
"ResourceFormatLoader is a factory interface for loading file assets. "
"Resources are primary containers. When load is called on the same file path "
"again, the previous loaded Resource will be referenced. Naturally, loaded "
"resources must be stateless."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:14
msgid ""
"This guide assumes the reader knows how to create C++ modules and Godot data "
"types. If not, refer to this guide :ref:`doc_custom_modules_in_c++`."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:20
msgid ":ref:`ResourceLoader<class_resourceloader>`"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:21
msgid ""
"`core/io/resource_loader.cpp <https://github.com/godotengine/godot/blob/"
"master/core/io/resource_loader.cpp#L258>`__"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:26
msgid "Adding new support for many file formats"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:27
msgid "Audio formats"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:28
msgid "Video formats"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:29
msgid "Machine learning models"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:32
msgid "What not?"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:34
msgid "Raster images"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:36
msgid "ImageFormatLoader should be used to load images."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:41
msgid ""
"`core/io/image_loader.h <https://github.com/godotengine/godot/blob/master/"
"core/io/image_loader.h>`__"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:45
msgid "Creating a ResourceFormatLoader"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:47
msgid ""
"Each file format consist of a data container and a ``ResourceFormatLoader``."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:49
msgid ""
"ResourceFormatLoaders are usually simple classes which return all the "
"necessary metadata for supporting new extensions in Godot. The class must "
"the return the format name and the extension string."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:53
msgid ""
"In addition, ResourceFormatLoaders must convert file paths into resources "
"with the ``load`` function. To load a resource, ``load`` must read and "
"handle data serialization."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:110
msgid "Creating custom data types"
msgstr "커스텀 데이터 타입 생성하기"

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:112
msgid ""
"Godot may not have a proper substitute within its :ref:`doc_core_types` or "
"managed resources. Godot needs a new registered data type to understand "
"additional binary formats such as machine learning models."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:116
msgid "Here is an example of how to create a custom datatype"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:174
msgid "Considerations"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:176
msgid ""
"Some libraries may not define certain common routines such as IO handling. "
"Therefore, Godot call translations are required."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:179
msgid ""
"For example, here is the code for translating ``FileAccess`` calls into "
"``std::istream``."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:215
msgid "`istream <http://www.cplusplus.com/reference/istream/istream/>`__"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:216
msgid ""
"`streambuf <http://www.cplusplus.com/reference/streambuf/streambuf/?"
"kw=streambuf>`__"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:217
msgid ""
"`core/io/fileaccess.h <https://github.com/godotengine/godot/blob/master/core/"
"os/file_access.h>`__"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:220
msgid "Registering the new file format"
msgstr "새 파일 형식 등록"

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:222
msgid ""
"Godot registers ``ResourcesFormatLoader`` with a ``ResourceLoader`` handler. "
"The handler selects the proper loader automatically when ``load`` is called."
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:249
msgid ""
"`core/io/resource_loader.cpp <https://github.com/godotengine/godot/blob/"
"master/core/io/resource_loader.cpp#L280>`__"
msgstr ""

#: ../../docs/development/cpp/custom_resource_format_loaders.rst:252
msgid "Loading it on GDScript"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:4
msgid "Custom AudioStreams"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:9
msgid ""
"AudioStream is the base class of all audio emitting objects. "
"AudioStreamPlayer binds onto an AudioStream to emit PCM data into an "
"AudioServer which manages audio drivers."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:13
msgid ""
"All audio resources require two audio based classes: AudioStream and "
"AudioStreamPlayback. As a data container, AudioStream contains the resource "
"and exposes itself to GDScript. AudioStream references its own internal "
"custom AudioStreamPlayback which translates AudioStream into PCM data."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:19
msgid ""
"This guide assumes the reader knows how to create C++ modules. If not, refer "
"to this guide :ref:`doc_custom_modules_in_c++`."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:25
#: ../../docs/development/cpp/custom_audiostreams.rst:119
#: ../../docs/development/cpp/custom_audiostreams.rst:350
msgid ""
"`servers/audio/audio_stream.h <https://github.com/godotengine/godot/blob/"
"master/servers/audio/audio_stream.h>`__"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:26
#: ../../docs/development/cpp/custom_audiostreams.rst:351
msgid ""
"`scene/audio/audioplayer.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/audio/audio_player.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:31
msgid "Binding external libraries (like Wwise, FMOD, etc)."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:32
msgid "Adding custom audio queues"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:33
msgid "Adding support for more audio formats"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:36
msgid "Create an AudioStream"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:38
msgid ""
"An AudioStream consists of three components: data container, stream name, "
"and an AudioStreamPlayback friend class generator. Audio data can be loaded "
"in a number of ways such as with an internal counter for a tone generator, "
"internal/external buffer, or a file reference."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:43
msgid ""
"Some AudioStreams need to be stateless such as objects loaded from "
"ResourceLoader. ResourceLoader loads once and references the same object "
"regardless how many times ``load`` is called on a specific resource. "
"Therefore, playback state must be self contained in AudioStreamPlayback."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:123
msgid "Create an AudioStreamPlayback"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:125
msgid ""
"AudioStreamPlayer uses ``mix`` callback to obtain PCM data. The callback "
"must match sample rate and fill the buffer."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:127
msgid ""
"Since AudioStreamPlayback is controlled by the audio thread, i/o and dynamic "
"memory allocation are forbidden."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:232
msgid "Resampling"
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:234
msgid ""
"Godot’s AudioServer currently uses 44100 Hz sample rate. When other sample "
"rates are needed such as 48000, either provide one or use "
"AudioStreamPlaybackResampled. Godot provides cubic interpolation for audio "
"resampling."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:238
msgid ""
"Instead of overloading ``mix``, AudioStreamPlaybackResampled uses "
"``_mix_internal`` to query AudioFrames and ``get_stream_sampling_rate`` to "
"query current mix rate."
msgstr ""

#: ../../docs/development/cpp/custom_audiostreams.rst:349
msgid ""
"`core/math/audio_frame.h <https://github.com/godotengine/godot/blob/master/"
"core/math/audio_frame.h>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:4
msgid "Custom Godot servers"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:9
msgid ""
"Godot implements multi-threading as servers. Servers are daemons which "
"manages data, processes, and pushes the result. Servers implement the "
"mediator pattern which interprets resource ID and process data for the "
"engine and other modules. In addition, the server claims ownership for its "
"RID allocations."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:15
msgid ""
"This guide assumes the reader knows how to create C++ modules and Godot data "
"types. If not, refer to :ref:`doc_custom_modules_in_c++`."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:21
msgid ""
"`Why does Godot use servers and RIDs? <https://godotengine.org/article/why-"
"does-godot-use-servers-and-rids>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:22
msgid "`Singleton pattern <https://en.wikipedia.org/wiki/Singleton_pattern>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:23
msgid "`Mediator pattern <https://en.wikipedia.org/wiki/Mediator_pattern>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:28
msgid "Adding artificial intelligence."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:29
msgid "Adding custom asynchronous threads."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:30
msgid "Adding support for a new input device."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:31
msgid "Adding writing threads."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:32
msgid "Adding a custom VoIP protocol."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:33
msgid "And more..."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:36
msgid "Creating a Godot server"
msgstr "Godot 서버 만들기"

#: ../../docs/development/cpp/custom_godot_servers.rst:38
msgid ""
"At minimum, a server must have a static instance, a sleep timer, a thread "
"loop, an initialization state and a cleanup procedure."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:274
msgid "Custom managed resource data"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:276
msgid ""
"Godot servers implement a mediator pattern. All data types inherit "
"``RID_Data``. ``RID_Owner<MyRID_Data>`` owns the object when ``make_rid`` is "
"called. During debug mode only, RID_Owner maintains a list of RIDs. In "
"practice, RIDs are similar to writing object-oriented C code."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:318
msgid ":ref:`RID<class_rid>`"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:322
msgid "Registering the class in GDScript"
msgstr "GDScript에서 클래스 등록"

#: ../../docs/development/cpp/custom_godot_servers.rst:324
msgid ""
"Servers are allocated in ``register_types.cpp``. The constructor sets the "
"static instance and ``init()`` creates the managed thread; "
"``unregister_types.cpp`` cleans up the server."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:328
msgid ""
"Since a Godot server class creates an instance and binds it to a static "
"singleton, binding the class might not reference the correct instance. "
"Therefore, a dummy class must be created to reference the proper Godot "
"server."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:332
msgid ""
"In ``register_server_types()``, ``Engine::get_singleton()->add_singleton`` "
"is used to register the dummy class in GDScript."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:376
msgid ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:379
msgid "Bind methods"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:381
msgid ""
"The dummy class binds singleton methods to GDScript. In most cases, the "
"dummy class methods wraps around."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:389
msgid "Binding Signals"
msgstr "바인딩 시그널"

#: ../../docs/development/cpp/custom_godot_servers.rst:391
msgid ""
"It is possible to emit signals to GDScript by calling the GDScript dummy "
"object."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:466
msgid "MessageQueue"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:468
msgid ""
"In order to send commands into SceneTree, MessageQueue is a thread-safe "
"buffer to queue set and call methods for other threads. To queue a command, "
"obtain the target object RID and use either ``push_call``, ``push_set``, or "
"``push_notification`` to execute the desired behavior. The queue will be "
"flushed whenever either ``SceneTree::idle`` or ``SceneTree::iteration`` is "
"executed."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:477
msgid ""
"`core/message_queue.cpp <https://github.com/godotengine/godot/blob/master/"
"core/message_queue.cpp>`__"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:480
msgid "Summing it up"
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:482
msgid "Here is the GDScript sample code:"
msgstr "GDScript 샘플 코드입니다:"

#: ../../docs/development/cpp/custom_godot_servers.rst:508
msgid ""
"The actual `Hilbert Hotel <https://en.wikipedia.org/wiki/Hilbert"
"%27s_paradox_of_the_Grand_Hotel>`__ is impossible."
msgstr ""

#: ../../docs/development/cpp/custom_godot_servers.rst:509
msgid "Connecting signal example code is pretty hacky."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:4
msgid "Creating Android modules"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:9
msgid ""
"Making video games portable is all fine and dandy, until mobile gaming "
"monetization shows up."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:12
msgid ""
"This area is complex, usually a mobile game that monetizes needs special "
"connections to a server for things like:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:15
msgid "Analytics"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:16
msgid "In-app purchases"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:17
msgid "Receipt validation"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:18
msgid "Install tracking"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:19
msgid "Ads"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:20
msgid "Video ads"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:21
msgid "Cross-promotion"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:22
msgid "In-game soft & hard currencies"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:23
msgid "Promo codes"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:24
msgid "A/B testing"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:25
msgid "Login"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:26
msgid "Cloud saves"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:27
msgid "Leaderboards and scores"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:28
msgid "User support & feedback"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:29
msgid "Posting to Facebook, Twitter, etc."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:30
msgid "Push notifications"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:32
msgid ""
"On iOS, you can write a C++ module and take advantage of the C++/ObjC "
"intercommunication."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:35
msgid ""
"On Android, interfacing with C++ through JNI (Java Native Interface) isn't "
"as convenient."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:38
msgid "Maybe REST?"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:40
msgid ""
"Most of these APIs allow communication via REST/JSON APIs. Godot has great "
"support for HTTP, HTTPS and JSON, so consider this as an option that works "
"on every platform. Only write the code once and you are set to go."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:46
msgid "Android module"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:48
msgid ""
"Writing an Android module is similar to :ref:`doc_custom_modules_in_c++`, "
"but needs a few more steps."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:51
msgid ""
"Make sure you are familiar with building your own :ref:`Android export "
"templates <doc_compiling_for_android>`, as well as creating :ref:"
"`doc_custom_modules_in_c++`."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:55
msgid "config.py"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:57
msgid ""
"In the config.py for the module, some extra functions are provided for "
"convenience. First, it's often wise to detect if Android is the target "
"platform being built for and only enable building in this case:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:66
msgid ""
"If more than one platform can be built (typical if implementing the module "
"also for iOS), check manually for Android in the configure functions for "
"Android (or other platform-specific) code:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:80
msgid "Java singleton"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:82
msgid ""
"An Android module will usually have a singleton class that will load it, "
"this class inherits from ``Godot.SingletonBase``. Resource identifiers for "
"any additional resources you have provided for the module will be in the "
"``com.godot.game.R`` class, so you'll likely want to import it."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:87
msgid "A singleton object template follows:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:153
msgid ""
"Calling back to Godot from Java is a little more difficult. The instance ID "
"of the script must be known first, this is obtained by calling "
"``get_instance_ID()`` on the script. This returns an integer that can be "
"passed to Java."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:158
msgid ""
"From Java, use the ``calldeferred`` function to communicate back with Godot. "
"Java will most likely run in a separate thread, so calls are deferred:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:165
msgid ""
"Add this singleton to the build of the project by adding the following to "
"config.py:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:181
msgid "AndroidManifest"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:183
msgid ""
"Some SDKs need custom values in AndroidManifest.xml. Permissions can be "
"edited from the Godot exporter so there is no need to add those, but maybe "
"other functionalities are needed."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:187
msgid ""
"Create the custom chunk of android manifest and put it inside the module, "
"add it like this:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:206
msgid ""
"In order to provide additional resources with your module you have to add "
"something like this:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:216
msgid ""
"Now you can refer to those resources by their id (``R.string.my_string``, "
"and the like) by importing the ``com.godot.game.R`` class in your Java code."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:220
msgid "Assets"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:222
msgid ""
"Similarly, you can add any type of raw asset files to your app's asset "
"directory like this:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:231
msgid ""
"Assets don't have resource ids, but can be read with their file name as "
"streams of bytes with the help of the Android AssetManager class."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:235
msgid "SDK library"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:237
msgid ""
"So, finally it's time to add the SDK library. The library can come in two "
"flavors, a JAR file or an Android project for ant. JAR is the easiest to "
"integrate, put it in the module directory and add it:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:257
msgid "SDK project"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:259
msgid ""
"When this is an Android project, things usually get more complex. Copy the "
"project folder inside the module directory and configure it:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:266
msgid ""
"As of this writing, Godot uses minsdk 18 and target sdk 27. If this ever "
"changes, it should be reflected in the manifest template: `AndroidManifest."
"xml.template <https://github.com/godotengine/godot/blob/master/platform/"
"android/AndroidManifest.xml.template>`__"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:270
msgid "Then, add the module folder to the project:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:286
msgid "Building"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:288
msgid ""
"As you probably modify the contents of the module, and modify your .java "
"inside the module, you need the module to be built with the rest of Godot, "
"so compile android normally."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:296
msgid ""
"This will cause your module to be included, the .jar will be copied to the "
"java folder, the .java will be copied to the sources folder, etc. Each time "
"you modify the .java, scons must be called."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:300
msgid ""
"Afterwards, continue the steps for compiling android  :ref:"
"`doc_compiling_for_android`."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:305
msgid ""
"To use the module from GDScript, first enable the singleton by adding the "
"following line to project.godot:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:314
msgid ""
"More than one singleton module can be enabled by separating with commas:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:322
msgid "Then request the singleton Java object from Globals like this:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:338
msgid "Godot crashes upon load"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:340
msgid "Check ``adb logcat`` for possible problems, then:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:342
msgid "Make sure libgodot_android.so is in the ``libs/armeabi`` folder"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:343
msgid ""
"Check that the methods used in the Java singleton only use simple Java "
"datatypes, more complex ones are not supported."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:347
msgid "Future"
msgstr "미래"

#: ../../docs/development/cpp/creating_android_modules.rst:349
msgid ""
"Godot has an experimental Java API Wrapper that allows to use the entire "
"Java API from GDScript."
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:352
msgid "It's simple to use and it's used like this:"
msgstr ""

#: ../../docs/development/cpp/creating_android_modules.rst:358
msgid ""
"This is most likely not functional yet, if you want to test it and help us "
"make it work, contact us through the `developer mailing list <https://groups."
"google.com/forum/#!forum/godot-engine>`__."
msgstr ""

#: ../../docs/development/file_formats/index.rst:2
msgid "Godot file formats"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:2
msgid "TSCN file format"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:4
msgid ""
"A :code:`.tscn` File format is the \"Text SCeNe\" file format and represents "
"a single scene-tree inside Godot. TSCN files have the advantage of being "
"nearly human-readable and easy for version control systems to manage. During "
"import the TSCN files are compiled into binary :code:`.scn` files stored "
"inside the .import folder. This reduces the data size and speed up loading."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:10
msgid ""
"The :code:`.escn` file format is identical to the TSCN file format, but is "
"used to indicate to Godot that the file has been exported from another "
"program and should not be edited by the user from within Godot."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:14
msgid ""
"For those looking for a complete description, the parsing is handled in the "
"file `scene_format_text.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/resources/scene_format_text.cpp>`_ in the class :code:"
"`ResourceFormatLoaderText`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:19
msgid "File structure"
msgstr "파일 구조"

#: ../../docs/development/file_formats/tscn.rst:21
msgid "There are five main sections inside the TSCN File:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:23
msgid "File Descriptor"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:24
#: ../../docs/development/file_formats/tscn.rst:266
msgid "External resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:25
#: ../../docs/development/file_formats/tscn.rst:287
msgid "Internal resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:29
msgid ""
"The file descriptor looks like :code:`[gd_scene load_steps=1 format=2]` And "
"should be the first entry in the file. The load_steps parameter should (in "
"theory) be the number of resources within the file, though in practice its "
"value seems not to matter."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:34
msgid ""
"These sections should appear in order, but it can be hard to distinguish "
"them. The only difference between them is the first element in the heading "
"for all of the items in the section. For example, the heading of all "
"external resources should start with :code:`[ext_resource .....]`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:41
msgid "Entries inside the file"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:43
msgid ""
"A heading looks like: :code:`[<resource_type> key=value key=value "
"key=value ...]` Where resource_type is one of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:47
msgid "ext_resource"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:48
msgid "sub_resource"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:49
msgid "node"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:50
msgid "connection"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:52
msgid ""
"Underneath every heading comes zero or more :code:`key = value` pairs. The "
"values can be complex datatypes such as arrays, transformations, colors, and "
"so on. For example, a spatial node looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:62
msgid "The scene tree"
msgstr "씬 트리"

#: ../../docs/development/file_formats/tscn.rst:64
msgid ""
"The scene tree is made up of... nodes! The heading of each node consists of "
"its name, parent and (most of the time) a type. For example :code:`[node "
"type=\"Camera\" name=\"PlayerCamera\" parent=\"Player/Head\"]`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:68
msgid "Other valid keywords include:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:70
msgid "instance"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:71
msgid "instance_placeholder"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:72
msgid "owner"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:73
msgid "index (if two nodes have the same name)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:74
msgid "groups"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:76
msgid ""
"The first node in the file should not have the :code:`parent=Path/To/Node` "
"entry in it's heading, and it is the scene root. All scene files should have "
"exactly one scene root. It it does not, Godot will fail to import the file. "
"The parent path of other nodes should be absolute, but without the scene "
"root's name. If it is a direct child of the scene root, it should be :code:`"
"\".\"`. Here is an example scene tree (but without any node content)."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:90
msgid ""
"Similar to the internal resource, the document for each node is currently "
"incomplete. Fortunately it is easy to find out because you can simply save a "
"file with that node in it. Some example nodes are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:130
msgid ""
"A tree structure is not enough to represent the whole scene, Godot use a :"
"code:`NodePath(Path/To/Node)` structure to refer to another node or "
"attribute of the node anywhere in the scene tree. Some typical usages of "
"NodePath like mesh node use :code:`NodePath()` to point to its skeleton, "
"animation track use :code:`NodePath()` points to animated attribute in node."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:155
msgid ""
"Skeleton node inherits Spatial node, besides that it may have a list of "
"bones described in key, value pair in the format :code:`bones/Id/"
"Attribute=Value`, attributes of bone consists of"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:159
msgid "name"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:160
msgid "parent"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:161
msgid "rest"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:162
msgid "pose"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:163
#: ../../docs/development/file_formats/tscn.rst:385
msgid "enabled"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:164
msgid "bound_children"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:166
msgid ":code:`name` must put as the first attribute of each bone"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:168
msgid ""
":code:`parent` is the index of parent bone in the bone list, with parent "
"index, the bone list is built to a bone tree"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:171
msgid ":code:`rest` is the transform matrix of bone in rest position"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:173
msgid ":code:`pose` is the pose matrix use :code:`rest` as basis"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:175
msgid ""
":code:`bound_children` is a list of NodePath() points to BoneAttachments "
"belong to this bone"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:178
msgid "An example of a skeleton node with two bones:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:198
msgid "BoneAttachment"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:200
msgid ""
"BoneAttachment node is an intermediate node to describe some node being "
"parented to a single bone in Skeleton node. The BoneAttachment has a :code:"
"`bone_name=NameOfBone`, and the corresponding bone being the parent has the "
"BoneAttachment node in its :code:`bound_children` list."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:205
msgid "An example of one MeshInstance parented to a bone in Skeleton:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:229
msgid "AnimationPlayer"
msgstr "AnimationPlayer"

#: ../../docs/development/file_formats/tscn.rst:231
msgid ""
"AnimationPlayer works as an animation lib. it has animations listed in the "
"format :code:`anim/Name=SubResource(ResourceId)`, each refers to a Animation "
"internal resource. All the animation resources use the root node of "
"AnimationPlayer. The root node is stored as :code:`root_node=NodePath(Path/"
"To/Node)`."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:251
msgid ""
"Resources are components that make up the nodes. For example, a MeshInstance "
"node will have an accompanying ArrayMesh resource. The ArrayMesh resource "
"may be either internal or external to the TSCN file."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:255
msgid ""
"References to the resources are handled by id numbers in the resources "
"heading. External resources and internal resource are referred to with :code:"
"`ExtResource(id)` and :code:`SubResource(id)`. Because there have different "
"methods to refer to internal and external resource, you can have the same ID "
"for both an internal and external resource."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:261
msgid ""
"For example, to refer to the resource :code:`[ext_resource id=3 type="
"\"PackedScene\" path=....]` you would use :code:`ExtResource(3)`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:268
msgid ""
"External resources are links to resources not contained within the TSCN file "
"itself. An external resource consists of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:271
msgid "A path"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:272
msgid "A type"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:273
msgid "An ID"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:275
msgid ""
"Godot always generates absolute paths relative to the resource directory and "
"thus prefixed with :code:`res://`, but paths relative to the TSCN file's "
"location are also valid."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:279
msgid "Some example external resources are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:289
msgid ""
"A TSCN file can contain meshes, materials and other data, and these are "
"contained in the internal resources section of the file. The heading for an "
"internal resource looks similar to those of external resources, but does not "
"have a path. Internal resources also have :code:`key=value` pairs under each "
"heading. For example, a capsule collision shape looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:302
msgid ""
"Some internal resource contain links to other internal resources (such as a "
"mesh having a material). In this case, the referring resource must appear "
"before the reference to it. Thus, in the internal resources section of the "
"file, order does matter."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:307
msgid ""
"Unfortunately, documentation on the formats for these subresources is not "
"complete, and while some can be found through inspecting resources of saved "
"files, others can only be found by looking through Godot's source."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:312
msgid "ArrayMesh"
msgstr "ArrayMesh"

#: ../../docs/development/file_formats/tscn.rst:314
msgid ""
"ArrayMesh consists of several surfaces, each in the format :code:`surface"
"\\Index={}`, each surface is a set of vertex and a material."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:317
msgid "TSCN support two format of surface,"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:319
msgid "for the old format, each surface has three essential keys:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:321
msgid "primitive"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:322
msgid "arrays"
msgstr "arrays"

#: ../../docs/development/file_formats/tscn.rst:323
msgid "morph_arrays"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:325
msgid ""
":code:`primitive` is an enumerate variable, :code:`primitive=4` which is "
"PRIMITIVE_TRIANGLES is frequently used."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:328
msgid ":code:`arrays` as the name suggests is an array of array, it contains:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:330
msgid "An array of vertex position"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:331
msgid "Tangents array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:332
msgid "Vertex color array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:333
msgid "UV array 1"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:334
msgid "UV array 2"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:335
msgid "Bone index array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:336
msgid "Bone weight array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:337
msgid "Vertex index array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:339
msgid ""
":code:`morph_arrays` is an array of morph, each morph is exactly an :code:"
"`arrays` without vertex index array."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:342
msgid "An example of ArrayMesh:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:367
msgid ""
"An animation resource consists of tracks. Besides, it has 'length', 'loop' "
"and 'step' applied to all the tracks."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:370
msgid "length"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:371
msgid "loop"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:372
msgid "step"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:374
msgid ":code:`length` and :code:`step` are both time in seconds"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:376
msgid ""
"Each track is described by a list of (key, value) pairs in the format :code:"
"`tracks/Id/Attribute`, it includes:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:379
msgid "type"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:380
msgid "path"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:381
msgid "interp"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:382
msgid "keys"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:383
msgid "loop_wrap"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:384
msgid "imported"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:387
msgid ""
"The :code:`type` must be put as the first attribute of each track. The value "
"of :code:`type` can be:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:390
msgid "'transform'"
msgstr "'변형'"

#: ../../docs/development/file_formats/tscn.rst:391
msgid "'value'"
msgstr "'값'"

#: ../../docs/development/file_formats/tscn.rst:392
msgid "'method'"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:394
msgid ""
"The :code:`path` has the format :code:`NodePath(Path/To/Node:Attribute)`. It "
"is the path from animation root node (property of AnimationPlayer) to the "
"animated node or attribute."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:398
msgid ""
"The :code:`interp` is the method to interpolate frames from the keyframes. "
"it is a enum variable and can has value:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:401
msgid "0 (constant)"
msgstr "0 (상수)"

#: ../../docs/development/file_formats/tscn.rst:402
msgid "1 (linear)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:403
msgid "2 (cubic)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:405
msgid ""
"The :code:`keys` is the keyframes, it appears as a PoolRealArray() but have "
"different structure for track with different type"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:408
msgid ""
"A transform track use every 12 real number in the :code:`keys` to describte "
"a keyframe. The first number is the timestamp, the second number is the "
"transition (default 1.0 in transform track), followed by a three number "
"translation vector, followed by four number rotation quaternion (x,y,z,w) "
"and finally a three number scale vector."
msgstr ""

#: ../../docs/content/3d/index.rst:2
msgid "Creating 3D content"
msgstr "3D 내용물 만들기"

#: ../../docs/content/3d/making_trees.rst:4
msgid "Making trees"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:6
msgid ""
"This is a short tutorial on how to make trees and other types of vegetation "
"from scratch."
msgstr ""

#: ../../docs/content/3d/making_trees.rst:8
msgid ""
"The aim is to not focus on the modelling techniques (there are plenty of "
"tutorials about that), but how to make them look good in Godot."
msgstr ""

#: ../../docs/content/3d/making_trees.rst:13
msgid "Start with a tree"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:15
msgid "I took this tree from SketchFab:"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:19
msgid "https://sketchfab.com/models/ea5e6ed7f9d6445ba69589d503e8cebf"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:21
msgid "and opened it in Blender."
msgstr ""

#: ../../docs/content/3d/making_trees.rst:24
msgid "Paint with vertex colors"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:26
msgid ""
"The first thing you may want to do is to use the vertex colors to paint how "
"much the tree will sway when there is wind. Just use the vertex color "
"painting tool of your favorite 3D modelling program and paint something like "
"this:"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:30
msgid ""
"This is a bit exaggerated, but the idea is that color indicates how much "
"sway affects every part of the tree. This scale here represents it better:"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:35
msgid "Write a custom shader for the leaves"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:37
msgid "This is a simple example of a shader for leaves:"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:44
msgid ""
"This is a spatial shader. There is no front/back culling (so leaves can be "
"seen from both sides), and alpha prepass is used, so there are less depth "
"arctifacts that result from using transparency (and leaves cast shadow). "
"Finally, for the sway effect, world coordinates are recommended, so the tree "
"can be duplicated, moved, etc. and it will still work together with other "
"trees."
msgstr ""

#: ../../docs/content/3d/making_trees.rst:51
msgid ""
"Here, the texture is read, as well as a transmission color, which is used to "
"add some back-lighting to the leaves, simulating subsurface scattering."
msgstr ""

#: ../../docs/content/3d/making_trees.rst:67
msgid ""
"This is the code to create the sway of the leaves. It's basic (just uses a "
"sinewave multiplying by the time and axis position, but works well). Notice "
"that the strength is multiplied by the color. Every axis uses a different "
"small near 1.0 multiplication factor so axes don't appear in sync."
msgstr ""

#: ../../docs/content/3d/making_trees.rst:70
msgid "Finally all that is left is the fragment shader:"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:83
msgid "And this is pretty much it."
msgstr ""

#: ../../docs/content/3d/making_trees.rst:85
msgid ""
"The trunk shader is similar, except it does not write to the alpha channel "
"(thus no alpha prepass is needed) and does not require transmission to work. "
"Both shaders can be improved by adding normal mapping, AO and other maps."
msgstr ""

#: ../../docs/content/3d/making_trees.rst:88
msgid "Improving the shader"
msgstr "셰이더 개선하기"

#: ../../docs/content/3d/making_trees.rst:90
msgid ""
"There are many more resources on how to do this that you can read. Now that "
"you know the basics, a recommended read is the chapter from GPU Gems3 about "
"how Crysis does this (focus mostly on the sway code, as many other "
"techniques shown there are obsolete):"
msgstr ""

#: ../../docs/content/3d/making_trees.rst:93
msgid "https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch16.html"
msgstr ""

#: ../../docs/community/contributing/index.rst:2
msgid "Contributing"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:4
msgid "Ways to contribute"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:6
msgid ""
"Godot Engine is a non-profit, community-driven free and open source project. "
"Almost all (but our lead dev Juan, more on that below) developers are "
"working *pro bono* on their free time, out of personal interest and for the "
"love of creating a libre engine of exceptional quality."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:11
msgid ""
"This means that to thrive, Godot needs as many users as possible to get "
"involved by contributing to the engine. There are many ways to contribute to "
"such a big project, making it possible for everybody to bring something "
"positive to the engine, regardless of their skill set:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:16
msgid ""
"**Be part of the community.** The best way to contribute to Godot and help "
"it become ever better is simply to use the engine and promote it by word-of-"
"mouth, in the credits or splash screen of your games, blog posts, tutorials, "
"videos, demos, gamedev or free software events, support on the Q&A, IRC, "
"forums, Discord, etc. Participate! Being a user and advocate helps spread "
"the word about our great engine, which has no marketing budget and can "
"therefore only rely on its community to become more mainstream."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:25
msgid ""
"**Make games.** It's no secret that, to convince new users and especially "
"the industry at large that Godot is a relevant market player, we need great "
"games made with Godot. We know that the engine has a lot of potential, both "
"for 2D and 3D games, but given its young age we still lack big releases that "
"will draw attention to Godot. So keep working on your awesome projects, each "
"new game increases our credibility on the gamedev market!"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:32
msgid ""
"**Get involved in the engine's development.** This can be by contributing "
"code via pull requests, testing the development snapshots or directly the "
"git *master* branch, report bugs or suggest enhancements on the issue "
"tracker, improve the official documentation (both the class reference and "
"tutorials) and its translations. The following sections will cover each of "
"those \"direct\" ways of contributing to the engine."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:40
msgid ""
"**Donate.** Godot is a non-profit project, but it can still benefit from "
"user donations for many things. Apart from usual expenses such as hosting "
"costs or promotion material on events, we also use donation money to acquire "
"hardware when necessary (e.g. we used donation money to buy a Macbook Pro to "
"implement Retina/HiDPI support and various other macOS-related features). "
"Most importantly, we also used donation money to hire core developers so "
"they can work full-time on the engine. Even with a low monthly wage, we need "
"a steady donation income to continue doing this, which has been very "
"beneficial to the project so far. So if you want to donate some money to the "
"project, check `our website <https://godotengine.org/donate>`_ for details."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:54
msgid "Contributing code"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:56
msgid ""
"The possibility to study, use, modify and redistribute modifications of the "
"engine's source code are the fundamental rights that Godot's `MIT <https://"
"tldrlegal.com/license/mit-license>`_ license grants you, making it `free and "
"open source software <https://en.wikipedia.org/wiki/Free_and_open-"
"source_software>`_."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:61
msgid ""
"As such, everyone is entitled to modify `Godot's source code <https://github."
"com/godotengine/godot>`_, and send those modifications back to the upstream "
"project in the form of a patch (a text file describing the changes in a "
"ready-to-apply manner) or - in the modern workflow that we use - via a so-"
"called \"pull request\" (PR), i.e. a proposal to directly merge one or more "
"git commits (patches) into the main development branch."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:68
msgid "Contributing code changes upstream has two big advantages:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:70
msgid ""
"Your own code will be reviewed and improved by other developers, and will be "
"further maintained directly in the upstream project, so you won't have to "
"reapply your own changes every time you move to a newer version. On the "
"other hand it comes with a responsibility, as your changes have to be "
"generic enough to be beneficial to all users, and not just your project; so "
"in some cases it might still be relevant to keep your changes only for your "
"own project, if they are too specific."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:78
msgid ""
"The whole community will benefit from your work, and other contributors will "
"behave the same way, contributing code that will be beneficial to you. At "
"the time of this writing, more than 300 developers have contributed code "
"changes to the engine!"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:83
msgid ""
"To ensure good collaboration and overall quality, the Godot developers "
"enforce some rules for code contributions, for example regarding the style "
"to use in the C++ code (indentation, brackets, etc.) or the git and PR "
"workflow."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:87
msgid ""
"A good place to start is by searching for issues tagged as `junior jobs "
"<https://github.com/godotengine/godot/issues?q=is%3Aissue+is%3Aopen+label%3A"
"%22junior+job%22>`_ (or `Hacktoberfest <https://github.com/godotengine/godot/"
"issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3AHacktoberfest+>`_ "
"during October) on GitHub."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:89
msgid ""
"Technical details about the PR workflow are outlined in a specific section, :"
"ref:`doc_pr_workflow`."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:92
msgid ""
"Details about the code style guidelines and the ``clang-format`` tool used "
"to enforce them are outlined in :ref:`doc_code_style_guidelines`."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:97
msgid "Testing and reporting issues"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:99
msgid ""
"Another great way of contributing to the engine is to test development "
"releases or the development branch and to report issues. It is also helpful "
"to report issues discovered in stable releases, so that they can be fixed in "
"the development branch and in future maintenance releases."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:105
msgid "Testing development versions"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:107
msgid "To help with the testing, you have several possibilities:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:109
msgid ""
"Compile the engine from source yourself, following the instructions of the :"
"ref:`Compiling <toc-devel-compiling>` page for your platform."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:112
msgid ""
"Test official pre-release binaries when they are announced (usually on the "
"blog and other community platforms), such as alpha, beta and release "
"candidate (RC) builds."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:115
msgid ""
"Test \"trusted\" unofficial builds of the development branch; just ask "
"community members for reliable providers. Whenever possible, it's best to "
"use official binaries or to compile yourself though, to be sure about the "
"provenance of your binaries."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:120
msgid ""
"As mentioned previously, it is also helpful to keep your eyes peeled for "
"potential bugs that might still be present in the stable releases, "
"especially when using some niche features of the engine which might get less "
"testing by the developers."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:126
msgid "Filing an issue on GitHub"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:128
msgid ""
"Godot uses `GitHub's issue tracker <https://github.com/godotengine/godot/"
"issues>`_ for bug reports and enhancement suggestions. You will need a "
"GitHub account to be able to open a new issue there, and click on the \"New "
"issue\" button."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:132
msgid ""
"When you report a bug, you should keep in mind that the process is similar "
"to an appointment with your doctor. You noticed *symptoms* that make you "
"think that something might be wrong (the engine crashes, some features don't "
"work as expected, etc.). It's the role of the bug triaging team and the "
"developers to then help make the diagnosis of the issue you met, so that the "
"actual cause of the bug can be identified and addressed."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:139
msgid ""
"You should therefore always ask yourself: what is relevant information to "
"give so that other Godot contributors can understand the bug, identify it "
"and hopefully fix it. Here are some of the most important infos that you "
"should always provide:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:144
msgid ""
"**Operating system.** Sometimes bugs are system-specific, i.e. they happen "
"only on Windows, or only on Linux, etc. That's particularly relevant for all "
"bugs related to OS interfaces, such as file management, input, window "
"management, audio, etc."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:149
msgid ""
"**Hardware.** Sometimes bugs are hardware-specific, i.e. they happen only on "
"certain processors, graphic cards, etc. If you are able to, it can be "
"helpful to include information on your hardware."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:153
msgid ""
"**Godot version.** This is a must have. Some issues might be relevant in the "
"current stable release, but fixed in the development branch, or the other "
"way around. You might also be using an obsolete version of Godot and "
"experiencing a known issue fixed in a later version, so knowing this from "
"the start helps to speed up the diagnosis."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:159
msgid ""
"**How to reproduce the bug.** In the majority of cases, bugs are "
"reproducible, i.e. it is possible to trigger them reliably by following some "
"steps. Please always describe those steps as clearly as possible, so that "
"everyone can try to reproduce the issue and confirm it. Ideally, make a demo "
"project that reproduces this issue out of the box, zip it and attach it to "
"the issue (you can do this by drag and drop). Even if you think that the "
"issue is trivial to reproduce, adding a minimal project that lets reproduce "
"it is a big added value. You have to keep in mind that there are thousands "
"of issues in the tracker, and developers can only dedicate little time to "
"each issue."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:170
msgid ""
"When you click the \"New issue\" button, you should be presented with a text "
"area prefilled with our issue template. Please try to follow it so that all "
"issues are consistent and provide the required information."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:175
msgid "Contributing to the documentation"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:177
msgid ""
"There are two separate resources referred to as \"documentation\" in Godot:"
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:179
msgid ""
"**The class reference.** This is the documentation for the complete Godot "
"API as exposed to GDScript and the other scripting languages. It can be "
"consulted offline, directly in Godot's code editor, or online at :ref:`Godot "
"API <toc-class-ref>`. To contribute to the class reference, you have to edit "
"the `doc/base/classes.xml` in Godot's git repository, and make a pull "
"request. See :ref:`doc_updating_the_class_reference` for more details."
msgstr ""

#: ../../docs/community/contributing/ways_to_contribute.rst:187
msgid ""
"**The tutorials and engine documentation and its translations.** This is the "
"part you are reading now, which is distributed in the HTML, PDF and EPUB "
"formats. Its contents are generated from plain text files in the "
"reStructured Text (rst) format, to which you can contribute via pull "
"requests on the `godot-docs <https://github.com/godotengine/godot-docs>`_ "
"GitHub repository. See :ref:`doc_documentation_guidelines` for more details."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:4
msgid "Pull request workflow"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:8
msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:16
msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:22
msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organisation of Godot's Git repository."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:27
msgid "Git source repository"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:29
msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:33
msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"이 문서에 기여하고 싶다면, 문서의 저장소를 `여기서 <https://github.com/"
"godotengine/godot-docs>`_ 알아보실 수 있습니다."

#: ../../docs/community/contributing/pr_workflow.rst:36
msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:46
msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:51
msgid "The branches on the Git repository are organized as follows:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:53
msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:57
msgid ""
"The stable branches are named after their version, e.g. ``3.0`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.0.2 or 2.1.5). As "
"a rule of thumb, the last stable branch is maintained until the next major "
"version (e.g. the ``2.0`` branch was maintained until the release of Godot "
"2.1). If you want to make PRs against a maintained stable branch, you will "
"have to check if your changes are also relevant for the ``master`` branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:65
msgid ""
"There might be feature branches at time, usually meant to be merged into the "
"``master`` branch at some time."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:69
msgid "Forking and cloning"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:71
msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:78
msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:83
msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:88
msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:91
msgid "To clone your fork from GitHub, use the following command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:97
msgid ""
"In our examples, the \"$\" character denotes the command line prompt on "
"typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:101
msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:108
msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:115
msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"godotengine/godot repository. This will be useful when you want to pull new "
"commits from its ``master`` branch to update your fork. You have another "
"``remote`` reference named ``origin``, which points to your fork."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:120
msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:124
msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:127
msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:135
msgid ""
"In the following, we will assume that you want to implement a feature in "
"Godot's project manager, which is coded in the ``editor/project_manager."
"cpp`` file."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:140
msgid "Branching"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:142
msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:154
msgid "This command is equivalent:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:161
msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:167
msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:178
msgid "Updating your branch"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:180
msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:186
msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:194
msgid ""
"However, if you had local commits, this method will create a so-called "
"\"merge commit\", and you will soon hear from fellow contributors that those "
"are not wanted in PRs. Then how to update the branch without creating a "
"merge commit? You will have to use the ``--rebase`` option, so that your "
"local commits are replayed on top of the updated upstream ``master`` branch. "
"It will effectively modify the Git history of your branch, but that is for "
"the greater good."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:201
msgid "Therefore, the command that you should (almost) always use is:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:208
msgid "Making changes"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:210
msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:214
msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:221
msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:224
msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:226
msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:228
msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:229
msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:231
msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:232
msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:234
msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:239
msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:241
msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:244
msgid ""
"That's a lot to memorise! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:247
msgid "Here's how the shell history could look like on our example:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:279
msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:284
msgid "Pushing changes to a remote"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:286
msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:295
msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:303
msgid ""
"Git will ask you for your username and password, and the changes will be "
"sent to your remote. If you check the fork's page on GitHub, you should see "
"a new branch with your added commits."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:308
msgid "Issuing a pull request"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:310
msgid ""
"When you load your fork's branch on GitHub, you should see a line saying *"
"\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:317
msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the godotengine/godot upstream "
"repository. It should show you your two commits, and state \"Able to merge"
"\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR, something went wrong. Go to IRC and ask for "
"support :)"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:323
msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:329
msgid "Modifying a pull request"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:331
msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:335
msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:350
msgid "That should do the trick, but..."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:353
msgid "Mastering the PR workflow: the rebase"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:355
msgid ""
"On the situation outlined above, your fellow contributors who are "
"particularly pedantic regarding the Git history might ask your to *rebase* "
"your branch to *squash* or *meld* the last two commits together (i.e. the "
"two related to the project manager), as the second commit basically fixes an "
"issue in the first one."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:360
msgid ""
"Once the PR is merged, it is not relevant for a changelog reader that the PR "
"author made mistakes; instead, we want to keep only commits that bring from "
"one working state to another working state."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:364
msgid ""
"To squash those two commits together, we will have to *rewrite history*. "
"Right, we have that power. You may read that it's a bad practice, and it's "
"true when it comes to branches of the upstream repo. But in your fork, you "
"can do whatever you want, and everything is allowed to get neat PRs :)"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:369
msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit hash as argument, and will let you modify all commits "
"between that commit hash and the last one of the branch, the so-called "
"*HEAD*. In our example, we want to act on the last two commits, so we will "
"do:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:380
msgid "This will open a text editor with:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:387
msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:400
msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:405
msgid ""
"You could have avoided this rebase by using ``git commit --amend`` when "
"fixing the typo. This command will write the staged changes directly into "
"the *last* commit (``HEAD``), instead of creating a new commit like we did "
"in this example. So it is equivalent to what we did with a new commit and "
"then a rebase to mark it as \"fixup\"."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:411
msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:425
msgid ""
"This is a sane behaviour, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:433
msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:438
msgid "Deleting a Git branch"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:440
msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:445
msgid "To delete our better project manager branch locally, use this command:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:451
msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:454
msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:4
msgid "Code style guidelines"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:8
msgid ""
"When contributing to Godot's source code, you will be expected to follow the "
"style guidelines outlined below. Some of them are checked via the Continuous "
"Integration process and reviewers will ask you to fix potential issues, so "
"best setup your system as outlined below to ensure all your commits follow "
"the guidelines."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:15
msgid "C++ and Objective-C"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:17
msgid ""
"There are no written guidelines, but the code style agreed upon by the "
"developers is enforced via the `clang-format <http://clang.llvm.org/docs/"
"ClangFormat.html>`__ code beautifier, which takes care for you of all our "
"conventions. To name a few:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:22
msgid ""
"Indentation and alignment are both tab based (respectively one and two tabs)"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:23
msgid "One space around math and assignments operators as well as after commas"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:24
msgid ""
"Pointer and reference operators are affixed to the variable identifier, not "
"to the type name"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:26
msgid "See further down regarding header includes"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:28
msgid ""
"The rules used by clang-format are outlined in the `.clang-format <https://"
"github.com/godotengine/godot/blob/master/.clang-format>`__ file of the Godot "
"repository."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:32
msgid ""
"As long as you ensure that your style matches the surrounding code and that "
"you not introducing trailing whitespace or space-based indentation, you "
"should be fine. If you plan to contribute regularly however, we strongly "
"advise that you setup clang-format locally to check and automatically fix "
"all your commits."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:37
msgid ""
"Godot's code style should *not* be applied to thirdparty code, i.e. that is "
"included in Godot's source tree but was not written specifically for our "
"project. Such code usually come from different upstream projects with their "
"own style guides (or lack thereof), and don't want to introduce differences "
"that would make syncing with upstream repositories harder."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:44
msgid ""
"Thirdparty code is usually included in the ``thirdparty/`` folder and can "
"thus easily be excluded from formatting scripts. For the rare cases where a "
"thirdparty code snippet needs to be included directly within a Godot file, "
"you can use ``/* clang-format off */`` and ``/* clang-format on */`` to tell "
"clang-format to ignore a chunk of code."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:52
msgid "Using clang-format locally"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:54
msgid ""
"First of all, you will need to install clang-format. As of now, you need to "
"use **clang-format 6.x** to be compatible with Godot's format. Later "
"versions might be suitable, but previous versions had bugs that will cause "
"formatting changes to the current code base."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:60
msgid "Installation"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:62
msgid "Here's how to install clang-format:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:64
msgid ""
"Linux: It will usually be available out-of-the-box with the clang toolchain "
"packaged by your distribution. If your distro version is not the required "
"one, you can download a pre-compiled version from the `LLVM website <http://"
"releases.llvm.org/download.html>`__, or if you are on a Debian derivative, "
"use the `upstream repos <http://apt.llvm.org/>`__."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:69
msgid ""
"macOS and Windows: You can download precompiled binaries from the `LLVM "
"website <http://releases.llvm.org/download.html>`__. You may need to add the "
"path to the binary's folder to your system's ``PATH`` environment variable "
"to be able to call ``clang-format`` out of the box."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:74
msgid ""
"You then have different possibilities to apply clang-format to your changes:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:77
msgid "Manual usage"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:79
msgid ""
"You can apply clang-format manually one or more files with the following "
"command:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:86
msgid ""
"``-i`` means that the changes should be written directly to the file (by "
"default clang-format would only output the fixed version to the terminal)."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:88
msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell. Be careful when globbing so that you "
"don't run clang-format on compiled objects (.o and .a files) that are in "
"Godot's tree. So better use ``core/*.{cpp,h}`` than ``core/*``."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:94
msgid "Pre-commit hook"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:96
msgid ""
"For ease of use, we provide a pre-commit hook for Git that will run clang-"
"format automatically on all your commits to check them, and let you apply "
"its changes in the final commit."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:100
msgid ""
"This \"hook\" is a script which can be found in ``misc/hooks``, refer to "
"that folder's README.md for installation instructions."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:103
msgid ""
"If your clang-format is not in the ``PATH``, you may have to edit the ``pre-"
"commit-clang-format`` to point to the correct binary for it to work. The "
"hook was tested on Linux and macOS, but should also work in the Git Shell on "
"Windows."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:109
msgid "IDE plugin"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:111
msgid ""
"Most IDEs or code editors have beautifier plugins that can be configured to "
"run clang-format automatically, for example each time you save a file."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:114
msgid "Here is a non-exhaustive list of beautifier plugins for some IDEs:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:116
msgid ""
"Qt Creator: `Beautifier plugin <http://doc.qt.io/qtcreator/creator-"
"beautifier.html>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:117
msgid ""
"Visual Studio Code: `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:118
msgid ""
"Visual Studio: `ClangFormat <https://marketplace.visualstudio.com/items?"
"itemName=LLVMExtensions.ClangFormat>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:119
msgid "vim: `vim-clang-format <https://github.com/rhysd/vim-clang-format>`__"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:121
msgid "(Pull requests welcome to extend this list with tested plugins.)"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:124
msgid "Header includes"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:126
msgid ""
"When adding new C++ or Objective-C files or including new headers in "
"existing ones, the following rules should be followed:"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:129
msgid ""
"The first lines in the file should be Godot's copyright header and MIT "
"license, copy-pasted from another file. Make sure to adjust the filename."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:131
msgid ""
"In a ``.h`` header, include guards should be used with the form "
"``FILENAME_H``."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:134
msgid ""
"In a ``.cpp`` file (e.g. ``filename.cpp``), the first include should be the "
"one where the class is declared (e.g. ``#include \"filename.h\"``), followed "
"by an empty line for separation."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:137
msgid ""
"Then come headers from Godot's own code base, included in alphabetical order "
"(enforced by ``clang-format``) with paths relative to the root folder. Those "
"includes should be done with quotes, e.g. ``#include \"core/object.h\"``. "
"The block of Godot header includes should then be followed by an empty line "
"for separation."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:142
msgid ""
"Finally, thirdparty headers (either from ``thirdparty`` or from the system's "
"include paths) come next and should be included with the < and > symbols, e."
"g. ``#include <png.h>``. The block of thirdparty headers should also be "
"followed by an empty line for separation."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:146
msgid ""
"Godot and thirdparty headers should be included in the file that requires "
"them, i.e. in the `.h` header if used in the declarative code or in the `."
"cpp` if used only in the imperative code."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:238
msgid "Java"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:240
msgid ""
"Godot's Java code (mostly in ``platform/android``) is also enforced via "
"``clang-format``, so see the instructions above to set it up. Keep in mind "
"that this style guide only applies to code written and maintained by Godot, "
"not thirdparty code such as the ``java/src/com/google`` subfolder."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:246
msgid "Python"
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:248
msgid ""
"Godot's SCons buildsystem is written in Python, and various scripts included "
"in the source tree are also using Python."
msgstr ""

#: ../../docs/community/contributing/code_style_guidelines.rst:251
msgid ""
"For those, we follow the `PEP-8 style guide <https://www.python.org/dev/peps/"
"pep-0008/>`__, this is however not as strongly enforced as for the C++ code. "
"If you are so inclined, you can check and format your Python changes using "
"`autopep8 <https://pypi.org/project/autopep8/>`__."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:4
msgid "Bug triage guidelines"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:6
msgid ""
"This page describes the typical workflow of the bug triage team aka bugsquad "
"when handling issues and pull requests on Godot's `GitHub <https://github."
"com/godotengine/godot>`_ repository. It is bound to evolve together with the "
"bugsquad, so do not hesitate to propose modifications to the following "
"guidelines."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:12
msgid "Issues management"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:14
msgid "GitHub proposes various features to manage issues:"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:16
msgid "Set one or several labels from a predefined list"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:17
msgid "Set one milestone from a predefined list"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:18
msgid "Keep track of the issue in the project dashboard"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:19
msgid ""
"Define one contributor as \"assignee\" among the Godot engine organization "
"members"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:22
msgid ""
"As the Godot engine organization on GitHub currently has a restricted number "
"of contributors, we do not use assignees extensively for now. All "
"contributors are welcome to take on any issue, if relevant after mentioning "
"it on the issue ticket and/or discussing the best way to resolve it with "
"other developers."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:28
msgid "For the time being we do not use the project dashboard feature either."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:30
msgid ""
"As far as possible, we try to assign labels (and milestones, when relevant) "
"to both issues and pull requests."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:34
msgid "Labels"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:36
msgid "The following labels are currently defined in the Godot repository:"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:38
msgid "**Categories:**"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:40
msgid ""
"*Archived*: either a duplicate of another issue, or invalid. Such an issue "
"would also be closed."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:42
msgid "*Bug*: describes something that is not working properly."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:43
msgid ""
"*Confirmed*: has been confirmed by at least one other contributor than the "
"bug reporter (typically for *Bug* reports). The purpose of this label is to "
"let developers know which issues are still reproducible when they want to "
"select what to work on. It is therefore a good practice to add in a comment "
"on what platform and what version or commit of Godot the issue could be "
"reproduced; if a developer looks at the issue one year later, the "
"*Confirmed* label may not be relevant anymore."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:51
msgid ""
"*Discussion*: the issue is not consensual and needs further discussion to "
"define what exactly should be done to address the topic."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:54
msgid ""
"*Documentation*: issue related to the documentation. Mainly to request "
"enhancements in the API documentation. Issues related to the ReadTheDocs "
"documentation should be filed on the `godot-docs <https://github.com/"
"godotengine/godot-docs>`_ repository."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:58
msgid ""
"*Enhancement*: describes a proposed enhancement to an existing functionality."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:60
msgid ""
"*Feature proposal*: describes a wish for a new feature to be implemented."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:62
msgid ""
"*Junior job*: the issue is *assumed* to be an easy one to fix, which makes "
"it a great fit for junior contributors who need to become familiar with the "
"code base."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:65
msgid "*Needs rebase*: the issue need a git rebase to be merged."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:66
msgid ""
"*Needs testing*: the issue/pull request could not be completely tested and "
"thus need further testing. This can mean that it needs to be tested on "
"different hardware/software configurations or even that the steps to "
"reproduce are not certain."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:70
msgid ""
"*PR welcome / hero wanted!*: Contributions for issues with these labels are "
"especially welcome. Note that this **doesn't** mean you can't work on issues "
"without these labels."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:73
msgid ""
"*Tracker*: issue used to track other issues (like all issues related to the "
"plugin system)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:75
msgid "*Usability*: issues that directly impact user usability."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:77
msgid ""
"The categories are used for general triage of the issues. They can be "
"combined in some way when relevant, e.g. an issue can be labelled "
"*Enhancement* and *Usability* at the same time if it's an issue to improve "
"usability. Or *Feature proposal* and *Discussion* if it's a non-consensual "
"feature request, or one that is not precise enough to be worked on."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:83
msgid "**Topics:**"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:85
msgid "*Assetlib*: relates to issues with the asset library."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:86
msgid "*Audio*: relates to the audio features (low and high level)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:87
msgid ""
"*Buildsystem*: relates to building issues, either linked to the SCons "
"buildsystem or to compiler peculiarities."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:89
msgid ""
"*Core*: anything related to the core engine. It might be further split later "
"on as it's a pretty big topic."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:91
msgid "*Drivers*: relates to issues with the drivers used by the engine."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:92
msgid "*Editor*: relates to issues in the editor (mainly UI)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:93
msgid "*GDNative*: relates to the GDNative module."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:94
msgid "*GDScript*: relates to GDScript."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:95
msgid "*Mono*: relates to the C# / Mono bindings."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:96
msgid "*Network*: relates to networking."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:97
msgid "*Physics*: relates to the physics engine (2D/3D)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:98
msgid "*Plugin*: relates to problems encountered while writing plugins."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:99
msgid "*Porting*: relates to some specific platforms."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:100
msgid "*Rendering*: relates to the 2D and 3D rendering engines."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:101
msgid "*VisualScript*: relates to issues with the visual scripting language."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:103
msgid ""
"Issues would typically correspond to only one topic, though it's not "
"unthinkable to see issues that fit two bills. The general idea is that there "
"will be specialized contributors teams behind all topics, so they can focus "
"on the issues labelled with their team's topic."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:108
msgid "**Platforms:**"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:110
msgid "*Android*, *HTML5*, *iOS*, *Linux*, *macOS*, *Windows*, *UWP*"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:112
msgid ""
"By default, it is assumed that a given issue applies to all platforms. If "
"one of the platform labels is used, it is then exclusive and the previous "
"assumption doesn't stand anymore (so if it's a bug on e.g. Android and Linux "
"exclusively, select those two platforms)."
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:118
msgid "Milestones"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:120
msgid ""
"`Milestones <https://github.com/godotengine/godot/milestones>`_ correspond "
"to planned future versions of Godot for which there is an existing roadmap. "
"Issues that fit in the said roadmap should be filed under the corresponding "
"milestone; if they don't correspond to any current roadmap, they should be "
"left without milestone. As a rule of thumb, an issue corresponds to a given "
"milestone if it concerns a feature that is new in the milestone, or a "
"critical bug that can't be accepted in any future stable release, or "
"anything that Juan wants to work on right now :)"
msgstr ""

#: ../../docs/community/contributing/bug_triage_guidelines.rst:129
msgid ""
"Contributors are free to pick issues regardless of their assigned milestone; "
"if a fix is proposed for a bug that was not deemed urgent and thus without "
"milestone, it would likely still be very welcome."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:4
msgid "Documentation guidelines"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:6
msgid ""
"This page describes the rules to follow if you want to contribute to Godot "
"Engine by writing or reviewing documentation, or by translating existing "
"documentation. Also have a look at README of the `godot-docs GitHub "
"repository <https://github.com/godotengine/godot-docs>`_ and the `docs front "
"page <https://docs.godotengine.org>`_ on what steps to follow and how to "
"contact the docs team."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:14
#: ../../docs/community/contributing/updating_the_class_reference.rst:17
msgid "How to contribute"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:16
msgid ""
"Creating or modifying documentation pages is mainly done via the `godot-docs "
"GitHub repository <https://github.com/godotengine/godot-docs>`_. The HTML "
"(or PDF and EPUB) documentation is generated from the .rst files "
"(reStructuredText markup language) in that repository. Modifying those pages "
"in a pull request and getting it merged will trigger a rebuild of the online "
"documentation."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:23
msgid ""
"For details on Git usage and the pull request workflow, please refer to the :"
"ref:`doc_pr_workflow` page. Most of what it describes regarding the main "
"godotengine/godot repository is also valid for the docs repository."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:28
msgid ""
"The README.md file contains all the information you need to get you started, "
"please read it. In particular, it contains some tips and tricks and links to "
"reference documentation about the reStructuredText markup language."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:32
msgid ""
"If you want to edit the **API reference**, please note that it should *not* "
"be done in the godot-docs repository. Instead, you should edit the ``doc/"
"classes/*`` XML files of Godot's main repository. These files are then later "
"used to generate the in-editor documentation as well as the API reference of "
"the online docs. Read more here: :ref:`doc_updating_the_class_reference`."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:40
msgid "What makes good documentation?"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:42
msgid ""
"Documentation should be well written in plain English, using well-formed "
"sentences and various levels of sections and subsections. It should be clear "
"and objective. Also have a look at the :ref:`doc_docs_writing_guidelines`."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:46
msgid ""
"We differentiate tutorial pages from other documentation pages by these "
"definitions:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:49
msgid ""
"Tutorial: a page aiming at explaining how to use one or more concepts in the "
"editor or scripts in order to achieve a specific goal with a learning "
"purpose (e.g. \"Making a simple 2d Pong game\", \"Applying forces to an "
"object\")."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:53
msgid ""
"Documentation: a page describing precisely one and only one concept at a "
"time, if possible exhaustively (e.g. the list of methods of the Sprite "
"class, or an overview of the input management in Godot)."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:57
msgid ""
"You are free to write the kind of documentation you wish, as long as you "
"respect the following rules (and the ones on the repo)."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:61
msgid "Titles"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:63
msgid "Always begin pages with their title and a Sphinx reference name:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:72
msgid ""
"The reference allows to link to this page using the ``:ref:`` format, e.g. "
"``:ref:`doc_insert_your_title_here``` would link to the above example page "
"(note the lack of leading underscore in the reference)."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:76
msgid ""
"Also, avoid American CamelCase titles: title's first word should begin with "
"a capitalized letter, and every following word should not. Thus, this is a "
"good example:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:80
msgid "Insert your title here"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:82
msgid "And this is a bad example:"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:84
msgid "Insert Your Title Here"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:86
msgid ""
"Only project, people and node class names should have capitalized first "
"letter."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:90
msgid "Translating existing pages"
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:92
msgid ""
"You can help to translate the official Godot documentation on our `Hosted "
"Weblate <https://hosted.weblate.org/engage/godot-engine/>`_."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:99
msgid ""
"There also is the official `Godot I18N repository <https://github.com/"
"godotengine/godot-docs-l10n>`_. where you can see when the data was last "
"synced."
msgstr ""

#: ../../docs/community/contributing/documentation_guidelines.rst:104
msgid ""
"This documentation and every page it contains is published under the terms "
"of the `Creative Commons Attribution 3.0 license (CC-BY-3.0) <https://"
"tldrlegal.com/license/creative-commons-attribution-(cc)>`_, with attribution "
"to \"Juan Linietsky, Ariel Manzur and the Godot community\"."
msgstr ""
"이 문서의 모든 내용은 `크리에이티브 커먼스 저작자 표시 3.0 라이선스 (`CC-BY "
"3.0 <https://creativecommons.org/licenses/by/3.0/>`_로 사용할 수 있고, 저작"
"자 표시는 \"Juan Linietsky, Ariel Manzur, Godot Engine 커뮤니티\"로 하면 됩니"
"다."

#: ../../docs/community/contributing/documentation_guidelines.rst:107
msgid ""
"By contributing to the documentation on the GitHub repository, you agree "
"that your changes are distributed under this license."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:4
msgid "Docs writing guidelines"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:6
msgid ""
"The Godot community is rich and international. Users come from all around "
"the world. Some of them are young, and many aren't native English speakers. "
"That's why we must all write using a clear and a common language. For the "
"class reference, the goal is to make it easy to read for everyone and "
"precise."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:12
msgid "In summary, always try to:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:14
#: ../../docs/community/contributing/docs_writing_guidelines.rst:39
msgid "Use the direct voice"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:15
#: ../../docs/community/contributing/docs_writing_guidelines.rst:74
msgid "Use precise action verbs"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:16
#: ../../docs/community/contributing/docs_writing_guidelines.rst:96
msgid "Avoid verbs that end in -ing"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:17
msgid "Remove unnecessary adverbs and adjectives."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:18
msgid ""
"Ban these 8 words: obvious, simple, basic, easy, actual, just, clear, and "
"however"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:19
#: ../../docs/community/contributing/docs_writing_guidelines.rst:210
msgid "Use explicit references"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:20
#: ../../docs/community/contributing/docs_writing_guidelines.rst:231
msgid "Use 's to show possession"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:21
msgid "Use the Oxford comma"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:23
msgid "There are 3 rules to describe classes:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:25
#: ../../docs/community/contributing/docs_writing_guidelines.rst:278
msgid "Give an overview of the node in the brief description"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:26
#: ../../docs/community/contributing/docs_writing_guidelines.rst:307
msgid "Mention what methods return if it's useful"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:27
#: ../../docs/community/contributing/docs_writing_guidelines.rst:332
msgid "Use \"if true\" to describe booleans"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:31
msgid ""
"A technical writer's job is to pack as much information as possible into the "
"smallest and clearest sentences possible. These guidelines will help you "
"work towards that goal."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:36
msgid "7 rules for a clear english"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:41
msgid ""
"Use the direct voice when possible. Take the classes, methods, and constants "
"you describe as the subject. It's natural to write using the passive voice, "
"but it's harder to read and produces longer sentences."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:47
msgid "Passive:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:53
msgid "Active:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:59
#: ../../docs/community/contributing/docs_writing_guidelines.rst:313
msgid "**Don't** use the passive voice:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:66
msgid "**Do** use the node's name as a noun:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:76
msgid ""
"Favor precise yet common verbs over generic ones like ``make``, ``set``, and "
"any expression you can replace with a single word."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:79
msgid ""
"**Don't** repeat the method's name. It already states it sets the pivot "
"value to a new one:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:87
msgid ""
"**Do** explain what's the consequence of this \"set\": use precise verbs "
"like ``place``, ``position``, ``rotate``, ``fade``, etc."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:98
msgid ""
"The progressive forms describe continuous actions. E.g. \"is calling\", \"is "
"moving\"."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:101
msgid "**Don't** use the progressive form for instant changes."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:108
msgid "**Do** use simple present, preterit or future."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:115
msgid ""
"You may use the progressive tense to describe actions that are continuous in "
"time. Anything like animation or coroutines."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:120
msgid ""
"Verbs can turn into adjectival nouns with -ing. This is not a conjugation, "
"so you may use them: ``the remaining movement``, ``the missing file``, etc."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:125
msgid "Remove unnecessary adverbs and adjectives"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:127
msgid ""
"Write as few adjectives and adverbs as possible. Only use them if they add "
"key information to the description."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:130
msgid ""
"**Don't** use redundant or meaningless adverbs. Words that lengthen the "
"documentation but don't add any information:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:137
msgid "**Do** write short sentences in a simple, descriptive language:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:144
msgid "Ban these 8 words"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:146
msgid "**Don't** ever use these 8 banned words:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:148
msgid "obvious"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:149
msgid "simple"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:150
msgid "basic"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:151
msgid "easy"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:152
msgid "actual"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:153
msgid "just"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:154
msgid "clear"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:155
msgid "however (some uses)"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:157
msgid ""
"Game creation and programming aren't simple, and nothing's easy to someone "
"learning to use the API for the first time. Other words in the list, like "
"``just`` or ``actual`` won't add any info to the sentence. Don't use "
"corresponding adverbs either: obviously, simply, basically, easily, "
"actually, clearly."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:163
msgid ""
"**Don't** example. The banned words lengthen the description and take "
"attention away from the most important info:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:171
msgid "**Do** remove them:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:178
msgid ""
"\"Simple\" never helps. Remember, for other users, anything could be complex "
"or frustrate them. There's nothing like a good old *it's simple* to make you "
"cringe. Here's the old brief description, the first sentence on the Timer "
"node's page:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:188
msgid "**Do** explain what the node does instead:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:195
msgid "**Don't** use \"basic\", it is too vague:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:202
msgid "**Do** use the brief description to offer an overview of the node:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:212
msgid "Favor explicit references over implicit ones."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:214
msgid ""
"**Don't** use words like \"the former\", \"the latter\", etc. They're not "
"the most common in English, and they require you to check the reference."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:221
msgid "**Do** repeat words. They remove all ambiguity:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:227
msgid ""
"If you need to repeat the same variable name 3 or 4 times, you probably need "
"to rephrase your description."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:233
msgid ""
"Avoid \"The milk **of** the cow\". It feels unnatural in English. Write "
"\"The cow's milk\" instead."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:236
msgid "**Don't** write \"of the X\":"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:242
msgid ""
"**Do** use ``'s``. It lets you put the main subject at the start of the "
"sentence, and keep it short:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:250
msgid "Use the Oxford comma to enumerate anything"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:252
msgid "From the Oxford dictionary:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:254
msgid ""
"The 'Oxford comma' is an optional comma before the word 'and' at the end of "
"a list: *We sell books, videos, and magazines.*"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:257
msgid ""
"[...] Not all writers and publishers use it, but it can clarify the meaning "
"of a sentence when the items in a list are not single words: *These items "
"are available in black and white, red and yellow, and blue and green.*"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:260
msgid "**Don't** leave the last element of a list without a comma:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:266
msgid ""
"**Do** add a comma before `and` or `or`, for the last element of a list with "
"more than two elements."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:275
msgid "How to write methods and classes"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:280
msgid ""
"The brief description is the reference's most important sentence. It's the "
"user's first contact with a node:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:283
msgid "It's the only description in the \"Create New Node\" dialog."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:284
msgid "It's at the top of every page in the reference"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:286
msgid ""
"The brief description should explain the node's role and its functionality, "
"in up to 200 characters."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:289
msgid "**Don't** write tiny and vague summaries:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:296
msgid "**Do** give an overview of the node's functionality:"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:303
msgid ""
"Use the node's full description to provide more information, and a code "
"example, if possible."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:309
msgid ""
"Some methods return important values. Describe them at the end of the "
"description, ideally on a new line. No need to mention the return values for "
"any method whose name starts with ``set`` or ``get``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:320
msgid "**Do** always use \"Returns\"."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:327
msgid ""
"Notice the exception to the \"direct voice\" rule: with the move method, an "
"external collider can influence the method and the body that calls ``move``. "
"In this case, you can use the passive voice."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:334
msgid ""
"For boolean member variables, always use ``if true`` and/or ``if false``, to "
"stay explicit. ``Controls whether or not`` may be ambiguous and won't work "
"for every member variable."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:338
msgid ""
"Also surround boolean values, variable names and methods with ``[code][/"
"code]``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:340
msgid "**Do** start with \"if true\":"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:349
msgid "Use ``[code]`` around arguments"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:351
msgid ""
"In the class reference, always surround arguments with ``[code][/code]``. In "
"the documentation and in Godot, it will display like ``this``. When you edit "
"XML files in the Godot repository, replace existing arguments written like "
"'this' or \\`this\\` with ``[code]this[/code]``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:355
msgid "Common vocabulary to use in godot's docs"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:357
msgid ""
"The developers chose some specific words to refer to areas of the interface. "
"They're used in the sources, in the documentation, and you should always use "
"them instead of synonyms, so the users know what you're talking about."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:365
msgid "Overview of the interface and common vocabulary"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:367
msgid ""
"In the top left corner of the editor lie the ``main menus``. In the center, "
"the buttons change the ``workspace``. And together the buttons in the top "
"right are the ``playtest buttons``. The area in the center, that displays "
"the 2D or the 3D space, is the ``viewport``. At its top, you find a list of "
"``tools`` inside the ``toolbar``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:373
msgid ""
"The tabs or dockable panels on either side of the viewport are ``docks``. "
"You have the ``FileSystem dock``, the ``Scene dock`` that contains your "
"scene tree, the ``Import dock``, the ``Node dock``, and the ``Inspector`` or "
"``Inspector dock``. With the default layout you may call the tabbed docks "
"``tabs``: the ``Scene tab``, the ``Node tab``..."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:379
msgid ""
"The Animation, Debugger, etc. at the bottom of the viewport are ``panels``. "
"Together they make up the ``bottom panels``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:382
msgid ""
"Foldable areas of the Inspector are ``sections``. The node's parent class "
"names, which you can't fold, are ``Classes`` e.g. the ``KinematicBody2D "
"class``. And individual lines with key-value pairs are ``properties``. E.g. "
"``position`` or ``modulate color`` are both ``properties``."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:389
msgid "Image contribution guidelines"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:391
msgid ""
"A significant part of the documentation is images, and there are several "
"important guidelines to follow."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:394
msgid ""
"First, you should always be using the default editor theme and text when "
"taking screenshots."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:396
msgid ""
"For 3D screenshots use 4xMSAA, enable anisotropic filtering on the projects "
"textures, and set the anisotropic filter quality to 16x in Project Settings"
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:399
msgid "Screenshot size should not exceed 1920x1080."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:401
msgid ""
"When you need to highlight an area of the editor to show something, like a "
"button or option, use a 2 pixel thick outline without a bevel."
msgstr ""

#: ../../docs/community/contributing/docs_writing_guidelines.rst:404
msgid ""
"Before you add or replace any images in the documentation, they should be "
"run through a png compressor to save size. The built in lossless compressor "
"in programs like Krita or Photoshop should be done. However you should also "
"use a lossy one, such as `pngquant <https://pngquant.org/>`_ where almost no "
"image quality is lost during compression."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:4
msgid "Contribute to the Class Reference"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:6
msgid ""
"Godot ships with many nodes and singletons to help you develop your games in "
"GDscript. Each is a class, documented in the :ref:`class reference <toc-"
"class-ref>`. This reference is essential for anyone learning the engine: it "
"is available both online and in the engine."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:8
msgid ""
"But it's incomplete. Some methods, variables and signals lack descriptions. "
"Others changed with recent releases and need updates. The developers can't "
"write the entire reference on their own. Godot needs you, and all of us, to "
"contribute."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:10
msgid ""
"**Important:** If you are planning to make larger changes or a more "
"substantial contribution, it is usually a good idea to create an issue (or a "
"comment in an existing one) to let others know so they don't start working "
"on the same thing too."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:13
msgid ""
"This guide is available as a `Youtube video <https://www.youtube.com/watch?"
"v=mKKjOulm5XI>`_."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:19
msgid ""
"The class reference lies in the following XML files, in Godot's GitHub "
"repository: `doc/classes/ <https://github.com/godotengine/godot/tree/master/"
"doc/classes>`_."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:21
msgid "There are 5 steps to update the class reference (full guide below):"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:23
msgid "Fork `Godot's repository <https://github.com/godotengine/godot>`_"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:24
msgid "Clone your fork on your computer"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:25
msgid "Edit the class file in ``doc/classes/`` to write documentation"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:26
msgid "Commit your changes and push them to your fork"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:27
msgid "Make a pull request on the Godot repository"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:29
msgid ""
"Always use these XML files to edit the API reference. Do not edit the "
"generated .rst files :ref:`in the online documentation <toc-class-ref>`, "
"hosted in the `godot-docs <https://github.com/godotengine/godot-docs>`_ "
"repository."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:32
msgid "Get started with GitHub"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:34
msgid ""
"If you're new to git and GitHub, this guide will help you get started. "
"You'll learn to:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:36
msgid "Fork and clone Godot's repository"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:37
msgid "Keep your fork up to date with other contributors"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:38
msgid "Create a pull request so your improvements end in the official docs"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:40
msgid ""
"If you're new to git, the version-control system Godot uses, go through "
"`GitHub's interactive guide <https://try.github.io/levels/1/challenges/1>`_. "
"You'll learn some essential vocabulary and get a sense for the tool."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:43
msgid "Fork Godot"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:45
msgid "Fork the Godot Engine into a GitHub repository of your own."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:47
msgid "Clone the repository on your computer:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:53
msgid ""
"Create a new branch to make your changes. It makes it a lot easier to sync "
"your improvements with other docs writers, and it's easier to cleanup your "
"repository clean if you have any issues with git."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:59
msgid ""
"The new branch is the same as your master branch, until you start to write "
"API docs. In the ``doc/`` folder, you'll find the class reference."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:62
msgid "How to keep your local clone up-to-date"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:64
msgid ""
"Other writers contribute to Godot's documentation. Your local repository "
"will fall behind it, and you'll have to synchronize it. Especially if other "
"contributors update the class reference while you work on it."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:66
msgid ""
"First add an ``upstream`` git *remote* to work with. Remotes are links to "
"online repositories you can download new files from."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:72
msgid "You can check the list of all remote servers with:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:78
msgid ""
"You should have two: ``origin``, your fork on github, that git adds by "
"default, and ``upstream``, that you just added:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:88
msgid ""
"Each time you want to sync your branch to the state of the upstream "
"repository, enter:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:94
msgid ""
"This command will first ``fetch``, or download the latest version of the "
"Godot repository. Then, it will reapply your local changes on top."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:96
msgid ""
"If you made changes you don't want to keep in your local branch, use the "
"following commands instead:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:103
msgid ""
"**Warning:** The above command will reset your branch to the state of the "
"``upstream master`` branch. It will discard all local changes. Make sure to "
"only run this *before* you make important changes."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:105
msgid ""
"Another option is to delete the branch you're working on, synchronize the "
"master branch with the Godot repository, and create a brand new branch:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:114
msgid ""
"If you're feeling lost by now, come to our `IRC channels <http://webchat."
"freenode.net/?channels=#godotengine>`_ and ask for help. Experienced git "
"users will give you a hand."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:117
msgid "Updating the documentation template"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:119
msgid ""
"When classes are modified in the source code, the documentation template "
"might become outdated. To make sure that you are editing an up-to-date "
"version, you first need to compile Godot (you can follow the :ref:"
"`doc_introduction_to_the_buildsystem` page), and then run the following "
"command (assuming 64-bit Linux):"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:125
msgid ""
"The xml files in doc/classes should then be up-to-date with current Godot "
"Engine features. You can then check what changed using the ``git diff`` "
"command. If there are changes to other classes than the one you are planning "
"to document, please commit those changes first before starting to edit the "
"template:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:132
msgid "You are now ready to edit this file to add stuff."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:134
msgid ""
"**Note:** If this has been done recently by another contributor, you don't "
"forcefully need to go through these steps (unless you know that the class "
"you plan to edit *has* been modified recently)."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:137
msgid "Push and request a pull of your changes"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:139
msgid ""
"Once your modifications are finished, push your changes on your GitHub "
"repository:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:148
msgid ""
"When it's done, you can ask for a Pull Request via the GitHub UI of your "
"Godot fork."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:152
msgid ""
"Although you can edit files on GitHub, it's not recommended. As hundreds of "
"contributors work on Godot, the git history must stay clean. Each commit "
"should bundle all related improvements you make to the class reference, a "
"new feature, bug fixes... When you edit from GitHub, it will create a new "
"branch and a Pull Request every time you want to save it. If a few days pass "
"before your changes get a review, you won't be able to update to the latest "
"version of the repository cleanly. Also, it's harder to keep clean indents "
"from GitHub. And they're very important in the docs."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:154
msgid ""
"TL;DR: If you don't know what you're doing exactly, do not edit files from "
"GitHub."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:157
msgid "How to edit class XML"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:159
msgid ""
"Edit the file for your chosen class in ``doc/classes/`` to update the class "
"reference. The folder contains an XML file for each class. The XML lists the "
"constants and methods you'll find in the class reference. Godot generates "
"and updates the XML automatically."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:161
msgid ""
"Edit it using your favourite text editor. If you use a code editor, make "
"sure that it doesn't change the indent style: tabs for the XML, and 4 spaces "
"inside BBcode-style blocks. More on that below."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:164
msgid "How to write the class reference"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:166
msgid ""
"Each class has a brief and a long description. The brief description is "
"always at the top of the page, while the full description lies below the "
"list of methods, variables and constants. Methods, member variables, "
"constants and signals are in separate categories or XML nodes. For each, "
"learn how they work in Godot's source code, and fill their <description>."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:168
msgid "Our job is to add the missing text between these marks:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:170
msgid "<description></description>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:171
msgid "<brief_description></brief_description>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:172
msgid "<constant></constant>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:173
msgid "<method></method>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:174
msgid "<member></member>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:175
msgid "<signal></signal>"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:177
msgid ""
"Write in a clear and simple language. Always follow the :ref:`writing "
"guidelines <doc_docs_writing_guidelines>` to keep your descriptions short "
"and easy to read. **Do not leave empty lines** in the descriptions: each "
"line in the XML file will result in a new paragraph."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:179
msgid "Here's how a class looks like in XML:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:218
msgid ""
"Use a code editor like Vim, Atom, Code, Notepad++ or anything similar to "
"edit the file quickly. Use the search function to find classes fast."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:222
msgid "Improve formatting with BBcode style tags"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:224
msgid ""
"Godot's class reference supports BBcode-like tags. They add nice formatting "
"to the text. Here's the list of available tags:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:227
msgid "Effect"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:227
msgid "Result"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:229
msgid "[Class]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:229
msgid "Link a class"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:229
msgid "Move the [Sprite]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:229
msgid "Move the :ref:`class_sprite`."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:231
msgid "[method methodname]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:231
msgid "Link to a method in this class"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:231
msgid "Call [method hide]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:231
#: ../../docs/community/contributing/updating_the_class_reference.rst:233
#, fuzzy
msgid "See :ref:`hide <class_spatial_method_hide>`."
msgstr ":ref:`Sprite <class_Sprite>`"

#: ../../docs/community/contributing/updating_the_class_reference.rst:233
msgid "[method Class.methodname]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:233
msgid "Link to another class's method"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:233
msgid "Call [method Spatial.hide]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:235
msgid "[member membername]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:235
msgid "Link to a member in this class"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:235
msgid "Get [member scale]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:235
#: ../../docs/community/contributing/updating_the_class_reference.rst:237
msgid "Get :ref:`scale <class_node2d_property_scale>`."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:237
msgid "[member Class.membername]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:237
msgid "Link to another class's member"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:237
msgid "Get [member Node2D.scale]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:239
msgid "[signal signalname]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:239
msgid "Link to a signal in this class"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:239
msgid "Emit [signal renamed]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:239
#: ../../docs/community/contributing/updating_the_class_reference.rst:241
msgid "Emit :ref:`renamed <class_node_signal_renamed>`."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:241
msgid "[signal Class.signalname]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:241
msgid "Link to another class's signal"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:241
msgid "Emit [signal Node.renamed]."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:243
msgid "[b] [/b]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:243
msgid "Bold"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:243
msgid "Some [b]bold[/b] text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:243
msgid "Some **bold** text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:245
msgid "[i] [/i]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:245
msgid "Italic"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:245
msgid "Some [i]italic[/i] text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:245
msgid "Some *italic* text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:247
msgid "[code] [/code]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:247
msgid "Monospace"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:247
msgid "Some [code]monospace[/code] text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:247
msgid "Some ``monospace`` text."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:249
msgid "[codeblock] [/codeblock]"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:249
msgid "Multiline preformatted block"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:249
msgid "*See below.*"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:252
msgid ""
"Use ``[codeblock]`` for pre-formatted code blocks. Inside ``[codeblock]``, "
"always use **four spaces** for indentation (the parser will delete tabs). "
"Example:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:262
msgid "Will display as:"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:272
msgid "I don't know what this method does!"
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:274
msgid ""
"No problem. Leave it behind, and list the methods you skipped when you "
"request a pull of your changes. Another writer will take care of it."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:276
msgid ""
"You can still have a look at the methods' implementation in Godot's source "
"code on GitHub. Also, if you have doubts, feel free to ask on the `Q&A "
"website <https://godotengine.org/qa/>`__ and on IRC (freenode, #godotengine)."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:280
msgid "Localization"
msgstr "현지화"

#: ../../docs/community/contributing/updating_the_class_reference.rst:282
msgid ""
"The documentation can be translated in any language on `Hosted Weblate "
"<https://hosted.weblate.org/projects/godot-engine/godot-docs/>`__."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:285
msgid ""
"Translated strings are synced manually by documentation maintainers in the "
"`godot-docs-l10n <https://github.com/godotengine/godot-docs-l10n>`__ "
"repository."
msgstr ""

#: ../../docs/community/contributing/updating_the_class_reference.rst:289
msgid ""
"Languages with a good level of completion have their own localized instances "
"of ReadTheDocs. Open an issue on the ``godot-docs-l10n`` repository if you "
"think that a new language is complete enough to get its own instance."
msgstr ""

#: ../../docs/community/channels.rst:4
msgid "Channels"
msgstr ""

#: ../../docs/community/channels.rst:6
msgid ""
"So, where is the Godot community and where can you ask questions and get "
"help?"
msgstr ""

#: ../../docs/community/channels.rst:8
msgid ""
"Note that some of these channels are run and moderated by members of the "
"Godot community or third parties."
msgstr ""

#: ../../docs/community/channels.rst:10
msgid ""
"A brief overview over these channels is also available on the `website "
"<https://godotengine.org/community>`_."
msgstr ""

#: ../../docs/community/channels.rst:13
msgid "Q & A"
msgstr ""

#: ../../docs/community/channels.rst:15
msgid "`Official Godot Questions & Answers <https://godotengine.org/qa/>`_"
msgstr ""

#: ../../docs/community/channels.rst:18
msgid "IRC on Freenode"
msgstr ""

#: ../../docs/community/channels.rst:20
msgid ""
"`General: #godotengine <http://webchat.freenode.net/?channels=#godotengine>`_"
msgstr ""

#: ../../docs/community/channels.rst:21
msgid ""
"`Engine development: #godotengine-devel <http://webchat.freenode.net/?"
"channels=#godotengine-devel>`_"
msgstr ""

#: ../../docs/community/channels.rst:22
msgid ""
"`Documentation: #godotengine-doc <http://webchat.freenode.net/?"
"channels=#godotengine-doc>`_"
msgstr ""

#: ../../docs/community/channels.rst:23
msgid ""
"`GDNative: #godotengine-gdnative <http://webchat.freenode.net/?"
"channels=#godotengine-gdnative>`_"
msgstr ""

#: ../../docs/community/channels.rst:24
msgid ""
"`Webseite/PR: #godotengine-atelier <http://webchat.freenode.net/?"
"channels=#godotengine-atelier>`_"
msgstr ""

#: ../../docs/community/channels.rst:25
msgid "`IRC logs <https://godot.eska.me/irc-logs/>`_"
msgstr ""

#: ../../docs/community/channels.rst:28
msgid "Other chats"
msgstr ""

#: ../../docs/community/channels.rst:30
msgid ""
"`Matrix (IRC compatible) <https://matrix.to/#/#godotengine:matrix.org>`_"
msgstr ""

#: ../../docs/community/channels.rst:31
msgid "`Discord <https://discordapp.com/invite/zH7NUgz>`_"
msgstr ""

#: ../../docs/community/channels.rst:34
msgid "Social networks"
msgstr ""

#: ../../docs/community/channels.rst:36
msgid "`GitHub <https://github.com/godotengine/>`_"
msgstr ""

#: ../../docs/community/channels.rst:37
msgid "`Facebook group <https://www.facebook.com/groups/godotengine/>`_"
msgstr ""

#: ../../docs/community/channels.rst:38
msgid "`Twitter (also, #godotengine) <https://twitter.com/godotengine>`_"
msgstr ""

#: ../../docs/community/channels.rst:39
msgid "`Reddit <https://www.reddit.com/r/godot>`_"
msgstr ""

#: ../../docs/community/channels.rst:40
msgid "`Youtube <https://www.youtube.com/c/GodotEngineOfficial>`_"
msgstr ""

#: ../../docs/community/channels.rst:41
msgid "`Steam <https://steamcommunity.com/app/404790>`_"
msgstr ""

#: ../../docs/community/channels.rst:44
msgid "Forum"
msgstr ""

#: ../../docs/community/channels.rst:46
msgid "`Forum (godotdevelopers.org) <https://godotdevelopers.org/forum>`_"
msgstr ""

#: ../../docs/community/tutorials.rst:6
msgid ""
"This is a list of third-party tutorials created by the community that may be "
"of interest."
msgstr ""

#: ../../docs/community/tutorials.rst:9
msgid "Video tutorials"
msgstr ""

#: ../../docs/community/tutorials.rst:11
msgid ""
"`GDQuest <https://www.youtube.com/channel/UCxboW7x0jZqFdvMdCFKTMsQ/"
"playlists>`_"
msgstr ""

#: ../../docs/community/tutorials.rst:12
msgid ""
"`KidsCanCode <https://www.youtube.com/channel/UCNaPQ5uLX5iIEHUCLmfAgKg/"
"playlists>`_"
msgstr ""

#: ../../docs/community/tutorials.rst:13
msgid ""
"`Game from Scratch: Godot 3 Tutorial Series <https://www.youtube.com/watch?"
"v=iDEcP8Mc-7s&list=PLS9MbmO_ssyDk79j9ewONxV88fD5e_o5d>`_"
msgstr ""

#: ../../docs/community/tutorials.rst:14
msgid ""
"`HeartBeast <https://www.youtube.com/watch?v=wETY5_9kFtA&list=PL9FzW-"
"m48fn2jlBu_0DRh7PvAt-GULEmd>`_"
msgstr ""

#: ../../docs/community/tutorials.rst:15
msgid "`Steincodes <https://www.youtube.com/c/steincodes/playlists>`_"
msgstr ""

#: ../../docs/community/resources.rst:6
msgid ""
"This is a list of third-party resources created by the community that may be "
"of interest."
msgstr ""

#: ../../docs/community/resources.rst:11
msgid ""
"`awesome-godot: A curated list of resources by Calinou <https://github.com/"
"Calinou/awesome-godot>`_"
msgstr ""

#: ../../docs/community/resources.rst:12
msgid ""
"`Zeef Godot Engine: A curated directory of resources by Andre Schmitz "
"<https://godot-engine.zeef.com/andre.antonio.schmitz>`_"
msgstr ""

#: ../../docs/community/resources.rst:13
msgid ""
"`KidsCanCode: An ongoing tutorial series <http://kidscancode.org/blog/tags/"
"godot/>`_"
msgstr ""

#~ msgid ""
#~ "Don't scale the shape's outline! Only use the size handles (circled in "
#~ "red) to adjust the shape!"
#~ msgstr ""
#~ "모양의 겉 테두리를 조정하지 마세요! 모양을 맞추기 위해 크기 핸들만 (빨간 "
#~ "동그라미 부분) 사용합니다!"

#~ msgid ""
#~ "Disabling the area's collision shape means it won't detect collisions. By "
#~ "turning it off, we make sure we don't trigger the ``hit`` signal more "
#~ "than once."
#~ msgstr ""
#~ "영역의 충돌 모양을 사라지게 하는 것은 충돌을 감지하지 않는다를 의미합니"
#~ "다. 그것을 끈다면, ``hit`` 시그널을 두 번 이상 울리지 않게 됩니다."

#~ msgid "``Layout``: \"Center Top\""
#~ msgstr "``레이아웃``: \"Center Top\""

#~ msgid "``Margin``:"
#~ msgstr "``Margin``:"

#~ msgid "Left: ``-25``"
#~ msgstr "Left: ``-25``"

#~ msgid "Top: ``0``"
#~ msgstr "Top: ``0``"

#~ msgid "Right: ``25``"
#~ msgstr "Right: ``25``"

#~ msgid "Bottom: ``100``"
#~ msgstr "Bottom: ``100``"

#~ msgid "Left: ``-200``"
#~ msgstr "Left: ``-200``"

#~ msgid "Top: ``-150``"
#~ msgstr "Top: ``-150``"

#~ msgid "Right: ``200``"
#~ msgstr "Right: ``200``"

#~ msgid "Bottom: ``0``"
#~ msgstr "Bottom: ``0``"

#~ msgid "Left: ``-100``"
#~ msgstr "Left: ``-100``"

#~ msgid "Right: ``100``"
#~ msgstr "Right: ``100``"

#~ msgid "Particles"
#~ msgstr "파티클(Particles)"

#~ msgid ""
#~ "For one last bit of visual appeal, let's add a trail effect to the "
#~ "player's movement. Choose your ``Player`` scene and add a :ref:"
#~ "`Particles2D <class_Particles2D>` node named ``Trail``."
#~ msgstr ""
#~ "마지막 시각적 효과를 위해, 플레이어의 움직임에 꼬리를 추가합시다. "
#~ "``Player`` 씬을 선택하고 :ref:`Particles2D <class_Particles2D>` 노드를 추"
#~ "가하고 ``Trail`` 이라고 이름지으세요."

#~ msgid ""
#~ "There are a large number of properties to choose from when configuring "
#~ "particles. Feel free to experiment and create different effects. For the "
#~ "effect in this example, use the following settings:"
#~ msgstr ""
#~ "파티클을 구성할 땐 많은 고를 수 있는 속성들이 있습니다. 다양한 이펙트들을 "
#~ "만들고 자유롭게 경험해보세요. 이 예시의 이펙트를 위해서는, 다음의 설정을 "
#~ "사용하세요:"

#~ msgid ""
#~ "You also need to create a ``Material`` by clicking on ``<null>`` and then "
#~ "\"New ParticlesMaterial\". The settings for that are below:"
#~ msgstr ""
#~ "당신은 또한 ``<null>`` 에서 \"새 ParticlesMaterial\"을 클릭해서 "
#~ "``Material`` 을 추가할 수도 있습니다. 이 설정은 다음과 같습니다:"

#~ msgid ""
#~ "To make the gradient for the \"Color Ramp\" setting, we want a gradient "
#~ "taking the alpha (transparency) of the sprite from 0.5 (semi-transparent) "
#~ "to 0.0 (fully transparent)."
#~ msgstr ""
#~ "\"Color Ramp\" 설정에 그라디언트를 만들려면, 알파 (투명도)를 0.5 (반투명) "
#~ "에서 0.0 (완전 투명) 으로 설정하는 그라디언트가 필요합니다."

#~ msgid ""
#~ "Click \"New GradientTexture\", then under \"Gradient\", click \"New "
#~ "Gradient\". You'll see a window like this:"
#~ msgstr ""
#~ "\"새 GradientTexture\"를 클릭하고, \"Gradient\" 아래에, \"새 Gradient\"를 "
#~ "클릭하세요. 이렇게 생긴 창이 뜰 것입니다:"

#~ msgid ""
#~ "The left and right boxes represent the start and end colors. Click on "
#~ "each and then click the large square on the right to choose the color. "
#~ "For the first color, set the ``A`` (alpha) value to around halfway. For "
#~ "the second, set it all the way to ``0``."
#~ msgstr ""
#~ "왼쪽과 오른쪽 상자는 시작과 끝 색상을 나타냅니다. 각각을 클릭하고 오른쪽 "
#~ "넓은 사각형을 클릭해서 색상을 선택합니다. 첫 색상으로, ``A`` (알파) 값을 "
#~ "거의 절반으로 설정합니다. 두 번째 색상으로 \n"
#~ " ``0`` 으로 끝까지 설정합니다."

#~ msgid ""
#~ "See :ref:`Particles2D <class_Particles2D>` for more details on using "
#~ "particle effects."
#~ msgstr ""
#~ "파티클 이펙트를 사용하는 더 많은 정보는 :ref:`Particles2D "
#~ "<class_Particles2D>` 를 참고하세요."

#~ msgid ""
#~ "A more flexible alternative to prefabs you might know from Unity (and "
#~ "much more powerful given that instances can be nested)."
#~ msgstr ""
#~ "유니티의 프리펩보다 더 유연한 대안 (그리고 인스턴스가 중첩될 수 있기에 훨"
#~ "씬 더 강력함)."

#~ msgid ""
#~ "GameObject -> Node Add a component -> Inheriting Prefab -> Externalized "
#~ "branch"
#~ msgstr "GameObject -> 노드 구성 요소 추가  -> 상속 프리펩 -> 표면화 된 분기"

#~ msgid "In this guide you will learn:"
#~ msgstr "이 가이드에서는 다음 사항에 대해 알아봅니다:"

#~ msgid "Look at function"
#~ msgstr "기능 보기"

#~ msgid "Project Setup"
#~ msgstr "프로젝트 설정"

#~ msgid ""
#~ "If you're using C#, you need to restart Godot editor temporarily to see "
#~ "exported variables in the editor until it's fixed."
#~ msgstr ""
#~ "C#을 사용하신다면, 에디터에 내보낸 값을 보기 위해 값이 고정될 때까지 "
#~ "Godot 에디터를 일시적으로 다시 시작해야 합니다."

#~ msgid "Some examples:"
#~ msgstr "몇 가지 예제:"

#~ msgid ""
#~ "NOTE: The result of these operations depends on the operands types. If "
#~ "both are Integers, then the result will be an Integer. That means 1/10 "
#~ "returns 0 instead of 0.1. If at least one of the operands is a float, "
#~ "then the result is a float: float(1)/10 or 1.0/10 return both 0.1. NOTE2: "
#~ "Remainder/Modulo only works on int. For floats use built in fmod()"
#~ msgstr ""
#~ "주석: 이러한 연산은 피연산자의 타입에 따라 다릅니다. 정수로 연산하면, 결과"
#~ "는 정수가 될 것입니다. 즉 1/10은 0.1이 아닌 0을 반환합니다. 둘 중 하나가 "
#~ "실수라면, 결과는 실수가 됩니다: 실수(1)/10 아니면 1.0/10으로 둘 다 0.1을 "
#~ "반환합니다. 주석 2: 나머지/모듈로(Modulo)는 오직 정수에서만 작동합니다. 실"
#~ "수에는 내장 fmod() 를 사용합니다"

#~ msgid "There is a few things to note here."
#~ msgstr "적어 놓을 만한 사항들이 있습니다."

#~ msgid "Mac OS X"
#~ msgstr "맥 OS X"

#~ msgid ""
#~ "C# is usually the best choice for companies. The large amount of "
#~ "programmers familiar with it means less time can be spent learning Godot "
#~ "and more time can be spent programming with it."
#~ msgstr ""
#~ "C#은 보통 회사에게 잘 쓰입니다. 많은 프로그래머들이 Godot을 배우는 대신 이"
#~ "걸 가지고 프로그래밍하는데 시간을 투자 할 수 있습니다."

#~ msgid ""
#~ "Where *Nodes* focus on behaviors, such as drawing a sprite, drawing a 3D "
#~ "model, physics, GUI controls, etc,"
#~ msgstr ""
#~ "스프라이트 그리기, 3D 모델 그리기, 물리, GUI 제어, 등과 같이, *노드* 가 행"
#~ "동에 중점을 둔다면,"

#~ msgid ""
#~ "**Resources** are mere **data containers**. This means that they don't do "
#~ "any action nor process any information. Resources just contain data."
#~ msgstr ""
#~ "**리소스** 는 단순한 **데이터 컨테이너** 입니다. 즉 그들은 어떤 행동을 취"
#~ "하지 않을 뿐더러 어떤 정보도 출력하지 않습니다. 리소스는 단지 데이터를 담"
#~ "습니다."

#~ msgid ""
#~ "When Godot saves or loads (from disk) a scene (.tscn or .scn), an image "
#~ "(png, jpg), a script (.gd) or pretty much anything, that file is "
#~ "considered a resource."
#~ msgstr ""
#~ "고도가 씬 (.tscn 이나 .scn), 이미지 (png, jpg), 스크립트 (.gd) 혹은 거의 "
#~ "모든 것을 저장하고 불러올 때 (디스크에서), 파일은 리소스로 간주됩니다."

#~ msgid ""
#~ "The resource properties can reference resources in two ways, *external* "
#~ "(on disk) or **built-in**."
#~ msgstr ""
#~ "리소스 속성은 두 가지 방법으로 리소스를 참조할 수 있습니다, *외부* (디스크"
#~ "에서) 혹은 **내장** 입니다."

#~ msgid ""
#~ "Pressing the \">\" button on the right side of the preview allows us to "
#~ "view and edit the resources properties. One of the properties (path) "
#~ "shows where it comes from. In this case, it comes from a png image."
#~ msgstr ""
#~ "미리보기의 오른쪽 모서리에 \">\" 버튼을 눌러서 리소스 속성을 보고 편집할 "
#~ "수 있습니다. 속성 중 하나 (path) 는 어디서 그것이 오는 지를 보여줍니다. "
#~ "이 경우에, 그것은 png 이미지에서 왔습니다."

#~ msgid ""
#~ "When the resource comes from a file, it is considered an *external* "
#~ "resource. If the path property is erased (or it never had a path to begin "
#~ "with), it is considered a built-in resource."
#~ msgstr ""
#~ "리소스가 파일에서 오는 경우, 그것은 *외부* 리소스로 간주됩니다. 경로 속성"
#~ "이 지워지면 (혹은 경로조차 갖고 있지 않다면), 그것은 내장 리소스로 간주됩"
#~ "니다."

#~ msgid ""
#~ "For example, if the path \\`\"res://robi.png\"\\` is erased from the "
#~ "\"path\" property in the above example, and then the scene is saved, the "
#~ "resource will be saved inside the .tscn scene file, no longer referencing "
#~ "the external \"robi.png\". However, even if saved as built-in, and even "
#~ "though the scene can be instanced multiple times, the resource will "
#~ "always be loaded only once. That means, different Robi robot scenes "
#~ "instanced at the same time will still share the same image."
#~ msgstr ""
#~ "예를 들어, 위 예시에서 \"path\" 속성의 \\`\"res://robi.png\"\\` 경로가 지"
#~ "워지면, 그리고 씬을 저장하면, 리소스는 더 이상 외부 \"robi.png\"를 참조하"
#~ "지 않고, .tscn 씬 파일에 저장될 것입니다. 하지만, 내장으로 저장되더라도, "
#~ "그리고 비록 씬이 여러 번 인스턴스 되더라도, 리소스는 오직 한번만 로드될 것"
#~ "입니다. 이는 즉, 동시에 인스턴스 된 다른 Robi robot 씬은 여전히 같은 이미"
#~ "지를 공유합니다."

#~ msgid ""
#~ "Loading resources from code is easy. There are two ways to do it. The "
#~ "first is to use load(), like this:"
#~ msgstr ""
#~ "코드를 통해 리소스를 불러오는 것은 쉽습니다. 두 가지 방법이 있습니다. 첫 "
#~ "번째 방법은 load()를 사용하는 것입니다, 이처럼 말이죠:"

#~ msgid ""
#~ "The second way is more optimal, but only works with a string constant "
#~ "parameter because it loads the resource at compile-time."
#~ msgstr ""
#~ "두 번째 방법이 더 최적이지만, 리소스를 컴파일 시간에 불러오기 때문에 오직 "
#~ "문자열 상수 매개 변수에서만 작동합니다."

#~ msgid ""
#~ "Like any object in Godot, not just nodes, resources can be scripted, too. "
#~ "However, there isn't generally much of an advantage, as resources are "
#~ "just data containers."
#~ msgstr ""
#~ "단지 노드 뿐만 아니라, 고도에서 어떤 물체와 마찬가지로, 리소스도 스크립트"
#~ "를 쓸 수 있습니다. 하지만, 리소스가 단지 데이터 컨테이너이므로, 일반적으"
#~ "로 큰 이점은 없습니다."

#~ msgid "Or even simpler using the name directly:"
#~ msgstr "혹은 직접 이름을 사용하면 더 간단합니다:"

#~ msgid "slave"
#~ msgstr "slave"

#~ msgid "sync"
#~ msgstr "sync"

#~ msgid "Code Structure"
#~ msgstr "코드 구조"

#~ msgid ""
#~ "Click \"Play Scene\" (``F6``) and confirm you can move the player around "
#~ "the screen in all directions."
#~ msgstr ""
#~ "\"씬 실행\" (``F6``) 을 누르고 플레이어가 화면 내에서 모든 방향으로 움직"
#~ "일 수 있는지 확인하세요."

#~ msgid "Supported Animation"
#~ msgstr "지원되는 애니메이션"

#~ msgid "Placing of AnimationPlayer"
#~ msgstr "AnimationPlayer 배치"

#~ msgid ""
#~ "This means it is free as in \"free speech\" as well as in \"free beer\"."
#~ msgstr ""
#~ "여기서 자유란 \"공짜 맥주\"에서 공짜의 의미만이 아니라 \"표현의 자유\"에"
#~ "서 자유의 의미까지 있습니다."

#~ msgid "There are no usage restrictions on Godot"
#~ msgstr "고도를 사용하는 데 제약이 없습니다"

#~ msgid ""
#~ "This means you can use it for any game or application, commercially or "
#~ "non-commercially, in any industry"
#~ msgstr ""
#~ "즉, 어떤 업계에서 어떤 종류의 게임 혹은 응용 프로그램을 만들든 상업 혹은 "
#~ "비상업용으로 사용할 수 있습니다"

#~ msgid ""
#~ "For more, see `here <https://tldrlegal.com/license/mit-license>`_ or ask "
#~ "your lawyer of choice."
#~ msgstr ""
#~ "자세한 내용은 `여기 <https://tldrlegal.com/license/mit-license>`_ 를 참고"
#~ "하거나 변호사에게 문의하세요."

#~ msgid ""
#~ "Note that C# and Visual Scripting support is comparatively young and "
#~ "GDScript still has some advantages as outlined below."
#~ msgstr ""
#~ "다만 C#과 Visual Scripting 지원은 비교적 역사가 짧기 때문에 GDScript가 여"
#~ "전히 뒤에서 설명할 이점을 가지고 있습니다."

#~ msgid ""
#~ "Support for new languages can be added by third parties using the "
#~ "GDNative / NativeScript / PluginScript facilities. (See question about "
#~ "plugins below.)"
#~ msgstr ""
#~ "서드파티가 GDNative / NativeScript / PluginScript 기능을 사용해 새로운 언"
#~ "어 지원을 추가할 수도 있습니다. (아래 플러그인에 관한 문답을 참고하세요.)"

#~ msgid ""
#~ "GDScript? Why use a custom scripting language instead of my language of "
#~ "choice?"
#~ msgstr ""
#~ "GDScript요? 왜 내가 사용하는 언어가 아니라 독자적인 스크립트 언어를 사용하"
#~ "나요?"

#~ msgid ""
#~ "GDScript is designed to integrate from the ground to the way Godot works, "
#~ "more than any other language, and is simple and easy to learn. Takes at "
#~ "most a day or two to get comfortable and it's easy to see the benefits "
#~ "once you do. Please make the effort to learn GDScript, you will not "
#~ "regret it."
#~ msgstr ""
#~ "GDScript는 다른 언어들과 달리 그 기반부터 고도의 구조와 작동에 긴밀하게 연"
#~ "결되도록 설계됐습니다. GDScript는 아주 간단하고 배우기 쉽습니다. 하루 이"
#~ "틀 시간을 들여 익히면 그 장점을 쉽게 발견할 수 있습니다. GDScript를 배워보"
#~ "세요. 후회하지 않을 겁니다."

#~ msgid ""
#~ "Godot C++ API is also efficient and easy to use (the entire Godot editor "
#~ "is made with this API), and an excellent tool to optimize parts of a "
#~ "project, but trying to use it instead of GDScript for an entire game is, "
#~ "in most cases, a waste of time."
#~ msgstr ""
#~ "고도의 C++ API 역시 효율적이며 사용하기 쉽고 (고도 에디터 전체가 이 API로 "
#~ "만들어졌습니다.) 게임에서 최적화가 필요한 부분에 사용하기에 좋은 도구지"
#~ "만, 게임 전체를 GDScript 없이 C++ API로 만드는 것은 대부분의 경우 시간 낭"
#~ "비입니다."

#~ msgid ""
#~ "Yes, for more than a decade we tried in the past integrating several VMs "
#~ "(and even shipped games using them), such as Python, Squirrel and Lua (in "
#~ "fact we authored tolua++ in the past, one of the most popular C++ "
#~ "binders). None of them worked as well as GDScript does now."
#~ msgstr ""
#~ "과거 우리는 10년 넘게 Python, Squirrel, Lua (우리는 인기 있는 C++ 바인더 "
#~ "중 하나인 tolua++를 만들기도 했습니다) 등 여러가지 가상 머신을 통합하려고 "
#~ "시도했습니다. 심지어 그중 몇 가지를 사용해 출시한 게임들도 있습니다. 하지"
#~ "만 그 어느 것도 지금 GDScript처럼 잘 결합되지 않았습니다."

#~ msgid "For the more technically versed, proceed to the next item."
#~ msgstr "더 기술적인 설명을 듣고 싶다면 다음 항목을 참고하세요."

#~ msgid ""
#~ "I don't believe you. What are the technical reasons for the item above?"
#~ msgstr "납득할 수 없습니다. GDScript를 만든 기술적인 이유가 뭔가요?"

#~ msgid ""
#~ "GDScript was designed to solve the issues above, and performs well in all "
#~ "the above scenarios. Please learn GDScript and enjoy a smooth integration "
#~ "of scripting with the game engine (yes, it's a rare but enjoyable "
#~ "situation when things just work). It's worth it, give it a try!"
#~ msgstr ""
#~ "GDScript는 위 문제들을 해결하려고 설계되었고 위 모든 상황에서 아주 잘 작동"
#~ "합니다. GDScript를 배워서 스크립팅과 게임 엔진의 부드러운 결합을 경험해보"
#~ "세요. (이렇게 제대로 작동한다는 것은 매우 즐거운 경험입니다.) 배울 가치가 "
#~ "있습니다. 시도해보세요!"

#~ msgid "I want to extend Godot. What are my options for creating plugins?"
#~ msgstr ""
#~ "고도를 확장시키고 싶습니다. 어떤 방법으로 플러그인을 만들 수 있나요?"

#~ msgid ""
#~ "Additional languages could be added via PluginScript or the more low-"
#~ "level NativeScript."
#~ msgstr ""
#~ "언어 추가는 PluginScript나 더 낮은 단계로 NativeScript를 통해 가능합니다."

#~ msgid ""
#~ "If you want to add a certain native library, your best bet is GDNative "
#~ "and custom C++ modules."
#~ msgstr ""
#~ "특정 네이티브 라이브러리를 추가하고 싶다면, GDNative와 커스텀 C++ 모듈이 "
#~ "가장 좋은 방법입니다."

#~ msgid "Why is FBX not supported for import?"
#~ msgstr "왜 FBX 가져오기를 지원하지 않나요?"

#~ msgid ""
#~ "That said, Godot's Collada support is good, please use the `OpenCollada "
#~ "<https://github.com/KhronosGroup/OpenCOLLADA/wiki/OpenCOLLADA-Tools>`_ "
#~ "exporter for maximum compatibility if you are using Maya or 3DS Max. If "
#~ "you are using Blender, take a look at our own `Better Collada Exporter "
#~ "<https://godotengine.org/download>`_."
#~ msgstr ""
#~ "그렇지만 고도의 Collada 지원이 정말 좋기 때문에 Maya나 3DS Max를 사용한다"
#~ "면 가장 호환성이 좋은 `OpenCollada <https://github.com/KhronosGroup/"
#~ "OpenCOLLADA/wiki/OpenCOLLADA-Tools>`_ 내보내기 도구를 사용해주세요. "
#~ "Blender를 사용한다면 우리가 만든 `Better Collada Exporter <https://"
#~ "godotengine.org/download>`_ 를 살펴보세요."

#~ msgid "Also, glTF support was added in Godot 3.0."
#~ msgstr "또한, Godot 3.0에서는 glTF 지원이 추가됐습니다."

#~ msgid ""
#~ "FBX support could still be provided by third parties as a plugin. (See "
#~ "Plugins question above.)"
#~ msgstr ""
#~ "FBX 지원은 서드 파티 플러그인으로 개발될 수도 있습니다. (위의 플러그인 질"
#~ "문을 참고하세요.)"

#~ msgid ""
#~ "No, the aim of Godot is to create a complete open source engine licensed "
#~ "under MIT, so you have complete control over every single piece of it. "
#~ "Open versions of functionality or features from such SDKs may be "
#~ "eventually added though."
#~ msgstr ""
#~ "아뇨, 고도의 목표는 MIT 라이선스 하에서 완전히 오픈 소스인 엔진, 여러분이 "
#~ "모든 코드를 마음대로 할 수 있는 엔진입니다. 하지만 그런 SDK들이 제공하는 "
#~ "기능이나 특징의 오픈 소스 버전이 있다면 추가될 수도 있습니다."

#~ msgid "I have a great idea that will make Godot better. What do you think?"
#~ msgstr "고도를 더 좋게 만들 아이디어가 떠올랐어요. 어떻게 생각하세요?"

#~ msgid ""
#~ "Your idea will most certainly be ignored. Examples of stuff that is "
#~ "ignored by the developers:"
#~ msgstr ""
#~ "이런 아이디어들은 개발자들이 무시할 수도 있어요. 몇가지 예를 들자면:"

#~ msgid "Let's do this because it will make Godot better"
#~ msgstr "이게 있다면 고도가 더 좋아질 겁니다"

#~ msgid "Let's do this in Godot because another game engine does it"
#~ msgstr "다른 게임엔진에도 있는 거니까 고도에도 추가합시다"

#~ msgid "Let's remove this because I think it's not needed"
#~ msgstr "이건 쓸모없을 것 같은데 삭제합시다"

#~ msgid "Let's remove clutter and bloat and make Godot look nicer"
#~ msgstr "고도가 깔끔하게 보이기 위해 난잡한 것들은 치워버립시다"

#~ msgid "Let's add an alternative workflow for people who prefer it"
#~ msgstr "사람들이 더 좋아할만한 워크플로우를 추가합시다"

#~ msgid ""
#~ "Godot developers are always willing to talk to you and listen to your "
#~ "feedback very openly, to an extent rarely seen in open source projects, "
#~ "but they will care mostly about real issues you have while using Godot, "
#~ "not ideas solely based on personal belief. Developers are interested in "
#~ "(for example):"
#~ msgstr ""
#~ "고도 개발자들은 어느 오픈 소스 프로젝트들에서도 보기 힘들정도로 여러분들"
#~ "과 의견을 주고 받습니다, 하지만 아이디어나 개인적인 의견이 아닌 고도를 사"
#~ "용하면서 불편한 점에 관심을 둡니다. 그러니까 이런 것에 흥미를 가집니다 (예"
#~ "시):"

#~ msgid ""
#~ "Once one of the above points is stated, we can work together on a "
#~ "solution and this is where your ideas and suggestions are most valuable "
#~ "and welcome, they need to be in context of a real issue."
#~ msgstr ""
#~ "위의 것들이 제안되면, 우리는 해결책을 찾기위해 함께 일할 것이고 여기서 아"
#~ "이디어나 의견들이 필요할 것입니다, 이것들은 말그대로 진짜 문제이기 때문입"
#~ "니다."

#~ msgid "Examples of how NOT to state problems generally and vaguely are:"
#~ msgstr "문제점들을 일반적이고 막연히 제시하면 안 되는 예시들이 있습니다:"

#~ msgid "Certain feature is ugly"
#~ msgstr "어떤 기능은 나빠요"

#~ msgid "Certain workflow is slow"
#~ msgstr "일부 워크플로우가 느려요"

#~ msgid "Certain feature needs optimization"
#~ msgstr "어떤 기능들은 최적화가 필요해요"

#~ msgid "Certain aspect of the UI looks cluttered"
#~ msgstr "특정 UI가 어수선해보여요"

#~ msgid ""
#~ "Associating something with an adjective will not get you much attention "
#~ "and developers will most likely not understand you. Instead, try to "
#~ "reformulate your problem as a story such as:"
#~ msgstr ""
#~ "형용사나 다른 말들을 붙인다고 눈에 띄진 않으며 오히려 개발자들이 이해하지 "
#~ "못 할 수도 있습니다. 따라서, 이후 예시처럼 문제점을 상황으로 표현해보세요:"

#~ msgid "I try to move objects around but always end up picking the wrong one"
#~ msgstr "오브젝트를 옮기려고 했지만 계속 다른 것들이 선택됩니다"

#~ msgid ""
#~ "I tried to make a game like Battlefield but I'm not managing to "
#~ "understand how to get lighting to look the same."
#~ msgstr ""
#~ "저는 배틀필드같은 게임을 만들려고 하지만 똑같은 조명 효과를 넣는 방법을 이"
#~ "해하지 못했습니다."

#~ msgid ""
#~ "I always forget which script I was editing, and it takes me too many "
#~ "steps to go back to it."
#~ msgstr ""
#~ "저는 편집했던 스크립트를 깜박해서, 다시 새 것으로 돌아가서 만듭니다."

#~ msgid ""
#~ "This will allow you to convey what you are thinking much better and set a "
#~ "common ground for discussion. Please try your best to state your problems "
#~ "as stories to the developers and the community, before discussing any "
#~ "idea. Be specific and concrete."
#~ msgstr ""
#~ "이것으로 여러분들의 생각이 훨씬 더 잘 전달되고 토론의 쟁점을 마련해 줄 것"
#~ "입니다. 어떤 아이디어를 개발자와 커뮤니티가 토론하기 위한 문제점을 위 형식"
#~ "에 맞추기 위해 최선을 다해 주십시오. 구체적이고 명확해야 합니다."

#~ msgid "Export Templates"
#~ msgstr "템플릿 내보내기"
