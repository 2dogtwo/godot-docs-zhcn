# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/community/contributing/pr_workflow.rst:4
msgid "Pull request workflow"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:8
msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:16
msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:22
msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organisation of Godot's Git repository."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:27
msgid "Git source repository"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:29
msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:33
msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"Si vous participer à la documentation, son dépôt peut être trouvé `ici "
"<https://github.com/godotengine/godot-docs>`_."

#: ../../docs/community/contributing/pr_workflow.rst:36
msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:46
msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:51
msgid "The branches on the Git repository are organized as follows:"
msgstr "Les branches sur le dépôt Git sont organisées de cette manière :"

#: ../../docs/community/contributing/pr_workflow.rst:53
msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""
"La branche ``master`` est celle ou se déroule le développement de la "
"prochaine version majeure. En tant que branche de développement, elle peut "
"être instable et n'est pas destinée à être utilisée en production. C'est ici "
"que les Pull Requests devraient être faites en priorité."

#: ../../docs/community/contributing/pr_workflow.rst:57
msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next major "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, you will "
"have to check if your changes are also relevant for the ``master`` branch."
msgstr ""
"Les branches stables sont nommées d'après leur version, par exemple ``3.1`` "
"et ``2.1``. Elles sont utilisées pour le rétro-portage des corrections de "
"bugs et des améliorations de la branche ``master`` vers la version stable "
"actuellement maintenue (par exemple 3.1.2 ou 2.1.6). En règle générale, la "
"dernière branche stable est maintenue jusqu'à la prochaine version majeure "
"(par exemple, la branche ``3.0`` a été maintenue jusqu'à la sortie de Godot "
"3.1). Si vous voulez effectuer les Pull Requests sur une branche stable "
"maintenue, vous devrez vérifier si vos modifications sont également "
"pertinentes pour la branche ``master``."

#: ../../docs/community/contributing/pr_workflow.rst:65
msgid ""
"There might be feature branches at time, usually meant to be merged into the "
"``master`` branch at some time."
msgstr ""
"Parfois, il peut également y avoir des branches de fonctionnalités, "
"généralement destinées à être fusionnées dans la branche ``master`` à un "
"moment donné."

#: ../../docs/community/contributing/pr_workflow.rst:69
msgid "Forking and cloning"
msgstr "Forker et cloner"

#: ../../docs/community/contributing/pr_workflow.rst:71
msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""
"La première étape consiste à *forker* le dépôt `godotengine/godot <https://"
"github.com/godotengine/godot>`_ sur GitHub. Pour ce faire, vous devez "
"disposer d'un compte GitHub et y être connecté. Dans le coin en haut à "
"droite de la page du dépôt GitHub, vous devriez voir un bouton \"Fork\" "
"comme montré ci-dessous :"

#: ../../docs/community/contributing/pr_workflow.rst:78
msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""
"Cliquez dessus, et après un certain temps, vous devriez être redirigé vers "
"votre propre fork du dépôt Godot, avec votre nom d'utilisateur GitHub comme "
"espace de noms :"

#: ../../docs/community/contributing/pr_workflow.rst:83
msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""
"Vous pouvez ensuite *cloner* votre fork, c'est-à-dire créer une copie locale "
"du dépôt en ligne (dans Git, on parle d'*origin remote*), Si vous ne l'avez "
"pas déjà fait, téléchargez Git depuis `son site web<https://git-scm.com>`_ "
"si vous utilisez Windows ou macOS, ou installez le à partir de votre "
"gestionnaire de paquets si vous utilisez Linux."

#: ../../docs/community/contributing/pr_workflow.rst:88
msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""
"Si vous êtes sous Windows, ouvrez Git Bash pour entrer des commandes. Les "
"utilisateurs de macOS et Linux peuvent utiliser leurs terminaux respectifs."

#: ../../docs/community/contributing/pr_workflow.rst:91
msgid "To clone your fork from GitHub, use the following command:"
msgstr "Pour cloner votre fork depuis GitHub, utilisez la commande suivante :"

#: ../../docs/community/contributing/pr_workflow.rst:97
msgid ""
"In our examples, the \"$\" character denotes the command line prompt on "
"typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""
"Dans nos exemples, le caractère \"$\" désigne l'invite de la ligne de "
"commande sur les shells UNIX. Il ne fait pas partie de la commande et ne "
"doit pas être tapé."

#: ../../docs/community/contributing/pr_workflow.rst:101
msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""
"Après un certain temps, vous devriez avoir un répertoire ``godot`` dans "
"votre répertoire de travail courant. Déplacez-vous dedans en utilisant la "
"commande ``cd`` :"

#: ../../docs/community/contributing/pr_workflow.rst:108
msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr ""
"Nous allons commencer par mettre en place une référence vers le dépôt "
"original que nous avons forké :"

#: ../../docs/community/contributing/pr_workflow.rst:115
msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"godotengine/godot repository. This will be useful when you want to pull new "
"commits from its ``master`` branch to update your fork. You have another "
"``remote`` reference named ``origin``, which points to your fork."
msgstr ""
"Cela va créer une référence nommée ``upstream`` pointant vers le dépôt "
"original godotengine/godot. Cela s’avérera utile quand vous voudrez "
"récupérer les nouveaux commits de sa branche ``master`` pour mettre à jour "
"votre fork. Vous avez une autre référence nommée ``origin``, qui pointe "
"directement vers votre fork."

#: ../../docs/community/contributing/pr_workflow.rst:120
msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""
"Vous n'avez besoin d'effectuer les étapes ci-dessus qu'une seule fois, tant "
"que vous gardez ce répertoire ``godot`` local (que vous pouvez déplacer si "
"vous le souhaitez, ses métadonnées importantes sont cachées dans son sous-"
"dossier ``.git``)."

#: ../../docs/community/contributing/pr_workflow.rst:124
msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"

#: ../../docs/community/contributing/pr_workflow.rst:127
msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""
"Cette mauvaise interprétation de *Technologic* des Daft Punk montre la "
"conception générale qu'ont les débutants du workflow Git : beaucoup de "
"commandes étranges à apprendre par le copier-coller, en espérant qu'elles "
"fonctionneront comme prévu. Cette manière d'apprendre n'est finalement pas "
"si mauvaise, tant que vous êtes curieux et que vous n'hésitez pas à demander "
"de l'aide à votre moteur de recherche quand vous êtes perdu. Nous allons "
"donc vous donner les commandes de base à connaître quand vous travaillez "
"avec Git."

#: ../../docs/community/contributing/pr_workflow.rst:135
msgid ""
"In the following, we will assume that you want to implement a feature in "
"Godot's project manager, which is coded in the ``editor/project_manager."
"cpp`` file."
msgstr ""
"Par la suite, nous supposerons que vous souhaitez implémenter une "
"fonctionnalité dans le gestionnaire de projets de Godot, qui est codé dans "
"le fichier ``editor/project_manager.cpp``."

#: ../../docs/community/contributing/pr_workflow.rst:140
msgid "Branching"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:142
msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""
"Par défaut, le ``git clone`` devrait vous avoir placé sur la branche "
"``master`` de votre fork(``origin``). Pour commencer le développement de "
"votre propre fonctionnalité, nous allons créer une branche de "
"fonctionnalité :"

#: ../../docs/community/contributing/pr_workflow.rst:154
msgid "This command is equivalent:"
msgstr "Cette commande est équivalente :"

#: ../../docs/community/contributing/pr_workflow.rst:161
msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr ""
"Si vous voulez retourner sur la branche ``master``, vous devez utiliser :"

#: ../../docs/community/contributing/pr_workflow.rst:167
msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr ""
"Vous pouvez voir la branche sur laquelle vous êtes actuellement avec la "
"commande ``git branch`` :"

#: ../../docs/community/contributing/pr_workflow.rst:178
msgid "Updating your branch"
msgstr "Mettre à jour votre branche"

#: ../../docs/community/contributing/pr_workflow.rst:180
msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""
"Cela n'est pas nécessaire la première fois (juste après avoir forké le dépôt "
"upstream). Cependant, la prochaine fois que vous voudrez travailler sur "
"quelque chose, vous remarquerez que la branche ``master`` de votre fork se "
"trouve plusieurs commits derrière la branche ``master`` du dépôt upstream : "
"des pull requests d'autres contributeurs ont été fusionnées entre-temps."

#: ../../docs/community/contributing/pr_workflow.rst:186
msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""
"Pour vous assurer qu'il n'y aura pas de conflits entre la fonctionnalité que "
"vous développez et la branche ``master`` actuelle du dépôt upstream, vous "
"allez devoir mettre à jour votre branche en faisant un *pulling* de la "
"branche de ce dépôt."

#: ../../docs/community/contributing/pr_workflow.rst:194
msgid ""
"However, if you had local commits, this method will create a so-called "
"\"merge commit\", and you will soon hear from fellow contributors that those "
"are not wanted in PRs. To update the branch without creating a merge commit, "
"you will have to use the ``--rebase`` option, so that your local commits are "
"replayed on top of the updated upstream ``master`` branch. It will "
"effectively modify the Git history of your branch, but that is for the "
"greater good."
msgstr ""
"Cependant, si vous avez des commits locaux, cette méthode créera un \"merge "
"commit\" comme on l'appelle, et vous entendrez bientôt par d'autres "
"collègues contributeurs que ces commits ne sont pas souhaités dans les Pull "
"Requests. Pour mettre à jour votre branche sans créer de merge commit, vous "
"allez devoir utiliser l'option ``--rebase``, afin que vos commit locaux "
"soient ré-effectués par-dessus la mise à jour de la branche ``master`` du "
"dépôt upstream. Cela va effectivement modifier l'historique Git de votre "
"branche, mais c'est pour l'intérêt général."

#: ../../docs/community/contributing/pr_workflow.rst:201
msgid "Therefore, the command that you should (almost) always use is:"
msgstr ""
"Par conséquent, la commande que vous devriez (presque) toujours utiliser "
"est :"

#: ../../docs/community/contributing/pr_workflow.rst:208
msgid ""
"If you have already pushed the merge commit without using ``rebase``, or "
"have made any other changes that have resulted in undesired history, you may "
"use a hard reset to revert to a specific commit and try again:"
msgstr ""
"Si vous avez déjà poussé le merge commit sans utiliser l'option ``rebase``, "
"ou si vous avez effectué d'autres changements qui ont abouti à un historique "
"indésirable, vous pouvez utiliser une réinitialisation dure pour revenir à "
"un commit spécifique et essayer à nouveau :"

#: ../../docs/community/contributing/pr_workflow.rst:216
msgid ""
"Once you have done this, you may run ``--rebase`` to merge master correctly."
msgstr ""
"Une fois que vous avez fait cela, vous pouvez exécuter ``--rebase`` pour "
"fusionner la branche master correctement."

#: ../../docs/community/contributing/pr_workflow.rst:218
msgid ""
"If you have already pushed the wrong commits to your remote branch, you will "
"have to force push by using ``git push --force``."
msgstr ""
"Si vous avez déjà poussé les mauvais commits sur votre branche distante, "
"vous allez devoir forcer le push en utilisant ``git push --force``."

#: ../../docs/community/contributing/pr_workflow.rst:221
msgid ""
"``git reset --hard`` can be a dangerous operation, especially if you have "
"untracked or uncommitted changes. However, if you have committed changes "
"that you reset using ``git reset --hard``, you may still be able to recover "
"them by resetting to a commit ID found with the ``git reflog`` command."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:228
msgid "Making changes"
msgstr "Effectuer des modifications"

#: ../../docs/community/contributing/pr_workflow.rst:230
msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""
"Vous pouvez ensuite faire vos modifications sur le fichier ``editor/"
"project_manager.cpp`` de notre exemple avec votre environnement de "
"développement habituel (éditeur de texte, IDE, etc.)."

#: ../../docs/community/contributing/pr_workflow.rst:234
msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:241
msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:244
msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:246
msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:248
msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:249
msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:251
msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:252
msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:254
msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:259
msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""
"``git log`` vous listera les dernier commits de votre branche courante. Si "
"vous avez fait des commits locaux, ils devraient être affichés en haut."

#: ../../docs/community/contributing/pr_workflow.rst:261
msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""
"``git show`` vous montrera les modifications effectuées par le dernier "
"commit. Vous pouvez également spécifier le hash d'un commit pour voir les "
"modifications de ce commit."

#: ../../docs/community/contributing/pr_workflow.rst:264
msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""
"Cela fait beaucoup à mémoriser ! Ne vous inquiétez pas, consultez juste cet "
"aide-mémoire quand vous avez besoin de faire des modifications, et apprenez "
"par la pratique."

#: ../../docs/community/contributing/pr_workflow.rst:267
msgid "Here's how the shell history could look like on our example:"
msgstr ""
"Voici à quoi pourrait ressembler l'historique du shell dans notre exemple :"

#: ../../docs/community/contributing/pr_workflow.rst:299
msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""
"Avec cela, nous devrions avoir deux nouveaux commits dans notre branche "
"``better-project-manager`` qui n'étaient pas dans notre branche ``master``. "
"Ces modifications restent seulement locales et le fork distant, ainsi que le "
"dépôt upstream ne savent pas qu'ils existent."

#: ../../docs/community/contributing/pr_workflow.rst:304
msgid "Pushing changes to a remote"
msgstr "Pousser les modifications sur un dépôt distant"

#: ../../docs/community/contributing/pr_workflow.rst:306
msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""
"C'est là qu'intervient le ``git push``. Dans Git, un commit est toujours "
"fait sur le dépôt local (contrairement à Subversion ou un commit modifie "
"directement le dépôt distant). Vous devez *pousser* les nouveaux commits sur "
"une branche distante pour les partager au reste du monde. Sa syntaxe est la "
"suivante :"

#: ../../docs/community/contributing/pr_workflow.rst:315
msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""
"La partie à propos de la branche distante peut être omise si vous voulez "
"qu'elle ait le même nom que la branche locale, ce qui est le cas dans notre "
"exemple, nous ferons donc :"

#: ../../docs/community/contributing/pr_workflow.rst:323
msgid ""
"Git will ask you for your username and password, and the changes will be "
"sent to your remote. If you check the fork's page on GitHub, you should see "
"a new branch with your added commits."
msgstr ""
"Git vous demandera votre nom d'utilisateur et votre mot de passe, et les "
"modifications seront envoyées sur votre dépôt distant. Si vous vous rendez "
"sur la page GitHub de votre fork, vous devriez voir une nouvelle branche "
"avec les commits que vous avez ajouté."

#: ../../docs/community/contributing/pr_workflow.rst:328
msgid "Issuing a pull request"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:330
msgid ""
"When you load your fork's branch on GitHub, you should see a line saying *"
"\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:337
msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the godotengine/godot upstream "
"repository. It should show you your two commits, and state \"Able to merge"
"\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR, something went wrong. Go to IRC and ask for "
"support :)"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:343
msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:349
msgid "Modifying a pull request"
msgstr "Modifier une pull request"

#: ../../docs/community/contributing/pr_workflow.rst:351
msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""
"Bien qu'elle soit examinée par les autres contributeurs, vous devrez souvent "
"apporter des modifications à votre Pull Request encore non fusionnée, soit "
"parce que les contributeurs le demandent, soit parce que vous avez vous-même "
"trouvé des bugs lors de tests."

#: ../../docs/community/contributing/pr_workflow.rst:355
msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""
"La bonne nouvelle, c'est que vous pouvez modifier une pull request "
"simplement en agissant sur la branche depuis laquelle vous avez fait la pull "
"request. Vous pouvez par exemple faire un nouveau commit sur cette branche, "
"le pousser sur votre fork et la Pulll Request sera mise à jour "
"automatiquement :"

#: ../../docs/community/contributing/pr_workflow.rst:370
msgid "That should do the trick, but..."
msgstr "Cela devrait faire l'affaire, mais..."

#: ../../docs/community/contributing/pr_workflow.rst:373
msgid "Mastering the PR workflow: the rebase"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:375
msgid ""
"On the situation outlined above, your fellow contributors who are "
"particularly pedantic regarding the Git history might ask your to *rebase* "
"your branch to *squash* or *meld* the last two commits together (i.e. the "
"two related to the project manager), as the second commit basically fixes an "
"issue in the first one."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:380
msgid ""
"Once the PR is merged, it is not relevant for a changelog reader that the PR "
"author made mistakes; instead, we want to keep only commits that bring from "
"one working state to another working state."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:384
msgid ""
"To squash those two commits together, we will have to *rewrite history*. "
"Right, we have that power. You may read that it's a bad practice, and it's "
"true when it comes to branches of the upstream repo. But in your fork, you "
"can do whatever you want, and everything is allowed to get neat PRs :)"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:389
msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit hash as argument, and will let you modify all commits "
"between that commit hash and the last one of the branch, the so-called "
"*HEAD*. In our example, we want to act on the last two commits, so we will "
"do:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:400
msgid "This will open a text editor with:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:407
msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:420
msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:425
msgid ""
"You could have avoided this rebase by using ``git commit --amend`` when "
"fixing the typo. This command will write the staged changes directly into "
"the *last* commit (``HEAD``), instead of creating a new commit like we did "
"in this example. So it is equivalent to what we did with a new commit and "
"then a rebase to mark it as \"fixup\"."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:431
msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:445
msgid ""
"This is a sane behaviour, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:453
msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:458
msgid "Deleting a Git branch"
msgstr "Supprimer une branche Git"

#: ../../docs/community/contributing/pr_workflow.rst:460
msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""
"Une fois que votre pull request a été fusionnée, il vous reste une dernière "
"chose à faire : supprimer la branche Git de votre pull request. Cela ne "
"posera pas de problèmes si vous ne supprimez pas votre branche mais c'est "
"une bonne pratique à adopter. Vous devrez le faire deux fois, une fois pour "
"la branche locale et une autre pour la branche distante sur GitHub."

#: ../../docs/community/contributing/pr_workflow.rst:465
msgid "To delete our better project manager branch locally, use this command:"
msgstr ""
"Pour supprimer notre branche better-project-manager localement, utilisez "
"cette commande :"

#: ../../docs/community/contributing/pr_workflow.rst:471
msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""
"Par ailleurs, si la branche n'avait pas été encore fusionnée et que nous "
"voulions tout de même la supprimer, vous utiliseriez ``-D`` au lieu de ``-"
"d``."

#: ../../docs/community/contributing/pr_workflow.rst:474
msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr ""
"Ensuite, pour supprimer la branche distante sur GitHub, utilisez cette "
"commande :"
