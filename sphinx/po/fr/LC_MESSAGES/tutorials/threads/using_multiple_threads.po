# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-05 17:37+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:4
msgid "Using multiple threads"
msgstr "Utilisation de plusieurs threads"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:7
msgid "Threads"
msgstr "Sujets"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:9
msgid ""
"Threads allow simultaneous execution of code. It allows off-loading work "
"from the main thread."
msgstr ""
"Les threads permettent l'exécution simultanée de code. Cela permet de "
"décharger le travail du thread principal."

#: ../../docs/tutorials/threads/using_multiple_threads.rst:12
msgid "Godot supports threads and provides many handy functions to use them."
msgstr ""
"Godot supporte les threads et fournit de nombreuses fonctions pratiques pour "
"les utiliser."

#: ../../docs/tutorials/threads/using_multiple_threads.rst:14
msgid ""
"If using other languages (C#, C++), it may be easier to use the threading "
"classes they support."
msgstr ""
"Si vous utilisez d'autres langages (C#, C++), il peut être plus facile "
"d'utiliser directement les classes de threads qu'ils supportent."

#: ../../docs/tutorials/threads/using_multiple_threads.rst:18
msgid "Creating a Thread"
msgstr "Création d’un thread"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:20
msgid "Creating a thread is very simple, just use the following code:"
msgstr ""
"La création d’un thread est très simple, il suffit d’utiliser le code "
"suivant :"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:45
msgid ""
"Your function will, then, run in a separate thread until it returns. Even if "
"the function has returned already, the thread must collect it, so call :ref:"
"`Thread.wait_to_finish()<class_Thread_method_wait_to_finish>`, which will "
"wait until the thread is done (if not done yet), then properly dispose of it."
msgstr ""
"Votre fonction s'exécutera alors dans un thread séparé jusqu'à ce qu'elle "
"retourne. Même si la fonction est déjà retournée, le thread doit la "
"collecter, alors appelez :ref:`Thread."
"wait_to_finish()<class_Thread_method_wait_to_finish>`, qui attendra que le "
"thread soit terminé (si ce n'est pas encore fait), puis supprimez-le "
"correctement."

#: ../../docs/tutorials/threads/using_multiple_threads.rst:51
msgid "Mutexes"
msgstr "Mutexes"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:53
msgid ""
"Accessing objects or data from multiple threads is not always supported (if "
"you do it, it will cause unexpected behaviors or crashes). Read the :ref:"
"`doc_thread_safe_apis` documentation to understand which engine APIs support "
"multiple thread access."
msgstr ""
"Accéder à des objets ou des données depuis plusieurs threads n'est pas "
"toujours supporté (si vous le faites, cela provoquera des comportements "
"inattendus ou des plantages). Lisez :ref:`doc_thread_safe_apis` pour "
"comprendre quelles API du moteur supportent l'accès par plusieurs threads."

#: ../../docs/tutorials/threads/using_multiple_threads.rst:58
msgid ""
"When processing your own data or calling your own functions, as a rule, try "
"to avoid accessing the same data directly from different threads. You may "
"run into synchronization problems, as the data is not always updated between "
"CPU cores when modified. Always use a :ref:`Mutex<class_Mutex>` when "
"accessing a piece of data from different threads."
msgstr ""
"En règle générale, lorsque vous traitez vos propres données ou que vous "
"appelez vos propres fonctions, essayez d'éviter d'accéder aux mêmes données "
"directement depuis différents threads. Vous pouvez rencontrer des problèmes "
"de synchronisation, car les données ne sont pas toujours mises à jour entre "
"les cœurs du processeur lorsqu'elles sont modifiées. Utilisez toujours un :"
"ref:`Mutex<class_Mutex>` lorsque vous accédez à une donnée depuis différents "
"threads."

#: ../../docs/tutorials/threads/using_multiple_threads.rst:64
msgid ""
"When calling :ref:`Mutex.lock()<class_Mutex_method_lock>`, a thread ensures "
"that all other threads will be blocked (put on suspended state) if they try "
"to *lock* the same mutex. When the mutex is unlocked by calling :ref:`Mutex."
"unlock()<class_Mutex_method_unlock>`, the other threads will be allowed to "
"proceed with the lock (but only one at a time)."
msgstr ""
"Lors de l'appel de :ref:`Mutex.lock()<class_Mutex_method_lock>`, un thread "
"assure que tous les autres threads seront bloqués (mis en état suspendu) "
"s'ils tentent de *verrouiller* le même mutex. Lorsque le mutex est "
"déverrouillé en appelant :ref:`Mutex.unlock()<class_Mutex_method_unlock>`, "
"les autres threads seront autorisés à verrouiller le mutex (mais un seul à "
"la fois)."

#: ../../docs/tutorials/threads/using_multiple_threads.rst:70
msgid "Here is an example of using a Mutex:"
msgstr "Voici un exemple d'utilisation d'un Mutex :"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:102
msgid "Semaphores"
msgstr "Semaphores"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:104
msgid ""
"Sometimes you want your thread to work *\"on demand\"*. In other words, tell "
"it when to work and let it suspend when it isn't doing anything. For this, :"
"ref:`Semaphores<class_Semaphore>` are used. The function :ref:`Semaphore."
"wait()<class_Semaphore_method_wait>` is used in the thread to suspend it "
"until some data arrives."
msgstr ""
"Parfois, vous voulez que votre thread fonctionne *\"à la demande \"*. En "
"d'autres termes, lui dire quand il doit travailler et le laissez suspendu "
"quand il ne fait rien. Pour cela, on utilise :ref:"
"`Semaphores<classe_Semaphore>`. La fonction :ref:`Semaphore."
"wait()<class_Semaphore_method_wait>` est utilisée dans le thread pour le "
"suspendre jusqu'à ce que des données arrivent."

#: ../../docs/tutorials/threads/using_multiple_threads.rst:110
msgid ""
"The main thread, instead, uses :ref:`Semaphore."
"post()<class_Semaphore_method_post>` to signal that data is ready to be "
"processed:"
msgstr ""
"Le thread principal, au contraire, utilise :ref:`Semaphore."
"post()<class_Semaphore_method_post>` pour signaler que les données sont "
"prêtes à être traitées :"
