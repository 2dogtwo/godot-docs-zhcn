# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-29 21:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:4
msgid "Custom drawing in 2D"
msgstr "Dessin personnalisé en 2D"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:7
msgid "Why?"
msgstr "Pourquoi ?"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:9
msgid ""
"Godot has nodes to draw sprites, polygons, particles, and all sorts of "
"stuff. For most cases, this is enough; but not always. Before crying in "
"fear, angst, and rage because a node to draw that specific *something* does "
"not exist... it would be good to know that it is possible to easily make any "
"2D node (be it :ref:`Control <class_Control>` or :ref:`Node2D "
"<class_Node2D>` based) draw custom commands. It is *really* easy to do it, "
"too."
msgstr ""
"Godot a des nœuds pour dessiner des sprites, des polygones, des particules "
"et toutes sortes de choses. Dans la plupart des cas, cela suffit mais pas "
"toujours. Avant de s'énerver parce qu'un nœud pour dessiner *quelque chose* "
"de spécifique n’existe pas, il serait bon de savoir qu’il est possible de "
"créer facilement n'importe quel nœud 2D (qu’il soit d'origine :ref:`Contrôle "
"< class_Control>` ou :ref:`Node2D <class_Node2D> `) de commandes de dessins "
"personnalisées. C'est *vraiment* facile à faire aussi."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:17
msgid "But..."
msgstr "Mais..."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:19
msgid ""
"Custom drawing manually in a node is *really* useful. Here are some examples "
"why:"
msgstr ""
"Le dessin personnalisé manuellement dans un nœud est *vraiment* utile. Voici "
"quelques exemples pourquoi :"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:22
msgid ""
"Drawing shapes or logic that is not handled by nodes (example: making a node "
"that draws a circle, an image with trails, a special kind of animated "
"polygon, etc)."
msgstr ""
"Dessiner des formes ou des logiques non gérées par des nœuds (exemple: créer "
"un nœud qui dessine un cercle, une image avec des traînées, un type spécial "
"de polygone animé, etc.)."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:25
msgid ""
"Visualizations that are not that compatible with nodes: (example: a tetris "
"board). The tetris example uses a custom draw function to draw the blocks."
msgstr ""
"Des visualisations qui ne sont pas compatibles avec les nœuds: (exemple: une "
"carte tetris). L'exemple de tetris utilise une fonction de dessin "
"personnalisée pour dessiner les blocs."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:28
msgid ""
"Drawing a large number of simple objects. Custom drawing avoids the overhead "
"of using nodes which makes it less memory intensive and potentially faster."
msgstr ""
"Dessiner un grand nombre d'objets simples. Le dessin personnalisé permet "
"d'éviter l'utilisation de nœuds, ce qui réduit l'utilisation de la mémoire "
"et est potentiellement plus rapide."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:31
msgid ""
"Making a custom UI control. There are plenty of controls available, but it's "
"easy to run into the need to make a new, custom one."
msgstr ""
"Création d'un contrôle d'interface utilisateur personnalisé. Il existe de "
"nombreux contrôles disponibles, mais on peut rapidement avoir besoin d'en "
"créer un nouveau, personnalisé."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:35
msgid "OK, how?"
msgstr "D'accord, comment ?"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:37
msgid ""
"Add a script to any :ref:`CanvasItem <class_CanvasItem>` derived node, like :"
"ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`. Then override "
"the ``_draw()`` function."
msgstr ""
"Ajoutez un script à n'importe quel nœud dérivé d' :ref:`Élément de Canevas "
"<class_CanvasItem>, comme :ref:` Contrôle <contrôle_classe>` ou :ref:`Node2D "
"<class_Node2D>`. Puis remplacez la fonction _draw()."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:57
msgid ""
"Draw commands are described in the :ref:`CanvasItem <class_CanvasItem>` "
"class reference. There are plenty of them."
msgstr ""
"Les commandes de dessin sont décrites dans la référence de classe :ref:"
"`Elément de Canevas <class_CanvasItem>`. Elles sont nombreuses."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:61
msgid "Updating"
msgstr "Mise à jour"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:63
msgid ""
"The ``_draw()`` function is only called once, and then the draw commands are "
"cached and remembered, so further calls are unnecessary."
msgstr ""
"La fonction _draw() n'est appelée qu'une fois, puis les commandes de dessin "
"sont mises en mémoire tampon et mémorisées, de sorte que les appels "
"ultérieurs sont inutiles."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:66
msgid ""
"If re-drawing is required because a state or something else changed, simply "
"call :ref:`CanvasItem.update() <class_CanvasItem_method_update>` in that "
"same node and a new ``_draw()`` call will happen."
msgstr ""
"Si vous devez redessiner parce qu'un état ou quelque chose d'autre a changé, "
"appelez simplement :ref:`CanvasItem.update() "
"<class_CanvasItem_method_update>` dans ce même nœud et un nouvel appel "
"_draw() aura lieu."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:70
msgid ""
"Here is a little more complex example, a texture variable that will be "
"redrawn if modified:"
msgstr ""
"Voici un exemple un peu plus complexe. Une variable de texture qui sera "
"redessinée si modifiée :"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:114
msgid ""
"In some cases, it may be desired to draw every frame. For this, just call "
"``update()`` from the ``_process()`` callback, like this:"
msgstr ""
"Dans certains cas, il peut être souhaitable de dessiner chaque image. Pour "
"cela, appelez simplement ``update()`` à partir du rappel ``_process()``, "
"comme ceci :"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:146
msgid "An example: drawing circular arcs"
msgstr "Un exemple: dessiner des arcs de cercle"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:148
msgid ""
"We will now use the custom drawing functionality of the Godot Engine to draw "
"something that Godot doesn't provide functions for. As an example, Godot "
"provides a ``draw_circle()`` function that draws a whole circle. However, "
"what about drawing a portion of a circle? You will have to code a function "
"to perform this and draw it yourself."
msgstr ""
"Nous allons maintenant utiliser la fonctionnalité de dessin personnalisé du "
"moteur Godot pour dessiner quelque chose pour lequel Godot ne fournit pas de "
"fonctions. À titre d'exemple, Godot fournit une fonction draw_circle() qui "
"dessine un cercle entier. Cependant, qu'en est-il de dessiner une partie "
"d'un cercle ? Vous devrez coder vous-même une fonction pour résoudre ça et "
"la dessiner."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:154
msgid "Arc function"
msgstr "Fonction d'arc"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:156
msgid ""
"An arc is defined by its support circle parameters, that is, the center "
"position and the radius. The arc itself is then defined by the angle it "
"starts from and the angle at which it stops. These are the 4 arguments that "
"we have to provide to our drawing function. We'll also provide the color "
"value, so we can draw the arc in different colors if we wish."
msgstr ""
"Un arc est défini par les paramètres de son cercle. C'est-à-dire: la "
"position centrale et le rayon. L'arc lui-même est alors défini par l'angle "
"de départ et l'angle d'arrêt. Ce sont les 4 paramètres que nous devons "
"fournir à notre dessin. Nous fournirons également la valeur de couleur afin "
"que nous puissions dessiner l'arc de différentes couleurs si nous le "
"souhaitons."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:161
msgid ""
"Basically, drawing a shape on the screen requires it to be decomposed into a "
"certain number of points linked from one to the next. As you can imagine, "
"the more points your shape is made of, the smoother it will appear, but the "
"heavier it will also be in terms of processing cost. In general, if your "
"shape is huge (or in 3D, close to the camera), it will require more points "
"to be drawn without it being angular-looking. On the contrary, if your shape "
"is small (or in 3D, far from the camera), you may decrease its number of "
"points to save processing costs; this is known as *Level of Detail (LoD)*. "
"In our example, we will simply use a fixed number of points, no matter the "
"radius."
msgstr ""
"Fondamentalement, dessiner une forme à l'écran nécessite de la décomposer en "
"un certain nombre de points liés de l'un à l'autre. Comme vous pouvez "
"l’imaginer, plus votre forme est composée de points, plus elle paraîtra "
"lisse, mais plus elle sera lourde en termes de charge de traitement. En "
"général, si votre forme est énorme (ou en 3D, proche de la caméra), il "
"faudra dessiner plus de points sans qu'elle ait d'aspect angulaire. Au "
"contraire, si votre forme est petite (ou en 3D, loin de la caméra), vous "
"pouvez réduire son nombre de points pour diminuer la charge de traitement. "
"Cela s'appelle *Niveau de détail (LoD - Level of Details)*. Dans notre "
"exemple, nous utiliserons simplement un nombre fixe de points, quel que soit "
"le rayon."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:201
msgid ""
"Remember the number of points our shape has to be decomposed into? We fixed "
"this number in the ``nb_points`` variable to a value of ``32``. Then, we "
"initialize an empty ``PoolVector2Array``, which is simply an array of "
"``Vector2``\\ s."
msgstr ""
"Rappelez-vous le nombre de points en lequel notre forme doit être "
"décomposée ? Nous avons fixé ce nombre dans la variable ``nb_points`` à une "
"valeur de ``32``. Ensuite, nous initialisons un ``PoolVector2Array`` vide, "
"qui est simplement un tableau de ``Vector2``."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:205
msgid ""
"The next step consists of computing the actual positions of these 32 points "
"that compose an arc. This is done in the first for-loop: we iterate over the "
"number of points for which we want to compute the positions, plus one to "
"include the last point. We first determine the angle of each point, between "
"the starting and ending angles."
msgstr ""
"L'étape suivante consiste à calculer les positions réelles de ces 32 points "
"qui composent un arc. Ceci est fait dans la première boucle for: nous "
"itérons sur le nombre de points pour lesquels nous voulons calculer les "
"positions, plus un pour inclure le dernier point. Nous déterminons d'abord "
"l'angle de chaque point, entre les angles de départ et d'arrivée."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:210
msgid ""
"The reason why each angle is decreased by 90° is that we will compute 2D "
"positions out of each angle using trigonometry (you know, cosine and sine "
"stuff...). However, to be simple, ``cos()`` and ``sin()`` use radians, not "
"degrees. The angle of 0° (0 radian) starts at 3 o'clock, although we want to "
"start counting at 12 o'clock. So we decrease each angle by 90° in order to "
"start counting from 12 o'clock."
msgstr ""
"La raison pour laquelle chaque angle est réduit de 90° est que nous allons "
"calculer les positions 2D à partir de chaque angle en utilisant la "
"trigonométrie (vous savez, le cosinus et le sinus ...). Cependant, pour être "
"simple, ``cos()`` et ``sin()`` utilisent des radians, pas des degrés. "
"L'angle de 0° (0 radian) commence à 3 heures bien que nous souhaitions "
"commencer à compter à 12 heures. Nous réduisons donc chaque angle de 90° "
"pour pouvoir compter à partir de 12 heures."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:216
msgid ""
"The actual position of a point located on a circle at angle ``angle`` (in "
"radians) is given by ``Vector2(cos(angle), sin(angle))``. Since ``cos()`` "
"and ``sin()`` return values between -1 and 1, the position is located on a "
"circle of radius 1. To have this position on our support circle, which has a "
"radius of ``radius``, we simply need to multiply the position by ``radius``. "
"Finally, we need to position our support circle at the ``center`` position, "
"which is performed by adding it to our ``Vector2`` value. Finally, we insert "
"the point in the ``PoolVector2Array`` which was previously defined."
msgstr ""
"La position actuelle d'un point situé sur un cercle à l'angle ``angle`` (en "
"radians) est donnée par ``Vector2(cos(angle), sin(angle))``. Puisque "
"``cos()`` et ``sin()`` renvoient des valeurs comprises entre -1 et 1, la "
"position est située sur un cercle de rayon 1. Pour avoir cette position sur "
"notre cercle, lequel a un rayon de``radius``, nous devons simplement "
"multiplier la position par ``radius``. Enfin, nous devons positionner notre "
"cercle à la position ``center``, ce qui est fait en l'ajoutant à notre "
"valeur  ``Vector2``. Enfin, nous insérons le point dans le "
"``PoolVector2Array`` défini précédemment."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:224
msgid ""
"Now, we need to actually draw our points. As you can imagine, we will not "
"simply draw our 32 points: we need to draw everything that is between each "
"of them. We could have computed every point ourselves using the previous "
"method, and drew it one by one. But this is too complicated and inefficient "
"(except if explicitly needed), so we simply draw lines between each pair of "
"points. Unless the radius of our support circle is big, the length of each "
"line between a pair of points will never be long enough to see them. If that "
"were to happen, we would simply need to increase the number of points."
msgstr ""
"Maintenant, nous devons dessiner nos points. Comme vous pouvez l’imaginer, "
"nous ne dessinerons pas simplement nos 32 points: nous devons dessiner tout "
"ce qui les sépare. Nous aurions pu calculer nous-mêmes chaque point en "
"utilisant la méthode précédente et les dessiner un à un. Mais ceci est trop "
"compliqué et inefficace (sauf si explicitement requis). Donc, on trace "
"simplement des lignes entre chaque paire de points. À moins que le rayon de "
"notre cercle ne soit grand, la longueur de chaque ligne entre deux points ne "
"sera jamais assez longue pour les voir. Si cela se produit, il nous faudra "
"simplement augmenter le nombre de points."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:234
msgid "Draw the arc on the screen"
msgstr "Dessiner l'arc à l'écran"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:236
msgid ""
"We now have a function that draws stuff on the screen; it is time to call it "
"inside the ``_draw()`` function:"
msgstr ""
"Nous avons maintenant une fonction qui dessine des choses à l'écran, il est "
"temps de l'appeler dans la fonction _draw() :"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:263
msgid "Result:"
msgstr "Résultat :"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:268
msgid "Arc polygon function"
msgstr "Fonction de polygone d'arc"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:270
msgid ""
"We can take this a step further and not only write a function that draws the "
"plain portion of the disc defined by the arc, but also its shape. The method "
"is exactly the same as before, except that we draw a polygon instead of "
"lines:"
msgstr ""
"Nous pouvons aller plus loin et écrire non seulement une fonction qui "
"dessine la partie simple du disque définie par l’arc, mais aussi sa forme. "
"La méthode est exactement la même que précédemment, sauf que nous dessinons "
"un polygone au lieu de lignes :"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:310
msgid "Dynamic custom drawing"
msgstr "Dessin personnalisé dynamique"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:312
msgid ""
"All right, we are now able to draw custom stuff on the screen. However, it "
"is static; let's make this shape turn around the center. The solution to do "
"this is simply to change the angle_from and angle_to values over time. For "
"our example, we will simply increment them by 50. This increment value has "
"to remain constant or else the rotation speed will change accordingly."
msgstr ""
"Nous sommes maintenant en mesure de dessiner des éléments personnalisés à "
"l'écran. Cependant, c'est statique, faisons en sorte que cette forme tourne "
"autour du centre. La solution consiste simplement à modifier les valeurs "
"angle_from et angle_to dans le temps. Pour notre exemple, nous les "
"incrémenterons simplement de 50. Cette valeur d’incrément doit rester "
"constante sinon la vitesse de rotation changera en conséquence."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:318
msgid ""
"First, we have to make both angle_from and angle_to variables global at the "
"top of our script. Also note that you can store them in other nodes and "
"access them using ``get_node()``."
msgstr ""
"Premièrement, nous devons rendre globales, les variables  angle_from et "
"angle_to variables au début de notre script. Notez également que vous pouvez "
"les stocker dans d'autres nœuds et y accéder à l'aide de ``get_node()``."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:340
msgid "We make these values change in the _process(delta) function."
msgstr ""
"Nous faisons en sorte que ces valeurs changent dans la fonction "
"_process(delta)."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:342
msgid ""
"We also increment our angle_from and angle_to values here. However, we must "
"not forget to ``wrap()`` the resulting values between 0 and 360°! That is, "
"if the angle is 361°, then it is actually 1°. If you don't wrap these "
"values, the script will work correctly, but the angle values will grow "
"bigger and bigger over time until they reach the maximum integer value Godot "
"can manage (``2^31 - 1``). When this happens, Godot may crash or produce "
"unexpected behavior."
msgstr ""
"Nous incrémentons également nos valeurs angle_from et angle_to ici. "
"Cependant, il ne faut pas oublier de ``wrap()`` les valeurs résultantes "
"entre 0 et 360° ! Autrement dit, si l'angle est de 361°, il est en fait de "
"1°. Si vous n'enveloppez pas ces valeurs, le script fonctionnera "
"correctement, mais les valeurs d'angle deviendront de plus en plus grandes "
"avec le temps jusqu'à atteindre la valeur entière maximale que Godot peut "
"gérer (``2^31 - 1``). Lorsque cela se produit, Godot peut planter ou "
"produire un comportement inattendu."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:349
msgid ""
"Finally, we must not forget to call the ``update()`` function, which "
"automatically calls ``_draw()``. This way, you can control when you want to "
"refresh the frame."
msgstr ""
"Enfin, nous ne devons pas oublier d'appeler la fonction ``update()``, qui "
"appelle automatiquement ``_draw()``. De cette façon, vous pouvez contrôler "
"le moment où vous souhaitez actualiser le cadre."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:389
msgid ""
"Also, don't forget to modify the ``_draw()`` function to make use of these "
"variables:"
msgstr ""
"De plus, n'oubliez pas de modifier la fonction _draw() pour faire usage de "
"ces variables :"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:413
msgid ""
"Let's run! It works, but the arc is rotating insanely fast! What's wrong?"
msgstr ""
"Allons-y ! Cela fonctionne, mais l'arc tourne incroyablement vite ! Qu'est-"
"ce qui ne va pas ?"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:416
msgid ""
"The reason is that your GPU is actually displaying the frames as fast as it "
"can. We need to \"normalize\" the drawing by this speed; to achieve that, we "
"have to make use of the ``delta`` parameter of the ``_process()`` function. "
"``delta`` contains the time elapsed between the two last rendered frames. It "
"is generally small (about 0.0003 seconds, but this depends on your "
"hardware), so using ``delta`` to control your drawing ensures that your "
"program runs at the same speed on everybody's hardware."
msgstr ""
"La raison est que votre GPU affiche les images aussi rapidement que "
"possible. Nous devons \"normaliser\" le dessin par cette vitesse. Pour ce "
"faire, nous devons utiliser le paramètre ``delta`` de la fonction "
"``_process()``. ``delta`` contient le temps écoulé entre les deux dernières "
"images rendues. Il est généralement petit (environ 0,0003 seconde, mais cela "
"dépend de votre matériel). Ainsi, l'utilisation de ``delta`` pour contrôler "
"votre dessin assure que votre programme s'exécutera à la même vitesse sur le "
"matériel de tout le monde."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:424
msgid ""
"In our case, we simply need to multiply our ``rotation_angle`` variable by "
"``delta`` in the ``_process()`` function. This way, our 2 angles will be "
"increased by a much smaller value, which directly depends on the rendering "
"speed."
msgstr ""
"Dans notre cas, nous devons simplement multiplier notre variable  "
"``rotation_angle`` par ``delta`` dans la fonction ``_process()``. De cette "
"façon, nos 2 angles seront augmentés d'une valeur beaucoup plus petite, qui "
"dépend directement de la vitesse de rendu."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:458
msgid "Let's run again! This time, the rotation displays fine!"
msgstr "Allons-y encore ! Cette fois, la rotation s'opère correctement !"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:461
msgid "Tools"
msgstr "Outils"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:463
msgid ""
"Drawing your own nodes might also be desired while running them in the "
"editor to use as a preview or visualization of some feature or behavior."
msgstr ""
"Dessiner vos propres nœuds peut également être désiré lors de leur exécution "
"dans l'éditeur pour les utiliser comme prévisualisation ou visualisation de "
"certaines fonctionnalités ou comportements."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:467
msgid ""
"Remember to use the \"tool\" keyword at the top of the script (check the :"
"ref:`doc_gdscript` reference if you forgot what this does)."
msgstr ""
"N'oubliez pas d'utiliser le mot clé \"tool\" en haut du script (vérifiez la "
"référence :ref:`doc_gdscript` si vous avez oublié ce que cela fait)."
