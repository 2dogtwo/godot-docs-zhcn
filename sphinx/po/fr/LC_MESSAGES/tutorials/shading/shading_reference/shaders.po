# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:4
msgid "Shaders"
msgstr "Shaders"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:7
msgid "Introduction"
msgstr "Introduction"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:9
msgid ""
"Shaders are unique programs that run on the GPU. They are used to specify "
"how to take mesh data (vertex positions, colors, normals, etc.) and draw "
"them to the screen. Shaders do not process information the same way a normal "
"program does because they are optimized for running on the GPU. One "
"consequence of this is that shaders do not retain their data after they run; "
"they output a final color to the screen and then move on. Accordingly, there "
"is no way of accessing the color output from the last run of the shader."
msgstr ""
"Les shaders sont des programmes uniques qui tournent sur le GPU. Ils "
"permettent de spécifier comment prendre les données du maillage (positions "
"des sommets, couleurs, normales, etc.) et les dessiner à l'écran. Les "
"shaders ne traitent pas les informations de la même manière qu'un programme "
"normal car ils sont optimisés pour fonctionner sur le GPU. Une des "
"conséquences de cette situation est que les shaders ne conservent pas leurs "
"données après leur exécution ; ils émettent une couleur finale à l'écran et "
"passent ensuite à l'étape suivante. Par conséquent, il n'y a aucun moyen "
"d'accéder à la sortie couleur de la dernière passe du shader."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:16
msgid ""
"Godot uses a shader language very similar to GLSL, but with added "
"functionality and slightly less flexibility. The reason for doing this is "
"that Godot integrates built-in functionality to make writing complex shaders "
"substantially easier. Godot wraps the user-written shader code in code of "
"its own. That way, Godot handles a lot of the low-level stuff that the user "
"doesn't need to worry about, and it is able to parse your shader code and "
"use it to affect the rendering pipeline. For more advanced shaders, you can "
"turn this functionality off using a render_mode."
msgstr ""
"Godot utilise un langage de shader très similaire à GLSL, mais avec des "
"fonctionnalités supplémentaires et un peu moins de flexibilité. La raison en "
"est que Godot intègre des fonctionnalités intégrées pour faciliter "
"considérablement l'écriture de shaders complexes. Godot enveloppe le code du "
"shader écrit par l'utilisateur dans un code qui lui est propre. De cette "
"façon, Godot gère beaucoup de choses de bas niveau dont l'utilisateur n'a "
"pas à se soucier, et il est capable d'analyser votre code de shader et de "
"l'utiliser pour affecter le pipeline de rendu. Pour les shaders plus "
"avancés, vous pouvez désactiver cette fonctionnalité en utilisant un "
"render_mode."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:23
msgid ""
"This document provides you with some information about shaders, specific to "
"Godot. For a detailed reference of the shading language in Godot see the :"
"ref:`Godot shading language doc<doc_shading_language>`."
msgstr ""
"Ce document vous fournit quelques informations sur les shaders, spécifiques "
"à Godot. Pour une référence détaillée du langage de shading dans Godot, voir "
" :ref:`Godot shading language doc<doc_shading_language>`."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:27
msgid "Shader types"
msgstr "Types de shader"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:29
msgid ""
"Instead of supplying a general purpose configuration for all uses (2D, 3D, "
"particles), Godot shaders must specify what they are intended for. Different "
"types support different render modes, built-in variables, and processing "
"functions."
msgstr ""
"Au lieu de fournir une configuration générale pour tous les usages (2D, 3D, "
"particules), les shaders Godot doivent préciser à quoi ils sont destinés. "
"Différents types supportent différents modes de rendu, variables intégrées "
"et fonctions de traitement."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:33
msgid ""
"All shaders need to specify their type in the first line, in the following "
"format:"
msgstr ""
"Tous les shaders doivent spécifier leur type dans leur première ligne, dans "
"le format suivant :"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:39
msgid "Valid types are:"
msgstr "Les types valides sont :"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:41
msgid ":ref:`spatial <doc_spatial_shader>`: For 3D rendering."
msgstr ":ref:`spatial <doc_spatial_shader>` : Pour le rendu 3D."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:42
msgid ":ref:`canvas_item <doc_canvas_item_shader>`: For 2D rendering."
msgstr ":ref:`canvas_item <doc_canvas_item_shader>` : Pour le rendu 2D."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:43
msgid ":ref:`particles <doc_particle_shader>`: For particle systems."
msgstr ""
":ref:`particles <doc_particle_shader>` : Pour les systèmes de particules."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:45
msgid ""
"For detailed information on each shading type, see the corresponding "
"reference document."
msgstr ""
"Pour des informations détaillées sur chaque type de shader, regardez la page "
"de la documentation correspondante."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:48
msgid "Render modes"
msgstr "Mode de rendu"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:50
msgid ""
"Different shader types support different render modes. They are optional "
"and, if specified, must be after the *shader_type*. Render modes are used to "
"alter the way built-in functionality is handled. For example, it is common "
"to use the render mode ``unshaded`` to skip the built-in light processor "
"function."
msgstr ""
"Différents types de shader supportent différents modes de rendu. Ils sont "
"optionnels et, s’ils sont précisés, doivent être après le *shader_type*. Les "
"modes de rendu sont utilisés pour modifier la manière dont les "
"fonctionnalités intégrées sont gérées. Par exemple, il est courant "
"d’utiliser le mode de rendu ``unshaded`` (sans ombres) pour sauter la "
"fonction intégrée de traitement de la lumière."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:55
msgid "Render modes are specified underneath the shader type:"
msgstr "Les modes de rendu sont spécifiés en dessous du type de shader :"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:62
msgid ""
"Each shader type has a different list of render modes available. See the "
"document for each shader type for a complete list of render modes."
msgstr ""
"Chaque type de shader a une liste différente de mode de rendus disponibles. "
"Regardez la documentation de chaque type de shader pour une liste complète "
"des modes de rendu."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:66
msgid "Processor functions"
msgstr "Fonctions processeur"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:68
msgid ""
"Depending on the shader type, different processor functions may be "
"optionally overridden. For \"spatial\" and \"canvas_item\", it is possible "
"to override ``vertex``, ``fragment``, and ``light``. For \"particles\", only "
"``vertex`` can be overridden."
msgstr ""
"Selon le type de shader, différentes fonction processeur peuvent "
"optionnellement être réécrites. Pour \"spatial\" et \"canvas_item\", il est "
"possible de réécrire ``vertex``, ``fragment``, et ``light``. Pour \"particles"
"\", seul ``vertex`` peut être réécrit."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:73
msgid "Vertex processor"
msgstr "Processeur de sommet"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:75
msgid ""
"The ``vertex`` processing function is called once for every vertex in "
"\"spatial\" and \"canvas_item\" shaders. For \"particles\" shaders, it is "
"called once for every particle."
msgstr ""
"La fonction processeur ``vertex`` est appelée une fois pour chaque sommet "
"dans les shaders \"spatial\" et \"canvas_item\". Pour les shaders \"particles"
"\", elle est appelée une fois pour chaque particule."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:78
msgid ""
"The ``vertex`` function is used to modify per-vertex information that will "
"be passed on to the fragment function. It can also be used to establish "
"variables that will be sent to the fragment function by using varyings(see "
"other doc)."
msgstr ""
"La fonction ``vertex`` est utilisée pour modifier les informations par "
"vertex qui seront transmises à la fonction fragment. Il peut aussi être "
"utilisé pour établir des variables qui seront envoyées à la fonction "
"fragment en utilisant des varyings (voir autre doc)."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:82
msgid ""
"By default, Godot will take your vertex information and transform it "
"accordingly to be drawn. If this is undesirable, you can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example of this."
msgstr ""
"Par défaut, Godot prendra les informations de votre vertex et les "
"transformera en conséquence pour les dessiner. Si cela n'est pas "
"souhaitable, vous pouvez utiliser les modes de rendu pour transformer les "
"données vous-même ; voir le :ref:`Spatial shader doc <doc_spatial_shader>` "
"pour un exemple de ceci."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:87
msgid "Fragment processor"
msgstr "Processeur de fragments"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:89
msgid ""
"The ``fragment`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in \"spatial\" and \"canvas_item\" "
"shaders."
msgstr ""
"La fonction de traitement des ``fragment`` permet de régler les paramètres "
"du matériau Godot par pixel. Ce code s'exécute sur chaque pixel visible de "
"l'objet ou du dessein primitif. Il n'est disponible que dans les shaders "
"\"spatial\" et \"canvas_item\"."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:93
msgid ""
"The standard use of the fragment function is to set up material properties "
"that will be used to calculate lighting. For example, you would set values "
"for ``ROUGHNESS``, ``RIM``, or ``TRANSMISSION`` which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on effects that you do not use."
msgstr ""
"L'utilisation standard de la fonction de fragment consiste à définir les "
"propriétés des matériaux qui seront utilisées pour calculer l'éclairage. Par "
"exemple, vous pouvez définir des valeurs pour ``ROUGHNESS``, ``RIM``, ou "
"``TRANSMISSION`` qui indiquent à la fonction lumière comment les lumières "
"réagissent à ce fragment. Cela permet de contrôler un pipeline de shading "
"complexe sans que l'utilisateur n'ait à écrire beaucoup de code. Si vous "
"n'avez pas besoin de cette fonctionnalité intégrée, vous pouvez l'ignorer et "
"écrire votre propre fonction de traitement de la lumière et Godot "
"l'optimisera. Par exemple, si vous n'écrivez pas de valeur à ``RIM``, Godot "
"ne calculera pas l'éclairage rim. Lors de la compilation, Godot vérifie si "
"``RIM`` est utilisé ; si ce n'est pas le cas, il coupe tout le code "
"correspondant. Par conséquent, vous ne gaspillerez pas les calculs sur des "
"effets que vous n'utilisez pas."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:103
msgid "Light processor"
msgstr "Processeur de lumière"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:105
msgid ""
"The ``light`` processor runs per pixel too, but also runs for every light "
"that affects the object (and does not run if no lights affect the object). "
"It exists as a function called inside the ``fragment`` processor and "
"typically operates on the material properties setup inside the ``fragment`` "
"function."
msgstr ""
"Le processeur de ``light`` fonctionne aussi par pixel, mais aussi pour "
"chaque lumière qui affecte l'objet (et ne fonctionne pas si aucune lumière "
"n'affecte l'objet). Il existe sous la forme d'une fonction appelée à "
"l'intérieur du processeur de ``fragment`` et opère typiquement sur les "
"propriétés du matériau configurées à l'intérieur de la fonction ``fragment``."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:110
msgid ""
"The ``light`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` and :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectively."
msgstr ""
"Le processeur ``light`` fonctionne différemment en 2D qu'en 3D ; pour une "
"description de son fonctionnement dans chaque cas, voir leur documentation, :"
"ref:`CanvasItem shaders <doc_canvas_item_shader>` et :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectivement."
