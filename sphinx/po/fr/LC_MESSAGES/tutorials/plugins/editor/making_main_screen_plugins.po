# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:4
msgid "Making main screen plugins"
msgstr "Création de plugins pour l'écran principal"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:7
msgid "What this tutorial covers"
msgstr "Ce que couvre ce tutoriel"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:9
msgid ""
"As seen in the :ref:`doc_making_plugins` page, making a basic plugin that "
"extends the editor is fairly easy. This plugin mechanism also allows you to "
"create new UIs in the central part of the editor, similarly to the basic 2D, "
"3D, Script and AssetLib views. Such editor plugins are referred as \"Main "
"screen plugins\"."
msgstr ""
"Comme on le voit dans la page :ref:`doc_making_plugins`, réaliser un plugin "
"de base qui étend l'éditeur est assez facile. Ce mécanisme de plugin vous "
"permet également de créer de nouvelles interfaces utilisateur dans la partie "
"centrale de l'éditeur, de la même manière que les vues de base en 2D, 3D, "
"Script et AssetLib. Ces plugins d'éditeur sont appelés \"Main screen plugins"
"\"."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:15
msgid ""
"This tutorial leads you through the creation of a basic main screen plugin. "
"With this plugin example, we want to demonstrate:"
msgstr ""
"Ce tutoriel vous guide à travers la création d'un plugin de base pour "
"l'écran principal. Avec cet exemple de plugin, nous voulons démontrer :"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:18
msgid "Creating a main screen plugin"
msgstr "Création d'un plugin pour l'écran principal"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:19
msgid ""
"Linking the main screen to another plugin GUI element (such as a Tab panel, "
"similar to the Inspector tab)"
msgstr ""
"Lier l'écran principal à un autre élément de l'interface graphique du plugin "
"(comme un panneau d'onglets, similaire à l'onglet Inspecteur)"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:22
msgid ""
"For the sake of simplicity, the two GUI elements of our main screen plugin "
"will both consist in a Label and a Button. Pressing one element's button "
"will display some text on the other's label node."
msgstr ""
"Par souci de simplicité, les deux éléments de l'interface graphique de notre "
"plugin pour l'écran principal seront tous deux constitués d'un Label et un "
"Button. En appuyant sur le Button d'un élément, on peut afficher du texte "
"sur le nœud Label de l'autre élément."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:27
msgid "Initializing the plugin"
msgstr "Initialisation du plugin"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:29
msgid ""
"The plugin itself is a Godot project. It is best to set its contents in an "
"``addons/my_plugin_name/`` structure. The only files that lie in the root "
"folder are the project.godot file, and the project icon."
msgstr ""
"Le plugin lui-même est un projet Godot. Il est préférable de définir son "
"contenu dans une structure ``addons/my_plugin_name/``. Les seuls fichiers "
"qui se trouvent dans le dossier racine sont le fichier project.godot, et "
"l'icône du projet."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:33
msgid ""
"In the ``addons/my_plugin_name/`` folder, we create the ``plugin.cfg`` file "
"as described in the :ref:`doc_making_plugins` page."
msgstr ""
"Dans le dossier ``addons/my_plugin_name/``, nous créons le fichier ``plugin."
"cfg`` comme décris dans la page :ref:`doc_making_plugins`."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:45
msgid ""
"We also initialize the file targeted by the ``script=`` property of the ``."
"cfg`` file. In our example, ``main_screen_plugin.gd``."
msgstr ""
"Nous initialisons le fichier spécifié par la propriétés ``script=`` du "
"fichier ``.cfg``. Dans notre cas, ``main_screen_plugin.gd``."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:76
msgid ""
"The important part in this script is the ``has_main_screen()`` function, "
"which is overloaded so it returns ``true``. This function is automatically "
"called by the editor on plugin activation, to tell it that this plugin adds "
"a new center view to the editor. For now, we'll leave this script as-is and "
"we'll come back to it later."
msgstr ""
"La partie importante de ce script est la fonction ``has_main_screen()``, qui "
"est surchargée de sorte qu'elle renvoie ``true``. Cette fonction est "
"automatiquement appelée par l'éditeur lors de l'activation du plugin, pour "
"lui indiquer que ce plugin ajoute une nouvelle vue centrale à l'éditeur. "
"Pour l'instant, nous allons laisser ce script tel quel et nous y reviendrons "
"plus tard."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:83
msgid "Scenes"
msgstr "Les scènes"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:85
msgid ""
"The ``main_screen_plugin.gd`` file will be responsible for each of our "
"plugin's UI element instantiation, and it will also manage the communication "
"between them."
msgstr ""
"Le fichier ``main_screen_plugin.gd`` sera responsable de l'instanciation de "
"chacun des éléments de l'interface utilisateur de notre plugin, et il gérera "
"également la communication entre eux."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:88
#, fuzzy
msgid ""
"As a matter of fact, we wish to design each UI element in their own scene. "
"Different scenes are not aware of each other unless they are both children "
"of a parent scene, yet they will then require ``get_node(\"../sibling\")`` "
"accessors. Such practice is more likely to produce errors at runtime, "
"especially if these scenes do not share the same parent node. This is why, "
"they should only be allowed to access their children."
msgstr ""
"En fait, nous souhaitons concevoir chaque élément d'interface utilisateur "
"dans leur propre scène. Différentes scènes ne se connaissent pas sauf si "
"elles sont toutes les deux enfants d'une scène parent, mais elles auront "
"alors besoin des accesseurs ``get_node(\"../frère\")``. Une telle pratique "
"est plus susceptible de produire des erreurs lors de l'exécution, surtout si "
"ces scènes ne partagent pas le même nœud parent. C'est pourquoi, ils ne "
"devraient avoir accès qu'à leurs enfants."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:95
msgid ""
"So, in order to communicate information to another scene, the best design is "
"to define signals. If a user action in a UI scene #1 has to trigger "
"something in another UI scene #2, then this user action has to emit a signal "
"from scene #1, and scene #2 will be connected to that signal. Since all of "
"our UI scenes will be instanced by ``main_screen_plugin.gd`` script, this "
"one script will also connect each of them to the required signals."
msgstr ""
"Ainsi, afin de communiquer des informations à une autre scène, la meilleure "
"conception est de définir des signaux. Si une action utilisateur dans une "
"scène d'interface utilisateur #1 doit déclencher quelque chose dans une "
"autre scène d'interface utilisateur #2, cette action utilisateur doit "
"émettre un signal à partir de la scène #1, et la scène #2 sera connectée à "
"ce signal. Étant donné que toutes nos scènes d'interface utilisateur seront "
"instanciées par le script ``main_screen_plugin.gd``, ce script connectera "
"également chacune d'entre elles aux signaux requis."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:102
#, fuzzy
msgid ""
"If the ``main_screen_plugin.gd`` instantiates the UI scenes, won't they be "
"sibling nodes then?"
msgstr ""
"Si le ``main_screen_plugin.gd`` instancie les scènes de l'interface "
"utilisateur, ne seront-elles pas des nœuds frères ?"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:105
msgid ""
"Not necessarily: this script may add all UI scenes as children of the same "
"node of the editor's scene tree - but maybe it won't. And the "
"``main_screen_plugin.gd`` script will *not* be the parent node of any "
"instantiated scene because it is a script, not a node! This script will only "
"hold references to instantiated scenes."
msgstr ""
"Pas nécessairement : ce script peut ajouter toutes les scènes de l'interface "
"utilisateur en tant qu'enfants du même nœud de l'arbre des scènes de "
"l'éditeur - mais peut-être pas. Et le script ``main_screen_plugin.gd`` ne "
"sera *pas* le noeud parent d'une scène instanciée parce que c'est un script, "
"pas un noeud ! Ce script ne contiendra que des références à des scènes "
"instanciées."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:112
msgid "Main screen scene"
msgstr "Scène de l'écran principal"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:114
msgid ""
"Create a new scene with a ``Panel`` root node. Select this root node, and in "
"the viewport, click the ``Layout`` menu and select ``Full Rect``. You also "
"need to enable the ``Expand`` vertical size flag in the inspector. The panel "
"now uses all the space available in the viewport. Now, let's add a new "
"script on the root node. Name it ``main_panel.gd``."
msgstr ""
"Créer une nouvelle scène avec un noeud racine ``Panel``. Sélectionnez ce "
"nœud racine, et dans la fenêtre d'affichage, cliquez sur le menu ``Layout`` "
"et sélectionnez ``Full Rect``. Vous devez également activer le drapeau de "
"taille verticale ``Expand`` dans l'inspecteur. Le panel utilise désormais "
"tout l'espace disponible dans la fenêtre d'affichage. Maintenant, ajoutons "
"un nouveau script sur le nœud racine. Nommez-le ``main_panel.gd``."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:120
msgid ""
"We then add 2 children to this Panel node: first a ``Button`` node. Place it "
"anywhere on the Panel. Then add a ``Label`` node."
msgstr ""
"Nous ajoutons ensuite 2 enfants à ce nœud Panel : d'abord un nœud "
"``Button``. Placez-le n'importe où sur le Panel. Ensuite, ajoutez un noeud "
"``Label``."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:123
msgid ""
"Now we need to define a behaviour when this button is pressed. This is "
"covered by the :ref:`Handling a signal <doc_scripting_handling_a_signal>` "
"page, so this part will not be described in details in this tutorial. Select "
"the Button node and click the ``Node`` side dock. Select the ``pressed()`` "
"signal and click the ``Connect`` button (you can also double-click the "
"``pressed()`` signal instead). In the window that opened, select the Panel "
"node (we will centralize all behaviors in its attached script). Keep the "
"default function name, make sure that the ``Make function`` toggle is ON and "
"hit ``Connect``. This creates an ``_on_Button_pressed()`` function in the "
"``main_panel.gd`` script, that will be called every time the button is "
"pressed."
msgstr ""
"Nous devons maintenant définir un comportement lorsque ce bouton est pressé. "
"Ceci est couvert par la page :ref:`Handling a signal "
"<doc_scripting_handling_a_signal>`, cette partie ne sera donc pas décrite en "
"détail dans ce tutoriel. Sélectionnez le nœud Button et cliquez sur le dock "
"latéral ``Node``. Sélectionnez le signal ``pressed()`` et cliquez sur le "
"bouton ``Connect`` (vous pouvez également double-cliquer sur le signal "
"``pressed()`` à la place). Dans la fenêtre qui s'est ouverte, sélectionnez "
"le nœud Panel (nous centraliserons tous les comportements dans son script). "
"Conservez le nom de la fonction par défaut, assurez-vous que le bouton "
"``Make function`` est sur ON et appuyez sur ``Connect``. Cela crée une "
"fonction ``_on_Button_pressed()`` dans le script ``main_panel.gd``, qui sera "
"appelée à chaque fois que le bouton est pressé."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:135
msgid ""
"As the button gets pressed, we want the side-panel's ``Label`` node to show "
"a specific text. As explained above, we cannot directly access the target "
"scene, so we'll emit a signal instead. The ``main_screen_plugin.gd`` script "
"will then connect this signal to the target scene. Let's continue in the "
"``main_panel.gd`` script:"
msgstr ""
"Lorsque le bouton est pressé, nous voulons que le nœud``Label`` du panneau "
"latéral affiche un texte spécifique. Comme expliqué ci-dessus, nous ne "
"pouvons pas accéder directement à la scène cible, nous allons donc émettre "
"un signal à la place. Le script ``main_screen_plugin.gd`` va alors connecter "
"ce signal à la scène cible. Continuons dans le script ``main_panel.gd`` :"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:151
msgid ""
"In the same way, this main scene's Label node has to show a value when it "
"receives a specific signal. Let's create a new "
"``_on_side_button_pressed(text_to_show)`` function for this purpose:"
msgstr ""
"De la même manière, le nœud Label de cette scène principale doit afficher "
"une valeur lorsqu'il reçoit un signal spécifique. Créons une nouvelle "
"fonction ``on_side_button_pressed(text_to_show)`` à cet effet :"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:160
msgid ""
"We are done for the main screen panel. Save the scene as ``main_panel.tscn``."
msgstr ""
"Nous avons terminé pour le panneau de l'écran principal. Enregistrez la "
"scène sous le nom de ``main_panel.tscn``."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:163
msgid "Tabbed panel scene"
msgstr "Scène de panneau à onglets"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:165
msgid ""
"The tabbed panel scene is almost identical to the main panel scene. You can "
"either duplicate the ``main_panel.tscn`` file and name the new file "
"``side_panel.tscn``, or re-create it from a new scene by following the "
"previous section again. However, you will have to create a new script and "
"attach it to the Panel root node. Save it as ``side_panel.gd``. Its content "
"is slightly different, as the signal emitted and the target function have "
"different names. Here is the script's full content:"
msgstr ""
"La scène du panneau à onglets est presque identique à la scène du panneau "
"principal. Vous pouvez soit dupliquer le fichier ``main_panel.tscn`` et "
"nommer le nouveau fichier ``side_panel.tscn``, soit le recréer à partir "
"d'une nouvelle scène en suivant à nouveau la section précédente. Cependant, "
"vous devrez créer un nouveau script et l'attacher au nœud racine Panel. "
"Enregistrez-le sous le nom de ``side_panel.gd``. Son contenu est légèrement "
"différent, car le signal émis et la fonction cible portent des noms "
"différents. Voici le contenu complet du script :"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:188
msgid "Connecting the two scenes in the plugin script"
msgstr "Connecter les deux scènes dans le script du plugin"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:190
msgid ""
"We now need to update the ``main_screen_plugin.gd`` script so the plugin "
"instances our 2 GUI scenes and places them at the right places in the "
"editor. Here is the full ``main.gd``:"
msgstr ""
"Nous devons maintenant mettre à jour le script ``main_screen_plugin.gd`` "
"afin que le plugin instance nos 2 scènes d'interface graphique et les place "
"aux bons endroits dans l'éditeur. Voici le ``main.gd`` complet :"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:249
msgid ""
"A couple of specific lines were added. First, we defined the constants that "
"contain our 2 GUI packed scenes (``MainPanel`` and ``SidePanel``). We will "
"use these resources to instance both scenes."
msgstr ""
"Quelques lignes spécifiques ont été ajoutées. Tout d'abord, nous avons "
"défini les constantes qui contiennent nos deux scènes d'interface graphique "
"(``MainPanel`` et ``SidePanel``). Nous utiliserons ces ressources pour "
"instancier les deux scènes."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:253
msgid ""
"The ``_enter_tree()`` function is called before ``_ready()``. This is where "
"we actually instance the 2 GUI scenes, and add them as children of specific "
"parts of the editor. The side panel case is similar to the example shown in :"
"ref:`doc_making_plugins` page: we add the scene in an editor dock. We "
"specified it will be placed in the left-side dock, upper-left tab."
msgstr ""
"La fonction ``_enter_tree()`` est appelée avant ``_ready()``. C'est là que "
"nous avons intégré les deux scènes d'interface graphique et que nous les "
"avons ajoutées en tant qu'enfants de certaines parties de l'éditeur. Le cas "
"du panneau latéral est similaire à l'exemple présenté dans la page :ref:"
"`doc_making_plugins` : nous ajoutons la scène dans un dock de l'éditeur. "
"Nous avons précisé qu'il serait placé dans le dock de gauche, onglet en haut "
"à gauche."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:259
msgid ""
"``EditorPlugin`` class does not provide any function to add an element in "
"the main viewport. We thus have to use the ``get_editor_interface()."
"get_editor_viewport()`` to obtain this viewport and add our main panel "
"instance as a child to it. We call the ``make_visible(false)`` function to "
"hide the main panel so it is not directly shown when first activating the "
"plugin."
msgstr ""
"La classe ``EditorPlugin`` ne fournit aucune fonction pour ajouter un "
"élément dans la fenêtre principale. Nous devons donc utiliser la fonction "
"``get_editor_interface().get_editor_viewport()`` pour obtenir ce viewport et "
"y ajouter notre instance de panel principal en tant qu'enfant. Nous appelons "
"la fonction ``make_visible(false)`` pour cacher le panneau principal afin "
"qu'il ne soit pas directement affiché lors de la première activation du "
"plugin."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:266
msgid ""
"The ``_exit_tree()`` is pretty straightforward. It is automatically called "
"when the plugin is deactivated. It is then important to ``queue_free()`` the "
"elements previously instanced to preserve memory. If you don't, the elements "
"will effectively be invisible in the editor, but they will remain present in "
"the memory. Multiple de-activations/re-activations will then increase memory "
"usage without any way to free it, which is not good."
msgstr ""
"L'``_exit_tree()`` est assez simple. Il est automatiquement appelé lorsque "
"le plugin est désactivé. Il est alors important de ``queue_free()`` les "
"éléments précédemment instanciés pour préserver la mémoire. Si vous ne le "
"faites pas, les éléments seront effectivement invisibles dans l'éditeur, "
"mais ils resteront présents dans la mémoire. Les désactivations/"
"réactivations multiples augmenteront alors l'utilisation de la mémoire sans "
"aucun moyen de la libérer, ce qui n'est pas bon."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:273
msgid ""
"Finally the ``make_visible()`` function is overridden to hide or show the "
"main panel as needed. This function is automatically called by the editor "
"when the user clicks on another main viewport button such as 2D, 3D or "
"Script."
msgstr ""
"Enfin, la fonction ``make_visible()`` est surchargée pour cacher ou montrer "
"le panneau principal selon les besoins. Cette fonction est automatiquement "
"appelée par l'éditeur lorsque l'utilisateur clique sur un autre bouton de la "
"fenêtre principale comme 2D, 3D ou Script."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:278
msgid "Try the plugin"
msgstr "Essayez le plugin"

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:280
msgid ""
"Activate the plugin in the Project Settings. You'll observe a new button "
"next to 2D, 3D, Script above the main viewport. You'll also notice a new tab "
"in the left dock. Try to click the buttons in both side and main panels: "
"events are emitted and caught by the corresponding target scene to change "
"the Label caption inside it."
msgstr ""
"Activez le plugin dans les Paramètres du projet. Vous observerez un nouveau "
"bouton à côté de 2D, 3D, Script au-dessus de la fenêtre principale. Vous "
"remarquerez également un nouvel onglet dans le dock de gauche. Essayez de "
"cliquer sur les boutons des panneaux latéraux et principal : les événements "
"sont émis et captés par la scène cible correspondante pour modifier la "
"légende du Label à l'intérieur de celle-ci."

#: ../../docs/tutorials/plugins/editor/making_main_screen_plugins.rst:285
msgid ""
"If you would like to see a more complete example of what main screen plugins "
"are capable of, check out the 2.5D demo projects here: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/2.5d"
msgstr ""
