# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-27 13:49+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:4
msgid "Inspector plugins"
msgstr "Plugins inspecteur"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:6
msgid ""
"The inspector dock supports custom plugins to create your own widgets for "
"editing properties. This tutorial explains how to use the :ref:"
"`class_EditorInspectorPlugin` and :ref:`class_EditorProperty` classes to "
"write such plugins with the example of creating a custom value editor."
msgstr ""
"Le dock inspecteur prend en charge des plugins personnalisés pour créer vos "
"propres widgets pour modifier les propriétés. Ce tutoriel explique comment "
"utiliser les classes :ref:`class_EditorInspectorPlugin` et :ref:"
"`class_EditorProperty` pour écrire de tels plugins avec l'exemple de la "
"création d'un éditeur de valeur personnalisé."

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:12
msgid "Setup"
msgstr "Configuration"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:14
msgid ""
"Just like :ref:`doc_making_plugins`, we start out by making a new plugin, "
"getting a ``plugin.cfg`` file created, and start with our :ref:"
"`class_EditorPlugin`.  However, instead of using ``add_custom_node`` or "
"``add_control_to_dock`` we'll use ``add_inspector_plugin``."
msgstr ""
"Tout comme :ref:`doc_making_plugins`, nous commençons par créer un nouveau "
"plugin, en créant un fichier ``plugin.cfg``, et nous commençons avec notre :"
"ref:`class_EditorPlugin`.  Cependant, au lieu d'utiliser ``add_custom_node`` "
"ou ``add_control_to_dock``, nous utiliserons ``add_inspector_plugin``."

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:37
msgid "EditorInspectorPlugin"
msgstr "EditorInspectorPlugin"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:39
msgid ""
"To actually connect into the Inspector, we create a :ref:"
"`class_EditorInspectorPlugin` class. This script provides the \"hooks\" to "
"the inspector. Thanks to this class, the editor will call the functions "
"within the EditorInspectorPlugin while it goes through the process of "
"building the UI for the inspector. The script is used to check if we should "
"enable ourselves for any :ref:`class_Object` that is currently in the "
"inspector (including any :ref:`class_Resource` that is embedded!)."
msgstr ""
"Pour se connecter réellement à l'inspecteur, nous créons une classe :ref:"
"`class_EditorInspectorPlugin`. Ce script fournit les \"hooks\" à "
"l'inspecteur. Grâce à cette classe, l'éditeur appellera les fonctions de "
"l'EditorInspectorPlugin pendant qu'il construira l'interface utilisateur de "
"l'inspecteur. Le script est utilisé pour vérifier si nous devons nous "
"activer pour tout :ref:`class_Object` qui se trouve actuellement dans "
"l'inspecteur (y compris tout :ref:`class_Resource` qui est intégré !)."

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:47
msgid ""
"Once enabled, EditorInspectorPlugin has methods that allow for adding :ref:"
"`class_EditorProperty` nodes or just custom :ref:`class_Control` nodes to "
"the beginning and end of the inspector for that :ref:`class_Object`, or for "
"overriding or changing existing property editors."
msgstr ""
"Une fois activé, EditorInspectorPlugin a des méthodes qui permettent "
"d'ajouter des nœuds :ref:`class_EditorProperty` ou simplement de "
"personnaliser les nœuds :ref:`class_Control` au début et à la fin de "
"l'inspecteur pour ce :ref:`class_Object`, ou pour remplacer ou modifier des "
"éditeurs de propriétés existants."

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:80
msgid "EditorProperty"
msgstr "EditorProperty"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:82
msgid ""
"Next, we define the actual :ref:`class_EditorProperty` custom value editor "
"that we want instantiated to edit integers. This is a custom :ref:"
"`class_Control` and we can add any kinds of additional nodes to make "
"advanced widgets to embed in the inspector."
msgstr ""
"Ensuite, nous définissons l'éditeur de valeurs personnalisées :ref:"
"`class_EditorProperty` que nous voulons instancier pour éditer les entiers. "
"C'est un :ref:`class_Control` personnalisé et nous pouvons ajouter toutes "
"sortes de nœuds supplémentaires pour créer des widgets avancés à intégrer "
"dans l'inspecteur."
