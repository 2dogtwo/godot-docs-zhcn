# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/cpp/core_types.rst:4
msgid "Core types"
msgstr "Types cœur"

#: ../../docs/development/cpp/core_types.rst:6
msgid ""
"Godot has a rich set of classes and templates that compose its core, and "
"everything is built upon them."
msgstr ""
"Godot a une base riche de classes et templates qui forment son cœur, et tout "
"est construit autours d'eux."

#: ../../docs/development/cpp/core_types.rst:9
msgid ""
"This reference will try to list them in order for their better understanding."
msgstr ""
"Cette référence tentera de les répertorier afin de mieux les comprendre."

#: ../../docs/development/cpp/core_types.rst:13
msgid "Definitions"
msgstr "Définitions"

#: ../../docs/development/cpp/core_types.rst:15
msgid ""
"Godot uses the standard C99 datatypes, such as ``uint8_t``, ``uint32_t``, "
"``int64_t``, etc. which are nowadays supported by every compiler. "
"Reinventing the wheel for those is not fun, as it makes code more difficult "
"to read."
msgstr ""
"Godot utilise les types standard du C99, comme ``uint8_t``, ``uint32_t``, "
"``int64_t``, etc. Ces derniers sont aujourd'hui supporté par tout les "
"compilateurs. Réinventer la roue pour ceux-là n'est pas amusant, car cela "
"rend le code plus difficile à lire."

#: ../../docs/development/cpp/core_types.rst:20
msgid ""
"In general, care is not taken to use the most efficient datatype for a given "
"task unless using large structures or arrays. ``int`` is used through most "
"of the code unless necessary. This is done because nowadays every device has "
"at least a 32 bits bus and can do such operations in one cycle. It makes "
"code more readable too."
msgstr ""
"En général, on ne prend pas soin à utiliser le type le plus performant pour "
"une tâche donnée, sauf s'il s'agit d'utiliser de grande structures ou de "
"tableaux. ``int`` est utilisé dans la majorité du code, car aujourd'hui tout "
"les appareilles fonctionnement au minimum avec un bus de 32bits et peuvent "
"calculer de telles opérations en un cycle. Cela rend aussi le code plus "
"lisible."

#: ../../docs/development/cpp/core_types.rst:26
msgid ""
"For files or memory sizes, ``size_t`` is used, which is warranted to be 64 "
"bits."
msgstr ""
"Pour les fichiers ou des tailles de mémoire on utilise ``size_t``, il "
"garranti d'être sur 64bits."

#: ../../docs/development/cpp/core_types.rst:29
msgid ""
"For Unicode characters, CharType instead of wchar_t is used, because many "
"architectures have 4 bytes long wchar_t, where 2 bytes might be desired. "
"However, by default, this has not been forced and CharType maps directly to "
"wchar_t."
msgstr ""
"Pour les caractères Unicode, on utilise CharType au lieu de wchar_t, car de "
"nombreuses architectures ont un wchar_t de 4 octets, alors que 2 octets "
"pourraient être souhaitables. Cependant, par défaut, cela n'a pas été forcé "
"et CharType correspond directement à wchar_t."

#: ../../docs/development/cpp/core_types.rst:35
#: ../../docs/development/cpp/core_types.rst:132
#: ../../docs/development/cpp/core_types.rst:166
#: ../../docs/development/cpp/core_types.rst:182
#: ../../docs/development/cpp/core_types.rst:198
#: ../../docs/development/cpp/core_types.rst:209
#: ../../docs/development/cpp/core_types.rst:220
#: ../../docs/development/cpp/core_types.rst:233
msgid "References:"
msgstr "Références :"

#: ../../docs/development/cpp/core_types.rst:37
msgid ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/3.x/core/"
"typedefs.h>`__"
msgstr ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/3.x/core/"
"typedefs.h>`__"

#: ../../docs/development/cpp/core_types.rst:40
msgid "Memory model"
msgstr "Modèle mémoire"

#: ../../docs/development/cpp/core_types.rst:42
msgid ""
"PC is a wonderful architecture. Computers often have gigabytes of RAM, "
"terabytes of storage and gigahertz of CPU, and when an application needs "
"more resources the OS will swap out the inactive ones. Other architectures "
"(like mobile or consoles) are in general more limited."
msgstr ""
"Les ordinateurs sont de magnifiques architectures. Ces derniers ont souvent "
"des gigabytes de mémoire vive (RAM), des terabytes de stockage et des "
"gigahertz de processeur, lorsqu'une application a besoin de plus de "
"ressources le système d'exploitation lui assignera les ressources inactives. "
"D'autres architectures (comme les téléphones ou les consoles) sont en "
"général plus limités."

#: ../../docs/development/cpp/core_types.rst:47
msgid ""
"The most common memory model is the heap, where an application will request "
"a region of memory, and the underlying OS will try to fit it somewhere and "
"return it. This often works best and is flexible, but over time and with "
"abuse, this can lead to segmentation."
msgstr ""
"Le modèle de mémoire le plus courant est le tas (heap), où une application "
"demandera une région de la mémoire, et le système d'exploitation sous-jacent "
"tentera de trouver un espace adapté et de le renvoyer. Cela est plus "
"flexible et fonctionne souvent mieux, mais au fil des utilisations abusives, "
"cela peut aboutir à une segmentation."

#: ../../docs/development/cpp/core_types.rst:52
msgid ""
"Segmentation slowly creates holes that are too small for most common "
"allocations, so that memory is wasted. There is a lot of literature about "
"heap and segmentation, so this topic will not be developed further here. "
"Modern operating systems use paged memory, which helps mitigate the problem "
"of segmentation but doesn't solve it."
msgstr ""
"La segmentation crée lentement des troues qui sont trop petit pour la "
"plupart de allocations, alors la mémoire est gaspillé. Il y a beaucoup de "
"discussion autours du tas (heap) et de la segmentation, donc ce sujet ne "
"sera pas plus développé ici. Les systèmes d'exploitation modernes répondent "
"au problème en utilisant de la mémoire virtuelle paginé, cela aide mais "
"cependant ne résout pas le problème ."

#: ../../docs/development/cpp/core_types.rst:58
msgid ""
"However, in many studies and tests, it is shown that given enough memory, if "
"the maximum allocation size is below a given threshold in proportion to the "
"maximum heap size and proportion of memory intended to be unused, "
"segmentation will not be a problem over time as it will remain constant. In "
"other words, leave 10-20% of your memory free and perform all small "
"allocations and you are fine."
msgstr ""
"Toutefois, de nombreuses études et tests montrent qu'avec une mémoire "
"suffisante, si la taille maximale de l'allocation est inférieure à un seuil "
"donné par rapport à la taille maximale du tas et à la proportion de mémoire "
"destinée à être inutilisée, la segmentation ne posera pas de problème dans "
"le temps car elle restera constante. En d'autres termes, laissez 10 à 20 % "
"de votre mémoire libre et effectuez de petites allocations et tout ira bien."

#: ../../docs/development/cpp/core_types.rst:65
msgid ""
"Godot ensures that all objects that can be allocated dynamically are small "
"(less than a few kb at most). But what happens if an allocation is too large "
"(like an image or mesh geometry or large array)? In this case Godot has the "
"option to use a dynamic memory pool. This memory needs to be locked to be "
"accessed, and if an allocation runs out of memory, the pool will be "
"rearranged and compacted on demand. Depending on the need of the game, the "
"programmer can configure the dynamic memory pool size."
msgstr ""
"Godot garantie que tout les objets qui sont alloués dynamiquement sont petit "
"(tout au plus quelques kb). Mais que se passe-t-il si une allocation est "
"trop grande (comme une image, un maillage gémotrique ou encore un grand "
"tableau) ? Dans ce cas Godot peut utiliser des zones mémoires (memory pool). "
"Cette mémoire a besoin d'être vérouiller pour être accéder, et si une "
"allocation manque de mémoire alors la zone sera réorganisé et compacté. "
"dépendamment des besoins du jeu, le programmeur peut configurer la taille "
"dynamique de la zone mémoire."

#: ../../docs/development/cpp/core_types.rst:74
msgid "Allocating memory"
msgstr "Allouer de la mémoire"

#: ../../docs/development/cpp/core_types.rst:76
msgid ""
"Godot has many tools for tracking memory usage in a game, especially during "
"debug. Because of this, the regular C and C++ library calls should not be "
"used. Instead, a few other ones are provided."
msgstr ""
"Godot a de nombreux outils pour traquer l'utilisation de la mémoire dans un "
"jeu, spécialement lors du débogage. De ce fait, les allocateurs standard de "
"C et C++ ne doivent pas être utilisés, d'autres sont fournis."

#: ../../docs/development/cpp/core_types.rst:80
msgid "For C-style allocation, Godot provides a few macros:"
msgstr "Pour les allocations style C, Godot fourni quelques macros :"

#: ../../docs/development/cpp/core_types.rst:88
msgid ""
"These are equivalent to the usual malloc, realloc, free of the standard C "
"library."
msgstr ""
"Elles sont équivalentes au traditionnel malloc, realloc et free de la "
"librairie standard de C."

#: ../../docs/development/cpp/core_types.rst:91
msgid "For C++-style allocation, special macros are provided:"
msgstr "Pour les allocations style C++, des macros spéciales sont fournis :"

#: ../../docs/development/cpp/core_types.rst:101
msgid "which are equivalent to new, delete, new[] and delete[]."
msgstr "qui sont équivalente à new, delete, new[] et delete[]."

#: ../../docs/development/cpp/core_types.rst:103
msgid ""
"memnew/memdelete also use a little C++ magic and notify Objects right after "
"they are created, and right before they are deleted."
msgstr ""
"memnew/memdelete utilise aussi un peu de lmagie du C++ pour notifier les "
"Objets juste après leur création et juste avant leur destruction."

#: ../../docs/development/cpp/core_types.rst:106
msgid ""
"For dynamic memory, the PoolVector<> template is provided. PoolVector is a "
"standard vector class, and is very similar to vector in the C++ standard "
"library. To create a PoolVector buffer, use this:"
msgstr ""
"Pour de la mémoire dynamique, la classe template PoolVector est fourni. "
"PoolVector est fourni comme un vecteur classique et il est très similaire à "
"std::vector de C++. Pour construire un buffer PoolVector utilisez cela :"

#: ../../docs/development/cpp/core_types.rst:114
msgid ""
"PoolVector can be accessed using the [] operator and a few helpers exist for "
"this:"
msgstr ""
"PoolVector peut être consulté en utilisant l'opérateur [] et quelques "
"helpers existent pour cela :"

#: ../../docs/development/cpp/core_types.rst:126
msgid ""
"These operations allow fast read/write from PoolVectors and keep it locked "
"until they go out of scope. However, PoolVectors should be used for small, "
"dynamic memory operations, as read() and write() are too slow for a large "
"amount of accesses."
msgstr ""
"Ces opérations permettent des lectures/écriture rapide de PoolVectors et de "
"le regarder vérouiller jusqu'à qu'elles sortent de la portée (scope). "
"Cependant, les PoolVectors devraient être utilisé pour de petite oéprations "
"dynamique de mémoire, car read() et write() sont trop lent pour un grand "
"nombre d'accès."

#: ../../docs/development/cpp/core_types.rst:134
msgid ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/3.x/core/os/"
"memory.h>`__"
msgstr ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/3.x/core/os/"
"memory.h>`__"

#: ../../docs/development/cpp/core_types.rst:135
msgid ""
"`core/pool_vector.h <https://github.com/godotengine/godot/blob/3.x/core/"
"pool_vector.cpp>`__"
msgstr ""
"`core/pool_vector.h <https://github.com/godotengine/godot/blob/3.x/core/"
"pool_vector.cpp>`__"

#: ../../docs/development/cpp/core_types.rst:138
msgid "Containers"
msgstr "Conteneurs"

#: ../../docs/development/cpp/core_types.rst:140
msgid "Godot provides also a set of common containers:"
msgstr "Godot propose aussi un ensemble de conteneurs classiques :"

#: ../../docs/development/cpp/core_types.rst:142
msgid "Vector"
msgstr "Vecteur"

#: ../../docs/development/cpp/core_types.rst:143
msgid "List"
msgstr "List"

#: ../../docs/development/cpp/core_types.rst:144
msgid "Set"
msgstr "Définir"

#: ../../docs/development/cpp/core_types.rst:145
msgid "Map"
msgstr "Map"

#: ../../docs/development/cpp/core_types.rst:147
msgid ""
"They are simple and aim to be as minimal as possible, as templates in C++ "
"are often inlined and make the binary size much fatter, both in debug "
"symbols and code. List, Set and Map can be iterated using pointers, like "
"this:"
msgstr ""
"Ils sont simple et fait pour être le plus minimal possible, comme les "
"templates de C++ sont souveent inliné et rendent les binaires bien plus "
"lourd, autant en symbols de débug que de code. List, Set et Map peuvent être "
"itérés en utilisant des pointeurs, comme cela :"

#: ../../docs/development/cpp/core_types.rst:158
msgid "The Vector<> class also has a few nice features:"
msgstr "La classe template Vector a aussi quelques cool fonctionnalités :"

#: ../../docs/development/cpp/core_types.rst:160
msgid ""
"It does copy on write, so making copies of it is cheap as long as they are "
"not modified."
msgstr ""
"Il copie en écriture, donc en faire des copies est peu coûteux marché tant "
"qu'elles ne sont pas modifiées."

#: ../../docs/development/cpp/core_types.rst:162
msgid ""
"It supports multi-threading, by using atomic operations on the reference "
"counter."
msgstr ""
"Il supporte le mutli-threading, en utilisant des opérations atomiques sur le "
"compteur de référence."

#: ../../docs/development/cpp/core_types.rst:168
msgid ""
"`core/vector.h <https://github.com/godotengine/godot/blob/3.x/core/vector."
"h>`__"
msgstr ""
"`core/vector.h <https://github.com/godotengine/godot/blob/3.x/core/vector."
"h>`__"

#: ../../docs/development/cpp/core_types.rst:169
msgid ""
"`core/list.h <https://github.com/godotengine/godot/blob/3.x/core/list.h>`__"
msgstr ""
"`core/list.h <https://github.com/godotengine/godot/blob/3.x/core/list.h>`__"

#: ../../docs/development/cpp/core_types.rst:170
msgid ""
"`core/set.h <https://github.com/godotengine/godot/blob/3.x/core/set.h>`__"
msgstr ""
"`core/set.h <https://github.com/godotengine/godot/blob/3.x/core/set.h>`__"

#: ../../docs/development/cpp/core_types.rst:171
msgid ""
"`core/map.h <https://github.com/godotengine/godot/blob/3.x/core/map.h>`__"
msgstr ""
"`core/map.h <https://github.com/godotengine/godot/blob/3.x/core/map.h>`__"

#: ../../docs/development/cpp/core_types.rst:174
msgid "String"
msgstr "Chaîne de caractères"

#: ../../docs/development/cpp/core_types.rst:176
msgid ""
"Godot also provides a String class. This class has a huge amount of "
"features, full Unicode support in all the functions (like case operations) "
"and utf8 parsing/extracting, as well as helpers for conversion and "
"visualization."
msgstr ""
"Godot fournit aussi une classe String. Cette classe possède un grand nombre "
"de fonctionnalités comme : un support de l'Unicode dans toute les fonctions "
"et du parsing/extraction d'utf8, de même que les helpers pour la conversion "
"et la visualisation."

#: ../../docs/development/cpp/core_types.rst:184
msgid ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/3.x/core/ustring."
"h>`__"
msgstr ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/3.x/core/ustring."
"h>`__"

#: ../../docs/development/cpp/core_types.rst:187
msgid "StringName"
msgstr "StringName"

#: ../../docs/development/cpp/core_types.rst:189
msgid ""
"StringNames are like a String, but they are unique. Creating a StringName "
"from a string results in a unique internal pointer for all equal strings. "
"StringNames are useful for using strings as identifier, as comparing them is "
"basically comparing a pointer."
msgstr ""
"Les StringNames sont comme une String, sauf qu'elles sont unique. Créer une "
"StringName depuis une chaîne de caractères résulte en un seul pointeur en "
"interne pour toute les chaînes égales. les StringNames sont utiles pour "
"utiliser une chaîne de caractère comme un indentificateur, vu que les "
"comparer revient à comparer des pointeurs."

#: ../../docs/development/cpp/core_types.rst:194
msgid ""
"Creation of a StringName (especially a new one) is slow, but comparison is "
"fast."
msgstr ""
"La construction d'un StringName (surtout un nouveau) est lent, mais la "
"comparaison est rapide."

#: ../../docs/development/cpp/core_types.rst:200
msgid ""
"`core/string_name.h <https://github.com/godotengine/godot/blob/3.x/core/"
"string_name.h>`__"
msgstr ""
"`core/string_name.h <https://github.com/godotengine/godot/blob/3.x/core/"
"string_name.h>`__"

#: ../../docs/development/cpp/core_types.rst:203
msgid "Math types"
msgstr "Types mathématiques"

#: ../../docs/development/cpp/core_types.rst:205
msgid ""
"There are several linear math types available in the core/math directory."
msgstr ""
"Il existe plusieurs types de mathématiques linéaires disponibles dans le "
"répertoire core/math."

#: ../../docs/development/cpp/core_types.rst:211
msgid "`core/math <https://github.com/godotengine/godot/tree/3.x/core/math>`__"
msgstr ""
"`core/math <https://github.com/godotengine/godot/tree/3.x/core/math>`__"

#: ../../docs/development/cpp/core_types.rst:214
msgid "NodePath"
msgstr "NodePath"

#: ../../docs/development/cpp/core_types.rst:216
msgid ""
"This is a special datatype used for storing paths in a scene tree and "
"referencing them fast."
msgstr ""
"C'est un type spécial qui est utilisé pour stocker des echemins dans une "
"scène arbre et les référencer rapidement."

#: ../../docs/development/cpp/core_types.rst:222
msgid ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/3.x/core/"
"node_path.h>`__"
msgstr ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/3.x/core/"
"node_path.h>`__"

#: ../../docs/development/cpp/core_types.rst:225
msgid "RID"
msgstr "RID"

#: ../../docs/development/cpp/core_types.rst:227
msgid ""
"RIDs are resource IDs. Servers use these to reference data stored in them. "
"RIDs are opaque, meaning that the data they reference can't be accessed "
"directly. RIDs are unique, even for different types of referenced data."
msgstr ""
"Les RIDs sont des identifiants de ressources. Les serveurs les utilisent "
"pour référencer les données qu'ils stockent. Les RID sont opaques, ce qui "
"signifie que les données qu'ils référencent ne sont pas directement "
"accessibles. Les RIDs sont uniques, même pour des types de données "
"référencées différents."

#: ../../docs/development/cpp/core_types.rst:235
msgid ""
"`core/rid.h <https://github.com/godotengine/godot/blob/3.x/core/rid.h>`__"
msgstr ""
"`core/rid.h <https://github.com/godotengine/godot/blob/3.x/core/rid.h>`__"
