# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-17 12:01+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:4
msgid "Godot scenes and scripts are classes"
msgstr "Les scènes de Godot et les scripts sont des classes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:6
msgid ""
"In Godot, scripts and scenes can both be the equivalent of classes in an "
"Object-Oriented programming language. The main difference is that scenes are "
"`declarative code <https://en.wikipedia.org/wiki/Declarative_programming>`_, "
"while scripts can contain `imperative code <https://en.wikipedia.org/wiki/"
"Imperative_programming>`_."
msgstr ""
"Dans Godot, les scripts et les scènes sont l'équivalent des classes dans les "
"langages de programmation Orientés Objet. La principale différence étant que "
"les scènes contiennent du `code déclaratif <https://fr.wikipedia.org/wiki/"
"Programmation_d%C3%A9clarative>`_, alors que les scripts peuvent contenir du "
"`code impératif <https://fr.wikipedia.org/wiki/Programmation_imp"
"%C3%A9rative>`_."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:12
msgid ""
"As a result, many best practices in Godot boil down to applying Object-"
"Oriented design principles to the scenes, nodes, or script that make up your "
"game."
msgstr ""
"De ce fait, beaucoup de bonnes pratiques de Godot se résument à appliquer "
"des principes de design Orienté Objet dans les scènes, nœuds ou scripts qui "
"composent votre jeu."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:15
msgid ""
"This guide explains how scripts and scenes work in the engine's core, to "
"help you get a sense of how Godot works under the hood, and to help you "
"better understand where some of this series' best practices come from."
msgstr ""
"Ce guide explique comment les scripts et les scènes fonctionnent dans le "
"cœur du moteur, pour vous aider à avoir une idée de la façon dont Godot "
"fonctionne sous le capot, et pour vous aider à mieux comprendre d'où "
"viennent certaines des meilleures pratiques de cette série."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:20
msgid "Making sense of classes in Godot"
msgstr "Donner un sens aux classes dans Godot"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:22
msgid ""
"Godot Engine provides built-in classes like :ref:`Node <class_Node>`. User-"
"created types are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"Le moteur Godot fournit des classes intégrées comme :ref:`Node "
"<class_Node>`. Les types créés par l'utilisateur ne sont pas techniquement "
"des classes. Au lieu de cela, ce sont des ressources qui indiquent au moteur "
"une séquence d'initialisation à exécuter sur l'une des classes intégrées du "
"moteur."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:27
msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Les classes internes de Godot ont des méthodes qui enregistrent les données "
"d'une classe avec un :ref:`ClassDB <class_ClassDB>`. Cette base de données "
"fournit un accès runtime aux informations de classe. ``ClassDB`` contient "
"des informations sur les classes comme :"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:31
msgid "properties"
msgstr "propriétés"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:32
msgid "methods"
msgstr "les méthodes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:33
msgid "constants"
msgstr "les constantes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:34
msgid "signals"
msgstr "les signaux"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:36
msgid ""
"This ``ClassDB`` is what Objects check against when performing an operation "
"like accessing a property or calling a method. ``ClassDB`` checks the "
"database's records and the records of the Object's base types to see if the "
"Object supports the operation."
msgstr ""
"Cette ``ClassDB``` est ce que les Objets vérifient quand ils exécutent une "
"opération comme accéder à une propriété ou appeler une méthode. ``ClassDB`` "
"vérifie les enregistrements de la base de données et les enregistrements des "
"types de base de l'objet pour voir si l'objet supporte l'opération."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:41
msgid ""
"On the engine's side, every class defines a static ``_bind_methods()`` "
"function that describes what C++ content it registers to the database and "
"how. When you use the engine, you can extend the methods, properties, and "
"signals available from the ``ClassDB`` by attaching a :ref:`Script "
"<class_Script>` to your node."
msgstr ""
"Côté moteur, chaque classe définit une fonction statique ``_bind_methods()`` "
"qui décrit le contenu C++ qu'elle enregistre dans la base et comment. "
"Lorsque vous utilisez le moteur, vous pouvez étendre les méthodes, "
"propriétés et signaux disponibles depuis la ``ClassDB`` en attachant un :ref:"
"`Script <class_Script>` à votre noeud."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:46
msgid ""
"Objects check their attached script before the database. This is why scripts "
"can override built-in methods. If a script defines a "
"``_get_property_list()`` method, Godot appends that data to the list of "
"properties the Object fetches from the ClassDB. The same is true for other "
"declarative code."
msgstr ""
"Les objets vérifient leur script attaché avant la base de données. C'est "
"pourquoi les scripts peuvent remplacer les méthodes intégrées. Si un script "
"définit une méthode ``_get_property_list()``, Godot ajoute ces données à la "
"liste des propriétés que l'objet récupère depuis la ClassDB. Il en va de "
"même pour les autres codes déclaratifs."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:51
msgid ""
"Even scripts that don't inherit from a built-in type, i.e. scripts that "
"don't start with the ``extends`` keyword, implicitly inherit from the "
"engine's base :ref:`Reference <class_Reference>` class. This allows the "
"Object to defer to the script's content where the engine logic deems "
"appropriate."
msgstr ""
"même les scripts qui n’héritent pas d'un type basique (built-in), c'est à "
"dire qui ne commencent pas avec le mot clé ``extends``, héritent "
"implicitement de la classe `Reference <class_Reference>` du moteur. Cela "
"permet l'objet de s'en remettre au contenu du script si la logique du moteur "
"le juge approprié."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:58
msgid ""
"As a result, you can instance scripts without the ``extends`` keyword from "
"code, but you cannot attach them to a :ref:`Node <class_Node>`"
msgstr ""
"Par conséquent, vous pouvez instancier un script sans le mot clé ``extends`` "
"dans le code, cependant vous ne pouvez pas l'attacher a une :ref:`Node "
"<class_Node>`"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:63
msgid "Scripting performances and PackedScene"
msgstr "Performances des scripts et PackedScene"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:65
msgid ""
"As the size of Objects increases, the scripts' necessary size to create them "
"grows much, much larger. Creating node hierarchies demonstrates this. Each "
"individual Node's logic could be several hundred lines of code in length."
msgstr ""
"Au fur et à mesure que la taille des objets augmente, la taille nécessaire "
"aux scripts pour les créer devient beaucoup, beaucoup plus grande. La "
"création de hiérarchies de nœuds en est la preuve. La logique de chaque Nœud "
"individuel pourrait être de plusieurs centaines de lignes de code."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:69
msgid ""
"Let's see a simple example of creating a single ``Node`` as a child. The "
"code below creates a new ``Node``, changes its name, assigns a script to it, "
"sets its future parent as its owner so it gets saved to disk along with it, "
"and finally adds it as a child of the ``Main`` node:"
msgstr ""
"Voyons un exemple simple, créer un ``Nœud`` enfant seul. Le code ci dessous "
"crée un nouveau ``Nœud``, change son nom, lui assigne un script et change "
"son futur parent en son propriétaire, afin qu'il soit sauvegardé sur le "
"disque en même temps que lui, et finalement l'ajoute en tant qu'enfant du "
"nœud ``Principal`` (Main) :"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:109
msgid ""
"Script code like this is much slower than engine-side C++ code. Each change "
"makes a separate call to the scripting API which leads to many \"look-ups\" "
"on the back-end to find the logic to execute."
msgstr ""
"Le code d'un script comme celui ci est beaucoup plus lent que le C++ du "
"moteur. Chaque modification fait un appel distincts à l'API de script ce qui "
"mène à de nombreuses recherche en arrière plan pour trouver la logique à "
"exécuter."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:113
msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, are resources "
"that use serialized data to create objects. The engine can process scenes in "
"batches on the back-end and provide much better performance than scripts."
msgstr ""
"Les scènes aident à éviter ce genre de problème lié aux performances. :ref:"
"`PackedScene <class_PackedScene>`, le type basique duquel les scènes "
"héritent sont des ressources qui utilisent de données en série pour créer "
"des objets. Le moteur peut ensuite calculer les scènes en lots en arrière "
"plan ce qui permet de bien meilleures performances qu'avec des scripts."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:119
msgid "Scenes and scripts are objects"
msgstr "Scenes et scripts sont des objets"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:121
msgid ""
"Why is any of this important to scene organization? Because scenes *are* "
"objects. One often pairs a scene with a scripted root node that makes use of "
"the sub-nodes. This means that the scene is often an extension of the "
"script's declarative code."
msgstr ""
"Pourquoi tout cela est-il important pour l'organisation de la scène ? Parce "
"que les scènes *sont* des objets. On associe souvent une scène à un nœud "
"racine scripté qui utilise les nœuds inférieurs. Cela signifie que la scène "
"est souvent une extension du code déclaratif du script."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:126
msgid "The content of a scene helps to define:"
msgstr "Le contenu d'une scène aide à définir :"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:128
msgid "What nodes are available to the script"
msgstr "Quels nœuds sont disponibles pour le script"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:129
msgid "How they are organized"
msgstr "Comment ils sont organisés"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:130
msgid "How are they initialized"
msgstr "Comment sont-ils initialisés"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:131
msgid "What signal connections they have with each other"
msgstr "Quelles connections signal elles ont, les une avec les autres"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:133
msgid ""
"Many Object-Oriented principles which apply to written code *also* apply to "
"scenes."
msgstr ""
"Beaucoup de principe du paradigme de code Orienté-Objet qui s'appliquent au "
"code écrit s'appliquent aussi aux scènes."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:136
msgid ""
"The scene is *always an extension of the script attached to its root node*. "
"You can see all the nodes it contains as part of a single class."
msgstr ""
"La scène est toujours une extension du script attaché à son nœud racine. "
"Considérez chaque nœud qu'il contient comme une partie d'une unique classe."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:139
msgid ""
"Most of the tips and techniques explained in this series will build on this."
msgstr ""
"La plupart des conseils et techniques expliqués dans cette série "
"s'appuieront sur ça."
