# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-16 22:53+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:4
msgid "What are Godot classes really?"
msgstr "Mais que sont les classes Godot ?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:6
msgid ""
"Godot offers two main means of creating types: scripts and scenes. Both of "
"these represent a \"class\" since Godot revolves around Object-Oriented "
"design. *How* they do this may not be clear to beginner or intermediate "
"users though."
msgstr ""
"Godot propose deux moyens principaux pour créer des types : les scripts et "
"les scènes. Tous deux représentent une \"classe\" puisque Godot s'articule "
"autour du design orienté objet. La façon dont ils le font n'est pas toujours "
"claire pour les utilisateurs débutants ou intermédiaires."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:11
msgid ""
"Godot Engine provides classes out-of-the-box (like :ref:`Node "
"<class_Node>`), but user-created types are not actually classes. Instead "
"they are resources that tell the engine a sequence of initializations to "
"perform on an engine class."
msgstr ""
"Le moteur Godot fournit des classes prêtes à l'emploi (comme :ref:`Node "
"<class_Node>`), mais les types créés par l'utilisateur ne sont pas "
"réellement des classes. Ce sont plutôt des ressources qui indiquent au "
"moteur une séquence d'initialisation à effectuer sur une classe de moteur."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:16
msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information (also called \"reflection\"). Things stored in the ClassDB "
"include, among other things..."
msgstr ""
"Les classes internes de Godot ont des méthodes qui enregistrent les données "
"d'une classe avec un :ref:`ClassDB <class_ClassDB>`. Cette base de données "
"permet d'accéder en temps réel aux informations de la classe (aussi appelée "
"\"reflection\"). Les choses stockées dans la ClassDB incluent, entre autres "
"choses....."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:21
msgid "properties"
msgstr "propriétés"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:23
msgid "methods"
msgstr "les méthodes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:25
msgid "constants"
msgstr "les constantes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:27
msgid "signals"
msgstr "les signaux"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:29
msgid ""
"Furthermore, this ClassDB is what Objects actually check against when "
"performing any operation. Access a property? Call a method? Emit a signal? "
"It will check the database's records (and the records of the Object's base "
"types) to see if the Object supports the operation. Every C++ Object defines "
"a static `_bind_methods()` function that describes what C++ content it "
"registers to the database and how."
msgstr ""
"En outre, cette ClassDB est ce que les Objects vérifient lorsqu'ils "
"exécutent n'importe quelle opération. Accéder à une propriété ? Appeler une "
"méthode ? Émettre un signal ? Il vérifiera les enregistrements de la base de "
"données (ainsi que les enregistrements du type de base de l'objet) afin de "
"voir si l'Object supporte l'opération. Chaque Object C++ défini une fonction "
"statique `_bind_methods()` qui décrit quel contenu C++ il enregistre dans la "
"base de donnée et comment."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:36
msgid ""
"So, if the engine provides all of this data at startup, then how does a user "
"define their own data? It'd be nice if users could define a custom set of "
"data to be appended to an object's data. That way, users could inject their "
"own properties and methods into the engine's Object query requests."
msgstr ""
"Donc, si le moteur fournit toutes ces données au démarrage, alors comment un "
"utilisateur défini ses propres données ? Ce serait pratique si les "
"utilisateurs pouvaient définir un jeu personnalisé de données à ajouter aux "
"données d'un objet. De cette façon, les utilisateurs pourraient injecter "
"leurs propres propriétés et méthodes dans les requêtes d'Object du moteur."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:41
msgid ""
"*This* is what a :ref:`Script <class_Script>` is. Objects check their "
"attached script before the database, so scripts can even override methods. "
"If a script defines a `_get_property_list()` method, that data is appended "
"to the list of properties the Object fetches from the ClassDB. The same "
"holds true for other declarative code."
msgstr ""
"*Ceci* est ce qu'est un :ref:`Script <class_Script>`. Les Objects vérifient "
"d'abord leur script avant la base de donnée, donc les scripts peuvent même "
"redéfinir des méthodes. Si un script défini une méthode "
"`_get_property_list()`, la donnée est ajoutée à la liste des propriétés que "
"l'Object récupère de la base de données. Cela est aussi vrai pour les autres "
"codes déclaratifs."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:47
msgid ""
"This can lead to some users' confusion when they see a script as being a "
"class unto itself. In reality, the engine just auto-instantiates the base "
"engine class and then adds the script to that object. This then allows the "
"Object to defer to the Script's content where the engine logic deems "
"appropriate."
msgstr ""
"Cela peut être source de confusion pour certains utilisateurs lorsqu'ils "
"considèrent un script comme une classe à part entière. En réalité, le moteur "
"se contente d'auto-instancier la classe de base du moteur et ajoute ensuite "
"le script à cet objet. Ceci permet alors à l'Objet de s'en remettre au "
"contenu du Script lorsque la logique du moteur le juge approprié."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:53
msgid ""
"A problem does present itself though. As the size of Objects increases, the "
"scripts' necessary size to create them grows much, much larger. Creating "
"node hierarchies demonstrates this. Each individual Node's logic could be "
"several hundred lines of code in length."
msgstr ""
"Un problème se présente cependant. Au fur et à mesure que la taille des "
"objets augmente, la taille nécessaire aux scripts pour les créer devient "
"beaucoup, beaucoup plus grande. La création de hiérarchies de nœuds en est "
"la preuve. La logique de chaque Nœud individuel peut être longue de "
"plusieurs centaines de lignes de code."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:58
msgid "let's see a simple example of creating a single Node as a child."
msgstr ""
"voyons un exemple simple de création d'un Nœud unique en tant qu'enfant."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:98
msgid ""
"Notice that only two pieces of declarative code are involved in the creation "
"of this child node: the variable declaration and the constructor "
"declaration. Everything else about the child must be setup using imperative "
"code. However, script code is much slower than engine C++ code. Each change "
"must make a separate call to the scripting API which means a lot of C++ "
"\"lookups\" within data structures to find the corresponding logic to "
"execute."
msgstr ""
"Remarquons que seulement deux morceaux de code déclaratif sont impliqués "
"dans la création de ce nœud enfant : la déclaration de variable et la "
"déclaration de constructeur. Les autres caractéristiques doivent être mises "
"en place dans le code impératif. En revanche, le code de script est bien "
"plus lent que le code C++ du moteur. Chaque changement doit effectuer un "
"appel à l'API de script, ce qui correspond à beaucoup de \"recherches\" en C+"
"+ dans les structures de données pour trouver la logique a exécuter à chaque "
"fois."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:106
msgid ""
"To help offload the work, it would be convenient if one could batch up all "
"operations involved in creating and setting up node hierarchies. The engine "
"could then handle the construction using its fast C++ code, and the script "
"code would be free from the perils of imperative code."
msgstr ""
"Pour aider à décharger le travail, il serait pratique si on pouvait "
"regrouper toutes les opérations impliquées dans la création et la mise en "
"place des hiérarchies de nœuds. Le moteur pourrait alors gérer la "
"construction en utilisant son code C++ rapide, et le code du script serait "
"libre des périls du code impératif."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:111
msgid ""
"*This* is what a scene (:ref:`PackedScene <class_PackedScene>`) is: a "
"resource that provides an advanced \"constructor\" serialization which is "
"offloaded to the engine for batch processing."
msgstr ""
"*Ceci* est ce qu'est une scène (:ref:`PackedScene <class_PackedScene>`) : "
"une ressource qui fournit une sérialisation \"constructeur\" avancée qui est "
"transférée au moteur pour traitement par lots."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:115
msgid ""
"Now, why is any of this important to scene organization? Because one must "
"understand that scenes *are* objects. One often pairs a scene with a "
"scripted root node that makes use of the sub-nodes. This means that the "
"scene is often an extension of the script's declarative code."
msgstr ""
"Pourquoi tout cela est-il important pour l'organisation de scène ? Parce "
"qu'il faut comprendre que les scènes *sont* des objets. On associe souvent "
"une scène à un nœud racine scripté qui utilise les nœuds inférieurs. Cela "
"signifie que la scène est souvent une extension du code déclaratif du script."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:120
msgid "It helps to define..."
msgstr "Il aide à définir...."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:122
msgid "what objects are available to the script?"
msgstr "quels objets sont accessibles par le script ?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:124
msgid "how are they organized?"
msgstr "comment sont-ils organisés ?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:126
msgid "how are they initialized?"
msgstr "comment sont-ils initialisés ?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:128
msgid "what connections to each other do they have, if any?"
msgstr "quelles connexions ont-ils entre eux, s'ils en ont ?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:130
msgid ""
"As such, many Object-Oriented principles which apply to \"programming\", i."
"e. scripts, *also* apply to scenes. Some scripts are designed to only work "
"in one scene (which are often bundled into the scene itself). Other scripts "
"are meant to be re-used between scenes."
msgstr ""
"De ce fait, beaucoup de principes d'orientation objet qui s'appliquent à la "
"\"programmation\", c'est-à-dire aux scripts, s'appliquent *aussi* aux "
"scènes. Certains scripts sont conçus pour ne fonctionner que dans une unique "
"scène (et sont souvent inclus dans la scène elle-même). D'autres scripts "
"sont conçus pour être réutilisés entre les scènes."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:135
msgid ""
"**Regardless, the scene is always an extension of the root script, and can "
"therefore be interpreted as a part of the class.** Most of the points "
"covered in this series will build on this point, so keep it in mind."
msgstr ""
"**Quoi qu'il en soit, la scène est toujours une extension du script racine, "
"et peut par conséquent être considéré comme faisant partie de la classe.** "
"La majorité des points couverts dans cette série se baseront sur ce "
"principe, donc retenez-le bien."
