# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-02 11:13+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:4
#, fuzzy
msgid "Godot scenes and scripts are classes"
msgstr "Enregistrer des scripts en tant que classes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:6
msgid ""
"In Godot, scripts and scenes can both be the equivalent of classes in an "
"Object-Oriented programming language. The main difference is that scenes are "
"`declarative code <https://en.wikipedia.org/wiki/Declarative_programming>`_, "
"while scripts can contain `imperative code <https://en.wikipedia.org/wiki/"
"Imperative_programming>`_."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:12
msgid ""
"As a result, many best practices in Godot boil down to applying Object-"
"Oriented design principles to the scenes, nodes, or script that make up your "
"game."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:15
msgid ""
"This guide explains how scripts and scenes work in the engine's core, to "
"help you get a sense of how Godot works under the hood, and to help you "
"better understand where some of this series' best practices come from."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:20
#, fuzzy
msgid "Making sense of classes in Godot"
msgstr "Importer des ressources dans Godot 3.0+"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:22
#, fuzzy
msgid ""
"Godot Engine provides built-in classes like :ref:`Node <class_Node>`. User-"
"created types are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"Le moteur Godot fournit des classes prêtes à l'emploi (comme :ref:`Node "
"<class_Node>`), mais les types créés par l'utilisateur ne sont pas "
"réellement des classes. Ce sont plutôt des ressources qui indiquent au "
"moteur une séquence d'initialisation à effectuer sur une classe de moteur."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:27
#, fuzzy
msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Les classes internes de Godot ont des méthodes qui enregistrent les données "
"d'une classe avec un :ref:`ClassDB <class_ClassDB>`. Cette base de données "
"permet d'accéder en temps réel aux informations de la classe (aussi appelée "
"\"reflection\"). Les choses stockées dans la ClassDB incluent, entre autres "
"choses....."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:31
msgid "properties"
msgstr "propriétés"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:32
msgid "methods"
msgstr "les méthodes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:33
msgid "constants"
msgstr "les constantes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:34
msgid "signals"
msgstr "les signaux"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:36
#, fuzzy
msgid ""
"This ``ClassDB`` is what Objects check against when performing an operation "
"like accessing a property or calling a method. ``ClassDB`` checks the "
"database's records and the records of the Object's base types to see if the "
"Object supports the operation."
msgstr ""
"En outre, cette ClassDB est ce que les Objects vérifient lorsqu'ils "
"exécutent n'importe quelle opération. Accéder à une propriété ? Appeler une "
"méthode ? Émettre un signal ? Il vérifiera les enregistrements de la base de "
"données (ainsi que les enregistrements du type de base de l'objet) afin de "
"voir si l'Object supporte l'opération. Chaque Object C++ défini une fonction "
"statique `_bind_methods()` qui décrit quel contenu C++ il enregistre dans la "
"base de donnée et comment."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:41
msgid ""
"On the engine's side, every class defines a static ``_bind_methods()`` "
"function that describes what C++ content it registers to the database and "
"how. When you use the engine, you can extend the methods, properties, and "
"signals available from the ``ClassDB`` by attaching a :ref:`Script "
"<class_Script>` to your node."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:46
#, fuzzy
msgid ""
"Objects check their attached script before the database. This is why scripts "
"can override built-in methods. If a script defines a "
"``_get_property_list()`` method, Godot appends that data to the list of "
"properties the Object fetches from the ClassDB. The same is true for other "
"declarative code."
msgstr ""
"*Ceci* est ce qu'est un :ref:`Script <class_Script>`. Les Objects vérifient "
"d'abord leur script avant la base de donnée, donc les scripts peuvent même "
"redéfinir des méthodes. Si un script défini une méthode "
"`_get_property_list()`, la donnée est ajoutée à la liste des propriétés que "
"l'Object récupère de la base de données. Cela est aussi vrai pour les autres "
"codes déclaratifs."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:51
msgid ""
"Even scripts that don't inherit from a built-in type, i.e. scripts that "
"don't start with the ``extends`` keyword, implicitly inherit from the "
"engine's base :ref:`Reference <class_Reference>` class. This allows the "
"Object to defer to the script's content where the engine logic deems "
"appropriate."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:58
msgid ""
"As a result, you can instance scripts without the ``extends`` keyword from "
"code, but you cannot attach them to a :ref:`Node <class_Node>`"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:63
msgid "Scripting performances and PackedScene"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:65
#, fuzzy
msgid ""
"As the size of Objects increases, the scripts' necessary size to create them "
"grows much, much larger. Creating node hierarchies demonstrates this. Each "
"individual Node's logic could be several hundred lines of code in length."
msgstr ""
"Un problème se présente cependant. Au fur et à mesure que la taille des "
"objets augmente, la taille nécessaire aux scripts pour les créer devient "
"beaucoup, beaucoup plus grande. La création de hiérarchies de nœuds en est "
"la preuve. La logique de chaque Nœud individuel peut être longue de "
"plusieurs centaines de lignes de code."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:69
msgid ""
"Let's see a simple example of creating a single ``Node`` as a child. The "
"code below creates a new ``Node``, changes its name, assigns a script to it, "
"sets its future parent as its owner so it gets saved to disk along with it, "
"and finally adds it as a child of the ``Main`` node:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:109
msgid ""
"Script code like this is much slower than engine-side C++ code. Each change "
"makes a separate call to the scripting API which leads to many \"look-ups\" "
"on the back-end to find the logic to execute."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:113
msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, are resources "
"that use serialized data to create objects. The engine can process scenes in "
"batches on the back-end and provide much better performance than scripts."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:119
#, fuzzy
msgid "Scenes and scripts are objects"
msgstr "Objets transparents"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:121
#, fuzzy
msgid ""
"Why is any of this important to scene organization? Because scenes *are* "
"objects. One often pairs a scene with a scripted root node that makes use of "
"the sub-nodes. This means that the scene is often an extension of the "
"script's declarative code."
msgstr ""
"Pourquoi tout cela est-il important pour l'organisation de scène ? Parce "
"qu'il faut comprendre que les scènes *sont* des objets. On associe souvent "
"une scène à un nœud racine scripté qui utilise les nœuds inférieurs. Cela "
"signifie que la scène est souvent une extension du code déclaratif du script."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:126
msgid "The content of a scene helps to define:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:128
#, fuzzy
msgid "What nodes are available to the script"
msgstr "quels objets sont accessibles par le script ?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:129
#, fuzzy
msgid "How they are organized"
msgstr "comment sont-ils organisés ?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:130
#, fuzzy
msgid "How are they initialized"
msgstr "comment sont-ils initialisés ?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:131
msgid "What signal connections they have with each other"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:133
msgid ""
"Many Object-Oriented principles which apply to written code *also* apply to "
"scenes."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:136
msgid ""
"The scene is *always an extension of the script attached to its root node*. "
"You can see all the nodes it contains as part of a single class."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:139
msgid ""
"Most of the tips and techniques explained in this series will build on this."
msgstr ""
