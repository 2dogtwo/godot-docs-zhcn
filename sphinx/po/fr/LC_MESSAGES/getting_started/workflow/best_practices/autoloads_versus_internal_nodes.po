# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-20 15:59+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:4
#, fuzzy
msgid "Autoloads versus regular nodes"
msgstr "Chargements automatiques par rapport aux nœuds internes"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:6
msgid ""
"Godot offers a feature to automatically load nodes at the root of your "
"project, allowing you to access them globally, that can fulfill the role of "
"a Singleton: :ref:`doc_singletons_autoload`. These auto-loaded nodes are not "
"freed when you change the scene from code with :ref:`SceneTree.change_scene "
"<class_SceneTree_method_change_scene>`."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:11
msgid ""
"In this guide, you will learn when to use the Autoload feature, and "
"techniques you can use to avoid it."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:15
#, fuzzy
msgid "The cutting audio issue"
msgstr "La valeur initiale"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:17
#, fuzzy
msgid ""
"Other engines can encourage the use of creating manager classes, singletons "
"that organize a lot of functionality into a globally accessible object. "
"Godot offers many ways to avoid global state thanks to the node tree and "
"signals."
msgstr ""
"D'autres moteurs pourraient encourager l'utilisation de la création de "
"classes \"manager\" qui organisent un grand nombre de fonctionnalités en une "
"entité globalement accessible. Godot se distingue en fournissant les moyens "
"de réduire la taille de ces objets. Il déplace autant que possible le "
"contenu dans des nœuds individuels."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:21
#, fuzzy
msgid ""
"For example, let's say we are building a platformer and want to collect "
"coins that play a sound effect. There's a node for that: the :ref:"
"`AudioStreamPlayer <class_AudioStreamPlayer>`. But if we call the "
"``AudioStreamPlayer`` while it is already playing a sound, the new sound "
"interrupts the first."
msgstr ""
"Par exemple, que se passe-t-il si un développeur construit un platformer et "
"qu'il veut collectionner des pièces qui jouent un effet sonore ? Eh bien, il "
"y a un nœud pour cela : le :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>`. Mais ils remarquent pendant leur test que s'ils "
"\"jouent\" un AudioStreamPlayer alors qu'il joue déjà le son, alors le "
"nouveau son interrompt le premier son, le terminant avant qu'il puisse finir "
"de jouer."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:26
#, fuzzy
msgid ""
"A solution is to code a global, auto-loaded sound manager class. It "
"generates a pool of ``AudioStreamPlayer`` nodes that cycle through as each "
"new request for sound effects comes in. Say we call that class ``Sound``, "
"you can use it from anywhere in your project by calling ``Sound."
"play(\"coin_pickup.ogg\")``. This solves the problem in the short term but "
"causes more problems:"
msgstr ""
"Les utilisateurs ont tendance à penser que la meilleure solution est de "
"rendre l'ensemble du système plus intelligent en créant un nœud de "
"chargement automatique SoundManager. Il génère un groupe de lecteurs "
"AudioStreamPlayers qui passent d'un lecteur à l'autre à chaque nouvelle "
"demande d'effets sonores. Ils font alors de ce SoundManager un autoload de "
"sorte qu'ils puissent y accéder de n'importe où avec `SFX.play(\"coin_pickup."
"ogg\")`. Ils ne savent pas qu' ils ont invité beaucoup de complications dans "
"leur code."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:32
#, fuzzy
msgid ""
"**Global state**: one object is now responsible for all objects' data. If "
"the ``Sound`` class has errors or doesn't have an AudioStreamPlayer "
"available, all the nodes calling it can break."
msgstr ""
"**état global** : Un seul objet est maintenant responsable des données de "
"tous les objets. Si le SFX a des erreurs ou n'a pas d'AudioStreamPlayer "
"disponible, tout va dysfonctionner."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:36
#, fuzzy
msgid ""
"**Global access**: now that any object can call ``Sound.play(sound_path)`` "
"from anywhere, there's no longer an easy way to find the source of a bug."
msgstr ""
"**accès global** : Maintenant que n'importe quel objet peut appeler `SFX."
"play(sound_path)`de n'importe où, il n'y a plus de moyen facile de suivre où "
"un bug SFX a commencé."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:39
msgid ""
"**Global resource allocation**: with a pool of ``AudioStreamPlayer`` nodes "
"stored from the start, you can either have too few and face bugs, or too "
"many and use more memory than you need."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:45
msgid ""
"About global access, the problem is that Any code anywhere could pass wrong "
"data to the ``Sound`` autoload in our example. As a result, the domain to "
"explore to fix the bug spans the entire project."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:49
msgid ""
"When you keep code inside a scene, only one or two scripts may be involved "
"in audio."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:52
#, fuzzy
msgid ""
"Contrast this with each scene keeping as many ``AudioStreamPlayer`` nodes as "
"it needs within itself and all these problems go away:"
msgstr ""
"Chaque scène conserve autant de nœuds AudioStreamPlayer qu'elle en a besoin "
"et tous ces problèmes disparaissent."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:55
msgid ""
"Each scene manages its own state information. If there is a problem with the "
"data, it will only cause issues in that one scene."
msgstr ""
"Chaque scène gère ses propres informations d'état. S'il y a un problème avec "
"les données, cela ne causera des problèmes que dans une seule scène."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:58
msgid ""
"Each scene accesses only its own nodes. Now, if there is a bug, it's easy to "
"find which node is at fault."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:61
msgid "Each scene allocates exactly the amount of resources it needs."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:64
msgid "Managing shared functionality or data"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:66
msgid ""
"Another reason to use an Autoload can be that you want to reuse the same "
"method or data across many scenes."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:69
msgid ""
"In the case of functions, you can create a new type of ``Node`` that "
"provides that feature for an individual scene using the :ref:`class_name "
"<doc_scripting_continued_class_name>` keyword in GDScript."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:73
msgid "When it comes to data, you can either:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:75
msgid ""
"Create a new type of :ref:`Resource <class_Resource>` to share the data."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:77
msgid ""
"Store the data in an object to which each node has access, for example using "
"the ``owner`` property to access the scene's root node."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:81
#, fuzzy
msgid "When you should use an Autoload"
msgstr "Alors, quand *devrait-on* utiliser un auto-chargement ?"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:83
msgid "Auto-loaded nodes can simplify your code in some cases:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:85
msgid ""
"**Static Data**: if you need data that is exclusive to one class, like a "
"database, then an autoload can be a good tool. There is no scripting API in "
"Godot to create and manage static data otherwise."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:89
msgid ""
"**Static functions**: creating a library of functions that only return "
"values."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:91
#, fuzzy
msgid ""
"**Systems with a wide scope**: If the singleton is managing its own "
"information and not invading the data of other objects, then it's a great "
"way to create systems that handle broad-scoped tasks. For example, a quest "
"or a dialogue system."
msgstr ""
"Si le singleton gère ses propres informations et n'envahit pas les données "
"d'autres objets, alors il est un excellent moyen de créer une classe "
"\"système\" qui gère une tâche de grande portée. Par exemple, un système de "
"ciblage, système de quête, ou système de dialogue seraient des cas "
"d'utilisation d'implémentations de singleton."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:96
msgid ""
"Until Godot 3.1, another use was just for convenience: autoloads have a "
"global variable for their name generated in GDScript, allowing you to call "
"them from any script file in your project. But now, you can use the "
"``class_name`` keyword instead to get auto-completion for a type in your "
"entire project."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:103
msgid ""
"Autoload is not exactly a Singleton. Nothing prevents you from instantiating "
"copies of an auto-loaded node. It is only a tool that makes a node load "
"automatically as a child of the root of your scene tree, regardless of your "
"game's node structure or which scene you run, e.g. by pressing the ``F6`` "
"key."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:108
msgid ""
"As a result, you can get the auto-loaded node, for example an autoload "
"called ``Sound``, by calling ``get_node(\"/root/Sound\")``."
msgstr ""
