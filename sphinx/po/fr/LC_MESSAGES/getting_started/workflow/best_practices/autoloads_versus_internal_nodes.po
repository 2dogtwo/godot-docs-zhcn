# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-15 18:11+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:4
msgid "Autoloads versus internal nodes"
msgstr "Chargements automatiques par rapport aux nœuds internes"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:6
msgid ""
"Other engines might encourage the use of creating \"manager\" classes that "
"organize lots of functionality into a globally accessible entity. Godot "
"thrives by supporting ways to cut down the size of such objects. Instead it "
"shifts content into individual nodes as much as possible."
msgstr ""
"D'autres moteurs pourraient encourager l'utilisation de la création de "
"classes \"manager\" qui organisent un grand nombre de fonctionnalités en une "
"entité globalement accessible. Godot se distingue en fournissant les moyens "
"de réduire la taille de ces objets. Il déplace autant que possible le "
"contenu dans des nœuds individuels."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:11
msgid ""
"For example, what if a developer is building a platformer and they want to "
"collect coins that play a sound effect? Well, there's a node for that: the :"
"ref:`AudioStreamPlayer <class_AudioStreamPlayer>`. But they notice during "
"their testing that if they \"play\" an AudioStreamPlayer while it is already "
"playing the sound, then the new sound interrupts the first sound, "
"terminating it before it can play."
msgstr ""
"Par exemple, que se passe-t-il si un développeur construit un platformer et "
"qu'il veut collectionner des pièces qui jouent un effet sonore ? Eh bien, il "
"y a un nœud pour cela : le :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>`. Mais ils remarquent pendant leur test que s'ils "
"\"jouent\" un AudioStreamPlayer alors qu'il joue déjà le son, alors le "
"nouveau son interrompt le premier son, le terminant avant qu'il puisse finir "
"de jouer."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:18
msgid ""
"Users tend to think the best solution is to make the whole system smarter by "
"making a SoundManager autoload node. It generates a pool of "
"AudioStreamPlayers that cycle through as each new request for sound effects "
"comes in. They then make this SoundManager an autoload so that they can "
"access it from anywhere with `SFX.play(\"coin_pickup.ogg\")`. Little do they "
"know, they've invited a great many complications into their code."
msgstr ""
"Les utilisateurs ont tendance à penser que la meilleure solution est de "
"rendre l'ensemble du système plus intelligent en créant un nœud de "
"chargement automatique SoundManager. Il génère un groupe de lecteurs "
"AudioStreamPlayers qui passent d'un lecteur à l'autre à chaque nouvelle "
"demande d'effets sonores. Ils font alors de ce SoundManager un autoload de "
"sorte qu'ils puissent y accéder de n'importe où avec `SFX.play(\"coin_pickup."
"ogg\")`. Ils ne savent pas qu' ils ont invité beaucoup de complications dans "
"leur code."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:25
msgid ""
"**global state**: One object is now responsible for all objects' data. If "
"SFX has errors or doesn't have an AudioStreamPlayer available, everything "
"will break."
msgstr ""
"**état global** : Un seul objet est maintenant responsable des données de "
"tous les objets. Si le SFX a des erreurs ou n'a pas d'AudioStreamPlayer "
"disponible, tout va dysfonctionner."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:29
msgid ""
"**global access**: Now that any object can call `SFX.play(sound_path)` from "
"anywhere, there's no longer an easy way to track where an SFX bug began."
msgstr ""
"**accès global** : Maintenant que n'importe quel objet peut appeler `SFX."
"play(sound_path)`de n'importe où, il n'y a plus de moyen facile de suivre où "
"un bug SFX a commencé."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:33
msgid ""
"**global resource allocation**: If all objects' data and processing is "
"centralized from the start, then one must either..."
msgstr ""
"**allocation globale des ressources** : Si les données et le traitement de "
"tous les objets sont centralisés dès le départ, alors il faut soit...."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:36
msgid "risk under-allocating resources which might lead to faulty behavior."
msgstr ""
"le risque de sous-affectation des ressources, ce qui pourrait conduire à des "
"comportements erronés."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:38
msgid ""
"Ex: Have too few AudioStreamPlayers in the object pool. Sound doesn't play "
"or it interrupts another sound."
msgstr ""
"Ex : Avoir trop peu de AudioStreamPlayers dans le pool d'objets. Le son ne "
"joue pas ou interrompt un autre son."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:41
msgid "over-allocate resources and use more memory/processing than it needs."
msgstr ""
"surallouer les ressources et utiliser plus de mémoire et de traitement qu'il "
"n'en faut."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:43
msgid ""
"Ex: Have an arbitrarily large number of AudioStreamPlayers, with many of "
"them idling away and not doing anything."
msgstr ""
"Ex : Avoir un nombre arbitrairement grand de AudioStreamPlayers, avec "
"beaucoup d'entre eux qui tournent au ralenti et ne font rien."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:46
msgid ""
"have each object that needs an AudioStreamPlayer register exactly how many "
"it needs and for which sounds. This defeats the purpose of using a 3rd party "
"though; it is now coupled to each object, just as a child node would have "
"been. One has added an unnecessary middleman to the equation."
msgstr ""
"a chaque objet qu’a besoin un AudioStreamPlayer s’inscrire nombreux "
"exactement comment il a besoin et pour qui sonne. Il défait le but "
"d’utiliser une 3ème partie cependant ; Il est maintenant couplé à chaque "
"objet, comme un nœud enfant aurait été. Celui-ci a ajouté un intermédiaire "
"inutile à l’équation."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:52
msgid ""
"Contrast this with each scene keeping as many AudioStreamPlayer nodes as it "
"needs within itself and all these problems go away."
msgstr ""
"Chaque scène conserve autant de nœuds AudioStreamPlayer qu'elle en a besoin "
"et tous ces problèmes disparaissent."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:55
msgid ""
"Each scene manages its own state information. If there is a problem with the "
"data, it will only cause issues in that one scene."
msgstr ""
"Chaque scène gère ses propres informations d'état. S'il y a un problème avec "
"les données, cela ne causera des problèmes que dans une seule scène."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:58
msgid ""
"Each scene accesses only its own nodes. Now, if there is a bug, tracing "
"which node is responsible (probably the root node of the scene), and where "
"in the code it's making the problematic call (locate where the code "
"references the given node) is going to be much easier."
msgstr ""
"Chaque scène n'accède qu'à ses propres nœuds. Maintenant, s'il y a un bogue, "
"tracer quel nœud est responsable (probablement le nœud racine de la scène), "
"et où dans le code est fait l'appel problématique (localiser où le code "
"référence le nœud donné) va être beaucoup plus facile."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:63
msgid ""
"Each scene knows exactly how many resources it needs for the task it "
"performs. No waste of memory or processing due to a lack of information."
msgstr ""
"Chaque scène sait exactement de combien de ressources elle a besoin pour la "
"tâche qu'elle exécute. Aucun gaspillage de mémoire ou de traitement dû à un "
"manque d'information."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:66
msgid ""
"The typical justifications for the Autoload include, \"I have common Xs that "
"involve many nodes across many scenes, and I want each scene to have X.\""
msgstr ""
"Les justifications typiques de l'Autoload sont : \"J'ai X communs qui "
"impliquent de nombreux nœuds sur plusieurs scènes, et je veux que chaque "
"scène ait X.\""

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:69
msgid ""
"If X is a function, then the solution is to create a new type of :ref:`Node "
"<class_Node>` that deals with providing that feature for an individual scene "
"or node subtree."
msgstr ""
"Si X est une fonction, alors la solution est de créer un nouveau type de :"
"ref:`Node <class_Node>>` qui s'occupe de fournir cette fonctionnalité pour "
"une scène individuelle ou un sous-arbre de nœud."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:73
msgid ""
"If X is data, then the solution is either 1) to create a new type of :ref:"
"`Resource <class_Resource>` to share the data, or 2) to store the data in an "
"object to which each node has access (nodes within a scene can use "
"`get_owner()` to fetch the scene root for example)."
msgstr ""
"Si X est une donnée, alors la solution est soit 1) de créer un nouveau type "
"de :ref:`Resource <class_Resource>` pour partager les données, soit 2) de "
"stocker les données dans un objet auquel chaque nœud a accès (les nœuds dans "
"une scène peuvent utiliser `get_owner()' pour récupérer la racine de la "
"scène par exemple)."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:78
msgid "So when *should* one use an autoload?"
msgstr "Alors, quand *devrait-on* utiliser un auto-chargement ?"

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:80
msgid ""
"**Static Data**: if you need static data, i.e. data that should be "
"associated with a class (so there is only ever one copy of the data), then "
"autoloads are good opportunities for that. Static data doesn't exist in "
"Godot's scripting API, so autoload singletons are the next best thing. If "
"one creates a class as an autoload, and never creates another copy of that "
"class within a scene, then it will function in place of a formal singleton "
"API."
msgstr ""
"**Données statiques** : si vous avez besoin de données statiques, c'est-à-"
"dire de données qui doivent être associées à une classe (il n'y a donc "
"toujours qu'une seule copie des données), alors les chargements automatiques "
"sont de bonnes opportunités pour cela. Les données statiques n'existent pas "
"dans l'API de script de Godot, donc les chargements automatiques singletons "
"sont la meilleure chose à faire. Si l'on crée une classe en tant que "
"chargement automatique, et que l'on ne crée jamais une autre copie de cette "
"classe dans une scène, alors elle fonctionnera à la place d'une API "
"singleton formelle."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:88
msgid ""
"**Convenience**: autoloaded nodes have a global variable for their name "
"generated in GDScript. This can be very convenient for defining objects that "
"should always exist, but which need object instance information. The "
"alternative is to create a namespace script: a script that's purpose is only "
"to load and create constants to access other Script or PackedScene "
"resources, resulting in something like ``MyAutoload.MyNode.new()``."
msgstr ""
"**Commodité** : les nœuds chargés automatiquement ont une variable globale "
"pour leur nom générée en GDScript. Ceci peut être très pratique pour définir "
"des objets qui doivent toujours exister, mais qui ont besoin d'informations "
"d'instance d'objet. L'alternative est de créer un script d'espace de noms : "
"un script dont le but est seulement de charger et de créer des constantes "
"pour accéder à d'autres ressources Script ou PackedScene, résultant en "
"quelque chose comme ``MyAutoload.MyNode.new()``."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:95
msgid ""
"Note that the introduction of script classes in Godot 3.1 questions the "
"validity of this reason. With them, one can access scripts using an explicit "
"name from GDScript. Using an autoload to get to a namespace script becomes "
"unnecessary, e.g. ``MyScriptClass.MyPreloadedScript.new()``."
msgstr ""
"Notez que l'introduction des classes de script dans Godot 3.1 remet en "
"question la validité de cette raison. Avec elles, on peut accéder aux "
"scripts en utilisant un nom explicite depuis GDScript. L'utilisation d'un "
"chargement automatique pour accéder à un script d'espace de noms devient "
"inutile, par exemple ``MyScriptClass.MyPreloadedScript.new()``."

#: ../../docs/getting_started/workflow/best_practices/autoloads_versus_internal_nodes.rst:100
msgid ""
"If the singleton is managing its own information and not invading the data "
"of other objects, then it's a great way to create a \"system\" class that "
"handles a broad-scoped task. For example a targeting system, quest system, "
"or dialogue system would be great use cases of singleton implementations."
msgstr ""
"Si le singleton gère ses propres informations et n'envahit pas les données "
"d'autres objets, alors il est un excellent moyen de créer une classe "
"\"système\" qui gère une tâche de grande portée. Par exemple, un système de "
"ciblage, système de quête, ou système de dialogue seraient des cas "
"d'utilisation d'implémentations de singleton."
