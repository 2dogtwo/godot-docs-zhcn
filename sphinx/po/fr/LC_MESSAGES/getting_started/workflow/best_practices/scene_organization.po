# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-02 11:13+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:4
msgid "Scene organization"
msgstr "Organisation de la scène"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:6
msgid ""
"This article covers topics related to the effective organization of scene "
"content. Which nodes should one use? Where should one place them? How should "
"they interact?"
msgstr ""
"Cet article traite de sujets liés à l'organisation efficace du contenu des "
"scènes. Quels nœuds utiliser ? Où doit-on les placer ? Comment devraient-ils "
"interagir ?"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:11
msgid "How to build relationships effectively"
msgstr "Comment établir des relations efficacement"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:13
msgid ""
"When Godot users begin crafting their own scenes, they often run into the "
"following problem:"
msgstr ""
"Lorsque les utilisateurs de Godot commencent à créer leurs propres scènes, "
"ils se heurtent souvent au problème suivant :"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:16
msgid ""
"They create their first scene and fill it with content before the creeping "
"sense that they need to split it up into re-usable pieces haunts them. They "
"save branches of their scene into their own scene. However, they then notice "
"that the hard references they were able to rely on before are no longer "
"possible. Re-using the scene in multiple places creates issues because the "
"node paths do not find their targets. Signal connections established in the "
"editor break."
msgstr ""
"Ils créent leur première scène et la remplissent de contenu avant que le "
"sentiment rampant qu'ils ont besoin de la diviser en morceaux réutilisables "
"ne les hante. Ils sauvegardent des branches de leur scène dans leur propre "
"scène. Cependant, ils constatent alors que les références dures sur "
"lesquelles ils pouvaient compter auparavant ne sont plus possibles. La "
"réutilisation de la scène à plusieurs endroits crée des problèmes car les "
"chemins de nœuds ne trouvent pas leurs cibles. Les connexions de signal "
"établies dans l'éditeur sont rompues."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:24
msgid ""
"To fix these problems, one must instantiate the sub-scenes without them "
"requiring details about their environment. One needs to be able to trust "
"that the sub-scene will create itself without being picky about how one uses "
"it."
msgstr ""
"Pour résoudre ces problèmes, il faut instancier les sous-scènes sans "
"qu'elles ne nécessitent de détails sur leur environnement. Il faut pouvoir "
"être sûr que la sous-scène se créera d'elle-même sans être pointilleuse sur "
"la façon dont on l'utilise."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:29
msgid ""
"One of the biggest things to consider in OOP is maintaining focused, "
"singular-purpose classes with `loose coupling <https://en.wikipedia.org/wiki/"
"Loose_coupling>`_ to other parts of the codebase. This keeps the size of "
"objects small (for maintainability) and improves their reusability so that "
"re-writing completed logic is unnecessary."
msgstr ""
"L'une des choses les plus importantes à prendre en compte dans la POO est le "
"maintien de classes ciblées et à but unique avec un couplage lâche <https://"
"en.wikipedia.org/wiki/Loose_coupling>`_ à d'autres parties du code de base. "
"La taille des objets reste ainsi réduite (pour des raisons de "
"maintenabilité) et leur ré-utilisabilité est améliorée, de sorte qu'il n'est "
"pas nécessaire de réécrire la logique compléte."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:36
msgid ""
"These OOP best practices have *several* ramifications for the best practices "
"in scene structure and script usage."
msgstr ""
"Ces meilleures pratiques OOP ont *plusieurs* ramifications pour les "
"meilleures pratiques en matière de structure de scène et d'utilisation de "
"script."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:39
msgid ""
"**If at all possible, one should design scenes to have no dependencies.** "
"That is, one should create scenes that keep everything they need within "
"themselves."
msgstr ""
"**Si c'est possible, il faut concevoir des scènes sans dépendance.** C'est-à-"
"dire qu'il faut créer des scènes qui gardent tout ce dont elles ont besoin à "
"l'intérieur d'elles-mêmes."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:43
msgid ""
"If a scene must interact with an external context, experienced developers "
"recommend the use of `Dependency Injection <https://en.wikipedia.org/wiki/"
"Dependency_injection>`_. This technique involves having a high-level API "
"provide the dependencies of the low-level API. Why do this? Because classes "
"which rely on their external environment can inadvertently trigger bugs and "
"unexpected behavior."
msgstr ""
"Si une scène doit interagir avec un contexte externe, les développeurs "
"expérimentés recommandent l'utilisation de `Dependency Injection <https://en."
"wikipedia.org/wiki/Dependency_injection>`_. Cette technique implique qu'une "
"API de haut niveau fournisse les dépendances de l'API de bas niveau. "
"Pourquoi faire cela ? Parce que les classes qui dépendent de leur "
"environnement externe peuvent déclencher par inadvertance des bogues et des "
"comportements inattendus."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:50
msgid ""
"To do this, one must expose data and then rely on a parent context to "
"initialize it:"
msgstr ""
"Pour ce faire, il faut exposer les données, puis s'appuyer sur un contexte "
"parent pour les initialiser :"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:53
msgid ""
"Connect to a signal. Extremely safe, but should use only to \"respond\" to "
"behavior, not start it. Note that signal names are usually past-tense verbs "
"like \"entered\", \"skill_activated\", or \"item_collected\"."
msgstr ""
"Connecter à un signal. Extrêmement sûr, mais ne doit être utilisé que pour "
"\"répondre\" au comportement, pas pour le démarrer. Notez que les noms de "
"signaux sont généralement des verbes au passé comme \"entered\", "
"\"skill_activated\", ou \"item_collected\"."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:74
msgid "Call a method. Used to start behavior."
msgstr "Appeler une méthode. Utilisé pour démarrer le comportement."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:93
msgid ""
"Initialize a :ref:`FuncRef <class_FuncRef>` property. Safer than a method as "
"ownership of the method is unnecessary. Used to start behavior."
msgstr ""
"Initialiser une propriété :ref:`FuncRef <class_FuncRef>`. Plus sûr qu'une "
"méthode car la propriété de la méthode n'est pas nécessaire. Utilisé pour "
"démarrer le comportement."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:113
msgid "Initialize a Node or other Object reference."
msgstr "Initialiser un nœud ou une autre référence d'objet."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:132
msgid "Initialize a NodePath."
msgstr "Initialiser un NodePath."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:151
msgid ""
"These options hide the source of accesses from the child node. This in turn "
"keeps the child **loosely coupled** to its environment. One can re-use it in "
"another context without any extra changes to its API."
msgstr ""
"Ces options cachent la source des accès au nœud enfant. Cela permet à "
"l'enfant **d'être couplé de façon lâche** à son environnement. On peut le "
"réutiliser dans un autre contexte sans aucune modification supplémentaire de "
"son API."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:157
msgid ""
"Although the examples above illustrate parent-child relationships, the same "
"principles apply towards all object relations. Nodes which are siblings "
"should only be aware of their hierarchies while an ancestor mediates their "
"communications and references."
msgstr ""
"Bien que les exemples ci-dessus illustrent les relations parent-enfant, les "
"mêmes principes s'appliquent à toutes les relations objet. Les nœuds qui "
"sont des frères et sœurs ne devraient connaître que leur hiérarchie pendant "
"qu'un ancêtre assure la médiation de leurs communications et de leurs "
"références."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:204
msgid ""
"The same principles also apply to non-Node objects that maintain "
"dependencies on other objects. Whichever object actually owns the objects "
"should manage the relationships between them."
msgstr ""
"Les mêmes principes s'appliquent également aux objets non nœuds qui "
"dépendent d'autres objets. Quel que soit l'objet qui possède réellement les "
"objets, il doit gérer les relations entre eux."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:210
msgid ""
"One should favor keeping data in-house (internal to a scene) though as "
"placing a dependency on an external context, even a loosely coupled one, "
"still means that the node will expect something in its environment to be "
"true. The project's design philosophies should prevent this from happening. "
"If not, the code's inherent liabilities will force developers to use "
"documentation to keep track of object relations on a microscopic scale; this "
"is otherwise known as development hell. Writing code that relies on external "
"documentation for one to use it safely is error-prone by default."
msgstr ""
"Il faut privilégier la conservation des données en interne (interne à une "
"scène), placer une dépendance sur un contexte externe, même faiblement "
"couplé, signifie que le nœud s'attendra à ce que quelque chose soit vrai "
"dans son environnement. Les philosophies de conception du projet devraient "
"empêcher que cela ne se produise. Sinon, les responsabilités inhérentes au "
"code obligeront les développeurs à utiliser de la documentation pour suivre "
"les relations entre objets à une échelle microscopique ; c'est ce qu'on "
"appelle l'enfer du développement. L'écriture d'un code qui s'appuie sur une "
"documentation externe pour l'utiliser en toute sécurité est sujette à des "
"erreurs par défaut."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:219
msgid ""
"To avoid creating and maintaining such documentation, one converts the "
"dependent node (\"child\" above) into a tool script that implements :ref:"
"`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`. Returning a non-empty "
"string from it will make the Scene dock generate a warning icon with the "
"string as a tooltip by the node. This is the same icon that appears for "
"nodes such as the :ref:`Area2D <class_Area2D>` node when it has no child :"
"ref:`CollisionShape2D <class_CollisionShape2D>` nodes defined. The editor "
"then self-documents the scene through the script code. No content "
"duplication via documentation is necessary."
msgstr ""
"Pour éviter de créer et de maintenir une telle documentation, on convertit "
"le noeud dépendant (\" enfant \" ci-dessus) en un script outil qui "
"implémente :ref:`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning >`. Retourner une chaîne non "
"vide à partir de celle-ci fera en sorte que le dock Scène génère une icône "
"d'avertissement avec la chaîne sous forme d'info-bulle par le nœud. C'est la "
"même icône qui apparaît pour les nœuds tels que le nœud :ref:`Area2D "
"<class_Area2D>` quand il n'a pas d'enfant :ref:`CollisionShape2D "
"<class_CollisionShape2D <Nœuds définis. L'éditeur documente ensuite lui-même "
"la scène à l'aide du code du script. Aucune duplication de contenu via la "
"documentation n'est nécessaire."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:230
msgid ""
"A GUI like this can better inform project users of critical information "
"about a Node. Does it have external dependencies? Have those dependencies "
"been satisfied? Other programmers, and especially designers and writers, "
"will need clear instructions in the messages telling them what to do to "
"configure it."
msgstr ""
"Une interface graphique comme celle-ci peut mieux informer les utilisateurs "
"d'informations critiques sur un nœud. A-t-il des dépendances externes ? Ces "
"dépendances ont-elles été satisfaites ? D'autres programmeurs, et en "
"particulier les designers et les écrivains, auront besoin d'instructions "
"claires dans les messages leur indiquant ce qu'ils doivent faire pour le "
"configurer."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:235
msgid ""
"So, why do all this complex switcharoo work? Well, because scenes operate "
"best when they operate alone. If unable to work alone, then working with "
"others anonymously (with minimal hard dependencies, i.e. loose coupling). If "
"the inevitable changes made to a class cause it to interact with other "
"scenes in unforeseen ways, then things break down. A change to one class "
"could result in damaging effects to other classes."
msgstr ""
"Alors, pourquoi tout ce switcharoo complexe fonctionne-t-il ? Parce que les "
"scènes fonctionnent mieux quand elles fonctionnent seules. Si elle est "
"incapable de travailler seule,  travailler avec d'autres de façon anonyme "
"(avec un minimum de dépendances dures, c.-à-d. un couplage lâche). Si les "
"changements inévitables apportés à une classe l'amènent à interagir avec "
"d'autres scènes d'une manière imprévue, alors des choses s'effondrent. Le "
"changement d'une classe peut avoir des effets néfastes sur les autres "
"classes."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:242
msgid ""
"Scripts and scenes, as extensions of engine classes should abide by *all* "
"OOP principles. Examples include..."
msgstr ""
"Les scripts et les scènes, en tant qu'extensions des classes du moteur, "
"doivent respecter *tous* les principes OOP. En voici quelques exemples..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:245
msgid "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"
msgstr "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:246
msgid "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"
msgstr "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:247
msgid "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"
msgstr "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:248
msgid "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"
msgstr "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:251
msgid "Choosing a node tree structure"
msgstr "Choix d’une structure d’arborescence de nœud"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:253
msgid ""
"So, a developer starts work on a game only to stop at the vast possibilities "
"before them. They might know what they want to do, what systems they want to "
"have, but *where* to put them all? Well, how one goes about making their "
"game is always up to them. One can construct node trees in a myriad of ways. "
"But, for those who are unsure, this helpful guide can give them a sample of "
"a decent structure to start with."
msgstr ""
"Ainsi, un développeur commence à travailler sur un jeu seulement pour "
"s'arrêter aux vastes possibilités qui s'offrent à lui. Ils savent peut-être "
"ce qu'ils veulent faire, quels systèmes ils veulent avoir, mais *où* les "
"mettre ? Eh bien, c'est toujours à eux de décider comment faire leur jeu. On "
"peut construire des arbres de nœuds de multiples façons. Mais, pour ceux qui "
"ne sont pas sûrs, ce guide peut leur donner un exemple d'une structure "
"décente pour commencer."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:260
msgid ""
"A game should always have a sort of \"entry point\"; somewhere the developer "
"can definitively track where things begin so that they can follow the logic "
"as it continues elsewhere. This place also serves as a bird's eye view to "
"all of the other data and logic in the program. For traditional "
"applications, this would be the \"main\" function. In this case, it would be "
"a Main node."
msgstr ""
"Un jeu devrait toujours avoir une sorte de \"point d'entrée\" ; quelque "
"part, le développeur peut suivre où les choses commencent afin de pouvoir "
"suivre la logique comme elle continue ailleurs. Cet endroit sert également "
"de vue d'ensemble de toutes les autres données et logiques du programme. "
"Pour les applications traditionnelles, ce serait la fonction \"main\". Dans "
"ce cas, il s'agirait d'un nœud principal."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:266
#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:277
msgid "Node \"Main\" (main.gd)"
msgstr "Nœud \"Main\" (main.gd)"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:268
msgid ""
"The ``main.gd`` script would then serve as the primary controller of one's "
"game."
msgstr ""
"Le script ``main.gd`` servirait alors de contrôleur principal de son jeu."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:271
msgid ""
"Then one has their actual in-game \"World\" (a 2D or 3D one). This can be a "
"child of Main. In addition, one will need a primary GUI for their game that "
"manages the various menus and widgets the project needs."
msgstr ""
"Puis certains ont leur \"Monde\" (en 2D ou 3D). Ce peut être un enfant de "
"Main. En outre, certains auront besoin d'une interface graphique primaire "
"pour leur jeu qui gère les différents menus et widgets dont le projet a "
"besoin."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:276
msgid "Node2D/Spatial \"World\" (game_world.gd)"
msgstr "Node2D/Spatial \"World\" (game_world.gd)"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:277
msgid "Control \"GUI\" (gui.gd)"
msgstr "Contrôle \"GUI\" (gui.gd)"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:279
msgid ""
"When changing levels, one can then swap out the children of the \"World\" "
"node. :ref:`Changing scenes manually <doc_change_scenes_manually>` gives "
"users full control over how their game world transitions."
msgstr ""
"Lors d'un changement de niveau, on peut alors échanger les enfants du nœud "
"\"Monde\". :ref:`Changing scenes manually <doc_change_scenes_manually>` "
"donnant aux utilisateurs un contrôle total sur la façon dont les transitions "
"de leur monde de jeu s'effectuent."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:283
msgid ""
"The next step is to consider what gameplay systems one's project requires. "
"If one has a system that..."
msgstr ""
"L'étape suivante consiste à déterminer quels sont les systèmes de gameplay "
"nécessaires à la réalisation de son projet. Si on a un système qui..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:286
msgid "tracks all of its data internally"
msgstr "fait le suivi de toutes ses données à l'interne"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:287
msgid "should be globally accessible"
msgstr "devrait être accessible à l'échelle mondiale"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:288
msgid "should exist in isolation"
msgstr "devrait exister de manière isolée"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:290
msgid ""
"... then one should create an :ref:`autoload 'singleton' node "
"<doc_singletons_autoload>`."
msgstr ""
"... alors on devrait créer un :ref:`autoload 'singleton\" nœud "
"<doc_singletons_autoload>`."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:294
msgid ""
"For smaller games, a simpler alternative with less control would be to have "
"a \"Game\" singleton that simply calls the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method to swap out the main scene's "
"content. This structure more or less keeps the \"World\" as the main game "
"node."
msgstr ""
"Pour les petits jeux, une alternative plus simple avec moins de contrôle "
"serait d'avoir un singleton \"Game\" qui appelle simplement le :ref:"
"`SceneTree.change_scene() <class_SceneTree_method_method_change_scene>` "
"méthode pour remplacer le contenu du scénario principal. Cette structure "
"maintient plus ou moins le \"Monde\" comme nœud principal du jeu."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:300
msgid ""
"Any GUI would need to also be a singleton, be transitory parts of the \"World"
"\", or be manually added as a direct child of the root. Otherwise, the GUI "
"nodes would also delete themselves during scene transitions."
msgstr ""
"Toute interface graphique devrait aussi être un singleton, être une partie "
"transitoire du \"Monde\", ou être ajoutée manuellement comme un enfant "
"direct de la racine. Sinon, les nœuds de l'interface graphique se "
"supprimeraient également d'eux-mêmes pendant les transitions de scène."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:305
msgid ""
"If one has systems that modify other systems' data, one should define those "
"as their own scripts or scenes rather than autoloads. For more information "
"on the reasons, please see the :ref:`'Autoloads vs. Internal Nodes' "
"<doc_autoloads_versus_internal_nodes>` documentation."
msgstr ""
"Si l'on possède des systèmes qui modifient les données d'autres systèmes, il "
"faut les définir comme leurs propres scripts ou scènes plutôt que comme des "
"autochargements. Pour plus d'informations sur les raisons, veuillez "
"consulter la documentation :ref:`'Autoloads vs. Internal Nodes' "
"<doc_autoloads_versus_internal_nodes>`."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:311
msgid ""
"Each subsystem within one's game should have its own section within the "
"SceneTree. One should use parent-child relationships only in cases where "
"nodes are effectively elements of their parents. Does removing the parent "
"reasonably mean that one should also remove the children? If not, then it "
"should have its own place in the hierarchy as a sibling or some other "
"relation."
msgstr ""
"Chaque sous-système d'un jeu doit avoir sa propre section dans l'arbre des "
"scènes. On ne devrait utiliser les relations parent-enfant que dans les cas "
"où les nœuds sont effectivement des éléments de leurs parents. Le fait de "
"retirer le parent signifie-t-il raisonnablement que l'on devrait également "
"retirer les enfants ? Si ce n'est pas le cas, il devrait avoir sa propre "
"place dans hiérarchie en tant que frère, sœur ou autre parent."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:319
msgid ""
"In some cases, one needs these separated nodes to *also* position themselves "
"relative to each other. One can use the :ref:`RemoteTransform "
"<class_RemoteTransform>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>` nodes for this purpose. They will allow a target "
"node to conditionally inherit selected transform elements from the Remote\\* "
"node. To assign the ``target`` :ref:`NodePath <class_NodePath>`, use one of "
"the following:"
msgstr ""
"Dans certains cas, on a besoin de ces nœuds séparés pour *également* se "
"positionner les uns par rapport aux autres. On peut utiliser les nœuds :ref:"
"`RemoteTransform <class_RemoteTransform>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>` à cette fin. Ils permettront à un nœud cible "
"d'hériter conditionnellement des éléments de transformation sélectionnés du "
"nœud Remote\\*. Pour assigner le ``target``` :ref:`NodePath "
"<class_NodePath>`, utilisez l'une des options suivantes :"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:327
msgid ""
"A reliable third party, likely a parent node, to mediate the assignment."
msgstr ""
"Une tierce partie fiable, probablement un nœud parent, pour assurer la "
"médiation de l'assignation."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:328
msgid ""
"A group, to easily pull a reference to the desired node (assuming there will "
"only ever be one of the targets)."
msgstr ""
"Un groupe, pour facilement obtenir une référence au nœud désiré (en "
"supposant qu'il n'y aura jamais qu'une seule des cibles)."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:331
msgid ""
"When should one do this? Well, it's up to them to decide. The dilemma arises "
"when one must micro-manage when a node must move around the SceneTree to "
"preserve itself. For example..."
msgstr ""
"Quand faut-il le faire ? C'est à eux de décider. Le dilemme se pose "
"lorsqu'il faut micro-gérer quand un nœud doit se déplacer dans l'arbre des "
"scènes pour se préserver. Par exemple...."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:335
msgid "Add a \"player\" node to a \"room\"."
msgstr "Ajouter un nœud \"player\" à une \"room\"."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:336
msgid "Need to change rooms, so one must delete the current room."
msgstr "Besoin de changer de pièce, il faut donc supprimer la pièce courante."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:337
msgid ""
"Before the room can be deleted, one must preserve and/or move the player."
msgstr ""
"Avant de pouvoir supprimer la salle, il faut conserver et/ou déplacer le "
"joueur."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:339
msgid "Is memory a concern?"
msgstr "La mémoire est-elle une préoccupation ?"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:341
msgid ""
"If not, one can just create the two rooms, move the player and delete the "
"old one. No problem."
msgstr ""
"Si ce n'est pas le cas, il suffit de créer les deux salles, de déplacer le "
"lecteur et d'effacer l'ancienne. Pas de problème."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:344
msgid "If so, one will need to..."
msgstr "Si c'est le cas, il faudra...."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:346
msgid "Move the player somewhere else in the tree."
msgstr "Déplacez le joueur ailleurs dans l'arbre."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:347
msgid "Delete the room."
msgstr "Supprimer la salle."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:348
msgid "Instantiate and add the new room."
msgstr "Instanciez et ajoutez la nouvelle pièce."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:349
msgid "Re-add the player."
msgstr "Ré-ajouter le joueur."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:351
msgid ""
"The issue is that the player here is a \"special case\", one where the "
"developers must *know* that they need to handle the player this way for the "
"project. As such, the only way to reliably share this information as a team "
"is to *document* it. Keeping implementation details in documentation however "
"is dangerous. It's a maintenance burden, strains code readability, and "
"bloats the intellectual content of a project unnecessarily."
msgstr ""
"Le problème est que le joueur est ici un \"cas spécial\", un cas où les "
"développeurs doivent *savoir* qu'ils doivent gérer le joueur de cette façon "
"pour le projet. En tant que telle, la seule façon de partager cette "
"information de façon fiable en équipe est de la *documenter*. Il est "
"cependant dangereux de conserver les détails de la mise en œuvre dans la "
"documentation. C'est une charge de maintenance, qui pèse sur la lisibilité "
"du code et gonfle inutilement le contenu intellectuel d'un projet."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:358
msgid ""
"In a more complex game with larger assets, it can be a better idea to simply "
"keep the player somewhere else in the SceneTree entirely. This involves..."
msgstr ""
"Dans un jeu plus complexe avec des ressources plus importantes, il peut être "
"préférable de simplement garder le joueur ailleurs dans l'Arbre de scène. "
"Cela implique..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:361
msgid "More consistency."
msgstr "Plus de cohérence."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:362
msgid "No \"special cases\" that must be documented and maintained somewhere."
msgstr ""
"Pas de \"cas spéciaux\" qui doivent être documentés et conservés quelque "
"part."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:363
msgid ""
"No opportunity for errors to occur because these details are not accounted "
"for."
msgstr ""
"Il n'y a aucun risque d'erreur parce que ces détails ne sont pas pris en "
"compte."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:366
msgid ""
"In contrast, if one ever needs to have a child node that does *not* inherit "
"the transform of their parent, one has the following options:"
msgstr ""
"En revanche, si l'on a besoin d'avoir un nœud enfant qui n'hérite pas de la "
"transformation de son parent, on a les options suivantes :"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:369
msgid ""
"The **declarative** solution: place a :ref:`Node <class_Node>` in between "
"them. As nodes with no transform, Nodes will not pass along such information "
"to their children."
msgstr ""
"La solution **déclarative** : placez un :ref:`Node <class_Node>` entre eux. "
"En tant que nœuds sans transformation, les nœuds ne transmettront pas ces "
"informations à leurs enfants."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:372
msgid ""
"The **imperative** solution: Use the ``set_as_toplevel`` setter for the :ref:"
"`CanvasItem <class_CanvasItem_method_set_as_toplevel>` or :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>` node. This will make the node ignore "
"its inherited transform."
msgstr ""
"La solution **impérative** : Utilisez le setter ``set_as_toplevel`` pour le "
"nœud :ref:`CanvasItem "
"<class_CanvasItem_CanvasItem_method_method_as_toplevel>` ou :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>`. Cela fera que le nœud ignorera sa "
"transformation héritée."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:379
msgid ""
"If building a networked game, keep in mind which nodes and gameplay systems "
"are relevant to all players versus those just pertinent to the authoritative "
"server. For example, users do not all need to have a copy of every players' "
"\"PlayerController\" logic. Instead, they need only their own. As such, "
"keeping these in a separate branch from the \"world\" can help simplify the "
"management of game connections and the like."
msgstr ""
"Si vous construisez un jeu en réseau, gardez à l'esprit quels nœuds et "
"systèmes de jeu sont pertinents pour tous les joueurs par rapport à ceux qui "
"ne le sont que pour le serveur faisant autorité. Par exemple, les "
"utilisateurs n'ont pas tous besoin d'avoir une copie de la logique "
"\"PlayerController\" de chaque joueur. Au lieu de cela, ils n'ont besoin que "
"des leurs. En tant que tel, le fait de les garder dans une branche séparée "
"du \"monde\" peut aider à simplifier la gestion des connexions de jeu et "
"d'autres choses du même genre."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:386
msgid ""
"The key to scene organization is to consider the SceneTree in relational "
"terms rather than spatial terms. Do the nodes need to be dependent on their "
"parent's existence? If not, then they can thrive all by themselves somewhere "
"else. If so, then it stands to reason they should be children of that parent "
"(and likely part of that parent's scene if they aren't already)."
msgstr ""
"La clé de l'organisation d'une scène est de considérer le SceneTree en "
"termes relationnels plutôt qu'en termes spatiaux. Les nœuds doivent-ils être "
"dépendants de l'existence de leurs parents ? Si ce n'est pas le cas, ils "
"peuvent prospérer tous seuls ailleurs. Si c'est le cas, il va de soi qu'ils "
"devraient être les enfants de ce parent (et probablement faire partie de la "
"scène de ce parent s'ils ne le sont pas déjà)."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:392
msgid ""
"Does this mean nodes themselves are components? Not at all. Godot's node "
"trees form an aggregation relationship, not one of composition. But while "
"one still has the flexibility to move nodes around, it is still best when "
"such moves are unnecessary by default."
msgstr ""
"Cela signifie-t-il que les nœuds eux-mêmes sont des composants ? Pas du "
"tout. Les arbres de nœuds de Godot forment une relation d'agrégation, pas "
"une relation de composition. Mais bien que l'on ait toujours la flexibilité "
"de déplacer les nœuds, il est préférable que de tels déplacements ne soient "
"pas nécessaires par défaut."
