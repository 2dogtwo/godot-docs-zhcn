# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-13 12:14+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/resources.rst:4
msgid "Resources"
msgstr "Ressources"

#: ../../docs/getting_started/step_by_step/resources.rst:7
msgid "Nodes and resources"
msgstr "Nœuds et ressources"

#: ../../docs/getting_started/step_by_step/resources.rst:9
#, fuzzy
msgid ""
"Up to this tutorial, we focused on the :ref:`Node <class_Node>` class in "
"Godot as that's the one you use to code behavior and most of the engine's "
"features rely on it. There is another datatype that is just as important: :"
"ref:`Resource <class_Resource>`."
msgstr ""
"Jusqu'à présent, les :ref:`Nœuds <class_Node>` ont été le type de donnée le "
"plus important dans Godot car la plupart des comportements et des "
"fonctionnalités du moteur sont implémentés par leur biais. Il y a un autre "
"type de donnée qui est tout aussi important : :ref:`Ressource "
"<class_Resource>`."

#: ../../docs/getting_started/step_by_step/resources.rst:15
#, fuzzy
msgid ""
"*Nodes* give you functionality: they draw sprites, 3D models, simulate "
"physics, arrange user interfaces, etc. **Resources** are **data "
"containers**. They don't do anything on their own: instead, nodes use the "
"data contained in resources."
msgstr ""
"Les *nœuds* vous offrent des fonctionnalités: ils dessinent des sprites, des "
"modèles 3D, simulent des propriétés physiques, organisent une interface "
"utilisateur, etc. **Les ressources** sont **des conteneurs de données**. Ils "
"ne font rien par eux-mêmes: les nœuds utilisent plutôt les données contenues "
"dans les ressources."

#: ../../docs/getting_started/step_by_step/resources.rst:19
#, fuzzy
msgid ""
"Anything Godot saves or loads from disk is a resource. Be it a scene (a ."
"tscn or an .scn file), an image, a script... Here are some ``Resource`` "
"examples: :ref:`Texture <class_Texture>`, :ref:`Script <class_Script>`, :ref:"
"`Mesh <class_Mesh>`, :ref:`Animation <class_Animation>`, :ref:`AudioStream "
"<class_AudioStream>`, :ref:`Font <class_Font>`, :ref:`Translation "
"<class_Translation>`."
msgstr ""
"Des exemples de ressources sont :ref:`Texture <class_Texture>`, :ref:`Script "
"<class_Script>`, :ref:`Mesh <class_Mesh>`, :ref:`Animation "
"<class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :ref:`Font "
"<class_Font>`, :ref:`Translation <class_Translation>`, etc."

#: ../../docs/getting_started/step_by_step/resources.rst:26
#, fuzzy
msgid ""
"When the engine loads a resource from disk, **it only loads it once**. If a "
"copy of that resource is already in memory, trying to load the resource "
"again will return the same copy every time. As resources only contain data, "
"there is no need to duplicate them."
msgstr ""
"Quand une ressource est chargée depuis le disque dur, **elle est toujours "
"chargée une fois**. Cela signifie, si il y a une copie de cette ressource "
"déjà chargée en mémoire, essayer de charger à nouveau cette ressource "
"retournera la même copie encore et encore. Cela correspond au fait que les "
"ressources sont justes des conteneurs de données, donc il n'y a pas besoin "
"de les dupliquer."

#: ../../docs/getting_started/step_by_step/resources.rst:31
#, fuzzy
msgid ""
"Every object, be it a Node or a Resource, can export properties. There are "
"many types of Properties, like String, integer, Vector2, etc., and any of "
"these types can become a resource. This means that both nodes and resources "
"can contain resources as properties:"
msgstr ""
"Typiquement, chaque objet dans Godot (Nœud, Ressource, ou quoi que ce soit "
"d'autre) peuvent exporter des propriétés. Les propriétés peuvent être de "
"types différents (comme une chaîne de caractère, un entier, Vector2, etc) et "
"l'un de ces types peut être une ressource. Cela veut dire que les nœuds et "
"les ressources peuvent contenir des ressources comme propriétés. Pour rendre "
"cette explication plus claire :"

#: ../../docs/getting_started/step_by_step/resources.rst:39
msgid "External vs built-in"
msgstr "Externe vs intégré"

#: ../../docs/getting_started/step_by_step/resources.rst:41
#, fuzzy
msgid "There are two ways to save resources. They can be:"
msgstr ""
"Il y a 2 possibilités pour créer votre interface utilisateur dans Godot. "
"Vous pouvez :"

#: ../../docs/getting_started/step_by_step/resources.rst:43
msgid "**External** to a scene, saved on the disk as individual files."
msgstr ""
"**Externe** à une scène, enregistrés sur le disque en tant que fichiers "
"individuels."

#: ../../docs/getting_started/step_by_step/resources.rst:44
msgid ""
"**Built-in**, saved inside the \\*.tscn or the \\*.scn file they're attached "
"to."
msgstr ""
"**Intégrés**, enregistrés dans le fichier \\*.tscn ou le fichier \\*.scn "
"auquel ils sont attachés."

#: ../../docs/getting_started/step_by_step/resources.rst:46
msgid ""
"To be more specific, here's a :ref:`Texture <class_Texture>` in a :ref:"
"`Sprite <class_Sprite>` node:"
msgstr ""
"Pour être plus spécifique, voici une :ref:`Texture <class_Texture>` dans un "
"nœud :ref:`Sprite <class_Sprite>` :"

#: ../../docs/getting_started/step_by_step/resources.rst:51
#, fuzzy
msgid ""
"Clicking the resource preview allows us to view and edit the resource's "
"properties."
msgstr ""
"Cliquer droit sur la variable vous permet de configurer ses propriétés :"

#: ../../docs/getting_started/step_by_step/resources.rst:55
#, fuzzy
msgid ""
"The path property tells us where the resource comes from. In this case, it "
"comes from a PNG image called ``robi.png``. When the resource comes from a "
"file like this, it is an external resource. If you erase the path or this "
"path is empty, it becomes a built-in resource."
msgstr ""
"La propriété chemin nous indique d'où provient la ressource. Dans ce cas, "
"elle provient d'une image PNG appelée ``robi.png``. Lorsque la ressource "
"provient d'un fichier comme celui-ci, il s'agit d'une ressource externe. Si "
"vous effacez le chemin ou que ce chemin est vide, il devient une ressource "
"intégrée."

#: ../../docs/getting_started/step_by_step/resources.rst:60
msgid ""
"The switch between built-in and external resources happens when you save the "
"scene. In the example above, if you erase the path \\`\"res://robi.png\"\\` "
"and save, Godot will save the image inside the .tscn scene file."
msgstr ""
"Le basculement entre les ressources intégrées et externes se produit lorsque "
"vous enregistrez la scène. Dans l'exemple ci-dessus, si vous effacez le "
"chemin \\`\"res://robi.png\"\\`et que vous sauvegardez, Godot sauvegardera "
"l'image dans le fichier de scène .tscn."

#: ../../docs/getting_started/step_by_step/resources.rst:66
msgid ""
"Even if you save a built-in resource, when you instance a scene multiple "
"times, the engine will only load one copy of it."
msgstr ""
"Même si vous enregistrez une ressource intégrée, lorsque vous créez une "
"scène plusieurs fois, le moteur n'en charge qu'une copie."

#: ../../docs/getting_started/step_by_step/resources.rst:70
msgid "Loading resources from code"
msgstr "Chargement de ressources à partir du code"

#: ../../docs/getting_started/step_by_step/resources.rst:72
msgid ""
"There are two ways to load resources from code. First, you can use the "
"``load()`` function anytime:"
msgstr ""
"Il existe deux manières de charger des ressources depuis un code. Tout "
"d’abord, vous pouvez utiliser la fonction ``load()`` à tout moment :"

#: ../../docs/getting_started/step_by_step/resources.rst:90
msgid ""
"You can also ``preload`` resources. Unlike ``load``, this function will read "
"the file from disk and load it at compile-time. As a result, you cannot call "
"preload with a variable path: you need to use a constant string."
msgstr ""
"Vous pouvez également ``preload`` (précharger) des ressources. Contrairement "
"à ``load`` (charger), cette fonction lira le fichier à partir du disque et "
"le chargera au moment de la compilation. Par conséquent, vous ne pouvez pas "
"appeler le préchargement avec un chemin variable: vous devez utiliser une "
"chaîne constante."

#: ../../docs/getting_started/step_by_step/resources.rst:106
msgid "Loading scenes"
msgstr "Chargement de scènes"

#: ../../docs/getting_started/step_by_step/resources.rst:108
#, fuzzy
msgid ""
"Scenes are also resources, but there is a catch. Scenes saved to disk are "
"resources of type :ref:`PackedScene <class_PackedScene>`. The scene is "
"packed inside a resource."
msgstr ""
"Les scènes sont également des ressources, mais il y a une différence. Les "
"scènes sauvegardées sur le disque dur sont des ressources de type :ref:"
"`PackedScene <class_PackedScene>`. Cela signifie que la scène est emballée à "
"l'intérieur d'une ressource."

#: ../../docs/getting_started/step_by_step/resources.rst:112
#, fuzzy
msgid ""
"To get an instance of the scene, you have to use the :ref:`PackedScene."
"instance() <class_PackedScene_instance>` method."
msgstr ""
"Pour obtenir une instance de la scène, la méthode :ref:`PackedScene."
"instance() <class_PackedScene_instance>` doit être utilisée."

#: ../../docs/getting_started/step_by_step/resources.rst:133
#, fuzzy
msgid ""
"This method creates the nodes in the scene's hierarchy, configures them, and "
"returns the root node of the scene. You can then add it as a child of any "
"other node."
msgstr ""
"Cette méthode crée les nœuds dans la hiérarchie de la scène, les configure "
"(définit toutes les propriétés) et retourne le nœud racine de la scène, qui "
"peut être ajouté à n'importe quel autre nœud."

#: ../../docs/getting_started/step_by_step/resources.rst:137
#, fuzzy
msgid ""
"The approach has several advantages. As the :ref:`PackedScene.instance() "
"<class_PackedScene_instance>` function is pretty fast, you can create new "
"enemies, bullets, effects, etc. without having to load them again from disk "
"each time. Remember that, as always, images, meshes, etc. are all shared "
"between the scene instances."
msgstr ""
"Cette approche présente plusieurs avantages. Comme la fonction :ref:"
"`PackedScene.instance() <class_PackedScene_instance>` est assez rapide, "
"l'ajout de contenu supplémentaire à la scène peut être fait efficacement. De "
"nouveaux ennemis, balles, effets, etc peuvent être ajoutés ou retirés "
"rapidement, sans avoir à les recharger à chaque fois à partir du disque dur. "
"Il est important de se rappeler que, comme toujours, les images, les "
"maillages, etc sont tous partagés entre les instances de la scène."

#: ../../docs/getting_started/step_by_step/resources.rst:144
msgid "Freeing resources"
msgstr "Libérer des ressources"

#: ../../docs/getting_started/step_by_step/resources.rst:146
#, fuzzy
msgid ""
"When a ``Resource`` is no longer in use, it will automatically free itself. "
"Since, in most cases, Resources are contained in Nodes, when you free a "
"node, the engine frees all the resources it owns as well if no other node "
"uses them."
msgstr ""
"Les ressources héritent de la classe :ref:`Reference <class_Reference>`. "
"Ainsi, lorsqu'une ressource n'est plus utilisée, elle se libère "
"automatiquement. Puisque, dans la plupart des cas, les ressources sont "
"contenues dans des Nœuds, des scripts ou d'autres ressources, quand un nœud "
"est supprimé ou libéré, toutes les ressources enfants de ce nœud sont "
"libérées également."

#: ../../docs/getting_started/step_by_step/resources.rst:151
#, fuzzy
msgid "Creating your own resources"
msgstr "Libérer des ressources"

#: ../../docs/getting_started/step_by_step/resources.rst:153
msgid ""
"Like any Object in Godot, users can also script Resources. Resource scripts "
"inherit the ability to freely translate between object properties and "
"serialized text or binary data (/*.tres, /*.res). They also inherit the "
"reference-counting memory management from the Reference type."
msgstr ""
"Comme tout objet de Godot, les utilisateurs peuvent également scripter les "
"ressources. Les scripts de ressources héritent de la possibilité de traduire "
"librement entre les propriétés d'objet et le texte sérialisé ou les données "
"binaires (/*.tres, /*.res). Ils héritent également de la gestion de la "
"mémoire de comptage de références du type Référence."

#: ../../docs/getting_started/step_by_step/resources.rst:158
#, fuzzy
msgid ""
"This comes with many distinct advantages over alternative data structures, "
"such as JSON, CSV, or custom TXT files. Users can only import these assets "
"as a :ref:`Dictionary <class_Dictionary>` (JSON) or as a :ref:`File "
"<class_File>` to parse. What sets Resources apart is their inheritance of :"
"ref:`Object <class_Object>`, :ref:`Reference <class_Reference>`, and :ref:"
"`Resource <class_Resource>` features:"
msgstr ""
"Cela présente de nombreux avantages distincts par rapport aux structures de "
"données alternatives telles que les fichiers JSON, CSV ou TXT personnalisés. "
"Les utilisateurs peuvent uniquement importer ces ressources en tant que :ref:"
"`Dictionnaire <class_Dictionary>` (JSON) ou en tant que :ref:`Fichier "
"<class_File>` à analyser. Ce qui distingue les ressources, c’est leur "
"héritage de :ref:`Objet <class_Object>`, :ref:`Référence <class_Reference>`, "
"et :ref:`Ressource <class_Resource>` :"

#: ../../docs/getting_started/step_by_step/resources.rst:165
msgid ""
"They can define constants, so constants from other data fields or objects "
"are not needed."
msgstr ""
"Ils peuvent définir des constantes. Ainsi, les constantes d'autres champs de "
"données ou d'objets ne sont pas nécessaires."

#: ../../docs/getting_started/step_by_step/resources.rst:167
msgid ""
"They can define methods, including setter/getter methods for properties. "
"This allows for abstraction and encapsulation of the underlying data. If the "
"Resource script's structure needs to change, the game using the Resource "
"need not also change."
msgstr ""
"Ils peuvent définir des méthodes, y compris des méthodes setter/getter pour "
"les propriétés. Cela permet l’abstraction et l’encapsulation des données "
"sous-jacentes. Si la structure du script de ressource doit être modifiée, le "
"jeu utilisant la ressource ne nécessite pas de changement aussi."

#: ../../docs/getting_started/step_by_step/resources.rst:169
msgid ""
"They can define signals, so Resources can trigger responses to changes in "
"the data they manage."
msgstr ""
"Ils peuvent définir des signaux afin que les ressources puissent déclencher "
"des réactions aux modifications des données qu’elles gèrent."

#: ../../docs/getting_started/step_by_step/resources.rst:171
msgid ""
"They have defined properties, so users know 100% that their data will exist."
msgstr ""
"Ils ont des propriétés définies, de sorte que les utilisateurs savent à 100% "
"que leurs données existeront."

#: ../../docs/getting_started/step_by_step/resources.rst:173
msgid ""
"Resource auto-serialization and deserialization is a built-in Godot Engine "
"feature. Users do not need to implement custom logic to import/export a "
"resource file's data."
msgstr ""
"L’auto-sérialisation et la dé-sérialisation des ressources est une "
"fonctionnalité intégrée du moteur Godot. Les utilisateurs n'ont pas besoin "
"d'implémenter une logique personnalisée pour importer/exporter les données "
"d'un fichier de ressources."

#: ../../docs/getting_started/step_by_step/resources.rst:175
msgid ""
"Resources can even serialize sub-Resources recursively, meaning users can "
"design even more sophisticated data structures."
msgstr ""
"Les ressources peuvent même sérialiser les sous-ressources de manière "
"récursive, ce qui signifie que les utilisateurs peuvent concevoir des "
"structures de données encore plus sophistiquées."

#: ../../docs/getting_started/step_by_step/resources.rst:177
msgid ""
"Users can save Resources as version-control-friendly text files (\\*.tres). "
"Upon exporting a game, Godot serializes resource files as binary files (\\*."
"res) for increased speed and compression."
msgstr ""
"Les utilisateurs peuvent enregistrer des ressources sous forme de fichiers "
"textes de contrôle de version conviviaux (\\*.tres). Lors de l'exportation "
"d'un jeu, Godot sérialise les fichiers de ressources sous forme de fichiers "
"binaires (\\*.res) pour une vitesse et une compression accrues."

#: ../../docs/getting_started/step_by_step/resources.rst:179
msgid ""
"Godot Engine's Inspector renders and edits Resource files out-of-the-box. As "
"such, users often do not need to implement custom logic to visualize or edit "
"their data. To do so, double-click the resource file in the FileSystem dock "
"or click the folder icon in the Inspector and open the file in the dialog."
msgstr ""
"L'inspecteur de Godot Engine rend et édite les fichiers de ressources "
"immédiatement. En tant que tels, les utilisateurs n'ont souvent pas besoin "
"de mettre en œuvre une logique personnalisée pour visualiser ou éditer leurs "
"données. Pour ce faire, double-cliquez sur le fichier de ressources dans le "
"dock Système de Fichiers ou cliquez sur l'icône de dossier dans l'inspecteur "
"et ouvrez le fichier dans la boîte de dialogue."

#: ../../docs/getting_started/step_by_step/resources.rst:181
msgid ""
"They can extend **other** resource types besides just the base Resource."
msgstr ""
"Ils peuvent étendre **d'autres** types de ressources, outre la ressource de "
"base."

#: ../../docs/getting_started/step_by_step/resources.rst:185
msgid ""
"Resources and Dictionaries are also different in that both are passed by "
"reference, but only Resources are reference-counted. This means that if a "
"Dictionary is passed between objects, and the first object is deleted, it "
"will invalidate the second object's variable. This is not so for Resources "
"which won't free their memory until *all* instances are gone."
msgstr ""
"Les ressources et les dictionnaires sont également différents en ce que les "
"deux sont passés par référence, mais seules les ressources sont comptées par "
"références. Cela signifie que si un dictionnaire est passé entre des objets "
"et que le premier objet est supprimé, la variable du second objet sera "
"invalidée. Ce n'est pas le cas pour les ressources qui ne libéreront pas "
"leur mémoire tant que *toutes* les instances n'auront pas disparu."

#: ../../docs/getting_started/step_by_step/resources.rst:215
msgid "Godot makes it easy to create custom Resources in the Inspector."
msgstr ""
"Godot facilite la création de ressources personnalisées dans l'inspecteur."

#: ../../docs/getting_started/step_by_step/resources.rst:217
msgid ""
"Create a plain Resource object in the Inspector. This can even be a type "
"that derives Resource, so long as your script is extending that type."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:218
msgid "Set the ``script`` property in the Inspector to be your script."
msgstr ""
"Définissez la propriété ``script`` dans l'inspecteur comme étant votre "
"script."

#: ../../docs/getting_started/step_by_step/resources.rst:220
msgid ""
"The Inspector will now display your Resource script's custom properties. If "
"one edits those values and saves the resource, the Inspector serializes the "
"custom properties too! To save a resource from the Inspector, click the "
"Inspector's tools menu (top right), and select \"Save\" or \"Save As...\"."
msgstr ""
"L'inspecteur affiche désormais les propriétés personnalisées de votre script "
"de ressources. Si on modifie ces valeurs et enregistre la ressource, "
"l'inspecteur sérialise également les propriétés personnalisées ! Pour "
"enregistrer une ressource de l'inspecteur, cliquez sur le menu Outils de "
"l'inspecteur (en haut à droite), puis sélectionnez \"Enregistrer\" ou "
"\"Enregistrer sous ...\"."

#: ../../docs/getting_started/step_by_step/resources.rst:225
#, fuzzy
msgid ""
"If the script's language supports :ref:`script classes "
"<doc_scripting_continued_class_name>`, then it streamlines the process. "
"Defining a name for your script alone will add it to the Inspector's "
"creation dialog. This will auto-add your script to the Resource object you "
"create."
msgstr ""
"Si le langage du script prend en charge `les classes de script <https://"
"godot.readthedocs.io/fr/latest/getting_started/step_by_step/"
"scripting_continued.html#register-scripts-as-classes>` __, cela simplifie le "
"processus. Définir un nom pour votre script seul l'ajoutera à la boîte de "
"dialogue de création de l'inspecteur. Cela ajoutera automatiquement votre "
"script à l'objet Ressource que vous créez."

#: ../../docs/getting_started/step_by_step/resources.rst:230
#, fuzzy
msgid "Let's see some examples."
msgstr "Quelques exemples :"

#: ../../docs/getting_started/step_by_step/resources.rst:303
msgid ""
"Resource scripts are similar to Unity's ScriptableObjects. The Inspector "
"provides built-in support for custom resources. If desired though, users can "
"even design their own Control-based tool scripts and combine them with an :"
"ref:`EditorPlugin <class_EditorPlugin>` to create custom visualizations and "
"editors for their data."
msgstr ""
"Les scripts de ressources sont similaires à ScriptableObjects de Unity. "
"L'Inspecteur fournit un support intégré pour les ressources personnalisées. "
"Si nécessaire, les utilisateurs peuvent même concevoir leurs propres scripts "
"d’outils basés sur Contrôle, et les combiner avec un :ref:`EditorPlugin "
"<class_EditorPlugin>` pour créer des visualisations et des éditeurs "
"personnalisés pour leurs données."

#: ../../docs/getting_started/step_by_step/resources.rst:309
msgid ""
"Unreal Engine 4's DataTables and CurveTables are also easy to recreate with "
"Resource scripts. DataTables are a String mapped to a custom struct, similar "
"to a Dictionary mapping a String to a secondary custom Resource script."
msgstr ""
"Les DataTables et CurveTables de Unreal Engine 4 sont également faciles à "
"recréer à l'aide de scripts de Resources. Les DataTables sont une chaîne "
"mappée à une structure personnalisée, similaire à un dictionnaire mappant "
"une chaîne à un script de ressource personnalisé secondaire."

#: ../../docs/getting_started/step_by_step/resources.rst:345
msgid ""
"Instead of just inlining the Dictionary values, one could also, "
"alternatively..."
msgstr ""
"Au lieu de simplement aligner les valeurs du dictionnaire, on pourrait "
"aussi, alternativement ..."

#: ../../docs/getting_started/step_by_step/resources.rst:347
msgid ""
"Import a table of values from a spreadsheet and generate these key-value "
"pairs, or..."
msgstr ""
"Importer une table de valeurs à partir d'une feuille de calcul et générer "
"ces paires clé-valeur, ou ..."

#: ../../docs/getting_started/step_by_step/resources.rst:349
msgid ""
"Design a visualization within the editor and create a simple plugin that "
"adds it to the Inspector when you open these types of Resources."
msgstr ""
"Concevez une visualisation dans l'éditeur et créez un plug-in simple qui "
"l'ajoutera à l'inspecteur lorsque vous ouvrirez ces types de ressources."

#: ../../docs/getting_started/step_by_step/resources.rst:352
msgid ""
"CurveTables are the same thing, except mapped to an Array of float values or "
"a :ref:`Curve <class_Curve>`/:ref:`Curve2D <class_Curve2D>` resource object."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:357
msgid ""
"Beware that resource files (\\*.tres/\\*.res) will store the path of the "
"script they use in the file. When loaded, they will fetch and load this "
"script as an extension of their type. This means that trying to assign a "
"subclass, i.e. an inner class of a script (such as using the ``class`` "
"keyword in GDScript) won't work. Godot will not serialize the custom "
"properties on the script subclass properly."
msgstr ""
"Attention, les fichiers de ressources (\\*.tres/\\*.res) vont stocker le "
"chemin du script qu'ils utilisent dans le fichier. Une fois chargés, ils "
"vont chercher et charger ce script comme une extension de leur type. Cela "
"signifie que tenter d’affecter une sous-classe, c’est-à-dire une classe "
"interne à un script (comme l’utilisation du mot clé ``class`` dans GDScript) "
"ne fonctionnera pas. Godot ne sérialisera pas correctement les propriétés "
"personnalisées sur la sous-classe de script."

#: ../../docs/getting_started/step_by_step/resources.rst:363
msgid ""
"In the example below, Godot would load the ``Node`` script, see that it "
"doesn't extend ``Resource``, and then determine that the script failed to "
"load for the Resource object since the types are incompatible."
msgstr ""
"Dans l'exemple ci-dessous, Godot chargerait le script ``Nœud``, verrait "
"qu'il n'étend pas ``Ressource``, puis déterminerait que le script n'a pas pu "
"être chargé pour l'objet Ressource car les types sont incompatibles."
