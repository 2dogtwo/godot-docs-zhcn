# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:4
msgid "Signals"
msgstr "Signaux"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Introduction"
msgstr "Introduction"

#: ../../docs/getting_started/step_by_step/signals.rst:9
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"Les signaux sont la version de Godot du modèle *observer*. Ils permettent à "
"un nœud d'envoyer un message que les autres nœuds peuvent écouter et auquel "
"ils peuvent répondre. Par exemple, au lieu de vérifier en continu si un "
"bouton est appuyé, le bouton peut émettre un signal lorsqu'il est appuyé."

#: ../../docs/getting_started/step_by_step/signals.rst:14
msgid ""
"You can read more about the observer pattern here: http://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Vous pouvez en savoir plus sur le modèle d'observateur ici : http://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:16
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"Les signaux sont un moyen de rendre vos objets de jeu indépendants, ce qui "
"conduit à un code mieux organisé et plus facile à gérer. Au lieu de forcer "
"les objets du jeu à s'attendre à ce que d'autres objets soient toujours "
"présents, ils peuvent émettre des signaux auxquels tout objet intéressé peut "
"s'abonner et répondre."

#: ../../docs/getting_started/step_by_step/signals.rst:21
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"Vous trouverez ci-dessous quelques exemples d'utilisation des signaux dans "
"vos propres projets."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid "Timer example"
msgstr "Exemple de minuterie"

#: ../../docs/getting_started/step_by_step/signals.rst:26
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"Pour voir comment fonctionnent les signaux, essayons d'utiliser un nœud :ref:"
"`Timer <class_Timer>`. Créez une nouvelle scène avec un nœud Node2D et deux "
"enfants : un Timer et un :ref:`Sprite <class_Sprite>`. Dans le dock scène, "
"renommez Node2D en TimerExample."

#: ../../docs/getting_started/step_by_step/signals.rst:30
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Pour la texture du Sprite, vous pouvez utiliser l'icône Godot, ou toute "
"autre image que vous souhaitez. Pour ce faire, sélectionnez ``Load`` dans le "
"menu déroulant de l'attribut Texture du Sprite. Attachez un script au nœud "
"racine, mais n'y ajoutez pas encore de code."

#: ../../docs/getting_started/step_by_step/signals.rst:34
msgid "Your scene tree should look like this:"
msgstr "L'arbre de la scène devrait ressembler à ceci :"

#: ../../docs/getting_started/step_by_step/signals.rst:38
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"Dans les propriétés du nœud Timer, cochez la case \"On\" à côté de "
"*Autostart*. Le Timer démarrera automatiquement lorsque vous exécuterez la "
"scène. Vous pouvez laisser le *Wait Time* (temps d'attente) à 1 seconde."

#: ../../docs/getting_started/step_by_step/signals.rst:42
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"À côté de l'onglet \"Inspecteur\" se trouve un onglet intitulé \"Nœud\". "
"Cliquez sur cet onglet et vous verrez tous les signaux que le nœud "
"sélectionné peut émettre. Dans le cas du nœud Timer, celui qui nous "
"intéresse est \"timeout\". Ce signal est émis chaque fois que la minuterie "
"atteint ``0``."

#: ../../docs/getting_started/step_by_step/signals.rst:49
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"Cliquez sur le signal \"timeout()\" et cliquez sur \"Connecter...\". Vous "
"verrez la fenêtre suivante dans laquelle vous pouvez définir comment vous "
"voulez connecter le signal :"

#: ../../docs/getting_started/step_by_step/signals.rst:55
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"Sur le côté gauche, vous verrez les nœuds de votre scène et pourrez "
"sélectionner le nœud que vous souhaitez \"écouter\" pour le signal. Notez "
"que le nœud Timer est bleu, c'est une indication visuelle que c'est le nœud "
"qui émet le signal. Sélectionnez le nœud racine."

#: ../../docs/getting_started/step_by_step/signals.rst:60
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"Le nœud cible *doit* être associé à un script ou vous recevrez un message "
"d'erreur."

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"On the right side, you can bind an arbitrary number of arguments of "
"(possibly) different types. This can be useful when you have more than one "
"signal connected to the same method, as each signal propagation will result "
"in different values for those extra call arguments."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:67
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"Au bas de la fenêtre se trouve un champ intitulé \"Méthode receveur\". Il "
"s'agit du nom de la fonction dans le script du nœud cible que vous souhaitez "
"utiliser. Par défaut, Godot créera cette fonction en utilisant la convention "
"de dénomination ``_on_<nom_nœud>_<nom_signal>`` mais vous pouvez la modifier "
"si vous le souhaitez."

#: ../../docs/getting_started/step_by_step/signals.rst:72
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"Cliquez sur \"Connecter\" et vous verrez que la fonction a été créée dans le "
"script :"

#: ../../docs/getting_started/step_by_step/signals.rst:92
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"Nous pouvons maintenant remplacer le code de l’espace réservé par le code "
"que nous souhaitons exécuter à la réception du signal. Faisons clignoter le "
"Sprite :"

#: ../../docs/getting_started/step_by_step/signals.rst:116
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"Exécutez la scène et vous verrez le Sprite clignoter à chaque seconde. Vous "
"pouvez modifier la propriété *Temps d'Attente* du temporisateur pour "
"modifier cela."

#: ../../docs/getting_started/step_by_step/signals.rst:120
msgid "Connecting signals in code"
msgstr "Connecter des signaux dans le code"

#: ../../docs/getting_started/step_by_step/signals.rst:122
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"Vous pouvez également établir la connexion du signal en code plutôt qu'avec "
"l'éditeur. Cela est généralement nécessaire lorsque vous installez des nœuds "
"via du code et vous ne pouvez donc pas utiliser l'éditeur pour établir la "
"connexion."

#: ../../docs/getting_started/step_by_step/signals.rst:126
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"Commencez par déconnecter le signal en sélectionnant la connexion dans "
"l'onglet \"Nœud\" de la minuterie et en cliquant sur Déconnecter."

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"Pour établir la connexion en code, nous pouvons utiliser la fonction "
"``connect``. Nous allons la mettre dans ``_ready()`` afin que la connexion "
"soit établie lors de l'exécution. La syntaxe de la fonction est "
"``<nœud_source>.connecter(<nom_signal>, <nœud_cible>, <nom_fonction_ "
"cible>)``. Voici le code pour la connexion de notre minuterie :"

#: ../../docs/getting_started/step_by_step/signals.rst:164
msgid "Custom signals"
msgstr "Signaux personnalisés"

#: ../../docs/getting_started/step_by_step/signals.rst:166
msgid "You can also declare your own custom signals in Godot:"
msgstr ""
"Vous pouvez également déclarer vos propres signaux personnalisés dans Godot :"

#: ../../docs/getting_started/step_by_step/signals.rst:184
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"Une fois déclarés, vos signaux personnalisés apparaîtront dans l'inspecteur "
"et pourront être connectés de la même manière que les signaux intégrés d'un "
"nœud."

#: ../../docs/getting_started/step_by_step/signals.rst:187
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr ""
"Pour émettre un signal par le code, utilisez la fonction ``emit_signal`` :"

#: ../../docs/getting_started/step_by_step/signals.rst:212
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:232
#, fuzzy
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Ces arguments seront affichés dans le dock Nœud et Godot les utilisera pour "
"générer les fonctions de rappel automatiquement pour vous. Dans tous les "
"cas, vous pouvez émettre autant d'arguments que vous souhaitez avec vos "
"signaux ; c'est à vous d'émettre les bonnes valeurs."

#: ../../docs/getting_started/step_by_step/signals.rst:237
#, fuzzy
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr ""
"Pour émettre un signal par le code, utilisez la fonction ``emit_signal`` :"

#: ../../docs/getting_started/step_by_step/signals.rst:263
msgid "Conclusion"
msgstr "Conclusion"

#: ../../docs/getting_started/step_by_step/signals.rst:265
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"De nombreux types de nœuds intégrés de Godot fournissent des signaux que "
"vous pouvez utiliser pour détecter des événements. Par exemple, un :ref:"
"`Area2D <class_Area2D>` représentant une pièce de monnaie émet un signal "
"``body_entered`` chaque fois que le corps physique du joueur entre en "
"collision avec, ce qui vous permet de savoir quand le joueur la récupère."

#: ../../docs/getting_started/step_by_step/signals.rst:270
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"Dans la section suivante :ref:`doc_your_first_game`, vous construirez un jeu "
"complet comprenant plusieurs utilisations de signaux pour connecter "
"différents composants du jeu."
