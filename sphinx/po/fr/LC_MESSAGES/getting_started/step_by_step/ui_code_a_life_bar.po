# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-01 14:18+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:4
msgid "Control the game's UI with code"
msgstr "Contrôler l'interface utilisateur du jeu avec du code"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:7
msgid "Intro"
msgstr "Introduction"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:9
msgid ""
"In this tutorial, you will connect a character to a life bar and animate the "
"health loss."
msgstr ""
"Dans ce tutoriel, vous allez connecter un personnage à une barre de vie et "
"animer la perte de vie."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:14
msgid ""
"Here's what you'll create: the bar and the counter animate when the "
"character takes a hit. They fade when it dies."
msgstr ""
"Voici ce que vous allez créer : la barre et le compteur s'animent lorsque le "
"personnage prend un coup. Ils s'estompent quand il meurt."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:18
msgid "You will learn:"
msgstr "Vous apprendrez :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:20
msgid "How to **connect** a character to a GUI with signals"
msgstr ""
"Comment **connecter** un personnage à une interface graphique avec des "
"signaux"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:21
msgid "How to **control** a GUI with GDscript"
msgstr "Comment **contrôler** une interface graphique avec GDscript"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:22
msgid "How to **animate** a life bar with the :ref:`Tween <class_Tween>` node"
msgstr ""
"Comment **animer** une barre de vie avec le nœud :ref:`Tween "
"<class_Tween_Tween>`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:25
msgid ""
"If you want to learn how to set up the interface instead, check out the step-"
"by-step UI tutorials:"
msgstr ""
"Si vous voulez apprendre comment configurer l'interface à la place, "
"consultez les tutoriels pas-à-pas de l'interface utilisateur :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:28
msgid "Create a main menu screen"
msgstr "Créer un écran de menu principal"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:29
msgid "Create a game user interface"
msgstr "Créer une interface utilisateur de jeu"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:32
msgid ""
"When you code a game, you want to build the core gameplay first: the main "
"mechanics, player input, win and loss conditions. The UI comes a bit later. "
"You want to keep all the elements that make up your project separate if "
"possible. Each character should be in its own scene, with its own scripts, "
"and so should the UI elements. This prevents bugs, keeps your project "
"manageable, and allows different team members to work on different parts of "
"the game."
msgstr ""
"Lorsque vous codez un jeu, vous voulez d'abord construire le gameplay de "
"base : les mécaniques principales, les actions du joueur, les conditions de "
"victoire et de défaite. L'interface utilisateur arrive un peu plus tard. "
"Vous voulez que tous les éléments qui composent votre projet soient séparés "
"si possible. Chaque personnage devrait être dans sa propre scène, avec ses "
"propres scripts, de même que pour les éléments de l'interface utilisateur. "
"Cela permet d'éviter les bugs, de garder votre projet gérable, et permet à "
"différents membres de l'équipe de travailler sur différentes parties du jeu."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:40
msgid ""
"Once the core gameplay and the UI are ready, you'll need to connect them "
"somehow. In our example, we have the Enemy who attacks the Player at "
"constant time intervals. We want the life bar to update when the Player "
"takes damage."
msgstr ""
"Une fois que le gameplay de base et l'interface utilisateur sont prêts, vous "
"devrez les connecter d'une manière ou d'une autre. Dans notre exemple, nous "
"avons l'ennemi qui attaque le joueur à intervalles de temps constants. Nous "
"voulons que la barre de vie se mette à jour lorsque le joueur subit des "
"dégâts."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:45
msgid "To do this, we will use **signals**."
msgstr "Pour ce faire, nous utiliserons des **signaux**."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:49
msgid ""
"Signals are Godot's version of the Observer pattern. They allow us to send "
"out some message. Other nodes can connect to the object that **emits** the "
"signal and receive the information. It's a powerful tool we use a lot for "
"User Interface and achievement systems. You don't want to use them "
"everywhere, though. Connecting two nodes adds some coupling between them. "
"When there's a lot of connections, they become hard to manage. For more "
"information, check out the `signals video tutorial <https://youtu.be/"
"l0BkQxF7X3E>`_ on GDquest."
msgstr ""
"Les signaux sont la version Godot du patron de conception Observateur. Ils "
"nous permettent d'envoyer un message. D'autres nœuds peuvent se connecter à "
"l'objet qui **émet** le signal et reçoit l'information. C'est un outil "
"puissant que nous utilisons beaucoup pour l'interface utilisateur et les "
"systèmes de succès. Mais vous ne voulez pas les utiliser partout. La "
"connexion de deux nœuds ajoute un certain couplage entre eux. Quand il y a "
"beaucoup de connexions, elles deviennent difficiles à gérer. Plus "
"d'informations sur le tutoriel vidéo `Introduction to signals in the Godot "
"game engine <https://youtu.be/l0BkQxF7X3E>`_ sur GDquest."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:53
msgid "Download and explore the start project"
msgstr "Télécharger et explorer le projet de démarrage"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:55
msgid ""
"Download the Godot project: :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. It contains all the assets and scripts you need to "
"get started. Extract the .zip archive to get two folders: `start` and `end`."
msgstr ""
"Télécharger le projet Godot : :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. Il contient toutes les ressources et les scripts "
"dont vous avez besoin pour démarrer. Extraire l'archive .zip pour obtenir "
"deux dossiers : `start` et `end`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:58
msgid ""
"Load the ``start`` project in Godot. In the ``FileSystem`` dock, double "
"click on LevelMockup.tscn to open it. It's an RPG game's mockup where 2 "
"characters face each other. The pink enemy attacks and damages the green "
"square at regular time intervals, until its death. Feel free to try out the "
"game: the basic combat mechanics already work. But as the character isn't "
"connected to the life bar, the ``GUI`` doesn't do anything."
msgstr ""
"Charger le projet ``start`` dans Godot. Dans le dock ``FileSystem``, double-"
"cliquez sur LevelMockup.tscn pour l'ouvrir. C'est une maquette de jeu de "
"rôle où 2 personnages se font face. L'ennemi rose attaque et endommage le "
"carré vert à intervalles réguliers, jusqu'à sa mort. N'hésitez pas à essayer "
"le jeu : les mécanismes de combat de base fonctionnent déjà. Mais comme le "
"personnage n'est pas connecté à la barre de vie, le ``GUI`` ne fait rien."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:68
msgid ""
"This is typical of how you'd code a game: you implement the core gameplay "
"first, handle the player's death, and only then you'll add the interface. "
"That's because the UI listens to what's happening in the game. So it can't "
"work if other systems aren't in place yet. If you design the UI before you "
"prototype and test the gameplay, chances are it won't work well and you'll "
"have to re-create it from scratch."
msgstr ""
"C'est typique de la façon dont vous codez un jeu : vous implémentez d'abord "
"le gameplay de base, vous gérez la mort du joueur, et seulement ensuite vous "
"ajouterez l'interface. C'est parce que l'interface utilisateur écoute ce qui "
"se passe dans le jeu. Il ne peut donc pas fonctionner si d'autres systèmes "
"ne sont pas encore en place. Si vous concevez l'interface utilisateur avant "
"de prototyper et de tester le gameplay, il y a de fortes chances qu'il ne "
"fonctionnera pas bien et que vous devrez le recréer à partir de zéro."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:71
msgid "The scene contains a background sprite, a GUI, and two characters."
msgstr ""
"Cette scène contient un background, une interface graphique, et deux "
"personnages."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:75
msgid "The scene tree, with the GUI scene set to display its children"
msgstr ""
"L'arbre des scènes, avec la scène de l'interface graphique pour afficher ses "
"enfants"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:77
msgid ""
"The GUI scene encapsulates all of the game's Graphical User Interface. It "
"comes with a barebones script where we get the path to nodes that exist "
"inside the scene:"
msgstr ""
"La scène de l'interface graphique contient tous les éléments de l'interface "
"graphique. Elle est attaché à un script permettant de récupérer les "
"informations des différents éléments de la scène :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:105
msgid ""
"``number_label`` displays a life count as a number. It's a ``Label`` node"
msgstr ""
"``number_label`` fait référence à un nœud ``Label``. Il contient le compteur "
"de vie"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:107
msgid "``bar`` is the life bar itself. It's a ``TextureProgress`` node"
msgstr ""
"``bar`` fait référence à un nœud ``TextureProgress``, permettant de "
"contrôler la barre de vie"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:108
msgid ""
"``tween`` is a component-style node that can animate and control any value "
"or method from any other node"
msgstr ""
"``tween`` est un nœud de type composant qui permet d'animer et contrôler une "
"valeur ou une méthode de n'importe quel autre nœud"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:113
msgid ""
"The project uses a simple organisation that works for game jams and tiny "
"games."
msgstr ""
"Le projet utilise une organisation simple fonctionnelle pour les Game Jams "
"et les petits jeux."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:115
msgid ""
"At the root of the project, in the `res://` folder, you will find the "
"`LevelMockup`. That's the main game scene and the one we will work with. All "
"the components that make up the game are in the `scenes/` folder. The "
"`assets/` folder contains the game sprites and the font for the HP counter. "
"In the `scripts/` folder you will find the enemy, the player, and the GUI "
"controller scripts."
msgstr ""
"A la racine du projet, dans le dossier `res://`, vous trouverez le "
"`LevelMockup`. C'est la scène principale du jeu et notre scène de travail. "
"Tous les éléments qui composent notre jeu sont dans le dossier `scenes/`. Le "
"dossier `assets/` contient toute les sprites et la police pour le compteur "
"de vie. Dans le dossier `scripts/, vous trouverez les scripts contrôlant le "
"joueur, de l'ennemi et l'interface graphique du jeu."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:117
msgid ""
"Click the edit scene icon to the right of the node in the scene tree to open "
"the scene in the editor. You'll see the LifeBar and EnergyBar are sub-scenes "
"themselves."
msgstr ""
"Cliquez sur l'icône d'édition de scène (Clap) à droite du nœud dans l'arbre "
"des scènes pour ouvrir la scène dans l'éditeur. Vous verrez que la barre de "
"vie et d'énergie sont aussi des sous-scènes."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:121
msgid "The scene tree, with the Player scene set to display its children"
msgstr ""
"L'arbre des scènes, avec la scène du joueur ``Player`` ouverte pour afficher "
"ses enfants"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:124
msgid "Set up the Lifebar with the Player's max\\_health"
msgstr "Initialiser la barre de vie avec la valeur maximale de vie du joueur"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:126
msgid ""
"We have to tell the GUI somehow what the player's current health is, to "
"update the lifebar's texture, and to display the remaining health in the HP "
"counter in the top left corner of the screen. To do this we send the "
"player's health to the GUI every time they take damage. The GUI will then "
"update the ``Lifebar`` and ``Number`` nodes with this value."
msgstr ""
"On doit donner l 'information à l’interface graphique du nombre de points de "
"vie actuel du joueur, pour mettre à jour la texture de la barre de vie, et "
"afficher le nombre de points de vie restant du joueur dans le compteur en "
"dans le coin haut droit de l'écran. Pour faire cela, on envoie la vie du "
"joueur à l’interface graphique à chaque fois que le joueur prends un coup. "
"Une fois reçu, on mets à jour les nœuds ``Lifebar``et ``Number``avec cette "
"valeur."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:132
msgid ""
"We could stop here to display the number, but we need to initialize the "
"bar's ``max_value`` for it to update in the right proportions. The first "
"step is thus to tell the ``GUI`` what the green character's ``max_health`` "
"is."
msgstr ""
"On pourrait s’arrêter là pour afficher la valeur dans le compteur; mais on "
"doit initialiser la valeur maximale ``max_value`` de la barre de vie pour la "
"mettre à jour dans les bonnes proportions. Cette première étape permettra de "
"donner à ``GUI`` quel est la valeur maximale ``max_health`` de vie du joueur."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:139
msgid ""
"The bar, a `TextureProgress`, has a `max_value` of `100` by default. If you "
"don't need to display the character's health with a number, you don't need "
"to change its `max_value` property. You send a percentage from the `Player` "
"to the `GUI` instead:  `health / max_health * 100`."
msgstr ""
"La barre de vie, un noeud `TextureProgress`, dans la section `Range` a la "
"propriété `max_value` à `100` par défaut. Si l'on a pas besoin d'afficher la "
"vie du joueur à l'aide d'un nombre, il n'est pas nécessaire de modifier "
"cette propriété. On enverra, un pourcentage de la vie restante, du joueur "
"`Player` à l'interface `GUI` : `health / max_health * 100` ."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:143
msgid ""
"Click the script icon to the right of the ``GUI`` in the Scene dock to open "
"its script. In the ``_ready`` function, we're going to store the "
"``Player``'s ``max_health`` in a new variable and use it to set the "
"``bar``'s ``max_value``:"
msgstr ""
"Cliquez sur l'icône de script à droite du nœud ``GUI`` dans l'arbre des "
"scènes pour ouvrir son script dans l'éditeur. Dans la fonction ``_ready``, "
"nous allons récupérer la vie maximale ``max_health`` du joueur ``Player`` et "
"la stocker dans une nouvelle variable ``player_max_health``. Cette variable "
"est ensuite utilisée pour initialiser la valeur maximale ``max_value`` de la "
"barre de vie ``bar`` :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:164
msgid ""
"Let's break it down. ``$\"../Characters/Player\"`` is a shorthand that goes "
"one node up in the scene tree, and retrieves the ``Characters/Player`` node "
"from there. It gives us access to the node. The second part of the "
"statement, ``.max_health``, accesses the ``max_health`` on the Player node."
msgstr ""
"Décomposons ce script. L'instruction ``$\"../Characters/Player\"`` permet de "
"récupérer, dans le nœud parent ``LevelMockup`` de notre nœud ``GUI`` à "
"l'aide du chemin ``../``, le nœud ``Player`` dans le nœud ``Characters``. Le "
"symbole ``$`` permet de récupérer le nœud. \n"
"Nous accédons ensuite à la variable ``max_health`` du nœud ``Player`` à "
"l'aide du symbole ``.``.\n"
"On accèdent donc bien à la valeur maximale de vie du joueur."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:170
msgid ""
"The second line assigns this value to ``bar.max_value``. You could combine "
"the two lines into one, but we'll need to use ``player_max_health`` again "
"later in the tutorial."
msgstr ""
"La seconde ligne assigne cette valeur à ``bar.max_value``. On pourrait "
"combiner ces deux lignes en une seule mais on a besoin de cette valeur plus "
"tard dans ce tutoriel, il donc plus judicieux de la stocker dans une "
"variable``player_max_health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:174
msgid ""
"``Player.gd`` sets the ``health`` to ``max_health`` at the start of the "
"game, so we could work with this. Why do we still use ``max_health``? There "
"are two reasons:"
msgstr ""
"Le script associée au nœud joueur``Player.gd`` initialise la valeur de vie "
"``health`` à la valeur de vie maximale ``max_health`` au début du jeu. Alors "
"pourquoi utiliser la variable ``max_health``?  Il y a deux raisons :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:178
msgid ""
"We don't have the guarantee that ``health`` will always equal "
"``max_health``: a future version of the game may load a level where the "
"player already lost some health."
msgstr ""
"On a pas la garantie que la vie actuelle``health` sera toujours égal à la "
"vie maximale``max_health`: une version future du jeu pourrait charger un "
"niveau où le joueur a déjà perdu de la vie."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:184
msgid ""
"When you open a scene in the game, Godot creates nodes one by one, following "
"the order in your Scene dock, from top to bottom. `GUI` and `Player` are not "
"part of the same node branch. To make sure they both exist when we access "
"each other, we have to use the `_ready` function. Godot calls `_ready` right "
"after it loaded all nodes, before the game starts. It's the perfect function "
"to set everything up and prepare the game session. Learn more about _ready: :"
"doc:`scripting_continued`"
msgstr ""
"Quand vous ouvrez une scène dans le jeu, Godot créer les nœuds un par un, en "
"suivant l 'ordre donnée dans votre arbre des scènes, du haut vers le bas. "
"`GUI` et `Player`ne font pas partis de la même branche de nœud. Pour être "
"sûr, qu'elles existent lorsqu'on y accèdent, on doit utiliser la fonction "
"`_ready`. Godot appelle ces fonctions `_ready` après avoir chargé tous les "
"nœuds, avant que le jeu commence. C'est la fonction parfaite pour "
"initialiser notre jeu  et préparer le jeu. Vous apprendrez plus sur cette "
"fonction `_ready`dans : :doc:`scripting_continued`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:188
msgid "Update health with a signal when the player takes a hit"
msgstr "Mettre à jour la santé avec un signal lorsque le joueur prend un coup"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:190
msgid ""
"Our GUI is ready to receive the ``health`` value updates from the "
"``Player``. To achieve this we're going to use **signals**."
msgstr ""
"Notre interface graphique est prête à recevoir les mises-à-jour de la valeur "
"de ``health`` de ``Player``. Pour ce faire, nous allons utiliser des "
"**signaux**."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:195
msgid ""
"There are many useful built-in signals like `enter_tree` and `exit_tree`, "
"that all nodes emit when they are respectively created and destroyed. You "
"can also create your own using the `signal` keyword. On the `Player` node, "
"you'll find two signals we created for you: `died` and `health_changed`."
msgstr ""
"Il existe de nombreux signaux intégrés utiles comme `enter_tree` et "
"`exit_tree`, que tous les nœuds émettent lorsqu'ils sont respectivement "
"créés et détruits. Vous pouvez également créer votre propre signal en "
"utilisant le mot-clé `signal`. Sur le nœud `Player`, vous trouverez deux "
"signaux que nous avons créés pour vous : `died` et `health_changed`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:197
msgid ""
"Why don't we directly get the ``Player`` node in the ``_process`` function "
"and look at the health value? Accessing nodes this way creates tight "
"coupling between them. If you did it sparingly it may work. As your game "
"grows bigger, you may have many more connections. If you get nodes this way "
"it gets complex quickly. Not only that: you need to listen to the state "
"change constantly in the ``_process`` function. This check happens 60 times "
"a second and you'll likely break the game because of the order in which the "
"code runs."
msgstr ""
"Pourquoi n'obtenons-nous pas directement le nœud ``Player`` dans la fonction "
"``_process`` et regardons la valeur santé ? L'accès aux nœuds de cette façon "
"crée un couplage étroit entre eux. Si vous l'avez fait avec parcimonie, cela "
"peut fonctionner. Au fur et à mesure que votre jeu grossit, vous pouvez "
"avoir beaucoup plus de connexions. Si vous obtenez des nœuds de cette façon, "
"cela devient très complexe rapidement. Non seulement cela : vous vérifiez le "
"changement d'état en permanence dans la fonction ``_processus``. Cette "
"vérification se produit 60 fois par seconde et vous casserez probablement le "
"jeu à cause de l'ordre dans lequel le code s'exécute."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:206
msgid ""
"On a given frame you may look at another node's property *before* it was "
"updated: you get a value from the last frame. This leads to obscure bugs "
"that are hard to fix. On the other hand, a signal is emitted right after a "
"change happened. It **guarantees** you're getting a fresh piece of "
"information. And you will update the state of your connected node *right "
"after* the change happened."
msgstr ""
"À une trame donnée, vous regardez potentiellement la propriété d'un autre "
"nœud *avant* qu'il ait été mis à jour : vous obtenez une valeur de la "
"dernière trame. Cela conduit à des bogues obscurs qui sont difficiles à "
"corriger. D'autre part, un signal est émis juste après qu'un changement "
"s'est produit. Cela vous **garantit** que vous obtenez des informations "
"fraîches. Et vous mettrez à jour l'état de votre nœud connecté *directement "
"après* que le changement se produise."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:215
msgid ""
"The Observer pattern, that signals derive from, still adds a bit of coupling "
"between node branches. But it's generally lighter and more secure than "
"accessing nodes directly to communicate between two separate classes. It can "
"be okay for a parent node to get values from its children. But you'll want "
"to favor signals if you're working with two separate branches. Read Game "
"Programming Patterns for more information on the `Observer pattern <http://"
"gameprogrammingpatterns.com/observer.html>`_. The `full book <http://"
"gameprogrammingpatterns.com/contents.html>`_ is available online for free."
msgstr ""
"Le patron Observateur, dont dérivent les signaux, ajoute quand même un peu "
"de couplage entre les branches de nœuds. Mais il est généralement plus léger "
"et plus sûr que l'accès direct aux nœuds pour communiquer entre deux classes "
"distinctes. Il peut être acceptable pour un nœud parent d'obtenir les "
"valeurs de ses enfants. Mais vous voudrez favoriser les signaux si vous "
"travaillez avec deux branches distinctes. Lisez Game Programming Patterns "
"pour plus d'informations sur `Observer pattern <http://"
"gameprogrammingpatterns.com/observer.html>`_. Le `livre complet <http://"
"gameprogrammingpatterns.com/contents.html>`_ est disponible en ligne "
"gratuitement."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:219
msgid ""
"With this in mind, let's connect the ``GUI`` to the ``Player``. Click on the "
"``Player`` node in the scene dock to select it. Head down to the Inspector "
"and click on the Node tab. This is the place to connect nodes to listen to "
"the one you selected."
msgstr ""
"Dans cette optique, connectons le nœud ``GUI`` à ``Player``. Cliquez sur le "
"nœud ``Player`` dans le dock de scène pour le sélectionner. Dirigez-vous "
"vers l'inspecteur et cliquez sur l'onglet Nœud. C'est l'endroit où connecter "
"les nœuds, pour écouter celui que vous avez sélectionné."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:224
msgid "The first section lists custom signals defined in ``Player.gd``:"
msgstr ""
"La première section énumère les signaux personnalisés définis dans ``Player."
"gd`` :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:226
msgid ""
"``died`` is emitted when the character died. We will use it in a moment to "
"hide the UI."
msgstr ""
"``died`` est émis quand le personnage vient de mourir. Nous l'utiliserons "
"dans un moment pour cacher l'interface utilisateur."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:228
msgid "``health_changed`` is emitted when the character got hit."
msgstr "``health_changed`` est émis lorsque le personnage a été touché."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:232
msgid "We're connecting to the health\\_changed signal"
msgstr "On se connecte au signal health\\_changed"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:234
msgid ""
"Select ``health_changed`` and click on the Connect button in the bottom "
"right corner to open the Connect Signal window. On the left side you can "
"pick the node that will listen to this signal. Select the ``GUI`` node. The "
"right side of the screen lets you pack optional values with the signal. We "
"already took care of it in ``Player.gd``. In general I recommend not to add "
"too many arguments using this window as they're less convenient than doing "
"it from the code."
msgstr ""
"Sélectionnez ``health_changed`` et cliquez sur le bouton Connecter dans le "
"coin inférieur droit pour ouvrir la fenêtre Connecter un signal. Sur le côté "
"gauche, vous pouvez choisir le nœud qui écoutera ce signal. Sélectionnez le "
"nœud ``GUI``. Le côté droit de l'écran vous permet d'ajouter des valeurs "
"optionnelles avec le signal. Nous nous en sommes déjà occupés dans ``player."
"GD``. En général, je recommande de ne pas ajouter trop d'arguments en "
"utilisant cette fenêtre car ils sont moins pratiques que ceux ajouter à "
"partir du code."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:244
msgid "The Connect Signal window with the GUI node selected"
msgstr "La fenêtre Connecter un signal avec le nœud GUI sélectionné"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:248
msgid ""
"You can optionally connect nodes from the code. However doing it from the "
"editor has two advantages:"
msgstr ""
"Vous pouvez éventuellement connecter des nœuds à partir du code. Mais le "
"faire à partir de l'éditeur a deux avantages :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:250
msgid "Godot can write new callback functions for you in the connected script"
msgstr ""
"Godot peut écrire de nouvelles fonctions de rappel pour vous dans le script "
"connecté"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:251
msgid ""
"An emitter icon appears next to the node that emits the signal in the Scene "
"dock"
msgstr ""
"Une icône d'émetteur apparaît à côté du nœud qui émet le signal dans le dock "
"de scène"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:253
msgid ""
"At the bottom of the window you will find the path to the node you selected. "
"We're interested in the second row called \"Method in Node\". This is the "
"method on the ``GUI`` node that gets called when the signal is emitted. This "
"method receives the values sent with the signal and lets you process them. "
"If you look to the right, there is a \"Make Function\" radio button that is "
"on by default. Click the connect button at the bottom of the window. Godot "
"creates the method inside the ``GUI`` node. The script editor opens with the "
"cursor inside a new ``_on_Player_health_changed`` function."
msgstr ""
"En bas de la fenêtre, vous trouverez le chemin d'accès au nœud que vous avez "
"sélectionné. Nous nous intéressons à la deuxième ligne appelée \"Méthode "
"dans le nœud\". C'est la méthode sur le noeud ``GUI`` qui est appelé lorsque "
"le signal est émis. Cette méthode reçoit les valeurs envoyées avec le signal "
"et vous permet de les traiter. Si vous regardez à droite, il y a un bouton "
"radio \"Créer une fonction\" qui est activé par défaut. Cliquez sur le "
"bouton Connecter au bas de la fenêtre. Godot crée la méthode à l'intérieur "
"du nœud ``GUI``. L'éditeur de script s'ouvre avec le curseur à l'intérieur "
"d'une nouvelle fonction ``_on_player_health_changed``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:265
msgid ""
"When you connect nodes from the editor, Godot generates a method name with "
"the following pattern: ``_on_EmitterName_signal_name``. If you wrote the "
"method already, the \"Make Function\" option will keep it. You may replace "
"the name with anything you'd like."
msgstr ""
"Lorsque vous connectez des nœuds à partir de l'éditeur, Godot génère un nom "
"de méthode avec le modèle suivant : ``_on_EmitterName_signal_name``. Si vous "
"avez déjà écrit la méthode, l'option \"Créer une fonction\" la conservera. "
"Vous pouvez remplacer le nom par ce que vous voulez."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:272
msgid "Godot writes the callback method for you and takes you to it"
msgstr "Godot écrit la méthode de rappel pour vous et vous y emmène"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:274
msgid ""
"Inside the parentheses after the function name, add a ``player_health`` "
"argument. When the player emits the ``health_changed`` signal, it will send "
"its current ``health`` alongside it. Your code should look like:"
msgstr ""
"Entre les parenthèses après le nom de notre méthode, ajouter un argument "
"``player_health``. Quand le signal ``health_changed`` sera émis, il enverra "
"l'information de point de vie actuel ``health`` avec. \n"
"Votre code devrait ressembler à :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:292
msgid ""
"The engine does not convert PascalCase to snake_case, for C# examples we'll "
"be using PascalCase for method names & camelCase for method parameters, "
"which follows the official `C# naming conventions. <https://docs.microsoft."
"com/en-us/dotnet/standard/design-guidelines/capitalization-conventions>`_"
msgstr ""
"Le moteur ne convertit pas PascalCase en snake_case, pour les exemples C# "
"nous utiliserons PascalCase pour les noms de méthode et camelCase pour les "
"paramètres de méthode, ce qui suit `les conventions de nommage officielles "
"C#. <https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/"
"capitalization-conventions>`_"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:299
msgid ""
"In Player.gd, when the Player emits the health\\_changed signal, it also "
"sends its health value"
msgstr ""
"Dans le script Player.gd, quand le joueur émets le signal health\\_changed, "
"il envoies aussi la valeur health"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:302
msgid ""
"Inside ``_on_Player_health_changed``, let's call a second function called "
"``update_health`` and pass it the ``player_health`` variable."
msgstr ""
"Dans la méthode ``_on_Player_health_changed``, appelons une seconde fonction "
"``update_health`` avec la variable ``player_health`` comme argument."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:307
msgid ""
"We could directly update the health value on `LifeBar` and `Number`. There "
"are two reasons to use this method instead:"
msgstr ""
"On pourrait directement mettre à jour la valeur de vie dans `LifeBar` et "
"`Number`. Il y a deux raisons pour utiliser cette fonction à la place :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:309
msgid ""
"The name makes it clear for our future selves and teammates that when the "
"player took damage, we update the health count on the GUI"
msgstr ""
"Le nom est explicite pour nous et nos camarades sur le fait que lorsque le "
"joueur prends un coup, nous mettons à jour le compteur de vie dans "
"l'interface"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:310
msgid "We will reuse this method a bit later"
msgstr "On réutilisera cette fonction plus tard"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:312
msgid ""
"Create a new ``update_health`` method below ``_on_Player_health_changed``. "
"It takes a new\\_value as its only argument:"
msgstr ""
"Créer une nouvelle fonction  ``update_health`` après "
"``_on_Player_health_changed``. Elle prends ``new\\_value`` comme seul "
"argument :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:327
msgid "This method needs to:"
msgstr "Cette fonction a besoin de :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:329
msgid ""
"set the ``Number`` node's ``text`` to ``new_value`` converted to a string"
msgstr ""
"d'assigner ``new_value`` à la propriété ``text`` du nœud ``Number``. Il ne "
"faut pas oublier de convertir cette valeur en chaîne de caractères"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:331
msgid "set the ``TextureProgress``'s ``value`` to ``new_value``"
msgstr ""
"d'assigner ``new_value`` à la propriété ``value`` du nœud ``TextureProgress``"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:350
msgid ""
"``str`` is a built-in function that converts about any value to text. "
"``Number``'s ``text`` property requires a string, so we can't assign it to "
"``new_value`` directly"
msgstr ""
"``str`` est une fonction intégrée qui convertit une valeur en texte. La "
"propriété ``text`` de ``Number`` n 'accepte que les chaînes de caractères, "
"on ne peut pas assigner ``new_value`` directement"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:354
msgid ""
"Also call ``update_health`` at the end of the ``_ready`` function to "
"initialize the ``Number`` node's ``text`` with the right value at the start "
"of the game. Press F5 to test the game: the life bar updates with every "
"attack!"
msgstr ""
"Il faut appeler notre nouvelle fonction ``update_health`` à la  fin de la "
"fonction ``_ready`` pour initialiser la propriété ``text`` dans le nœud "
"``Number`` avec la bonne valeur au démarrage du jeu.\n"
"Lancez le jeu avec F5 :  la barre de vie se met à jour à chaque attaque !"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:361
msgid ""
"Both the Number node and the TextureProgress update when the Player takes a "
"hit"
msgstr ""
"À chaque attaque, le nœud Number et le nœud TextureProgress (la barre de "
"vie) se mettent à jour"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:365
msgid "Animate the loss of life with the Tween node"
msgstr "Animer la perte de vie avec un nœud Tween"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:367
msgid ""
"Our interface is functional, but it could use some animation. That's a good "
"opportunity to introduce the ``Tween`` node, an essential tool to animate "
"properties. ``Tween`` animates anything you'd like from a start to an end "
"state over a certain duration. For example, it can animate the health on the "
"``TextureProgress`` from its current level to the ``Player``'s new "
"``health`` when the character takes damage."
msgstr ""
"Notre interface est fonctionnel, mais elle pourrait bénéficier d'un peu "
"d'animation. C'est une bonne opportunité d'introduire le nœud ``Tween``, un "
"outil essentiel pour animer des propriété. Ce nœud permet d'animer entre "
"deux état sur une certaine durée. par exemple il peut animer la barre de vie "
"``TextureProgress`` entre deux états, avant et après le coup."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:374
msgid ""
"The ``GUI`` scene already contains a ``Tween`` child node stored in the "
"``tween`` variable. Let's now use it. We have to make some changes to "
"``update_health``."
msgstr ""
"La scène ``GUI`` contient déjà un nœud enfant ``Tween`` qui est assigné à la "
"variable ``tween`` dans notre script. On peut maintenant l'utiliser, nous "
"avons à faire quelques modifications dans notre fonction ``update_health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:378
msgid ""
"We will use the ``Tween`` node's ``interpolate_property`` method. It takes "
"seven arguments:"
msgstr ""
"Nous utiliserons la méthode ``interpolate_property`` du nœud ``Tween``. Elle "
"prend sept paramètres :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:381
msgid "A reference to the node who owns the property to animate"
msgstr "Une référence au nœud dont la propriété est à animer"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:382
msgid "The property's identifier as a string"
msgstr "Le nom de la propriété en chaîne de caractère"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:383
msgid "The starting value"
msgstr "La valeur initiale"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:384
msgid "The end value"
msgstr "La valeur finale"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:385
msgid "The animation's duration in seconds"
msgstr "La durée de l'animation en seconde"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:386
msgid "The type of the transition"
msgstr "Le type de transition"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:387
msgid "The easing to use in combination with the equation."
msgstr "Le lissage à utiliser en combinaison avec l'équation."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:389
msgid ""
"The last two arguments combined correspond to an easing equation. This "
"controls how the value evolves from the start to the end point."
msgstr ""
"Les deux derniers paramètres combinées correspondent à une équation de "
"lissage. Cela permet de contrôler l'évolution de la valeur entre la valeur "
"initiale et finale."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:393
msgid ""
"Click the script icon next to the ``GUI`` node to open it again. The "
"``Number`` node needs text to update itself, and the ``Bar`` needs a float "
"or an integer. We can use ``interpolate_property`` to animate a number, but "
"not to animate text directly. We're going to use it to animate a new ``GUI`` "
"variable named ``animated_health``."
msgstr ""
"Cliquez sur l'icône de script à côté du nœud ``GUI`` pour l'ouvrir à "
"nouveau. Le nœud ``Number`` a besoin de texte pour se mettre à jour, et "
"``Bar`` a besoin d'un flottant ou d'un entier. On peut utiliser "
"``interpolate_property`` pour animer un nombre, mais pas pour animer du "
"texte directement. Nous allons l'utiliser pour animer une nouvelle variable "
"``GUI`` nommée ``animated_health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:399
msgid ""
"At the top of the script, define a new variable, name it "
"``animated_health``, and set its value to 0. Navigate back to the "
"``update_health`` method and clear its content. Let's animate the "
"``animated_health`` value. Call the ``Tween`` node's "
"``interpolate_property`` method:"
msgstr ""
"En haut du script, définissez une nouvelle variable, nommez-la "
"``animated_health``, et mettez sa valeur à 0, puis revenez à la fonction "
"``update_health`` et effacez son contenu. Animons la valeur \"animated_health"
"\". Appelez la fonction``interpolate_property`` du nœud ``Tween`` :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:421
msgid "Let's break down the call:"
msgstr "Décomposons l'appel :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:427
msgid ""
"We target ``animated_health`` on ``self``, that is to say the ``GUI`` node. "
"``Tween``'s interpolate\\_property takes the property's name as a string. "
"That's why we write it as ``\"animated_health\"``."
msgstr ""
"On veut animer dans le nœud ``GUI``, la propriété ``animated_health``, or ce "
"script étant rattaché à ``GUI``, on peut s'y référer avec ``self``.\n"
"La méthode ``interpolate_property`` du nœud ``Tween`` a besoin du nom de la "
"propriété en chaîne de caractère. C'est pour cela qu'on l'écrit ``"
"\"animated_health\"``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:435
msgid ""
"The starting point is the current value the bar's at. We still have to code "
"this part, but it's going to be ``animated_health``. The end point of the "
"animation is the ``Player``'s ``health`` after the ``health_changed``: "
"that's ``new_value``. And ``0.6`` is the animation's duration in seconds."
msgstr ""
"La valeur initiale est la valeur actuelle de la barre de vie. Il faudra "
"coder cette partie, mais dans notre cas on utilisera ``animated_health``.\n"
"La valeur finale de l'animation sera la ``new_value`` dans notre fonction "
"``update_health``. \n"
"Et ``0.6`` est la durée de l'animation en seconde."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:445
msgid ""
"The last two arguments are constants from the ``Tween`` class. "
"``TRANS_LINEAR`` means the animation should be linear. ``EASE_IN`` doesn't "
"do anything with a linear transition, but we must provide this last argument "
"or we'll get an error."
msgstr ""
"Les deux derniers arguments sont des constantes de la classe ``Tween``. "
"``TRANS_LINEAR`` nous donnera une animation linéaire et ``EASE_IN`` n'a pas "
"d'action sur une animation linéaire, mais on doit donner un dernier argument "
"sinon on aura une erreur."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:450
msgid ""
"The animation will not play until we activated the ``Tween`` node with "
"``tween.start()``. We only have to do this once if the node is not active. "
"Add this code after the last line:"
msgstr ""
"Cette animation étant défini, elle ne sera joué que lorsque le nœud "
"``Tween``sera activé avec ``tween.start()``. Il suffit de lancer l'animation "
"une fois si le nœud n'est pas actif. Ajoutons ce code à la dernière ligne :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:469
msgid ""
"Although we could animate the `health` property on the `Player`, we "
"shouldn't. Characters should lose life instantly when they get hit. It makes "
"it a lot easier to manage their state, like to know when one died. You "
"always want to store animations in a separate data container or node. The "
"`tween` node is perfect for code-controlled animations. For hand-made "
"animations, check out `AnimationPlayer`."
msgstr ""
"Même si nous aurions pu animer la propriété `health` de `Player`, ce n'est "
"pas pertinent dans notre cas. Les personnages doivent perdre leur vie "
"instantanément quand ils sont touchés. Cela rend la gestion des états des "
"personnages plus simple, comme savoir si un personnage est mort. Nous "
"voudrons toujours stocker les animations dans des conteneurs de données ou "
"des nœuds séparés. Le nœud `Tween` est parfait pour animer à l'aide d'un "
"script. Pour créer des animations en passant par l'éditeur, il faut utiliser "
"le nœud `AnimationPlayer`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:472
msgid "Assign the animated\\_health to the LifeBar"
msgstr "Assigner animated\\_health à la barre de vie"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:474
msgid ""
"Now the ``animated_health`` variable animates but we don't update the actual "
"``Bar`` and ``Number`` nodes anymore. Let's fix this."
msgstr ""
"Notre variable ``animated_health`` est maintenant animée mais nous ne "
"mettons plus à jour les nœuds ``Bar``et ``Number``. Arrangeons cela."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:477
msgid "So far, the update\\_health method looks like this:"
msgstr "Jusqu'à maintenant, la fonction update\\_health ressemble à cela :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:501
msgid ""
"In this specific case, because ``number_label`` takes text, we need to use "
"the ``_process`` method to animate it. Let's now update the ``Number`` and "
"``TextureProgress`` nodes like before, inside of ``_process``:"
msgstr ""
"Dans ce cas particulier, ``number_label`` prends du texte, nous avons donc "
"besoin d'utiliser la méthode ``_process`` pour l'animer. Nous allons "
"maintenant mettre à jour les nœuds ``Number`` et ``TextureProgress`` comme "
"avant, à l'intérieur de ``_process`` :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:523
msgid ""
"`number_label` and `bar` are variables that store references to the `Number` "
"and `TextureProgress` nodes."
msgstr ""
"`number_label` et `bar` sont des variables qui stocke les références vers "
"les noeuds `Number` et `TextureProgress`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:525
msgid ""
"Play the game to see the bar animate smoothly. But the text displays decimal "
"number and looks like a mess. And considering the style of the game, it'd be "
"nice for the life bar to animate in a choppier fashion."
msgstr ""
"Lancez le jeu, vous observez que la barre s'anime sans accroc. Par contre le "
"texte affiche un nombre décimal et fait n'importe quoi. De plus, en "
"considérant le style du jeu, il serait bien que la barre de vie de s'anime "
"d'une façon plus saccadée."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:531
msgid "The animation is smooth, but the number is broken"
msgstr "L'animation est fluide mais le nombre est cassé"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:533
msgid ""
"We can fix both problems by rounding out ``animated_health``. Use a local "
"variable named ``round_value`` to store the rounded ``animated_health``. "
"Then assign it to ``number_label.text`` and ``bar.value``:"
msgstr ""
"On peut résoudre les deux problèmes en arrondissant la variable "
"``animated_health``. Utiliser une varible locale ``round_value`` pour "
"stocker l'arrondi. Puis assigner la à ``number_label.text`` et ``bar."
"value`` :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:555
msgid "Try the game again to see a nice blocky animation."
msgstr ""
"Essayez le jeu une nouvelle fois pour voir une belle animation blocs par "
"blocs."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:559
msgid "By rounding out animated\\_health, we kill two birds with one stone"
msgstr "En arrondissant animated\\_health, on a fait d'une pierre deux coups"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:563
msgid ""
"Every time the player takes a hit, the ``GUI`` calls "
"``_on_Player_health_changed``, which in turn calls ``update_health``. This "
"updates the animation and the ``number_label`` and ``bar`` follow in "
"``_process``. The animated life bar that shows the health going down "
"gradually is a trick. It makes the GUI feel alive. If the ``Player`` takes 3 "
"damage, it happens in an instant."
msgstr ""
"À chaque fois que le joueur prends un coup, il envoie le signal  "
"``health_changed``, à partir  duquel le nœud ``GUI`` appelle la fonction "
"``_on_Player_health_changed``, qui appelle la fonction ``update_health``. "
"Cela met à jour la valeur animée et les variables ``number_label`` et "
"``bar`` dans la fonction ``_process``. Retenez que l'animation de la barre "
"de vie montrant la vie diminuer graduellement est une illusion pour rendre "
"la GUI plus vivante. Si le joueur prends 3 dégâts, c'est immédiat."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:571
msgid "Fade the bar when the Player dies"
msgstr "Réaliser un fondu de la barre quand le joueur meurt"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:573
msgid ""
"When the green character dies, it plays a death animation and fades out. At "
"this point, we shouldn't show the interface anymore. Let's fade the bar as "
"well when the character died. We will reuse the same ``Tween`` node as it "
"manages multiple animations in parallel for us."
msgstr ""
"Quand le personnage vert meurt, il joue une animation de mort et disparaît. "
"À ce moment on ne veut plus afficher l'interface. Faisons disparaître la "
"barre quand le personnage meurt. On réutilisera le nœud ``Tween`` puisqu'il "
"peut gérer plusieurs animations en parallèle."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:578
msgid ""
"First, the ``GUI`` needs to connect to the ``Player``'s ``died`` signal to "
"know when it died. Press :kbd:`F1` to jump back to the 2D Workspace. Select "
"the ``Player`` node in the Scene dock and click on the Node tab next to the "
"Inspector."
msgstr ""
"Tout d'abord l'interface ``GUI`` doit être connecté au signal envoyé à la "
"mort ``died`` du joueur ``Player`. Appuyer sur :kbd:`F1` pour repasser sur "
"l'espace de travail 2D. Sélectionner le nœud ``Player``dans le dock des "
"scène et cliquer dans l'inspecteur sur l'onglet Node."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:583
msgid "Find the ``died`` signal, select it, and click the Connect button."
msgstr ""
"Trouver et sélectionner le signal ``died``, et cliquer sur le bouton Connect."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:587
msgid "The signal should already have the Enemy connected to it"
msgstr "Le signal devrait déjà être connecté à l’ennemi"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:589
msgid ""
"In the Connecting Signal window, connect to the ``GUI`` node again. The Path "
"to Node should be ``../../GUI`` and the Method in Node should show "
"``_on_Player_died``. Leave the Make Function option on and click Connect at "
"the bottom of the window. This will take you to the ``GUI.gd`` file in the "
"Script Workspace."
msgstr ""
"Dans la fenêtre de connexion des signaux, connecter le nœud ``GUI``. Le "
"chemin du nœud devrait être ``../../GUI`` et ``_on_Player_died`` devrait "
"être afficher dans Method in Node . Laisser l'option Make Function activé et "
"cliquer sur Connect au bas de la fenêtre. Cela vous emmènera sur le script "
"``GUI.gd``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:597
msgid "You should get these values in the Connecting Signal window"
msgstr ""
"Vous devriez avoir ces valeurs dans la fenêtre de connexion des signaux"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:601
msgid ""
"You should see a pattern by now: every time the GUI needs a new piece of "
"information, we emit a new signal. Use them wisely: the more connections you "
"add, the harder they are to track."
msgstr ""
"Vous devriez maintenant voir un modèle : chaque fois que le GUI a besoin "
"d'une nouvelle pièce d'informations, nous émettons un nouveau signal. "
"Utilisez-les judicieusement : plus vous ajoutez des connexions, plus elles "
"seront difficiles à suivre."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:603
msgid ""
"To animate a fade on a UI element, we have to use its ``modulate`` property. "
"``modulate`` is a ``Color`` that multiplies the colors of our textures."
msgstr ""
"Pour animer un fondu sur un élément UI, nous devons utiliser la propriété "
"``modulate``. ``modulate`` est une ``Color`` qui multiplie les couleurs de "
"nos textures."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:609
msgid ""
"`modulate` comes from the `CanvasItem` class, All 2D and UI nodes inherit "
"from it. It lets you toggle the visibility of the node, assign a shader to "
"it, and modify it using a color with `modulate`."
msgstr ""
"`modulate` provient de la classe `CanvasItem`, tous les nœuds 2D et UI en "
"hérite. Cela vous permet de contrôler la visibilité du nœud, d'y assigner un "
"shader, et de le modifier en utilisant une couleur avec `modulate`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:611
msgid ""
"``modulate`` takes a ``Color`` value with 4 channels: red, green, blue and "
"alpha. If we darken any of the first three channels it darkens the "
"interface. If we lower the alpha channel, our interface fades out."
msgstr ""
"``modulate`` prend une valeur ``Color`` avec 4 canaux : rouge, vert, bleu et "
"alpha. Si vous assombrissons n'importe lequel des trois premiers canaux, "
"cela assombrit l'interface. Si nous abaissons le canal alpha, notre "
"interface disparaît petit à petit."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:615
msgid ""
"We're going to tween between two color values: from a white with an alpha of "
"``1``, that is to say at full opacity, to a pure white with an alpha value "
"of ``0``, completely transparent. Let's add two variables at the top of the "
"``_on_Player_died`` method and name them ``start_color`` and ``end_color``. "
"Use the ``Color()`` constructor to build two ``Color`` values."
msgstr ""
"Nous allons interpoler entre deux couleurs : d'un blanc avec un alpha de "
"``1`, soit une opacité totale, à un blanc pur avec une valeur alpha de ``0`, "
"complètement transparent. Ajoutons deux variables en haut de la méthode "
"``_on_Player_died`` et nommons les ``start_color`` et ``end_color``. "
"Utilisez le constructeur ``Color()`` pour créer deux valeurs ``Color``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:637
msgid ""
"``Color(1.0, 1.0, 1.0)`` corresponds to white. The fourth argument, "
"respectively ``1.0`` and ``0.0`` in ``start_color`` and ``end_color``, is "
"the alpha channel."
msgstr ""
"``Color(1.0, 1.0, 1.0)`` correspond au blanc. Le quatrième argument, "
"respectivement ``1.0`` et ``0.0`` pour ``start_color`` et ``end_color``, est "
"le canal alpha."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:641
msgid ""
"We then have to call the ``interpolate_property`` method of the ``Tween`` "
"node again:"
msgstr ""
"Nous devons ensuite appeler à nouveau la méthode ``interpolate_property`` du "
"noeud ``Tween`` :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:654
msgid ""
"This time, we change the ``modulate`` property and have it animate from "
"``start_color`` to the ``end_color``. The duration is of one second, with a "
"linear transition. Here again, because the transition is linear, the easing "
"does not matter. Here's the complete ``_on_Player_died`` method:"
msgstr ""
"Cette fois nous changeons la propriété ``modulate`` et nous faisons une "
"animation à partir de la ``start_color`` jusqu'à la ``end_color``. La durée "
"est d'une seconde, avec une transition linéaire. Ici encore le lissage n'est "
"pas important parce que la transition est linéaire. Voici la méthode "
"``_on_Player_died`` complète :"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:679
msgid "And that is it. You may now play the game to see the final result!"
msgstr ""
"Et voilà c'est tout. Vous pouvez lancer le jeu à présent afin de voir le "
"résultat final !"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:683
msgid "The final result. Congratulations for getting there!"
msgstr "Le résultat final. Félicitations d'être arrivé jusque là !"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:687
msgid ""
"Using the exact same techniques, you can change the color of the bar when "
"the Player gets poisoned, turn the bar red when its health drops low, shake "
"the UI when they take a critical hit... the principle is the same: emit a "
"signal to forward the information from the `Player` to the `GUI` and let the "
"`GUI` process it."
msgstr ""
"En utilisant exactement la même technique, il est possible de changer la "
"couleur de la barre quand le Joueur s’empoisonne, de la rendre rouge quand "
"sa santé est faible, de secouer l'interface utilisateur quand il prend un "
"coup critique ... Le principe est le même : envoyer un signal qui transmet "
"l'information du \"Joueur\" au \"GUI\" et laisser le \"GUI\" traiter ce "
"signal."
