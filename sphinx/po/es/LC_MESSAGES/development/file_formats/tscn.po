# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-08 21:18+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/file_formats/tscn.rst:2
msgid "TSCN File Format"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:4
msgid ""
"A :code:`.tscn` File format is the \"Text SCeNe\" file format and represents "
"a single scene-tree inside Godot. TSCN files have the advantage of being "
"nearly human-readable and easy for version control systems to manage. During "
"import the TSCN files are compiled into binary :code:`.scn` files stored "
"inside the .import folder. This reduces the data size and speed up loading."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:10
msgid ""
"The :code:`.escn` file format is identical to the TSCN file format, but is "
"used to indicate to Godot that the file has been exported from another "
"program and should not be edited by the user from within Godot."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:14
msgid ""
"For those looking for a complete description, the parsing is handled in the "
"file `scene_format_text.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/resources/scene_format_text.cpp>`_ in the class :code:"
"`ResourceFormatLoaderText`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:20
msgid "File Structure"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:22
msgid "There are five main sections inside the TSCN File:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:24
msgid "File Descriptor"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:25
msgid "External resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:26
msgid "Internal resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:27
msgid "Nodes"
msgstr "Nodos"

#: ../../docs/development/file_formats/tscn.rst:28
msgid "Connections"
msgstr "Conexiones"

#: ../../docs/development/file_formats/tscn.rst:31
msgid ""
"The file descriptor looks like :code:`[gd_scene load_steps=1 format=2]` And "
"should be the first entry in the file. The load_steps parameter should (in "
"theory) be the number of resources within the file, though in practice it's "
"value seems not to matter."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:36
msgid ""
"These sections should appear in order, but it can be hard to distinguish "
"them. The only difference between them is the first element in the heading "
"for all of the items in the section. For example, the heading of all "
"external resources should start with :code:`[ext_resource .....]`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:44
msgid "Entries inside the file"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:45
msgid ""
"A heading looks like: :code:`[<resource_type> key=value key=value "
"key=value ...]` Where resource_type is one of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:49
msgid "ext_resource"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:50
msgid "sub_resource"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:51
msgid "node"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:52
msgid "connection"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:54
msgid ""
"Underneath every heading comes zero or more :code:`key = value` pairs. The "
"values can be complex datatypes such as arrays, transformations, colors, and "
"so on. For example, a spatial node looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:65
msgid "Resources"
msgstr "Recursos"

#: ../../docs/development/file_formats/tscn.rst:66
msgid ""
"Resources are components that make up the nodes. For example, a MeshInstance "
"node will have an accompanying ArrayMesh resource. The ArrayMesh resource "
"may be either internal or external to the TSCN file."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:70
msgid ""
"References to the resources are handled by id numbers in the resources "
"heading. External resources and internal resource are referred to with :code:"
"`ExtResource(id)` and :code:`SubResource(id)`. Because there have different "
"methods to refer to internal and external resource, you can have the same ID "
"for both an internal and external resource."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:76
msgid ""
"For example, to refer to the resource :code:`[ext_resource id=3 type="
"\"PackedScene\" path=....]` you would use :code:`ExtResource(3)`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:82
msgid "External Resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:84
msgid ""
"External resources are links to resources not contained within the TSCN file "
"itself. An external resource consists of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:87
msgid "A path"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:88
msgid "A type"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:89
msgid "An ID"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:91
msgid ""
"Godot alway generates absolute paths relative to the resource directory and "
"thus prefixed with :code:`res://`, but paths relative to the TSCN file's "
"location are also valid."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:95
msgid "Some example external resources are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:104
msgid "Internal Resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:106
msgid ""
"A TSCN file can contain meshes, materials and other data, and these are "
"contained in the internal resources section of the file. The heading for an "
"internal resource looks similar to those of external resources, but does not "
"have a path. Internal resources also have :code:`key=value` pairs under each "
"heading. For example, a capsule collision shape looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:119
msgid ""
"Some internal resource contain links to other internal resources (such as a "
"mesh having a material). In this case, the referring resource must appear "
"before the reference to it. Thus, in the internal resources section of the "
"file, order does matter."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:124
msgid ""
"Unfortunately, documentation on the formats for these subresources is "
"completely absent, and while some can be found through inspecting resources "
"of saved files, but others can only be found by looking through Godot's "
"source."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:130
msgid "The Scene Tree"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:132
msgid ""
"The scene tree is made up of ... nodes! The heading of each node consists of "
"it's name, parent and (most of the time) a type. For example :code:`[node "
"type=\"Camera\" name=\"PlayerCamera\" parent=\"Player/Head\"]`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:136
msgid "Other valid keywords include:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:138
msgid "instance"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:139
msgid "instance_placeholder"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:140
msgid "owner"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:141
msgid "index (if two nodes have the same name)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:142
msgid "groups"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:144
msgid ""
"The first node in the file should not have the :code:`parent=Path/To/Node` "
"entry in it's heading, and it is the scene root. All scene files should have "
"exactly one scene root. It it does not, Godot will fail to import the file. "
"The parent path of other nodes should be absolute, but without the scene "
"root's name. If it is a direct child of the scene root, it should be :code:`"
"\".\"`. Here is an example scene tree (but without any node content). ::"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:157
msgid ""
"Similar to the internal resource, the content for each node is currently "
"undocumented. Fortunately it is easy to find out because you can simply save "
"a file with that node in it. Some example nodes are:"
msgstr ""
