# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 10:56+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:4
msgid "3D performance and limitations"
msgstr "Rendimiento y limitaciones del 3D"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:7
msgid "Introduction"
msgstr "Introducción"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:9
#, fuzzy
msgid ""
"Godot follows a balanced performance philosophy. In the performance world, "
"there are always trade-offs, which consist of trading speed for usability "
"and flexibility. Some practical examples of this are:"
msgstr ""
"Godot sigue una filosofía de rendimiento equilibrado. En el campo del "
"rendimiento, siempre hay compensaciones que consisten en la velocidad de "
"intercambio en términos de usabilidad y flexibilidad. Algunos ejemplos "
"prácticos de esto son:"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:13
msgid ""
"Rendering objects efficiently in high amounts is easy, but when a large "
"scene must be rendered, it can become inefficient. To solve this, visibility "
"computation must be added to the rendering, which makes rendering less "
"efficient, but, at the same time, fewer objects are rendered, so efficiency "
"overall improves."
msgstr ""
"Renderizar objetos eficientemente en grandes cantidades es fácil, pero "
"cuando se debe renderizar una escena grande, puede volverse ineficiente. "
"Para resolver esto, se debe agregar el cálculo de visibilidad al "
"renderizado, lo que hace que el renderizado sea menos eficiente, pero, al "
"mismo tiempo, se renderizan menos objetos, por lo que la eficiencia en "
"general mejora."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:18
msgid ""
"Configuring the properties of every material for every object that needs to "
"be rendered is also slow. To solve this, objects are sorted by material to "
"reduce the costs, but at the same time sorting has a cost."
msgstr ""
"La configuración de las propiedades de cada material para cada objeto que "
"necesita ser renderizado también es lenta. Para resolver esto, los objetos "
"se clasifican por material para reducir los costes, pero al mismo tiempo la "
"clasificación tiene un coste."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:22
#, fuzzy
msgid ""
"In 3D physics a similar situation happens. The best algorithms to handle "
"large amounts of physics objects (such as SAP) are slow at insertion/removal "
"of objects and ray-casting. Algorithms that allow faster insertion and "
"removal, as well as ray-casting, will not be able to handle as many active "
"objects."
msgstr ""
"En la física 3D ocurre una situación similar. Los mejores algoritmos para "
"manejar grandes cantidades de objetos físicos (tales como SAP) son lentos en "
"la inserción/eliminación de objetos y el ray-casting. Los algoritmos que "
"permiten una inserción y eliminación más rápida, así como el ray-casting no "
"serán capaces de manejar tantos objetos activos."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:28
#, fuzzy
msgid ""
"And there are many more examples of this! Game engines strive to be general "
"purpose in nature, so balanced algorithms are always favored over algorithms "
"that might be fast in some situations and slow in others.. or algorithms "
"that are fast but make usability more difficult."
msgstr ""
"¡Y hay muchos más ejemplos de esto! Los motores de juegos se esfuerzan por "
"ser de propósito general en la naturaleza, por lo que los algoritmos "
"balanceados siempre son favorecidos sobre los algoritmos que pueden ser "
"rápidos en algunas situaciones y lentos en otras... o los algoritmos que son "
"rápidos pero hacen la usabilidad más difícil."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:33
msgid ""
"Godot is not an exception and, while it is designed to have backends "
"swappable for different algorithms, the default ones (or more like, the only "
"ones that are there for now) prioritize balance and flexibility over "
"performance."
msgstr ""
"Godot no es una excepción y, aunque está diseñado para tener backends "
"intercambiables para diferentes algoritmos, los predeterminados (o más bien, "
"los únicos que están ahí por ahora) priorizan el equilibrio y la "
"flexibilidad sobre el rendimiento."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:38
msgid ""
"With this clear, the aim of this tutorial is to explain how to get the "
"maximum performance out of Godot."
msgstr ""
"Con esto claro, el objetivo de este tutorial es explicar cómo obtener el "
"máximo rendimiento de Godot."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:42
msgid "Rendering"
msgstr "Renderización"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:44
msgid ""
"3D rendering is one of the most difficult areas to get performance from, so "
"this section will have a list of tips."
msgstr ""
"El renderizado 3D es una de las áreas más difíciles de obtener un buen "
"rendimiento, por lo que esta sección tendrá una lista de consejos."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:48
msgid "Reuse shaders and materials"
msgstr "Reutilizar shaders y materiales"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:50
msgid ""
"The Godot renderer is a little different to what is out there. It's designed "
"to minimize GPU state changes as much as possible. :ref:"
"`class_SpatialMaterial` does a good job at reusing materials that need "
"similar shaders but, if custom shaders are used, make sure to reuse them as "
"much as possible. Godot's priorities will be like this:"
msgstr ""
"El renderizador de Godot es un poco diferente a cualquier otro. Está "
"diseñado para minimizar al máximo los cambios de estado de la GPU. :ref:"
"`class_SpatialMaterial` hace un buen trabajo en la reutilización de "
"materiales que necesitan shaders similares pero, si se utilizan shaders "
"personalizados, asegúrate de reutilizarlos tanto como sea posible. Las "
"prioridades de Godot serán así:"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:57
msgid ""
"**Reusing Materials**: The fewer different materials in the scene, the "
"faster the rendering will be. If a scene has a huge amount of objects (in "
"the hundreds or thousands) try reusing the materials or in the worst case "
"use atlases."
msgstr ""
"**Reutilización de Materiales**: Cuantos menos materiales diferentes haya en "
"la escena, más rápido será el renderizado. Si una escena tiene una gran "
"cantidad de objetos (cientos o miles) intenta reutilizar los materiales o, "
"en el peor de los casos, utiliza un atlas."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:61
#, fuzzy
msgid ""
"**Reusing Shaders**: If materials can't be reused, at least try to re-use "
"shaders (or SpatialMaterials with different parameters but the same "
"configuration)."
msgstr ""
"**Reutilización de Shaders**: Si los materiales no pueden ser reutilizados, "
"al menos intenta reutilizar los shaders (o SpatialMaterials con diferentes "
"parámetros pero la misma configuración)."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:65
#, fuzzy
msgid ""
"If a scene has, for example, 20.000 objects with 20.000 different materials "
"each, rendering will be slow. If the same scene has 20.000 objects, but only "
"uses 100 materials, rendering will be blazingly fast."
msgstr ""
"Si una escena tiene, por ejemplo, 20.000 objetos con 20.000 materiales "
"diferentes cada uno, el renderizado será lento. Si la misma escena tiene "
"20.000 objetos, pero sólo utiliza 100 materiales, el renderizado será más "
"rápido."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:71
#, fuzzy
msgid "Pixel cost vs vertex cost"
msgstr "Coste de los píxeles vs coste de los vértices"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:73
msgid ""
"It is a common thought that the lower the number of polygons in a model, the "
"faster it will be rendered. This is *really* relative and depends on many "
"factors."
msgstr ""
"Es un pensamiento común que cuanto menor sea el número de polígonos en un "
"modelo, más rápido se renderizará. Esto es *muy* relativo y depende de "
"muchos factores."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:77
msgid ""
"On a modern PC and console, vertex cost is low. GPUs originally only "
"rendered triangles, so all the vertices:"
msgstr ""
"En un PC y consola modernos, el costo de los vértices es bajo. Las GPUs "
"originalmente sólo renderizaban triángulos, así como todos los vértices:"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:80
msgid "Had to be transformed by the CPU (including clipping)."
msgstr "Tuvo que ser transformado por la CPU (incluyendo el recorte)."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:82
msgid "Had to be sent to the GPU memory from the main RAM."
msgstr ""
"Tuvo que enviarse a la memoria de la GPU desde la memoria RAM principal."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:84
msgid ""
"Nowadays, all this is handled inside the GPU, so the performance is "
"extremely high. 3D artists usually have the wrong feeling about polycount "
"performance because 3D DCCs (such as Blender, Max, etc.) need to keep "
"geometry in CPU memory in order for it to be edited, reducing actual "
"performance. Truth is, a model rendered by a 3D engine is much more optimal "
"than how 3D DCCs display them."
msgstr ""
"Hoy en día, todo esto se maneja dentro de la GPU, por lo que el rendimiento "
"es extremadamente alto. Los artistas 3D suelen tener una idea equivocada "
"sobre el rendimiento de los recuentos porque los DCC 3D (como Blender, Max, "
"etc.) necesitan mantener la geometría en la memoria de la CPU para poder "
"editarla, lo que reduce el rendimiento real. La verdad es que un modelo "
"renderizado por un motor 3D es mucho más óptimo que la forma en que los DCCs "
"3D los muestran."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:91
msgid ""
"On mobile devices, the story is different. PC and Console GPUs are brute-"
"force monsters that can pull as much electricity as they need from the power "
"grid. Mobile GPUs are limited to a tiny battery, so they need to be a lot "
"more power efficient."
msgstr ""
"En dispositivos móviles, la historia es diferente. Los GPU para computadoras "
"y consolas son monstruos de fuerza bruta que pueden extraer tanta "
"electricidad como necesitan de la red eléctrica. Las GPU móviles están "
"limitadas a una batería pequeña, por lo que deben ser mucho más eficientes "
"en términos de energía."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:96
msgid ""
"To be more efficient, mobile GPUs attempt to avoid *overdraw*. This means, "
"the same pixel on the screen being rendered (as in, with lighting "
"calculation, etc.) more than once. Imagine a town with several buildings, "
"GPUs don't know what is visible and what is hidden until they draw it. A "
"house might be drawn and then another house in front of it (rendering "
"happened twice for the same pixel!). PC GPUs normally don't care much about "
"this and just throw more pixel processors to the hardware to increase "
"performance (but this also increases power consumption)."
msgstr ""
"Para ser más eficientes, las GPU móviles intentan evitar el *sobregiro*. "
"Esto significa que el mismo píxel en la pantalla se procesa (como en, con "
"cálculo de iluminación, etc.) más de una vez. Imagine una ciudad con varios "
"edificios, las GPU no saben qué es visible y qué está oculto hasta que lo "
"dibujen. Se podría dibujar una casa y luego otra casa enfrente (¡la "
"representación ocurrió dos veces para el mismo píxel!). A las GPU de PC "
"normalmente no les importa mucho esto y solo lanzan más procesadores de "
"píxeles al hardware para aumentar el rendimiento (pero esto también aumenta "
"el consumo de energía)."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:106
#, fuzzy
msgid ""
"On mobile, pulling more power is not an option, so a technique called \"Tile "
"Based Rendering\" is used (almost every mobile hardware uses a variant of "
"it), which divides the screen into a grid. Each cell keeps the list of "
"triangles drawn to it and sorts them by depth to minimize *overdraw*. This "
"technique improves performance and reduces power consumption, but takes a "
"toll on vertex performance. As a result, fewer vertices and triangles can be "
"processed for drawing."
msgstr ""
"En los dispositivos móviles, no es posible obtener un mayor rendimiento, por "
"lo que se utiliza una técnica llamada \"Tile Based Rendering\" (casi todos "
"los equipos móviles utilizan una variante), que divide la pantalla en una "
"cuadrícula. Cada celda mantiene la lista de triángulos dibujados hacia ella "
"y los ordena por profundidad para minimizar el *overdraw*. Esta técnica "
"mejora el rendimiento y reduce el consumo de energía, pero afecta al "
"rendimiento de los vértices. Como resultado, se pueden procesar menos "
"vértices y triángulos para dibujar."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:114
msgid ""
"Generally, this is not so bad, but there is a corner case on mobile that "
"must be avoided, which is to have small objects with a lot of geometry "
"within a small portion of the screen. This forces mobile GPUs to put a lot "
"of strain on a single screen cell, considerably decreasing performance (as "
"all the other cells must wait for it to complete in order to display the "
"frame)."
msgstr ""
"Generalmente, esto no es tan malo, pero hay un caso en la esquina del móvil "
"que debe evitarse, que es tener objetos pequeños con mucha geometría dentro "
"de una pequeña porción de la pantalla. Esto obliga a las GPUs móviles a "
"ejercer mucha presión sobre una única celda de la pantalla, lo que reduce "
"considerablemente el rendimiento (ya que todas las demás celdas deben "
"esperar a que se complete para mostrar el cuadro)."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:121
msgid ""
"To make it short, do not worry about vertex count so much on mobile, but "
"avoid concentration of vertices in small parts of the screen. If, for "
"example, a character, NPC, vehicle, etc. is far away (so it looks tiny), use "
"a smaller level of detail (LOD) model instead."
msgstr ""
"Para resumir, no te preocupes tanto por el número de vértices en los "
"móviles, sino que evita la concentración de vértices en pequeñas partes de "
"la pantalla. Si, por ejemplo, un personaje, NPC, vehículo, etc. está lejos "
"(por lo que parece pequeño), utiliza en su lugar un modelo de nivel de "
"detalle (LOD) más pequeño."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:126
msgid ""
"An extra situation where vertex cost must be considered is objects that have "
"extra processing per vertex, such as:"
msgstr ""
"Una situación adicional en la que se debe tener en cuenta el coste de los "
"vértices son los objetos que tienen un procesamiento extra por vértice, como "
"por ejemplo:"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:129
msgid "Skinning (skeletal animation)"
msgstr "Skinning (animación esquelética)"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:130
msgid "Morphs (shape keys)"
msgstr "Morphs (claves de forma)"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:131
msgid "Vertex Lit Objects (common on mobile)"
msgstr "Objetos con vértices iluminados (común en móviles)"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:134
msgid "Texture compression"
msgstr "Compresión de texturas"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:136
#, fuzzy
msgid ""
"Godot offers to compress textures of 3D models when imported (VRAM "
"compression). Video RAM compression is not as efficient in size as PNG or "
"JPG when stored, but increases performance enormously when drawing."
msgstr ""
"Godot ofrece comprimir texturas de modelos 3D cuando se importan (compresión "
"VRAM). La compresión de RAM de vídeo no es tan eficiente en tamaño como la "
"de PNG o JPG cuando se almacena, pero aumenta enormemente el rendimiento "
"cuando se dibuja."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:140
msgid ""
"This is because the main goal of texture compression is bandwidth reduction "
"between memory and the GPU."
msgstr ""
"Esto se debe a que el objetivo principal de la compresión de texturas es la "
"reducción del ancho de banda entre la memoria y la GPU."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:143
#, fuzzy
msgid ""
"In 3D, the shapes of objects depend more on the geometry than the texture, "
"so compression is generally not noticeable. In 2D, compression depends more "
"on shapes inside the textures, so the artifacts resulting from 2D "
"compression are more noticeable."
msgstr ""
"En 3D, la forma de los objetos depende más de la geometría que de la "
"textura, por lo que la compresión generalmente no se nota. En 2D, la "
"compresión depende más de las formas dentro de las texturas, por lo que el "
"resultado de la compresión es más notable."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:148
msgid ""
"As a warning, most Android devices do not support texture compression of "
"textures with transparency (only opaque), so keep this in mind."
msgstr ""
"A modo de advertencia, la mayoría de los dispositivos Android no admiten la "
"compresión de texturas con transparencia (sólo opacas), así que tenlo en "
"cuenta."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:152
msgid "Transparent objects"
msgstr "Objetos transparentes"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:154
msgid ""
"As mentioned before, Godot sorts objects by material and shader to improve "
"performance. This, however, can not be done on transparent objects. "
"Transparent objects are rendered from back to front to make blending with "
"what is behind work. As a result, please try to keep transparent objects to "
"a minimum! If an object has a small section with transparency, try to make "
"that section a separate material."
msgstr ""
"Como se mencionó antes, Godot clasifica los objetos por material y shader "
"para mejorar el rendimiento. Esto, sin embargo, no se puede hacer en objetos "
"transparentes. Los objetos transparentes se renderizan de atrás hacia "
"adelante para hacer que se mezclen con lo que hay detrás del trabajo. Por lo "
"tanto ¡intenta reducir al mínimo la transparencia de los objetos! Si un "
"objeto tiene una sección pequeña con transparencia, intenta hacer de esa "
"sección un material independiente."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:162
msgid "Level of detail (LOD)"
msgstr "Nivel de detalle (LOD)"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:164
msgid ""
"As also mentioned before, using objects with fewer vertices can improve "
"performance in some cases. Godot has a simple system to change level of "
"detail, :ref:`GeometryInstance <class_GeometryInstance>` based objects have "
"a visibility range that can be defined. Having several GeometryInstance "
"objects in different ranges works as LOD."
msgstr ""
"Como también se mencionó anteriormente, el uso de objetos con menos vértices "
"puede mejorar el rendimiento en algunos casos. Godot tiene un sistema simple "
"para cambiar el nivel de detalle, los objetos basados en :ref:"
"`GeometryInstance <class_GeometryInstance>` tienen un rango de visibilidad "
"que puede ser definido. Tener varios objetos GeometryInstance en diferentes "
"rangos funciona como LOD."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:172
msgid "Use instancing (MultiMesh)"
msgstr "Usar la instanciación (MultiMesh)"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:174
msgid ""
"If several identical objects have to be drawn in the same place or nearby, "
"try using :ref:`MultiMesh <class_MultiMesh>` instead. MultiMesh allows the "
"drawing of dozens of thousands of objects at very little performance cost, "
"making it ideal for flocks, grass, particles, etc."
msgstr ""
"Si hay que dibujar varios objetos iguales en el mismo lugar o cercanos entre "
"sí, intenta usar :ref:`MultiMesh <class_MultiMesh>` en su lugar. MultiMesh "
"permite dibujar decenas de miles de objetos con un coste de rendimiento muy "
"bajo, lo que lo hace ideal para multitudes, hierba, partículas, etc."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:181
msgid "Bake lighting"
msgstr "Bake de iluminación"

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:183
msgid ""
"Small lights are usually not a performance issue. Shadows a little more. In "
"general, if several lights need to affect a scene, it's ideal to bake it (:"
"ref:`doc_baked_lightmaps`). Baking can also improve the scene quality by "
"adding indirect light bounces."
msgstr ""
"Las luces pequeñas no suelen ser un problema de rendimiento. Las sombras un "
"poco más. En general, si varias luces necesitan afectar una escena, lo ideal "
"es hacer un bake (:ref:`doc_baked_lightmaps`). El baking también puede "
"mejorar la calidad de la escena añadiendo rebotes de luz indirectos."

#: ../../docs/tutorials/3d/3d_performance_and_limitations.rst:188
msgid ""
"If working on mobile, baking to texture is recommended, since this method is "
"even faster."
msgstr ""
"Si se trabaja en móvil, se recomienda trabajar con texturas, ya que este "
"método es más rápido."
