# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-30 19:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:4
msgid "What are shaders?"
msgstr "¿Qué son los shaders?"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:7
msgid "Introduction"
msgstr "Introducción"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:9
msgid ""
"So, you have decided to give shaders a try. You have likely heard that they "
"can be used to create interesting effects that run incredibly fast. You have "
"also likely heard that they are terrifying. Both are true."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:13
msgid ""
"Shaders can be used to create a wide range of effects (in fact everything "
"drawn in a modern rendering engine is done with shaders)."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:16
msgid ""
"Writing shaders can also be very difficult for people unfamiliar with them. "
"Godot tries to make writing shaders a little easier by exposing many useful "
"built-in features and handling some of the lower-level initialization work "
"for you. However, GLSL (the OpenGL Shading Language, which Godot uses) is "
"still unintuitive and restricting, especially for users who are used to "
"GDScript."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:22
msgid "But what are they?"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:24
msgid ""
"Shaders are a special kind of program that runs on Graphics Processing Units "
"(GPUs). Most computers have some sort of GPU, either one integrated into "
"their CPU or discrete (meaning it is a separate hardware component, for "
"example, the typical graphics card). GPUs are especially useful for "
"rendering because they are optimized for running thousands of instructions "
"in parallel."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:29
msgid ""
"The output of the shader is typically the colored pixels of the object drawn "
"to the viewport. But some shaders allow for specialized outputs (this is "
"especially true for APIs like Vulkan). Shaders operate inside the shader "
"pipeline. The standard process is the vertex -> fragment shader pipeline. "
"The vertex shader is used to decided where each vertex (point in a 3D model, "
"or corner of a Sprite) goes and the fragment shader decides what color "
"individual pixels receive."
msgstr ""
"Por lo general, la salida del shader son los pixels colorados del objeto "
"dibujado en la vista. Sin embargo, algunos shaders permiten salidas "
"especializadas (especialmente con los APIs como Vulkan). Los shaders "
"funcionan dentro el canal de shader. El proceso estandar es el canal de "
"shader «vértice -> frgament». El shader vértive se usa para calcular dónde "
"se ubica cada vértice (un punto en un modelo 3D, or la esquína de un Sprite) "
"y el shader fragment calcula el color de los pixels individuales."

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:35
msgid ""
"Suppose you want to update all the pixels in a texture to a given color, on "
"the CPU you would write:"
msgstr ""
"Suponemos que quisieras cambiar todos los pixels de una textura a un color "
"determinado. En el CPU escribirías:"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:43
msgid ""
"In a shader you are given access only to the inside of the loop so what you "
"write looks like this:"
msgstr ""
"En un shader sólo tienes acceso al interior del bucle, por lo tanto lo que "
"escribes es así:"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:52
msgid ""
"You have no control over how this function is called. So you have to design "
"your shaders differently from how you would design programs on the CPU."
msgstr ""
"No tienes control sobre como se llama esta función. Por lo tanto hay que "
"crear el shader de manera distinta a la que creas programas en el CPU."

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:55
msgid ""
"A consequence of the shader pipeline is that you cannot access the results "
"from a previous run of the shader, you cannot access other pixels from the "
"pixel being drawn, and you cannot write outside of the current pixel being "
"drawn. This enables the GPU to execute the shader for different pixels in "
"parallel, as they do not depend on each other. This lack of flexibility is "
"designed to work with the GPU which allows shaders to be incredibly fast."
msgstr ""
"Una consequencia del pipeline de shaders es que se puede acceder los "
"resultados de ejecuciones anteriores del shader; no se puede acceder otros "
"píxeles desde el que se está dibujando; y no se puede escribir fuera de este "
"píxel. Esto permite que el GPU ejecute al shader para distintos píxeles en "
"paralelo; pues no se depende uno al otro. Esta falta de flexibilidad es "
"diseñado para funcionar con el GPU y permite que los shaders sean "
"rapidíssimos."

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:62
msgid "What can they do"
msgstr "Lo que pueden hacer"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:64
msgid "position vertices very fast"
msgstr "colocar vértices muy rapidamente"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:65
msgid "compute color very fast"
msgstr "calcular colores muy rapidamente"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:66
msgid "compute lighting very fast"
msgstr "calcular la iluminación muy rapidamente"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:67
msgid "lots and lots of math"
msgstr "muchíssima matemática"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:70
msgid "What can't they do"
msgstr "Lo que no pueden hacer"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:72
msgid "draw outside mesh"
msgstr "dibujar fuera de una malla"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:73
msgid "access other pixels from current pixel (or vertices)"
msgstr "acceder a otros píxeles desde el píxel actual (o vértices)"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:74
msgid "store previous iterations"
msgstr "guarda iteraciones previas"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:75
msgid "update on the fly (they can, but they need to be compiled)"
msgstr ""
"actualizar sobre la marcha (bueno, sí que pueden pero hay que compilarlos "
"antes)"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:78
msgid "Structure of a shader"
msgstr "Estructura de un shader"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:80
msgid ""
"In Godot, shaders are made up of 3 main functions: the ``vertex()`` "
"function, the ``fragment()`` function and the ``light()`` function."
msgstr ""
"En Godot, los shader se componen de tres funciones: la función ``vertex()``, "
"la funcíon ``fragment()`` y la función ``light()``."

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:83
msgid ""
"The ``vertex()`` function runs over all the vertices in the mesh and sets "
"their positions as well as some other per-vertex variables."
msgstr ""
"La función ``vertex()`` ejecuta todos los vértices en la malla y define la "
"posición y otras variables de los vértices."

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:86
msgid ""
"The ``fragment()`` function runs for every pixel that is covered by the "
"mesh. It uses the variables from the ``vertex()`` function to run. The "
"variables from the ``vertex()`` function are interpolated between the "
"vertices to provide the values for the ``fragment()`` function."
msgstr ""
"La función ``fragment()`` ejecuta por cada píxel que está cubierta por la "
"malla. Usa los variables de la función ``vertex()`` para ejecutar. Los "
"variables de la función ``vertex()`` se interpolan entre los vértices para "
"aportar los valores para la función ``fragment()``."

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:90
msgid ""
"The ``light()`` function runs for every pixel and for every light. It takes "
"variables from the ``fragment()`` function and from previous runs of itself."
msgstr ""
"La función ``light()`` ejecuta por cada píxel y cada luz. Toma variables de "
"la función ``fragement()`` y de ejecuciones anteriores de ella misma."

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:93
msgid ""
"For more information about how shaders operate specifically in Godot, see "
"the :ref:`Shaders <doc_shaders>` doc."
msgstr ""
"Para más información sobre cómo funcionan los shaders específicamente en "
"Godot, ver :ref:`Shaders <doc_shaders>` doc."

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:97
msgid ""
"The ``light()`` function won't be run if the ``vertex_lighting`` render mode "
"is enabled, or if **Rendering > Quality > Shading > Force Vertex Shading** "
"is enabled in the Project Settings. (It's enabled by default on mobile "
"platforms.)"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:103
msgid "Technical overview"
msgstr "Reseña técnica"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:105
msgid ""
"GPUs are able to render graphics much faster than CPUs for a few reasons, "
"but most notably, because they are able to run calculations massively in "
"parallel. A CPU typically has 4 or 8 cores while a GPU typically has "
"thousands. That means a GPU can do hundreds of tasks at once. GPU architects "
"have exploited this in a way that allows for doing many calculations very "
"quickly, but only when many or all cores are doing the same calculation at "
"once, but with different data."
msgstr ""
"La GPU es capáz de generar gráficos mucho más rapido que la CPU por varios "
"razones, la más notable es que pueden ejecutar cálculos masivamente en "
"paralelo. Por lo general, una CPU tiene 4 o 8 núcleos pero un GPU tiene "
"miles. Eso significa que la GPU puede hacer cientos de tareas a la vez. Los "
"diseñedores han aprovechado de esto de manera que permite hacer muchos "
"cálculos con rapidez, pero solo cuando la mayoría o todos de los núcleos "
"están haciendo el mismo cálculo, pero con datos distintos."

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:111
msgid ""
"That is where shaders come in. The GPU will call the shader a bunch of times "
"simultaneously, and then operate on different bits of data (vertices, or "
"pixels). These bunches of data are often called wavefronts. A shader will "
"run the same for every thread in the wavefront. For example, if a given GPU "
"can handle 100 threads per wavefront, a wavefront will run on a 10×10 block "
"of pixels together. It will continue to run for all pixels in that wavefront "
"until they are complete. Accordingly, if you have one pixel slower than the "
"rest (due to excessive branching), the entire block will be slowed down, "
"resulting in massively slower render times."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:119
msgid ""
"This is different from CPU-based operations. On a CPU, if you can speed up "
"even one pixel, the entire rendering time will decrease. On a GPU, you have "
"to speed up the entire wavefront to speed up rendering."
msgstr ""
