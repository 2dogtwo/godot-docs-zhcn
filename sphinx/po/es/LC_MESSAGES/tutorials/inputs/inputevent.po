# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-27 12:19+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/inputs/inputevent.rst:4
msgid "InputEvent"
msgstr "InputEvent"

#: ../../docs/tutorials/inputs/inputevent.rst:7
msgid "What is it?"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:9
msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""
"Administrar inputs (o entradas) es normalmente complejo, sin importar en qué "
"SO o plataforma. Para aliviar un poco esto se provee un tipo built-in "
"especial,  :ref:`InputEvent <class_InputEvent>`, este puede ser configurado "
"para contener varios tipos de eventos. Los eventos de entrada van a través "
"del motor y pueden ser recibidos en múltiples lugares, dependiendo de su "
"propósito."

#: ../../docs/tutorials/inputs/inputevent.rst:15
msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""
"Aquí hay un ejemplo rápido de cerrar el juego cuando se presiona la tecla "
"\"escape\":"

#: ../../docs/tutorials/inputs/inputevent.rst:34
msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. they keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""
"Sin embargo, es más limpio y flexible usar la funcionalidad :ref:`InputMap "
"<class_InputMap>`, la que permite definir acciones de entrada y asignarlas a "
"diferentes teclas. De este modo, se pueden definir múltiples teclas para la "
"misma acción (por ejemplo, la tecla escape y el botón start de un gamepad). "
"Así se puede cambiar el mapeo fácilmente en el proyecto sin necesidad de "
"modificar el código, incluso se puede crear una funcionalidad de mapeo que "
"permita cambiar las teclas utilizadas dentro del juego en ejecución."

#: ../../docs/tutorials/inputs/inputevent.rst:40
#, fuzzy
msgid ""
"You can set up your InputMap under **Project > Project Settings > Input "
"Map** and then use those actions like this:"
msgstr ""
"Puedes configurar el InputMap dentro de **Proyecto > Ajustes del Proyecto > "
"Mapa de Entradas** y luego usa las acciones de este modo:"

#: ../../docs/tutorials/inputs/inputevent.rst:60
msgid "How does it work?"
msgstr "¿Cómo funciona?"

#: ../../docs/tutorials/inputs/inputevent.rst:62
msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The OS object for each platform will read events from the "
"device, then feed them to MainLoop. As :ref:`SceneTree <class_SceneTree>` is "
"the default MainLoop implementation, events are fed to it. Godot provides a "
"function to get the current SceneTree object : **get_tree()**."
msgstr ""
"Cada evento de entrada es originado por el usuario/jugador (aunque también "
"es posible generar un InputEvent y enviarlos al motor, algo útil para "
"funciones como gestos). El objeto OS de cada plataforma leerá eventos desde "
"un dispositivo y los transmitirá a MainLoop. Como :ref:`SceneTree "
"<class_SceneTree>` es la implementación por defecto de MainLoop, los eventos "
"irán a este. Godot provee una función para obtener el objeto SceneTree "
"actual: **get_tree()**."

#: ../../docs/tutorials/inputs/inputevent.rst:70
msgid ""
"But SceneTree does not know what to do with the event, so it will give it to "
"the viewports, starting by the \"root\" :ref:`Viewport <class_Viewport>` "
"(the first node of the scene tree). Viewport does quite a lot of stuff with "
"the received input, in order:"
msgstr ""
"Pero SceneTree no sabe qué hacer con el evento, así que lo envía a los "
"viewports, comenzando por el :ref:`Viewport <class_Viewport>` \"root\" (el "
"primero nodo del árbol de escenas). Viewport hace varias cosas cuando recibe "
"una entrada, en este orden:"

#: ../../docs/tutorials/inputs/inputevent.rst:77
msgid ""
"First of all, the standard :ref:`Node._input() <class_Node_method__input>` "
"function will be called in any node that overrides it (and hasn't disabled "
"input processing with :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input>`). If any function consumes the event, "
"it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. This ensures that you can filter all events of interest, "
"even before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` is generally a better fit, because it "
"allows the GUI to intercept the events."
msgstr ""
"Primero, la función estándar  :ref:`Node._input() "
"<class_Node_method__input>` será llamada en cualquier nodo que la haya "
"sobreescrito (y que no tenga deshabilitado el procesamiento de entradas con :"
"ref:`Node.set_process_input() <class_Node_method_set_process_input>`). Si "
"una función consume el evento, podrá llamar a :ref:`SceneTree."
"set_input_as_handled() <class_SceneTree_method_set_input_as_handled>` y el "
"evento no se propagará más. Esto asegura que se puedan filtrar eventos de "
"interés, incluso antes de que lleguen a la GUI. Para entradas de gameplay, "
"generalmente es mejor utilizar :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` porque permite que la GUI intercepte "
"los eventos previamente."

#: ../../docs/tutorials/inputs/inputevent.rst:82
msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` and the signal \"input_event\" will be "
"emitted (this function is re-implementable by script by inheriting from it). "
"If the control wants to \"consume\" the event, it will call :ref:`Control."
"accept_event() <class_Control_method_accept_event>` and the event will not "
"spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` callback, and whether these "
"events are propagated further."
msgstr ""
"Seguido, intentará transmitir el evento a la GUI y ver si algún Control la "
"puede recibir. De ser así, el :ref:`Control <class_Control>` será llamado "
"mediante la función virtual :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` y la señal \"input_event\" será emitida "
"(esta función se puede re-implementar por script en caso utilizar herencia). "
"Si el Control quiere \"consumir\" el evento, llamará a :ref:`Control."
"accept_event() <class_Control_method_accept_event>` y el evento no se "
"propagará más. Los eventos que no son consumidos, se propagarán **hacia "
"arriba** hasta sus ancestros. Utiliza la propiedad :ref:`Control."
"mouse_filter <class_Control_property_mouse_filter>` para controlar si un :"
"ref:`Control <class_Control>` es notificado de eventos de ratón mediante :"
"ref:`Control._gui_input() <class_Control_method__gui_input>` y si esos "
"eventos deberán propagarse más."

#: ../../docs/tutorials/inputs/inputevent.rst:92
msgid ""
"If so far no one consumed the event, the unhandled input callback will be "
"called if overridden (and not disabled with :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, and the event will not "
"spread any more. The unhandled input callback is ideal for full-screen "
"gameplay events, so they are not received when a GUI is active."
msgstr ""
"Si hasta el momento ningún evento fue consumido, se utilizará la llamada a "
"`_unhandled_input` si fue redefinida en el script (y no desactivada con :ref:"
"`Node.set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Si alguna función consume "
"el evento, esta podrá llamar a :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, y el evento no se propagará "
"más. La llamada a _unhandled_input es ideal para eventos de gameplay de "
"pantalla completa que deben ser ignorados si hay elementos de GUI activos."

#: ../../docs/tutorials/inputs/inputevent.rst:97
msgid ""
"If no one wanted the event so far, and a :ref:`Camera <class_Camera>` is "
"assigned to the Viewport, a ray to the physics world (in the ray direction "
"from the click) will be cast. If this ray hits an object, it will call the :"
"ref:`CollisionObject._input_event() "
"<class_CollisionObject_method__input_event>` function in the relevant "
"physics object (bodies receive this callback by default, but areas do not. "
"This can be configured through :ref:`Area <class_Area>` properties)."
msgstr ""
"Si nadie ha querido realizar el evento hasta ahora, y una :ref:`Camera "
"<class_Camera>` es asignada al Viewport, se emitirá un rayo al mundo de la "
"física (en la dirección correspondiente al rayo del clic). Si este rayo "
"golpea un objeto, llamará a la función :ref:`CollisionObject._input_event() "
"<class_CollisionObject_method__input_event>` en el objeto físico "
"correspondiente (los cuerpos reciben esta llamada de retorno por defecto, "
"pero las áreas no lo hacen. Esto puede configurarse a través de las "
"propiedades de :ref:`Area <class_Area>`)."

#: ../../docs/tutorials/inputs/inputevent.rst:103
msgid ""
"Finally, if the event was unhandled, it will be passed to the next Viewport "
"in the tree, otherwise it will be ignored."
msgstr ""
"Finalmente, si el evento no fue capturado por ningún objeto, se pasará al "
"siguiente Viewport del árbol o ignorado si no hay ninguno."

#: ../../docs/tutorials/inputs/inputevent.rst:106
msgid ""
"When sending events to all listening nodes within a scene, the viewport will "
"do so in a reverse depth-first order: Starting with the node at the bottom "
"of the scene tree, and ending at the root node:"
msgstr ""
"Cuando se envían eventos a todos los nodos que están escuchando en la "
"escena, el viewport lo hará en un orden depth-first (primero en "
"profundidad): Comenzando por el nodo al final del árbol de escenas y "
"finalizando en el nodo raíz:"

#: ../../docs/tutorials/inputs/inputevent.rst:112
msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""
"Los eventos de GUI irán hacia arriba del árbol de escenas, como los eventos "
"apuntan a Controls específicos, sólo se dirige a ancestros de los nodos "
"Control indicados para recibir el evento."

#: ../../docs/tutorials/inputs/inputevent.rst:115
#, fuzzy
msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""
"De acuerdo al diseño basado en nodos de Godot, esto habilita que nodos hijos "
"especializados para manipular y consumir eventos particulares, mientras que "
"los ancestros y finalmente el árbol de escenas, pueden proveer un "
"comportamiento más generalizado si es necesario."

#: ../../docs/tutorials/inputs/inputevent.rst:121
msgid "Anatomy of an InputEvent"
msgstr "Anatomía de un InputEvent"

#: ../../docs/tutorials/inputs/inputevent.rst:123
msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""
":ref:`InputEvent <class_InputEvent>` es un tipo base integrado, no "
"representa nada y sólo contiene información básica, como el identificador "
"del evento (ID, el cual es incrementado por cada evento), índice de "
"dispositivo, etc."

#: ../../docs/tutorials/inputs/inputevent.rst:127
#, fuzzy
msgid ""
"There are several specialized types of InputEvent, described in the table "
"below:"
msgstr ""
"Existen varios tipos de InputEvent especializados, descriptos en la "
"siguiente tabla:"

#: ../../docs/tutorials/inputs/inputevent.rst:130
msgid "Event"
msgstr "Evento"

#: ../../docs/tutorials/inputs/inputevent.rst:130
msgid "Type Index"
msgstr "Índice de Tipo"

#: ../../docs/tutorials/inputs/inputevent.rst:130
msgid "Description"
msgstr "Descripción"

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid "NONE"
msgstr "NONE"

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid "Empty Input Event."
msgstr "Evento de entrada vacío."

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ":ref:`InputEventKey <class_InputEventKey>`"

#: ../../docs/tutorials/inputs/inputevent.rst:134
msgid "KEY"
msgstr "KEY"

#: ../../docs/tutorials/inputs/inputevent.rst:134
#, fuzzy
msgid "Contains a scancode and Unicode value, as well as modifiers."
msgstr "Contiene un scancode y un valor unicode, así como modificadores."

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid "MOUSE_BUTTON"
msgstr "MOUSE_BUTTON"

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid "Contains click information, such as button, modifiers, etc."
msgstr "Contiene información de click como botón, modificadores, etc."

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid "MOUSE_MOTION"
msgstr "MOUSE_MOTION"

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid ""
"Contains motion information, such as relative, absolute positions and speed."
msgstr ""
"Contiene información de movimiento, como posiciones relativas y absolutas "
"así como velocidad."

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid "JOYSTICK_MOTION"
msgstr "JOYSTICK_MOTION"

#: ../../docs/tutorials/inputs/inputevent.rst:143
msgid "Contains Joystick/Joypad analog axis information."
msgstr "Contiene información de ejes análogos de Joystick/Joypad."

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid "JOYSTICK_BUTTON"
msgstr "JOYSTICK_BUTTON"

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid "Contains Joystick/Joypad button information."
msgstr "Contiene información de botones de Joystick/Joypad."

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid "SCREEN_TOUCH"
msgstr "SCREEN_TOUCH"

#: ../../docs/tutorials/inputs/inputevent.rst:149
msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""
"Contiene información sobre press/release de multi-touch. (sólo disponible en "
"dispositivos móviles)"

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid "SCREEN_DRAG"
msgstr "SCREEN_DRAG"

#: ../../docs/tutorials/inputs/inputevent.rst:153
msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""
"Contiene información de arrastre multi-touch. (sólo disponible en "
"dispositivos móviles)"

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ":ref:`InputEventAction <class_InputEventAction>`"

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid "SCREEN_ACTION"
msgstr "SCREEN_ACTION"

#: ../../docs/tutorials/inputs/inputevent.rst:156
msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""
"Contiene una acción genérica. Estos eventos a menudo son generados por el "
"programador como feedback. (más información a continuación)"

#: ../../docs/tutorials/inputs/inputevent.rst:162
msgid "Actions"
msgstr "Acciones"

#: ../../docs/tutorials/inputs/inputevent.rst:164
msgid ""
"An InputEvent may or may not represent a pre-defined action. Actions are "
"useful because they abstract the input device when programming the game "
"logic. This allows for:"
msgstr ""
"Un InputEvent puede representar o no una acción predefinida. Las acciones "
"son útiles porque abstraen el dispositivo de entrada utilizado cuando se "
"programa la lógica del juego. Esto permite:"

#: ../../docs/tutorials/inputs/inputevent.rst:168
msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""
"Que el mismo código funcione para diferentes dispositivos con distintos "
"dispositivos de entrada (por ejemplo, teclado en PC, Joypad en consolas)."

#: ../../docs/tutorials/inputs/inputevent.rst:170
msgid "Input to be reconfigured at run-time."
msgstr "Las entradas pueden ser reconfiguradas en tiempo de ejecución."

#: ../../docs/tutorials/inputs/inputevent.rst:172
msgid ""
"Actions can be created from the Project Settings menu in the Actions tab."
msgstr ""
"Las acciones pueden ser creadas en Project Settings, pestaña Mapa de "
"Entradas."

#: ../../docs/tutorials/inputs/inputevent.rst:175
msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""
"Todos los eventos tienen los métodos :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_is_pressed>` y :ref:`InputEvent <class_InputEvent>`."

#: ../../docs/tutorials/inputs/inputevent.rst:178
msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""
"Alternativamente, es posible que quieras enviar una acción al juego desde el "
"código (un ejemplo de esto es la detección de gestos). El singleton Input "
"tiene un método para esto: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. Se usa normalmente así:"

#: ../../docs/tutorials/inputs/inputevent.rst:203
msgid "InputMap"
msgstr "InputMap"

#: ../../docs/tutorials/inputs/inputevent.rst:205
msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""
"A menudo se desea personalizar y re-mapear la entrada desde código. Si todo "
"el flujo de trabajo depende de las acciones, el singleton :ref:`InputMap "
"<class_InputMap>` es ideal para reasignar o crear diferentes acciones en "
"tiempo de ejecución. Este singleton no se guarda (debe ser modificado "
"manualmente) y su estado se ejecuta desde la configuración del proyecto "
"(project.godot). Por lo tanto, cualquier sistema dinámico de este tipo "
"necesita almacenar los ajustes de la forma que el programador considere más "
"adecuada."
