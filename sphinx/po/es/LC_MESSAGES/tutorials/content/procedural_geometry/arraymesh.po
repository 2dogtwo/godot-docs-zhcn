# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-29 12:54+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:4
#, fuzzy
msgid "Using the ArrayMesh"
msgstr "Usando el AssetLib"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:6
msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:8
msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to four "
"parameters. The first two are required, while the second two are optional."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:11
msgid ""
"The first is the ``PrimitiveType``, this is an OpenGL concept that instructs "
"the GPU how to arrange the primitive based on the vertices given whether it "
"is triangles, lines, points, etc. A complete list can be found under the :"
"ref:`Mesh <class_mesh>` class reference page."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:16
msgid ""
"The second is the actual Array that stores the mesh information. The array "
"is a normal Godot array that is constructed with empty brackets ``[]``. It "
"stores a ``Pool**Array`` (e.g. PoolVector3Array, PoolIntArray, etc.) for "
"each type of information."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:20
msgid "``ARRAY_VERTEX`` = 0 | PoolVector3Array or PoolVector2Array"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:21
#, fuzzy
msgid "``ARRAY_NORMAL`` = 1 | PoolVector3Array"
msgstr "``PoolVector3Array``"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:22
msgid ""
"``ARRAY_TANGENT`` = 2 | PoolRealArray of groups of 4 floats. first 3 floats "
"determine the tangent, and the last the binormal direction as -1 or 1."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:24
msgid "``ARRAY_COLOR`` = 3 | PoolColorArray"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:25
msgid "``ARRAY_TEX_UV`` = 4 | PoolVector2Array or PoolVector3Array"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:26
msgid "``ARRAY_TEX_UV2`` = 5 | PoolVector2Array or PoolVector3Array"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:27
msgid ""
"``ARRAY_BONES`` = 6 | PoolRealArray of groups of 4 floats or PoolIntArray of "
"groups of 4 ints"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:28
msgid "``ARRAY_WEIGHTS`` = 7 | PoolRealArray of groups of 4 floats"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:29
msgid "``ARRAY_INDEX`` = 8 | PoolIntArray"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:31
msgid ""
"The Array of vertices is always required. All the others are optional and "
"will only be used if included."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:33
msgid ""
"Each array needs to have the same number of elements as the vertex array "
"except for the index array. For arrays like tangents, an element is a group "
"of 4 floats. So the array size will be four times the size of the vertex "
"array size, but they will have the same number of elements"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:37
msgid "The index array is unique."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:39
msgid ""
"The third parameter is an array of blendshapes for the Mesh to use. While "
"this tutorial does not cover using blendshapes, it is possible to specify "
"them when creating a surface from arrays."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:42
msgid ""
"The last parameter is the compress flags which specifies which arrays to "
"store with half as many bits. The values can be found in the classref for :"
"ref:`VisualServer <class_visualserver>` under :ref:`ArrayFormat "
"<enum_visualserver_arrayformat>`."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:45
msgid ""
"For normal usage you will find it is best to leave the last two parameters "
"empty."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:48
msgid "ArrayMesh"
msgstr "ArrayMesh"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:50
msgid ""
"Add an :ref:`ArrayMesh <class_arraymesh>` to a MeshInstance. Normally, "
"adding an ArrayMesh in the editor is not useful, but in this case it allows "
"as to access the ArrayMesh from code without creating one."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:54
#, fuzzy
msgid "Next, add a script to the MeshInstance."
msgstr "Agrega el script al nodo."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:56
msgid "Under ``_ready()``, create a new Array."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:63
msgid ""
"This will be the array that we keep our surface information in, it will hold "
"all the arrays of data that the surface needs. Godot will expect it to be of "
"size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:73
msgid "Next create the arrays for each data type you will use."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:83
msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:96
msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:99
msgid "Put together the full code looks like:"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:130
msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code that could go in the middle."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:134
#, fuzzy
msgid "Generating geometry"
msgstr "Geometr√≠a generada"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:136
msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:203
msgid "Combined with the code above, this code will generate a sphere."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:205
msgid ""
"When it comes to generating geometry with the ArrayMesh you need to "
"understand what goes in each array and then you can follow tutorials for any "
"language/engine and convert it into Godot."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:209
msgid "Saving"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:211
msgid ""
"Finally, Godot provides a single method to save ArrayMeshes using the :ref:"
"`ResourceSaver <class_resourcesaver>` class. This is useful when you want to "
"generate a mesh and then use it later without having to re-generate."
msgstr ""
