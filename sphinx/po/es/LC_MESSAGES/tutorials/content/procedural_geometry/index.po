# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-07 14:35+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:4
msgid "Procedural geometry"
msgstr "Geometría procedural"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:6
msgid ""
"There are many ways to procedurally generate geometry in Godot. In this "
"tutorial series we will explore a few of them. Each technique has its own "
"benefits and drawbacks, so it is best to understand each one and how it can "
"be useful in a given situation."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:20
msgid "What is geometry?"
msgstr "¿Qué es geometría?"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:22
msgid ""
"Geometry is a fancy way of saying shape. In computer graphics, geometry is "
"typically represented by an array of positions called \"vertices\". In "
"Godot, geometry is represented by Meshes."
msgstr ""
"La geometría es una forma elegante de decir formas. En los gráficos por "
"ordenador, la geometría se representa típicamente por una serie de "
"posiciones llamadas \"vértices\". En Godot, la geometría es representada por "
"Meshes."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:26
msgid "What is a Mesh?"
msgstr "¿Qué es una Mesh?"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:28
msgid ""
"Many things in Godot have mesh in their name: the :ref:`Mesh <class_Mesh>`, "
"the :ref:`ArrayMesh <class_ArrayMesh>`, the :ref:`MeshInstance "
"<class_MeshInstance>`, the :ref:`MultiMesh <class_MultiMesh>`, and the :ref:"
"`MultiMeshInstance <class_MultiMeshInstance>`. While they are all related, "
"they have slightly different uses."
msgstr ""
"Muchas cosas en Godot tienen un mesh en su nombre: el :ref:`Mesh "
"<class_Mesh>`, el :ref:`ArrayMesh <class_ArrayMesh>`, el :ref:`MeshInstance "
"<class_MeshInstance>`, el :ref:`MultiMesh <class_MultiMesh>`, y el :ref:"
"`MultiMeshInstance <class_MultiMeshInstance>`. Aunque todos están "
"relacionados, tienen usos ligeramente diferentes."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:32
msgid ""
"Meshes and ArrayMeshes are resources that are drawn using a MeshInstance "
"node. Resources like Meshes and ArrayMeshes cannot be added to the scene "
"directly. A MeshInstance represents one instance of a mesh in your scene. "
"You can reuse a single mesh in multiple MeshInstances to draw it in "
"different parts of your scene with different materials or transformations "
"(scale, rotation, position etc.)."
msgstr ""
"Meshes y ArrayMeshes son recursos que se dibujan usando un nodo de "
"MeshInstance. Recursos como Meshes y ArrayMeshes no pueden ser añadidos a la "
"escena directamente. Un MeshInstance representa una instancia de un mesh en "
"tu escena. Puedes reutilizar una solo mesh en múltiples MeshInstance para "
"que se dibuje en diferentes partes de tu escena con diferentes materiales o "
"transformaciones (escala, rotación, posición, etc.)."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:38
msgid ""
"If you are going to draw the same object many times, it can be helpful to "
"use a MultiMesh with a MultiMeshInstance. The MultiMeshInstance draws meshes "
"thousands of times very cheaply. It takes advantage of hardware instancing "
"in order to do so. The drawback with using a MultiMeshInstance is that you "
"are limited to one material for all instances. It uses an instance array to "
"store different colors and transformations for each instance, but all the "
"instances use the same material."
msgstr ""
"Si vas a dibujar el mismo objeto muchas veces, puede ser útil usar una "
"MultiMesh con una MultiMeshInstance. La MultiMeshInstance dibuja mallas "
"miles de veces muy asequibles. Se aprovecha de la instanciación del hardware "
"para hacerlo. El inconveniente de usar una MultiMeshInstance es que se "
"limita a un material para todas las instancias. Utiliza un array de "
"instancias para almacenar diferentes colores y transformaciones para cada "
"instancia, pero todas las instancias utilizan el mismo material."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:46
msgid "What a Mesh is"
msgstr "Qué es una Mesh"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:48
msgid ""
"A Mesh is composed of one or more surfaces. A surface is an array composed "
"of multiple sub-arrays containing vertices, normals, UVs, etc. Normally the "
"process of constructing surfaces and meshes is hidden from the user in the :"
"ref:`VisualServer <class_VisualServer>`, but with ArrayMeshes, the user can "
"construct a Mesh manually by passing in an array containing the surface "
"information."
msgstr ""
"Un Mesh está compuesto de una o más caras. Una cara es un conjunto compuesto "
"de múltiples sub-arrays que contienen vértices, normales, UVs, etc. "
"Normalmente el proceso de construcción de superficies y mallas está oculto "
"para el usuario en el :ref:`VisualServer <class_VisualServer>`, pero con "
"ArrayMeshes, el usuario puede construir una Mesh manualmente pasando un "
"array que contiene la información de la superficie."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:54
msgid "Surfaces"
msgstr "Caras"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:56
msgid ""
"Each surface has its own material. Alternatively, you can override the "
"material for all surfaces in the Mesh when you use a MeshInstance using "
"``MeshInstance.override_material``."
msgstr ""
"Cada superficie tiene su propio material. También puedes anular el material "
"para todas las superficies del Mesh cuando utilices una MeshInstance usando "
"``MeshInstance.override_material``."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:60
msgid "Surface array"
msgstr "Array de las caras"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:62
msgid ""
"The surface array is an array of length ``ArrayMesh.ARRAY_MAX``. Each "
"position in the array is filled with a sub-array containing per-vertex "
"information. For example, the array located at ``ArrayMesh.ARRAY_NORMAL`` is "
"a :ref:`PoolVector3Array <class_PoolVector3Array>` of vertex normals."
msgstr ""
"El array de superficie es un array de longitud ``ArrayMesh.ARRAY_MAX``. Cada "
"posición en el array está llena de un sub-array que contiene información por "
"vértice. Por ejemplo, el array situado en ``ArrayMesh.ARRAY_NORMAL`` es un :"
"ref:`PoolVector3Array <class_PoolVector3Array>` de vértices normales."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:66
msgid ""
"The surface array can be indexed or non-indexed. Creating a non-indexed "
"array is as easy as not assigning an array at the index ``ArrayMesh."
"ARRAY_INDEX``. A non-indexed array stores unique vertex information for "
"every triangle, meaning that when two triangle share a vertex, the vertex is "
"duplicated in the array. An indexed surface array only stores vertex "
"information for each unique vertex and then also stores an array of indices "
"which maps out how to construct the triangles from the vertex array. In "
"general, using an indexed array is faster, but it means you have to share "
"vertex data between triangles, which is not always desired (e.g. when you "
"want per-face normals)."
msgstr ""
"El array de superficie puede ser indexado o no indexado. Crear un array no "
"indexado es tan fácil como no asignar un array en el índice ``ArrayMesh."
"ARRAY_INDEX``. Un array no indexado almacena información única de vértices "
"para cada triángulo, lo que significa que cuando dos triángulos comparten un "
"vértice, el vértice se duplica en el array. Un array con superficie indexada "
"sólo almacena información de vértices para cada vértice único y luego "
"también almacena un array de índices que traza el mapa de cómo construir los "
"triángulos a partir del array de vértices. En general, el uso de un array "
"indexado es más rápido, pero significa que hay que compartir los datos de "
"vértices entre los triángulos, lo que no siempre es deseado (por ejemplo, "
"cuando se quieren utilizar normales por cara)."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:75
msgid "Tools"
msgstr "Herramientas"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:77
msgid ""
"Godot provides different ways of accessing and working with geometry. More "
"information on each will be provided in the following tutorials."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:81
msgid "ArrayMesh"
msgstr "ArrayMesh"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:83
msgid ""
"The ArrayMesh resource extends Mesh to add a few different quality of life "
"functions, and most importantly, the ability to construct a Mesh surface "
"through scripting."
msgstr ""
"El recurso ArrayMesh extiende el Mesh para añadir unas cuantas funciones "
"diferentes de calidad de vida, y lo más importante, la capacidad de "
"construir una superficie de Mesh a través de scripts."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:86
msgid ""
"For more information about the ArrayMesh, please see the :ref:`ArrayMesh "
"tutorial <doc_arraymesh>`."
msgstr ""
"Para más información sobre ArrayMesh, lee :ref:`ArrayMesh tutorial "
"<doc_arraymesh>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:89
msgid "MeshDataTool"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:91
msgid ""
"The MeshDataTool is a resource that converts Mesh data into arrays of "
"vertices, faces, and edges that can be modified at runtime."
msgstr ""
"El MeshDataTool es un recurso que convierte los datos del Mesh en arrays de "
"vértices, caras y bordes que pueden ser modificados en tiempo de ejecución."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:94
msgid ""
"For more information about the MeshDataTool, please see the :ref:"
"`MeshDataTool tutorial <doc_meshdatatool>`."
msgstr ""
"Para más información sobre MeshDataTool, lee :ref:`MeshDataTool tutorial "
"<doc_meshdatatool>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:97
msgid "SurfaceTool"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:99
msgid ""
"The SurfaceTool allows the creation of Meshes using an OpenGL 1.x immediate "
"mode style interface."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:101
msgid ""
"For more information about the SurfaceTool, please see the :ref:`SurfaceTool "
"tutorial <doc_surfacetool>`."
msgstr ""
"Para más información sobre SurfaceTool, por favor lee el :ref:`SurfaceTool "
"tutorial <doc_surfacetool>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:104
msgid "ImmediateGeometry"
msgstr "ImmediateGeometry"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:106
msgid ""
"ImmediateGeometry is a node that uses an immediate mode style interface "
"(like SurfaceTool) to draw objects. The difference between ImmediateGeometry "
"and the SurfaceTool is that ImmediateGeometry is a node itself that can be "
"added to the scene tree and is drawn directly from the code. The SurfaceTool "
"generates a Mesh that needs to be added a MeshInstance to be seen."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:111
msgid ""
"ImmediateGeometry is useful for prototyping because of the straightforward "
"API, but it is slow because the geometry is rebuilt every frame. It is most "
"useful for quickly adding simple geometry to debug visually (e.g. by drawing "
"lines to visualize physics raycasts etc.)."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:115
msgid ""
"For more information about ImmediateGeometry, please see the :ref:"
"`ImmediateGeometry tutorial <doc_immediategeometry>`."
msgstr ""
"Para más información sobre ImmediateGeometry, por favor lee el :ref:"
"`ImmediateGeometry tutorial <doc_immediategeometry>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:118
msgid "Which one should I use?"
msgstr "¿Cuál método debería usar?"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:120
msgid ""
"Which method you use depends on what you are trying to do and what kind of "
"procedure you are comfortable with."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:122
msgid ""
"Both SurfaceTool and ArrayMesh are excellent for generating static geometry "
"(meshes) that don't change over time."
msgstr ""
"Tanto SurfaceTool como ArrayMesh son excelentes para generar geometría "
"estática (meshes) que no cambian con el tiempo."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:124
msgid ""
"Using an ArrayMesh is slightly faster than using a SurfaceTool, but the API "
"is more a little more challenging. Additionally, SurfaceTool has a few "
"quality of life methods such as ``generate_normals()`` and ``index()``."
msgstr ""
"Usar un ArrayMesh es ligeramente más rápido que usar una SurfaceTool, pero "
"la API es más desafiante. Además, SurfaceTool tiene algunos métodos de "
"calidad de vida como ``generate_normals()`` e ``index()``."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:127
msgid ""
"ImmediateGeometry regenerates the mesh every frame, so it is much slower "
"than ArrayMesh or SurfaceTool. However, if you need the geometry to change "
"every frame anyway it provides a much easier interface that may even be a "
"little faster than generating an ArrayMesh every frame."
msgstr ""
"ImmediateGeometry regenera el mesh en cada cuadro, por lo que es mucho más "
"lento que ArrayMesh o SurfaceTool. Sin embargo, si necesitas que la "
"geometría cambie cada cuadro igualmente, proporciona una interfaz mucho más "
"fácil que puede ser incluso un poco más rápida que la generación de un "
"ArrayMesh en cada cuadro."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:131
msgid ""
"The MeshDataTool is not fast, but it gives you access to all kinds of "
"properties of the mesh that you don't get with the others (edges, faces, "
"etc.). It is incredibly useful when you need that sort of data to transform "
"the mesh, but it is not a good idea to use if that information is not "
"needed. The MeshDataTool is best used if you are going to be using an "
"algorithm that requires access to the face or edge array."
msgstr ""
"El MeshDataTool no es rápido, pero te da acceso a todo tipo de propiedades "
"del mesh que no consigues con los otros (bordes, caras, etc.). Es "
"increíblemente útil cuando se necesita ese tipo de datos para transformar la "
"malla, pero no es una buena idea utilizarlo si esa información no es "
"necesaria. El MeshDataTool se utiliza mejor si se va a utilizar un algoritmo "
"que requiere el acceso al array de caras o bordes."
