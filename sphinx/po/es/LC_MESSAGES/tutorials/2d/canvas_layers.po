# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-01 14:18+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/canvas_layers.rst:4
msgid "Canvas layers"
msgstr "Canvas layers"

#: ../../docs/tutorials/2d/canvas_layers.rst:7
msgid "Viewport and Canvas items"
msgstr "Viewport y Canvas items"

#: ../../docs/tutorials/2d/canvas_layers.rst:9
msgid ""
"Regular 2D nodes, such as :ref:`Node2D <class_Node2D>` or :ref:`Control "
"<class_Control>` both inherit from :ref:`CanvasItem <class_CanvasItem>`, "
"which is the base for all 2D nodes. CanvasItems can be arranged in trees and "
"they will inherit their transform. This means that when moving the parent, "
"the children will be moved too."
msgstr ""
"Los nodos 2D comunes, como :ref:`Node2D <class_Node2D>` o :ref:`Control "
"<class_Control>` heredan ambos de :ref:`CanvasItem <class_CanvasItem>`, que "
"es la base de todos los nodos 2D. Los CanvasItems se pueden organizar en "
"árboles y heredarán su transformación. Esto significa que al mover al padre, "
"los hijos también se moverán."

#: ../../docs/tutorials/2d/canvas_layers.rst:16
msgid ""
"These nodes are placed as direct or indirect children of a :ref:`Viewport "
"<class_Viewport>`, and will be displayed through it."
msgstr ""
"Esos nodos son situados directa o indirectamente como hijos de un :ref:"
"`Viewport <class_Viewport>`, y son mostrados en pantalla por este."

#: ../../docs/tutorials/2d/canvas_layers.rst:19
msgid ""
"Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, which allows to transform all "
"the CanvasItem hierarchy by a custom :ref:`Transform2D <class_Transform2D>` "
"transform. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""
"El nodo Viewport tiene la propiedad :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, que permite modificar toda la "
"jerarquía de CanvasItem mediante una matriz de transformación :ref:"
"`Transform2D <class_Transform2D>`. Nodos como :ref:`Camera2D "
"<class_Camera2D>`, funcionan cambiando esa transformación."

#: ../../docs/tutorials/2d/canvas_layers.rst:25
msgid ""
"Changing the canvas transform is useful because it is a lot more efficient "
"than moving the root canvas item (and hence the whole scene). Canvas "
"transform is a simple matrix that offsets the whole 2D drawing, so it's the "
"most efficient way to do scrolling."
msgstr ""
"Cambiar el canvas transform es útil porque es mucho más eficiente que mover "
"el elemento raíz del canvas (y por lo tanto toda la escena). Canvas "
"transform es una simple matriz que desplaza todo el trazado 2D, por lo que "
"es la forma más eficiente de hacer scrolling."

#: ../../docs/tutorials/2d/canvas_layers.rst:31
msgid "Not enough..."
msgstr "No es suficiente..."

#: ../../docs/tutorials/2d/canvas_layers.rst:33
msgid ""
"But this is not enough. There are often situations where the game or "
"application may not want *everything* transformed by the canvas transform. "
"Examples of this are:"
msgstr ""
"Esto no es suficiente, hay situaciones donde el juego o la aplicación no "
"quiere que *todo* sea transformado por el canvas transform. Ejemplos de esto "
"son:"

#: ../../docs/tutorials/2d/canvas_layers.rst:37
msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr ""
"**Parallax Backgrounds**: Fondos que se mueven más lentamente que el resto "
"del escenario."

#: ../../docs/tutorials/2d/canvas_layers.rst:39
msgid ""
"**HUD**: Heads-up display, or user interface. If the world moves, the life "
"counter, score, etc. must stay static."
msgstr ""
"**HUD**: Heads-up Display, o interfaz de usuario. Si el mundo se mueve, el "
"contador de vida, la puntuación, etc. deben permanecer estáticos."

#: ../../docs/tutorials/2d/canvas_layers.rst:41
msgid ""
"**Transitions**: Effects used for transitions (fades, blends) may also want "
"it to remain at a fixed location."
msgstr ""
"**Transitions**: Efectos usados para transiciones (mezclas, "
"desvanecimientos) también deben permanecer en un lugar fijo."

#: ../../docs/tutorials/2d/canvas_layers.rst:44
msgid "How can these problems be solved in a single scene tree?"
msgstr ""
"¿Cómo se pueden resolver esos problemas desde un único árbol de escenas?"

#: ../../docs/tutorials/2d/canvas_layers.rst:47
msgid "CanvasLayers"
msgstr "CanvasLayers"

#: ../../docs/tutorials/2d/canvas_layers.rst:49
msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in-place while the world moves."
msgstr ""
"La respuesta es :ref:`CanvasLayer <class_CanvasLayer>`, que es un nodo que "
"añade una capa de renderizado 2D separada para todos sus hijos y nietos. Los "
"niños de Viewport dibujarán por defecto en la capa \"0\", mientras que "
"CanvasLayer dibujará en cualquier capa numérica. Las capas con un número "
"mayor se sortearán por encima de las capas con un número menor. CanvasLayers "
"también tienen su propia transformación, y no dependen de la transformación "
"de otras capas. Esto permite que la interfaz de usuario se fije en el lugar, "
"mientras el mundo se mueve."

#: ../../docs/tutorials/2d/canvas_layers.rst:58
msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""
"Un ejemplo de esto es la creación de un fondo parallax. Esto se puede hacer "
"con un CanvasLayer en la capa \"-1\". La pantalla con los puntos, el "
"contador de vida y el botón de pausa también se puede crear en la capa \"1\"."

#: ../../docs/tutorials/2d/canvas_layers.rst:62
msgid "Here's a diagram of how it looks:"
msgstr "Aquí hay un diagrama de cómo se ve:"

#: ../../docs/tutorials/2d/canvas_layers.rst:66
msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"Los nodos CanvasLayer son independientes del orden en el árbol y sólo "
"dependen del número de capa, así que pueden ser instanciados cuando y donde "
"sean necesarios."

#: ../../docs/tutorials/2d/canvas_layers.rst:70
msgid "Performance"
msgstr "Rendimiento"

#: ../../docs/tutorials/2d/canvas_layers.rst:72
msgid ""
"Even though there shouldn't be any performance limitation, it is not advised "
"to use excessive amount of layers to arrange drawing order of nodes. The "
"most optimal way will always be arranging them by tree order. 2d nodes also "
"have a property for controlling their drawing order (see :ref:`Node2D."
"z_index <class_Node2D_property_z_index>`)."
msgstr ""
"Aunque no debería existir ninguna limitación de desempeño, no es "
"recomendable utilizar una cantidad excesiva de capas para organizar el orden "
"de dibujado de nodos. El modo óptimo es acomodarlos por orden en el árbol. "
"Los nodos 2D tienen una propiedad para controlar el orden en que son "
"dibujados en pantalla (ver :ref:`Node2D.z_index "
"<class_Node2D_property_z_index>`)."
