# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/canvas_layers.rst:4
msgid "Canvas layers"
msgstr "Canvas layers"

#: ../../docs/tutorials/2d/canvas_layers.rst:7
msgid "Viewport and Canvas items"
msgstr "Viewport y Canvas items"

#: ../../docs/tutorials/2d/canvas_layers.rst:9
msgid ""
"Regular 2D nodes, such as :ref:`Node2D <class_Node2D>` or :ref:`Control "
"<class_Control>` both inherit from :ref:`CanvasItem <class_CanvasItem>`, "
"which is the base for all 2D nodes. CanvasItems can be arranged in trees. "
"Each item will inherit its parent's transform. This means that when the "
"parent is moved, the children will move too."
msgstr ""
"Los nodos 2D comunes, como :ref:`Node2D <class_Node2D>` o :ref:`Control "
"<class_Control>` heredan ambos de :ref:`CanvasItem <class_CanvasItem>`, que "
"es la base de todos los nodos 2D. Los CanvasItems se pueden organizar en "
"árboles y heredarán su transformación. Esto significa que al mover al padre, "
"los hijos también se moverán."

#: ../../docs/tutorials/2d/canvas_layers.rst:16
msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, and will be displayed "
"through it."
msgstr ""
"Los nodos CanvasItem y todos los que heredan de ellos, son directa o "
"indirectamente hijos de un :ref:`Viewport <class_Viewport>`, y son mostrados "
"en pantalla por este."

#: ../../docs/tutorials/2d/canvas_layers.rst:19
msgid ""
"A Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, which allows applying a custom :"
"ref:`Transform2D <class_Transform2D>` transform to the CanvasItem hierarchy "
"it contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""
"El nodo Viewport tiene la propiedad :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, la que permite aplicar una "
"matriz de transformación :ref:`Transform2D <class_Transform2D>` "
"personalizada para modificar la jerarquía de CanvasItem que contiene. Nodos "
"como :ref:`Camera2D <class_Camera2D>`, funcionan cambiando esa "
"transformación."

#: ../../docs/tutorials/2d/canvas_layers.rst:25
msgid ""
"Effects like scrolling are best achieved by manipulating the canvas "
"transform property. This approach is more efficient than moving the root "
"canvas item (and hence the whole scene)."
msgstr ""
"Efectos como scrolling, se pueden lograr manipulando la propiedad canvas "
"transform. Este modo es más eficiente que mover la el canvas item raíz (y "
"por ende, toda la escena)."

#: ../../docs/tutorials/2d/canvas_layers.rst:28
msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. Examples of this are:"
msgstr ""
"Normalmente no queremos que *todo* el juego o aplicación sea sujeto a los "
"cambios en el transform del canvas. Ejemplos de esto son:"

#: ../../docs/tutorials/2d/canvas_layers.rst:31
msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr ""
"**Parallax Backgrounds**: Fondos que se mueven más lentamente que el resto "
"del escenario."

#: ../../docs/tutorials/2d/canvas_layers.rst:33
msgid ""
"**UI**: Think of a user interface (UI) or Heads-up display (HUD) "
"superimposed on our view of the game world. We want a life counter, score "
"display and other elements to retain their screen positions even when our "
"view of the game world is changing."
msgstr ""
"**UI**: Piensa en una interfaz de usuario (UI) o Heads-up display (HUD, "
"proyección elevada de información) superpuesta en nuestra vista de juego. "
"Queremos un contador de vida, contador de puntos y otros elementos que "
"tienen que manter su posición mientras la vista del mundo del juego cambia."

#: ../../docs/tutorials/2d/canvas_layers.rst:34
msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""
"**Transiciones**: Podríamos preferir que efectos usados para transiciones "
"(mezclas, desvanecimientos) se mantengan en un lugar fijo de la pantalla."

#: ../../docs/tutorials/2d/canvas_layers.rst:36
msgid "How can these problems be solved in a single scene tree?"
msgstr ""
"¿Cómo se pueden resolver esos problemas desde un único árbol de escenas?"

#: ../../docs/tutorials/2d/canvas_layers.rst:39
msgid "CanvasLayers"
msgstr "CanvasLayers"

#: ../../docs/tutorials/2d/canvas_layers.rst:41
msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""
"La solución es la :ref:`CanvasLayer <class_CanvasLayer>`, que es un nodo que "
"añade una capa de renderizado 2D separada para todos sus nodos hijos y "
"descendientes. Los hijos de Viewport dibujarán por defecto en la capa \"0\", "
"mientras que CanvasLayer dibujará en cualquier capa numérica. Las capas con "
"un número mayor se dibujarán por encima de las capas con un número menor. "
"CanvasLayers también tienen su propia transformación, y no dependen de la "
"transformación de otras capas. Esto permite que la interfaz de usuario se "
"fije en el lugar mientras se cambia la vista del mundo del juego."

#: ../../docs/tutorials/2d/canvas_layers.rst:50
msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""
"Un ejemplo de esto es la creación de un fondo parallax. Esto se puede hacer "
"con un CanvasLayer en la capa \"-1\". La pantalla con los puntos, el "
"contador de vida y el botón de pausa también se puede crear en la capa \"1\"."

#: ../../docs/tutorials/2d/canvas_layers.rst:54
msgid "Here's a diagram of how it looks:"
msgstr "Aquí hay un diagrama de cómo se ve:"

#: ../../docs/tutorials/2d/canvas_layers.rst:58
msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"Los nodos CanvasLayer son independientes del orden en el árbol y sólo "
"dependen del número de capa, así que pueden ser instanciados cuando y donde "
"sean necesarios."

#: ../../docs/tutorials/2d/canvas_layers.rst:61
msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is  correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2d nodes also have a property for "
"controlling their drawing order (see :ref:`Node2D.z_index "
"<class_Node2D_property_z_index>`)."
msgstr ""
"Las CanvasLayers no están necesariamente para controlar el orden de dibujado "
"de los nodos. El modo normal de asegurar que un nodo es dibujado "
"correctamente 'al frente' o 'detrás' otros, es manipulando el orden de los "
"nodos en el panel de escena. Los nodos más arriba en el panel de escena, son "
"dibujados *detrás* de los que están más abajo en el viewport. Nodos 2D "
"también tienen la propiedad de controlar el orden de dibujado (ver :ref:"
"`Node2D.z_index <class_Node2D_property_z_index>`)."
