# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-17 12:25+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:4
msgid "Static typing in GDScript"
msgstr "Tipado estático en GDScript"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:6
msgid "In this guide, you will learn:"
msgstr "En esta guía aprenderás:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:8
msgid "**How to use types in GDScript**"
msgstr "**Cómo usar tipos en GDScript**"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:9
msgid "That **static types can help you avoid bugs**"
msgstr "Que **los tipos estáticos pueden ayudarte a evitar errores**"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:11
msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"El lugar y la forma en que use esta nueva funcionalidad de idioma depende "
"totalmente de usted: ¡puede usarla solo en algunos archivos GDScript "
"confidenciales, usarla en todas partes o escribir código como siempre lo "
"hizo!"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:15
msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Los tipos estáticos se pueden usar en variables, constantes, funciones, "
"parámetros y tipos de retorno."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:20
msgid "Typed GDScript is available since Godot 3.1."
msgstr "GDScript de tipado estático está disponible desde Godot 3.1."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:23
msgid "A brief look at static typing"
msgstr "Un breve vistazo a los tipos estáticos"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:25
msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you’re working, as the "
"arguments’ types show up when you call a method."
msgstr ""
"¡Con GDScript de tipado estático, Godot puede detectar aún más errores "
"mientras escribes código! Te da a ti y a tus compañeros de equipo más "
"información mientras trabajas, ya que los tipos de argumentos aparecen "
"cuando llamas a un método."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:29
msgid ""
"Imagine you’re programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"Imagina que estás programando un sistema de inventario. Codificas un nodo "
"``Item``, luego un nodo ``Inventory``. Para agregar artículos al inventario, "
"las personas que trabajan con su código siempre deben pasar un ``Item`` al "
"método `` Inventory.add``. Con los tipos, puedes hacer cumplir esto:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:48
msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"Otra ventaja significativa de GDScript de tipado estático es el nuevo ** "
"sistema de advertencia **. A partir de la versión 3.1, Godot le advierte "
"sobre su código a medida que lo escribe: el motor identifica las secciones "
"de su código que pueden provocar problemas en el tiempo de ejecución, pero "
"le permite decidir si desea dejar el código como está. Más sobre esto en un "
"momento."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:54
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"Los tipos estáticos también le dan mejores opciones de finalización del "
"código. A continuación, puedes ver la diferencia entre las opciones de "
"finalización de tipo dinámico y estático para una clase llamada "
"``PlayerController``."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:58
msgid ""
"You’ve probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"Probablemente haya almacenado un nodo en una variable anteriormente y "
"escrito un punto para dejarlo sin sugerencias de autocompletado:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:64
msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you’re passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"Esto se debe al código dinámico. Godot no puede saber qué tipo de nodo o "
"valor está pasando a la función. Sin embargo, si escribe el tipo "
"explícitamente, obtendrás todos los métodos y variables públicos del nodo:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:71
msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"En el futuro, GDScript de tipado estático también aumentará el rendimiento "
"del código: ¡la compilación Just-In-Time y otras mejoras del compilador ya "
"están en la hoja de ruta!"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:75
msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you’re working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people’s code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"En general, la programación de tipado estático le brinda una experiencia más "
"estructurada. Ayuda a prevenir errores y mejora el aspecto de "
"autodocumentación de sus scripts. Esto es especialmente útil cuando trabajas "
"en equipo o en un proyecto a largo plazo: los estudios han demostrado que "
"los desarrolladores dedican la mayor parte de su tiempo a leer el código de "
"otras personas o los scripts que escribieron en el pasado y olvidaron. "
"Cuanto más claro y más estructurado sea el código, más rápido será de "
"entender, más rápido podrá avanzar."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:84
msgid "How to use static typing"
msgstr "Cómo utilizar tipos estáticos"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:86
msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable’s name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"Para definir el tipo de una variable o una constante, escriba dos puntos "
"después del nombre de la variable, seguido de su tipo. P.ej. ``var health: "
"int``. Esto obliga al tipo de variable a permanecer siempre igual:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:95
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""
"Godot intentará inferir tipos si escribe dos puntos, pero puedes omitirlo:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:104
msgid "Currently you can use three types of… types:"
msgstr "Actualmente puedes usar tres tipos de ... tipos:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:106
msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`Integrados <doc_gdscript_builtin_types>`"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:107
msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""
"Clases principales y nodos (``Object``, ``Node``, ``Area2D``, ``Camera2D``, "
"etc.)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:109
msgid ""
"Your own, custom classes. Look at the new :ref:`class_name "
"<doc_scripting_continued_class_name>` feature to register types in the "
"editor."
msgstr ""
"Tu propio tipos, clases personalizadas. Observa la nueva funcionalidad :ref:"
"`class_name <doc_scripting_continued_class_name>` para registrar tipos en el "
"editor."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:114
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"No necesitas escribir sugerencias de tipo para constantes, ya que Godot lo "
"establece automáticamente a partir del valor asignado. Pero aún puede "
"hacerlo para aclarar la intención de su código."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:117
msgid "Custom variable types"
msgstr "Tipos personalizados"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:119
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"Puedes utilizar cualquier clase, incluidas sus clases personalizadas, como "
"tipos. Hay dos formas de usarlos en scripts. El primer método es precargar "
"el script que desea utilizar como un tipo en una constante:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:128
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""
"El segundo método es usando la palabra clave ``class_name`` cuando lo creas. "
"Para el ejemplo anterior, tu Rifle.gd se vería así:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:136
msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""
"Si usas ``class_name``, Godot registrará el tipo Rifle globalmente en el "
"editor y lo podrás usar en cualquier parte, sin tener que precargarlo en una "
"constante:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:145
msgid "Variable casting"
msgstr "Conversión de variables (casting)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:147
msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""
"Casting es un concepto clave en lenguajes tipados, es la conversión de un "
"valor de un tipo a otro."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:150
msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Imagina un Enemy en tu juego, que extiende de ``Area2D``. Y quieres que "
"colisione con el Player, un ``KinematicBody2D`` con un script asociado "
"llamado ``PlayerController``. Usarás la señal ``on_body_entered`` para "
"detectar la colisión. Con el código tipado, el cuerpo detectado será de un "
"tipo genérico ``PhysicsBody2D`` y no tu ``PlayerController``, en el callback "
"de ``_on_body_entered``."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:157
msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""
"Puedes comprobar si ``PhysicsBody2D`` es tu Jugador con la palabra clave de "
"conversión ``as`` y usando ``:`` para forzar a la variable a usar este tipo. "
"Esto hace que la variable se asuma como del tipo ``PlayerController``:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:170
msgid ""
"As we’re dealing with a custom type, if the ``body`` doesn’t extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Como estamos lidiando con tipos personalizados, si el ``cuerpo`` no extiende "
"``PlayerControler, la variable ``Player`` será null. Podemos usar esto para "
"saber si el cuerpo es Player o no. Tambi'en tendremos mejor autocompletado "
"en la variable Player gracias a la conversión."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:177
msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Si intentas convertir a un tipo integrado y falla, Godot disparará un error."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:180
msgid "Safe lines"
msgstr "Líneas seguras"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:182
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn’t have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"Puedes usar casting para asegurarte de tener líneas de código seguras. Las "
"líneas seguras son una nueva herramienta de Godot 3.1 que indican cuando "
"líneas ambiguas de código son de tipado seguro (type-safe). Puedes mezclar "
"codigo dinámico y tipado y a veces Godot no tendrá información suficiente "
"para indicar si la instrucción resultará o no en un error en tiempo de "
"ejecución."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:188
msgid ""
"This happens when you get a child node. Let’s take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don’t care about the "
"node’s type as long as it has the methods you need to call."
msgstr ""
"Esto sucede cuando obtienes un nodo hijo. Tomemos un temporizador (timer) "
"como ejemplo: con código dinámico obtendrás el nodo con ``$Timer``. GDScript "
"soporta lo comunmente llamado `duck-typing https://es.wikipedia.org/wiki/"
"Duck_typing`, así que mientras tu temporizador es de tipo ``Timer``, también "
"es un ``Node`` y un ``Object``, las dos clases de las cual extiende. Con "
"GDScript dinámico no deberá importarte de qué tipo es el nodo mientras tenga "
"los métodos que necesites llamar."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:196
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Puedes usar casting para decirle a Godot el tipo que esperas cuando obtienes "
"un nodo: ``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot "
"se asegurará de que el tipo es correcto y en ese caso, la línea se marcará "
"de verde a la izquierda del editor de script."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:204
msgid "Safe vs Unsafe Line"
msgstr "Lineas seguras vs inseguras"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:208
msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Puedes apagar el chequeo de líneas seguras (safe lines) o cambiar el color "
"en los ajustes del editor."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:211
msgid "Define the return type of a function with the arrow ->"
msgstr "Define el tipo de retorno de una función con la flecha ->"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:213
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""
"Para definir el tipo de retorno de una función, escribe un guion y un "
"símbolo mayor que ``->`` después de su declaración, seguido del tipo de "
"retorno:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:221
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""
"El tipo ``void`` significa que la función no retorna nada. Puedes usar "
"cualquier tipo como con las variables:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:230
msgid "You can also use your own nodes as return types:"
msgstr "También puedes usar tus propios nodos como tipos de retorno:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:245
msgid "Typed or dynamic: stick to one style"
msgstr "Tipado estático o dinámico: apégate a un estilo"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:247
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But I "
"recommended to stick to either style for consistency in your codebase, and "
"for your peers. It’s easier for everyone to work together if you follow the "
"same guidelines, and faster to read and understand other people’s code."
msgstr ""
"GDScript de tipado estático y GDScript de tipado dinámico pueden coexistir "
"en el mismo proyecto. Pero recomendé seguir cualquiera de los dos estilos "
"para mantener la coherencia en la base de código y para tus compañeros. Es "
"más fácil para todos trabajar juntos si sigue las mismas pautas, y más "
"rápido para leer y comprender el código de otras personas."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:253
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here’s an example of the same, empty script, in a dynamic "
"style:"
msgstr ""
"El código tipado lleva más tiempo para escribir, pero tiene el beneficio que "
"se mencionó anteriormente. Aquí hay un ejemplo del mismo script vacío en un "
"estilo dinámico:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:265
msgid "And with static typing:"
msgstr "Y con tipado estático:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:275
msgid ""
"As you can see, you can also use types with the engine’s virtual methods. "
"Signal callbacks, like any methods, can also use types. Here’s a "
"``body_entered`` signal in a dynamic style:"
msgstr ""
"Como puedes ver, se pueden usar tipos con métodos virtuales del motor. "
"Callbacks de señales, como cualquier otro método, también pueden usar tipos. "
"Aquí hay una señal ``body_entered`` con tipado dinámico:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:284
msgid "And the same callback, with type hints:"
msgstr "Y el mismo callback con tipos especificados:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:291
msgid ""
"You’re free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""
"Eres libre de reemplazar, por ejemplo, el ``CollisionObject2D``, con tu "
"propio tipo, para establecer parámetros automáticamente:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:301
msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it’s "
"anything else, like an ``Area2D``, or any node that doesn’t extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""
"La variable ``bullet`` puede contener cualquier ``CollisionObject2D`` pero "
"nos aseguraremos de que sea nuestro ``Bullet``, un nodo que creamos para "
"nuestro proyecto. Si es cualquier otra cosa, como un ``Area2D`` o cualquier "
"otro que no extienda de ``Bullet``, la variable ``bullet`` será ``null``."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:307
msgid "Warning system"
msgstr "Sistema de advertencias"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:309
msgid ""
"The warning system complements typed GDScript. It’s here to help you avoid "
"mistakes that are hard to spot during development, and that may lead to "
"runtime errors."
msgstr ""
"El sistema de advertencias complementa el GDScript tipado. Está allí para "
"ayudar a evitar errores que son difíciles de ver durante el desarrollo y que "
"pueden llevar a errores en tiempo de ejecución."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:313
msgid ""
"You can configure warnings in the Project Settings under a new section "
"called ``GDScript``:"
msgstr ""
"Puedes configurar las advertencias (warnings) en los ajustes de proyecto en "
"una nueva sección llamada ``GDScript``:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:319
msgid "warning system project settings"
msgstr "Sistema de advertencias en Ajustes del Proyecto"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:321
msgid ""
"You can find a list of warnings for the active GDScript file in the script "
"editor’s status bar. The example below has 3 warnings:"
msgstr ""
"Encontrarás una lista de advertencias para el archivo GDScript actual en la "
"barra de estado del editor de script. El siguiente ejemplo tiene 3 "
"advertencias:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:327
msgid "warning system example"
msgstr "Ejemplo del sistema de advertencias"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:329
msgid ""
"To ignore specific warnings in one file, insert a special comment of the "
"form ``#warning-ignore:warning-id``, or click on the ignore link to the "
"right of the warning’s description. Godot will add a comment above the "
"corresponding line and the code won’t trigger the corresponding warning "
"anymore:"
msgstr ""
"Para ignorar advertencias específicas en un archivo, inserta un comentario "
"especial en el formulario ``#warning-ignore:warning-id``, o haz clic en el "
"enlace ignorar a la derecha de la descripción de la advertencia. Godot "
"añadirá un comentario sobre la línea correspondiente y el código ya no "
"activará la advertencia correspondiente:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:338
msgid "warning system ignore example"
msgstr "Ejemplo de ignorar advertencia"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:340
msgid ""
"Warnings won’t prevent the game from running, but you can turn them into "
"errors if you’d like. This way your game won’t compile unless you fix all "
"warnings. Head to the ``GDScript`` section of the Project Settings to turn "
"on this option. Here’s the same file as the previous example with warnings "
"as errors turned on:"
msgstr ""
"Las advertencias no van a prevenir que se ejecute el juego, pero las puedes "
"convertir en errores si quieres. De este modo tu juego no compilará hasta "
"que las hayas corregido a todas. Dirígete a la sección ``GDScript`` de los "
"Ajustes de Proyecto para habilitar esta opción. Aquí está el mismo ejemplo "
"anterior con advertencias convertidas a errores:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:349
msgid "warnings as errors"
msgstr "Advertencias como errores"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:352
msgid "Cases where you can’t specify types"
msgstr "Casos en los que no puedes especificar tipos"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:354
msgid ""
"To wrap up this introduction, let’s cover a few cases where you can’t use "
"type hints. All the examples below **will trigger errors**."
msgstr ""
"Para concluir con esta introducción, cubriremos algunos de los casos donde "
"no se puede usar tipado. Todos los ejemplos siguientes **generarán errores**."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:357
msgid "You can’t use Enums as types:"
msgstr "No puedes usar Enums como tipos:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:364
msgid ""
"You can’t specify the type of individual members in an array. This will give "
"you an error:"
msgstr ""
"No puedes especificar tipos de miembros individuales de un arreglo. Esto te "
"dará un error:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:371
msgid ""
"You can’t force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""
"No puedes forzar la asignación de tipos en un bucle ``for``, ya que cada "
"elemento de ``for`` se ejecuta con un tipo ya definido para el bucle. Así "
"que **no puedes** escribir:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:381
msgid "Two scripts can’t depend on each other in a cyclic fashion:"
msgstr "Dos scripts no pueden depender uno del otro de manera cíclica:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:400
msgid "Summary"
msgstr "Sumario"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:402
msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""
"GDScript tipado es una herremienta poderosa. Disponible desde la versión 3.1 "
"de Godot, ayuda a escribir código más estructurado, evitar errores comunes y "
"crear sistemas más escalables. En el futuro, tipos estáticos permitirán "
"mejorar el rendimiento gracias a optimizaciones del compilador."
