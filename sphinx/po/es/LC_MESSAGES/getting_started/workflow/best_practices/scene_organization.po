# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-21 13:40+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:4
msgid "Scene organization"
msgstr "Organización de la escena"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:6
msgid ""
"This article covers topics related to the effective organization of scene "
"content. Which nodes should one use? Where should one place them? How should "
"they interact?"
msgstr ""
"Este artículo cubre temas relacionados con la organización efectiva del "
"contenido de la escena. ¿Qué nodos se deben utilizar? ¿Dónde hay que "
"colocarlos? ¿Cómo deberían interactuar?"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:11
msgid "How to build relationships effectively"
msgstr "Cómo crear relaciones de manera eficiente"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:13
msgid ""
"When Godot users begin crafting their own scenes, they often run into the "
"following problem:"
msgstr ""
"Cuando los usuarios de Godot comienzan a crear sus propias escenas, "
"normalmente se encuentran con el siguiente problema:"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:16
msgid ""
"They create their first scene and fill it with content before the creeping "
"sense that they need to split it up into re-usable pieces haunts them. They "
"save branches of their scene into their own scene. However, they then notice "
"that the hard references they were able to rely on before are no longer "
"possible. Re-using the scene in multiple places creates issues because the "
"node paths do not find their targets. Signal connections established in the "
"editor break."
msgstr ""
"Crean la primer escena y la llenan con contenido antes de que aparezca la "
"sensación de que deberían dividirla en partes reusables. Luego guardan las "
"ramas de su escena en sus propias escenas. Sin embargo, notan que las "
"referencias rígidas de las que dependían, ya no son posibles de usar. "
"Reutilizar la escena en muchos lugares genera problemas porque los paths de "
"los nodos no llegan a su destino y las señales creadas en el editor se "
"rompen."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:24
msgid ""
"To fix these problems, one must instantiate the sub-scenes without them "
"requiring details about their environment. One needs to be able to trust "
"that the sub-scene will create itself without being picky about how one uses "
"it."
msgstr ""
"Para solucionar esos problemas, uno debe instanciar las sub escenas sin que "
"estas requieran detalles de su entorno. Uno debe ser capaz de confiar de que "
"la sub escena se creará a sí misma sin ser exigente respecto a quién la usa."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:29
msgid ""
"One of the biggest things to consider in OOP is maintaining focused, "
"singular-purpose classes with `loose coupling <https://en.wikipedia.org/wiki/"
"Loose_coupling>`_ to other parts of the codebase. This keeps the size of "
"objects small (for maintainability) and improves their reusability so that "
"re-writing completed logic is unnecessary."
msgstr ""
"Una de las mayores cosas a considerar en POO es mantener clases enfocadas, "
"de propósito simple, con vínculos no estrictos (`loose coupling <https://en."
"wikipedia.org/wiki/Loose_coupling>`_ ) respecto a otras partes del proyecto. "
"Esto mantiene pequeño el tamaño de los objetos (para facilitar el "
"mantenimiento) y mejora la reusabilidad de modo que sea innecesario "
"reescribir lógica no necesaria."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:36
msgid ""
"These OOP best practices have *several* ramifications for the best practices "
"in scene structure and script usage."
msgstr ""
"Estas buenas prácticas POO tienen *muchas* ramificaciones para buenas "
"prácticas en estructura de escenas y uso de scripts."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:39
msgid ""
"**If at all possible, one should design scenes to have no dependencies.** "
"That is, one should create scenes that keep everything they need within "
"themselves."
msgstr ""
"** Si es posible, las escenas deberían diseñarse para que no tengan "
"dependencias. ** O lo que es lo mismo, que mantengan todo lo que necesitan "
"dentro de sí mismas."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:43
msgid ""
"If a scene must interact with an external context, experienced developers "
"recommend the use of `Dependency Injection <https://en.wikipedia.org/wiki/"
"Dependency_injection>`_. This technique involves having a high-level API "
"provide the dependencies of the low-level API. Why do this? Because classes "
"which rely on their external environment can inadvertently trigger bugs and "
"unexpected behavior."
msgstr ""
"Si una escena debe interactuar en un contexto externo, los desarrolladores "
"experimentados recomiendan el uso de `Inyección de dependencias <https://es."
"wikipedia.org/wiki/Inyeccion_de_dependencias>`_. Esta técnica implica que "
"una API de alto nivel proporcione las dependencias de la API de bajo nivel. "
"¿Por qué hacer esto? Porque las clases que dependen de su entorno externo "
"pueden desencadenar errores y comportamientos inesperados sin darse cuenta."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:50
msgid ""
"To do this, one must expose data and then rely on a parent context to "
"initialize it:"
msgstr ""
"Para hacer esto, uno debe exponer datos y luego confiar en un contexto "
"principal para inicializarlos:"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:53
msgid ""
"Connect to a signal. Extremely safe, but should use only to \"respond\" to "
"behavior, not start it. Note that signal names are usually past-tense verbs "
"like \"entered\", \"skill_activated\", or \"item_collected\"."
msgstr ""
"Conectarse a una señal. Es extremadamente seguro, pero solo debe ser "
"utilizado como \"respuesta\" a un comportamiento, nunca para iniciarlo. "
"Notemos que los nombres de las señales normalmente están en tiempo pasado, "
"como por ejemplo \"entered\", \"skill_activate\" o \"item_collected\" ."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:74
msgid "Call a method. Used to start behavior."
msgstr "Llamar a un método. Usado para iniciar un comportamiento."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:93
msgid ""
"Initialize a :ref:`FuncRef <class_FuncRef>` property. Safer than a method as "
"ownership of the method is unnecessary. Used to start behavior."
msgstr ""
"Inicializar una propiedad :ref:`FuncRef <class_FuncRef>`. Es más seguro que "
"establecer un método como propiedad del método . Se utiliza para iniciar el "
"comportamiento."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:113
msgid "Initialize a Node or other Object reference."
msgstr "Inicializa un Nodo u otra referencia de Objeto."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:132
msgid "Initialize a NodePath."
msgstr "Inicializar un NodePath."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:151
msgid ""
"These options hide the source of accesses from the child node. This in turn "
"keeps the child **loosely coupled** to its environment. One can re-use it in "
"another context without any extra changes to its API."
msgstr ""
"Estas opciones ocultan la fuente de accesos del nodo hijo. Esto a su vez "
"mantiene al nodo hijo ** acoplado libremente ** a su entorno. Esto "
"permitiría reutilizarlo en otro contexto sin ningún cambio adicional en su "
"API."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:157
msgid ""
"Although the examples above illustrate parent-child relationships, the same "
"principles apply towards all object relations. Nodes which are siblings "
"should only be aware of their hierarchies while an ancestor mediates their "
"communications and references."
msgstr ""
"Aunque los ejemplos anteriores ilustran las relaciones padre-hijo, los "
"mismos principios aplican a todas las relaciones entre objetos. Los nodos "
"hermanos sólo deben percatarse de su jerarquía, mientras que sus ancestros "
"mediarán sus comuniaciones y referencias."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:204
msgid ""
"The same principles also apply to non-Node objects that maintain "
"dependencies on other objects. Whichever object actually owns the objects "
"should manage the relationships between them."
msgstr ""
"Los mismos principios también aplican a los objetos no-Nodos que mantengan "
"dependencias de otros objetos. Cualquiera sea el objeto al que pertenezcan "
"los objetos, deberá administrar las relaciones entre ellos."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:210
msgid ""
"One should favor keeping data in-house (internal to a scene) though as "
"placing a dependency on an external context, even a loosely coupled one, "
"still means that the node will expect something in its environment to be "
"true. The project's design philosophies should prevent this from happening. "
"If not, the code's inherent liabilities will force developers to use "
"documentation to keep track of object relations on a microscopic scale; this "
"is otherwise known as development hell. Writing code that relies on external "
"documentation for one to use it safely is error-prone by default."
msgstr ""
"Uno debería preferir mantener los datos internos a una escena, pues "
"establecer dependencias en contextos externos, incluso levemente, "
"significará que el Nodo esperará a que alguna condición en su contexto se "
"cumpla. La filosofía de diseño del proyecto debe prevenir que esto pase. De "
"lo contrario, las dependencias inherentes del código, forzará a los "
"desarrolladores a usar documentación para seguir el paso de las relaciones "
"entre objetos a escala microscópica; también conocido como \"Infierno de "
"desarrollo\". Escribir código que dependa de documentación externa para su "
"uso adecuado es propenso a errores por naturaleza."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:219
msgid ""
"To avoid creating and maintaining such documentation, one converts the "
"dependent node (\"child\" above) into a tool script that implements :ref:"
"`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>`. Returning a non-empty "
"string from it will make the Scene dock generate a warning icon with the "
"string as a tooltip by the node. This is the same icon that appears for "
"nodes such as the :ref:`Area2D <class_Area2D>` node when it has no child :"
"ref:`CollisionShape2D <class_CollisionShape2D>` nodes defined. The editor "
"then self-documents the scene through the script code. No content "
"duplication via documentation is necessary."
msgstr ""
"para evitar crear y mantener tal documentación, uno convierte el nodo "
"dependiente (arriba de \"child\") en una herramienta script que implementa: "
"ref:`_get_configuration_warning() "
"<class_Node_method__get_configuration_warning>. Regresando una cadena no "
"vacía de ello que hará a la ventana Escena generar un ícono de advertencia "
"con la cadena como una información por el nodo. Éste es el mismo icono que "
"aparece para nodos tal como el nodo: :ref:`Area2D <class_Area2D>` cuando no "
"tiene nodos descendientes :ref:`CollisionShape2D <class_CollisionShape2D>` "
"definidos. El editor entonces autodocumenta la escena através del código del "
"script. No es necesaria la duplicación de contenido a través de la "
"documentación."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:230
msgid ""
"A GUI like this can better inform project users of critical information "
"about a Node. Does it have external dependencies? Have those dependencies "
"been satisfied? Other programmers, and especially designers and writers, "
"will need clear instructions in the messages telling them what to do to "
"configure it."
msgstr ""
"Una GUI como esta puede informar mejor a los usuarios del proyecto sobre la "
"existencia de información crítica sobre un Nodo. ¿Tiene dependencias "
"externas? ¿se han satisfecho esas dependencias?. Otros programadores, y "
"especialmente los diseñadores y escritores, necesitarán instrucciones claras "
"en los mensajes que les indiquen qué hacer para configurarlo."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:235
msgid ""
"So, why do all this complex switcharoo work? Well, because scenes operate "
"best when they operate alone. If unable to work alone, then working with "
"others anonymously (with minimal hard dependencies, i.e. loose coupling). If "
"the inevitable changes made to a class cause it to interact with other "
"scenes in unforeseen ways, then things break down. A change to one class "
"could result in damaging effects to other classes."
msgstr ""
"¿Entonces, por qué todo esto funciona? Porque las escenas operan mejor "
"cuando trabajan solas. Si no son capaces de funcionar solas al menos "
"deberían intentar trabajar con otras de manera anónima (con mínimas "
"dependencias, bajo acoplamiento). Si los inevitables cambios hechos a una "
"clase resultan que interactúen con otras escenas en modos no previstos, "
"entonces las cosas se romperán. Un cambio a una clase puede resultar en "
"efectos dañinos a otras clases."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:242
msgid ""
"Scripts and scenes, as extensions of engine classes should abide by *all* "
"OOP principles. Examples include..."
msgstr ""
"Tanto scripts y escenas, como clases de extensión del motor, deben apegarse "
"a *todos* los principios POO. Ejemplos incluyen..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:245
msgid "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"
msgstr "`SOLID <https://es.wikipedia.org/wiki/SOLID>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:246
msgid "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"
msgstr "`DRY <https://es.wikipedia.org/wiki/No_te_repitas>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:247
msgid "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"
msgstr "`KISS <https://es.wikipedia.org/wiki/Principio_KISS>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:248
msgid "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"
msgstr "`YAGNI <https://es.wikipedia.org/wiki/YAGNI>`_"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:251
msgid "Choosing a node tree structure"
msgstr "Eligiendo una estructura de árbol de nodos"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:253
msgid ""
"So, a developer starts work on a game only to stop at the vast possibilities "
"before them. They might know what they want to do, what systems they want to "
"have, but *where* to put them all? Well, how one goes about making their "
"game is always up to them. One can construct node trees in a myriad of ways. "
"But, for those who are unsure, this helpful guide can give them a sample of "
"a decent structure to start with."
msgstr ""
"Un desarrollador comienza a trabajar en un juego, sólo para detenerse frente "
"a las vastas posibilidades que se le presentan. Tal vez sepa qué quiere "
"hacer, qué sistemas se usarán, ¿pero dónde ponerlos a todos?. Bueno, el modo "
"en que alguien hace los juegos es asunto propio. Uno puede construir árboles "
"de nodos de muchos modos. Pero para esos que no están seguros, esta guía "
"puede darles un ejemplo de una estructura decente con la cual comenzar."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:260
msgid ""
"A game should always have a sort of \"entry point\"; somewhere the developer "
"can definitively track where things begin so that they can follow the logic "
"as it continues elsewhere. This place also serves as a bird's eye view to "
"all of the other data and logic in the program. For traditional "
"applications, this would be the \"main\" function. In this case, it would be "
"a Main node."
msgstr ""
"Un juego debe tener siempre un \"punto de entrada\", en alguna parte el "
"desarrollador puede saber definitivamente dónde comienzan las cosas, así se "
"puede seguir la lógica mientras contiúa en alguna otra parte. Este lugar "
"también sirve punto de vista panorámico del resto de los datos y lógica del "
"programa. Para aplicaciones tradicionales, esto sería la función \"main\". "
"En este caso, podría ser el nodo Main."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:266
#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:277
msgid "Node \"Main\" (main.gd)"
msgstr "Nodo \"Main\" (main.gd)"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:268
msgid ""
"The ``main.gd`` script would then serve as the primary controller of one's "
"game."
msgstr ""
"El script ``main.gd`` debería servir como controlador primario del juego."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:271
msgid ""
"Then one has their actual in-game \"World\" (a 2D or 3D one). This can be a "
"child of Main. In addition, one will need a primary GUI for their game that "
"manages the various menus and widgets the project needs."
msgstr ""
"Luego, uno tiene el \"Mundo\" (2D o 3D) del juego. Esto puede ser un hijo de "
"Main. Adicionalmente, se puede necesitar una GUI primaria para el juego, que "
"maneje los menues y widgets que necesita el proyecto."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:276
msgid "Node2D/Spatial \"World\" (game_world.gd)"
msgstr "Node2D/Spatial \"World\" (game_world.gd)"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:277
msgid "Control \"GUI\" (gui.gd)"
msgstr "Control \"GUI\" (gui.gd)"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:279
msgid ""
"When changing levels, one can then swap out the children of the \"World\" "
"node. :ref:`Changing scenes manually <doc_change_scenes_manually>` gives "
"users full control over how their game world transitions."
msgstr ""
"Cuando se cambian los niveles, entonces se pueden intercambiar los hijos del "
"nodo \"World\". :ref:`Cambiar escenas manualmente "
"<doc_change_scenes_manually>` le da al usuario un mayor control sobre cómo "
"suceden las transiciones del juego."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:283
msgid ""
"The next step is to consider what gameplay systems one's project requires. "
"If one has a system that..."
msgstr ""
"El siguiente paso es considerar qué sistemas de juego se requieren. Si uno "
"tiene un sistema que..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:286
msgid "tracks all of its data internally"
msgstr "monitorea todos los datos internamente"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:287
msgid "should be globally accessible"
msgstr "debería ser accesible globalmente"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:288
msgid "should exist in isolation"
msgstr "debería existir de manera aislada"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:290
msgid ""
"... then one should create an :ref:`autoload 'singleton' node "
"<doc_singletons_autoload>`."
msgstr ""
"... entonces se puede crear un nodo :ref:`autoload 'singleton' "
"<doc_singletons_autoload>`."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:294
msgid ""
"For smaller games, a simpler alternative with less control would be to have "
"a \"Game\" singleton that simply calls the :ref:`SceneTree.change_scene() "
"<class_SceneTree_method_change_scene>` method to swap out the main scene's "
"content. This structure more or less keeps the \"World\" as the main game "
"node."
msgstr ""
"Para juegos pequeños, una alternativa simple con menor control podría ser "
"tener un singleton \"Game\" que simplemente llame al método :ref:`SceneTree."
"change_scene() <class_SceneTree_method_change_scene>` para intercambiar el "
"contenido de la escena principal. Esta estructura mantiene a \"World\" como "
"un nodo principal del juego."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:300
msgid ""
"Any GUI would need to also be a singleton, be transitory parts of the \"World"
"\", or be manually added as a direct child of the root. Otherwise, the GUI "
"nodes would also delete themselves during scene transitions."
msgstr ""
"Un GUI puede necesitar también un singleton, sean partes transitorias de "
"\"World\", o agregadas manualmente como hijas del raíz. De otro modo, los "
"nodos GUI pueden también borrarse a si mismos durante escenas de transición."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:305
msgid ""
"If one has systems that modify other systems' data, one should define those "
"as their own scripts or scenes rather than autoloads. For more information "
"on the reasons, please see the :ref:`'Autoloads vs. Internal Nodes' "
"<doc_autoloads_versus_internal_nodes>` documentation."
msgstr ""
"Si uno de los sistemas modifica datos de otro sistema, se los pueden definir "
"en sus propios scripts en lugar de autoloads. Para más información sobre "
"estas razones, por favor lee la documentación en  :ref:`'Autoloads vs. Nodos "
"Internos' <doc_autoloads_versus_internal_nodes>`."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:311
msgid ""
"Each subsystem within one's game should have its own section within the "
"SceneTree. One should use parent-child relationships only in cases where "
"nodes are effectively elements of their parents. Does removing the parent "
"reasonably mean that one should also remove the children? If not, then it "
"should have its own place in the hierarchy as a sibling or some other "
"relation."
msgstr ""
"Cada subsistema dentro de tu juego debería tener su propia sección en el "
"Árbol de Escenas. Uno debe usar la relación  padre-hijo sólo en casos donde "
"los nodos son efectivamente elementos de sus padres. ¿Remover un padre "
"quiere decir también remover los hijos? Si la respuesta es no, entonces "
"estos deben tener su propio lugar en la jerarquía como hermanos o alguna "
"otra relación."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:319
msgid ""
"In some cases, one needs these separated nodes to *also* position themselves "
"relative to each other. One can use the :ref:`RemoteTransform "
"<class_RemoteTransform>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>` nodes for this purpose. They will allow a target "
"node to conditionally inherit selected transform elements from the Remote\\* "
"node. To assign the ``target`` :ref:`NodePath <class_NodePath>`, use one of "
"the following:"
msgstr ""
"En algunos casos, es necesario que esos nodos separados se posicionen de "
"manera relativa entre sí. Para este propósito se pueden utilizar los nodos :"
"ref:`RemoteTransform <class_RemoteTransform>` o :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>`. Estos permiten que a un nodo target (objetivo) "
"se le apliquen elementos del Transform del nodo remoto. Para asignar el "
"``target`` :ref:`NodePath <class_NodePath>`, usa uno de los siguientes:"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:327
msgid ""
"A reliable third party, likely a parent node, to mediate the assignment."
msgstr ""
"Un nodo externo confiable, como un nodo padre, para mediar en la asignación."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:328
msgid ""
"A group, to easily pull a reference to the desired node (assuming there will "
"only ever be one of the targets)."
msgstr ""
"Un grupo, para tomar fácilmente una referencia al nodo deseado (asumiendo "
"que siempre será uno de los objetivos)."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:331
msgid ""
"When should one do this? Well, it's up to them to decide. The dilemma arises "
"when one must micro-manage when a node must move around the SceneTree to "
"preserve itself. For example..."
msgstr ""
"¿Cuándo debería hacer esto? Bueno, eso depende de de tí decidirlo. El dilema "
"surge cuando se debe realizar un control fino si un nodo debe moverse en el "
"árbol de escenas para preservarse. Por ejemplo..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:335
msgid "Add a \"player\" node to a \"room\"."
msgstr "Agregar un nodo \"jugador\" a un \"escenario\"."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:336
msgid "Need to change rooms, so one must delete the current room."
msgstr "Se necesitan cambiar escenarios, entonces se debe eliminar el actual."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:337
msgid ""
"Before the room can be deleted, one must preserve and/or move the player."
msgstr ""
"Antes de que el escenario sea borrado, hay que preservar o mover al jugador."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:339
msgid "Is memory a concern?"
msgstr "¿Importa la memoria?"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:341
msgid ""
"If not, one can just create the two rooms, move the player and delete the "
"old one. No problem."
msgstr ""
"Si no importa, se pueden crear dos escenarios, mover al jugador y borrar el "
"escenario viejo. No hay problema."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:344
msgid "If so, one will need to..."
msgstr "Si importa, habrá que..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:346
msgid "Move the player somewhere else in the tree."
msgstr "Mover el jugador a algún lugar en el árbol de escenas."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:347
msgid "Delete the room."
msgstr "Borrar el escenario."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:348
msgid "Instantiate and add the new room."
msgstr "Instanciar el escenario nuevo."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:349
msgid "Re-add the player."
msgstr "Agrega nuevamente el jugador."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:351
msgid ""
"The issue is that the player here is a \"special case\", one where the "
"developers must *know* that they need to handle the player this way for the "
"project. As such, the only way to reliably share this information as a team "
"is to *document* it. Keeping implementation details in documentation however "
"is dangerous. It's a maintenance burden, strains code readability, and "
"bloats the intellectual content of a project unnecessarily."
msgstr ""
"El problema es que en este caso, el jugador es un \"caso especial\", uno "
"donde los desarrolladores deben *saber* que habrá que utilizar de este modo "
"al jugador en el proyecto. El único modo de compartir información de manera "
"confiable en el equipo, es *documentarla*. Aunque mantener detalles de "
"implementación en la documentación es peligroso. Es una carga extra de "
"mantenimiento, afecta la facilidad de lectura del código y engorda el "
"contenido intelectual del proyecto de manera innecesaria."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:358
msgid ""
"In a more complex game with larger assets, it can be a better idea to simply "
"keep the player somewhere else in the SceneTree entirely. This involves..."
msgstr ""
"En un juego más complejo, con recursos más grandes, puede ser mejor "
"simplemente dejar al jugador en alguna otra parte del árbol de escenas. Esto "
"implica..."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:361
msgid "More consistency."
msgstr "Mayor consistencia."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:362
msgid "No \"special cases\" that must be documented and maintained somewhere."
msgstr ""
"No hay \"casos especiales\" que deban ser documentados y mantenidos en algún "
"lugar."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:363
msgid ""
"No opportunity for errors to occur because these details are not accounted "
"for."
msgstr ""
"No hay oportunidad de que sucedan esos errores porque algún detalle no se "
"tuvo en cuenta."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:366
msgid ""
"In contrast, if one ever needs to have a child node that does *not* inherit "
"the transform of their parent, one has the following options:"
msgstr ""
"En contraste, si se necesita que un hijo *no* herede el transform del padre, "
"están las siguientes opciones:"

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:369
msgid ""
"The **declarative** solution: place a :ref:`Node <class_Node>` in between "
"them. As nodes with no transform, Nodes will not pass along such information "
"to their children."
msgstr ""
"La solución **declarativa**: coloca un :ref:`Node <class_Node>` entre ellos. "
"Como los Node no tienen transform, no pasarán esa información a sus hijos."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:372
msgid ""
"The **imperative** solution: Use the ``set_as_toplevel`` setter for the :ref:"
"`CanvasItem <class_CanvasItem_method_set_as_toplevel>` or :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>` node. This will make the node ignore "
"its inherited transform."
msgstr ""
"La solución **imperativa**: Usar ``set_as_toplevel`` para el nodo :ref:"
"`CanvasItem <class_CanvasItem_method_set_as_toplevel>` o :ref:`Spatial "
"<class_Spatial_method_set_as_toplevel>`. Esto hará que el nodo ignore el "
"transform heredado."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:379
msgid ""
"If building a networked game, keep in mind which nodes and gameplay systems "
"are relevant to all players versus those just pertinent to the authoritative "
"server. For example, users do not all need to have a copy of every players' "
"\"PlayerController\" logic. Instead, they need only their own. As such, "
"keeping these in a separate branch from the \"world\" can help simplify the "
"management of game connections and the like."
msgstr ""
"Si estás creando un juego en red, ten en mente qué nodos y sistemas de juego "
"serán relevantes para todos los jugadores y cuáles sólo serán pertinentes "
"para el servidor autoritativo. Por ejemplo, no todos los usuarios necesitan "
"tener una copia de la lógica de cada \"controlador de jugador\". En cambio, "
"sí necesitan el propio. De este modo, mantenerlos en una rama separada del "
"\"mundo\" puede simplificar la administración de las conexiones del juego "
"entre otras cosas."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:386
msgid ""
"The key to scene organization is to consider the SceneTree in relational "
"terms rather than spatial terms. Do the nodes need to be dependent on their "
"parent's existence? If not, then they can thrive all by themselves somewhere "
"else. If so, then it stands to reason they should be children of that parent "
"(and likely part of that parent's scene if they aren't already)."
msgstr ""
"La clave para la organización de las escenas es considerar al Arbol de "
"Escenas en términos relacionales en lugar de términos especiales. ¿Deben los "
"nodos depender de la existencia de su nodo padre? Si no, entonces pueden "
"arreglárselas solos en alguna otra parte. Caso contrario, deben ser hijos de "
"ese padre (y probablemente deberían ser parte de la escena del padre si no "
"lo son actualmente)."

#: ../../docs/getting_started/workflow/best_practices/scene_organization.rst:392
msgid ""
"Does this mean nodes themselves are components? Not at all. Godot's node "
"trees form an aggregation relationship, not one of composition. But while "
"one still has the flexibility to move nodes around, it is still best when "
"such moves are unnecessary by default."
msgstr ""
"¿Quiere decir esto que los nodos son componentes? Para nada, los árboles de "
"nodos de Godot forman una relación de agregación, no una de composición. Y "
"aunque exista la flexibilidad de mover nodos por el árbol, es mejor cuando "
"esas acciones no son necesarias."
