# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-21 12:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:4
#, fuzzy
msgid "Godot scenes and scripts are classes"
msgstr "Registrar scripts como clases"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:6
msgid ""
"In Godot, scripts and scenes can both be the equivalent of classes in an "
"Object-Oriented programming language. The main difference is that scenes are "
"`declarative code <https://en.wikipedia.org/wiki/Declarative_programming>`_, "
"while scripts can contain `imperative code <https://en.wikipedia.org/wiki/"
"Imperative_programming>`_."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:12
msgid ""
"As a result, many best practices in Godot boil down to applying Object-"
"Oriented design principles to the scenes, nodes, or script that make up your "
"game."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:15
msgid ""
"This guide explains how scripts and scenes work in the engine's core, to "
"help you get a sense of how Godot works under the hood, and to help you "
"better understand where some of this series' best practices come from."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:20
#, fuzzy
msgid "Making sense of classes in Godot"
msgstr "Importando recursos en Godot 3.0+"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:22
#, fuzzy
msgid ""
"Godot Engine provides built-in classes like :ref:`Node <class_Node>`. User-"
"created types are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"Godot Engine provee clases listas para usar (como :ref:`Node <class_Node>`), "
"pero los tipos creados por el usuario no son realmente clases. Por el "
"contrario, son recursos que le dicen al motor una secuencia de indicaciones "
"para realizar en una clase del motor."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:27
#, fuzzy
msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Las clases internas de Godot tienen métodos que registran los datos de una "
"clase mediante :ref:`ClassDB <class_ClassDB>`. Esta base de datos provee "
"acceso a la información de la clase en tiempo de ejecución (algo también "
"llamado \"reflección\"). Las cosas guardadas en ClassDB incluyen, entre "
"otras cosas..."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:31
msgid "properties"
msgstr "Propiedades"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:32
msgid "methods"
msgstr "métodos"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:33
msgid "constants"
msgstr "Constantes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:34
msgid "signals"
msgstr "señales"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:36
#, fuzzy
msgid ""
"This ``ClassDB`` is what Objects check against when performing an operation "
"like accessing a property or calling a method. ``ClassDB`` checks the "
"database's records and the records of the Object's base types to see if the "
"Object supports the operation."
msgstr ""
"Además, ClassDB es lo que los Objetos usan para hacer chequeos cuando "
"realizar alguna operación. ¿Acceder una propiedad? ¿Invocar un método? "
"¿Emitir una señal? Va a chequear los registros de la base de datos (y los "
"registros de los tipos base del Objeto) para ver si el Objeto soporta la "
"operación. Cada Objeto de C++ define una función estática `_bind_methods()` "
"que describe que contenido de C++ registra en la base de datos y como."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:41
msgid ""
"On the engine's side, every class defines a static ``_bind_methods()`` "
"function that describes what C++ content it registers to the database and "
"how. When you use the engine, you can extend the methods, properties, and "
"signals available from the ``ClassDB`` by attaching a :ref:`Script "
"<class_Script>` to your node."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:46
#, fuzzy
msgid ""
"Objects check their attached script before the database. This is why scripts "
"can override built-in methods. If a script defines a "
"``_get_property_list()`` method, Godot appends that data to the list of "
"properties the Object fetches from the ClassDB. The same is true for other "
"declarative code."
msgstr ""
"*Esto* es un :ref:`Script <class_Script>`. Los Object revisan su script "
"anexado antes que la base de datos del motor, de este modo, los scripts "
"pueden sobreescribir métodos. Si un sscript define un método "
"`_get_property_list()`, esos datos serán agregados a la lista de propiedades "
"que el Object obtiene de la ClassDB. Lo mismo aplica para otros códigos "
"declarativos."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:51
msgid ""
"Even scripts that don't inherit from a built-in type, i.e. scripts that "
"don't start with the ``extends`` keyword, implicitly inherit from the "
"engine's base :ref:`Reference <class_Reference>` class. This allows the "
"Object to defer to the script's content where the engine logic deems "
"appropriate."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:58
msgid ""
"As a result, you can instance scripts without the ``extends`` keyword from "
"code, but you cannot attach them to a :ref:`Node <class_Node>`"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:63
msgid "Scripting performances and PackedScene"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:65
#, fuzzy
msgid ""
"As the size of Objects increases, the scripts' necessary size to create them "
"grows much, much larger. Creating node hierarchies demonstrates this. Each "
"individual Node's logic could be several hundred lines of code in length."
msgstr ""
"Esto también presenta un problema. Cuando el tamaño de los Object aumenta, "
"el tamaño de los scripts necesarios para crearlos crece mucho. Esto se puede "
"demostrar creando jerarquías de nodos. La lógica individual de cada Node "
"puede ser de cientos de líneas de código en longitud."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:69
msgid ""
"Let's see a simple example of creating a single ``Node`` as a child. The "
"code below creates a new ``Node``, changes its name, assigns a script to it, "
"sets its future parent as its owner so it gets saved to disk along with it, "
"and finally adds it as a child of the ``Main`` node:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:109
msgid ""
"Script code like this is much slower than engine-side C++ code. Each change "
"makes a separate call to the scripting API which leads to many \"look-ups\" "
"on the back-end to find the logic to execute."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:113
msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, are resources "
"that use serialized data to create objects. The engine can process scenes in "
"batches on the back-end and provide much better performance than scripts."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:119
#, fuzzy
msgid "Scenes and scripts are objects"
msgstr "Objetos transparentes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:121
#, fuzzy
msgid ""
"Why is any of this important to scene organization? Because scenes *are* "
"objects. One often pairs a scene with a scripted root node that makes use of "
"the sub-nodes. This means that the scene is often an extension of the "
"script's declarative code."
msgstr ""
"Ahora, por qué esto puede ser importante para la organización de una escena? "
"Porque uno debe comprender que las escenas *son* objetos. Uno usualmente "
"relaciona una escena con un nodo raíz con script que hace uso de sub nodos. "
"Esto significa que la escena normalmente es es una extensión del código "
"declarativo del script."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:126
msgid "The content of a scene helps to define:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:128
#, fuzzy
msgid "What nodes are available to the script"
msgstr "¿qué objetos son accesibles para el script?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:129
#, fuzzy
msgid "How they are organized"
msgstr "¿cómo están organizados?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:130
#, fuzzy
msgid "How are they initialized"
msgstr "¿cómo son inicializados?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:131
msgid "What signal connections they have with each other"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:133
msgid ""
"Many Object-Oriented principles which apply to written code *also* apply to "
"scenes."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:136
msgid ""
"The scene is *always an extension of the script attached to its root node*. "
"You can see all the nodes it contains as part of a single class."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:139
msgid ""
"Most of the tips and techniques explained in this series will build on this."
msgstr ""
