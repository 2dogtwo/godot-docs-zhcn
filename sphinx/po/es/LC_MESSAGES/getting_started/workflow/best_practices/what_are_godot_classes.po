# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-27 13:49+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:4
msgid "Godot scenes and scripts are classes"
msgstr "Las escenas y scripts de Godot son clases"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:6
msgid ""
"In Godot, scripts and scenes can both be the equivalent of classes in an "
"Object-Oriented programming language. The main difference is that scenes are "
"`declarative code <https://en.wikipedia.org/wiki/Declarative_programming>`_, "
"while scripts can contain `imperative code <https://en.wikipedia.org/wiki/"
"Imperative_programming>`_."
msgstr ""
"En Godot, tanto las escenas como los scripts pueden ser el equivalente a las "
"clases en un lenguaje de programación orientado a objetos. La principal "
"diferencia es que las escenas son `código declarativo <https://en.wikipedia."
"org/wiki/Declarative_programming>`_, mientras que los scripts pueden "
"contener `código imperativo <https://en.wikipedia.org/wiki/"
"Imperative_programming>`_."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:12
msgid ""
"As a result, many best practices in Godot boil down to applying Object-"
"Oriented design principles to the scenes, nodes, or script that make up your "
"game."
msgstr ""
"Como resultado, muchas buenas prácticas en Godot se reducen a aplicar "
"principios de diseño orientado a objetos a las escenas, nodos o scripts que "
"forman tu juego."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:15
msgid ""
"This guide explains how scripts and scenes work in the engine's core, to "
"help you get a sense of how Godot works under the hood, and to help you "
"better understand where some of this series' best practices come from."
msgstr ""
"Esta guía explica cómo funcionan los scripts y las escenas en el núcleo del "
"motor, para ayudarte a tener una idea de cómo funciona Godot por dentro, y "
"ayudarte a que entiendas mejor de dónde vienen algunas buenas prácticas de "
"esta serie."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:20
msgid "Making sense of classes in Godot"
msgstr "Dando sentido a las clases en Godot"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:22
msgid ""
"Godot Engine provides built-in classes like :ref:`Node <class_Node>`. User-"
"created types are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"El motor de Godot proporciona clases incorporadas como :ref:`Nodo "
"<class_Node>`. Los tipos creados por el usuario no son técnicamente clases. "
"En cambio, son recursos que dan al motor una serie de inicializaciones a "
"realizar en una de las clases incorporadas del motor."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:27
msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Las clases internas de Godot tienen métodos que registran los datos de una "
"clase mediante una :ref:`ClassDB <class_ClassDB>`. Esta base de datos "
"proporciona acceso en tiempo de ejecución a información de la clase. ClassDB "
"contiene información sobre las clases como:"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:31
msgid "properties"
msgstr "Propiedades"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:32
msgid "methods"
msgstr "métodos"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:33
msgid "constants"
msgstr "Constantes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:34
msgid "signals"
msgstr "señales"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:36
msgid ""
"This ``ClassDB`` is what Objects check against when performing an operation "
"like accessing a property or calling a method. ``ClassDB`` checks the "
"database's records and the records of the Object's base types to see if the "
"Object supports the operation."
msgstr ""
"Esta ``ClassDB`` es lo que los objetos verifican cuando realizan una "
"operación como acceder a una propiedad o llamar un método. ``ClassDB`` "
"comprueba los registros de la base de datos y los registros de los tipos "
"base del objeto para ver si el objeto soporta la operación."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:41
msgid ""
"On the engine's side, every class defines a static ``_bind_methods()`` "
"function that describes what C++ content it registers to the database and "
"how. When you use the engine, you can extend the methods, properties, and "
"signals available from the ``ClassDB`` by attaching a :ref:`Script "
"<class_Script>` to your node."
msgstr ""
"En el lado del motor, cada clase define una función ``_bind_methods()`` "
"estática que describe qué contenido de C++ registra en la base de datos y "
"cómo. Cuando usas el motor, puedes ampliar los métodos, propiedades y "
"señales disponibles de la ``ClassDB`` vinculando un :ref:`Script "
"<class_Script>` al nodo."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:46
msgid ""
"Objects check their attached script before the database. This is why scripts "
"can override built-in methods. If a script defines a "
"``_get_property_list()`` method, Godot appends that data to the list of "
"properties the Object fetches from the ClassDB. The same is true for other "
"declarative code."
msgstr ""
"Los objetos comprueban sus scripts vinculados antes que la base de datos. "
"Esta es la razón por la cual los scripts pueden redefinir métodos "
"incorporados. Si un script define un método ``_get_property_list()``, Godot "
"adjunta esta información a la lista de propiedades que el objeto extrae de "
"la ``ClassDB``. Lo mismo sucede con otro código declarativo."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:51
msgid ""
"Even scripts that don't inherit from a built-in type, i.e. scripts that "
"don't start with the ``extends`` keyword, implicitly inherit from the "
"engine's base :ref:`Reference <class_Reference>` class. This allows the "
"Object to defer to the script's content where the engine logic deems "
"appropriate."
msgstr ""
"Incluso los scripts que no heredan de un tipo incorporado, como por ejemplo "
"scripts que no empiezan con la palabra clave ``extends``, implícitamente "
"heredan de la clase base :ref:`Reference <class_Reference>` del motor. Esto "
"permite al objeto diferir al contenido del script donde la lógica del motor "
"considere apropiado."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:58
msgid ""
"As a result, you can instance scripts without the ``extends`` keyword from "
"code, but you cannot attach them to a :ref:`Node <class_Node>`"
msgstr ""
"Como resultado, puedes instanciar scripts sin la palabra clave ``extends`` "
"mediante código, pero no puedes vincularlos a un :ref:`Node <class_Node>`"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:63
msgid "Scripting performances and PackedScene"
msgstr "Rendimiento del scripting y PackedScene"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:65
msgid ""
"As the size of Objects increases, the scripts' necessary size to create them "
"grows much, much larger. Creating node hierarchies demonstrates this. Each "
"individual Node's logic could be several hundred lines of code in length."
msgstr ""
"A medida que crece el tamaño de los objetos, el tamaño necesario de los "
"scripts para crearlos crece mucho, mucho más. Crear jerarquías de nodos "
"demuestra esto. La lógica de cada nodo individual podría ser de varios "
"cientos de líneas de código."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:69
msgid ""
"Let's see a simple example of creating a single ``Node`` as a child. The "
"code below creates a new ``Node``, changes its name, assigns a script to it, "
"sets its future parent as its owner so it gets saved to disk along with it, "
"and finally adds it as a child of the ``Main`` node:"
msgstr ""
"Veamos un sencillo ejemplo de crear un solo ``Node`` como hijo. El código a "
"continuación crea un nuevo ``Node``, cambia su nombre, asigna un script al "
"mismo, establece su futuro padre como su propietario para que se guarde en "
"disco junto a él, y finalmente lo añade como un hijo del nodo ``Main``:"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:109
msgid ""
"Script code like this is much slower than engine-side C++ code. Each change "
"makes a separate call to the scripting API which leads to many \"look-ups\" "
"on the back-end to find the logic to execute."
msgstr ""
"Código de script como éste es mucho más lento que código C++ del lado del "
"motor. Cada cambio hace una llamada separada a la API de scripting que "
"conlleva muchas búsquedas en el back-end para encontrar la lógica a ejecutar."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:113
msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, are resources "
"that use serialized data to create objects. The engine can process scenes in "
"batches on the back-end and provide much better performance than scripts."
msgstr ""
"Las escenas ayudan a evitar este problema de rendimiento. :ref:`PackedScene "
"<class_PackedScene>`, el tipo base del que heredan las escenas, son recursos "
"que usan datos serializados para crear objetos. El motor puede procesar "
"escenas por lotes en el back-end y proporcionar mucho mejor rendimiento que "
"los scripts."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:119
msgid "Scenes and scripts are objects"
msgstr "Escenas y scripts son objetos"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:121
msgid ""
"Why is any of this important to scene organization? Because scenes *are* "
"objects. One often pairs a scene with a scripted root node that makes use of "
"the sub-nodes. This means that the scene is often an extension of the "
"script's declarative code."
msgstr ""
"¿Por qué esto es importante para la organización de las escenas? Porque las "
"escenas *son* objetos. A menudo se empareja una escena con un nodo raíz con "
"script que hace uso de los sub-nodos. Esto significa que la escena es a "
"menudo una extensión del código declarativo del script."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:126
msgid "The content of a scene helps to define:"
msgstr "El contenido de una escena ayuda a definir:"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:128
msgid "What nodes are available to the script"
msgstr "Qué nodos están disponibles al script"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:129
msgid "How they are organized"
msgstr "Cómo están organizados"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:130
msgid "How are they initialized"
msgstr "Cómo se inicializan"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:131
msgid "What signal connections they have with each other"
msgstr "Qué conexiones de señales tienen entre ellos"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:133
msgid ""
"Many Object-Oriented principles which apply to written code *also* apply to "
"scenes."
msgstr ""
"Varios principios orientados a objetos que se aplican a código escrito "
"*también* se aplican a las escenas."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:136
msgid ""
"The scene is *always an extension of the script attached to its root node*. "
"You can see all the nodes it contains as part of a single class."
msgstr ""
"La escena es *siempre una extensión del script vinculado a su nodo raíz*. "
"Puedes ver todos los nodos que contiene como parte de una sola clase."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:139
msgid ""
"Most of the tips and techniques explained in this series will build on this."
msgstr ""
"La mayoría de los consejos y técnicas explicados en esta serie se basarán en "
"esto."
