# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-17 12:25+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:4
msgid "What are Godot classes really?"
msgstr "¿Qué son realmente las clases en Godot?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:6
msgid ""
"Godot offers two main means of creating types: scripts and scenes. Both of "
"these represent a \"class\" since Godot revolves around Object-Oriented "
"design. *How* they do this may not be clear to beginner or intermediate "
"users though."
msgstr ""
"Godot ofrece principalmente dos métodos para crear tipos: scripts y escenas. "
"Ambos representan una \"clase\" ya que Godot se meneja alrededor de un "
"diseño Orientado a Objetos. Sin embargo, *cómo* lo hacen, puede no ser claro "
"para los usuarios principiantes o intermedios."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:11
msgid ""
"Godot Engine provides classes out-of-the-box (like :ref:`Node "
"<class_Node>`), but user-created types are not actually classes. Instead "
"they are resources that tell the engine a sequence of initializations to "
"perform on an engine class."
msgstr ""
"Godot Engine provee clases listas para usar (como :ref:`Node <class_Node>`), "
"pero los tipos creados por el usuario no son realmente clases. Por el "
"contrario, son recursos que le dicen al motor una secuencia de indicaciones "
"para realizar en una clase del motor."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:16
msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information (also called \"reflection\"). Things stored in the ClassDB "
"include, among other things..."
msgstr ""
"Las clases internas de Godot tienen métodos que registran los datos de una "
"clase mediante :ref:`ClassDB <class_ClassDB>`. Esta base de datos provee "
"acceso a la información de la clase en tiempo de ejecución (algo también "
"llamado \"reflección\"). Las cosas guardadas en ClassDB incluyen, entre "
"otras cosas..."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:21
msgid "properties"
msgstr "Propiedades"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:23
msgid "methods"
msgstr "métodos"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:25
msgid "constants"
msgstr "Constantes"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:27
msgid "signals"
msgstr "señales"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:29
msgid ""
"Furthermore, this ClassDB is what Objects actually check against when "
"performing any operation. Access a property? Call a method? Emit a signal? "
"It will check the database's records (and the records of the Object's base "
"types) to see if the Object supports the operation. Every C++ Object defines "
"a static `_bind_methods()` function that describes what C++ content it "
"registers to the database and how."
msgstr ""
"Además, ClassDB es lo que los Objetos usan para hacer chequeos cuando "
"realizar alguna operación. ¿Acceder una propiedad? ¿Invocar un método? "
"¿Emitir una señal? Va a chequear los registros de la base de datos (y los "
"registros de los tipos base del Objeto) para ver si el Objeto soporta la "
"operación. Cada Objeto de C++ define una función estática `_bind_methods()` "
"que describe que contenido de C++ registra en la base de datos y como."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:36
msgid ""
"So, if the engine provides all of this data at startup, then how does a user "
"define their own data? It'd be nice if users could define a custom set of "
"data to be appended to an object's data. That way, users could inject their "
"own properties and methods into the engine's Object query requests."
msgstr ""
"Entonces, si el motor provee todos estos datos al iniciar ¿cómo un usuario "
"define sus propios datos? Seria bueno si los usuarios pudiesen definir un "
"conjunto customizado de datos para agregarse a los de un objeto. De esa "
"manera los usuario podrían inyectar sus propias propiedades y métodos en los "
"pedidos de búsqueda de los Objetos del motor."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:41
msgid ""
"*This* is what a :ref:`Script <class_Script>` is. Objects check their "
"attached script before the database, so scripts can even override methods. "
"If a script defines a `_get_property_list()` method, that data is appended "
"to the list of properties the Object fetches from the ClassDB. The same "
"holds true for other declarative code."
msgstr ""
"*Esto* es un :ref:`Script <class_Script>`. Los Object revisan su script "
"anexado antes que la base de datos del motor, de este modo, los scripts "
"pueden sobreescribir métodos. Si un sscript define un método "
"`_get_property_list()`, esos datos serán agregados a la lista de propiedades "
"que el Object obtiene de la ClassDB. Lo mismo aplica para otros códigos "
"declarativos."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:47
msgid ""
"This can lead to some users' confusion when they see a script as being a "
"class unto itself. In reality, the engine just auto-instantiates the base "
"engine class and then adds the script to that object. This then allows the "
"Object to defer to the Script's content where the engine logic deems "
"appropriate."
msgstr ""
"Esto puede llevar a una confusión de los usuarios, de ver a un script es una "
"clase en sí mismo. En realidad, el motor simplemente auto instancia la clase "
"base y agrega el script al objeto. Esto permite que el Object difiera al "
"contenido del Script cuando la lógica del motor lo vea apropiado."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:53
msgid ""
"A problem does present itself though. As the size of Objects increases, the "
"scripts' necessary size to create them grows much, much larger. Creating "
"node hierarchies demonstrates this. Each individual Node's logic could be "
"several hundred lines of code in length."
msgstr ""
"Esto también presenta un problema. Cuando el tamaño de los Object aumenta, "
"el tamaño de los scripts necesarios para crearlos crece mucho. Esto se puede "
"demostrar creando jerarquías de nodos. La lógica individual de cada Node "
"puede ser de cientos de líneas de código en longitud."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:58
msgid "let's see a simple example of creating a single Node as a child."
msgstr "veamos un ejemplo simple de creación de un solo Node como un hijo."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:98
msgid ""
"Notice that only two pieces of declarative code are involved in the creation "
"of this child node: the variable declaration and the constructor "
"declaration. Everything else about the child must be setup using imperative "
"code. However, script code is much slower than engine C++ code. Each change "
"must make a separate call to the scripting API which means a lot of C++ "
"\"lookups\" within data structures to find the corresponding logic to "
"execute."
msgstr ""
"Nota que sólo dos porciones de código declarativo están involucradas en la "
"creación de este nodo hijo: la declaración de una variable y la del "
"constructor. Todo lo demás sobre el hijo debe hacerse usando código "
"imperativo. Sin embargo, el código de script es mucho más lento que el "
"código C++ del motor. Cada cambio debe hacer una llamada separada al API de "
"scripting, lo que significan muchos C++ \"lookups\" (búsquedas) dentro de "
"estructuras de datos para encontrar la lógica correspondiente para "
"ejecutarlo."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:106
msgid ""
"To help offload the work, it would be convenient if one could batch up all "
"operations involved in creating and setting up node hierarchies. The engine "
"could then handle the construction using its fast C++ code, and the script "
"code would be free from the perils of imperative code."
msgstr ""
"Para ayudar a aliviar la carga, puede ser conveniente hacer por lotes todas "
"las operaciones que impliquen la creación y configuración de jerarquías de "
"nodos. Entonces el motor podrá realizar la construcción usando su rápido "
"código C++ y el script estará libre de los riesgos del código imperativo."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:111
msgid ""
"*This* is what a scene (:ref:`PackedScene <class_PackedScene>`) is: a "
"resource that provides an advanced \"constructor\" serialization which is "
"offloaded to the engine for batch processing."
msgstr ""
"*Esto* es una escena (:ref:`PackedScene <class_PackedScene>`): un Resource "
"que provee un \"constructor\" de serialización avazado que puede ser "
"delegado al motor para procesamiento por lotes."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:115
msgid ""
"Now, why is any of this important to scene organization? Because one must "
"understand that scenes *are* objects. One often pairs a scene with a "
"scripted root node that makes use of the sub-nodes. This means that the "
"scene is often an extension of the script's declarative code."
msgstr ""
"Ahora, por qué esto puede ser importante para la organización de una escena? "
"Porque uno debe comprender que las escenas *son* objetos. Uno usualmente "
"relaciona una escena con un nodo raíz con script que hace uso de sub nodos. "
"Esto significa que la escena normalmente es es una extensión del código "
"declarativo del script."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:120
msgid "It helps to define..."
msgstr "Esto ayuda a definir..."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:122
msgid "what objects are available to the script?"
msgstr "¿qué objetos son accesibles para el script?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:124
msgid "how are they organized?"
msgstr "¿cómo están organizados?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:126
msgid "how are they initialized?"
msgstr "¿cómo son inicializados?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:128
msgid "what connections to each other do they have, if any?"
msgstr "¿qué conexiones tienen entre sí, si es que tienen alguna?"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:130
msgid ""
"As such, many Object-Oriented principles which apply to \"programming\", i."
"e. scripts, *also* apply to scenes. Some scripts are designed to only work "
"in one scene (which are often bundled into the scene itself). Other scripts "
"are meant to be re-used between scenes."
msgstr ""
"De este modo, muchos principios de paradigna orientado a objetos aplicados a "
"\"programación\", por ejemplo en scripts, *también* aplica a escenas. "
"Algunos scripts son designados para funcionar en una escena (generalmente "
"incluidos en la escena misma). Otros scripts están hechos para ser "
"reutilizados en varias escenas."

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:135
msgid ""
"**Regardless, the scene is always an extension of the root script, and can "
"therefore be interpreted as a part of the class.** Most of the points "
"covered in this series will build on this point, so keep it in mind."
msgstr ""
"**A pesar de esto, la escena siempre es una extensión del script raíz, y "
"puede ser interpretada como parte de la clase.** La mayoría de los puntos "
"tratados aquí estarán basados en esto, así que tenlo en mente."
