# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:4
msgid "Signals"
msgstr "Señales"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Introduction"
msgstr "Introducción"

#: ../../docs/getting_started/step_by_step/signals.rst:9
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"Las señales son en Godot una version del \"patron del observador\". Estas "
"permiten a un nodo enviar un mensaje, que otros nodos pueden escuchar y "
"responder. Por ejemplo, en vez de chequear continuamente si un botón esta "
"siendo presionado, el botón puede emitir una señal cuando esta presionado."

#: ../../docs/getting_started/step_by_step/signals.rst:14
msgid ""
"You can read more about the observer pattern here: http://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Puedes leer mas sobre el patron del observador aqui: http://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:16
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"Las señales son una forma de *desacoplar* los objetos del juego, lo que "
"permite obtener un código mejor organizado y fácil de administrar. En lugar "
"de forzar a los objetos del juego a esperar que otros objetos estén siempre "
"presentes, pueden emitir señales a las que todos los objetos interesados "
"puedan suscribirse y responder."

#: ../../docs/getting_started/step_by_step/signals.rst:21
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"A continuación puedes ver algunos ejemplos de cómo puedes usar las señales "
"en tus propios proyectos."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid "Timer example"
msgstr "Ejemplo de Timer"

#: ../../docs/getting_started/step_by_step/signals.rst:26
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"Para ver cómo funcionan las señales, intentemos usar un nodo :ref:`Timer "
"<class_Timer>`. Creamos una nueva escena con un Node2D y dos hijos: un Timer "
"y un :ref:`Sprite <class_Sprite>`. En la parte de Escenas, cambia el nombre "
"del Node2D a TimerExample."

#: ../../docs/getting_started/step_by_step/signals.rst:30
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Para la textura del Sprite, puedes usar el icono de Godot, o cualquier otra "
"imagen que desees. Para ello, desde el inspector del elemento Sprite, en el "
"atributo ``Texture`` selecciona ``Load`` en el menú desplegable. Agrega un "
"script al nodo raíz, pero no le añadas ningún código todavía."

#: ../../docs/getting_started/step_by_step/signals.rst:34
msgid "Your scene tree should look like this:"
msgstr "Tu árbol de la escena debería verse así:"

#: ../../docs/getting_started/step_by_step/signals.rst:38
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"En las propiedades del nodo Temporizador, marca la casilla \"On\" que "
"aparece junto a *Autostart*. Esto hará que el temporizador se inicie "
"automáticamente cuando se ejecute la escena. Puedes dejar el *Wait Time* en "
"1 segundo."

#: ../../docs/getting_started/step_by_step/signals.rst:42
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"Junto a la pestaña \"Inspector\" hay una pestaña con el nombre \"Nodos\". "
"Haz clic en esta pestaña y verás todas las señales que puede emitir el nodo "
"seleccionado. En el caso del nodo Timer, el que nos ocupa es el \"timeout\". "
"Esta señal se emite cada vez que el temporizador alcanza ``0``."

#: ../../docs/getting_started/step_by_step/signals.rst:49
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"Haz clic en la señal \"timeout()\" y en \"Connect...\". Se abrirá la "
"siguiente ventana, donde podrás definir cómo quieres conectar la señal:"

#: ../../docs/getting_started/step_by_step/signals.rst:55
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"En el lado izquierdo, verás los nodos de tu escena y podrás seleccionar el "
"nodo que quieras que \"escuche \" la señal. Hay que tener en cuenta que el "
"nodo Timer es azul ,es una indicación visual de que es el nodo el que está "
"emitiendo la señal. Selecciona el nodo raíz."

#: ../../docs/getting_started/step_by_step/signals.rst:60
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"El nodo de destino *debe* tener un script adjunto o recibirá un mensaje de "
"error."

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"On the right side, you can bind an arbitrary number of arguments of "
"(possibly) different types. This can be useful when you have more than one "
"signal connected to the same method, as each signal propagation will result "
"in different values for those extra call arguments."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:67
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"En la parte inferior de la ventana hay un campo denominado \"Método Receptor"
"\". Este es el nombre de la función en el script del nodo destino que "
"queremos usar. Por defecto, Godot creará esta función usando la convención "
"de nombres ``_on_<node_name>_<signal_name>`` pero puedes cambiarla si lo "
"deseas."

#: ../../docs/getting_started/step_by_step/signals.rst:72
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"Haz clic en \"Conectar\" y verás que la función ha sido creada en el script:"

#: ../../docs/getting_started/step_by_step/signals.rst:92
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"Ahora podemos reemplazar el código del placeholder con cualquier código que "
"queramos ejecutar cuando recibamos la señal. Hagamos que el Sprite parpadee:"

#: ../../docs/getting_started/step_by_step/signals.rst:116
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"Ejecuta la escena y verás el Sprite parpadeando cada segundo. Se puede "
"cambiar la propiedad *Wait Time* del temporizador para modificarla."

#: ../../docs/getting_started/step_by_step/signals.rst:120
msgid "Connecting signals in code"
msgstr "Conectar señales por código"

#: ../../docs/getting_started/step_by_step/signals.rst:122
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"También puedes hacer la conexión de la señal por código en lugar de hacerlo "
"con el editor. Esto suele ser necesario cuando estás instanciando nodos "
"mediante código, por lo que no puedes usar el editor para hacer la conexión."

#: ../../docs/getting_started/step_by_step/signals.rst:126
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"Primero, desconecta la señal seleccionando la conexión en la pestaña \"Nodos"
"\" del Timer y haciendo clic en desconectar."

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"Para realizar la conexión en código, podemos usar la función ``connect``. La "
"establecemos en ``_ready()`` para que la conexión se cree en ejecución. La "
"sintaxis de la función es ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Aquí está el código para la "
"conexión de nuestro Timer:"

#: ../../docs/getting_started/step_by_step/signals.rst:164
msgid "Custom signals"
msgstr "Señales personalizadas"

#: ../../docs/getting_started/step_by_step/signals.rst:166
msgid "You can also declare your own custom signals in Godot:"
msgstr ""
"También puedes declarar tus propia señales (signal) personalizadas dentro de "
"Godot:"

#: ../../docs/getting_started/step_by_step/signals.rst:184
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"Una vez declaradas, las señales personalizadas aparecerán en el Inspector y "
"podrán conectarse de la misma forma que las señales integradas del nodo."

#: ../../docs/getting_started/step_by_step/signals.rst:187
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr "Para emitir una señal por código, utiliza la función ``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:212
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:232
#, fuzzy
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Estos argumentos se muestran en el panel de nodos del editor, y Godot puede "
"usarlos para generar funciones de llamadas de vuelta para usted. Sin "
"embargo, usted puede seguir emitiendo cualquier número de argumentos cuando "
"emite señales, está en sus manos emitir los valores correctos."

#: ../../docs/getting_started/step_by_step/signals.rst:237
#, fuzzy
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr "Para emitir una señal por código, utiliza la función ``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:263
msgid "Conclusion"
msgstr "Conclusión"

#: ../../docs/getting_started/step_by_step/signals.rst:265
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Muchos de los tipos de nodos incorporados en Godot proporcionan señales que "
"puedes utilizar para detectar eventos. Por ejemplo, un :ref:`Area2D "
"<class_Area2D>`, el cual representa una moneda, emite una señal del tipo  "
"``body_entered`` cada vez que el cuerpo físico del jugador entra a su forma "
"de colisión, permitiéndote saber cuando el jugador la ha recolectado."

#: ../../docs/getting_started/step_by_step/signals.rst:270
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"En la siguiente sección, :ref:`doc_your_first_game`, construirás un juego "
"completo que incluirá varios usos de señales para conectar diferentes "
"componentes del juego."
