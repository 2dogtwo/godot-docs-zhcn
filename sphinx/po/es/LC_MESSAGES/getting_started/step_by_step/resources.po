# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-14 16:05+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/resources.rst:4
msgid "Resources"
msgstr "Recursos"

#: ../../docs/getting_started/step_by_step/resources.rst:7
msgid "Nodes and resources"
msgstr "Nodos y recursos"

#: ../../docs/getting_started/step_by_step/resources.rst:9
#, fuzzy
msgid ""
"Up to this tutorial, we focused on the :ref:`Node <class_Node>` class in "
"Godot as that's the one you use to code behavior and most of the engine's "
"features rely on it. There is another datatype that is just as important: :"
"ref:`Resource <class_Resource>`."
msgstr ""
"Hasta ahora, los :ref:`Nodos <class_Node>` han sido el tipo de datos más "
"importante en Godot, ya que la mayoría de los comportamientos y "
"características del motor se implementan a través de ellos. Hay otro tipo de "
"datos que es igualmente importante :ref:`Recursos <class_Resource>`."

#: ../../docs/getting_started/step_by_step/resources.rst:15
msgid ""
"*Nodes* give you functionality: they draw sprites, 3D models, simulate "
"physics, arrange user interfaces, etc. **Resources** are **data "
"containers**. They don't do anything on their own: instead, nodes use the "
"data contained in resources."
msgstr ""
"Los *Nodes* te dan funcionalidad: Dibujan sprites, modelos 3D, simulan "
"físicas, organizan interfaces gráficas, etc. Los **Resources** son **data "
"containers**. Ellos no hacen nada por su cuenta: en su lugar, los nodos usan "
"los datos contenidos en los **Resources**."

#: ../../docs/getting_started/step_by_step/resources.rst:19
#, fuzzy
msgid ""
"Anything Godot saves or loads from disk is a resource. Be it a scene (a ."
"tscn or an .scn file), an image, a script... Here are some ``Resource`` "
"examples: :ref:`Texture <class_Texture>`, :ref:`Script <class_Script>`, :ref:"
"`Mesh <class_Mesh>`, :ref:`Animation <class_Animation>`, :ref:`AudioStream "
"<class_AudioStream>`, :ref:`Font <class_Font>`, :ref:`Translation "
"<class_Translation>`."
msgstr ""
"Ejemplos de recursos son :ref:`Texture <class_Texture>`, :ref:`Script "
"<class_Script>`, :ref:`Mesh <class_Mesh>`, :ref:`Animation "
"<class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :ref:`Font "
"<class_Font>`, :ref:`Translation <class_Translation>`, etc."

#: ../../docs/getting_started/step_by_step/resources.rst:26
#, fuzzy
msgid ""
"When the engine loads a resource from disk, **it only loads it once**. If a "
"copy of that resource is already in memory, trying to load the resource "
"again will return the same copy every time. As resources only contain data, "
"there is no need to duplicate them."
msgstr ""
"Cuando se carga un recurso desde el disco, **siempre se carga una vez**. "
"Esto significa que, si hay una copia de ese recurso ya cargado en la "
"memoria, intentar cargar el recurso de nuevo devolverá la misma copia una y "
"otra vez. Esto se corresponde con el hecho de que los recursos son sólo "
"contenedores de datos, por lo que no es necesario duplicarlos."

#: ../../docs/getting_started/step_by_step/resources.rst:31
#, fuzzy
msgid ""
"Every object, be it a Node or a Resource, can export properties. There are "
"many types of Properties, like String, integer, Vector2, etc., and any of "
"these types can become a resource. This means that both nodes and resources "
"can contain resources as properties:"
msgstr ""
"Normalmente, cada objeto en Godot (Nodo, Recurso, o cualquier otra cosa) "
"puede exportar propiedades, las propiedades pueden ser de muchos tipos (como "
"un string, integer, Vector2, etc) y uno de esos tipos puede ser un recurso. "
"Esto significa que tanto los nodos como los recursos pueden contener "
"recursos como propiedades. Para hacerlo un poco más visual:"

#: ../../docs/getting_started/step_by_step/resources.rst:39
msgid "External vs built-in"
msgstr "Externo vs built-in"

#: ../../docs/getting_started/step_by_step/resources.rst:41
#, fuzzy
msgid "There are two ways to save resources. They can be:"
msgstr "Hay dos formas de obtener certificados:"

#: ../../docs/getting_started/step_by_step/resources.rst:43
msgid "**External** to a scene, saved on the disk as individual files."
msgstr ""
"**External** a una escena, guardada en el disco como archivos individuales."

#: ../../docs/getting_started/step_by_step/resources.rst:44
msgid ""
"**Built-in**, saved inside the \\*.tscn or the \\*.scn file they're attached "
"to."
msgstr ""
"**Built-in**, guardado dentro del archivo \\*.tscn o \\*.scn  al que están "
"adjuntos."

#: ../../docs/getting_started/step_by_step/resources.rst:46
msgid ""
"To be more specific, here's a :ref:`Texture <class_Texture>` in a :ref:"
"`Sprite <class_Sprite>` node:"
msgstr ""
"Para ser más específico, aquí tenemos :ref:`Texture <class_Texture>` en un "
"nodo :ref:`Sprite <class_Sprite>`:"

#: ../../docs/getting_started/step_by_step/resources.rst:51
#, fuzzy
msgid ""
"Clicking the resource preview allows us to view and edit the resource's "
"properties."
msgstr "Clic derecho en la variable permite configurar sus propiedades:"

#: ../../docs/getting_started/step_by_step/resources.rst:55
msgid ""
"The path property tells us where the resource comes from. In this case, it "
"comes from a PNG image called ``robi.png``. When the resource comes from a "
"file like this, it is an external resource. If you erase the path or this "
"path is empty, it becomes a built-in resource."
msgstr ""
"La propiedad \"path\" nos dice de donde proviene el recurso. En este caso, "
"proviene de una imagen PNG llamada ``robi.png``. Cuando el recurso proviene "
"de un archivo como este, es un recurso externo. Si borra la ruta o esta ruta "
"está vacía, se convierte en un recurso incorporado."

#: ../../docs/getting_started/step_by_step/resources.rst:60
msgid ""
"The switch between built-in and external resources happens when you save the "
"scene. In the example above, if you erase the path \\`\"res://robi.png\"\\` "
"and save, Godot will save the image inside the .tscn scene file."
msgstr ""
"El cambio entre recursos incorporados y externos se produce al guardar la "
"escena. En el ejemplo anterior, si borra la ruta \\`\"res://robi.png\"\\` y "
"guardas, Godot guardará la imagen dentro del archivo de escena .tscn."

#: ../../docs/getting_started/step_by_step/resources.rst:66
msgid ""
"Even if you save a built-in resource, when you instance a scene multiple "
"times, the engine will only load one copy of it."
msgstr ""
"Incluso si guardas un recurso incorporado, cuando hagas múltiples instancias "
"de una escena, el motor sólo cargará una copia del recurso."

#: ../../docs/getting_started/step_by_step/resources.rst:70
msgid "Loading resources from code"
msgstr "Cargando recursos desde código"

#: ../../docs/getting_started/step_by_step/resources.rst:72
msgid ""
"There are two ways to load resources from code. First, you can use the "
"``load()`` function anytime:"
msgstr ""
"Hay dos maneras de cargar recursos desde el código. La primera es usando la "
"función ``load()`` en cualquier momento:"

#: ../../docs/getting_started/step_by_step/resources.rst:90
msgid ""
"You can also ``preload`` resources. Unlike ``load``, this function will read "
"the file from disk and load it at compile-time. As a result, you cannot call "
"preload with a variable path: you need to use a constant string."
msgstr ""
"También puedes ``preload`` recursos. A diferencia de ```load``, esta función "
"leerá el archivo desde el disco y lo cargará en tiempo de compilación. Como "
"resultado, no se puede llamar a ``preload`` con una ruta variable: es "
"necesario utilizar una cadena constante."

#: ../../docs/getting_started/step_by_step/resources.rst:106
msgid "Loading scenes"
msgstr "Cargando escenas"

#: ../../docs/getting_started/step_by_step/resources.rst:108
#, fuzzy
msgid ""
"Scenes are also resources, but there is a catch. Scenes saved to disk are "
"resources of type :ref:`PackedScene <class_PackedScene>`. The scene is "
"packed inside a resource."
msgstr ""
"Las escenas también son recursos, pero hay una trampa. Las escenas guardadas "
"en el disco son recursos del tipo :ref:`PackedScene <class_PackedScene>`. "
"Esto significa que la escena está empaquetada dentro de un recurso."

#: ../../docs/getting_started/step_by_step/resources.rst:112
#, fuzzy
msgid ""
"To get an instance of the scene, you have to use the :ref:`PackedScene."
"instance() <class_PackedScene_method_instance>` method."
msgstr ""
"Para obtener una instancia de la escena, se debe usar el método :ref:"
"`PackedScene.instance() <class_PackedScene_instance>`."

#: ../../docs/getting_started/step_by_step/resources.rst:133
#, fuzzy
msgid ""
"This method creates the nodes in the scene's hierarchy, configures them, and "
"returns the root node of the scene. You can then add it as a child of any "
"other node."
msgstr ""
"Este método crea nodos en la estructura de la escena, los configura (asigna "
"las propiedades) y retorna el nodo raíz de la escena, el cual puede ser "
"agregado a cualquier otro nodo."

#: ../../docs/getting_started/step_by_step/resources.rst:137
#, fuzzy
msgid ""
"The approach has several advantages. As the :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` function is pretty fast, you can create "
"new enemies, bullets, effects, etc. without having to load them again from "
"disk each time. Remember that, as always, images, meshes, etc. are all "
"shared between the scene instances."
msgstr ""
"Este enfoque tiene muchas ventajas. Como la función :ref:`PackedScene."
"instance() <class_PackedScene_instance>` es bastante rápida, agregar "
"contenido extra a la escena puede hacerse de manera eficiente. Nuevos "
"enemigos, balas, efectos, etc. pueden ser agregados o eliminados rápidamente "
"si tener que cargarlos nuevamente de  disco cada vez. Es importante recordar "
"que, como siempre, imágenes, mallas, etc. son compartidas entre las "
"instancias de escena."

#: ../../docs/getting_started/step_by_step/resources.rst:144
msgid "Freeing resources"
msgstr "Liberando recursos"

#: ../../docs/getting_started/step_by_step/resources.rst:146
#, fuzzy
msgid ""
"When a ``Resource`` is no longer in use, it will automatically free itself. "
"Since, in most cases, Resources are contained in Nodes, when you free a "
"node, the engine frees all the resources it owns as well if no other node "
"uses them."
msgstr ""
"El recurso se extiende desde :ref:`Referencia <class_Reference>`. Como tal, "
"cuando un recurso ya no está en uso, se liberará automáticamente. Dado que, "
"en la mayoría de los casos, los Recursos están contenidos en Nodos, scripts "
"u otros recursos, cuando un nodo es eliminado o liberado, todos los recursos "
"hijos también son liberados."

#: ../../docs/getting_started/step_by_step/resources.rst:151
#, fuzzy
msgid "Creating your own resources"
msgstr "Liberando recursos"

#: ../../docs/getting_started/step_by_step/resources.rst:153
msgid ""
"Like any Object in Godot, users can also script Resources. Resource scripts "
"inherit the ability to freely translate between object properties and "
"serialized text or binary data (/*.tres, /*.res). They also inherit the "
"reference-counting memory management from the Reference type."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:158
msgid ""
"This comes with many distinct advantages over alternative data structures, "
"such as JSON, CSV, or custom TXT files. Users can only import these assets "
"as a :ref:`Dictionary <class_Dictionary>` (JSON) or as a :ref:`File "
"<class_File>` to parse. What sets Resources apart is their inheritance of :"
"ref:`Object <class_Object>`, :ref:`Reference <class_Reference>`, and :ref:"
"`Resource <class_Resource>` features:"
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:165
msgid ""
"They can define constants, so constants from other data fields or objects "
"are not needed."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:167
msgid ""
"They can define methods, including setter/getter methods for properties. "
"This allows for abstraction and encapsulation of the underlying data. If the "
"Resource script's structure needs to change, the game using the Resource "
"need not also change."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:169
msgid ""
"They can define signals, so Resources can trigger responses to changes in "
"the data they manage."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:171
msgid ""
"They have defined properties, so users know 100% that their data will exist."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:173
msgid ""
"Resource auto-serialization and deserialization is a built-in Godot Engine "
"feature. Users do not need to implement custom logic to import/export a "
"resource file's data."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:175
msgid ""
"Resources can even serialize sub-Resources recursively, meaning users can "
"design even more sophisticated data structures."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:177
msgid ""
"Users can save Resources as version-control-friendly text files (\\*.tres). "
"Upon exporting a game, Godot serializes resource files as binary files (\\*."
"res) for increased speed and compression."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:179
msgid ""
"Godot Engine's Inspector renders and edits Resource files out-of-the-box. As "
"such, users often do not need to implement custom logic to visualize or edit "
"their data. To do so, double-click the resource file in the FileSystem dock "
"or click the folder icon in the Inspector and open the file in the dialog."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:181
msgid ""
"They can extend **other** resource types besides just the base Resource."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:185
msgid ""
"Resources and Dictionaries are also different in that both are passed by "
"reference, but only Resources are reference-counted. This means that if a "
"Dictionary is passed between objects, and the first object is deleted, it "
"will invalidate the second object's variable. This is not so for Resources "
"which won't free their memory until *all* instances are gone."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:215
msgid "Godot makes it easy to create custom Resources in the Inspector."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:217
msgid ""
"Create a plain Resource object in the Inspector. This can even be a type "
"that derives Resource, so long as your script is extending that type."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:218
msgid "Set the ``script`` property in the Inspector to be your script."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:220
msgid ""
"The Inspector will now display your Resource script's custom properties. If "
"one edits those values and saves the resource, the Inspector serializes the "
"custom properties too! To save a resource from the Inspector, click the "
"Inspector's tools menu (top right), and select \"Save\" or \"Save As...\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:225
msgid ""
"If the script's language supports :ref:`script classes "
"<doc_scripting_continued_class_name>`, then it streamlines the process. "
"Defining a name for your script alone will add it to the Inspector's "
"creation dialog. This will auto-add your script to the Resource object you "
"create."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:230
#, fuzzy
msgid "Let's see some examples."
msgstr "Algunos ejemplos:"

#: ../../docs/getting_started/step_by_step/resources.rst:303
msgid ""
"Resource scripts are similar to Unity's ScriptableObjects. The Inspector "
"provides built-in support for custom resources. If desired though, users can "
"even design their own Control-based tool scripts and combine them with an :"
"ref:`EditorPlugin <class_EditorPlugin>` to create custom visualizations and "
"editors for their data."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:309
msgid ""
"Unreal Engine 4's DataTables and CurveTables are also easy to recreate with "
"Resource scripts. DataTables are a String mapped to a custom struct, similar "
"to a Dictionary mapping a String to a secondary custom Resource script."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:345
msgid ""
"Instead of just inlining the Dictionary values, one could also, "
"alternatively..."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:347
msgid ""
"Import a table of values from a spreadsheet and generate these key-value "
"pairs, or..."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:349
msgid ""
"Design a visualization within the editor and create a simple plugin that "
"adds it to the Inspector when you open these types of Resources."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:352
msgid ""
"CurveTables are the same thing, except mapped to an Array of float values or "
"a :ref:`Curve <class_Curve>`/:ref:`Curve2D <class_Curve2D>` resource object."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:357
msgid ""
"Beware that resource files (\\*.tres/\\*.res) will store the path of the "
"script they use in the file. When loaded, they will fetch and load this "
"script as an extension of their type. This means that trying to assign a "
"subclass, i.e. an inner class of a script (such as using the ``class`` "
"keyword in GDScript) won't work. Godot will not serialize the custom "
"properties on the script subclass properly."
msgstr ""

#: ../../docs/getting_started/step_by_step/resources.rst:363
msgid ""
"In the example below, Godot would load the ``Node`` script, see that it "
"doesn't extend ``Resource``, and then determine that the script failed to "
"load for the Resource object since the types are incompatible."
msgstr ""
