# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-09 12:15+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/resources.rst:4
msgid "Resources"
msgstr "Recursos"

#: ../../docs/getting_started/step_by_step/resources.rst:7
msgid "Nodes and resources"
msgstr "Nodos y recursos"

#: ../../docs/getting_started/step_by_step/resources.rst:9
msgid ""
"So far, :ref:`Nodes <class_Node>` have been the most important datatype in "
"Godot as most of the behaviors and features of the engine are implemented "
"through them. There is another datatype that is equally important: :ref:"
"`Resource <class_Resource>`."
msgstr ""
"Hasta ahora, los :ref:`Nodos <class_Node>` han sido el tipo de datos más "
"importante en Godot, ya que la mayoría de los comportamientos y "
"características del motor se implementan a través de ellos. Hay otro tipo de "
"datos que es igualmente importante :ref:`Recursos <class_Resource>`."

#: ../../docs/getting_started/step_by_step/resources.rst:15
msgid ""
"Where *Nodes* focus on behaviors, such as drawing a sprite, drawing a 3D "
"model, physics, GUI controls, etc,"
msgstr ""
"Donde los *Nodos* se enfocan en comportamientos como dibujar un sprite, "
"dibujar un modelo 3D, física, controles GUI, etc,"

#: ../../docs/getting_started/step_by_step/resources.rst:18
msgid ""
"**Resources** are mere **data containers**. This means that they don't do "
"any action nor process any information. Resources just contain data."
msgstr ""
"Los **Recursos** son simples **contenedores de datos**. Esto significa que "
"no realizan ninguna acción ni procesan ninguna información. Los recursos "
"sólo contienen datos."

#: ../../docs/getting_started/step_by_step/resources.rst:22
msgid ""
"Examples of resources are :ref:`Texture <class_Texture>`, :ref:`Script "
"<class_Script>`, :ref:`Mesh <class_Mesh>`, :ref:`Animation "
"<class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :ref:`Font "
"<class_Font>`, :ref:`Translation <class_Translation>`, etc."
msgstr ""
"Ejemplos de recursos son :ref:`Texture <class_Texture>`, :ref:`Script "
"<class_Script>`, :ref:`Mesh <class_Mesh>`, :ref:`Animation "
"<class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :ref:`Font "
"<class_Font>`, :ref:`Translation <class_Translation>`, etc."

#: ../../docs/getting_started/step_by_step/resources.rst:32
msgid ""
"When Godot saves or loads (from disk) a scene (.tscn or .scn), an image "
"(png, jpg), a script (.gd) or pretty much anything, that file is considered "
"a resource."
msgstr ""
"Cuando Godot guarda o carga (desde el disco) una escena (.tscn o.scn), una "
"imagen (png, jpg), un script (.gd) o casi cualquier cosa, ese archivo se "
"considera un recurso."

#: ../../docs/getting_started/step_by_step/resources.rst:36
msgid ""
"When a resource is loaded from disk, **it is always loaded once**. That "
"means, if there is a copy of that resource already loaded in memory, trying "
"to load the resource again will return the same copy again and again. This "
"corresponds with the fact that resources are just data containers, so there "
"is no need to have them duplicated."
msgstr ""
"Cuando se carga un recurso desde el disco, **siempre se carga una vez**. "
"Esto significa que, si hay una copia de ese recurso ya cargado en la "
"memoria, intentar cargar el recurso de nuevo devolverá la misma copia una y "
"otra vez. Esto se corresponde con el hecho de que los recursos son sólo "
"contenedores de datos, por lo que no es necesario duplicarlos."

#: ../../docs/getting_started/step_by_step/resources.rst:42
msgid ""
"Typically, every object in Godot (Node, Resource, or anything else) can "
"export properties. Properties can be of many types (like a string, integer, "
"Vector2, etc) and one of those types can be a resource. This means that both "
"nodes and resources can contain resources as properties. To make it a little "
"more visual:"
msgstr ""
"Normalmente, cada objeto en Godot (Nodo, Recurso, o cualquier otra cosa) "
"puede exportar propiedades, las propiedades pueden ser de muchos tipos (como "
"un string, integer, Vector2, etc) y uno de esos tipos puede ser un recurso. "
"Esto significa que tanto los nodos como los recursos pueden contener "
"recursos como propiedades. Para hacerlo un poco más visual:"

#: ../../docs/getting_started/step_by_step/resources.rst:51
msgid "External vs built-in"
msgstr "Externo vs built-in"

#: ../../docs/getting_started/step_by_step/resources.rst:53
msgid ""
"The resource properties can reference resources in two ways, *external* (on "
"disk) or **built-in**."
msgstr ""
"Las propiedades del recurso pueden hacer referencia a los recursos de dos "
"maneras, *externo* (en disco) o **integrado**."

#: ../../docs/getting_started/step_by_step/resources.rst:56
msgid ""
"To be more specific, here's a :ref:`Texture <class_Texture>` in a :ref:"
"`Sprite <class_Sprite>` node:"
msgstr ""
"Para ser más específico, aquí tenemos :ref:`Texture <class_Texture>` en un "
"nodo :ref:`Sprite <class_Sprite>`:"

#: ../../docs/getting_started/step_by_step/resources.rst:61
msgid ""
"Pressing the \">\" button on the right side of the preview allows us to view "
"and edit the resources properties. One of the properties (path) shows where "
"it comes from. In this case, it comes from a png image."
msgstr ""
"Pulsando el botón \">\" a la derecha de la vista previa podemos ver y editar "
"las propiedades de los recursos. Una de las propiedades (path) muestra de "
"dónde proviene. En este caso, proviene de una imagen png."

#: ../../docs/getting_started/step_by_step/resources.rst:67
msgid ""
"When the resource comes from a file, it is considered an *external* "
"resource. If the path property is erased (or it never had a path to begin "
"with), it is considered a built-in resource."
msgstr ""
"Cuando el recurso proviene de un archivo, se considera un recurso *externo*. "
"Si la propiedad path es eliminada (o nunca tuvo una ruta de inicio), se "
"considera un recurso integrado."

#: ../../docs/getting_started/step_by_step/resources.rst:71
msgid ""
"For example, if the path \\`\"res://robi.png\"\\` is erased from the \"path"
"\" property in the above example, and then the scene is saved, the resource "
"will be saved inside the .tscn scene file, no longer referencing the "
"external \"robi.png\". However, even if saved as built-in, and even though "
"the scene can be instanced multiple times, the resource will always be "
"loaded only once. That means, different Robi robot scenes instanced at the "
"same time will still share the same image."
msgstr ""
"Por ejemplo, si la ruta \\`\"res://robi.png\"\\` es eliminada de la "
"propiedad \"path\" en el ejemplo anterior, y la escena es grabada, el "
"recurso se grabará dentro del archivo de escena .tscn, no referenciando más "
"al \"robi.png\" externo. Sin embargo, aún guardada como built-in, aunque la "
"escena sea instanciada muchas veces, el recurso será cargado sólo una vez. "
"Esto significa que diferentes escenas del robot Robi pueden ser instanciadas "
"al mismo tiempo y compartirán la imagen."

#: ../../docs/getting_started/step_by_step/resources.rst:80
msgid "Loading resources from code"
msgstr "Cargando recursos desde código"

#: ../../docs/getting_started/step_by_step/resources.rst:82
msgid ""
"Loading resources from code is easy. There are two ways to do it. The first "
"is to use load(), like this:"
msgstr ""
"Cargar recursos desde código es simple. Hay dos modos de hacerlo, el primero "
"es usar load(), de este modo:"

#: ../../docs/getting_started/step_by_step/resources.rst:101
msgid ""
"The second way is more optimal, but only works with a string constant "
"parameter because it loads the resource at compile-time."
msgstr ""
"La segunda forma es más óptima, pero sólo funciona con una cadena constante "
"como parámetro, porque carga el recurso en tiempo de compilación."

#: ../../docs/getting_started/step_by_step/resources.rst:116
msgid "Loading scenes"
msgstr "Cargando escenas"

#: ../../docs/getting_started/step_by_step/resources.rst:117
msgid ""
"Scenes are also resources, but there is a catch. Scenes saved to disk are "
"resources of type :ref:`PackedScene <class_PackedScene>`. This means that "
"the scene is packed inside a resource."
msgstr ""
"Las escenas también son recursos, pero hay una trampa. Las escenas guardadas "
"en el disco son recursos del tipo :ref:`PackedScene <class_PackedScene>`. "
"Esto significa que la escena está empaquetada dentro de un recurso."

#: ../../docs/getting_started/step_by_step/resources.rst:121
msgid ""
"To obtain an instance of the scene, the method :ref:`PackedScene.instance() "
"<class_PackedScene_instance>` must be used."
msgstr ""
"Para obtener una instancia de la escena, se debe usar el método :ref:"
"`PackedScene.instance() <class_PackedScene_instance>`."

#: ../../docs/getting_started/step_by_step/resources.rst:143
msgid ""
"This method creates the nodes in the scene's hierarchy, configures them "
"(sets all the properties) and returns the root node of the scene, which can "
"be added to any other node."
msgstr ""
"Este método crea nodos en la estructura de la escena, los configura (asigna "
"las propiedades) y retorna el nodo raíz de la escena, el cual puede ser "
"agregado a cualquier otro nodo."

#: ../../docs/getting_started/step_by_step/resources.rst:147
msgid ""
"The approach has several advantages. As the :ref:`PackedScene.instance() "
"<class_PackedScene_instance>` function is pretty fast, adding extra content "
"to the scene can be done efficiently. New enemies, bullets, effects, etc can "
"be added or removed quickly, without having to load them again from disk "
"each time. It is important to remember that, as always, images, meshes, etc "
"are all shared between the scene instances."
msgstr ""
"Este enfoque tiene muchas ventajas. Como la función :ref:`PackedScene."
"instance() <class_PackedScene_instance>` es bastante rápida, agregar "
"contenido extra a la escena puede hacerse de manera eficiente. Nuevos "
"enemigos, balas, efectos, etc. pueden ser agregados o eliminados rápidamente "
"si tener que cargarlos nuevamente de  disco cada vez. Es importante recordar "
"que, como siempre, imágenes, mallas, etc. son compartidas entre las "
"instancias de escena."

#: ../../docs/getting_started/step_by_step/resources.rst:156
msgid "Freeing resources"
msgstr "Liberando recursos"

#: ../../docs/getting_started/step_by_step/resources.rst:158
msgid ""
"Resource extends from :ref:`Reference <class_Reference>`. As such, when a "
"resource is no longer in use, it will automatically free itself. Since, in "
"most cases, Resources are contained in Nodes, scripts or other resources, "
"when a node is removed or freed, all the children resources are freed too."
msgstr ""
"El recurso se extiende desde :ref:`Referencia <class_Reference>`. Como tal, "
"cuando un recurso ya no está en uso, se liberará automáticamente. Dado que, "
"en la mayoría de los casos, los Recursos están contenidos en Nodos, scripts "
"u otros recursos, cuando un nodo es eliminado o liberado, todos los recursos "
"hijos también son liberados."

#: ../../docs/getting_started/step_by_step/resources.rst:165
msgid "Scripting"
msgstr "Scripting"

#: ../../docs/getting_started/step_by_step/resources.rst:167
msgid ""
"Like any object in Godot, not just nodes, resources can be scripted, too. "
"However, there isn't generally much of an advantage, as resources are just "
"data containers."
msgstr ""
"Como cualquier objeto en Godot, no sólo nodos, Resources pueden contener "
"scripts también. Sin embargo, no hay mucha ventaja ya que los recursos son "
"sólo contenedores de datos."
