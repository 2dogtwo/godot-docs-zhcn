# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-17 12:25+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:4
msgid "Custom drawing in 2D"
msgstr "Niestandardowe rysowanie 2D"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:7
msgid "Why?"
msgstr "Dlaczego?"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:9
msgid ""
"Godot has nodes to draw sprites, polygons, particles, and all sorts of "
"stuff. For most cases, this is enough; but not always. Before crying in "
"fear, angst, and rage because a node to draw that specific *something* does "
"not exist... it would be good to know that it is possible to easily make any "
"2D node (be it :ref:`Control <class_Control>` or :ref:`Node2D "
"<class_Node2D>` based) draw custom commands. It is *really* easy to do it, "
"too."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:17
msgid "But..."
msgstr "Ale..."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:19
msgid ""
"Custom drawing manually in a node is *really* useful. Here are some examples "
"why:"
msgstr "Ręczne rysowanie w węźle jest przydatne. Oto kilka przykładów:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:22
msgid ""
"Drawing shapes or logic that is not handled by nodes (example: making a node "
"that draws a circle, an image with trails, a special kind of animated "
"polygon, etc)."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:25
msgid ""
"Visualizations that are not that compatible with nodes: (example: a tetris "
"board). The tetris example uses a custom draw function to draw the blocks."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:28
msgid ""
"Drawing a large number of simple objects. Custom drawing avoids the overhead "
"of using nodes which makes it less memory intensive and potentially faster."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:31
msgid ""
"Making a custom UI control. There are plenty of controls available, but it's "
"easy to run into the need to make a new, custom one."
msgstr ""
"Tworzenie własnego sterowania dla UI. Dostępnych jest wiele elementów "
"sterujących, ale łatwo można natknąć się na potrzebę stworzenia nowego, "
"niestandardowego."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:35
msgid "OK, how?"
msgstr "OK, ale jak?"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:37
#, fuzzy
msgid ""
"Add a script to any :ref:`CanvasItem <class_CanvasItem>` derived node, like :"
"ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`. Then override "
"the ``_draw()`` function."
msgstr ""
"Dodaj skrypt do dowolnego węzła pochodnego:ref:`CanvasItem "
"<class_CanvasItem>`, takiego jak :ref:`Control <class_Control>` lub :ref:"
"`Node2D <class_Node2D>`. Następnie nadpisz funkcję _draw()."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:57
msgid ""
"Draw commands are described in the :ref:`CanvasItem <class_CanvasItem>` "
"class reference. There are plenty of them."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:61
msgid "Updating"
msgstr "Aktualizowanie"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:63
#, fuzzy
msgid ""
"The ``_draw()`` function is only called once, and then the draw commands are "
"cached and remembered, so further calls are unnecessary."
msgstr ""
"Funkcja _draw() jest wywoływana tylko raz, a następnie komendy draw są "
"buforowane i zapamiętywane, kolejne wywołania nie są konieczne."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:66
#, fuzzy
msgid ""
"If re-drawing is required because a state or something else changed, simply "
"call :ref:`CanvasItem.update() <class_CanvasItem_method_update>` in that "
"same node and a new ``_draw()`` call will happen."
msgstr ""
"Jeśli wymagane jest ponowne narysowanie, ponieważ stan lub innego się "
"zmieniło, po prostu wywołaj :ref:`CanvasItem.update() "
"<class_CanvasItem_method_update>` w tym samym węźle a nastąpi nowe wywołanie "
"_draw()."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:70
#, fuzzy
msgid ""
"Here is a little more complex example, a texture variable that will be "
"redrawn if modified:"
msgstr ""
"Oto nieco bardziej złożony przykład. Zmienna tekstury, która zostanie "
"ponownie narysowana w przypadku modyfikacji:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:114
#, fuzzy
msgid ""
"In some cases, it may be desired to draw every frame. For this, just call "
"``update()`` from the ``_process()`` callback, like this:"
msgstr ""
"W niektórych przypadkach może być konieczne narysowanie każdej ramki. W tym "
"celu wywołaj wywołanie update() z wywołania zwrotnego _process() w ten "
"sposób:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:146
msgid "An example: drawing circular arcs"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:148
msgid ""
"We will now use the custom drawing functionality of the Godot Engine to draw "
"something that Godot doesn't provide functions for. As an example, Godot "
"provides a ``draw_circle()`` function that draws a whole circle. However, "
"what about drawing a portion of a circle? You will have to code a function "
"to perform this and draw it yourself."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:154
msgid "Arc function"
msgstr "Funkcja arc"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:156
msgid ""
"An arc is defined by its support circle parameters, that is, the center "
"position and the radius. The arc itself is then defined by the angle it "
"starts from and the angle at which it stops. These are the 4 arguments that "
"we have to provide to our drawing function. We'll also provide the color "
"value, so we can draw the arc in different colors if we wish."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:161
msgid ""
"Basically, drawing a shape on the screen requires it to be decomposed into a "
"certain number of points linked from one to the next. As you can imagine, "
"the more points your shape is made of, the smoother it will appear, but the "
"heavier it will also be in terms of processing cost. In general, if your "
"shape is huge (or in 3D, close to the camera), it will require more points "
"to be drawn without it being angular-looking. On the contrary, if your shape "
"is small (or in 3D, far from the camera), you may decrease its number of "
"points to save processing costs; this is known as *Level of Detail (LoD)*. "
"In our example, we will simply use a fixed number of points, no matter the "
"radius."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:201
msgid ""
"Remember the number of points our shape has to be decomposed into? We fixed "
"this number in the ``nb_points`` variable to a value of ``32``. Then, we "
"initialize an empty ``PoolVector2Array``, which is simply an array of "
"``Vector2``\\ s."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:205
msgid ""
"The next step consists of computing the actual positions of these 32 points "
"that compose an arc. This is done in the first for-loop: we iterate over the "
"number of points for which we want to compute the positions, plus one to "
"include the last point. We first determine the angle of each point, between "
"the starting and ending angles."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:210
msgid ""
"The reason why each angle is decreased by 90° is that we will compute 2D "
"positions out of each angle using trigonometry (you know, cosine and sine "
"stuff...). However, to be simple, ``cos()`` and ``sin()`` use radians, not "
"degrees. The angle of 0° (0 radian) starts at 3 o'clock, although we want to "
"start counting at 12 o'clock. So we decrease each angle by 90° in order to "
"start counting from 12 o'clock."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:216
msgid ""
"The actual position of a point located on a circle at angle ``angle`` (in "
"radians) is given by ``Vector2(cos(angle), sin(angle))``. Since ``cos()`` "
"and ``sin()`` return values between -1 and 1, the position is located on a "
"circle of radius 1. To have this position on our support circle, which has a "
"radius of ``radius``, we simply need to multiply the position by ``radius``. "
"Finally, we need to position our support circle at the ``center`` position, "
"which is performed by adding it to our ``Vector2`` value. Finally, we insert "
"the point in the ``PoolVector2Array`` which was previously defined."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:224
msgid ""
"Now, we need to actually draw our points. As you can imagine, we will not "
"simply draw our 32 points: we need to draw everything that is between each "
"of them. We could have computed every point ourselves using the previous "
"method, and drew it one by one. But this is too complicated and inefficient "
"(except if explicitly needed), so we simply draw lines between each pair of "
"points. Unless the radius of our support circle is big, the length of each "
"line between a pair of points will never be long enough to see them. If that "
"were to happen, we would simply need to increase the number of points."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:234
#, fuzzy
msgid "Draw the arc on the screen"
msgstr "Tworzenie ekranu menu głównego"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:236
msgid ""
"We now have a function that draws stuff on the screen; it is time to call it "
"inside the ``_draw()`` function:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:263
msgid "Result:"
msgstr "Rezultat:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:268
msgid "Arc polygon function"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:270
msgid ""
"We can take this a step further and not only write a function that draws the "
"plain portion of the disc defined by the arc, but also its shape. The method "
"is exactly the same as before, except that we draw a polygon instead of "
"lines:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:310
msgid "Dynamic custom drawing"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:312
msgid ""
"All right, we are now able to draw custom stuff on the screen. However, it "
"is static; let's make this shape turn around the center. The solution to do "
"this is simply to change the angle_from and angle_to values over time. For "
"our example, we will simply increment them by 50. This increment value has "
"to remain constant or else the rotation speed will change accordingly."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:318
msgid ""
"First, we have to make both angle_from and angle_to variables global at the "
"top of our script. Also note that you can store them in other nodes and "
"access them using ``get_node()``."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:340
msgid "We make these values change in the _process(delta) function."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:342
msgid ""
"We also increment our angle_from and angle_to values here. However, we must "
"not forget to ``wrap()`` the resulting values between 0 and 360°! That is, "
"if the angle is 361°, then it is actually 1°. If you don't wrap these "
"values, the script will work correctly, but the angle values will grow "
"bigger and bigger over time until they reach the maximum integer value Godot "
"can manage (``2^31 - 1``). When this happens, Godot may crash or produce "
"unexpected behavior."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:349
msgid ""
"Finally, we must not forget to call the ``update()`` function, which "
"automatically calls ``_draw()``. This way, you can control when you want to "
"refresh the frame."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:389
#, fuzzy
msgid ""
"Also, don't forget to modify the ``_draw()`` function to make use of these "
"variables:"
msgstr ""
"Nie zapomnij również zmodyfikować funkcji _draw(), aby wykorzystać te "
"zmienne:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:413
msgid ""
"Let's run! It works, but the arc is rotating insanely fast! What's wrong?"
msgstr ""
"Zatem zaczynajmy! Działa ale arc obraca się nieziemsko szybko! Co jest nie "
"tak?"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:416
#, fuzzy
msgid ""
"The reason is that your GPU is actually displaying the frames as fast as it "
"can. We need to \"normalize\" the drawing by this speed; to achieve that, we "
"have to make use of the ``delta`` parameter of the ``_process()`` function. "
"``delta`` contains the time elapsed between the two last rendered frames. It "
"is generally small (about 0.0003 seconds, but this depends on your "
"hardware), so using ``delta`` to control your drawing ensures that your "
"program runs at the same speed on everybody's hardware."
msgstr ""
"Dzieje się tak dlatego, że twój układ GPU wyświetla klatki tak szybko, jak "
"to tylko możliwe. Musimy \"znormalizować\" szybkość rysowania. Aby to "
"osiągnąć musimy skorzystać z parametru \"delta\" funkcji _process(). delta\" "
"określa czas, jaki upłynął między dwoma ostatnimi renderowanymi klatkami. "
"Zazwyczaj jest on mały (około 0.0003 sekundy, ale zależy to od sprzętu). Tak "
"więc użycie 'delty' do sterowania rysunkiem zapewnia, że Twój program będzie "
"działał z taką samą prędkością na każdym sprzęcie."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:424
#, fuzzy
msgid ""
"In our case, we simply need to multiply our ``rotation_angle`` variable by "
"``delta`` in the ``_process()`` function. This way, our 2 angles will be "
"increased by a much smaller value, which directly depends on the rendering "
"speed."
msgstr ""
"W naszym przypadku musimy po prostu pomnożyć naszą zmienną \"rotation_ang\" "
"przez \"delta\" w funkcji _process(). W ten sposób nasze 2 kąty zostaną "
"zwiększone o znacznie mniejszą wartość, która bezpośrednio zależy od "
"szybkości renderowania."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:458
msgid "Let's run again! This time, the rotation displays fine!"
msgstr "Uruchommy to znowu! Tym razem, obraca się prawidłowo!"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:461
msgid "Tools"
msgstr "Narzędzia"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:463
msgid ""
"Drawing your own nodes might also be desired while running them in the "
"editor to use as a preview or visualization of some feature or behavior."
msgstr ""
"Podczas uruchamiania węzłów w edytorze może być również pożądane narysowanie "
"własnych węzłów w celu użycia ich jako podglądu lub wizualizacji jakiejś "
"funkcji lub zachowania."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:467
msgid ""
"Remember to use the \"tool\" keyword at the top of the script (check the :"
"ref:`doc_gdscript` reference if you forgot what this does)."
msgstr ""
"Pamiętaj, aby użyć słowa kluczowego \"tool\" na górze skryptu (sprawdź "
"odnośnik :ref:`doc_gdscript` jeśli zapomniałeś, co to robi)."
