# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-30 19:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:4
msgid "Using multiple threads"
msgstr "Użyj wielowątkowości"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:7
msgid "Threads"
msgstr "Wątki"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:9
msgid ""
"Threads allow simultaneous execution of code. It allows off-loading work "
"from the main thread."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:12
msgid "Godot supports threads and provides many handy functions to use them."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:14
msgid ""
"If using other languages (C#, C++), it may be easier to use the threading "
"classes they support."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:18
#, fuzzy
msgid "Creating a Thread"
msgstr "Tworzenie motywu"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:20
#, fuzzy
msgid "Creating a thread is very simple, just use the following code:"
msgstr "Scena Mob będzie korzystać z następujących węzłów:"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:46
msgid ""
"Your function will, then, run in a separate thread until it returns. Even if "
"the function has returned already, the thread must collect it, so call :ref:"
"`Thread.wait_to_finish()<class_Thread_method_wait_to_finish>`, which will "
"wait until the thread is done (if not done yet), then properly dispose of it."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:52
msgid "Mutexes"
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:54
msgid ""
"Accessing objects or data from multiple threads is not always supported (if "
"you do it, it will cause unexpected behaviors or crashes). Read the :ref:"
"`doc_thread_safe_apis` documentation to understand which engine APIs support "
"multiple thread access."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:59
msgid ""
"When processing your own data or calling your own functions, as a rule, try "
"to avoid accessing the same data directly from different threads. You may "
"run into synchronization problems, as the data is not always updated between "
"CPU cores when modified. Always use a :ref:`Mutex<class_Mutex>` when "
"accessing a piece of data from different threads."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:65
msgid ""
"When calling :ref:`Mutex.lock()<class_Mutex_method_lock>`, a thread ensures "
"that all other threads will be blocked (put on suspended state) if they try "
"to *lock* the same mutex. When the mutex is unlocked by calling :ref:`Mutex."
"unlock()<class_Mutex_method_unlock>`, the other threads will be allowed to "
"proceed with the lock (but only one at a time)."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:71
#, fuzzy
msgid "Here is an example of using a Mutex:"
msgstr "Poniżej znajduje się przykładowy plik klasy."

#: ../../docs/tutorials/threads/using_multiple_threads.rst:106
#, fuzzy
msgid "Semaphores"
msgstr "Użyj semaforu"

#: ../../docs/tutorials/threads/using_multiple_threads.rst:108
msgid ""
"Sometimes you want your thread to work *\"on demand\"*. In other words, tell "
"it when to work and let it suspend when it isn't doing anything. For this, :"
"ref:`Semaphores<class_Semaphore>` are used. The function :ref:`Semaphore."
"wait()<class_Semaphore_method_wait>` is used in the thread to suspend it "
"until some data arrives."
msgstr ""

#: ../../docs/tutorials/threads/using_multiple_threads.rst:114
msgid ""
"The main thread, instead, uses :ref:`Semaphore."
"post()<class_Semaphore_method_post>` to signal that data is ready to be "
"processed:"
msgstr ""
