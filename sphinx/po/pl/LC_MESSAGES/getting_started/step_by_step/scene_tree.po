# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-26 22:13+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:4
#: ../../docs/getting_started/step_by_step/scene_tree.rst:41
msgid "SceneTree"
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:7
msgid "Introduction"
msgstr "Wprowadzenie"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:9
msgid ""
"This is where things start getting abstract, but don't panic. There's not "
"much more depth than this."
msgstr ""
"W tym miejscu sprawy zaczynają nabierać abstrakcyjnego charakteru, ale nie "
"wpadaj w panikę. Niewiele jest później trudniejszych rzeczy."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:12
msgid ""
"In previous tutorials, everything revolved around the concept of nodes. "
"Scenes are simply a collection of nodes. They become active once they enter "
"the *scene tree*."
msgstr ""
"W poprzednich samouczkach wszystko kręciło się wokół koncepcji węzłów. Sceny "
"są po prostu zbiorem węzłów. Stają się one aktywne po wejściu do *drzewa "
"sceny*(scene tree)."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:16
msgid ""
"This concept deserves going into a little more detail. In fact, the scene "
"system is not even a core component of Godot as it is possible to skip it "
"and write a script (or C++ code) that talks directly to the servers, but "
"making a game that way would be a lot of work."
msgstr ""
"Koncepcja ta zasługuje na bardziej szczegółowe omówienie. W rzeczywistości, "
"system scen nie jest nawet kluczowym elementem Godota, ponieważ można go "
"pominąć i napisać skrypt (lub kod C++), który komunikuje bezpośrednio się z "
"serwerami, ale robienie gry w ten sposób wymagałoby dużo pracy."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:22
msgid "MainLoop"
msgstr "Pętla Główna"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:24
msgid ""
"The way Godot works internally is as follows. There is the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the beginning. "
"Afterwards, all drivers, servers, scripting languages, scene system, etc are "
"loaded."
msgstr ""
"Godot działa wewnętrznie w następujący sposób. Istnieje klasa :ref:`OS "
"<class_OS>`, która jest jedyną instancją działającą na początku. Następnie "
"wczytywane są wszystkie sterowniki, serwery, języki skryptowe, system scen "
"itp."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:29
msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be supplied "
"a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all this is "
"internals working (you can check main/main.cpp file in the source code if "
"you are ever interested to see how this works internally)."
msgstr ""
"Po zakończeniu inicjalizacji, :ref:`OS <class_OS>` musi być dostarczony :ref:"
"`MainLoop <class_MainLoop>` do uruchomienia. Do tej pory wszystko to działa "
"(możesz sprawdzić plik main/main.cpp w kodzie źródłowym, jeśli jesteś "
"zainteresowany tym, jak to działa od podstaw)."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:35
msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-synchronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is low level and "
"when making games in Godot, writing your own MainLoop seldom makes sense."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:43
msgid ""
"One of the ways to explain how Godot works is that it's a high level game "
"engine over a low level middleware."
msgstr ""
"Jednym ze sposobów, aby wyjaśnić, jak działa Godot jest przedstawienie jego "
"jako silnik gry wysokopoziomowy o niskim poziomie oprogramowania "
"pośredniczącego."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:46
msgid ""
"The scene system is the game engine, while the :ref:`OS <class_OS>` and "
"servers are the low level API."
msgstr ""
"System scen jest mechanizmem silnika gry, podczas gdy :ref:`OS <class_OS>` i "
"serwery są niskim poziomem API."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:49
msgid ""
"In any case, the scene system provides its own main loop to OS, :ref:"
"`SceneTree <class_SceneTree>`. This is automatically instanced and set when "
"running a scene, no need to do any extra work."
msgstr ""
"W każdym razie, system scen zapewnia własną pętlę główną dla systemu "
"operacyjnego, :ref:`SceneTree <class_SceneTree>`. Jest on automatycznie "
"instancjowany i ustawiany podczas uruchamiania sceny, bez konieczności "
"wykonywania dodatkowej pracy."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:54
msgid ""
"It's important to know that this class exists because it has a few important "
"uses:"
msgstr ""
"Ważne jest, aby wiedzieć, że ta klasa istnieje, ponieważ ma kilka ważnych "
"zastosowań:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:57
msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, to which a scene is "
"added as a child when it's first opened to become part of the *Scene Tree* "
"(more on that next)"
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:60
#, fuzzy
msgid ""
"It contains information about the groups and has the means to call all nodes "
"in a group or get a list of them."
msgstr ""
"Zawiera informacje o grupach i ma możliwość wywołania węzłów w grupie lub "
"uzyskania ich listy."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:62
msgid ""
"It contains some global state functionality, such as setting pause mode or "
"quitting the process."
msgstr ""
"Zawiera on pewne funkcje stanu globalnego, takie jak ustawianie trybu pauzy "
"lub zamykanie procesu."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:65
msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by simply calling :ref:`Node."
"get_tree() <class_Node_method_get_tree>`."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:71
msgid "Root viewport"
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:73
msgid ""
"The root :ref:`Viewport <class_Viewport>` is always at the top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""
"Korzeń :ref:`Viewport <class_Viewport>` jest zawsze na górze sceny. W węźle "
"można go uzyskać na dwa różne sposoby:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:88
msgid ""
"This node contains the main viewport, anything that is a child of a :ref:"
"`Viewport <class_Viewport>` is drawn inside of it by default, so it makes "
"sense that the top of all nodes is always a node of this type otherwise "
"nothing would be seen!"
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:93
msgid ""
"While other viewports can be created in the scene (for split-screen effects "
"and such), this one is the only one that is never created by the user. It's "
"created automatically inside SceneTree."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:98
msgid "Scene tree"
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:100
msgid ""
"When a node is connected, directly or indirectly, to the root viewport, it "
"becomes part of the *scene tree*."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:103
msgid ""
"This means that as explained in previous tutorials, it will get the "
"_enter_tree() and _ready() callbacks (as well as _exit_tree())."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:108
msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access to "
"everything they need to process, get input, display 2D and 3D, "
"notifications, play sound, groups, etc. When they are removed from the "
"*scene tree*, they lose access."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:114
msgid "Tree order"
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:116
msgid ""
"Most node operations in Godot, such as drawing 2D, processing, or getting "
"notifications are done in tree order. This means that parents and siblings "
"with a smaller rank in the tree order will get notified before the current "
"node."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:124
msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr "\"Stanie się aktywnym\" poprzez wejście w *Drzewo Sceny*"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:126
msgid "A scene is loaded from disk or created by scripting."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:127
msgid ""
"The root node of that scene (only one root, remember?) is added as either a "
"child of the \"root\" Viewport (from SceneTree), or to any child or "
"grandchild of it."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:130
msgid ""
"Every node of the newly added scene, will receive the \"enter_tree\" "
"notification ( _enter_tree() callback in GDScript) in top-to-bottom order."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:133
msgid ""
"An extra notification, \"ready\" ( _ready() callback in GDScript) is "
"provided for convenience, when a node and all its children are inside the "
"active scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:136
msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( _exit_tree() callback in GDScript) in bottom-to-top order"
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:141
msgid "Changing current scene"
msgstr "Zmiana aktualnej sceny"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:143
msgid ""
"After a scene is loaded, it is often desired to change this scene for "
"another one. The simple way to do this is to use the :ref:`SceneTree."
"change_scene() <class_SceneTree_method_change_scene>` function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:161
msgid ""
"Rather than using file paths, one can also use ready-made :ref:`PackedScene "
"<class_PackedScene>` resources using the equivalent function :ref:`SceneTree."
"change_scene_to(PackedScene scene) <class_SceneTree_method_change_scene_to>`:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scene_tree.rst:182
msgid ""
"These are quick and useful ways to switch scenes but have the drawback that "
"the game will stall until the new scene is loaded and running. At some point "
"in your game, it may be desired to create proper loading screens with "
"progress bar, animated indicators or thread (background) loading. This must "
"be done manually using autoloads (see next chapter!) and :ref:"
"`doc_background_loading`."
msgstr ""
