# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 13:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:1
msgid "Signal"
msgstr "Sygnał"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Signals"
msgstr "Sygnały"

#: ../../docs/getting_started/step_by_step/signals.rst:10
msgid "Introduction"
msgstr "Wprowadzenie"

#: ../../docs/getting_started/step_by_step/signals.rst:12
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"Sygnały w Godot są odpowiednikiem wzorca *obserwatora*. Pozwalają węzłowi na "
"wysyłanie \"wiadomości\", które inne węzły mogą odczytywać i na nie "
"reagować. Przykładowo, zamiast bez przerwy sprawdzać, czy przycisk został "
"właśnie wciśnięty, to przycisk sam może wyemitować sygnał, kiedy zostanie "
"wciśnięty."

#: ../../docs/getting_started/step_by_step/signals.rst:17
msgid ""
"You can read more about the observer pattern here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"O wzorcu projektowym \"obserwator\", możesz przeczytać więcej tutaj: https://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:19
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"Sygnały są sposobem na *rozdzielenie* Twoich obiektów, co powoduje, że "
"pisany kod jest lepiej zorganizowany i łatwiej nim zarządzać. Zamiast "
"wymuszać na obiektach, żeby zawsze spodziewały się określonych obiektów, "
"mogą zamiast tego emitować sygnały, na które zareagują wszystkie "
"zainteresowane obiekty."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"Poniżej możesz zobaczyć przykłady, jak używać sygnałów w swoich projektach."

#: ../../docs/getting_started/step_by_step/signals.rst:27
msgid "Timer example"
msgstr "Przykład dla węzła Timer"

#: ../../docs/getting_started/step_by_step/signals.rst:29
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"Żeby zobaczyć, jak działają sygnały, użyjmy węzła :ref:`Timer "
"<class_Timer>`. Utwórz nową scenę z węzłem typu Node2D oraz jego dwoma "
"węzłami-dziećmi: węzłem Timer oraz a :ref:`Sprite <class_Sprite>`. W doku "
"Sceny, zmień nazwę węzła z Node2D na TimerExample."

#: ../../docs/getting_started/step_by_step/signals.rst:33
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Dla tekstury węzła Sprite, możesz użyć ikony Godota lub jakiegokolwiek "
"innego obrazu. Żeby to zrobić, naciśnij przycisk ``Załaduj`` w menu "
"rozwijalnym atrybutu Tekstura, należącym do węzła Sprite. Dodaj skrypt do "
"głównego węzła, ale nie dodawaj do niego jeszcze żadnego kodu."

#: ../../docs/getting_started/step_by_step/signals.rst:37
msgid "Your scene tree should look like this:"
msgstr "Drzewo sceny powinno tak wyglądać:"

#: ../../docs/getting_started/step_by_step/signals.rst:41
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"We właściwościach węzła Timer, zaznacz pole \"Tak\", znajdujące się obok "
"etykiety \"Autostart\". To spowoduje, że zegar wystartuje automatycznie, "
"kiedy uruchomisz scenę. Możesz zostawić *Czas oczekiwania* na 1 sekundę."

#: ../../docs/getting_started/step_by_step/signals.rst:45
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"Obok zakładki \"Inspektor\" znajduje się zakładka z etykietą \"Węzeł\". "
"Kliknij na tę zakładkę, żeby zobaczyć wszystkie sygnały, jakie ten węzeł "
"może wyemitować. w przypadku węzła typu Timer, zależy nam na sygnale "
"\"timeout\". Ten sygnał jest emitowany za każdym razem, kiedy czas Timera "
"osiąga ``0``."

#: ../../docs/getting_started/step_by_step/signals.rst:52
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"Kliknij na sygnał \"timeout()\" i wybierz \"Połącz...\" na dole panelu z "
"sygnałami. Zobaczysz wtedy okno, w którym będziesz mógł zdefiniować, w jaki "
"sposób chcesz połączyć sygnał:"

#: ../../docs/getting_started/step_by_step/signals.rst:58
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"Po lewej stronie znajdują się węzły w Twojej scenie - możesz wybrać węzeł, "
"który chcesz aby \"nasłuchiwał\" na nasz sygnał. Zauważ, że węzeł Timer jest "
"zaznaczony na niebiesko - to informacja, że jest to węzeł, który emituje ten "
"sygnał. Wybierz główny węzeł (TimerExample)."

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"Docelowy węzeł *musi* mieć dołączony skrypt, w przeciwnym wypadku otrzymasz "
"informację o błędzie."

#: ../../docs/getting_started/step_by_step/signals.rst:66
msgid ""
"If you toggle the Advanced menu, you'll see on the right side that you can "
"bind an arbitrary number of arguments of (possibly) different types. This "
"can be useful when you have more than one signal connected to the same "
"method, as each signal propagation will result in different values for those "
"extra call arguments."
msgstr ""
"Jeżeli rozwiniesz Zaawansowane menu, po prawej stronie zobaczysz, że możesz "
"przypisać dowolną liczbę argumentów (różnych) typów. To może być użyteczne w "
"momencie kiedy masz więcej niż jeden sygnał połączony do tej samej metody, "
"ponieważ każdy dodatkowy argument spowoduje podział na różne wartości dla "
"każdego sygnału."

#: ../../docs/getting_started/step_by_step/signals.rst:70
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"Na dole okna znajduje się pole \"Metoda odbiorcy\". Jest to nazwa funkcji w "
"skrypcie docelowego węzła, której chcesz użyć. Domyślnie Godot utworzy tę "
"funkcję, korzystając z następującej konwencji : "
"``_on_<nazwa_wezla>_<nazwa_sygnalu>`` . Oczywiście, jeśli chcesz, możesz "
"zmienić tę nazwę według uznania."

#: ../../docs/getting_started/step_by_step/signals.rst:75
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"Naciśnij przycisk \"Połącz\". Możesz zobaczyć, że funkcja została utworzona "
"w skrypcie:"

#: ../../docs/getting_started/step_by_step/signals.rst:96
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"Teraz możemy zastąpić tymczasowy kod jakimkolwiek innym, który ma być "
"uruchomiony w momencie odebrania sygnału. Spowodujmy, żeby węzeł Sprite "
"zaczął migać:"

#: ../../docs/getting_started/step_by_step/signals.rst:121
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"Odtwórz scenę i zwróć uwagę, że węzeł Sprite miga z każdą sekundą. Można "
"kontrolować czas migotania przy użyciu właściwości *Czas oczekiwania*, "
"należącej do węzła Timer."

#: ../../docs/getting_started/step_by_step/signals.rst:125
msgid "Connecting signals in code"
msgstr "Podłączanie sygnałów z poziomu kodu"

#: ../../docs/getting_started/step_by_step/signals.rst:127
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"Możesz także połączyć sygnał z poziomu kodu zamiast w edytorze. Jest to "
"zazwyczaj niezbędne przy korzystaniu z Węzłów tworzonych w kodzie, w takim "
"przypadku użycie edytora do stworzenia połączenia jest niemożliwe."

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"Najpierw odłącz sygnał wybierając połączenie z zakładki \"Węzeł\", należącej "
"do węzła Timer i kliknij *odłącz*."

#: ../../docs/getting_started/step_by_step/signals.rst:136
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"Aby dodać połączenie z poziomu kodu, może skorzystać z funkcji ``connect``. "
"Wstawimy tę funkcję do metody ``_ready()`` po to, żeby połączenie zostało "
"nawiązane zaraz po uruchomieniu. Składnia tej funkcji wygląda następująco: "
"``<wezel_zrodlowy>.connect(<nazwa_sygnalu>, <docelowy_wezel>, "
"<nazwa_funkcji_docelowej>)``. Poniżej znajduje się kod dla połączenia węzła "
"Timer:"

#: ../../docs/getting_started/step_by_step/signals.rst:171
msgid "Custom signals"
msgstr "Niestandardowe sygnały"

#: ../../docs/getting_started/step_by_step/signals.rst:173
msgid "You can also declare your own custom signals in Godot:"
msgstr "W Godot możesz także zadeklarować własne niestandardowe sygnały:"

#: ../../docs/getting_started/step_by_step/signals.rst:192
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"Raz zadeklarowane, twoje niestandardowe sygnały pojawią się w Inspektorze i "
"będą mogły być podłączone w taki sam sposób jak sygnały wbudowane w węzeł."

#: ../../docs/getting_started/step_by_step/signals.rst:195
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr "Aby wyemitować sygnał poprzez kod, użyj funkcji ``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:222
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""
"\"Sygnał\" może również opcjonalnie deklarować jeden lub więcej argumentów. "
"Nazwy argumentów umieść w nawiasie rozdzielając je przecinkiem:"

#: ../../docs/getting_started/step_by_step/signals.rst:243
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Argumenty Sygnału pojawią się w doku Węzłów edytora, Godot może użyć ich aby "
"wygenerować funkcje zwrotne za ciebie. Jednak wciąż możliwe jest "
"wyemitowanie dowolnej ilości argumentów emitując sygnał samemu. Aczkolwiek "
"to na programiście będzie w tedy spoczywała odpowiedzialność za wyemitowanie "
"poprawnych wartości."

#: ../../docs/getting_started/step_by_step/signals.rst:248
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr ""
"Aby przekazać wartości dodaj je jako drugi argument funkcji ``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:276
msgid "Conclusion"
msgstr "Wniosek"

#: ../../docs/getting_started/step_by_step/signals.rst:278
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Godot ma wiele wbudowanych typów węzłów, które dostarczają sygnałów aby "
"wykrywać wydarzenia. Na przykład, :ref:`Area2D <class_Area2D>` "
"reprezentująca monetę emituje sygnał ``body_entered``, kiedy fizyczne ciało "
"gracza wchodzi w jej kształt kolizyjny, co daję Tobie znać kiedy gracz ją "
"zebrał."

#: ../../docs/getting_started/step_by_step/signals.rst:283
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"W następnej sekcji, :ref:`doc_your_first_game` zbudujesz kompletną grę z "
"wykorzystaniem sygnałów, aby połączyć różne elementy gry."
