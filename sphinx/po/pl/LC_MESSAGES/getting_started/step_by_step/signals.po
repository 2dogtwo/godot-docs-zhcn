# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-29 21:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:4
msgid "Signals"
msgstr "Sygnały"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Introduction"
msgstr "Wprowadzenie"

#: ../../docs/getting_started/step_by_step/signals.rst:9
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"Sygnały w Godot są odpowednikiem wzorca *obserwatora*. Pozwalają węzłowi na "
"wysyłanie wiadomości, na które inne węzły mogą nasłuchiwać i reagować.  "
"Przykładowo, zamiast bez przerwy sprawdzać, czy przycisk jest w momencie "
"przyciskania, to przycisk może wyemitować sygnał, kiedy zostanie wciśnięty."

#: ../../docs/getting_started/step_by_step/signals.rst:14
msgid ""
"You can read more about the observer pattern here: http://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"O wzorcu projektowym obserwator, możesz przeczytać więcej tutaj: http://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:16
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"Sygnały są sposobem na *rozdzielenie* Twoich obiektów, co powoduje, że "
"pisany kod jest lepiej zorganizowany i łatwiej nim zarządzać. Zamiast "
"wymuszać na obiektach, żeby zawsze spodziewały się określonych obiektów, "
"mogą zamiast tego emitować sygnały, na które zareagują wszystkie "
"zainteresowane obiekty."

#: ../../docs/getting_started/step_by_step/signals.rst:21
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"Poniżej możesz zobaczyć przykłady, jak używać sygnałów w swoich projektach."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid "Timer example"
msgstr "Przykład dla węzła Timer"

#: ../../docs/getting_started/step_by_step/signals.rst:26
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node and two children: a Timer and a :ref:`Sprite "
"<class_Sprite>`. In the Scene dock, rename Node to TimerExample."
msgstr ""
"Żeby zobaczyć, jak działają sygnały, użyjmy węzła :ref:`Timer "
"<class_Timer>`. Utwórz nową scenę z węzłem typu Node oraz jego dwoma węzłami-"
"dziećmi: węzłem Timer oraz a :ref:`Sprite <class_Sprite>`. W doku sceny, "
"zmień nazwę węzła z Node na TimerExample."

#: ../../docs/getting_started/step_by_step/signals.rst:30
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Dla tekstury węzła Sprite, możesz użyć ikony Godota lub jakiegokolwiek "
"innego obrazu. Żeby to zrobić, naciśnij przycisk ``Załaduj`` w menu "
"rozwijalnym atrybutu Tekstura, należącym do węzła Sprite. Dodaj skrypt do "
"głównego węzła, ale nie dodawaj do niego jeszcze żadnego kodu."

#: ../../docs/getting_started/step_by_step/signals.rst:34
msgid "Your scene tree should look like this:"
msgstr "Drzewo sceny powinno tak wyglądać:"

#: ../../docs/getting_started/step_by_step/signals.rst:38
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"We właściwościach węzła Timer, zaznacz pole \"Tak\", znajdujące się obok "
"etykiety \"Autostart\". To spowoduje, że zegar wystartuje automatycznie, "
"kiedy uruchomisz scenę. Możesz zostawić *Czas oczekiwania* na 1 sekundę."

#: ../../docs/getting_started/step_by_step/signals.rst:42
#, fuzzy
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"Obok zakładki \"Inspektor\" znajduje się zakładka z etykietą \"Węzeł\". "
"Kliknij na tę zakładkę, żeby zobaczyć wszystkie sygnały, jakie ten węzeł "
"może wyemitować. w przypadku węzła  typu Timer, zależy nam na sygnale "
"\"timeout\". Ten sygnał jest emitowany za każdym razem, kiedy czas Timera "
"osiąga ``0``."

#: ../../docs/getting_started/step_by_step/signals.rst:49
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\". You'll see the "
"following window, where you can define how you want to connect the signal:"
msgstr ""
"Kliknij na sygnał \"timeout()\" i wybierz \"Connect...\". Zobaczysz wtedy "
"okno, w którym będziesz mógł zdefiniować, w jaki sposób chcesz połączyć "
"sygnał:"

#: ../../docs/getting_started/step_by_step/signals.rst:54
#, fuzzy
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is red "
"- this is *not* an error, but is a visual indication that it's the node that "
"is emitting the signal. Select the root node."
msgstr ""
"Po lewej stronie znajdują się węzły w Twojej scenie - możesz wybrać węzeł, "
"na którego sygnał chcesz \"nasłuchiwać\". Zauważ, że węzeł Timer jest "
"zaznaczony na czerwono - to *nie* jest błąd, tylko podkreślenie, że to jest "
"węzeł, który emituje sygnał. Wybierz główny węzeł."

#: ../../docs/getting_started/step_by_step/signals.rst:59
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"Docelowy węzeł *musi* mieć skrypt, albo otrzymasz informację o błędzie."

#: ../../docs/getting_started/step_by_step/signals.rst:62
msgid ""
"On the bottom of the window is a field labeled \"Method In Node\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"Na dole okna znajduje się pole \"Metoda w węźle\". Jest to nazwa funkcji w "
"skrypcie docelowego węzła, której chcesz użyć. Domyślnie Godot utworzy tę "
"funkcję, korzystając z następującej konwencji : "
"``_on_<nazwa_wezla>_<nazwa_sygnalu>`` . Oczywiście, jeśli chcesz, możesz "
"zmienić tę nazwę według uznania."

#: ../../docs/getting_started/step_by_step/signals.rst:67
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"Wybierz \"Connect\" i zobaczysz, że funkcja została utworzona w skrypcie:"

#: ../../docs/getting_started/step_by_step/signals.rst:87
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"Teraz możemy zastąpić tymczasowy kod jakimkolwiek innym, który ma być "
"uruchomiony w momencie odebrania sygnału. Spowodujmy, żeby węzeł Sprite "
"zaczął migać:"

#: ../../docs/getting_started/step_by_step/signals.rst:111
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"Odtwórz scenę i zauważ, że węzeł Sprite miga z każdą sekundą. Możesz "
"kontrolować czas migotania przy użyciu właściwości *Czas oczekiwania*, "
"należącej do węzła Timer."

#: ../../docs/getting_started/step_by_step/signals.rst:115
msgid "Connecting signals in code"
msgstr "Podłączanie sygnałów w kodzie"

#: ../../docs/getting_started/step_by_step/signals.rst:117
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"Możesz także połączyć sygnał z poziomu kodu zamiast w edytorze. To jest "
"zazwyczaj przydatne podczas tworzenia węzłów w kodzie, ponieważ nie można "
"ustanowić połączenia dla tego węzła w edytorze."

#: ../../docs/getting_started/step_by_step/signals.rst:121
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"Najpierw odłącz sygnał wybierając połączenie z zakładki \"Węzeł\", należącej "
"do węzła Timer i kliknij *odłącz*."

#: ../../docs/getting_started/step_by_step/signals.rst:126
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"Aby dodać połączenie z poziomu kodu, może skorzystać z funkcji ``connect``. "
"Wstawimy tę funkcję do metody ``_ready()`` po to, żeby połączenie zostało "
"nawiązane zaraz o po uruchomieniu. Składnia tej funkcji wygląda tak "
"następująco: ``<wezel_zrodlowy>.connect(<nazwa_sygnalu>, <docelowy_wezel>, "
"<nazwa_funkcji_docelowej>)``. Poniżej znajduje się kod dla połączenia węzła "
"Timer:"

#: ../../docs/getting_started/step_by_step/signals.rst:159
msgid "Custom signals"
msgstr "Niestandardowe sygnały"

#: ../../docs/getting_started/step_by_step/signals.rst:161
msgid "You can also declare your own custom signals in Godot:"
msgstr "W Godot możesz także zadeklarować własne rodzaje sygnałów:"

#: ../../docs/getting_started/step_by_step/signals.rst:179
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"Raz zadeklarowane, twoje niestandardowe sygnały pojawią się w Inspektorze i "
"będą mogły być podłączone w taki sam sposób jak sygnały wbudowane w węzeł."

#: ../../docs/getting_started/step_by_step/signals.rst:182
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr "Aby wyemitować sygnał poprzez kod, użyj funkcji ``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:208
msgid "Conclusion"
msgstr "Wniosek"

#: ../../docs/getting_started/step_by_step/signals.rst:210
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Godot ma wiele wbudowanych typów węzłów, które dostarczają sygnałów aby "
"wykrywać wydarzenia. Na przykład,  :ref:`Area2D <class_Area2D>` "
"reprezentująca monetę emituje ``body_entered`` sygnał kiedy fizyczne ciało "
"gracza wchodzi w jej kształt kolizyjny, co daję tobie znać kiedy gracz ją "
"zebrał."

#: ../../docs/getting_started/step_by_step/signals.rst:215
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"W następnej sekcji, :ref:`doc_your_first_game` zbudujesz kompletną grę z "
"wykorzystaniem sygnałów, aby połączyć różne elementy gry."
