# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-27 13:49+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:4
msgid "Shaders"
msgstr "シェーダー"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:7
msgid "Introduction"
msgstr "はじめに"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:9
msgid ""
"Shaders are unique programs that run on the GPU. They are used to specify "
"how to take mesh data (vertex positions, colors, normals, etc.) and draw "
"them to the screen. Shaders do not process information the same way a normal "
"program does because they are optimized for running on the GPU. One "
"consequence of this is that shaders do not retain their data after they run; "
"they output a final color to the screen and then move on. Accordingly, there "
"is no way of accessing the color output from the last run of the shader."
msgstr ""
"シェーダーは、GPU上で実行される独自のプログラムです。メッシュデータ(頂点の位"
"置、色、法線など)を取得して画面に描画する方法を指定するために使用されます。"
"シェーダーは、GPUでの実行用に最適化されているため、通常のプログラムと同じよう"
"に情報を処理しません。この結果、シェーダーは実行後にデータを保持しません。最"
"終的な色を画面に出力し、次に進みます。したがって、シェーダーの最後の実行から"
"のカラー出力にアクセスする方法はありません。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:16
msgid ""
"Godot uses a shader language very similar to GLSL, but with added "
"functionality and slightly less flexibility. The reason for doing this is "
"that Godot integrates built-in functionality to make writing complex shaders "
"substantially easier. Godot wraps the user-written shader code in code of "
"its own. That way, Godot handles a lot of the low-level stuff that the user "
"doesn't need to worry about, and it is able to parse your shader code and "
"use it to affect the rendering pipeline. For more advanced shaders, you can "
"turn this functionality off using a render_mode."
msgstr ""
"Godotは、GLSLと非常によく似たシェーダー言語を使用しますが、機能が追加され、柔"
"軟性がわずかに低下します。これを行う理由は、Godotが組み込み関数を統合して、複"
"雑なシェーダーの作成を大幅に簡単にするためです。 Godotは、ユーザーが作成した"
"シェーダーコードを独自のコードでラップします。このようにして、Godotはユーザー"
"が心配する必要のない低レベルのものを多数処理し、シェーダーコードを解析し、そ"
"れを使用してレンダリングパイプラインに影響を与えることができます。より高度な"
"シェーダーの場合、render_modeを使用してこの機能をオフにできます。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:23
msgid ""
"This document provides you with some information about shaders, specific to "
"Godot. For a detailed reference of the shading language in Godot see the :"
"ref:`Godot shading language doc<doc_shading_language>`."
msgstr ""
"このドキュメントは、Godot固有のシェーダーに関する情報を提供します。 Godotの"
"シェーディング言語の詳細なリファレンスについては、\\ :ref:`Godot shading "
"language doc<doc_shading_language>` を参照してください。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:27
msgid "Shader types"
msgstr "シェーダーの種類"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:29
msgid ""
"Instead of supplying a general purpose configuration for all uses (2D, 3D, "
"particles), Godot shaders must specify what they are intended for. Different "
"types support different render modes, built-in variables, and processing "
"functions."
msgstr ""
"すべての用途(2D、3D、パーティクル)に汎用的な設定を提供する代わりに、Godot"
"シェーダーは目的を指定する必要があります。さまざまなタイプがさまざまなレンダ"
"リングモード、組み込み変数、および処理関数をサポートしています。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:33
msgid ""
"All shaders need to specify their type in the first line, in the following "
"format:"
msgstr ""
"すべてのシェーダーは、最初の行で次の形式でタイプを指定する必要があります:"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:39
msgid "Valid types are:"
msgstr "有効なタイプは以下のとおりです:"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:41
msgid ":ref:`spatial <doc_spatial_shader>`: For 3D rendering."
msgstr ":ref:`spatial <doc_spatial_shader>`: 3Dレンダリング用。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:42
msgid ":ref:`canvas_item <doc_canvas_item_shader>`: For 2D rendering."
msgstr ":ref:`canvas_item <doc_canvas_item_shader>`: 2Dレンダリング用。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:43
msgid ":ref:`particles <doc_particle_shader>`: For particle systems."
msgstr ":ref:`particles <doc_particle_shader>`: パーティクルシステム用。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:45
msgid ""
"For detailed information on each shading type, see the corresponding "
"reference document."
msgstr ""
"各シェーディングタイプの詳細については、対応するリファレンスドキュメントを参"
"照してください。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:48
msgid "Render modes"
msgstr "レンダリングモード"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:50
msgid ""
"Different shader types support different render modes. They are optional "
"and, if specified, must be after the *shader_type*. Render modes are used to "
"alter the way built-in functionality is handled. For example, it is common "
"to use the render mode ``unshaded`` to skip the built-in light processor "
"function."
msgstr ""
"さまざまなシェーダータイプがさまざまなレンダリングモードをサポートします。こ"
"れらは、オプションであり、指定する場合は、\\ *shader_type*\\ の後に指定する必"
"要があります。レンダリングモードは、組み込み機能の処理方法を変更するために使"
"用されます。たとえば、レンダリングモード ``unshaded`` を使用して、組み込みの"
"ライトプロセッサ機能をスキップするのが一般的です。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:55
msgid "Render modes are specified underneath the shader type:"
msgstr "レンダリングモードは、シェーダータイプの下に指定されます:"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:62
msgid ""
"Each shader type has a different list of render modes available. See the "
"document for each shader type for a complete list of render modes."
msgstr ""
"各シェーダータイプには、使用可能なレンダリングモードの異なるリストがありま"
"す。レンダリングモードの完全なリストについては、各シェーダータイプのドキュメ"
"ントを参照してください。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:66
msgid "Processor functions"
msgstr "プロセッサー関数"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:68
msgid ""
"Depending on the shader type, different processor functions may be "
"optionally overridden. For \"spatial\" and \"canvas_item\", it is possible "
"to override ``vertex``, ``fragment``, and ``light``. For \"particles\", only "
"``vertex`` can be overridden."
msgstr ""
"シェーダーのタイプに応じて、異なるプロセッサー関数がオプションでオーバーライ"
"ドされる場合があります。\"spatial\" および \"canvas_item\" の場合、\\ "
"``vertex``\\ 、\\ ``fragment`` および ``light`` をオーバーライドできま"
"す。\"particles\" の場合、オーバーライドできるのは``vertex`` のみです。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:73
msgid "Vertex processor"
msgstr "頂点プロセッサー"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:75
msgid ""
"The ``vertex`` processing function is called once for every vertex in "
"\"spatial\" and \"canvas_item\" shaders. For \"particles\" shaders, it is "
"called once for every particle."
msgstr ""
"``vertex`` 処理関数は、\"spatial\" および \"canvas_item\" シェーダーのすべて"
"の頂点に対して1回呼び出されます。\"particles\" シェーダーの場合、すべてのパー"
"ティクルに対して1回呼び出されます。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:78
msgid ""
"The ``vertex`` function is used to modify per-vertex information that will "
"be passed on to the fragment function. It can also be used to establish "
"variables that will be sent to the fragment function by using varyings(see "
"other doc)."
msgstr ""
"``vertex`` 関数は、フラグメント関数に渡される頂点ごとの情報を変更するために使"
"用されます。また、varying (他のドキュメントを参照)を使用してフラグメント関数"
"に送信される変数を設定するためにも使用できます。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:82
msgid ""
"By default, Godot will take your vertex information and transform it "
"accordingly to be drawn. If this is undesirable, you can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example of this."
msgstr ""
"デフォルトでは、Godotは頂点情報を取得し、それに応じて変換して描画します。これ"
"が望ましくない場合は、レンダリングモードを使用して自分でデータを変換できま"
"す。この例については、\\ :ref:`Spatial shader doc <doc_spatial_shader>` を参"
"照してください。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:87
msgid "Fragment processor"
msgstr "フラグメントプロセッサー"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:89
msgid ""
"The ``fragment`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in \"spatial\" and \"canvas_item\" "
"shaders."
msgstr ""
"``fragment`` 処理関数は、ピクセルごとにGodotマテリアルパラメーターを設定する"
"ために使用されます。このコードは、オブジェクトまたはプリミティブが描画するす"
"べての可視ピクセルで実行されます。\"spatial\" および \"canvas_item\" シェー"
"ダーでのみ使用できます。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:93
msgid ""
"The standard use of the fragment function is to set up material properties "
"that will be used to calculate lighting. For example, you would set values "
"for ``ROUGHNESS``, ``RIM``, or ``TRANSMISSION`` which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on effects that you do not use."
msgstr ""
"フラグメント関数の標準的な使用法は、ライティングの計算に使用されるマテリアル"
"プロパティを設定することです。たとえば、\\ ``ROUGHNESS``\\ 、\\ ``RIM``\\ ま"
"たは ``TRANSMISSION`` の値を設定して、ライトがそのフラグメントにどのように応"
"答するかをライト機能に伝えます。これにより、ユーザーが多くのコードを記述する"
"ことなく、複雑なシェーディングパイプラインを制御できます。この組み込み機能が"
"必要ない場合は、それを無視して独自のライト処理関数を記述すれば、Godotはそれを"
"最適化します。たとえば、\\ ``RIM`` に値を書き込まない場合、Godotはリム照明を"
"計算しません。コンパイル中、Godotは ``RIM`` が使用されているかどうかを確認し"
"ます。そうでない場合は、対応するすべてのコードを切り取ります。したがって、使"
"用しない効果の計算を無駄にすることはありません。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:103
msgid "Light processor"
msgstr "ライトプロセッサー"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:105
msgid ""
"The ``light`` processor runs per pixel too, but also runs for every light "
"that affects the object (and does not run if no lights affect the object). "
"It exists as a function called inside the ``fragment`` processor and "
"typically operates on the material properties setup inside the ``fragment`` "
"function."
msgstr ""
"``light`` プロセッサーもピクセルごとに実行されますが、オブジェクトに影響を与"
"えるすべてのライトに対しても実行されます(ライトがオブジェクトに影響を与えない"
"場合は実行されません)。これは ``fragment`` プロセッサー内で呼び出される関数と"
"して存在し、通常は ``fragment`` 関数内で設定されたマテリアルプロパティで動作"
"します。"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:110
msgid ""
"The ``light`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` and :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectively."
msgstr ""
"``light`` プロセッサは、2Dでは3Dとは異なる動作をします。それぞれの仕組みの説"
"明については、\\ :ref:`CanvasItem shaders <doc_canvas_item_shader>` と :ref:"
"`Spatial shaders <doc_spatial_shader>` のそれぞれのドキュメントを参照してくだ"
"さい 。"
