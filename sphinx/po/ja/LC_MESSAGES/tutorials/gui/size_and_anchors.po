# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 14:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/gui/size_and_anchors.rst:4
msgid "Size and anchors"
msgstr "サイズとアンカー"

#: ../../docs/tutorials/gui/size_and_anchors.rst:6
msgid ""
"If a game was always going to be run on the same device and at the same "
"resolution, positioning controls would be a simple matter of setting the "
"position and size of each one of them. Unfortunately, that is rarely the "
"case."
msgstr ""
"ゲームが常に同じデバイスの同じ解像度で実行される場合には、位置の制御は、それ"
"ぞれの位置とサイズを設定するだけの簡単な問題です。ですが残念ながら、それは"
"めった当てはまりません。"

#: ../../docs/tutorials/gui/size_and_anchors.rst:11
msgid ""
"Only TVs nowadays have a standard resolution and aspect ratio. Everything "
"else, from computer monitors to tablets, portable consoles and mobile phones "
"have different resolutions and aspect ratios."
msgstr ""
"最近のテレビだけが標準的な解像度とアスペクト比を備えています。パソコン用モニ"
"ターやタブレット、ポータブルコンソール、携帯電話に至るまで、他のすべては異な"
"る解像度とアスペクト比を持っています。"

#: ../../docs/tutorials/gui/size_and_anchors.rst:15
msgid ""
"There are several ways to handle this, but for now, let's just imagine that "
"the screen resolution has changed and the controls need to be re-positioned. "
"Some will need to follow the bottom of the screen, others the top of the "
"screen, or maybe the right or left margins."
msgstr ""
"これを処理する方法はいくつかありますが、今のところは、画面の解像度が変更さ"
"れ、コントロールを再配置する必要があることを想像してみましょう。画面の上部や"
"下部に合わせる必要があったり、あるいは、右または左の余白を必要とするもので"
"す。"

#: ../../docs/tutorials/gui/size_and_anchors.rst:22
msgid ""
"This is done by editing the *margin* properties of controls. Each control "
"has four margins: left, right, bottom and top. By default, all of them "
"represent a distance in pixels relative to the top-left corner of the parent "
"control or (in case there is no parent control) the viewport."
msgstr ""
"これは、コントロールの *Margin* プロパティを編集することにより行われます。各"
"コントロールには、Left、Right、Bottom、Top という4つのマージンがあります。デ"
"フォルトでは、それらはすべて、親コントロールまたは(親コントロールがない場合"
"は)ビューポートの左上隅からの相対的な距離をピクセル単位で表します。"

#: ../../docs/tutorials/gui/size_and_anchors.rst:29
#, fuzzy
msgid ""
"When horizontal (left, right) and/or vertical (top, bottom) anchors are "
"changed to 1, the margin values become relative to the bottom-right corner "
"of the parent control or viewport."
msgstr ""
"水平(Left、Right)アンカーおよび垂直(Top、Bottom)アンカー、もしくはどちらか一"
"方が1に変更されると、マージン値は親コントロールまたはビューポートの右下隅を基"
"準にした値になります。"

#: ../../docs/tutorials/gui/size_and_anchors.rst:35
msgid ""
"Here, the control is set to expand its bottom-right corner with that of the "
"parent, so when re-sizing the parent, the control will always cover it, "
"leaving a 20 pixel margin:"
msgstr ""
"ここでは、コントロールは親の右下隅を基準にして拡大するように設定されているの"
"で、親のサイズを変更すると、コントロールは常に20ピクセルの余白を残して親を覆"
"います:"

#: ../../docs/tutorials/gui/size_and_anchors.rst:42
msgid "Centering a control"
msgstr "コントロールのセンタリング"

#: ../../docs/tutorials/gui/size_and_anchors.rst:44
msgid ""
"To center a control in its parent, set its anchors to 0.5 and each margin to "
"half of its relevant dimension. For example, the code below shows how a "
"TextureRect can be centered in its parent:"
msgstr ""
"コントロールを親の中央に配置するには、アンカーを0.5に設定し、各マージンを関連"
"する寸法の半分に設定します。たとえば、次のコードは、TextureRectを親の中央に配"
"置する方法を示しています:"

#: ../../docs/tutorials/gui/size_and_anchors.rst:63
msgid ""
"Setting each anchor to 0.5 moves the reference point for the margins to the "
"center of its parent. From there, we set negative margins so that the "
"control gets its natural size."
msgstr ""
"各アンカーを0.5に設定すると、マージンの参照ポイントがその親の中心に移動しま"
"す。そこから、コントロールが自然なサイズになるように負のマージンを設定しま"
"す。"
