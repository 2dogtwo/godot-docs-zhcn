# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-07 14:35+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:4
msgid "Procedural geometry"
msgstr "手続き型ジオメトリ(幾何)"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:6
msgid ""
"There are many ways to procedurally generate geometry in Godot. In this "
"tutorial series we will explore a few of them. Each technique has its own "
"benefits and drawbacks, so it is best to understand each one and how it can "
"be useful in a given situation."
msgstr ""
"Godotでジオメトリを手続き的に生成する方法は多数あります。このチュートリアルシ"
"リーズでは、それらのいくつかを検討します。それぞれの手法には長所と短所がある"
"ため、それぞれを理解し、特定の状況でどのように役立つかを理解することが最善で"
"す。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:20
msgid "What is geometry?"
msgstr "ジオメトリとは何ですか？"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:22
msgid ""
"Geometry is a fancy way of saying shape. In computer graphics, geometry is "
"typically represented by an array of positions called \"vertices\". In "
"Godot, geometry is represented by Meshes."
msgstr ""
"ジオメトリは、形を洒落た言い方で表現したものです。コンピュータグラフィックス"
"では、ジオメトリは通常「頂点」と呼ばれる位置の配列で表されます。 Godotでは、"
"ジオメトリはメッシュで表されます。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:26
msgid "What is a Mesh?"
msgstr "メッシュとは何ですか?"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:28
msgid ""
"Many things in Godot have mesh in their name: the :ref:`Mesh <class_Mesh>`, "
"the :ref:`ArrayMesh <class_ArrayMesh>`, the :ref:`MeshInstance "
"<class_MeshInstance>`, the :ref:`MultiMesh <class_MultiMesh>`, and the :ref:"
"`MultiMeshInstance <class_MultiMeshInstance>`. While they are all related, "
"they have slightly different uses."
msgstr ""
"Godotの多くの物には名前にメッシュがあります: :ref:`Mesh <class_Mesh>`"
"\\ 、\\ :ref:`ArrayMesh <class_ArrayMesh>`\\ 、\\ :ref:`MeshInstance "
"<class_MeshInstance>`\\ 、\\ :ref:`MultiMesh < class_MultiMesh>`\\ 、および"
"\\ :ref:` MultiMeshInstance <class_MultiMeshInstance> `\\ 。それらはすべて関"
"連がありますが、用途が少し異なります。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:32
msgid ""
"Meshes and ArrayMeshes are resources that are drawn using a MeshInstance "
"node. Resources like Meshes and ArrayMeshes cannot be added to the scene "
"directly. A MeshInstance represents one instance of a mesh in your scene. "
"You can reuse a single mesh in multiple MeshInstances to draw it in "
"different parts of your scene with different materials or transformations "
"(scale, rotation, position etc.)."
msgstr ""
"MesheとArrayMeshは、MeshInstanceノードを使用して描画されるリソースです。 "
"MesheやArrayMeshなどのリソースをシーンに直接追加することはできません。 "
"MeshInstanceは、シーン内のメッシュの1つのインスタンスを表します。単一のメッ"
"シュを複数のMeshInstanceで再利用して、異なるマテリアルまたは変換(スケール、回"
"転、位置など)を使用してシーンの異なる部分に描画することができます。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:38
msgid ""
"If you are going to draw the same object many times, it can be helpful to "
"use a MultiMesh with a MultiMeshInstance. The MultiMeshInstance draws meshes "
"thousands of times very cheaply. It takes advantage of hardware instancing "
"in order to do so. The drawback with using a MultiMeshInstance is that you "
"are limited to one material for all instances. It uses an instance array to "
"store different colors and transformations for each instance, but all the "
"instances use the same material."
msgstr ""
"同じオブジェクトを何度も描画する場合は、MultiMeshとMultiMeshInstanceを使用す"
"ると便利です。 MultiMeshInstanceは非常に安価に何千回もメッシュを描画します。"
"そのためには、ハードウェアのインスタンス化を利用します。 MultiMeshInstanceを"
"使用する場合の欠点は、すべてのインスタンスで1つのマテリアルに制限されることで"
"す。インスタンス配列を使用して、インスタンスごとに異なる色と変換を保存します"
"が、すべてのインスタンスは同じマテリアルを使用します。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:46
msgid "What a Mesh is"
msgstr "メッシュとは"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:48
msgid ""
"A Mesh is composed of one or more surfaces. A surface is an array composed "
"of multiple sub-arrays containing vertices, normals, UVs, etc. Normally the "
"process of constructing surfaces and meshes is hidden from the user in the :"
"ref:`VisualServer <class_VisualServer>`, but with ArrayMeshes, the user can "
"construct a Mesh manually by passing in an array containing the surface "
"information."
msgstr ""
"メッシュは、1つ以上のサーフェスで構成されます。サーフェスは、頂点、法線、UVな"
"どを含む複数のサブ配列で構成される配列です。通常、サーフェスとメッシュを構築"
"するプロセスは、\\ :ref:`VisualServer <class_VisualServer>` でユーザーから隠"
"されていますが、ArrayMeshではユーザーは、サーフェス情報を含む配列を渡すことに"
"より、メッシュを手動で構築できます。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:54
msgid "Surfaces"
msgstr "サーフェス"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:56
msgid ""
"Each surface has its own material. Alternatively, you can override the "
"material for all surfaces in the Mesh when you use a MeshInstance using "
"``MeshInstance.override_material``."
msgstr ""
"各サーフェスには独自のマテリアルがあります。または、\\ ``MeshInstance."
"override_material`` を使用してMeshInstanceを使用するときに、メッシュ内のすべ"
"てのサーフェスのマテリアルをオーバーライドできます。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:60
msgid "Surface array"
msgstr "サーフェス配列"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:62
msgid ""
"The surface array is an array of length ``ArrayMesh.ARRAY_MAX``. Each "
"position in the array is filled with a sub-array containing per-vertex "
"information. For example, the array located at ``ArrayMesh.ARRAY_NORMAL`` is "
"a :ref:`PoolVector3Array <class_PoolVector3Array>` of vertex normals."
msgstr ""
"サーフェス配列は、長さ ``ArrayMesh.ARRAY_MAX`` の配列です。配列の各位置は、頂"
"点ごとの情報を含むサブ配列で埋められます。たとえば、\\ ``ArrayMesh."
"ARRAY_NORMAL`` にある配列は、頂点法線の :ref:`PoolVector3Array "
"<class_PoolVector3Array>` です。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:66
msgid ""
"The surface array can be indexed or non-indexed. Creating a non-indexed "
"array is as easy as not assigning an array at the index ``ArrayMesh."
"ARRAY_INDEX``. A non-indexed array stores unique vertex information for "
"every triangle, meaning that when two triangle share a vertex, the vertex is "
"duplicated in the array. An indexed surface array only stores vertex "
"information for each unique vertex and then also stores an array of indices "
"which maps out how to construct the triangles from the vertex array. In "
"general, using an indexed array is faster, but it means you have to share "
"vertex data between triangles, which is not always desired (e.g. when you "
"want per-face normals)."
msgstr ""
"サーフェス配列はインデックス付きでもインデックスなしでもかまいません。非イン"
"デックス配列の作成は、インデックス ``ArrayMesh.ARRAY_INDEX`` で配列を割り当て"
"ないのと同じくらい簡単です。インデックスなしの配列には、すべての三角形の一意"
"の頂点情報が格納されます。つまり、2つの三角形が頂点を共有する場合、頂点は配列"
"内で複製されます。インデックス付きの表面配列は、各一意の頂点の頂点情報のみを"
"格納し、頂点配列から三角形を構築する方法をマップするインデックスの配列も格納"
"します。一般に、インデックス付き配列の使用は高速ですが、三角形間で頂点データ"
"を共有する必要があることを意味します。これは常に望ましいわけではありません(た"
"とえば、面ごとの法線が必要な場合)。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:75
msgid "Tools"
msgstr "ツール"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:77
msgid ""
"Godot provides different ways of accessing and working with geometry. More "
"information on each will be provided in the following tutorials."
msgstr ""
"Godotは、ジオメトリにアクセスして操作するさまざまな方法を提供します。それぞれ"
"の詳細については、次のチュートリアルで説明します。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:81
msgid "ArrayMesh"
msgstr "\\ ArrayMesh"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:83
msgid ""
"The ArrayMesh resource extends Mesh to add a few different quality of life "
"functions, and most importantly, the ability to construct a Mesh surface "
"through scripting."
msgstr ""
"ArrayMeshリソースはMeshを拡張して、いくつかの異なるQOL(利便性向上用の)関数を"
"追加します。最も重要なことは、スクリプティングによってMeshサーフェスを構築す"
"る機能です。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:86
msgid ""
"For more information about the ArrayMesh, please see the :ref:`ArrayMesh "
"tutorial <doc_arraymesh>`."
msgstr ""
"ArrayMeshの詳細については、\\ :ref:`ArrayMesh tutoria <doc_arraymesh>` を参照"
"してください。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:89
msgid "MeshDataTool"
msgstr "\\ MeshDataTool"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:91
msgid ""
"The MeshDataTool is a resource that converts Mesh data into arrays of "
"vertices, faces, and edges that can be modified at runtime."
msgstr ""
"MeshDataToolは、メッシュデータを、実行時に変更できる頂点、面、およびエッジの"
"配列に変換するリソースです。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:94
msgid ""
"For more information about the MeshDataTool, please see the :ref:"
"`MeshDataTool tutorial <doc_meshdatatool>`."
msgstr ""
"MeshDataToolの詳細については、\\ :ref:`MeshDataTool tutorial "
"<doc_meshdatatool>` を参照してください。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:97
msgid "SurfaceTool"
msgstr "\\ SurfaceTool"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:99
msgid ""
"The SurfaceTool allows the creation of Meshes using an OpenGL 1.x immediate "
"mode style interface."
msgstr ""
"SurfaceToolでは、OpenGL 1.xイミディエイトモードスタイルのインターフェイスを使"
"用してメッシュを作成できます。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:101
msgid ""
"For more information about the SurfaceTool, please see the :ref:`SurfaceTool "
"tutorial <doc_surfacetool>`."
msgstr ""
"SurfaceToolの詳細については、\\ :ref:`SurfaceTool tutorial "
"<doc_surfacetool>` を参照してください。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:104
msgid "ImmediateGeometry"
msgstr "\\ ImmediateGeometry"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:106
msgid ""
"ImmediateGeometry is a node that uses an immediate mode style interface "
"(like SurfaceTool) to draw objects. The difference between ImmediateGeometry "
"and the SurfaceTool is that ImmediateGeometry is a node itself that can be "
"added to the scene tree and is drawn directly from the code. The SurfaceTool "
"generates a Mesh that needs to be added a MeshInstance to be seen."
msgstr ""
"ImmediateGeometryは、イミディエイトモードスタイルのインターフェイス"
"(SurfaceToolなど)を使用してオブジェクトを描画するノードです。 "
"ImmediateGeometryとSurfaceToolの違いは、ImmediateGeometryはシーンツリーに追加"
"できるノード自体であり、コードから直接描画されることです。 SurfaceToolは、表"
"示するMeshInstanceに追加する必要があるメッシュを生成します。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:111
msgid ""
"ImmediateGeometry is useful for prototyping because of the straightforward "
"API, but it is slow because the geometry is rebuilt every frame. It is most "
"useful for quickly adding simple geometry to debug visually (e.g. by drawing "
"lines to visualize physics raycasts etc.)."
msgstr ""
"ImmediateGeometryは、簡単なAPIのためにプロトタイピングに役立ちますが、ジオメ"
"トリがフレームごとに再構築されるため、速度が遅くなります。単純なジオメトリを"
"すばやく追加して視覚的にデバッグするのに最も役立ちます(たとえば、物理的なレイ"
"キャストなどを視覚化するために線を描画する)。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:115
msgid ""
"For more information about ImmediateGeometry, please see the :ref:"
"`ImmediateGeometry tutorial <doc_immediategeometry>`."
msgstr ""
"ImmediateGeometryの詳細については、\\ :ref:`ImmediateGeometry tutorial "
"<doc_immediategeometry>` を参照してください。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:118
msgid "Which one should I use?"
msgstr "どちらを使うべきですか？"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:120
msgid ""
"Which method you use depends on what you are trying to do and what kind of "
"procedure you are comfortable with."
msgstr ""
"どの方法を使用するかは、何をしようとしているか、どのような手順に慣れているか"
"によって異なります。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:122
msgid ""
"Both SurfaceTool and ArrayMesh are excellent for generating static geometry "
"(meshes) that don't change over time."
msgstr ""
"SurfaceToolとArrayMeshはどちらも、時間とともに変化しない静的なジオメトリ(メッ"
"シュ)の生成に最適です。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:124
msgid ""
"Using an ArrayMesh is slightly faster than using a SurfaceTool, but the API "
"is more a little more challenging. Additionally, SurfaceTool has a few "
"quality of life methods such as ``generate_normals()`` and ``index()``."
msgstr ""
"ArrayMeshの使用は、SurfaceToolの使用よりもわずかに高速ですが、APIはもう少し挑"
"戦的です。さらに、SurfaceToolには ``generate_normals()`` や ``index()`` など"
"の利便性向上メソッドがいくつかあります。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:127
msgid ""
"ImmediateGeometry regenerates the mesh every frame, so it is much slower "
"than ArrayMesh or SurfaceTool. However, if you need the geometry to change "
"every frame anyway it provides a much easier interface that may even be a "
"little faster than generating an ArrayMesh every frame."
msgstr ""
"ImmediateGeometryはフレームごとにメッシュを再生成するため、ArrayMeshや"
"SurfaceToolよりもはるかに低速です。ただし、とにかくすべてのフレームを変更する"
"ためにジオメトリが必要な場合は、すべてのフレームでArrayMeshを生成するよりも少"
"し速い可能性がある、はるかに簡単なインターフェイスを提供します。"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:131
msgid ""
"The MeshDataTool is not fast, but it gives you access to all kinds of "
"properties of the mesh that you don't get with the others (edges, faces, "
"etc.). It is incredibly useful when you need that sort of data to transform "
"the mesh, but it is not a good idea to use if that information is not "
"needed. The MeshDataTool is best used if you are going to be using an "
"algorithm that requires access to the face or edge array."
msgstr ""
"MeshDataToolは高速ではありませんが、他のものでは得られないメッシュのすべての"
"種類のプロパティ(エッジ、面など)にアクセスできます。メッシュを変換するために"
"そのようなデータが必要な場合は非常に便利ですが、その情報が必要でない場合は使"
"用するのは得策ではありません。 MeshDataToolは、面またはエッジ配列へのアクセス"
"を必要とするアルゴリズムを使用する場合に最適に使用されます。"
