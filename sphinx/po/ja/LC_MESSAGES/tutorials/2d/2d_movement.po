# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-15 18:11+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/2d_movement.rst:4
msgid "2D movement overview"
msgstr "2D移動の概要"

#: ../../docs/tutorials/2d/2d_movement.rst:7
msgid "Introduction"
msgstr "はじめに"

#: ../../docs/tutorials/2d/2d_movement.rst:9
msgid ""
"Every beginner has been there: \"How do I move my character?\" Depending on "
"the style of game you're making, you may have special requirements, but in "
"general the movement in most 2D games is based on a small number of designs."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:13
msgid ""
"We'll use :ref:`KinematicBody2D <class_KinematicBody2D>` for these examples, "
"but the principles will apply to other node types (Area2D, RigidBody2D) as "
"well."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:17
msgid "Setup"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:19
msgid ""
"Each example below uses the same scene setup. Start with a "
"``KinematicBody2D`` with two children: ``Sprite`` and ``CollisionShape2D``. "
"You can use the Godot icon (\"icon.png\") for the Sprite's texture or use "
"any other 2D image you have."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:23
msgid ""
"Open ``Project -> Project Settings`` and select the \"Input Map\" tab. Add "
"the following input actions (see :ref:`InputEvent <doc_inputevent>` for "
"details):"
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:29
msgid "8-way movement"
msgstr "8方向移動"

#: ../../docs/tutorials/2d/2d_movement.rst:31
msgid ""
"In this scenario, you want the user to press the four directional keys (up/"
"left/down/right or W/A/S/D) and move in the selected direction. The name \"8-"
"way movement\" comes from the fact that the player can move diagonally by "
"pressing two keys at the same time."
msgstr ""
"このシナリオでは、ユーザが8方向キー(上/左/下/右またはW/A/S/D)を押して、選択し"
"た方向に移動するようにします。「8方向移動」という名称は、2つのキーを同時に押"
"すことでプレイヤーが斜めに移動できることに由来しています。"

#: ../../docs/tutorials/2d/2d_movement.rst:37
msgid "Add a script to the kinematic body and add the following code:"
msgstr "キネマティックボディにスクリプトを追加して、次のコードを追加します:"

#: ../../docs/tutorials/2d/2d_movement.rst:101
msgid ""
"In the ``get_input()`` function we check for the four key events and sum "
"them up to get the velocity vector. This has the benefit of making two "
"opposite keys cancel each other out, but will also result in diagonal "
"movement being faster due to the two directions being added together."
msgstr ""
"``get_input()`` 関数では、4つのキーイベントをチェックし、それらを合計して速度"
"ベクトルを取得します。これには、2つの反対方向のキーが互いに相殺するという利点"
"がありますが、2つの方向が加算されるため、斜めの移動が速くなります。"

#: ../../docs/tutorials/2d/2d_movement.rst:106
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, and multiply by the desired speed."
msgstr ""
"速度を*正規化*した場合、つまり速度の*長さ*を ``1`` に設定し、希望の速度で乗算"
"した場合、これを防ぐことができます。"

#: ../../docs/tutorials/2d/2d_movement.rst:109
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:113
msgid "Rotation + movement"
msgstr "回転+移動"

#: ../../docs/tutorials/2d/2d_movement.rst:115
msgid ""
"This type of movement is sometimes called \"Asteroids-style\" because it "
"resembles how that classic arcade game worked. Pressing left/right rotates "
"the character, while up/down moves it forward or backward in whatever "
"direction it's facing."
msgstr ""
"このタイプの動きは、昔ながらのアーケードゲームの仕組みに似ているため、 "
"\"Asteroids-style\" と呼ばれることもあります。左/右を押すとキャラクタが回転"
"し、上/下を押すとキャラクタの向きに関係なく前後に移動します。"

#: ../../docs/tutorials/2d/2d_movement.rst:190
msgid ""
"Here we've added two new variables to track our rotation direction and "
"speed. Again, pressing both keys at once will cancel out and result in no "
"rotation. The rotation is applied directly to the body's ``rotation`` "
"property."
msgstr ""
"ここでは、回転方向と速度を追跡するために2つの新しい変数を追加しました。 この"
"場合も、両方のキーを同時に押すとキャンセルされ、回転しなくなります。回転は、"
"ボディの ``rotation`` プロパティに直接適用されます。"

#: ../../docs/tutorials/2d/2d_movement.rst:194
msgid ""
"To set the velocity, we use the ``Vector2.rotated()`` method, so that it "
"points in the same direction as the body. ``rotated()`` is a useful vector "
"function that you can use in many circumstances where you would otherwise "
"need to apply trigonometric functions."
msgstr ""

#: ../../docs/tutorials/2d/2d_movement.rst:200
msgid "Rotation + movement (mouse)"
msgstr "回転+移動(マウス)"

#: ../../docs/tutorials/2d/2d_movement.rst:202
msgid ""
"This style of movement is a variation of the previous one. This time, the "
"direction is set by the mouse position instead of the keyboard. The "
"character will always \"look at\" the mouse pointer. The forward/back inputs "
"remain the same, however."
msgstr ""
"この動作スタイルは、前の動作スタイルのバリエーションです。 今回は、キーボード"
"の代わりにマウスの位置によって方向が設定されます。 キャラクタは常にマウスポイ"
"ンタを \"見ます\" 。ただし、フォワード/バック入力は同じままです。"

#: ../../docs/tutorials/2d/2d_movement.rst:261
msgid ""
"Here we're using the :ref:`Node2D <class_Node2D>` ``look_at()`` method to "
"point the player towards a given position. Without this function, you could "
"get the same effect by setting the angle like this:"
msgstr ""
"ここでは、 :ref:`Node2D <class_Node2D>` ``look_at()`` メソッドを使用して、プ"
"レイヤーを特定の位置に向けます。この関数を使用しない場合は、次のように角度を"
"設定しても同じ効果が得られます:"

#: ../../docs/tutorials/2d/2d_movement.rst:276
msgid "Click-and-move"
msgstr "クリックと移動"

#: ../../docs/tutorials/2d/2d_movement.rst:278
msgid ""
"This last example uses only the mouse to control the character. Clicking on "
"the screen will cause the player to move to the target location."
msgstr ""
"この最後の例では、マウスのみを使用してキャラクタを制御します。画面上でクリッ"
"クすると、プレイヤーが目的の場所に移動します。"

#: ../../docs/tutorials/2d/2d_movement.rst:335
msgid ""
"Note the ``length()`` check we make prior to movement. Without this test, "
"the body would \"jitter\" upon reaching the target position, as it moves "
"slightly past the position and tries to move back, only to move too far and "
"repeat."
msgstr ""
"移動前に ``length()`` のチェックを行います。このテストを行わないと、ボディは"
"ターゲット位置に到達したときに \"ジッタ\" 、その位置をわずかに超えて移動し、"
"後ろに戻ろうとしますが、動きすぎて繰り返します。"

#: ../../docs/tutorials/2d/2d_movement.rst:340
msgid ""
"Uncommenting the ``rotation`` line will also turn the body to point in its "
"direction of motion if you prefer."
msgstr ""
"``rotation`` 線のコメントを解除すると、必要に応じてボディが移動方向を指すよう"
"になります。"

#: ../../docs/tutorials/2d/2d_movement.rst:343
msgid ""
"This technique can also be used as the basis of a \"following\" character. "
"The ``target`` position can be that of any object you want to move to."
msgstr ""
"このテクニックは、 \"following\" キャラクタの基礎としても使用できます。"
"``target`` 位置には、移動先の任意のオブジェクトの位置を指定できます。"

#: ../../docs/tutorials/2d/2d_movement.rst:347
msgid "Summary"
msgstr "概要"

#: ../../docs/tutorials/2d/2d_movement.rst:349
msgid ""
"You may find these code samples useful as starting points for your own "
"projects. Feel free to use them and experiment with them to see what you can "
"make."
msgstr ""
"これらのコードサンプルは、独自のプロジェクトの開始点として便利です。ご自由に"
"使って、どんなものが作れるか試してみてください。"

#: ../../docs/tutorials/2d/2d_movement.rst:352
msgid ""
"You can download this sample project here: :download:`2D_movement_demo.zip "
"<files/2D_movement_demo.zip>`"
msgstr ""
"このサンプルプロジェクトはこちらからダウンロードできます: :download:"
"`2D_movement_demo.zip <files/2D_movement_demo.zip>`"
