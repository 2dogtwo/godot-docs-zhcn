# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-27 12:19+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:4
msgid "Part 2"
msgstr "パート2"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:7
msgid "Part overview"
msgstr "パートの概要"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:9
msgid "In this part we will be giving our player weapons to play with."
msgstr "このパートでは、操作できる武器をプレイヤーに提供します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:13
msgid ""
"By the end of this part, you will have a player that can fire a pistol, "
"rifle, and attack using a knife. The player will also now have animations "
"with transitions, and the weapons will interact with objects in the "
"environment."
msgstr ""
"このパートの終わりまでに、あなたはピストルを発射し、ライフルを持ち、ナイフを"
"使用して攻撃できるプレイヤーになります。また、プレイヤーにはトランジションを"
"含むアニメーションがあり、武器は環境内のオブジェクトと相互作用します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:17
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_one` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_one` will be the starting project for part 2"
msgstr ""
"チュートリアルのこの部分に進む前に、\\ :ref:`doc_fps_tutorial_part_one` を終"
"了していることが前提となります。\\ :ref:`doc_fps_tutorial_part_one` で完成し"
"たプロジェクトは、パート2の開始プロジェクトになります"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:20
msgid "Let's get started!"
msgstr "では、始めましょう！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:23
msgid "Making a system to handle animations"
msgstr "アニメーションを処理するシステムを作成する"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:25
msgid ""
"First we need a way to handle changing animations. Open up ``Player.tscn`` "
"and select the :ref:`AnimationPlayer <class_AnimationPlayer>` Node "
"(``Player`` -> ``Rotation_Helper`` -> ``Model`` -> ``Animation_Player``)."
msgstr ""
"最初に、変化するアニメーションを処理する方法が必要です。\\ ``Player.tscn`` を"
"開き、\\ :ref:`AnimationPlayer <class_AnimationPlayer>` ノードを選択します"
"(``Player`` -> ``Rotation_Helper`` -> ``Model``-> ``Animation_Player``)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:28
msgid ""
"Create a new script called ``AnimationPlayer_Manager.gd`` and attach that to "
"the :ref:`AnimationPlayer <class_AnimationPlayer>`."
msgstr ""
"``AnimationPlayer_Manager.gd`` という新しいスクリプトを作成し、それを :ref:"
"`AnimationPlayer <class_AnimationPlayer>` にアタッチします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:30
msgid "Add the following code to ``AnimationPlayer_Manager.gd``:"
msgstr "次のコードを ``AnimationPlayer_Manager.gd`` に追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:152
msgid "Lets go over what this script is doing:"
msgstr "このスクリプトが何をしているのかを見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:156
msgid "Lets start with this script's class variables:"
msgstr "このスクリプトのクラス変数から始めましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:158
msgid ""
"``states``: A dictionary for holding our animation states. (Further "
"explanation below)"
msgstr ""
"``states``: アニメーションの状態を保持するためのdictionary(辞書)。(詳細な説明"
"は後ほど)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:159
msgid ""
"``animation_speeds``: A dictionary for holding all the speeds at which we "
"want to play our animations."
msgstr ""
"``animation_speeds``: アニメーションを再生したいすべての速度を保持するための"
"dictionary。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:160
msgid ""
"``current_state``: A variable for holding the name of the animation state we "
"are currently in."
msgstr "``current_state``: 現在のアニメーション状態の名前を保持する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:161
msgid ""
"``callback_function``: A variable for holding the callback function. "
"(Further explanation below)"
msgstr ""
"``callback_function``: コールバック関数を保持する変数。(詳細な説明は後ほど)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:163
msgid ""
"If you are familiar with state machines, then you may have noticed that "
"``states`` is structured like a basic state machine. Here is roughly how "
"``states`` is set up:"
msgstr ""
"ステートマシンに精通している場合、\\ ``states`` は基本的なステートマシンのよ"
"うに構成されていることに気付いているかもしれません。大まかに ``states`` を設"
"定する方法は次のとおりです:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:166
msgid ""
"``states`` is a dictionary with the key being the name of the current state, "
"and the value being an array holding all the animations (states) we can "
"transition to. For example, if we are currently in the ``Idle_unarmed`` "
"state, we can only transition to ``Knife_equip``, ``Pistol_equip``, "
"``Rifle_equip``, and ``Idle_unarmed``."
msgstr ""
"``states`` は、キーが現在の状態の名前であり、値が遷移可能なすべてのアニメー"
"ション(states)を保持する配列である辞書です。たとえば、現在 ``Idle_unarmed`` "
"状態にある場合、\\ ``Knife_equip``\\ 、\\ ``Pistol_equip``\\ 、\\ "
"``Rifle_equip``\\ 、および ``Idle_unarmed`` にのみ移行できます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:171
msgid ""
"If we try to transition to a state that is not included in the possible "
"transitions states for the state we are in, then we get a warning message "
"and the animation does not change. We can also automatically transition from "
"some states into others, as will be explained further below in "
"``animation_ended``"
msgstr ""
"現在の状態の可能な遷移状態に含まれていない状態に遷移しようとすると、警告メッ"
"セージが表示され、アニメーションは変更されません。以下の ``animation_ended`` "
"でさらに説明するように、いくつかの状態から他の状態に自動的に移行することもで"
"きます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:175
msgid ""
"For the sake of keeping this tutorial simple, we are not using a 'proper' "
"state machine. If you are interested to know more about state machines, see "
"the following articles:"
msgstr ""
"このチュートリアルをシンプルにするために、「適切な」状態マシンを使用していま"
"せん。ステートマシンについて詳しく知りたい場合は、次の記事を参照してください:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:179
msgid ""
"(Python example) https://dev.to/karn/building-a-simple-state-machine-in-"
"python"
msgstr ""
"(Pythonの例) https://dev.to/karn/building-a-simple-state-machine-in-python"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:180
msgid ""
"(C# example) https://www.codeproject.com/Articles/489136/"
"UnderstandingplusandplusImplementingplusStateplusP"
msgstr ""
"(C#の例) https://www.codeproject.com/Articles/489136/"
"UnderstandingplusandplusImplementingplusStateplusP"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:181
msgid "(Wiki article) https://en.wikipedia.org/wiki/Finite-state_machine"
msgstr "(wikipediaの記事) https://en.wikipedia.org/wiki/Finite-state_machine"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:183
msgid ""
"``animation_speeds`` is how fast each animation will play. Some of the "
"animations are a little slow and in an effort to make everything look "
"smooth, we need to play them at faster speeds."
msgstr ""
"``animation_speeds`` は、各アニメーションの再生速度です。一部のアニメーション"
"は少し遅く、すべてをスムーズに見せるために、より速い速度で再生する必要があり"
"ます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:186
msgid ""
"Notice that all of the firing animations are faster than their normal speed. "
"Remember this for later!"
msgstr ""
"すべての発射アニメーションが通常の速度よりも速いことに注意してください。後の"
"ためにこれを覚えておいてください！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:188
msgid ""
"``current_state`` will hold the name of the animation state we are currently "
"in."
msgstr "``current_state`` は、現在のアニメーション状態の名前を保持します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:190
msgid ""
"Finally, ``callback_function`` will be a :ref:`FuncRef <class_FuncRef>` "
"passed in by the player for spawning bullets at the proper frame of "
"animation. A :ref:`FuncRef <class_FuncRef>` allows us to pass in a function "
"as an argument, effectively allowing us to call a function from another "
"script, which is how we will use it later."
msgstr ""
"最後に、\\ ``callback_function`` は、アニメーションの適切なフレームで弾丸を産"
"出するためにプレイヤーによって渡される :ref:`FuncRef <class_FuncRef>` になり"
"ます。\\ :ref:`FuncRef <class_FuncRef>` を使用すると、関数を引数として渡すこ"
"とができ、他のスクリプトから関数を呼び出すことができます。これは後で使用する"
"方法です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:196
msgid "Now let's look at ``_ready``."
msgstr "``_ready`` を見てみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:198
msgid ""
"First we are setting our animation to ``Idle_unarmed`` using the "
"``set_animation`` function, so we for sure start in that animation."
msgstr ""
"最初に、\\ ``set_animation`` 関数を使用してアニメーションを ``Idle_unarmed`` "
"に設定しているので、必ずそのアニメーションから始めてください。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:201
msgid ""
"Next we connect the ``animation_finished`` signal to this script and assign "
"it to call ``animation_ended``. This means whenever an animation is "
"finished, ``animation_ended`` will be called."
msgstr ""
"次に、\\ ``animation_finished`` シグナルをこのスクリプトに接続し、\\ "
"``animation_ended`` を呼び出すように割り当てます。これは、アニメーションが終"
"了するたびに ``animation_ended`` が呼び出されることを意味します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:206
msgid "Lets look at ``set_animation`` next."
msgstr "次に ``set_animation`` を見てみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:208
msgid ""
"``set_animation`` changes the animation to the animation named "
"``animation_name`` *if* we can transition to it. In other words, if the "
"animation state we are currently in has the passed in animation state name "
"in ``states``, then we will change to that animation."
msgstr ""
"``set_animation`` は\\ *可能*\\ な場合は、アニメーションを "
"``animation_name`` という名前のアニメーションに変更します。言い換えると、現在"
"のアニメーション状態が ``states`` で渡されたアニメーション状態名を持っている"
"場合、そのアニメーションに変更します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:212
msgid ""
"Firstly, we check if the passed in animation name is the same name as the "
"animation currently playing. If they are the same, then we write a warning "
"to the console and return ``true``."
msgstr ""
"まず、渡されたアニメーション名が現在再生中のアニメーションと同じ名前であるか"
"どうかを確認します。それらが同じ場合、コンソールに警告を書き込み、\\ "
"``true`` を返します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:215
msgid ""
"Secondly, we see if :ref:`AnimationPlayer <class_AnimationPlayer>` has the "
"animation with the name ``animation_name`` using ``has_animation``. If it "
"does not, we return ``false``."
msgstr ""
"次に、\\ :ref:`AnimationPlayer <class_AnimationPlayer>` が ``has_animation`` "
"を使用して ``animation_name`` という名前のアニメーションを持っているかどうか"
"を確認します。そうでない場合、\\ ``false`` を返します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:218
msgid ""
"Thirdly, we check whether ``current_state`` is set. If ``current_state`` is "
"*not* currently set, then we set ``current_state`` to the passed in "
"animation name and tell :ref:`AnimationPlayer <class_AnimationPlayer>` to "
"start playing the animation with a blend time of ``-1`` at the speed set in "
"``animation_speeds`` and then we return ``true``."
msgstr ""
"第三に、\\ ``current_state`` が設定されているかどうかを確認します。\\ "
"``current_state`` が現在設定\\*されていない*\\場合、渡されたアニメーション名"
"を ``current_state`` に設定し、\\ :ref:`AnimationPlayer "
"<class_AnimationPlayer>` にその名前と、blend time ``-1 ``\\ 、speed "
"``animation_speeds`` を設定して ``true`` を返します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:222
msgid "Blend time is how long to blend/mix the two animations together."
msgstr "Blend timeは、2つのアニメーションをブレンド/ミックスする時間です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:224
msgid ""
"By putting in a value of ``-1``, the new animation instantly plays, "
"overriding whatever animation is already playing."
msgstr ""
"``-1`` の値を入力すると、新しいアニメーションが即座に再生され、既に再生されて"
"いるアニメーションはすべて上書きされます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:226
msgid ""
"If you put in a value of ``1``, for one second the new animation will play "
"with increasing strength, blending the two animations together for one "
"second before playing only the new animation. This leads to a smooth "
"transition between animations, which looks great when you are changing from "
"a walking animation to a running animation."
msgstr ""
"``1`` の値を入力すると、1秒の間、新しいアニメーションが強さを増しつつ再生、つ"
"まり新しいアニメーションのみを再生する前に、2つのアニメーションを1秒間ブレン"
"ドします。これにより、アニメーション間のスムーズな移行が可能になります。これ"
"は、ウォーキングアニメーションからランニングアニメーションに変更する場合に最"
"適です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:230
msgid ""
"We set the blend time to ``-1`` because we want to instantly change "
"animations."
msgstr ""
"アニメーションを即座に変更するため、ブレンド時間を ``-1`` に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:232
msgid ""
"If we have a state in ``current_state``, then we get all the possible states "
"we can transition to."
msgstr ""
"``current_state`` にstate(状態)がある場合、遷移可能なすべてのstateを取得しま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:234
msgid ""
"If the animation name is in the list of possible transitions, we set "
"``current_state`` to the passed in animation (``animation_name``), tell :ref:"
"`AnimationPlayer <class_AnimationPlayer>` to play the animation with a blend "
"time of ``-1`` at the speed set in ``animation_speeds`` and return ``true``."
msgstr ""
"アニメーション名が、使用可能なトランジションのリストにある場合、"
"``current_state`` に渡されたアニメーション(``animation_name``)を設定し\\ :"
"ref:`AnimationPlayer <class_AnimationPlayer>` に blend timeを\\ ``-1``、speed"
"をanimation_speedsで設定した速度で、そのアニメーションを再生するように指示"
"し、``true`` を返します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:240
msgid "Now lets look at ``animation_ended``."
msgstr "``animation_ended`` を見てみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:242
msgid ""
"``animation_ended`` is the function that will be called by :ref:"
"`AnimationPlayer <class_AnimationPlayer>` when it's done playing an "
"animation."
msgstr ""
"``animation_ended`` は、アニメーションの再生が終了したときに :ref:"
"`AnimationPlayer <class_AnimationPlayer>` によって呼び出される関数です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:245
msgid ""
"For certain animation states, we may need to transition into another state "
"when it's finished. To handle this, we check for every possible animation "
"state. If we need to, we will transition into another state."
msgstr ""
"特定のアニメーションの状態については、終了時に別の状態に移行する必要がある場"
"合があります。これを処理するために、可能なすべてのアニメーション状態をチェッ"
"クします。必要に応じて、別の状態に移行します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:248
msgid ""
"If you are using your own animated models, make sure that none of the "
"animations are set to loop. Looping animations do not send the "
"``animation_finished`` signal when they reach the end of the animation and "
"are about to loop again."
msgstr ""
"独自のアニメーションモデルを使用している場合は、アニメーションがループするよ"
"うに設定されていないことを確認してください。アニメーションのループは、アニ"
"メーションの最後に到達して再びループしようとしているときに、\\ "
"``animation_finished`` シグナルを送信しません。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:252
msgid ""
"The transitions in ``animation_ended`` would ideally be part of the data in "
"``states``, but in an effort to make the tutorial easier to understand, "
"we'll hard code each state transition in ``animation_ended``."
msgstr ""
"``animation_ended`` の遷移は理想的には ``states`` のデータの一部になります"
"が、チュートリアルを理解しやすくするために、各状態遷移を ``animation_ended`` "
"でハードコーディングします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:258
msgid ""
"Finally, there is ``animation_callback``. This function will be called by a "
"call method track in our animations. If we have a :ref:`FuncRef "
"<class_FuncRef>` assigned to ``callback_function``, then we call that passed "
"in function. If we do not have a :ref:`FuncRef <class_FuncRef>` assigned to "
"``callback_function``, we print out a warning to the console."
msgstr ""
"最後に、\\ ``animation_callback`` があります。この関数は、アニメーションの呼"
"び出しメソッドトラックによって呼び出されます。\\ ``callback_function`` に割り"
"当てられた :ref:`FuncRef <class_FuncRef>` がある場合、関数で渡されたものを呼"
"び出します。\\ ``callback_function`` に割り当てられた :ref:`FuncRef "
"<class_FuncRef>` がない場合、コンソールに警告を出力します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:262
msgid ""
"Try running ``Testing_Area.tscn`` to make sure there are no runtime issues. "
"If the game runs but nothing seems to have changed, then everything is "
"working correctly."
msgstr ""
"``Testing_Area.tscn`` を実行して、実行時の問題がないことを確認してください。"
"ゲームが実行されているが、何も変わっていないように見える場合は、すべてが正常"
"に動作しています。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:266
msgid "Getting the animations ready"
msgstr "アニメーションを準備する"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:268
msgid ""
"Now that we have a working animation manager, we need to call it from our "
"player script. Before that, though, we need to set some animation callback "
"tracks in our firing animations."
msgstr ""
"アニメーションマネージャーが機能するようになったので、それをプレイヤースクリ"
"プトから呼び出す必要があります。ただし、その前に、発砲アニメーションにアニ"
"メーションコールバックトラックを設定する必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:271
msgid ""
"Open up ``Player.tscn`` if you don't have it open and navigate to the :ref:"
"`AnimationPlayer <class_AnimationPlayer>` node (``Player`` -> "
"``Rotation_Helper`` -> ``Model`` -> ``Animation_Player``)."
msgstr ""
"まだ開いていない場合は ``Player.tscn`` を開き、\\ :ref:`AnimationPlayer "
"<class_AnimationPlayer>` ノードに移動します(``Player`` -> "
"``Rotation_Helper`` -> ``Model`` -> ``Animation_Player``)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:274
msgid ""
"We need to attach a call method track to three of our animations: The firing "
"animation for the pistol, rifle, and knife. Let's start with the pistol. "
"Click the animation drop down list and select \"Pistol_fire\"."
msgstr ""
"3つのアニメーションにメソッド呼出しトラックをアタッチする必要があります: ピス"
"トル、ライフル、ナイフの発射アニメーションです。まずピストルから始めましょ"
"う。アニメーションドロップダウンリストをクリックし、\"Pistol_fire\"を選択しま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:277
msgid ""
"Now scroll down to the bottom of the list of animation tracks. The final "
"item in the list should read ``Armature/Skeleton:Left_UpperPointer``. Now "
"above the list, click the \"Add track\" button, to the left of the time line"
msgstr ""
"アニメーショントラックのリストの一番下までスクロールします。リストの最後の項"
"目は ``Armature/Skeleton:Left_UpperPointer`` である必要があります。リストの上"
"で、タイムラインの左側にある[トラックを追加]ボタンをクリックします"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:282
msgid ""
"This will bring up a window with a few choices. We want to add a call method "
"track, so click the option that reads \"Call Method Track\". This will open "
"a window showing the entire node tree. Navigate to the :ref:`AnimationPlayer "
"<class_AnimationPlayer>` node, select it, and press OK."
msgstr ""
"これにより、いくつかの選択肢があるウィンドウが表示されます。メソッド呼出しト"
"ラックを追加するため、「メソッド呼出しトラック」というオプションをクリックし"
"ます。これにより、ノードツリー全体を表示するウィンドウが開きます。\\ :ref:"
"`AnimationPlayer <class_AnimationPlayer>` ノードに移動して選択し、[OK]を押し"
"ます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:288
msgid ""
"Now at the bottom of list of animation tracks you will have a green track "
"that reads \"AnimationPlayer\". Now we need to add the point where we want "
"to call our callback function. Scrub the timeline until you reach the point "
"where the muzzle starts to flash."
msgstr ""
"これで、アニメーショントラックのリストの下部に、\"AnimationPlayer\"いう緑色の"
"トラックが表示されます。次に、コールバック関数を呼び出すポイントを追加する必"
"要があります。銃口が点滅し始めるポイントに達するまで、タイムラインをスクラブ"
"(訳注:左右にごしごしするというニュアンスです)します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:292
msgid ""
"The timeline is the window where all the points in our animation are stored. "
"Each of the little points represents a point of animation data."
msgstr ""
"タイムラインは、アニメーションのすべてのポイントが保存されるウィンドウです。"
"小さなポイントのそれぞれは、アニメーションデータのポイントを表します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:295
msgid ""
"Scrubbing the timeline means moving ourselves through the animation. So when "
"we say \"scrub the timeline until you reach a point\", what we mean is move "
"through the animation window until you reach the point on the timeline."
msgstr ""
"タイムラインをスクラブするということは、アニメーションの中で自分自身を動かす"
"ことを意味します。したがって、「ポイントに到達するまでタイムラインをスクラブ"
"する」と言うときは、タイムライン上のポイントに到達するまでアニメーションウィ"
"ンドウを移動します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:299
msgid ""
"Also, the muzzle of a gun is the end point where the bullet comes out. The "
"muzzle flash is the flash of light that escapes the muzzle when a bullet is "
"fired. The muzzle is also sometimes referred to as the barrel of the gun."
msgstr ""
"また、銃の銃口は弾丸が出る端点です。銃口のフラッシュは、弾丸が発射されたとき"
"に銃口から漏れる光のフラッシュです。銃口は、銃身とも呼ばれます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:303
msgid ""
"For finer control when scrubbing the timeline, press :kbd:`Ctrl` and scroll "
"forward with the mouse wheel to zoom in. Scrolling backwards will zoom out."
msgstr ""
"タイムラインをスクラブするとき、より細かく制御するには、\\ :kbd:`Ctrl` を押し"
"ながら、マウスホイールで前方にスクロールしてズームインします。後方にスクロー"
"ルするとズームアウトします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:306
msgid ""
"You can also change how the timeline scrubbing snaps by changing the value "
"in ``Step (s)`` to a lower/higher value."
msgstr ""
"``Step(s)``　の値をより低い/より高い値に変更することで、タイムラインのスクラ"
"ブのスナップ方法を変更することもできます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:308
msgid ""
"Once you get to a point you like, right click on the row for \"Animation "
"Player\" and press ``Insert Key``. In the empty name field, enter "
"``animation_callback`` and press :kbd:`Enter`."
msgstr ""
"好きなポイントに到達したら、\\ ``Animation Player`` の行を右クリックし、[キー"
"を挿入]を押します。空の名前フィールドに\\ ``animation_callback`` と入力"
"し、\\ :kbd:`Enter` を押します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:314
msgid ""
"Now when we are playing this animation the call method track will be "
"triggered at that specific point of the animation."
msgstr ""
"このアニメーションを再生しているとき、メソッド呼出しトラックはアニメーション"
"の特定のポイントでトリガーされます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:318
msgid "Let's repeat the process for the rifle and knife firing animations!"
msgstr "ライフルとナイフの発射アニメーションでこのプロセスを繰り返しましょう！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:320
msgid ""
"Because the process is exactly the same as the pistol, the process is going "
"to explained in a little less depth. Follow the steps from above if you get "
"lost! It is exactly the same, just on a different animation."
msgstr ""
"このプロセスはピストルとまったく同じですが、もう少し詳しく説明します。迷った"
"場合は、上記の手順に従ってください！別のアニメーションに対して行うだけで、内"
"容はまったく同じです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:323
msgid ""
"Go to the \"Rifle_fire\" animation from the animation drop down. Add the "
"call method track once you reach the bottom of the animation track list by "
"clicking the \"Add Track\" button above the list. Find the point where the "
"muzzle starts to flash and right click and press ``Insert Key`` to add a "
"call method track point at that position on the track."
msgstr ""
"アニメーションドロップダウンから\"Rifle_fire\"アニメーションに移動します。リ"
"ストの上にある[トラックを追加]ボタンをクリックして、アニメーショントラックリ"
"ストの一番下に到達したら、メソッド呼出しトラックを追加します。銃口が点滅し始"
"めるポイントを見つけて右クリックし、\\ ``キーを挿入`` を押して、トラック上の"
"その位置にメソッド呼出しトラックポイントを追加します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:327
msgid ""
"Type \"animation_callback\" into the name field of the pop up which opened "
"and press :kbd:`Enter`."
msgstr ""
"開いたポップアップの名前フィールドに”animation_callback”と入力し、\\ :kbd:"
"`Enter` を押します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:329
msgid ""
"Now we need to apply the callback method track to the knife animation. "
"Select the \"Knife_fire\" animation and scroll to the bottom of the "
"animation tracks. Click the \"Add Track\" button above the list and add a "
"method track. Next find a point around the first third of the animation to "
"place the animation callback method point at."
msgstr ""
"次に、メソッド呼出しトラックをナイフアニメーションに適用する必要がありま"
"す。\"Knife_fire\" アニメーションを選択し、アニメーショントラックの下部までス"
"クロールします。リストの上にある[トラックを追加]ボタンをクリックして、メソッ"
"ドトラックを追加します。次に、アニメーションコールバックメソッドポイントを配"
"置するアニメーションの最初の3分の1あたりのポイントを見つけます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:333
msgid ""
"We will not actually be firing the knife, and the animation is a stabbing "
"animation rather than a firing one. For this tutorial we are reusing the gun "
"firing logic for our knife, so the animation has been named in a style that "
"is consistent with the other animations."
msgstr ""
"実際にナイフを発射することはありません。アニメーションは、発射するというより"
"も刺すようなアニメーションです。このチュートリアルでは、銃の発射ロジックをナ"
"イフで再利用するため、アニメーションは他のアニメーションと一貫したスタイルで"
"名前が付けられています。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:337
msgid ""
"From there right click on the timeline and click \"Insert Key\". Put "
"\"animation_callback\" into the name field and press :kbd:`Enter`."
msgstr ""
"そこからタイムラインを右クリックし、[キーを挿入]をクリックしま"
"す。\"animation_callback\"を名前フィールドに入力し、\\ :kbd:`Enter` を押しま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:339
msgid "Be sure to save your work!"
msgstr "必ず作業内容を保存してください！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:341
msgid ""
"With that done, we are almost ready to start adding the ability to fire to "
"our player script! We need to set up one last scene: The scene for our "
"bullet object."
msgstr ""
"これで、プレイヤースクリプトに発砲する機能を追加する準備がほぼ整いました。最"
"後のシーンを設定する必要があります。それは、弾丸オブジェクトのシーンです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:345
msgid "Creating the bullet scene"
msgstr "弾丸シーンの作成"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:347
msgid ""
"There are several ways to handle a gun's bullets in video games. In this "
"tutorial series, we will be exploring two of the more common ways: Objects, "
"and raycasts."
msgstr ""
"ビデオゲームで銃の弾丸を処理する方法はいくつかあります。このチュートリアルシ"
"リーズでは、2つの一般的な方法を検討します: オブジェクトとレイキャストです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:352
msgid ""
"One of the two ways is using a bullet object. This will be an object that "
"travels through the world and handles its own collision code. In this method "
"we create/spawn a bullet object in the direction our gun is facing, and then "
"it travels forward."
msgstr ""
"2つの方法の1つは、弾丸オブジェクトを使用することです。これは、世界を移動し、"
"独自の衝突コードを処理するオブジェクトになります。このメソッドでは、銃が向い"
"ている方向に弾丸オブジェクトを作成/産出し、次に前進します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:356
msgid ""
"There are several advantages to this method. The first being we do not have "
"to store the bullets in our player. We can simply create the bullet and then "
"move on, and the bullet itself will handle checking for collisions, sending "
"the proper signal(s) to the object it collides with, and destroying itself."
msgstr ""
"この方法にはいくつかの利点があります。 1つ目は、弾丸をプレイヤーに保存する必"
"要がないことです。弾丸を作成して先に進みむと、弾丸自体が衝突のチェック、衝突"
"するオブジェクトへの適切なシグナルの送信、およびそれ自体の破壊を処理します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:359
msgid ""
"Another advantage is we can have more complex bullet movement. If we want to "
"make the bullet fall ever so slightly as time goes on, we can make the "
"bullet controlling script slowly push the bullet towards the ground. Using "
"an object also makes the bullet take time to reach its target, it doesn't "
"instantly hit whatever it's pointed at. This feels more realistic because "
"nothing in real life moves instantly from one point to another."
msgstr ""
"別の利点は、より複雑な弾丸の動きができることです。時間が経つにつれて弾丸を少"
"しでも落としたい場合は、弾丸制御スクリプトを使用して、弾丸をゆっくりと地面に"
"向かって押します。また、オブジェクトを使用すると、弾丸がターゲットに到達する"
"までに時間がかかり、指したものがすぐにヒットすることはありません。実際の生活"
"の中で、ある地点から別の地点に瞬時に移動するものはないため、これはより現実的"
"です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:363
msgid ""
"One of the huge disadvantages is performance. While having each bullet "
"calculate their own paths and handle their own collision allows for a lot of "
"flexibility, it comes at the cost of performance. With this method we are "
"calculating every bullet's movement every step, and while this may not be a "
"problem for a few dozen bullets, it can become a huge problem when you "
"potentially have several hundred bullets."
msgstr ""
"大きな欠点の1つはパフォーマンスです。各弾丸に独自のパスを計算させ、独自の衝突"
"を処理させると、柔軟性が大幅に向上しますが、パフォーマンスが犠牲になります。"
"この方法では、すべてのステップのすべての弾丸の動きを計算しています。これは数"
"十の弾丸では問題にならないかもしれませんが、数百の弾丸がある場合には大きな問"
"題になります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:367
msgid ""
"Despite the performance hit, many first person shooters include some form of "
"object bullets. Rocket launchers are a prime example because in many first "
"person shooters, rockets do not just instantly explode at their target "
"position. You can also find bullets as objects many times with grenades "
"because they generally bounce around the world before exploding."
msgstr ""
"パフォーマンスの低下にもかかわらず、多くの一人称シューティングゲームには何ら"
"かの形のオブジェクトの弾丸が含まれています。ロケットランチャーは、多くの一人"
"称シューティングゲームでは、ロケットが瞬時にターゲットの位置で爆発するわけで"
"はないため、弾丸オブジェクトの典型的な例です。また、良く見かける手榴弾は一般"
"的に爆発する前に世界のあちこちで跳ね返るので、これも弾丸オブジェクトの一例で"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:371
msgid ""
"While I cannot say for sure this is the case, these games *probably* use "
"bullet objects in some form or another: (These are entirely from my "
"observations. **They may be entirely wrong**. I have never worked on **any** "
"of the following games)"
msgstr ""
"確実にそうだとは言えませんが、これらのゲームは\\ *何らかの形で*\\ 弾丸オブ"
"ジェクトを使用している可能性があります: (これらは完全に私の観察によるもので"
"す。次のゲームの\\ **いずれ**\\ にも関わったことはありません)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:374
msgid ""
"Halo (Rocket launchers, fragmentation grenades, sniper rifles, brute shot, "
"and more)"
msgstr ""
"Halo (ロケットランチャー、フラグメンテーション手榴弾、狙撃ライフル、ブルート"
"ショットなど)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:375
msgid ""
"Destiny (Rocket launchers, grenades, fusion rifles, sniper rifles, super "
"moves, and more)"
msgstr ""
"Destiny (ロケットランチャー、手榴弾、フュージョンライフル、スナイパーライフ"
"ル、スーパームーブなど)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:376
msgid ""
"Call of Duty (Rocket launchers, grenades, ballistic knives, crossbows, and "
"more)"
msgstr "Call of Duty (ロケットランチャー、手榴弾、弾道ナイフ、クロスボウなど)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:377
msgid "Battlefield (Rocket launchers, grenades, claymores, mortars, and more)"
msgstr "Battlefield (ロケットランチャー、手榴弾、クレイモア、迫撃砲など)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:379
msgid ""
"Another disadvantage with bullet objects is networking. Bullet objects have "
"to sync the positions (at least) with all the clients that are connected to "
"the server."
msgstr ""
"弾丸オブジェクトのもう1つの欠点はネットワークです。 弾丸オブジェクトは、(少な"
"くとも)サーバーに接続されているすべてのクライアントと位置を同期する必要があり"
"ます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:382
msgid ""
"While we are not implementing any form of networking (as that would be in "
"its own entire tutorial series), it is a consideration to keep in mind when "
"creating your first person shooter, especially if you plan on adding some "
"form of networking in the future."
msgstr ""
"(チュートリアルシリーズ全体として)何らかのネットワーキング形式を実装していま"
"せんが、一人称シューティングゲームを作成する際、将来的に何らかのネットワーキ"
"ングを追加する予定がある場合は、特に留意する必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:387
msgid ""
"The other way of handling bullet collisions we will be looking at is "
"raycasting."
msgstr "弾丸の衝突を処理するもう1つの方法は、レイキャスティングです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:389
msgid ""
"This method is extremely common in guns that have fast moving bullets that "
"rarely change trajectory over time."
msgstr ""
"この手法は、時間の経過とともに軌道を変えることがほとんどない高速移動弾を持つ"
"銃では非常に一般的です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:391
msgid ""
"Instead of creating a bullet object and sending it through space, we instead "
"send a ray starting from the barrel/muzzle of the gun forwards. We set the "
"raycast's origin to the starting position of the bullet, and based on the "
"length we can adjust how far the bullet 'travels' through space."
msgstr ""
"弾丸オブジェクトを作成して空間に送り出す代わりに、銃の銃身/銃口から前方に向"
"かって光線を送り出します。レイキャストの原点を弾丸の開始位置に設定し、長さに"
"基づいて弾丸が空間を「移動する」距離を調整できます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:394
msgid ""
"While I cannot say for sure this is the case, these games *probably* use "
"raycasts in some form or another: (These are entirely from my observations. "
"**They may be entirely wrong**. I have never worked on **any** of the "
"following games)"
msgstr ""
"確実にそうだとは言えませんが、これらのゲームは\\ *何らかの形で*\\ レイキャス"
"トを使用している可能性があります: (これらは完全に私の観察によるものです。次の"
"ゲームの\\ **いずれ**\\ にも関わったことはありません)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:397
msgid ""
"Halo (Assault rifles, DMRs, battle rifles, covenant carbine, spartan laser, "
"and more)"
msgstr ""
"Halo (アサルトライフル、DMR、バトルライフル、コヴナントカービン、スパルタン"
"レーザーなど)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:398
msgid ""
"Destiny (Auto rifles, pulse rifles, scout rifles, hand cannons, machine "
"guns, and more)"
msgstr ""
"Destiny (オートライフル、パルスライフル、スカウトライフル、ハンドキャノン、機"
"関銃など)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:399
msgid ""
"Call of Duty (Assault rifles, light machine guns, sub machine guns, pistols, "
"and more)"
msgstr ""
"Call of Duty (アサルトライフル、軽機関銃、サブマシンガン、ピストルなど)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:400
msgid "Battlefield (Assault rifles, SMGs, carbines, pistols, and more)"
msgstr "Battlefield (アサルトライフル、SMG、カービン銃、ピストルなど)"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:402
msgid ""
"One huge advantage of this method is that it's light on performance. Sending "
"a couple hundred rays through space is *much* easier for the computer to "
"calculate than sending a couple hundred bullet objects."
msgstr ""
"この方法の大きな利点の1つは、パフォーマンスが軽いことです。スペースを介して数"
"百の光線を送信することは、コンピュータが数百の弾丸オブジェクトを送出するより"
"も計算がはるかに簡単です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:406
msgid ""
"Another advantage is we can instantly know if we've hit something or not "
"exactly when we call for it. For networking this is important because we do "
"not need to sync the bullet movements over the Internet, we only need to "
"send whether or not the raycast hit."
msgstr ""
"もう1つの利点は、何かを呼び出したときに正確に何かをヒットしたかどうかを即座に"
"知ることができることです。ネットワーキングでは、インターネット上で弾丸の動き"
"を同期する必要はなく、レイキャストがヒットしたかどうかを送信するだけで済むの"
"で、これは重要です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:409
msgid ""
"Raycasting does have some disadvantages, though. One major disadvantage is "
"we cannot easily cast a ray in anything but a linear line. This means we can "
"only fire in a straight line for however long our ray length is. You can "
"create the illusion of bullet movement by casting multiple rays at different "
"positions, but not only is this hard to implement in code, it is also "
"heavier on performance."
msgstr ""
"ただし、レイキャスティングにはいくつかの欠点があります。大きな欠点の1つは、直"
"線以外に光線を簡単に投じることができないことです。これは、レイの長さが長くて"
"も直線でしか発射できないことを意味します。さまざまな位置に複数の光線を投げる"
"ことにより、弾丸の動きのような錯覚を作り出すことができますが、これをコードに"
"実装するのが難しいだけでなく、パフォーマンスも重くなります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:413
msgid ""
"Another disadvantage is we cannot see the bullet. With bullet objects we can "
"actually see the bullet travel through space if we attach a mesh to it, but "
"because raycasts happen instantly, we do not have a decent way of showing "
"the bullets. You could draw a line from the origin of the raycast to the "
"point where the raycast collided, and that is one popular way of showing "
"raycasts. Another way is simply not drawing the raycast at all, because "
"theoretically the bullets move so fast our eyes could not see it anyway."
msgstr ""
"もう1つの欠点は、弾丸が見えないことです。弾丸オブジェクトでは、メッシュをア"
"タッチすると弾丸が空間を移動するのを実際に見ることができますが、レイキャスト"
"は即座に発生するため、弾丸を表示する適切な方法はありません。レイキャストの原"
"点から、レイキャストが衝突したポイントまで線を引くことができます。これは、レ"
"イキャストを表示する一般的な方法の1つです。もう1つの方法は、理論的には弾丸が"
"非常に速く動くため、レイキャストをまったく描画しないことです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:420
msgid ""
"Let's get the bullet object set up. This is what our pistol will create when "
"the \"Pistol_fire\" animation callback function is called."
msgstr ""
"弾丸オブジェクトを設定してみましょう。これは、\"Pistol_fire\"アニメーション"
"コールバック関数が呼び出されたときにピストルが作成するものです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:423
msgid ""
"Open up ``Bullet_Scene.tscn``. The scene contains :ref:`Spatial "
"<class_Spatial>` node called bullet, with a :ref:`MeshInstance "
"<class_MeshInstance>` and an :ref:`Area <class_Area>` with a :ref:"
"`CollisionShape <class_CollisionShape>` children to it."
msgstr ""
"``Bullet_Scene.tscn`` を開きます。シーンには、bulletと呼ばれる :ref:`Spatial "
"<class_Spatial>`ノードと\\ :ref:`MeshInstance <class_MeshInstance>`\\ 、\\ :"
"ref:`CollisionShape <class_CollisionShape>`を子として持つ :ref:`Area "
"<class_Area>` が含まれます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:427
msgid ""
"Create a new script called ``Bullet_script.gd`` and attach it to the "
"``Bullet`` :ref:`Spatial <class_Spatial>`."
msgstr ""
"``Bullet_script.gd`` という新しいスクリプトを作成し、それを ``Bullet`` :ref:"
"`Spatial <class_Spatial>` にアタッチします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:429
msgid ""
"We are going to move the entire bullet object at the root (``Bullet``). We "
"will be using the :ref:`Area <class_Area>` to check whether or not we've "
"collided with something"
msgstr ""
"ルート(``Bullet``) でbulletオブジェクト全体を移動します。\\ :ref:`Area "
"<class_Area>` を使用して、何かと衝突したかどうかを確認します"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:431
msgid ""
"Why are we using an :ref:`Area <class_Area>` and not a :ref:`RigidBody "
"<class_RigidBody>`? The main reason we're not using a :ref:`RigidBody "
"<class_RigidBody>` is because we do not want the bullet to interact with "
"other :ref:`RigidBody <class_RigidBody>` nodes. By using an :ref:`Area "
"<class_Area>` we are ensuring that none of the other :ref:`RigidBody "
"<class_RigidBody>` nodes, including other bullets, will be effected."
msgstr ""
":ref:`RigidBody <class_RigidBody>` ではなく :ref:`Area <class_Area>` を使用す"
"るのはなぜですか？ :ref:`RigidBody <class_RigidBody>` を使用しない主な理由"
"は、他の :ref:`RigidBody <class_RigidBody>` ノードと弾丸が相互作用しないよう"
"にするためです。\\ :ref:`Area <class_Area>` を使用することにより、他の弾丸含"
"む他の :ref:`RigidBody <class_RigidBody>` ノードが影響を受けないようにしま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:435
msgid ""
"Another reason is simply because it is easier to detect collisions with an :"
"ref:`Area <class_Area>`!"
msgstr ""
"もう一つの理由は、単に :ref:`Area <class_Area>`との衝突を検出する方が簡単だか"
"らです！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:437
msgid "Here's the script that will control our bullet:"
msgstr "弾丸を制御するスクリプトは次のとおりです:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:473
msgid "Let's go through the script:"
msgstr "スクリプトを見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:477
msgid "First we define a few class variables:"
msgstr "最初に、いくつかのクラス変数を定義します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:479
msgid "``BULLET_SPEED``: The speed at which the bullet travels."
msgstr "``BULLET_SPEED``: 弾丸が移動する速度。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:480
msgid ""
"``BULLET_DAMAGE``: The damage the bullet will cause to anything with which "
"it collides."
msgstr "``BULLET_DAMAGE``: 弾丸が衝突するあらゆるものに与えるダメージ。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:481
msgid "``KILL_TIMER``: How long the bullet can last without hitting anything."
msgstr "``KILL_TIMER``: 何もヒットせずに弾丸が持続できる時間。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:482
msgid "``timer``: A float for tracking how long the bullet has been alive."
msgstr "``timer``: 弾丸が生きている時間を追跡するためのfloat。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:483
msgid ""
"``hit_something``: A boolean for tracking whether or not we've hit something."
msgstr "``hit_something``: 何かをヒットしたかどうかを追跡するためのブール値。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:485
msgid ""
"With the exception of ``timer`` and ``hit_something``, all of these "
"variables change how the bullet interacts with the world."
msgstr ""
"``timer`` と ``hit_something`` を除き、これらの変数はすべて、弾丸が世界と相互"
"作用する方法を変更します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:488
msgid ""
"The reason we are using a kill timer is so we do not have a case where we "
"get a bullet travelling forever. By using a kill timer, we can ensure that "
"no bullets will travel forever and consume resources."
msgstr ""
"キルタイマーを使用しているのは、弾丸が永遠に移動するケースがないためです。キ"
"ルタイマーを使用することで、弾丸が永遠に移動してリソースを消費しないようにす"
"ることができます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:492
msgid ""
"As in :ref:`doc_fps_tutorial_part_one`, we have a couple all uppercase class "
"variables. The reason behind this is the same as the reason given in :ref:"
"`doc_fps_tutorial_part_one`: We want to treat these variables like "
"constants, but we want to be able to change them. In this case we will later "
"need to change the damage and speed of these bullets, so we need them to be "
"variables and not constants."
msgstr ""
":ref:`doc_fps_tutorial_part_one` のように、すべて大文字のクラス変数がいくつか"
"あります。この背後にある理由は :ref:`doc_fps_tutorial_part_one` で与えられた"
"理由と同じです: これらの変数を定数のように扱いたいが、変更できるようにしたい"
"のです。この場合、後でこれらの弾丸のダメージと速度を変更する必要があるため、"
"定数ではなく変数にする必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:499
msgid ""
"In ``_ready`` we set the area's ``body_entered`` signal to ourself so that "
"it calls the ``collided`` function when a body enters the area."
msgstr ""
"``_ready`` では、ボディがエリアに入ったときに ``collided`` 関数を呼び出すよう"
"に、エリアの ``body_entered`` シグナルを自分自身に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:504
msgid ""
"``_physics_process`` gets the bullet's local ``Z`` axis. If you look at the "
"scene in local mode, you will find that the bullet faces the positive local "
"``Z`` axis."
msgstr ""
"``_physics_process`` は弾丸のローカル ``Z`` 軸を取得します。ローカルモードで"
"シーンを見ると、弾丸がローカル ``Z`` 軸の正の方向に向かっていることがわかりま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:507
msgid ""
"Next we translate the entire bullet by that forward direction, multiplying "
"in our speed and delta time."
msgstr "次に、その方向に向けて弾丸全体を変換し、速度とデルタ時間を乗算します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:509
msgid ""
"After that we add delta time to our timer and check whether the timer has "
"reached a value as big or greater than our ``KILL_TIME`` constant. If it "
"has, we use ``queue_free`` to free the bullet."
msgstr ""
"その後、タイマーにデルタ時間を追加し、タイマーが ``KILL_TIME`` 定数以上の値に"
"達したかどうかを確認します。達している場合は、\\ ``queue_free`` を使用して弾"
"丸を解放します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:514
msgid "In ``collided`` we check whether we've hit something yet."
msgstr "``collided`` では、まだ何かにヒットしているかどうかを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:516
msgid ""
"Remember that ``collided`` is only called when a body has entered the :ref:"
"`Area <class_Area>` node. If the bullet has not already collided with "
"something, we then proceed to check if the body the bullet has collided with "
"has a function/method called ``bullet_hit``. If it does, we call it and pass "
"in the bullet's damage and the bullet's global transform so we can get the "
"bullet's rotation and position."
msgstr ""
"``collided`` は、ボディが :ref:`Area <class_Area>` ノードに入ったときにのみ呼"
"び出されることに注意してください。弾丸がまだ何かに衝突していない場合、弾丸が"
"衝突した本体に ``bullet_hit`` という関数/メソッドがあるかどうかを確認します。"
"もしそうなら、それを呼び出して、弾丸のダーメジと弾丸のグローバル変換を渡し、"
"弾丸の方向と位置を取得します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:521
msgid ""
"in ``collided``, the passed in body can be a :ref:`StaticBody "
"<class_StaticBody>`, :ref:`RigidBody <class_RigidBody>`, or :ref:"
"`KinematicBody <class_KinematicBody>`"
msgstr ""
"``collided`` では、渡されるbodyは :ref:`StaticBody <class_StaticBody>`"
"\\ 、\\ :ref:`RigidBody <class_RigidBody>`\\ 、または :ref:`KinematicBody "
"<class_KinematicBody>` になります"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:524
msgid ""
"We set the Bullet's ``hit_something`` variable to ``true`` because "
"regardless of whether or not the body that the bullet collided with has the "
"``bullet_hit`` function/method, it has hit something and so we need to make "
"sure the bullet does not hit anything else."
msgstr ""
"弾丸の ``hit_something`` 変数を ``true`` に設定したのは、弾丸が衝突したボディ"
"が `` bullet_hit`` 関数/メソッドを持っているかどうかに関係なく、弾丸はすでに"
"何かに当たっているので、もう他の何かに当たらないようにする必要があるからで"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:527
msgid "Then we free the bullet using ``queue_free``."
msgstr "その後、\\ ``queue_free`` を使用して弾丸を解放します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:529
msgid ""
"You may be wondering why we even have a ``hit_something`` variable if we "
"free the bullet using ``queue_free`` as soon as it hits something."
msgstr ""
"何かにヒットしたらすぐに ``queue_free`` を使用して弾丸を解放するのに、なぜ "
"``hit_something`` 変数があるのか疑問に思うかもしれません。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:532
msgid ""
"The reason we need to track whether we've hit something or not is because "
"``queue_free`` does not immediately free the node, so the bullet could "
"collide with another body before Godot has a chance to free it. By tracking "
"whether the bullet has hit something, we can make sure that the bullet will "
"only hit one object."
msgstr ""
"何かをヒットしたかどうかを追跡する必要があるのは、\\ ``queue_free`` がすぐに"
"ノードを解放しないため、Godotが解放する前に弾丸が別のボディと衝突する可能性が"
"あるためです。弾丸が何かに当たったかどうかを追跡することにより、弾丸が1つのオ"
"ブジェクトにしか当たらないようにすることができます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:540
msgid ""
"Before we start programming the player again, let's take a quick look at "
"``Player.tscn``. Open up ``Player.tscn`` again."
msgstr ""
"プレイヤーのプログラミングを再開する前に、\\ ``Player.tscn`` を簡単に見てみま"
"しょう。再び ``Player.tscn`` を開きます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:543
msgid ""
"Expand ``Rotation_Helper`` and notice how it has two nodes: "
"``Gun_Fire_Points`` and ``Gun_Aim_Point``."
msgstr ""
"``Rotation_Helper`` を展開し、\\ ``Gun_Fire_Points`` と ``Gun_Aim_Point`` の2"
"つのノードがあることに注目してください。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:546
msgid ""
"``Gun_aim_point`` is the point that the bullets will be aiming at. Notice "
"how it is lined up with the center of the screen and pulled a distance "
"forward on the Z axis. ``Gun_aim_point`` will serve as the point where the "
"bullets will for sure collide with as it goes along."
msgstr ""
"``Gun_aim_point`` は、弾丸が狙うポイントです。画面の中心とどのように並んでお"
"り、Z軸上で前方に一定距離引っ張られていることに注目してください。\\ "
"``Gun_aim_point`` は、弾丸が進むにつれて確実に衝突するポイントとして機能しま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:551
msgid ""
"There is a invisible mesh instance for debugging purposes. The mesh is a "
"small sphere that visually shows at which target the bullets will be aiming."
msgstr ""
"デバッグ用に非表示のメッシュインスタンスがあります。メッシュは、弾丸がどの"
"ターゲットを狙うかを視覚的に示す小さな球体です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:554
msgid ""
"Open up ``Gun_Fire_Points`` and you'll find three more :ref:`Spatial "
"<class_Spatial>` nodes, one for each weapon."
msgstr ""
"``Gun_Fire_Points`` を開くと、武器ごとにさらに1つずつ、計3つの :ref:`Spatial "
"<class_Spatial>` ノードがあります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:557
msgid ""
"Open up ``Rifle_Point`` and you'll find a :ref:`Raycast <class_Raycast>` "
"node. This is where we will be sending the raycasts for our rifle's bullets. "
"The length of the raycast will dictate how far our bullets will travel."
msgstr ""
"``Rifle_Point`` を開くと :ref:`Raycast <class_Raycast>` ノードが見つかりま"
"す。ここで、ライフルの弾丸のレイキャストを送り出します。レイキャストの長さ"
"は、弾丸の移動距離を決定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:561
msgid ""
"We are using a :ref:`Raycast <class_Raycast>` node to handle the rifle's "
"bullet because we want to fire lots of bullets quickly. If we use bullet "
"objects, it is quite possible we could run into performance issues on older "
"machines."
msgstr ""
":ref:`Raycast <class_Raycast>` ノードを使用してライフルの弾丸を処理します。こ"
"れは、大量の弾丸をすばやく発射するためです。(レイキャストの代わりに)弾丸オブ"
"ジェクトを使用すると、古いマシンでパフォーマンスの問題が発生する可能性が非常"
"に高くなります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:565
msgid ""
"If you are wondering from where the positions of the points came, they are "
"the rough positions of the ends of each weapon. You can see this by going to "
"``AnimationPlayer``, selecting one of the firing animations and scrubbing "
"through the timeline. The point for each weapon should mostly line up with "
"the end of each weapon."
msgstr ""
"ポイントの位置がどこから来たのか疑問に思っているかも知れませんが、それらは各"
"武器の先端の大まかな位置です。これは、\\ ``AnimationPlayer`` に移動して、発砲"
"アニメーションの1つを選択し、タイムラインをスクラブすることで確認できます。各"
"武器のポイントは、ほとんどの場合、各武器の先端と一致する必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:571
msgid ""
"Open up ``Knife_Point`` and you'll find an :ref:`Area <class_Area>` node. We "
"are using an :ref:`Area <class_Area>` for the knife because we only care for "
"all the bodies close to us, and because our knife does not fire into space. "
"If we were making a throwing knife, we would likely spawn a bullet object "
"that looks like a knife."
msgstr ""
"``Knife_Point`` を開くと :ref:`Area <class_Area>` ノードが見つかります。私た"
"ちはナイフに :ref:`Area <class_Area>` を使用しています。なぜなら、私たちは身"
"近なすべての体だけを気にし、ナイフを空間に発射しないからです。投げナイフを"
"作っている場合は、ナイフのように見える弾丸オブジェクトを生成する可能性があり"
"ます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:576
msgid ""
"Finally, we have ``Pistol_Point``. This is the point where we will be "
"creating/instancing our bullet objects. We do not need any additional nodes "
"here, as the bullet handles all of its own collision detection."
msgstr ""
"最後に、\\ ``Pistol_Point`` があります。これが、弾丸オブジェクトを作成/インス"
"タンス化するポイントです。弾丸は独自の衝突検出をすべて自分で処理するため、こ"
"こに追加のノードは必要ありません。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:580
msgid ""
"Now that we've seen how we will handle our other weapons, and where we will "
"spawn the bullets, let's start working on making them work."
msgstr ""
"他の武器をどのように扱うか、そして弾丸をどこで生成するかを見てきたので、それ"
"らを機能させるための作業を始めましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:583
msgid ""
"You can also look at the HUD nodes if you want. There is nothing fancy there "
"and other than using a single :ref:`Label <class_Label>`, we will not be "
"touching any of those nodes. Check :ref:"
"`doc_design_interfaces_with_the_control_nodes` for a tutorial on using GUI "
"nodes."
msgstr ""
"必要に応じてHUDノードを確認することもできます。そこに特別なものはなく、単一"
"の :ref:`Label <class_Label>` を使用すること以外、これらのノードには触れませ"
"ん。 GUIノードの使用に関するチュートリアルについては、\\ :ref:"
"`doc_design_interfaces_with_the_control_nodes` を確認してください。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:589
msgid "Creating the first weapon"
msgstr "最初の武器を作成する"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:591
msgid "Lets write the code for each of our weapons, starting with the pistol."
msgstr "ピストルから始めて、各武器のコードを書きましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:593
msgid ""
"Select ``Pistol_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Pistol_Point``) and create a new script called "
"``Weapon_Pistol.gd``."
msgstr ""
"``Pistol_Point`` (``Player`` -> ``Rotation_Helper`` -> ``Gun_Fire_Points`` -"
"> ``Pistol_Point``) を選択し、\\ ``Weapon_Pistol.gd`` という新しいスクリプト"
"を作成します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:595
msgid "Add the following code to ``Weapon_Pistol.gd``:"
msgstr "次のコードを ``Weapon_Pistol.gd`` に追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:646
msgid "Let's go over how the script works."
msgstr "スクリプトの仕組みを見ていきましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:650
msgid "First we define some class variables we'll need in the script:"
msgstr "最初に、スクリプトで必要なクラス変数を定義します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:652
msgid "``DAMAGE``: The amount of damage a single bullet does."
msgstr "``DAMAGE``: 1つの弾丸が与えるダメージの量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:653
msgid "``IDLE_ANIM_NAME``: The name of the pistol's idle animation."
msgstr "``IDLE_ANIM_NAME``: ピストルのアイドルアニメーションの名前。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:654
msgid "``FIRE_ANIM_NAME``: The name of the pistol's fire animation."
msgstr "``FIRE_ANIM_NAME``: ピストルの発射アニメーションの名前。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:655
msgid ""
"``is_weapon_enabled``: A variable for checking whether this weapon is in use/"
"enabled."
msgstr "``is_weapon_enabled``: この武器が使用中か有効かを確認するための変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:656
msgid "``bullet_scene``: The bullet scene we worked on earlier."
msgstr "``bullet_scene``: 先ほど作業した弾丸のシーン。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:657
msgid "``player_node``: A variable to hold ``Player.gd``."
msgstr "``player_node``: ``Player.gd`` を保持する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:659
msgid ""
"The reason we define most of these variables is so we can use them in "
"``Player.gd``."
msgstr ""
"これらの変数のほとんどを定義するのは、\\ ``Player.gd`` で使用できるようにする"
"ためです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:661
msgid ""
"Each of the weapons we'll make will have all these variables (minus "
"``bullet_scene``) so we have a consistent interface to interact with in "
"``Player.gd``. By using the same variables/functions in each weapon, we can "
"interact with them without having to know which weapon we are using, which "
"makes our code much more modular because we can add weapons without having "
"to change much of the code in ``Player.gd`` and it will just work."
msgstr ""
"作成する各武器にはこれらすべての変数が含まれるため(\"bullet_scene\"を除"
"く)、\\ ``Player.gd`` でやり取りするための一貫したインターフェイスがありま"
"す。 各武器で同じ変数/関数を使用することで、使用している武器を知らなくてもそ"
"れらとやり取りできます。これにより、\\ ``Player.gd`` の多くのコードを変更する"
"ことなく武器を追加できるため、コードがよりモジュール化され、上手く動作しま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:666
msgid ""
"We could write all the code in ``Player.gd``, but then ``Player.gd`` will "
"get increasingly harder to manage as we add weapons. By using a modular "
"design with a consistent interface, we can keep ``Player.gd`` nice and neat, "
"while also making it easier to add/remove/modify weapons."
msgstr ""
"すべてのコードを ``Player.gd`` に書くこともできますが、そこに武器を追加する"
"と ``Player.gd`` の管理がますます難しくなります。一貫したインターフェースを備"
"えたモジュール設計を使用することで、\\ ``Player.gd`` をきちんとした状態に保つ"
"とともに、武器の追加/削除/変更を容易にします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:671
msgid "In ``_ready`` we simply pass over it."
msgstr "``_ready`` では、単にそれをパスします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:673
msgid ""
"There is one thing of note though, an assumption that we'll fill in ``Player."
"gd`` at some point."
msgstr ""
"ただし、注意すべき点が1つあります。ある時点で ``Player.gd`` を書き込むという"
"前提です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:675
msgid ""
"We are going to assume that ``Player.gd`` will pass themselves in before "
"calling any of the functions in ``Weapon_Pistol.gd``."
msgstr ""
"``Weapon_Pistol.gd`` の関数のいずれかを呼び出す前に、\\ ``Player.gd`` が自身"
"を渡すと前提しています。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:677
msgid ""
"While this can lead to situations where the player does not pass themselves "
"in (because we forget), we would have to have a long string of "
"``get_parent`` calls to traverse up the scene tree to retrieve the player. "
"This does not look pretty (``get_parent().get_parent().get_parent()`` and so "
"on) and it is relatively safe to assume we will remember to pass ourselves "
"to each weapon in ``Player.gd``."
msgstr ""
"これは、プレイヤーが自分自身を渡さないという(問題のある)状況につながる可能性"
"がありますが(忘れているため)、プレイヤーを取得するためにシーンツリーを走査す"
"るには、長い文字列の ``get_parent`` の呼び出しが必要です。これは見た目が良く"
"無く(``get_parent().get_parent().get_parent()`` など)、\\ ``Player.gd`` 内の"
"各武器に自分自身を渡すことを忘れないでおくという考え方は比較的安全です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:683
msgid "Next let's look at ``fire_weapon``:"
msgstr "次に ``fire_weapon`` を見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:685
msgid "The first thing we do is instance the bullet scene we made earlier."
msgstr "最初に行うことは、先ほど作成した弾丸シーンのインスタンス化です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:687
msgid ""
"By instancing the scene, we are creating a new node holding all the node(s) "
"in the scene we instanced, effectively cloning that scene."
msgstr ""
"シーンをインスタンス化することにより、インスタンス化したシーン内のすべての"
"ノードを保持する新しいノードを作成し、そのシーンを効果的に複製します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:689
msgid ""
"Then we add a ``clone`` to the first child node of the root of the scene we "
"are currently in. By doing this, we're making it a child of the root node of "
"the currently loaded scene."
msgstr ""
"次に、現在のシーンのルートの最初の子ノードに ``clone`` を追加します。これによ"
"り、現在ロードされているシーンのルートノードの子になります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:691
msgid ""
"In other words, we are adding a ``clone`` as a child of the first node "
"(whatever is at the top of the scene tree) in the currently loaded/opened "
"scene. If the currently loaded/open scene is ``Testing_Area.tscn``, we'd be "
"adding our ``clone`` as a child of ``Testing_Area``, the root node in that "
"scene."
msgstr ""
"言い換えると、現在ロードされている/開かれているシーンの最初のノード(シーンツ"
"リーの一番上にあるもの)の子として ``clone`` を追加しています。現在ロードされ"
"ている/開いているシーンが ``Testing_Area.tscn`` の場合、そのシーンのルート"
"ノードである ``Testing_Area`` の子として ``clone`` を追加します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:694
msgid ""
"As mentioned later below in the section on adding sounds, this method makes "
"an assumption. This will be explained later in the section on adding sounds "
"in :ref:`doc_fps_tutorial_part_three`"
msgstr ""
"サウンドの追加に関するセクションで後述するように、この方法は推定を行います。"
"これについては、後ほど :ref:`doc_fps_tutorial_part_three` でサウンドを追加す"
"るセクションで説明します"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:697
#, fuzzy
msgid ""
"Next we set the global transform of the clone to the ``Pistol_Point``'s "
"global transform. The reason we do this is so the bullet is spawned at the "
"end of the pistol."
msgstr ""
"次に、クローンのグローバルtransformを ``Pistol_Aim_Point`` のグローバル"
"transformに設定します。これを行う理由は、ピストルの先端で弾丸が生成されるため"
"です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:699
#, fuzzy
msgid ""
"You can see that ``Pistol_Point`` is positioned right at the end of the "
"pistol by clicking the :ref:`AnimationPlayer <class_AnimationPlayer>` and "
"scrolling through ``Pistol_fire``. You'll find the position is more or less "
"at the end of the pistol when it fires."
msgstr ""
":ref:`AnimationPlayer <class_AnimationPlayer>` をクリックして "
"``Pistol_fire`` をスクロールすると、\\ ``Pistol_Aim_Point`` がピストルの先端"
"に配置されていることがわかります。ピストルが発射されると、ピストルの先端とほ"
"ほ同じ位置が得られます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:702
msgid ""
"Next we scale it up by a factor of ``4`` because the bullet scene is a "
"little too small by default."
msgstr ""
"次に、弾丸のシーンはデフォルトでは少し小さすぎるため、\\ ``4`` の係数でスケー"
"ルアップします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:704
msgid ""
"Then we set the bullet's damage (``BULLET_DAMAGE``) to the amount of damage "
"a single pistol bullet does (``DAMAGE``)."
msgstr ""
"次に、弾丸のダメージ(``BULLET_DAMAGE``)を1つのピストルの弾丸が与えるダメージ"
"の量(``DAMAGE``) 設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:708
msgid "Now let's look at ``equip_weapon``:"
msgstr "では、\\ ``equip_weapon`` を見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:710
msgid ""
"The first thing we do is check to see whether the animation manager is in "
"the pistol's idle animation. If we are in the pistol's idle animation, we "
"set ``is_weapon_enabled`` to ``true`` and return ``true`` because the pistol "
"has successfully been equipped."
msgstr ""
"最初に行うことは、アニメーションマネージャーがピストルのアイドルアニメーショ"
"ン中であるかどうかを確認することです。ピストルのアイドルアニメーション中の場"
"合、ピストルが正常に装備されているため、\\ ``is_weapon_enabled`` を ``true`` "
"に設定し、\\ ``true`` を返します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:714
msgid ""
"Because we know our pistol's ``equip`` animation automatically transitions "
"to the pistol's idle animation, if we are in the pistol's idle animation the "
"pistol must have finished playing the equip animation."
msgstr ""
"ピストルの ``equip`` アニメーションは自動的にピストルのアイドルアニメーション"
"に移行することがわかっているため、ピストルのアイドルアニメーション中の場合、"
"ピストルは装備(equip)アニメーションの再生を完了している必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:717
msgid ""
"We know these animations will transition because we wrote the code to make "
"them transition in ``Animation_Manager.gd``"
msgstr ""
"これらのアニメーションが遷移することは、\\ ``Animation_Manager.gd`` で遷移さ"
"せるコードを記述したので知っているはずです"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:719
msgid ""
"Next we check to see if the player is in the ``Idle_unarmed`` animation "
"state. Because all unequipping animations go to this state, and because any "
"weapon can be equipped from this state, we change animations to "
"``Pistol_equip`` if the player is in the ``Idle_unarmed`` state."
msgstr ""
"次に、プレイヤーが ``Idle_unarmed`` アニメーション状態にあるかどうかを確認し"
"ます。すべての装備解除アニメーションがこの状態になり、この状態から武器を装備"
"できるため、プレイヤーが ``Idle_unarmed`` 状態にある場合、アニメーションを "
"``Pistol_equip`` に変更します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:722
msgid ""
"Since we know ``Pistol_equip`` will transition to ``Pistol_idle``, we do not "
"need to do any more additional processing for equipping weapons, but since "
"we were not able to equip the pistol yet, we return ``false``."
msgstr ""
"``Pistol_equip`` が ``Pistol_idle`` に移行することがわかっているため、武器を"
"装備するために追加の処理を行う必要はありませんが、まだピストルを装備できてい"
"ないので、\\ `` false`` を返します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:727
msgid "Finally, let's look at ``unequip_weapon``:"
msgstr "最後に、 ``unequip_weapon`` を見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:729
msgid ""
"``unequip_weapon`` is similar to ``equip_weapon``, but instead we're "
"checking things in reverse."
msgstr ""
"``unequip_weapon`` は ``equip_weapon`` に似ていますが、代わりに逆順にチェック"
"しています。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:731
msgid ""
"First we check to see whether the player is in the idle animation state. "
"Then we check to make sure the player is not in the ``Pistol_unequip`` "
"animation. If the player is not in the ``Pistol_unequip`` animation, we want "
"to play the ``pistol_unequip`` animation."
msgstr ""
"最初に、プレイヤーがアイドルアニメーション状態になっているかどうかを確認しま"
"す。次に、プレイヤーが ``Pistol_unequip`` アニメーションになっていないことを"
"確認します。プレイヤーが ``Pistol_unequip`` アニメーションになっていない場"
"合、\\ ``pistol_unequip`` アニメーションを再生します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:734
msgid ""
"You may be wondering why we are checking to see whether the player is in the "
"pistol's idle animation, and then making sure the player is not unequipping "
"right after. The reason behind the additional check is because we could (in "
"rare cases) call ``unequip_weapon`` twice before we've had a chance to "
"process ``set_animation``, so we add this additional check to make sure the "
"unequip animation plays."
msgstr ""
"プレイヤーがピストルのアイドルアニメーションにあるかどうかを確認し、その直後"
"にプレイヤーが装備を解除していないことを確認する理由に疑問を抱くかもしれませ"
"ん。追加のチェックの背後にある理由は、(まれに) ``set_animation`` を処理する前"
"に ``unequip_weapon`` を2回呼び出すことができるためです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:738
msgid ""
"Next we check to see whether the player is in ``Idle_unarmed``, which is the "
"animation state we will transition into from ``Pistol_unequip``. If the "
"player is in ``Idle_unarmed``, then we set ``is_weapon_enabled`` to "
"``false`` since we are no longer using this weapon, and return ``true`` "
"because we have successfully unequipped the pistol."
msgstr ""
"次に、プレイヤーが ``Idle_unarmed`` にあるかどうかを確認します。これは、\\ "
"``Pistol_unequip`` から遷移するアニメーション状態です。プレイヤーが "
"``Idle_unarmed`` にいる場合、この武器を使用しなくなったため "
"``is_weapon_enabled`` を ``false`` に設定し、ピストルを正常に装備解除したた"
"め ``true`` を返します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:741
msgid ""
"If the player is not in ``Idle_unarmed``, we return ``false`` because we "
"have not yet successfully unequipped the pistol."
msgstr ""
"プレイヤーが ``Idle_unarmed`` にない場合、ピストルの装備をまだ解除していない"
"ため ``false`` を返します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:744
msgid "Creating the other two weapons"
msgstr "他の2つの武器を作成する"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:746
msgid ""
"Now that we have all the code we'll need for the pistol, let's add the code "
"for the rifle and knife next."
msgstr ""
"ピストルに必要なコードがすべて揃ったので、次にライフルとナイフのコードを追加"
"しましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:748
msgid ""
"Select ``Rifle_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Rifle_Point``) and create a new script called "
"``Weapon_Rifle.gd``, then add the following:"
msgstr ""
"``Rifle_Point``(``Player`` -> ``Rotation_Helper`` -> ``Gun_Fire_Points`` -> "
"``Rifle_Point``)を選択し、\\ ``Weapon_Rifle.gd`` という新しいスクリプトを作成"
"して、次のように追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:801
msgid ""
"Most of this is exactly the same as ``Weapon_Pistol.gd``, so we're only "
"going to look at what's changed: ``fire_weapon``."
msgstr ""
"このほとんどは ``Weapon_Pistol.gd`` とまったく同じであるため、変更点のみを見"
"ていきます: ``fire_weapon``\\ 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:803
msgid ""
"The first thing we do is get the :ref:`Raycast <class_Raycast>` node, which "
"is a child of ``Rifle_Point``."
msgstr ""
"最初に行うことは、\\ :ref:`Raycast <class_Raycast>` ノードを取得することで"
"す。これは ``Rifle_Point`` の子です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:805
msgid ""
"Next we force the :ref:`Raycast <class_Raycast>` to update using "
"``force_raycast_update``. This will force the :ref:`Raycast <class_Raycast>` "
"to detect collisions when we call it, meaning we get a frame perfect "
"collision check with the 3D physics world."
msgstr ""
"次に、\\ ``force_raycast_update`` を使用して :ref:`Raycast <class_Raycast>` "
"を強制的に更新します。これにより :ref:`Raycast <class_Raycast>` が呼び出され"
"たときに衝突を検出し、フレームパーフェクトな3D物理世界とのコリジョンチェック"
"を取得します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:808
msgid ""
"Then we check to see if the :ref:`Raycast <class_Raycast>` collided with "
"something."
msgstr ""
"次に、\\ :ref:`Raycast <class_Raycast>` が何かと衝突したかどうかを確認しま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:810
msgid ""
"If the :ref:`Raycast <class_Raycast>` has collided with something, we first "
"get the collision body it collided with. This can be a :ref:`StaticBody "
"<class_StaticBody>`, :ref:`RigidBody <class_RigidBody>`, or a :ref:"
"`KinematicBody <class_KinematicBody>`."
msgstr ""
":ref:`Raycast <class_Raycast>` が何かと衝突した場合、最初に衝突したコリジョン"
"bodyを取得します。これは、\\ :ref`StaticBody <class_StaticBody>`\\ 、\\ :ref:"
"`RigidBody <class_RigidBody>`\\ 、または :ref:`KinematicBody "
"<class_KinematicBody>`\\ です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:813
msgid ""
"Next we want to make sure the body we've collided with is not the player, "
"since we (probably) do not want to give the player the ability to shoot "
"themselves in the foot."
msgstr ""
"次に、私たちは(おそらく)プレイヤーに自分自身の足を撃つ能力を与えたくないの"
"で、衝突したボディがプレイヤーではないことを確認したいと思います。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:815
msgid ""
"If the body is not the player, we then check to see if it has a function/"
"method called ``bullet_hit``. If it does, we call it and pass in the amount "
"of damage this bullet does (``DAMAGE``), and the global transform of the :"
"ref:`Raycast <class_Raycast>` so we can tell from which direction the bullet "
"came."
msgstr ""
"ボディがプレイヤーではない場合、\\ ``bullet_hit`` という関数/メソッドがあるか"
"どうかを確認します。もしそうなら、私たちはそれを呼び出して、この弾丸が与える"
"ダメージの量(``DAMAGE``)、および :ref:`Raycast <class_Raycast>` のグローバル"
"transformを渡すので、どの方向から弾丸が来たかを知ることができます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:820
msgid "Now all we need to do is write the code for the knife."
msgstr "今、必要があるのはナイフのコードを書くことだけです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:822
msgid ""
"Select ``Knife_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Knife_Point``) and create a new script called "
"``Weapon_Knife.gd``, then add the following:"
msgstr ""
"``Knife_Point``( ``Player`` -> ``Rotation_Helper`` -> ``Gun_Fire_Points`` -> "
"``Knife_Point``)を選択し、\\ ``Weapon_Knife.gd`` という新しいスクリプトを作成"
"し、次のように追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:873
msgid ""
"As with ``Weapon_Rifle.gd``, the only differences are in ``fire_weapon``, so "
"let's look at that:"
msgstr ""
"``Weapon_Rifle.gd`` と同様に、唯一の違いは ``fire_weapon`` にあるため、それを"
"見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:875
msgid ""
"The first thing we do is get the :ref:`Area <class_Area>` child node of "
"``Knife_Point``."
msgstr ""
"最初に行うことは、\\ ``Knife_Point`` の :ref:`Area <class_Area>` 子ノードを取"
"得することです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:877
msgid ""
"Next we want to get all the collision bodies inside the :ref:`Area "
"<class_Area>` using ``get_overlapping_bodies``. This will return a list of "
"every body that touches the :ref:`Area <class_Area>`."
msgstr ""
"次に、\\ ``get_overlapping_bodies`` を使用して :ref:`Area <class_Area>` 内の"
"すべてのコリジョンボディを取得します。これは :ref:`Area <class_Area>` に触れ"
"るすべてのボディのリストを返します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:880
msgid "We next want to go through each of those bodies."
msgstr "次に、これらの各ボディを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:882
msgid ""
"First we check to make sure the body is not the player, because we do not "
"want to let the player be able to stab themselves. If the body is the "
"player, we use ``continue`` so we jump and look at the next body in "
"``bodies``."
msgstr ""
"まず、プレイヤーが自分自身を刺すことができないようにするために、体がプレイ"
"ヤーではないことを確認します。ボディがプレイヤーの場合は、\\ ``continue`` を"
"使用するため、ジャンプして ``bodys`` の次のボディを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:885
msgid ""
"If we have not jumped to the next body, we then check to see if the body has "
"the ``bullet_hit`` function/method. If it does, we call it, passing in the "
"amount of damage a single knife swipe does (``DAMAGE``) and the global "
"transform of the :ref:`Area <class_Area>`."
msgstr ""
"次のボディにジャンプしていない場合、ボディに ``bullet_hit`` 関数/メソッドがあ"
"るかどうかを確認します。もしそうなら、私たちはそれを呼び出し、1回のナイフスワ"
"イプが与えるダメージの量(``DAMAGE``)と :ref:`Area <class_Area>` のグローバル"
"transfomを渡します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:888
msgid ""
"While we could attempt to calculate a rough location for where the knife hit "
"exactly, we are not going to because using the :ref:`Area <class_Area>`'s "
"position works well enough and the extra time needed to calculate a rough "
"position for each body is not worth the effort."
msgstr ""
"ナイフが正確に当たった場所の大まかな位置を計算することはできますが、\\ :ref:"
"`Area <class_Area>` の位置を使用するとそれで十分に機能するので、大まかな位置"
"を計算するのに必要な余分な時間をかけてまで、 各ボディが努力する価値はありませ"
"ん。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:893
msgid "Making the weapons work"
msgstr "武器を機能させる"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:895
msgid "Let's start making the weapons work in ``Player.gd``."
msgstr "``Player.gd`` で武器を機能させましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:897
msgid ""
"First let's start by adding some class variables we'll need for the weapons:"
msgstr "まず、武器に必要ないくつかのクラス変数を追加することから始めましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:915
msgid "Let's go over what these new variables will do:"
msgstr "これらの新しい変数が何をするかを見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:917
msgid ""
"``animation_manager``: This will hold the :ref:`AnimationPlayer "
"<class_AnimationPlayer>` node and its script, which we wrote previously."
msgstr ""
"``animation_manager``: これは :ref:`AnimationPlayer <class_AnimationPlayer>` "
"ノードと以前に書いたそのスクリプトを保持します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:918
msgid ""
"``current_weapon_name``: The name of the weapon we are currently using. It "
"has four possible values: ``UNARMED``, ``KNIFE``, ``PISTOL``, and ``RIFLE``."
msgstr ""
"``current_weapon_name``: 現在使用している武器の名前。可能な値は4つあります: "
"``UNARMED``\\ 、\\ ``KNIFE``\\ 、\\ ``PISTOL``\\ 、および ``RIFLE``\\ 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:919
msgid "``weapons``: A dictionary that will hold all the weapon nodes."
msgstr "``weapons``: すべての武器ノードを保持するdictionary。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:920
msgid ""
"``WEAPON_NUMBER_TO_NAME``: A dictionary allowing us to convert from a "
"weapon's number to its name. We'll use this for changing weapons."
msgstr ""
"``WEAPON_NUMBER_TO_NAME``: 武器の番号から名前に変換できるdictionary。これを武"
"器の変更に使用します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:921
msgid ""
"``WEAPON_NAME_TO_NUMBER``: A dictionary allowing us to convert from a "
"weapon's name to its number. We'll use this for changing weapons."
msgstr ""
"``WEAPON_NAME_TO_NUMBER``: 武器の名前からその番号に変換できるdictionary。これ"
"を武器の変更に使用します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:922
msgid ""
"``changing_weapon``: A boolean to track whether or not we are changing guns/"
"weapons."
msgstr "``changing_weapon``: 銃/武器を変更しているかどうかを追跡するブール値。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:923
msgid "``changing_weapon_name``: The name of the weapon we want to change to."
msgstr "``changing_weapon_name``: 変更したい武器の名前。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:924
msgid ""
"``health``: How much health our player has. In this part of the tutorial we "
"will not be using it."
msgstr ""
"``health``: プレイヤーの健康状態。チュートリアルのこの部分では、使用しませ"
"ん。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:925
msgid ""
"``UI_status_label``: A label to show how much health we have, and how much "
"ammo we have both in our gun and in reserve."
msgstr ""
"``UI_status_label``: 私たちがどれだけのhealthを持っているか、そして私たちの銃"
"と予備の両方にどのくらいの弾薬を持っているかを示すラベル。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:929
msgid ""
"Next we need to add a few things in ``_ready``. Here's the new ``_ready`` "
"function:"
msgstr ""
"次に、\\ ``_ready`` にいくつかの項目を追加する必要があります。新しい "
"``_ready`` 関数は次のとおりです:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:961
msgid "Let's go over what's changed."
msgstr "変更点を調べてみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:963
msgid ""
"First we get the :ref:`AnimationPlayer <class_AnimationPlayer>` node and "
"assign it to the ``animation_manager`` variable. Then we set the callback "
"function to a :ref:`FuncRef <class_FuncRef>` that will call the player's "
"``fire_bullet`` function. Right now we haven't written the ``fire_bullet`` "
"function, but we'll get there soon."
msgstr ""
"最初に :ref:`AnimationPlayer <class_AnimationPlayer>` ノードを取得し、それを "
"``animation_manager`` 変数に割り当てます。次に、コールバック関数を :ref:"
"`FuncRef <class_FuncRef>` に設定し、プレイヤーの ``fire_bullet`` 関数を呼び出"
"します。現時点では ``fire_bullet`` 関数を書いていませんが、すぐにそこへ到着し"
"ます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:967
msgid ""
"Next we get all the weapon nodes and assign them to ``weapons``. This will "
"allow us to access the weapon nodes only with their name (``KNIFE``, "
"``PISTOL``, or ``RIFLE``)."
msgstr ""
"次に、すべての武器ノードを取得し、それらを ``weapons`` に割り当てます。これに"
"より、名前(``KNIFE``\\ 、\\ ``PISTOL``\\ 、または ``RIFLE``)でのみ武器ノード"
"にアクセスできます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:970
msgid ""
"We then get ``Gun_Aim_Point``'s global position so we can rotate the "
"player's weapons to aim at it."
msgstr ""
"次に ``Gun_Aim_Point`` のグローバルな位置を取得し、プレイヤーの武器を回転させ"
"て照準を合わせます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:972
msgid "Then we go through each weapon in ``weapons``."
msgstr "次に、\\ ``weapons`` の各武器を通過します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:974
msgid ""
"We first get the weapon node. If the weapon node is not ``null``, we then "
"set its ``player_node`` variable to this script (``Player.gd``). Then we "
"have it look at ``gun_aim_point_pos`` using the ``look_at`` function, and "
"then rotate it by ``180`` degrees on the ``Y`` axis."
msgstr ""
"最初に武器ノードを取得します。武器ノードが ``null`` でない場合、その "
"``player_node`` 変数をこのスクリプト(``Player.gd``)に設定します。次に、\\ "
"``look_at`` 関数を使用して ``gun_aim_point_pos`` を調べ、\\ ``Y`` 軸上で "
"``180`` 度回転させます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:977
msgid ""
"We rotate all of those weapon points by ``180`` degrees on their ``Y`` axis "
"because our camera is pointing backwards. If we did not rotate all of these "
"weapon points by ``180`` degrees, all of the weapons would fire backwards."
msgstr ""
"カメラが後方を向いているため、これらすべての武器ポイントを ``Y`` 軸上で "
"``180`` 度回転させます。これらのすべての武器ポイントを ``180`` 度回転させな"
"かった場合、すべての武器が後方に発砲します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:980
msgid ""
"Then we set ``current_weapon_name`` and ``changing_weapon_name`` to "
"``UNARMED``."
msgstr ""
"次に、\\ ``current_weapon_name`` と ``changing_weapon_name`` を ``UNARMED`` "
"に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:982
msgid "Finally, we get the UI :ref:`Label <class_Label>` from our HUD."
msgstr "最後に、HUDからUI :ref:`Label <class_Label>` を取得します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:986
msgid ""
"Let's add a new function call to ``_physics_process`` so we can change "
"weapons. Here's the new code:"
msgstr ""
"新しい関数呼び出しを ``_physics_process`` に追加して、武器を変更できるように"
"します。新しいコードは次のとおりです:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:996
msgid "Now we will call ``process_changing_weapons``."
msgstr "ここで ``process_changing_weapons`` を呼び出します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1000
msgid ""
"Now let's add all the player input code for the weapons in "
"``process_input``. Add the following code:"
msgstr ""
"それでは、\\ ``process_input`` に武器のすべてのプレイヤー入力コードを追加して"
"みましょう。次のコードを追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1040
msgid "Let's go over the additions, starting with how we're changing weapons."
msgstr "武器を変更する方法から始めて、追加について見ていきましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1042
msgid ""
"First we get the current weapon's number and assign it to "
"``weapon_change_number``."
msgstr ""
"まず、現在の武器の番号を取得し、それを ``weapon_change_number`` に割り当てま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1044
msgid ""
"Then we check to see if any of the number keys (keys 1-4) are pressed. If "
"they are, we set ``weapon_change_number`` to the value mapped at that key."
msgstr ""
"次に、数字キー(キー1〜4)のいずれかが押されているかどうかを確認します。もしそ"
"うであれば、\\ ``weapon_change_number`` をそのキーにマッピングされた値に設定"
"します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1047
msgid ""
"The reason key 1 is mapped to ``0`` is because the first element in a list "
"is mapped to zero, not one. Most list/array accessors in most programming "
"languages start at ``0`` instead of ``1``. See https://en.wikipedia.org/wiki/"
"Zero-based_numbering for more information."
msgstr ""
"キー1が ``0`` にマッピングされる理由は、リストの最初の要素が1ではなくゼロに"
"マッピングされるためです。ほとんどのプログラミング言語のほとんどのリスト/配列"
"の添字(インデックス)は、\\ ``1`` ではなく ``0`` で始まります。詳細について"
"は、\\ https://en.wikipedia.org/wiki/Zero-based_numbering を参照してくださ"
"い。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1050
msgid ""
"Next we check to see if ``shift_weapon_positive`` or "
"``shift_weapon_negative`` is pressed. If one of them is, we add/subtract "
"``1`` from ``weapon_change_number``."
msgstr ""
"次に、\\ ``shift_weapon_positive`` または ``shift_weapon_negative`` が押され"
"ているかどうかを確認します。それらの1つがあれば、\\ ``weapon_change_number`` "
"から ``1`` を加算/減算します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1053
msgid ""
"Because the player may have shifted ``weapon_change_number`` outside of the "
"number of weapons the player has, we clamp it so it cannot exceed the "
"maximum number of weapons the player has and it ensures "
"``weapon_change_number`` is ``0`` or more."
msgstr ""
"プレイヤーが保有している武器数の外側に ``weapon_change_number`` をシフトした"
"可能性があるため、プレイヤーが持つ武器の最大数を超えないようにクランプし、\\ "
"``weapon_change_number`` が ``0`` もしくはそれ以上であることを保証します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1056
msgid ""
"Then we check to make sure the player is not already changing weapons. If "
"the player is not, we then check to see if the weapon the player wants to "
"change to is a new weapon and not the weapon the player is currently using. "
"If the weapon the player is wanting to change to is a new weapon, we then "
"set ``changing_weapon_name`` to the weapon at ``weapon_change_number`` and "
"set ``changing_weapon`` to ``true``."
msgstr ""
"次に、プレイヤーが既に武器を変更していないことを確認します。プレイヤーが変更"
"していない場合、プレイヤーが変更したい武器が新しい武器であり、プレイヤーが現"
"在使用している武器ではないかどうかを確認します。プレイヤーが変更したい武器が"
"新しい武器である場合は、\\ ``weapon_change_number`` で "
"``changing_weapon_name`` を武器に設定し、\\ ``changing_weapon`` を ``true`` "
"に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1060
msgid ""
"For firing the weapon we first check to see if the ``fire`` action is "
"pressed. Then we check to make sure the player is not changing weapons. Next "
"we get the weapon node for the current weapon."
msgstr ""
"武器を発射するには、まず ``fire`` アクションが押されているかどうかを確認しま"
"す。次に、プレイヤーが武器を変更していないことを確認します。次に、現在の武器"
"の武器ノードを取得します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1064
msgid ""
"If the current weapon node does not equal ``null``, and the player is in its "
"``IDLE_ANIM_NAME`` state, we set the player's animation to the current "
"weapon's ``FIRE_ANIM_NAME``."
msgstr ""
"現在の武器ノードが ``null`` ではなく、プレイヤーが ``IDLE_ANIM_NAME`` 状態に"
"ある場合、プレイヤーのアニメーションを現在の武器の ``FIRE_ANIM_NAME`` に設定"
"します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1069
msgid "Let's add ``process_changing_weapons`` next."
msgstr "次に ``process_changing_weapons`` を追加しましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1071
msgid "Add the following code:"
msgstr "次のコードを追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1107
msgid "Let's go over what's happening here:"
msgstr "ここで何が起こっているのかを見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1109
msgid ""
"The first thing we do is make sure we've received input to change weapons. "
"We do this by making sure ``changing_weapons`` is ``true``."
msgstr ""
"最初に行うことは、武器を変更するための入力を受け取ったことを確認することで"
"す。これを行うには、\\ ``changing_weapons`` が ``true`` であることを確認しま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1111
msgid ""
"Next we define a variable (``weapon_unequipped``) so we can check whether "
"the current weapon has been successfully unequipped or not."
msgstr ""
"次に、変数(``weapon_unequipped``)を定義して、現在の武器が正常に装備解除された"
"かどうかを確認できるようにします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1113
msgid "Then we get the current weapon from ``weapons``."
msgstr "次に、\\ ``weapons`` から現在の武器を取得します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1115
msgid ""
"If the current weapon is not ``null``, then we need to check whether the "
"weapon is enabled. If the weapon is enabled, we call its ``unequip_weapon`` "
"function so it will start the unequip animation. If the weapon is not "
"enabled, we set ``weapon_unequipped`` to ``true`` because the weapon has "
"successfully been unequipped."
msgstr ""
"現在の武器が ``null`` でない場合、武器が有効になっているかどうかを確認する必"
"要があります。武器が有効になっている場合、\\ ``unequip_weapon`` 関数を呼び出"
"して、武装解除アニメーションを開始します。武器が有効になっていない場合、武器"
"が正常に装備解除されたため、\\ ``weapon_unequipped`` を ``true`` に設定しま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1118
msgid ""
"If the current weapon is ``null``, then we can simply set "
"``weapon_unequipped`` to ``true``. The reason we do this check is because "
"there is no weapon script/node for ``UNARMED``, but there is also no "
"animations for ``UNARMED``, so we can just start equipping the weapon the "
"player wants to change to."
msgstr ""
"現在の武器が ``null`` の場合、単純に ``weapon_unequipped`` を ``true`` に設定"
"できます。このチェックを行う理由は、\\ ``UNARMED`` 用の武器スクリプト/ノード"
"がないためですが、\\ ``UNARMED`` 用のアニメーションも存在しないため、プレイ"
"ヤーが変更したい武器の装備をすぐに開始できるからです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1121
msgid ""
"If the player has successfully unequipped the current weapon "
"(``weapon_unequipped == true``), we need to equip the new weapon."
msgstr ""
"プレイヤーが現在の武器の装備解除に成功した場合(``weapon_unequipped == "
"true``)、新しい武器を装備する必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1123
msgid ""
"First we define a new variable (``weapon_equipped``) for tracking whether "
"the player has successfully equipped the new weapon or not."
msgstr ""
"最初に、プレイヤーが新しい武器を正常に装備したかどうかを追跡するための新しい"
"変数(``weapon_equipped``)を定義します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1125
msgid ""
"Then we get the weapon the player wants to change to. If the weapon the "
"player wants to change to is not ``null``, we then check to see whether it's "
"enabled or not. If it is not enabled, we call its ``equip_weapon`` function "
"so it starts to equip the weapon. If the weapon is enabled, we set "
"``weapon_equipped`` to ``true``."
msgstr ""
"次に、プレイヤーが変更したい武器を取得します。プレイヤーが変更したい武器が "
"``null`` ではない場合、それが有効になっているかどうかを確認します。有効になっ"
"ていない場合は、\\ ``equip_weapon`` 関数を呼び出して、武器の装備を開始しま"
"す。武器が有効になっている場合、\\ ``weapon_equipped`` を ``true`` に設定しま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1128
msgid ""
"If the weapon the player wants to change to is ``null``, we simply set "
"``weapon_equipped`` to ``true`` because we do not have any node/script for "
"``UNARMED``, nor do we have any animations."
msgstr ""
"プレイヤーが変更したい武器が ``null`` の場合、\\ ``wearmon_equipped`` を "
"``true`` に設定します。これは、\\ ``UNARMED`` のノード/スクリプトがなく、アニ"
"メーションもないためです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1131
msgid ""
"Finally, we check to see whether the player has successfully equipped the "
"new weapon. If (s)he has done so, we set ``changing_weapon`` to ``false`` "
"because the player is no longer changing weapons. We also set "
"``current_weapon_name`` to ``changing_weapon_name`` since the current weapon "
"has changed, and then we set ``changing_weapon_name`` to an empty string."
msgstr ""
"最後に、プレイヤーが新しい武器を正常に装備したかどうかを確認します。プレイ"
"ヤーがそうしている場合、プレイヤーはもはや武器の変更中ではないので、\\ "
"``changeing_weapon`` を ``false`` に設定します。また、現在の武器が変更された"
"ため、\\ ``current_weapon_name`` を ``changing_weapon_name`` に設定してか"
"ら、\\ ``changing_weapon_name`` を空の文字列に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1137
msgid ""
"Now, we need to add one more function to the player, and then the player is "
"ready to start firing the weapons!"
msgstr ""
"ここで、プレイヤーにもう1つの関数を追加する必要があります。これで、プレイヤー"
"は武器を発砲する準備が整いました！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1139
msgid ""
"We need to add ``fire_bullet``, which will be called by the :ref:"
"`AnimationPlayer <class_AnimationPlayer>` at those points we set earlier in "
"the :ref:`AnimationPlayer <class_AnimationPlayer>` function track:"
msgstr ""
":ref:`AnimationPlayer <class_AnimationPlayer>` の関数トラックで以前に設定した"
"ポイントで :ref:`AnimationPlayer <class_AnimationPlayer>` によって呼び出され"
"る ``fire_bullet`` を追加する必要があります:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1151
msgid "Let's go over what this function does:"
msgstr "この関数が何をするのか見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1153
msgid ""
"First we check to see whether the player is changing weapons. If the player "
"is changing weapons, we do not want shoot, so we ``return``."
msgstr ""
"まず、プレイヤーが武器を変更しているかどうかを確認します。プレイヤーが武器を"
"変更している場合、私たちは撃つことを望まないので ``return`` します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1155
msgid ""
"Calling ``return`` stops the rest of the function from being called. In this "
"case, we are not returning a variable because we are only interested in not "
"running the rest of the code, and because we are not looking for a returned "
"variable either when we call this function."
msgstr ""
"``return`` を呼び出すと、関数の残りの部分が呼び出されなくなります。この場合、"
"残りのコードを実行しないことにのみ関心があり、この関数を呼び出すときに返され"
"る変数を探していないため、変数を返しません。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1159
msgid ""
"Then we tell the current weapon the player is using to fire by calling its "
"``fire_weapon`` function."
msgstr ""
"次に、プレイヤーが ``fire_weapon`` 関数を呼び出して、現在使用している武器を発"
"射するように指示します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1161
msgid ""
"Remember how we mentioned the speed of the animations for firing was faster "
"than the other animations? By changing the firing animation speeds, you can "
"change how fast the weapon fires bullets!"
msgstr ""
"発砲のアニメーションの速度が他のアニメーションよりも速いと言ったことを覚えて"
"いますか？発射アニメーションの速度を変更することにより、武器が弾丸を発射する"
"速度を変更できます！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1167
#, fuzzy
msgid ""
"Before we are ready to test our new weapons, we still have a bit of work to "
"do."
msgstr "新しい武器をテストする準備が整う前に、まだ少し仕事があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1170
msgid "Creating some test subjects"
msgstr "いくつかのテスト対象の作成"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1172
msgid ""
"Create a new script by going to the scripting window, clicking \"file\", and "
"selecting new. Name this script ``RigidBody_hit_test`` and make sure it "
"extends :ref:`RigidBody <class_RigidBody>`."
msgstr ""
"スクリプトウィンドウに移動し、[ファイル]をクリックし、[新規スクリプト]を選択"
"して、新しいスクリプトを作成します。このスクリプトに ``RigidBody_hit_test."
"gd`` という名前を付けて、\\ :ref:`RigidBody <class_RigidBody>` が拡張されてい"
"ることを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1175
msgid "Now we need to add this code:"
msgstr "次のコードを追加する必要があります:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1192
msgid "Let's go over how ``bullet_hit`` works:"
msgstr "``bullet_hit`` の仕組みを見ていきましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1195
msgid ""
"First we get the bullet's forward directional vector. This is so we can tell "
"from which direction the bullet will hit the :ref:`RigidBody "
"<class_RigidBody>`. We will use this to push the :ref:`RigidBody "
"<class_RigidBody>` in the same direction as the bullet."
msgstr ""
"まず、弾丸の順方向ベクトルを取得します。これは、どの方向から弾丸が :ref:"
"`RigidBody <class_RigidBody>` に当たるかを判断できるようにするためです。これ"
"を使用して、\\ :ref:`RigidBody <class_RigidBody>` を弾丸と同じ方向に押し出し"
"ます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1198
msgid ""
"We need to boost the directional vector by ``BASE_BULLET_BOOST`` so the "
"bullets pack a bit more of a punch and move the :ref:`RigidBody "
"<class_RigidBody>` nodes in a visible way. You can just set "
"``BASE_BULLET_BOOST`` to lower or higher values if you want less or more of "
"a reaction when the bullets collide with the :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""
"方向ベクトルを ``BASE_BULLET_BOOST`` でブーストして、弾丸がもう少しパンチを込"
"め、\\ :ref:`RigidBody <class_RigidBody>` ノードを目に見える方法で移動させる"
"必要があります。弾丸が :ref:`RigidBody <class_RigidBody>` と衝突したときの反"
"応をより少なくしたりより多くしたい場合は、単に ``BASE_BULLET_BOOST`` を低い値"
"または高い値に設定することができます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1202
msgid "Then we apply an impulse using ``apply_impulse``."
msgstr "次に、\\ ``apply_impulse`` を使用して衝撃を加えます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1204
msgid ""
"First, we need to calculate the position for the impulse. Because "
"``apply_impulse`` takes a vector relative to the :ref:`RigidBody "
"<class_RigidBody>`, we need to calculate the distance from the :ref:"
"`RigidBody <class_RigidBody>` to the bullet. We do this by subtracting the :"
"ref:`RigidBody <class_RigidBody>`'s global origin/position from the bullet's "
"global origin/position. This gets us the distance from the :ref:`RigidBody "
"<class_RigidBody>` to the bullet. We normalize this vector so the size of "
"the collider does not effect how much the bullets move the :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""
"最初に、衝撃の位置を計算する必要があります。 ``apply_impulse`` は :ref:"
"`RigidBody <class_RigidBody>` を基準にしたベクトルを取るため、\\ :ref:"
"`RigidBody <class_RigidBody>` から弾丸までの距離を計算する必要があります。こ"
"れを行うには、弾丸グローバル原点/位置から :ref:`RigidBody <class_RigidBody>` "
"のグローバル原点/位置を減算します。これにより、\\ :ref:`RigidBody "
"<class_RigidBody>` から弾丸までの距離がわかります。このベクトルを正規化して、"
"コライダーのサイズが、弾丸が :ref:`RigidBody <class_RigidBody>` をどれだけ動"
"かすかに影響しないようにします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1210
msgid ""
"Finally, we need to calculate the force for the impulse. For this, we use "
"the direction the bullet is facing and multiply it by the bullet's damage. "
"This gives a nice result and for stronger bullets, we get a stronger result."
msgstr ""
"最後に、衝撃の力を計算する必要があります。このために、弾丸が向いている方向を"
"使用し、弾丸のダメージを掛けます。これにより良い結果が得られ、より強力な弾丸"
"の場合、より強力な結果が得られます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1215
msgid ""
"Now we need to attach this script to all of the :ref:`RigidBody "
"<class_RigidBody>` nodes we want to affect."
msgstr ""
"次に、このスクリプトを、影響するすべての :ref:`RigidBody <class_RigidBody>` "
"ノードにアタッチする必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1217
msgid ""
"Open up ``Testing_Area.tscn`` and select all the cubes parented to the "
"``Cubes`` node."
msgstr ""
"``Testing_Area.tscn`` を開き、\\ ``Cubes`` ノードを親とするすべてのキューブを"
"選択します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1219
msgid ""
"If you select the top cube, and then hold down :kbd:`Shift` and select the "
"last cube, Godot will select all the cubes in-between!"
msgstr ""
"一番上のキューブを選択し、\\ :kbd:`Shift` を押しながら最後のキューブを選択す"
"ると、Godotはその間のすべてのキューブを選択します！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1222
msgid ""
"Once you have all the cubes selected, scroll down in the inspector until you "
"get to the \"scripts\" section. Click the drop down and select \"Load\". "
"Open your newly created ``RigidBody_hit_test.gd`` script."
msgstr ""
"すべてのキューブを選択したら、\"Script\"セクションに到達するまでインスペクタ"
"を下にスクロールします。ドロップダウンをクリックして、「読み込み」を選択しま"
"す。新しく作成した ``RigidBody_hit_test.gd`` スクリプトを開きます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1226
msgid "Final notes"
msgstr "最終ノート"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1230
msgid ""
"That was a lot of code! But now, with all that done, you can go and give "
"your weapons a test!"
msgstr ""
"これは大量のコードでした！しかし、今、すべての作業が完了すると、あなたはあな"
"たの武器をテストすることができます！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1232
msgid ""
"You should now be able to fire as many bullets as you want at the cubes and "
"they will move in response to the bullets colliding with them."
msgstr ""
"これで、キューブで必要な数の弾丸を発射でき、それらが衝突する弾丸に応じて移動"
"します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1235
msgid ""
"In :ref:`doc_fps_tutorial_part_three`, we will add ammo to the weapons, as "
"well as some sounds!"
msgstr ""
":ref:`doc_fps_tutorial_part_three` では、武器に弾薬といくつかのサウンドを追加"
"します！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1237
msgid "If you ever get lost, be sure to read over the code again!"
msgstr "迷子になったら、必ずコードをもう一度読んでください！"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1239
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_2.zip <files/Godot_FPS_Part_2.zip>`"
msgstr ""
"この部分の完成したプロジェクトは、ここからダウンロードできます: :download:"
"`Godot_FPS_Part_2.zip <files/Godot_FPS_Part_2.zip>`"
