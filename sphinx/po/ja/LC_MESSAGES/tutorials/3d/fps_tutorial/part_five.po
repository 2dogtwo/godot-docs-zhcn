# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-30 19:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:4
msgid "Part 5"
msgstr "パート5"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:7
msgid "Part overview"
msgstr "パートの概要"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:9
msgid ""
"In this part, we're going to add grenades to the player, give the player the "
"ability to grab and throw objects, and add turrets!"
msgstr ""
"このパートでは、プレイヤーに手榴弾を追加し、プレイヤーにオブジェクトをつかん"
"で投げる能力を与え、砲塔を追加します！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:13
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_four` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_four` will be the starting project for part 5"
msgstr ""
"チュートリアルのこの部分に進む前に、\\ :ref:`doc_fps_tutorial_part_four` を終"
"了していることが前提となります。\\ :ref:`doc_fps_tutorial_part_four` からの完"
"成したプロジェクトは、パート5の開始プロジェクトになります"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:16
msgid "Let's get started!"
msgstr "では、始めましょう！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:19
msgid "Adding grenades"
msgstr "手榴弾の追加"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:21
msgid ""
"Firstly, let's give the player some grenades to play with. Open up ``Grenade."
"tscn``."
msgstr ""
"まず、プレイヤーに手榴弾をいくつか与えてみましょう。\\ ``Grenade.tscn`` を開"
"きます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:23
msgid ""
"There are a few things to note here, the first and foremost being that the "
"grenades are going to use :ref:`RigidBody <class_RigidBody>` nodes. We're "
"going to use :ref:`RigidBody <class_RigidBody>` nodes for our grenades so "
"they bounce around the world in a (somewhat) realistic manner."
msgstr ""
"ここで注意すべき点がいくつかあります。何よりもまず、手榴弾が :ref:`RigidBody "
"<class_RigidBody>` ノードを使用することです。 手榴弾に :ref:`RigidBody "
"<class_RigidBody>` ノードを使用して、(やや)現実的な方法で世界中をバウンドさせ"
"ます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:26
msgid ""
"The second thing to note is ``Blast_Area``. This is an :ref:`Area "
"<class_Area>` node that will represent the blast radius of the grenade."
msgstr ""
"2番目に注意することは ``Blast_Area`` です。 これは :ref:`Area <class_Area>` "
"ノードで、手榴弾の爆発半径を表します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:28
msgid ""
"Finally, the last thing to note is ``Explosion``. This is the :ref:"
"`Particles <class_Particles>` node that will emit an explosion effect when "
"the grenade explodes. One thing to note here is that we have ``One shot`` "
"enabled. This is so we emit all the particles at once. The particles are "
"also emitted using world coordinates instead of local coordinates, so we "
"have ``Local Coords`` unchecked as well."
msgstr ""
"最後に、最終的に注意することは ``爆発`` です。 これは :ref:`Particles "
"<class_Particles>` ノードで、手榴弾が爆発すると爆発効果を発します。ここで注意"
"すべきことは、\\ ``One shot`` が有効になっていることです。 これは、すべての"
"パーティクルを一度に放出するためです。 パーティクルは、ローカル座標の代わりに"
"ワールド座標を使用して放出されるため、\\ ``Local Coords`` もチェックされてい"
"ません。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:32
msgid ""
"If you want, you can see how the particles are set up by looking through the "
"particle's ``Process Material`` and ``Draw Passes``."
msgstr ""
"必要に応じて、パーティクルの ``Process Material`` と ``Draw Passes`` を調べる"
"ことで、パーティクルの設定方法を確認できます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:34
msgid ""
"Let's write the code needed for the grenade. Select ``Grenade`` and make a "
"new script called ``Grenade.gd``. Add the following:"
msgstr ""
"手榴弾に必要なコードを書きましょう。\\ ``Grenade`` を選択し、\\ ``Grenade."
"gd`` という新しいスクリプトを作成します。次のように追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:90
msgid "Let's go over what's happening, starting with the class variables:"
msgstr "クラス変数から始めて、何が起こっているのかを見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:92
msgid ""
"``GRENADE_DAMAGE``: The amount of damage the grenade causes when it explodes."
msgstr "``GRENADE_DAMAGE``: 手榴弾が爆発したときに与えるダメージの量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:93
msgid ""
"``GRENADE_TIME``: The amount of time the grenade takes (in seconds) to "
"explode once it's created/thrown."
msgstr ""
"``GRENADE_TIME``: 手榴弾が作成/投擲されてから爆発するまでにかかる時間(秒単"
"位)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:94
msgid ""
"``grenade_timer``: A variable for tracking how long the grenade has been "
"created/thrown."
msgstr "``grenade_timer``: 手榴弾が作成/投擲された時間を追跡する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:95
msgid ""
"``EXPLOSION_WAIT_TIME``: The amount of time needed (in seconds) to wait "
"before we destroy the grenade scene after the explosion"
msgstr ""
"``EXPLOSION_WAIT_TIME``: 爆発後に手榴弾シーンを破棄する前に待機するために必要"
"な時間(秒単位)"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:96
msgid ""
"``explosion_wait_timer``: A variable for tracking how much time has passed "
"since the grenade exploded."
msgstr ""
"``explosion_wait_timer``: 手榴弾が爆発してから経過した時間を追跡する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:97
msgid ""
"``rigid_shape``: The :ref:`CollisionShape <class_CollisionShape>` for the "
"grenade's :ref:`RigidBody <class_RigidBody>`."
msgstr ""
"``rigid_shape``: 手榴弾の :ref:`RigidBody <class_RigidBody>` の :ref:"
"`CollisionShape <class_CollisionShape>`\\ 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:98
msgid ""
"``grenade_mesh``: The :ref:`MeshInstance <class_MeshInstance>` for the "
"grenade."
msgstr ""
"``grenade_mesh``: 手榴弾の :ref:`MeshInstance <class_MeshInstance>`\\ 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:99
msgid ""
"``blast_area``: The blast :ref:`Area <class_Area>` used to damage things "
"when the grenade explodes."
msgstr ""
"``blast_area``: blast :ref:`Area <class_Area>`は、手榴弾が爆発したときに物を"
"損傷するために使用されます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:100
msgid ""
"``explosion_particles``: The :ref:`Particles <class_Particles>` that come "
"out when the grenade explodes."
msgstr ""
"``explosion_particles``: 手榴弾が爆発したときに出てくる :ref:`Particles "
"<class_Particles>`\\ 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:102
msgid ""
"Notice how ``EXPLOSION_WAIT_TIME`` is a rather strange number (``0.48``). "
"This is because we want ``EXPLOSION_WAIT_TIME`` to be equal to the length of "
"time the explosion particles are emitting, so when the particles are done we "
"destroy/free the grenade. We calculate ``EXPLOSION_WAIT_TIME`` by taking the "
"particle's life time and dividing it by the particle's speed scale. This "
"gets us the exact time the explosion particles will last."
msgstr ""
"``EXPLOSION_WAIT_TIME`` がかなり奇妙な数字(``0.48``)であることに注意してくだ"
"さい。 これは、\\ ``EXPLOSION_WAIT_TIME`` を爆発パーティクルが放出される時間"
"の長さに等しくしたいため、パーティクルが完了すると手榴弾を破棄/解放するためで"
"す。 パーティクルの寿命を取得し、それをパーティクルの速度スケールで割ることに"
"より、\\ ``EXPLOSION_WAIT_TIME`` を計算します。 これにより、爆発パーティクル"
"が持続する正確な時間がわかります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:108
msgid "Now let's turn our attention to ``_ready``."
msgstr "それでは、\\ ``_ ready`` に注目しましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:110
msgid ""
"First we get all the nodes we'll need and assign them to the proper class "
"variables."
msgstr "まず、必要なすべてのノードを取得し、適切なクラス変数に割り当てます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:112
msgid ""
"We need to get the :ref:`CollisionShape <class_CollisionShape>` and :ref:"
"`MeshInstance <class_MeshInstance>` because similarly to the target in :ref:"
"`doc_fps_tutorial_part_four`, we will be hiding the grenade's mesh and "
"disabling the collision shape when the grenade explodes."
msgstr ""
":ref:`CollisionShape <class_CollisionShape>` と:ref:`MeshInstance "
"<class_MeshInstance>` を取得する必要があります。\\ :ref:"
"`doc_fps_tutorial_part_four` のターゲットと同様に、手榴弾の爆発時に手榴弾の"
"メッシュを非表示にし、コリジョンシェイプを無効にするためです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:115
msgid ""
"The reason we need to get the blast :ref:`Area <class_Area>` is so we can "
"damage everything inside it when the grenade explodes. We'll be using code "
"similar to the knife code in the player. We need the :ref:`Particles "
"<class_Particles>` so we can emit particles when the grenade explodes."
msgstr ""
"blast :ref:`Area <class_Area>` を取得する必要があるのは、手榴弾が爆発したとき"
"にその内部のすべてを破損できるようにするためです。 プレイヤーのナイフコードに"
"似たコードを使用します。手榴弾が爆発したときにパーティクルを放出できるよう"
"に、\\ :ref:`Particles <class_Particles>` が必要です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:118
msgid ""
"After we get all the nodes and assign them to their class variables, we then "
"make sure the explosion particles are not emitting, and that they are set to "
"emit in one shot. This is to be extra sure the particles will behave the way "
"we expect them to."
msgstr ""
"すべてのノードを取得し、それらをクラス変数に割り当てた後、爆発パーティクルが"
"放出されていないこと、およびそれらがワンショットで放出されるように設定されて"
"いることを確認します。 これは、パーティクルが期待どおりに動作することをさらに"
"確実にするためです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:123
msgid "Now let's look at ``_process``."
msgstr "それでは、\\ ``_process`` を見てみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:125
msgid ""
"Firstly, we check to see if the ``grenade_timer`` is less than "
"``GRENADE_TIME``. If it is, we add ``delta`` and return. This is so the "
"grenade has to wait ``GRENADE_TIME`` seconds before exploding, allowing the :"
"ref:`RigidBody <class_RigidBody>` to move around."
msgstr ""
"まず、\\ ``grenade_timer`` が ``GRENADE_TIME`` よりも小さいかどうかを確認しま"
"す。もしそうなら、\\ ``delta`` を加算して戻ります。 これは、手榴弾が爆発する"
"前に ``GRENADE_TIME`` 秒待たなければならず、\\ :ref:`RigidBody "
"<class_RigidBody>` が動き回れるようにするためです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:128
msgid ""
"If ``grenade_timer`` is at ``GRENADE_TIMER`` or higher, we then need to "
"check if the grenade has waited long enough and needs to explode. We do this "
"by checking to see if ``explosion_wait_timer`` is equal to ``0`` or less. "
"Since we will be adding ``delta`` to ``explosion_wait_timer`` right after, "
"whatever code under the check will only be called once, right when the "
"grenade has waited long enough and needs to explode."
msgstr ""
"``grenade_timer`` が ``GRENADE_TIMER`` 以上の場合、手榴弾が十分に長く待機して"
"いて爆発する必要があるかどうかを確認する必要があります。 これを行うには、\\ "
"``explosion_wait_timer`` が ``0`` 以下であるかどうかを確認します。 直後に "
"``delta`` を ``explosion_wait_timer`` に追加するため、チェック対象のコード"
"は、手榴弾が十分に長く待機して爆発する必要があるときに1回だけ呼び出されます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:132
msgid ""
"If the grenade has waited long enough to explode, we first tell the "
"``explosion_particles`` to emit. Then we make ``grenade_mesh`` invisible, "
"and disable ``rigid_shape``, effectively hiding the grenade."
msgstr ""
"手榴弾が爆発するのに十分な時間待機した場合、まず ``explosion_particles`` に放"
"出するように指示します。次に、\\ ``grenade_mesh`` を非表示にし、\\ "
"``rigid_shape`` を無効にして、手榴弾を効果的に隠します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:135
msgid ""
"We then set the :ref:`RigidBody <class_RigidBody>`'s mode to ``MODE_STATIC`` "
"so the grenade does not move."
msgstr ""
"次に :ref:`RigidBody <class_RigidBody>` のモードを ``MODE_STATIC``に設定し、"
"手榴弾が動かないようにします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:137
msgid ""
"Then we get all the bodies in ``blast_area``, check to see if they have the "
"``bullet_hit`` method/function, and if they do, we call it and pass in "
"``GRENADE_DAMAGE`` and the transform from the body looking at the grenade. "
"This makes it where the bodies exploded by the grenade will explode outwards "
"from the grenade's position."
msgstr ""
"次に、\\ ``blast_area`` 内のすべてのボディを取得し、それらが ``bullet_hit`` "
"メソッド/関数を持っているかどうかを確認し、もしあれば、それを呼び出して "
"``GRENADE_DAMAGE`` と手榴弾を見ているボディからのtransformを渡します。 これに"
"より、手榴弾で爆発した体が手榴弾の位置から外側に爆発します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:140
msgid ""
"We then check to see if ``explosion_wait_timer`` is less than "
"``EXPLOSION_WAIT_TIME``. If it is, we add ``delta`` to "
"``explosion_wait_timer``."
msgstr ""
"次に、\\ ``explosion_wait_timer`` が ``EXPLOSION_WAIT_TIME`` よりも小さいかど"
"うかを確認します。 そうである場合、\\ ``delta`` を `` explosion_wait_timer`` "
"に加算します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:142
msgid ""
"Next, we check to see if ``explosion_wait_timer`` is greater than or equal "
"to ``EXPLOSION_WAIT_TIME``. Because we added ``delta``, this will only be "
"called once. If ``explosion_wait_timer`` is greater or equal to "
"``EXPLOSION_WAIT_TIME``, the grenade has waited long enough to let the :ref:"
"`Particles <class_Particles>` play and we can free/destroy the grenade, as "
"we no longer need it."
msgstr ""
"次に、\\ ``explosion_wait_timer`` が ``EXPLOSION_WAIT_TIME`` 以上かどうかを確"
"認します。\\ ``delta`` を加算したため、これは一度だけ呼び出されます。\\ "
"``explosion_wait_timer`` が ``EXPLOSION_WAIT_TIME`` 以上の場合、手榴弾は :"
"ref:`Particles <class_Particles>` を再生するのに十分な時間待機しており、手榴"
"弾は不もう必要ないので解放/破棄できます 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:148
msgid ""
"Let's quickly get the sticky grenade set up too. Open up ``Sticky_Grenade."
"tscn``."
msgstr ""
"引き続き、粘着性手榴弾も設定してみしましょう。\\ ``Sticky_Grenade.tscn`` を開"
"きます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:150
msgid ""
"``Sticky_Grenade.tscn`` is almost identical to ``Grenade.tscn``, with one "
"small addition. We now have a second :ref:`Area <class_Area>`, called "
"``Sticky_Area``. We will be using ``Stick_Area`` to detect when the sticky "
"grenade has collided with the environment and needs to stick to something."
msgstr ""
"``Sticky_Grenade.tscn`` は ``Grenade.tscn`` とほとんど同じですが、1つだけ追加"
"されています。\\ ``Sticky_Area`` と呼ばれる2つ目の :ref:`Area <class_Area>` "
"です。\\ ``Stick_Area`` を使用して、粘着性手榴弾が周囲と衝突し、何かに固着す"
"る必要があるときを検出します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:154
msgid ""
"Select ``Sticky_Grenade`` and make a new script called ``Sticky_Grenade."
"gd``. Add the following:"
msgstr ""
"``Sticky_Grenade`` を選択し、\\ ``Sticky_Grenade.gd`` という新しいスクリプト"
"を作成します。次のように追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:244
msgid ""
"The code above is almost identical to the code for ``Grenade.gd``, so let's "
"just go over what's changed."
msgstr ""
"上記のコードは ``Grenade.gd`` のコードとほとんど同じなので、何が変更されたか"
"を見てみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:246
msgid "Firstly, we have a few more class variables:"
msgstr "まず、いくつかのクラス変数があります:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:248
msgid ""
"``attached``: A variable for tracking whether or not the sticky grenade has "
"attached to a :ref:`PhysicsBody <class_PhysicsBody>`."
msgstr ""
"``attached``: 粘着性手榴弾が :ref:`PhysicsBody <class_PhysicsBody>` にアタッ"
"チされているかどうかを追跡するための変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:249
msgid ""
"``attach_point``: A variable to hold a :ref:`Spatial <class_Spatial>` that "
"will be at the position where the sticky grenade collided."
msgstr ""
"``attach_point``: 粘着性手榴弾が衝突した位置にある :ref:`Spatial "
"<class_Spatial>` を保持する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:250
msgid ""
"``player_body``: The player's :ref:`KinematicBody <class_KinematicBody>`."
msgstr ""
"``player_body``: プレイヤーの :ref:`KinematicBody <class_KinematicBody>`\\ 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:252
msgid ""
"They have been added to enable the sticky grenade to stick to any :ref:"
"`PhysicsBody <class_PhysicsBody>` it might hit. We also now need the "
"player's :ref:`KinematicBody <class_KinematicBody>` so the sticky grenade "
"does not stick to the player when the player throws it."
msgstr ""
"粘着性手榴弾がヒットする可能性のある :ref:`PhysicsBody <class_PhysicsBody>` "
"に固着するために追加されました。また、プレイヤーは :ref:`KinematicBody "
"<class_KinematicBody>` を必要とするため、プレイヤーが投げたときに粘着性手榴弾"
"がプレイヤーにくっつかないようになります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:257
msgid ""
"Now let's look at the small change in ``_ready``. In ``_ready`` we've added "
"a line of code so when any body enters ``Stick_Area``, the "
"``collided_with_body`` function is called."
msgstr ""
"では、\\ ``_ready`` の小さな変更を見てみましょう。\\ ``_ready`` にコード行を"
"追加したので、ボディが ``Stick_Area`` に入ると ``collided_with_body`` 関数が"
"呼び出されます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:262
msgid "Next let's take a look at ``collided_with_body``."
msgstr "次に ``collided_with_body`` を見てみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:264
msgid ""
"Firstly, we make sure the sticky grenade is not colliding with itself. "
"Because the sticky :ref:`Area <class_Area>` does not know it's attached to "
"the grenade's :ref:`RigidBody <class_RigidBody>`, we need to make sure it's "
"not going to stick to itself by checking to make sure the body it has "
"collided with is not itself. If we have collided with ourself, we ignore it "
"by returning."
msgstr ""
"まず、粘着性手榴弾がそれ自体と衝突しないようにします。sticky(粘着性) :ref:"
"`Area <class_Area>` は、grenade(手榴弾) :ref:`RigidBody <class_RigidBody>` に"
"取り付けられていることを知らないので、衝突したbodyがそれ自体ではないことを確"
"認することで、それ自体に固着しないようにする必要があります。自体と衝突した場"
"合は、リターンすることで無視します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:269
msgid ""
"We then check to see if we have something assigned to ``player_body``, and "
"if the body the sticky grenade has collided with is the player that threw "
"it. If the body the sticky grenade has collided with is indeed "
"``player_body``, we ignore it by returning."
msgstr ""
"次に、\\ ``player_body`` に何かが割り当てられているかどうかを確認し、粘着性手"
"榴弾が衝突したbodyがそれを投げたプレイヤーであるかどうかを確認します。粘着性"
"手榴弾が衝突したbodyが実際に ``player_body`` である場合、リターンすることでそ"
"れを無視します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:272
msgid ""
"Next, we check if the sticky grenade has attached to something already or "
"not."
msgstr "次に、粘着性手榴弾が既に何かに固着しているかどうかを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:274
msgid ""
"If the sticky grenade is not attached, we then set ``attached`` to ``true`` "
"so we know the sticky grenade has attached to something."
msgstr ""
"粘着性手榴弾が固着していない場合は、\\ ``attached`` を ``true`` に設定して、"
"粘着性手榴弾が何かに固着したことを知らせます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:276
msgid ""
"We then make a new :ref:`Spatial <class_Spatial>` node, and make it a child "
"of the body the sticky grenade collided with. We then set the :ref:`Spatial "
"<class_Spatial>`'s position to the sticky grenade's current global position."
msgstr ""
"次に、新しい :ref:`Spatial <class_Spatial>` ノードを作成し、粘着性手榴弾が衝"
"突したbodyの子にします。次に、\\ :ref:`Spatial <class_Spatial>` の位置を粘着"
"性手榴弾の現在のグローバルポジションに設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:279
msgid ""
"Because we've added the :ref:`Spatial <class_Spatial>` as a child of the "
"body the sticky grenade has collided with, it will follow along with said "
"body. We can then use this :ref:`Spatial <class_Spatial>` to set the sticky "
"grenade's position, so it is always at the same position relative to the "
"body it collided with."
msgstr ""
":ref:`Spatial <class_Spatial>` を粘着性手榴弾が衝突したbodyの子として追加した"
"ため、そのbodyとひと続きになります。次に、この :ref:`Spatial "
"<class_Spatial>` を使用して、粘着性手榴弾の位置を設定することができるので、衝"
"突したbodyに対して常に同じ位置に配置されます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:282
msgid ""
"We then disable ``rigid_shape`` so the sticky grenade is not constantly "
"moving whatever body it has collided with. Finally, we set our mode to "
"``MODE_STATIC`` so the grenade does not move."
msgstr ""
"次に、\\ ``rigid_shape`` を無効にして、粘着性手榴弾が衝突したbodyを絶えず動か"
"してしまわないようにします。最後に、手榴弾が動かないようにモードを "
"``MODE_STATIC`` に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:287
msgid "Finally, lets go over the few changes in ``_process``."
msgstr "最後に、\\ ``_process`` のいくつかの変更を見ていきましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:289
msgid ""
"Now we're checking to see if the sticky grenade is attached right at the top "
"of ``_process``."
msgstr ""
"``_process`` の一番上で、粘着性手榴弾が 固着してるかどうかを確認しています。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:291
msgid ""
"If the sticky grenade is attached, we then make sure the attached point is "
"not equal to ``null``. If the attached point is not equal to ``null``, we "
"set the sticky grenade's global position (using its global :ref:`Transform "
"<class_Transform>`'s origin) to the global position of the :ref:`Spatial "
"<class_Spatial>` assigned to ``attach_point`` (using its global :ref:"
"`Transform <class_Transform>`'s origin)."
msgstr ""
"粘着性手榴弾が固着している場合、取り付けられたポイントが ``null`` と等しくな"
"いことを確認します。固着したポイントが ``null`` と等しくない場合、粘着性手榴"
"弾のグローバルポジション(グローバル :ref:`Transform <class_Transform>` の"
"origin)を ``attach_point`` に割り当てられた :ref:`Spatial <class_Spatial>` の"
"グローバルポジション(グローバル :ref:`Transform <class_Transform>` のorigin)"
"に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:295
msgid ""
"The only other change is now before we free/destroy the sticky grenade is to "
"check to see if the sticky grenade has an attached point. If it does, we "
"also call ``queue_free`` on the attach point, so it's also freed/destroyed."
msgstr ""
"他の唯一の変更点は、粘着性手榴弾を解放/破棄する前に、粘着性手榴弾が固着したポ"
"イントを保持しているかどうかを確認することです。 もしそうなら、固着ポイント"
"で ``queue_free`` も呼び出すので、それも解放/破棄されます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:299
msgid "Adding grenades to the player"
msgstr "プレイヤーに手榴弾を追加する"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:301
msgid ""
"Now we need to add some code to ``Player.gd`` so we can use the grenades."
msgstr ""
"次に、手榴弾を使用できるように、いくつかのコードを ``Player.gd`` に追加する必"
"要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:303
msgid ""
"Firstly, open up ``Player.tscn`` and expand the node tree until you get to "
"``Rotation_Helper``. Notice how in ``Rotation_Helper`` we have a node called "
"``Grenade_Toss_Pos``. This is where we will be spawning the grenades."
msgstr ""
"まず、\\ ``Player.tscn`` を開き、\\ ``Rotation_Helper`` に到達するまでノード"
"ツリーを展開します。\\ ``Rotation_Helper`` に ``Grenade_Toss_Pos`` というノー"
"ドがあることに注意してください。これは手榴弾を産出する場所です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:306
msgid ""
"Also notice how it's slightly rotated on the ``X`` axis, so it's not "
"pointing straight, but rather slightly up. By changing the rotation of "
"``Grenade_Toss_Pos``, you can change the angle at which the grenades are "
"tossed."
msgstr ""
"また、\\ ``X`` 軸上でわずかに回転しているため、真っ直ぐではなく、わずかに上を"
"向いています。\\ ``Grenade_Toss_Pos`` の回転を変更することで、手榴弾が投げら"
"れる角度を変更できます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:309
msgid ""
"Okay, now let's start making the grenades work with the player. Add the "
"following class variables to ``Player.gd``:"
msgstr ""
"さて、プレイヤーと手榴弾を機能させましょう。次のクラス変数を ``Player.gd`` に"
"追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:319
msgid ""
"``grenade_amounts``: The amount of grenades the player is currently carrying "
"(for each type of grenade)."
msgstr ""
"``grenade_amounts``: プレイヤーが現在運んでいる手榴弾の量(手榴弾の種類ごと"
"の)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:320
msgid ""
"``current_grenade``: The name of the grenade the player is currently using."
msgstr "``current_grenade``: プレイヤーが現在使用している手榴弾の名前。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:321
msgid "``grenade_scene``: The grenade scene we worked on earlier."
msgstr "``grenade_scene``: 先ほど取り組んだ手榴弾のシーン。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:322
msgid ""
"``sticky_grenade_scene``: The sticky grenade scene we worked on earlier."
msgstr "``sticky_grenade_scene``: 先ほど取り組んだ粘着性手榴弾のシーン。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:323
msgid ""
"``GRENADE_THROW_FORCE``: The force at which the player will throw the "
"grenades."
msgstr "``GRENADE_THROW_FORCE``: プレイヤーが手榴弾を投げる力。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:325
msgid "Most of these variables are similar to how we have our weapons set up."
msgstr "これらの変数のほとんどは、武器のセットアップ方法に似ています。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:327
msgid ""
"While it's possible to make a more modular grenade system, I found it was "
"not worth the additional complexity for just two grenades. If you were going "
"to make a more complex FPS with more grenades, you'd likely want to make a "
"system for grenades similar to how we have the weapons set up."
msgstr ""
"よりモジュール化された手榴弾システムを作成することは可能ですが、たった2つの手"
"榴弾を追加するだけの為には、その複雑さに価値はないことがわかりました。手榴弾"
"の種類の多いより複雑なFPSを作成する場合は、武器のセットアップ方法と同様の手榴"
"弾用のシステムを作成することをお勧めします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:332
msgid ""
"Now we need to add some code in ``_process_input`` Add the following to "
"``_process_input``:"
msgstr ""
"``_process_input`` にコードを追加する必要があります ``_process_input`` に以下"
"を追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:362
msgid "Let's go over what's happening here."
msgstr "ここで何が起こっているのか見ていきましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:364
msgid ""
"Firstly, we check to see if the ``change_grenade`` action has just been "
"pressed. If it has, we then check to see which grenade the player is "
"currently using. Based on the name of the grenade the player is currently "
"using, we change ``current_grenade`` to the opposite grenade name."
msgstr ""
"まず、\\ ``change_grenade`` アクションが押されたかどうかを確認します。その場"
"合は、プレイヤーが現在使用している手榴弾を確認します。プレイヤーが現在使用し"
"ている手榴弾の名前に基づいて、\\ ``current_grenade`` を逆のの手榴弾の名前に変"
"更します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:367
msgid ""
"Next we check to see if the ``fire_grenade`` action has just been pressed. "
"If it has, we then check to see if the player has more than ``0`` grenades "
"for the current grenade type selected."
msgstr ""
"次に、\\ ``fire_grenade`` アクションが押されたばかりかどうかを確認します。そ"
"の場合は、選択した現在の手榴弾タイプに対して、プレイヤーが ``0`` 以上の手榴弾"
"を持っているかどうかを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:370
msgid ""
"If the player has more than ``0`` grenades, we then remove one from the "
"grenade amounts for the current grenade. Then, based on the grenade the "
"player is currently using, we instance the proper grenade scene and assign "
"it to ``grenade_clone``."
msgstr ""
"プレイヤーが ``0`` を超える手榴弾を持っている場合、現在の手榴弾の手榴弾数から"
"1つ減らします。次に、プレイヤーが現在使用している手榴弾に基づいて、適切な手榴"
"弾シーンをインスタンス化し、\\ ``grenade_clone`` に割り当てます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:373
msgid ""
"Next we add ``grenade_clone`` as a child of the node at the root and set its "
"global :ref:`Transform <class_Transform>` to ``Grenade_Toss_Pos``'s global :"
"ref:`Transform <class_Transform>`. Finally, we apply an impulse to the "
"grenade so that it is launched forward, relative to the ``Z`` directional "
"vector of ``grenade_clone``'s."
msgstr ""
"次に、ルートのノードの子として ``grenade_clone`` を追加し、そのグローバル :"
"ref:`Transform <class_Transform>` を ``Grenade_Toss_Pos`` のグローバル :ref:"
"`Transform <class_Transform>` に設定します。最後に、手榴弾に衝撃を与え、手榴"
"弾クローンの ``Z`` 方向ベクトルに対して前方に発射されるようにします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:379
msgid ""
"Now the player can use both types of grenades, but there are still a few "
"things we should probably add before we move on to adding the other things."
msgstr ""
"プレイヤーは両方のタイプの手榴弾を使用できるようになりましたが、他のものを追"
"加する前に追加する必要があるものがいくつかあります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:381
msgid ""
"We still need a way to show the player how many grenades are left, and we "
"should probably add a way to get more grenades when the player picks up ammo."
msgstr ""
"プレイヤーに手榴弾いくつ残っているかを示す方法も必要ですし、プレイヤーが弾薬"
"を拾ってより多くの手榴弾を得る方法を追加する必要もあります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:383
msgid ""
"Firstly, let's change some of the code in ``Player.gd`` to show how many "
"grenades are left. Change ``process_UI`` to the following:"
msgstr ""
"まず、残っている手榴弾の数を示すために ``Player.gd`` のコードの一部を変更しま"
"しょう。\\ ``process_UI`` を次のように変更します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:399
msgid "Now we'll show how many grenades the player has left in the UI."
msgstr "次に、UIにプレイヤーが残している手榴弾の数を示します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:401
msgid ""
"While we're still in ``Player.gd``, let's add a function to add grenades to "
"the player. Add the following function to ``Player.gd``:"
msgstr ""
"まだ ``Player.gd`` の中に、プレイヤーに手榴弾を追加する関数を追加しましょう。"
"次の関数を ``Player.gd`` に追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:409
msgid ""
"Now we can add a grenade using ``add_grenade``, and it will automatically be "
"clamped to a maximum of ``4`` grenades."
msgstr ""
"これで ``add_grenade`` を使用して手榴弾を追加でき、自動的に ``4`` 個の手榴弾"
"の最大値にクランプされます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:411
msgid ""
"You can change the ``4`` to a constant if you want. You'd need to make a new "
"global constant, something like ``MAX_GRENADES``, and then change the clamp "
"from ``clamp(grenade_amounts[current_grenade], 0, 4)`` to "
"``clamp(grenade_amounts[current_grenade], 0, MAX_GRENADES)``"
msgstr ""
"必要に応じて、\\ ``4`` を定数に変更できます。\\ ``MAX_GRENADES`` のような新し"
"いグローバル定数を作成してから、クランプを "
"``clamp(grenade_amounts[current_grenade], 0, 4)`` から "
"``clamp(grenade_amounts[current_grenade], 0,　MAX_GRENADES)`` に修正します"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:414
msgid ""
"If you do not want to limit how many grenades the player can carry, remove "
"the line that clamps the grenades altogether!"
msgstr ""
"プレイヤーが手に入れることができる手榴弾の数を制限したくない場合は、手榴弾を"
"クランプしている行を完全に削除してください！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:416
msgid ""
"Now we have a function to add grenades, let's open up ``AmmoPickup.gd`` and "
"use it!"
msgstr ""
"これで手榴弾を追加する関数ができましたので、\\ ``AmmoPickup.gd`` を開いて使用"
"しましょう！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:418
msgid ""
"Open up ``AmmoPickup.gd`` and go to the ``trigger_body_entered`` function. "
"Change it to the following:"
msgstr ""
"``AmmoPickup.gd`` を開き、\\ ``trigger_body_entered`` 関数に移動します。次の"
"ように変更します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:433
msgid ""
"Now we are also checking to see if the body has the ``add_grenade`` "
"function. If it does, we call it like we call ``add_ammo``."
msgstr ""
"また、bodyに ``add_grenade`` 関数があるかどうかも確認しています。存在する場"
"合、\\ ``add_ammo`` を呼び出す場合と同じように呼び出します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:435
msgid ""
"You may have noticed we are using a new constant we have not defined yet, "
"``GRENADE_AMOUNTS``. Let's add it! Add the following class variable to "
"``AmmoPickup.gd`` with the other class variables:"
msgstr ""
"まだ定義していない新しい定数 ``GRENADE_AMOUNTS`` を使用していることに気づいた"
"かもしれません。追加しましょう！次のクラス変数を他のクラス変数とともに "
"``AmmoPickup.gd`` に追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:442
msgid "``GRENADE_AMOUNTS``: The amount of grenades each pickup contains."
msgstr "``GRENADE_AMOUNTS``: 各ピックアップに含まれる手榴弾の量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:444
msgid ""
"Notice how the second element in ``GRENADE_AMOUNTS`` is ``0``. This is so "
"the small ammo pickup does not give the player any additional grenades."
msgstr ""
"``GRENADE_AMOUNTS`` の2番目の要素が ``0`` であることに注意してください。これ"
"は、小さな弾薬ピックアップがプレイヤーに追加の手榴弾を与えないようにするため"
"です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:449
msgid "Now you should be able to throw grenades! Go give it a try!"
msgstr "これで手榴弾を投げることができるはずです！試してみてください！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:453
msgid "Adding the ability to grab and throw RigidBody nodes to the player"
msgstr "RigidBodyノードを取得してプレイヤーに投げる機能を追加する"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:455
msgid ""
"Next, let's give the player the ability to pick up and throw :ref:`RigidBody "
"<class_RigidBody>` nodes."
msgstr ""
"次に、プレイヤーに :ref:`RigidBody <class_RigidBody>` ノードをピックアップし"
"てスローする機能を与えましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:457
msgid "Open up ``Player.gd`` and add the following class variables:"
msgstr "``Player.gd`` を開き、以下のクラス変数を追加してください:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:466
msgid ""
"``grabbed_object``: A variable to hold the grabbed :ref:`RigidBody "
"<class_RigidBody>` node."
msgstr ""
"``grabbed_object``: つかんだ :ref:`RigidBody <class_RigidBody>` ノードを保持"
"する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:467
msgid ""
"``OBJECT_THROW_FORCE``: The force with which the player throws the grabbed "
"object."
msgstr "``OBJECT_THROW_FORCE``: プレイヤーがつかんだオブジェクトを投げる力。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:468
msgid ""
"``OBJECT_GRAB_DISTANCE``: The distance away from the camera at which the "
"player holds the grabbed object."
msgstr ""
"``OBJECT_GRAB_DISTANCE``: プレイヤーがつかんだオブジェクトを保持するカメラか"
"らの距離。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:469
msgid ""
"``OBJECT_GRAB_RAY_DISTANCE``: The distance the :ref:`Raycast "
"<class_Raycast>` goes. This is the player's grab distance."
msgstr ""
"``OBJECT_GRAB_RAY_DISTANCE``: :ref:`Raycast <class_Raycast>` が進む距離。これ"
"はプレイヤーのつかむ距離です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:471
msgid ""
"With that done, all we need to do is add some code to ``process_input``:"
msgstr ""
"これが完了したら、必要なのは ``process_input`` にコードを追加することだけで"
"す:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:509
msgid "Let's go over what's happening."
msgstr "何が起こっているのか見ていきましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:511
msgid ""
"Firstly, we check to see if the action pressed is the ``fire`` action, and "
"that the player is using the ``UNARMED`` 'weapon'. This is because we only "
"want the player to be able to pick up and throw objects when the player is "
"not using any weapons. This is a design choice, but I feel it gives "
"``UNARMED`` a use."
msgstr ""
"最初に、押されたアクションが ``fire`` アクションであるかどうか、およびプレイ"
"ヤーが使用中の 'weapon' が ``UNARMED`` かどうかを確認します。これは、プレイ"
"ヤーが武器を使用していないときにのみ、プレイヤーがオブジェクトを拾い上げて投"
"げることができるようにするためです。これは設計上の選択ですが、私はそれが "
"``UNARMED`` の使い道だと思っています。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:515
msgid "Next we check to see whether or not ``grabbed_object`` is ``null``."
msgstr "次に、\\ ``grabbed_object`` が ``null`` かどうかを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:519
msgid ""
"If ``grabbed_object`` is ``null``, we want to see if we can pick up a :ref:"
"`RigidBody <class_RigidBody>`."
msgstr ""
"``grabbed_object`` が ``null`` の場合、\\ :ref:`RigidBody <class_RigidBody>` "
"を取得できるかどうかを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:521
msgid ""
"We first get the direct space state from the current :ref:`World "
"<class_World>`. This is so we can cast a ray entirely from code, instead of "
"having to use a :ref:`Raycast <class_Raycast>` node."
msgstr ""
"まず、現在の :ref:`World <class_World>` から直接space state(空間の情報)を取得"
"します。これにより、\\ :ref:`Raycast <class_Raycast>` ノードを使用する代わり"
"に、コードから完全にレイをキャストできます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:524
msgid ""
"see :ref:`Ray-casting <doc_ray-casting>` for more information on raycasting "
"in Godot."
msgstr ""
"Godotでのレイキャストの詳細については :ref:`レイキャスティング <doc_ray-"
"casting>` を参照してください。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:526
msgid ""
"Then we get the center of the screen by dividing the current :ref:`Viewport "
"<class_Viewport>` size in half. We then get the ray's origin point and end "
"point using ``project_ray_origin`` and ``project_ray_normal`` from the "
"camera. If you want to know more about how these functions work, see :ref:"
"`Ray-casting <doc_ray-casting>`."
msgstr ""
"次に、現在の :ref:`Viewport <class_Viewport>` サイズを半分に分割して、画面の"
"中心を取得します。次に、カメラから ``project_ray_origin`` と "
"``project_ray_normal`` を使用してレイの始点と終点を取得します。これらの関数が"
"どのように機能するかについてもっと知りたい場合は、\\ :ref:`レイキャスティン"
"グ <doc_ray-casting>` を参照してください。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:529
msgid ""
"Next we send the ray into the space state and see if it gets a result. We "
"add the player and the knife's :ref:`Area <class_Area>` as two exceptions so "
"the player cannot carry themselves or the knife's collision :ref:`Area "
"<class_Area>`."
msgstr ""
"次に、レイをspace state(空間の情報)に送り、結果が得られるかどうかを確認しま"
"す。プレイヤーとナイフの :ref:`Area <class_Area>` を2つの例外として追加し、プ"
"レイヤーが自分自身やナイフのコリジョン :ref:`Area <class_Area>` を運べないよ"
"うにします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:532
msgid ""
"Then we check to see if we got a result back from the ray. If no object has "
"collided with the ray, an empty Dictionary will be returned. If the "
"Dictionary is not empty (i.e. at least one object has collided), we then see "
"if the collider the ray collided with is a :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""
"次に、レイから結果が返されたかどうかを確認します。オブジェクトがレイと衝突し"
"ていない場合、空のDictionaryが返されます。Dictionaryが空でない場合(つまり、少"
"なくとも1つのオブジェクトが衝突した場合)、レイが衝突したコライダーが :ref:"
"`RigidBody <class_RigidBody>` であるかどうかを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:534
msgid ""
"If the ray collided with a :ref:`RigidBody <class_RigidBody>`, we set "
"``grabbed_object`` to the collider the ray collided with. We then set the "
"mode on the :ref:`RigidBody <class_RigidBody>` we collided with to "
"``MODE_STATIC`` so it doesn't move in our hands."
msgstr ""
"レイが :ref:`RigidBody <class_RigidBody>` と衝突した場合、レイが衝突したコラ"
"イダーに ``grabbed_object`` を設定します。次に、衝突した :ref:`RigidBody "
"<class_RigidBody>` のモードを ``MODE_STATIC`` に設定し、手の中で動かないよう"
"にします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:537
msgid ""
"Finally, we set the grabbed :ref:`RigidBody <class_RigidBody>`'s collision "
"layer and collision mask to ``0``. This will make the grabbed :ref:"
"`RigidBody <class_RigidBody>` have no collision layer or mask, which means "
"it will not be able to collide with anything as long as we are holding it."
msgstr ""
"最後に、取得した :ref:`RigidBody <class_RigidBody>` のコリジョンレイヤーとコ"
"リジョンマスクを ``0`` に設定します。これにより、つかまれた :ref:`RigidBody "
"<class_RigidBody>` にコリジョンレイヤーやマスクがなくなります。つまり、保持し"
"ている限り、衝突することはありません。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:542
msgid ""
"If ``grabbed_object`` is not ``null``, then we need to throw the :ref:"
"`RigidBody <class_RigidBody>` the player is holding."
msgstr ""
"``grabbed_object`` が ``null`` でない場合、プレイヤーが保持している :ref:"
"`RigidBody <class_RigidBody>` を投げる必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:544
msgid ""
"We first set the mode of the :ref:`RigidBody <class_RigidBody>` we are "
"holding to ``MODE_RIGID``."
msgstr ""
"まず、保持している :ref:`RigidBody <class_RigidBody>` のモードを "
"``MODE_RIGID`` に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:546
msgid ""
"This is making a rather large assumption that all the rigid bodies will be "
"using ``MODE_RIGID``. While that is the case for this tutorial series, that "
"may not be the case in other projects."
msgstr ""
"これは、すべてのリジッドボディが ``MODE_RIGID`` を使用するというかなり大きな"
"仮定を行っています。このチュートリアルシリーズの場合はそれでいいのですが、他"
"のプロジェクトではそうではないかもしれません。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:549
msgid ""
"If you have rigid bodies with different modes, you may need to store the "
"mode of the :ref:`RigidBody <class_RigidBody>` you have picked up into a "
"class variable so you can change it back to the mode it was in before you "
"picked it up."
msgstr ""
"異なるモードのリジッドボディがある場合、選択した :ref:`RigidBody "
"<class_RigidBody>` のモードをクラス変数に保存して、、それを拾う前のモードに戻"
"すことができるようにする必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:552
msgid ""
"Then we apply an impulse to send it flying forward. We send it flying in the "
"direction the camera is facing, using the force we set in the "
"``OBJECT_THROW_FORCE`` variable."
msgstr ""
"次に、衝撃を適用(apply_impulse)して前方に飛行させます。\\ "
"``OBJECT_THROW_FORCE`` 変数で設定した力を使用して、カメラが向いている方向に飛"
"行します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:554
msgid ""
"We then set the grabbed :ref:`RigidBody <class_RigidBody>`'s collision layer "
"and mask to ``1``, so it can collide with anything on layer ``1`` again."
msgstr ""
"次に、取得した :ref:`RigidBody <class_RigidBody>` のコリジョンレイヤーとマス"
"クを ``1`` に設定します。これにより、レイヤー ``1`` 上のすべてのものと再び衝"
"突できるようになります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:556
msgid ""
"This is, once again, making a rather large assumption that all the rigid "
"bodies will be only on collision layer ``1``, and all collision masks will "
"be on layer ``1``. If you are using this script in other projects, you may "
"need to store the collision layer/mask of the :ref:`RigidBody "
"<class_RigidBody>` in a variable before you change them to ``0``, so you "
"would have the original collision layer/mask to set for them when you are "
"reversing the process."
msgstr ""
"これもまた、すべてのリジッドボディがコリジョンレイヤー ``1`` にのみ存在し、す"
"べてのコリジョンマスクがレイヤー ``1`` に存在するというかなり大きな仮定をして"
"います。このスクリプトを他のプロジェクトで使用する場合、\\ ``0`` に変更する前"
"に、変数に :ref:`RigidBody <class_RigidBody>` のコリジョンレイヤー/マスクを保"
"存する必要がある場合があります。プロセスを反転するときにそれらを元のコリジョ"
"ンレイヤー/マスクに設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:559
msgid ""
"Finally, we set ``grabbed_object`` to ``null`` since the player has "
"successfully thrown the held object."
msgstr ""
"最後に、プレイヤーが保持していたオブジェクトを正常に投げたので、\\ "
"``grabbed_object`` を ``null`` に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:563
msgid ""
"The last thing we do is check to see whether or not ``grabbed_object`` is "
"equal to ``null``, outside all of the grabbing/throwing related code."
msgstr ""
"最後に行うことは、\\ ``grabbed_object`` が ``null`` に等しいかどうかを確認す"
"ることです。これは、すべての つかむ/投げる 関連コードの外側で行います。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:565
msgid ""
"While technically not input related, it's easy enough to place the code "
"moving the grabbed object here because it's only two lines, and then all of "
"the grabbing/throwing code is in one place"
msgstr ""
"技術的には入力関連ではありませんが、つかんだオブジェクトを移動するコードをこ"
"こに配置するのは簡単です。2行しかないため、つかむ/投げるコードはすべて1か所に"
"あるからです"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:568
msgid ""
"If the player is holding an object, we set its global position to the "
"camera's position plus ``OBJECT_GRAB_DISTANCE`` in the direction the camera "
"is facing."
msgstr ""
"プレイヤーがオブジェクトを保持している場合、そのグローバルポジションをカメラ"
"のポジションとカメラが向いている方向の ``OBJECT_GRAB_DISTANCE`` に設定しま"
"す。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:572
msgid ""
"Before we test this, we need to change something in ``_physics_process``. "
"While the player is holding an object, we do not want the player to be able "
"to change weapons or reload, so change ``_physics_process`` to the following:"
msgstr ""
"これをテストする前に、\\ ``_physics_process`` で何かを変更する必要がありま"
"す。プレイヤーがオブジェクトを保持している間は、プレイヤーが武器を変更したり"
"リロードしたりできないようにするため、\\ ``_ physics_process`` を次のように変"
"更します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:589
msgid "Now the player cannot change weapons or reload while holding an object."
msgstr ""
"これで、プレイヤーはオブジェクトを保持している間、武器を変更したりリロードし"
"たりできなくなります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:591
msgid ""
"Now you can grab and throw RigidBody nodes while you're in the ``UNARMED`` "
"state! Go give it a try!"
msgstr ""
"これで、\\ ``UNARMED`` 状態にあるときにRigidBodyノードをつかんで投げることが"
"できます！試してみてください！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:594
msgid "Adding a turret"
msgstr "砲塔の追加"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:596
msgid "Next, let's make a turret to shoot the player!"
msgstr "次に、プレイヤーを撃つための砲塔を作りましょう！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:598
msgid ""
"Open up ``Turret.tscn``. Expand ``Turret`` if it's not already expanded."
msgstr ""
"``Turret.tscn`` を開きます。まだ展開されていない場合は、\\ ``Turret`` を展開"
"します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:600
msgid ""
"Notice how the turret is broken up into several parts: ``Base``, ``Head``, "
"``Vision_Area``, and a ``Smoke`` :ref:`Particles <class_Particles>` node."
msgstr ""
"砲塔が複数の部分に分割されていることに注目してください : ``Base``\\ 、\\ "
"``Head``\\ 、\\ ``Vision_Area``\\ 、および `` Smoke`` :ref:`Particles "
"<class_Particles>` ノードです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:602
msgid ""
"Open up ``Base`` and you'll find it's a :ref:`StaticBody <class_StaticBody>` "
"and a mesh. Open up ``Head`` and you'll find there are several meshes, a :"
"ref:`StaticBody <class_StaticBody>` and a :ref:`Raycast <class_Raycast>` "
"node."
msgstr ""
"``Base`` を開くと、\\ :ref:`StaticBody <class_StaticBody>` とメッシュであるこ"
"とがわかります。\\ ``Head`` を開くと、複数のメッシュ、\\ :ref:`StaticBody "
"<class_StaticBody>` と :ref:`Raycast <class_Raycast>` ノードがあります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:605
msgid ""
"One thing to note with the ``Head`` is that the raycast will be where the "
"turret's bullets will fire from if we are using raycasting. We also have two "
"meshes called ``Flash`` and ``Flash_2``. These will be the muzzle flash that "
"briefly shows when the turret fires."
msgstr ""
"``Head`` で注意すべきことの1つは、レイキャスティングを使用している場合、レイ"
"キャストが砲塔が弾丸を発砲する場所になることです。また、\\ ``Flash`` と "
"``Flash_2`` という2つのメッシュがあります。これらは、砲塔が発砲したときに簡単"
"に表示される銃口フラッシュになります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:608
msgid ""
"``Vision_Area`` is an :ref:`Area <class_Area>` we'll use as the turret's "
"ability to see. When something enters ``Vision_Area``, we'll assume the "
"turret can see it."
msgstr ""
"``Vision_Area`` は :ref:`Area <class_Area>` であり、砲塔の視認能力として使用"
"します。何かが ``Vision_Area`` に入ると、砲塔がそれを見ることができると仮定し"
"ます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:610
msgid ""
"``Smoke`` is a :ref:`Particles <class_Particles>` node that will play when "
"the turret is destroyed and repairing."
msgstr ""
"``Smoke`` は :ref:`Particles <class_Particles>` ノードで、砲塔が破壊されて修"
"復されたときに再生されます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:614
msgid ""
"Now that we've looked at how the scene is set up, lets start writing the "
"code for the turret. Select ``Turret`` and create a new script called "
"``Turret.gd``. Add the following to ``Turret.gd``:"
msgstr ""
"シーンのセットアップ方法を確認したので、砲塔のコードの記述を始めましょう。\\ "
"``Turret`` を選択し、\\ ``Turret.gd`` という新しいスクリプトを作成します。以"
"下を ``Turret.gd`` に追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:780
msgid ""
"This is quite a bit of code, so let's break it down function by function. "
"Let's first look at the class variables:"
msgstr ""
"これはかなり量のコードなので、機能ごとに分解してみましょう。最初にクラス変数"
"を見てみましょう:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:782
msgid ""
"``use_raycast``: An exported boolean so we can change whether the turret "
"uses objects or raycasting for bullets."
msgstr ""
"``use_raycast``: 砲塔が弾丸にオブジェクトを使用するかレイキャスティングを使用"
"するかを変更できるように、エクスポートされたブール値。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:783
msgid ""
"``TURRET_DAMAGE_BULLET``: The amount of damage a single bullet scene does."
msgstr "``TURRET_DAMAGE_BULLET``: 1つの弾丸シーンが与えるダメージの量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:784
msgid ""
"``TURRET_DAMAGE_RAYCAST``: The amount of damage a single :ref:`Raycast "
"<class_Raycast>` bullet does."
msgstr ""
"``TURRET_DAMAGE_RAYCAST``: 単一の :ref:`Raycast <class_Raycast>` 弾丸が与える"
"ダメージの量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:785
msgid ""
"``FLASH_TIME``: The amount of time (in seconds) the muzzle flash meshes are "
"visible."
msgstr "``FLASH_TIME``: 銃口フラッシュメッシュが表示される時間(秒単位)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:786
msgid ""
"``flash_timer``: A variable for tracking how long the muzzle flash meshes "
"have been visible."
msgstr ""
"``flash_timer``: 銃口のフラッシュメッシュが表示されている時間を追跡するための"
"変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:787
msgid "``FIRE_TIME``: The amount of time (in seconds) needed to fire a bullet."
msgstr "``FIRE_TIME``: 弾丸を発射するのに必要な時間(秒単位)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:788
msgid ""
"``fire_timer``: A variable for tracking how much time has passed since the "
"turret last fired."
msgstr ""
"``fire_timer``: 砲塔が最後に発射してから経過した時間を追跡するための変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:789
msgid "``node_turret_head``: A variable to hold the ``Head`` node."
msgstr "``node_turret_head``: ``Head`` ノードを保持する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:790
msgid ""
"``node_raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` node "
"attached to the turret's head."
msgstr ""
"``node_raycast``: 砲塔の頭部に接続された :ref:`Raycast <class_Raycast>` ノー"
"ドを保持する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:791
msgid ""
"``node_flash_one``: A variable to hold the first muzzle flash :ref:"
"`MeshInstance <class_MeshInstance>`."
msgstr ""
"``node_flash_one``: 最初の銃口フラッシュ :ref:`MeshInstance "
"<class_MeshInstance>` を保持する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:792
msgid ""
"``node_flash_two``: A variable to hold the second muzzle flash :ref:"
"`MeshInstance <class_MeshInstance>`."
msgstr ""
"``node_flash_two``: 2番目の銃口フラッシュ :ref:`MeshInstance "
"<class_MeshInstance>` を保持する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:793
msgid "``ammo_in_turret``: The amount of ammo currently in the turret."
msgstr "``ammo_in_turret``: 現在砲塔にある弾薬の量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:794
msgid "``AMMO_IN_FULL_TURRET``: The amount of ammo in a full turret."
msgstr "``AMMO_IN_FULL_TURRET``: 砲塔の全弾薬量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:795
msgid "``AMMO_RELOAD_TIME``: The amount of time it takes the turret to reload."
msgstr "``AMMO_RELOAD_TIME``: 砲塔のリロードにかかる時間。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:796
msgid ""
"``ammo_reload_timer``: A variable for tracking how long the turret has been "
"reloading."
msgstr ""
"``ammo_reload_timer``: 砲塔がリロードされている時間を追跡するための変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:797
msgid "``current_target``: The turret's current target."
msgstr "``current_target``: 砲塔の現在のターゲット。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:798
msgid ""
"``is_active``: A variable for tracking whether the turret is able to fire at "
"the target."
msgstr "``is_active``: 砲塔が目標を射撃できるかどうかを追跡するための変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:799
msgid ""
"``PLAYER_HEIGHT``: The amount of height we're adding to the target so we're "
"not shooting at its feet."
msgstr ""
"``PLAYER_HEIGHT``: 足元を狙らわないようにターゲットに加算する高さの量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:800
msgid "``smoke_particles``: A variable to hold the smoke particles node."
msgstr "``smoke_particles``: 煙のパーティクルノードを保持する変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:801
msgid "``turret_health``: The amount of health the turret currently has."
msgstr "``turret_health``: 砲塔が現在持っている体力の量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:802
msgid "``MAX_TURRET_HEALTH``: The amount of health a fully healed turret has."
msgstr "``MAX_TURRET_HEALTH``: 完全に回復した状態の砲塔の体力の量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:803
msgid ""
"``DESTROYED_TIME``: The amount of time (in seconds) it takes for a destroyed "
"turret to repair itself."
msgstr ""
"``DESTROYED_TIME``: 破壊された砲塔が自己修復するのにかかる時間(秒単位)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:804
msgid ""
"``destroyed_timer``: A variable for tracking the amount of time a turret has "
"been destroyed."
msgstr "``destroyed_timer``: 砲塔が破壊された時間を追跡するための変数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:805
msgid ""
"``bullet_scene``: The bullet scene the turret fires (same scene as the "
"player's pistol)"
msgstr ""
"``bullet_scene``: 砲塔が発射する弾丸のシーン(プレイヤーのピストルと同じシー"
"ン)"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:807
msgid "Whew, that's quite a few class variables!"
msgstr "ふう、これはかなりの数のクラス変数です！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:811
msgid "Let's go through ``_ready`` next."
msgstr "次に ``_ready`` を見ていきましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:813
msgid ""
"Firstly, we get the vision area and connect the ``body_entered`` and "
"``body_exited`` signals to ``body_entered_vision`` and "
"``body_exited_vision``, respectively."
msgstr ""
"まず、ビジョンエリアを取得し、\\ ``body_entered`` および ``body_exited`` シグ"
"ナルをそれぞれ　 ``body_entered_vision`` および ``body_exited_vision`` に接続"
"します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:815
msgid ""
"We then get all the nodes and assign them to their respective variables."
msgstr "次に、すべてのノードを取得し、それぞれの変数に割り当てます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:817
msgid ""
"Next, we add some exceptions to the :ref:`Raycast <class_Raycast>` so the "
"turret cannot hurt itself."
msgstr ""
"次に、\\ :ref:`Raycast <class_Raycast>` にいくつかの例外を追加して、砲塔がそ"
"れ自体を傷つけないようにします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:819
msgid ""
"Then we make both flash meshes invisible at start, since we are not going to "
"be firing during ``_ready``."
msgstr ""
"次に、\\ ``_ ready`` の間は発射しないため、両方のフラッシュメッシュを開始時に"
"非表示にします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:821
msgid ""
"We then get the smoke particles node and assign it to the "
"``smoke_particles`` variable. We also set ``emitting`` to ``false`` to "
"ensure the particles are not emitting until the turret is broken."
msgstr ""
"次に、smoke particleノードを取得し、それを ``smoke_particles`` 変数に割り当て"
"ます。また、\\ ``emitting`` を ``false`` に設定して、砲塔が破壊されるまでパー"
"ティクルが放出されないようにします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:824
msgid ""
"Finally, we set the turret's health to ``MAX_TURRET_HEALTH`` so it starts at "
"full health."
msgstr ""
"最後に、砲塔の体力を ``MAX_TURRET_HEALTH`` に設定して、完全な体力で開始するよ"
"うにします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:828
msgid "Now let's go through ``_physics_process``."
msgstr "それでは、\\ ``_physics_process`` を見てみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:830
msgid ""
"Firstly, we check whether the turret is active. If the turret is active, we "
"want to process the firing code."
msgstr ""
"まず、砲塔がアクティブかどうかを確認します。 砲塔がアクティブな場合、発射コー"
"ドを処理します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:832
msgid ""
"Next, if ``flash_timer`` is greater than zero, meaning the flash meshes are "
"visible, we want to remove delta from ``flash_timer``. If ``flash_timer`` "
"gets to zero or less after we've subtracted ``delta``, we want to hide both "
"of the flash meshes."
msgstr ""
"次に、\\ ``flash_timer`` がゼロより大きい場合、つまりフラッシュメッシュが表示"
"されている場合、\\ ``flash_timer`` からdeltaを減らします。``delta`` を減算し"
"た後に ``flash_timer`` がゼロ以下になった場合、両方のフラッシュメッシュを非表"
"示にする必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:836
msgid ""
"Next, we check whether the turret has a target. If the turret has a target, "
"we make the turret head look at it, adding ``PLAYER_HEIGHT`` so it is not "
"aiming at the player's feet."
msgstr ""
"次に、砲塔にターゲットがあるかどうかを確認します。 砲塔にターゲットがある場"
"合、砲塔の頭がプレイヤーの足元を狙わないように ``PLAYER_HEIGHT`` を加算して見"
"るようにします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:839
msgid ""
"We then check whether the turret's health is greater than zero. If it is, we "
"then check whether there is ammo in the turret."
msgstr ""
"次に、砲塔の体力がゼロより大きいかどうかを確認します。 そうであれば、砲塔に弾"
"薬があるかどうかを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:841
msgid ""
"If there is, we then check whether ``fire_timer`` is greater than zero. If "
"it is, the turret cannot fire and we need to remove ``delta`` from "
"``fire_timer``. If ``fire_timer`` is less than or equal to zero, the turret "
"can fire a bullet, so we call the ``fire_bullet`` function."
msgstr ""
"そうである場合は、\\ ``fire_timer`` がゼロより大きいかどうかを確認します。 も"
"しそうなら、砲塔は発砲できず、\\ ``fire_timer`` から ``delta`` 分を減らす必要"
"があります。\\ ``fire_timer`` がゼロ以下の場合、砲塔は弾丸を発射できるた"
"め、\\ ``fire_bullet`` 関数を呼び出します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:844
msgid ""
"If there isn't any ammo in the turret, we check whether "
"``ammo_reload_timer`` is greater than zero. If it is, we subtract ``delta`` "
"from ``ammo_reload_timer``. If ``ammo_reload_timer`` is less than or equal "
"to zero, we set ``ammo_in_turret`` to ``AMMO_IN_FULL_TURRET`` because the "
"turret has waited long enough to refill its ammo."
msgstr ""
"砲塔に弾薬がない場合、\\ ``ammo_reload_timer`` がゼロより大きいかどうかを確認"
"します。 そうである場合、\\ ``ammo_reload_timer`` から ``delta`` を減算しま"
"す。\\ ``ammo_reload_timer`` がゼロ以下の場合、砲塔が弾薬を補充するのに十分な"
"時間待機しているため、\\ ``ammo_in_turret`` を ``AMMO_IN_FULL_TURRET`` に設定"
"します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:848
msgid ""
"Next, we check whether the turret's health is less than or equal to ``0`` "
"outside of whether it is active or not. If the turret's health is zero or "
"less, we then check whether ``destroyed_timer`` is greater than zero. If it "
"is, we subtract ``delta`` from ``destroyed_timer``."
msgstr ""
"次に、砲塔がアクティブかどうか以外に、砲塔の体力が ``0`` 以下かどうかを確認し"
"ます。砲塔の体力がゼロ以下の場合、\\ ``destroyed_timer`` がゼロより大きいかど"
"うかを確認します。 もしそうなら、\\ ``destroyed_timer`` から ``delta`` を減算"
"します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:851
msgid ""
"If ``destroyed_timer`` is less than or equal to zero, we set "
"``turret_health`` to ``MAX_TURRET_HEALTH`` and stop emitting smoke particles "
"by setting ``smoke_particles.emitting`` to ``false``."
msgstr ""
"``destroyed_timer`` がゼロ以下の場合、\\ ``turret_health`` を "
"``MAX_TURRET_HEALTH`` に設定し、\\ ``smoke_particles.transmit`` を ``false`` "
"に設定して煙のパーティクルの放出を停止します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:856
msgid "Next let's go through ``fire_bullet``."
msgstr "次に、\\ ``fire_bullet`` を見てみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:858
msgid "Firstly, we check whether the turret is using a raycast."
msgstr "まず、砲塔がレイキャストを使用しているかどうかを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:860
msgid ""
"The code for using a raycast is almost entirely the same as the code in the "
"rifle from :ref:`doc_fps_tutorial_part_two`, so I'm only going to go over it "
"briefly."
msgstr ""
"レイキャストを使用するためのコードは、\\ :ref:`doc_fps_tutorial_part_two` の"
"ライフルのコードとほぼ同じなので、簡単に説明します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:863
msgid ""
"We first make the raycast look at the target, ensuring the raycast will hit "
"the target if nothing is in the way. We then force the raycast to update so "
"we get a frame perfect collision check. We then check whether the raycast "
"has collided with anything. If it has, we then check whether the collided "
"body has the ``bullet_hit`` method. If it does, we call it and pass in the "
"damage a single raycast bullet does along with the raycast's transform. We "
"then subtract ``1`` from ``ammo_in_turret``."
msgstr ""
"最初にレイキャストでターゲットを確認し、何も邪魔されていない場合にレイキャス"
"トがターゲットにヒットするようにします。 次に、レイキャストを強制的に更新し"
"て、フレームパーフェクトコリジョンチェックを取得します。 次に、レイキャストが"
"何かと衝突したかどうかを確認します。 その場合、衝突したボディに "
"``bullet_hit`` メソッドがあるかどうかを確認します。 もしそうなら、私たちはそ"
"れを呼び出して、レイキャストのtransformとともに単一のレイキャストの弾丸が与え"
"るダメージを渡します。 次に、\\ ``ammo_in_turret`` から ``1`` を引きます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:868
msgid ""
"If the turret is not using a raycast, we spawn a bullet object instead. This "
"code is almost entirely the same as the code in the pistol from :ref:"
"`doc_fps_tutorial_part_two`, so like with the raycast code, I'm only going "
"to go over it briefly."
msgstr ""
"砲塔がレイキャストを使用していない場合、代わりに弾丸オブジェクトを生成しま"
"す。 このコードは :ref:`doc_fps_tutorial_part_two` のピストルのコードとほぼ完"
"全に同じであるため、レイキャストコードと同様に、簡単に説明します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:871
msgid ""
"We first make a bullet clone and assign it to ``clone``. We then add that as "
"a child of the root node. We set the bullet's global transform to the barrel "
"end, scale it up since it's too small, and set its damage and speed using "
"the turret's constant class variables. We then subtract ``1`` from "
"``ammo_in_turret``."
msgstr ""
"最初に弾丸のクローンを作成し、それを ``clone`` に割り当てます。 次に、それを"
"ルートノードの子として追加します。 弾丸のグローバルtransformを砲身の終端に設"
"定し、そのままでは小さすぎるためにスケールアップし、砲塔の定数クラス変数を使"
"用してダメージと速度を設定します。 次に、\\ ``ammo_in_turret`` から ``1`` を"
"引きます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:875
msgid ""
"Then, regardless of which bullet method we used, we make both of the muzzle "
"flash meshes visible. We set ``flash_timer`` and ``fire_timer`` to "
"``FLASH_TIME`` and ``FIRE_TIME``, respectively. We then check whether the "
"turret has used the last bullet in its ammo. If it has, we set "
"``ammo_reload_timer`` to ``AMMO_RELOAD_TIME`` so the turret reloads."
msgstr ""
"次に、使用した弾丸方式に関係なく、両方の銃口フラッシュメッシュを表示します。 "
"``flash_timer`` と ``fire_timer`` をそれぞれ ``FLASH_TIME`` と ``FIRE_TIME`` "
"に設定します。 次に、砲塔が弾薬の最後の弾丸を使用したかどうかを確認します。 "
"その場合は、砲塔がリロードされるように ``ammo_reload_timer`` を "
"``AMMO_RELOAD_TIME`` に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:881
msgid ""
"Let's look at ``body_entered_vision`` next, and thankfully it is rather "
"short."
msgstr ""
"次に ``body_entered_vision`` を見てみますが、ありがたいことにそれはかなり短い"
"です。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:883
msgid ""
"We first check whether the turret currently has a target by checking if "
"``current_target`` is equal to ``null``. If the turret does not have a "
"target, we then check whether the body that has just entered the vision :ref:"
"`Area <class_Area>` is a :ref:`KinematicBody <class_KinematicBody>`."
msgstr ""
"まず、 \\ ``current_target`` が ``null`` と等しいかどうかを確認することによ"
"り、砲塔が現在ターゲットを持っているかどうかを確認します。 砲塔にターゲットが"
"ない場合は、ビジョンに入ったばかりのボディ :ref:`Area <class_Area>` が :ref:"
"`KinematicBody <class_KinematicBody>` であるかどうかを確認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:886
msgid ""
"We're assuming the turret should only fire at :ref:`KinematicBody "
"<class_KinematicBody>` nodes since that is what the player is using."
msgstr ""
"砲塔は :ref:`KinematicBody <class_KinematicBody>` ノードでのみ発動するはずで"
"あると想定しています。これはプレイヤーが使用しているものだからです。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:888
msgid ""
"If the body that just entered the vision :ref:`Area <class_Area>` is a :ref:"
"`KinematicBody <class_KinematicBody>`, we set ``current_target`` to the "
"body, and set ``is_active`` to ``true``."
msgstr ""
"ビジョン :ref:`Area <class_Area>` に入ったばかりのボディが :ref:"
"`KinematicBody <class_KinematicBody>` である場合、\\ ``current_target`` にボ"
"ディに設定し、\\ ``is_active`` を `` true`` に設定します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:893
msgid "Now let's look at ``body_exited_vision``."
msgstr "それでは、\\ ``body_exited_vision`` を見てみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:895
msgid ""
"Firstly, we check whether the turret has a target. If it does, we then check "
"whether the body that has just left the turret's vision :ref:`Area "
"<class_Area>` is the turret's target."
msgstr ""
"まず、砲塔にターゲットがあるかどうかを確認します。もしそうなら、砲塔の視界か"
"ら出たばかりのボディ :ref:`Area <class_Area>` が砲塔のターゲットかどうかを確"
"認します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:898
msgid ""
"If the body that has just left the vision :ref:`Area <class_Area>` is the "
"turret's current target, we set ``current_target`` to ``null``, set "
"``is_active`` to ``false``, and reset all the variables related to firing "
"the turret since the turret no longer has a target to fire at."
msgstr ""
"視界 :ref:`Area <class_Area>` を出たばかりのボディが砲塔の現在のターゲットで"
"ある場合、\\ ``current_target`` を ``null`` に設定し、\\ ``is_active`` を "
"``false`` に設定し、砲塔には発射するターゲットがなくなったため、砲塔の発射に"
"関連するすべての変数をリセットします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:903
msgid "Finally, let's look at ``bullet_hit``."
msgstr "最後に、\\ ``bullet_hit`` を見てみましょう。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:905
msgid ""
"We first subtract however much damage the bullet causes from the turret's "
"health."
msgstr "まず、砲塔の体力から弾丸が引き起こすダメージを差し引きます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:907
msgid ""
"Then, we check whether the turret has been destroyed (health being zero or "
"less). If the turret is destroyed, we start emitting the smoke particles and "
"set ``destroyed_timer`` to ``DESTROYED_TIME`` so the turret has to wait "
"before being repaired."
msgstr ""
"次に、砲塔が破壊されたかどうかを確認します(体力ゼロ以下)。砲塔が破壊された場"
"合、煙のパーティクルの放出を開始し、\\ ``destroyed_timer`` を `` "
"DESTROYED_TIME`` に設定して、砲塔が修理されるまで待機させる必要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:912
msgid ""
"Whew, with all of that done and coded, we only have one last thing to do "
"before the turret is ready for use. Open up ``Turret.tscn`` if it's not "
"already open and select one of the :ref:`StaticBody <class_StaticBody>` "
"nodes from either ``Base`` or ``Head``. Create a new script called "
"``TurretBodies.gd`` and attach it to whichever :ref:`StaticBody "
"<class_StaticBody>` you have selected."
msgstr ""
"ふう、コーディングが完了したので、砲塔を使用する準備ができるまでに最後にやる"
"べきことは1つだけです。 まだ開いていない場合は ``Turret.tscn`` を開き、\\ "
"``Base`` または ``Head`` から :ref:`StaticBody <class_StaticBody>` ノードのい"
"ずれかを選択します。\\ ``TurretBodies.gd`` という新しいスクリプトを作成し、選"
"択した :ref:`StaticBody <class_StaticBody>` のいずれかにアタッチします。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:916
msgid "Add the following code to ``TurretBodies.gd``:"
msgstr "次のコードを ``TurretBodies.gd`` に追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:931
msgid ""
"All this code does is call ``bullet_hit`` on whatever node to which "
"``path_to_turret_root`` leads. Go back to the editor and assign the :ref:"
"`NodePath <class_NodePath>` to the ``Turret`` node."
msgstr ""
"このコードは単に、\\ ``path_to_turret_root`` で導かれるあらゆるノードで "
"``bullet_hit`` を呼び出します。エディタに戻り、\\ :ref:`NodePath "
"<class_NodePath>` を ``Turret`` ノードに割り当てます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:934
msgid ""
"Now select the other :ref:`StaticBody <class_StaticBody>` node (either in "
"``Body`` or ``Head``) and assign ``TurretBodies.gd`` script to it. Once the "
"script is attached, assign again the :ref:`NodePath <class_NodePath>` to the "
"``Turret`` node."
msgstr ""
"次に、他の :ref:`StaticBody <class_StaticBody>` ノード(``Body`` または "
"``Head`` のいずれか)を選択し、\\ ``TurretBodies.gd`` スクリプトを割り当てま"
"す。スクリプトがアタッチされたら、再び :ref:`NodePath <class_NodePath>` を "
"``Turret`` ノードに割り当てます。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:939
msgid ""
"The last thing we need to do is add a way for the player to be hurt. Since "
"all the bullets use the ``bullet_hit`` function, we need to add that "
"function to the player."
msgstr ""
"最後に行う必要があるのは、プレイヤーを傷つける方法を追加することです。すべて"
"の弾丸は ``bullet_hit`` 関数を使用するため、プレイヤーにその関数を追加する必"
"要があります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:941
msgid "Open ``Player.gd`` and add the following:"
msgstr "``Player.gd`` を開き、次のように追加します:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:948
msgid ""
"With all that done, you should have fully operational turrets! Go place a "
"few in one/both/all of the scenes and give them a try!"
msgstr ""
"すべて完了したら、完全に機能する砲塔を実際に手にすべきです！ 1つ/両方/すべて"
"のシーンにいくつか配置して、試してみてください！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:951
msgid "Final notes"
msgstr "最終ノート"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:955
msgid ""
"Now you can pick up :ref:`RigidBody <class_RigidBody>` nodes and throw "
"grenades. We now also have turrets to fire at the player."
msgstr ""
"これで :ref:`RigidBody <class_RigidBody>` ノードを取得して手榴弾を投げること"
"ができます。 また、プレイヤーを攻撃するための砲塔もあります。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:957
msgid ""
"In :ref:`doc_fps_tutorial_part_six`, we're going to add a main menu and a "
"pause menu, add a respawn system for the player, and change/move the sound "
"system so we can use it from any script."
msgstr ""
":ref:`doc_fps_tutorial_part_six` では、メインメニューと一時停止メニューを追加"
"し、プレイヤーの再出現システムを追加し、任意のスクリプトから使用できるように"
"サウンドシステムを変更/移動します。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:960
msgid "If you ever get lost, be sure to read over the code again!"
msgstr "迷子になったら、必ずコードをもう一度読んでください！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:962
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_5.zip <files/Godot_FPS_Part_5.zip>`"
msgstr ""
"このパートの完成したプロジェクトは、ここからダウンロードできます: :download:"
"`Godot_FPS_Part_5.zip <files/Godot_FPS_Part_5.zip>`"
