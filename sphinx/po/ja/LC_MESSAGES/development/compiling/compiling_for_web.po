# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-06 14:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/compiling/compiling_for_web.rst:4
msgid "Compiling for the Web"
msgstr "Web用のコンパイル"

#: ../../docs/development/compiling/compiling_for_web.rst:9
msgid "Requirements"
msgstr "必要条件"

#: ../../docs/development/compiling/compiling_for_web.rst:11
msgid "To compile export templates for the Web, the following is required:"
msgstr "Webのエクスポートテンプレートをコンパイルするには、次のことが必要です:"

#: ../../docs/development/compiling/compiling_for_web.rst:13
msgid "`Emscripten 1.39.0+ <https://emscripten.org>`__."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:14
msgid "`Python 3.5+ <https://www.python.org/>`__."
msgstr "`Python 3.5 以降 <https://www.python.org/>`_\\ 。"

#: ../../docs/development/compiling/compiling_for_web.rst:15
msgid "`SCons 3.0+ <https://www.scons.org>`__ build system."
msgstr ""
"`3.0以降のSCons <https://scons.org/pages/download.html>`_ ビルドシステム。"

#: ../../docs/development/compiling/compiling_for_web.rst:17
msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"Godotにおける基本的なSconsの使い方については、\\ :ref:"
"`doc_introduction_to_the_buildsystem`\\ を参照してください。"

#: ../../docs/development/compiling/compiling_for_web.rst:21
msgid "Building export templates"
msgstr "エクスポートテンプレートの構築"

#: ../../docs/development/compiling/compiling_for_web.rst:23
msgid ""
"Before starting, confirm that the Emscripten configuration file exists and "
"specifies all settings correctly. This file is available as ``~/."
"emscripten`` on UNIX-like systems and ``%USERPROFILE%\\.emscripten`` on "
"Windows. It's usually written by the Emscripten SDK, e.g. when invoking "
"``emsdk activate latest``, or by your package manager. It's also created "
"when starting Emscripten's ``emcc`` program if the file doesn't exist."
msgstr ""
"開始する前に、Emscripten構成ファイルが存在することを確認し、すべての設定を正"
"しく指定します。このファイルは、UNIX ライクなシステムでは``~/.emscripten`` 、"
"Windows では ``%USERPROFILE%\\.emscripten`` として使用できます。通常は"
"Emscripten SDKで書かれていて、例えば ``emsdk activate latest`` を起動した時"
"や、またはパッケージマネージャによって呼び出す場合、また、ファイルが存在しな"
"い場合、Emscriptenの ``emcc`` プログラムを開始するときに作成されます。"

#: ../../docs/development/compiling/compiling_for_web.rst:30
msgid ""
"On Windows, make sure to escape backslashes of paths within the Emscripten "
"configuration file as double backslashes ``\\\\`` or use Unix-style paths "
"with a single forward slash ``/``."
msgstr ""
"Windowsでは、Emscripten構成ファイル内のパスのバックスラッシュを二重のバックス"
"ラッシュ ``\\\\`` としてエスケープするか、単一のスラッシュ ``/`` でUnixスタイ"
"ルのパスを使用してください。"

#: ../../docs/development/compiling/compiling_for_web.rst:34
msgid ""
"Open a terminal and navigate to the root directory of the engine source "
"code. Then instruct SCons to build the JavaScript platform. Specify "
"``target`` as either ``release`` for a release build or ``release_debug`` "
"for a debug build::"
msgstr ""
"ターミナルを開き、エンジンソース コードのルートディレクトリに移動します。次"
"に、SConsにJavaScriptプラットフォームの構築を指示します。 ``target`` をリリー"
"ス ビルドの ``release`` またはデバッグ ビルドの ``release_debug`` として指定"
"します:"

#: ../../docs/development/compiling/compiling_for_web.rst:41
msgid ""
"By default, the :ref:`JavaScript singleton <doc_javascript_eval>` will be "
"built into the engine. Since ``eval()`` calls can be a security concern, the "
"``javascript_eval`` option can be used to build without the singleton::"
msgstr ""
"デフォルトでは、\\ :ref:`JavaScriptシングルトン <doc_javascript_eval>`\\ がエ"
"ンジンに組み込まれます。 ``eval()`` '呼び出しはセキュリティ上の問題になる可能"
"性があるため、 ``javascript_eval`` オプションを使用してシングルトンなしでビル"
"ドできます:"

#: ../../docs/development/compiling/compiling_for_web.rst:48
msgid ""
"The engine will now be compiled to WebAssembly by Emscripten. Once finished, "
"the resulting file will be placed in the ``bin`` subdirectory. Its name is "
"``godot.javascript.opt.zip`` for release or ``godot.javascript.opt.debug."
"zip`` for debug."
msgstr ""
"これで、エンジンはEmscriptenによってWebAssemblyにコンパイルされます。完了する"
"と、結果のファイルは ``bin`` サブディレクトリに配置されます。名前は ``godot."
"javascript.opt.zip`` (リリース用)か、``godot.javascript.opt.debug.zip``(デ"
"バッグ用)です。"

#: ../../docs/development/compiling/compiling_for_web.rst:53
msgid ""
"Finally, rename the zip archive to ``webassembly_release.zip`` for the "
"release template::"
msgstr ""
"最後に、リリース テンプレートのzipアーカイブの名前を ``webassembly_release."
"zip`` に変更します:"

#: ../../docs/development/compiling/compiling_for_web.rst:58
msgid "And ``webassembly_debug.zip`` for the debug template::"
msgstr "デバッグテンプレートの ``webassembly_debug.zip`` :"

#: ../../docs/development/compiling/compiling_for_web.rst:63
msgid "Building per asm.js translation or LLVM backend"
msgstr "\\ asm.js変換または LLVMバックエンドごとのビルド"

#: ../../docs/development/compiling/compiling_for_web.rst:65
msgid ""
"WebAssembly can be compiled in two ways: The default is to first compile to "
"asm.js, a highly optimizable subset of JavaScript, using Emscripten's "
"*fastcomp* fork of LLVM. This code is then translated to WebAssembly using a "
"tool called ``asm2wasm``. Emscripten automatically takes care of both "
"processes, we simply run SCons."
msgstr ""
"WebAssemblyは2つの方法でコンパイルできます。デフォルトでは、EmscriptenのLLVM"
"の\\ *fastcomp*\\ フォークを使用して、JavaScriptの高度に最適化可能なサブセッ"
"トであるasm.jsに最初にコンパイルします。 このコードは、 ``asm2wasm`` という"
"ツールを使用してWebAssemblyに変換されます。 Emscriptenは両方のプロセスを自動"
"的に処理します。SConsを実行するだけです。"

#: ../../docs/development/compiling/compiling_for_web.rst:71
msgid ""
"The other method uses LLVM's WebAssembly backend. This backend is available "
"starting with LLVM 8 or in development builds. Emscripten manages this "
"process as well, so we just invoke SCons."
msgstr ""
"もう1つの方法は、LLVMのWebAssemblyバックエンドを使用します。このバックエンド"
"は、LLVM 8以降または開発ビルドで利用可能です。 Emscriptenはこのプロセスも管理"
"するため、SConsを呼び出します。"

#: ../../docs/development/compiling/compiling_for_web.rst:75
msgid ""
"In order to choose one of the two methods, the ``LLVM_ROOT`` variable in the "
"Emscripten configuration file is used. If it points to a directory "
"containing binaries of Emscripten's *fastcomp* fork of clang, ``asm2wasm`` "
"is used. This is the default in a normal Emscripten installation. Otherwise, "
"LLVM binaries built with the WebAssembly backend will be expected and the "
"LLVM's WebAssembly backend is used."
msgstr ""
"2つの方法のいずれかを選択するために、Emscripten構成ファイルの ``LLVM_ROOT`` "
"変数が使用されます。Emscriptenのclangの *fastcomp* フォークのバイナリを含む"
"ディレクトリを指している場合、\\ ``asm2wasm`` が使用されます。これは、通常の"
"Emscriptenインストールのデフォルトです。それ以外の場合、WebAssemblyバックエン"
"ドで構築されたLLVMバイナリが期待され、LLVMのWebAssemblyバックエンドが使用され"
"ます。"
