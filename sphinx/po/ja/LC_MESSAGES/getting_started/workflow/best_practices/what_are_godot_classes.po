# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:4
msgid "Godot scenes and scripts are classes"
msgstr "Godotのシーンとスクリプトはクラスです"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:6
msgid ""
"In Godot, scripts and scenes can both be the equivalent of classes in an "
"Object-Oriented programming language. The main difference is that scenes are "
"`declarative code <https://en.wikipedia.org/wiki/Declarative_programming>`_, "
"while scripts can contain `imperative code <https://en.wikipedia.org/wiki/"
"Imperative_programming>`_."
msgstr ""
"Godotでは、スクリプトとシーンの両方をオブジェクト指向プログラミング言語のクラ"
"スに相当させることができます。主な違いは、シーンは `宣言型コード<https://en."
"wikipedia.org/wiki/Declarative_programming>` であるのに対して、スクリプトに"
"は `命令型コード<https://en.wikipedia.org/wiki/Imperative_programming>` を含"
"めることができることです。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:12
msgid ""
"As a result, many best practices in Godot boil down to applying Object-"
"Oriented design principles to the scenes, nodes, or script that make up your "
"game."
msgstr ""
"その結果、Godotの多くのベストプラクティスは、ゲームを構成するシーン、ノード、"
"またはスクリプトにオブジェクト指向の設計原則を適用することに要約されます。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:15
msgid ""
"This guide explains how scripts and scenes work in the engine's core, to "
"help you get a sense of how Godot works under the hood, and to help you "
"better understand where some of this series' best practices come from."
msgstr ""
"このガイドでは、スクリプトとシーンがエンジンのコアでどのように機能するかを説"
"明し、Godotが内部でどのように機能するかを理解し、このシリーズのベストプラク"
"ティスの一部を理解するのに役立ちます。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:20
msgid "Making sense of classes in Godot"
msgstr "Godotのクラスを理解する"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:22
msgid ""
"Godot Engine provides built-in classes like :ref:`Node <class_Node>`. User-"
"created types are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"Godotエンジンには :ref:`node <class_Node>` のような組み込みクラスが用意されて"
"います。ユーザーが作成した型は、技術的にはクラスではありません。そうではな"
"く、エンジンの組み込みクラスの 1つで実行する初期化のシーケンスをエンジンに指"
"示するリソースです。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:27
msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Godotの内部クラスには、クラスのデータを :ref:`ClassDB <class_ClassDB>` に登録"
"するメソッドがあります。このデータベースは、クラス情報へのランタイムアクセス"
"を提供します。\\ ``ClassDB`` には、次のようなクラスに関する情報が含まれていま"
"す。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:31
msgid "properties"
msgstr "プロパティ"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:32
msgid "methods"
msgstr "メソッド"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:33
msgid "constants"
msgstr "定数"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:34
msgid "signals"
msgstr "シグナル"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:36
msgid ""
"This ``ClassDB`` is what Objects check against when performing an operation "
"like accessing a property or calling a method. ``ClassDB`` checks the "
"database's records and the records of the Object's base types to see if the "
"Object supports the operation."
msgstr ""
"この ``ClassDB`` は、プロパティへのアクセスやメソッドの呼び出しなどの操作を実"
"行するときにオブジェクトがチェックするものです。\\ ``ClassDB`` は、データベー"
"スのレコードとオブジェクトの基本型のレコードをチェックして、オブジェクトが操"
"作をサポートしているかどうかを確認します。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:41
msgid ""
"On the engine's side, every class defines a static ``_bind_methods()`` "
"function that describes what C++ content it registers to the database and "
"how. When you use the engine, you can extend the methods, properties, and "
"signals available from the ``ClassDB`` by attaching a :ref:`Script "
"<class_Script>` to your node."
msgstr ""
"エンジン側では、すべてのクラスが静的な ``_bind_methods()`` 関数を定義し、デー"
"タベースに登録するC++コンテンツとその方法を記述します。エンジンを使用する場"
"合、ノードに :ref:`Script <class_Script>` をアタッチすることにより\\ "
"``ClassDB`` から利用可能なメソッド、プロパティ、シグナルを拡張できます。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:46
msgid ""
"Objects check their attached script before the database. This is why scripts "
"can override built-in methods. If a script defines a "
"``_get_property_list()`` method, Godot appends that data to the list of "
"properties the Object fetches from the ClassDB. The same is true for other "
"declarative code."
msgstr ""
"オブジェクトは、データベースより以前にアタッチされたスクリプトをチェックしま"
"す。このため、スクリプトは組み込みメソッドをオーバーライドできます。スクリプ"
"トで ``_get_property_list()`` メソッドが定義されている場合、Godotはオブジェク"
"トがClassDBから取得するプロパティのリストにそのデータを追加します。同じことが"
"他の宣言型コードにも当てはまります。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:51
msgid ""
"Even scripts that don't inherit from a built-in type, i.e. scripts that "
"don't start with the ``extends`` keyword, implicitly inherit from the "
"engine's base :ref:`Reference <class_Reference>` class. This allows the "
"Object to defer to the script's content where the engine logic deems "
"appropriate."
msgstr ""
"組み込み型から継承しないスクリプト、つまり ``extends`` キーワードで始まらない"
"スクリプトでさえ、エンジンのベース :ref:`Reference <class_Reference>` クラス"
"から暗黙的に継承します。これにより、オブジェクトは、エンジンロジックが適切と"
"考えるスクリプトのコンテンツに従うことができます。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:58
msgid ""
"As a result, you can instance scripts without the ``extends`` keyword from "
"code, but you cannot attach them to a :ref:`Node <class_Node>`"
msgstr ""
"その結果、コードから ``extends`` キーワードを指定せずにスクリプトをインスタン"
"ス化することはできますが、\\ :ref:`Node <class_Node>` にアタッチすることはで"
"きません"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:63
msgid "Scripting performances and PackedScene"
msgstr "スクリプトのパフォーマンスとPackedScene"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:65
msgid ""
"As the size of Objects increases, the scripts' necessary size to create them "
"grows much, much larger. Creating node hierarchies demonstrates this. Each "
"individual Node's logic could be several hundred lines of code in length."
msgstr ""
"オブジェクトのサイズが大きくなるにつれて、作成に必要なスクリプトのサイズがど"
"んどん大きくなります。ノード階層を作成すると、これが実証されます。個々のノー"
"ドのロジックは、長さが数百行のコードになる可能性があります。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:69
msgid ""
"Let's see a simple example of creating a single ``Node`` as a child. The "
"code below creates a new ``Node``, changes its name, assigns a script to it, "
"sets its future parent as its owner so it gets saved to disk along with it, "
"and finally adds it as a child of the ``Main`` node:"
msgstr ""
"単一の ``Node`` を子として作成する簡単な例を見てみましょう。以下のコードは、"
"新しい ``Node`` を作成し、その名前を変更し、スクリプトをそれに割り当て、将来"
"の親(``Main``)を所有者として設定し、それとともにディスクに保存され、最後に "
"``Main``ノードの子として追加します:"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:109
msgid ""
"Script code like this is much slower than engine-side C++ code. Each change "
"makes a separate call to the scripting API which leads to many \"look-ups\" "
"on the back-end to find the logic to execute."
msgstr ""
"このようなスクリプト コードは、エンジン側の C++コードよりもはるかに低速です。"
"各変更は、実行するロジックを見つけるためにバックエンドで多くの「ルックアッ"
"プ」につながるスクリプトAPIを個別に呼び出します。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:113
msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, are resources "
"that use serialized data to create objects. The engine can process scenes in "
"batches on the back-end and provide much better performance than scripts."
msgstr ""
"シーンは、このパフォーマンスの問題を回避するのに役立ちます。\\ :ref:"
"`PackedScene <class_PackedScene>` は、シーンが継承する基本型であり、シリアル"
"化されたデータを使用してオブジェクトを作成するリソースです。エンジンは、バッ"
"クエンドでシーンをバッチ処理し、スクリプトよりもはるかに優れたパフォーマンス"
"を提供できます。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:119
msgid "Scenes and scripts are objects"
msgstr "シーンとスクリプトはオブジェクト"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:121
msgid ""
"Why is any of this important to scene organization? Because scenes *are* "
"objects. One often pairs a scene with a scripted root node that makes use of "
"the sub-nodes. This means that the scene is often an extension of the "
"script's declarative code."
msgstr ""
"シーン編成にとって、これが重要なのはなぜですか？ なぜなら、シーン\\ *は*\\ オ"
"ブジェクトだからです。サブノードを利用するスクリプト化されたルートノードと"
"シーンをペアにすることがよくあります。これは、シーンがスクリプトの宣言コード"
"の拡張であることが多いことを意味します。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:126
msgid "The content of a scene helps to define:"
msgstr "シーンのコンテンツは、以下を定義するのに役立ちます:"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:128
msgid "What nodes are available to the script"
msgstr "スクリプトで使用可能なノード"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:129
msgid "How they are organized"
msgstr "どのように構成されているか"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:130
msgid "How are they initialized"
msgstr "どのように初期化されるか"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:131
msgid "What signal connections they have with each other"
msgstr "それら相互のシグナル接続"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:133
msgid ""
"Many Object-Oriented principles which apply to written code *also* apply to "
"scenes."
msgstr ""
"記述されたコードに適用される多くのオブジェクト指向の原則は、シーン\\ **にも**"
"\\ 適用されます。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:136
msgid ""
"The scene is *always an extension of the script attached to its root node*. "
"You can see all the nodes it contains as part of a single class."
msgstr ""
"シーンは *常にルートノードにアタッチされたスクリプトの拡張* です 。1つのクラ"
"スの一部として、そのノードに含まれるすべてのノードを確認できます。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:139
msgid ""
"Most of the tips and techniques explained in this series will build on this."
msgstr ""
"このシリーズで説明するヒントとテクニックのほとんどは、これに基づいています。"
