# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-20 16:21+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:4
msgid "Introduction"
msgstr "はじめに"

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:6
msgid ""
"This series is a collection of best practices to help you work efficiently "
"with Godot."
msgstr ""
"このシリーズは、Godotを効率的に使用するためのベストプラクティス(最善の措置)の"
"コレクションです。"

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:9
msgid ""
"Godot allows for a great amount of flexibility in how you structure a "
"project's codebase and break it down into scenes. Each approach has its own "
"pros and cons, and they can be hard to weigh until you've worked with the "
"engine for long enough."
msgstr ""
"Godotを使用すると、プロジェクトのコードベースをどのように構造化し、シーンに分"
"割するかについて、非常に柔軟なアプローチが可能です。それぞれのアプローチには"
"長所と短所があり、エンジンを十分に長く使用するまで、それらを比較検討するのは"
"困難です。"

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:13
msgid ""
"There are always many ways to structure your code and solve specific "
"programming problems. It would be impossible to cover them all here."
msgstr ""
"コードを構造化し、特定のプログラミングの問題を解決するには、常に多くの方法が"
"あります。ここでそれらをすべてカバーすることは不可能です。"

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:16
msgid ""
"That is why each article starts from a real-world problem. We will break "
"down each problem in fundamental questions, suggest solutions, analyze the "
"pros and cons of each option, and highlight the best course of action for "
"the problem at hand."
msgstr ""
"そういうわけで、各記事は現実世界の問題から始まります。基本的な質問で各問題を"
"分類し、解決策を提案し、各オプションの長所と短所を分析し、問題に対する最善の"
"対策を強調します。"

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:20
msgid ""
"You should start by reading :ref:`doc_what_are_godot_classes`. It explains "
"how Godot's nodes and scenes relate to classes and objects in another Object-"
"Oriented programming language. It will help you make sense of the rest of "
"the series."
msgstr ""
"最初に :ref:`doc_what_are_godot_classes` を読むことから始めてください。 Godot"
"のノードとシーンが別のオブジェクト指向プログラミング言語のクラスとオブジェク"
"トにどのように関連するかを説明します。シリーズの残りの部分を理解するのに役立"
"ちます。"

#: ../../docs/getting_started/workflow/best_practices/introduction_best_practices.rst:26
msgid ""
"The best practices in Godot rely on Object-Oriented design principles. We "
"use tools like the `single responsibility <https://en.wikipedia.org/wiki/"
"Single_responsibility_principle>`_ principle and `encapsulation <https://en."
"wikipedia.org/wiki/Encapsulation_(computer_programming)>`_."
msgstr ""
"Godotのベストプラクティスは、オブジェクト指向設計の原則に依存しています。\\ `"
"単一責任の原則 <https://en.wikipedia.org/wiki/"
"Single_responsibility_principle>` や `カプセル化 <https://en.wikipedia.org/"
"wiki/Encapsulation_(computer_programming)>` のようなツールを使用します。"
