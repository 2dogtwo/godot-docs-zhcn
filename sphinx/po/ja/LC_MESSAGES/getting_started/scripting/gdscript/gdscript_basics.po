# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:4
msgid "GDScript basics"
msgstr "GDScriptの基本"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:7
msgid "Introduction"
msgstr "はじめに"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:9
msgid ""
"*GDScript* is a high-level, dynamically typed programming language used to "
"create content. It uses a syntax similar to `Python <https://en.wikipedia."
"org/wiki/Python_%28programming_language%29>`_ (blocks are indent-based and "
"many keywords are similar). Its goal is to be optimized for and tightly "
"integrated with Godot Engine, allowing great flexibility for content "
"creation and integration."
msgstr ""
"*GDScript*\\ は、コンテンツの作成用に使われる高水準の動的型付けプログラミング"
"言語です。\\ `Python <https://ja.wikipedia.org/wiki/Python>`_\\ に似た構文を"
"採用しています (ブロックはインデントベースで、キーワードの多くは似ています)。"
"その目的は、Godotエンジンと緊密に統合し最適化することで、コンテンツの作成と統"
"合に大きな柔軟性を与えることです。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:17
msgid "History"
msgstr "歴史"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:21
msgid ""
"Documentation about GDScript's history has been moved to the :ref:"
"`Frequently Asked Questions <doc_faq_what_is_gdscript>`."
msgstr ""
"GDScriptの歴史についてのドキュメントは\\ :ref:`よくある質問 "
"<doc_faq_what_is_gdscript>`\\ に移動しました。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:25
msgid "Example of GDScript"
msgstr "GDScriptの例"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:27
msgid ""
"Some people can learn better by taking a look at the syntax, so here's a "
"simple example of how GDScript looks."
msgstr ""
"構文を見ることでより良く学べる人もいるので、ここではGDScriptがどのように見え"
"るかの簡単な例を紹介します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:110
msgid ""
"If you have previous experience with statically typed languages such as C, C+"
"+, or C# but never used a dynamically typed one before, it is advised you "
"read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""
"C、C++、C#などの静的型付き言語の経験があるが、これまでに動的型付き言語を使用"
"したことがない場合は、以下のチュートリアルを読むことをお勧めします。\\ :ref:"
"`doc_gdscript_more_efficiently`。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:115
msgid "Language"
msgstr "言語"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:117
msgid ""
"In the following, an overview is given to GDScript. Details, such as which "
"methods are available to arrays or other objects, should be looked up in the "
"linked class descriptions."
msgstr ""
"GDScriptの概要を説明していきます。配列やその他のオブジェクトで使用できるメ"
"ソッドなどの詳細については、リンクされたクラスの説明を参照してください。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:122
msgid "Identifiers"
msgstr "識別子"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:124
msgid ""
"Any string that restricts itself to alphabetic characters (``a`` to ``z`` "
"and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an "
"identifier. Additionally, identifiers must not begin with a digit. "
"Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""
"アルファベット文字( ``a`` から ``z`` および ``A`` から ``Z`` )、数字( ``0`` "
"から ``9`` )、 ``_`` が識別子として修飾される文字列です。また、識別子は数字で"
"始まってはいけません。識別子では大文字と小文字が区別されます( ``foo`` が "
"``FOO`` と異なる)。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:130
msgid "Keywords"
msgstr "キーワード"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:132
msgid ""
"The following is the list of keywords supported by the language. Since "
"keywords are reserved words (tokens), they can't be used as identifiers. "
"Operators (like ``in``, ``not``, ``and`` or ``or``) and names of built-in "
"types as listed in the following sections are also reserved."
msgstr ""
"言語でサポートされているキーワードのリストを次に示します。キーワードは予約語"
"(トークン)であるため、識別子として使用することはできません。次のセクションに"
"示す演算子( ``in`` 、 ``not`` 、 ``and`` 、 ``or`` など)と組み込み型の名前も"
"予約されています。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:137
msgid ""
"Keywords are defined in the `GDScript tokenizer <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ in "
"case you want to take a look under the hood."
msgstr ""
"キーワードは `GDScriptのトークナイザー <https://github.com/godotengine/godot/"
"blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_\\ で定義されているの"
"で、内部を調べたい場合に便利です。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:141
msgid "Keyword"
msgstr "キーワード"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:141
msgid "Description"
msgstr "説明"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:143
msgid "if"
msgstr "\\ if"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:143
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:145
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:147
msgid "See `if/else/elif`_."
msgstr "`if/else/elif`_ を参照して下さい。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:145
msgid "elif"
msgstr "\\ elif"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:147
msgid "else"
msgstr "\\ else"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:149
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:848
msgid "for"
msgstr "\\ for"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:149
msgid "See for_."
msgstr "for_\\ を参照して下さい。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:151
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:837
msgid "while"
msgstr "\\ while"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:151
msgid "See while_."
msgstr "while_\\ を参照して下さい。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:153
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:883
msgid "match"
msgstr "\\ match"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:153
msgid "See match_."
msgstr "match_\\ を参照して下さい。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:155
msgid "break"
msgstr "\\ break"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:155
msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr "現在の\\ ``for``\\ または\\ ``while``\\ ループの実行を終了します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:157
msgid "continue"
msgstr "\\ continue"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:157
msgid ""
"Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr "``for`` または ``while`` ループの次の反復に直ちにスキップします。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:159
msgid "pass"
msgstr "\\ pass"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:159
msgid ""
"Used where a statement is required syntactically but execution of code is "
"undesired, e.g. in empty functions."
msgstr ""
"ステートメントが構文的には必要だが、コードの実行が望ましくない場合 (空の関数"
"など) に使用されます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:161
msgid "return"
msgstr "\\ return"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:161
msgid "Returns a value from a function."
msgstr "関数から値を返します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:163
msgid "class"
msgstr "\\ class"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:163
#, fuzzy
msgid "Defines an inner class."
msgstr "クラスを定義します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:165
#, fuzzy
msgid "class_name"
msgstr "\\ class"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:165
msgid "Defines a class name and optional icon for your script."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:167
msgid "extends"
msgstr "\\ extends"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:167
msgid "Defines what class to extend with the current class."
msgstr "現在のクラスで拡張するクラスを定義します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:169
msgid "is"
msgstr "\\ is"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:169
msgid ""
"Tests whether a variable extends a given class, or is of a given built-in "
"type."
msgstr ""
"変数が特定のクラスを拡張するのか、それとも特定の組み込み型のものかをテストし"
"ます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:171
msgid "as"
msgstr "\\ as"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:171
msgid "Cast the value to a given type if possible."
msgstr "可能であれば、指定した型に値をキャストします。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:173
msgid "self"
msgstr "\\ self"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:173
msgid "Refers to current class instance."
msgstr "現在のクラスインスタンスを参照します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:175
msgid "tool"
msgstr "\\ tool"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:175
msgid "Executes the script in the editor."
msgstr "エディタでスクリプトを実行します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:177
msgid "signal"
msgstr "\\ signal"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:177
msgid "Defines a signal."
msgstr "シグナルを定義します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:179
msgid "func"
msgstr "\\ func"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:179
msgid "Defines a function."
msgstr "関数を定義します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:181
msgid "static"
msgstr "\\ static"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:181
msgid "Defines a static function. Static member variables are not allowed."
msgstr "静的関数を定義します。静的メンバー変数は使用できません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:183
msgid "const"
msgstr "\\ const"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:183
msgid "Defines a constant."
msgstr "定数を定義します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:185
msgid "enum"
msgstr "\\ enum"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:185
msgid "Defines an enum."
msgstr "列挙型を定義します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:187
msgid "var"
msgstr "\\ var"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:187
msgid "Defines a variable."
msgstr "変数を定義します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:189
msgid "onready"
msgstr "\\ onready"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:189
msgid ""
"Initializes a variable once the Node the script is attached to and its "
"children are part of the scene tree."
msgstr ""
"スクリプトがアタッチされているノードとその子がシーンツリーの一部になると、変"
"数を初期化します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:191
msgid "export"
msgstr "\\ export"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:191
msgid ""
"Saves a variable along with the resource it's attached to and makes it "
"visible and modifiable in the editor."
msgstr ""
"変数をアタッチ先のリソースとともに保存し、エディタで表示および変更できるよう"
"にします。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:193
msgid "setget"
msgstr "\\ setget"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:193
msgid "Defines setter and getter functions for a variable."
msgstr "変数の設定および取得関数を定義します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:195
msgid "breakpoint"
msgstr "\\ breakpoint"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:195
msgid "Editor helper for debugger breakpoints."
msgstr "デバッガブレークポイント用のエディタヘルパー。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:197
msgid "preload"
msgstr "\\ preload"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:197
msgid "Preloads a class or variable. See `Classes as resources`_."
msgstr ""
"クラスまたは変数をプリロードします。`Classes as resources`_ を参照してくださ"
"い。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:199
msgid "yield"
msgstr "\\ yield"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:199
msgid "Coroutine support. See `Coroutines with yield`_."
msgstr "コルーチンサポート 。`Coroutines with yield`_ を参照してください。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:201
msgid "assert"
msgstr "\\ assert"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:201
msgid ""
"Asserts a condition, logs error on failure. Ignored in non-debug builds. See "
"`Assert keyword`_."
msgstr ""
"条件を表明し、失敗時にエラーをログに記録します。 デバッグ以外のビルドでは無視"
"されます。`Assert keyword`_ を参照してください。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:203
msgid "remote"
msgstr "\\ remote"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:203
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:205
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:207
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:209
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:211
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:213
msgid ""
"Networking RPC annotation. See :ref:`high-level multiplayer docs "
"<doc_high_level_multiplayer>`."
msgstr ""
"ネットワーキングRPCアノテーション。 \\ :ref:`high-level multiplayer docs "
"<doc_high_level_multiplayer>` を参照してください。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:205
msgid "master"
msgstr "\\ master"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:207
msgid "puppet"
msgstr "\\ puppet"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:209
msgid "remotesync"
msgstr "\\ remotesync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:211
msgid "mastersync"
msgstr "\\ mastersync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:213
msgid "puppetsync"
msgstr "\\ puppetsync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:215
msgid "PI"
msgstr "\\ PI"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:215
msgid "PI constant."
msgstr "PI定数。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:217
msgid "TAU"
msgstr "\\ TAU"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:217
msgid "TAU constant."
msgstr "TAU定数。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:219
msgid "INF"
msgstr "\\ INF"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:219
msgid "Infinity constant. Used for comparisons."
msgstr "Infinity定数。比較に使用されます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:221
msgid "NAN"
msgstr "\\ NAN"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:221
msgid "NAN (not a number) constant. Used for comparisons."
msgstr "NAN (not a number)定数。比較に使用されます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:225
msgid "Operators"
msgstr "演算子"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:227
msgid "The following is the list of supported operators and their precedence."
msgstr "サポートされている演算子とその優先順位を次に示します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:230
msgid "**Operator**"
msgstr "**演算子**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:230
msgid "**Description**"
msgstr "**説明**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:232
msgid "``x[index]``"
msgstr "``x[index]``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:232
msgid "Subscription (highest priority)"
msgstr "サブスクリプション(最優先)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:234
msgid "``x.attribute``"
msgstr "``x.attribute``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:234
msgid "Attribute reference"
msgstr "要素参照"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:236
msgid "``foo()``"
msgstr "\\ ``foo()``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:236
msgid "Function call"
msgstr "関数呼び出し"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:238
msgid "``is``"
msgstr "``is``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:238
msgid "Instance type checker"
msgstr "インスタンス型チェッカー"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:240
msgid "``~``"
msgstr "``~``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:240
msgid "Bitwise NOT"
msgstr "ビット単位のNOT"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:242
msgid "``-x``"
msgstr "``-x``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:242
msgid "Negative / Unary negation"
msgstr "負 / 単項否定"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:244
msgid "``*`` ``/`` ``%``"
msgstr "``*`` ``/`` ``%``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:244
msgid "Multiplication / Division / Remainder"
msgstr "乗算/除算/剰余"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:246
msgid ""
"These operators have the same behavior as C++. Integer division is truncated "
"rather than returning a fractional number, and the % operator is only "
"available for ints (\"fmod\" for floats)"
msgstr ""
"これらの演算子はC ++と同じ動作をします。整数の除算は小数を切り捨てられ、％演"
"算子は整数にのみ使用可能です(floatの場合は \"fmod\" )"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:252
msgid "``+``"
msgstr "``+``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:252
msgid "Addition / Concatenation of arrays"
msgstr "加算 / 配列の連結"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:254
msgid "``-``"
msgstr "``-``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:254
msgid "Subtraction"
msgstr "減算"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:256
msgid "``<<`` ``>>``"
msgstr "``<<`` ``>>``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:256
msgid "Bit shifting"
msgstr "ビットシフト"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:258
msgid "``&``"
msgstr "``&``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:258
msgid "Bitwise AND"
msgstr "ビットAND"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:260
msgid "``^``"
msgstr "``^``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:260
msgid "Bitwise XOR"
msgstr "ビットXOR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:262
msgid "``|``"
msgstr "``|``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:262
msgid "Bitwise OR"
msgstr "ビットOR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:264
msgid "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"
msgstr "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:264
msgid "Comparisons"
msgstr "比較"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:266
msgid "``in``"
msgstr "``in``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:266
msgid "Content test"
msgstr "中身検査"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:268
msgid "``!`` ``not``"
msgstr "``!`` ``not``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:268
msgid "Boolean NOT"
msgstr "ブール型 NOT"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:270
msgid "``and`` ``&&``"
msgstr "``and`` ``&&``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:270
msgid "Boolean AND"
msgstr "ブール型 AND"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:272
msgid "``or`` ``||``"
msgstr "``or`` ``||``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:272
msgid "Boolean OR"
msgstr "ブール型 OR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:274
msgid "``if x else``"
msgstr "``if x else``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:274
msgid "Ternary if/else"
msgstr "3項if/else"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:276
msgid "``as``"
msgstr "``as``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:276
#, fuzzy
msgid "Type casting"
msgstr "テストする"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:278
msgid "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=``"
msgstr "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:278
msgid "Assignment (lowest priority)"
msgstr "代入、優先度最低"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:282
msgid "Literals"
msgstr "リテラル"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:285
msgid "**Literal**"
msgstr "**リテラル**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:285
msgid "**Type**"
msgstr "**型**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:287
msgid "``45``"
msgstr "``45``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:287
msgid "Base 10 integer"
msgstr "10進整数"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:289
msgid "``0x8f51``"
msgstr "``0x8f51``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:289
msgid "Base 16 (hexadecimal) integer"
msgstr "16進整数"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:291
msgid "``0b101010``"
msgstr "``0b101010``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:291
msgid "Base 2 (binary) integer"
msgstr "2進整数"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:293
msgid "``3.14``, ``58.1e-10``"
msgstr "``3.14``, ``58.1e-10``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:293
msgid "Floating-point number (real)"
msgstr "浮動小数点数(実数)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:295
msgid "``\"Hello\"``, ``\"Hi\"``"
msgstr "``\"Hello\"``, ``\"Hi\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:295
msgid "Strings"
msgstr "文字列"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:297
msgid "``\"\"\"Hello\"\"\"``"
msgstr "``\"\"\"Hello\"\"\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:297
msgid "Multiline string"
msgstr "複数行文字列"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:299
msgid "``@\"Node/Label\"``"
msgstr "``@\"Node/Label\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:299
msgid ":ref:`class_NodePath` or StringName"
msgstr ":ref:`class_NodePath`\\ かStringName"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:301
msgid "``$NodePath``"
msgstr "``$NodePath``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:301
msgid "Shorthand for ``get_node(\"NodePath\")``"
msgstr "``get_node( \"NodePath\")`` の短縮形"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:304
msgid ""
"Integers and floats can have their numbers separated with ``_`` to make them "
"more readable. The following ways to write numbers are all valid::"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:313
msgid "Comments"
msgstr "コメント"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:315
msgid ""
"Anything from a ``#`` to the end of the line is ignored and is considered a "
"comment."
msgstr "``#`` から行末までは無視され、コメントと見なされます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:325
msgid "Built-in types"
msgstr "組み込み型"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:327
msgid ""
"Built-in types are stack-allocated. They are passed as values. This means a "
"copy is created on each assignment or when passing them as arguments to "
"functions. The only exceptions are ``Array``\\ s and ``Dictionaries``, which "
"are passed by reference so they are shared. (Pooled arrays such as "
"``PoolByteArray`` are still passed as values.)"
msgstr ""
"組み込み型はスタック割り当て型です。これらは値として渡されます。つまり、割り"
"当てごとに、または関数に引数として渡すときにコピーが作成されます。唯一の例外"
"は ``Array`` と ``Dictionary`` で、これらは参照によって渡され、共有されます。"
"( ``PoolArray``\\ s は ``PoolByteArray`` のように値として渡されるわけではあり"
"ませんが、どちらを使用するかを決定する際にはこの点を考慮してください。)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:334
msgid "Basic built-in types"
msgstr "組み込み型ベース"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:336
msgid "A variable in GDScript can be assigned to several built-in types."
msgstr "GDScriptの変数は、いくつかの組み込み型に割り当てることができます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:339
msgid "null"
msgstr "null"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:341
msgid ""
"``null`` is an empty data type that contains no information and can not be "
"assigned any other value."
msgstr ""
"``null`` は、情報を含まない空のデータ型であり、他の値を割り当てることはできま"
"せん。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:345
msgid ":ref:`bool <class_bool>`"
msgstr "\\ :ref:`bool <class_bool>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:347
msgid "Short for \"boolean\", it can only contain ``true`` or ``false``."
msgstr ""
"Booleanデータ型には、 ``true`` または ``false`` のみを含めることができます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:350
msgid ":ref:`int <class_int>`"
msgstr "\\ :ref:`int <class_int>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:352
msgid ""
"Short for \"integer\", it stores whole numbers (positive and negative). It "
"is stored as a 64-bit value, equivalent to \"int64_t\" in C++."
msgstr ""
"「integer」の略で、整数(正と負)を格納します。64ビット値で格納し、C++の"
"「int64_t」と同等です。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:356
msgid ":ref:`float <class_float>`"
msgstr "\\ :ref:`float <class_float>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:358
msgid ""
"Stores real numbers, including decimals, using floating-point values. It is "
"stored as a 64-bit value, equivalent to \"double\" in C++. Note: Currently, "
"data structures such as Vector2, Vector3, and PoolRealArray store 32-bit "
"single-precision \"float\" values."
msgstr ""
"浮動小数点値を使用して、小数を含む実数を格納します。 C++の \"double\" に相当"
"する64ビット値として保存されます。注: 現在、Vector2、Vector3、PoolRealArrayな"
"どのデータ構造には、32ビット単精度の\"float\"値が格納されています。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:364
msgid ":ref:`String <class_String>`"
msgstr "\\ :ref:`String <class_String>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:366
msgid ""
"A sequence of characters in `Unicode format <https://en.wikipedia.org/wiki/"
"Unicode>`_. Strings can contain the following escape sequences:"
msgstr ""
"`Unicode形式 <https://ja.wikipedia.org/wiki/Unicode>`_\\ の文字列。文字列には"
"下記のエスケープシーケンスも含めることができます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:370
#, fuzzy
msgid "**Escape sequence**"
msgstr "エスケープシーケンス"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:370
msgid "**Expands to**"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:372
msgid "``\\n``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:372
msgid "Newline (line feed)"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:374
msgid "``\\t``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:374
msgid "Horizontal tab character"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:376
msgid "``\\r``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:376
msgid "Carriage return"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:378
msgid "``\\a``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:378
msgid "Alert (beep/bell)"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:380
msgid "``\\b``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:380
msgid "Backspace"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:382
msgid "``\\f``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:382
msgid "Formfeed page break"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:384
msgid "``\\v``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:384
#, fuzzy
msgid "Vertical tab character"
msgstr "キネマティックキャラクター(2D)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:386
msgid "``\\\"``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:386
msgid "Double quote"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:388
msgid "``\\'``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:388
#, fuzzy
msgid "Single quote"
msgstr "シングルトン"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:390
msgid "``\\\\``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:390
msgid "Backslash"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:392
msgid "``\\uXXXX``"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:392
msgid "Unicode codepoint ``XXXX`` (hexadecimal, case-insensitive)"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:396
msgid "GDScript also supports :ref:`doc_gdscript_printf`."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:399
msgid "Vector built-in types"
msgstr "組み込み型ベクトル"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:402
msgid ":ref:`Vector2 <class_Vector2>`"
msgstr "\\ :ref:`Vector2 <class_Vector2>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:404
msgid ""
"2D vector type containing ``x`` and ``y`` fields. Can also be accessed as an "
"array."
msgstr ""
"``x`` と ``y`` を含む2Dベクトルタイプ。配列としてアクセスすることもできます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:408
msgid ":ref:`Rect2 <class_Rect2>`"
msgstr "\\ :ref:`Rect2 <class_Rect2>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:410
msgid ""
"2D Rectangle type containing two vectors fields: ``position`` and ``size``. "
"Also contains an ``end`` field which is ``position + size``."
msgstr ""
"``position`` と ``size`` の2つのベクトルフィールドを含む2D矩形タイプ。また"
"は、 ``position+size`` である ``end`` フィールドを含みます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:414
msgid ":ref:`Vector3 <class_Vector3>`"
msgstr "\\ :ref:`Vector3 <class_Vector3>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:416
msgid ""
"3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be "
"accessed as an array."
msgstr ""
"``x``、 ``y`` 、 ``z`` フィールドを含む3Dベクトルタイプ。配列としてアクセスす"
"ることもできます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:420
msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr "\\ :ref:`Transform2D <class_Transform2D>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:422
msgid "3×2 matrix used for 2D transforms."
msgstr "2次元の幾何学変換に使用される3x2行列です。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:425
msgid ":ref:`Plane <class_Plane>`"
msgstr "\\ :ref:`Plane <class_Plane>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:427
msgid ""
"3D Plane type in normalized form that contains a ``normal`` vector field and "
"a ``d`` scalar distance."
msgstr ""
"``normal`` ベクトルフィールドと ``d`` スカラー距離を含む正規化形式の3D平面型"
"です。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:431
msgid ":ref:`Quat <class_Quat>`"
msgstr "\\ :ref:`Quat <class_Quat>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:433
msgid ""
"Quaternion is a datatype used for representing a 3D rotation. It's useful "
"for interpolating rotations."
msgstr ""
"四元数は3D回転を表すために使用されるデータ型です。 回転を補間するのに便利で"
"す。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:437
msgid ":ref:`AABB <class_AABB>`"
msgstr "\\ :ref:`AABB <class_AABB>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:439
msgid ""
"Axis-aligned bounding box (or 3D box) contains 2 vectors fields: "
"``position`` and ``size``. Also contains an ``end`` field which is "
"``position + size``."
msgstr ""
"座標軸に平行な直方体(または3Dボックス)には、 ``position`` と ``size`` の2つの"
"ベクトルフィールドがあります。または、 ``position+size`` である ``end`` "
"フィールドを含みます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:444
msgid ":ref:`Basis <class_Basis>`"
msgstr "\\ :ref:`Basis <class_Basis>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:446
msgid ""
"3x3 matrix used for 3D rotation and scale. It contains 3 vector fields "
"(``x``, ``y`` and ``z``) and can also be accessed as an array of 3D vectors."
msgstr ""
"3Dの回転と拡大縮小に使用される3x3の行列。これには3つのベクトルフィールド"
"(``x``\\ 、\\ ``y``\\ 、\\ ``z``)が含まれ、3Dベクトルの配列としてアクセスする"
"こともできます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:451
msgid ":ref:`Transform <class_Transform>`"
msgstr "\\ :ref:`Transform <class_Transform>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:453
msgid ""
"3D Transform contains a Basis field ``basis`` and a Vector3 field ``origin``."
msgstr ""
"3DTransformには、基底(基準軸)フィールド ``basis`` とVector3フィールド "
"``origin`` が含まれています。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:457
msgid "Engine built-in types"
msgstr "エンジン組み込み型"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:460
msgid ":ref:`Color <class_Color>`"
msgstr "\\ :ref:`Color <class_Color>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:462
msgid ""
"Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can also "
"be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""
"カラーデータ型は、 ``r`` 、 ``g`` 、 ``b``,および ``a`` フィールドを含みま"
"す。色相/彩度/明度の ``h`` 、 ``s`` 、 ``v`` としてアクセスすることもできま"
"す。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:466
msgid ":ref:`NodePath <class_NodePath>`"
msgstr "\\ :ref:`NodePath <class_NodePath>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:468
msgid ""
"Compiled path to a node used mainly in the scene system. It can be easily "
"assigned to, and from, a String."
msgstr ""
"主にシーンシステムで使用されるノードへのコンパイル済みパス。 Stringとの間で簡"
"単に割り当てることができます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:472
msgid ":ref:`RID <class_RID>`"
msgstr "\\ :ref:`RID <class_RID>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:474
msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""
"リソースID(RID)。サーバーは汎用RIDを使用して不透明なデータを参照します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:477
msgid ":ref:`Object <class_Object>`"
msgstr "\\ :ref:`Object <class_Object>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:479
msgid "Base class for anything that is not a built-in type."
msgstr "組み込み型でないものすべての基本クラス。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:482
msgid "Container built-in types"
msgstr "組み込み型コンテナ"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:485
msgid ":ref:`Array <class_Array>`"
msgstr "\\ :ref:`配列<class_Array>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:487
msgid ""
"Generic sequence of arbitrary object types, including other arrays or "
"dictionaries (see below). The array can resize dynamically. Arrays are "
"indexed starting from index ``0``. Negative indices count from the end."
msgstr ""
"他の配列や辞書(下記参照)を含む、任意のオブジェクトタイプの一般的なシーケン"
"ス、他の配列や辞書を含みます。(下を見てください)。配列のサイズは動的に変更で"
"きます。配列にはインデックス ``0`` から始まるインデックスが付けられます。マイ"
"ナスのインデックスは最後から数えます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:501
msgid ""
"GDScript arrays are allocated linearly in memory for speed. Large arrays "
"(more than tens of thousands of elements) may however cause memory "
"fragmentation. If this is a concern, special types of arrays are available. "
"These only accept a single data type. They avoid memory fragmentation and "
"use less memory, but are atomic and tend to run slower than generic arrays. "
"They are therefore only recommended to use for large data sets:"
msgstr ""
"GDScriptの配列は速度を上げるためにメモリ内で線形に割り当てられます。大規模な"
"配列(数万要素以上)は、メモリの断片化を引き起こす可能性があります。 これが問題"
"になる場合は、特殊なタイプの配列が利用可能です。これらは単一のデータ型のみを"
"受け入れます。この配列はメモリの断片化を回避し、メモリの使用量も少なくなりま"
"すが原始的であり、一般的な配列より実行速度が遅くなりがちです。 したがって、そ"
"れらは大規模なデータセットにのみ使用することをお勧めします:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:508
msgid ""
":ref:`PoolByteArray <class_PoolByteArray>`: An array of bytes (integers from "
"0 to 255)."
msgstr ""
"\\ :ref:`PoolByteArray <class_PoolByteArray>`: バイト型の配列(0～255の整数)。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:509
msgid ":ref:`PoolIntArray <class_PoolIntArray>`: An array of integers."
msgstr "\\ :ref:`PoolIntArray <class_PoolIntArray>`: 整数型の配列。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:510
msgid ":ref:`PoolRealArray <class_PoolRealArray>`: An array of floats."
msgstr "\\ :ref:`PoolRealArray <class_PoolRealArray>`: 浮動小数点型の配列。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:511
msgid ":ref:`PoolStringArray <class_PoolStringArray>`: An array of strings."
msgstr "\\ :ref:`PoolStringArray <class_PoolStringArray>`: 文字列型の配列。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:512
msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: An array of :ref:`Vector2 "
"<class_Vector2>` objects."
msgstr ""
"\\ :ref:`PoolVector2Array <class_PoolVector2Array>`: \\ :ref:`Vector2 "
"<class_Vector2>` の配列。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:513
msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: An array of :ref:`Vector3 "
"<class_Vector3>` objects."
msgstr ""
"\\ :ref:`PoolVector3Array <class_PoolVector3Array>`: \\ :ref:`Vector3 "
"<class_Vector3>` の配列。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:514
msgid ""
":ref:`PoolColorArray <class_PoolColorArray>`: An array of :ref:`Color "
"<class_Color>` objects."
msgstr ""
"\\ :ref:`PoolColorArray <class_PoolColorArray>`: \\ :ref:`Color "
"<class_Color>` の配列。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:517
msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr "\\ :ref:`Dictionary <class_Dictionary>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:519
msgid "Associative container which contains values referenced by unique keys."
msgstr "一意のキーによって参照される値を含む連想コンテナです。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:532
#, fuzzy
msgid ""
"Lua-style table syntax is also supported. Lua-style uses ``=`` instead of ``:"
"`` and doesn't use quotes to mark string keys (making for slightly less to "
"write). However, keys written in this form can't start with a digit (like "
"any GDScript identifier)."
msgstr ""
"Luaスタイルのテーブル構文もサポートされています。 Luaスタイルでは、 ``:`` の"
"代わりに ``=`` を使用し、文字列のキーをマークするために引用符を使用しません"
"(記述するのがやや少なくなります)。ただし、他のGDScript識別子と同様に、この形"
"式で書かれたキーは数字で始めることはできません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:546
msgid ""
"To add a key to an existing dictionary, access it like an existing key and "
"assign to it::"
msgstr ""
"既存の辞書にキーを追加するには、既存のキーのようにアクセスして割り当てます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:562
msgid ""
"The bracket syntax can be used to access properties of any :ref:"
"`class_Object`, not just Dictionaries. Keep in mind it will cause a script "
"error when attempting to index a non-existing property. To avoid this, use "
"the :ref:`Object.get() <class_Object_method_get>` and :ref:`Object.set() "
"<class_Object_method_set>` methods instead."
msgstr ""
"ブラケット構文は、辞書だけでなく、任意の :ref:`class_Object` のプロパティにア"
"クセスするために使用することができます。存在しないプロパティを添え字にする"
"と、スクリプトエラーが発生するので注意してください。これを避けるには、代わり"
"に :ref:`Object.get() <class_Object_method_get>` や :ref:`Object.set() "
"<class_Object_method_set>` メソッドを使用します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:569
msgid "Data"
msgstr "データ"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:572
msgid "Variables"
msgstr "変数"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:574
msgid ""
"Variables can exist as class members or local to functions. They are created "
"with the ``var`` keyword and may, optionally, be assigned a value upon "
"initialization."
msgstr ""
"変数はクラスメンバーとして存在することも、関数に対してローカルに存在すること"
"もできます。これらは ``var`` キーワードを使用して作成され、必要に応じて初期化"
"時に値が割り当てられます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:585
msgid ""
"Variables can optionally have a type specification. When a type is "
"specified, the variable will be forced to have always that same type, and "
"trying to assign an incompatible value will raise an error."
msgstr ""
"変数にはオプションで型指定を指定できます。型を指定すると、変数は常に同じ型を"
"持つように強制され、互換性のない値を割り当てようとするとエラーが発生します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:589
msgid ""
"Types are specified in the variable declaration using a ``:`` (colon) symbol "
"after the variable name, followed by the type."
msgstr ""
"型は、変数名の後に ``:`` (コロン)記号を使用して変数宣言内で指定され、その後に"
"型が続きます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:597
msgid ""
"If the variable is initialized within the declaration, the type can be "
"inferred, so it's possible to omit the type name::"
msgstr ""
"変数が宣言内で初期化されている場合、型を推定できるため、型名を省略できます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:603
msgid ""
"Type inference is only possible if the assigned value has a defined type, "
"otherwise it will raise an error."
msgstr ""
"型推論が可能なのは、割り当てられた値に型が定義されている場合だけです。定義さ"
"れていない場合は、エラーが発生します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:606
msgid "Valid types are:"
msgstr "有効なタイプは以下のとおりです:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:608
msgid "Built-in types (Array, Vector2, int, String, etc.)."
msgstr "組み込み型(Array、Vector2、int、Stringなど)。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:609
msgid "Engine classes (Node, Resource, Reference, etc.)."
msgstr "エンジンクラス(Node、Resource、Referenceなど)。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:610
msgid ""
"Constant names if they contain a script resource (``MyScript`` if you "
"declared ``const MyScript = preload(\"res://my_script.gd\")``)."
msgstr ""
"スクリプトリソースを含む場合は定数名( ``const MyScript = preload(\"res://"
"my_script.gd\")`` を宣言した場合は ``MyScript`` )。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:611
msgid ""
"Other classes in the same script, respecting scope (``InnerClass."
"NestedClass`` if you declared ``class NestedClass`` inside the ``class "
"InnerClass`` in the same scope)."
msgstr ""
"同じスクリプト内の他のクラス、スコープを尊重します(``InnerClass."
"NestedClass`` もし ``class InnerClass`` 内で ``class NestedClass`` を宣言した"
"場合は は同じスコープです)。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:612
msgid "Script classes declared with the ``class_name`` keyword."
msgstr "``class_name`` キーワードで宣言されたスクリプトクラス。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:615
msgid "Casting"
msgstr "キャスト"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:617
msgid ""
"Values assigned to typed variables must have a compatible type. If it's "
"needed to coerce a value to be of a certain type, in particular for object "
"types, you can use the casting operator ``as``."
msgstr ""
"型付き変数に割り当てられた値は、互換性のある型を持つ必要があります。特定の"
"型、特にオブジェクト型に対して値を強制する必要がある場合は、キャスト演算子を "
"``as`` として使用できます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:621
msgid ""
"Casting between object types results in the same object if the value is of "
"the same type or a subtype of the cast type."
msgstr ""
"値が同じ型またはキャスト型のサブタイプの場合、オブジェクト型間でキャストする"
"と同じオブジェクトになります。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:629
msgid ""
"If the value is not a subtype, the casting operation will result in a "
"``null`` value."
msgstr "値がサブタイプではない場合、キャスト操作は ``null`` 値になります。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:636
msgid ""
"For built-in types, they will be forcibly converted if possible, otherwise "
"the engine will raise an error."
msgstr ""
"組み込み型の場合、可能であれば強制的に変換されますが、それ以外の場合はエラー"
"が発生します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:645
msgid ""
"Casting is also useful to have better type-safe variables when interacting "
"with the scene tree::"
msgstr ""
"また、キャストは、シーンツリーと対話するときに、より安全な型保証変数を用意す"
"るのにも役立ちます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:655
msgid "Constants"
msgstr "定数"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:657
msgid ""
"Constants are values you cannot change when the game is running. Their value "
"must be known at compile-time. Using the ``const`` keyword allows you to "
"give a constant value a name. Trying to assign a value to a constant after "
"it's declared will give you an error."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:662
msgid "We recommend using constants whenever a value is not meant to change."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:675
msgid ""
"Although the type of constants is inferred from the assigned value, it's "
"also possible to add explicit type specification::"
msgstr ""
"定数の型は割り当てられた値から推測されますが、明示的な型指定を追加することも"
"可能です:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:681
msgid "Assigning a value of an incompatible type will raise an error."
msgstr "互換性のないタイプの値を割り当てると、エラーが発生します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:685
msgid ""
"Since arrays and dictionaries are passed by reference, constants are \"flat"
"\". This means that if you declare a constant array or dictionary, it can "
"still be modified afterwards. They can't be reassigned with another value "
"though."
msgstr ""
"配列や辞書は参照で渡されるので、定数は「フラット」です。これは、もし定数の配"
"列や辞書を宣言したとしても、後から修正することができることを意味します。ただ"
"し、別の値で再代入することはできません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:690
msgid "Enums"
msgstr "列挙型"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:692
msgid ""
"Enums are basically a shorthand for constants, and are pretty useful if you "
"want to assign consecutive integers to some constant."
msgstr ""
"列挙型は基本的に定数の省略形であり、連続した整数をある定数に割り当てたい場合"
"には非常に便利です。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:695
msgid ""
"If you pass a name to the enum, it will put all the keys inside a constant "
"dictionary of that name."
msgstr ""
"列挙型に名前を渡すと、その名前の定数辞書内にすべてのキーが配置されます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:698
msgid ""
"In Godot 3.1 and later, keys in a named enum are not registered as global "
"constants. They should be accessed prefixed by the enum's name (``Name."
"KEY``); see an example below."
msgstr ""
"Godot 3.1以降は、名前の付いた列挙型のキーはグローバル定数としては登録されませ"
"ん。アクセスするには列挙型の名前を前につける必要があります(``Name.KEY``)。下"
"記の例を見てください。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:718
msgid "Functions"
msgstr "関数"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:720
msgid ""
"Functions always belong to a `class <Classes_>`_. The scope priority for "
"variable look-up is: local → class member → global. The ``self`` variable is "
"always available and is provided as an option for accessing class members, "
"but is not always required (and should *not* be sent as the function's first "
"argument, unlike Python)."
msgstr ""
"関数は常に `class <Classes_>`_\\ に属します。 変数検索のスコープ優先順位は、"
"ローカル→クラスメンバー→グローバルです。 ``self`` 変数は常に利用可能でクラス"
"メンバにアクセスするためのオプションとして提供されていますが、必ずしも必要で"
"はありません(Pythonとは異なり、関数の最初の引数として送信しないでください)。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:733
msgid ""
"A function can ``return`` at any point. The default return value is ``null``."
msgstr ""
"関数は任意の時点で ``return`` することができます。デフォルトの戻り値は"
"``null`` です。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:735
msgid ""
"Functions can also have type specification for the arguments and for the "
"return value. Types for arguments can be added in a similar way to "
"variables::"
msgstr ""
"関数には、引数と戻り値の型を指定することもできます。引数の型は次のように変数"
"に追加できます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:741
msgid ""
"If a function argument has a default value, it's possible to infer the type::"
msgstr "関数の引数にデフォルト値がある場合は、次のように型を推測できます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:746
msgid ""
"The return type of the function can be specified after the arguments list "
"using the arrow token (``->``)::"
msgstr ""
"関数の戻り型は、引数リストの後に矢印トークン( ``->`` )を使用して指定できます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:752
msgid ""
"Functions that have a return type **must** return a proper value. Setting "
"the type as ``void`` means the function doesn't return anything. Void "
"functions can return early with the ``return`` keyword, but they can't "
"return any value."
msgstr ""
"戻り型を持つ関数は、適切な値を返す\\ **必要があります**\\ 。型を ``void`` に"
"設定すると、関数は何も返しません。Void関数は ``return`` キーワードを使用して"
"早期に戻ることができますが、値を返すことはできません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:761
msgid ""
"Non-void functions must **always** return a value, so if your code has "
"branching statements (such as an ``if``/``else`` construct), all the "
"possible paths must have a return. E.g., if you have a ``return`` inside an "
"``if`` block but not after it, the editor will raise an error because if the "
"block is not executed, the function won't have a valid value to return."
msgstr ""
"void関数でない場合は\\ **常に**\\ 値を返す必要があるため、コードに分岐文"
"( ``if``/``else`` 構造など)がある場合は、考えられるすべてのパスに戻り値が必要"
"です。たとえば、 ``if`` ブロックの内側に戻り値があってもその後に戻り値がない"
"場合、エディタはエラーを発生させます。 ``if`` 内のブロックが実行されない場"
"合、関数には有効な戻り値がないからです。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:769
msgid "Referencing functions"
msgstr "関数の参照"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:771
msgid ""
"Contrary to Python, functions are *not* first-class objects in GDScript. "
"This means they cannot be stored in variables, passed as an argument to "
"another function or be returned from other functions. This is for "
"performance reasons."
msgstr ""
"Pythonとは反対に、関数はGDScriptの最上位クラスのオブジェクトではありません。"
"つまり、変数に格納したり、引数として別の関数に渡したり、他の関数から返すこと"
"はできません。 これはパフォーマンス上の理由からです。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:775
msgid ""
"To reference a function by name at run-time, (e.g. to store it in a "
"variable, or pass it to another function as an argument) one must use the "
"``call`` or ``funcref`` helpers::"
msgstr ""
"実行時に名前で関数を参照するには(たとえば、変数に格納したり、引数として別の関"
"数に渡したりするには)、 ``call`` または ``funcref`` ヘルパーを使用する必要が"
"あります::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:789
msgid "Static functions"
msgstr "静的関数"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:791
msgid ""
"A function can be declared static. When a function is static, it has no "
"access to the instance member variables or ``self``. This is mainly useful "
"to make libraries of helper functions::"
msgstr ""
"関数は静的として宣言できます。静的関数は、インスタンス・メンバー変数または "
"``self`` にアクセスできません。これは主に、ヘルパー関数のライブラリを作成する"
"のに便利です::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:800
msgid "Statements and control flow"
msgstr "ステートメントと制御フロー"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:802
msgid ""
"Statements are standard and can be assignments, function calls, control flow "
"structures, etc (see below). ``;`` as a statement separator is entirely "
"optional."
msgstr ""
"文は標準的なもので、代入、関数呼び出し、制御フロー構造などです(下記参照)。 "
"``;`` は文の区切り文字としては完全にオプションです。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:807
msgid "if/else/elif"
msgstr "if/else/elif"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:809
msgid ""
"Simple conditions are created by using the ``if``/``else``/``elif`` syntax. "
"Parenthesis around conditions are allowed, but not required. Given the "
"nature of the tab-based indentation, ``elif`` can be used instead of "
"``else``/``if`` to maintain a level of indentation."
msgstr ""
"単純な条件は、 ``if``/``else``/``elif`` 構文を使用して作成します。条件をかっ"
"こで囲むことはできますが、必須ではありません。タブベースのインデントの性質か"
"ら、インデントのレベルを維持するために ``elif`` を ``else``/``if`` の代わりに"
"使用できます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:823
msgid "Short statements can be written on the same line as the condition::"
msgstr "短いステートメントは、条件と同じ行に記述できます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:830
msgid ""
"Sometimes, you might want to assign a different initial value based on a "
"boolean expression. In this case, ternary-if expressions come in handy::"
msgstr ""
"場合によっては、ブール式に基づいて異なる初期値を割り当てたいことがあります。 "
"この場合、3項式が便利です::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:839
msgid ""
"Simple loops are created by using ``while`` syntax. Loops can be broken "
"using ``break`` or continued using ``continue``:"
msgstr ""
"単純なループは ``while`` 構文を使用して作成されます。ループは ``break`` を"
"使って中断することも、 ``continue`` を使って続けることもできます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:850
#, fuzzy
msgid ""
"To iterate through a range, such as an array or table, a *for* loop is used. "
"When iterating over an array, the current array element is stored in the "
"loop variable. When iterating over a dictionary, the *key* is stored in the "
"loop variable."
msgstr ""
"配列やテーブルなどの範囲を反復するには、 *for* ループが使用されます。配列を反"
"復処理する時には、現在の配列要素がループ変数に格納されます。 辞書を反復処理す"
"るとき、 *index* はループ変数に格納されます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:885
msgid ""
"A ``match`` statement is used to branch execution of a program. It's the "
"equivalent of the ``switch`` statement found in many other languages, but "
"offers some additional features."
msgstr ""
"``match`` 文はプログラムの実行を分岐するために使用されます。他の多くの言語で"
"見られる ``switch`` 文と同等ですが、いくつかの追加機能を提供します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:888
msgid "Basic syntax::"
msgstr "基本の構文::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:899
msgid "**Crash-course for people who are familiar with switch statements**:"
msgstr ""
"**switchステートメントに精通しているユーザー向けのクラッシュ・コース**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:901
msgid "Replace ``switch`` with ``match``."
msgstr "``match`` する ``switch`` を置換します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:902
msgid "Remove ``case``."
msgstr "``case`` を削除します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:903
msgid ""
"Remove any ``break``\\ s. If you don't want to ``break`` by default, you can "
"use ``continue`` for a fallthrough."
msgstr ""
"``break`` を除去します。デフォルトで ``break`` しない場合は、 ``continue`` を"
"使用してフォールスルーを行うことができます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:904
msgid "Change ``default`` to a single underscore."
msgstr "``default`` をアンダースコア1つに変更します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:907
msgid "**Control flow**:"
msgstr "**制御フロー**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:909
#, fuzzy
msgid ""
"The patterns are matched from top to bottom. If a pattern matches, the first "
"corresponding block will be executed. After that, the execution continues "
"below the ``match`` statement. You can use ``continue`` to stop execution in "
"the current block and check for an additional match in the patterns below it."
msgstr ""
"パターンは上から下に一致します。パターンが一致すると、対応するブロックが実行"
"されます。その後、実行は ``match`` 文の下で続行されます。フォールスルーしたい"
"場合は、 ``continue`` を使用して現在のブロックで実行を停止し、その下のブロッ"
"クを確認します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:913
msgid "There are 6 pattern types:"
msgstr "6種類のパターンがあります:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:925
msgid "Constant pattern"
msgstr "定数パターン"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:916
msgid "Constant primitives, like numbers and strings::"
msgstr "数値や文字列のような定数プリミティブ:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:937
msgid "Variable pattern"
msgstr "変数パターン"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:928
msgid "Matches the contents of a variable/enum::"
msgstr "変数/列挙型の内容と一致:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:951
msgid "Wildcard pattern"
msgstr "ワイルドカードパターン"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:940
msgid "This pattern matches everything. It's written as a single underscore."
msgstr ""
"このパターンはすべてにマッチします。 単一のアンダースコアとして書かれていま"
"す。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:942
msgid ""
"It can be used as the equivalent of the ``default`` in a ``switch`` "
"statement in other languages::"
msgstr ""
"他の言語における ``switch`` ステートメントでの ``default`` と同等のものとして"
"使用できます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:964
msgid "Binding pattern"
msgstr "バインディングパターン"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:954
msgid ""
"A binding pattern introduces a new variable. Like the wildcard pattern, it "
"matches everything - and also gives that value a name. It's especially "
"useful in array and dictionary patterns::"
msgstr ""
"バインディング・パターンは新しい変数を導入します。ワイルドカード・パターンと"
"同様に、すべてに一致し、その値に名前を付けます。配列や辞書のパターンで特に便"
"利です:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:985
msgid "Array pattern"
msgstr "配列パターン"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:967
msgid ""
"Matches an array. Every single element of the array pattern is a pattern "
"itself, so you can nest them."
msgstr ""
"配列と一致します。 配列パターンの各要素はパターンそのものなので、それらをネス"
"トすることができます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:969
msgid ""
"The length of the array is tested first, it has to be the same size as the "
"pattern, otherwise the pattern doesn't match."
msgstr ""
"配列の長さが最初にテストされ、それはパターンと同じサイズでなければなりませ"
"ん、そうでなければパターンは一致しません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:971
msgid ""
"**Open-ended array**: An array can be bigger than the pattern by making the "
"last subpattern ``..``."
msgstr ""
"**オープンエンド配列**: 最後のサブパターンを `` ..`` にすることで配列をパター"
"ンよりも大きくすることができます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:973
msgid "Every subpattern has to be comma-separated."
msgstr "各サブパターンはカンマで区切る必要があります。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1012
msgid "Dictionary pattern"
msgstr "辞書パターン"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:988
msgid ""
"Works in the same way as the array pattern. Every key has to be a constant "
"pattern."
msgstr ""
"配列パターンと同じように機能します。 すべてのキーは定数パターンでなければなり"
"ません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:990
msgid ""
"The size of the dictionary is tested first, it has to be the same size as "
"the pattern, otherwise the pattern doesn't match."
msgstr ""
"辞書のサイズが最初にテストされ、それはパターンと同じサイズでなければなりませ"
"ん、そうでなければパターンは一致しません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:992
msgid ""
"**Open-ended dictionary**: A dictionary can be bigger than the pattern by "
"making the last subpattern ``..``."
msgstr ""
"**オープンエンド辞書**: 最後のサブパターンを `` ..`` にすることで辞書をパター"
"ンよりも大きくすることができます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:994
msgid "Every subpattern has to be comma separated."
msgstr "各サブパターンはカンマで区切る必要があります。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:996
msgid ""
"If you don't specify a value, then only the existence of the key is checked."
msgstr "値を指定しないと、キーの存在のみがチェックされます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:998
msgid "A value pattern is separated from the key pattern with a ``:``."
msgstr "値パターンは、キーパターンとは ``:`` で区別されます:。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1025
msgid "Multiple patterns"
msgstr "組み合わせパターン"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1015
msgid ""
"You can also specify multiple patterns separated by a comma. These patterns "
"aren't allowed to have any bindings in them."
msgstr ""
"複数のパターンをカンマで区切って指定することもできます。 これらのパターンに"
"は、バインディングを含めることはできません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1028
msgid "Classes"
msgstr "クラス"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1030
msgid ""
"By default, all script files are unnamed classes. In this case, you can only "
"reference them using the file's path, using either a relative or an absolute "
"path. For example, if you name a script file ``character.gd``::"
msgstr ""
"デフォルトでは、すべてのスクリプトファイルは名前のないクラスです。この場合、"
"相対パスまたは絶対パスを使用して、ファイルのパスを使用してのみそれらを参照で"
"きます。 たとえば、スクリプトファイルに ``character.gd`` という名前を付けたと"
"します::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1043
msgid ""
"Instead, you can give your class a name to register it as a new type in "
"Godot's editor. For that, you use the ``class_name`` keyword. You can add an "
"optional comma followed by a path to an image, to use it as an icon. Your "
"class will then appear with its new icon in the editor::"
msgstr ""
"代わりに、Godotのエディタで新しいタイプとして登録するためにクラスに名前を付け"
"ることができます。それには、 'class_name' キーワードを使用します。 アイコンと"
"して使用するために、オプションのコンマに続けて画像へのパスを追加できます。あ"
"なたのクラスはエディタに新しいアイコンで表示されます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1057
msgid ""
"If the script is located in the ``res://addons/`` directory, ``class_name`` "
"will only cause the node to show up in the **Create New Node** dialog if the "
"script is part of an *enabled* editor plugin. See :ref:`doc_making_plugins` "
"for more information."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1062
msgid "Here's a class file example:"
msgstr "クラスファイルの例を次に示します:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1084
msgid ""
"Godot's class syntax is compact: it can only contain member variables or "
"functions. You can use static functions, but not static member variables. In "
"the same way, the engine initializes variables every time you create an "
"instance, and this includes arrays and dictionaries. This is in the spirit "
"of thread safety, since scripts can be initialized in separate threads "
"without the user knowing."
msgstr ""
"Godotのクラス構文はコンパクトで、メンバー変数または関数のみを含むことができま"
"す。静的関数は使用できますが、静的メンバー変数は使用できません。同様に、イン"
"スタンスを作成するたびに変数が初期化されますが、これには配列とディクショナリ"
"が含まれます。スクリプトはユーザーが知らなくても別のスレッドで初期化できるた"
"め、これはスレッド・セーフの精神に基づいています。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1092
msgid "Inheritance"
msgstr "継承"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1094
msgid "A class (stored as a file) can inherit from:"
msgstr "クラス(ファイルとして格納されている)は以下から継承することができます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1096
msgid "A global class."
msgstr "グローバルクラス。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1097
msgid "Another class file."
msgstr "他のクラスファイル。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1098
msgid "An inner class inside another class file."
msgstr "別のクラスファイル内の内部クラス。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1100
msgid "Multiple inheritance is not allowed."
msgstr "多重継承はできません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1102
msgid "Inheritance uses the ``extends`` keyword::"
msgstr "継承は ``extends`` キーワードを使用します::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1114
msgid ""
"To check if a given instance inherits from a given class, the ``is`` keyword "
"can be used::"
msgstr ""
"特定のインスタンスが特定のクラスを継承するかどうかを確認するには、 ``is`` "
"キーワードを使用します::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1126
msgid ""
"To call a function in a *parent class* (i.e. one ``extend``-ed in your "
"current class), prepend ``.`` to the function name::"
msgstr ""
"基本クラス(つまり、現在のクラスで拡張されたクラス)で関数を呼び出すには、 関数"
"名の前に ``.`` を付けます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1131
msgid ""
"This is especially useful because functions in extending classes replace "
"functions with the same name in their parent classes. If you still want to "
"call them, you can prefix them with ``.`` (like the ``super`` keyword in "
"other languages)::"
msgstr ""
"これはクラスを拡張する関数を親クラス内の同じ名前の関数を置き換えるために特に"
"便利です。 それらを呼び出したいのであれば、 前に``.`` を付けて下さい(他の言語"
"の ``super`` キーワードのように)::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1139
msgid ""
"Default functions like  ``_init``, and most notifications such as "
"``_enter_tree``, ``_exit_tree``, ``_process``, ``_physics_process``, etc. "
"are called in all parent classes automatically. There is no need to call "
"them explicitly when overloading them."
msgstr ""
"``_init`` などのデフォルト関数と、 ``_enter_tree`` 、 ``_exit_tree`` 、 "
"``_process`` 、 ``_physics_process`` などのほとんどの通知は、すべての親クラス"
"で自動的に呼び出されます。それらの関数をオーバーロードしたときに明示的に呼び"
"出す必要はありません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1146
msgid "Class Constructor"
msgstr "クラスコンストラクタ"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1148
msgid ""
"The class constructor, called on class instantiation, is named ``_init``. As "
"mentioned earlier, the constructors of parent classes are called "
"automatically when inheriting a class. So, there is usually no need to call "
"``._init()`` explicitly."
msgstr ""
"クラスのインスタンス化時に呼び出されるクラスコンストラクタの名前は ``_init`` "
"です。前述のように、親クラスのコンストラクタはクラスを継承するときに自動的に"
"呼び出されます。従って、通常は ``._init()`` を明示的に呼び出す必要はありませ"
"ん。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1153
msgid ""
"Unlike the call of a regular function, like in the above example with ``."
"some_func``, if the constructor from the inherited class takes arguments, "
"they are passed like this::"
msgstr ""
"``.some_func`` を使用した上記の例のように、通常の関数の呼び出しとは異なり、継"
"承したクラスのコンストラクタが引数を取得する場合、それらは次のように渡されま"
"す::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1160
msgid "This is better explained through examples. Consider this scenario::"
msgstr ""
"これは、例を使って説明した方がわかりやすいです。次のようなシナリオがあるとし"
"ます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1183
msgid "There are a few things to keep in mind here:"
msgstr "留意すべきことがいくつかあります:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1185
msgid ""
"If the inherited class (``State.gd``) defines a ``_init`` constructor that "
"takes arguments (``e`` in this case), then the inheriting class (``Idle."
"gd``) *must* define ``_init`` as well and pass appropriate parameters to "
"``_init`` from ``State.gd``."
msgstr ""
"継承クラス(``State.gd``)が ``_init`` コンストラクタを定義し、それが引数を取る"
"場合(このケースは ``e`` )、``State.gd`` の継承クラス(``Idle.gd``)も``_init``"
"を定義し、 ``State.gd`` から ``_init`` に適切なパラメータを渡す *必要* があり"
"ます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1188
msgid ""
"``Idle.gd`` can have a different number of arguments than the parent class "
"``State.gd``."
msgstr ""
"``Idle.gd`` は、親クラス ``State.gd`` と異なる数の引数を持つことができます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1189
msgid ""
"In the example above, ``e`` passed to the ``State.gd`` constructor is the "
"same ``e`` passed in to ``Idle.gd``."
msgstr ""
"上の例では、 ``State.gd`` コンストラクタに渡される ``e`` は、 ``Idle.gd`` に"
"渡されるのと同じ ``e`` です。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1191
msgid ""
"If ``Idle.gd``'s ``_init`` constructor takes 0 arguments, it still needs to "
"pass some value to the ``State.gd`` parent class, even if it does nothing. "
"This brings us to the fact that you can pass literals in the base "
"constructor as well, not just variables. eg.::"
msgstr ""
"``Idle.gd`` の ``_init`` コンストラクタが0の引数を取る場合、何もしなくても "
"``State.gd`` 親クラスに値を渡す必要があります。つまり変数だけでなく、基本コン"
"ストラクターにもリテラルを渡すことができます。 例::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1201
msgid "Inner classes"
msgstr "内部クラス"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1203
msgid ""
"A class file can contain inner classes. Inner classes are defined using the "
"``class`` keyword. They are instanced using the ``ClassName.new()`` function."
msgstr ""
"クラスファイルには内部クラスを含めることができます。内部クラスは、 ``class`` "
"キーワードを使用して定義されます。 ``ClassName.new()`` 関数を使用してインスタ"
"ンス化されます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1228
msgid "Classes as resources"
msgstr "リソースとしてのクラス"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1230
msgid ""
"Classes stored as files are treated as :ref:`resources <class_GDScript>`. "
"They must be loaded from disk to access them in other classes. This is done "
"using either the ``load`` or ``preload`` functions (see below). Instancing "
"of a loaded class resource is done by calling the ``new`` function on the "
"class object::"
msgstr ""
"ファイルとして保存されたクラスは \\ :ref:`resources <class_GDScript>` として"
"扱われます。他のクラスでそれらにアクセスするには、それらをディスクからロード"
"する必要があります。 これは、 ``load`` または ``preload`` 関数を使用して行わ"
"れます(下記参照)。ロードされたクラスリソースのインスタンス化は、クラスオブ"
"ジェクトの新しい関数を呼び出すことによって行われます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1247
msgid "Exports"
msgstr "エクスポート"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1251
msgid ""
"Documentation about exports has been moved to :ref:`doc_gdscript_exports`."
msgstr ""
"エキスポートについてのドキュメントは :ref:`doc_gdscript_exports`に移動しまし"
"た。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1254
msgid "Setters/getters"
msgstr "\\ Setters/getters"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1256
msgid ""
"It is often useful to know when a class' member variable changes for "
"whatever reason. It may also be desired to encapsulate its access in some "
"way."
msgstr ""
"クラスのメンバー変数がどのような理由で変更されたかを把握しておくと便利です。"
"また、何らかの方法でそのアクセスをカプセル化することが望ましい場合もあるかも"
"しれません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1259
msgid ""
"For this, GDScript provides a *setter/getter* syntax using the ``setget`` "
"keyword. It is used directly after a variable definition:"
msgstr ""
"このため、GDScriptには ``setget`` キーワードを使用した *setter/getter* 構文が"
"用意されています。変数定義の直後に使用されます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1266
msgid ""
"Whenever the value of ``variable`` is modified by an *external* source (i.e. "
"not from local usage in the class), the *setter* function (``setterfunc`` "
"above) will be called. This happens *before* the value is changed. The "
"*setter* must decide what to do with the new value. Vice versa, when "
"``variable`` is accessed, the *getter* function (``getterfunc`` above) must "
"``return`` the desired value. Below is an example::"
msgstr ""
"``variable`` の値が*外部*ソースによって変更されると(つまり、クラス内のローカ"
"ルでの使用によるものではありません)、必ず*setter*関数(上記の ``setterfunc`` )"
"が呼び出されます。これは、値が変更される*前*に発生します。*setter*は、新しい"
"値の処理方法を決定する必要があります。逆に、 ``variable`` がアクセスされる"
"と、*getter*関数(上記の ``getterfunc`` )は目的の値を ``return`` する必要があ"
"ります。次に例を示します::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1282
msgid "Either of the *setter* or *getter* functions can be omitted::"
msgstr "*setter* または *getter* 関数のどちらかを省略することができます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1289
msgid ""
"Setters and getters are useful when :ref:`exporting variables "
"<doc_gdscript_exports>` to the editor in tool scripts or plugins, for "
"validating input."
msgstr ""
"Settersとgetters は、ツールスクリプトまたはプラグインのエディタへ、検証中の入"
"力をするために: ref:`変数を書き出す: <doc_gdscript_exports>`場合に特に便利で"
"す。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1292
msgid ""
"As said, *local* access will *not* trigger the setter and getter. Here is an "
"illustration of this:"
msgstr ""
"前述したように、*ローカル*アクセスはsetter とgetterを*起動しません*。この例を"
"次に示します:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1309
msgid "Tool mode"
msgstr "ツールモード"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1311
msgid ""
"By default, scripts don't run inside the editor and only the exported "
"properties can be changed. In some cases, it is desired that they do run "
"inside the editor (as long as they don't execute game code or manually avoid "
"doing so). For this, the ``tool`` keyword exists and must be placed at the "
"top of the file::"
msgstr ""
"デフォルトでは、スクリプトはエディタ内では実行されずエクスポートされたプロパ"
"ティのみを変更できます(ゲームコードの実行あるいは手動でそのようになるのを回避"
"しない限り)。場合によっては、エディタ内で実行することが望ましい場合がありま"
"す。これには、 ``tool`` キーワードが存在し、ファイルの先頭に配置する必要があ"
"ります::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1325
msgid "See :ref:`doc_running_code_in_the_editor` for more information."
msgstr ""
"詳細については、\\ :ref:`doc_running_code_in_the_editor` を参照してください。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1327
msgid ""
"Be cautious when freeing nodes with ``queue_free()`` or ``free()`` in a tool "
"script (especially the script's owner itself). As tool scripts run their "
"code in the editor, misusing them may lead to crashing the editor."
msgstr ""
"ツールスクリプトでノードを\\ ``queue_free()``\\ あるいは\\ ``free()``\\ で開"
"放するときは注意してください(特にノードがそのスクリプトのオーナーである場"
"合)。ツールスクリプトはエディタ内で実行されるので、間違って使うとエディタがク"
"ラッシュするかもしれません。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1333
msgid "Memory management"
msgstr "メモリ管理"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1335
#, fuzzy
msgid ""
"If a class inherits from :ref:`class_Reference`, then instances will be "
"freed when no longer in use. No garbage collector exists, just reference "
"counting. By default, all classes that don't define inheritance extend "
"**Reference**. If this is not desired, then a class must inherit :ref:"
"`class_Object` manually and must call ``instance.free()``. To avoid "
"reference cycles that can't be freed, a :ref:`class_WeakRef` function is "
"provided for creating weak references. Here is an example:"
msgstr ""
"クラスが \\ :ref:`class_Reference` から継承する場合、インスタンスは使用されな"
"くなると解放されます。ガベージコレクタは存在せず、参照カウントのみが存在しま"
"す。デフォルトでは、継承を定義しないすべてのクラスが\\ **Reference**\\ を継承"
"します。これが望ましくない場合は、クラスは手動で \\ :ref:`class_Object` を継"
"承し、instance.free() を呼び出す必要があります。解放できない参照サイクルを避"
"けるために、弱い参照を作成するための ``weakref`` 関数が提供されています。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1357
msgid ""
"Alternatively, when not using references, the "
"``is_instance_valid(instance)`` can be used to check if an object has been "
"freed."
msgstr ""
"あるいは、参照を使用しない場合は、 ``is_instance_valid(instance)`` を使用して"
"オブジェクトが解放されたかどうかを確認できます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1364
msgid "Signals"
msgstr "シグナル"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1366
msgid ""
"Signals are a tool to emit messages from an object that other objects can "
"react to. To create custom signals for a class, use the ``signal`` keyword."
msgstr ""
"シグナルはオブジェクトから通知メッセージを送信する手段で、他のオブジェクトは"
"それを受信することが出来ます。 クラスのカスタムシグナルを作るには``signal`` "
"キーワードを使用します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1379
msgid ""
"Signals are a `Callback <https://en.wikipedia.org/wiki/"
"Callback_(computer_programming)>`_ mechanism. They also fill the role of "
"Observers, a common programming pattern. For more information, read the "
"`Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ in "
"the Game Programming Patterns ebook."
msgstr ""
"シグナルは\\ `コールバック <https://ja.wikipedia.org/wiki/コールバック_(情報"
"工学)>`_\\ 機構です。これはオブザーバーとしても振る舞う、一般的なプログラミン"
"グパターンです。より多くの情報を得るにはGame Programming Patterns ebookの "
"`Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ をお"
"読みください(英語)。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1386
msgid ""
"You can connect these signals to methods the same way you connect built-in "
"signals of nodes like :ref:`class_Button` or :ref:`class_RigidBody`."
msgstr ""
":ref:`class_Button` や :ref:`class_RigidBody` の様ななノードの組み込みシグナ"
"ルを接続するのと同じ方法で、これらのシグナルをメソッドに接続できます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1389
msgid ""
"In the example below, we connect the ``health_depleted`` signal from a "
"``Character`` node to a ``Game`` node. When the ``Character`` node emits the "
"signal, the game node's ``_on_Character_health_depleted`` is called::"
msgstr ""
"下の例では、我々は``Character``ノードから``Game``ノードへ "
"``health_depleted`` シグナルを接続します。``Character``ノードがシグナルを発信"
"したとき、gameノードの ``_on_Character_health_depleted`` が呼ばれます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1403
msgid "You can emit as many arguments as you want along with a signal."
msgstr "あなたが望むシグナルと一緒に多くの引数を発信することができます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1405
msgid ""
"Here is an example where this is useful. Let's say we want a life bar on "
"screen to react to health changes with an animation, but we want to keep the "
"user interface separate from the player in our scene tree."
msgstr ""
"ここに有用な例を示します。アニメーションを伴った、体力の変化を受信するライフ"
"バーをスクリーン上に配置しようとしますが、シーンツリー上にあるプレイヤーから"
"はそのユーザーインターフェースを分けたいします。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1409
msgid ""
"In our ``Character.gd`` script, we define a ``health_changed`` signal and "
"emit it with :ref:`Object.emit_signal() <class_Object_method_emit_signal>`, "
"and from a ``Game`` node higher up our scene tree, we connect it to the "
"``Lifebar`` using the :ref:`Object.connect() <class_Object_method_connect>` "
"method::"
msgstr ""
"``Character.gd`` スクリプト内で ``health_changed`` シグナルを定義し :ref:"
"`Object.emit_signal() <class_Object_method_emit_signal>`を使って発信し、それ"
"をシーンツリーの上層の ``Game`` ノードから、 :ref:`Object.connect() "
"<class_Object_method_connect>` メソッドを使って``Lifebar`` へ接続します::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1450
msgid ""
"To use signals, your class has to extend the ``Object`` class or any type "
"extending it like ``Node``, ``KinematicBody``, ``Control``..."
msgstr ""
"シグナルを使うにはクラスが ``Object`` クラスを直接継承しているか、もしくは"
"``Object``を継承している``Node``、 ``KinematicBody``、``Control``等を継承して"
"いる必要があります。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1453
msgid ""
"In the ``Game`` node, we get both the ``Character`` and ``Lifebar`` nodes, "
"then connect the character, that emits the signal, to the receiver, the "
"``Lifebar`` node in this case."
msgstr ""
"``Game`` ノード内で ``Character`` ノードと ``Lifebar`` ノードを取得し、そし"
"て character と受信者を接続し 、 character にシグナルを受信者へ送信させます、"
"受信者はこのケースでは``Lifebar`` ノードです。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1467
msgid ""
"This allows the ``Lifebar`` to react to health changes without coupling it "
"to the ``Character`` node."
msgstr ""
"これは``Character`` ノードとのカップリングをせずに ``Lifebar`` に体力の変化を"
"受信することを可能にします。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1470
msgid ""
"You can write optional argument names in parentheses after the signal's "
"definition::"
msgstr "signalを定義後の括弧内に追加の引数名を書くことが出来ます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1476
msgid ""
"These arguments show up in the editor's node dock, and Godot can use them to "
"generate callback functions for you. However, you can still emit any number "
"of arguments when you emit signals; it's up to you to emit the correct "
"values."
msgstr ""
"これらの引数はエディタのノードドックに表示され、Godot はこれらを使いコール"
"バック関数を生成します。しかし、シグナルを発信する際に、異なる個数の引数を送"
"信することもできます。その上限は正しい値の個数までです。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1482
msgid ""
"GDScript can bind an array of values to connections between a signal and a "
"method. When the signal is emitted, the callback method receives the bound "
"values. These bound arguments are unique to each connection, and the values "
"will stay the same."
msgstr ""
"GDScriptは、シグナルとメソッド間の接続に値の配列をバインドすることができま"
"す。シグナルが発信された時、コールバックメソッドがバインドされた値を受け取り"
"ます。これらのバインドされた引数は、それぞれの接続に固有のもので、同じ値が維"
"持されます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1487
msgid ""
"You can use this array of values to add extra constant information to the "
"connection if the emitted signal itself doesn't give you access to all the "
"data that you need."
msgstr ""
"もし、発信されたシグナル自身が必要とするデータへのアクセスをあなたに与えな"
"かったとしても、決まった情報を接続に追加するために値の配列を使うことが出来ま"
"す。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1491
msgid ""
"Building on the example above, let's say we want to display a log of the "
"damage taken by each character on the screen, like ``Player1 took 22 damage."
"``. The ``health_changed`` signal doesn't give us the name of the character "
"that took damage. So when we connect the signal to the in-game console, we "
"can add the character's name in the binds array argument::"
msgstr ""
"上の例に基づいて、``Player1 took 22 damage.`` のようにスクリーン上にそれぞれ"
"のキャラクターの受けたダメージのログを表示したいとします 。"
"``health_changed`` シグナルはダメージを受けたキャラクターの名前を我々に与えま"
"せん。その場合、ゲーム内のコンソールにシグナルを接続する事により、バインドさ"
"れた引数の配列にあるキャラクターの名前を追加することができます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1505
msgid ""
"Our ``BattleLog`` node receives each element in the binds array as an extra "
"argument::"
msgstr ""
"``BattleLog`` ノードはバインドされた追加の引数の配列内の要素を、送信者ごとに"
"受け取ります。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1518
msgid "Coroutines with yield"
msgstr "コルーチン(yield関数による)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1520
msgid ""
"GDScript offers support for `coroutines <https://en.wikipedia.org/wiki/"
"Coroutine>`_ via the :ref:`yield<class_@GDScript_method_yield>` built-in "
"function. Calling ``yield()`` will immediately return from the current "
"function, with the current frozen state of the same function as the return "
"value. Calling ``resume()`` on this resulting object will continue execution "
"and return whatever the function returns. Once resumed, the state object "
"becomes invalid. Here is an example::"
msgstr ""
"GDScriptは、組み込み関数 :ref:`yield<class_@GDScript_method_yield>` を介して "
"`coroutines <https://en.wikipedia.org/wiki/Coroutine>`_ をサポートしていま"
"す。 ``yield()`` を呼び出すと、現在の関数から即座に戻り、戻り値と同じ関数の現"
"在の凍結状態が返されます。この結果のオブジェクトで ``resume()`` を呼び出す"
"と、実行を継続し、関数が返すものを返します。再開すると、状態オブジェクトは無"
"効になります。次に例を示します:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1541
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1562
msgid "Will print::"
msgstr "以下のように表示されます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1547
msgid ""
"It is also possible to pass values between ``yield()`` and ``resume()``, for "
"example::"
msgstr "次のように、yield()とresume()の間に値を渡すこともできます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1568
msgid ""
"Remember to save the new function state, when using multiple ``yield``\\s::"
msgstr ""
"複数の ``yield`` を使用するときは、新しい関数の状態を忘れずに保存してくださ"
"い:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1583
msgid "Coroutines & signals"
msgstr "コルーチンとシグナル"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1585
msgid ""
"The real strength of using ``yield`` is when combined with signals. "
"``yield`` can accept two arguments, an object and a signal. When the signal "
"is received, execution will recommence. Here are some examples::"
msgstr ""
"``yield`` を使うことの本当の強みはシグナルと組み合わせることです。 ``yield`` "
"は、オブジェクトとシグナルの2つの引数を受け付けることができます。シグナルを受"
"信すると、実行が再開されます。次に例を示します::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1598
msgid ""
"Coroutines themselves use the ``completed`` signal when they transition into "
"an invalid state, for example::"
msgstr ""
"コルーチン自体は、次のように無効な状態に遷移するときに ``completed`` シグナル"
"を使用します。例::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1610
msgid ""
"``my_func`` will only continue execution once both buttons have been pressed."
msgstr "``my_func`` は、両方のボタンを押した後でのみ実行を継続します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1612
msgid "You can also get the signal's argument once it's emitted by an object:"
msgstr ""
"また、オブジェクトからシグナルが発せられたとき、その引数を取得することもでき"
"ます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1619
msgid ""
"If there is more than one argument, ``yield`` returns an array containing "
"the arguments::"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1637
msgid ""
"If you're unsure whether a function may yield or not, or whether it may "
"yield multiple times, you can yield to the ``completed`` signal "
"conditionally:"
msgstr ""
"ある関数が yield するかどうかわからない場合や、何度も yield するかもしれない"
"時は、条件付きで ``completed`` のシグナルを yield させることができます:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1659
msgid ""
"This ensures that the function returns whatever it was supposed to return "
"regardless of whether coroutines were used internally. Note that using "
"``while`` would be redundant here as the ``completed`` signal is only "
"emitted when the function didn't yield anymore."
msgstr ""
"これにより、内部でコルーチンが使われていたかどうかに関わらず、関数が返すべき"
"ものを確実に返すようになります。 ``completed`` シグナルは関数がもう yield し"
"ない場合にのみ発せられるので、ここで ``while`` を使うと冗長になることに注意し"
"てください。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1667
#, fuzzy
msgid "`onready` keyword"
msgstr "Onreadyキーワード"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1669
msgid ""
"When using nodes, it's common to desire to keep references to parts of the "
"scene in a variable. As scenes are only warranted to be configured when "
"entering the active scene tree, the sub-nodes can only be obtained when a "
"call to ``Node._ready()`` is made."
msgstr ""
"ノードを使用する場合、シーンの一部への参照を変数に保持することが一般的です。"
"シーンはアクティブなシーンツリーに入ったときにのみ設定されるので、サブノード"
"は ``Node._ready()`` への呼び出しが行われた時にのみ取得できます。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1682
msgid ""
"This can get a little cumbersome, especially when nodes and external "
"references pile up. For this, GDScript has the ``onready`` keyword, that "
"defers initialization of a member variable until ``_ready()`` is called. It "
"can replace the above code with a single line::"
msgstr ""
"これは特にノードと外部参照が重なっている場合には少し面倒になります。このため"
"に、GDScriptには ``onready`` キーワードがあります。これは_readyが呼び出される"
"までメンバー変数の初期化を遅らせるものです。 上記のコードを単一行に置き換える"
"ことができます::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1690
msgid "Assert keyword"
msgstr "Assertキーワード"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1692
msgid ""
"The ``assert`` keyword can be used to check conditions in debug builds. "
"These assertions are ignored in non-debug builds. This means that the "
"expression passed as argument won't be evaluated in a project exported in "
"release mode. Due to this, assertions must **not** contain expressions that "
"have side effects. Otherwise, the behavior of the script would vary "
"depending on whether the project is run in a debug build."
msgstr ""
"``assert`` キーワードはデバックビルド内で状態をチェックする為に使う事が出来ま"
"す。これらの assert は非デバッグビルドでは無視されます。これはリリースモード"
"でのプロジェクトのエクスポートでは引数として渡された式が評価されない事を意味"
"します。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1704
msgid ""
"When running a project from the editor, the project will be paused if an "
"assertion error occurs."
msgstr ""
"エディタ上でプロジェクトが実行されている時に、assertion エラーが発生した場合"
"プロジェクトは停止します。"
