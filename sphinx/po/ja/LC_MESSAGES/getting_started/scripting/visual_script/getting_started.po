# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-28 16:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:4
msgid "Getting started with Visual Scripting"
msgstr "ビジュアル・スクリプト入門"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:6
msgid ""
"As with everything in Godot, we prioritize a good experience over copying or "
"integrating third party solutions which might not fit nicely in the current "
"workflow. This led us to write our own version of how we believe this "
"feature would work best with the engine."
msgstr ""
"Godotのすべてのものと同様に、現在のワークフローにはうまく適合しない可能性があ"
"るサードパーティ製のソリューションをコピーまたは統合するよりも、優れた経験を"
"優先します。このため、この機能がエンジンで最もうまく動作すると思われる独自の"
"バージョンを作成しました。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:10
msgid ""
"In Godot, a Visual Script fits smoothly together with regular scripts in the "
"Editor tab"
msgstr ""
"Godotでは、 エディタ・タブでビジュアルスクリプトを通常のスクリプトとスムーズ"
"に連携させることができます"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:15
msgid ""
"In fact, Visual Scripting integrates so well to Godot that it's hard to "
"believe it was added only in version 3.0. This is because, when editing, the "
"rest of Godot panels and docks act like a palette from where you can drag "
"and drop all sorts of information to the script canvas:"
msgstr ""
"実際、ビジュアル・スクリプトはGodotと非常によく統合されているため、バージョン"
"3.0でのみ追加されたとは信じられません。これは編集時に残りのGodotパネルとドッ"
"クがパレットのように機能し、そこからあらゆる種類の情報をスクリプトキャンバス"
"にドラッグアンドドロップできるためです:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:23
msgid "Creating a script"
msgstr "スクリプトの作成"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:25
msgid ""
"Creating scripts works the same as with other scripting languages: Select "
"any node in the scene and push the \"New Script\" button at the top right "
"corner of the Scene Tree dock:"
msgstr ""
"スクリプトの作成は他のスクリプト言語と同じように機能します。シーン内の任意の"
"ノードを選択し、シーンツリードックの右上隅にある \"New Script\" ボタンを押し"
"ます:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:31
msgid ""
"Once it opens, the script type \"Visual Script\" must be selected from the "
"drop down list. The script extension must be \".vs\" (for Visual Script!)."
msgstr ""
"開いたら、ドロップダウンリストからスクリプトタイプ \"Visual Script\" を選択す"
"る必要があります。スクリプトの拡張子は \".vs\" にする必要があります(Visual "
"Scriptの場合)。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:37
msgid ""
"Finally, the Script Editor will open, allowing you to start editing the "
"visual script:"
msgstr ""
"最後にスクリプトエディタが開き、ビジュアル・スクリプトの編集を開始できます:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:43
msgid "Adding a function"
msgstr "関数の追加"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:45
msgid ""
"Unlike other visual scripting implementations, Visual Scripting in Godot is "
"heavily based on functions. This happens because it uses the same interface "
"to communicate with the engine as other scripting engines. In Godot, the "
"scripting interface is universal and all implementations conform to it."
msgstr ""
"他のビジュアルスクリプティング実装とは異なり、Godotのビジュアルスクリプティン"
"グは関数に大きく基づいています。これは、他のスクリプトエンジンと同じインター"
"フェイスを使用してエンジンと通信するために発生します。Godotでは、スクリプトイ"
"ンターフェースは汎用的で、すべての実装はそれに準拠しています。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:49
msgid "A function is an individual canvas with nodes connected."
msgstr "関数は、ノードが接続されている個々のキャンバスです。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:51
msgid ""
"A single script can contain many functions, each of which will have a canvas "
"of its own, allowing for more organization."
msgstr ""
"1つのスクリプトに多数の関数を含めることができ、それぞれに独自のキャンバスがあ"
"り、より多くの編成が可能になります。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:53
msgid "There are three main ways to add functions in a script:"
msgstr "スクリプトに関数を追加するには、主に3つの方法があります:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:56
msgid "Overriding a virtual function"
msgstr "仮想関数のオーバーライド"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:58
msgid ""
"Most types of nodes and other types of objects in Godot contain virtual "
"functions. These are functions that will be called (run your code) when "
"something happens and can be looked up in the reference. Virtual functions "
"are listed when pressing the \"Override\" icon in the member panel:"
msgstr ""
"Godotのほとんどの種類のノードやその他の種類のオブジェクトには仮想関数が含まれ"
"ています。これらは、何かが起こったときに呼び出され(コードを実行する)、参照で"
"調べることができる関数です。メンバーパネルの \"Override\" アイコンを押すと、"
"仮想関数が一覧表示されます:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:65
msgid ""
"In the following example, a function will be executed when the node is "
"loaded and added to the running scene. For this, the _ready() virtual method "
"will be overridden:"
msgstr ""
"次の例ではノードがロードされて実行中のシーンに追加されたときに関数が実行され"
"ます。このため_ready()仮想メソッドはオーバーライドされます:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:71
msgid "Finally, a canvas appears for this function, showing the override:"
msgstr "最後に、この関数のキャンバスが表示され、オーバーライドが表示されます:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:76
msgid ""
"As some functions expect you to return a value, they will also add a return "
"node where such value is supposed to be provided:"
msgstr ""
"一部の関数は値を返すことを期待しているので、そのような値を提供することを想定"
"しているリターンノードも追加します:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:83
msgid "Connecting a signal to a function"
msgstr "シグナルの関数への接続"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:85
msgid ""
"Nodes in a tree emit signals when something happens. Godot uses signals for "
"all sorts of things. A typical example would be a button that emits a "
"\"pressed\" signal when actually pressed."
msgstr ""
"ツリー内のノードは何かが起こるとシグナルを発します。 Godotはあらゆる種類のも"
"のにシグナルを使用します。典型的な例は、実際に押されたときに \"pressed\" 信号"
"を発するボタンです。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:88
msgid ""
"For this, a node must be selected and the Node tab opened. This will allow "
"inspecting the signals. Once they are displayed, connect the \"pressed\" "
"signal:"
msgstr ""
"このためにはノードを選択して[ノード]タブを開く必要があります。これで信号を調"
"べることができます。表示されたら、 \"pressed\" 信号を接続します:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:94
msgid ""
"This will open the connection dialog. In this dialog, you must select the "
"node where the signal will be connected to, and the function that will "
"receive the signal:"
msgstr ""
"これで接続ダイアログが開きます。 このダイアログでは、信号が接続されるノードと"
"信号を受信する機能を選択する必要があります:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:100
msgid ""
"If this is done right, a new function will be created in our script and a "
"signal will automatically be connected to it:"
msgstr ""
"これが正しく行われると、スクリプト内に新しい関数が作成され、シグナルが自動的"
"にその関数に接続されます:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:107
msgid "Creating a function manually"
msgstr "関数の手動作成"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:109
msgid ""
"The last way to create functions is to do it manually. In general, this is "
"not as common unless you really need it. Custom functions work when another "
"(or the same) script calls them manually. The main use cases for this are "
"breaking a larger function up into several manageable chunks and reusing "
"your visual code."
msgstr ""
"関数を作成する最後の方法は手動でそれをすることです。一般にこれはが必要な時は"
"さほどありません。カスタム関数は、別の(または同じ)スクリプトがそれらを手動で"
"呼び出すときに機能します。これの主な使用例は、大きな機能をいくつかの管理可能"
"なチャンクに分割し、ビジュアルコードを再利用することです。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:113
msgid ""
"To create a function manually, push the big \"Plus\" button, and a new "
"function will be added with a default name:"
msgstr ""
"手動で関数を作成するには、大きな \"Plus\" ボタンを押すと、新しい関数がデフォ"
"ルトの名前で追加されます:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:119
msgid ""
"This will add a new function, which can be renamed by simply double clicking "
"its name:"
msgstr ""
"新しい関数が追加され、名前をダブルクリックするだけで名前を変更できます:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:125
msgid ""
"To edit the \"arguments\" this function can get (the values you pass to it "
"when you call this function), simply click the Function node and check the "
"inspector:"
msgstr ""
"この関数が取得できる \"arguments\" (この関数を呼び出すときに渡す値)を編集する"
"には、関数ノードをクリックしてインスペクタをチェックするだけです:"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:131
msgid "More on that will be explained later in this document."
msgstr "詳細については、このドキュメントの後半で説明します。"
