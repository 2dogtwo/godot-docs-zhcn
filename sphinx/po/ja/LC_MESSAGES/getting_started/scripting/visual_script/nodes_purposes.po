# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-21 12:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:4
msgid "Nodes and terminology"
msgstr "ノードと用語"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:6
msgid ""
"Before continuing, it must be noted that the *Node* terminology needs to be "
"used with care. When referring to *Visual Script Nodes* (or generally "
"*Nodes*) this text will refer to the little boxes you connect with lines, "
"which are part of a graph. When referring to *Scene Nodes*, it is implied "
"that the elements that make up a Scene are being referred, which are part of "
"a tree. Their naming is similar but their function is different. When "
"referring to *Node* here, it will be implied that a *Visual Script Node* is "
"referred to unless indicated otherwise."
msgstr ""
"続行する前に、*ノード*の用語を注意して使用する必要があります。*ビジュアルスク"
"リプトノード*(または通常は*ノード*)を参照する場合、このテキストはグラフの一部"
"である線で接続する小さなボックスを参照します。*シーンノード*を参照すると、"
"シーンを構成する要素 (ツリーの一部) が参照されます。名前は似ていますが、機能"
"は違います。ここで*ノード*を参照する場合、特に指定しないかぎり、*ビジュアルス"
"クリプトノード*が参照されることを意味します。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:15
msgid "Node properties"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:17
msgid ""
"Like in most visual scripting implementations, each node has editable "
"properties. In Godot, though, we try to avoid bloating the nodes with "
"editable controls for the sake of readability."
msgstr ""
"ほとんどのビジュアルスクリプト実装と同様に、各ノードには編集可能なプロパティ"
"があります。しかし、Godot では、読みやすさのために編集可能なコントロールを使"
"用してノードが肥大化しないようにしています。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:20
msgid ""
"Nodes still display the required information as text, but editing is done "
"via the *Inspector*. To edit them, select any node and edit its properties "
"in the *Inspector*."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:25
msgid "Ports and connections"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:27
msgid ""
"Programming in Godot Visual Scripting is done via *Nodes* and *Port "
"Connections* inside each function."
msgstr ""
"Godotビジュアルスクリプティングでのプログラミングは、各関数内の*Nodes*および"
"*Port Connections*を介して行われます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:31
msgid "Ports"
msgstr "ポート"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:33
msgid ""
"Nodes in Godot Visual Scripting have *Ports*. These are endpoints that "
"appear to the left and right of nodes and which can be used to make "
"*Connections*: There are two types of *Ports*: *Sequence* and *Data*."
msgstr ""
"Godot ビジュアル スクリプティングのノードには *Ports* があります。これらは"
"ノードの左右に表示され、 *Connections* を作成するために使用できるエンドポイン"
"トです:*Ports* には *Sequence* と *Data*の 2 種類があります。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:40
msgid ""
"*Sequence Ports* indicate the order in which operations are executed. "
"Typically when a *Node* is done processing, it will go to the next node from "
"one of the ports at the right. If nothing is connected, the function may "
"end, or another output *Sequence Port* might be tried (this depends on the "
"node). Thanks to this, you can follow the logic flow within a function by "
"following the white lines. Not every *Node* has *Sequence Ports*. In fact, "
"most do not."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:46
msgid ""
"*Data Ports* ports contain typed values. Types can be any regular Godot "
"types, such as a boolean, an integer, a string, a Vector3, an array, any "
"Object or Scene Node, etc. A *Data Port* on the right side of a node is "
"considered an output, while, a port on the left side is an input. Connecting "
"them allows information to flow to the next node."
msgstr ""
"*Data Ports* ポートには、型指定された値が含まれています。型には、ブール値、整"
"数、文字列、ベクター3、配列、オブジェクトノード、シーンノードなど、任意の通常"
"のGodot型を指定できます。ノードの右側にある *Data Port* は出力と見なされ、左"
"側のポートは入力です。それらを接続すると、次のノードに情報が流れるようになり"
"ます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:51
msgid ""
"Not all *Data Port* types are compatible and will allow connections, though. "
"Pay special attention to colors and icons, as each type has a different "
"representation:"
msgstr ""
"ただし、すべての *Data Port* タイプに互換性があるわけではなく、接続も可能で"
"す。 それぞれのタイプには異なる表現があるので、色とアイコンに特に注意を払って"
"ください:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:58
msgid "Connections"
msgstr "接続"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:60
msgid ""
"Connecting is a relatively simple process. Drag an *Output Port* towards an "
"*Input Port*."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:65
msgid ""
"Disconnecting takes a bit more practice. Disconnecting in *Data Ports* "
"happens by dragging the *Input* away, while for *Sequence Ports*, this "
"happens by dragging the *Output* away."
msgstr ""
"切断にはもう少し練習が必要です。 *Data Ports* での切断は、 *Input* を離れてド"
"ラッグして行われますが、 *Sequence Ports* の場合は、 *Output* をドラッグして"
"行われます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:71
msgid ""
"This may seem strange at first, but it happens because *Data Ports* are 1:N "
"(A single output port can connect to many inputs), while *Sequence Ports* "
"are N:1 (Many sequence outputs can be connected to a single input)."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:75
msgid ""
"Connecting to empty space (drag to connect but unpress over empty space) is "
"also context sensitive, it will supply a list of most common operations. For "
"sequences, it will be conditional nodes:"
msgstr ""
"空の領域(ドラッグして接続しますが、空白領域では押しません)への接続もコンテキ"
"ストに依存し、最も一般的な操作のリストを提供します。シーケンスの場合は、条件"
"ノードになります:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:81
msgid "While, for data, a contextual set/get/call menu will open:"
msgstr "データの場合、コンテキスト set/get/call メニューが開きます:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:87
msgid "Adding nodes"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:89
msgid ""
"Finally! We got to the fun part! But, before explaining in more detail what "
"each type of node does, let's take a short look at how nodes are most "
"commonly added and dealt with."
msgstr ""
"ついに!楽しいところに着きました!ただし、各タイプのノードの機能を詳しく説明す"
"る前に、ノードが最も一般的に追加および処理される方法について簡単に説明しま"
"す。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:94
msgid "Accessing scene nodes"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:96
msgid ""
"One of the most common tasks is accessing Scene Tree Nodes (again, not to "
"mistake with *Visual Script Nodes*). Dragging from the Scene Tree and "
"dropping into the canvas will ask you to *call a method* (sometimes referred "
"to as *member function*) on this node."
msgstr ""
"最も一般的なタスクの 1 つは、シーンツリーノードにアクセスすることです "
"( *Visual Script Nodes* と間違えないようにします)。シーン ツリーからドラッグ"
"してキャンバスにドロップすると、このノードで*メソッド*(*member function*と呼"
"ばれることもあります)を呼び出すように求めます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:102
msgid ""
"While accessing properties is desired in most cases (more on that below), "
"sometimes *calling methods* can be useful too. Methods execute specific "
"actions on objects. In the above case, the mouse pointer can be warped to a "
"position in local coordinates to the control. Another common use case is "
"queueing a node for deletion, which is done with the *queue_free* method."
msgstr ""
"ほとんどの場合、プロパティへのアクセスが必要ですが(詳細は後述)、場合によって"
"は *calling methods* も便利です。メソッドは、オブジェクトに対して特定のアク"
"ションを実行します。この場合、マウスポインタをコントロールのローカル座標の位"
"置にワープさせることができます。もう1つの一般的な使用例は、 *queue_free* メ"
"ソッドを使用してノードを削除のためにキューに入れる場合です。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:109
msgid ""
"Care must be taken that this only works if the scene being edited contains "
"your *Visual Script* in one of the nodes! Otherwise, a warning will be shown."
msgstr ""
"これは、編集中のシーンのいずれかのノードに *Visual Script* が含まれている場合"
"にのみ機能することに注意してください。それ以外の場合は、警告が表示されます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:113
msgid "Accessing scene node properties"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:115
msgid ""
"This is the most common way to edit *Scene Nodes* in Visual Scripting. "
"Select a *Scene Node* from the *Scene Tree*, go to the Inspector, find *the "
"Name* of the property you want to edit (hint, *not* the value!) and drag it "
"to the canvas:"
msgstr ""
"これは、ビジュアルスクリプティングで *Scene Nodes* を編集する最も一般的な方法"
"です。 *Scene Tree* から *Scene Node* を選択し、インスペクタに移動して、編集"
"するプロパティ(値では*ありません*)の *Name* を探し、キャンバスにドラッグしま"
"す:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:120
msgid ""
"The result is that this value can be changed from your script by writing to "
"a *Data Port*."
msgstr ""
"その結果、 *Data Port* に書き込むことで、この値をスクリプトから変更できます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:122
msgid ""
"If instead reading this value is desired, drag the node again but hold the "
"*Control* key (or Command on Mac). This will create a getter:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:127
msgid "In this case, the value can be read from a *Data Port*."
msgstr "この場合、値は *Data Port* から読み取ることができます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:131
msgid "Variables"
msgstr "変数"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:133
msgid ""
"Variables are memory containers local to the script which can hold a value. "
"This value can be read from any of the functions of the script or from other "
"scripts via the method described in the previous step."
msgstr ""
"変数は、値を保持できるスクリプトにローカルなメモリコンテナです。この値は、前"
"の手順で説明した方法を使用して、スクリプトの任意の関数または他のスクリプトか"
"ら読み取ることができます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:135
msgid ""
"To add a Variable, push the \"+\" button on the *Variables* section of the "
"Members panel. Double-click the new variable to rename it:"
msgstr ""
"変数を追加するには、メンバーパネルの *Variables* セクションの \"+\" ボタンを"
"押します。新しい変数をダブルクリックして名前を変更します:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:140
msgid "Right-clicking the variable allows you to configure its properties:"
msgstr "変数を右クリックすると、そのプロパティを設定できます:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:147
msgid ""
"As it can be seen above, the type and initial value of the variable can be "
"changed, as well as some property hints. Ticking the \"Export\" option makes "
"the variable visible in the Inspector when selecting the node. This also "
"makes it available to other scripts via the method described in the previous "
"step."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:153
msgid ""
"To use the variable in the script, simply drag it to the canvas to create a "
"getter:"
msgstr ""
"スクリプトで変数を使用するには、キャンバスにドラッグしてgetterを作成します:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:158
msgid "Likewise, hold *Control* (*Command* on Mac) to drop a setter:"
msgstr ""
"同様に、*Control* (Mac 上の*Command*) キーを押したまま、セッターをドロップし"
"ます:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:164
msgid "Signals"
msgstr "シグナル"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:166
msgid ""
"It is also possible to create your own signals in a script and use them. For "
"this, do the same steps you did for variables in the previous step, except "
"for *Signals*:"
msgstr ""
"スクリプトで独自のシグナルを作成して使用することもできます。このためには、前"
"の手順で変数に対して行ったのと同じ手順を実行します。ただし、 *Signals* は除き"
"ます:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:171
msgid ""
"A signal can also be edited via the right-click menu to customize its "
"arguments:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:176
msgid ""
"The signal you have created will appear in the Inspector, along with the "
"built-in node signals. This allows you to connect it from another script "
"from another *Scene Node*:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:181
msgid "Finally, to emit the signal, simply drag it to the canvas:"
msgstr "最後に、信号を放出するには、キャンバスにドラッグするだけです:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:186
msgid ""
"Remember that emitting a signal is a sequenced operation, so it must come "
"from a Sequence port."
msgstr ""
"信号の放出はシーケンス操作なので、シーケンス ポートから送信する必要がありま"
"す。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:190
msgid "Adding more nodes"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:192
msgid ""
"Now that the basics are covered, let's discuss the large amount of utility "
"nodes available for your canvas! Below the member panel, exists the list of "
"all available node types:"
msgstr ""
"基本について説明したところで、キャンバスで使用できる大量のユーティリティノー"
"ドについて説明しましょう。メンバーパネルの下に、使用可能なすべてのノードタイ"
"プの一覧が存在します:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:198
msgid "Ctrl-F (Command-F on Mac) allows you to search the list."
msgstr "Ctrl + F (MacではCommand + F) を使用すると、リストを検索できます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:200
msgid ""
"Any of them can be dragged to the scene. Unlike nodes (e.g. dragging a "
"property from the Inspector sets the context to the node being edited "
"automatically), these are added without any \"contextual\" information, so "
"this has to be done manually."
msgstr ""
"いずれもシーンにドラッグできます。ノードとは異なり(例えば、インスペクタからプ"
"ロパティをドラッグすると、自動的に編集されるノードにコンテキストを設定しま"
"す)、これらは \"contextual\" 情報なしで追加されるので、手動で行う必要がありま"
"す。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:206
msgid ""
"Remember that you can check the class reference for what each node does, as "
"they are documented there. That mentioned, a brief overview of node types "
"follows:"
msgstr ""
"各ノードの内容については、クラス参照を確認できることに注意してください。前述"
"のとおり、ノードの種類の概要を次に示します:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:211
msgid "Constants"
msgstr "定数"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:213
msgid ""
"Constant nodes are nodes that provide values that, while not changing over "
"time, can be useful as reference values. Most of the time they are integer "
"or float."
msgstr ""
"定数ノードは、時間の経過と同じ値として役立つ値を提供するノードです。ほとんど"
"の場合、整数または浮動小数点数です。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:219
msgid ""
"The first one is \"Constant\", which allows you to select any value of any "
"type as constant, from an integer (42) to a String (\"Hello!\"). In general, "
"this node is not used that often because of default input values in *Data "
"Ports*, but it's good to know it exists."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:221
msgid ""
"The second is the GlobalConstant node, which contains a long list of "
"constants for global types in Godot. In there you can find some useful "
"constants to refer to key names, joystick or mouse buttons, etc."
msgstr ""
"2つ目は、Godotのグローバル型の定数の長いリストを含むGlobalConstantノードで"
"す。そこには、キー名、ジョイスティックやマウスボタンなどを参照するためにいく"
"つかの有用な定数を見つけることができます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:224
msgid ""
"The third one is MathConstant, which provides typical mathematical "
"constants, such as PI, E, etc."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:228
msgid "Data"
msgstr "データ"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:230
msgid ""
"Data nodes deal with all sorts of access to information. Any information in "
"Godot is accessed via these nodes, so they are some of the most important "
"ones to use and pretty diverse."
msgstr ""
"データノードは、あらゆる種類の情報へのアクセスを扱います。Godotの情報は、これ"
"らのノードを介してアクセスされますので、使用する最も重要なものの一部であり、"
"かなり多様です。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:236
msgid ""
"There are many types of nodes of interest here, so a short attempt to "
"describe them will follow:"
msgstr "ここには多くの種類のノードがあるため、簡単に説明します:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:240
msgid "Action"
msgstr "アクション"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:242
msgid ""
"Action nodes are vital when dealing with input from a device. You can read "
"more about actions in the (@TODO ACTION TUTE LINK). In the following example "
"below, the control is moved to the right when the \"move_right\" action is "
"pressed."
msgstr ""
"アクションノードは、デバイスからの入力を処理する際に不可欠です。アクションの"
"詳細については、(@TODO ACTION TUTE LINK)を読むことができます。次の例で"
"は、\"move_right\" アクションを押すと、コントロールが右に移動します。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:249
msgid "Engine Singleton"
msgstr "エンジン・シングルトン"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:251
msgid ""
"Engine singletons are global interfaces (meaning they can be accessed "
"without a reference; unlike Scene Nodes, they are always available). They "
"have several purposes, but in general, they are useful for low-level access "
"or OS-related access."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:257
msgid ""
"Remember that dragging a connection to empty space will help you call "
"functions or set/get properties on these:"
msgstr ""
"空のスペースに接続をドラッグすると、関数を呼び出したり、プロパティを設定/取得"
"したりするのに役立ちます:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:263
msgid "Local Variables"
msgstr "ローカル変数"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:265
msgid ""
"These are nodes you can use as temporary storage for your graphs. Make sure "
"they all have the same name and type when using them and they will reference "
"the same piece of memory."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:270
msgid ""
"As it can be seen above, there are two nodes available: A simple getter, and "
"a sequenced getter (setting requires a sequence port)."
msgstr ""
"上に示すように、単純なゲッターとシーケンス化されたゲッター(設定にはシーケンス"
"ポートが必要)の2つのノードがあります。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:274
msgid "Scene Node"
msgstr "シーンノード"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:276
msgid ""
"This is just a reference to a node in the tree, but it's easier to use this "
"node by dragging the actual node from the scene tree to the canvas (this "
"will create it and configure it)."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:281
msgid "Self"
msgstr "セルフ"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:283
msgid ""
"In some rare occasions, it may be desired to pass this Scene Node as "
"argument. It can be used to call functions and set/get properties, or drag "
"nodes (or event the node itself that has the script) from the Scene Tree to "
"the canvas for this."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:288
msgid "SceneTree"
msgstr "シーンツリー"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:290
msgid ""
"This node is similar to the Singleton node because it references the "
"SceneTree, which contains the active scene. SceneTree, however, only works "
"when the node is sitting in the scene and active, otherwise accessing it "
"will return an error."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:294
msgid ""
"SceneTree allows for many low-level things, like setting stretch options, "
"calling groups, make timers, or even load another scene. It's a good class "
"to get familiar with."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:299
msgid "Preload"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:301
msgid ""
"This does the same function as preload() in GDScript. It maintains this "
"resource loaded and ready to use. Rather than instancing the node, it's "
"simpler to drag the desired resource from the filesystem dock to the canvas."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:306
msgid "Resource Path"
msgstr "リソースのパス"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:308
msgid ""
"This node is a simple helper to get a string with a path to a resource you "
"can pick. It's useful in functions that load things from disk."
msgstr ""
"このノードは、選択可能なリソースへのパスを含む文字列を取得する単純なヘルパー"
"です。これは、ディスクからデータをロードする関数で便利です。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:313
msgid "Comment"
msgstr "コメント"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:315
msgid ""
"A Comment node works as a node you can resize to put around other nodes. It "
"will not try to get focus or be brought to top when selecting it. It can "
"also be used to write text on it."
msgstr ""
"コメント ノードは、他のノードの周りに配置するサイズを変更できるノードとして機"
"能します。フォーカスを取得しようとしたり、選択時にトップに持ち込まれたりしま"
"せん。また、テキストを書き込むためにも使用できます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:322
msgid "Flow Control"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:324
msgid ""
"Flow control nodes allow the execution to take different branches, usually "
"depending on a given condition."
msgstr ""
"フロー制御ノードを使用すると、通常は特定の条件に応じて、実行によって異なる分"
"岐を取ることができます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:331
msgid "Condition"
msgstr "条件"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:333
#, fuzzy
msgid ""
"This is a simple node that checks a bool port. If ``true``, it will go via "
"the \"true\" sequence port. If ``false``, the second. After going for either "
"of them, it goes via the \"done\" port. Leaving sequence ports disconnected "
"is fine if not all of them are used."
msgstr ""
"これはboolポートをチェックする簡単なノードです。 もしtrueなら、それは \"true"
"\" シーケンスポートを経由します。 falseの場合、2番目です。 どちらかに行く"
"と、 \"done\" ポートを経由します。 すべてのポートが使用されていない場合は、"
"シーケンスポートを切断したままにしても問題ありません。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:339
msgid "Iterator"
msgstr "イテレータ"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:341
msgid ""
"Some data types in Godot (ie, arrays, dictionaries) are iterable. This means "
"that a bit of code can run for each element that it has."
msgstr ""
"Godotの一部のデータ型(配列、辞書)は、この種のデータ型を使用して使用できます。"
"つまり、ある要素ごとに少しのコードを実行できます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:344
msgid ""
"The Iterator node goes through all elements and, for each of them, it goes "
"via the \"each\" sequence port, making the element available in the \"elem\" "
"data port."
msgstr ""
"イテレータノードはすべての要素を通過し、それぞれについて、 \"each\" シーケン"
"スポートを経由して、 \"elem\" データポートで要素を利用できるようにします。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:347
msgid "When done, it goes via the \"exit\" sequence port."
msgstr "完了すると、 \"exit\" シーケンスポートを経由します。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:351
msgid "Return"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:353
msgid ""
"Some functions can return values. In general for virtual ones, Godot will "
"add the Return node for you. A return node forces the function to end."
msgstr ""
"一部の関数は値を返すことができます。一般に、仮想ノードの場合、GodotはReturn"
"ノードを追加します。Returnノードは、関数を強制的に終了します。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:358
msgid "Sequence"
msgstr "シーケンス"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:360
msgid ""
"This node is useful mostly for organizing your graph. It calls its sequence "
"ports in order."
msgstr ""
"このノードは、主にグラフを整理するのに役立ちます。順番にシーケンス ポートを呼"
"び出します。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:364
msgid "TypeCast"
msgstr "型キャスト"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:366
msgid ""
"This is a useful and commonly used node. You can use it to cast arguments or "
"other objects to the type you desire. Afterwards, you can even drag the "
"object output to get full completion."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:372
msgid ""
"It is also possible to cast to a script, which will allow complete script "
"properties and functions:"
msgstr ""
"スクリプトにキャストすることも可能で、完全なスクリプトのプロパティと関数を使"
"用できます:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:378
msgid "Switch"
msgstr "スイッチ"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:380
msgid ""
"The Switch node is similar to the Condition node, but it matches many values "
"at the same time."
msgstr "スイッチノードは条件ノードに似ていますが、同時に多数の値に一致します。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:384
msgid "While"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:386
msgid ""
"This is a more primitive form of iteration. \"repeat\" sequence output will "
"be called as long as the condition in the \"cond\" data port is met."
msgstr ""
"これは、よりプリミティブな形式の反復です。 \"cond\" データポートの条件が満た"
"されている限り、 \"repeat\" シーケンス出力が呼び出されます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:391
msgid "Functions"
msgstr "関数"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:393
msgid ""
"Functions are simple helpers, most of the time deterministic. They take some "
"arguments as input and return an output. They are almost never sequenced."
msgstr ""
"関数は単純なヘルパーで、ほとんどの場合確定的です。 それらは入力としていくつか"
"の引数を取り、出力を返します。 それらはほとんど順序付けられていません。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:398
msgid "Built-In"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:400
msgid ""
"There is a list of built-in helpers. The list is almost identical to the one "
"from :ref:`GDScript<class_@GDScript>`. Most of them are mathematical "
"functions, but others can be useful helpers. Make sure to take a look at the "
"list at some point."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:404
msgid "By Type"
msgstr "タイプによる"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:406
msgid ""
"Those are the methods available to basic types. For example, if you want a "
"dot-product, you can search for \"dot\" instead of the Vector3 category. In "
"most cases just search the list of nodes, it should be faster."
msgstr ""
"これらは、基本的な型で使用できるメソッドです。たとえば、ドット製品が必要な場"
"合は、Vector3カテゴリの代わりに \"dot\" を検索できます。ほとんどの場合、ノー"
"ドのリストを検索するだけで、より高速化されるはずです。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:411
msgid "Call"
msgstr "コール"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:413
msgid ""
"This is the generic calling node. It is rarely used directly but by dragging "
"to empty space on an already configured node."
msgstr ""
"これは汎用呼び出しノードです。直接使用されることはほとんどありませんが、既に"
"構成されているノード上の空き領域にドラッグします。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:417
msgid "Constructors"
msgstr "コンストラクター"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:419
msgid ""
"These are all the functions needed to create Godot basic datatypes. For "
"example, If you need to create a Vector3 out of 3 floats, a constructor must "
"be used."
msgstr ""
"これらは、Godot の基本的なデータ型を作成するために必要なすべての関数です。た"
"とえば、3つの浮動小数点数のうちVector3を作成する必要がある場合は、コンストラ"
"クタを使用する必要があります。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:425
msgid "Destructor"
msgstr "デストラクター"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:427
msgid ""
"This is the opposite to Constructor, it allows to separate any basic type "
"(ie, Vector3) into its sub-elements."
msgstr ""
"これはコンストラクタとは反対で、基本的な型(つまりVector3)をサブ要素に分離でき"
"ます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:433
msgid "Emit Signal"
msgstr "信号を放出する"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:435
msgid ""
"Emits signals from any object. In general it's not that useful, as dragging "
"a signal to the canvas works better."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:439
msgid "Get/Set"
msgstr "取得/設定(Get/Set)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:441
msgid ""
"Generic Getter/Setter node. Dragging properties from the Inspector works "
"better, as they appear properly configured on drop."
msgstr ""
"汎用取得/設定ノード。インスペクタからプロパティをドラッグすると、ドロップ時に"
"設定されて表示されるので、より適切に動作します。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:445
msgid "Wait"
msgstr "待機(Wait)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:447
msgid ""
"The Wait nodes will suspend execution of the function until something "
"happens (many frames can pass until resuming, in fact). Default nodes allow "
"you to wait for a frame to pass, a fixed frame or a given amount of time "
"until execution is resumed."
msgstr ""
"Waitノードは、何かが起こるまで関数の実行を中断します(実際には、多くのフレーム"
"が再開されるまで渡すことができます)。既定のノードを使用すると、フレームが通過"
"するまで待機したり、固定フレームまたは実行が再開されるまで一定の時間を待機し"
"たりできます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:452
msgid "Yield"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:454
msgid ""
"This node completely suspends the execution of the script, and it will make "
"the function return a value that can be used to resume execution."
msgstr ""
"このノードはスクリプトの実行を完全に中断し、関数は実行の再開に使用できる値を"
"返します。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:458
msgid "Yield Signal"
msgstr "譲渡・信号待ち(Yield Signal)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:460
msgid "Same as Yield, but will wait until a given signal is emitted."
msgstr "Yieldと同じですが、特定のシグナルが放出されるまで待ちます。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:464
msgid "Index"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:466
msgid ""
"Generic indexing operator, not often used but it's good that it exists just "
"in case."
msgstr ""
"汎用インデックス演算子。頻繁に使用されるわけではありませんが、念のために存在"
"させておくとよいでしょう。"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:470
msgid "Operators"
msgstr "演算子"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:472
msgid ""
"These are mostly generic operators, such as addition, multiplication, "
"comparison, etc. By default, these mostly accept any datatype (and will "
"throw an error at run-time if the types fed do not match those expected by "
"the operator). It is always recommended to set the right type for operators "
"to catch errors faster and make the graph easier to read."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:481
msgid "Expression Node"
msgstr "式ノード(Expression Node)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:483
msgid ""
"Among the operators, the *Expression* node is the most powerful. If well "
"used, it allows you to enormously simplify visual scripts that are math or "
"logic heavy. Type any expression on it and it will be executed in real-time."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:486
msgid "Expression nodes can:"
msgstr "式ノードは次のことができます:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:488
msgid ""
"Perform math and logic expressions based on custom inputs (eg: \"a*5+b\", "
"where a and b are custom inputs):"
msgstr ""
"カスタム入力に基づいて数学式と論理式を実行します (例: \"a*5+b\"、aとbはカスタ"
"ム入力です):"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:493
msgid "Access local variables or properties:"
msgstr "ローカル変数またはプロパティにアクセスします:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:498
msgid ""
"Use most of the existing built-in functions that are available to GDScript, "
"such as sin(),cos(),print(), as well as constructors, such as Vector3(x,y,z),"
"Rect2(..), etc.:"
msgstr ""
"Sin()、cos()、print()など、GDScriptで使用できる既存の組み込み関数のほとんど"
"と、Vector3(x,y,z)、Rect2(..)などのコンストラクタを使用できます:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:503
msgid "Call API functions:"
msgstr "API関数の呼び出し:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:508
msgid ""
"Use sequenced mode, which makes more sense in case of respecting the "
"processing order:"
msgstr "処理順序を考慮する場合は、シーケンスモードを使用してください:"
