# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-04 09:58+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/editor/unity_to_godot.rst:8
msgid "From Unity to Godot Engine"
msgstr "UnityからGodot Engineへ"

#: ../../docs/getting_started/editor/unity_to_godot.rst:10
msgid ""
"This guide provides an overview of Godot Engine from the viewpoint of a "
"Unity user, and aims to help you migrate your existing Unity experience into "
"the world of Godot."
msgstr ""
"このガイドでは、Unityユーザーの観点からGodotエンジンの概要を説明し、既存の"
"UnityエクスペリエンスをGodotの世界に移行する手助けをすることを目的としていま"
"す。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:15
#, fuzzy
msgid ""
"This article talks about older versions of Unity. Nestable prefabs ('Nested "
"prefabs') were added to Unity 2018.3. Nestable prefabs are analogous to "
"Godot's scenes, and allow a more Godot-like approach to scene organization."
msgstr ""
"この記事では、Unityの古いバージョンについて説明します。ネスト可能なプレハブ"
"('Nested prefabs')がUnity 2018.3に追加されました。 ネスト可能なプレハブは"
"Godotのシーンに似ており、シーンの編成によりGodotのようなアプローチを可能にし"
"ます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:18
msgid "Differences"
msgstr "違い"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "Unity"
msgstr "\\ Unity"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "Godot"
msgstr "\\ Godot"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "License"
msgstr "ライセンス"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid ""
"Proprietary, closed, free license with revenue caps and usage restrictions"
msgstr "収益上限と使用制限を備えた、独自のクローズドライセンス、無料ライセンス"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "MIT license, free and fully open source without any restriction"
msgstr "MITライセンス、自由で完全にオープンなソースを制限なし"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "OS (editor)"
msgstr "OS(エディタ)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "Windows, macOS, Linux"
msgstr "Windows、macOS、Linux"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "Windows, macOS, X11 (Linux, \\*BSD)"
msgstr "\\ Windows、macOS、X11 (Linux, \\*BSD)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
msgid "OS (export)"
msgstr "OS(エクスポート)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
msgid "**Desktop:** Windows, macOS, Linux"
msgstr "**デスクトップ:** Windows、macOS、Linux"

#: ../../docs/getting_started/editor/unity_to_godot.rst:28
msgid "**Mobile:** Android, iOS, Windows Phone, Tizen"
msgstr "**モバイル:** Android、iOS、Windows Phone、Tizen"

#: ../../docs/getting_started/editor/unity_to_godot.rst:29
msgid "**Web:** WebAssembly or asm.js"
msgstr "**Web:** WebAssemblyまたはasm.js"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid "**Consoles:** PS4, PS Vita, Xbox One, Xbox 360, Wii U, Nintendo 3DS"
msgstr ""
"**コンソール:** PS4、PS Vita、Xbox One、Xbox 360、Wii U、ニンテンドー3DS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:31
#, fuzzy
msgid ""
"**VR:** Oculus Rift, SteamVR, Google Cardboard, PlayStation VR, Gear VR, "
"HoloLens"
msgstr ""
"**VR:** Oculus Rift、SteamVR、Google Cardboard、Playstation VR、Gear VR、"
"HoloLens"

#: ../../docs/getting_started/editor/unity_to_godot.rst:32
msgid "**TV:** Android TV, Samsung SMART TV, tvOS"
msgstr "**TV:** Android TV、Samsung SMART TV、tvOS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
msgid "**Desktop:** Windows, macOS, X11"
msgstr "**デスクトップ:** Windows、macOS、X11"

#: ../../docs/getting_started/editor/unity_to_godot.rst:28
msgid "**Mobile:** Android, iOS"
msgstr "**モバイル:** Android、iOS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:29
msgid "**Web:** WebAssembly"
msgstr "\\ **Web:** WebAssembly"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid "**Console:** See :ref:`doc_consoles`"
msgstr "**コンソール:** :ref:`doc_consoles`\\ を参照"

#: ../../docs/getting_started/editor/unity_to_godot.rst:31
msgid "**VR:** Oculus Rift, SteamVR"
msgstr "**VR:** Oculus Rift、SteamVR"

#: ../../docs/getting_started/editor/unity_to_godot.rst:34
msgid "Scene system"
msgstr "シーンシステム"

#: ../../docs/getting_started/editor/unity_to_godot.rst:34
msgid "Component/Scene (GameObject > Component)"
msgstr "コンポーネント/シーン(ゲームオブジェクト>コンポーネント)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:35
msgid "Prefabs"
msgstr "プレハブ"

#: ../../docs/getting_started/editor/unity_to_godot.rst:34
msgid ""
":ref:`Scene tree and nodes <doc_scenes_and_nodes>`, allowing scenes to be "
"nested and/or inherit other scenes"
msgstr ""
"\\ :ref:`Scene tree and nodes <doc_scenes_and_nodes>` 、シーンをネストした"
"り、他のシーンを継承したりできます"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid "Third-party tools"
msgstr "サードパーティ製ツール"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid "Visual Studio or VS Code"
msgstr "Visual StudioまたはVisual Studio Code"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid ":ref:`External editors are possible <doc_external_editor>`"
msgstr "\\ :ref:`外部エディタが使用可能 <doc_external_editor>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:38
msgid ":ref:`Android SDK for Android export <doc_exporting_for_android>`"
msgstr ":ref:`Android SDK for Androidエクスポート <doc_exporting_for_android>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:40
msgid "Notable advantages"
msgstr "注目すべき利点"

#: ../../docs/getting_started/editor/unity_to_godot.rst:40
msgid "Huge community"
msgstr "巨大なコミュニティ"

#: ../../docs/getting_started/editor/unity_to_godot.rst:41
msgid "Large assets store"
msgstr "大規模なアセットストア"

#: ../../docs/getting_started/editor/unity_to_godot.rst:40
msgid "Scene System"
msgstr "シーンシステム"

#: ../../docs/getting_started/editor/unity_to_godot.rst:41
msgid ":ref:`Animation Pipeline <doc_animations>`"
msgstr "\\ :ref:`アニメーションパイプライン<doc_animations>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:42
msgid ":ref:`Easy to write Shaders <doc_shading_language>`"
msgstr "\\ :ref:`シェーダーを書きやすい<doc_shading_language>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:43
msgid "Debug on Device"
msgstr "デバイスでのデバッグ"

#: ../../docs/getting_started/editor/unity_to_godot.rst:50
msgid "The editor"
msgstr "エディタ"

#: ../../docs/getting_started/editor/unity_to_godot.rst:52
msgid ""
"Godot Engine provides a rich-featured editor that allows you to build your "
"games. The pictures below display the default layouts of both editors with "
"colored blocks to indicate common functionalities."
msgstr ""
"Godoエンジンは、ゲームの構築を可能にする豊富な機能を備えたエディタを提供しま"
"す。以下の図は、両方のエディタのデフォルトのレイアウトを色付きのブロックで表"
"示して、共通する機能を示しています。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:58
msgid ""
"While both editors may seem similar, there are many differences below the "
"surface. Both let you organize the project using the filesystem, but Godot's "
"approach is simpler with a single configuration file, minimalist text "
"format, and no metadata. This makes Godot more friendly to VCS systems, such "
"as Git, Subversion, or Mercurial."
msgstr ""
"両方のエディタは似ているように見えるかもしれませんが、表面の下には多くの違い"
"があります。どちらもファイルシステムを使用してプロジェクトを整理できますが、"
"Godotのアプローチは、単一の構成ファイル、最小限のテキスト形式、メタデータなし"
"でより簡単です。これにより、Git、Subversion、MercurialなどのVCSシステムで"
"Godotがより使いやすくなります。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:63
msgid ""
"Godot's Scene panel is similar to Unity's Hierarchy panel but, as each node "
"has a specific function, the approach used by Godot is more visually "
"descriptive. It's easier to understand what a scene does at a glance."
msgstr ""
"GodotのSceneパネルはUnityのHierarchyパネルに似ていますが、各ノードには特定の"
"機能があるため、Godotで使用されるアプローチは視覚的にわかりやすくなっていま"
"す。シーンが何をしているのかが一目でわかります。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:67
msgid ""
"The Inspector in Godot is more minimal, it shows only properties. Thanks to "
"this, objects can expose more useful parameters to the user without having "
"to hide functionality in language APIs. As a plus, Godot allows animating "
"any of those properties visually. Changing colors, textures, enumerations, "
"or even links to resources in real-time is possible without needing to write "
"code."
msgstr ""
"Godotのインスペクタは最小限であり、プロパティのみを表示します。これにより、オ"
"ブジェクトは、言語APIの機能を隠すことなく、より有用なパラメーターをユーザーに"
"公開できます。さらに、Godotではこれらのプロパティを視覚的にアニメーション化で"
"きます。コードを記述する必要なく、色、テクスチャ、列挙、またはリソースへのリ"
"ンクをリアルタイムで変更できます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:72
msgid ""
"The Toolbar at the top of the screen is similar in both editors, offering "
"control over project playback. Projects in Godot run in a separate window, "
"rather than inside the editor (but the tree and objects can still be "
"explored in the debugger window)."
msgstr ""
"画面上部のツールバーは両方のエディタで似ており、プロジェクトの再生を制御でき"
"ます。 Godotのプロジェクトは、エディター内ではなく、別のウィンドウで実行され"
"ます(ただし、ツリーとオブジェクトは、デバッガウィンドウで引き続きGodot内で探"
"索できます)。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:76
#, fuzzy
msgid "This approach has several advantages:"
msgstr "それぞれに異なる利点があります。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:78
msgid ""
"Running the project and closing it is fast (Unity has to save, run the "
"project, close the project, and then reload the previous state)."
msgstr ""
"プロジェクトの実行と終了は高速です (Unity は、プロジェクトを保存して実行し、"
"プロジェクトを閉じてから、前の状態を再度読み込む必要があります)。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:79
msgid ""
"Live editing is a lot more useful because changes done to the editor take "
"effect immediately in the game and are not lost (nor have to be synced) when "
"the game is closed. This allows fantastic workflows, like creating levels "
"while you play them."
msgstr ""
"ライブ編集は、エディタに加えた変更がゲーム内で直ちに有効になり、ゲームが閉じ"
"られても失われない(同期する必要がない)ため、はるかに便利です。これにより、プ"
"レイ中にレベルを作成するなどの素晴らしいワークフローが可能になります。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:80
msgid "The editor is more stable because the game runs in a separate process."
msgstr "ゲームは別のプロセスで実行されるため、エディタはより安定しています。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:81
msgid ""
"The running game can be explored from different angles by toggling the "
"\"Camera Override\" button in the editor viewport, which will switch between "
"using the editor view and the game camera view."
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:83
msgid ""
"Finally, Godot's top toolbar includes a menu for remote debugging. These "
"options allow deployment to a device (connected phone, tablet, or browser "
"via HTML5), and debugging/live editing on it after the game is exported."
msgstr ""
"最後に、Godotの上部のツールバーには、リモートデバッグ用のメニューが含まれてい"
"ます。これらのオプションを使用すると、デバイス(HTML5を介して接続されたスマ"
"ホ、タブレット、またはブラウザー)への展開、およびゲームのエクスポート後のデ"
"バッグ/ライブ編集が可能になります。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:88
msgid "The scene system"
msgstr "シーンシステム"

#: ../../docs/getting_started/editor/unity_to_godot.rst:90
#, fuzzy
msgid ""
"This is the most important difference between Unity and Godot and the "
"favorite feature of most Godot users."
msgstr ""
"これは、UnityとGodotの最も重要な違いであり、ほとんどのGodotユーザーのお気に入"
"りの機能です。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:92
msgid ""
"Working on a 'level' in Unity usually means embedding all the required "
"assets in a scene and linking them together with components and scripts."
msgstr ""
"Unityの「レベル」で作業することは、通常、シーンにすべての必要なアセットを埋め"
"込み、コンポーネントおよびスクリプトとリンクすることを意味します。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:95
msgid ""
"Godot's scene system is superficially similar to Unity. A 'level' consists "
"of a collection of nodes, each with its own purpose: Sprite, Mesh, Light, "
"etc. However, in Godot the nodes are arranged in a tree. Each node can have "
"multiple children, which makes each a subscene of the main scene. This means "
"you can compose a whole scene with different scenes stored in different "
"files."
msgstr ""
"Godotのシーンシステムは、表面的にUnityに似ています。 「レベル」は、それぞれ独"
"自の目的(スプライト、メッシュ、ライトなど)を持つノードのコレクションで構成さ"
"れます。ただし、Godotでは、ノードはツリーに配置されます。各ノードは複数の子を"
"持つことができ、それぞれがメインシーンのサブシーンになります。これは、異なる"
"ファイルに保存された異なるシーンでシーン全体を構成できることを意味します。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:98
msgid ""
"For example, think of a platformer level. You would compose it with multiple "
"elements:"
msgstr ""
"たとえば、プラットフォーマーレベルを考えてみましょう。複数の要素で構成します:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:100
msgid "Bricks"
msgstr "レンガ"

#: ../../docs/getting_started/editor/unity_to_godot.rst:101
msgid "Coins"
msgstr "コイン"

#: ../../docs/getting_started/editor/unity_to_godot.rst:102
msgid "The player"
msgstr "プレイヤー"

#: ../../docs/getting_started/editor/unity_to_godot.rst:103
msgid "The enemies"
msgstr "敵"

#: ../../docs/getting_started/editor/unity_to_godot.rst:105
msgid ""
"In Unity, you would put all the GameObjects in the scene: the player, "
"multiple instances of enemies, bricks everywhere to form the ground of the "
"level and then multiple instances of coins all over the level. You would "
"then add various components to each element to link them and add logic in "
"the level: For example, you'd add a BoxCollider2D to all the elements of the "
"scene so that they can collide. This principle is different in Godot."
msgstr ""
"Unityでは、すべてのGameObjectをシーンに配置します:プレイヤー、敵の複数のイン"
"スタンス、レンガを至る所に配置してレベルの地面を形成し、次にレベル全体にコイ"
"ンの複数のインスタンスを配置します。次に、さまざまなコンポーネントを各要素に"
"追加してそれらをリンクし、レベルにロジックを追加します。たとえば、"
"BoxCollider2Dをシーンのすべての要素に追加して、それらが衝突できるようにしま"
"す。この原則はGodotでは異なります。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:110
msgid ""
"In Godot, you would split your whole scene into three separate, smaller "
"scenes, and instance them in the main scene."
msgstr ""
"Godotでは、シーン全体を3つの独立した小さなシーンに分割し、メインシーンでイン"
"スタンス化します。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:112
msgid "**A scene for the Player alone.**"
msgstr "**プレイヤーだけのシーン**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:114
msgid ""
"Consider the player as an element we'd like to use in different parent "
"scenes (for instance 'level' scenes). In our case, the player element needs "
"at least an AnimatedSprite node. This node contains the sprite textures "
"necessary for various animations (for example, a walking animation)."
msgstr ""
"プレイヤーを、異なる親シーン(たとえば、「レベル」シーン)で使用する要素として"
"考えます。この場合、プレイヤー要素には少なくともAnimatedSpriteノードが必要で"
"す。このノードには、さまざまなアニメーション(歩行アニメーションなど)に必要な"
"スプライトテクスチャが含まれています。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:116
msgid "**A scene for the Enemy.**"
msgstr "**敵のシーン**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:118
#, fuzzy
msgid ""
"An enemy is also an element we'd like to use in several scenes. It's almost "
"the same as the Player node. The only differences are the script (it needs "
"'AI' routines to generate the enemy's behavior) and the sprite textures used "
"by the AnimatedSprite node."
msgstr ""
"敵は、いくつかのシーンで使用したい要素でもあります。プレイヤーノードとほぼ同"
"じですが、唯一の違いは、スクリプト(敵の行動を生成するために「AI」ルーチンが必"
"要)と、AnimatedSpriteノードで使用されるスプライトテクスチャです。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:122
msgid "**A Level scene.**"
msgstr "**レベルシーン**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:124
#, fuzzy
msgid ""
"A Level scene is composed of Bricks (for platforms), Coins (for the player "
"to collect) and a number of instances of the Enemy scene. Each instance is a "
"node in the Level scene tree. These instances are separate enemies, which "
"initially have shared behavior and appearance as defined in the Enemy scene. "
"You can set different properties for each Enemy node (to change its color, "
"for example)."
msgstr ""
"レベルシーンは、レンガ(プラットフォーム用)、コイン(プレイヤーが収集するた"
"め)、および敵シーンのいくつかのインスタンスで構成されます。各インスタンスは、"
"レベルシーンツリーのノードです。これらのインスタンスは別々の敵であり、最初は"
"敵のシーンで定義されている動作と外観を共有しています。敵のノードごとに異なる"
"プロパティを設定できます(たとえば、個々の色を変更するため)。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:128
msgid ""
"4. **A Main scene.** The Main scene would be composed of one root node with "
"2 children: a Player instance node, and a Level instance node. The root node "
"can be anything, generally a \"root\" type such as \"Node\" which is the "
"most global type, or \"Node2D\" (root type of all 2D-related nodes), "
"\"Spatial\" (root type of all 3D-related nodes) or \"Control\" (root type of "
"all GUI-related nodes)."
msgstr ""
"4. **メインシーン。** メインシーンは、2つの子を持つ1つのルートノードで構成さ"
"れます:プレイヤーインスタンスノードとレベルインスタンスノード。ルートノードは"
"何でもかまいません。通常、最もグローバルなタイプである \"Node\" などの「ルー"
"ト」タイプ、または \"Node2D\" (すべての2D関連ノードのルートタイプ)、\"Spatial"
"\" (すべての3D-関連ノード)または \"Control\" (すべてのGUI関連ノードのルートタ"
"イプ)です。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:134
msgid ""
"As you can see, every scene is organized as a tree. The same goes for nodes' "
"properties: you don't *add* a collision component to a node to make it "
"collidable like Unity does. Instead, you make this node a *child* of a new "
"specific node that has collision properties. Godot features various "
"collision types nodes, depending on the usage (see the :ref:`Physics "
"introduction <doc_physics_introduction>`)."
msgstr ""
"ご覧のとおり、すべてのシーンはツリーとして整理されています。ノードのプロパ"
"ティについても同じことが言えます。コリジョンコンポーネントをノードに *追加* "
"して、Unityのように衝突可能にしないでください。代わりに、このノードを衝突プロ"
"パティを持つ新しい特定のノードの *子* にします。 Godotには、使用法に応じてさ"
"まざまな衝突タイプのノードがあります( :ref:`Physics introduction "
"<doc_physics_introduction>` を参照)。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:139
msgid ""
"What are the advantages of this system? Wouldn't this system potentially "
"increase the depth of the scene tree? And doesn't Unity already allow you to "
"organize GameObjects by putting them inside empty GameObjects?"
msgstr ""
"このシステムの利点は何ですか？このシステムはシーンツリーの深さを潜在的に増加"
"させませんか？また、Unityではすでに、空のGameObjects内にGameObjectsを配置し"
"て、それを整理することを許可していませんか？"

#: ../../docs/getting_started/editor/unity_to_godot.rst:141
msgid ""
"Godot's system is closer to the well-known object-oriented paradigm: Godot "
"provides a number of nodes which are not clearly \"Game Objects\", but they "
"provide their children with their own capabilities: this is inheritance."
msgstr ""
"Godotのシステムは、よく知られているオブジェクト指向のパラダイムにより近いもの"
"です。Godotは、明らかに「ゲームオブジェクト」ではない多くのノードを提供します"
"が、子には独自の機能を提供します:これは継承です。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:142
msgid ""
"Godot allows the extraction of a subtree of a scene to make it a scene of "
"its own. So if a scene tree gets too deep, it can be split into smaller "
"subtrees. This is better for reusability, as you can include any subtree as "
"a child of any node. Putting multiple GameObjects in an empty GameObject in "
"Unity does not provide the same functionality."
msgstr ""
"Godotでは、シーンのサブツリーを抽出して、それを独自のシーンにすることができま"
"す。そのため、シーンツリーが深くなりすぎると、より小さなサブツリーに分割でき"
"ます。任意のサブツリーを任意のノードの子として含めることができるため、これは"
"再利用性がより優れています。 Unityの空のGameObjectに複数のGameObjectを配置し"
"ても、同じ機能は提供されません。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:145
msgid "Project organization"
msgstr "プロジェクトの構成"

#: ../../docs/getting_started/editor/unity_to_godot.rst:149
msgid ""
"There is no perfect project architecture. Any architecture can be made to "
"work in either Unity and Godot."
msgstr ""
"完璧なプロジェクトアーキテクチャはありません。 UnityおよびGodotで動作するよう"
"に、任意のアーキテクチャを作成できます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:152
msgid ""
"However, a common architecture for Unity projects is to have one Assets "
"folder in the root directory that contains various folders, one per type of "
"asset: Audio, Graphics, Models, Materials, Scripts, Scenes, and so on."
msgstr ""
"ただし、Unityプロジェクトの一般的なアーキテクチャでは、ルートディレクトリに"
"Assetsフォルダが1つあり、このフォルダ内に、オーディオ、グラフィック、モデル、"
"マテリアル、スクリプト、シーンなど、アセットの種類ごとにさまざまなフォルダが"
"含まれます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:155
msgid ""
"Since Godot allows splitting scenes into smaller scenes, each scene and "
"subscene existing as a file in the project, we recommend organizing your "
"project a bit differently. This wiki provides a page for this: :ref:"
"`doc_project_organization`."
msgstr ""
"Godotではシーンを小さなシーンに分割することができるため、各シーンとサブシーン"
"はプロジェクト内のファイルとして存在します。そのため、プロジェクトを少し異な"
"る方法で整理することをお勧めします。このwikiはこのためのページを提供します: :"
"ref:`doc_project_organization`\\ 。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:160
msgid "Where are my prefabs?"
msgstr "プレハブはどこですか?"

#: ../../docs/getting_started/editor/unity_to_godot.rst:162
msgid ""
"A prefab as provided by Unity is a 'template' element of the scene. It is "
"reusable, and each instance of the prefab that exists in the scene has an "
"existence of its own, but all of them have the same properties as defined by "
"the prefab."
msgstr ""
"Unityによって提供されるプレハブは、シーンの「テンプレート」要素です。これは再"
"利用可能で、シーン内に存在するプレハブの各インスタンスはそれ自体の存在を持ち"
"ますが、それらのすべてがプレハブで定義されているものと同じプロパティを持ちま"
"す。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:166
msgid ""
"Godot does not provide prefabs as such, but the same functionality is "
"provided by its scene system: The scene system is organized as a tree. Godot "
"allows you to save any subtree of a scene as a scene file. This new scene "
"can then be instanced as many times as you want, as a child of any node. Any "
"change you make to this new, separate scene will be applied to its "
"instances. However, any change you make to the instance will not have any "
"impact on the 'template' scene."
msgstr ""
"Godotはプレハブ自体を提供しませんが、同じ機能がシーンシステムによって提供され"
"ます。シーンシステムはツリーとして編成されます。 Godotでは、シーンのサブツ"
"リーをシーンファイルとして保存できます。この新しいシーンは、任意のノードの子"
"として、何度でもインスタンス化できます。この新しい個別のシーンに加えた変更"
"は、そのインスタンスに適用されます。ただし、インスタンスに加えた変更は、「テ"
"ンプレート」シーンには影響しません。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:173
msgid ""
"To be precise, you can modify the parameters of an instance in the Inspector "
"panel. The nodes that compose this instance are initially locked. You can "
"unlock them if you need to by right-clicking the instance in the Scene tree "
"and selecting \"Editable children\" in the menu. You don't need to do this "
"to add *new* child nodes to this node. Remember that any new children will "
"belong to the instance, not to the 'template' scene on disk. If you want to "
"add new children to every instance of your 'template' scene, then you should "
"add them in the 'template' scene."
msgstr ""
"正確には、インスペクタパネルでインスタンスのパラメーターを変更できます。この"
"インスタンスを構成するノードは、最初はロックされています。必要に応じて、シー"
"ンツリーでインスタンスを右クリックし、メニューで[編集可能な子]を選択してロッ"
"クを解除できます。このノードに *新しい* 子ノードを追加するためにこれを行う必"
"要はありません。新しい子は、ディスク上の「テンプレート」シーンではなく、イン"
"スタンスに属することに注意してください。 「テンプレート」シーンのすべてのイン"
"スタンスに新しい子を追加する場合は、「テンプレート」シーン自体に追加する必要"
"があります。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:183
msgid "Glossary correspondence"
msgstr "用語集の対応"

#: ../../docs/getting_started/editor/unity_to_godot.rst:185
msgid "GameObject -> Node"
msgstr "GameObject(ゲームオブジェクト) -> Node(ノード)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:186
msgid "Add a component -> Inheriting"
msgstr "Add a component(コンポーネントの追加) -> Inheriting(インスタンス化)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:187
msgid "Prefab -> Reusable Scene file"
msgstr "Prefab(プレハブ) -> Reusable Scene file(再利用可能なシーンファイル)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:191
msgid "Scripting: GDScript, C# and Visual Script"
msgstr "スクリプト: GDScript、C#、ビジュアルスクリプト"

#: ../../docs/getting_started/editor/unity_to_godot.rst:194
msgid "Design"
msgstr "デザイン"

#: ../../docs/getting_started/editor/unity_to_godot.rst:196
msgid ""
"Unity supports C#. C# benefits from its integration with Visual Studio and "
"has desirable features such as static typing."
msgstr ""
"Unity は C# をサポートしています。C# には Visual Studio と統合されているとい"
"う利点があり、静的な型指定などの望ましい機能があります。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:198
msgid ""
"Godot provides its own scripting language, :ref:`GDScript <doc_scripting>` "
"as well as support for :ref:`Visual Script <toc-learn-scripting-"
"visual_script>` and :ref:`C# <doc_c_sharp>`. GDScript borrows its syntax "
"from Python, but is not related to it. If you wonder about the reasoning for "
"a custom scripting language, please read the :ref:`doc_gdscript` and :ref:"
"`doc_faq` pages. GDScript is strongly attached to the Godot API and doesn't "
"take long to learn: Between one evening for an experienced programmer and a "
"week for a complete beginner."
msgstr ""
"Godot は独自のスクリプト言語 :ref:`GDScript <doc_scripting>` と、 :ref:"
"`Visual Script <toc-learn-scripting-visual_script>` および :ref:`C# "
"<doc_c_sharp>` のサポートを提供します。GDScript は Python から構文を借用しま"
"したが直接的な関連はありません。カスタム スクリプト言語について不明な点があれ"
"ば、 :ref:`doc_gdscript` と :ref:`doc_faq` ページをお読みください。GDScript "
"は Godot API に強く結び付けられており、学習に時間はかかりません: 経験豊富なプ"
"ログラマなら 1 晩から 1 週間で習得出来ます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:204
#, fuzzy
msgid ""
"Unity allows you to attach as many scripts as you want to a GameObject. Each "
"script adds a behavior to the GameObject: For example, you can attach a "
"script so that it reacts to the player's controls, and another that controls "
"its specific game logic."
msgstr ""
"Unityでは、必要な数のスクリプトをGameObjectに添付できます。各スクリプトは、ビ"
"ヘイビアーをGameObjectに追加します。たとえば、プレイヤーのコントロールに反応"
"するようにスクリプトを添付し、特定のゲームロジックを制御するスクリプトを追加"
"できます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:208
msgid ""
"In Godot, you can only attach one script per node. You can use either an "
"external GDScript file or include the script directly in the node. If you "
"need to attach more scripts to one node, then you may consider two "
"solutions, depending on your scene and on what you want to achieve:"
msgstr ""
"Godotでは、ノードごとに1つのスクリプトのみを添付できます。外部GDScriptファイ"
"ルを使用するか、スクリプトをノードに直接含めることができます。 1つのノードに"
"さらにスクリプトをアタッチする必要がある場合、シーンと目的に応じて、2つの解決"
"策を検討できます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:212
msgid ""
"either add a new node between your target node and its current parent, then "
"add a script to this new node."
msgstr ""
"ターゲットノードと現在の親ノードの間に新しいノードを追加し、この新しいノード"
"にスクリプトを追加します。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:213
msgid ""
"or, you can split your target node into multiple children and attach one "
"script to each of them."
msgstr ""
"または、ターゲットノードを複数の子に分割し、それぞれに1つのスクリプトをアタッ"
"チできます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:215
msgid ""
"As you can see, it can be easy to turn a scene tree to a mess. Consider "
"splitting any complicated scene into multiple, smaller branches."
msgstr ""
"ご覧のとおり、シーンツリーを混乱させるのは簡単です。複雑なシーンを複数の小さ"
"なブランチに分割することを検討してください。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:218
msgid "Connections: groups and signals"
msgstr "接続:グループとシグナル"

#: ../../docs/getting_started/editor/unity_to_godot.rst:220
msgid ""
"You can control nodes by accessing them via script and calling built-in or "
"user-defined functions on them. You can also place nodes in a group and call "
"functions on all nodes in this group. See more in the :ref:`scripting "
"documentation <doc_scripting_continued>`."
msgstr ""
"ノードを制御するには、スクリプトを使用してノードにアクセスし、ノードの組み込"
"み関数またはユーザー定義関数を呼び出します。また、グループ内にノードを配置"
"し、このグループ内のすべてのノードで関数を呼び出すこともできます。詳細につい"
"ては、 :ref:`scripting documentation <doc_scripting_continued>` を参照してく"
"ださい。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:225
msgid ""
"Nodes can send a signal when a specified action occurs. A signal can be set "
"to call any function. You can define custom signals and specify when they "
"are triggered. See more in the :ref:`signals documentation "
"<doc_gdscript_signals>`."
msgstr ""
"ノードは、指定されたアクションが発生したときにシグナルを送信できます。シグナ"
"ルは、任意の関数を呼び出すように設定できます。カスタムシグナルを定義して、ト"
"リガーされるタイミングを指定できます。詳細は、 :ref:`signals documentation "
"<doc_gdscript_signals>` を参照してください。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:230
msgid "Script serialization"
msgstr "スクリプトのシリアル化"

#: ../../docs/getting_started/editor/unity_to_godot.rst:232
msgid "Unity can handle script serialization in two ways:"
msgstr "Unityは、次の2つの方法でスクリプトのシリアル化を処理できます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:234
msgid ""
"Implicit: All public fields in a class are automatically serialized if the "
"type is a serializable type (``Dictionary`` is not serializable)."
msgstr ""
"暗黙的:型がシリアル化可能な型である場合、クラス内のすべてのパブリックフィール"
"ドは自動的にシリアル化されます(``Dictionary`` はシリアル化できません)。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:235
msgid ""
"Explicit: Non-public fields can be serialized using the ``[SerializeField]`` "
"attribute."
msgstr ""
"明示的:非パブリックフィールドは ``[SerializeField]`` 属性を使用してシリアル化"
"できます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:237
msgid ""
"Godot also has a built-in script serialization system, but it works only "
"explicitly. You can serialize any serializable type (:ref:`built-in and "
"various engine types <doc_binary_serialization_api>`, including :ref:"
"`class_Array` and :ref:`class_Dictionary`) using the ``export`` keyword. See "
"the :ref:`exports documentation <doc_gdscript_exports>` for details."
msgstr ""
"Godot にはスクリプトシリアル化システムも組み込まれていますが、明示的にしか動"
"作しません。 ``export`` キーワードを使用して、シリアル化可能な型 (:ref:"
"`class_Array` と :ref:`class_Dictionary` を含む :ref:`built-in and various "
"engine types <doc_binary_serialization_api>`)をシリアル化できます。詳細につい"
"ては、 :ref:`exports documentation <doc_gdscript_exports>` を参照してくださ"
"い。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:242
msgid ""
"Unity also has a data type called ``ScriptableObject`` used to serialize "
"custom asset objects. Its equivalent in Godot is the base class for all "
"resources: :ref:`class_Resource`. Creating a script that inherits :ref:"
"`class_Resource` will allow you to create custom serializable objects. More "
"information about resources can be found :ref:`here <doc_resources>`."
msgstr ""
"Unityには、カスタムアセットオブジェクトのシリアル化に使用される "
"``ScriptableObject`` と呼ばれるデータ型もあります。Godotでの同等のものは、す"
"べてのリソースの基本クラスです :ref:`class_Resource`\\ 。 :ref:"
"`class_Resource` を継承するスクリプトを作成すると、カスタムのシリアライズ可能"
"なオブジェクトを作成できます。リソースの詳細については、 :ref:`こちら"
"<doc_resources>` をご覧ください。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:247
msgid "Using Godot in C++"
msgstr "C++でGodotを使用する"

#: ../../docs/getting_started/editor/unity_to_godot.rst:249
msgid ""
"Godot allows you to develop your project directly in C++ by using its API, "
"which is not possible with Unity at the moment. As an example, you can "
"consider Godot Engine's editor as a \"game\" written in C++ using the Godot "
"API."
msgstr ""
"Godotでは、APIを使用してC ++でプロジェクトを直接開発できますが、現時点のUnity"
"では不可能です。例として、Godot エンジンのエディタは、Godot APIを使用してC+"
"+で記述された「ゲーム」と見なすことができます。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:252
msgid ""
"If you are interested in using Godot in C++, you may want to start reading "
"the :ref:`Developing in C++ <doc_introduction_to_godot_development>` page."
msgstr ""
"C++でGodotを使うことに興味があるなら、\\ :ref:`C++での開発 "
"<doc_introduction_to_godot_development>`\\ のページを読んでみるとよいでしょ"
"う。"
