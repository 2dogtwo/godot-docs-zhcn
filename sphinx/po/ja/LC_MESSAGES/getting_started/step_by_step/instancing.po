# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/instancing.rst:4
msgid "Instancing"
msgstr "インスタンス"

#: ../../docs/getting_started/step_by_step/instancing.rst:7
msgid "Introduction"
msgstr "はじめに"

#: ../../docs/getting_started/step_by_step/instancing.rst:9
msgid ""
"Creating a single scene and adding nodes into it might work for small "
"projects, but as a project grows in size and complexity, the number of nodes "
"can quickly become unmanageable. To address this, Godot allows a project to "
"be separated into any number of scenes. This provides you with a powerful "
"tool that helps you organize the different components of your game."
msgstr ""
"1つのシーンを作成してノードを追加すると、小規模なプロジェクトでは機能します"
"が、プロジェクトのサイズと複雑さが増すにつれて、ノードの数がすぐに管理できな"
"くなる可能性があります。これに対処するために、Godot ではプロジェクトを任意の"
"数のシーンに分割することが許されています。これにより、ゲームのさまざまなコン"
"ポーネントを整理するのに役立つ強力なツールが提供されます。"

#: ../../docs/getting_started/step_by_step/instancing.rst:15
msgid ""
"In :ref:`doc_scenes_and_nodes` you learned that a scene is a collection of "
"nodes organized in a tree structure, with a single node as the tree root."
msgstr ""
":ref:`doc_scenes_and_nodes`\\ では、シーンはツリー構造で編成されたノードのコ"
"レクションであり、単一のノードがツリールートであることを学びました。"

#: ../../docs/getting_started/step_by_step/instancing.rst:20
msgid ""
"You can create as many scenes as you like and save them to disk. Scenes "
"saved in this manner are called \"Packed Scenes\" and have a ``.tscn`` "
"filename extension."
msgstr ""
"必要な数のシーンを作成し、ディスクに保存できます。この方法で保存されたシーン"
"は「パックされたシーン」と呼ばれ、 ``.tscn`` の拡張子を持ちます。"

#: ../../docs/getting_started/step_by_step/instancing.rst:26
msgid ""
"Once a scene has been saved, it can be instanced into another scene as if it "
"were any other node."
msgstr ""
"セーブしたシーンは、他のノードと同じように別のシーンでインスタンス化できま"
"す。"

#: ../../docs/getting_started/step_by_step/instancing.rst:31
msgid "In the above picture, Scene B was added to Scene A as an instance."
msgstr "上の図では、シーンBがインスタンスとしてシーンAに追加されました。"

#: ../../docs/getting_started/step_by_step/instancing.rst:34
msgid "Instancing by example"
msgstr "インスタンス化の例"

#: ../../docs/getting_started/step_by_step/instancing.rst:36
msgid ""
"To learn how instancing works, let's start by downloading a sample project: :"
"download:`instancing.zip <files/instancing.zip>`."
msgstr ""
"インスタンス化のしくみを学ぶには、サンプル プロジェクトをダウンロードして始め"
"ましょう: :download:`instancing.zip <files/instancing.zip>`\\ 。"

#: ../../docs/getting_started/step_by_step/instancing.rst:39
msgid ""
"Unzip this project anywhere you like. Then open Godot and add this project "
"to the project manager using the 'Import' button:"
msgstr ""
"このプロジェクトを任意の場所で解凍します。次に、Godotを開き、[インポート]ボタ"
"ンを使用してこのプロジェクトをプロジェクト管理者に追加します:"

#: ../../docs/getting_started/step_by_step/instancing.rst:44
msgid ""
"Browse to the folder you extracted and open the \"project.godot\" file you "
"can find inside it. After doing this, the new project will appear on the "
"list of projects. Edit the project by pressing the 'Edit' button."
msgstr ""
"抽出したフォルダを参照し、その中にある「project.godot」ファイルを開きます。こ"
"れを行うと、新しいプロジェクトがプロジェクトの一覧に表示されます。[編集]ボタ"
"ンを押してプロジェクトを編集します。"

#: ../../docs/getting_started/step_by_step/instancing.rst:48
msgid ""
"This project contains two scenes: \"Ball.tscn\" and \"Main.tscn\". The ball "
"scene uses a :ref:`RigidBody2D <class_RigidBody2D>` to provide physics "
"behavior while the main scene has a set of obstacles for the ball to collide "
"with (using :ref:`StaticBody2D <class_StaticBody2D>`)."
msgstr ""
"このプロジェクトには、「Ball.tscn」と「Main.tscn」の2つのシーンがあります。"
"ボール シーンは\\ :ref:`RigidBody2D <class_RigidBody2D>`\\ を使用して物理動作"
"(のシミュレート)を提供し、メイン シーンにはボールが衝突する障害物のセットがあ"
"ります (\\ :ref:`StaticBody2D <class_StaticBody2D>`\\ を使用)。"

#: ../../docs/getting_started/step_by_step/instancing.rst:57
msgid "Open the ``Main`` scene, and then select the root node:"
msgstr "``Main`` シーンを開き、ルート ノードを選択します:"

#: ../../docs/getting_started/step_by_step/instancing.rst:61
msgid ""
"We want to add an instance of the ``Ball`` scene as a child of ``Main``. "
"Click the \"link\"-shaped button (its hover-text says \"Instance a scene "
"file as a Node.\") and select the ``Ball.tscn`` file."
msgstr ""
"``Main`` の子として ``Ball`` シーンのインスタンスを追加したいと思います。「リ"
"ンク」の形のボタン(ホバーテキストに「シーンファイルをノードとしてインスタンス"
"設定する」と表示)をクリックし、 ``Ball.tscn`` ファイルを選択します。"

#: ../../docs/getting_started/step_by_step/instancing.rst:67
msgid ""
"The ball will be placed at the top-left corner of the screen area (this is "
"``(0, 0)`` in screen coordinates). Click and drag the ball somewhere near "
"the top-center of the scene:"
msgstr ""
"ボールは画面領域の左上隅に配置されます(画面座標では ``(0,0)`` です)。ボールを"
"クリックし、シーンの上部中央付近にドラッグします:"

#: ../../docs/getting_started/step_by_step/instancing.rst:73
msgid "Press \"Play\" and watch the ball fall to the bottom of the screen:"
msgstr "「再生」を押して、ボールが画面の下部に落ちるのを確認します:"

#: ../../docs/getting_started/step_by_step/instancing.rst:78
msgid "Multiple instances"
msgstr "複数のインスタンス"

#: ../../docs/getting_started/step_by_step/instancing.rst:80
msgid ""
"You can add as many instances as you like to a scene, either by using the "
"\"Instance\" button again, or by clicking on the ball instance and pressing :"
"kbd:`Ctrl + D` (:kbd:`Cmd + D` on macOS) to duplicate it:"
msgstr ""
"再び[インスタンス]ボタンを使用するかボールインスタンスをクリックして[複製] (:"
"kbd:`Ctrl + D`) を押すことで、好きなだけインスタンスをシーンに追加できます:"

#: ../../docs/getting_started/step_by_step/instancing.rst:86
msgid "Run the scene again and all of the balls will fall."
msgstr "シーンを再び実行すると、ボールのすべてが落下します。"

#: ../../docs/getting_started/step_by_step/instancing.rst:91
msgid "Editing instances"
msgstr "インスタンスの編集"

#: ../../docs/getting_started/step_by_step/instancing.rst:93
msgid ""
"Open the ``Ball`` scene, expand the ``PhysicsMaterial`` by clicking on it, "
"and set the ``Bounce`` property to ``1``."
msgstr ""
"``Ball`` シーンを開き、 ``PhysicsMaterial`` をクリックして展開し、 "
"``Bounce`` プロパティを ``1`` に設定します。"

#: ../../docs/getting_started/step_by_step/instancing.rst:98
msgid ""
"Press \"Play\" and notice that all of the instanced balls are now much more "
"bouncy. Because the instanced balls are based on the saved scene, changes to "
"that scene will affect all instances."
msgstr ""
"Playを押してください。インスタンス化された全部のボールがより弾むようになりま"
"した。インスタンス化されたボールはセーブした同じシーンに基づくので、そのシー"
"ンを変更するとすべてのインスタンスに影響を与えます。"

#: ../../docs/getting_started/step_by_step/instancing.rst:102
msgid ""
"You can also adjust individual instances. Set the bounce value back to ``0`` "
"and then in the ``Main`` scene, select one of the instanced balls. Resources "
"like ``PhysicsMaterial`` are shared between instances by default, so we need "
"to make it unique. Click on the tools button in the top-right of the "
"Inspector dock and select \"Make Sub-Resources Unique\". Set its ``Bounce`` "
"to ``1`` and press \"Play\"."
msgstr ""
"個々のインスタンスを調整することもできます。 ``Bounce`` の値を ``0`` に戻し"
"て、 ``Main`` シーンでインスタンス化したボールを一つ選んでください。 "
"``PhysicsMaterial`` のようなリソースは、デフォルトでインスタンス間で共有され"
"ます。したがって、それをユニークにする必要があります。下向きの矢印を押して"
"「サブリソースをユニーク化する」を選んでください。その ``Bounce`` を ``1`` に"
"セットしてから「実行」を押してください。"

#: ../../docs/getting_started/step_by_step/instancing.rst:111
msgid ""
"Notice that a grey \"revert\" button appears next to the adjusted property. "
"When this button is present, it means you modified a property in the "
"instanced scene to override its value in the saved scene. Even if that "
"property is modified in the original scene, the custom value will remain. "
"Pressing the revert button will restore the property to the value in the "
"saved scene."
msgstr ""
"調整されたプロパティの横に灰色の「元に戻す」ボタンが表示されます。 このボタン"
"が表示されている場合は、インスタンス化されたシーンのプロパティを変更して、保"
"存されたシーンの値を上書きすることを意味します。 そのプロパティが元のシーンで"
"変更されても、カスタム値は残ります。 元に戻すボタンを押すと、保存されている"
"シーンの値にプロパティが復元されます。"

#: ../../docs/getting_started/step_by_step/instancing.rst:119
msgid "Conclusion"
msgstr "結論"

#: ../../docs/getting_started/step_by_step/instancing.rst:121
msgid ""
"Instancing can be useful when you want to create many copies of the same "
"object. It is also possible to create instances in code by using GDScript, "
"see :ref:`doc_instancing_continued`."
msgstr ""
"同じオブジェクトのコピーを作りたいとき、インスタンス化は便利です。また"
"GDScriptを使ってコードでインスタンスを作ることもできます。\\ :ref:"
"`doc_instancing`\\ を御覧ください。"
