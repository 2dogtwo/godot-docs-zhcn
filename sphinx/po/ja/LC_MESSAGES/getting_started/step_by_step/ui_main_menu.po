# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-02 13:32+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:4
msgid "Design a title screen"
msgstr "タイトル画面のデザイン"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:6
msgid ""
"In the next two tutorials, you will build two responsive UI (user interface) "
"scenes step-by-step using the engine's UI system:"
msgstr ""
"次のチュートリアル2つでは、エンジンのUIシステムを使用して、2つのレスポンシブ"
"UI(ユーザーインターフェイス)シーンを1ステップずつ構築していきます:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:9
msgid "A main menu."
msgstr "メインメニュー。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:10
msgid "A game UI with a health bar, energy bar, bomb and money counters."
msgstr "体力バー、エネルギーバー、爆弾およびお金のカウンターからなるゲームUI。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:12
msgid ""
"You will learn how to design game UIs efficiently, and how to use Godot's "
"Control nodes. This page focuses on the visual part: everything you do from "
"the editor. To learn how to code a life bar, read :doc:`ui_code_a_life_bar`."
msgstr ""
"ここでは効率的にゲームUIをデザインする方法と、Godotのコントロールノードの使い"
"方を紹介します。このページでは視覚面に主眼を置き、すべてエディタ操作のみで完"
"結します。ライフバーのコードの書き方を知るには、次を見て下さい\\ :doc:"
"`ui_code_a_life_bar`\\ 。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:20
msgid "The GUI you're going to create."
msgstr "作成するGUI。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:22
msgid ""
"Download the project files: :download:`ui_main_menu_design.zip <files/"
"ui_main_menu_design.zip>` and extract the archive. Import the ``start/`` "
"project in Godot to follow this tutorial. The ``end/`` folder contains the "
"final result. You'll find all the sprites in the ``start/assets/main_menu`` "
"folder."
msgstr ""
"プロジェクト用ファイル\\ :download:`ui_main_menu_design.zip <files/"
"ui_main_menu_design.zip>`\\ をダウンロードして、解凍してください。チュートリ"
"アルのために、Godotで\\ ``start/``\\ プロジェクトをインポートしてくださ"
"い。\\ ``end/``\\ フォルダには最終結果が入っています。\\ ``start/assets/"
"main_menu``\\ フォルダにはすべてのスプライトがあります。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:30
msgid ""
"Read the :doc:`ui_introduction_to_the_ui_system` first to learn how Godot's "
"UI system works."
msgstr ""
"GodotのUIシステムの仕組みを知るには、まず\\ :doc:"
"`ui_introduction_to_the_ui_system`\\ を見て下さい。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:34
msgid "How to design your game UI"
msgstr "ゲームUIの設計方法"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:36
msgid ""
"To design a good UI, you want to come up with a rough mockup first: a plain "
"drawing version that focuses on the placement of your UI components, their "
"size, and user interaction. Pen and paper is all you need. You shouldn't use "
"fancy and final graphics at this stage. Then, you only need simple "
"placeholder sprites and you're good to jump into Godot. You want to make "
"sure the players can find their way around the interface using those "
"placeholders."
msgstr ""
"優れたUIを設計するには、まず大まかなモックアップを作成します。必要なのはペン"
"と紙だけです。この段階では、凝った最終的なグラフィックスは使用しないでくださ"
"い。何を選択すればどこに進むか分かる程度の大まかな図で十分です。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:46
msgid "The UI's rough plan or mockup"
msgstr "UIの大まかな計画またはモックアップ"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:48
msgid ""
"Placeholder doesn't have to mean ugly, but you should keep the graphics "
"simple and clean. Avoid special effects, animation, and detailed "
"illustration before you have players playtest your UI. Otherwise:"
msgstr ""
"仮のUIであってもわざわざ醜くする必要はありませんが、少なくとも簡潔なグラ"
"フィックスにしてください。プレイヤーがUIをテストプレイする前は、特別なエフェ"
"クト、アニメーション、詳細なイラストは避けるべきです。でなければ:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:52
msgid ""
"The graphics might skew the players' perception of the experience and you'll "
"miss out on valuable feedback."
msgstr ""
"グラフィックがプレイヤーのエクスペリエンスへの認識を歪め、貴重なフィードバッ"
"クを見逃す可能性があります。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:54
msgid "If the User Experience doesn't work, you'll have to redo some sprites."
msgstr ""
"ユーザーエクスペリエンスが機能しない時に、いくつかのスプライトをやり直さない"
"といけなくなる場合があります。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:58
msgid ""
"Always try to make the interface work with simple text and boxes first. It's "
"easy to replace the textures later. Professional UX designers often work "
"with plain outlines and boxes in greyscale. When you take colors and fancy "
"visuals away, it's a lot easier to size and place UI elements properly. It "
"helps you refine the design foundation you'll build upon."
msgstr ""
"まず、シンプルなテキストとボックスを使用してインタフェースを動作させるように"
"してください。テクスチャは後で簡単に置き換えることができます。プロのUXデザイ"
"ナーは、グレースケールのアウトラインやボックスを使って作業することがよくあり"
"ます。カラーや派手なビジュアルを排除すれば、UI要素のサイズや配置を適切に行う"
"ことがずっと簡単になります。これにより、設計基盤を洗練させることができます。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:65
msgid "There are two ways to design your UI in Godot. You can:"
msgstr "GodotでUIをデザインするには2つの方法があります。次のことができます:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:67
msgid ""
"Build it all in a single scene, and eventually save some branches as "
"reusable scenes."
msgstr ""
"すべてを1つのシーンに構築し、最終的にはいくつかのブランチを再利用可能なシーン"
"として保存する方法。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:69
msgid ""
"Build template scenes for reusable components and create specific components "
"that inherit from your base scenes."
msgstr ""
"再利用可能なコンポーネントのテンプレートシーンを作成し、ベースシーンから継承"
"する特定のコンポーネントを作成する方法。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:72
msgid ""
"We will use the first approach, because the first version of your UI may not "
"work as well as you'd like. You're likely to throw parts away and redesign "
"components as you go. When you're sure everything works, it's easy to make "
"some parts reusable, as you'll see below."
msgstr ""
"ここでは最初の方法を使います。UIの最初のバージョンは期待どおりには動作しない"
"場合があるためです。そうなると、パーツを廃棄してコンポーネントを１から作り直"
"すことになるでしょう。次に示すように、うまく機能していることが確認してから、"
"一部のパーツを再利用可能にすることは簡単です。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:79
msgid ""
"The files you'll find in Godot. The graphics look cleaner than on the rough "
"design, but they're still placeholders."
msgstr ""
"Godotにあるファイル。このグラフィックはラフデザインよりもきれいに見えますが、"
"まだその代替品にすぎません。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:83
msgid "Design the main menu"
msgstr "メインメニューのデザイン"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:85
msgid ""
"Before we jump into the editor, we want to plan how we'll nest containers "
"based on our mockup image."
msgstr ""
"エディタに入る前に、モックアップイメージに基づいてコンテナーをネストする方法"
"を計画します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:89
#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:292
msgid "Break down the UI mockup"
msgstr "UIモックアップを分割"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:91
msgid "Here are my three rules of thumb to find the right containers:"
msgstr "適切なコンテナを見つけるための3つの経験則を以下に示します:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:93
msgid ""
"Break down the UI into nested boxes, from the largest that contains "
"everything, to the smallest ones, that encompass one widget, like a bar with "
"its label, a panel or a button."
msgstr ""
"UIを、すべてを含む最大のボックスから、ラベルの付いたバー、パネル、ボタンなど"
"の、1つのウィジェットを含む最小のボックスまで、ボックスに階層構造を持たせて分"
"割します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:96
msgid "If there's some padding around an area, use a ``MarginContainer``."
msgstr "領域の周囲に余白がある場合は、\\ ``MarginContainer`` を使用します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:97
msgid ""
"If the elements are arranged in rows or columns, use an ``HBoxContainer`` or "
"``VBoxContainer``."
msgstr ""
"要素が行または列に配置されている場合は、 ``HBoxContainer`` または "
"``VBoxContainer`` を使用します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:100
msgid ""
"These rules are enough to get us started, and work well for simple "
"interfaces."
msgstr ""
"これらの規則は、私たちが始めるために十分なものであり、単純なインターフェース"
"に対してはうまく機能します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:103
msgid ""
"For the main menu, the largest box is the entire game window. There's "
"padding between the edges of the window and the first components: this "
"should be a ``MarginContainer``. Then, the screen is split into two columns, "
"so we'll use an ``HBoxContainer``. In the left column, we'll manage the rows "
"with a ``VBoxContainer``. And in the right column, we'll center the "
"illustration with a ``CenterContainer``."
msgstr ""
"メインメニューでは、最大のボックスはゲームウィンドウ全体です。ウィンドウの端"
"と最初のコンポーネントの間には余白があります。これは ``MarginContainer`` にす"
"る必要があります。次に、画面は2列に分割されているので、 ``HBoxContainer`` を"
"使用します。左側の列では、 ``VBoxContainer`` を使用して行を管理します。 右側"
"の列では、 ``CenterContainer`` を使用して図の中央に配置します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:112
msgid "Interface building blocks, broken down using the three rules of thumb."
msgstr "3つの経験則に基づいて分類されたインタフェースの構成要素。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:116
msgid ""
"Containers adapt to the window's resolution and width-to-height ratio. "
"Although we could place UI elements by hand, containers are faster, more "
"precise, and **responsive**."
msgstr ""
"コンテナはウィンドウの解像度と幅と高さの比率に適応します。UI要素を手動で配置"
"することもできますが、コンテナの方が高速で、正確で、\\ **応答性に優れています"
"**\\ 。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:121
msgid "Prepare the Main Menu scene"
msgstr "メインメニューシーンの準備"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:125
msgid ""
"This tutorial is based on a window size of 1366×768. To change the project's "
"base window size, open **Project > Project Settings** at the top of the "
"editor then change **Display > Window > Size > Width** to ``1366`` and "
"**Display > Window > Size > Height** to ``768``."
msgstr ""
"このチュートリアルでは、ウィンドウサイズを1366×768に設定しています。プロジェ"
"クトの基本ウィンドウサイズを変更するには、エディタの上部にある **プロジェク"
"ト → プロジェクト設定** を開き、 **Display → Window → Size → Width** を "
"``1366`` に、 **Display → Window → Size → Height** を ``768`` に変更してくだ"
"さい。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:130
msgid ""
"If you forget to change the window size, anchors and containers may not "
"behave as expected."
msgstr ""
"このウィンドウサイズの変更を忘れると、アンカーやコンテナの動作が期待通りにな"
"らないかもしれません。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:133
msgid ""
"Let's create the main menu. We'll build it in a single scene. To create an "
"empty scene, click on **Scene > New Scene**."
msgstr ""
"メインメニューを作成してみましょう。単一のシーンで構築します。空のシーンを作"
"成するには「シーンメニュー」 の「新規シーン」をクリックします。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:136
msgid ""
"We have to add a root node before we can save the scene. Your UI's root "
"should be the outermost container or element. In this case it's a "
"``MarginContainer``. ``MarginContainer`` is a good starting point for most "
"interfaces, as you often need padding around the UI. Press :kbd:`Ctrl + S` (:"
"kbd:`Cmd + S` on macOS) to save the scene to the disk. Name it *MainMenu*."
msgstr ""
"シーンを保存する前に、ルートノードを追加する必要があります。 UIのルートは、最"
"も外側のコンテナまたは要素である必要があります。この場合、それは "
"``MarginContainer`` です。多くの場合、UIの周囲にはパディングが必要になるた"
"め、\\ ``MarginContainer`` はほとんどのインタフェースの出発点として適していま"
"す。\\ :kbd:`Ctrl + S` (macOSでは :kbd:`Cmd + S`) を押してシーンをディスクに"
"保存します。それに\\ *MainMenu* という名前を付けます。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:142
msgid ""
"Select the ``MarginContainer`` again, and head to the inspector to define "
"the margins' size. Scroll down the ``Control`` class, to the ``Custom "
"Constants`` section. Unfold it. Set the margins as such:"
msgstr ""
"もう一度 ``MarginContainer`` を選択し、インスペクタに進んで余白のサイズを定義"
"します。 ``Control`` クラスを下にスクロールして ``Custom Constants`` セクショ"
"ンに移動します。余白を次のように設定します:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:146
msgid "Margin Right: *120*"
msgstr "右マージン: *120*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:147
msgid "Margin Top: *80*"
msgstr "上マージン: *80*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:148
msgid "Margin Left: *120*"
msgstr "左マージン: *120*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:149
msgid "Margin Bottom: *80*"
msgstr "下マージン: *80*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:151
msgid ""
"We want the container to fit the window. In the toolbar above the Viewport, "
"open the **Layout** menu and select the last option, **Full Rect**."
msgstr ""
"コンテナをウィンドウに合わせます。 ビューポートの上のツールバー中の\\ **レイ"
"アウト**\\ メニューを開き、最後のオプション\\ **Rect全面**\\ を選択します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:155
msgid "Add the UI sprites"
msgstr "UIスプライトを追加する"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:157
msgid ""
"Select the ``MarginContainer``, and create the UI elements as "
"``TextureRect`` nodes. We need:"
msgstr ""
"``MarginContainer`` を選択し、UI要素を ``TextureRect`` ノードとして作成しま"
"す。必要なもの:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:160
msgid "the title or logo,"
msgstr "タイトルまたはロゴ、"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:161
msgid "the three text options as individual nodes,"
msgstr "3つのテキスト選択項目を個別のノードで、"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:162
msgid "the version note,"
msgstr "バージョン表示、"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:163
msgid "and the main menu's illustration."
msgstr "そしてメインメニューのイラスト。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:165
msgid ""
"Click the **Add Node** button or press :kbd:`Ctrl + A` (:kbd:`Cmd + A` on "
"macOS) on your keyboard. Start to type ``TextureRect`` to find the "
"corresponding node and press enter. With the new node selected, press :kbd:"
"`Ctrl + D` (:kbd:`Cmd + D` on macOS) five times to create five extra "
"``TextureRect`` instances."
msgstr ""
"**ノードを追加** ボタンをクリックするか、キーボードの :kbd:`Ctrl + A` (macOS"
"では :kbd:`Cmd + A`) を押します。\\ ``TextureRect`` と入力して対応するノード"
"を検索し、Enterキーを押します。新しいノードを選択した状態で、\\ :kbd:`Ctrl + "
"D` (macOSでは :kbd:`Cmd + D`) を5回押して、追加の ``TextureRect`` インスタン"
"スを5つ作成します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:170
msgid ""
"Click each of the nodes to select it. In the inspector, find the **Texture** "
"property and click **[empty] > Load**. A file browser opens and lets you "
"pick a sprite to load into the texture slot."
msgstr ""
"各ノードをクリックして選択します。インスペクタで **Texture** プロパティを見つ"
"け、\\ **[空] > 読込み** をクリックします。ファイルブラウザが開き、テクスチャ"
"スロットにロードするためのスプライトを選択できます。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:176
msgid "The file browser lets you find and load textures."
msgstr ""
"ファイルブラウザを使用すると、テクスチャを検索してロードすることができます。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:178
msgid ""
"Repeat the operation for all ``TextureRect`` nodes. You should have the "
"logo, the illustration, the three menu options and the version note, each as "
"a separate node. Then, double click on each of the nodes in the Scene tab to "
"rename them. Nothing has been placed in containers yet so this should look "
"messy."
msgstr ""
"すべての ``TextureRect`` ノードに対して操作を繰り返します。ロゴ、イラスト、３"
"つのメニューオプション、バージョンノートがそれぞれ別個のノードとして必要で"
"す。次に、[シーン]タブの各ノードをダブルクリックして、名前を変更します。コン"
"テナにはまだ何も配置されていないため、このままでは乱雑に見えるはずです。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:186
msgid "The six nodes with textures loaded."
msgstr "テクスチャがロードされた6つのノード。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:190
msgid ""
"If you want to support localization in your game, use ``Labels`` for menu "
"options instead of ``TextureRect``."
msgstr ""
"ゲームを多言語化対応させたい場合は、\\ ``TextureRect`` の代わりにメニューオプ"
"ションに ``Labels`` を使用してください。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:194
msgid "Add containers to place UI elements automatically"
msgstr "UI要素を自動配置するコンテナを追加する"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:196
msgid ""
"Our main menu has some margin around the edges of the screen. It is split in "
"two parts: on the left, you have the logo and the menu options. On the "
"right, you have the characters. We can use one of two containers to achieve "
"this: ``HSplitContainer`` or ``HBoxContainer``. Split containers split the "
"area into two: a left and a right side or a top and a bottom side. They also "
"allow the user to resize the left and right areas using an interactive bar. "
"On the other hand, ``HBoxContainer`` just splits itself into as many columns "
"as it has children. Although you can deactivate the split container's resize "
"behavior, I recommend to favor box containers."
msgstr ""
"メインメニューは画面の端にマージンがあります。2つの部分に分かれていて、左側に"
"はロゴとメニュー項目があります。右側にはキャラクターたちがいます。これを実現"
"するには、 ``HSplitContainer`` または ``HBoxContainer`` という2つのコンテナの"
"いずれかを使用します。分割(Split)コンテナは、領域を左右または上下に分割しま"
"す。また、インタラクティブなバーを使用して、左右の領域のサイズを変更すること"
"もできます。一方、 ``HBoxContainer`` は、子の数と同数の列に分割します。分割コ"
"ンテナでもサイズ変更動作を無効にできますが、Boxコンテナを優先することをお勧め"
"します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:207
msgid ""
"Select the ``MarginContainer`` and add an ``HBoxContainer``. Then, we need "
"two containers as children of our ``HBoxContainer``: a ``VBoxContainer`` for "
"the menu options on the left, and a ``CenterContainer`` for the illustration "
"on the right."
msgstr ""
"``MarginContainer`` を選択してから、 ``HBoxContainer`` を追加します。次に、 "
"``HBoxContainer`` の子として2つのコンテナが必要です。左側にはメニュー項目用と"
"して ``VBoxContainer`` 、右側にはイラスト用として ``CenterContainer`` を使い"
"ます。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:214
msgid ""
"You should have four nested containers and the TextureRect nodes sitting "
"aside from it."
msgstr ""
"4つの入れ子になったコンテナと、それとは別に複数のTextureRectノードがあるはず"
"です。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:217
msgid ""
"In the node tree, select all the ``TextureRect`` nodes that should go on the "
"left side: the logo, the menu options (Continue, NewGame, Options), and the "
"version note. Drag and drop them into the ``VBoxContainer``. The nodes "
"should position automatically."
msgstr ""
"ノードツリーで、左側にあるすべての ``TextureRect`` ノードを選択します (ロゴ、"
"メニュー項目、バージョン表記)。それから、それらを ``VBoxContainer`` にドラッ"
"グ＆ドロップします。これらのノードは自動配置されるはずです。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:224
msgid "Containers automatically place and resize textures"
msgstr "コンテナは自動的にテクスチャを配置してサイズを変更します"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:226
msgid "We're left with two problems to solve:"
msgstr "解決すべき問題はあと2つ残されています:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:228
msgid "The characters on the right aren't centered."
msgstr "右側のキャラクターたちが中央に配置されていません。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:229
msgid "There's no space between the logo and the other UI elements."
msgstr "ロゴと他のUI要素の間にスペースがありません。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:231
msgid ""
"To center the characters on the right, first select the ``CenterContainer``. "
"Then in the Inspector, scroll down to the **Size Flags** category and click "
"on the field to the right of the **Vertical** property, and check **Expand** "
"in addition to **Fill**. Do the same for the **Horizontal** property. This "
"makes the ``CenterContainer`` expand into all available space while "
"respecting its neighbour ``VBoxContainer``. Finally, drag and drop the "
"Characters node into the ``CenterContainer``. The Characters element will "
"center automatically."
msgstr ""
"キャラクターたちを右に中央揃えするには、最初に ``CenterContainer`` を選択しま"
"す。次に、インスペクタで **Size Flags** カテゴリまで下にスクロールし、 "
"**Vertical** プロパティの右側のフィールドをクリックして、 **Fill** に加えて "
"**Expand** をチェックします。 **Horizontal** プロパティについても同じことを行"
"います。これにより、 ``CenterContainer`` は、隣接する ``VBoxContainer`` を尊"
"重しながら、使用可能なすべてのスペースに拡張されます。最後に、Charactersノー"
"ドを ``CenterContainer`` にドラッグ＆ドロップします。Characters要素は自動的に"
"中央に配置されます。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:242
msgid ""
"The character node centers inside the right half of the screen as soon as "
"you place it inside the CenterContainer."
msgstr ""
"キャラクターノードは、CenterContainer内に配置するとすぐに画面の右半分の中央に"
"配置されます。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:245
msgid ""
"To space out the menu options and the logo on the left, we'll use one final "
"container and its size flags. Select the ``VBoxContainer`` and press :kbd:"
"`Ctrl + A` (:kbd:`Cmd + A` on macOS) to add a new node inside it. Add a "
"second ``VBoxContainer`` and name it *MenuOptions*. Select all three menu "
"options, ``Continue``, ``NewGame`` and ``Options``, and drag and drop them "
"inside the new ``VBoxContainer``. The UI's layout should barely change, if "
"at all."
msgstr ""
"メニューオプションと左側のロゴの間隔を空けるために、1つの最終コンテナとそのサ"
"イズフラグを使用します。\\ ``VBoxContainer`` を選択して :kbd:`Ctrl + A` "
"(macOSでは :kbd:`Cmd + A`) を押し、その中に新しいノードを追加します。2番目の "
"``VBoxContainer`` を追加して、\\ *MenuOptions* という名前を付けます。3つのメ"
"ニューオプション ``Continue``\\ 、\\ ``NewGame`` \\ 、\\ ``Options`` をすべて"
"選択し、新しい ``VBoxContainer`` 内にドラッグ&ドロップします。 UIのレイアウト"
"は、もし変わるとしてもわずかです。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:255
msgid ""
"Place the new container between the other two nodes to retain the UI's "
"layout."
msgstr ""
"UIのレイアウトを保持するには、他の2つのノードの間(LogoとVersionの間)に新しい"
"コンテナーを配置します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:258
msgid ""
"Now we grouped the menu options together, we can tell their container to "
"expand to take as much vertical space as possible. Select the "
"``MenuOptions`` node. In the Inspector, scroll down to the **Size Flags** "
"category. Click on the field to the right of the **Vertical** property, and "
"check **Expand** in addition to **Fill**. The container expands to take all "
"the available vertical space while respecting its neighbors, the ``Logo`` "
"and ``Version`` elements."
msgstr ""
"ここで、メニューオプションをグループ化して、コンテナを拡張し、できるだけ多く"
"の垂直方向のスペースを取るように指示することができます。まず ``MenuOptions`` "
"ノードを選択します。インスペクタで、 **Size Flags** カテゴリまでスクロールダ"
"ウンします。 **Vertical** プロパティの右側のフィールドをクリックし、 "
"**Fill** に加えて **Expand** をチェックします。コンテナは、隣接する ``Logo`` "
"要素と ``Version`` 要素を尊重しながら、利用可能なすべての垂直方向のスペースを"
"取るように拡張します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:266
msgid ""
"To center the nodes in the ``VBoxContainer``, scroll to the top of the "
"Inspector and change the **Alignment** property to **Center**."
msgstr ""
"ノードを ``VBoxContainer`` の中央に配置するには、インスペクタの一番上までスク"
"ロールし、 **Alignment** プロパティを **Center** に変更します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:271
msgid "The menu options should center vertically in the UI's left column."
msgstr ""
"メニューオプションは、UIの左カラムの縦方向の中央に配置する必要があります。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:273
msgid ""
"To wrap things up, let's add some separation between the menu options. "
"Expand the **Custom Constants** category below **Size Flags**, and click the "
"field next to the **Separation** parameter. Set it to 30. Once you press "
"enter, the **Separation** property becomes active and Godot adds 30 pixels "
"between menu options."
msgstr ""
"最後に、メニューオプションの間に区切りを追加します。 **Size Flags** の下の "
"**Custom Constants** カテゴリを展開し、 **Separation** パラメータの横のフィー"
"ルドをクリックして、値を30に設定します。Enterキーを押すと、 **Separation** プ"
"ロパティがアクティブになり、Godotはメニューオプションの間に30ピクセルを追加し"
"ます。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:281
msgid "The final interface."
msgstr "完成したインターフェイス。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:283
msgid ""
"Without a single line of code, we have a precise and responsive main menu."
msgstr "一行のコードも書かずに、正確で応答性の高いメインメニューができました。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:286
msgid ""
"Congratulations for getting there! You can download the final menu :download:"
"`ui_main_menu_design.zip <files/ui_main_menu_design.zip>` to compare with "
"your own. In the next tutorial, you'll create a Game User Interface with "
"bars and item counters."
msgstr ""
"おめでとうございます！　自分で作ったメニューとの比較用に、完成済みメニュー"
"\\ :download:`ui_main_menu_design.zip <files/ui_main_menu_design.zip>`\\ をダ"
"ウンロードできます。次のチュートリアルでは、バーとアイテムカウンターを含む"
"ゲームユーザーインターフェイスを作成します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:294
msgid ""
"A responsive User Interface is all about making sure our UIs scale well on "
"all screen types. TV screens and computer displays have different sizes and "
"ratios. In Godot, we use containers to control the position and the size of "
"UI elements."
msgstr ""
"レスポンシブなユーザーインターフェイスとは、すべての画面タイプで適切にスケー"
"リングされるように作られたUIです。テレビ画面とコンピューターのディスプレイ"
"は、サイズと比率が異なります。 Godotでは、コンテナを使用してUI要素の位置とサ"
"イズを制御します。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:299
msgid ""
"The order in which you nest matters. To see if your UI adapts nicely to "
"different screen ratios, select the root node, press :kbd:`Q` to activate "
"the Select Mode, select the container and click and drag on one of the "
"container's corners to resize it. The UI components should flow inside of it."
msgstr ""
"ネストの順序が重要です。UIがさまざまな画面比率にうまく適応しているかどうかを"
"確認するには、ルートノードを選択し、\\ :kbd:`Q` を押して[選択モード]をアク"
"ティブにしてコンテナを選択し、コンテナのコーナーの1つをクリック&ドラッグして"
"サイズを変更します。UIコンポーネントはその内部を流れて移動する必要がありま"
"す。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:305
msgid ""
"You'll notice that although containers move sprites around, they don't scale "
"them. This is normal. We want the UI system to handle different screen "
"ratios, but we also need the entire game to adapt to different screen "
"resolutions. To do this, Godot scales the entire window up and down."
msgstr ""
"コンテナはスプライトを動かしていますが、スケーリングはしていません。これは正"
"常です。UIシステムがさまざまな画面比率を処理できるようにしたいのですが、ゲー"
"ム全体をさまざまな画面解像度に適応させる必要もあります。これを行うために、"
"Godotはウィンドウ全体を上下にスケーリングします。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:311
msgid ""
"You can change the scale mode in the project settings: click **Project > "
"Project Settings** in the top menu. In the window's left column, look for "
"the **Display** category. Click on the **Window** sub-category. On the right "
"side of the window, you'll find a **Stretch** section. The three settings, "
"**Mode**, **Aspect**, and **Shrink**, control the screen size. For more "
"information, see :ref:`doc_multiple_resolutions`."
msgstr ""
"プロジェクト設定でスケールモードを変更するには、上部メニューから\\ **プロジェ"
"クト → プロジェクト設定** をクリックします。ウィンドウ左側のカラムにある、\\ "
"**Display**\\ カテゴリを探します。\\ **Window**\\ サブカテゴリをクリックしま"
"す。ウィンドウの右側に、\\ **Stretch**\\ セクションがあります。\\ **Mode**"
"\\ 、\\ **Aspect**\\ 、\\ **Shrink**\\ の3つの設定は、画面サイズを制御しま"
"す。詳細については、\\ :ref:`doc_multiple_resolutions`\\ を参照してください。"
