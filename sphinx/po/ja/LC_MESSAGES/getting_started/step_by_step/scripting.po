# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting.rst:4
msgid "Scripting"
msgstr "スクリプト"

#: ../../docs/getting_started/step_by_step/scripting.rst:7
msgid "Introduction"
msgstr "はじめに"

#: ../../docs/getting_started/step_by_step/scripting.rst:9
msgid ""
"Before Godot 3.0, the only choice for scripting a game was to use :ref:"
"`GDScript<doc_gdscript>`. Nowadays, Godot has four (yes, four!) official "
"languages and the ability to add extra scripting languages dynamically!"
msgstr ""
"Godot 3.0以前は、ゲームのスクリプトを作成するための唯一の選択肢はGDScriptを使"
"用することだけでした。現在、Godotには4つの(そうです、4つも！)公式言語と、追加"
"のスクリプト言語を動的に追加する機能があります！"

#: ../../docs/getting_started/step_by_step/scripting.rst:13
msgid ""
"This is great, mostly due to the large amount of flexibility provided, but "
"it also makes our work supporting languages more difficult."
msgstr ""
"これは素晴らしいことです。提供される柔軟性が大きくなるからです。ですがその反"
"面、それぞれの言語をサポートする作業がより困難になります。"

#: ../../docs/getting_started/step_by_step/scripting.rst:16
msgid ""
"The \"main\" languages in Godot, though, are GDScript and VisualScript. The "
"main reason to choose them is their level of integration with Godot, as this "
"makes the experience smoother; both have slick editor integration, while C# "
"and C++ need to be edited in a separate IDE. If you are a big fan of "
"statically typed languages, go with C# and C++ instead."
msgstr ""
"ただし、Godotの「主要な」言語はGDScriptとVisualScriptです。それらを選択する主"
"な理由は、Godotとの統合レベルが高いからです。これにより、開発作業がよりスムー"
"ズになります。どちらも洗練されたエディタと統合されています。一方、C#とC++は別"
"のIDEで編集する必要があります。もしもあなたが静的に型付けされた言語の大ファン"
"であれば、C#とC++を使用してください。"

#: ../../docs/getting_started/step_by_step/scripting.rst:22
msgid "GDScript"
msgstr "\\ GDScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:24
msgid ""
":ref:`GDScript<doc_gdscript>` is, as mentioned above, the main language used "
"in Godot. Using it has some positive points compared to other languages due "
"to its high integration with Godot:"
msgstr ""
"上記のように、\\ :ref:`GDScript <doc_gdscript>` はGodotで使用されるメインの言"
"語です。 Godotとの高度な統合により、他の言語と比較していくつかの利点がありま"
"す。"

#: ../../docs/getting_started/step_by_step/scripting.rst:28
msgid ""
"It's simple, elegant, and designed to be familiar for users of other "
"languages such as Lua, Python, Squirrel, etc."
msgstr ""
"シンプルでエレガントで、Lua、Python、Squirrelなどの他の言語のユーザーになじみ"
"があるように設計されています。"

#: ../../docs/getting_started/step_by_step/scripting.rst:29
msgid "Loads and compiles blazingly fast."
msgstr "読み込みとコンパイルが非常に高速です。"

#: ../../docs/getting_started/step_by_step/scripting.rst:30
msgid ""
"The editor integration is a pleasure to work with, with code completion for "
"nodes, signals, and many other items pertaining to the scene being edited."
msgstr ""
"エディタの統合は、ノード、シグナル、および編集中のシーンに関連する他の多くの"
"項目のコード補完を使用してくれるので作業するのが楽しいです。"

#: ../../docs/getting_started/step_by_step/scripting.rst:31
msgid ""
"Has vector types built-in (such as Vectors, transforms, etc.), making it "
"efficient for heavy use of linear algebra."
msgstr ""
"ベクトル型(ベクトル、幾何学変換など)が組み込まれており、線形代数を大量に使用"
"する場合に効率的です。"

#: ../../docs/getting_started/step_by_step/scripting.rst:32
msgid ""
"Supports multiple threads as efficiently as statically typed languages - one "
"of the limitations that made us avoid VMs such as Lua, Squirrel, etc."
msgstr ""
"静的に型指定された言語と同じくらい効率的に複数のスレッドをサポートします - "
"Lua、SquirrelなどのVMを避けた理由のひとつはスレッド処理に制限があるからです。"

#: ../../docs/getting_started/step_by_step/scripting.rst:33
msgid ""
"Uses no garbage collector, so it trades a small bit of automation (most "
"objects are reference counted anyway), by determinism."
msgstr ""
"ガベージコレクタを使用しないため、決定論によって多少の自動化(ほとんどのオブ"
"ジェクトはいずれにしても参照としてカウントされる)を犠牲にします。"

#: ../../docs/getting_started/step_by_step/scripting.rst:34
msgid ""
"Its dynamic nature makes it easy to optimize sections of code in C++ (via "
"GDNative) if more performance is required, all without recompiling the "
"engine."
msgstr ""
"その動的な性質により、より高いパフォーマンスが必要な場合には、エンジンを再コ"
"ンパイルすることなく、コードの一部をC++ (GDNative経由) で簡単に最適化すること"
"ができます。"

#: ../../docs/getting_started/step_by_step/scripting.rst:36
msgid ""
"If you're undecided and have experience with programming, especially "
"dynamically typed languages, go for GDScript!"
msgstr ""
"もしあなたがどの言語を使用するかをまだ決めておらず、プログラミング、特に動的"
"型付け言語の経験があるなら、GDScriptを選んでください!"

#: ../../docs/getting_started/step_by_step/scripting.rst:40
msgid "VisualScript"
msgstr "VisualScript(ビジュアルスクリプト)"

#: ../../docs/getting_started/step_by_step/scripting.rst:42
msgid ""
"Beginning with 3.0, Godot offers :ref:`Visual "
"Scripting<doc_what_is_visual_script>`. This is a typical implementation of a "
"\"blocks and connections\" language, but adapted to how Godot works."
msgstr ""
"Godotは3.0から、\\ :ref:`ビジュアルスクリプト <doc_what_is_visual_script>`\\ "
"を提供しています。これは「ブロックと接続」言語の典型的な実装ですが、Godotの動"
"作に適合しています。"

#: ../../docs/getting_started/step_by_step/scripting.rst:46
msgid ""
"Visual scripting is a great tool for non-programmers, or even for "
"experienced developers who want to make parts of the code more accessible to "
"others, like game designers or artists."
msgstr ""
"ビジュアルスクリプトは、プログラマ以外のユーザーや、ゲームデザイナーやアー"
"ティストなどの他のユーザーに、コードの一部を容易にアクセスさせたい経験豊富な"
"開発者にとっても最適なツールです。"

#: ../../docs/getting_started/step_by_step/scripting.rst:50
msgid ""
"It can also be used by programmers to build state machines or custom visual "
"node workflows - for example, a dialogue system."
msgstr ""
"また、プログラマがステートマシンやカスタム・ビジュアルノード・ワークフロー(対"
"話システムなど)を構築するためにも使用できます。"

#: ../../docs/getting_started/step_by_step/scripting.rst:55
msgid ".NET / C#"
msgstr "\\ .NET / C#"

#: ../../docs/getting_started/step_by_step/scripting.rst:57
msgid ""
"As Microsoft's C# is a favorite amongst game developers, we have added "
"official support for it. C# is a mature language with tons of code written "
"for it, and support was added thanks to a generous donation from Microsoft."
msgstr ""
"マイクロソフトのC#はゲーム開発者の間でお気に入りなので、公式サポートを追加し"
"ました。C#は、大量のコードが書かれた成熟した言語であり、マイクロソフトからの"
"寛大な寄付のおかげでサポートが追加されました。"

#: ../../docs/getting_started/step_by_step/scripting.rst:62
msgid ""
"It has an excellent tradeoff between performance and ease of use, although "
"one must be aware of its garbage collector."
msgstr ""
"ガベージコレクタに注意する必要がありますが、パフォーマンスと使いやすさの間に"
"は優れたトレードオフがあります。"

#: ../../docs/getting_started/step_by_step/scripting.rst:65
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory any third-party .NET library or framework can be used for scripting "
"in Godot, as well as any Common Language Infrastructure-compliant "
"programming language, such as F#, Boo or ClojureCLR. In practice however, C# "
"is the only officially supported .NET option."
msgstr ""
"Godotは\\ `Mono <https://mono-project.com>`_ .NETランタイムを使用するため、理"
"論的には、サードパーティの.NETライブラリまたはフレームワークをGodotのスクリプ"
"トに使用できます。また、F#、Boo、ClojureCLRなどの共通言語インフラストラクチャ"
"に準拠したプログラミング言語も使用できます。 ただし、実際には、C#が公式にサ"
"ポートされている唯一の.NETオプションです。"

#: ../../docs/getting_started/step_by_step/scripting.rst:71
msgid "GDNative / C++"
msgstr "\\ GDNative / C++"

#: ../../docs/getting_started/step_by_step/scripting.rst:73
msgid ""
"Finally, one of our brightest additions for the 3.0 release: GDNative allows "
"scripting in C++ without needing to recompile (or even restart) Godot."
msgstr ""
"最後に、3.0リリースにおいて特に輝かしい追加物の1つ: GDNativeを使用すると、"
"Godotを再コンパイル(または再起動すら)しなくてもC++でスクリプトを作成できま"
"す。"

#: ../../docs/getting_started/step_by_step/scripting.rst:77
msgid ""
"Any C++ version can be used, and mixing compiler brands and versions for the "
"generated shared libraries works perfectly, thanks to our use of an internal "
"C API Bridge."
msgstr ""
"内部C API Bridgeを使用しているため、任意のC++バージョンを使用することができ、"
"生成された共有ライブラリ用のコンパイラブランドとバージョンが混在していても完"
"全に機能します。"

#: ../../docs/getting_started/step_by_step/scripting.rst:81
msgid ""
"This language is the best choice for performance and does not need to be "
"used throughout an entire game, as other parts can be written in GDScript or "
"Visual Script. However, the API is clear and easy to use as it resembles, "
"mostly, Godot's actual C++ API."
msgstr ""
"この言語はパフォーマンスに最適な選択肢であり、ゲーム全体で使用する必要はあり"
"ません。他の部分はGDScriptまたはVisual Scriptで作成できるためです。 とはいえ"
"このAPIは、主にGodotの実際のC++ APIに似ているため、明確で使いやすいです。"

#: ../../docs/getting_started/step_by_step/scripting.rst:86
msgid ""
"More languages can be made available through the GDNative interface, but "
"keep in mind we don't have official support for them."
msgstr ""
"GDNativeインターフェイスを通じて(C++以外の)より多くの言語を利用できますが、正"
"式なサポートはありません。"

#: ../../docs/getting_started/step_by_step/scripting.rst:90
msgid "Scripting a scene"
msgstr "シーンのスクリプト"

#: ../../docs/getting_started/step_by_step/scripting.rst:92
msgid ""
"For the rest of this tutorial we'll set up a GUI scene consisting of a "
"button and a label, where pressing the button will update the label. This "
"will demonstrate:"
msgstr ""
"このチュートリアルの残りの部分では、ボタンとラベルで構成されるGUI シーンを設"
"定し、ボタンを押す事でラベルを更新してみます。これは、次のことを示します:"

#: ../../docs/getting_started/step_by_step/scripting.rst:96
msgid "Writing a script and attaching it to a node."
msgstr "スクリプトを作成し、ノードにアタッチします。"

#: ../../docs/getting_started/step_by_step/scripting.rst:97
msgid "Hooking up UI elements via signals."
msgstr "シグナルを介して UI 要素をフックします。"

#: ../../docs/getting_started/step_by_step/scripting.rst:98
msgid "Writing a script that can access other nodes in the scene."
msgstr "シーン内の他のノードにアクセスできるスクリプトを作成します。"

#: ../../docs/getting_started/step_by_step/scripting.rst:100
msgid ""
"Before continuing, make sure to skim and bookmark the :ref:"
"`GDScript<doc_gdscript>` reference. It's a language designed to be simple, "
"and the reference is structured into sections to make it easier to get an "
"overview of the concepts."
msgstr ""
"続ける前に、\\ :ref:`GDScript <doc_gdscript>`\\ の説明を一読し、ブックマーク"
"しておきましょう。シンプルに設計された言語であり、説明ページは全体のコンセプ"
"トを簡単に把握できるようにセクション分けされています。"

#: ../../docs/getting_started/step_by_step/scripting.rst:105
msgid "Scene setup"
msgstr "シーンの設定"

#: ../../docs/getting_started/step_by_step/scripting.rst:107
msgid ""
"If you still have the \"instancing\" project open from the previous "
"tutorial, then close that out (Project -> Quit to Project List) and create a "
"New Project."
msgstr ""
"前回のチュートリアルで「インスタンス化」プロジェクトを開いたままにしている場"
"合は、そのプロジェクトを閉じて（プロジェクト → 終了してプロジェクト一覧を開"
"く）、それから「新規プロジェクト」を作成します。"

#: ../../docs/getting_started/step_by_step/scripting.rst:109
msgid ""
"Use the \"Add Child Node\" dialogue accessed from the Scene tab (or by "
"pressing :kbd:`Ctrl + A`) to create a hierarchy with the following nodes:"
msgstr ""
"シーンタブから「子ノードの追加」ダイアログにアクセスし (または :kbd:`Ctrl + "
"A` を押して)、次のノードを持つ階層を作成します:"

#: ../../docs/getting_started/step_by_step/scripting.rst:112
msgid "Panel"
msgstr "Panel"

#: ../../docs/getting_started/step_by_step/scripting.rst:114
msgid "Label"
msgstr "Label"

#: ../../docs/getting_started/step_by_step/scripting.rst:115
msgid "Button"
msgstr "Button"

#: ../../docs/getting_started/step_by_step/scripting.rst:117
msgid "The scene tree should look like this:"
msgstr "シーン ツリーは次のようになります:"

#: ../../docs/getting_started/step_by_step/scripting.rst:121
msgid ""
"Use the 2D editor to position and resize the Button and Label so that they "
"look like the image below. You can set the text from the Inspector tab."
msgstr ""
"2Dエディタを使用して、ボタンとラベルを下の画像のように配置およびサイズ変更し"
"ます。インスペクタ タブからテキストを設定できます。"

#: ../../docs/getting_started/step_by_step/scripting.rst:126
msgid "Finally, save the scene with a name such as ``sayhello.tscn``."
msgstr "最後に、シーンを ``sayhello.tscn`` などの名前で保存します。"

#: ../../docs/getting_started/step_by_step/scripting.rst:131
msgid "Adding a script"
msgstr "スクリプトの追加"

#: ../../docs/getting_started/step_by_step/scripting.rst:133
msgid ""
"Right click on the Panel node, then select \"Attach Script\" from the "
"context menu:"
msgstr ""
"パネルノードを右クリックし、コンテキストメニューから「スクリプトをアタッチ」"
"を選択します:"

#: ../../docs/getting_started/step_by_step/scripting.rst:138
msgid ""
"The script creation dialog will pop up. This dialog allows you to set the "
"script's language, class name, and other relevant options."
msgstr ""
"スクリプト作成ダイアログが表示されます。このダイアログボックスを使用すると、"
"スクリプトの言語、クラス名、およびその他の関連するオプションを設定できます。"

#: ../../docs/getting_started/step_by_step/scripting.rst:141
msgid ""
"In GDScript, the file itself represents the class, so the class name field "
"is not editable."
msgstr ""
"GDScriptではファイル自身がクラスを表します。そのためクラス名のフィールドは編"
"集できません。"

#: ../../docs/getting_started/step_by_step/scripting.rst:144
msgid ""
"The node we're attaching the script to is a panel, so the Inherits field "
"will automatically be filled in with \"Panel\". This is what we want, as the "
"script's goal is to extend the functionality of our panel node."
msgstr ""
"スクリプトをアタッチするノードはパネルなので、[継承] フィールドには自動的に"
"「Panel」が入力されます。スクリプトの目的は、パネルノードの機能を拡張すること"
"です。"

#: ../../docs/getting_started/step_by_step/scripting.rst:148
msgid "Finally, enter a path name for the script and select Create:"
msgstr "最後に、スクリプトのパス名を入力し、「作成」を選択します:"

#: ../../docs/getting_started/step_by_step/scripting.rst:152
msgid ""
"The script will then be created and added to the node. You can see this as "
"an \"Open script\" icon next to the node in the Scene tab, as well as in the "
"script property under Inspector:"
msgstr ""
"その後、スクリプトが作成され、ノードに追加されます。これは、シーンタブのノー"
"ドの横にある「スクリプトを開く」アイコンと、インスペクタの下のスクリプトプロ"
"パティで表示されます:"

#: ../../docs/getting_started/step_by_step/scripting.rst:158
msgid ""
"To edit the script, select either of these buttons, both of which are "
"highlighted in the above image. This will bring you to the script editor, "
"where a default template will be included:"
msgstr ""
"スクリプトを編集するには、上の画像で強調表示されている2つのボタンのいずれかを"
"選択します。これにより、スクリプトエディタにデフォルトのテンプレートが含まれ"
"て表示されます:"

#: ../../docs/getting_started/step_by_step/scripting.rst:163
msgid ""
"There's not much there. The ``_ready()`` function is called when the node, "
"and all its children, enters the active scene. **Note:** ``_ready()`` is not "
"the constructor; the constructor is instead ``_init()``."
msgstr ""
"テンプレートの内容はそれほど多くはありません。 ``_ready()`` 関数は、ノードと"
"そのすべての子がアクティブなシーンに入ると呼び出されます。\\ **注:**\\ "
"``_ready()`` はコンストラクタではありません。コンストラクタは ``_init()`` で"
"す。"

#: ../../docs/getting_started/step_by_step/scripting.rst:168
msgid "The role of the script"
msgstr "スクリプトの役割"

#: ../../docs/getting_started/step_by_step/scripting.rst:170
msgid ""
"A script adds behavior to a node. It is used to control how the node "
"functions as well as how it interacts with other nodes: children, parent, "
"siblings, and so on. The local scope of the script is the node. In other "
"words, the script inherits the functions provided by that node."
msgstr ""
"スクリプトは、ノードに動作を追加します。ノードの機能方法、およびノードが他の"
"ノード(子、親、兄弟など)とどのように相互作用するかを制御するために使用されま"
"す。スクリプトのローカルスコープはノードです。つまり、スクリプトはそのノード"
"によって提供される関数を継承します。"

#: ../../docs/getting_started/step_by_step/scripting.rst:181
msgid "Handling a signal"
msgstr "シグナルの処理"

#: ../../docs/getting_started/step_by_step/scripting.rst:183
msgid ""
"Signals are \"emitted\" when some specific kind of action happens, and they "
"can be connected to any function of any script instance. Signals are used "
"mostly in GUI nodes, although other nodes have them too, and you can even "
"define custom signals in your own scripts."
msgstr ""
"シグナルは、特定の種類のアクションが発生したときに「出力」され、任意のスクリ"
"プトインスタンスの任意の関数に接続できます。シグナルは主にGUIノードで使用され"
"ますが、他のノードにもシグナルが含まれ、独自のスクリプトでカスタムシグナルを"
"定義することもできます。"

#: ../../docs/getting_started/step_by_step/scripting.rst:188
msgid ""
"In this step, we'll connect the \"pressed\" signal to a custom function. "
"Forming connections is the first part and defining the custom function is "
"the second part. For the first part, Godot provides two ways to create "
"connections: through a visual interface the editor provides or through code."
msgstr ""
"このステップでは、「pressed」シグナルをカスタム関数に接続します。最初のパート"
"は接続の形成で、2番目のパートはカスタム関数の定義です。最初のパートでは、"
"Godotは接続を作成する2つの方法を提供します: エディタが提供するビジュアルイン"
"タフェースを使用する方法と、コードを使用する方法です。"

#: ../../docs/getting_started/step_by_step/scripting.rst:193
msgid ""
"While we will use the code method for the remainder of this tutorial series, "
"let's cover how the editor interface works for future reference."
msgstr ""
"このチュートリアルの残りの部分ではコードを使用しますが、今後のためにエディタ"
"インターフェースがどのように機能するかについて説明します。"

#: ../../docs/getting_started/step_by_step/scripting.rst:196
msgid ""
"Select the Button node in the scene tree and then select the \"Node\" tab. "
"Next, make sure that you have \"Signals\" selected."
msgstr ""
"シーンツリーでボタンノードを選択し、「ノード」タブを選択します。次に、「シグ"
"ナル」が選択されていることを確認します。"

#: ../../docs/getting_started/step_by_step/scripting.rst:201
msgid ""
"If you then select \"pressed()\" under \"BaseButton\" and click the "
"\"Connect...\" button in the bottom right, you'll open up the connection "
"creation dialogue."
msgstr ""
"次に、「BaseButton」の下の「pressed()」を選択し、右下の「接続...」ボタンをク"
"リックすると、接続作成ダイアログが開きます。"

#: ../../docs/getting_started/step_by_step/scripting.rst:206
msgid ""
"The top of the dialogue displays a list of your scene's nodes with the "
"emitting node's name highlighted in blue. Select the \"Panel\" node here."
msgstr ""
"ダイアログの上部には、シーン中のノードの一覧が表示されており、シグナルを発す"
"るノードの名前(今回はButton)が青色でハイライト表示されています。ここで"
"「Panel」ノードを選択します。"

#: ../../docs/getting_started/step_by_step/scripting.rst:209
msgid ""
"The bottom of the dialogue shows the name of the method that will be "
"created. By default, the method name will contain the emitting node's name "
"(\"Button\" in this case), resulting in ``_on_[EmitterNode]_[signal_name]``."
msgstr ""
"ダイアログの下部には、作成されるメソッドの名前が表示されます。デフォルトで"
"は、メソッド名には発信ノードの名前(この場合は「ボタン」)が含まれ、 ``_ on_ "
"[シグナルを発するノード名] _ [シグナル名]`` になります。"

#: ../../docs/getting_started/step_by_step/scripting.rst:213
msgid ""
"And that concludes the guide on how to use the visual interface. However, "
"this is a scripting tutorial, so for the sake of learning, let's dive into "
"the manual process!"
msgstr ""
"これで、ビジュアルインターフェイスの使用方法に関するガイドは終了です。ただ"
"し、これはスクリプトのチュートリアルなので、学習のために、手動で行う方法に飛"
"び込みましょう!"

#: ../../docs/getting_started/step_by_step/scripting.rst:217
msgid ""
"To accomplish this, we will introduce a function that is probably the most "
"used by Godot programmers: :ref:`Node.get_node() "
"<class_Node_method_get_node>`. This function uses paths to fetch nodes "
"anywhere in the scene, relative to the node that owns the script."
msgstr ""
"これを実現するために、おそらくGodotプログラマーが最も使用する:\\ :ref:`Node."
"get_node() <class_Node_method_get_node>`\\ を導入します。この関数は、パスを使"
"用して、スクリプトを持つノードに関連する、シーン内の任意の場所のノードを見つ"
"けます。"

#: ../../docs/getting_started/step_by_step/scripting.rst:222
msgid ""
"For the sake of convenience, delete everything underneath ``extends Panel``. "
"You will fill out the rest of the script manually."
msgstr ""
"便宜上、スクリプト内の ``extends Panel`` より下にあるすべてのものを削除しま"
"す。そしてスクリプトの残りの部分を手動で入力します。"

#: ../../docs/getting_started/step_by_step/scripting.rst:225
msgid ""
"Because the Button and Label are siblings under the Panel where the script "
"is attached, you can fetch the Button by typing the following underneath the "
"``_ready()`` function:"
msgstr ""
"ButtonとLabelはスクリプトがアタッチされているPanelの下の兄弟(同じ階層にある子"
"要素)であるため、 ``_ready()`` 関数の下に次のように入力するとButtonをフェッチ"
"できます:"

#: ../../docs/getting_started/step_by_step/scripting.rst:242
msgid "Next, write a function which will be called when the button is pressed:"
msgstr "次に、ボタンを押したときに呼び出される関数を書きます:"

#: ../../docs/getting_started/step_by_step/scripting.rst:257
msgid ""
"Finally, connect the button's \"pressed\" signal to ``_on_Button_pressed()`` "
"by using :ref:`Object.connect() <class_Object_method_connect>`."
msgstr ""
"最後に、\\ :ref:`Object.connect() <class_Object_method_connect>` を使用して、"
"ボタンの\"pressed\"シグナルを ``_on_Button_pressed()`` に接続します。"

#: ../../docs/getting_started/step_by_step/scripting.rst:273
msgid "The final script should look like this:"
msgstr "最後のスクリプトは次のようになります:"

#: ../../docs/getting_started/step_by_step/scripting.rst:306
msgid ""
"Run the scene and press the button. You should get the following result:"
msgstr "シーンを実行し、ボタンを押します。次の結果が得られます:"

#: ../../docs/getting_started/step_by_step/scripting.rst:310
msgid "Why, hello there! Congratulations on scripting your first scene."
msgstr ""
"あら、hello!と表示されました。最初のシーンのスクリプト作成、おめでとうござい"
"ます。"

#: ../../docs/getting_started/step_by_step/scripting.rst:314
msgid ""
"A common misunderstanding regarding this tutorial is how ``get_node(path)`` "
"works. For a given node, ``get_node(path)`` searches its immediate children. "
"In the above code, this means that Button must be a child of Panel. If "
"Button were instead a child of Label, the code to obtain it would be:"
msgstr ""
"このチュートリアルに関するよくある誤解は、 ``get_node(path)`` の仕組みです。 "
"特定のノードについて、 ``get_node(path)`` はその直接の子を検索します。 上記の"
"コードでは、これはButtonがPanelの子でなければならないことを意味します。 "
"ButtonがLabelの子である場合、取得するコードは次のようになります:"

#: ../../docs/getting_started/step_by_step/scripting.rst:332
msgid "Also, remember that nodes are referenced by name, not by type."
msgstr "また、ノードは型ではなく名前で参照される点に注意してください。"

#: ../../docs/getting_started/step_by_step/scripting.rst:336
msgid ""
"The 'advanced' panel of the connect dialogue is for binding specific values "
"to the connected function's parameters. You can add and remove values of "
"different types."
msgstr ""
"接続ダイアログの右側の「高度な設定」パネルは、接続された関数の引数に特定の値"
"をバインドするためのものです。さまざまな型の値を追加および削除できます。"

#: ../../docs/getting_started/step_by_step/scripting.rst:340
msgid ""
"The code approach also enables this with a 4th ``Array`` parameter that is "
"empty by default. Feel free to read up on the ``Object.connect`` method for "
"more information."
msgstr ""
"コードアプローチでは、デフォルトでは空の、4番目の ``Array`` パラメータを使用"
"して、これも有効にします。詳細については、 ``Object.connect`` メソッドをお読"
"みください。"
