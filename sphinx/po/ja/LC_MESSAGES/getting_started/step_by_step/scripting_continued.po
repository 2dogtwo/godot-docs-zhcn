# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-03 10:51+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:4
msgid "Scripting (continued)"
msgstr "スクリプト(続き)"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:7
msgid "Processing"
msgstr "プロセシング"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:9
msgid ""
"Several actions in Godot are triggered by callbacks or virtual functions, so "
"there is no need to write code that runs all the time."
msgstr ""
"Godotのいくつかのアクションはコールバックまたは仮想関数によってトリガーされる"
"ため、常に実行されるコードを記述する必要はありません。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:12
msgid ""
"However, it is still common to need a script to be processed on every frame. "
"There are two types of processing: idle processing and physics processing."
msgstr ""
"ただし、すべてのフレームでスクリプトを処理する必要がある場合もあります。処理"
"には、アイドル処理と物理処理の2種類があります。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:16
msgid ""
"Idle processing is activated when the method :ref:`Node._process() "
"<class_Node_method__process>` is found in a script. It can be turned off and "
"on with the :ref:`Node.set_process() <class_Node_method_set_process>` "
"function."
msgstr ""
"メソッド:ref:`Node._process() <class_Node_method__process>`\\ がスクリプトに"
"存在すると、アイドル処理がアクティブになります。:ref:`Node.set_process() "
"<class_Node_method_set_process>`\\ 関数を使用して、オンとオフを切り替えること"
"ができます。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:20
msgid "This method will be called every time a frame is drawn:"
msgstr "このメソッドはフレームが描画されるたびに呼ばれます。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:36
msgid ""
"It's important to bear in mind that the frequency with which ``_process()`` "
"will be called depends on how many frames per second (FPS) your application "
"is running at. This rate can vary over time and devices."
msgstr ""
"次の事を心に留めておく事は重要です。_process()が呼び出される頻度は、アプリ"
"ケーションが実行されている1秒あたりのフレーム数（FPS）に依存します。このレー"
"トは、時間とデバイスによって異なります。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:40
msgid ""
"To help manage this variability the ``delta`` parameter contains the time "
"elapsed in seconds, as a floating point, since the previous call to "
"``_process()``."
msgstr ""
"この変動を管理しやすくするために、``delta``パラメーターには、``_process()``の"
"前回の呼び出し以降の経過秒数が浮動小数点として含まれています。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:43
msgid ""
"This parameter can be used to make sure things always take the same amount "
"of time, regardless of the game's FPS."
msgstr ""
"このパラメータを使用すると、ゲームのFPSに関係なく、常に同じ時間がかかるように"
"することができます。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:46
msgid ""
"For example, movement is often multiplied with a time delta to make movement "
"speed both constant and independent from the frame rate."
msgstr ""
"たとえば、移動速度を一定にし、フレームレートから独立させるために、移動が時間"
"デルタで乗算されることがよくあります。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:49
msgid ""
"Physics processing with ``_physics_process()`` is similar, but it should be "
"used for processes that must happen before each physics step, such as "
"controlling a character. It always runs before a physics step and it is "
"called at fixed time intervals: 60 times per second by default. You can "
"change the interval from the Project Settings, under Physics -> Common -> "
"Physics Fps."
msgstr ""
"``_physics_process()`` での物理処理は似ていますが、これはキャラクタの制御な"
"ど、各物理ステップの前に実行する必要がある処理に使用する必要があります。常に"
"物理ステップの前に実行され、固定時間間隔(デフォルトでは毎秒60回)で呼び出され"
"ます。この間隔は、Physics->Common->Physics FpsのProject Settingsで変更できま"
"す。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:55
msgid ""
"The function ``_process()``, however, is not synced with physics. Its frame "
"rate is not constant and is dependent on hardware and game optimization. Its "
"execution is done after the physics step on single-threaded games."
msgstr ""
"ただし、 ``_process()`` 関数は物理学と同期されません。フレームレートは一定で"
"はなく、ハードウェアとゲームの最適化に依存します。その実行は、シングルスレッ"
"ドのゲームの物理ステップの後に行われます。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:58
msgid ""
"A simple way to see the ``_process()`` function at work is to create a scene "
"with a single Label node, with the following script:"
msgstr ""
"次のスクリプトを使用して、ひとつのLabelノードを持つシーンを作成すると、動作中"
"の_process()関数を簡単に確認できます:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:85
msgid "Which will show a counter increasing each frame."
msgstr "これにより、各フレームが増加するカウンタが表示されます。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:88
msgid "Groups"
msgstr "グループ"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:90
msgid ""
"Groups in Godot work like tags you might have come across in other software. "
"A node can be added to as many groups as desired. This is a useful feature "
"for organizing large scenes. There are two ways to add nodes to groups. The "
"first is from the UI, using the Groups button under the Node panel:"
msgstr ""
"Godotのグループは、他のソフトウェアのタグのように機能します。ノードは、必要な"
"数だけグループに追加できます。これは、大きなシーンを整理するのに便利な機能で"
"す。グループにノードを追加するには2つの方法があります。 1つ目は、[ノード]パネ"
"ルの下の[グループ]ボタンを使用したUIからです。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:97
msgid ""
"And the second way is from code. The following script would add the current "
"node to the ``enemies`` group as soon as it appeared in the scene tree."
msgstr ""
"2番目の方法はコードからです。次のスクリプトは、シーンツリーに表示されるとすぐ"
"に現在のノードを``enemies``グループに追加します。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:115
msgid ""
"This way, if the player is discovered sneaking into a secret base, all "
"enemies can be notified about its alarm sounding by using :ref:`SceneTree."
"call_group() <class_SceneTree_method_call_group>`:"
msgstr ""
"このようにして、プレイヤーが秘密の基地に忍び込んでいることが発見された場"
"合、 :ref:`SceneTree.call_group() <class_SceneTree_method_call_group>`\\ を使"
"用して、すべての敵にアラーム音を通知する事が出来ます:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:132
msgid ""
"The above code calls the function ``player_was_discovered`` on every member "
"of the group ``enemies``."
msgstr ""
"上記のコードはグループ `` enemies`` のすべてのメンバーに対して関数 `` "
"player_was_discovered``を呼び出します。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:135
msgid ""
"It is also possible to get the full list of ``enemies`` nodes by calling :"
"ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_method_get_nodes_in_group>`:"
msgstr ""
"また:ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_method_get_nodes_in_group>`\\ を呼び出して、敵のノードの完全"
"なリストを取得することもできます:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:148
msgid ""
"The :ref:`SceneTree <class_SceneTree>` class provides many useful methods, "
"like interacting with scenes, their node hierarchy and groups of nodes. It "
"allows you to easily switch scenes or reload them, to quit the game or pause "
"and unpause it. It even comes with interesting signals. So check it out if "
"you have some time!"
msgstr ""
":ref:`SceneTree <class_SceneTree>`\\ クラスは、シーン、ノードの階層、ノードの"
"グループとの対話など、多くの便利なメソッドを提供します。シーンを簡単に切り替"
"えたり、リロードしたり、ゲームを終了したり、一時停止したり、一時停止を解除し"
"たりできます。興味深いシグナルもあります。時間があればぜひご覧ください！"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:156
msgid "Notifications"
msgstr "通知"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:158
msgid ""
"Godot has a system of notifications. These are usually not needed for "
"scripting, as it's too low-level and virtual functions are provided for most "
"of them. It's just good to know they exist. For example, you may add an :ref:"
"`Object._notification() <class_Object_method__notification>` function in "
"your script:"
msgstr ""
"Godotには通知システムがあります。これらは低レベルであり、それらのほとんどに仮"
"想k関数が提供されているため、通常はスクリプトには必要ありません。それらが存在"
"することを知っていれば良いのです。例えば、スクリプトに :ref:`Object."
"_notification() <class_Object_method__notification>` \\ 関数を追加できます:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:193
msgid ""
"The documentation of each class in the :ref:`Class Reference <toc-class-"
"ref>` shows the notifications it can receive. However, in most cases "
"GDScript provides simpler overrideable functions."
msgstr ""
":ref:`Class Reference<toc-class-ref>`\\ の各クラスのドキュメントには、受信可"
"能な通知が記載されています。しかし、ほとんどの場合、GDScriptはより単純なオー"
"バーライド可能な関数を提供します。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:198
msgid "Overrideable functions"
msgstr "オーバーライド可能な関数"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:200
msgid ""
"Such overrideable functions, which are described as follows, can be applied "
"to nodes:"
msgstr ""
"このようなオーバーライド可能な関数は、下記のような記述でノードに適用できます:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:272
msgid ""
"As mentioned before, it's better to use these functions instead of the "
"notification system."
msgstr ""
"前述したように、通知システムの代わりにこれらの機能を使用することをお勧めしま"
"す。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:276
msgid "Creating nodes"
msgstr "ノード作成"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:278
msgid ""
"To create a node from code, call the ``.new()`` method, like for any other "
"class-based datatype. For example:"
msgstr ""
"コードからノードを作成するには、他のクラスベースのデータ型と同様に、``."
"new()``メソッドを呼び出します。例えば:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:302
msgid ""
"To delete a node, be it inside or outside the scene, ``free()`` must be used:"
msgstr ""
"シーンの内部または外部にあるノードを削除するには、 ``free()`` を使用する必要"
"があります:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:318
msgid ""
"When a node is freed, it also frees all its child nodes. Because of this, "
"manually deleting nodes is much simpler than it appears. Free the base node "
"and everything else in the subtree goes away with it."
msgstr ""
"ノードが解放されると、そのすべての子ノードも解放されます。このため、ノードを"
"手動で削除するのは見た目よりずっと簡単です。ベースノードを解放すると、サブツ"
"リー内のその他すべてのものがなくなります。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:322
msgid ""
"A situation might occur where we want to delete a node that is currently "
"\"blocked\", because it is emitting a signal or calling a function. This "
"will crash the game. Running Godot with the debugger will often catch this "
"case and warn you about it."
msgstr ""
"シグナルを発信している、または関数を呼び出しているために、現在 \"blocked\" に"
"なっているノードを削除したい場合があります。これはゲームをクラッシュさせま"
"す。デバッガでGodotを実行すると、このケースを検出して警告することがよくありま"
"す。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:327
msgid ""
"The safest way to delete a node is by using :ref:`Node.queue_free() "
"<class_Node_method_queue_free>`. This erases the node safely during idle."
msgstr ""
"ノードを削除する最も安全な方法は、 :ref:`Node.queue_free() "
"<class_Node_method_queue_free>`\\ を使用することです。これにより、アイドル中"
"にノードが安全に消去されます。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:345
msgid "Instancing scenes"
msgstr "シーンのインスタンス化"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:347
msgid ""
"Instancing a scene from code is done in two steps. The first one is to load "
"the scene from your hard drive:"
msgstr ""
"コードからシーンをインスタンス化するには、2つの手順があります。 まず最初に"
"ハードドライブからシーンをロードします:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:360
msgid ""
"Preloading it can be more convenient, as it happens at parse time (GDScript "
"only):"
msgstr "プリロードは解析時に動作するため便利です（GDScriptのみ）:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:368
msgid ""
"But ``scene`` is not yet a node. It's packed in a special resource called :"
"ref:`PackedScene <class_PackedScene>`. To create the actual node, the "
"function :ref:`PackedScene.instance() <class_PackedScene_method_instance>` "
"must be called. This will return the tree of nodes that can be added to the "
"active scene:"
msgstr ""
"しかし、``シーン``はまだノードではありません。 :ref:`PackedScene "
"<class_PackedScene>`\\ と呼ばれる特別なリソースにパックされています。実際の"
"ノードを作成するには、:ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>`\\ 関数を呼び出す必要があります。これによ"
"り、アクティブシーンに追加できるノードのツリーが返されます:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:386
msgid ""
"The advantage of this two-step process is that a packed scene may be kept "
"loaded and ready to use so that you can create as many instances as desired. "
"This is especially useful to quickly instance several enemies, bullets, and "
"other entities in the active scene."
msgstr ""
"この2段階のプロセスの利点は、パックされたシーンをロードして使用できる状態に保"
"ち、必要なだけインスタンスを作成できることです。 これは、アクティブシーン内の"
"複数の敵、弾丸、その他の存在をすばやくインスタンス化するのに特に便利です。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:394
msgid "Register scripts as classes"
msgstr "スクリプトをクラスとして登録する"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:396
msgid ""
"Godot has a \"Script Class\" feature to register individual scripts with the "
"Editor. By default, you can only access unnamed scripts by loading the file "
"directly."
msgstr ""
"Godotには、エディターに個々のスクリプトを登録するための「スクリプトクラス」機"
"能があります。デフォルトでは、ファイルを直接ロードすることでのみ名前のないス"
"クリプトにアクセスできます。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:400
msgid ""
"You can name a script and register it as a type in the editor with the "
"``class_name`` keyword followed by the class's name. You may add a comma and "
"an optional path to an image to use as an icon. You will then find your new "
"type in the Node or Resource creation dialog."
msgstr ""
"``class_name``キーワードの後にクラスの名前を付けた後に、スクリプトに名前を付"
"け、エディターにタイプとして登録できます。カンマを追加した後にアイコンとして"
"使用する画像のパスを追加できます。これで、ノードまたはリソース作成ダイアログ"
"で新しいタイプを見つける事ができます。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:422
msgid "In Godot 3.1:"
msgstr "Godot 3.1の場合:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:424
msgid ""
"Only GDScript and NativeScript, i.e., C++ and other GDNative-powered "
"languages, can register scripts."
msgstr ""
"スクリプトを登録できるのは、GDScriptおよびNativeScript、つまりC++およびその他"
"のGDNativeを使用した言語のみです。"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:425
msgid "Only GDScript creates global variables for each named script."
msgstr "GDScriptのみが、名前付きスクリプトごとにグローバル変数を作成します。"
