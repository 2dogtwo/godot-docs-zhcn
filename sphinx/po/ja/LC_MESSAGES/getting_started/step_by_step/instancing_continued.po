# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-11 13:45+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:4
msgid "Instancing (continued)"
msgstr "インスタンス化(続き)"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:7
msgid "Recap"
msgstr "要約"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:9
msgid "Instancing has many handy uses. At a glance, with instancing you have:"
msgstr ""
"インスタンス化には便利な使い方がたくさんあります。インスタンス化を使用する"
"と、次のようになります:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:11
msgid "The ability to subdivide scenes and make them easier to manage."
msgstr "シーンを細分化し、管理を容易にする機能。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:12
msgid "A tool to manage and edit multiple node instances at once."
msgstr "複数のノードインスタンスを一度に管理および編集するためのツール。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:13
msgid ""
"A way to organize and embed complex game flows or even UIs (in Godot, UI "
"Elements are nodes, too)."
msgstr ""
"複雑なゲームフローやUIを整理して埋め込む方法 (Godotでは、UI要素もノードで"
"す)。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:17
msgid "Design language"
msgstr "デザイン言語"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:19
msgid ""
"But the greatest strength that comes with instancing scenes is that it works "
"as an excellent design language. This distinguishes Godot from all the other "
"engines out there. Godot was designed from the ground up around this concept."
msgstr ""
"しかし、シーンのインスタンス化の最大の利点は、優れた設計言語として機能するこ"
"とです。これは、Godotと他のすべてのエンジンとの違いです。 Godotは、この概念に"
"基づいて設計されました。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:24
msgid ""
"When making games with Godot, the recommended approach is to dismiss most "
"common design patterns, such as MVC or Entity-Relationship diagrams, and "
"instead think about your scenes in a more natural way. Start by imagining "
"the visible elements in your game, the ones that can be named not just by a "
"programmer, but by anyone."
msgstr ""
"Godotでゲームを作る場合、推奨されるアプローチは、MVCやエンティティ-関係図のよ"
"うな最も一般的なデザインパターンを無視し、代わりにあなたのシーンをより自然な"
"方法で考えることです。ゲームの中で目に見える要素、つまりプログラマーだけでな"
"く誰もが命名できる要素を想像することから始めましょう。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:30
msgid "For example, here's how a simple shooter game could be imagined:"
msgstr "たとえば、単純なシューティングゲームを想像する方法を次に示します:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:34
msgid ""
"You can come up with a diagram like this for almost any kind of game. Write "
"down the parts of the game that you can visualize, and then add arrows to "
"represent ownership of one component by another."
msgstr ""
"どんな種類のゲームでも、このような図を作成できます。視覚化できるゲームの部分"
"を書いて、矢印を追加して、あるコンポーネントが別のコンポーネントの所有権を表"
"すようにします。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:38
msgid ""
"Once you have a diagram like this, the recommended process for making a game "
"is to create a scene for each element listed in the diagram. You'll use "
"instancing (either by code or directly in the editor) for the ownership "
"relationships."
msgstr ""
"このような図を作成したら、図にリストされている各要素に対してシーンを作成する"
"ことをお勧めします。所有関係にはインスタンス化(コードで、またはエディタで直"
"接)を使用します。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:42
msgid ""
"A lot of time spent in programming games (or software in general) is on "
"designing an architecture and fitting game components to that architecture. "
"Designing based on scenes replaces that approach and makes development much "
"faster and more straightforward, allowing you to concentrate on the game "
"logic itself. Because most game components map directly to a scene, using a "
"design based on scene instantiation means little other architectural code is "
"needed."
msgstr ""
"ゲーム(またはソフトウェア全般)のプログラミングに費やされる時間の多くは、アー"
"キテクチャの設計とそのアーキテクチャへゲームコンポーネントを合わせることに使"
"われます。シーンに基づいた設計はそのアプローチに代わるものであり、開発をより"
"迅速かつ簡単に行えるため、ゲームロジック自体に集中できます。ほとんどのゲーム"
"コンポーネントはシーンに直接配置されるため、シーンのインスタンス化に基づくデ"
"ザインを使用すると、他のアーキテクチャコードはほとんど必要ありません。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:48
msgid ""
"Let's take a look at one more, somewhat more complex, example of an open-"
"world type game with lots of assets and nested elements:"
msgstr ""
"アセットとネストされた要素が多いオープンワールド型ゲームの例をもう1つ見てみま"
"しょう:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:53
msgid ""
"Take a look at the room element. Let's say we started there. We could make a "
"couple of different room scenes, with different arrangements of furniture "
"(also scenes) in them. Later, we could make a house scene, connecting rooms "
"to make up its interior."
msgstr ""
"部屋の要素を見てみましょう。そこから始めたとしましょう。家具(シーンも)の配置"
"が異なる複数の異なる部屋のシーンを作成できます。後で、部屋を接続して内部を構"
"成する家のシーンを作成できます。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:58
msgid ""
"Then, we could make a citadel scene, which is made out of many instanced "
"houses. Then, we could start working on the world map terrain, adding the "
"citadel onto it."
msgstr ""
"その後、我々は多くのインスタンス化された家から作られた要塞のシーンを作ること"
"ができました。その後、世界地図の地形に取り組み始め、要塞を追加しました。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:62
msgid ""
"Later, we could create scenes that represent guards (and other NPCs) and add "
"them to the citadel as well. As a result, they would be indirectly added to "
"the overall game world."
msgstr ""
"後で、衛兵(及び他のNPC)を表すシーンを作成し、要塞に追加することもできます。そ"
"の結果、ゲームの世界全体に間接的に追加されます。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:66
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instance more scenes. Furthermore, the editor UI is "
"designed to be user friendly for programmers and non-programmers alike. A "
"typical team development process can involve 2D or 3D artists, level "
"designers, game designers, and animators, all working with the editor "
"interface."
msgstr ""
"Godotなら、シーンの作成・インスタンス化を繰り返す事で簡単に上記の事が出来ま"
"す。 さらに、エディタのUIは、プログラマーにとっても非プログラマーにとっても使"
"いやすいように設計されています。 典型的なチーム開発プロセスには、2Dまたは3D"
"アーティスト、レベルデザイナー、ゲームデザイナー、アニメーターが関与します。"
"これらはすべてエディタインターフェイスで作業できます。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:73
msgid "Information overload!"
msgstr "情報が多すぎますね!"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:75
msgid ""
"This has been a lot of high level information dropped on you all at once. "
"However, the important part of this tutorial was to create an awareness of "
"how scenes and instancing are used in real projects."
msgstr ""
"たくさんの高度な情報が一度に出てきましたね。 ただし、このチュートリアルの重要"
"な部分は、実際のプロジェクトでシーンとインスタンス化がどのように使用されてい"
"るかを認識することです。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:79
msgid ""
"Everything discussed here will become second nature to you once you start "
"making games and putting these concepts into practice. For now, don't worry "
"about it too much, and go on to the next tutorial!"
msgstr ""
"ゲームを作成し、これらの概念を実践し始めると、ここで説明したことにすぐに慣れ"
"ます。なので今のところ、あまり心配する必要はありません。次のチュートリアルに"
"進んでください!"
