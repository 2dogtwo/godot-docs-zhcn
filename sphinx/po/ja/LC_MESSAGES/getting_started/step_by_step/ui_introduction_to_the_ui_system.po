# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-02 13:32+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:4
msgid "Design interfaces with the Control nodes"
msgstr "コントロールノードを使用したインターフェイスの設計"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:6
msgid ""
"Computer displays, mobile phones, and TV screens come in all shapes and "
"sizes. To ship a game, you'll need to support different screen ratios and "
"resolutions. It can be hard to build responsive interfaces that adapt to all "
"platforms. Thankfully, Godot comes with robust tools to design and manage a "
"responsive User Interface."
msgstr ""
"パソコンのディスプレイ、携帯電話、TV画面などは、あらゆる形と大きさをしていま"
"す。ゲームを公開する前に、異なるアスペクト比と解像度に対応させなければなりま"
"せん。すべてのプラットフォームに対応するレスポンシブなインターフェースは、作"
"るのが大変な場合もあります。うれしいことに、Godotにはレスポンシブなインター"
"フェースをデザインして管理するための、強力なツール群が用意されています。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:14
msgid "Godot's editor is made with the engine's UI framework"
msgstr "Godotのエディタは、エンジンのUIフレームワークで作られています"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:16
msgid "This guide will get you started with UI design. You will learn:"
msgstr "このガイドでは、UI設計を開始します。次の内容を学習します:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:18
msgid "The five most useful control nodes to build your games' interface"
msgstr ""
"あなたのゲームのインターフェースを作るのに、特に使える５つのコントロール・"
"ノード"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:19
msgid "How to work with the anchor of UI elements"
msgstr "UI要素のアンカーを使用する方法"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:20
msgid ""
"How to efficiently place and arrange your user interface using containers"
msgstr ""
"コンテナを使用してユーザーインターフェイスを効率的に配置および配置する方法"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:22
msgid ""
"The five most common containers (you can learn more about containers in the :"
"ref:`GUI Containers <doc_gui_containers>` documentation page)."
msgstr ""
"とりわけよく使う５つのコンテナ (この後、コンテナについてもっと知りたければ"
"\\ :ref:`GUI Containers <doc_gui_containers>` \\ を参照してください)。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:25
msgid ""
"To learn how to control the interface and connect it to other scripts, read :"
"ref:`Build your first game UI in Godot <doc_ui_game_user_interface>`."
msgstr ""
"インターフェイスを制御し、他のスクリプトに接続する方法については、\\ :ref:`最"
"初のゲームUIをGodotで構築する <doc_ui_game_user_interface>`\\ を参照してくだ"
"さい。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:28
msgid ""
"To design your UI, you'll use the Control nodes. These are the nodes with "
"green icons in the editor. There are dozens of them, for creating anything "
"from life bars to complex applications. Godot's editor itself is built using "
"Control nodes."
msgstr ""
"UIを設計するためにコントロール・ノードを使います。エディタ内に緑のアイコンの"
"ノードがあります。ライフバーから複雑なアプリケーションまでなんでも作れるよう"
"にたくさんあります。Godotエディタそのものもコントロール・ノードを用いて作られ"
"ています。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:32
msgid ""
"Control nodes have unique properties that allow them to work well with one "
"another. Other visual nodes, like Node2D and Sprite don't have these "
"capabilities. So to make your life easier use Control nodes wherever "
"possible when building your UIs."
msgstr ""
"コントロールノードは、コントロールノード同士で上手く機能するために一意のプロ"
"パティを持ちます。Node2Dやスプライトといった他のヴィジュアルノードはそのよう"
"な特徴を持ちません。UI作成を楽するためには可能な限りコントロールノードを用い"
"たほうが良いでしょう。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:36
msgid "All control nodes share the same main properties:"
msgstr "すべてのコントロールノードは、同じメインプロパティを共有します:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:38
msgid "Anchor"
msgstr "アンカー"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:39
msgid "Bounding rectangle"
msgstr "境界矩形"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:40
msgid "Focus and focus neighbor"
msgstr "フォーカスと、フォーカスの周辺"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:41
msgid "Size flags"
msgstr "サイズフラグ"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:42
msgid "Margin"
msgstr "マージン"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:43
msgid "The optional UI theme"
msgstr "オプションのUIテーマ"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:45
msgid ""
"Once you understand the basics of the Control node, it will take you less "
"time to learn all the nodes that derive from it."
msgstr ""
"コントロールノードの基本を理解すると、そこから派生するすべてのノードを学習す"
"る時間が少なくなります。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:50
msgid "The 5 most common UI elements"
msgstr "最も一般的な5つのUI要素"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:52
msgid ""
"Godot ships with dozens of Control nodes. A lot of them are here to help you "
"build editor plugins and applications."
msgstr ""
"Godotには多数のコントロールノードが付属しています。 それらの多くは、エディタ"
"プラグインやアプリケーションを構築するのを助けるために用意されています。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:55
msgid ""
"For most games, you'll only need five types of UI elements, and a few "
"Containers. These five Control nodes are:"
msgstr ""
"ほとんどのゲームでは、必要なUI要素は5種類で、コンテナは多くありません。5つの"
"コントロールノードは次のとおりです:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:58
msgid "Label: for displaying text"
msgstr "Label: テキストを表示する"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:59
msgid ""
"TextureRect: used mostly for backgrounds, or everything that should be a "
"static image"
msgstr "TextureRect: 背景、または静止画像であるべきものすべてに主に使用"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:61
msgid ""
"TextureProgress: for lifebars, loading bars, horizontal, vertical or radial"
msgstr ""
"TextureProgress: ライフバー、ロードバー、水平、垂直または放射状のものに"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:63
msgid "NinePatchRect: for scalable panels"
msgstr "NinePatchRect: スケーラブルなパネル用"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:64
msgid "TextureButton: to create buttons"
msgstr "TextureButton: ボタンを作成するため"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:68
msgid "The 5 most common Control nodes for UI design"
msgstr "UI設計の最も一般的な5つのコントロールノード"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:71
msgid "TextureRect"
msgstr "\\ TextureRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:73
msgid ""
"**TextureRect** displays a texture or image inside a UI. It seems similar to "
"the Sprite node, but it offers multiple scaling modes. Set the Stretch Mode "
"property to change its behavior:"
msgstr ""
"**TextureRect** はテクスチャや画像をUI内に表示します。Spriteノードと同じよう"
"に見えますが、しかし複数のスケーリング・モードが用意されています。Stretch "
"Modeプロパティで以下のように動作を変更できます:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:77
msgid ""
"``Scale On Expand (compat)`` scales the texture to fit the node's bounding "
"rectangle, only if ``expand`` property is ``true``; otherwise, it behaves "
"like ``Keep`` mode. Default mode for backwards compatibility."
msgstr ""
"``Scale On Expand (compat)`` は、\\ ``Expand``プロパティがオンのときにのみテ"
"クスチャを長方形の境界まで拡縮します。それ以外では ``Keep`` モードと同じ動作"
"をします。後方互換のため、これがデフォルトのモードになっています。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:80
msgid "``Scale`` scales the texture to fit the node's bounding rectangle."
msgstr "``Scale`` は、テクスチャを長方形の境界に合わせて拡縮します。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:81
msgid "``Tile`` makes the texture repeat, but it won't scale."
msgstr "``Tile`` は、拡縮させる代わりに、テクスチャを繰り返して並べます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:82
msgid ""
"``Keep`` and ``Keep Centered`` force the texture to remain at its original "
"size, in the top left corner or the center of the frame respectively."
msgstr ""
"``Keep`` と ``Keep Centered`` は、強制的にテクスチャを本来のサイズのままに"
"し、前者はフレームの左上に、後者は中央に表示します。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:85
msgid ""
"``Keep Aspect`` and ``Keep Aspect Centered`` scales the texture but force it "
"to remain its original aspect ratio, in the top left corner or the center of "
"the frame respectively."
msgstr ""
"``Keep Aspect`` と ``Keep Aspect Centered`` は、テクスチャを拡縮しますが、し"
"かし元のアスペクト比は保ったままにします。前者はフレームの左上、後者は中央に"
"表示されます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:87
msgid ""
"``Keep Aspect Covered`` works just like ``Keep Aspect Centered`` but the "
"shorter side fits the bounding rectangle and the other one clips to the "
"node's limits."
msgstr ""
"``Keep Aspect Covered`` は ``Keep Aspect Centered`` と同じように動作します"
"が、しかし余白の部分を境界線に合わせる一方、はみ出た部分は除いて表示します。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:90
msgid ""
"As with Sprite nodes, you can modulate the TextureRect's color. Click the "
"``Modulate`` property and use the color picker."
msgstr ""
"Spriteノードと同じく、TextureRectの色は調節できます。\\ ``Modulate`` プロパ"
"ティをクリックして、カラーピッカーを使用してください。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:95
msgid "TextureRect modulated with a red color"
msgstr "赤で変調されたTextureRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:98
msgid "TextureButton"
msgstr "\\ TextureButton"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:100
msgid ""
"**TextureButton** is like TextureRect, except it has 6 texture slots: one "
"for each of the button's states. Most of the time, you'll use the Normal, "
"Pressed, and Hover textures. Focused is useful if your interface listens to "
"the keyboard's input. The sixth image slot, the Click Mask, lets you define "
"the clickable area using a 1-bit, pure black and white image."
msgstr ""
"**TextureButton** はTextureRectに似ていますが、ボタンの状態ごとにテクスチャス"
"ロットが6つある点が異なります。ほとんどの場合、Normal、Pressed、Hoverの各テク"
"スチャを使用します。 Focusedは、インターフェイスがキーボードの入力を待つとき"
"に役立ちます。 6番目の画像スロットであるクリックマスクでは、1ビットの純粋な白"
"黒画像を使用してクリック可能な領域を定義できます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:107
msgid ""
"In the Base Button section, you'll find a few checkboxes that change how the "
"button behaves. When ``Toggle Mode`` is on, the button will toggle between "
"active and normal states when you press it. ``Disabled`` makes it disabled "
"by default, in which case it will use the ``Disabled`` texture. "
"TextureButton shares a few properties with the texture frame: it has a "
"``modulate`` property, to change its color, and ``Resize`` and ``Stretch`` "
"modes to change its scale behavior."
msgstr ""
"Base Buttonセクションには、ボタンの動作を変更するチェックボックスがいくつかあ"
"ります。 ``Toggle Mode`` がオンの場合、ボタンを押すとアクティブ状態と通常状態"
"が切り替わります。 ``Disabled`` を選択すると、デフォルトで無効になります。こ"
"の場合、 ``Disabled`` テクスチャが使用されます。TextureButtonには、テクスチャ"
"フレームと共通するプロパティがいくつかあります。 ``modulate`` プロパティを使"
"用してカラーを変更したり、 ``Resize`` および ``Stretch`` モードを使用してス"
"ケール動作を変更したりできます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:117
msgid "TextureButton and its 5 texture slots"
msgstr "TextureButtonとその5つのテクスチャスロット"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:120
msgid "TextureProgress"
msgstr "\\ TextureProgress"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:122
msgid ""
"**TextureProgress** layers up to 3 sprites to create a progress bar. The "
"Under and Over textures sandwich the Progress one, which displays the bar's "
"value."
msgstr ""
"**TextureProgress**\\ は、最大3つのスプライトをレイヤ化してプログレスバーを作"
"成します。UnderテクスチャとOverテクスチャはProgressテクスチャを挟んでおり、"
"バーの値を表示します。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:126
msgid ""
"The ``Mode`` property controls the direction in which the bar grows: "
"horizontally, vertically, or radially. If you set it to radial, the "
"``Initial Angle`` and ``Fill Degrees`` properties let you limit the range of "
"the gauge."
msgstr ""
"``Mode`` プロパティは、バーが伸びる方向 (水平、垂直、または放射状) を制御しま"
"す。radialに設定すると、 ``Initial Angle`` と ``Fill Degrees`` プロパティで"
"ゲージの範囲を制限できます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:131
msgid ""
"To animate the bar, you'll want to look at the Range section. Set the "
"``Min`` and ``Max`` properties to define the range of the gauge. For "
"instance, to represent a character's life, you'll want to set ``Min`` to ``0,"
"`` and ``Max`` to the character's maximum life. Change the ``Value`` "
"property to update the bar. If you leave the ``Min`` and ``Max`` values to "
"the default of ``0`` and ``100,`` and set the ``Value`` property to ``40``, "
"40% of the ``Progress`` texture will show up, and 60% of it will stay hidden."
msgstr ""
"バーをアニメーションさせるには、Rangeセクションを見る必要があるでしょう。 "
"ゲージの範囲を定めるために、\\ ``Min`` と ``Max`` プロパティを設定してくださ"
"い。例えば、キャラクターのライフを表するためには、\\ ``Min`` を ``0,`` に、そ"
"して ``Max`` をキャラクターの最大のライフに設定する必要があるでしょう。 バー"
"を更新するためには、\\ ``Value`` プロパティ変更してください。もし ``Min`` と "
"``Max`` を それぞれデフォルトの ``0`` と ``100,`` に、そして ``Value`` プロパ"
"ティを ``40`` にしたならば、 40%の ``Progress`` テクスチャが現れ、残りの60%は"
"隠れたままになります。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:141
msgid "TextureProgress bar, two thirds filled"
msgstr "TextureProgressバー、3分の2が塗りつぶされました"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:144
msgid "Label"
msgstr "Label"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:146
msgid ""
"**Label** prints text to the screen. You'll find all its properties in the "
"Label section, in the Inspector. Write the text in the ``Text`` property, "
"and check Autowrap if you want it to respect the textbox's size. If Autowrap "
"is off, you won't be able to scale the node. You can align the text "
"horizontally and vertically with Align and Valign, respectively."
msgstr ""
"**Label** はスクリーンにテキストを表示します。インスペクタのLabelセクションで"
"全てのプロパティを確認できるでしょう。\\ ``Text`` プロパティでテキストを書"
"き、もしテキストボックスの大きさを重視しないならAutowrapにチェックを入れてく"
"ださい。もし Autowrapがオフのとき、ノードを拡大することはできないでしょう。"
"AlignとValignを用いることでそれぞれ横方向と縦方向に整列させることができます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:155
msgid "Picture of a Label"
msgstr "ラベルの画像"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:158
msgid "NinePatchRect"
msgstr "\\ NinePatchRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:160
msgid ""
"**NinePatchRect** takes a texture split in 3 rows and 3 columns. The center "
"and the sides tile when you scale the texture, but it never scales the "
"corners. It is useful to build panels, dialog boxes and scalable backgrounds "
"for your UI."
msgstr ""
"**NinePatchRect** は3行と3列に分割されたテクスチャを受け取ります。 中央と横の"
"タイルは拡大されますが、隅のタイルは拡大されません。パネルやダイアログボック"
"スや拡大可能なUI用の背景を作るさいに便利です。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:167
msgid "NinePatchRect scaled with the min\\_size property"
msgstr "\\ min\\_sizeプロパティでスケーリングされたNinePatchRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:170
msgid "There are two workflows to build responsive UIs"
msgstr "応答性の高いUIを構築するための2つのワークフローがあります"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:172
msgid ""
"There are two workflows to build scalable and flexible interfaces in Godot:"
msgstr ""
"Godotには、スケーラブルで柔軟なインターフェイスを構築するための 2 つのワーク"
"フローがあります:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:174
msgid ""
"**Place UI elements precisely with anchors:** Use the **Layout** menu to "
"place and resize a UI element relative to its parent."
msgstr ""
"**アンカーを使用してUI要素を正確に配置する:** **レイアウト**\\ メニューを使用"
"すれば、UI要素をその親に対して相対的に配置とサイズ変更できます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:175
msgid ""
"**Arrange control nodes automatically with containers:** Use container nodes "
"to automatically scale and place UI elements."
msgstr ""
"**コンテナを使ってコントロールノードを自動的に配置する:** コンテナノードを使"
"えば、UI要素を自動的に拡大縮小して配置できます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:177
msgid ""
"The two approaches are not always compatible. Because a container controls "
"its children, you cannot use the layout menu on them. Each container has a "
"specific effect, so you may need to nest several of them to get a working "
"interface. With the layout approach you work from the bottom up, on the "
"children. As you don't insert extra containers in the scene it can make for "
"cleaner hierarchies, but it's harder to arrange items in a row, column, "
"grid, etc."
msgstr ""
"２つのアプローチはいつも相性が良いわけではありません。コンテナは子ノードを操"
"作し、それらのレイアウトメニューを使えないからです。それぞれのコンテナは特定"
"の効果を持ち、操作画面にたどり着くまでにいくつかのノードをたどらなければなら"
"ないかもしれません。レイアウトアプローチでは子ノードの下の画面から行うことが"
"できます。シーンに追加のコンテナを挿入しないなら、見通しのよい階層を構成でき"
"るでしょう。しかし、縦、横、グリッド等にアイテムを配置することは難しくなるで"
"しょう。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:179
msgid ""
"As you create UIs for your games and tools, you'll develop a sense for what "
"fits best in each situation."
msgstr ""
"ゲームやツールのUIを作っていけば、それぞれの状況で何がいちばん適しているのか"
"分かるようになっていきます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:183
msgid "Place UI elements precisely with anchors"
msgstr "アンカー(Anchor)を使用してUI要素を正確に配置する"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:185
msgid ""
"Control nodes have a position and size, but they also have anchors and "
"margins. Anchors define the origin, or the reference point, for the Left, "
"Top, Right and Bottom edges of the node. Change any of the 4 anchors to "
"change the reference point of the margins."
msgstr ""
"コントロールノードには位置とサイズがありますが、アンカー(Anchor)と余白"
"(Margin)もあります。アンカーは、ノードの左端、上端、右端、下端の原点または参"
"照点を定義します。余白の基準点を変更するには、4つのアンカーのいずれかを変更し"
"ます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:192
msgid "The anchor property"
msgstr "アンカーのプロパティ"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:195
msgid "How to change the anchor"
msgstr "アンカーを変更する方法"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:197
msgid ""
"Like any properties, you can edit the 4 anchor points in the Inspector, but "
"this is not the most convenient way. When you select a control node, the "
"layout menu appears above the viewport, in the toolbar. It gives you a list "
"of icons to set all 4 anchors with a single click, instead of using the "
"inspector's 4 properties. The layout menu will only show up when you select "
"a control node."
msgstr ""
"他のプロパティと同じく、４個あるアンカーポイントをインスペクタで編集すること"
"もできますが、最適な方法ではありません。コントロールノードを選択すると、"
"ビューポートの上にあるツールバーに『レイアウト』メニューが現れます。インスペ"
"クタに４個あるプロパティの代わりに、このアイコン付きのリストから選べば、一発"
"ですべてのアンカーを設定できます。『レイアウト』メニューは、コントロールノー"
"ドを選択したときにのみ出てきます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:206
msgid "The layout menu in the viewport"
msgstr "ビューポートのレイアウトメニュー"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:209
msgid "Anchors are relative to the parent container"
msgstr "アンカーは親コンテナに対して相対的です"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:211
msgid ""
"Each anchor is a value between 0 and 1. For the left and top anchors, a "
"value of 0 means that without any margin, the node's edges will align with "
"the left and top edges of its parent. For the right and bottom edges, a "
"value of 1 means they'll align with the parent container's right and bottom "
"edges. On the other hand, margins represent a distance to the anchor "
"position in pixels, while anchors are relative to the parent container's "
"size."
msgstr ""
"各アンカーは0から1の間の値です。左アンカーと上端アンカーの場合、値0は余白"
"(Margin)なしで、ノードの端が親の左端と上端に位置合わせすることを意味します。"
"右端と下端の場合で、値が1なら、親コンテナーの右端と下端に位置合わせされます。"
"一方、余白はアンカーからの距離(ピクセル単位)を表し、アンカーは親コンテナーの"
"サイズに対して相対的です。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:221
msgid ""
"Margins are relative to the anchor position, which is relative to the "
"anchors. In practice, you'll often let the container update margins for you"
msgstr ""
"余白(Margin size)はアンカー位置(Anchor pin)に対して相対的であり、そしてアン"
"カー位置もまた相対的です。実際には、余白の更新はコンテナに任せることが多くな"
"るでしょう。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:226
msgid "Margins change with the anchor"
msgstr "アンカーによって余白が変化する"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:228
msgid ""
"Margins update automatically when you move or resize a control node. They "
"represent the distance from the control node's edges to its anchor, which is "
"relative to the parent control node or container. That's why your control "
"nodes should always be inside a container, as we'll see in a moment. If "
"there's no parent, the margins will be relative to the node's own bounding "
"Rectangle, set in the Rect section, in the inspector."
msgstr ""
"コントロールノードを移動またはサイズ変更すると、余白が自動的に更新されます。"
"これらは、親のコントロールノードあるいはコンテナの端からアンカーまでの距離を"
"表します。すぐに分かりますが、これがコントロール ノードを常にコンテナ内に配置"
"するべき理由なのです。もし親がない場合、余白は、インスペクタのRectセクション"
"で設定した、ノード独自の境界矩形に対して相対的になります。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:238
msgid "Margins on a CenterContainer set to the \"Full Rect\" anchor"
msgstr "「Rect全面」アンカーで設定した CenterContainer の余白"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:240
msgid ""
"Try to change the anchors or nest your Control nodes inside Containers: the "
"margins will update. You'll rarely need to edit the margins manually. Always "
"try to find a container to help you first; Godot comes with nodes to solve "
"all the common cases for you. Need to add space between a lifebar and the "
"border of the screen? Use the MarginContainer. Want to build a vertical "
"menu? Use the VBoxContainer. More on these below."
msgstr ""
"アンカーを変更するか、コンテナ内にコントロールノードをネストしてみてくださ"
"い。余白が更新されます。この余白を手動で編集する必要はほとんどありません。常"
"に最初にまず、使えそうなコンテナを探すようにしてください。Godotはあなたのため"
"に、あらゆる一般的な課題を解決できるノードを持っています。ライフバーと画面の"
"境界の間にスペースを追加する必要がありますか？ MarginContainerを使用してくだ"
"さい。 垂直メニューを作りたいですか？ VBoxContainerを使用しましょう。さらなる"
"詳細は下記にあります。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:249
msgid "Use size tags to change how UI elements fill the available space"
msgstr "サイズタグを使用して、UI要素が使用可能な領域を埋める方法を変更する"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:251
msgid ""
"Every control node has Size Flags. They tell containers how the UI elements "
"should scale. If you add the \"Fill\" flag to the Horizontal or Vertical "
"property, the node's bounding box will take all the space it can, but it'll "
"respect its siblings and retain its size. If there are 3 TextureRect nodes "
"in an HBoxContainer, with the \"Fill\" flags on both axes, they'll each take "
"up to a third of the available space, but no more. The container will take "
"over the node and resize it automatically."
msgstr ""
"各コントロールノードにはサイズフラグ(Size Flags)があります。これらは、UI要素"
"のスケーリング方法をコンテナに指示します。「Fill (埋める)」フラグを "
"Horizontal(水平) または Vertical(垂直) のプロパティに追加すると、ノードのバウ"
"ンディングボックスは可能な限りのスペースを使用しますが、兄弟を考慮してサイズ"
"を保持します。HBoxContainerに3つのTextureRectノードがあり、両方の軸に「Fill」"
"フラグが設定されている場合、それぞれが使用可能なスペースの最大3分の1を使用し"
"ますが、それ以上は使用できません。コンテナがノードを引き継ぎ、自動的にサイズ"
"が変更されます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:261
msgid "3 UI elements in an HBoxContainer, they align horizontally"
msgstr "HBoxContainer内の3つのUI要素は、水平方向に整列します"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:263
msgid ""
"The \"Expand\" flag lets the UI element take all the space it can, and push "
"against its siblings. Its bounding rectangle will grow against the edges of "
"its parent, or until it's blocked by another UI node."
msgstr ""
"「Expand (拡張)」フラグを使用すると、UI要素は可能な限りのスペースを使用して、"
"兄弟要素をプッシュできます。そのバウンディングボックスは、親のエッジに向かっ"
"て、または別のUIノードによってブロックされるまで大きくなります。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:269
msgid ""
"The same example as above, but the center node has the \"Expand\" size flag"
msgstr "上記と同じ例ですが、中央ノードには「Expand」サイズフラグがあります"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:272
msgid ""
"You'll need some practice to understand the size tags, as their effect can "
"change quite a bit depending on how you set up your interface."
msgstr ""
"サイズタグの効果はインターフェイスの設定方法によって大きく異なるため、サイズ"
"タグを理解するにはある程度の練習が必要です。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:276
msgid "Arrange control nodes automatically with containers"
msgstr "コンテナを使用してコントロールノードを自動配置する"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:278
msgid ""
"Containers automatically arrange all children Control nodes including other "
"containers in rows, columns, and more. Use them to add padding around your "
"interface or center nodes in their bounding rectangles. All built-in "
"containers update in the editor, so you can see the effect instantly."
msgstr ""
"コンテナは、子になったコントロールノード(他のコンテナも可)をすべて、自動的に"
"縦や横などに並べます。インターフェースの周りにパディングを追加したり、ノード"
"を四角形の中央に配置するのに使えます。組み込みのコンテナは、すべてエディタの"
"中で更新されるので、すぐに反映された結果を見ることができます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:284
msgid ""
"Containers have a few special properties to control how they arrange UI "
"elements. To change them, navigate down to the Custom Constants section in "
"the Inspector."
msgstr ""
"コンテナには、UI要素の配置方法を制御するための特別なプロパティがいくつかあり"
"ます。変更するには、インスペクタのカスタム定数セクションに移動します。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:289
msgid "The 5 most useful containers"
msgstr "最も有用な5つのコンテナ"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:291
msgid ""
"If you build tools, you might need all of the containers. But for most "
"games, a handful will be enough:"
msgstr ""
"ツールを構築する場合は、すべてのコンテナが必要になる場合があります。しかし、"
"ほとんどのゲームでは、一握りで十分です:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:294
msgid "MarginContainer, to add margins around parts of the UI"
msgstr "MarginContainerは、UIの一部の周囲に余白を追加します"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:295
msgid "CenterContainer, to center its children in its bounding box"
msgstr "CenterContainerは、その子を境界ボックスに中央に配置します"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:296
msgid ""
"VboxContainer and HboxContainer, to arrange UI elements in rows or columns"
msgstr "VboxContainerおよびHboxContainer、行または列にUI要素を配置します"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:298
msgid "GridContainer, to arrange Controls nodes in a grid-like pattern"
msgstr ""
"GridContainer、グリッドのようなパターンでコントロールノードを配置します"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:300
msgid ""
"CenterContainer centers all its children inside of its bounding rectangle. "
"It's one you typically use for title screens, if you want the options to "
"stay in the center of the viewport. As it centers everything, you'll often "
"want a single container nested inside it. If you use textures and buttons "
"instead, they'll stack up."
msgstr ""
"CenterContainerは、すべての子をバウンディング矩形の内側にセンタリングします。"
"これはタイトルスクリーンにおいて、オプションをビューポートの中央に表示してお"
"きたい場合によく使用する方法です。これはすべてを中央に配置してしまうため、多"
"くの場合、もうひとつのコンテナを中にネストして配置したくなるでしょう。そうせ"
"ずにテクスチャやボタンを使用すると、重なってしまいます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:308
msgid ""
"CenterContainer in action. The life bar centers inside its parent container."
msgstr ""
"CenterContainerの使用例。ライフバーは、親コンテナの中央に配置されます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:311
msgid ""
"The MarginContainer adds a margin on any side of the child nodes. Add a "
"MarginContainer that encompasses the entire viewport to add a separation "
"between the edge of the window and the UI. You can set a margin on the top, "
"left, right, or bottom side of the container. No need to tick the checkbox: "
"click the corresponding value box and type any number. It will activate "
"automatically."
msgstr ""
"MarginContainerは、子ノードの任意の側に余白を追加します。ウィンドウの端とUIを"
"分離させるには、ビューポート全体を囲むMarginContainerを追加します。コンテナに"
"は上、左、右、下の側に余白を設定できます。チェックボックスをさわる必要はあり"
"ません: 対応する値ボックスをクリックし、任意の数を入力するだけで、自動的に有"
"効になります。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:320
msgid "The MarginContainer adds a 40px margin around the Game User Interface"
msgstr "MarginContainer で、ゲームUIの周囲に 40ピクセルの余白を追加しています"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:322
msgid ""
"There are two BoxContainers: VBoxContainer and HBoxContainer. You cannot add "
"the BoxContainer node itself, as it is a helper class, but you can use "
"vertical and horizontal box containers. They arrange nodes either in rows or "
"columns. Use them to line up items in a shop, or to build complex grids with "
"rows and columns of different sizes, as you can nest them to your heart's "
"content."
msgstr ""
"ボックスコンテナには、VBoxContainerとHBoxContainerの2つがあります。"
"BoxContainerノード自体はヘルパー クラスなので追加できませんが、垂直および水平"
"のボックスコンテナを使用できます。ノードは行または列に配置されます。ショップ"
"内のアイテムを並べて作成したり、さまざまなサイズの行と列を持つ複雑なグリッド"
"を構築したりするために使用します。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:331
msgid "The HBoxContainer horizontally aligns UI elements"
msgstr "HBoxContainerはUI要素を水平方向に揃えます"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:333
msgid ""
"VBoxContainer automatically arranges its children into a column. It puts "
"them one after the other. If you use the separation parameter, it will leave "
"a gap between its children. HBoxContainer arranges UI elements in a row. "
"It's similar to the VBoxContainer, with an extra ``add_spacer`` method to "
"add a spacer control node before its first child or after its last child, "
"from a script."
msgstr ""
"VBoxContainerは、子を自動的に縦一列に配置し、並べていきます。Separation (分"
"離) パラメータを使用すると、子と子の間に隙間をつくります。HBoxContainerは、UI"
"要素を横一列に並べます。これはVBoxContainerに似ていますが、最初の子ノードの前"
"または最後の子ノードの後にspacerコントロールノードをスクリプトから追加するた"
"めの ``add_spacer`` メソッドが追加されています。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:340
msgid ""
"The GridContainer lets you arrange UI elements in a grid-like pattern. You "
"can only control the number of columns it has, and it will set the number of "
"rows by itself, based on its children's count. If you have nine children and "
"three columns, you will have 9÷3 = 3 rows. Add three more children and "
"you'll have four rows. In other words, it will create new rows as you add "
"more textures and buttons. Like the box containers, it has two properties to "
"set the vertical and horizontal separation between the rows and columns "
"respectively."
msgstr ""
"GridContainerを使用すると、グリッドのようなパターンでUI要素を配置できます。列"
"の数のみを制御でき、子の数に基づいて行数が決められます。9つの子と3つの列があ"
"る場合は、9÷ 3= 3行があります。さらに3つの子を追加すると、4行になります。つま"
"り、テクスチャやボタンを追加すると、新しい行が作成されます。ボックスコンテナ"
"と同様に、行列の間で垂直と水平の分離を設定するためのプロパティが2つあります。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:351
msgid "A GridContainer with 2 columns. It sizes each column automatically."
msgstr "2つの列を持つGridContainer。各列のサイズは自動的に設定されます。"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:353
msgid ""
"Godot's UI system is complex, and has a lot more to offer. To learn how to "
"design more advanced interfaces, head to the :ref:`GUI section <toc-learn-"
"features-gui>` of the docs."
msgstr ""
"GodotのUIシステムは複雑で、さらに多くの機能があります。より高度なインター"
"フェースをデザインする方法を学ぶには、ドキュメントの\\ :ref:`GUIの節 <toc-"
"learn-features-gui>`\\ へと進んでください。"
