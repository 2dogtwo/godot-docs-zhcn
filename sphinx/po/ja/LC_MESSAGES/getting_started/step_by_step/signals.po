# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-04 09:58+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:1
#, fuzzy
msgid "Signal"
msgstr "シグナル"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Signals"
msgstr "シグナル"

#: ../../docs/getting_started/step_by_step/signals.rst:10
msgid "Introduction"
msgstr "はじめに"

#: ../../docs/getting_started/step_by_step/signals.rst:12
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"シグナルは、\\ *observer*\\ パターンのGodotバージョンです。これにより、ノード"
"は、他のノードが聞いて応答できるメッセージを発信できます。例えば、ボタンが押"
"されているかどうかを継続的に確認するのではなく、ボタンが押されたときに信号を"
"発することができます。"

#: ../../docs/getting_started/step_by_step/signals.rst:17
#, fuzzy
msgid ""
"You can read more about the observer pattern here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"オブザーバーパターンの詳細については、以下をご覧ください (英語): http://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:19
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"シグナルは、ゲーム オブジェクトを\\ *分離*\\ する方法であり、コードの整理と管"
"理が容易になります。常に複数のゲーム オブジェクト同士を強制的に会わせるのでは"
"なく、代わりにオブジェクトはシグナルを発信でき、関係するすべてのオブジェクト"
"は予約および応答ができます。"

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"以下に、独自のプロジェクトでシグナルを使用する方法の例をいくつか示します。"

#: ../../docs/getting_started/step_by_step/signals.rst:27
msgid "Timer example"
msgstr "タイマーの例"

#: ../../docs/getting_started/step_by_step/signals.rst:29
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"シグナルがどのように機能するかを見るために、\\ :ref:`Timer <class_Timer>`\\ "
"ノードを使用してみましょう。 Node2Dと2つの子:Timerと\\ :ref:`Sprite "
"<class_Sprite>`\\ で新しいシーンを作成します。 Sceneドックで、Node2Dの名前を"
"TimerExampleに変更します。"

#: ../../docs/getting_started/step_by_step/signals.rst:33
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"スプライトのテクスチャには、Godotアイコン、またはその他の好きな画像を使用でき"
"ます。そのためには、スプライトのテクスチャ属性ドロップダウンメニューで ``読込"
"み`` を選択します。ルートノードにスクリプトをアタッチしますが、まだコードを追"
"加しないでください。"

#: ../../docs/getting_started/step_by_step/signals.rst:37
msgid "Your scene tree should look like this:"
msgstr "シーンツリーは次のようになります:"

#: ../../docs/getting_started/step_by_step/signals.rst:41
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"Timerノードのプロパティで、\\ *Autostart*\\ の横にある「オン」ボックスをク"
"リックします。これにより、シーンの実行時にタイマーが自動的に開始されます。\\ "
"*Wait Time*\\ は1秒のままにしておきましょう。"

#: ../../docs/getting_started/step_by_step/signals.rst:45
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"「インスペクタ」タブの隣には、「ノード」というラベルの付いたタブがあります。 "
"このタブをクリックすると、選択したノードが発信できるすべての信号が表示されま"
"す。 Timerノードの場合、関係するのは「timeout」です。 このシグナルは、タイ"
"マーが ``0`` に到達するたびに出力されます。"

#: ../../docs/getting_started/step_by_step/signals.rst:52
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"シグナルパネルの下にある「timeout()」シグナルをクリックし、「接続...」をク"
"リックします。 次のウィンドウが表示され、信号の接続方法を定義できます:"

#: ../../docs/getting_started/step_by_step/signals.rst:58
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"左側でシーンのノードを見ることができます。信号として「監視」したいノードを選"
"択できます。タイマーノードは青色で、ノードが信号を発していること意味します。"
"ルートノードを選択してください。"

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"ターゲットノードにはスクリプトがアタッチされている\\ *必要*\\ があります。そ"
"うしないと、エラーメッセージが表示されます。"

#: ../../docs/getting_started/step_by_step/signals.rst:66
#, fuzzy
msgid ""
"If you toggle the Advanced menu, you'll see on the right side that you can "
"bind an arbitrary number of arguments of (possibly) different types. This "
"can be useful when you have more than one signal connected to the same "
"method, as each signal propagation will result in different values for those "
"extra call arguments."
msgstr ""
"右側では、任意の数の、(可能な限り)異なる型の引数をバインドできます。これは、"
"同じメソッドに複数のシグナルを接続するときに便利です。それぞれのシグナルが伝"
"播したとき、これら追加の引数によって別々の値に分けられるからです。"

#: ../../docs/getting_started/step_by_step/signals.rst:70
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"ウィンドウの下部には、「メソッドの選択」というラベルのフィールドがあります。 "
"これは、使用したいターゲットノードのスクリプト内の関数の名前です。 デフォルト"
"では、Godotは\\ ``_on_<ノード名>_<シグナル名>``\\ という命名規則を使用してこ"
"の関数を作成しますが、必要に応じて変更できます。"

#: ../../docs/getting_started/step_by_step/signals.rst:75
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"「接続」をクリックすると、スクリプトで関数が作成されたことがわかります:"

#: ../../docs/getting_started/step_by_step/signals.rst:96
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"これで、仮置きのコードを、シグナルの受信時に実行したいコードに置き換えること"
"ができます。 スプライトを点滅させましょう:"

#: ../../docs/getting_started/step_by_step/signals.rst:121
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"シーンを実行すると、スプライトが1秒ごとに点滅します。 これを変更するには、タ"
"イマーの\\ *Wait Time*\\ プロパティを変更します。"

#: ../../docs/getting_started/step_by_step/signals.rst:125
msgid "Connecting signals in code"
msgstr "コード内でシグナルをを接続する"

#: ../../docs/getting_started/step_by_step/signals.rst:127
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"エディタではなくコードでシグナル接続を行うこともできます。 これは通常、コード"
"を介してノードをインスタンス化するときに必要であり、エディタを使用して接続す"
"ることはできません。"

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"まず、タイマーの[ノード]タブで接続を選択し、[切断]をクリックして、シグナルを"
"切断します。"

#: ../../docs/getting_started/step_by_step/signals.rst:136
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"コードで接続するために、\\ ``connect``\\ 関数を使用できます。接続が実行時に行"
"われるように、その関数を\\ ``_ready()``\\ に入れます。関数の構文は "
"``<source_node>.connect(<signal_name>, <target_node>, "
"<target_function_name>)`` です。タイマー接続のコードは次のとおりです:"

#: ../../docs/getting_started/step_by_step/signals.rst:171
msgid "Custom signals"
msgstr "カスタムシグナル"

#: ../../docs/getting_started/step_by_step/signals.rst:173
msgid "You can also declare your own custom signals in Godot:"
msgstr "Godotでは独自のカスタムシグナルを宣言することもできます:"

#: ../../docs/getting_started/step_by_step/signals.rst:192
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"一度宣言すると、カスタムシグナルがインスペクタに表示され、ノードの組み込みシ"
"グナルと同じ方法で接続できます。"

#: ../../docs/getting_started/step_by_step/signals.rst:195
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr ""
"コードを介してシグナルを発信するには、\\ ``emit_signal`` 関数を使用します:"

#: ../../docs/getting_started/step_by_step/signals.rst:222
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""
"シグナルは任意により複数の引数を付けて宣言できます。カッコの中に引数の名前を"
"指定します:"

#: ../../docs/getting_started/step_by_step/signals.rst:243
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"シグナル引数はエディタのノードドックに表示され、Godotはそれらを使用してコール"
"バック関数を生成できます。しかしながら、シグナルを発信するときに、任意の数の"
"引数を発行できます。正しい値を出力するのはあなた次第です。"

#: ../../docs/getting_started/step_by_step/signals.rst:248
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr ""
"値を渡すには、それらを\\ ``emit_signal`` 関数の2番目の引数として追加します:"

#: ../../docs/getting_started/step_by_step/signals.rst:276
msgid "Conclusion"
msgstr "結論"

#: ../../docs/getting_started/step_by_step/signals.rst:278
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Godotの組み込みノードタイプの多くは、イベントの検出に使用できる信号を提供しま"
"す。 たとえば、コインの見た目をした\\ :ref:`Area2D <class_Area2D>`\\ は、プレ"
"イヤーの物理ボディが衝突形状(コリジョンシェイプ)に入るたびに "
"``body_entered`` シグナルを発し、プレイヤーがそれを収集したタイミングを知るこ"
"とができます。"

#: ../../docs/getting_started/step_by_step/signals.rst:283
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"次のセクション\\ :ref:`doc_your_first_game`\\ では、さまざまなゲームコンポー"
"ネントを接続するシグナルのいくつかの使用法を含む、完全なゲームを構築します。"
