# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:4
msgid "Design the GUI"
msgstr "GUIの設計"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:6
msgid ""
"Now that you've nailed the basics, we're going to see how to build a game "
"Graphical User Interface (GUI) with reusable UI components: a life bar, an "
"energy bar, and bomb and emerald counters. By the end of this tutorial, "
"you'll have a game GUI, ready to control with GDscript or VisualScript:"
msgstr ""
"これで基本を確認できたので、再利用可能なUIコンポーネント(ライフバー、エネル"
"ギーバー、爆弾とエメラルドカウンターなど)を使用してゲームのグラフィカルユー"
"ザーインターフェイス(GUI)を構築する方法を見ていきます。このチュートリアルの終"
"わりまでには、GDscriptまたはVisualScriptで制御する準備ができたゲームGUIが完成"
"します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:13
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:621
msgid "The final result"
msgstr "最終結果"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:15
msgid "You'll also learn to:"
msgstr "また、次の方法についても学習します:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:17
msgid "Create flexible UI components"
msgstr "柔軟なUIコンポーネントの作成"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:18
msgid "Use scene inheritance"
msgstr "シーンの継承を使用する"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:19
msgid "Build a complex UI"
msgstr "複雑なUIを構築する"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:21
msgid ""
"Download the project files: :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` and extract the archive. Import the `start/` project in "
"Godot to follow this tutorial. The `end/` folder contains the final result."
msgstr ""
"プロジェクトファイル\\ :download:`ui_gui_design.zip <files/ui_gui_design."
"zip>`\\ をダウンロードし、アーカイブを解凍します。このチュートリアルに沿って"
"いくには、Godotに `start/` プロジェクトをインポートしてください。 `end/` フォ"
"ルダには最終結果が含まれています。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:25
msgid ""
"You can watch this tutorial as a `video on YouTube <https://www.youtube.com/"
"watch?v=y1E_y9AIqow>`_."
msgstr ""
"このチュートリアルは、\\ `YouTubeのビデオ <https://www.youtube.com/watch?"
"v=y1E_y9AIqow>`_\\ として見ることができます (英語)。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:28
msgid "Breaking down the UI"
msgstr "UIの分析"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:30
msgid ""
"Let's break down the final UI and plan the containers we'll use. As in the :"
"doc:`ui_main_menu`, it starts with a ``MarginContainer``. Then, we can see "
"up to three columns:"
msgstr ""
"最終UIを分析し、どのコンテナを使用するか計画します。\\ :doc:`ui_main_menu` "
"\\ と同様に ``MarginContainer`` から始まります。すると、3つの列に分けられま"
"す:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:34
msgid "The life and energy counters on the left"
msgstr "左側にはライフとエネルギーのカウンター"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:35
msgid "The life and energy bars"
msgstr "ライフとエネルギーのバー"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:36
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:42
msgid "The bomb and emerald counters on the right"
msgstr "右側の爆弾とエメラルドのカウンター"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:38
msgid ""
"But the bar's label and the gauge are two parts of the same UI element. If "
"we think of them this way, we're left with two columns:"
msgstr ""
"しかし、バーのラベルとゲージは同じUI要素の2つの部分です。このように考えると、"
"2つの列が残ります:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:41
msgid "The life and energy bars on the left"
msgstr "左側にライフとエネルギーバー"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:44
msgid ""
"This makes it easier to nest containers: we have some margins around the "
"border of the screen using a ``MarginContainer``, followed by an "
"``HBoxContainer`` to manage our two columns. The two bars stack on top of "
"one another inside a ``VBoxContainer``. And we'll need a last "
"``HBoxContainer`` in the right column to place the bomb and emerald counters "
"side-by-side."
msgstr ""
"これにより、コンテナのネストが容易になります。画面の縁からの余白を入れるため"
"に ``MarginContainer`` を使い、そこに ``HBoxContainer`` で2つの列を調整しま"
"す。(左側の) 2つのバーは ``VBoxContainer`` 内で上下に重ねます。そして、仕上げ"
"に爆弾とエメラルドのカウンターを並べて配置するため、右側のカラムに "
"``HBoxContainer`` が必要です。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:53
msgid "We get a clean UI layout with only 4 containers"
msgstr "たった4つのコンテナできれいなUIレイアウトが得られました"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:55
msgid ""
"We will need extra containers inside the individual UI components, but this "
"gives us the main GUI scene's structure. With this plan in place, we can "
"jump into Godot and create our GUI."
msgstr ""
"個々のUIコンポーネント内に追加のコンテナが必要になりますが、これによってメイ"
"ンのGUIシーンの構造がわかります。この計画が整ったら、いよいよGodotでGUIを作成"
"できます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:60
msgid "Create the base GUI"
msgstr "基本GUIの作成"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:62
msgid ""
"There are two possible approaches to the GUI: we can design elements in "
"separate scenes and put them together, or prototype everything in a single "
"scene and break it down later. I recommend working with a single scene as "
"you can play with your UI's placement and proportions faster this way. Once "
"it looks good, you can save entire sections of the node tree as reusable sub-"
"scenes. We'll do that in a moment."
msgstr ""
"GUI の設計には、別々のシーンで要素を設計して組み合わせるか、単一のシーンです"
"べてをプロトタイプ化して後で分解するか、という 2 つの方法があります。UI の配"
"置と大きさ変更をより速く実行できるため、単一のシーンで作業する方をおすすめし"
"ます。デザインの見栄えが良くなったら、ノード ツリーのセクション全体を再利用可"
"能なサブシーンとして保存できます。詳しくは、このすぐ後に説明します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:69
msgid "For now, let's start with a few containers."
msgstr "では、いくつかのコンテナから始めましょう。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:71
msgid ""
"Create a new scene and add a ``MarginContainer``. Select the node and name "
"it ``GUI``."
msgstr ""
"新しいシーンを作成し、 ``MarginContainer`` を追加します。そのノードを選択"
"し、 ``GUI`` という名前を付けます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:74
msgid ""
"We want our interface to anchor to the top of the screen. Select the ``GUI`` "
"node and click the Layout button at the top of the viewport. Select the "
"``Top Wide`` option. The ``GUI`` node will anchor to the top edge of its "
"parent, the viewport by default. It will resize automatically on the "
"vertical axis to make space for its child UI components."
msgstr ""
"インターフェイスを画面の上部に固定する必要があります。\\ ``GUI`` ノードを選択"
"し、ビューポートの上部にある「レイアウト」ボタンをクリックして ``上伸長`` オ"
"プションを選択します。\\ ``GUI`` ノードは、その親(デフォルトではビューポート)"
"の上端に固定されます。子UIコンポーネント用のスペースを作るために、サイズは垂"
"直軸上で自動的に変更されます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:80
msgid "Save the scene as ``GUI.tscn``. We will put the entire GUI in it."
msgstr "シーンを ``GUI.tscn`` として保存します。 GUI全体をその中に配置します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:82
msgid ""
"With the ``MarginContainer`` selected, head to the inspector and scroll down "
"to the custom constants section. Unfold it and click the field next to each "
"of the ``Margin`` properties. Set them all to ``20`` pixels. Next, add an "
"``HBoxContainer`` node. This one will contain our two bars on the left and "
"separate them from the two counters on the right."
msgstr ""
"``MarginContainer`` を選択した状態で、インスペクタに移動し、カスタム定数"
"(Custom Constants)のセクションまで下にスクロールします。これを展開し、各 "
"``Margin`` プロパティの横のフィールドをクリックします。すべてを ``20`` ピクセ"
"ルに設定します。次に、 ``HBoxContainer`` ノードを追加します。これは、左側に2"
"本のバーがあり、右側の2つのカウンターと分けてあります。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:88
msgid ""
"We want to stack the bars vertically inside the ``HBoxContainer``. Add a "
"``VBoxContainer`` as a child of ``HBoxContainer`` and name it ``Bars``. "
"Select the parent ``HBoxContainer`` again and this time, add another "
"``HBoxContainer`` as a child of it. Call it ``Counters``. With these four "
"containers, we have the base for our GUI scene."
msgstr ""
"まずは ``HBoxContainer`` 内にバーを垂直に積み重ねたいと思います。 "
"``HBoxContainer`` の子として ``VBoxContainer`` を追加し、それに ``Bars`` とい"
"う名前を付けます。次に、親になった ``HBoxContainer`` を再度選択し、その子とし"
"て別の ``HBoxContainer`` を追加します。それを ``Counters`` と呼びます。これら"
"の4つのコンテナにより、GUIシーンのベースができました。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:95
msgid "You should have 4 containers that look like this"
msgstr "このようにコンテナが4つあるはずです。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:99
msgid ""
"We can work this way because we first broke down our UI design and took a "
"few moments to think about the containers we'd use. When you follow a "
"tutorial like this, it may seem weird. But once you're working on real "
"games, you'll see it's an efficient workflow."
msgstr ""
"最初にUIデザインを分解し、使うコンテナについて少し考えたので、このように作る"
"ことができます。チュートリアルでは奇妙に思えるかもしれません。しかし実際の"
"ゲームで作業してみると、効率的なワークフローであることがわかります。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:105
msgid "Create the bars' base"
msgstr "バーのベースを作成する"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:107
msgid ""
"Each bar is split into two sub-elements that align horizontally: the label "
"with the health count on the left, and the gauge on the right. Once again, "
"the ``HBoxContainer`` is the perfect tool for the job. Select the ``Bars`` "
"node and add a new ``HBoxContainer`` inside of it. Name it ``Bar``."
msgstr ""
"各バーは、水平方向に整列する2つのサブ要素に分割されます。左側が体力・カウント"
"のラベル、右側がゲージです。繰り返しになりますが、 ``HBoxContainer`` はこの作"
"業に最適なツールです。 ``Bars`` ノードを選択し、その中に新しい "
"``HBoxContainer`` を追加します。 ``Bar`` という名前を付けます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:113
msgid ""
"The label itself requires at least three nodes: a ``NinePatchRect`` for the "
"background, on top of which we'll add a texture on the left, either ``HP`` "
"or ``EP``, and a ``Label`` on the right for the value. We can nest "
"``Control`` nodes however we want. We could use the ``NinePatchRect`` as a "
"parent for the two other elements, as it encompasses them. In general, you "
"want to use containers instead, as their role is to help organize UI "
"components. We'll need a ``MarginContainer`` later anyway to add some space "
"between the life count and the gauge. Select the ``Bar`` and add a "
"``MarginContainer``. Name it ``Count``. Inside of it, add three nodes:"
msgstr ""
"ラベル自体には少なくとも3つのノードが必要です。 ``NinePatchRect`` は背景用"
"で、その上に ``HP`` または ``EP`` のテクスチャを追加し、値用に ``Label`` を右"
"側に追加します。 ``Control`` ノードであれば好きなようにネストできます。この "
"``NinePatchRect`` は他の2つの要素を囲んでいるので、親として使用することもでき"
"ます。しかし通常は、代わりにコンテナを使用します。UIコンポーネントの編成を助"
"けることが、コンテナの役割だからです。ライフカウントとゲージの間にスペースを"
"入れるため、いずれにせよ後で ``MarginContainer`` が必要になります。 ``Bar`` "
"を選択し、 ``MarginContainer`` を追加してください。それに ``Count`` という名"
"前を付けます。その中に、次の3つのノードを追加してください:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:124
msgid "A ``NinePatchRect`` named ``Background``"
msgstr "``Background`` という名前の ``NinePatchRect``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:125
msgid "A ``TextureRect`` named ``Title``"
msgstr "``Title`` という名前の ``TextureRect``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:126
msgid "And a ``Label`` named ``Number``"
msgstr "``Number`` という名前の ``Label``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:128
msgid "To add the nodes as siblings, always select the ``Count`` node first."
msgstr ""
"ノードを兄弟として追加するには、必ず最初に ``Count`` ノードを選択します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:132
msgid ""
"Your scene tree should look like this. We're ready to throw in some textures"
msgstr ""
"シーンツリーは次のようになります。いくつかのテクスチャを追加する準備ができま"
"した"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:135
msgid ""
"Our scene is still empty. It's time to throw in some textures. To load the "
"textures, head to the FileSystem dock to the left of the viewport. Browse "
"down to the res://assets/GUI folder."
msgstr ""
"シーンはまだ空です。テクスチャをいくつか投入します。テクスチャをロードするに"
"は、ビューポートの左側にあるファイルシステムドックに移動します。「res://"
"assets/GUI」フォルダに移動します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:141
msgid "You should see a list of textures that we'll use to skin our interface."
msgstr "インターフェースのスキンに使用するテクスチャのリストが表示されます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:144
msgid ""
"Select the ``Background`` in the Scene dock. In the Inspector, you should "
"see a ``Texture`` property. In the FileSystem tab, click and drag "
"``label_HP_bg.png`` onto the ``Texture`` slot. It stays squashed. The parent "
"MarginContainer will force its size down to 0 until we force elements inside "
"the container to have a minimum size. Select the ``Background`` node. In the "
"Inspector, scroll down to the Rect section. Set ``Min Size`` to (100, 40). "
"You should see the ``Background`` resize along with its parent containers."
msgstr ""
"シーンDockで背景を選択します。インスペクタに ``Texture`` プロパティが表示され"
"ます。タブで、 ``label_HP_bg.png`` をクリックし、テクスチャスロットにドラッグ"
"します。つぶれたままです。親の ``MarginContainer`` は、コンテナ内の要素が最小"
"サイズになるまで、サイズを0にします。 ``Background`` ノードを選択します。イン"
"スペクタで、矩形セクションまでスクロールします。 ``Min Size`` を(100、40)に設"
"定します。親コンテナとともに ``Background`` のサイズが変更されます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:153
msgid ""
"Next, select the ``Title`` and drag and drop ``label_HP.png`` into its "
"``Texture`` slot. Select the ``Number`` node, click the field next to the "
"``Text`` property and type ``10``. This way, we can see both nodes in the "
"viewport. They should stack up in the top-left corner of their parent "
"``MarginContainer``."
msgstr ""
"次に、 ``Title`` を選択し、 ``label_HP.png`` を ``Texture`` スロットにドラッ"
"グ&ドロップします。 ``Number`` ノードを選択し、 ``Text`` プロパティの横の"
"フィールドをクリックして ``10`` と入力します。これで、ビューポートに両方の"
"ノードが表示されます。これらのコンテナは、親の ``MarginContainer`` の左上隅に"
"積み重ねられます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:161
msgid "If you select both nodes, you should see something like this"
msgstr "両方のノードを選択すると、次のように表示されます"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:163
msgid ""
"As they have a container as their direct parent, we cannot move them freely: "
"the ``Count`` node will always reset their anchors, their size and position. "
"Try to move and resize the nodes in the viewport. Then, select any of the "
"three textures and press :kbd:`Ctrl + Up` or :kbd:`Ctrl + Down` to reorder "
"them in the Scene dock. They'll snap back to their previous size and "
"position."
msgstr ""
"これらは直接の親としてコンテナを持つため、自由に移動することはできません。\\ "
"``Count`` ノードは常にアンカー、サイズ、位置をリセットします。ビューポート内"
"のノードを移動およびサイズ変更してみてください。次に、3つのテクスチャのいずれ"
"かを選択し、\\ :kbd:`Ctrl + Up` または :kbd:`Ctrl + Down` を押して、シーン"
"ドックでそれらの順序を変更します。元のサイズと位置に戻ります。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:170
msgid ""
"Parent containers control the size, the scale, the margins, and the anchors "
"of their direct children. To modify the nodes, you must nest them inside a "
"regular Control or another UI element. We'll use the ``Background`` as a "
"parent for the ``Title`` and ``Number``. Select both the ``Title`` and "
"``Number``, and drag and drop them onto ``Background``."
msgstr ""
"親コンテナは、直接の子のサイズ、スケール、マージン、アンカーを制御します。"
"ノードを変更するには、通常のControlまたは別のUI要素内にノードをネストする必要"
"があります。 ``Title`` とナンバーの親として ``Background`` を使用します。 "
"``Title`` と ``Number`` の両方を選択し、 ``Background`` にドラッグ&ドロップし"
"ます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:179
msgid ""
"By using the Background node as the two textures' parent, we take control "
"away from the Count MarginContainer"
msgstr ""
"Backgroundノードを2つのテクスチャの親として使用することで、Count "
"(MarginContainer)による制御を取り除きます"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:182
msgid ""
"Select the ``Title`` and in the Inspector, change its ``Stretch Mode`` "
"property to ``Keep Centered``. Next find the ``Rect`` category in the "
"Inspector and change the ``Size`` property to (50, 40) so it only takes the "
"left half of the background.  Next, select the ``Number`` node. In the "
"viewport, click the ``Layout`` menu and click ``Full Rect``. The node will "
"resize to fit the ``Background``. Head to the Inspector and change its "
"``Align`` property to ``Right``, and the ``Valign`` property to ``Center``. "
"The text should snap to the center of the ``Background``'s right edge. "
"Resize the node horizontally, so it takes the right half of the "
"``Background`` and there's a bit of padding with the right edge."
msgstr ""
"``Title`` を選択し、インスペクタで ``Stretch Mode`` プロパティを ``Keep "
"Centered`` に変更します。次に、インスペクタで ``Rect`` カテゴリを見つけ、 "
"``Size`` プロパティを(50,40)に変更して、背景の左半分のみを取るようにします。"
"次に、 ``Number`` ノードを選択します。ビューポートで、 ``レイアウト`` メ"
"ニューをクリックし、 ``Rect全面`` をクリックします。ノードは ``Background`` "
"に合うようにサイズ変更されます。インスペクタに移動し、その ``Align`` プロパ"
"ティを ``Right`` に変更し、 ``Valign`` プロパティを ``Center`` に変更します。"
"テキストは ``Background``の右端の中央にスナップするはずです。ノードを水平方向"
"にサイズ変更して、 ``Background``の右半分を取り、右端に少しパディングを追加し"
"ます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:195
msgid ""
"Here's how the nodes' bounding boxes should look in the viewport. Keep it "
"rough, you don't need to place them too precisely for now."
msgstr ""
"ビューポートでノードのバウンディングボックスがどのように表示されるかを次に示"
"します。今の段階では正確に配置する必要はありません。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:199
msgid "Replace the Label's font"
msgstr "ラベルのフォントを置き換える"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:201
msgid ""
"The label's font is too small. We need to replace it. Select the ``Number`` "
"node and in the Inspector, scroll down to the ``Control`` class, and find "
"the ``Custom Font`` category. Click the field next to the ``Font`` property "
"and click on ``New Dynamic Font``. Click on the field again and select Edit."
msgstr ""
"ラベルのフォントが小さすぎます。変更する必要があります。 ``Number`` ノードを"
"選択し、インスペクタで ``Control`` クラスまでスクロールして、 ``Custom "
"Font`` カテゴリを見つけます。 ``Font`` プロパティの横にあるフィールドをクリッ"
"クして、 ``New Dynamic Font`` をクリックします。フィールドをもう一度クリック"
"して編集を選択します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:207
msgid ""
"You will enter the ``Dynamic Font`` resource. Unfold the ``Font`` category "
"and click the field next to ``Font Data``. Click the ``Load`` button. In the "
"file browser, navigate down to the assets/font folder and double click "
"``Comfortaa-Bold.ttf`` to open it. You should see the font update in the "
"viewport. Unfold the settings category to change the font size. Set the "
"``Size`` property to a higher value, like ``24`` or ``28``."
msgstr ""
"``Dynamic Font`` リソースを入力します。 ``Font`` カテゴリを展開し、 ``Font "
"Data`` の横のフィールドをクリックします。 ``Load`` ボタンをクリックしてくださ"
"い。ファイルブラウザで、 `assets/font` フォルダに移動し、 ``Comfortaa-Bold."
"ttf`` をダブルクリックして開きます。ビューポートにフォントの更新が表示されま"
"す。フォントサイズを変更するには、設定カテゴリを開きます。 ``Size`` プロパ"
"ティを ``24`` または ``28`` のように高い値に設定します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:215
msgid ""
"We now need the text's baseline, the number's lower edge, to align with the "
"HP texture on the left. To do so, still in the ``DynamicFont`` resource, you "
"can tweak the ``Bottom`` property under the ``Extra Spacing`` category. It "
"adds some bottom padding to the text. Click the ``Number`` node in the Scene "
"tab to go back to the node's properties and change the ``Valign`` to "
"``Bottom``. To adjust the text's baseline, click on the font field under the "
"``Custom Font`` category again and tweak the ``Bottom`` property until the "
"text aligns with the ``Title`` node. I used a value of ``2`` pixels."
msgstr ""
"ここで、テキストのベースライン、つまり数字の下端を、左側のHPテクスチャに揃え"
"る必要があります。これを行うには、 ``DynamicFont`` リソースの ``Extra "
"Spacing`` カテゴリで ``Bottom`` プロパティを調整します。テキストに下のパディ"
"ングを追加します。シーンタブの ``Number`` ノードをクリックしてノードのプロパ"
"ティに戻り、 ``Valign`` を ``Bottom`` に変更します。テキストのベースラインを"
"調整するには、もう一度 ``Custom Font`` カテゴリの下のフォントフィールドをク"
"リックし、テキストが ``Title`` ノードに揃うまで ``Bottom`` プロパティを微調整"
"します。今回は ``2`` ピクセルの値を使用しました。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:227
msgid "With a Bottom value of 2 pixels, the Number aligns with the Title"
msgstr "下の値を2ピクセルに設定すると、 NumberはTitleに揃えて配置されます"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:229
msgid ""
"With this, we finished the hardest part of the GUI. Congratulations! Let's "
"move on to the simpler nodes."
msgstr ""
"これで、GUIの最も難しい部分が完成しました。おめでとう！それではもっと単純な"
"ノードに移りましょう。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:233
msgid "Add the progress bar"
msgstr "プログレスバーを追加する"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:235
msgid ""
"We need one last element to complete our life bar: the gauge itself. Godot "
"ships with a ``TextureProgress`` node that has everything we need."
msgstr ""
"ライフ・バーを完成させるには、ゲージそのものという最後の要素が必要です。Godot"
"には、必要なものがすべて含まれた ``TextureProgress`` ノードが付属しています。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:238
msgid ""
"Select the Bar node and add a ``TextureProgress`` inside of it. Name it "
"``Gauge``. In the inspector unfold the ``Textures`` section. Head to the "
"FileSystem dock and drag and drop the ``lifebar_bg.png`` texture onto the "
"``Under`` slot. Do the same with the ``lifebar_fill.png`` image and drop it "
"onto the ``Progress`` slot. Under the ``Range`` class in the inspector, "
"change the ``Value`` property to ``50`` to see the gauge fill up."
msgstr ""
"Barノードを選択し、その中に ``TextureProgress`` を追加します。 ``Gauge`` と名"
"前を付けます。インスペクタで、 ``Textures`` セクションを展開します。ファイル"
"システムドックに移動し、 ``lifebar_bg.png`` テクスチャを ``Under`` スロットに"
"ドラッグ&ドロップします。 ``lifebar_fill.png`` イメージについても同じ操作を行"
"い、 ``Progress`` スロットにドロップします。インスペクタの ``Range`` クラス"
"で ``Value`` プロパティを ``50`` に変更してゲージがいっぱいになったことを確認"
"します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:246
msgid "With only five ``Control`` nodes, our first bar is ready to use."
msgstr "5つの ``Control`` ノードだけで、最初のバーを使用する準備が整いました。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:250
msgid ""
"That's it, our life bar is ready. This last part was quick, wasn't it? "
"That's thanks to our robust container setup."
msgstr ""
"これで、ライフバーの準備は整いました。 この最後の部分は速かったですよね。 こ"
"れは、厳密にコンテナ設定をしたおかげです。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:254
msgid "Design the bomb and emerald counters"
msgstr "爆弾とエメラルドのカウンターをデザインする"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:256
msgid ""
"The bomb and emerald counters are like the bar's ``Count`` node. So we'll "
"duplicate it and use it as a template."
msgstr ""
"爆弾とエメラルドのカウンターは、バーの ``Count`` ノードのようなものです。なの"
"で、これを複製してテンプレートとして使用します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:259
msgid ""
"Under the ``Bar`` node, select ``Count`` and press :kbd:`Ctrl + D` to "
"duplicate it. Drag and drop the new node under the ``Counters`` "
"``HBoxContainer`` at the bottom of the scene tree. You should see it resize "
"automatically. Don't worry about this for now, we'll fix the size soon."
msgstr ""
"``Bar`` ノードの ``Count`` を選択し、\\ :kbd:`Ctrl + D` を押して複製します。"
"シーンツリーの一番下にある ``Counters`` \\ ``HBoxContainer`` の下に、新しい"
"ノードをドラッグ&ドロップします。自動的にサイズが変更されます。今のところこれ"
"について心配しないでください。サイズはすぐに修正します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:264
msgid ""
"Rename the ``Count2`` node to ``Counter``. Unlike the bars, we want the "
"number to be on the left, and an icon to sit on the right. The setup is the "
"same: we need a background (a ``NinePatchRect``), the title, and the number "
"nodes. The ``Title`` node is a ``TextureRect``, so it's what we need to "
"display the icon. In the scene tree, select the ``Title`` node, and rename "
"it to ``Icon``."
msgstr ""
"``Count2`` ノードの名前を ``Counter`` に変更します。バーとは異なり、番号を左"
"側に、アイコンを右側に配置します。設定には同様の、背景(``NinePatchRect``)、タ"
"イトル、および数字ノードが必要です。 ``Title`` ノードは ``TextureRect`` なの"
"で、アイコンを表示する必要があります。シーンツリーで、 ``Title`` ノードを選択"
"し、名前を ``Icon`` に変更します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:273
msgid "Here's how your node tree should look so far"
msgstr "今のノードツリーはこのようになっているはずです"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:275
msgid ""
"With the ``Icon`` node selected, in the inspector, scroll to the top to see "
"the ``Texture`` slot. Head to the FileSystem dock on the left and select the "
"``bombs_icon.png``. Drag and drop it onto the ``Texture`` slot. In the Scene "
"Tab select both the ``Icon`` and the ``Number`` nodes. Click the Layout menu "
"in the toolbar at the top of the viewport and select ``Full Rect``. Both "
"nodes will update to fit the size of the ``Background``."
msgstr ""
"``Icon`` ノードを選択した状態で、インスペクタで一番上までスクロールして "
"``Texture`` スロットを表示します。左側のファイルシステム ドックに移動し、 "
"``bombs_icon.png`` を選択します。これを ``Texture`` スロットにドラッグ&ドロッ"
"プします。シーンタブで、 ``Icon`` ノードと ``Number`` ノードの両方を選択しま"
"す。ビューポート上部のツールバーにあるレイアウトメニューをクリックし、 ``Rect"
"全面`` を選択します。両方のノードが ``Background`` のサイズに合わせて更新され"
"ます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:285
msgid "The nodes anchor to the entire Background, but their position is off"
msgstr "ノードはBackground全体に固定されていますが、位置がずれています"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:287
msgid ""
"Let's change the ``Number``'s align properties to move it to the left and "
"center of the ``Background``. Select the ``Number`` node, change its "
"``Align`` property to left and the ``Valign`` property to center. Then "
"resize its left edge a bit to add some padding between the left edge of the "
"``Background`` and the text."
msgstr ""
"``Number`` の ``Align`` プロパティを変更して、\\ ``Background`` の左側と中央"
"に移動します。\\ ``Number`` ノードを選択し、その ``Align`` プロパティを left "
"に、\\ ``Valign`` プロパティを center に変更します。 次に、その左端を少しサイ"
"ズ変更して、\\ ``Background`` の左端とテキストの間に少し余白を追加します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:295
msgid "The Number node aligned to the left and center"
msgstr "左中央に揃えられたNumberノード"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:297
msgid ""
"To overlap the Icon and the background, we need a few tweaks. First, our "
"background is a bit too tall. It's because it's inside a margin container "
"that is controlled by the top-most GUI node. Select the GUI node at the top "
"of the scene tree and downsize it vertically so that it's as thin as "
"possible. You'll see the gauge prevents you from making it too small. A "
"container cannot be smaller than the minimal size of its children. The "
"container's margins also weigh in."
msgstr ""
"アイコンとBackgroundを重ねるには、いくつかの微調整が必要です。まず、私たちの"
"Backgroundは少し高すぎます。これは、最上位のGUIノードによって制御されるマージ"
"ン・コンテナ内にあるためです。シーンツリーの一番上にあるGUIノードを選択し、で"
"きるだけ細くなるように垂直方向に縮小します。 表示されるゲージを確認して小さく"
"なりすぎないようにします。コンテナは、その最小サイズよりも小さくすることはで"
"きません。 コンテナの余白も考慮に入れます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:305
msgid ""
"Select the Icon, click the Layout menu, and select ``Full Rect`` to re-"
"center it. We need it to anchor to the ``Background``'s right edge. Open the "
"Layout menu again and select ``Center Right``. Move the icon up so it is "
"centered vertically with the ``Background``."
msgstr ""
"アイコンを選択し、レイアウトメニューをクリックして、 ``Rect全面`` を選択して"
"中央に戻します。 ``Background`` の右端に固定するために必要です。 もう一度レイ"
"アウトメニューを開き、 ``中央右`` を選択します。アイコンを ``Background`` と"
"垂直になるように上に動かします。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:313
msgid ""
"The bomb icon anchors to the Background's right edge. Resize the Counter "
"container to see the Icon node stick to its right side"
msgstr ""
"爆弾アイコンがBackgroundの右端に固定されます。Iconノードを右側に表示させるに"
"は、Counterコンテナのサイズを変更してください"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:316
msgid ""
"Because we duplicated the ``Counter`` from the bar's ``Count``, the "
"``Number`` node's font is off. Select the ``Number`` node again, head to the "
"``Font`` property, and click it to access the ``DynamicFont`` resource. In "
"the ``Extra Spacing`` section, change the ``Bottom`` value to ``0`` to reset "
"the font's baseline. Our counter now works as expected."
msgstr ""
"Barの ``Count`` から ``Counter`` を複製したため、 ``Number`` ノードのフォント"
"はオフになっています。 ``Number`` ノードを再度選択し、 ``Font`` プロパティに"
"移動してクリックし、 ``DynamicFont`` リソースにアクセスします。 ``Extra "
"Spacing`` セクションで、 ``Bottom`` 値を ``0`` に変更してフォントのベースライ"
"ンをリセットします。カウンターは正常に作動します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:323
msgid ""
"Let's make the ``Counters`` anchor to the right edge of the viewport. To do "
"so, we need to set the ``Bars`` container take all the available horizontal "
"space it can. Select the ``Bars`` node and scroll down to the ``Size Flags`` "
"category. In the ``Horizontal`` category, check the ``Expand`` value. The "
"``Bars`` node should resize and push the counter to the right side of the "
"screen."
msgstr ""
"ビューポートの右端に ``Counters`` アンカーを配置してみましょう。これを行うに"
"は、 ``Bars`` コンテナがすべての利用可能な水平スペースを確保するように設定す"
"る必要があります。 ``Bars`` ノードを選択し、 ``Size Flags`` カテゴリまで下に"
"スクロールします。 ``Horizontal`` カテゴリで、 ``Expand`` の値を確認します。 "
"``Bars`` ノードのサイズを変更し、カウンターを画面の右側に押し付ける必要があり"
"ます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:331
msgid ""
"An expanding container eats all the space it can from its parent, pushing "
"everything else along the way"
msgstr ""
"膨張するコンテナは親からできる限りのスペースを食いつぶし、他のすべてを押しの"
"けていく"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:335
msgid "Turn the bar and counter into reusable UI components"
msgstr "バーとカウンタを再利用可能なUIコンポーネントに変える"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:337
msgid ""
"We have one bar and one counter widget. But we need two of each. We may need "
"to change the bars' design or their functionality later on. It'd be great if "
"we could have a single scene to store a UI element's template, and child "
"scenes to work on variations. Godot lets us do this with Inherited Scenes."
msgstr ""
"バーが1つとカウンターウィジェットが1つあります。しかし、それぞれ2つずつ必要で"
"す。後でバーのデザインや機能の変更が必要になるかもしれません。1つのシーンをUI"
"要素のテンプレート用にして、そこから作業用に複数の子シーンを派生できれば便利"
"です。Godotはこれを、シーン継承で可能にしています。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:343
msgid ""
"Let's save both the ``Counter`` and the ``Bar`` branches as separate scenes "
"that we'll reduce to create the ``LifeBar``, the ``EnergyBar``, the "
"``BombCounter``, and the ``EmeraldCounter``. Select the ``Bar`` "
"HBoxContainer. Right click on it and click on ``Save Branch as Scene``. Save "
"the scene as ``Bar.tscn``. You should see the node branch turn it to a "
"single ``Bar`` node."
msgstr ""
"``LifeBar`` 、 ``EnergyBar`` 、 ``BombCounter`` および ``EmeraldCounter`` に"
"分類するためにまず、 ``Counter`` と ``Bar`` ブランチの両方を別々のシーンとし"
"て保存します。 ``Bar`` (HBoxContainer)を選択し、それを右クリックして ``ブラン"
"チをシーンとして保存`` をクリックします。シーン名を ``Bar.tscn`` として保存し"
"てください。するとノードブランチが単一の ``Bar`` ノードに変わるはずです。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:352
msgid ""
"A scene is a tree of nodes. The topmost node is the tree's **root**, and the "
"children at the bottom of the hierarchy are **leaves**. Any node other than "
"the root along with one or more children is a **branch**. We can encapsulate "
"node branches into separate scenes, or load and merge them from other scenes "
"into the active one. Right click on any node in the Scene dock and select "
"``Save Branch as Scene`` or ``Merge from Scene``."
msgstr ""
"シーンとは、ノードのツリーです。(樹木にたとえるなら)最上位のノードはツリーの "
"**ルート=根** であり、階層内において最下部の子は **葉** になります。ルート以"
"外のノードと1つ以上の子は、 **ブランチ=枝** です。ノード ブランチは、別のシー"
"ンとしてカプセル化したり、他のシーンからアクティブなシーンに読み込んでマージ"
"することができます。シーン ドックにある任意のノードを右クリックし、 ``ブラン"
"チをシーンとして保存`` または ``シーンからマージ`` を選択します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:360
msgid ""
"Then, select the ``Counter`` node and do the same. Right click, ``Save "
"Branch as Scene``, and save it as ``Counter.tscn``. A new edit scene icon "
"appears to the right of the nodes in the scene tree. Click on the one next "
"to ``Bar`` to open the corresponding scene. Resize the ``Bar`` node so that "
"its bounding box fits its content. The way we named and placed the Control "
"nodes, we're ready to inherit this template and create the life bar. It's "
"the same for the ``Counter``."
msgstr ""
"次に、 ``Counter`` ノードを選択して同じ操作を行います。 ``ブランチをシーンと"
"して保存`` を右クリックし、 ``Counter.tscn`` として保存します。シーンツリー"
"の ``Bar`` ノードの右側に、新しくシーン編集アイコンが表示されるので、それをク"
"リックして対応するシーンを開きます。境界ボックスがコンテンツに合うように "
"``Bar`` ノードのサイズを変更します。コントロールノードに名前を付けて配置した"
"方法で、こうしてControlノードに名前を付けて配置したので、このテンプレートを継"
"承してライフバーを作成する準備ができました。 ``Counter`` も同様にしてくださ"
"い。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:370
msgid "With no extra changes, our Bar is ready to use"
msgstr "追加の変更なしで、私たちのバーは使用する準備ができました"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:373
msgid "Use scene inheritance to create the remaining elements"
msgstr "シーンの継承を使用して残りの要素を作成する"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:375
msgid ""
"We need two bars that work the same way: they should feature a label on the "
"left, with some value, and a horizontal gauge on the right. The only "
"difference is that one has the HP label and is green, while the other is "
"called EP and is yellow. Godot gives us a powerful tool to create a common "
"base to reuse for all bars in the game: **inherited scenes**."
msgstr ""
"同じように機能するバーが2本必要です。どちらも、左側にラベルと数字、右側に水平"
"ゲージがなければなりません。違いは、ひとつはHPラベルを付けて緑色であり、もう"
"ひとつはEPと呼ばれて黄色であるものです。Godotには、このゲームで使うすべての"
"バーの共通基盤を作れる、\\ **継承されたシーン**\\ という強力な道具がありま"
"す。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:383
msgid ""
"Inherited scenes help us keep the GUI scene clean. In the end, we will only "
"have containers and one node for each UI component."
msgstr ""
"継承されたシーンは、GUIシーンをきれいに保つのに役立ちます。最終的に各UIコン"
"ポーネントは、いくつかのコンテナと1つのノードだけ持つことになります。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:386
msgid ""
"On an inherited scene, you can change any property of every node in the "
"inspector, aside from its name. If you modify and save the parent scene, all "
"the inherited scenes update to reflect the changes. If you change a value in "
"the inherited scene, it will always override the parent's property. It's "
"useful for UIs, as they often require variations of the same elements. In "
"general, in UI design, buttons, panels etc. share a common base style and "
"interactions. We don't want to copy it over to all variations manually."
msgstr ""
"継承シーン内ではすべてのノードで、名前以外にもあらゆるプロパティをインスペク"
"タで変更できます。親シーンを変更して保存すると、すべての継承シーンが更新さ"
"れ、変更が反映されます。継承シーンでプロパティの値を変更すると、親から継承し"
"た値は常に上書きされます(ユニーク化する)。UIは同じ要素で複数のバリエーション"
"を必要とすることが多いため、これは役に立ちます。一般的にUIデザインでは、ボタ"
"ンやパネルなどは共通した基本スタイルと操作性を持ちます。手動ですべてのバリ"
"エーションにコピーしていくのは大変なことです。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:395
msgid ""
"A reload icon will appear next to the properties you override. Click it to "
"reset the value to the parent scene's default."
msgstr ""
"上書きしたプロパティの横にはリロードアイコンが表示されます。クリックすると、"
"値が親シーンのデフォルトにリセットされます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:400
msgid ""
"Think of scene inheritance like the node tree, or the ``extends`` keyword in "
"GDScript. An inherited scene does everything like its parent, but you can "
"override properties, resources and add extra nodes and scripts to extend its "
"functionality."
msgstr ""
"シーンの継承は、ノードツリーや、あるいはGDScriptの ``extends`` キーワードのよ"
"うなものと考えてください。継承されたシーンは親とまったく同じように実行されま"
"すが、しかしプロパティやリソースを上書きしたり、ノードやスクリプトを追加した"
"りして機能を拡張できます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:406
msgid "Inherit the Bar Scene to build the LifeBar"
msgstr "Barシーンを継承してライフバーを構築する"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:408
msgid ""
"Go to ``Scene -> New Inherited Scene`` to create a new type of ``Bar``. "
"Select the Bar scene and open it. You should see a new [unsaved] tab, that's "
"like your ``Bar``, but with all nodes except the root in grey. Press :kbd:"
"`Ctrl + S` (:kbd:`Cmd + S` on macOS) to save the new inherited scene and "
"name it ``LifeBar``."
msgstr ""
"``シーン → 新しい継承シーン`` に移動して、新しいタイプの ``Bar`` を作成しま"
"す。\\ ``Bar`` シーンを選択して開きます。新しい［未保存］タブが表示されるはず"
"です。これは ``Bar`` と似ていますが、ルート以外のすべてのノードがグレーで表示"
"されています。\\ :kbd:`Ctrl + S` (macOSでは :kbd:`Cmd + S`) を押して、継承さ"
"れた新しいシーンを保存し、\\ ``LifeBar`` という名前を付けます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:416
msgid "You can't rename grey nodes. This tells you they have a parent scene"
msgstr ""
"グレーアウトしているノードの名前は変更できません。これは、親シーンがあること"
"を示しています"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:418
msgid ""
"First, rename the root or top level node to ``LifeBar``. We always want the "
"root to describe exactly what this UI component is. The name differentiates "
"this bar from the ``EnergyBar`` we'll create next. The other nodes inside "
"the scene should describe the component's structure with broad terms, so it "
"works with all inherited scenes. Like our ``TextureProgress`` and ``Number`` "
"nodes."
msgstr ""
"まず、ルートまたは最上位ノードの名前を ``LifeBar`` に変更します。ルート名は常"
"に、UIコンポーネントについて正確に説明するようなものにしましょう。この名前に"
"よって、次に作成する ``EnergyBar`` と区別されます。シーン内のノードについて"
"は、すべての継承シーンでも機能するよう、コンポーネント構造を大まかに説明する"
"ものにします。\\ ``TextureProgress`` ノードや ``Number`` ノードもそうなってい"
"ます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:427
msgid ""
"If you've ever done web design, it's the same spirit as working with CSS: "
"you create a base class, and add variations with modifier classes. From a "
"base button class, you'll have button-green and button-red variations for "
"the user to accept and refuse prompts. The new class contains the name of "
"the parent element and an extra keyword to explain how it modifies it. When "
"we create an inherited scene and change the name of the top level node, "
"we're doing the same thing."
msgstr ""
"Webデザインをしたことがある人なら、CSSを使って作業するのと同じ精神です: 基底"
"クラスを作成してから、それを変更したクラスによってバリエーションを追加しま"
"す。基本ボタン クラスから派生させて、確認ダイアログ用のButtonGreenとButtonRed"
"を作ります。そしてその新しいクラスには、親の要素と、変更内容を含んだ名前をつ"
"けます。継承シーンを作る際には、同じように最上位ノードの名前を変えましょう。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:436
msgid "Design the EnergyBar"
msgstr "エネルギーバーの設計"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:438
msgid ""
"We already setup the ``LifeBar``'s design with the main ``Bar`` scene. Now "
"we need the ``EnergyBar``."
msgstr ""
"``LifeBar`` のデザインは、\\ ``Bar`` シーンをメインにして完了しました。今度"
"は ``EnergyBar`` が必要です。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:441
msgid ""
"Let's create a new inherited scene, and once again select the ``Bar.tscn`` "
"scene and open it. Double-click on the ``Bar`` root node and rename it to "
"``EnergyBar``. Save the new scene as ``EnergyBar.tscn``. We need to replace "
"the HP texture with EP one, and to change the textures on the gauge."
msgstr ""
"新しい継承シーンを作成して、もう一度 ``Bar.tscn`` シーンを選択して開きます。 "
"``Bar`` ルートノードをダブルクリックして ``EnergyBar`` に名前を変更してくださ"
"い。 新しいシーンを ``EnergyBar.tscn`` という名前で保存します。次に必要なの"
"は、HPのテクスチャをEPに置き換えることと、ゲージのテクスチャを変更することで"
"す。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:447
msgid ""
"Head to the FileSystem dock on the left, select the ``Title`` node in the "
"Scene tree and drag and drop the ``label_EP.png`` file onto the texture "
"slot. Select the ``Number`` node and change the ``Text`` property to a "
"different value like ``14``."
msgstr ""
"左側のファイルシステム ドックに進み、シーンツリーの ``Title`` ノードを選択し"
"て、 ``label_EP.png`` ファイルをテクスチャ スロットにドラッグ＆ドロップしま"
"す。 ``Number`` ノードを選択し、 ``Text`` プロパティを ``14`` のような別の値"
"に変更します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:452
msgid ""
"You'll notice the EP texture is smaller than the HP one. We should update "
"the ``Number``'s font size to better fit it. A font is a resource. All the "
"nodes in the entire project that use this resource will be affected by any "
"property we change. You can try to change the size to a huge value like "
"``40`` and switch back to the ``LifeBar`` or the ``Bar`` scenes. You will "
"see the text increased in size."
msgstr ""
"EPテクスチャがHPテクスチャよりも小さいことがわかります。 ``Number`` のフォン"
"トサイズを適切なサイズに更新する必要があります。フォントはリソースです。この"
"リソースを使用する、プロジェクト内にあるすべてのノードは、あらゆるプロパティ"
"変更による影響を受けます。フォントサイズを ``40`` などの大きな値に変更してか"
"ら、 ``LifeBar`` または ``Bar`` のシーンに戻ってみてください。テキストのサイ"
"ズが大きくなっています。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:461
msgid "If we change the font resource, all the nodes that use it are affected"
msgstr ""
"フォントリソースを変更すると、それを使用するすべてのノードが影響を受けます"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:464
msgid ""
"To change the font size on this node only, we must create a copy of the font "
"resource. Select the ``Number`` node again and click on the wrench and "
"screwdriver icon on the top right of the inspector. In the drop-down menu, "
"select the ``Make Sub-Resources Unique`` option. Godot will find all the "
"resources this node uses and create unique copies for us."
msgstr ""
"このノードのフォントサイズだけを変更するには、フォントリソースのコピーを作成"
"する必要があります。 ``Number`` ノードを再度選択し、インスペクタの右上にある"
"レンチとドライバのアイコンをクリックします。ドロップダウンメニューから ``サブ"
"リソースをユニーク化する`` を選択します。このノードが使用するすべてのリソース"
"を検索し、固有のコピーを作成します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:472
msgid "Use this option to create unique copies of the resources for one node"
msgstr ""
"このオプションを使用すると、1つのノードのためにリソースをコピーしてその固有版"
"を作成します"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:476
msgid ""
"When you duplicate a node from the Scene tree, with :kbd:`Ctrl + D` (:kbd:"
"`Cmd + D` on macOS), it shares its resources with the original node. You "
"need to use ``Make Sub-Resources Unique`` before you can tweak the resources "
"without affecting the source node."
msgstr ""
":kbd:`Ctrl + D` (macOSでは :kbd:`Cmd + D`), を使用してシーンツリーにあるノー"
"ドを複製するときは、新しいノードはリソースを元のノードと共有します。元ノード"
"に影響を与えずにリソースを微調整するには、\\ ``サブリソースをユニーク化する"
"`` を使用しなければなりません。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:481
msgid ""
"Scroll down to the ``Custom Font`` section and open ``Font``. Lower the "
"``Size`` to a smaller value like ``20`` or ``22``. You may also need to "
"adjust the ``Bottom`` spacing value to align the text's baseline with the EP "
"label on the left."
msgstr ""
"``Custom Font`` セクションまでスクロールして ``Font`` を開きます。 ``Size`` "
"を ``20`` または ``22`` のような小さい値に下げます。テキストのベースラインを"
"左側のEPラベルに合わせるために、 ``Bottom`` の間隔値を調整する必要があるかも"
"しれません。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:488
msgid "The EP Count widget, with a smaller font than its HP counterpart"
msgstr "HPのものよりも小さなフォントを持つEP Countウィジェット"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:490
msgid ""
"Now, select the ``TextureProgress`` node. Drag the ``energy_bar_bg.png`` "
"file onto the ``Under`` slot and do the same for ``energy_bar_fill.png`` and "
"drop it onto the ``Progress`` texture slot."
msgstr ""
"ここで、 ``TextureProgress`` ノードを選択します。 ``energy_bar_bg.png`` ファ"
"イルを ``Under`` スロットにドラッグして、同様に ``energy_bar_fill.png`` も "
"``Progress`` テクスチャスロットにドロップします。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:494
msgid ""
"You can resize the node vertically so that its bounding rectangle fits the "
"gauge. Do the same with the ``Count`` node until its size aligns with that "
"of the bar. Because the minimal size of ``TextureProgress`` is set based on "
"its textures, you won't be able to downsize the ``Count`` node below that. "
"That is also the size the ``Bar`` container will have. You may downscale "
"this one as well."
msgstr ""
"境界の長方形がゲージに合うように、ノードのサイズを垂直方向に変更できます。 "
"``Count`` ノードについても、サイズがバーのサイズに合うまで同じ操作を繰り返し"
"ます。 ``TextureProgress`` の最小サイズはそのテクスチャに基づいて設定されるた"
"め、それより下に ``Count`` ノードは縮小できません。これは ``Bar`` コンテナの"
"サイズにもなります。こちらも縮小して構いません。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:501
msgid ""
"Last but not least, the ``Background`` container has a minimum size that "
"makes it a bit large. Select it and in the ``Rect`` section, change the "
"``Min Size`` property down to ``80`` pixels. It should resize automatically "
"and the ``Title`` and ``Number`` nodes should reposition as well."
msgstr ""
"最後に、 ``Background`` コンテナの最小サイズが少し大きめになっています。選択"
"してから、 ``Rect`` セクションで ``Min Size`` プロパティを ``80`` ピクセルに"
"変更します。自動的にサイズが変更され、 ``Title`` ノードと ``Number`` ノードも"
"再配置されます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:509
msgid "The Count looks better now it's a bit smaller"
msgstr "Countは少し小さくなり、見た目が良くなりました"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:513
msgid ""
"The Count node's size affects the position of the TextureProgress. As we'll "
"align our bars vertically in a moment, we're better off using the Counter's "
"left margin to resize our EP label. This way both the EnergyBar's Count and "
"the LifeBar's Count nodes are one hundred pixels wide, so both gauges will "
"align perfectly."
msgstr ""
"Countノードのサイズは、TextureProgressの位置に影響します。これからバーを縦に"
"並べるので、Counterの左マージンを使用してEPラベルのサイズを変更した方がよいで"
"しょう。これにより、EnergyBarのCountノードとLifeBarのCountノードの両方が100ピ"
"クセル幅になり、両方のゲージが完全に位置合わせされます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:520
msgid "Prepare the bomb and emerald counters"
msgstr "爆弾とエメラルドのカウンターを準備する"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:522
msgid ""
"Let us now take care of the counters. Go to ``Scene -> New Inherited Scene`` "
"and select the ``Counter.tscn`` as a base. Rename the root node as "
"``BombCounter`` too. Save the new scene as ``BombCounter.tscn``. That's all "
"for this scene."
msgstr ""
"カウンターを片付けましょう。 ``シーン → 新しい継承したシーン`` にて、ベースと"
"して ``Counter.tscn`` を選択します。ルートノードの名前も ``BombCounter`` に変"
"更します。新しいシーンを ``BombCounter.tscn`` として保存します。このシーン"
"は、これですべてです。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:529
msgid "The bomb counter is the same as the original Counter scene"
msgstr "爆弾カウンターは元のCounterシーンと同じです"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:531
msgid ""
"Go to ``Scene -> New Inherited Scene`` again and select ``Counter.tscn`` "
"once more. Rename the root node ``EmeraldCounter`` and save the scene as "
"``EmeraldCounter.tscn``. For this one, we mainly need to replace the bomb "
"icon with the emerald icon. In the FileSystem tab, drag the ``emeralds_icon."
"png`` onto the ``Icon`` node's ``Texture`` slot. ``Icon`` already anchors to "
"the right edge of the ``Background`` node so we can change its position and "
"it will scale and reposition with the ``EmeraldCounter`` container. Shift "
"the emerald icon a bit to the right and down. Use the Arrow Keys on the "
"keyboard to nudge its position. Save, and we're done with all the UI "
"elements."
msgstr ""
"もう一度 ``シーン → 新しい継承したシーン`` に移動し、\\ ``Counter.tscn`` を再"
"度選択します。ルートノードの名前を ``EmeraldCounter`` に変更し、シーンを "
"``EmeraldCounter.tscn`` として保存します。このシーンについては、主に爆弾アイ"
"コンをエメラルドアイコンに置き換える必要があります。［ファイルシステム］タブ"
"で、\\ ``emeralds_icon.png`` を ``Icon`` ノードの ``Texture`` スロットにド"
"ラッグします。\\ ``Icon`` はすでに ``Background`` ノードの右端に固定されてい"
"るため、その位置を変更でき、\\ ``EmeraldCounter`` コンテナーによってスケーリ"
"ングおよび再配置できます。エメラルドアイコンを少しだけ右下に移動します。位置"
"の微調整にはキーボードの矢印キーを使用して下さい。保存すれば、すべてのUI要素"
"の完成です。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:544
msgid "The emerald counter should look something like this"
msgstr "エメラルドのカウンターはこのようになります"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:547
msgid "Add the UI components to the final GUI"
msgstr "最終的なGUIにUIコンポーネントを追加する"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:549
msgid ""
"Time to add all the UI elements to the main GUI scene. Open the ``GUI.tscn`` "
"scene again, and delete the ``Bar`` and ``Counter`` nodes. In the FileSystem "
"dock, find the ``LifeBar.tscn`` and drag and drop it onto the ``Bars`` "
"container in the scene tree. Do the same for the ``EnergyBar``. You should "
"see them align vertically."
msgstr ""
"すべてのUI要素をメインGUIシーンに追加します。 ``GUI.tscn`` シーンを再度開"
"き、 ``Bar`` ノードと ``Counter`` ノードを削除します。ファイルシステムドック"
"で ``LifeBar.tscn`` を見つけて、シーンツリー内の ``Bars`` コンテナにドラッグ"
"アンドドロップします。 ``EnergyBar`` についても同じ操作を行います。縦に並んで"
"いるのが見えるはずです。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:557
msgid "The LifeBar and the EnergyBar align automatically"
msgstr "LifeBarとEnergyBarは自動配置されます"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:559
msgid ""
"Now, drag and drop the ``BombCounter.tscn`` and ``EmeraldCounter.tscn`` "
"scenes onto the ``Counters`` node. They'll resize automatically."
msgstr ""
"次に、 ``BombCounter.tscn`` と ``EmeraldCounter.tscn`` シーンを ``Counters`` "
"ノードにドラッグ&ドロップします。サイズは自動的に変更されます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:564
msgid "The nodes resize to take all the available vertical space"
msgstr "ノードのサイズが変更され、使用可能なすべての垂直スペースが使用されます"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:566
msgid ""
"To let the ``EmeraldCounter`` and ``BombCounter`` use the size we defined in "
"``Counter.tscn``, we need to change the ``Size Flags`` on the ``Counters`` "
"container. Select the ``Counters`` node and unfold the ``Size Flags`` "
"section in the Inspector. Uncheck the ``Fill`` tag for the ``Vertical`` "
"property, and check ``Shrink Center`` so the container centers inside the "
"``HBoxContainer``."
msgstr ""
"``EmeraldCounter`` と ``BombCounter`` が ``Counter.tscn`` で定義したサイズを"
"使用できるようにするには、 ``Counters`` コンテナの ``Size Flags`` を変更する"
"必要があります。 ``Counters`` ノードを選択し、インスペクタの ``Size Flags`` "
"セクションを展開します。 ``Vertical`` プロパティの ``Fill`` タグのチェックを"
"外し、 ``Shrink Center`` をチェックして、コンテナが ``HBoxContainer`` の内側"
"にくるようにします。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:575
msgid "Now both counters have a decent size"
msgstr "両方のカウンタが適切なサイズになりました"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:579
msgid ""
"Change the ``Min Size`` property of the ``Counters`` container to control "
"the height of the counters' background."
msgstr ""
"``Counters`` コンテナの ``Min Size`` プロパティを変更して、カウンタの背景の高"
"さを制御します。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:582
msgid ""
"We have one small issue left with the EP label on the EnergyBar: the 2 bars "
"should align vertically. Click the icon next to the ``EnergyBar`` node to "
"open its scene. Select the ``Count`` node and scroll down to the ``Custom "
"Constants`` section. Add a ``Margin Left`` of ``20``. In the ``Rect`` "
"section set the node's ``Min Size`` back to 100, the same value as on the "
"LifeBar. The ``Count`` should now have some margin on the left. If you save "
"and go back to the GUI scene, it will be aligned vertically with the "
"``LifeBar``."
msgstr ""
"EnergyBarのEPラベルにはまだ小さな問題が1つ残っています。2本のバーは垂直に整列"
"させる必要があります。 ``EnergyBar`` ノードの横にあるアイコンをクリックして、"
"そのシーンを開きます。 ``Count`` ノードを選択し、``Custom Constants`` セク"
"ションまで下にスクロールして、 ``Margin Left`` に ``20`` を追加します。 "
"``Rect`` セクションでは、ノードの ``Min Size`` を100に戻します。これは、"
"LifeBarと同じ値です。 ``Count`` の左側にいくらかの余白ができているはずです。"
"保存してGUIシーンに戻ると、 ``LifeBar`` と垂直に整列しています。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:593
msgid "The 2 bars align perfectly"
msgstr "2本のバーがぴったり揃います"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:597
msgid ""
"We could have set up the ``EnergyBar`` this way a few moments ago. But this "
"shows you that you can go back to any scene anytime, tweak it, and see the "
"changes propagate through the project!"
msgstr ""
"先ほどは、この方法で ``EnergyBar`` を設定することもできました。しかし、いつで"
"も任意のシーンに戻って、微調整し、変更をプロジェクト全体に反映できることを示"
"すために、このようにしました！"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:602
msgid "Place the GUI onto the game's mockup"
msgstr "GUIをゲームのモックアップに配置する"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:604
msgid ""
"To wrap up the tutorial we're going to insert the GUI onto the game's mockup "
"scene."
msgstr ""
"チュートリアルを締めくくるために、ゲームのモックアップシーンにGUIを挿入しま"
"す。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:607
msgid "Head to the FileSystem dock and open ``LevelMockup.tscn``."
msgstr "ファイルシステムドックに進み、 ``LevelMockup.tscn`` を開きます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:609
msgid ""
"Drag-and-drop the ``GUI.tscn`` scene right below the ``bg`` node and above "
"the ``Characters``. The GUI will scale to fit the entire viewport. Head to "
"the Layout menu and select the ``Center Top`` option so it anchors to the "
"top edge of the game window. Then resize the GUI to make it as small as "
"possible vertically. Now you can see how the interface looks in the context "
"of the game."
msgstr ""
"``GUI.tscn`` シーンを ``bg`` ノードのすぐ下、 ``Characters`` の上にドラッグ＆"
"ドロップします。GUIはビューポート全体に合うように拡大縮小されます。レイアウト"
"メニューに進み、 ``中央上`` オプションを選択して、ゲームウィンドウの上端に固"
"定します。 次にGUIを、垂直方向にできるだけ小さくなるようサイズ変更します。こ"
"れで、ゲーム中にインターフェイスがどのように見えるかを確認できます。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:616
msgid ""
"Congratulations for getting to the end of this long tutorial. You can find "
"the final project here: :download:`ui_gui_design.zip <files/ui_gui_design."
"zip>`."
msgstr ""
"おめでとうございます。この長いチュートリアルも終わりに近づきました。こちらが"
"最終プロジェクトです。\\ :download:`ui_gui_design.zip <files/ui_gui_design."
"zip>`\\ ."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:625
msgid ""
"**A final note about Responsive Design**. If you resize the GUI, you'll see "
"the nodes move, but the textures and text won't scale. The GUI also has a "
"minimum size, based on the textures inside of it. In games, we don't need "
"the interface to be as flexible as that of a website. You almost never want "
"to support both landscape and portrait screen orientations. It's one or the "
"other. In landscape orientation, the most common ratios range from 4:3 to "
"16:9. They are close to one another. That's why it's enough for the GUI "
"elements to only move horizontally when we change the window size."
msgstr ""
"**レスポンシブデザインに関する最後の注意事項**\\ 。GUI のサイズを変更すると、"
"ノードが移動しますが、テクスチャとテキストはスケーリングしません。そしてGUI"
"は、内部のテクスチャに基づく最小サイズも持ちます。ゲームでは、Webサイトほど柔"
"軟なインターフェイスは必要ありません。横向きと縦向きの両方をサポートすること"
"は、ほとんどないはずです。どちらか一方になるでしょう。横向きでは、最も一般的"
"な比率の範囲は 4:3～16:9 です。これらは互いに近いため、GUI要素はウィンドウサ"
"イズを変更する際に水平方向に移動するだけで十分です。"
