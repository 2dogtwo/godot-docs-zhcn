# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-02 11:13+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:4
msgid "Your first game"
msgstr "最初のゲーム"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:7
msgid "Overview"
msgstr "概要"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:9
msgid ""
"This tutorial will guide you through making your first Godot project. You "
"will learn how the Godot editor works, how to structure a project, and how "
"to build a 2D game."
msgstr ""
"このチュートリアルではあなたの最初のGodotのプロジェクトの作りかたを紹介しま"
"す。\n"
"エディターの使い方、プロジェクトの構成方法、２Dゲームの作りかたを学びます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:13
msgid ""
"This project is an introduction to the Godot engine. It assumes that you "
"have some programming experience already. If you're new to programming "
"entirely, you should start here: :ref:`doc_scripting`."
msgstr ""
"このプロジェクトはGodotエンジンの紹介用です。あなたがこれまでにプログラムの経"
"験があるものとして書かれています。\n"
"もし、あなたがまったくプログラムの経験がない場合はここからスタートしてくださ"
"い。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:18
msgid ""
"The game is called \"Dodge the Creeps!\". Your character must move and avoid "
"the enemies for as long as possible. Here is a preview of the final result:"
msgstr ""
"このゲームは「這うものをよけろ」といいます。あなたのキャラクターはできるだけ"
"長く動いて敵を避けなければなりません。\n"
"いかが最終結果のプレビューです:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:24
msgid ""
"**Why 2D?** 3D games are much more complex than 2D ones. You should stick to "
"2D until you have a good understanding of the game development process."
msgstr ""
"なぜ、２Dのなのか？３Dゲームは２Dより複雑です。ゲーム開発のプロセスをよく理解"
"するまでは２Dのほうが適しています。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:28
msgid "Project setup"
msgstr "プロジェクトの設定"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:30
msgid ""
"Launch Godot and create a new project. Then, download :download:"
"`dodge_assets.zip <files/dodge_assets.zip>` - the images and sounds you'll "
"be using to make the game. Unzip these files to your project folder."
msgstr ""
"Godotを起動して新しいプロジェクトを作ります。dodge_assets.zipをダウンロードし"
"ます。これにゲームを作るのに使う画像と音楽が含まれます。あなたのプロジェクト"
"のフォルダーに展開します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:34
msgid ""
"For this tutorial, we will assume you are familiar with the editor. If you "
"haven't read :ref:`doc_scenes_and_nodes`, do so now for an explanation of "
"setting up a project and using the editor."
msgstr ""
"このチュートリアルでは、エディターに精通していることを前提としています。\\ :"
"ref:`doc_scenes_and_nodes`\\ を読んでいない場合は、プロジェクトの設定とエディ"
"タの使用について説明するために、先にこのページを読んでください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:38
msgid ""
"This game will use portrait mode, so we need to adjust the size of the game "
"window. Click on Project -> Project Settings -> Display -> Window and set "
"\"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""
"このゲームはポートレートモードを使いますので、ゲーム画面のサイズを設定する必"
"要があります。\n"
"Project -> Project Settings -> Display -> Windowの順にクリックして \"Width\" "
"を480に,\"Height\"を720にセットします。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:43
msgid "Organizing the project"
msgstr "プロジェクトの編成"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:45
msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene. In a larger "
"project, it might be useful to make folders to hold the various scenes and "
"their scripts, but for this relatively small game, you can save your scenes "
"and scripts in the project's root folder, referred to as ``res://``.  You "
"can see your project folders in the FileSystem Dock in the lower left corner:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:56
msgid "Player scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:58
msgid ""
"The first scene we will make defines the ``Player`` object. One of the "
"benefits of creating a separate Player scene is that we can test it "
"separately, even before we've created other parts of the game."
msgstr ""
"最初のシーンでは、 ``Player`` オブジェクトを定義します。別のプレイヤー シーン"
"を作成する利点の 1 つは、ゲームの他の部分を作成する前でも、別々にテストできる"
"ことです。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:63
msgid "Node structure"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:65
msgid ""
"To begin, click the \"Add/Create a New Node\" button and add an :ref:`Area2D "
"<class_Area2D>` node to the scene."
msgstr ""
"まず、[新しいノードを追加/作成]ボタンをクリックし、\\ :ref:`Area2D "
"<class_Area2D>`\\ ノードをシーンに追加します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:70
msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change its name to ``Player`` by clicking on the node's name. This is the "
"scene's root node. We can add additional nodes to the player to add "
"functionality."
msgstr ""
"``Area2D`` を使用すると、プレイヤーに重なり合ったり、プレイヤーに実行されたり"
"するオブジェクトを検出できます。ノードの名前をクリックして、その名前を "
"``Player`` に変更します。これはシーンのルートノードです。プレイヤーにノードを"
"追加して機能を追加できます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:75
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"``Player`` ノードに子を追加する前に、子をクリックして誤って移動したりサイズを"
"変更したりしないようにします。ノードを選択し、ロックの右側にあるアイコンをク"
"リックします。ツールチップには「オブジェクトの子が選択できないようにする。」"
"と書いてあります"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:82
msgid ""
"Save the scene. Click Scene -> Save, or press ``Ctrl+S`` on Windows/Linux or "
"``Command+S`` on Mac."
msgstr ""
"シーンを保存します。[シーン -> セーブ] をクリックするか、Windows/Linux で "
"``Ctrl +S`` を押すか、Mac で ``Command+S`` を押します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:84
msgid "For this project, we will be following the Godot naming conventions."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:86
msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:90
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`).  Be careful to type the method names precisely "
"when connecting signals."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:97
msgid "Sprite animation"
msgstr "スプライトアニメーション"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:99
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". This should automatically open "
"the SpriteFrames panel."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:110
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"right\". Then click the \"Add\" button to create a second animation "
"named \"up\". Drag the two images for each animation, named "
"``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, into the \"Animation "
"Frames\" side of the panel:"
msgstr ""
"左側にはアニメーションの一覧があります。「デフォルト」をクリックし、「右」に"
"名前を変更します。次に、「追加」ボタンをクリックして、「up」という名前の 2 番"
"目のアニメーションを作成します。 ``playerGrey_up[1/2]`` と "
"``playerGrey_walk[1/2]`` という名前の各アニメーションの 2 つの画像をパネルの "
"「アニメーション フレーム」側にドラッグします:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:117
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"プレイヤーの画像はゲームウィンドウに対して少し大きすぎるため、縮小する必要が"
"あります。 ``AnimatedSprite`` ノードをクリックし、 ``Scale`` プロパティを "
"``(0.5,0.5)`` に設定します。インスペクタには ``Node2D`` の見出しがあります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:124
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\".  Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:133
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "完了すると、 ``Player`` シーンは次のようになります:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:138
msgid "Moving the player"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:140
msgid ""
"Now we need to add some functionality that we can't get from a built-in "
"node, so we'll add a script. Click the ``Player`` node and click the \"Add "
"Script\" button:"
msgstr ""
"次に、組み込みノードから取得できない機能を追加する必要があるので、スクリプト"
"を追加します。 ``Player`` ノードをクリックし、「スクリプトを追加」ボタンをク"
"リックします:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:146
msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"スクリプト設定ウィンドウでは、デフォルトの設定だけを残すことができます。「作"
"成」をクリックするだけです:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:149
msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"C#スクリプトまたはその他の言語を作成する場合は、作成を実行する前に [言語] ド"
"ロップダウン メニューから言語を選択します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:154
msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""
"GDScriptに初めて触れる場合は、続行する前に\\ :ref:`doc_scripting`\\ を読んで"
"ください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:157
msgid "Start by declaring the member variables this object will need:"
msgstr "まず、このオブジェクトに必要なメンバー変数を宣言します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:178
msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:185
msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:193
msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 関数は、ノードがシーンツリーに入ると呼び出されます。これは、ゲー"
"ムウィンドウのサイズを調べる良いタイミングです:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:209
msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:214
msgid "Check for input."
msgstr "入力を確認します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:215
msgid "Move in the given direction."
msgstr "指定した方向に移動します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:216
msgid "Play the appropriate animation."
msgstr "適切なアニメーションを再生します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:218
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this demo, "
"we will use the default events that are assigned to the arrow keys on the "
"keyboard."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:225
msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it is pressed or ``false`` if it isn't."
msgstr ""
"``Input.is_action_pressed()`` を使用してキーが押されているかどうかを検出でき"
"ます。これは、押された場合は ``true`` 、押されていない場合は ``false`` を返し"
"ます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:287
msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* than if it just moved horizontally."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:294
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, and multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"速度を\\ *正規化*\\ すると、これを防ぐことができます。つまり、速度の「長さ」"
"を ``1`` に設定し、希望の速度を乗算します。これは、これ以上速い対角移動がない"
"ことを意味します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:298
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:302
msgid ""
"We also check whether the player is moving so we can start or stop the "
"AnimatedSprite animation."
msgstr ""
"また、AnimatedSpriteアニメーションを開始または停止できるように、プレイヤーが"
"移動しているかどうかも確認します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:305
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:308
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, ``"
"$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$`` は ``get_node()`` の省略形です。 したがって、上記のコードでは、 ``"
"$AnimatedSprite.play()`` は ``get_node(\"AnimatedSprite\").play()`` と同じで"
"す。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:311
msgid ""
"Now that we have a movement direction, we can update the player's position "
"and use ``clamp()`` to prevent it from leaving the screen by adding the "
"following to the bottom of the ``_process`` function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:331
msgid "*Clamping* a value means restricting it to a given range."
msgstr "*クランプ*\\ 値は、特定の範囲に制限することを意味します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:333
msgid ""
"Click \"Play Scene\" (``F6``) and confirm you can move the player around the "
"screen in all directions. The console output that opens upon playing the "
"scene can be closed by clicking ``Output`` (which should be highlighted in "
"blue) in the lower left of the Bottom Panel."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:338
msgid ""
"If you get an error in the \"Debugger\" panel that refers to a \"null "
"instance\", this likely means you spelled the node name wrong. Node names "
"are case-sensitive and ``$NodeName`` or ``get_node(\"NodeName\")`` must "
"match the name you see in the scene tree."
msgstr ""
"「nullインスタンス」を参照する「デバッガ」パネルでエラーが発生した場合は、"
"ノード名のスペルが間違っている可能性があります。ノード名は大文字と小文字を区"
"別し、 ``$NodeName`` または ``get_node(\"NodeName\")`` はシーン ツリーに表示"
"される名前と一致する必要があります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:343
msgid "Choosing animations"
msgstr "アニメーションの選択"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:345
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on direction. We have a \"right\" animation, "
"which should be flipped horizontally using the ``flip_h`` property for left "
"movement, and an \"up\" animation, which should be flipped vertically with "
"``flip_v`` for downward movement. Let's place this code at the end of our "
"``_process()`` function:"
msgstr ""
"プレイヤーを移動できるようになったので、方向に基づいてAnimatedSpriteが再生す"
"るアニメーションを変更する必要があります。左への動きには ``flip_h`` プロパ"
"ティを使用して水平にフリップする「右」アニメーションと、下への動きには "
"``flip_v`` を使用して垂直にフリップする「アップ」アニメーションがあります。こ"
"のコードを ``_process()`` 関数の最後に配置します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:379
msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Consider this code versus the shortened boolean assignment "
"above:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:398
msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions. When you're sure the movement is working correctly, add this "
"line to ``_ready()``, so the player will be hidden when the game starts:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:413
msgid "Preparing for collisions"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:415
msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"``Player`` には敵に攻撃されたことを検知してもらいたいのですが、まだ敵を作って"
"いません!Godotの\\ *シグナル機能*\\ を使って動作させるので、大丈夫です。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:419
msgid "Add the following at the top of the script, after ``extends Area2d``:"
msgstr "スクリプトの先頭で ``extends Area2d`` の後に次の行を追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:433
msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"これは、プレイヤーが敵と衝突したときにプレイヤーが放出(送信)する「ヒット」と"
"呼ばれるカスタムシグナルを定義します。衝突を検出するために ``Area2D`` を使用"
"します。 ``Player`` ノードを選択し、インスペクタタブの横にある「ノード」タブ"
"をクリックすると、プレイヤーが発するシグナルのリストが表示されます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:440
msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered( Object "
"body )`` signal; this will be emitted when a body contacts the player. Click "
"\"Connect..\" and then \"Connect\" again on the \"Connecting Signal\" "
"window. We don't need to change any of these settings - Godot will "
"automatically create a function in your player's script. This function will "
"be called whenever the signal is emitted - it *handles* the signal."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:449
msgid ""
"When connecting a signal, instead of having Godot create a function for you, "
"you can also give the name of an existing function that you want to link the "
"signal to."
msgstr ""
"シグナルを接続する際に、Godotに関数を作成させる代わりに、シグナルをリンクする"
"既存の関数の名前を付けることもできます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:453
msgid "Add this code to the function:"
msgstr "次のコードを関数に追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:472
msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:476
msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` allows "
"us to have Godot wait to disable the shape until it's safe to do so."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:481
msgid ""
"The last piece for our player is to add a function we can call to reset the "
"player when starting a new game."
msgstr ""
"プレイヤーの最後のピースは、新しいゲームを開始するときにプレイヤーをリセット"
"するために呼び出すことができる関数を追加することです。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:502
msgid "Enemy scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:504
msgid ""
"Now it's time to make the enemies our player will have to dodge. Their "
"behavior will not be very complex: mobs will spawn randomly at the edges of "
"the screen and move in a random direction in a straight line, then despawn "
"when they go offscreen."
msgstr ""
"次はプレーヤーが避けるべき敵を作りましょう。敵の行動はあまり複雑ではありませ"
"ん。mobsは画面の端でランダムに生まれ、ランダムな方向に一直線に動きます。画面"
"から.出ると消えます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:509
msgid ""
"We will build this into a ``Mob`` scene, which we can then *instance* to "
"create any number of independent mobs in the game."
msgstr ""
"これを ``Mob`` シーンに組み込み、\\ インスタンス化\\ して、ゲーム内に任意の数"
"の独立したモブを作成します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:513
msgid "Node setup"
msgstr "ノードの設定"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:515
msgid "Click Scene -> New Scene and we'll create the Mob."
msgstr "[シーン -> 新しいシーン]をクリックすると、モブが作成されます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:517
msgid "The Mob scene will use the following nodes:"
msgstr "Mobシーンでは、次のノードが使用されます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:519
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ":ref:`RigidBody2D <class_RigidBody2D>` ( ``Mob`` という名前)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:521
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr "\\ :ref:`AnimatedSprite <class_AnimatedSprite>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:522
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr "\\ :ref:`CollisionShape2D <class_CollisionShape2D>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:523
msgid ""
":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>` (named "
"``Visibility``)"
msgstr ""
":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>` ( ``Visibility`` と"
"いう名前)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:525
msgid ""
"Don't forget to set the children so they can't be selected, like you did "
"with the Player scene."
msgstr ""
"プレイヤーシーンと同様に、選択できないように子を設定することを忘れないでくだ"
"さい。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:528
msgid ""
"In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity "
"Scale`` to ``0``, so the mob will not fall downward. In addition, under the "
"``PhysicsBody2D`` section, click the ``Mask`` property and uncheck the first "
"box. This will ensure the mobs do not collide with each other."
msgstr ""
":ref:`RigidBody2D <class_RigidBody2D>`\\ プロパティで、 ``Gravity Scale`` を "
"``0`` に設定して、モブが下方に落ちないようにします。さらに、 "
"``PhysicsBody2D`` セクションの下にある ``Mask`` プロパティをクリックし、最初"
"のチェックボックスをオフにします。これにより、モブが互いに衝突しないようにな"
"ります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:535
msgid ""
"Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the "
"player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. "
"Set the ``Playing`` property in the Inspector to \"On\" and adjust the "
"\"Speed (FPS)\" setting as shown below. We'll select one of these animations "
"randomly so that the mobs will have some variety."
msgstr ""
"プレイヤーに対して行ったように :ref:`AnimatedSprite <class_AnimatedSprite>` "
"を設定します。 今回、3つのアニメーションがあります： ``fly`` 、 ``swim`` 、 "
"``walk`` 。 インスペクターの[再生]プロパティを[オン]に設定し、以下に示すよう"
"に[速度(FPS)]設定を調整します。 これらのアニメーションのいずれかをランダムに"
"選択して、モブにさまざまなバリエーションを持たせます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:542
msgid ""
"``fly`` should be set to 3 FPS, with ``swim`` and ``walk`` set to 4 FPS."
msgstr ""
"``fly`` は3FPSに設定し、 ``swim`` と ``walk`` は4FPSに設定する必要がありま"
"す。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:544
msgid ""
"Like the player images, these mob images need to be scaled down. Set the "
"``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""
"プレイヤーの画像と同様に、これらのモブ画像は縮小する必要があります。 "
"``AnimatedSprite`` の ``Scale`` プロパティを ``(0.75,0.75)`` に設定します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:547
msgid ""
"As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To "
"align the shape with the image, you'll need to set the ``Rotation Degrees`` "
"property to ``90`` under ``Node2D``."
msgstr ""
"``Player`` シーンと同様に、衝突に ``CapsuleShape2D`` を追加します。図形をイ"
"メージに合わせるには、 ``Node2D`` の下に ``Rotation Degrees`` プロパティを "
"``90'`` に設定する必要があります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:552
msgid "Enemy script"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:554
msgid "Add a script to the ``Mob`` and add the following member variables:"
msgstr "``Mob`` にスクリプトを追加し、次のメンバー変数を追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:580
msgid ""
"When we spawn a mob, we'll pick a random value between ``min_speed`` and "
"``max_speed`` for how fast each mob will move (it would be boring if they "
"were all moving at the same speed). We also have an array containing the "
"names of the three animations, which we'll use to select a random one. Make "
"sure you've spelled these the same in the script and in the SpriteFrames "
"resource."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:586
msgid ""
"Now let's look at the rest of the script. In ``_ready()`` we randomly choose "
"one of the three animation types:"
msgstr ""
"それでは、スクリプトの残りの部分を見てみましょう。 ``_ready()`` では、次の3つ"
"のアニメーションタイプのいずれかをランダムに選択します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:605
msgid ""
"You must use ``randomize()`` if you want your sequence of \"random\" numbers "
"to be different every time you run the scene. We're going to use "
"``randomize()`` in our ``Main`` scene, so we won't need it here. ``randi() % "
"n`` is the standard way to get a random integer between ``0`` and ``n-1``."
msgstr ""
"シーンを実行するたびに「ランダム」な数字のシーケンスを異なるようにするには、 "
"``randomize()`` を使用する必要があります。 ``Main`` シーンでは "
"``randomize()`` を使用するので、ここでは必要はありません。 ``randi() % n`` "
"は、 ``'0`` と ``n-1`` の間のランダム整数を取得する標準的な方法です。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:611
msgid ""
"The last piece is to make the mobs delete themselves when they leave the "
"screen. Connect the ``screen_exited()`` signal of the ``Visibility`` node "
"and add this code:"
msgstr ""
"最後のピースは、モブが画面を離れたときにモブ自身を削除することです。 "
"``Visibility`` ノードの ``screen_exited()`` シグナルを接続し、次のコードを追"
"加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:628
msgid "This completes the `Mob` scene."
msgstr "これで `Mob` シーンが完成します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:631
msgid "Main scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:633
msgid ""
"Now it's time to bring it all together. Create a new scene and add a :ref:"
"`Node <class_Node>` named ``Main``. Click the \"Instance\" button and select "
"your saved ``Player.tscn``."
msgstr ""
"さあ、すべてをまとめましょう。 新しいシーンを作成し、 ``Main`` という名前の"
"\\ :ref:`Node <class_Node>`\\ を追加します。 [インスタンス]ボタンをクリックし"
"て、保存した ``Player.tscn`` を選択します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:639
msgid "See :ref:`doc_instancing` to learn more about instancing."
msgstr ""
"インスタンス化の詳細については、\\ :ref:`doc_instancing`\\ を参照してくださ"
"い。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:641
msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""
"次に``Main``の子供として以下のノードを追加します。示されている名前をつけま"
"す。値は秒単位です。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:644
msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>`\\ ( ``MobTimer`` という名前) - モブが出現する頻度"
"を制御する"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:645
msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""
":ref:`Timer <class_Timer>` ( ``ScoreTimer`` という名前) - 一秒ごとに得点を上"
"げる"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:646
msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""
":ref:`Timer <class_Timer>` ( ``StartTimer`` という名前) - 開始する前に遅延さ"
"せる"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:647
msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - プレーヤーの"
"開始位置を示す"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:649
msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "各 ``Timer`` ノードの ``Wait Time`` プロパティを次のように設定します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:652
msgid "``MobTimer``: ``0.5``"
msgstr "\\ ``MobTimer``: ``0.5``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:653
msgid "``ScoreTimer``: ``1``"
msgstr "\\ ``ScoreTimer``: ``1``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:654
msgid "``StartTimer``: ``2``"
msgstr "\\ ``StartTimer``: ``2``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:656
msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"さらに、 ``StartTimer`` の ``One Shot`` プロパティを「On」に設定し、 "
"``StartPosition`` ノードの ``Position`` を ``(240, 450)`` に設定します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:660
msgid "Spawning mobs"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:662
msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"メインノードは新しいモブを生成し、画面の端のランダムな場所に表示するようにし"
"ます。 ``Main`` の子として ``MobPath`` という名前の\\ :ref:`Path2D "
"<class_Path2D>`\\ ノードを追加します。 ``Path2D`` を選択すると、エディターの"
"上部にいくつかの新しいボタンが表示されます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:669
msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Snap to Grid\" is checked. This option can be found under the "
"\"Snapping options\" button to the left of the \"Lock\" button, appearing as "
"a series of three vertical dots."
msgstr ""
"中央のもの(「点を追加」)を選択し、クリックして図のコーナーに点を追加してパス"
"を描画します。ポイントをグリッドにスナップするには、「グリッドにスナップ」が"
"チェックされていることを確認します。このオプションは、「ロック」ボタンの左に"
"ある「スナップオプション」ボタンの下にあり、3つの縦の点が並んで表示されます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:677
msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""
"*時計回り*\\ にパスを描画します。そうしないと、モブは\\ *内側*\\ ではなく\\ *"
"外側*\\ を向いてスポーンします!"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:680
msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""
"画像にポイント ``4`` を配置した後、「カーブを閉じる」ボタンをクリックすると、"
"カーブが完成します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:683
msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"パスが定義されたので、 ``MobPath`` の子として\\ :ref:`PathFollow2D "
"<class_PathFollow2D>`\\ ノードを追加し、 ``MobSpawnLocation`` という名前を付"
"けます。このノードは自動的に回転し、パスの移動に従うので、パスに沿ってランダ"
"ムな位置と方向を選択できます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:689
msgid "Main script"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:691
msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:731
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" panel and drop it in the ``Mob`` "
"property under the Script Variables of the ``Main`` node."
msgstr ""
"「ファイルシステム」パネルから ``Mob.tscn`` をドラッグし、さらに ``Main`` "
"ノードのスクリプト変数の下の ``Mob`` プロパティにドロップします。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:734
msgid ""
"Next, click on the Player and connect the ``hit`` signal. We want to make a "
"new function named ``game_over``, which will handle what needs to happen "
"when a game ends. Type \"game_over\" in the \"Method In Node\" box at the "
"bottom of the \"Connecting Signal\" window. Add the following code, as well "
"as a ``new_game`` function to set everything up for a new game:"
msgstr ""
"次に、プレーヤーをクリックして、 ``hit`` シグナルを接続します。 ゲームが終了"
"したときに必要なことを処理する `` game_over`` という名前の新しい関数を作成し"
"ます。 [信号の接続]ウィンドウの下部にある[ノード内のメソッド]ボックスに"
"「game_over」と入力します。 次のコードと、新しいゲームのすべてを設定する `` "
"new_game`` 関数を追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:771
msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` ,and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:798
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:804
msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr ""
"``add_child()`` を使用して新しいインスタンスをシーンに追加する必要がありま"
"す。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:807
msgid ""
"Now click on ``MobTimer`` in the scene window then head to inspector window, "
"switch to node view then click on ``timeout()`` and connect the signal."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:810
msgid "Add the following code:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:858
msgid ""
"In functions requiring angles, GDScript uses *radians*, not degrees. If "
"you're more comfortable working with degrees, you'll need to use the "
"``deg2rad()`` and ``rad2deg()`` functions to convert between the two."
msgstr ""
"角度を必要とする関数では、GDScriptは度ではなく\\ *ラジアン*\\ を使用します。"
"度を使用する方が快適な場合は、 ``deg2rad()`` 関数と ``rad2deg()`` 関数を使用"
"して 2 つの間で変換する必要があります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:864
msgid "HUD"
msgstr "ヘッドアップディスプレイ(HUD)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:866
msgid ""
"The final piece our game needs is a UI: an interface to display things like "
"score, a \"game over\" message, and a restart button. Create a new scene, "
"and add a :ref:`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" "
"stands for \"heads-up display\", an informational display that appears as an "
"overlay on top of the game view."
msgstr ""
"ゲームに必要な最後の部分は、スコア、「ゲームオーバー」メッセージ、再起動ボタ"
"ンなどを表示するインターフェイスです。新しいシーンを作成し、 ``HUD`` という名"
"前の\\ :ref:`CanvasLayer <class_CanvasLayer>`\\ ノードを追加します。「HUD」"
"は、ゲームビューの上にオーバーレイとして表示される情報表示である「ヘッドアッ"
"プディスプレイ」の略です。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:872
msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""
":ref:`CanvasLayer <class_CanvasLayer>`\\ ノードを使用すると、ゲームの他の部分"
"よりも上のレイヤにUI要素を描画することができるため、表示される情報がプレー"
"ヤーやモブなどのゲーム要素によって隠されることがなくなります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:876
msgid "The HUD displays the following information:"
msgstr "HUDには、次の情報が表示されます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:878
msgid "Score, changed by ``ScoreTimer``."
msgstr "``ScoreTimer`` によって変更されるスコア。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:879
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr "「ゲームオーバー」や「準備をしろ」 などのメッセージ"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:880
msgid "A \"Start\" button to begin the game."
msgstr "ゲームを開始する「スタート」ボタン。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:882
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""
"UI要素の基本ノードは\\ :ref:`コントロール <class_Control>`\\ です。UIを作成す"
"るには、\\ :ref:`ラベル <class_Label>`\\ と\\ :ref:`ボタン <class_Button>`\\ "
"の2種類の\\ :ref:`コントロール <class_Control>`\\ ノードを使用します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:886
msgid "Create the following as children of the ``HUD`` node:"
msgstr "``HUD`` ノードの子として次を作成します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:888
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr "``ScoreLabel`` という名前の\\ :ref:`ラベル <class_Label>`\\ 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:889
msgid ":ref:`Label <class_Label>` named ``MessageLabel``."
msgstr "``MessageLabel`` という名前の\\ :ref:`ラベル <class_Label>`\\ 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:890
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr "``StartButton`` という名前の\\ :ref:`ボタン <class_Button>`\\ 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:891
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr "``MessageTimer`` という名前の\\ :ref:`Timer <class_Timer>`\\ 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:893
msgid ""
"Click on the ``ScoreLabel`` and type a number into the *Text* field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following for each of the three "
"``Control`` nodes:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:899
msgid "Under \"Custom Fonts\", choose \"New DynamicFont\""
msgstr "「カスタムフォント」で 「新しい動的フォント」を選択します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:903
msgid ""
"Click on the \"DynamicFont\" you added, and under \"Font/Font Data\", choose "
"\"Load\" and select the \"Xolonium-Regular.ttf\" file. You must also set the "
"font's ``Size``. A setting of ``64`` works well."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:909
msgid ""
"**Anchors and Margins:** ``Control`` nodes have a position and size, but "
"they also have anchors and margins. Anchors define the origin - the "
"reference point for the edges of the node. Margins update automatically when "
"you move or resize a control node. They represent the distance from the "
"control node's edges to its anchor. See :ref:"
"`doc_design_interfaces_with_the_control_nodes` for more details."
msgstr ""
"**アンカーとマージン**\\ : ``Control`` ノードには、位置とサイズがありますが、"
"アンカーとマージンもあります。アンカーによって、原点 (節点のエッジの参照点) "
"が定義されます。余白は、コントロールノードを移動またはサイズ変更すると自動的"
"に更新されます。コントロールノードのエッジからアンカーまでの距離を表します。"
"詳細は\\ :ref:`doc_design_interfaces_with_the_control_nodes`\\ を参照してくだ"
"さい。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:916
msgid ""
"Arrange the nodes as shown below. Click the \"Anchor\" button to set a "
"Control node's anchor:"
msgstr ""
"次に示すようにノードを配置します。「アンカー」ボタンをクリックして、コント"
"ロールノードのアンカーを設定します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:921
msgid ""
"You can drag the nodes to place them manually, or for more precise "
"placement, use the following settings:"
msgstr ""
"ノードをドラッグして手動で配置したり、より正確な配置を行うには、次の設定を使"
"用します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:925
msgid "ScoreLabel"
msgstr "\\ ScoreLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:927
msgid "*Text* : ``0``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:928
msgid "*Layout* : \"Top Wide\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:929
#: ../../docs/getting_started/step_by_step/your_first_game.rst:936
msgid "*Align* : \"Center\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:932
msgid "MessageLabel"
msgstr "\\ MessageLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:934
msgid "*Text* : ``Dodge the Creeps!``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:935
msgid "*Layout* : \"HCenter Wide\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:939
msgid "StartButton"
msgstr "\\ StartButton"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:941
msgid "*Text* : ``Start``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:942
msgid "*Layout* : \"Center Bottom\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:943
msgid "*Margin* :"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:945
msgid "Top: ``-200``"
msgstr "トップ: ``-200``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:946
msgid "Bottom: ``-100``"
msgstr "ボトム: ``-100``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:948
msgid "Now add this script to ``HUD``:"
msgstr "次に、このスクリプトを ``HUD`` に追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:967
msgid ""
"The ``start_game`` signal tells the ``Main`` node that the button has been "
"pressed."
msgstr ""
"``start_game`` シグナルは、ボタンが押されたことを ``Main`` ノードに通知しま"
"す。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:989
msgid ""
"This function is called when we want to display a message temporarily, such "
"as \"Get Ready\". On the ``MessageTimer``, set the ``Wait Time`` to ``2`` "
"and set the ``One Shot`` property to \"On\"."
msgstr ""
"この関数は、「Get Ready」などのメッセージを一時的に表示するときに呼び出されま"
"す。 ``MessageTimer`` で、 ``Wait Time`` を ``2`` に設定し、 ``One Shot`` プ"
"ロパティを「On」に設定します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1020
msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1024
msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to delay, such as in the above code, where we want to wait a little "
"bit of time before showing the \"Start\" button."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1042
msgid "This function is called by ``Main`` whenever the score changes."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1044
msgid ""
"Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` "
"signal of ``StartButton``."
msgstr ""
"``MessageTimer`` の ``timeout()`` シグナルと ``StartButton`` の "
"``pressed()`` 信号を接続します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1071
msgid "Connecting HUD to Main"
msgstr "HUDをメインに接続する"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1073
msgid ""
"Now that we're done creating the ``HUD`` scene, save it and go back to "
"``Main``. Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` "
"scene, and place it at the bottom of the tree. The full tree should look "
"like this, so make sure you didn't miss anything:"
msgstr ""
"``HUD`` シーンの作成が完了したら、保存して ``Main`` に戻ります。 ``Player`` "
"のシーンと同じように ``HUD`` シーンを ``Main`` にインスタンス化し、ツリーの一"
"番下に配置します。ツリー全体は次のようになりますので、何も見落とさないように"
"してください:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1080
msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""
"次に、 ``HUD`` 機能を ``Main`` のスクリプトに接続します。これには、 ``Main`` "
"シーンにいくつかの追加が必要です:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1083
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function."
msgstr ""
"ノードタブで、HUDの ``start_game`` シグナルを ``new_game()`` 関数に接続しま"
"す。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1086
msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr ""
"``new_game()`` で、スコア表示を更新し、「Get Ready」メッセージを表示します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1101
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr "``game_over()`` では、対応する ``HUD`` 関数を呼び出す必要があります:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1112
msgid ""
"Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""
"最後に、これを ``on_ScoreTimer_timeout()`` に追加して、変更されたスコアと同期"
"して表示を維持します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1124
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``Main.tscn``."
msgstr ""
"これでプレイの準備が整いました![プロジェクトの再生] ボタンをクリックします。"
"メインシーンを選択するように求められますので、 ``Main.tscn`` を選択します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1128
msgid "Removing old creeps"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1130
msgid ""
"If you play until \"Game Over\" and then start a new game the creeps from "
"the previous game are still on screen. It would be better if they all "
"disappeared at the start of a new game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1134
msgid ""
"We'll use the ``start_game`` signal that's already being emitted by the "
"``HUD`` node to remove the remaining creeps. We can't use the editor to "
"connect the signal to the mobs in the way we need because there are no "
"``Mob`` nodes in the ``Main`` scene tree until we run the game. Instead "
"we'll use code."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1139
msgid ""
"Start by adding a new function to ``Mob.gd``. ``queue_free()`` will delete "
"the current node at the end of the current frame."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1155
msgid ""
"Then in ``Main.gd`` add a new line inside the ``_on_MobTimer_timeout()`` "
"function, at the end."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1167
msgid ""
"This line tells the new Mob node (referenced by the ``mob`` variable) to "
"respond to any ``start_game`` signal emitted by the ``HUD`` node by running "
"its ``_on_start_game()`` function."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1172
msgid "Finishing up"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1174
msgid ""
"We have now completed all the functionality for our game. Below are some "
"remaining steps to add a bit more \"juice\" to improve the game experience. "
"Feel free to expand the gameplay with your own ideas."
msgstr ""
"これで、ゲームのすべての機能が完了しました。以下は、ゲーム体験を向上させるた"
"めにもう少し「ジュース」を追加するためのいくつかの残りの手順です。自分のアイ"
"デアでゲームプレイを自由に拡張してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1179
msgid "Background"
msgstr "\\ Background"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1181
msgid ""
"The default gray background is not very appealing, so let's change its "
"color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` "
"node. Make it the first node under ``Main`` so that it will be drawn behind "
"the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a "
"color you like and drag the size of the ``ColorRect`` so that it covers the "
"screen."
msgstr ""
"デフォルトのグレーの背景はあまり魅力的ではありませんので、色を変更してみま"
"しょう。これを行う 1 つの方法は、\\ :ref:`ColorRect <class_ColorRect>`\\ ノー"
"ドを使用することです。他のノードの後ろに描画されるように、 ``Main`` の下の最"
"初のノードにします。 ``ColorRect`` には、 ``color`` というプロパティが 1 つだ"
"け含まれます。好きな色を選択し、画面を覆う ``ColorRect`` のサイズをドラッグし"
"ます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1188
msgid ""
"You could also add a background image, if you have one, by using a "
"``Sprite`` node."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1192
msgid "Sound effects"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1194
msgid ""
"Sound and music can be the single most effective way to add appeal to the "
"game experience. In your game assets folder, you have two sound files: "
"\"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" "
"for when the player loses."
msgstr ""
"サウンドと音楽は、ゲーム体験に魅力を与える唯一の最も効果的な方法です。ゲーム"
"アセットフォルダには、BGMの「House In a Forest Loop.ogg」と、プレイヤーが負け"
"たときの「gameover.wav」の2つのサウンドファイルがあります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1199
msgid ""
"Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children "
"of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On "
"each one, click on the ``Stream`` property, select \"Load\", and choose the "
"corresponding audio file."
msgstr ""
"2つの\\ :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` \\ ノードを "
"``Main`` の子として追加します。その1つに ``Music`` 、もう1つに "
"``DeathSound`` と名前を付けます。各ファイルで、 ``Stream`` プロパティをクリッ"
"クし、「ロード」を選択し、対応するオーディオファイルを選択します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1204
msgid ""
"To play the music, add ``$Music.play()`` in the ``new_game()`` function and "
"``$Music.stop()`` in the ``game_over()`` function."
msgstr ""
"音楽を再生するには、 ``new_game()`` 関数に ``$Music.play()`` を追加し、 "
"``game_over()`` 関数に ``$Music.stop()`` を追加します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1207
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr "最後に、 ``game_over()`` 関数に ``$DeathSound.play()`` を追加します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1210
msgid "Keyboard Shortcut"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1212
msgid ""
"Since the game is played with keyboard controls, it would be convenient if "
"we could also start the game by pressing a key on the keyboard. One way to "
"do this is using the \"Shortcut\" property of the ``Button`` node."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1216
msgid ""
"In the ``HUD`` scene, select the ``StartButton`` and find its *Shortcut* "
"property in the Inspector. Select \"New Shortcut\" and click on the "
"\"Shortcut\" item. A second *Shortcut* property will appear. Select \"New "
"InputEventAction\" and click the new \"InputEvent\". Finally, in the "
"*Action* property, type the name ``ui_select``. This is the default input "
"event associated with the spacebar."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1224
msgid ""
"Now when the start button appears, you can either click it or press the "
"spacebar to start the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1228
msgid "Project files"
msgstr "プロジェクトファイル"

#: ../../docs/<generated>:1
msgid "You can find a completed version of this project at these locations:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1231
msgid "https://github.com/kidscancode/Godot3_dodge/releases"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1232
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr ""
