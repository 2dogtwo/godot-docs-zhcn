# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:4
msgid "Your first game"
msgstr "最初のゲーム"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:7
msgid "Overview"
msgstr "概要"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:9
msgid ""
"This tutorial will guide you through making your first Godot project. You "
"will learn how the Godot editor works, how to structure a project, and how "
"to build a 2D game."
msgstr ""
"このチュートリアルではあなたの最初のGodotのプロジェクトの作りかたを紹介しま"
"す。エディタの使い方、プロジェクトの構成方法、2Dゲームの作りかたを学びます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:13
msgid ""
"This project is an introduction to the Godot engine. It assumes that you "
"have some programming experience already. If you're new to programming "
"entirely, you should start here: :ref:`doc_scripting`."
msgstr ""
"このプロジェクトはGodotエンジンへの入門用です。これは、あなたがすでにプログラ"
"ミングの経験があるものとして書かれています。もし、まったくプログラミングの経"
"験がなければ、\\ :ref:`doc_scripting`\\ から開始してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:18
msgid ""
"The game is called \"Dodge the Creeps!\". Your character must move and avoid "
"the enemies for as long as possible. Here is a preview of the final result:"
msgstr ""
"このゲームは「クリープをよけろ！」といいます。あなたのキャラクターはできるだ"
"け長く動いて敵を避けなければなりません。以下が最終結果のプレビューです:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:24
msgid ""
"**Why 2D?** 3D games are much more complex than 2D ones. You should stick to "
"2D until you have a good understanding of the game development process and "
"how to use Godot."
msgstr ""
"**なぜ2Dから？** 3Dゲームは2Dより複雑です。ゲーム開発のプロセスやGodotの使い"
"方をよく理解するまでは、2Dにとどまるべきです。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:29
msgid "Project setup"
msgstr "プロジェクトの設定"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:31
msgid ""
"Launch Godot and create a new project. Then, download :download:"
"`dodge_assets.zip <files/dodge_assets.zip>`. This contains the images and "
"sounds you'll be using to make the game. Unzip these files in your project "
"folder."
msgstr ""
"Godotを起動して新しいプロジェクトを作ります。\\ :download:`dodge_assets.zip "
"<files/dodge_assets.zip>`\\ をダウンロードします。これにゲームを作るのに使う"
"画像とサウンドが含まれます。これらのファイルをプロジェクトのフォルダに展開し"
"ます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:36
msgid ""
"For this tutorial, we will assume you are familiar with the Godot editor. If "
"you haven't read :ref:`doc_scenes_and_nodes`, do so now for an explanation "
"of setting up a project and using the editor."
msgstr ""
"このチュートリアルでは、Godotエディタの使い方が分かることを前提としています。"
"まだ\\ :ref:`doc_scenes_and_nodes`\\ を読んでいない場合は、プロジェクトのセッ"
"トアップ方法とエディタの使用についての説明があるので、先に読んでください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:40
msgid ""
"This game is designed for portrait mode, so we need to adjust the size of "
"the game window. Click on Project -> Project Settings -> Display -> Window "
"and set \"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""
"このゲームはポートレートモードを使うので、ゲームウィンドウのサイズを設定する"
"必要があります。プロジェクト -> プロジェクト設定 -> Display -> Windowの順にク"
"リックして 「Width」 を ``480`` に、「Height」を ``720`` にセットします。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:44
msgid ""
"Also in this section, under the \"Stretch\" options, set ``Mode`` to \"2d\" "
"and ``Aspect`` to \"keep\". This ensures that the game scales consistently "
"on different sized screens."
msgstr ""
"このセクションでは、「Stretch」オプションのところで、 ``Mode`` を「2d」に、 "
"``Aspect`` を「keep」にします。これによって、異なるサイズのスクリーンでも、同"
"じようにゲームが拡大縮小されて表示されます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:49
msgid "Organizing the project"
msgstr "プロジェクトの編成"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:51
msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene. In a larger "
"project, it might be useful to create folders to hold the various scenes and "
"their scripts, but for this relatively small game, you can save your scenes "
"and scripts in the project's root folder, identified by ``res://``.  You can "
"see your project folders in the FileSystem Dock in the lower left corner:"
msgstr ""
"このプロジェクトでは、\\ ``Player``\\ 、\\ ``Mob``\\ 、\\ ``HUD`` の3つの独立"
"したシーンを作成し、これらをゲームの ``Main`` シーンに結合します。大規模なプ"
"ロジェクトでは、さまざまなシーンとそのスクリプトを保持するフォルダを作成する"
"と便利かもしれませんが、この比較的小さなゲームでは、 ``res://`` と呼ばれるプ"
"ロジェクトのルートフォルダにシーンとスクリプトを保存します。プロジェクトフォ"
"ルダは、左下隅の[ファイルシステム] ドックで確認できます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:62
msgid "Player scene"
msgstr "Playerシーン"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:64
msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"最初のシーンでは、 ``Player`` オブジェクトを定義します。Player シーンを独立し"
"て作成する利点の 1 つは、たとえゲームの他の部分を作成する前であっても、個別に"
"テストができることです。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:69
msgid "Node structure"
msgstr "ノード構成"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:71
msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"はじめに、プレイヤーオブジェクトのルートノードを選択する必要があります。原則"
"として、シーンのルートノードはオブジェクトに望まれる機能（オブジェクトが何 *"
"である* か）を反映する必要があります。「その他のノード」のボタンをクリックし"
"て、シーンに :ref:`Area2D <class_Area2D>`` ノードを加えます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:78
msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godotは、シーンツリーのノードの横に警告アイコンを表示します。現時点では無視し"
"て構いません。後で対処します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:81
msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"``Area2D`` を使用すると、プレイヤーに重なり合ったり、プレイヤーに衝突したりす"
"るオブジェクトを検出できます。ノードの名前をダブルクリックして、その名前を "
"``Player`` に変更します。シーンのルートノードを決めたので、これにノードを追加"
"して機能を追加できます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:86
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"``Player`` ノードに子を追加する前に、子をクリックして誤って移動したりサイズを"
"変更したりしないようにします。ノードを選択し、ロックの右側にあるアイコンをク"
"リックします。ツールチップには「オブジェクトの子を選択不可にする。」と書いて"
"あります"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:93
msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"シーンを保存します。 [シーン]-> [シーンを保存]をクリックするか、Windows/Linux"
"では :kbd:`Ctrl + S` を押し、macOSでは :kbd:`Cmd + S` を押します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:95
msgid "For this project, we will be following the Godot naming conventions."
msgstr "このプロジェクトでは、Godotの命名規則に従います。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:97
msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: クラス(ノード)はPascalCaseを使用し、変数と関数はsnake_caseを使"
"用し、定数はALL_CAPSを使用します(\\ :ref:`doc_gdscript_styleguide`\\ を参"
"照)。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:101
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`).  Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: クラス、export変数、メソッドはPascalCaseを使用し、プライベートフィー"
"ルドは_camelCaseを使用し、ローカル変数とパラメーターはcamelCaseを使用します"
"(\\ :ref:`doc_c_sharp_styleguide`\\ を参照)。シグナルを接続するときは、メソッ"
"ド名を正確に入力してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:108
msgid "Sprite animation"
msgstr "スプライトアニメーション"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:110
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"``Player`` ノードをクリックし、\\ :ref:`AnimatedSprite "
"<class_AnimatedSprite>` ノードを子として追加します。 ``AnimatedSprite`` は、"
"Playerの外観とアニメーションを処理します。ノードの横に警告マークがあることに"
"注意してください。\\ ` `AnimatedSprite`` には :ref:`SpriteFrames "
"<class_SpriteFrames>` リソースが必要です。これは、表示できるアニメーションの"
"リストです。作成するには、インスペクタで ``Frames`` プロパティを見つけ、"
"「[空]」→「新規 SpriteFrames」をクリックします。これにより、SpriteFramesパネ"
"ルが自動的に開きます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:121
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"左側にはアニメーションの一覧があります。「default」をクリックし、「walk」に名"
"前を変更します。次に、「新規アニメーション」ボタンをクリックして、「up」とい"
"う名前の 2 番目のアニメーションを作成します。 ``playerGrey_up[1/2]`` と "
"``playerGrey_walk[1/2]`` という名前の各アニメーションの 2 つの画像をパネルの "
"「アニメーション フレーム」側にドラッグします:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:130
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"プレイヤーの画像はゲームウィンドウに対して少し大きすぎるため、縮小する必要が"
"あります。 ``AnimatedSprite`` ノードをクリックし、 ``Scale`` プロパティを "
"``(0.5,0.5)`` に設定します。``Node2D`` の下のインスペクタにあります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:137
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\".  Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"最後に、\\ :ref:`CollisionShape2D <class_CollisionShape2D>`\\ を ``Player`` "
"の子として追加します。これにより、プレイヤーの「ヒットボックス」、またはその"
"衝突領域の境界が決定されます。このキャラクターでは、 ``CapsuleShape2D`` ノー"
"ドがうまくフィットするので、インスペクタの「Shape」の隣で「[空]」->「新規 "
"CapsuleShape2D」をクリックします。2つのサイズハンドルを使用して、スプライトを"
"覆うようにシェイプのサイズを変更します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:146
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "完了すると、 ``Player`` シーンは次のようになります:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:150
msgid "Make sure to save the scene again after these changes."
msgstr "これらの変更後は、必ずシーンを再度保存してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:153
msgid "Moving the player"
msgstr "プレイヤーを動かす"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:155
msgid ""
"Now we need to add some functionality that we can't get from a built-in "
"node, so we'll add a script. Click the ``Player`` node and click the "
"\"Attach Script\" button:"
msgstr ""
"次に、組み込みノードからは得られない機能を追加する必要があるので、スクリプト"
"を追加します。 ``Player`` ノードをクリックし、「スクリプトをアタッチ」ボタン"
"をクリックします:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:161
msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"スクリプト設定ウィンドウ内の設定はそのままで構いません。「作成」をクリックし"
"てください:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:164
msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"C#スクリプトまたはその他の言語を作成する場合は、作成を実行する前に [言語] ド"
"ロップダウン メニューから言語を選択します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:169
msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""
"GDScriptに初めて触れる場合は、続行する前に\\ :ref:`doc_scripting`\\ をお読み"
"ください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:172
msgid "Start by declaring the member variables this object will need:"
msgstr "まず、このオブジェクトに必要なメンバー変数を宣言します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:193
msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"最初の変数 ``speed`` で ``export`` キーワードを使用すると、インスペクタでその"
"値を設定できるようになります。これは、値をノードの組み込みプロパティのように"
"調整できるようにする場合に便利です。 ``Player`` ノードをクリックすると、イン"
"スペクタの \"Script Variables\" セクションにプロパティが表示されます。ここで"
"値を変更すると、スクリプトに記述された値が上書きされることに注意してくださ"
"い。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:200
msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"C#を使用している場合、新しいエクスポート変数またはシグナルを表示する場合は、"
"プロジェクトアセンブリを(再)ビルドする必要があります。このビルドは、エディタ"
"ウィンドウの下部にある「Mono」をクリックしてMonoパネルを表示し、「Build "
"Project」ボタンをクリックして手動でトリガーできます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:208
msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 関数は、ノードがシーンツリーに入ると呼び出されます。これは、ゲー"
"ムウィンドウのサイズを調べる良いタイミングです:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:224
msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"これで ``_process()`` 関数を使用して、プレイヤーが何をするかを定義できます。 "
"``_process()`` はフレームごとに呼び出されるため、これを使用してゲームの要素を"
"更新しますが、これは頻繁に変更されることが予想されます。プレイヤーの場合、次"
"のことを行う必要があります:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:229
msgid "Check for input."
msgstr "入力をチェックします。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:230
msgid "Move in the given direction."
msgstr "指定した方向に移動します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:231
msgid "Play the appropriate animation."
msgstr "適切なアニメーションを再生します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:233
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this demo, "
"we will use the default events that are assigned to the arrow keys on the "
"keyboard."
msgstr ""
"まず、入力をチェックする必要があります - プレイヤーはキーを押していますか？こ"
"のゲームでは、4方向の入力チェックがあります。入力アクションは、プロジェクト設"
"定の「インプットマップ」で定義されます。ここで、カスタムイベントを定義し、異"
"なるキー、マウスイベント、またはその他の入力を割り当てることができます。この"
"デモでは、キーボードの矢印キーに割り当てられているデフォルトのイベントを使用"
"します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:240
msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""
"キーが押されているかどうかを ``Input.is_action_pressed()`` を使用して検出でき"
"ます。これは、押された場合は ``true`` 、押されていない場合は ``false`` を返し"
"ます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:302
msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""
"まず ``velocity`` を ``(0, 0)`` に設定することから始めます - デフォルトでは、"
"プレイヤーは動いてはいけません。次に、各入力をチェックし、 ``velocity`` から"
"加算/減算して全体の方向を取得します。たとえば、 ``右`` と ``下`` を同時に押し"
"た場合、結果の ``velocity`` ベクトルは ``(1, 1)`` になります。この場合、水平"
"方向と垂直方向の動きを追加しているため、プレイヤーは水平方向に移動した場合よ"
"りも、斜め方向に\\ *速く*\\ 移動します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:309
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"加速度を\\ *正規化*\\ すれば、これを防ぐことができます。つまり、速度の\\ *長"
"さ*\\ を ``1`` に設定し、それから希望の速度を乗算します。これは、これ以上速い"
"対角移動がないことを意味します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:313
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"以前にベクトル演算を使用したことがない場合、あるいは忘れてしまった場合"
"は、\\ :ref:`doc_vector_math`\\ でGodotのベクトル使用の説明をみることができま"
"す。これは知っておくと良いですが、このチュートリアルの残りの部分では必要ない"
"でしょう。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:317
msgid ""
"We also check whether the player is moving so we can call ``play()`` or "
"``stop()`` on the AnimatedSprite."
msgstr ""
"また、AnimatedSpriteの ``play()`` または ``stop()`` を呼び出せるようにするた"
"め、プレイヤーが移動中かどうかも確認します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:320
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, ``"
"$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$`` は ``get_node()`` の省略形です。したがって、上記のコードでは、\\ ``"
"$AnimatedSprite.play()`` は ``get_node(\"AnimatedSprite\").play()`` と同じで"
"す。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:323
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"GDScriptでは、\\ ``$`` は現在のノードからの相対パスにあるノードを返し、ノード"
"が見つからない場合は ``null`` を返します。 AnimatedSpriteは現在のノードの子で"
"あるため、\\ ``$AnimatedSprite`` を使用できます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:326
msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""
"移動方向がわかったので、プレイヤーの位置を更新します。\\ ``clamp()`` を使用し"
"て、プレイヤーが画面を離れないようにします。\\ *Clamping*\\ の意味は長さに制"
"限をかける事です。\\ ``_process`` 関数の下部に追加して下さい (`else` までイン"
"デントしないように注意):"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:347
msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"`_process()` 関数の `delta` パラメータは *フレームの長さ* - 前のフレームが完"
"了するまでに要した時間を参照します。この値を使うことで、動きの処理はフレーム"
"レートの変動の影響を受けなくなります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:352
msgid ""
"Click \"Play Scene\" (``F6``) and confirm you can move the player around the "
"screen in all directions."
msgstr ""
"「シーンを実行」(``F6``)をクリックして、スクリーンで全方向にプレイヤーを移動"
"できることを確認してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:355
msgid "If you get an error in the \"Debugger\" panel that says"
msgstr "「デバッガ」パネルで以下のようなエラーが発生した場合"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:357
msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""
"``null インスタンス上の ベース 'null インスタンス' の関数 'play' を呼び出そう"
"としています。``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:359
msgid ""
"this likely means you spelled the name of the AnimatedSprite node wrong. "
"Node names are case-sensitive and ``$NodeName`` must match the name you see "
"in the scene tree."
msgstr ""
"この場合、AnimatedSpriteノード名のスペルが間違っている可能性があります。ノー"
"ド名は大文字と小文字を区別するので、\\ ``$NodeName`` はシーン ツリーに表示さ"
"れている名前と一致させる必要があります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:364
msgid "Choosing animations"
msgstr "アニメーションの選択"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:366
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on its direction. We have the \"walk\" "
"animation, which shows the player walking to the right. This animation "
"should be flipped horizontally using the ``flip_h`` property for left "
"movement. We also have the \"up\" animation, which should be flipped "
"vertically with ``flip_v`` for downward movement. Let's place this code at "
"the end of the ``_process()`` function:"
msgstr ""
"プレイヤーを移動できるようになったので、AnimatedSpriteが再生するアニメーショ"
"ンを方向に合わせて変更させる必要があります。今あるのは「walk」アニメーション"
"で、プレイヤーは右方向へ歩きます。左への動きには ``flip_h`` プロパティを使用"
"して水平に反転させます。また「up」アニメーションもあり、これは ``flip_v`` で"
"垂直に反転させれば、下への動きになります。では、このコードを ``_process()`` "
"関数の最後に配置します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:401
msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""
"上記のコードにおけるブール値の代入は、プログラマーがよく使う略式記法です。比"
"較テスト（ブール値）とブール値の代入を行っていますが、両方とも同時に行うこと"
"ができます。次のコードと、上記の1行でのブール値代入とを比べてみましょう。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:425
msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr ""
"もう一度シーンを再生して、それぞれの方向のアニメーションが正しいことを確認し"
"てください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:428
msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""
"ここでよくある間違いは、アニメーションの名前を間違って入力してしまうことで"
"す。SpriteFramesパネルに表示されるアニメーションの名前は、コードの中で入力し"
"たものと一致していなければなりません。もしアニメーションの名前を ``\"Walk"
"\"`` とした場合、コード中では大文字の \"W\" も使わなければなりません。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:433
msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"動きが正しく機能していることを確認したら、次の行を ``_ready()`` に追加して、"
"ゲームの開始時にプレイヤーが非表示になるようにします:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:446
msgid "Preparing for collisions"
msgstr "コリジョン(衝突/当り判定)の準備"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:448
msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"``Player`` には敵に攻撃されたことを検知してもらいたいのですが、まだ敵を作って"
"いません！Godotの\\ *シグナル*\\ 機能を使って動作させるので、大丈夫です。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:452
msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr "スクリプトの先頭で ``extends Area2d`` の後に、次の行を追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:466
msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"これは、プレイヤーが敵と衝突したときにプレイヤーが発信する(送り出す)\"hit\"と"
"呼ばれるカスタムシグナルを定義します。衝突を検出するために ``Area2D`` を使用"
"します。 ``Player`` ノードを選択し、インスペクタタブの横にある「ノード」タブ"
"をクリックすると、プレイヤーが発信するシグナルのリストが表示されます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:473
msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` "
"signal. This signal will be emitted when a body contacts the player. Click "
"\"Connect..\" and the \"Connect a Signal\" window appears. We don't need to "
"change any of these settings so click \"Connect\" again. Godot will "
"automatically create a function in your player's script."
msgstr ""
"カスタムの「hit」シグナルもありますね！　敵は ``RigidBody2D`` ノードになるた"
"め、 ``body_entered(body: Node)`` シグナルが必要です。これは、ボディがプレイ"
"ヤーに接触したときに発信されます。「接続」をクリックすると、「シグナルの接"
"続」ウィンドウが現れます。これらの設定を変更する必要はないので、再度「接続」"
"をクリックしてください。Godotはプレイヤーのスクリプトに自動的に関数を作成しま"
"す。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:482
msgid ""
"Note the green icon indicating that a signal is connected to this function. "
"Add this code to the function:"
msgstr ""
"信号がこの関数に接続されていることを示す緑色のアイコンに注意してください。次"
"のコードを関数に追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:502
msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"敵がプレイヤーに当たるたびに、シグナルが発せられます。プレイヤーの衝突を無効"
"にして、 ``hit`` シグナルを複数回トリガーしないようにする必要があります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:506
msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""
"エリアのコリジョン形状を無効にすると、それがエンジンの衝突処理の途中だったと"
"きにエラーが発生する可能性があります。 ``set_deferred()`` を使用すると、安全"
"にシェイプを無効にできるようになるまでGodotを待機させることができます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:510
msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr ""
"最後のピースとなるのは、新しいゲームの開始時にPlayerをリセットするため、呼び"
"出す関数を追加することです。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:531
msgid "Enemy scene"
msgstr "Enemyシーン"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:533
msgid ""
"Now it's time to make the enemies our player will have to dodge. Their "
"behavior will not be very complex: mobs will spawn randomly at the edges of "
"the screen, choose a random direction, and move in a straight line."
msgstr ""
"次はプレイヤーが避けるべき敵を作りましょう。敵の行動はあまり複雑ではありませ"
"ん。モブは画面の端でランダムに生まれると、ランダムな方向を選び、一直線に進み"
"ます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:537
msgid ""
"We'll create a ``Mob`` scene, which we can then *instance* to create any "
"number of independent mobs in the game."
msgstr ""
"これから ``Mob`` シーンを作り、それを\\ *インスタンス化*\\ して、ゲーム内に任"
"意の数の独立したモブを作成します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:540
msgid "See :ref:`doc_instancing` to learn more about instancing."
msgstr ""
"インスタンス化の詳細については、\\ :ref:`doc_instancing`\\ を参照してくださ"
"い。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:543
msgid "Node setup"
msgstr "ノードの設定"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:545
msgid "Click Scene -> New Scene and add the following nodes:"
msgstr "[シーン → 新規シーン] をクリックして、次のノードを追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:547
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ":ref:`RigidBody2D <class_RigidBody2D>`\\ ( ``Mob`` という名前)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:549
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr "\\ :ref:`AnimatedSprite <class_AnimatedSprite>`\\"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:550
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr "\\ :ref:`CollisionShape2D <class_CollisionShape2D>`\\"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:551
msgid ":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>`"
msgstr ":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:553
msgid ""
"Don't forget to set the children so they can't be selected, like you did "
"with the Player scene."
msgstr ""
"Playerシーンと同様に、選択できないように子を設定することを忘れないでくださ"
"い。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:556
msgid ""
"In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity "
"Scale`` to ``0``, so the mob will not fall downward. In addition, under the "
"``PhysicsBody2D`` section, click the ``Mask`` property and uncheck the first "
"box. This will ensure the mobs do not collide with each other."
msgstr ""
":ref:`RigidBody2D <class_RigidBody2D>`\\ プロパティで、 ``Gravity Scale`` を "
"``0`` に設定して、モブが下方に落ちないようにします。さらに、 "
"``PhysicsBody2D`` セクションの下にある ``Mask`` プロパティをクリックし、最初"
"のチェックボックスをオフにします。これにより、モブが互いに衝突しないようにな"
"ります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:563
msgid ""
"Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the "
"player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. "
"There are two images for each animation in the art folder."
msgstr ""
"プレイヤーに対して行ったように :ref:`AnimatedSprite <class_AnimatedSprite>` "
"を設定します。 今回は、3つのアニメーションがあります: ``fly``\\ 、\\ ``swim``"
"\\ 、\\ ``walk``\\ です。 artフォルダ内には、各アニメーション用の画像が2枚あ"
"ります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:567
msgid "Adjust the \"Speed (FPS)\" to ``3`` for all animations."
msgstr "全てのアニメーションの \"Speed (FPS)\" を ``3`` に調整してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:571
msgid "Set the ``Playing`` property in the Inspector to “On”."
msgstr "インスペクタの ``Playing`` プロパティを「On」に設定します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:573
msgid ""
"We'll select one of these animations randomly so that the mobs will have "
"some variety."
msgstr ""
"モブにバラエティを持たせるために、1つのアニメーションをランダムに選択します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:575
msgid ""
"Like the player images, these mob images need to be scaled down. Set the "
"``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""
"プレイヤーの画像と同様に、これらのモブ画像は縮小する必要があります。 "
"``AnimatedSprite`` の ``Scale`` プロパティを ``(0.75, 0.75)`` に設定します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:578
msgid ""
"As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To "
"align the shape with the image, you'll need to set the ``Rotation Degrees`` "
"property to ``90`` (under \"Transform\" in the Inspector)."
msgstr ""
"``Player`` シーンと同様に、コリジョンに ``CapsuleShape2D`` を追加します。図形"
"を画像に合わせるには、\\ ``Rotation Degrees`` プロパティを ``90`` に設定する"
"必要があります (インスペクタの「Transform」の下にあります)。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:582
msgid "Save the scene."
msgstr "シーンを保存します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:585
msgid "Enemy script"
msgstr "Enemyスクリプト"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:587
msgid "Add a script to the ``Mob`` and add the following member variables:"
msgstr "``Mob`` にスクリプトを追加し、次のメンバー変数を追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:611
msgid ""
"When we spawn a mob, we'll pick a random value between ``min_speed`` and "
"``max_speed`` for how fast each mob will move (it would be boring if they "
"were all moving at the same speed)."
msgstr ""
"モブを生み出す時、各モブの移動速度について ``min_speed`` と ``max_speed`` の"
"間のランダムな値を選択します (すべて同じ速度で移動していると退屈なので)。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:615
msgid ""
"Now let's look at the rest of the script. In ``_ready()`` we randomly choose "
"one of the three animation types:"
msgstr ""
"それでは、スクリプトの残りの部分を見てみましょう。 ``_ready()`` では、次の3つ"
"のアニメーションタイプのいずれかをランダムに選択します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:637
msgid ""
"First, we get the list of animation names from the AnimatedSprite's "
"``frames`` property. This returns an Array containing all three animation "
"names: ``[\"walk\", \"swim\", \"fly\"]``."
msgstr ""
"まず、アニメーション名のリストを AnimatedSprite の ``frames`` プロパティから"
"取得します。これは3つのアニメーション名をすべて含む配列を返します: ``[\"walk"
"\", \"swim\", \"fly\"]`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:641
msgid ""
"We then need to pick a random number between ``0`` and ``2`` to select one "
"of these names from the list (array indices start at ``0``). ``randi() % n`` "
"selects a random integer between ``0`` and ``n-1``."
msgstr ""
"次に、 ``0`` から ``2`` の間の乱数を選んで、リストから名前を選ぶ必要がありま"
"す（配列のインデックスは ``0`` から始まります）。 ``randi() % n`` は ``0`` か"
"ら ``n-1`` の間の乱数を選びます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:645
msgid ""
"You must use ``randomize()`` if you want your sequence of \"random\" numbers "
"to be different every time you run the scene. We're going to use "
"``randomize()`` in our ``Main`` scene, so we won't need it here."
msgstr ""
"シーンを実行するたびに「ランダム」な数字のシーケンスを異なるようにするには、 "
"``randomize()`` を使用する必要があります。 ``Main`` シーンで ``randomize()`` "
"を使用するので、ここでは必要はありません。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:649
msgid ""
"The last piece is to make the mobs delete themselves when they leave the "
"screen. Connect the ``screen_exited()`` signal of the "
"``VisibilityNotifier2D`` node and add this code:"
msgstr ""
"最後のピースは、モブが画面を離れたときにモブ自身を削除することです。 "
"``VisibilityNotifier2D`` ノードの ``screen_exited()`` シグナルを接続し、次の"
"コードを追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:666
msgid "This completes the `Mob` scene."
msgstr "これで `Mob` シーンが完成します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:669
msgid "Main scene"
msgstr "Mainシーン"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:671
msgid ""
"Now it's time to bring it all together. Create a new scene and add a :ref:"
"`Node <class_Node>` named ``Main``. Ensure you create a Node, **not** a "
"Node2D. Click the \"Instance\" button and select your saved ``Player.tscn``."
msgstr ""
"さあ、すべてをまとめましょう。 新しいシーンを作成し、 ``Main`` という名前の :"
"ref:`Node <class_Node>` を追加します。 Node2D **ではなく** 、Nodeを作成してい"
"ることを確認してください。「インスタンス」ボタンをクリックして、保存した "
"``Player.tscn`` を選択します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:678
msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr "次に ``Main`` の子供として以下のノードを追加します(値は秒単位です)。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:681
msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>`\\ ( ``MobTimer`` という名前) - モブが出現する頻度"
"を制御する"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:682
msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""
":ref:`Timer <class_Timer>` ( ``ScoreTimer`` という名前) - 一秒ごとに得点を上"
"げる"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:683
msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""
":ref:`Timer <class_Timer>` ( ``StartTimer`` という名前) - 開始する前に遅延さ"
"せる"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:684
msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
"\\ :ref:`Position2D <class_Position2D>` (``StartPosition`` という名前) - プレ"
"イヤーの開始位置を示す"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:686
msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "各 ``Timer`` ノードの ``Wait Time`` プロパティを次のように設定します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:689
msgid "``MobTimer``: ``0.5``"
msgstr "\\ ``MobTimer``: ``0.5``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:690
msgid "``ScoreTimer``: ``1``"
msgstr "\\ ``ScoreTimer``: ``1``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:691
msgid "``StartTimer``: ``2``"
msgstr "\\ ``StartTimer``: ``2``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:693
msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"さらに、 ``StartTimer`` の ``One Shot`` プロパティを「On」に設定し、 "
"``StartPosition`` ノードの ``Position`` を ``(240, 450)`` に設定します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:697
msgid "Spawning mobs"
msgstr "モブの生成"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:699
msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"メインノードは新しいモブを生成し、画面の端のランダムな場所に表示するようにし"
"ます。 ``Main`` の子として ``MobPath`` という名前の\\ :ref:`Path2D "
"<class_Path2D>`\\ ノードを追加します。 ``Path2D`` を選択すると、エディタの上"
"部にいくつかの新しいボタンが表示されます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:706
msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Use Grid Snap\" and \"Use Snap\" are both selected. These options can "
"be found to the left of the \"Lock\" button, appearing as a magnet next to "
"some dots and intersecting lines, respectively."
msgstr ""
"中央のアイコン([点を追加])を選択し、表示されているコーナーをクリックしてポイ"
"ントを追加してパスを描画します。ポイントをグリッドにスナップするには、[グリッ"
"ドスナップを使う]が選択されていることを確認します。このオプションは、[ロック]"
"ボタンの左側にあり、「交差する線と磁石」のアイコンで表示されています。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:714
msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""
"*時計回り*\\ にパスを描画します。そうしないと、モブは\\ *内側*\\ ではなく\\ *"
"外側*\\ を向いて発生します！"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:719
msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""
"画像にポイント ``4`` を配置した後、「カーブを閉じる」ボタンをクリックすると、"
"カーブが完成します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:722
msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"パスが定義されたので、 ``MobPath`` の子として\\ :ref:`PathFollow2D "
"<class_PathFollow2D>`\\ ノードを追加し、 ``MobSpawnLocation`` という名前を付"
"けます。このノードは自動的に回転し、パスの移動に従うので、パスに沿ってランダ"
"ムな位置と方向を選択できます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:727
msgid "Your scene should look like this:"
msgstr "シーンは次のようになります:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:732
msgid "Main script"
msgstr "Mainスクリプト"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:734
msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""
"スクリプトを ``Main`` に追加します。 スクリプトの上部で、\\ "
"``export(PackedScene)`` を使用して、インスタンス化するMobシーンを選択できるよ"
"うにします。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:774
msgid ""
"Click the ``Main`` node and you will see the ``Mob`` property in the "
"Inspector under \"Script Variables\"."
msgstr ""
"``Main`` ノードをクリックすると、インスペクタの「Script Variables(スクリプト"
"変数)」の下に ``Mob`` プロパティがあります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:777
msgid "You can assign this property's value in two ways:"
msgstr "このプロパティの値は、ふたつの方法で指定できます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:779
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" panel and drop it in the ``Mob`` "
"property ."
msgstr ""
"「ファイルシステム」パネルから ``Mob.tscn`` をドラッグし、 ``Mob`` プロパティ"
"にドロップします。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:781
msgid ""
"Click the down arrow next to \"[empty]\" and choose \"Load\". Select ``Mob."
"tscn``."
msgstr ""
"[空] の隣にある下矢印をクリックして「読み込み」を選び、\\ ``Mob.tscn`` を選択"
"します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:784
msgid ""
"Next, select the ``Player`` node in the Scene dock, and access the Node dock "
"on the sidebar. Make sure to have the Signals tab selected in the Node dock."
msgstr ""
"次に、シーンドックの ``Player`` ノードを選択し、サイドバーのノードドックにア"
"クセスします。ノードドックでは、シグナルタブが選択されていることを確認してく"
"ださい。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:787
msgid ""
"You should see a list of the signals for the ``Player`` node. Find and "
"double-click the ``hit`` signal in the list (or right-click it and select "
"\"Connect...\"). This will open the signal connection dialog. We want to "
"make a new function named ``game_over``, which will handle what needs to "
"happen when a game ends. Type \"game_over\" in the \"Receiver Method\" box "
"at the bottom of the signal connection dialog and click \"Connect\". Add the "
"following code to the new function, as well as a ``new_game`` function that "
"will set everything up for a new game:"
msgstr ""
"``Player`` ノードのシグナルのリストが表示されているはずです。リストの中から "
"``hit`` のシグナルを見つけてダブルクリックしてください (または右クリックして "
"\"接続...\" を選択)。これでシグナルの接続ダイアログが開きます。ゲームが終了し"
"たときに必要な処理を行う ``game_over`` という名前の新しい関数をこれから作りま"
"す。シグナル接続ダイアログの下部にある「受信側メソッド」ボックスに"
"「game_over」と入力し、「接続」をクリックしてください。新しい関数に以下のコー"
"ドを追加し、さらに、新しいゲームのための設定を行う ``new_game`` 関数も追加し"
"ます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:828
msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` , and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""
"次に、各Timerノード (``StartTimer``\\ 、\\ ``ScoreTimer``\\ 、\\ および "
"``MobTimer``) の ``timeout()`` シグナルをメインスクリプトに接続します。\\ "
"``StartTimer`` は他の2つのタイマーを開始します。\\ ``ScoreTimer`` はスコアを1"
"増やします。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:855
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position."
msgstr ""
"``_on_MobTimer_timeout()`` では、mobインスタンスを作成し、 ``Path2D`` に沿っ"
"て開始位置をランダムに選択してから、mobを動かします。 ``PathFollow2D`` ノード"
"はパスに沿って自動的に回転するので、それを使用してmobの方向と位置を決めます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:861
msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr ""
"注意点として、新しいインスタンスは ``add_child()`` を使ってシーンに追加しなけ"
"ればなりません。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:909
msgid ""
"Why ``PI``? In functions requiring angles, GDScript uses *radians*, not "
"degrees. If you're more comfortable working with degrees, you'll need to use "
"the ``deg2rad()`` and ``rad2deg()`` functions to convert between the two."
msgstr ""
"なぜ ``PI`` なのでしょう？　角度を必要とする関数では、GDScriptは度ではなく\\ "
"*ラジアン*\\ を使用します。度を使用する方が快適な場合は、 ``deg2rad()`` 関数"
"と ``rad2deg()`` 関数を使用して 2 つの間で変換する必要があります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:915
msgid "Testing the scene"
msgstr "シーンのテスト"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:917
msgid ""
"Let's test the scene to make sure everything is working. Add this to "
"``_ready()``:"
msgstr ""
"シーンをテストして、すべてが動作していることを確認してみましょう。これを "
"``_ready()`` に追加してください:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:934
msgid ""
"Let's also assign ``Main`` as our \"Main Scene\" - the one that runs "
"automatically when the game launches. Press the \"Play\" button and select "
"``Main.tscn`` when prompted."
msgstr ""
"また、 ``Main`` を「メインシーン」として設定してみましょう - ゲームが起動した"
"ときに自動的に実行されるシーンです。「実行」ボタンを押して、プロンプトが表示"
"されたら ``Main.tscn`` を選択してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:938
msgid ""
"You should be able to move the player around, see mobs spawning, and see the "
"player disappear when hit by a mob."
msgstr ""
"プレイヤーを移動でき、モブが発生したり、モブに当たった時にプレイヤーが消える"
"ようになっているはずです。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:941
msgid ""
"When you're sure everything is working, remove the call to ``new_game()`` "
"from ``_ready()``."
msgstr ""
"全て動作していることが確認できたら、 ``_ready()`` から ``new_game()`` の呼び"
"出しを削除してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:945
msgid "HUD"
msgstr "ヘッドアップディスプレイ(HUD)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:947
msgid ""
"The final piece our game needs is a UI: an interface to display things like "
"score, a \"game over\" message, and a restart button. Create a new scene, "
"and add a :ref:`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" "
"stands for \"heads-up display\", an informational display that appears as an "
"overlay on top of the game view."
msgstr ""
"ゲームに必要な最後の部分は、スコア、「ゲームオーバー」メッセージ、再起動ボタ"
"ンなどを表示するインターフェイスです。新しいシーンを作成し、 ``HUD`` という名"
"前の\\ :ref:`CanvasLayer <class_CanvasLayer>`\\ ノードを追加します。「HUD」"
"は、ゲームビューの上にオーバーレイとして表示される情報表示である「ヘッドアッ"
"プディスプレイ」の略です。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:953
msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""
":ref:`CanvasLayer <class_CanvasLayer>`\\ ノードを使用すると、ゲームの他の部分"
"よりも上のレイヤにUI要素を描画することができるため、表示される情報がプレイ"
"ヤーやモブなどのゲーム要素によって隠されることがなくなります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:957
msgid "The HUD needs to display the following information:"
msgstr "HUDには、次の情報を表示する必要があります:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:959
msgid "Score, changed by ``ScoreTimer``."
msgstr "``ScoreTimer`` によって変更されるスコア。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:960
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr "「Game Over」や「Get Ready! (よーい！)」 などのメッセージ"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:961
msgid "A \"Start\" button to begin the game."
msgstr "ゲームを開始する「スタート」ボタン。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:963
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""
"UI要素の基本ノードは\\ :ref:`コントロール <class_Control>`\\ です。UIを作成す"
"るには、\\ :ref:`ラベル <class_Label>`\\ と\\ :ref:`ボタン <class_Button>`\\ "
"の2種類の\\ :ref:`コントロール <class_Control>`\\ ノードを使用します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:967
msgid "Create the following as children of the ``HUD`` node:"
msgstr "``HUD`` ノードの子として次を作成します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:969
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr "``ScoreLabel`` という名前の\\ :ref:`ラベル <class_Label>`\\ 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:970
msgid ":ref:`Label <class_Label>` named ``Message``."
msgstr "``Message`` という名前の\\ :ref:`Label <class_Label>`\\ 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:971
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr "``StartButton`` という名前の\\ :ref:`ボタン <class_Button>`\\ 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:972
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr "``MessageTimer`` という名前の\\ :ref:`Timer <class_Timer>`\\ 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:974
msgid ""
"Click on the ``ScoreLabel`` and type a number into the ``Text`` field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following:"
msgstr ""
"``ScoreLabel`` をクリックし、インスペクタの\\ *Text*\\ フィールドに数字を入力"
"します。 ``Control`` ノードのデフォルトのフォントは小さく、うまくスケールしま"
"せん。そこで、ゲームアセットに含まれる 「Xolonium-Regular.ttf」というフォント"
"ファイルがあります。 このフォントを使用するには、次のようにしてください:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:979
msgid "Under \"Custom Fonts\", choose \"New DynamicFont\""
msgstr "「カスタムフォント」で 「新しい動的フォント」を選択します"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:983
msgid ""
"Click on the \"DynamicFont\" you added, and under \"Font/Font Data\", choose "
"\"Load\" and select the \"Xolonium-Regular.ttf\" file. You must also set the "
"font's ``Size``. A setting of ``64`` works well."
msgstr ""
"追加した \"DynamicFont\" をクリックし、\"Font/Font Data\" の下で [読み込み] "
"を選択し、\"Xolonium-Regular.ttf\" ファイルを選択します。 また、フォントの "
"``Size`` も設定する必要があります。 ``64`` の設定はうまく機能します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:989
msgid ""
"Once you've done this on the ``ScoreLabel``, you can click the down arrow "
"next to the DynamicFont property and choose \"Copy\", then \"Paste\" it in "
"the same place on the other two Control nodes."
msgstr ""
"これを ``ScoreLabel`` で行ったら、DynamicFont プロパティの横にある下向き矢印"
"をクリックして「コピー」を選択し、他の２つのコントロールノードの同じ場所に"
"「ペースト」してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:993
msgid ""
"**Anchors and Margins:** ``Control`` nodes have a position and size, but "
"they also have anchors and margins. Anchors define the origin - the "
"reference point for the edges of the node. Margins update automatically when "
"you move or resize a control node. They represent the distance from the "
"control node's edges to its anchor. See :ref:"
"`doc_design_interfaces_with_the_control_nodes` for more details."
msgstr ""
"**アンカーとマージン**\\ : ``Control`` ノードには、位置とサイズがありますが、"
"アンカーとマージンもあります。アンカーによって、原点 (節点のエッジの参照点) "
"が定義されます。余白は、コントロールノードを移動またはサイズ変更すると自動的"
"に更新されます。コントロールノードのエッジからアンカーまでの距離を表します。"
"詳細は\\ :ref:`doc_design_interfaces_with_the_control_nodes`\\ を参照してくだ"
"さい。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1000
msgid ""
"Arrange the nodes as shown below. Click the \"Layout\" button to set a "
"Control node's layout:"
msgstr ""
"以下に示すようにノードを配置します。「レイアウト」ボタンをクリックして、コン"
"トロールノードのレイアウトを設定します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1005
msgid ""
"You can drag the nodes to place them manually, or for more precise "
"placement, use the following settings:"
msgstr ""
"ノードをドラッグして手動で配置したり、より正確な配置を行うには、次の設定を使"
"用します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1009
msgid "ScoreLabel"
msgstr "ScoreLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1011
msgid "*Layout* : \"Top Wide\""
msgstr "\\ *Layout* : \"Top Wide\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1012
msgid "*Text* : ``0``"
msgstr "\\ *Text* : ``0``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1013
#: ../../docs/getting_started/step_by_step/your_first_game.rst:1020
msgid "*Align* : \"Center\""
msgstr "\\ *Align* : \"Center\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1016
msgid "Message"
msgstr "Message"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1018
msgid "*Layout* : \"HCenter Wide\""
msgstr "\\ *Layout* : \"HCenter Wide\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1019
msgid "*Text* : ``Dodge the Creeps!``"
msgstr "\\ *Text* : ``Dodge the Creeps!``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1021
msgid "*Autowrap* : \"On\""
msgstr "\\ *Autowrap* : \"On\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1024
msgid "StartButton"
msgstr "\\ StartButton"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1026
msgid "*Text* : ``Start``"
msgstr "\\ *Text* : ``Start``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1027
msgid "*Layout* : \"Center Bottom\""
msgstr "\\ *Layout* : \"Center Bottom\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1028
msgid "*Margin* :"
msgstr "\\ *Margin* :"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1030
msgid "Top: ``-200``"
msgstr "\\ Top: ``-200``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1031
msgid "Bottom: ``-100``"
msgstr "\\ Bottom: ``-100``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1033
msgid ""
"On the ``MessageTimer``, set the ``Wait Time`` to ``2`` and set the ``One "
"Shot`` property to \"On\"."
msgstr ""
"``MessageTimer`` 上で、\\ ``Wait Time`` を ``2`` に設定し、\\ ``One Shot`` プ"
"ロパティを「On」に設定してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1036
msgid "Now add this script to ``HUD``:"
msgstr "次に、このスクリプトを ``HUD`` に追加します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1055
msgid ""
"The ``start_game`` signal tells the ``Main`` node that the button has been "
"pressed."
msgstr ""
"``start_game`` シグナルは、ボタンが押されたことを ``Main`` ノードに通知しま"
"す。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1077
msgid ""
"This function is called when we want to display a message temporarily, such "
"as \"Get Ready\"."
msgstr ""
"この関数は、「Get Ready」などのメッセージを一時的に表示させたい場合に呼び出さ"
"れます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1111
msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""
"この関数は、プレイヤーが負けたときに呼び出されます。 2秒間「Game Over」と表示"
"され、タイトル画面に戻り、少し間を置いて「Start」ボタンが表示されます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1115
msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to add delays such as in the above code, where we want to wait some "
"time before showing the \"Start\" button."
msgstr ""
"短い間、一時停止する必要がある場合は、Timerノードを使用する代わりに、"
"SceneTreeの ``create_timer()`` 関数を使用します。 これは、上記のコードのよう"
"に、\"Start\" ボタンを表示する前に少し時間を置きたい場合など、遅延させるのに"
"非常に役立ちます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1133
msgid "This function is called by ``Main`` whenever the score changes."
msgstr "この関数はスコアが変わるたびに ``Main`` によって呼び出されます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1135
msgid ""
"Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` "
"signal of ``StartButton`` and add the following code to the new functions:"
msgstr ""
"``MessageTimer`` の ``timeout()`` シグナルと ``StartButton`` の "
"``pressed()`` シグナルを接続してから、下記のコードを新しい関数に加えます:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1163
msgid "Connecting HUD to Main"
msgstr "HUDをメインに接続する"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1165
msgid ""
"Now that we're done creating the ``HUD`` scene, go back to ``Main``. "
"Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` scene. "
"The scene tree should look like this, so make sure you didn't miss anything:"
msgstr ""
"``HUD`` シーンの作成が完了したら、 ``Main`` に戻ります。 ``Player`` のシーン"
"と同じように ``HUD`` シーンを ``Main`` にインスタンス化し、ツリーの一番下に配"
"置します。ツリー全体は次のようになるはずです。何も見落としていないか確認して"
"ください:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1171
msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""
"次に、 ``HUD`` 機能を ``Main`` のスクリプトに接続します。これには、 ``Main`` "
"シーンにいくつかの追加が必要です:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1174
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function of the Main node by typing \"new_game\" in the "
"\"Receiver Method\" in the \"Connect a Signal\" window. Verify that the "
"green connection icon now appears next to ``func new_game()`` in the script."
msgstr ""
"ノードタブで、「シグナルを接続」ウィンドウの 「受信側メソッド」に \"new_game"
"\" と入力して、HUDの ``start_game`` のシグナルをメインノードの "
"``new_game()`` 関数に接続します。スクリプトの ``func new_game()`` の横に緑色"
"の接続アイコンが表示されていることを確認してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1179
msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr ""
"``new_game()`` で、スコア表示を更新し、「Get Ready」メッセージを表示します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1194
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr "``game_over()`` では、対応する ``HUD`` 関数を呼び出す必要があります:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1205
msgid ""
"Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""
"最後に、これを ``_on_ScoreTimer_timeout()`` に追加して、変更されたスコアと同"
"期して表示を維持します:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1217
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``Main.tscn``."
msgstr ""
"これでプレイの準備が整いました！ [プロジェクトを実行] ボタンをクリックしま"
"す。メインシーンを選択するように求められますので、 ``Main.tscn`` を選択しま"
"す。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1221
msgid "Removing old creeps"
msgstr "古い「クリープ」を削除する"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1223
msgid ""
"If you play until \"Game Over\" and then start a new game right away, the "
"creeps from the previous game may still be on the screen. It would be better "
"if they all disappeared at the start of a new game. We just need a way to "
"tell *all* the mobs to remove themselves. We can do this with the \"group\" "
"feature."
msgstr ""
"「ゲームオーバー」までプレイしてから新しいゲームを開始すると、前のゲームの"
"「クリープ」が画面に表示されたままになっています。 それらすべて、新しいゲーム"
"の開始時には消したほうがいいでしょう。それには、\\ *すべて*\\ のモブたちに自"
"身の削除を指示する方法が必要です。これは「グループ」機能を使えば可能です。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1228
msgid ""
"In the ``Mob`` scene, select the root node and click the \"Node\" tab next "
"to the Inspector (the same place where you find the node's signals). Next to "
"\"Signals\", click \"Groups\" and you can type a new group name and click "
"\"Add\"."
msgstr ""
"``Mob`` シーンでルートノードを選択し、インスペクタの隣にある「ノード」タブを"
"クリックしてください（ノードのシグナルを見つけるのと同じ場所です）。「シグナ"
"ル」の横にある「グループ」をクリックして、新しいグループ名を入力して「追加」"
"をクリックします。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1234
msgid ""
"Now all mobs will be in the \"mobs\" group. We can then add the following "
"line to the ``game_over()`` function in ``Main``:"
msgstr ""
"これですべてのモブが 「mobs」グループに入るようになります。あとは、 ``Main`` "
"内の ``game_over()`` 関数に次の行を追加します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1247
msgid ""
"The ``call_group()`` function calls the named function on every node in a "
"group - in this case we are telling every mob to delete itself."
msgstr ""
"``call_group()`` 関数はグループ内の全てのノードに対して名前付きの関数を呼び出"
"します - この場合は全てのモブに自分自身を削除するように指示しています。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1251
msgid "Finishing up"
msgstr "仕上げ"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1253
msgid ""
"We have now completed all the functionality for our game. Below are some "
"remaining steps to add a bit more \"juice\" to improve the game experience. "
"Feel free to expand the gameplay with your own ideas."
msgstr ""
"これで、ゲームのすべての機能が完了しました。以下は、ゲーム体験を向上させるた"
"めにもう少し「精彩」を加えるための、いくつかの残りの手順です。あなた自身のア"
"イデアによって、ゲームプレイを自由に拡張してください。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1258
msgid "Background"
msgstr "Background(背景)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1260
msgid ""
"The default gray background is not very appealing, so let's change its "
"color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` "
"node. Make it the first node under ``Main`` so that it will be drawn behind "
"the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a "
"color you like and select \"Layout\" -> \"Full Rect\" so that it covers the "
"screen."
msgstr ""
"デフォルトのグレーの背景はあまり魅力的ではないので、色を変更してみましょう。"
"これを行う 1 つの方法は、\\ :ref:`ColorRect <class_ColorRect>` ノードを使用す"
"ることです。他のノードの後ろに描画されるように、それを ``Main`` の下の最初の"
"ノードにします。 ``ColorRect`` には、 ``Color`` というプロパティのみがありま"
"す。好きな色を選択し、「レイアウト」→「Rect全面」を選べば、画面はそれで覆われ"
"ます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1266
msgid ""
"You could also add a background image, if you have one, by using a "
"``TextureRect`` node instead."
msgstr ""
"背景画像がある場合は、代わりに ``TextureRect`` ノードを使用して、それを追加す"
"ることもできます。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1270
msgid "Sound effects"
msgstr "効果音"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1272
msgid ""
"Sound and music can be the single most effective way to add appeal to the "
"game experience. In your game assets folder, you have two sound files: "
"\"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" "
"for when the player loses."
msgstr ""
"サウンドと音楽は、ゲーム体験に魅力を与えるには最上級に効果的な方法となりえま"
"す。ゲームのアセットフォルダには、BGMの ``House In a Forest Loop.ogg`` と、プ"
"レイヤーが負けたとき用の ``gameover.wav`` という2つのサウンドファイルがありま"
"す。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1277
msgid ""
"Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children "
"of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On "
"each one, click on the ``Stream`` property, select \"Load\", and choose the "
"corresponding audio file."
msgstr ""
"2つの\\ :ref:`AudioStreamPlayer <class_AudioStreamPlayer>`\\ ノードを "
"``Main`` の子として追加します。その1つに ``Music`` 、もう1つに "
"``DeathSound`` と名前を付けます。各ファイルにて ``Stream`` プロパティをクリッ"
"クし、「読み込み」を選択してから、対応するオーディオファイルを選択します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1282
msgid ""
"To play the music, add ``$Music.play()`` in the ``new_game()`` function and "
"``$Music.stop()`` in the ``game_over()`` function."
msgstr ""
"音楽を再生するには、 ``new_game()`` 関数に ``$Music.play()`` を追加し、 "
"``game_over()`` 関数に ``$Music.stop()`` を追加します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1285
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr "最後に、 ``game_over()`` 関数に ``$DeathSound.play()`` を追加します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1288
msgid "Keyboard shortcut"
msgstr "キーボード ショートカット"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1290
msgid ""
"Since the game is played with keyboard controls, it would be convenient if "
"we could also start the game by pressing a key on the keyboard. We can do "
"this with the \"Shortcut\" property of the ``Button`` node."
msgstr ""
"このゲームはキーボード コントロールにてプレイするので、キーボードのキーを押し"
"てゲームを開始できると便利です。それには ``Button`` ノードの「Shortcut」プロ"
"パティを使用すれば可能です。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1294
msgid ""
"In the ``HUD`` scene, select the ``StartButton`` and find its *Shortcut* "
"property in the Inspector. Select \"New Shortcut\" and click on the "
"\"Shortcut\" item. A second *Shortcut* property will appear. Select \"New "
"InputEventAction\" and click the new \"InputEventAction\". Finally, in the "
"*Action* property, type the name ``ui_select``. This is the default input "
"event associated with the spacebar."
msgstr ""
"``HUD`` シーンで ``StartButton`` を選択し、インスペクタでその *Shortcut* プロ"
"パティを見つけます。「新規 Shortcut」を選択し、その「Shortcut」項目をクリック"
"します。 2番目の *Shortcut* プロパティが表示されます。「新規 "
"InputEventAction」を選択し、新しい「InputEvent」をクリックします。 最後に、 "
"*Action* プロパティに ``ui_select`` という名前を入力します。これは、スペース"
"バーに関連付けられたデフォルトの入力イベントです。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1302
msgid ""
"Now when the start button appears, you can either click it or press :kbd:"
"`Space` to start the game."
msgstr ""
"スタートボタンが表示されたら、クリックするか、\\ :kbd:`Space` を押してゲーム"
"を開始します。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1306
msgid "Project files"
msgstr "プロジェクトファイル"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1311
msgid "You can find a completed version of this project at these locations:"
msgstr "このプロジェクトの完成バージョンは、次の場所にあります。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1309
msgid "https://github.com/kidscancode/Godot3_dodge/releases"
msgstr "\\ https://github.com/kidscancode/Godot3_dodge/releases"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1310
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr "\\ https://github.com/godotengine/godot-demo-projects"
