# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-17 12:25+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:4
msgid "Your first game"
msgstr "最初のゲーム"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:7
msgid "Overview"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:9
msgid ""
"This tutorial will guide you through making your first Godot project. You "
"will learn how the Godot editor works, how to structure a project, and how "
"to build a 2D game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:13
msgid ""
"This project is an introduction to the Godot engine. It assumes that you "
"have some programming experience already. If you're new to programming "
"entirely, you should start here: :ref:`doc_scripting`."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:18
msgid ""
"The game is called \"Dodge the Creeps!\". Your character must move and avoid "
"the enemies for as long as possible. Here is a preview of the final result:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:24
msgid ""
"**Why 2D?** 3D games are much more complex than 2D ones. You should stick to "
"2D until you have a good understanding of the game development process."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:28
msgid "Project setup"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:30
msgid ""
"Launch Godot and create a new project. Then, download :download:"
"`dodge_assets.zip <files/dodge_assets.zip>` - the images and sounds you'll "
"be using to make the game. Unzip these files to your project folder."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:34
msgid ""
"For this tutorial, we will assume you are familiar with the editor. If you "
"haven't read :ref:`doc_scenes_and_nodes`, do so now for an explanation of "
"setting up a project and using the editor."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:38
msgid ""
"This game will use portrait mode, so we need to adjust the size of the game "
"window. Click on Project -> Project Settings -> Display -> Window and set "
"\"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:43
msgid "Organizing the project"
msgstr "プロジェクトの編成"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:45
msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene. In a larger "
"project, it might be useful to make folders to hold the various scenes and "
"their scripts, but for this relatively small game, you can save your scenes "
"and scripts in the project's root folder, referred to as ``res://``.  You "
"can see your project folders in the FileSystem Dock in the lower left corner:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:56
msgid "Player scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:58
msgid ""
"The first scene we will make defines the ``Player`` object. One of the "
"benefits of creating a separate Player scene is that we can test it "
"separately, even before we've created other parts of the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:63
msgid "Node structure"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:65
msgid ""
"To begin, click the \"Add/Create a New Node\" button and add an :ref:`Area2D "
"<class_Area2D>` node to the scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:70
msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change its name to ``Player`` by clicking on the node's name. This is the "
"scene's root node. We can add additional nodes to the player to add "
"functionality."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:75
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:82
msgid ""
"Save the scene. Click Scene -> Save, or press ``Ctrl+S`` on Windows/Linux or "
"``Command+S`` on Mac."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:84
msgid "For this project, we will be following the Godot naming conventions."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:86
msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:90
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`).  Be careful to type the method names precisely "
"when connecting signals."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:97
#, fuzzy
msgid "Sprite animation"
msgstr "アニメーション"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:99
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Next, in the same location, click "
"``<SpriteFrames>``, then click \"Open Editor\" to open the \"SpriteFrames\" "
"panel:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:111
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"right\". Then click the \"Add\" button to create a second animation "
"named \"up\". Drag the two images for each animation, named "
"``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, into the \"Animation "
"Frames\" side of the panel:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:118
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:125
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\".  Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:134
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:139
msgid "Moving the player"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:141
msgid ""
"Now we need to add some functionality that we can't get from a built-in "
"node, so we'll add a script. Click the ``Player`` node and click the \"Add "
"Script\" button:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:147
msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:150
msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:155
msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:158
msgid "Start by declaring the member variables this object will need:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:179
msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:186
msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:194
msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:210
msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:215
msgid "Check for input."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:216
msgid "Move in the given direction."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:217
msgid "Play the appropriate animation."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:219
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this demo, "
"we will use the default events that are assigned to the arrow keys on the "
"keyboard."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:226
msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it is pressed or ``false`` if it isn't."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:288
msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* than if it just moved horizontally."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:295
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, and multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:299
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:303
msgid ""
"We also check whether the player is moving so we can start or stop the "
"AnimatedSprite animation."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:306
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:309
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, ``"
"$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:312
msgid ""
"Now that we have a movement direction, we can update the player's position "
"and use ``clamp()`` to prevent it from leaving the screen by adding the "
"following to the bottom of the ``_process`` function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:332
msgid "*Clamping* a value means restricting it to a given range."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:334
msgid ""
"Click \"Play Scene\" (``F6``) and confirm you can move the player around the "
"screen in all directions. The console output that opens upon playing the "
"scene can be closed by clicking ``Output`` (which should be highlighted in "
"blue) in the lower left of the Bottom Panel."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:339
msgid ""
"If you get an error in the \"Debugger\" panel that refers to a \"null "
"instance\", this likely means you spelled the node name wrong. Node names "
"are case-sensitive and ``$NodeName`` or ``get_node(\"NodeName\")`` must "
"match the name you see in the scene tree."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:344
#, fuzzy
msgid "Choosing animations"
msgstr "アニメーション"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:346
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on direction. We have a \"right\" animation, "
"which should be flipped horizontally using the ``flip_h`` property for left "
"movement, and an \"up\" animation, which should be flipped vertically with "
"``flip_v`` for downward movement. Let's place this code at the end of our "
"``_process()`` function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:380
msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Consider this code versus the shortened boolean assignment "
"above:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:399
msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions. When you're sure the movement is working correctly, add this "
"line to ``_ready()``, so the player will be hidden when the game starts:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:414
msgid "Preparing for collisions"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:416
msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:420
msgid "Add the following at the top of the script, after ``extends Area2d``:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:434
msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:441
msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered( Object "
"body )`` signal; this will be emitted when a body contacts the player. Click "
"\"Connect..\" and then \"Connect\" again on the \"Connecting Signal\" "
"window. We don't need to change any of these settings - Godot will "
"automatically create a function in your player's script. This function will "
"be called whenever the signal is emitted - it *handles* the signal."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:450
msgid ""
"When connecting a signal, instead of having Godot create a function for you, "
"you can also give the name of an existing function that you want to link the "
"signal to."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:454
msgid "Add this code to the function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:473
msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:477
msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` allows "
"us to have Godot wait to disable the shape until it's safe to do so."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:482
msgid ""
"The last piece for our player is to add a function we can call to reset the "
"player when starting a new game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:503
msgid "Enemy scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:505
msgid ""
"Now it's time to make the enemies our player will have to dodge. Their "
"behavior will not be very complex: mobs will spawn randomly at the edges of "
"the screen and move in a random direction in a straight line, then despawn "
"when they go offscreen."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:510
msgid ""
"We will build this into a ``Mob`` scene, which we can then *instance* to "
"create any number of independent mobs in the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:514
#, fuzzy
msgid "Node setup"
msgstr "リソースのパス"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:516
msgid "Click Scene -> New Scene and we'll create the Mob."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:518
msgid "The Mob scene will use the following nodes:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:520
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:522
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:523
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:524
msgid ""
":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>` (named "
"``Visibility``)"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:526
msgid ""
"Don't forget to set the children so they can't be selected, like you did "
"with the Player scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:529
msgid ""
"In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity "
"Scale`` to ``0``, so the mob will not fall downward. In addition, under the "
"``PhysicsBody2D`` section, click the ``Mask`` property and uncheck the first "
"box. This will ensure the mobs do not collide with each other."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:536
msgid ""
"Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the "
"player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. "
"Set the ``Playing`` property in the Inspector to \"On\" and adjust the "
"\"Speed (FPS)\" setting as shown below. We'll select one of these animations "
"randomly so that the mobs will have some variety."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:543
msgid ""
"``fly`` should be set to 3 FPS, with ``swim`` and ``walk`` set to 4 FPS."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:545
msgid ""
"Like the player images, these mob images need to be scaled down. Set the "
"``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:548
msgid ""
"As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To "
"align the shape with the image, you'll need to set the ``Rotation Degrees`` "
"property to ``90`` under ``Node2D``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:553
msgid "Enemy script"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:555
msgid "Add a script to the ``Mob`` and add the following member variables:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:581
msgid ""
"When we spawn a mob, we'll pick a random value between ``min_speed`` and "
"``max_speed`` for how fast each mob will move (it would be boring if they "
"were all moving at the same speed). We also have an array containing the "
"names of the three animations, which we'll use to select a random one. Make "
"sure you've spelled these the same in the script and in the SpriteFrames "
"resource."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:587
msgid ""
"Now let's look at the rest of the script. In ``_ready()`` we randomly choose "
"one of the three animation types:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:606
msgid ""
"You must use ``randomize()`` if you want your sequence of \"random\" numbers "
"to be different every time you run the scene. We're going to use "
"``randomize()`` in our ``Main`` scene, so we won't need it here. ``randi() % "
"n`` is the standard way to get a random integer between ``0`` and ``n-1``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:612
msgid ""
"The last piece is to make the mobs delete themselves when they leave the "
"screen. Connect the ``screen_exited()`` signal of the ``Visibility`` node "
"and add this code:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:629
msgid "This completes the `Mob` scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:632
msgid "Main scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:634
msgid ""
"Now it's time to bring it all together. Create a new scene and add a :ref:"
"`Node <class_Node>` named ``Main``. Click the \"Instance\" button and select "
"your saved ``Player.tscn``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:640
msgid "See :ref:`doc_instancing` to learn more about instancing."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:642
msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:645
msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:646
msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:647
msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:648
msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:650
msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:653
msgid "``MobTimer``: ``0.5``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:654
msgid "``ScoreTimer``: ``1``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:655
msgid "``StartTimer``: ``2``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:657
msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:661
msgid "Spawning mobs"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:663
msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:670
msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Snap to Grid\" is checked. This option can be found under the "
"\"Snapping options\" button to the left of the \"Lock\" button, appearing as "
"a series of three vertical dots."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:678
msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:681
msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:684
msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:690
msgid "Main script"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:692
msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:732
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" panel and drop it in the ``Mob`` "
"property under the Script Variables of the ``Main`` node."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:735
msgid ""
"Next, click on the Player and connect the ``hit`` signal. We want to make a "
"new function named ``game_over``, which will handle what needs to happen "
"when a game ends. Type \"game_over\" in the \"Method In Node\" box at the "
"bottom of the \"Connecting Signal\" window. Add the following code, as well "
"as a ``new_game`` function to set everything up for a new game:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:772
msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` ,and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:799
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:805
msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:808
msgid ""
"Now click on ``MobTimer`` in the scene window then head to inspector window, "
"switch to node view then click on ``timeout()`` and connect the signal."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:811
msgid "Add the following code:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:859
msgid ""
"In functions requiring angles, GDScript uses *radians*, not degrees. If "
"you're more comfortable working with degrees, you'll need to use the "
"``deg2rad()`` and ``rad2deg()`` functions to convert between the two."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:865
msgid "HUD"
msgstr "ヘッドアップディスプレイ(HUD)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:867
msgid ""
"The final piece our game needs is a UI: an interface to display things like "
"score, a \"game over\" message, and a restart button. Create a new scene, "
"and add a :ref:`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" "
"stands for \"heads-up display\", an informational display that appears as an "
"overlay on top of the game view."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:873
msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:877
msgid "The HUD displays the following information:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:879
msgid "Score, changed by ``ScoreTimer``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:880
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:881
msgid "A \"Start\" button to begin the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:883
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:887
msgid "Create the following as children of the ``HUD`` node:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:889
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:890
msgid ":ref:`Label <class_Label>` named ``MessageLabel``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:891
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:892
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:894
msgid ""
"Click on the ``ScoreLabel`` and type a number into the _Text_ field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following for each of the three "
"``Control`` nodes:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:900
msgid "Under \"Custom Fonts\", choose \"New DynamicFont\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:904
msgid ""
"Click on the \"DynamicFont\" you added, and under \"Font/Font Data\", choose "
"\"Load\" and select the \"Xolonium-Regular.ttf\" file. You must also set the "
"font's ``Size``. A setting of ``64`` works well."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:910
msgid ""
"**Anchors and Margins:** ``Control`` nodes have a position and size, but "
"they also have anchors and margins. Anchors define the origin - the "
"reference point for the edges of the node. Margins update automatically when "
"you move or resize a control node. They represent the distance from the "
"control node's edges to its anchor. See :ref:"
"`doc_design_interfaces_with_the_control_nodes` for more details."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:917
msgid ""
"Arrange the nodes as shown below. Click the \"Anchor\" button to set a "
"Control node's anchor:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:922
msgid ""
"You can drag the nodes to place them manually, or for more precise "
"placement, use the following settings:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:926
msgid "ScoreLabel"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:928
msgid "*Text* : ``0``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:929
msgid "*Layout* : \"Top Wide\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:930
#: ../../docs/getting_started/step_by_step/your_first_game.rst:937
msgid "*Align* : \"Center\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:933
msgid "MessageLabel"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:935
msgid "*Text* : ``Dodge the Creeps!``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:936
msgid "*Layout* : \"HCenter Wide\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:940
msgid "StartButton"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:942
msgid "*Text* : ``Start``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:943
msgid "*Layout* : \"Center Bottom\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:944
msgid "*Margin* :"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:946
msgid "Top: ``-200``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:947
msgid "Bottom: ``-100``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:949
msgid "Now add this script to ``HUD``:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:968
msgid ""
"The ``start_game`` signal tells the ``Main`` node that the button has been "
"pressed."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:990
msgid ""
"This function is called when we want to display a message temporarily, such "
"as \"Get Ready\". On the ``MessageTimer``, set the ``Wait Time`` to ``2`` "
"and set the ``One Shot`` property to \"On\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1021
msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1025
msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to delay, such as in the above code, where we want to wait a little "
"bit of time before showing the \"Start\" button."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1043
msgid "This function is called by ``Main`` whenever the score changes."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1045
msgid ""
"Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` "
"signal of ``StartButton``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1072
msgid "Connecting HUD to Main"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1074
msgid ""
"Now that we're done creating the ``HUD`` scene, save it and go back to "
"``Main``. Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` "
"scene, and place it at the bottom of the tree. The full tree should look "
"like this, so make sure you didn't miss anything:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1081
msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1084
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1087
msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1102
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1113
msgid ""
"Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1125
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``Main.tscn``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1129
msgid "Removing old creeps"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1131
msgid ""
"If you play until \"Game Over\" and then start a new game the creeps from "
"the previous game are still on screen. It would be better if they all "
"disappeared at the start of a new game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1135
msgid ""
"We'll use the ``start_game`` signal that's already being emitted by the "
"``HUD`` node to remove the remaining creeps. We can't use the editor to "
"connect the signal to the mobs in the way we need because there are no "
"``Mob`` nodes in the ``Main`` scene tree until we run the game. Instead "
"we'll use code."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1140
msgid ""
"Start by adding a new function to ``Mob.gd``. ``queue_free()`` will delete "
"the current node at the end of the current frame."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1156
msgid ""
"Then in ``Main.gd`` add a new line inside the ``_on_MobTimer_timeout()`` "
"function, at the end."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1168
msgid ""
"This line tells the new Mob node (referenced by the ``mob`` variable) to "
"respond to any ``start_game`` signal emitted by the ``HUD`` node by running "
"its ``_on_start_game()`` function."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1173
msgid "Finishing up"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1175
msgid ""
"We have now completed all the functionality for our game. Below are some "
"remaining steps to add a bit more \"juice\" to improve the game experience. "
"Feel free to expand the gameplay with your own ideas."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1180
msgid "Background"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1182
msgid ""
"The default gray background is not very appealing, so let's change its "
"color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` "
"node. Make it the first node under ``Main`` so that it will be drawn behind "
"the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a "
"color you like and drag the size of the ``ColorRect`` so that it covers the "
"screen."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1189
msgid ""
"You could also add a background image, if you have one, by using a "
"``Sprite`` node."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1193
msgid "Sound effects"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1195
msgid ""
"Sound and music can be the single most effective way to add appeal to the "
"game experience. In your game assets folder, you have two sound files: "
"\"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" "
"for when the player loses."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1200
msgid ""
"Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children "
"of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On "
"each one, click on the ``Stream`` property, select \"Load\", and choose the "
"corresponding audio file."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1205
msgid ""
"To play the music, add ``$Music.play()`` in the ``new_game()`` function and "
"``$Music.stop()`` in the ``game_over()`` function."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1208
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1211
msgid "Keyboard Shortcut"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1213
msgid ""
"Since the game is played with keyboard controls, it would be convenient if "
"we could also start the game by pressing a key on the keyboard. One way to "
"do this is using the \"Shortcut\" property of the ``Button`` node."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1217
msgid ""
"In the ``HUD`` scene, select the ``StartButton`` and find its _Shortcut_ "
"property in the Inspector. Select \"New Shortcut\" and click on the "
"\"Shortcut\" item. A second _Shortcut_ property will appear. Select \"New "
"InputEventAction\" and click the new \"InputEvent\". Finally, in the "
"_Action_ property, type the name \"ui_select\". This is the default input "
"event associated with the spacebar."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1225
msgid ""
"Now when the start button appears, you can either click it or press the "
"spacebar to start the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1229
#, fuzzy
msgid "Project files"
msgstr "プロファイラー"

#: ../../docs/<generated>:1
msgid "You can find a completed version of this project at these locations:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1232
msgid "https://github.com/kidscancode/Godot3_dodge/releases"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1233
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr ""
