# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-08 21:18+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: sv\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:4
msgid "Part 5"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:7
msgid "Part Overview"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:9
msgid ""
"In this part we're going to add grenades to our player, give our player the "
"ability to grab and throw objects, and add turrets!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:13
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_four` before "
"moving on to this part of the tutorial."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:15
msgid ""
"The finished project from :ref:`doc_fps_tutorial_part_four` will be the "
"starting project for part 5"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:17
msgid "Let's get started!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:20
msgid "Adding grenades"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:22
msgid ""
"First, let's give our player some grenades to play with. Open up ``Grenade."
"tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:24
msgid ""
"There's a few things to note here, the first and foremost being that our "
"grenades are going to use :ref:`RigidBody <class_RigidBody>` nodes. We're "
"going to use :ref:`RigidBody <class_RigidBody>` nodes for our grenades so "
"they bounce around the world in a somewhat realistic manner."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:27
msgid ""
"The second thing to note is ``Blast_Area``. This is a :ref:`Area "
"<class_Area>` node that will represent the blast radius of our grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:29
msgid ""
"Finally, the last thing to note is ``Explosion``. This is the :ref:"
"`Particles <class_Particles>` node that will emit an explosion effect when "
"the grenades explodes. One thing to note here is that we have ``One shot`` "
"enabled. This is so we emit all of our particles at once. We're also "
"emitting in world coordinates instead of local coordinates, so we have "
"``Local Coords`` unchecked as well."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:33
msgid ""
"If you want you can see how the particles are set up by looking through it's "
"``Process Material`` and ``Draw Passes``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:35
msgid ""
"Let's write the code needed for our grenade. Select ``Grenade`` and make a "
"new script called ``Grenade.gd``. Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:91
msgid "Let's go over what's happening, starting with the global variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:93
msgid ""
"``GRENADE_DAMAGE``: The amount of damage the grenade causes when it explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:94
msgid ""
"``GRENADE_TIME``: The amount of time the grenade takes (in seconds) to "
"explode once it's created/thrown."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:95
msgid ""
"``grenade_timer``: A variable for tracking how long the grenade has been "
"created/thrown."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:96
msgid ""
"``EXPLOSION_WAIT_TIME``: The amount of time needed (in seconds) to wait "
"before we destroy the grenade scene after the explosion"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:97
msgid ""
"``explosion_wait_timer``: A variable for tracking how much time has passed "
"since the grenade exploded."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:98
msgid ""
"``rigid_shape``: The :ref:`CollisionShape <class_CollisionShape>` for the "
"grenade's :ref:`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:99
msgid ""
"``grenade_mesh``: The :ref:`MeshInstance <class_MeshInstance>` for the "
"grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:100
msgid ""
"``blast_area``: The blast :ref:`Area <class_Area>` used to damage things "
"when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:101
msgid ""
"``explosion_particles``: The :ref:`Particles <class_Particles>` that play "
"when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:103
msgid ""
"Notice how ``EXPLOSION_WAIT_TIME`` is a rather strange number (``0.48``). "
"This is because we want ``EXPLOSION_WAIT_TIME`` to be the length of time the "
"particles are emitting, so when the particles are done we destroy/free the "
"grenade. We calculate ``EXPLOSION_WAIT_TIME`` by taking the particle's life "
"time and dividing it by the particle's speed scale. This gets us the exact "
"time the explosion particles will last."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:109
msgid "Now let's turn our attention to ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:111
msgid ""
"First we get all of the nodes we'll need and assign them to the proper "
"global variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:113
msgid ""
"We need to get the :ref:`CollisionShape <class_CollisionShape>` and :ref:"
"`MeshInstance <class_MeshInstance>` because similarly to the target in :ref:"
"`doc_fps_tutorial_part_four`, we will be hiding the grenade's mesh and "
"disabling the collision shape when the grenade explodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:116
msgid ""
"The reason we need to get the blast :ref:`Area <class_Area>` is so we can "
"damage everything inside it when it explodes. We'll be using code similar to "
"the knife weapon in our player. We need the :ref:`Particles "
"<class_Particles>` so we can emit them when we explode."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:119
msgid ""
"After we get all of the nodes and assign them to their global variables, we "
"then make sure the explosion particles are not emitting, and that they are "
"set to emit in one shot."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:124
msgid "Now let's look at ``_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:126
msgid ""
"First we check to see if the ``grenade_timer`` is less than "
"``GRENADE_TIMER``. If it is, we add ``delta`` and return. This is so we have "
"to wait ``GRENADE_TIME`` seconds, allowing our :ref:`RigidBody "
"<class_RigidBody>` to move around."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:129
msgid ""
"If ``grenade_timer`` is at ``GRENADE_TIMER`` or higher, we then need to "
"check if we waited long enough and need to explode. We do this by checking "
"to see if ``explosion_wait_timer`` is equal to ``0`` or less. Since we will "
"be adding ``delta`` to ``explosion_wait_timer`` right after, whatever code "
"under the check will only be called once, right when we've waited long "
"enough and need to explode."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:133
msgid ""
"If we've waited long enough to explode, we first tell the "
"``explosion_particles`` to emit. Then we make ``grenade_mesh`` invisible, "
"and disable ``rigid_shape``, effectively hiding our grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:136
msgid ""
"We then set the :ref:`RigidBody <class_RigidBody>`'s mode to ``MODE_STATIC`` "
"so the grenade does not move."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:138
msgid ""
"Then we get all of the bodies in ``blast_area``, check to see if they have "
"the ``bullet_hit`` method/function, and if they do we call it and pass in "
"``GRENADE_DAMAGE`` and the grenade's position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:141
msgid ""
"We then check to see if ``explosion_wait_timer`` is less than "
"``EXPLOSION_WAIT_TIME``. If it is, we add ``delta`` to "
"``explosion_wait_time``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:143
msgid ""
"Next we check to see if ``explosion_wait_timer`` is more than or equal to "
"``EXPLOSTION_WAIT_TIME``. Because we added ``delta``, this will only be "
"called once. If ``explosion_wait_timer`` is more or equal to "
"``EXPLOSION_WAIT_TIME``, we've waited long enough to let the :ref:`Particles "
"<class_Particles>` play and can free/destroy ourselves."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:148
msgid ""
"Let's quickly get the sticky grenade set up too. Open up ``Sticky_Grenade."
"tscn``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:150
msgid ""
"``Sticky_Grenade.tscn`` is almost identical to ``Grenade.tscn``, with one "
"small addition. We now have a second :ref:`Area <class_Area>`, called "
"``Sticky_Area``. We'll be using ``Stick_Area`` to detect when we've collided "
"with the environment and need to stick to something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:154
msgid ""
"Select ``Sticky_Grenade`` and make a new script called ``Sticky_Grenade."
"gd``. Add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:244
msgid ""
"The code above is almost identical to the code for ``Grenade.gd``, so let's "
"go over what's changed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:246
msgid "First, we have a few more global variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:248
msgid ""
"``attached``: A variable for tracking whether or not we've attached to a :"
"ref:`PhysicsBody <class_PhysicsBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:249
msgid ""
"``attach_point``: A variable to hold a :ref:`Spatial <class_Spatial>` that "
"will be at the position we collided at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:250
msgid ""
"``player_body``: The player's :ref:`KinematicBody <class_KinematicBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:252
msgid ""
"These additions are so we can stick to any :ref:`PhysicsBody "
"<class_PhysicsBody>` we happen to hit. We also now need the player's :ref:"
"`KinematicBody <class_KinematicBody>` so we don't stick to the player that "
"threw this grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:257
msgid ""
"Now let's look at the small change in ``_ready``. In ``_ready`` we've added "
"a line of code so when any body enters ``Stick_Area``, the "
"``collided_with_body`` function is called."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:262
msgid "Next let's take a look at ``collided_with_body``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:264
msgid ""
"First we make sure we're not colliding with ourself. Because our :ref:`Area "
"<class_Area>` does not know it's attached to the grenade's :ref:`RigidBody "
"<class_RigidBody>`, we need to make sure we're not going to stick to "
"ourself. If we have collided with ourself, we ignore it by returning."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:267
msgid ""
"We then check to see if we have something assigned to ``player_body``, and "
"if the body we collided with is the player that threw this grenade. If the "
"body we've collided with is indeed ``player_body``, we ignore it by "
"returning."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:270
msgid "Next we check if we are attached already or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:272
msgid ""
"If we are not attached, we then set ``attached`` to true so we know we've "
"attached to something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:274
msgid ""
"We then make a new :ref:`Spatial <class_Spatial>` node, and make it a child "
"of the body we collided with. We then set the :ref:`Spatial "
"<class_Spatial>`'s position to our current position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:277
msgid ""
"Because we've added the :ref:`Spatial <class_Spatial>` as a child of the "
"body we've collided with, it will follow along with said body. We can then "
"use this :ref:`Spatial <class_Spatial>` to set our position, so we're always "
"at the same position relative to the body we collided with."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:280
msgid ""
"We then disable ``rigid_shape`` so we're not constantly moving whatever body "
"we've collided with. Finally, we set our mode to ``MODE_STATIC`` so the "
"grenade does not move."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:284
msgid "Finally, lets go over the few changes in ``_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:286
msgid ""
"Now we're checking to see if we are attached right at the top of "
"``_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:288
msgid ""
"If we are attached, we then make sure the attached point is not equal to "
"``null``. If the attached point is not equal to ``null``, we set our global "
"position (using our global :ref:`Transform <class_Transform>`'s origin) to "
"the global position of the :ref:`Spatial <class_Spatial>` assigned to "
"``attach_point`` (using its global :ref:`Transform <class_Transform>`'s "
"origin)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:292
msgid ""
"The only other change is now before we free/destroy the grenade, we check to "
"see if we have an attached point. If we do, we also call ``queue_free`` on "
"it, so it's also freed/destroyed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:296
msgid "Adding grenades to the player"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:298
msgid ""
"Now we need to add some code to ``Player.gd`` so we can use our grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:300
msgid ""
"First, open up ``Player.tscn`` and expand the node tree until you get to "
"``Rotation_Helper``. Notice how in ``Rotation_Helper`` we have a node called "
"``Grenade_Toss_Pos``. This is where we will be spawning the grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:303
msgid ""
"Also notice how it's slightly rotated on the ``X`` axis, so it's not "
"pointing straight, but rather slightly up. By changing the rotation of "
"``Grenade_Toss_Pos``, you can change the angle the grenades are tossed at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:306
msgid ""
"Okay, now lets start making the grenades work with our player. Add the "
"following global variables to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:316
msgid ""
"``grenade_amounts``: The amount of grenades we are currently carrying for "
"each type of grenade."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:317
msgid ""
"``current_grenade``: The name of the grenade type we're currently using."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:318
msgid "``grenade_scene``: The grenade scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:319
msgid ""
"``sticky_grenade_scene``: The sticky grenade scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:320
msgid "``GRENADE_THROW_FORCE``: The force at which we throw the grenade at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:322
msgid "Most of these variables are similar to how we have out weapons set up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:324
msgid ""
"While it's possible to make a more modular grenade system, I found it was "
"not worth the additional complexity for just two grenades. If you were going "
"to make a more complex FPS with more grenades, you'd likely want to make a "
"system for grenades similar to how we have the weapons set up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:329
msgid ""
"Now we need to add some code in ``_process_input`` Add the following to "
"``_process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:359
msgid "Let's go over what's happening here."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:361
msgid ""
"First, we check to see if the ``change_grenade`` action has just been "
"pressed. If it has, we then check to see which grenade we are currently "
"using. Based on the name of the grenade we're currently using, we change "
"``current_grenade`` to the opposite grenade name."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:364
msgid ""
"Next we check to see if the ``fire_grenade`` action has just been pressed. "
"If it has, we then check to see if we have more than ``0`` grenades for the "
"current grenade we have selected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:367
msgid ""
"If we have more than ``0`` grenades, we then remove one from the grenade "
"amounts for the current grenade. Then, based on the grenade we're currently "
"using we instance the proper grenade scene and assign it to "
"``grenade_clone``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:370
msgid ""
"Next we add ``grenade_clone`` as a child of the node at the root, and set "
"its global :ref:`Transform <class_Transform>` to ``Grenade_Toss_Pos``'s "
"global :ref:`Transform <class_Transform>`. Finally, we apply an impulse to "
"the grenade so that it is launched forward, relative to the ``Z`` "
"directional vector of ``grenade_clone``'s."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:376
msgid ""
"Now we can use both types of grenades, but there's a few things we should "
"probably add before we move on to adding the other things."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:378
msgid ""
"We still need a way to see how many grenades we have left, and we should "
"probably have a way to get more grenades when we pick up ammo."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:380
msgid ""
"First, let's change some of the code in ``Player.gd`` so we can see how many "
"grenades we have left. Change ``process_UI`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:396
msgid "Now we'll show how many grenades we have left in our UI."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:398
msgid ""
"While we're still in ``Player.gd``, let's add a function to add grenades. "
"Add the following function to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:406
msgid ""
"Now we can add a grenade using ``add_grenade``, and it will automatically be "
"clamped to a maximum of ``4`` grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:408
msgid ""
"You can change the ``4`` to a constant if you want. You'd need to make a new "
"global constant, something like ``MAX_GRENADES``, and then change the clamp "
"from ``clamp(grenade_amounts[current_grenade], 0, 4)`` to "
"``clamp(grenade_amounts[current_grenade], 0, MAX_GRENADES)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:411
msgid ""
"If you do not want to limit how many grenades you can carry, remove the line "
"that clamps the grenades altogether!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:413
msgid ""
"Now we have a function to add grenades, let's open up ``AmmoPickup.gd`` and "
"use it!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:415
msgid ""
"Open up ``AmmoPickup.gd`` and go to the ``trigger_body_entered`` function. "
"Change it to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:430
msgid ""
"Now we're also checking to see if the body has the ``add_grenade`` function. "
"If it does, we call it like we call ``add_ammo``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:432
msgid ""
"You may have noticed we're using a new constant we haven't defined yet, "
"``GRENADE_AMOUNTS``. Let's add it! Add the following global variable to "
"``AmmoPickup.gd`` with the other global variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:439
msgid ""
"``GRENADE_AMOUNTS``: The amount of grenades each pick up in each size "
"contains."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:441
msgid ""
"Notice how the second element in ``GRENADE_AMOUNTS`` is ``0``. This is so "
"the small ammo pick up does not give our player any additional grenades."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:446
msgid "Now you should be able to throw grenades now! Go give it a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:450
msgid "Adding the ability to grab and throw RigidBody nodes to the player"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:452
msgid ""
"Next let's give our player the ability to pick up and throw :ref:`RigidBody "
"<class_RigidBody>` nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:454
msgid "Open up ``Player.gd`` and add the following global variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:463
msgid ""
"``grabbed_object``: A variable to hold the grabbed :ref:`RigidBody "
"<class_RigidBody>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:464
msgid "``OBJECT_THROW_FORCE``: The force we throw the grabbed object at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:465
msgid ""
"``OBJECT_GRAB_DISTANCE``: The distance away from the camera we hold the "
"grabbed object at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:466
msgid ""
"``OBJECT_GRAB_RAY_DISTANCE``: The distance the :ref:`Raycast "
"<class_Raycast>` goes. This is our grab distance."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:468
msgid ""
"With that done, all we need to do is add some code to ``process_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:506
msgid "Let's go over what's happening."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:508
msgid ""
"First we check to see if the action pressed is the ``fire`` action, and that "
"we are using the ``UNARMED`` weapon. This is because we only want to be able "
"to pick up and throw objects when we're not using any weapons. This is a "
"design choice, but I feel it gives ``UNARMED`` a use."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:512
msgid "Next we check to see whether or not ``grabbed_object`` is ``null``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:516
msgid ""
"If ``grabbed_object`` is ``null``, we want to see if we can pick up a :ref:"
"`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:518
msgid ""
"We first get the direct space state from the current :ref:`World "
"<class_World>`. This is so we can cast a ray entirely from code, instead of "
"having to use a :ref:`Raycast <class_Raycast>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:521
msgid ""
"see :ref:`Ray-casting <doc_ray-casting>` for more information on raycasting "
"in Godot."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:523
msgid ""
"Then we get the center of the screen by dividing the current :ref:`Viewport "
"<class_Viewport>` size in half. We then get the ray's origin point and end "
"point using ``project_ray_origin`` and ``project_ray_normal`` from the "
"camera. If you want to know more about how these functions work, see :ref:"
"`Ray-casting <doc_ray-casting>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:526
msgid ""
"Next we send our ray into the space state and see if we get a result. We add "
"ourselves and the knife's :ref:`Area <class_Area>` as two exceptions so we "
"cannot carry ourselves or the knife's collision area."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:529
msgid ""
"Then we check to see if we got a result back. If we have, we then see if the "
"collider the ray collided with is a :ref:`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:531
msgid ""
"If the ray collided with a :ref:`RigidBody <class_RigidBody>`, we set "
"``grabbed_object`` to the collider the ray collided with. We then set the "
"mode on the :ref:`RigidBody <class_RigidBody>` we collided with to "
"``MODE_STATIC`` so it's not moved."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:534
msgid ""
"Finally, we set its collision layer and collision mask to ``0``. This will "
"make it have no collision layer or mask, which will means it will not be "
"able to collide with anything."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:538
msgid ""
"If ``grabbed_object`` is not ``null``, then we need to throw the :ref:"
"`RigidBody <class_RigidBody>` we're holding."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:540
msgid ""
"We first set the :ref:`RigidBody <class_RigidBody>` we holding mode to "
"``MODE_RIGID``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:542
msgid ""
"This is making a rather large assumption that the all rigid bodies will be "
"using ``MODE_RIGID``. While that is the case for this tutorial series, that "
"may not be the case in other projects."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:545
msgid ""
"If you have :ref:`RigidBody <class_RigidBody>`'s with different modes, you "
"may need to store the mode of the :ref:`RigidBody <class_RigidBody>` you "
"have picked up into a global variable so you can change it back to the mode "
"it was in before you picked it up."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:548
msgid ""
"Then we apply an impulse to send it flying forward. We send it flying in the "
"direction the camera is facing, at ``OBJECT_THROW_FORCE`` force."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:550
msgid ""
"We then set the grabbed :ref:`RigidBody <class_RigidBody>`'s collision layer "
"and mask to ``1``, so it can collide with anything on layer ``1`` again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:552
msgid ""
"This is, once again, making a rather large assumption that all rigid bodies "
"will be only on collision layer ``1``, and all collision masks will be on "
"layer ``1``. If you are using this script in other projects, you may need to "
"store the collision layer/mask of the :ref:`RigidBody <class_RigidBody>` "
"before you change them to ``0``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:555
msgid ""
"Finally, we set ``grabbed_object`` to ``null`` since we have successfully "
"thrown the held object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:559
msgid ""
"The last thing we do is check to see whether or not ``grabbed_object`` is "
"equal to ``null``, outside of the grabbing/throwing code."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:561
msgid ""
"While technically not input related, it's easy enough to place the code "
"moving the grabbed object here because it's only two lines, and then all of "
"the grabbing/throwing code is in one place"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:564
msgid ""
"If we are holding an object, we set its global position to the camera's "
"position plus ``OBJECT_GRAB_DISTANCE`` in the direction the camera is facing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:568
msgid ""
"Before we test this, we need to change something in ``_physics_process``. "
"While we're holding an object, we don't want to be able to change weapons or "
"reload, so change ``_physics_process`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:585
msgid "Now we cannot change weapons or reload while holding an object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:587
msgid ""
"Now you can grab and throw RigidBody nodes while in a ``UNARMED`` state! Go "
"give it a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:590
msgid "Adding a turret"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:592
msgid "Next, let's make a turret to shoot our player!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:594
msgid ""
"Open up ``Turret.tscn``. Expand ``Turret`` if it's not already expanded."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:596
msgid ""
"Notice how our turret is broken up into several parts. We have a ``Base``, "
"``Head``, ``Vision_Area``, and a ``Smoke`` :ref:`Particles "
"<class_Particles>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:598
msgid ""
"Open up ``Base`` and you'll find it's a :ref:`StaticBody <class_StaticBody>` "
"and a mesh. Open up ``Head`` and you'll find there's several meshes, a :ref:"
"`StaticBody <class_StaticBody>` and a :ref:`Raycast <class_Raycast>` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:601
msgid ""
"One thing to note with the ``Head`` is that the raycast will be where our "
"bullets will fire from if we are using raycasting. We also have two meshes "
"called ``Flash`` and ``Flash_2``. These will be the muzzle flash that "
"briefly shows when the turret fires."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:604
msgid ""
"``Vision_Area`` is a :ref:`Area <class_Area>` we'll use as the turret's "
"ability to see. When something enters ``Vision_Area``, we'll assume the "
"turret can see it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:606
msgid ""
"``Smoke`` is a :ref:`Particles <class_Particles>` node that will play when "
"the turret is destroyed and repairing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:610
msgid ""
"Now that we've looked at how the scene is set up, lets start writting the "
"code for the turret. Select ``Turret`` and create a new script called "
"``Turret.gd``. Add the following to ``Turret.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:776
msgid ""
"This is quite a bit of code, so let's break it down function by function. "
"Let's first look at the global variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:778
msgid ""
"``use_raycast``: A exported boolean so we can change whether the turret uses "
"objects or raycasting for bullets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:779
msgid ""
"``TURRET_DAMAGE_BULLET``: The amount of damage a single bullet scene does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:780
msgid ""
"``TURRET_DAMAGE_RAYCAST``: The amount of damage a single :ref:`Raycast "
"<class_Raycast>` bullet does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:781
msgid ""
"``FLASH_TIME``: The amount of time (in seconds) the muzzle flash meshes are "
"visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:782
msgid ""
"``flash_timer``: A variable for tracking how long the muzzle flash meshes "
"have been visible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:783
msgid "``FIRE_TIME``: The amount of time (in seconds) needed to fire a bullet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:784
msgid ""
"``fire_timer``: A variable for tracking how much time has passed since the "
"turret last fired."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:785
msgid "``node_turret_head``: A variable to hold the ``Head`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:786
msgid ""
"``node_raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` node "
"attached to the turret's head."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:787
msgid ""
"``node_flash_one``: A variable to hold the first muzzle flash :ref:"
"`MeshInstance <class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:788
msgid ""
"``node_flash_two``: A variable to hold the second muzzle flash :ref:"
"`MeshInstance <class_MeshInstance>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:789
msgid "``ammo_in_turret``: The amount of ammo currently in the turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:790
msgid "``AMMO_IN_FULL_TURRET``: The amount of ammo in a full turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:791
msgid "``AMMO_RELOAD_TIME``: The amount of time it takes the turret to reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:792
msgid ""
"``ammo_reload_timer``: A variable for tracking how long the turret has been "
"reloading."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:793
msgid "``current_target``: The turret's current target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:794
msgid ""
"``is_active``: A variable for tracking whether the turret is able to fire at "
"the target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:795
msgid ""
"``PLAYER_HEIGHT``: The amount of height we're adding to the target so we're "
"not shooting at its feet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:796
msgid "``smoke_particles``: A variable to hold the smoke particles node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:797
msgid "``turret_health``: The amount of health the turret currently has."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:798
msgid "``MAX_TURRET_HEALTH``: The amount of health a fully healed turret has."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:799
msgid ""
"``DESTROYED_TIME``: The amount of time (in seconds) it takes for a destroyed "
"turret to repair itself."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:800
msgid ""
"``destroyed_timer``: A variable for tracking the amount of time a turret has "
"been destroyed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:801
msgid ""
"``bullet_scene``: The bullet scene the turret fires (same scene as the "
"player's pistol)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:803
msgid "Phew, that's quite a few global variables!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:807
msgid "Let's go through ``_ready`` next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:809
msgid ""
"First we get the vision area and connect the ``body_entered`` and "
"``body_exited`` signals to ``body_entered_vision`` and "
"``body_exited_vision`` respectively."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:811
msgid ""
"We then get all of the nodes and assign them to their respective variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:813
msgid ""
"Next add some exceptions to the :ref:`Raycast <class_Raycast>` so the turret "
"cannot hurt itself."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:815
msgid ""
"Then we make both flash meshes invisible to start, since we're not going to "
"be firing during ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:817
msgid ""
"We then get the smoke particles node and assign it to the "
"``smoke_particles`` node. We also set ``emitting`` to ``false`` to assure "
"it's not emitting until the turret is broken."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:820
msgid ""
"Finally, we set the turret's health to ``MAX_TURRET_HEALTH`` so it starts at "
"full health."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:824
msgid "Now let's go through ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:826
msgid ""
"First we check to see if the turret is active. If the turret is active we "
"want to process the firing code."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:828
msgid ""
"Next we check to see if ``flash_timer`` is more than zero, meaning the flash "
"meshes are visible, we want to remove delta from ``flash_timer``. If "
"``flash_timer`` gets to zero or less after we've subtracted ``delta``, we "
"want to hide both of the flash meshes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:832
msgid ""
"Next we check to see if we have a target or not. If we have a target, we "
"make the turret head look at it, adding ``PLAYER_HEIGHT`` so we're not "
"aiming at the player's feet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:835
msgid ""
"We then check to see if the turret's health is more than zero. If it is, we "
"then check to see if there is ammo in the turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:837
msgid ""
"If there is ammo in the turret, we then check to see if ``fire_timer`` is "
"more than zero. If ``fire_timer`` is more than zero, we cannot fire and need "
"to remove ``delta`` from ``fire_timer``. If ``fire_timer`` is equal to or "
"less than zero, we want to fire a bullet, so we call the ``fire_bullet`` "
"function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:840
msgid ""
"If there is not any ammo in the turret, we check to see if "
"``ammo_reload_timer`` is more than zero. If ``ammo_reload_timer`` is more "
"than zero, we subtract ``delta`` from ``ammo_reload_timer``. If "
"``ammo_reload_timer`` is equal to or less than zero, we set "
"``ammo_in_turret`` to ``AMMO_IN_FULL_TURRET`` because we've waited long "
"enough to refill the turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:844
msgid ""
"Next we check to see if the turret's health is less than or equal to ``0``, "
"outside of whether we're active or not. If the turret's health is zero or "
"less, we then check to see if ``destroyed_timer`` is more than zero. If "
"destroyed timer is more than zero, we subtract ``delta`` from "
"``destroyed_timer``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:847
msgid ""
"If ``destyored_timer`` is less than or equal to zero, we set "
"``turret_health`` to ``MAX_TURRET_HEALTH`` and stop emitting smoke particles "
"by setting ``smoke_particles.emitting`` to ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:852
msgid "Next let's go through ``fire_bullet``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:854
msgid "First we check to see whether we're using a raycast or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:856
msgid ""
"The code for the using a raycast is almost entirely the same as the code in "
"the rifle from :ref:`doc_fps_tutorial_part_two`, so I'm only going to go "
"over it briefly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:859
msgid ""
"We first make the raycast look at the target, assuring we'll hit the target. "
"We then force the raycast to update so we get a frame perfect collision "
"check. We then check if the raycast collided with anything. If the raycast "
"has collided with something, we then check to see if the collided body has "
"the ``bullet_hit`` function. If it does, we call it and pass in the damage a "
"single raycast bullet does. We then remove ``1`` from ``ammo_in_turret``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:864
msgid ""
"If we are not using a raycast, we spawn a bullet object instead. This code "
"is almost entirely the same as the code in the pistol from :ref:"
"`doc_fps_tutorial_part_two`, so like with the raycast code, I'm only going "
"to go over it briefly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:867
msgid ""
"We first make a bullet clone and assign it to ``clone``. We then add that as "
"a child of the root node. We set it's global transform to the barrel end, "
"scale it up since it's too small, and set it's damage and speed using the "
"turret's constant global variables. We then remove ``1`` from "
"``ammo_in_turret``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:871
msgid ""
"Then, regardless of which bullet method we used, we make both of the muzzle "
"flash meshes visible. We set ``flash_timer`` and ``fire_timer`` to to "
"``FLASH_TIME`` and ``FIRE_TIME`` respectively. We then check to see if we "
"used the last bullet in the turret. If we have used the last bullet, we set "
"``ammo_reload_timer`` to ``AMMO_RELOAD_TIME``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:877
msgid ""
"Let's look at ``body_entered_vision`` next, and thankfully it's rather short."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:879
msgid ""
"We first check to see if we currently have a target by checking to see if "
"``current_target`` is equal to ``null``. If we do not have a target, we then "
"check to see if the body that just entered the vision :ref:`Area "
"<class_Area>` is a :ref:`KinematicBody <class_KinematicBody>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:882
msgid ""
"..note:: We're assuming the turret only should fire at :ref:`KinematicBody "
"<class_KinematicBody>` nodes, since that's what our player(s) are using."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:884
msgid ""
"If the body that just the vision :ref:`Area <class_Area>` is a :ref:"
"`KinematicBody <class_KinematicBody>`, we set ``current_target`` to the "
"body, and set ``is_active`` to ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:889
msgid "Now let's look at ``body_exited_vision``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:891
msgid ""
"First we check to see if we have a target. If we have a target, we then "
"check to see if the body that has just left our vision area is our target."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:894
msgid ""
"If the body that just left the area is the current target, we set "
"``current_target`` to ``null``, set ``is_active`` to ``false``, and reset "
"all of the variables related to firing the turret, since we no longer have a "
"target to fire at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:899
msgid "Finally, let's look at ``bullet_hit``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:901
msgid ""
"We first remove however much damage we have received from the turret's "
"health."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:903
msgid ""
"Then we check to see if we've been destroyed. If we have, we start the smoke "
"particles emitting and set ``destroyed_timer`` to ``DESTROYED_TIME`` so we "
"have to wait to repair the turret."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:908
msgid ""
"Phew, with all of that done and coded we only have one last thing to do "
"before our turrets are ready for use. Open up ``Turret.tscn`` if it's not "
"already open and select one of the :ref:`StaticBody <class_StaticBody>` "
"nodes from either ``Body`` or ``Head``. Create a new script called "
"``TurretBodies.gd`` and attach it to whichever :ref:`StaticBody "
"<class_StaticBody>` you have selected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:912
msgid "Add the following code to ``TurretBodies.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:927
msgid ""
"All this code does is call ``bullet_hit`` on whatever node "
"``path_to_turret_root`` leads to. Go back to the editor and assign the :ref:"
"`NodePath <class_NodePath>` to the ``Turret`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:930
msgid ""
"Now select the other :ref:`StaticBody <class_StaticBody>` node (either in "
"``Body`` or ``Head``) and assign ``TurretBodies.gd`` to it. Once the script "
"is attached, assign the :ref:`NodePath <class_NodePath>` to the ``Turret`` "
"node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:935
msgid ""
"The last thing we need to do is add a way for the player to be hurt. Since "
"all of our bullets use the ``bullet_hit`` function, we need to add that to "
"our player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:937
msgid "Open ``Player.gd`` and add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:944
msgid ""
"With all that done, you should have fully operational turrets! Go place a "
"few in one/both/all of the scenes and give them a try!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:947
msgid "Final notes"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:951
msgid ""
"Now you the player can pick up :ref:`RigidBody <class_RigidBody>` nodes and "
"throw grenades. We now also have turrets to fire at our player."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:953
msgid ""
"In :ref:`doc_fps_tutorial_part_six`, we're going to add a main menu and "
"pause menu, add a respawn system for the player, and change/move the sound "
"system so we can use it from any script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:956
msgid "If you ever get lost, be sure to read over the code again!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:958
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_5.zip <files/Godot_FPS_Part_5.zip>`"
msgstr ""
