# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 13:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:1
msgid "Signal"
msgstr "Segnale"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Signals"
msgstr "Segnali"

#: ../../docs/getting_started/step_by_step/signals.rst:10
msgid "Introduction"
msgstr "Introduzione"

#: ../../docs/getting_started/step_by_step/signals.rst:12
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"I segnali sono la versione di Godot degli *observer* pattern. Consentono ad "
"un nodo di inviare un messaggio che un altro nodo può ascoltare e "
"rispondere. Per esempio, piuttosto che controllare in continuazione un "
"bottone per verificare se è premuto, il bottone può emettere un segnale "
"quando è premuto."

#: ../../docs/getting_started/step_by_step/signals.rst:17
msgid ""
"You can read more about the observer pattern here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Puoi leggere di più relativamente agli observer pattern qui: http://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:19
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"I segnali sono un modo per disaccoppiare i tuoi oggetti di gioco, il che "
"comporta un codice meglio organizzato e più gestibile. Al posto di forzare "
"gli oggetti di gioco ad aspettarsi che altri oggetti siano sempre presenti, "
"possono invece emettere segnali che tutti gli oggetti interessati possono "
"ascoltare e rispondere."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"Sotto puoi vedere alcuni esempi di come puoi usare i segnali nei tuoi "
"progetti."

#: ../../docs/getting_started/step_by_step/signals.rst:27
msgid "Timer example"
msgstr "Esempio di Timer"

#: ../../docs/getting_started/step_by_step/signals.rst:29
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"Per vedere come funzionano i segnali, proviamo ad usare un nodo :ref:`Timer "
"<class_Timer>`. Creiamo una nuova scena con un Node2D e due figli: un Timer "
"e un nodo :ref:`Sprite <class_Sprite>`. Nel pannello della scena, rinomina "
"Node2D con TimerExample."

#: ../../docs/getting_started/step_by_step/signals.rst:33
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Per la texture dello Sprite, puoi usare l'icona di Godot, o qualsiasi altra "
"immagine ti piaccia. Puoi farlo selezionando ``Load`` tra gli attibuti nel "
"menu a tendina della Texture del nodo Sprite. Attacca uno script al nodo "
"radice, ma non aggiungere nessun codice per ora."

#: ../../docs/getting_started/step_by_step/signals.rst:37
msgid "Your scene tree should look like this:"
msgstr "Il tuo albero di scena dovrebbe essere simile a questo:"

#: ../../docs/getting_started/step_by_step/signals.rst:41
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"Nelle proprietà del nodo Timer, spunta la casella \"On\" vicino a "
"*Autostart*. Questo farà in modo che il timer parta automaticamente quando "
"viene avviata la scena. Puoi lasciare *Wait Time* impostato ad un secondo."

#: ../../docs/getting_started/step_by_step/signals.rst:45
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"Vicino alla tab \"Inspector\" ne è presente una chiamata \"Node\". Clicca "
"questa tab e vedrai tutti i segnali che il nodo selezionato può emettere. "
"Nel caso del nodo Timer, quello che c'interessa è \"timeout\". Questo "
"segnale viene emesso ogni volta il Timer raggiunge ``0``."

#: ../../docs/getting_started/step_by_step/signals.rst:52
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"Clicca sul segnale \"timeout()\" e poi clicca \"Connect...\" situato nella "
"parte inferiore del pannello dei segnali. Vedrai la seguente finestra, dove "
"puoi definire come connettere il segnale:"

#: ../../docs/getting_started/step_by_step/signals.rst:58
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"Nella parte sinistra, vedrai i nodi presenti nella scena e potrai "
"selezionare quale vuoi che \"ascolti\" per il segnale. Nota che il nodo "
"Timer è evidenziato in blu, proprio per indicare quale nodo sta attualmente "
"emettendo il segnale. Seleziona il nodo base."

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"Il nodo target *deve* avere uno script attaccato altrimenti riceverai un "
"messaggio di errore."

#: ../../docs/getting_started/step_by_step/signals.rst:66
msgid ""
"If you toggle the Advanced menu, you'll see on the right side that you can "
"bind an arbitrary number of arguments of (possibly) different types. This "
"can be useful when you have more than one signal connected to the same "
"method, as each signal propagation will result in different values for those "
"extra call arguments."
msgstr ""
"Se attivi il menu Avanzato, vedrai sul lato destro che puoi associare un "
"numero arbitrario di argomenti di (possibilmente) tipi diversi. Questo può "
"essere utile quando hai più di un segnale collegato allo stesso metodo, "
"poiché ogni propagazione del segnale comporterà valori diversi per quegli "
"argomenti di chiamata extra."

#: ../../docs/getting_started/step_by_step/signals.rst:70
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"Nella parte bassa della finestra c'è un campo di testo \"Metodo Ricevitore"
"\". Questo è il nome della funzione che vuoi usare nello script del nodo "
"target. Di default, Godot creerà questa funzione usando le convenzioni "
"``_on_<node_name>_<signal_name>`` ma puoi cambiarlo se vuoi."

#: ../../docs/getting_started/step_by_step/signals.rst:75
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"Clicca \"Connetti\" e vedrai che la funzione è stata creata nello script:"

#: ../../docs/getting_started/step_by_step/signals.rst:96
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"Ora possiamo sostituire il codice segnaposto con qualsiasi codice vogliamo "
"eseguire quando il segnale viene ricevuto. Facciamo \"lampeggiare\" lo "
"sprite:"

#: ../../docs/getting_started/step_by_step/signals.rst:121
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"Esegui la scena e vedrai lo Sprite che lampeggia ogni secondo. Puoi cambiare "
"il *Tempo di Attesa* del Timer nelle proprietà per alterare questa "
"funzionalità."

#: ../../docs/getting_started/step_by_step/signals.rst:125
msgid "Connecting signals in code"
msgstr "Collegamento di segnali nel codice"

#: ../../docs/getting_started/step_by_step/signals.rst:127
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"Puoi anche connettere i segnali da codice invece che dall'editor. Questo è "
"di solito necessario quando stai instanziando nodi da codice e quindi non "
"puoi usare l'editor per fare la connessione."

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"Per prima cosa, sconnetti il segnale selezionando la connessione nella tab "
"\"Node\" del nodo timer e fai click su sconnetti."

#: ../../docs/getting_started/step_by_step/signals.rst:136
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"Per creare la connessione da codice, possiamo utilizzare la funzione "
"``connect``. La inseriremo in ``_ready()`` cosi che la connessione venga "
"creata durante l'esecuzione. La sintassi della funzione è ``<source_node>."
"connect(<signal_name>, <target_node>, <target_function_name>)``. Qui c'è il "
"codice per la connessione del nostro Timer:"

#: ../../docs/getting_started/step_by_step/signals.rst:171
msgid "Custom signals"
msgstr "Segnali personalizzati"

#: ../../docs/getting_started/step_by_step/signals.rst:173
msgid "You can also declare your own custom signals in Godot:"
msgstr "Puoi anche dichiarare i tuoi segnali personalizzati in Godot:"

#: ../../docs/getting_started/step_by_step/signals.rst:192
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"Una volta dichiarati, i tuoi segnali personalizzati appariranno "
"nell'Ispettore e potranno essere connessi nello stesso modo di un segnale "
"pre-costruito."

#: ../../docs/getting_started/step_by_step/signals.rst:195
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr "Per emettere un segnale da codice, usa la funzione ``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:222
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""
"Un segnale può anche opzionalmente dichiarare uno o più argomenti. Specifica "
"i nomi degli argomenti tra parentesi:"

#: ../../docs/getting_started/step_by_step/signals.rst:243
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"I segnali sono argomenti che vengono visualizzati nel riquadro del nodo "
"dell'editor e Godot può utilizzarli per generare funzioni di callback. "
"Tuttavia, è ancora possibile emettere un numero qualsiasi di argomenti "
"quando si emettono segnali, quindi spetta a te fornire i valori corretti."

#: ../../docs/getting_started/step_by_step/signals.rst:248
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr ""
"Per passare dei valori aggiungili come secondo argomento alla funzione "
"``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:276
msgid "Conclusion"
msgstr "Conclusione"

#: ../../docs/getting_started/step_by_step/signals.rst:278
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Tanti dei Nodi di Godot forniscono segnali che puoi usare per rilevare "
"eventi. Per esempio, un :ref:`Area2D <class_Area2D>` che rappresenta una "
"moneta emette un segnale ``body_entered`` quando il corpo del giocatore "
"entra nella sua collision shape, facendoti capire quando il giocatore l'ha "
"raccolta."

#: ../../docs/getting_started/step_by_step/signals.rst:283
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"Nella prossima sezione, :ref:`doc_your_first_game`, creerai un gioco "
"completo includendo l'uso di segnali per connettere differenti componenti di "
"gioco."
