# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:4
msgid "Signals"
msgstr "Sinais"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Introduction"
msgstr "Introdução"

#: ../../docs/getting_started/step_by_step/signals.rst:9
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"Sinais são a versão do Godot do padrão *observador*. Eles permitem que um nó "
"envie uma mensagem que outros nós podem captar e responder. Por exemplo, ao "
"invés de continuamente verificar um botão para saber se ele está sendo "
"pressionado, o botão pode emitir um sinal quando for pressionado."

#: ../../docs/getting_started/step_by_step/signals.rst:14
msgid ""
"You can read more about the observer pattern here: http://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Você pode ler mais sobre o padrão observador aqui:\n"
"http://gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:16
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"Sinais são um meio de *desacoplar* seus objetos de jogo, o que leva a um "
"código mais organizado e gerenciável. Ao invés de forçar objetos de jogo a "
"esperar que outros objetos estejam sempre presentes, eles podem emitir "
"sinais para os quais qualquer objeto interessado pode inscrever-se e "
"responder."

#: ../../docs/getting_started/step_by_step/signals.rst:21
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"Abaixo, você pode ver alguns exemplos de como você pode usar sinais em seus "
"próprios projetos."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid "Timer example"
msgstr "Alguns exemplos"

#: ../../docs/getting_started/step_by_step/signals.rst:26
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"Para ver como sinais funcionam, vamos tentar usar um nó :ref:`Timer "
"<class_Timer>`. Crie uma nova cena com um Node2D e dois filhos: um Timer e "
"um :ref:`Sprite <class_Sprite>`. No painel de cenas, renomeie o Node2D para "
"TimerExample."

#: ../../docs/getting_started/step_by_step/signals.rst:30
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Para a textura do Sprite, você pode usar o ícone Godot, ou qualquer outra "
"imagem que desejar.  Que é feito selecionando ``Load`` no menu suspenso do "
"atributo Textura do Sprite. Anexe um script ao nó raiz, mas não adicione "
"nenhum código ainda."

#: ../../docs/getting_started/step_by_step/signals.rst:34
msgid "Your scene tree should look like this:"
msgstr "Sua árvore da cena deveria se parecer assim:"

#: ../../docs/getting_started/step_by_step/signals.rst:38
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"Nas propriedades do nó Timer, marque a caixa \"On\" próximo a *Autostart*. "
"Isso fará com que o Timer inicie automaticamente quando você executar a "
"cena. Você pode deixar o *Wait Time* em 1 segundo."

#: ../../docs/getting_started/step_by_step/signals.rst:42
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"Próximo à aba \"Inspector\" há uma aba chamada \"Nó\". Clique nessa aba e "
"você verá todos os sinais que o nó selecionado pode emitir. No caso do nó "
"Timer, o que nos importa é o \"timeout\". Este sinal é emitido sempre que o "
"Timer chegar à ``0``."

#: ../../docs/getting_started/step_by_step/signals.rst:49
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"Clique no sinal \"timeout()\" e clique em \"Conectar...\". Você vai ver a "
"seguinte janela, onde você pode definir como você quer conectar o sinal:"

#: ../../docs/getting_started/step_by_step/signals.rst:55
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"Do lado esquerdo, você verá os nós na sua cena e pode selecionar o nó que "
"você quer que \"escute\" para o sinal. Note que o nó Timer está azul, isto é "
"uma indicação visual de que é esse o nó o qual está emitindo o sinal. "
"Selecione o nó raiz."

#: ../../docs/getting_started/step_by_step/signals.rst:60
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"O nó alvo *precisa* ter um script anexado ou você vai receber uma mensagem "
"de erro."

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"On the right side, you can bind an arbitrary number of arguments of "
"(possibly) different types. This can be useful when you have more than one "
"signal connected to the same method, as each signal propagation will result "
"in different values for those extra call arguments."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:67
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"Em baixo da janela há um campo rotulado \"Método Receptor\". Esse é o nome "
"da função no script do nó alvo que você quer usar. Por padrão, a Godot "
"criará essa função usando a convenção de nomenclatura "
"``_on_<node_name>_<signal_name>`` mas você pode mudá-lo se desejar."

#: ../../docs/getting_started/step_by_step/signals.rst:72
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr "Clique em \"Conectar\" e você verá que a função foi criada no script:"

#: ../../docs/getting_started/step_by_step/signals.rst:92
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"Agora podemos substituir o código placeholder com qualquer código que deseja "
"executar quando o sinal for recebido. Vamos fazer o Sprite piscar:"

#: ../../docs/getting_started/step_by_step/signals.rst:116
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"Execute a cena e você verá o Sprite ligando e desligando a cada segundo. "
"Você pode mudar a propriedade *Wait Time* do temporizador para alterar isso."

#: ../../docs/getting_started/step_by_step/signals.rst:120
msgid "Connecting signals in code"
msgstr "Conectando sinais por código"

#: ../../docs/getting_started/step_by_step/signals.rst:122
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"Você também pode fazer a conexão do sinal em código ao invés do editor. Isso "
"é geralmente necessário quando você está instanciando nós via código e por "
"isso não pode usar o editor para fazer a conexão."

#: ../../docs/getting_started/step_by_step/signals.rst:126
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"Primeiro, desconecte o sinal selecionando a conexão na aba \"Nó\" do timer e "
"clicando em desconectar."

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"Para fazer a conexão por código, nós podemos usar a função ``connect``. Nós "
"iremos colocá-la em ``_ready()`` para que a conexão sejá feita ao rodar. A "
"sintaxe da função é ``<source_node>.connect(<signal_name>, <target_node>, "
"<target_function_name>)``. Aqui está o código para nossa conexão com o "
"Temporizador:"

#: ../../docs/getting_started/step_by_step/signals.rst:164
msgid "Custom signals"
msgstr "Sinais personalizados"

#: ../../docs/getting_started/step_by_step/signals.rst:166
msgid "You can also declare your own custom signals in Godot:"
msgstr "Você também pode declarar seus próprios sinais na Godot:"

#: ../../docs/getting_started/step_by_step/signals.rst:184
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"Quando declarado, seus sinais personalizados aparecerão no Inspetor e podem "
"ser conectados em um nó da mesma forma que os sinais predefinidos."

#: ../../docs/getting_started/step_by_step/signals.rst:187
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr "Para emitir um sinal por código, use a função ``emit_signal`` :"

#: ../../docs/getting_started/step_by_step/signals.rst:212
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:232
#, fuzzy
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Estes argumentos aparecem na aba Nó do editor, e a Godot pode usá-los para "
"criar funções para você. Entretanto, você ainda pode emitir qualquer número "
"de argumento quando você emite sinais; é você quem tem que emitir os valores "
"corretos."

#: ../../docs/getting_started/step_by_step/signals.rst:237
#, fuzzy
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr "Para emitir um sinal por código, use a função ``emit_signal`` :"

#: ../../docs/getting_started/step_by_step/signals.rst:263
msgid "Conclusion"
msgstr "Conclusão"

#: ../../docs/getting_started/step_by_step/signals.rst:265
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Na Godot, muitos dos nós embutidos proporcionam sinais que você pode usar "
"para detectar eventos. Por exemplo, um :ref:`Area2D "
"<class_Area2D>`representando uma moeda emite um sinal ``body_entered`` "
"sempre quando o corpo físico do jogador entra na forma de colisão, "
"permitindo você saber quando o jogador coletou ela."

#: ../../docs/getting_started/step_by_step/signals.rst:270
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"Na próxima seção, :ref:`doc_your_first_game`, você criará um jogo completo "
"contendo vários usos de sinais para conectar diferentes componentes do jogo."
