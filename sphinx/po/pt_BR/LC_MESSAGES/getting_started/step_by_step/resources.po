# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-09 12:15+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/resources.rst:4
msgid "Resources"
msgstr "Recursos"

#: ../../docs/getting_started/step_by_step/resources.rst:7
msgid "Nodes and resources"
msgstr "Nós e recursos"

#: ../../docs/getting_started/step_by_step/resources.rst:9
msgid ""
"So far, :ref:`Nodes <class_Node>` have been the most important datatype in "
"Godot as most of the behaviors and features of the engine are implemented "
"through them. There is another datatype that is equally important: :ref:"
"`Resource <class_Resource>`."
msgstr ""
"Até agora, :ref:`Nós <class_Node>` têm sido o tipo de dados mais importante "
"no Godot, já que a maioria dos comportamentos e funcionalidades do motor são "
"implementados através deles. Existe outro tipo de dados que é igualmente "
"importante: :ref:`Recurso <class_Resource>`."

#: ../../docs/getting_started/step_by_step/resources.rst:15
msgid ""
"Where *Nodes* focus on behaviors, such as drawing a sprite, drawing a 3D "
"model, physics, GUI controls, etc,"
msgstr ""
"Enquanto *Nós* focam em comportamentos, como desenhar um sprite, desenhar um "
"modelo 3D, controles de física, controles de interface, etc,"

#: ../../docs/getting_started/step_by_step/resources.rst:18
msgid ""
"**Resources** are mere **data containers**. This means that they don't do "
"any action nor process any information. Resources just contain data."
msgstr ""
"**Recursos** são meros **contêineres de dados**. Isso significa que eles não "
"fazem nenhuma ação nem processam informação. Recursos apenas contêm dados."

#: ../../docs/getting_started/step_by_step/resources.rst:22
msgid ""
"Examples of resources are :ref:`Texture <class_Texture>`, :ref:`Script "
"<class_Script>`, :ref:`Mesh <class_Mesh>`, :ref:`Animation "
"<class_Animation>`, :ref:`AudioStream <class_AudioStream>`, :ref:`Font "
"<class_Font>`, :ref:`Translation <class_Translation>`, etc."
msgstr ""
"Exemplos de recursos são :ref:`Textura <class_Texture>`, :ref:`Roteiro "
"<class_Script>`, :ref:`Malha <class_Mesh>`, :ref:`Animação "
"<class_Animation>`, :ref:`Fluxo de áudio <class_AudioStream>`, :ref:`Fonte "
"<class_Font>`, :ref:`Tradução <class_Translation>`, etc."

#: ../../docs/getting_started/step_by_step/resources.rst:32
msgid ""
"When Godot saves or loads (from disk) a scene (.tscn or .scn), an image "
"(png, jpg), a script (.gd) or pretty much anything, that file is considered "
"a resource."
msgstr ""
"Quando Godot salva ou carrega (do disco) uma cena (.tscn ou .scn), uma "
"imagem (png, jpg), um script (.gd) ou praticamente qualquer coisa, esse "
"arquivo é considerado um recurso."

#: ../../docs/getting_started/step_by_step/resources.rst:36
msgid ""
"When a resource is loaded from disk, **it is always loaded once**. That "
"means, if there is a copy of that resource already loaded in memory, trying "
"to load the resource again will return the same copy again and again. This "
"corresponds with the fact that resources are just data containers, so there "
"is no need to have them duplicated."
msgstr ""
"Quando um recurso é carregado do disco, **sempre é carregado só uma vez**. "
"Isso significa que, se houver uma cópia desse recurso já carregado na "
"memória, tentar carregar o recurso novamente retornará a mesma cópia várias "
"vezes. Isso corresponde ao fato de que os recursos são apenas contêineres de "
"dados, portanto, não é necessário duplicá-los."

#: ../../docs/getting_started/step_by_step/resources.rst:42
msgid ""
"Typically, every object in Godot (Node, Resource, or anything else) can "
"export properties. Properties can be of many types (like a string, integer, "
"Vector2, etc) and one of those types can be a resource. This means that both "
"nodes and resources can contain resources as properties. To make it a little "
"more visual:"
msgstr ""
"Normalmente, todos os objetos em Godot (Nós, Recursos ou qualquer outra "
"coisa) podem exportar propriedades. Elas podem ser de vários tipos (como "
"texto, número inteiro, Vector2, etc) e um desses tipos pode ser um recurso. "
"Isso significa que os nós e os recursos podem conter recursos como "
"propriedades. Para tornar isso um pouco mais visual:"

#: ../../docs/getting_started/step_by_step/resources.rst:51
msgid "External vs built-in"
msgstr "Externo vs embutido"

#: ../../docs/getting_started/step_by_step/resources.rst:53
msgid ""
"The resource properties can reference resources in two ways, *external* (on "
"disk) or **built-in**."
msgstr ""
"As propriedades do recurso podem referenciar recursos de duas maneiras: "
"*externo* (no disco) ou **embutido**."

#: ../../docs/getting_started/step_by_step/resources.rst:56
msgid ""
"To be more specific, here's a :ref:`Texture <class_Texture>` in a :ref:"
"`Sprite <class_Sprite>` node:"
msgstr ""
"Para ser mais específico, aqui está uma :ref:`Textura <class_Texture>` em um "
"nó :ref:`Sprite <class_Sprite>`:"

#: ../../docs/getting_started/step_by_step/resources.rst:61
msgid ""
"Pressing the \">\" button on the right side of the preview allows us to view "
"and edit the resources properties. One of the properties (path) shows where "
"it comes from. In this case, it comes from a png image."
msgstr ""
"Pressionar o botão \">\" no lado direito da visualização permite visualizar "
"e editar as propriedades dos recursos. Uma das propriedades (caminho) mostra "
"de onde ele vem. Neste caso, vem de uma imagem png."

#: ../../docs/getting_started/step_by_step/resources.rst:67
msgid ""
"When the resource comes from a file, it is considered an *external* "
"resource. If the path property is erased (or it never had a path to begin "
"with), it is considered a built-in resource."
msgstr ""
"Quando o recurso vem de um arquivo, ele é considerado um recurso *externo*. "
"Se a propriedade \"path\" (caminho) for apagada (ou nunca teve um caminho "
"para começar), ele será considerada um recurso embutido."

#: ../../docs/getting_started/step_by_step/resources.rst:71
msgid ""
"For example, if the path \\`\"res://robi.png\"\\` is erased from the \"path"
"\" property in the above example, and then the scene is saved, the resource "
"will be saved inside the .tscn scene file, no longer referencing the "
"external \"robi.png\". However, even if saved as built-in, and even though "
"the scene can be instanced multiple times, the resource will always be "
"loaded only once. That means, different Robi robot scenes instanced at the "
"same time will still share the same image."
msgstr ""
"Por exemplo, se o caminho \\`\"res://robi.png\"\\` for apagado da "
"propriedade \"path\" no exemplo acima e, em seguida, a cena for salva, o "
"recurso será salvo dentro do arquivo de cena .tscn, não mais referenciando o "
"\"robi.png\" externo. No entanto, mesmo se salvo como interno, e mesmo que a "
"cena possa ser instanciada várias vezes, o recurso sempre será carregado "
"apenas uma vez. Isso significa que diferentes cenas robóticas Robi "
"instanciadas ao mesmo tempo ainda compartilharão a mesma imagem."

#: ../../docs/getting_started/step_by_step/resources.rst:80
msgid "Loading resources from code"
msgstr "Carregando recursos a partir do código"

#: ../../docs/getting_started/step_by_step/resources.rst:82
msgid ""
"Loading resources from code is easy. There are two ways to do it. The first "
"is to use load(), like this:"
msgstr ""
"Carregar recursos a partir do código é fácil. Existem duas maneiras de fazer "
"isso. O primeiro é usar o load(), assim:"

#: ../../docs/getting_started/step_by_step/resources.rst:101
msgid ""
"The second way is more optimal, but only works with a string constant "
"parameter because it loads the resource at compile-time."
msgstr ""
"A segunda maneira é mais ideal, mas só funciona com um parâmetro de texto "
"constante, porque ele carrega o recurso em tempo de compilação."

#: ../../docs/getting_started/step_by_step/resources.rst:116
msgid "Loading scenes"
msgstr "Carregando cenas"

#: ../../docs/getting_started/step_by_step/resources.rst:117
msgid ""
"Scenes are also resources, but there is a catch. Scenes saved to disk are "
"resources of type :ref:`PackedScene <class_PackedScene>`. This means that "
"the scene is packed inside a resource."
msgstr ""
"Cenas também são recursos, mas há um detalhe. Cenas salvas no disco são "
"recursos do tipo :ref:`PackedScene <class_PackedScene>`. Isso significa que "
"a cena é compactada dentro de um recurso."

#: ../../docs/getting_started/step_by_step/resources.rst:121
msgid ""
"To obtain an instance of the scene, the method :ref:`PackedScene.instance() "
"<class_PackedScene_instance>` must be used."
msgstr ""
"Para obter uma instância da cena, o método :ref:`PackedScene.instance() "
"<class_PackedScene_instance>` deve ser usado."

#: ../../docs/getting_started/step_by_step/resources.rst:143
msgid ""
"This method creates the nodes in the scene's hierarchy, configures them "
"(sets all the properties) and returns the root node of the scene, which can "
"be added to any other node."
msgstr ""
"Esse método cria os nós na hierarquia da cena, configura-os (define todas as "
"propriedades) e retorna o nó raiz da cena, que pode ser adicionado a "
"qualquer outro nó."

#: ../../docs/getting_started/step_by_step/resources.rst:147
msgid ""
"The approach has several advantages. As the :ref:`PackedScene.instance() "
"<class_PackedScene_instance>` function is pretty fast, adding extra content "
"to the scene can be done efficiently. New enemies, bullets, effects, etc can "
"be added or removed quickly, without having to load them again from disk "
"each time. It is important to remember that, as always, images, meshes, etc "
"are all shared between the scene instances."
msgstr ""
"Essa abordagem tem várias vantagens. Como a função :ref:`PackedScene."
"instance() <class_PackedScene_instance>` é bastante rápida, adicionar "
"conteúdo extra à cena pode ser feito de forma eficiente. Novos inimigos, "
"tiros, efeitos, etc podem ser adicionados ou removidos rapidamente, sem ter "
"que carregá-los novamente a partir do disco toda vez. É importante lembrar "
"que, como sempre, imagens, malhas, etc. são todos compartilhados entre as "
"instâncias da cena."

#: ../../docs/getting_started/step_by_step/resources.rst:156
msgid "Freeing resources"
msgstr "Liberando recursos"

#: ../../docs/getting_started/step_by_step/resources.rst:158
msgid ""
"Resource extends from :ref:`Reference <class_Reference>`. As such, when a "
"resource is no longer in use, it will automatically free itself. Since, in "
"most cases, Resources are contained in Nodes, scripts or other resources, "
"when a node is removed or freed, all the children resources are freed too."
msgstr ""
"Recurso é uma extensão da classe :ref:`Reference <class_Reference>`. Assim, "
"quando um recurso não estiver mais em uso, ele será automaticamente "
"liberado. Como, na maioria dos casos, os recursos estão contidos em nós, "
"scripts ou outros recursos, quando um nó é removido ou liberado, todos os "
"recursos filhos são liberados também."

#: ../../docs/getting_started/step_by_step/resources.rst:165
msgid "Scripting"
msgstr "Scripting"

#: ../../docs/getting_started/step_by_step/resources.rst:167
msgid ""
"Like any object in Godot, not just nodes, resources can be scripted, too. "
"However, there isn't generally much of an advantage, as resources are just "
"data containers."
msgstr ""
"Como qualquer objeto em Godot, não apenas nós, os recursos também podem ser "
"roteirizados. No entanto, geralmente não há muita vantagem, pois os recursos "
"são apenas contêineres de dados."
