# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-18 08:58+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:4
#: ../../docs/getting_started/step_by_step/scene_tree.rst:41
msgid "SceneTree"
msgstr "Árvore de cena"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:7
msgid "Introduction"
msgstr "Introdução"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:9
msgid ""
"This is where things start getting abstract, but don't panic. There's not "
"much more depth than this."
msgstr ""
"É aqui que as coisas começam a ficar abstratas, mas não entre em pânico. Não "
"há muito mais profundidade do que isso."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:12
msgid ""
"In previous tutorials, everything revolved around the concept of nodes. "
"Scenes are simply a collection of nodes. They become active once they enter "
"the *scene tree*."
msgstr ""
"Nos tutoriais anteriores, tudo girava em torno do conceito de nós. Cenas são "
"simplesmente uma coleção de nós. Elas se tornam ativos quando entram na * "
"árvore de cena *."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:16
#, fuzzy
msgid ""
"This concept deserves going into a little more detail. In fact, the scene "
"system is not even a core component of Godot as it is possible to skip it "
"and write a script (or C++ code) that talks directly to the servers, but "
"making a game that way would be a lot of work."
msgstr ""
"Este conceito merece entrar em mais detalhes. Na verdade, o sistema de cena "
"não é nem mesmo um componente central da Godot, já que é possível ignorá-lo "
"e escrever um script (ou código C ++) que converse diretamente com os "
"servidores. Mas fazer um jogo assim seria muito trabalho."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:22
msgid "MainLoop"
msgstr "Loop principal"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:24
#, fuzzy
msgid ""
"The way Godot works internally is as follows. There is the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the beginning. "
"Afterwards, all drivers, servers, scripting languages, scene system, etc are "
"loaded."
msgstr ""
"A maneira como Godot trabalha internamente é a seguinte. Existe a classe: "
"ref: `OS <class_OS>`, que é a única instância que é executada no começo. "
"Depois disso, todos os drivers, servidores, linguagens de script, sistema de "
"cena, etc são carregados."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:29
msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be supplied "
"a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all this is "
"internals working (you can check main/main.cpp file in the source code if "
"you are ever interested to see how this works internally)."
msgstr ""
"Quando a inicialização estiver completa,: ref: `OS <class_OS>` precisa ser "
"fornecido a: ref: `MainLoop <class_MainLoop>` para ser executado. Até este "
"ponto, tudo isso é funcionamento interno (você pode verificar o arquivo "
"main / main.cpp no código-fonte, se você estiver interessado em ver como "
"isso funciona internamente)."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:35
msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-synchronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is low level and "
"when making games in Godot, writing your own MainLoop seldom makes sense."
msgstr ""
"O programa do usuário, ou jogo, inicia no MainLoop. Essa classe tem alguns "
"métodos, para inicialização, ocioso (retorno de chamada com sincronia de "
"quadros), fixo (retorno de chamada com sincronização física) e entrada. "
"Novamente, isso é de baixo nível e ao fazer jogos na Godot, escrever seu "
"próprio MainLoop raramente faz sentido."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:43
#, fuzzy
msgid ""
"One of the ways to explain how Godot works is that it's a high level game "
"engine over a low level middleware."
msgstr ""
"Uma das maneiras de explicar como Godot funciona é que é um mecanismo de "
"jogo de alto nível sobre um middleware de baixo nível."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:46
msgid ""
"The scene system is the game engine, while the :ref:`OS <class_OS>` and "
"servers are the low level API."
msgstr ""
"O sistema de cena é o mecanismo do jogo, enquanto o: ref: `OS <class_OS>` e "
"os servidores são a API de baixo nível."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:49
msgid ""
"In any case, the scene system provides its own main loop to OS, :ref:"
"`SceneTree <class_SceneTree>`. This is automatically instanced and set when "
"running a scene, no need to do any extra work."
msgstr ""
"Em qualquer caso, o sistema de cena fornece seu próprio loop principal para "
"o SO,: ref: `SceneTree <class_SceneTree>`. Isso é automaticamente "
"instanciado e definido ao executar uma cena, sem necessidade de qualquer "
"trabalho extra."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:54
msgid ""
"It's important to know that this class exists because it has a few important "
"uses:"
msgstr ""
"É importante saber que essa classe existe porque tem alguns usos importantes:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:57
#, fuzzy
msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, to which a scene is "
"added as a child when it's first opened to become part of the *Scene Tree* "
"(more on that next)"
msgstr ""
"Ele contém a raiz: ref: `Viewport <class_Viewport>`, para a qual uma cena é "
"adicionada como uma criança quando é aberta pela primeira vez, para se "
"tornar parte da * Scene Tree * (mais sobre isso a seguir)"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:60
#, fuzzy
msgid ""
"It contains information about the groups and has the means to call all nodes "
"in a group or get a list of them."
msgstr ""
"Ele contém informações sobre os grupos e tem meios para chamar todos os nós "
"de um grupo ou obter uma lista deles."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:62
#, fuzzy
msgid ""
"It contains some global state functionality, such as setting pause mode or "
"quitting the process."
msgstr ""
"Ela contém alguma funcionalidade de estado global, como configurar o modo de "
"pausa ou encerrar o processo."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:65
msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by simply calling :ref:`Node."
"get_tree() <class_Node_get_tree>`."
msgstr ""
"Quando um nó é parte da Scene Tree, o singleton: ref: `SceneTree "
"<class_SceneTree> pode ser obtido simplesmente chamando: ref:` Node.get_tree "
"() <class_Node_get_tree> `."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:71
msgid "Root viewport"
msgstr "Viewport raiz"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:73
msgid ""
"The root :ref:`Viewport <class_Viewport>` is always at the top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""
"A raiz: ref: `Viewport <class_Viewport> está sempre no topo da cena. De um "
"nó, ele pode ser obtido de duas maneiras diferentes:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:88
#, fuzzy
msgid ""
"This node contains the main viewport, anything that is a child of a :ref:"
"`Viewport <class_Viewport>` is drawn inside of it by default, so it makes "
"sense that the top of all nodes is always a node of this type otherwise "
"nothing would be seen!"
msgstr ""
"Este nó contém o viewport principal, qualquer coisa que é filho de: ref: "
"`Viewport <class_Viewport>` é desenhado dentro dele por padrão, então faz "
"sentido que o topo de todos os nós seja sempre um nó deste tipo, caso "
"contrário nada seria visto!"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:93
msgid ""
"While other viewports can be created in the scene (for split-screen effects "
"and such), this one is the only one that is never created by the user. It's "
"created automatically inside SceneTree."
msgstr ""
"Enquanto outras viewports podem ser criadas na cena (para efeitos de tela "
"dividida e tal), esta é a única que nunca é criada pelo usuário. É criado "
"automaticamente dentro do SceneTree."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:98
msgid "Scene tree"
msgstr "Árvore de cena"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:100
msgid ""
"When a node is connected, directly or indirectly, to the root viewport, it "
"becomes part of the *scene tree*."
msgstr ""
"Quando um nó é conectado, direta ou indiretamente, à viewport raiz, ele se "
"torna parte da * árvore de cena *."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:103
#, fuzzy
msgid ""
"This means that as explained in previous tutorials, it will get the "
"_enter_tree() and _ready() callbacks (as well as _exit_tree())."
msgstr ""
"Isso significa que, como explicado nos tutoriais anteriores, ele obterá os "
"retornos de chamada _enter_tree () e _ready () (assim como _exit_tree ())."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:108
msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access to "
"everything they need to process, get input, display 2D and 3D, "
"notifications, play sound, groups, etc. When they are removed from the "
"*scene tree*, they lose access."
msgstr ""
"Quando os nós entram na * Scene Tree *, eles se tornam ativos. Eles têm "
"acesso a tudo o que precisam para processar, obter entrada, exibir 2D e 3D, "
"notificações, reproduzir sons, grupos etc. Quando são removidos da * árvore "
"de cena *, eles perdem o acesso."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:114
msgid "Tree order"
msgstr "Ordem da árvore"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:116
#, fuzzy
msgid ""
"Most node operations in Godot, such as drawing 2D, processing, or getting "
"notifications are done in tree order. This means that parents and siblings "
"with a smaller rank in the tree order will get notified before the current "
"node."
msgstr ""
"A maioria das operações de nó na Godot, como desenhar 2D, processar ou obter "
"notificações, é feita em ordem de árvore. Isso significa que pais e irmãos "
"com uma classificação menor na ordem de árvore serão notificados antes do nó "
"atual."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:124
msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr "\"Tornando-se ativo\" entrando na * Scene Tree *"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:126
msgid "A scene is loaded from disk or created by scripting."
msgstr "Uma cena é carregada do disco ou criada pelo script."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:127
#, fuzzy
msgid ""
"The root node of that scene (only one root, remember?) is added as either a "
"child of the \"root\" Viewport (from SceneTree), or to any child or "
"grandchild of it."
msgstr ""
"O nó raiz dessa cena (apenas uma raiz, lembra?) É adicionado como um filho "
"da viewport \"root\" (de SceneTree), ou para qualquer filho ou neto dela."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:130
msgid ""
"Every node of the newly added scene, will receive the \"enter_tree\" "
"notification ( _enter_tree() callback in GDScript) in top-to-bottom order."
msgstr ""
"Cada nó da cena recém-adicionada receberá a notificação \"enter_tree"
"\" (callback _enter_tree () no GDScript) na ordem de cima para baixo."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:133
msgid ""
"An extra notification, \"ready\" ( _ready() callback in GDScript) is "
"provided for convenience, when a node and all its children are inside the "
"active scene."
msgstr ""
"Uma notificação extra, \"ready\" (retorno de chamada _ready () no GDScript) "
"é fornecida por conveniência, quando um nó e todos os seus filhos estão "
"dentro da cena ativa."

#: ../../docs/getting_started/step_by_step/scene_tree.rst:136
msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( _exit_tree() callback in GDScript) in bottom-to-top order"
msgstr ""
"Quando uma cena (ou parte dela) é removida, eles recebem a notificação "
"\"exit scene\" (retorno de chamada _exit_tree() na GDScript) na ordem de "
"baixo para cima"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:141
msgid "Changing current scene"
msgstr "Alterando a cena atual"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:143
msgid ""
"After a scene is loaded, it is often desired to change this scene for "
"another one. The simple way to do this is to use the :ref:`SceneTree."
"change_scene() <class_SceneTree_change_scene>` function:"
msgstr ""
"Depois que uma cena é carregada, muitas vezes é desejado mudar essa cena "
"para outra. A maneira simples de fazer isso é usar a função: ref: `SceneTree."
"change_scene () <class_SceneTree_change_scene>`:"

#: ../../docs/getting_started/step_by_step/scene_tree.rst:161
#, fuzzy
msgid ""
"This is a quick and useful way to switch scenes but has the drawback that "
"the game will stall until the new scene is loaded and running. At some point "
"in your game, it may be desired to create proper loading screens with "
"progress bar, animated indicators or thread (background) loading. This must "
"be done manually using autoloads (see next chapter!) and :ref:"
"`doc_background_loading`."
msgstr ""
"Esta é uma maneira rápida e útil de trocar de cena, mas tem a desvantagem de "
"o jogo parar até que a nova cena seja carregada e executada. Em algum "
"momento do seu jogo, pode ser necessário criar telas de carregamento "
"adequadas com barra de progresso, indicadores animados ou carregamento de "
"thread (plano de fundo). Isso deve ser feito manualmente usando autoloads "
"(veja o próximo capítulo!) E: ref: `doc_background_loading`."
