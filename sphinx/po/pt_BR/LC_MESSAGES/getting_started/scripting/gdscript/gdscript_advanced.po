# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-02 12:40+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:4
msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript: Uma introdução às linguagens dinâmicas"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:7
msgid "About"
msgstr "Sobre"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:9
msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"Este tutorial pretende ser uma referência rápida de como usar GDScript de "
"forma mais eficiente. Focando, assim, em casos mais comuns específicos da "
"linguagem, mas também contém informações sobre linguagens dinâmicamente "
"tipadas."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:13
msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""
"É destinado a ser especialmente útil para programadores com pouca ou nenhuma "
"experiência com linguagens dinâmicamente tipadas."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:17
msgid "Dynamic nature"
msgstr "Natureza dinâmica"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:20
msgid "Pros & cons of dynamic typing"
msgstr "Prós e contras da tipagem dinâmica"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:22
msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr ""
"GDScript é uma linguagem Dinamicamente Tipada. Como tal, suas maiores "
"vantagens são:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:25
msgid "The language is very simple to learn."
msgstr "A linguagem é muito simples de aprender."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:26
msgid "Most code can be written and changed quickly and without hassle."
msgstr ""
"A maioria do código pode ser escrito e modificado rapidamente sem "
"complicações."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:27
msgid "Less code written means less errors & mistakes to fix."
msgstr ""
"Menos código escrito significa menos erros e enganos a serem corrigidos."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:28
msgid "Easier to read the code (less clutter)."
msgstr "Mais fácil de ler o código (menos bagunça)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:29
msgid "No compilation is required to test."
msgstr "Nenhuma compilação é necessária para testar."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:30
msgid "Runtime is tiny."
msgstr "Tempo de execução é bem pequeno."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:31
msgid "Duck-typing and polymorphism by nature."
msgstr "Polimorfismo e tipagem pato naturalmente."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:33
msgid "While the main disadvantages are:"
msgstr "Enquanto as maiores desvantagens são:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:35
msgid "Less performance than statically typed languages."
msgstr "Menor performance que linguagens com tipagem estática."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:36
msgid "More difficult to refactor (symbols can't be traced)"
msgstr "Mais difícil de refatorar (símbolos não podem ser rastreados)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:37
msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"Alguns erros que, tipicamente, seriam detectados em tempo de compilação em "
"linguagens tipadas estaticamente aparecem apenas rodando o código (porque a "
"análise de expressões é mais estrita)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:40
msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr ""
"Menos flexibilidade para preenchimento de código (alguns tipos de variáveis "
"só são reconhecidos na execução)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:43
msgid ""
"This, translated to reality, means that Godot+GDScript are a combination "
"designed to create games very quickly and efficiently. For games that are "
"very computationally intensive and can't benefit from the engine built-in "
"tools (such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows to still create the "
"entire game in GDScript and add small bits of C++ in the areas that need a "
"performance boost."
msgstr ""
"Isto, traduzido para a realidade, significa que Godot+GDScrippt é uma "
"combinação desenhada para criar jogos muito rápida e eficientemente. Para "
"jogos que são muito computacionalmente intensivos e não podem se beneficiar "
"pelas ferramentas embutidas no motor (como tipos Vetor, Motor de Física, "
"biblioteca de Matemática, etc.), a possibilidade de usar C++ também está "
"presente. Isto permite criar o jogo inteiro em GDScript e adicionar pequenas "
"partes de C++ em áreas que precisem de um incremento de performance."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:52
msgid "Variables & assignment"
msgstr "Variáveis & atribuição"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:54
msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"Todas as variáveis em uma linguagem dinamicamente tipada são tipo-\"variante"
"\". Isto significa que seus tipos não são fixos, e é modificado apenas na "
"atribuição. Exemplos:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:58
#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:80
msgid "Static:"
msgstr "Estático:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:66
#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:94
msgid "Dynamic:"
msgstr "Dinâmico:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:75
msgid "As function arguments:"
msgstr "Como argumentos da função:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:77
msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr ""
"Funções também têm natureza dinâmica, o que significa que elas podem ser "
"invocadas com argumentos diferentes, por exemplo:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:107
msgid "Pointers & referencing:"
msgstr "Ponteiros & referência:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:109
msgid ""
"In static languages such as C or C++ (and to some extent Java and C#), there "
"is a distinction between a variable and a pointer/reference to a variable. "
"The latter allows the object to be modified by other functions by passing a "
"reference to the original one."
msgstr ""
"Em linguagens estáticas como C ou C++ (e, em certa medida, Java e C#), "
"existe uma distinção entre uma variável e um ponteiro/referência para uma "
"variável. O último ajuda o objeto a ser modificado por outras funções "
"através da passagem de uma referência para o original."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:114
msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model too. Some Examples:"
msgstr ""
"Em C# ou Java, tudo que não é um tipo embutido (inteiro, real ou, às vezes, "
"uma string) é sempre um ponteiro ou uma referência. Referências são "
"coletadas pelo coletor de lixo automaticamente, o que significa que são "
"apagadas quando não mais usadas. Linguagens tipadas dinamicamente tendem a "
"usar esse modelo de memória também. Alguns exemplos:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:120
msgid "C++:"
msgstr "C++:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:136
msgid "Java:"
msgstr "Java:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:154
msgid "GDScript:"
msgstr "GDScript:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:166
msgid ""
"In GDScript, only base types (int, float, string and the vector types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"arrays, dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_Reference` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:174
msgid "Arrays"
msgstr "Arranjo"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:176
msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:203
msgid "And in GDScript:"
msgstr "E no GDScript:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:212
msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:222
msgid "Or unordered sets:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:231
msgid "Dictionaries"
msgstr "Dicionários"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:233
msgid ""
"Dictionaries are a very powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only on limited "
"form)."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:239
msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are very efficient because they can be implemented with hash tables. "
"They are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"Dicionários podem mapear qualquer valor para qualquer outro valor com total "
"desrespeito para o tipo de dados usado como chave ou valor. Ao contrário da "
"crença popular, eles são muito eficientes, porque eles podem ser "
"implementados com tabelas de hash. Eles são, na verdade, tão eficiente que "
"algumas línguas irão tão longe como implementar matrizes como dicionários."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:245
msgid "Example of Dictionary:"
msgstr "Exemplo de Dicionário:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:252
msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr ""
"Dicionários também são dinâmicos, as chaves podem ser adicionadas ou "
"removidas a qualquer momento a baixo custo:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:261
msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a simple battleship game example:"
msgstr ""
"Na maioria dos casos, matrizes bidimensionais, muitas vezes podem ser "
"implementadas mais facilmente com dicionários. Aqui está um exemplo de jogo "
"de batalha naval simples:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:294
msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it very useful for writing initial "
"states and quick structs:"
msgstr ""
"Dicionários também podem ser usados como marcação de dados ou estruturas "
"rápidas. Enquanto dicionários do GDScript se assemelham aos dicionários de "
"Python, ele também oferece suporte a sintaxe e indexação ao estilo de Lua, "
"que o torna muito útil para escrever as estruturas rápidas e estados "
"iniciais:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:317
msgid "For & while"
msgstr "Para & enquanto"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:319
msgid "Iterating in some statically typed languages can be quite complex:"
msgstr ""
"Iterando em algumas linguagens tipificadas estáticas podem ser bastante "
"complexas:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:340
msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr ""
"Isto é geralmente bastante simplificado em linguagens tipificadas "
"dinamicamente:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:347
msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr ""
"Tipos de dados do recipiente (matrizes e dicionários) são iteráveis. "
"Dicionários permitem a iteração das chaves:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:355
msgid "Iterating with indices is also possible:"
msgstr "Também é possível iterar com índices:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:362
msgid "The range() function can take 3 arguments:"
msgstr "A função range() pode levar 3 argumentos:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:370
msgid "Some examples:"
msgstr "Alguns exemplos:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:380
msgid "Translate to:"
msgstr "Traduzir para:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:393
msgid "And backwards looping is done through a negative counter:"
msgstr "E a repetição inversa é feita através de um contador negativo:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:399
#, fuzzy
msgid "Becomes:"
msgstr "torna-se"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:407
msgid "While"
msgstr "While"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:409
msgid "while() loops are the same everywhere:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:420
msgid "Custom iterators"
msgstr "Iteradores personalizados"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:421
msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"Você pode criar iteradores personalizados no caso padrão não precisa atender "
"às suas necessidades, substituindo a variante da classe '_iter_init ', ' "
"_iter_next ' e ' _iter_get ' funções em seu script. Segue um exemplo de "
"implementação de um iterador direto:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:453
msgid "And it can be used like any other iterator:"
msgstr "E pode ser usado como qualquer outro iterador:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:461
msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"Certifique-se de redefinir o estado do iterador em '_iter_init ', caso "
"contrário para-loops aninhados que usam iteradores personalizados não "
"funcionará como esperado."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:465
msgid "Duck typing"
msgstr "Duck typing"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:467
msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"Um dos conceitos mais difíceis de entender quando passa de uma linguagem "
"estaticamente tipada para uma dinâmica é duck typing. Duck typing faz com "
"que o design geral do código seja mais simples e direto de escrever, mas não "
"é óbvio como ele funciona."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:472
msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"Como exemplo, imagine uma situação onde uma grande rocha está caindo de um "
"túnel, esmagando tudo em seu caminho. O código para a rocha, em uma "
"linguagem estaticamente tipada seria algo como:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:483
msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:491
msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:500
msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:506
msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:509
msgid "In this case, it translates to:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:511
msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:513
msgid "Yes, we should call it Hulk typing instead."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:515
msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist (like Objective C), but GDScript is more strict, so checking if the "
"function exists is desirable:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:526
msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""
