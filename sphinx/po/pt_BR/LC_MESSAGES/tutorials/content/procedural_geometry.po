# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-15 18:11+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/content/procedural_geometry.rst:4
msgid "Procedural geometry generation"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:6
msgid ""
"Users often ask how to generate geometry from code. This is not very "
"complicated, but it's not obvious. Godot provides a few classes entirely "
"dedicated to make it this easy. Still, the best tool for the job depends "
"entirely on the use case."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:11
msgid "SurfaceTool"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:13
msgid ""
"This is the most common helper. :ref:`SurfaceTool<class_SurfaceTool>` is a "
"class you can instantiate to generate :ref:`Meshes<class_Mesh>`, "
"specifically *Mesh Surfaces*."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:15
msgid ""
"It has a similar API to OpenGL 1.x, and it's meant for static content. This "
"means, the mesh is generated once and then used."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:17
#, fuzzy
msgid "Here is a simple example of how to use it to add a single triangle."
msgstr "Aqui est√° um exemplo simples de como funciona:"

#: ../../docs/tutorials/content/procedural_geometry.rst:46
msgid "Just explore the APIs and the possibilities."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:49
msgid "ImmediateGeometry"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:51
msgid ""
"Unlike *SurfaceTool*, :ref:`ImmediateGeometry<class_ImmediateGeometry>` is "
"an actual node. It's similar in the \"OpenGL 1.x\" style API, but it's "
"actually designed to create content on the fly and modify it every frame "
"efficiently."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:54
msgid ""
"Generating complex geometry (several thousand vertices) with this node is "
"inefficient, even if it's done only once. Instead, *ImmediateGeometry* is "
"designed to generate simple geometry that changes every frame."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:56
msgid "It's used similar to *SurfaceTool*."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:88
msgid "Arrays"
msgstr "Arrays"

#: ../../docs/tutorials/content/procedural_geometry.rst:90
msgid ""
"Lastly, the final way to do this is to create arrays themselves. This is the "
"most efficient way to create static geometry, and is only recommended when "
"SurfaceTool is not fast enough."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry.rst:93
msgid "Similar code as before, but draw a square using indices:"
msgstr ""
