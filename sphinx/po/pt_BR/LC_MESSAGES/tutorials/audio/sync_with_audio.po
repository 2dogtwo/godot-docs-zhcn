# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-21 13:40+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/audio/sync_with_audio.rst:4
msgid "Sync the gameplay with audio and music"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:7
msgid "Introduction"
msgstr "Introdução"

#: ../../docs/tutorials/audio/sync_with_audio.rst:9
msgid ""
"In any application or game, sound and music playback will have a slight "
"delay. For games, this delay is often so small that is negligible. Sound "
"effects will come out a few milliseconds after any play() function is "
"called. For music this does not matter as in most games it does not interact "
"with the gameplay."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:11
msgid ""
"Still, for some games (mainly, rhythm games), it may be required to "
"synchronize player actions with something happening in a song (usually in "
"sync with the BPM). For this, having more precise timing information for an "
"exact playback position is very welcome."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:13
msgid ""
"Achieving very low playback timing precision is very difficult. This because "
"many factors are at play during audio playback:"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:16
msgid ""
"Audio is mixed in chunks (not continuously), depending on the size of audio "
"buffers used (check latency in project settings)."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:17
msgid "Audio has latency after mixed, it doesn't immediately play after mixed."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:18
msgid "Graphics APIs display two or three frames late."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:19
msgid "When playing on TVs, some delay may be added due to image processing."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:21
msgid ""
"The most common way to reducing latency is to shrink the audio buffers "
"(again, by editing the latency setting in the project settings). The problem "
"is that when latency is too small, it will require considerably higher "
"amount of CPU for sound mixing. this increases the risk of skpping (a crack "
"in sound because a mix callback was lost)."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:23
msgid ""
"This is common a tradeoff, so Godot ships with sensible defaults that should "
"not need to be commonly altered."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:25
msgid ""
"The problem, in the end, is dealing with synchronization for games tha "
"require it, and not so much this slight delay. Beginning Godot 3.2, some "
"helpers were added to obtain more precise playback timing."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:28
msgid "Using the system clock to sync"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:30
msgid ""
"As mentioned before, If you call :ref:`AudioStreamPlayer."
"play()<class_AudioStreamPlayer_method_play>`, sound will not begin "
"immediately, but when the audio thread processes the next block."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:32
msgid ""
"This delay can't be avoided but it can be estimated by calling :ref:"
"`AudioServer."
"get_time_to_next_mix()<class_AudioServer_method_get_time_to_next_mix>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:34
msgid ""
"The output latency (what happens after the mix) can also be estimated by "
"calling :ref:`AudioServer."
"get_output_latency()<class_AudioServer_get_output_latency>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:36
msgid ""
"Add these two and it's possible to guess almost exactly when sound or music "
"will begin playing in the speakers:"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:44
msgid ""
"This way, obtaining the actual playback position during *_process()* is "
"possible:"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:67
msgid ""
"In the long run, though, as the sound hardware clock is never exactly in "
"sync with the system clock, they timing information will slowly drift away."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:69
msgid ""
"For a rhythm game where a song begins and ends after a few minutes, this "
"approach is fine (and it's the recommended approach). For a game where "
"playback can last a much longer time, the game will eventually go out of "
"sync and a different approach is needed."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:72
msgid "Using the sound hardware clock to sync"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:74
msgid ""
"Using :ref:`AudioStreamPlayer."
"get_playback_position()<class_AudioStreamPlayer_method_get_playback_position>` "
"to obtain the current position for the song sounds ideal, but it's not that "
"useful as-is. This value will increment in chunks (every time the audio "
"callback mixed a block of sound), so many calls can return the same value. "
"Added to this, the value will be out of sync with the speakers too because "
"of the previously mentioned reasons."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:76
msgid ""
"To compensate for the \"chunked\" output, there is a function that can "
"help: :ref:`AudioServer."
"get_time_since_last_mix()<class_AudioServer_get_time_since_last_mix>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:79
msgid ""
"Adding the return value from this function to *get_playback_position()* "
"increases precision:"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:86
msgid ""
"To increase precision, substract the latency information (how much it takes "
"for the audio to be heard after it was mixed):"
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:93
msgid ""
"The result may be a bit jittery due how multiple threads work. Just check "
"that the value is not less than in the previous frame (discard it if so). "
"This is also a less precise approach than the one before, but it will work "
"for songs of any length, or synchronizing anything (sound effects, as an "
"example) to music."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:95
msgid "Here is the same code as before using this approach:"
msgstr ""
