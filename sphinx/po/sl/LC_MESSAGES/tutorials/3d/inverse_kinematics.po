# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-08 21:18+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: sl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/inverse_kinematics.rst:4
msgid "Inverse kinematics"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:6
msgid "This tutorial is a follow-up of :ref:`doc_working_with_3d_skeletons`."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:8
msgid ""
"Before continuing on, I'd recommend reading some theory, the simplest "
"article I could find is this:"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:11
msgid "http://freespace.virgin.net/hugo.elias/models/m_ik2.htm"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:14
msgid "Initial problem"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:16
msgid ""
"Talking in Godot terminology, the task we want to solve here is to position "
"our 2 angles we talked about above so, that the tip of the lowerarm bone is "
"as close to the target point (which is set by the target Vector3()) as "
"possible using only rotations. This task is calculation-intensive and never "
"resolved by analytical equation solving. So, it is an underconstrained "
"problem, which means there is an unlimited number of solutions to the "
"equation."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:26
msgid ""
"For easy calculation, in this chapter we consider the target being a child "
"of Skeleton. If this is not the case for your setup you can always reparent "
"it in your script, as you will save on calculations if you do so."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:31
msgid ""
"In the picture you see the angles alpha and beta. In this case we don't use "
"poles and constraints, so we need to add our own. On the picture the angles "
"are 2D angles living in a plane which is defined by bone base, bone tip and "
"target."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:36
msgid ""
"The rotation axis is easily calculated using the cross-product of the bone "
"vector and the target vector. The rotation in this case will be always in "
"positive direction. If ``t`` is the Transform which we get from the "
"get_bone_global_pose() function, the bone vector is"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:45
msgid "So we have all the information we need to execute our algorithm."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:47
msgid ""
"In game dev it is common to resolve this problem by iteratively closing to "
"the desired location, adding/subtracting small numbers to the angles until "
"the distance change achieved is less than some small error value. Sounds "
"easy enough, but there are Godot problems we need to resolve there to "
"achieve our goal."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:53
msgid "**How to find coordinates of the tip of the bone?**"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:54
msgid "**How to find the vector from the bone base to the target?**"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:56
msgid ""
"For our goal (tip of the bone moved within area of target), we need to know "
"where the tip of our IK bone is. As we don't use a leaf bone as IK bone, we "
"know the coordinate of the bone base is the tip of the parent bone. All "
"these calculations are quite dependent on the skeleton's structure. You can "
"use pre-calculated constants as well. You can add an extra bone at the tip "
"of the IK bone and calculate using that."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:64
msgid "Implementation"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:66
msgid "We will use an exported variable for the bone length to make it easy."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:74
msgid ""
"Now, we need to apply our transformations from the IK bone to the base of "
"the chain. So we apply a rotation to the IK bone then move from our IK bone "
"up to its parent, apply rotation again, then move to the parent of the "
"current bone again, etc. So we need to limit our chain somewhat."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:83
msgid "For the ``_ready()`` function:"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:92
msgid "Now we can write our chain-passing function:"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:106
msgid "And for the ``_process()`` function:"
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:113
msgid ""
"Executing this script will pass through the bone chain, printing bone "
"transforms."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:143
msgid ""
"Now we need to actually work with the target. The target should be placed "
"somewhere accessible. Since \"arm\" is an imported scene, we better place "
"the target node within our top level scene. But for us to work with target "
"easily its Transform should be on the same level as the Skeleton."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:148
msgid ""
"To cope with this problem we create a \"target\" node under our scene root "
"node and at runtime we will reparent it copying the global transform, which "
"will achieve the desired effect."
msgstr ""

#: ../../docs/tutorials/3d/inverse_kinematics.rst:152
msgid ""
"Create a new Spatial node under the root node and rename it to \"target\". "
"Then modify the ``_ready()`` function to look like this:"
msgstr ""
