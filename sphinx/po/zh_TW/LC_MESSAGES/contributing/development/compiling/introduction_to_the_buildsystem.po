# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 18:00+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to the buildsystem"
msgstr "建置系統簡介"

msgid "Setup"
msgstr ""

msgid ""
":ref:`Godot uses the SCons build system. <doc_faq_why_scons>` Please refer "
"to the documentation for:"
msgstr ""

#, fuzzy
msgid ":ref:`doc_compiling_for_android`"
msgstr ":ref:`doc_optimizing_for_size`"

#, fuzzy
msgid ":ref:`doc_compiling_for_ios`"
msgstr ":ref:`doc_optimizing_for_size`"

#, fuzzy
msgid ":ref:`doc_compiling_for_linuxbsd`"
msgstr ":ref:`doc_complying_with_licenses`"

#, fuzzy
msgid ":ref:`doc_compiling_for_macos`"
msgstr ":ref:`doc_optimizing_for_size`"

#, fuzzy
msgid ":ref:`doc_compiling_for_uwp`"
msgstr ":ref:`doc_optimizing_for_size`"

#, fuzzy
msgid ":ref:`doc_compiling_for_web`"
msgstr ":ref:`doc_optimizing_for_size`"

#, fuzzy
msgid ":ref:`doc_compiling_for_windows`"
msgstr ":ref:`doc_optimizing_for_size`"

msgid "Platform selection"
msgstr "選擇平台"

msgid ""
"Godot's build system will begin by detecting the platforms it can build for. "
"If not detected, the platform will simply not appear on the list of "
"available platforms. The build requirements for each platform are described "
"in the rest of this tutorial section."
msgstr ""
"Godot 的建置系統會通過偵測能建置的平台來開始。如果為偵測到，則該平台不會顯示"
"在可用平台的列表中。建置對各個平台的需求寫在本教學接下來的段落中。"

msgid ""
"SCons is invoked by just calling ``scons``. If no platform is specified, "
"SCons will detect the target platform automatically based on the host "
"platform. It will then start building for the target platform right away."
msgstr ""
"只需要呼叫 ``scons`` 就可以開啟 SCons。若未指定平台，SCons 會自動依據宿主機的"
"平台來偵測目標平台。接著，SCons 會直接開始為目標平台進行建置。"

msgid "To list the available target platforms, use ``scons platform=list``::"
msgstr "若要列出所有可用的目標平台，請使用 ``scons platform=list`` ："

#, fuzzy
msgid ""
"To build for a platform (for example, ``linuxbsd``), run with the "
"``platform=`` (or ``p=`` to make it short) argument:"
msgstr ""
"若要為某個平台建置 (如 x11)，請使用 ``platform=`` (或簡寫為 ``p=`` ) 印數來執"
"行："

msgid ""
"This will start the build process, which will take a while. By default, "
"Godot's SCons setup is configured to use all CPU threads but one (to keep "
"the system responsive during compilation). If you want to adjust how many "
"CPU threads SCons will use, use the ``-j <threads>`` parameter to specify "
"how many threads will be used for the build."
msgstr ""

#, fuzzy
msgid "Example for using 4 threads:"
msgstr "使用 4 核心的例子："

msgid "Resulting binary"
msgstr "產生的二進位檔"

msgid ""
"The resulting binaries will be placed in the ``bin/`` subdirectory, "
"generally with this naming convention::"
msgstr "產生的二進位檔會放在 ``bin/`` 子資料夾中。通常來說會依照下列命名慣例："

msgid "For the previous build attempt, the result would look like this::"
msgstr "依照前面這個建置例子，產生的結果會長這樣："

#, fuzzy
msgid ""
"This means that the binary is for Linux *or* \\*BSD (*not* both), is not "
"optimized, has the whole editor compiled in, and is meant for 64 bits."
msgstr ""
"這表示，這個二進位檔是給 X11 用的，並未經過最佳化，有編譯進工具 (整個編輯"
"器)，且是用於 64 位元的。"

msgid "A Windows binary with the same configuration will look like this:"
msgstr "使用相同設定的 Window 二進位執行檔會長這樣："

#, fuzzy
msgid ""
"Copy that binary to any location you like, as it contains the Project "
"Manager, editor and all means to execute the game. However, it lacks the "
"data to export it to the different platforms. For that the export templates "
"are needed (which can be either downloaded from `godotengine.org <https://"
"godotengine.org/>`__, or you can build them yourself)."
msgstr ""
"由於該二進位執行檔包含了專案管理員、編輯器與所有用於執行遊戲的東西，可以將該"
"執行檔複製到任何地方。但是，這個二進位執行檔缺少了可以匯出至其他平台的資料。"
"要匯出至其他平台，則需要匯出樣板 (匯出樣板可以從 `godotengine.org <https://"
"godotengine.org/>`__ 下載，或是可自行建置)。"

msgid ""
"Aside from that, there are a few standard options that can be set in all "
"build targets, and which will be explained below."
msgstr "除此之外，還有其他能用於所有建置目標的標準選項，下方將進行說明。"

msgid "Target"
msgstr "目標"

#, fuzzy
msgid ""
"Target controls if the editor is contained and debug flags are used. All "
"builds are optimized. Each mode means:"
msgstr "建置目標是用來控制最佳化旗標與偵錯旗標的。各個模式分別代表："

msgid ""
"**editor**: Build with editor, optimized, with debugging code (defines: "
"``TOOLS_ENABLED``, ``DEBUG_ENABLED``, ``-O2``/``/O2``)"
msgstr ""

msgid ""
"**template_debug**: Build with C++ debugging symbols (defines: "
"``DEBUG_ENABLED``, ``-O2``/``/O2``)"
msgstr ""

msgid "**template_release**: Build without symbols (defines: ``-O3``/``/O2``)"
msgstr ""

#, fuzzy
msgid ""
"The editor is enabled by default in all PC targets (Linux, Windows, macOS), "
"disabled for everything else. Disabling the editor produces a binary that "
"can run projects but does not include the editor or the Project Manager."
msgstr ""
"工具預設會在所有 PC 目標上啟用 (Linux, Window, macOS)，其他平台則預設關閉。如"
"果將工具禁用，產生的二進位檔則只能執行專案，而不會包含編輯器與專案管理員。"

#, fuzzy
msgid "Development and production aliases"
msgstr "開發"

msgid ""
"When creating builds for development (running debugging/:ref:`profiling "
"<doc_using_cpp_profilers>` tools), you often have different goals compared "
"to production builds (making binaries as fast and small as possible)."
msgstr ""

#, fuzzy
msgid "Godot provides two aliases for this purpose:"
msgstr "Godot 提供了一系列常見的容器："

msgid ""
"``dev_mode=yes`` is an alias for ``verbose=yes warnings=extra werror=yes "
"tests=yes``. This enables warnings-as-errors behavior (similar to Godot's "
"continuous integration setup) and also builds :ref:`unit tests "
"<doc_unit_testing>` so you can run them locally."
msgstr ""

msgid ""
"``production=yes`` is an alias for ``use_static_cpp=yes debug_symbols=no "
"lto=auto``. Statically linking libstdc++ allows for better binary "
"portability when compiling for Linux. This alias also enables link-time "
"optimization when compiling for Linux, Web and Windows with MinGW, but keeps "
"LTO disabled when compiling for macOS, iOS or Windows with MSVC. This is "
"because LTO on those platforms is very slow to link or has issues with the "
"generated code."
msgstr ""

msgid ""
"You can manually override options from those aliases by specifying them on "
"the same command line with different values. For example, you can use "
"``scons production=yes debug_symbols=yes`` to create production-optimized "
"binaries with debugging symbols included."
msgstr ""

msgid "Dev build"
msgstr ""

msgid ""
"``dev_build`` should **not** be confused with ``dev_mode``, which is an "
"alias for several development-related options (see above)."
msgstr ""

msgid ""
"When doing engine development the ``dev_build`` option can be used together "
"with ``target`` to enable dev-specific code. ``dev_build`` defines "
"``DEV_ENABLED``, disables optimization (``-O0``/``/0d``), enables generating "
"debug symbols, and does not define ``NDEBUG`` (so ``assert()`` works in "
"thirdparty libraries)."
msgstr ""

msgid ""
"This flag appends the ``.dev`` suffix (for development) to the generated "
"binary name."
msgstr ""

msgid ""
"There are additional SCons options to enable *sanitizers*, which are tools "
"you can enable at compile-time to better debug certain engine issues. See :"
"ref:`doc_using_sanitizers` for more information."
msgstr ""

#, fuzzy
msgid "Debugging symbols"
msgstr "偵錯"

msgid ""
"By default, ``debug_symbols=no`` is used, which means **no** debugging "
"symbols are included in compiled binaries. Use ``debug_symbols=yes`` to "
"include debug symbols within compiled binaries, which allows debuggers and "
"profilers to work correctly. Debugging symbols are also required for Godot's "
"crash stacktraces to display with references to source code files and lines."
msgstr ""

msgid ""
"The downside is that debugging symbols are large files (significantly larger "
"than the binaries themselves). As a result, official binaries currently do "
"not include debugging symbols. This means you need to compile Godot yourself "
"to have access to debugging symbols."
msgstr ""

msgid ""
"When using ``debug_symbols=yes``, you can also use "
"``separate_debug_symbols=yes`` to put debug information in a separate file "
"with a ``.debug`` suffix. This allows distributing both files independently. "
"Note that on Windows, when compiling with MSVC, debugging information is "
"*always* written to a separate ``.pdb`` file regardless of "
"``separate_debug_symbols``."
msgstr ""

msgid ""
"Use the ``strip <path/to/binary>`` command to remove debugging symbols from "
"a binary you've already compiled."
msgstr ""

#, fuzzy
msgid "Optimization level"
msgstr "最佳化"

msgid "Several compiler optimization levels can be chosen from:"
msgstr ""

msgid ""
"``optimize=speed_trace`` *(default when targeting non-Web platforms)*: "
"Favors execution speed at the cost of larger binary size. Optimizations may "
"sometimes negatively impact debugger usage (stack traces may be less "
"accurate. If this occurs to you, use ``optimize=debug`` instead."
msgstr ""

msgid ""
"``optimize=speed``: Favors even more execution speed, at the cost of even "
"larger binary size compared to ``optimize=speed_trace``. Even less friendly "
"to debugging compared to ``optimize=debug``, as this uses the most "
"aggressive optimizations available."
msgstr ""

msgid ""
"``optimize=size`` *(default when targeting the Web platform)*: Favors small "
"binaries at the cost of slower execution speed."
msgstr ""

msgid ""
"``optimize=debug``: Only enables optimizations that do not impact debugging "
"in any way. This results in faster binaries than ``optimize=none``, but "
"slower binaries than ``optimize=speed_trace``."
msgstr ""

msgid ""
"``optimize=none``: Do not perform any optimization. This provides the "
"fastest build times, but the slowest execution times."
msgstr ""

msgid ""
"``optimize=custom`` *(advanced users only)*: Do not pass optimization "
"arguments to the C/C++ compilers. You will have to pass arguments manually "
"using the ``CFLAGS``, ``CCFLAGS`` and ``CXXFLAGS`` SCons options."
msgstr ""

#, fuzzy
msgid "Architecture"
msgstr "架構圖"

#, fuzzy
msgid ""
"The ``arch`` option is meant to control the CPU or OS version intended to "
"run the binaries. It is focused mostly on desktop platforms and ignored "
"everywhere else."
msgstr ""
"位元是用來控制要執行二進位檔的 CPU 或作業系統版本。主要是用於桌面環境，而其他"
"平台通常會忽略此一旗標。"

msgid ""
"Supported values for the ``arch`` option are **auto**, **x86_32**, "
"**x86_64**, **arm32**, **arm64**, **rv64**, **ppc32**, **ppc64** and "
"**wasm32**."
msgstr ""

#, fuzzy
msgid ""
"This flag appends the value of ``arch`` to resulting binaries when "
"relevant.  The default value ``arch=auto`` detects the architecture that "
"matches the host platform."
msgstr ""
"該旗標會加在最終產生的二進位檔檔名後方加上對應的 ``.32`` 或 ``.64`` 後置詞。"
"若使用 ``bits=default`` ，則會使用偵測到的架構。"

msgid "Custom modules"
msgstr "自定義模組"

msgid ""
"It's possible to compile modules residing outside of Godot's directory tree, "
"along with the built-in modules."
msgstr "除了內建模組之外，還可以編譯在 Godot 資料夾外部的模組。"

msgid ""
"A ``custom_modules`` build option can be passed to the command line before "
"compiling. The option represents a comma-separated list of directory paths "
"containing a collection of independent C++ modules that can be seen as C++ "
"packages, just like the built-in ``modules/`` directory."
msgstr ""
"可以在編譯前將 ``custom_modules`` 建置選項傳給命令行。該選項為以半形逗號分隔"
"的列表，內含資料夾路徑。各個資料夾則需放置與內建 ``modules/`` 資料夾內一樣，"
"可被視為 C++ 套件的獨立的 C++ 模組。"

msgid ""
"For instance, it's possible to provide both relative, absolute, and user "
"directory paths containing such modules:"
msgstr ""
"舉例來說，可以同時提供包含這種模組的相對路徑、絕對路徑、以及使用者資料夾路"
"徑："

msgid ""
"If there's any custom module with the exact directory name as a built-in "
"module, the engine will only compile the custom one. This logic can be used "
"to override built-in module implementations."
msgstr ""
"若有自定模組的資料夾名稱與內建模組的名稱相同，則 Godot 只會編譯自定模組。可以"
"利用這個特性來複寫掉內建的模組。"

#, fuzzy
msgid ":ref:`doc_custom_modules_in_cpp`"
msgstr ":ref:`doc_custom_modules_in_c++`"

msgid "Cleaning generated files"
msgstr "清理產生的檔案"

msgid ""
"Sometimes, you may encounter an error due to generated files being present. "
"You can remove them by using ``scons --clean <options>``, where "
"``<options>`` is the list of build options you've used to build Godot "
"previously."
msgstr ""
"有時候可能會因為已有產生出來的檔案而發聲錯誤。可以使用 ``scons --clean <選項"
">`` 來移除產生的檔案。``<選項>`` 是之前用來建置 Godot 的建置選項列表。"

msgid ""
"Alternatively, you can use ``git clean -fixd`` which will clean build "
"artifacts for all platforms and configurations. Beware, as this will remove "
"all untracked and ignored files in the repository. Don't run this command if "
"you have uncommitted work!"
msgstr ""
"另外，也可以使用 ``git clean --fixd`` ，該指令會清除所有平台有設定的建置結"
"果。請小心，因為這個指令同時也會移除儲存庫中所有尚未被 Git 追蹤的檔案以及 "
"Git 忽略的檔案。若有還未 Commit 的更改，請不要執行這個指令！"

msgid "Other build options"
msgstr "其他建置選項"

msgid ""
"There are several other build options that you can use to configure the way "
"Godot should be built (compiler, debug options, etc.) as well as the "
"features to include/disable."
msgstr ""
"還有其他一些可以用來設定如何建置 Godot 的建置選項 (調整編譯器、除錯選項…等)，"
"還有一些可以調整要包含或禁用特定功能的選項。"

msgid ""
"Check the output of ``scons --help`` for details about each option for the "
"version you are willing to compile."
msgstr ""
"請檢視 ``scons --help`` 的輸出，以瞭解各個選項在要編譯的版本上之詳細說明。"

msgid "Overriding the build options"
msgstr "複寫建置選項"

msgid "Using a file"
msgstr "使用檔案"

msgid ""
"The default ``custom.py`` file can be created at the root of the Godot "
"Engine source to initialize any SCons build options passed via the command "
"line:"
msgstr ""
"預設可以在 Godot Engine 的原始碼根目錄建立一個 ``custom.py`` 檔案來初始化任何"
"通過命令行傳給 SCons 的建置選項："

#, fuzzy
msgid ""
"You can also disable some of the builtin modules before compiling, saving "
"some time it takes to build the engine. See :ref:`doc_optimizing_for_size` "
"page for more details."
msgstr ""
"也可以在編譯前禁用一些內建模組，來節省建置引擎的時間。請參考 :ref:"
"`doc_optimizing_for_size` 一頁以瞭解詳情。"

msgid ""
"You can use the online `Godot build options generator <https://godot-build-"
"options-generator.github.io/>`__ to generate a ``custom.py`` file containing "
"SCons options. You can then save this file and place it at the root of your "
"Godot source directory."
msgstr ""
"可以通過 `Godot 建置選項產生器 <https://godot-build-options-generator.github."
"io/>`__ 線上工具來產生包含 SCons 選項的 ``custom.py`` 檔案。然後將該檔案保存"
"並放置於 Godot 原始碼資料夾的根目錄。"

msgid ""
"Another custom file can be specified explicitly with the ``profile`` command "
"line option, both overriding the default build configuration:"
msgstr ""
"另外也可以通過 ``profile`` 命令行選項來明確指定要用哪個自定檔案。兩種方法都會"
"複寫預設的建置組態："

msgid ""
"Build options set from the file can be overridden by the command line "
"options."
msgstr "通過檔案設定的建置選項可以通過命令行選項來複寫。"

msgid "It's also possible to override the options conditionally:"
msgstr "也可以有條件地複寫選項："

msgid "Using the SCONSFLAGS"
msgstr "使用 SCONSFLAGS"

msgid ""
"``SCONSFLAGS`` is an environment variable which is used by the SCons to set "
"the options automatically without having to supply them via the command line."
msgstr ""
"``SCONSFLAGS`` 是 SCons 用來自動設定選項的環境變數，使用 ``SCONSFLAGS`` 就不"
"需要通過命令行來給定選項。"

#, fuzzy
msgid ""
"For instance, you may want to force a number of CPU threads with the "
"aforementioned ``-j`` option for all future builds:"
msgstr ""
"舉例來說，我們可能會想使用剛才提到的 ``-j`` 選項來同時為所有功能進行建置："

msgid "SCU (single compilation unit) build"
msgstr ""

msgid ""
"Regular builds tend to be bottlenecked by including large numbers of headers "
"in each compilation translation unit. Primarily to speed up development "
"(rather than for production builds), Godot offers a \"single compilation "
"unit\" build (aka \"Unity / Jumbo\" build)."
msgstr ""

msgid ""
"For the folders accelerated by this option, multiple ``.cpp`` files are "
"compiled in each translation unit, so headers can be shared between multiple "
"files, which can dramatically decrease build times."
msgstr ""

msgid "To make a SCU build, use the ``scu_build=yes`` SCons option."
msgstr ""

msgid ""
"When developing a Pull Request using SCU builds, be sure to make a regular "
"build prior to submitting the PR. This is because SCU builds by nature "
"include headers from earlier ``.cpp`` files in the translation unit, "
"therefore won't catch all the includes you will need in a regular build. The "
"CI will catch these errors but it will usually be faster to catch them on a "
"local build on your machine."
msgstr ""

msgid "Export templates"
msgstr "匯出樣板"

msgid ""
"Official export templates are downloaded from the Godot Engine site: "
"`godotengine.org <https://godotengine.org/>`__. However, you might want to "
"build them yourself (in case you want newer ones, you are using custom "
"modules, or simply don't trust your own shadow)."
msgstr ""
"官方匯出樣板可以從 Godot Engine 網站進行下載: `godotengine.org <https://"
"godotengine.org/>`__ 。但你也可以自行進行建置 (例如當需要新版本、使用自定模"
"組、或是不信任其他人建置的版本時)。"

msgid ""
"If you download the official export templates package and unzip it, you will "
"notice that most files are optimized binaries or packages for each platform:"
msgstr ""
"若下載官方匯出模板套件並解壓縮後，可以注意到大多數檔案都是為各個平台最佳化過"
"的二進位檔或套件："

msgid ""
"To create those yourself, follow the instructions detailed for each platform "
"in this same tutorial section. Each platform explains how to create its own "
"template."
msgstr ""
"若要自己進行建置，請依照個別平台教學中的詳細說明來進行。各個平台的說明文件中"
"都解釋了如何建置樣板。"

msgid ""
"The ``version.txt`` file should contain the corresponding Godot version "
"identifier. This file is used to install export templates in a version-"
"specific directory to avoid conflicts. For instance, if you are building "
"export templates for Godot 3.1.1, ``version.txt`` should contain ``3.1.1."
"stable`` on the first line (and nothing else). This version identifier is "
"based on the ``major``, ``minor``, ``patch`` (if present) and ``status`` "
"lines of the `version.py file in the Godot Git repository <https://github."
"com/godotengine/godot/blob/master/version.py>`__."
msgstr ""
"``version.txt`` 檔案中應該要包含有對應的 Godot 版本識別項。這個檔案是用來將匯"
"出樣板安裝到版本特定的資料夾中，以避免衝突。舉例來說，如果為 Godot 3.1.1 建置"
"匯出樣板，則 ``version.txt`` 的第一行應包含 ``3.1.1.stable`` (且不得含有其他"
"內容)。這個版本識別項是基於 ``主板號 Major`` 、 ``次版號 Minor`` 、 ``修訂號 "
"Patch`` (若有的話)、以及 `Godot Git 儲存庫中的 version.py 檔案 <https://"
"github.com/godotengine/godot/blob/master/version.py>`__ ``狀態 Status`` 。"

msgid ""
"If you are developing for multiple platforms, macOS is definitely the most "
"convenient host platform for cross-compilation, since you can cross-compile "
"for almost every target (except for UWP). Linux and Windows come in second "
"place, but Linux has the advantage of being the easier platform to set this "
"up."
msgstr ""
"若要為多個平台進行開發，那麼 macOS 絕對是進行交叉編譯最方便的平台了，因為 (除"
"了 UWP 外) 幾乎可以為所有平台進行交叉編譯。Linux 與 Windows 則為其次，但 "
"Linux 的優點是比起其他平台更容易安裝開發環境。"

msgid "Translation status"
msgstr "翻譯狀態"
