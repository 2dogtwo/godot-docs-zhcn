# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-02 13:32+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting.rst:4
msgid "Scripting"
msgstr "撰寫腳本"

#: ../../docs/getting_started/step_by_step/scripting.rst:7
msgid "Introduction"
msgstr "簡介"

#: ../../docs/getting_started/step_by_step/scripting.rst:9
msgid ""
"Before Godot 3.0, the only choice for scripting a game was to use :ref:"
"`GDScript<doc_gdscript>`. Nowadays, Godot has four (yes, four!) official "
"languages and the ability to add extra scripting languages dynamically!"
msgstr ""
"在 3.0 版以前的 Godot 中只能使用 :ref:`GDScript<doc_gdscript>` 來為遊戲編寫程"
"式。但現在 Godot 有四種 (沒錯，四種！) 官方語言，且還可以動態新增其他腳本語"
"言！"

#: ../../docs/getting_started/step_by_step/scripting.rst:13
msgid ""
"This is great, mostly due to the large amount of flexibility provided, but "
"it also makes our work supporting languages more difficult."
msgstr ""
"這樣很棒，因為這樣彈性就更大了，但另一方面，要支援各個語言也需要做更多的工"
"作。"

#: ../../docs/getting_started/step_by_step/scripting.rst:16
msgid ""
"The \"main\" languages in Godot, though, are GDScript and VisualScript. The "
"main reason to choose them is their level of integration with Godot, as this "
"makes the experience smoother; both have slick editor integration, while C# "
"and C++ need to be edited in a separate IDE. If you are a big fan of "
"statically typed languages, go with C# and C++ instead."
msgstr ""
"雖然，Godot 的「主要」語言是 GDScript 與視覺腳本 (VisualScript)。選擇這兩個語"
"言的主要原因就是與 Godot 的高度整合可以讓開發流程變得更順暢。這兩個語言都有完"
"整的編輯器整合，而 C# 與 C++ 則需要用不同的 IDE 來進行開發。如果你很愛靜態型"
"別語言的話，可以使用 C# 與 C++。"

#: ../../docs/getting_started/step_by_step/scripting.rst:22
msgid "GDScript"
msgstr "\\ GDScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:24
msgid ""
":ref:`GDScript<doc_gdscript>` is, as mentioned above, the main language used "
"in Godot. Using it has some positive points compared to other languages due "
"to its high integration with Godot:"
msgstr ""
"就像剛才說的， :ref:`GDScript<doc_gdscript>` 是 Godot 中的主要語言。因為與 "
"Godot 高度整合，用 GDScript 比起其他語言有更多優點："

#: ../../docs/getting_started/step_by_step/scripting.rst:28
msgid ""
"It's simple, elegant, and designed to be familiar for users of other "
"languages such as Lua, Python, Squirrel, etc."
msgstr ""
"GDScript 很簡單、優雅，而且對於其他語言的使用者如 Lua, Python, Squirrel…等來"
"說會感到很親切。"

#: ../../docs/getting_started/step_by_step/scripting.rst:29
msgid "Loads and compiles blazingly fast."
msgstr "超快速的載入與編譯。"

#: ../../docs/getting_started/step_by_step/scripting.rst:30
msgid ""
"The editor integration is a pleasure to work with, with code completion for "
"nodes, signals, and many other items pertaining to the scene being edited."
msgstr ""
"編輯器整合讓作業過程變得更開心。節點、訊號以及其他與正在編輯的場景有關的項目"
"都能進行程式碼補全。"

#: ../../docs/getting_started/step_by_step/scripting.rst:31
msgid ""
"Has vector types built-in (such as Vectors, transforms, etc.), making it "
"efficient for heavy use of linear algebra."
msgstr ""
"有內建 Vector 型別 (如 Vector, Transform…等)，當需要大量線性代數運算時更有效"
"率。"

#: ../../docs/getting_started/step_by_step/scripting.rst:32
msgid ""
"Supports multiple threads as efficiently as statically typed languages - one "
"of the limitations that made us avoid VMs such as Lua, Squirrel, etc."
msgstr ""
"跟靜態型別語言一樣支援多執行緒 — 這是我們不選擇使用如 Lua, Squirrel…等語言 "
"VM 的其中一個原因。"

#: ../../docs/getting_started/step_by_step/scripting.rst:33
msgid ""
"Uses no garbage collector, so it trades a small bit of automation (most "
"objects are reference counted anyway), by determinism."
msgstr ""
"不使用記憶體回收行程。以決定性 (Determinism) 取代一小部分的自動化 (大部分物件"
"都使用引用計數)。"

#: ../../docs/getting_started/step_by_step/scripting.rst:34
msgid ""
"Its dynamic nature makes it easy to optimize sections of code in C++ (via "
"GDNative) if more performance is required, all without recompiling the "
"engine."
msgstr ""
"由於動態特性，需要更高性能時可以把一部分程式碼用 C++ 來最佳化 (通過 "
"GDNative)，且不用重新編譯整個引擎。"

#: ../../docs/getting_started/step_by_step/scripting.rst:36
msgid ""
"If you're undecided and have experience with programming, especially "
"dynamically typed languages, go for GDScript!"
msgstr ""
"如果你還沒決定好要用哪個語言，而且有過寫程式的經驗——特別是動態型別語言，選擇 "
"GDScript 吧！"

#: ../../docs/getting_started/step_by_step/scripting.rst:40
msgid "VisualScript"
msgstr "視覺腳本 (VisualScript)"

#: ../../docs/getting_started/step_by_step/scripting.rst:42
msgid ""
"Beginning with 3.0, Godot offers :ref:`Visual "
"Scripting<doc_what_is_visual_script>`. This is a typical implementation of a "
"\"blocks and connections\" language, but adapted to how Godot works."
msgstr ""
"Godot 從 3.0 版開始提供 :ref:`視覺腳本 (VisualScript) "
"<doc_what_is_visual_script>` 。視覺腳本是一種典型的「方塊與連接 (Blocks and "
"Connections)」語言實作，只是改成了 Godot 版。"

#: ../../docs/getting_started/step_by_step/scripting.rst:46
msgid ""
"Visual scripting is a great tool for non-programmers, or even for "
"experienced developers who want to make parts of the code more accessible to "
"others, like game designers or artists."
msgstr ""
"對於非程式設計師來說，以圖形化寫程式是一個很好用的工具。甚至對於有經驗的程式"
"設計師來說，當想要讓其他如遊戲設計師或是美術家之類的人接觸程式碼時也很有用。"

#: ../../docs/getting_started/step_by_step/scripting.rst:50
msgid ""
"It can also be used by programmers to build state machines or custom visual "
"node workflows - for example, a dialogue system."
msgstr ""
"程式設計師也可以用視覺腳本來製作狀態機或是自定視覺節點工作流程 (如：對話框系"
"統)。"

#: ../../docs/getting_started/step_by_step/scripting.rst:55
msgid ".NET / C#"
msgstr ".NET / C#"

#: ../../docs/getting_started/step_by_step/scripting.rst:57
msgid ""
"As Microsoft's C# is a favorite amongst game developers, we have added "
"official support for it. C# is a mature language with tons of code written "
"for it, and support was added thanks to a generous donation from Microsoft."
msgstr ""
"微軟的 C# 是很受遊戲開發者歡迎的語言，所以 Godot 也新增了對 C# 的官方支援。"
"C# 是一個成熟的語言，有許多程式都是用 C# 寫的。要感謝微軟慷慨的捐款讓我們能夠"
"支援 C#。"

#: ../../docs/getting_started/step_by_step/scripting.rst:62
msgid ""
"It has an excellent tradeoff between performance and ease of use, although "
"one must be aware of its garbage collector."
msgstr ""
"C# 在易用度與效能間的平衡做得非常優秀，雖然需要注意一下記憶體回收行程。"

#: ../../docs/getting_started/step_by_step/scripting.rst:65
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory any third-party .NET library or framework can be used for scripting "
"in Godot, as well as any Common Language Infrastructure-compliant "
"programming language, such as F#, Boo or ClojureCLR. In practice however, C# "
"is the only officially supported .NET option."
msgstr ""
"Godot 使用了 `Mono <https://mono-project.com>`_ .NET 執行環境，理論上任一第三"
"方 .NET 函式庫或框架都可以拿來在 Godot 裡使用。同樣的，理論上其他 CLI "
"(Common Language Infrastructure，通用語言基礎結構) 相容的程式語言也都能使用，"
"如 F#, Boo 或是 ClojureCLR。但 C# 是唯一官方支援的 .NET 選項。"

#: ../../docs/getting_started/step_by_step/scripting.rst:71
msgid "GDNative / C++"
msgstr "\\ GDNative / C++"

#: ../../docs/getting_started/step_by_step/scripting.rst:73
msgid ""
"Finally, one of our brightest additions for the 3.0 release: GDNative allows "
"scripting in C++ without needing to recompile (or even restart) Godot."
msgstr ""
"最後是 3.0 版所新增的亮點：GDNative。使用 GDNative 就可以在不需要重新編譯 (甚"
"至重新啟動) Godot 的情況下以 C++ 來寫腳本。"

#: ../../docs/getting_started/step_by_step/scripting.rst:77
msgid ""
"Any C++ version can be used, and mixing compiler brands and versions for the "
"generated shared libraries works perfectly, thanks to our use of an internal "
"C API Bridge."
msgstr ""
"可以使用任一版本的 C++。而因為使用了內部 C API Bridge，也可以正常使用由不同編"
"譯器產生的共用函式庫。"

#: ../../docs/getting_started/step_by_step/scripting.rst:81
msgid ""
"This language is the best choice for performance and does not need to be "
"used throughout an entire game, as other parts can be written in GDScript or "
"Visual Script. However, the API is clear and easy to use as it resembles, "
"mostly, Godot's actual C++ API."
msgstr ""
"若要追求效能，GDNative / C++ 是最好的選擇。而且不需要整個遊戲都改用 "
"GDNative / C++，其他部分還是可以用 GDScript 或視覺腳本 (Visual Script) 來寫。"
"話雖如此，GDNative 的 API 還是很清楚簡單的，因為大部分都是直接用 Godot 原生 "
"API。"

#: ../../docs/getting_started/step_by_step/scripting.rst:86
msgid ""
"More languages can be made available through the GDNative interface, but "
"keep in mind we don't have official support for them."
msgstr ""
"還能通過 GDNative 的介面來支援更多語言，但請記得 Godot 對其他語言並無官方支"
"援。"

#: ../../docs/getting_started/step_by_step/scripting.rst:90
msgid "Scripting a scene"
msgstr "為場景編寫腳本"

#: ../../docs/getting_started/step_by_step/scripting.rst:92
msgid ""
"For the rest of this tutorial we'll set up a GUI scene consisting of a "
"button and a label, where pressing the button will update the label. This "
"will demonstrate:"
msgstr ""
"我們會在這篇教學接下來的部分建立一個 GUI 場景，其中有按鈕與標籤。按下按鈕後會"
"更新標籤。我們會示範："

#: ../../docs/getting_started/step_by_step/scripting.rst:96
msgid "Writing a script and attaching it to a node."
msgstr "撰寫腳本並把腳本附加到節點上。"

#: ../../docs/getting_started/step_by_step/scripting.rst:97
msgid "Hooking up UI elements via signals."
msgstr "通過訊號 (Signal) 來串聯 UI 元素。"

#: ../../docs/getting_started/step_by_step/scripting.rst:98
msgid "Writing a script that can access other nodes in the scene."
msgstr "撰寫能夠存取場景中其他節點的腳本。"

#: ../../docs/getting_started/step_by_step/scripting.rst:100
msgid ""
"Before continuing, make sure to skim and bookmark the :ref:"
"`GDScript<doc_gdscript>` reference. It's a language designed to be simple, "
"and the reference is structured into sections to make it easier to get an "
"overview of the concepts."
msgstr ""
"在這之前，請記得要先閱讀 :ref:`GDScript<doc_gdscript>` 參考手冊並將 GDScript "
"頁面加到瀏覽器書籤內。GDScript 被設計得很簡單，而且這個參考手冊被區分成了多個"
"段落，能夠很容易掌握各種概念。"

#: ../../docs/getting_started/step_by_step/scripting.rst:105
msgid "Scene setup"
msgstr "場景設定"

#: ../../docs/getting_started/step_by_step/scripting.rst:107
msgid ""
"If you still have the \"instancing\" project open from the previous "
"tutorial, then close that out (Project -> Quit to Project List) and create a "
"New Project."
msgstr ""
"若上一個教學中的「實體化」專案還開著的話，請先關閉該專案 ([專案] -> [退出至專"
"案列表]) 並建立新專案。"

#: ../../docs/getting_started/step_by_step/scripting.rst:109
msgid ""
"Use the \"Add Child Node\" dialogue accessed from the Scene tab (or by "
"pressing :kbd:`Ctrl + A`) to create a hierarchy with the following nodes:"
msgstr ""
"從場景分頁 (或是鍵盤 :kbd:`Ctrl + A` ) 裡打開「新增子節點」視窗來建立下列架構"
"的節點："

#: ../../docs/getting_started/step_by_step/scripting.rst:112
msgid "Panel"
msgstr "面板"

#: ../../docs/getting_started/step_by_step/scripting.rst:114
msgid "Label"
msgstr "標籤"

#: ../../docs/getting_started/step_by_step/scripting.rst:115
msgid "Button"
msgstr "按鈕"

#: ../../docs/getting_started/step_by_step/scripting.rst:117
msgid "The scene tree should look like this:"
msgstr "場景樹應該會長這樣："

#: ../../docs/getting_started/step_by_step/scripting.rst:121
msgid ""
"Use the 2D editor to position and resize the Button and Label so that they "
"look like the image below. You can set the text from the Inspector tab."
msgstr ""
"使用 2D 編輯器來調整 Button 跟 Label 的位置與大小，讓這兩個節點看起來像下面這"
"樣。可以從屬性面板裡設定文字內容。"

#: ../../docs/getting_started/step_by_step/scripting.rst:126
msgid "Finally, save the scene with a name such as ``sayhello.tscn``."
msgstr "最後，保存場景為 ``sayhello.tscn`` 之類的名稱。"

#: ../../docs/getting_started/step_by_step/scripting.rst:131
msgid "Adding a script"
msgstr "新增腳本"

#: ../../docs/getting_started/step_by_step/scripting.rst:133
msgid ""
"Right click on the Panel node, then select \"Attach Script\" from the "
"context menu:"
msgstr "右鍵點擊 Panel 節點，然後在右鍵選單中選擇 [附加腳本]："

#: ../../docs/getting_started/step_by_step/scripting.rst:138
msgid ""
"The script creation dialog will pop up. This dialog allows you to set the "
"script's language, class name, and other relevant options."
msgstr ""
"接著會彈出腳本建立視窗。在這個視窗裡可以設定腳本所使用的語言、類別名稱以及其"
"他相關設定。"

#: ../../docs/getting_started/step_by_step/scripting.rst:141
msgid ""
"In GDScript, the file itself represents the class, so the class name field "
"is not editable."
msgstr ""
"GDScript 的話，一個檔案就是一個類別，所以 [類別名稱] 欄位會沒辦法編輯。"

#: ../../docs/getting_started/step_by_step/scripting.rst:144
msgid ""
"The node we're attaching the script to is a panel, so the Inherits field "
"will automatically be filled in with \"Panel\". This is what we want, as the "
"script's goal is to extend the functionality of our panel node."
msgstr ""
"我們正在把腳本附加到 Panel 節點上，所以 [繼承] 欄位會自動填寫為「Panel」。我"
"們在做的正是使用腳本來擴充 Panel 節點的功能。"

#: ../../docs/getting_started/step_by_step/scripting.rst:148
msgid "Finally, enter a path name for the script and select Create:"
msgstr "最後，輸入腳本路徑然後點擊 [建立]："

#: ../../docs/getting_started/step_by_step/scripting.rst:152
msgid ""
"The script will then be created and added to the node. You can see this as "
"an \"Open script\" icon next to the node in the Scene tab, as well as in the "
"script property under Inspector:"
msgstr ""
"新增腳本後會腳本被附加到節點上。在場景分頁裡的節點旁邊會出現「打開腳本」圖"
"示，屬性面板裡的腳本 (Script) 屬性也可以看到相同的選項："

#: ../../docs/getting_started/step_by_step/scripting.rst:158
msgid ""
"To edit the script, select either of these buttons, both of which are "
"highlighted in the above image. This will bring you to the script editor, "
"where a default template will be included:"
msgstr ""
"上圖這兩個按鈕中的任一個都可以用來編輯腳本。點擊後會打開腳本編輯器，裡面會有"
"預設的腳本樣板："

#: ../../docs/getting_started/step_by_step/scripting.rst:163
msgid ""
"There's not much there. The ``_ready()`` function is called when the node, "
"and all its children, enters the active scene. **Note:** ``_ready()`` is not "
"the constructor; the constructor is instead ``_init()``."
msgstr ""
"這裡沒很多東西。節點及其所有子節點進入有效場景後會呼叫 ``_ready()`` 函式。 **"
"請注意：** ``_ready()`` 不是建置函式，建置函式是 ``_init()`` 。"

#: ../../docs/getting_started/step_by_step/scripting.rst:168
msgid "The role of the script"
msgstr "腳本的功能"

#: ../../docs/getting_started/step_by_step/scripting.rst:170
msgid ""
"A script adds behavior to a node. It is used to control how the node "
"functions as well as how it interacts with other nodes: children, parent, "
"siblings, and so on. The local scope of the script is the node. In other "
"words, the script inherits the functions provided by that node."
msgstr ""
"腳本可以增加節點的行為、控制節點的功能以及與決定如何與其他節點互動 (子節點、"
"母節點、同級節點等)。腳本的區域作用域 (Local Scope) 為節點。換句話說，腳本會"
"繼承節點的功能。"

#: ../../docs/getting_started/step_by_step/scripting.rst:181
msgid "Handling a signal"
msgstr "處理訊號"

#: ../../docs/getting_started/step_by_step/scripting.rst:183
msgid ""
"Signals are \"emitted\" when some specific kind of action happens, and they "
"can be connected to any function of any script instance. Signals are used "
"mostly in GUI nodes, although other nodes have them too, and you can even "
"define custom signals in your own scripts."
msgstr ""
"當特定類型的動作發生後，會「發送」一個訊號，我們可以通過訊號來將這個動作與任"
"何一個腳本實體函式連在一起。訊號通常在 GUI 節點內使用，但其他節點也會有訊號。"
"甚至可以在腳本內自定訊號。"

#: ../../docs/getting_started/step_by_step/scripting.rst:188
msgid ""
"In this step, we'll connect the \"pressed\" signal to a custom function. "
"Forming connections is the first part and defining the custom function is "
"the second part. For the first part, Godot provides two ways to create "
"connections: through a visual interface the editor provides or through code."
msgstr ""
"在這個步驟，我們要把「按下 (Pressed)」訊號連接到自定義函式。第一個部分是構成"
"連接，第二個部分則是要定義函式。Godot 中有兩個方法可以建立連線，第一個方法是"
"通過編輯器視覺化界面，第二個方法則是通過程式碼。"

#: ../../docs/getting_started/step_by_step/scripting.rst:193
msgid ""
"While we will use the code method for the remainder of this tutorial series, "
"let's cover how the editor interface works for future reference."
msgstr ""
"雖然在這個教學中接下來的部分我們都會使用程式碼，但這裡還是來介紹一下要如何用"
"編輯器界面來建立連接。"

#: ../../docs/getting_started/step_by_step/scripting.rst:196
msgid ""
"Select the Button node in the scene tree and then select the \"Node\" tab. "
"Next, make sure that you have \"Signals\" selected."
msgstr ""
"從場景樹中選擇 Button 節點，然後再按 [節點] 分頁。接下來，確定一下有選中 [訊"
"號] 選項。"

#: ../../docs/getting_started/step_by_step/scripting.rst:201
msgid ""
"If you then select \"pressed()\" under \"BaseButton\" and click the "
"\"Connect...\" button in the bottom right, you'll open up the connection "
"creation dialogue."
msgstr ""
"接下來選擇「BaseButton」底下的「pressed()」，然後點擊右下角的 [連接…] 打開建"
"立連接對話框。"

#: ../../docs/getting_started/step_by_step/scripting.rst:206
msgid ""
"The top of the dialogue displays a list of your scene's nodes with the "
"emitting node's name highlighted in blue. Select the \"Panel\" node here."
msgstr ""
"對話框的頂部會顯示出場景中的節點列表，而觸發訊號的節點名稱則會以藍色顯示。這"
"裡先選擇「Panel」節點。"

#: ../../docs/getting_started/step_by_step/scripting.rst:209
msgid ""
"The bottom of the dialogue shows the name of the method that will be "
"created. By default, the method name will contain the emitting node's name "
"(\"Button\" in this case), resulting in ``_on_[EmitterNode]_[signal_name]``."
msgstr ""
"對話框底部會顯示正在建立的方法名稱。預設方法名稱會包含觸發訊號的節點名稱 (這"
"個例子中為「Button」)，格式為 ``_on_[觸發節點名]_[訊號名稱]`` 。"

#: ../../docs/getting_started/step_by_step/scripting.rst:213
msgid ""
"And that concludes the guide on how to use the visual interface. However, "
"this is a scripting tutorial, so for the sake of learning, let's dive into "
"the manual process!"
msgstr ""
"到這裡就是如何使用視覺化界面的教學了。但這篇教學是腳本教學，所以，為了多學一"
"點，來看看如何手動建立訊號連接吧！"

#: ../../docs/getting_started/step_by_step/scripting.rst:217
msgid ""
"To accomplish this, we will introduce a function that is probably the most "
"used by Godot programmers: :ref:`Node.get_node() "
"<class_Node_method_get_node>`. This function uses paths to fetch nodes "
"anywhere in the scene, relative to the node that owns the script."
msgstr ""
"為了手動建立連接，接下來我們要介紹 :ref:`Node.get_node() "
"<class_Node_method_get_node>` ，這個函式可能所有 Godot 程式設計師最常用的函"
"式。Node.get_node() 可以使用相對於該腳本節點的路徑來取得場景中任一節點。"

#: ../../docs/getting_started/step_by_step/scripting.rst:222
msgid ""
"For the sake of convenience, delete everything underneath ``extends Panel``. "
"You will fill out the rest of the script manually."
msgstr ""
"但為了方便起見，先把所有 ``extends Panel`` 下面所有的東西都刪除。接下來我們要"
"手動填寫剩下的腳本。"

#: ../../docs/getting_started/step_by_step/scripting.rst:225
msgid ""
"Because the Button and Label are siblings under the Panel where the script "
"is attached, you can fetch the Button by typing the following underneath the "
"``_ready()`` function:"
msgstr ""
"由於 Button 與 Label 為腳本所附加之 Panel 節點的同級節點，所以可以在 "
"``_ready()`` 函式中輸入以下內容來取得 Button 節點："

#: ../../docs/getting_started/step_by_step/scripting.rst:242
msgid "Next, write a function which will be called when the button is pressed:"
msgstr "接下來，寫一個按鈕按下後要呼叫的函式："

#: ../../docs/getting_started/step_by_step/scripting.rst:257
msgid ""
"Finally, connect the button's \"pressed\" signal to ``_on_Button_pressed()`` "
"by using :ref:`Object.connect() <class_Object_method_connect>`."
msgstr ""
"最後，通過 :ref:`Object.connect() <class_Object_method_connect>` 方法來把按鈕"
"的「pressed」訊號連接至 ``_on_Button_pressed()`` 函式。"

#: ../../docs/getting_started/step_by_step/scripting.rst:273
msgid "The final script should look like this:"
msgstr "腳本最終看起來應該長這樣："

#: ../../docs/getting_started/step_by_step/scripting.rst:306
msgid ""
"Run the scene and press the button. You should get the following result:"
msgstr "執行場景然後點擊按鈕，應該會得到下列結果："

#: ../../docs/getting_started/step_by_step/scripting.rst:310
msgid "Why, hello there! Congratulations on scripting your first scene."
msgstr "不錯，Hello！恭喜你為第一個場景寫了腳本。"

#: ../../docs/getting_started/step_by_step/scripting.rst:314
msgid ""
"A common misunderstanding regarding this tutorial is how ``get_node(path)`` "
"works. For a given node, ``get_node(path)`` searches its immediate children. "
"In the above code, this means that Button must be a child of Panel. If "
"Button were instead a child of Label, the code to obtain it would be:"
msgstr ""
"在這個教學中，很對人會誤解 ``get_node(path)`` 的使用方法。在一個節點中， "
"``get_node(path)`` 會搜尋該節點的直接子代。在上面的程式碼中，Button 必須是 "
"Panel 的子節點。如果 Button 是 Label 的子節點的話，那麼程式碼要寫成這樣："

#: ../../docs/getting_started/step_by_step/scripting.rst:332
msgid "Also, remember that nodes are referenced by name, not by type."
msgstr "另外，也請記得參照的是節點名稱而不是型別。"

#: ../../docs/getting_started/step_by_step/scripting.rst:336
msgid ""
"The 'advanced' panel of the connect dialogue is for binding specific values "
"to the connected function's parameters. You can add and remove values of "
"different types."
msgstr ""
"連接對話框中的「進階」面板中可用來將特定數值對應成函式參數，可以新增或移除不"
"同型別的數值。"

#: ../../docs/getting_started/step_by_step/scripting.rst:340
msgid ""
"The code approach also enables this with a 4th ``Array`` parameter that is "
"empty by default. Feel free to read up on the ``Object.connect`` method for "
"more information."
msgstr ""
"若使用程式碼的方式來連接節點，則可以使用第四個 ``Array`` 型別的參數，這個參數"
"預設為空陣列。更多資訊可以閱讀 ``Object.connect`` 的說明來瞭解。"
