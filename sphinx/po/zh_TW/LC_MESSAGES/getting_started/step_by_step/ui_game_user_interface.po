# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-07 14:35+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:4
msgid "Design the GUI"
msgstr "設計 GUI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:6
msgid ""
"Now that you've nailed the basics, we're going to see how to build a game "
"Graphical User Interface (GUI) with reusable UI components: a life bar, an "
"energy bar, and bomb and emerald counters. By the end of this tutorial, "
"you'll have a game GUI, ready to control with GDscript or VisualScript:"
msgstr ""
"你現在已經有基礎了，我們接著來看看如何利用可重複使用的 UI 模型（血槽、精力"
"槽、炸彈與寶石計數器）來製作遊戲的 GUI（Graphical User Interface，圖形使用者"
"介面，「圖形界面」）。讀完這個教學之後，你就會有一個能使用 GDScript 或視覺腳"
"本 (VisualScript) 來控制的遊戲圖形界面："

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:13
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:621
msgid "The final result"
msgstr "最終結果"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:15
msgid "You'll also learn to:"
msgstr "另外，你也會學到："

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:17
msgid "Create flexible UI components"
msgstr "製作彈性的 UI 元件"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:18
msgid "Use scene inheritance"
msgstr "使用場景的繼承功能"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:19
msgid "Build a complex UI"
msgstr "建立一個複雜的 UI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:21
msgid ""
"Download the project files: :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` and extract the archive. Import the `start/` project in "
"Godot to follow this tutorial. The `end/` folder contains the final result."
msgstr ""
"下載專案檔： :download:`ui_gui_design.zip <files/ui_gui_design.zip>` 並解壓"
"縮。將 `start/` 專案匯入至 Godot 以繼續這篇教學。 `end/` 資料夾包含了最後成"
"果。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:25
msgid ""
"You can watch this tutorial as a `video on YouTube <https://www.youtube.com/"
"watch?v=y1E_y9AIqow>`_."
msgstr ""
"你也可以在 `在 YouTube 上觀看（英語） <https://www.youtube.com/watch?"
"v=y1E_y9AIqow>`_ 本教學的影片版本。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:28
msgid "Breaking down the UI"
msgstr "拆解 UI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:30
msgid ""
"Let's break down the final UI and plan the containers we'll use. As in the :"
"doc:`ui_main_menu`, it starts with a ``MarginContainer``. Then, we can see "
"up to three columns:"
msgstr ""
"我們先來把最終的 UI 分解一下，並計劃接下來要用到的 Container。就像 :doc:"
"`ui_main_menu` 中一樣，我們要先從 ``MarginContainer`` 開始，然後剩下的東西看"
"起來最多能分成三列："

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:34
msgid "The life and energy counters on the left"
msgstr "左側有血槽與精力槽的數字"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:35
msgid "The life and energy bars"
msgstr "血槽與精力槽"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:36
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:42
msgid "The bomb and emerald counters on the right"
msgstr "右側有炸彈與寶石的計數器"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:38
msgid ""
"But the bar's label and the gauge are two parts of the same UI element. If "
"we think of them this way, we're left with two columns:"
msgstr ""
"但是，血槽與精力槽的數字標籤跟條狀槽應該是屬於同一個 UI 元素中的兩個部分。這"
"樣說來的話，就只能算是兩列："

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:41
msgid "The life and energy bars on the left"
msgstr "左側有血槽與精力槽"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:44
msgid ""
"This makes it easier to nest containers: we have some margins around the "
"border of the screen using a ``MarginContainer``, followed by an "
"``HBoxContainer`` to manage our two columns. The two bars stack on top of "
"one another inside a ``VBoxContainer``. And we'll need a last "
"``HBoxContainer`` in the right column to place the bomb and emerald counters "
"side-by-side."
msgstr ""
"為了讓嵌套 Container 可以更簡單，我們先使用 ``MarginContainer`` 來在畫面周圍"
"加點留白，接著使用 ``HBoxContainer`` 來分出兩列。兩個計量槽則使用 "
"``VBoxContainer`` 來將其中一個堆疊在另一個上面。最後我們在右列中使用 "
"``HBoxContainer`` 來將炸彈與寶石的計數器分別擺放。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:53
msgid "We get a clean UI layout with only 4 containers"
msgstr "只用了四個 Container 就能做出清楚的 UI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:55
msgid ""
"We will need extra containers inside the individual UI components, but this "
"gives us the main GUI scene's structure. With this plan in place, we can "
"jump into Godot and create our GUI."
msgstr ""
"接著我們還需要在各個 UI 元件中加上其他的 Container，但整體的 GUI 場景結構就是"
"這樣了。計劃好了以後我們就可以到 Godot 裡製作界面了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:60
msgid "Create the base GUI"
msgstr "建立基礎的 GUI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:62
msgid ""
"There are two possible approaches to the GUI: we can design elements in "
"separate scenes and put them together, or prototype everything in a single "
"scene and break it down later. I recommend working with a single scene as "
"you can play with your UI's placement and proportions faster this way. Once "
"it looks good, you can save entire sections of the node tree as reusable sub-"
"scenes. We'll do that in a moment."
msgstr ""
"要製作 GUI 有兩種方法：先在分開的幾個場景中分別設計各個元素，最後再拼湊在一"
"起；或是，先在單一個場景內設計所有東西的原始模型，之後再把他們拆分開來。這裡"
"我推薦先在單一場景內製作，因為這樣一來就可以很輕鬆地測試各種 UI 的擺法以及大"
"小的比例。看得順眼之後就可以將場景中其中一段場景樹保存為可以重複使用的子場"
"景，這點稍後會說明。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:69
msgid "For now, let's start with a few containers."
msgstr "現在，我們先從幾個容器開始。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:71
msgid ""
"Create a new scene and add a ``MarginContainer``. Select the node and name "
"it ``GUI``."
msgstr "先建立一個新場景並新增 ``MarginContainer`` ，接著將其命名為 ``GUI`` 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:74
msgid ""
"We want our interface to anchor to the top of the screen. Select the ``GUI`` "
"node and click the Layout button at the top of the viewport. Select the "
"``Top Wide`` option. The ``GUI`` node will anchor to the top edge of its "
"parent, the viewport by default. It will resize automatically on the "
"vertical axis to make space for its child UI components."
msgstr ""
"我們要將界面固定在畫面的上方。選擇 ``GUI`` 節點並點擊檢視區上方的畫面配置按"
"鈕。選擇 ``上延長`` 選項。 ``GUI`` 節點會自動固定在母節點（此處為檢視區）的上"
"方。放入子節點後會自動調整縱軸的大小來為子 UI 元素騰出空間。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:80
msgid "Save the scene as ``GUI.tscn``. We will put the entire GUI in it."
msgstr "將場景保存為 ``GUI.tscn`` 。我們會將所有 GUI 都放在裡面。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:82
msgid ""
"With the ``MarginContainer`` selected, head to the inspector and scroll down "
"to the custom constants section. Unfold it and click the field next to each "
"of the ``Margin`` properties. Set them all to ``20`` pixels. Next, add an "
"``HBoxContainer`` node. This one will contain our two bars on the left and "
"separate them from the two counters on the right."
msgstr ""
"選擇 ``MarginContainer`` 後，到屬性面板並滾動到 Custom Constants（自定常數）"
"段落，將其展開後點擊每個 ``Margin`` 屬性右邊的欄位並設為 ``20`` px。接著，新"
"增一個 ``HBoxContainer`` 節點，這個節點會用來把左側的兩個計量槽與右邊的兩個計"
"數器分開來。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:88
msgid ""
"We want to stack the bars vertically inside the ``HBoxContainer``. Add a "
"``VBoxContainer`` as a child of ``HBoxContainer`` and name it ``Bars``. "
"Select the parent ``HBoxContainer`` again and this time, add another "
"``HBoxContainer`` as a child of it. Call it ``Counters``. With these four "
"containers, we have the base for our GUI scene."
msgstr ""
"我們要在 ``HBoxContainer`` 內垂直堆疊兩個計量槽。將 ``VBoxContainer`` 新增為 "
"``HBoxContainer`` 的節點，並命名為 ``Bars`` 。再選擇一次母節點的 "
"``HBoxContainer`` ，這次再新增一另一個 ``HBoxContainer`` 子節點，並命名為 "
"``Couters`` 。有了這四個容器，我們就有基本的 GUI 場景了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:95
msgid "You should have 4 containers that look like this"
msgstr "現在應該有看起來像這樣的四個容器"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:99
msgid ""
"We can work this way because we first broke down our UI design and took a "
"few moments to think about the containers we'd use. When you follow a "
"tutorial like this, it may seem weird. But once you're working on real "
"games, you'll see it's an efficient workflow."
msgstr ""
"會這樣做是因為我們先把 UI 設計拆解開來，並花了一點時間來設計如何使用 "
"Container。跟著這個教學做的時候可能會感覺有點奇怪。但之後你在實際的遊戲上做過"
"之後就會慢慢瞭解這個工作流程有多有效率了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:105
msgid "Create the bars' base"
msgstr "建立基礎計量槽"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:107
msgid ""
"Each bar is split into two sub-elements that align horizontally: the label "
"with the health count on the left, and the gauge on the right. Once again, "
"the ``HBoxContainer`` is the perfect tool for the job. Select the ``Bars`` "
"node and add a new ``HBoxContainer`` inside of it. Name it ``Bar``."
msgstr ""
"每個計量槽都可以再拆分成水平的兩個子元素：左邊有寫著血量的 Label，右邊有計量"
"槽。這裡再強調一次，這種做法很適合用 ``HBoxContainer`` 。先選擇 ``Bars`` 節"
"點，並在其中新增一個 ``HBoxContainer`` ，命名為 ``Bar`` 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:113
msgid ""
"The label itself requires at least three nodes: a ``NinePatchRect`` for the "
"background, on top of which we'll add a texture on the left, either ``HP`` "
"or ``EP``, and a ``Label`` on the right for the value. We can nest "
"``Control`` nodes however we want. We could use the ``NinePatchRect`` as a "
"parent for the two other elements, as it encompasses them. In general, you "
"want to use containers instead, as their role is to help organize UI "
"components. We'll need a ``MarginContainer`` later anyway to add some space "
"between the life count and the gauge. Select the ``Bar`` and add a "
"``MarginContainer``. Name it ``Count``. Inside of it, add three nodes:"
msgstr ""
"左側的 Label 本身會需要至少三個子節點：一個用來顯示背景的 "
"``NinePatchRect`` ，以及疊在上面的 ``HP`` 或 ``EP`` 貼圖紋理，這個稍後會被放"
"在左側，接著是右邊的數值。我們可以按照各種方式來嵌套 ``Control`` 節點。我們也"
"可以使用 ``NinePatch`` 節點來容納其他兩個子節點來作為母節點，但通常來說我們會"
"使用 Container，因為 Container 的功能就是用來組織 UI 元件。不管怎樣我們稍後還"
"是會用到 ``MarginContainer`` 來在血量與血槽間加上間隙。讓我們選擇 ``Bar`` 並"
"新增一個 ``MarginContainer`` ，命名為 ``Count`` 。在其中新增三個子節點："

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:124
msgid "A ``NinePatchRect`` named ``Background``"
msgstr "命名為 ``Background`` 的 ``NinePatchRect``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:125
msgid "A ``TextureRect`` named ``Title``"
msgstr "命名為 ``Title`` 的 ``TextureRect``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:126
msgid "And a ``Label`` named ``Number``"
msgstr "命名為 ``Number`` 的 ``Label``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:128
msgid "To add the nodes as siblings, always select the ``Count`` node first."
msgstr "為了把節點都弄成同級節點，記得要在新增前點選 ``Count`` 節點。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:132
msgid ""
"Your scene tree should look like this. We're ready to throw in some textures"
msgstr "場景樹現在應該看起來像這樣。接著已經準備好要新增紋理貼圖了"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:135
msgid ""
"Our scene is still empty. It's time to throw in some textures. To load the "
"textures, head to the FileSystem dock to the left of the viewport. Browse "
"down to the res://assets/GUI folder."
msgstr ""
"現在場景還是空的，是時候來點紋理貼圖了。要載入紋理貼圖，請看到檢視區左邊的檔"
"案系統 Dock，並移動到 res://assets/GUI 資料夾。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:141
msgid "You should see a list of textures that we'll use to skin our interface."
msgstr "這裡有我們要拿來給界面用的紋理貼圖。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:144
msgid ""
"Select the ``Background`` in the Scene dock. In the Inspector, you should "
"see a ``Texture`` property. In the FileSystem tab, click and drag "
"``label_HP_bg.png`` onto the ``Texture`` slot. It stays squashed. The parent "
"MarginContainer will force its size down to 0 until we force elements inside "
"the container to have a minimum size. Select the ``Background`` node. In the "
"Inspector, scroll down to the Rect section. Set ``Min Size`` to (100, 40). "
"You should see the ``Background`` resize along with its parent containers."
msgstr ""
"在場景 Dock 中選擇 ``Background`` 。找到屬性面板中的 ``Texture`` 屬性，並在檔"
"案系統分頁中點擊並拖移 ``label_HP_bg.png`` 到 ``Texture`` 槽裡。Background 節"
"點現在看起來還扁扁的，因為在元素有大小之前，母節點的 MarginContainer 都先強制"
"把節點的大小設為 0。讓我們選擇 ``Background`` 節點，並在屬性面板中向下滾動到 "
"Rect 段落，將 ``Min Size`` （最小大小）設為 (100, 40) 。接著就可以看到 "
"``Background`` 的節點跟著母節點一起被放大了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:153
msgid ""
"Next, select the ``Title`` and drag and drop ``label_HP.png`` into its "
"``Texture`` slot. Select the ``Number`` node, click the field next to the "
"``Text`` property and type ``10``. This way, we can see both nodes in the "
"viewport. They should stack up in the top-left corner of their parent "
"``MarginContainer``."
msgstr ""
"接著，選擇 ``Title`` 節點並拖曳 ``label_HP.png`` 節點至 ``Texture`` 槽內。選"
"擇 ``Number`` 節點後點擊 ``Text`` 屬性旁邊的欄位並輸入 ``10`` 。如此一來，兩"
"個檢視區都可以可以在檢視區中看到了。著兩個節點應該會從母節點的 "
"``MarginContainer`` 的左上角開始堆疊。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:161
msgid "If you select both nodes, you should see something like this"
msgstr "若選擇了兩個節點，則應該可以看到類似這樣的東西"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:163
msgid ""
"As they have a container as their direct parent, we cannot move them freely: "
"the ``Count`` node will always reset their anchors, their size and position. "
"Try to move and resize the nodes in the viewport. Then, select any of the "
"three textures and press :kbd:`Ctrl + Up` or :kbd:`Ctrl + Down` to reorder "
"them in the Scene dock. They'll snap back to their previous size and "
"position."
msgstr ""
"由於這幾個元素都直接接在容器的底下作為 **直接子節點**，所以我們沒辦法自由地移"
"動這些節點： ``Count`` 節點會自動重設子節點的錨點、大小、與位置。如果試著在檢"
"視區裡移動或縮放子節點後，在場景 Dock 內選中任意一個紋理貼圖並按鍵盤 :kbd:"
"`Ctrl + Up` 或 :kbd:`Ctrl + Down` 來重新排列，則這幾個節點都會自動回到原來的"
"位置與大小。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:170
msgid ""
"Parent containers control the size, the scale, the margins, and the anchors "
"of their direct children. To modify the nodes, you must nest them inside a "
"regular Control or another UI element. We'll use the ``Background`` as a "
"parent for the ``Title`` and ``Number``. Select both the ``Title`` and "
"``Number``, and drag and drop them onto ``Background``."
msgstr ""
"母容器會控制其直接子節點的大小、比例、外邊距、與錨定。要修改節點則必須在容器"
"裡面嵌套一個一般的 Control 節點或其他 UI 元素。這裡我們會使用 ``Background`` "
"作為 ``Title`` 與 ``Number`` 的母節點。將選擇 ``Title`` 與 ``Number`` ，並將"
"這兩個節點都拖曳至 ``Background`` 中。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:179
msgid ""
"By using the Background node as the two textures' parent, we take control "
"away from the Count MarginContainer"
msgstr ""
"使用 Background 節點作為兩個紋理貼圖的母節點便能脫離 Count 節點的 "
"MarginContainer 的控制"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:182
msgid ""
"Select the ``Title`` and in the Inspector, change its ``Stretch Mode`` "
"property to ``Keep Centered``. Next find the ``Rect`` category in the "
"Inspector and change the ``Size`` property to (50, 40) so it only takes the "
"left half of the background.  Next, select the ``Number`` node. In the "
"viewport, click the ``Layout`` menu and click ``Full Rect``. The node will "
"resize to fit the ``Background``. Head to the Inspector and change its "
"``Align`` property to ``Right``, and the ``Valign`` property to ``Center``. "
"The text should snap to the center of the ``Background``'s right edge. "
"Resize the node horizontally, so it takes the right half of the "
"``Background`` and there's a bit of padding with the right edge."
msgstr ""
"在屬性面板中選擇 ``Title`` 並將 ``Stretch Mode`` 屬性改為 ``Keep "
"Centered`` 。接著在屬性面板中找到 ``Rect`` 分類並將 ``Size`` 屬性改為 (50, "
"40) ，這樣一來便只會佔用背景的一半大小。接著，選擇 ``Number`` 節點，並在檢視"
"區中點擊 ``畫面配置`` 選單並點擊 ``全矩形`` 。節點會自動縮放並佔滿整個 "
"``Background`` 。再來看屬性面板，將 ``Align`` 屬性改為 ``Right`` ，並將 "
"``Valign`` 屬性改為 ``Center`` 。現在文字應該會吸附在 ``Background`` 的右邊中"
"間。調整節點的水平大小為 ``Background`` 的一半，並在右邊留一點空白。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:195
msgid ""
"Here's how the nodes' bounding boxes should look in the viewport. Keep it "
"rough, you don't need to place them too precisely for now."
msgstr ""
"節點的定界框在檢視區中看起來的樣子。先大致上差不多就好，現在還先不用放得很精"
"確。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:199
msgid "Replace the Label's font"
msgstr "更改 Label 的字體"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:201
msgid ""
"The label's font is too small. We need to replace it. Select the ``Number`` "
"node and in the Inspector, scroll down to the ``Control`` class, and find "
"the ``Custom Font`` category. Click the field next to the ``Font`` property "
"and click on ``New Dynamic Font``. Click on the field again and select Edit."
msgstr ""
"Label 的字體太小了，我們需要改一下。選擇 ``Number`` 節點並在屬性面板中往下捲"
"動找到 ``Control`` 類別，並找到 ``Custom Font`` （自定字體）分類。點擊 "
"``Font`` 屬性右邊的欄位並點擊 ``新增 Dynamic Font`` 。接著再點擊一次欄位並選"
"擇編輯。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:207
msgid ""
"You will enter the ``Dynamic Font`` resource. Unfold the ``Font`` category "
"and click the field next to ``Font Data``. Click the ``Load`` button. In the "
"file browser, navigate down to the assets/font folder and double click "
"``Comfortaa-Bold.ttf`` to open it. You should see the font update in the "
"viewport. Unfold the settings category to change the font size. Set the "
"``Size`` property to a higher value, like ``24`` or ``28``."
msgstr ""
"現在可以選擇 ``Dynamic Font`` 資源。先展開 ``Font`` （字體）分類，並點擊 "
"``Font Data`` （字體資料）旁邊的欄位。點擊 ``載入`` 按鈕。在檔案瀏覽器中打開 "
"assets/font 資料夾並在 ``Comfortaa-Bold.ttf`` 上點兩下來打開。現在我們應該可"
"以在檢視區上看到字體更新了。展開設定分類並修改字體大小，將 ``Size`` （大小）"
"屬性設得比原來大一點，如 ``24`` 或 ``28`` 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:215
msgid ""
"We now need the text's baseline, the number's lower edge, to align with the "
"HP texture on the left. To do so, still in the ``DynamicFont`` resource, you "
"can tweak the ``Bottom`` property under the ``Extra Spacing`` category. It "
"adds some bottom padding to the text. Click the ``Number`` node in the Scene "
"tab to go back to the node's properties and change the ``Valign`` to "
"``Bottom``. To adjust the text's baseline, click on the font field under the "
"``Custom Font`` category again and tweak the ``Bottom`` property until the "
"text aligns with the ``Title`` node. I used a value of ``2`` pixels."
msgstr ""
"我們現在需要調整文字的基線（也就是數字底部的邊緣）來對齊左邊的 HP 紋理貼圖。"
"為此，再回到 ``DynamicFont`` 資源內，調整 ``Extra Spacing`` （額外留白）分類"
"下的 ``Bottom`` 屬性，在文字的底部加點留白。在場景分頁中點擊 ``Number`` 節點"
"並回到節點的屬性中，修改 ``Valign`` 為 ``Bottom``。要調整文字的基線，再回到 "
"``Custom Font`` 分類底下，點擊字體欄位並修改 ``Bottom`` 屬性，調整至文字與 "
"``Title`` 節點對齊即可。我這邊使用的值是 ``2`` px。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:227
msgid "With a Bottom value of 2 pixels, the Number aligns with the Title"
msgstr "將 Bottom 值設為 2px，Number 就跟 Title 對齊了"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:229
msgid ""
"With this, we finished the hardest part of the GUI. Congratulations! Let's "
"move on to the simpler nodes."
msgstr ""
"這樣一來，我們就完成了 GUI 中最難的部分了。恭喜！接著來看看簡單的節點。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:233
msgid "Add the progress bar"
msgstr "新增計量槽"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:235
msgid ""
"We need one last element to complete our life bar: the gauge itself. Godot "
"ships with a ``TextureProgress`` node that has everything we need."
msgstr ""
"要做好血條我們還需要最後一個元素：血槽本身。Godot 附帶的 ``TextureProgress`` "
"節點正是我們需要的東西。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:238
msgid ""
"Select the Bar node and add a ``TextureProgress`` inside of it. Name it "
"``Gauge``. In the inspector unfold the ``Textures`` section. Head to the "
"FileSystem dock and drag and drop the ``lifebar_bg.png`` texture onto the "
"``Under`` slot. Do the same with the ``lifebar_fill.png`` image and drop it "
"onto the ``Progress`` slot. Under the ``Range`` class in the inspector, "
"change the ``Value`` property to ``50`` to see the gauge fill up."
msgstr ""
"選擇 Bar 節點，並在其中新增一個 ``TextureProgress`` ，將其命名為 ``Gauge`` "
"（計量）。在屬性面板中展開 ``Texture`` 段落，接著到檔案系統 Dock 中將 "
"``lifebar_bg.png`` 紋理貼圖拖曳到 ``Under`` 槽中。同樣地將 ``lifebar_fill."
"png`` 圖片拖曳至 ``Progress`` 槽。在屬性面板的 ``Range`` 類別中，將 "
"``Value`` 屬性的值更改為 ``50`` 來填充計量槽。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:246
msgid "With only five ``Control`` nodes, our first bar is ready to use."
msgstr "只用了五個 ``Control`` 節點，我們就準備好了第一個計量槽了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:250
msgid ""
"That's it, our life bar is ready. This last part was quick, wasn't it? "
"That's thanks to our robust container setup."
msgstr ""
"就這樣，我們已經準備好血槽了。最後一個部分一下就完成了對吧！這都要歸功於我們"
"精心設計的 Container。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:254
msgid "Design the bomb and emerald counters"
msgstr "設計炸彈與寶石計數器"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:256
msgid ""
"The bomb and emerald counters are like the bar's ``Count`` node. So we'll "
"duplicate it and use it as a template."
msgstr ""
"炸彈與寶石的計數器就類似計量槽的 ``Count`` 節點，所以我們就直接複製過來當作樣"
"板使用。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:259
msgid ""
"Under the ``Bar`` node, select ``Count`` and press :kbd:`Ctrl + D` to "
"duplicate it. Drag and drop the new node under the ``Counters`` "
"``HBoxContainer`` at the bottom of the scene tree. You should see it resize "
"automatically. Don't worry about this for now, we'll fix the size soon."
msgstr ""
"選擇 ``Bar`` 節點底下的 ``Count`` 節點，並按鍵盤 :kbd:`Ctrl + D` 來複製。拖曳"
"新的節點到節點樹底下的 ``Counters`` ``HBoxCountainer`` 下。接著你會發現複製過"
"來的節點被自動縮放了，但先不用擔心，我們等等會修。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:264
msgid ""
"Rename the ``Count2`` node to ``Counter``. Unlike the bars, we want the "
"number to be on the left, and an icon to sit on the right. The setup is the "
"same: we need a background (a ``NinePatchRect``), the title, and the number "
"nodes. The ``Title`` node is a ``TextureRect``, so it's what we need to "
"display the icon. In the scene tree, select the ``Title`` node, and rename "
"it to ``Icon``."
msgstr ""
"將 ``Count2`` 節點重命名為 ``Counter`` 。與計量槽不同的是，我們希望數字靠左顯"
"示，然後將圖示顯示在左邊。用一樣的設定方法：給一個背景"
"（ ``NinePatchRect`` ）、一個標題、以及一個顯示數字的節點。 ``Title`` 是一個 "
"``TextureRect`` 節點，是用來顯示圖示的。在場景樹中選擇 ``Title`` 節點並將其重"
"命名為 ``Icon`` 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:273
msgid "Here's how your node tree should look so far"
msgstr "到目前為止你的場景樹看起來應該長這樣"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:275
msgid ""
"With the ``Icon`` node selected, in the inspector, scroll to the top to see "
"the ``Texture`` slot. Head to the FileSystem dock on the left and select the "
"``bombs_icon.png``. Drag and drop it onto the ``Texture`` slot. In the Scene "
"Tab select both the ``Icon`` and the ``Number`` nodes. Click the Layout menu "
"in the toolbar at the top of the viewport and select ``Full Rect``. Both "
"nodes will update to fit the size of the ``Background``."
msgstr ""
"選擇了 ``Icon`` 節點後，到屬性面板中滾動到最上面並找到 ``Texture`` 槽。接著到"
"左邊的檔案系統 Dock 裡選擇 ``bombs_icon.png`` 並將其拖曳至 ``Texture`` 槽內。"
"在場景分頁中選擇 ``Icon`` 與 ``Number`` 節點，並在檢視區上方工具列的畫面配置"
"選單中選擇 ``全矩形`` 。現在，這兩個節點的大小應該會變得符合 ``Background`` "
"的大小了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:285
msgid "The nodes anchor to the entire Background, but their position is off"
msgstr "雖然節點錨定到整個背景了，但位置還不正確"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:287
msgid ""
"Let's change the ``Number``'s align properties to move it to the left and "
"center of the ``Background``. Select the ``Number`` node, change its "
"``Align`` property to left and the ``Valign`` property to center. Then "
"resize its left edge a bit to add some padding between the left edge of the "
"``Background`` and the text."
msgstr ""
"接著我們要修改 ``Number`` 的對齊屬性來把它移動到 ``Background`` 的左邊中間。"
"選擇 ``Number`` 節點，並修改 ``Align`` 屬性為 Left (左)， ``Valign`` 屬性為 "
"Center (中)。接著增加左側邊緣的大小點來給 ``Background`` 與文字中間加一點留"
"白。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:295
msgid "The Number node aligned to the left and center"
msgstr "Number 節點現在對齊在左邊中間了"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:297
msgid ""
"To overlap the Icon and the background, we need a few tweaks. First, our "
"background is a bit too tall. It's because it's inside a margin container "
"that is controlled by the top-most GUI node. Select the GUI node at the top "
"of the scene tree and downsize it vertically so that it's as thin as "
"possible. You'll see the gauge prevents you from making it too small. A "
"container cannot be smaller than the minimal size of its children. The "
"container's margins also weigh in."
msgstr ""
"要讓圖示與背景重疊，我們需要做點小調整。首先，現在的背景太高了，這是因為背景"
"現在是放在由最上層 GUI 節點所控制的 Margin Container 內。先選擇場景樹中最上次"
"的 GUI 節點，並儘量縮小縱向的大小。這時候你會發現縮小到某個大小後，計量槽會阻"
"止你繼續縮小。Container 節點沒辦法縮小到比最小的子節點還要小，且還必須考慮外"
"邊距。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:305
msgid ""
"Select the Icon, click the Layout menu, and select ``Full Rect`` to re-"
"center it. We need it to anchor to the ``Background``'s right edge. Open the "
"Layout menu again and select ``Center Right``. Move the icon up so it is "
"centered vertically with the ``Background``."
msgstr ""
"選擇 Icon 節點，並點擊畫面配置選單，選擇 ``全矩形`` 來重新置中 Icon 節點。我"
"們要把 Icon 錨定到 ``Background`` 的右邊。再打開畫面配置選單一次，然後選擇 ``"
"中右`` 。將圖示向上移動來讓圖示在 ``Background`` 上垂直置中。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:313
msgid ""
"The bomb icon anchors to the Background's right edge. Resize the Counter "
"container to see the Icon node stick to its right side"
msgstr ""
"炸彈圖示現在錨定到 Background 的右側了。調整 Counter Container 的大小就可以注"
"意到現在圖示固定靠在右側了"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:316
msgid ""
"Because we duplicated the ``Counter`` from the bar's ``Count``, the "
"``Number`` node's font is off. Select the ``Number`` node again, head to the "
"``Font`` property, and click it to access the ``DynamicFont`` resource. In "
"the ``Extra Spacing`` section, change the ``Bottom`` value to ``0`` to reset "
"the font's baseline. Our counter now works as expected."
msgstr ""
"因為我們的 ``Counter`` 是從計量槽的 ``Count`` 複製過來的，所以現在 "
"``Number`` 節點的字體跑掉了。選擇 ``Number`` 節點，然後找到 ``Font`` 屬性並點"
"擊來設定 ``DynamicFont`` 資源。將 ``Extra Spacing`` 段落下的 ``Bottom`` 值改"
"為 ``0`` 來重設字體的基線。現在計數器應該正常運作了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:323
msgid ""
"Let's make the ``Counters`` anchor to the right edge of the viewport. To do "
"so, we need to set the ``Bars`` container take all the available horizontal "
"space it can. Select the ``Bars`` node and scroll down to the ``Size Flags`` "
"category. In the ``Horizontal`` category, check the ``Expand`` value. The "
"``Bars`` node should resize and push the counter to the right side of the "
"screen."
msgstr ""
"接著來把 ``Counters`` 錨定到檢視區的右邊。這裡我們需要讓 ``Bars`` 容器可以吃"
"掉所有水平方向上可用的空間。選擇 ``Bars`` 節點，並向下滾動找到 ``Size "
"Flags`` 分類，將 ``Horizontal`` 分類底下的 ``Expand`` 值打勾。現在 ``Bars`` "
"節點的大小應該變成會把計數器推到畫面右邊了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:331
msgid ""
"An expanding container eats all the space it can from its parent, pushing "
"everything else along the way"
msgstr "延展的容器吃掉了母節點內所有可用的空間，並推動所有其他的東西"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:335
msgid "Turn the bar and counter into reusable UI components"
msgstr "將計量槽與計數器變成可重複使用的 UI 元件"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:337
msgid ""
"We have one bar and one counter widget. But we need two of each. We may need "
"to change the bars' design or their functionality later on. It'd be great if "
"we could have a single scene to store a UI element's template, and child "
"scenes to work on variations. Godot lets us do this with Inherited Scenes."
msgstr ""
"現在我們只有計量槽跟計數器各一個，但我們需要的是各兩個。我們之後可能會需要修"
"改計量槽的設計或是功能。如果可以將 UI 元素的樣板儲存成單一場景，並使用子場景"
"來製作其他樣式的話會比較好。在 Godot 內可以通過繼承場景來做到。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:343
msgid ""
"Let's save both the ``Counter`` and the ``Bar`` branches as separate scenes "
"that we'll reduce to create the ``LifeBar``, the ``EnergyBar``, the "
"``BombCounter``, and the ``EmeraldCounter``. Select the ``Bar`` "
"HBoxContainer. Right click on it and click on ``Save Branch as Scene``. Save "
"the scene as ``Bar.tscn``. You should see the node branch turn it to a "
"single ``Bar`` node."
msgstr ""
"我們現在將 ``Counter`` 與 ``Bar`` 分支都分別保存成獨立的場景，之後用他們來製"
"作 ``LifeBar`` 、 ``EnergyBar`` 、 ``BombCounter`` 、以及 "
"``EmeraldCounter`` 。選擇 ``Bar`` HBoxContainer 後右鍵點擊並選擇 ``保存分支為"
"場景`` 。保存場景為 ``Bar.tscn`` 。接著節點分支應該會變成單一一個 ``Bar`` 節"
"點。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:352
msgid ""
"A scene is a tree of nodes. The topmost node is the tree's **root**, and the "
"children at the bottom of the hierarchy are **leaves**. Any node other than "
"the root along with one or more children is a **branch**. We can encapsulate "
"node branches into separate scenes, or load and merge them from other scenes "
"into the active one. Right click on any node in the Scene dock and select "
"``Save Branch as Scene`` or ``Merge from Scene``."
msgstr ""
"場景就是樹狀的節點。最上層的節點就是樹的 **根** ，而在階層架構最末端的節點就"
"是 **葉子** 。除了根節點以外，有子節點的節點就是 **分支** 。我們可以將節點分"
"支封裝為獨立的場景，或是從其他場景載入為可用的分支。在場景樹中右鍵點擊任意一"
"個節點後選擇 ``保存場景為分支`` 或 ``自場景合併`` 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:360
msgid ""
"Then, select the ``Counter`` node and do the same. Right click, ``Save "
"Branch as Scene``, and save it as ``Counter.tscn``. A new edit scene icon "
"appears to the right of the nodes in the scene tree. Click on the one next "
"to ``Bar`` to open the corresponding scene. Resize the ``Bar`` node so that "
"its bounding box fits its content. The way we named and placed the Control "
"nodes, we're ready to inherit this template and create the life bar. It's "
"the same for the ``Counter``."
msgstr ""
"接下來，選擇 ``Counter`` 節點並做同樣的操作。右鍵點擊，選擇 ``保存分支為場景"
"`` 並保存為 ``Counter.tscn`` 。場景樹上節點的右邊會出現新的編輯場景圖示。點"
"擊 ``Bar`` 右邊的編輯場景圖示來打開對應的場景。調整 ``Bar`` 將誒點的大小來讓 "
"Bar 的定界框的大小符合內容。我們命名與放置 Control 節點的方式已經讓我們準備好"
"繼承這個模板來做出血槽了。 ``Counter`` 也一樣。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:370
msgid "With no extra changes, our Bar is ready to use"
msgstr "甭需額外修改，Bar 已隨時可用"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:373
msgid "Use scene inheritance to create the remaining elements"
msgstr "使用場景繼承功能來製作剩下的元素"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:375
msgid ""
"We need two bars that work the same way: they should feature a label on the "
"left, with some value, and a horizontal gauge on the right. The only "
"difference is that one has the HP label and is green, while the other is "
"called EP and is yellow. Godot gives us a powerful tool to create a common "
"base to reuse for all bars in the game: **inherited scenes**."
msgstr ""
"我們需要兩個相同功能的計量槽：左邊要有帶數值的標籤，右邊有水平的計量槽。唯一"
"不同的地方是其中一個是綠色的，而且有 HP 標籤，而另一個是黃色的，且標籤為 EP。"
"Godot 中有能夠給所有計量槽建立可重複使用的共通基礎的工具： **場景繼承功能"
"** 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:383
msgid ""
"Inherited scenes help us keep the GUI scene clean. In the end, we will only "
"have containers and one node for each UI component."
msgstr ""
"通過使用繼承的場景來讓 GUI 場景保持乾淨。到最後我們只會需要幾個 Container 與"
"各 UI 元件的各一個的節點。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:386
msgid ""
"On an inherited scene, you can change any property of every node in the "
"inspector, aside from its name. If you modify and save the parent scene, all "
"the inherited scenes update to reflect the changes. If you change a value in "
"the inherited scene, it will always override the parent's property. It's "
"useful for UIs, as they often require variations of the same elements. In "
"general, in UI design, buttons, panels etc. share a common base style and "
"interactions. We don't want to copy it over to all variations manually."
msgstr ""
"在繼承的場景中，除了名稱以外，所有節點的每一個屬性都可以在屬性面板中修改。如"
"果修改並保存了母場景，則所有繼承的場景都會一併更新並反映出更改。若在繼承的場"
"景中修改了任何數值，則會將母場景的值複寫掉。對於 UI 來說很有用，因為相同的元"
"素常常都需要許多不同的版本。通常來說，在 UI 設計裡，按鈕、面板等的元件都有一"
"組共用的基礎樣式與互動。我們通常不會手動複製出每一種不同的版本。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:395
msgid ""
"A reload icon will appear next to the properties you override. Click it to "
"reset the value to the parent scene's default."
msgstr ""
"複寫的屬性旁邊會出現一個重新載入圖示。點擊就可以將數值重設成母場景的預設值。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:400
msgid ""
"Think of scene inheritance like the node tree, or the ``extends`` keyword in "
"GDScript. An inherited scene does everything like its parent, but you can "
"override properties, resources and add extra nodes and scripts to extend its "
"functionality."
msgstr ""
"可以將場景的繼承想像成場景樹或是 GDScript 中的 ``extends`` 關鍵字。執行繼承的"
"場景就跟執行母場景一模一樣，但可以複寫屬性、複寫資源、並且可以新增額外的節點"
"與腳本來擴充功能。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:406
msgid "Inherit the Bar Scene to build the LifeBar"
msgstr "繼承 Bar 場景來製作血條 (LifeBar)"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:408
msgid ""
"Go to ``Scene -> New Inherited Scene`` to create a new type of ``Bar``. "
"Select the Bar scene and open it. You should see a new [unsaved] tab, that's "
"like your ``Bar``, but with all nodes except the root in grey. Press :kbd:"
"`Ctrl + S` (:kbd:`Cmd + S` on macOS) to save the new inherited scene and "
"name it ``LifeBar``."
msgstr ""
"打開 ``場景 -> 新增繼承場景`` 來建立一個新版本的 ``Bar`` 。選擇 Bar 場景來打"
"開。接著會出現一個新的 [未保存] 場景，長得跟 ``Bar`` 很像，但除了根節點以外所"
"有的節點都是灰色的。按鍵盤 :kbd:`Ctrl + S` （macOS 上 :kbd:`Cmd + S` ）來保存"
"新的繼承場景並命名為 ``LifeBar`` 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:416
msgid "You can't rename grey nodes. This tells you they have a parent scene"
msgstr "灰色的節點無法重新命名。代表這些節點有母場景"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:418
msgid ""
"First, rename the root or top level node to ``LifeBar``. We always want the "
"root to describe exactly what this UI component is. The name differentiates "
"this bar from the ``EnergyBar`` we'll create next. The other nodes inside "
"the scene should describe the component's structure with broad terms, so it "
"works with all inherited scenes. Like our ``TextureProgress`` and ``Number`` "
"nodes."
msgstr ""
"首先，將根節點或最上層的節點重新命名為 ``LifeBar`` 。根節點應該要能說明清楚這"
"個 UI 元件的用途。通過名稱來區分出這個節點與稍後要做的 ``EnergyBar`` 。場景中"
"的其他節點也應該要通過易懂且放到繼承的場景內也適用的名稱來說明元件的架構。如 "
"``TextureProgress`` 與 ``Number`` 節點就是個例子。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:427
msgid ""
"If you've ever done web design, it's the same spirit as working with CSS: "
"you create a base class, and add variations with modifier classes. From a "
"base button class, you'll have button-green and button-red variations for "
"the user to accept and refuse prompts. The new class contains the name of "
"the parent element and an extra keyword to explain how it modifies it. When "
"we create an inherited scene and change the name of the top level node, "
"we're doing the same thing."
msgstr ""
"如果你有做過網頁設計，這裡的做法就與 CSS 相同：先建立一個基礎的 Class，然後通"
"過 Modifier Class 來製作出不同的種類。從基礎的按鈕 button class，再加上 "
"button-green 與 button-red 等種類來讓使用者在提示框中選擇接受或拒絕。新的 "
"class 名稱包含了母元素的名稱，再加上一個額外的單詞來描述不同的地方。我們在這"
"裡繼承場景後修改了最上層節點的名稱時也是在做同樣的事。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:436
msgid "Design the EnergyBar"
msgstr "設計精力槽 (EnergyBar)"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:438
msgid ""
"We already setup the ``LifeBar``'s design with the main ``Bar`` scene. Now "
"we need the ``EnergyBar``."
msgstr ""
"我們已經使用 ``Bar`` 場景來搞定了 ``LifeBar`` 的設計。現在我們要做 "
"``EnergyBar`` 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:441
msgid ""
"Let's create a new inherited scene, and once again select the ``Bar.tscn`` "
"scene and open it. Double-click on the ``Bar`` root node and rename it to "
"``EnergyBar``. Save the new scene as ``EnergyBar.tscn``. We need to replace "
"the HP texture with EP one, and to change the textures on the gauge."
msgstr ""
"先建立繼承場景。打開 ``Bar.tscn`` ，然後在根節點 ``Bar`` 上點兩下並重新命名"
"為 ``EnergyBar`` ，保存新場景為 ``EnergyBar.tscn`` 。然後我們要把 HP 紋理貼圖"
"改成 EP 的貼圖，並更改計量槽的貼圖。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:447
msgid ""
"Head to the FileSystem dock on the left, select the ``Title`` node in the "
"Scene tree and drag and drop the ``label_EP.png`` file onto the texture "
"slot. Select the ``Number`` node and change the ``Text`` property to a "
"different value like ``14``."
msgstr ""
"在場景樹中選擇 ``Title`` 節點，並到左邊的檔案系統 Dock 中將 ``label_EP.png`` "
"拖曳到紋理貼圖槽內。選擇 ``Number`` 節點並將 ``Text`` 屬性設為不同的值，如 "
"``14`` 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:452
msgid ""
"You'll notice the EP texture is smaller than the HP one. We should update "
"the ``Number``'s font size to better fit it. A font is a resource. All the "
"nodes in the entire project that use this resource will be affected by any "
"property we change. You can try to change the size to a huge value like "
"``40`` and switch back to the ``LifeBar`` or the ``Bar`` scenes. You will "
"see the text increased in size."
msgstr ""
"你會注意到 EP 的貼圖比 HP 的貼圖還來得小。這裡我們應該要一併更新 ``Number`` "
"的字體大小來配合貼圖。字體屬於資源，一旦我們修改了資源的屬性，整個專案中所有"
"用到了相同資源的節點都會被影響。你可以試試看把字體大小改為一個大點的數字如 "
"``40`` ，然後切換回去 ``LifeBar`` 或是 ``Bar`` 場景，就會發現文字大小跟著變大"
"了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:461
msgid "If we change the font resource, all the nodes that use it are affected"
msgstr "如果修改了字體資源，所有使用到該字體的節點都會被影響"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:464
msgid ""
"To change the font size on this node only, we must create a copy of the font "
"resource. Select the ``Number`` node again and click on the wrench and "
"screwdriver icon on the top right of the inspector. In the drop-down menu, "
"select the ``Make Sub-Resources Unique`` option. Godot will find all the "
"resources this node uses and create unique copies for us."
msgstr ""
"如果我們想讓字體大小的修改只作用在這個節點，則必須要把字體資源複製出來。選擇 "
"``Number`` 節點並點擊屬性面板右上角的扳手與螺絲起子圖示，並在下拉選單中選擇 "
"``獨立化子資源`` 。Godot 會找出所有這個節點使用的資源，並建立獨立的拷貝。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:472
msgid "Use this option to create unique copies of the resources for one node"
msgstr "使用這個選項來為單一節點建立獨立的資源拷貝"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:476
msgid ""
"When you duplicate a node from the Scene tree, with :kbd:`Ctrl + D` (:kbd:"
"`Cmd + D` on macOS), it shares its resources with the original node. You "
"need to use ``Make Sub-Resources Unique`` before you can tweak the resources "
"without affecting the source node."
msgstr ""
"當我們使用 :kbd:`Ctrl + D` （或 macOS :kbd:`Cmd + D` ）來在場景樹中拷貝節點，"
"所有的資源都會與原本的節點共用。在修改資源前必須要使用 ``獨立化子資源`` 才能"
"不影響到原本的節點。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:481
msgid ""
"Scroll down to the ``Custom Font`` section and open ``Font``. Lower the "
"``Size`` to a smaller value like ``20`` or ``22``. You may also need to "
"adjust the ``Bottom`` spacing value to align the text's baseline with the EP "
"label on the left."
msgstr ""
"向下滾動到 ``Custom Font`` 段落並打開 ``Font`` 。將 ``Size`` 調為小一點的數字"
"如 ``20`` 或是 ``22`` 。可能也需要調整 ``Bottom`` 的間隔值來將文字的基線對齊"
"左側的 EP 標籤。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:488
msgid "The EP Count widget, with a smaller font than its HP counterpart"
msgstr "EP 計數器元件，使用比 HP 還要小的字體"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:490
msgid ""
"Now, select the ``TextureProgress`` node. Drag the ``energy_bar_bg.png`` "
"file onto the ``Under`` slot and do the same for ``energy_bar_fill.png`` and "
"drop it onto the ``Progress`` texture slot."
msgstr ""
"接著，選擇 ``TextureProgress`` 節點，然後把檔案 ``energy_bar_bg.png`` 拖曳到 "
"``Under`` 槽，同樣地，把 ``energy_bar_fill.png`` 拖曳到 ``Progress`` 貼圖槽"
"中。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:494
msgid ""
"You can resize the node vertically so that its bounding rectangle fits the "
"gauge. Do the same with the ``Count`` node until its size aligns with that "
"of the bar. Because the minimal size of ``TextureProgress`` is set based on "
"its textures, you won't be able to downsize the ``Count`` node below that. "
"That is also the size the ``Bar`` container will have. You may downscale "
"this one as well."
msgstr ""
"這裡可以調整一下節點的垂直大小，讓定界框的大小符合計量槽。也同時調整 "
"``Count`` 節點的大小來對齊計量槽。由於 ``TextureProgress`` 的最小大小是依紋理"
"貼圖設定的，所以 ``Count`` 節點的大小沒辦法縮得比 TextureProgress 還要小。而 "
"``Bar`` Container 的大小也是這樣來的，也可以一起縮小他。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:501
msgid ""
"Last but not least, the ``Background`` container has a minimum size that "
"makes it a bit large. Select it and in the ``Rect`` section, change the "
"``Min Size`` property down to ``80`` pixels. It should resize automatically "
"and the ``Title`` and ``Number`` nodes should reposition as well."
msgstr ""
"最後， ``Background`` 的最小尺寸還是有點大，所以我們先選擇 Background，然後"
"在 ``Rect`` 段落中把 ``Min Size`` 改為 ``80`` px 。現在 Background 的大小應該"
"會自動縮放了，而且 ``Title`` 跟 ``Number`` 的位置應該也自動調整好了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:509
msgid "The Count looks better now it's a bit smaller"
msgstr "Count 變得小一點了，看起來好多了"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:513
msgid ""
"The Count node's size affects the position of the TextureProgress. As we'll "
"align our bars vertically in a moment, we're better off using the Counter's "
"left margin to resize our EP label. This way both the EnergyBar's Count and "
"the LifeBar's Count nodes are one hundred pixels wide, so both gauges will "
"align perfectly."
msgstr ""
"Count 節點的大小會影響 TextureProgress 的位置。稍後我們會垂直對齊計量槽，所以"
"最好使用 Counter 的左外邊距來調整 EP 標籤的大小。這樣一來才會讓 EnergyBar 跟 "
"LifeBar 的 Count 節點都保持 100px 寬，互相對齊。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:520
msgid "Prepare the bomb and emerald counters"
msgstr "準備炸彈與寶石計數器"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:522
msgid ""
"Let us now take care of the counters. Go to ``Scene -> New Inherited Scene`` "
"and select the ``Counter.tscn`` as a base. Rename the root node as "
"``BombCounter`` too. Save the new scene as ``BombCounter.tscn``. That's all "
"for this scene."
msgstr ""
"來關心一下計數器。打開 ``場景 -> 新增繼承場景`` 並選擇基礎場景 ``Counter."
"tscn`` 。將根節點重新命名為 ``BombCounter`` ，並保存場景為 ``BombCounter."
"tscn`` 。這個場景就這樣了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:529
msgid "The bomb counter is the same as the original Counter scene"
msgstr "炸彈的計數器就根原本的計數器場景一模一樣"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:531
msgid ""
"Go to ``Scene -> New Inherited Scene`` again and select ``Counter.tscn`` "
"once more. Rename the root node ``EmeraldCounter`` and save the scene as "
"``EmeraldCounter.tscn``. For this one, we mainly need to replace the bomb "
"icon with the emerald icon. In the FileSystem tab, drag the ``emeralds_icon."
"png`` onto the ``Icon`` node's ``Texture`` slot. ``Icon`` already anchors to "
"the right edge of the ``Background`` node so we can change its position and "
"it will scale and reposition with the ``EmeraldCounter`` container. Shift "
"the emerald icon a bit to the right and down. Use the Arrow Keys on the "
"keyboard to nudge its position. Save, and we're done with all the UI "
"elements."
msgstr ""
"再打開一次 ``場景 -> 新增繼承場景`` 然後一樣選 ``Counter.tscn`` 。將根節點重"
"新命名為 ``EmeraldCounter`` 然後保存場景為 ``EmeraldCounter.tscn`` 。這個場景"
"我們的主要目標是要把炸彈圖示換成寶石圖示。到檔案系統分頁中把 ``emeralds_icon."
"png`` 拖移到 ``Icon`` 節點的 ``Texture`` 槽中。 ``Icon`` 已經錨定在 "
"``Background`` 節點的右側了，所以當我們調整位置的時候會自動縮放並在 "
"``EmeraldCounter`` 容器中重新定位。將寶石圖示稍微往左下移動一點。可以使用鍵盤"
"上的方向鍵來微調位置。存檔，現在我們已經完成所有 UI 元素了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:544
msgid "The emerald counter should look something like this"
msgstr "寶石計數器看起來應該長這樣"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:547
msgid "Add the UI components to the final GUI"
msgstr "將 UI 元件加到最終 GUI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:549
msgid ""
"Time to add all the UI elements to the main GUI scene. Open the ``GUI.tscn`` "
"scene again, and delete the ``Bar`` and ``Counter`` nodes. In the FileSystem "
"dock, find the ``LifeBar.tscn`` and drag and drop it onto the ``Bars`` "
"container in the scene tree. Do the same for the ``EnergyBar``. You should "
"see them align vertically."
msgstr ""
"該來把所有 UI 元素都加到主要的 GUI 場景了。打開 ``GUI.tscn`` 然後刪除 "
"``Bar`` 跟 ``Counter`` 節點。在檔案系統 Dock 中找到 ``LifeBar.tscn`` 並拖曳到"
"場景樹中的 ``Bar`` 容器。 ``EnergyBar`` 也一樣拖曳過來。接著這兩個場景應該會"
"垂直對齊。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:557
msgid "The LifeBar and the EnergyBar align automatically"
msgstr "LifeBar 與 EnergyBar 自動對齊"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:559
msgid ""
"Now, drag and drop the ``BombCounter.tscn`` and ``EmeraldCounter.tscn`` "
"scenes onto the ``Counters`` node. They'll resize automatically."
msgstr ""
"現在將 ``BombCounter.tscn`` 與 ``EmeraldCounter.tscn`` 場景拖曳至 "
"``Counters`` 節點。這兩個場景的大小會自動縮放。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:564
msgid "The nodes resize to take all the available vertical space"
msgstr "節點會自動縮放並佔用水平方向上所有可用的空間"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:566
msgid ""
"To let the ``EmeraldCounter`` and ``BombCounter`` use the size we defined in "
"``Counter.tscn``, we need to change the ``Size Flags`` on the ``Counters`` "
"container. Select the ``Counters`` node and unfold the ``Size Flags`` "
"section in the Inspector. Uncheck the ``Fill`` tag for the ``Vertical`` "
"property, and check ``Shrink Center`` so the container centers inside the "
"``HBoxContainer``."
msgstr ""
"要讓 ``EmeraldCounter`` 與 ``BombCounter`` 使用我們在 ``Counter.tscn`` 裡設定"
"的大小，我們需要修改 ``Counters`` 容器上的 ``Size Flags`` 。先選擇 "
"``Counters`` 節點然後展開屬性面板中的 ``Size Flags`` 段落，取消選擇 "
"``Vertical`` 屬性中的 ``Fill`` 標籤，並勾選 ``Shrink Center`` ，這樣容器在 "
"``HBoxCounter`` 中就會置中。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:575
msgid "Now both counters have a decent size"
msgstr "兩個計數器的大小現在沒問題了"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:579
msgid ""
"Change the ``Min Size`` property of the ``Counters`` container to control "
"the height of the counters' background."
msgstr "更改 ``Counters`` 容器的 ``Min Size`` 屬性來控制計數器背景的高度。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:582
msgid ""
"We have one small issue left with the EP label on the EnergyBar: the 2 bars "
"should align vertically. Click the icon next to the ``EnergyBar`` node to "
"open its scene. Select the ``Count`` node and scroll down to the ``Custom "
"Constants`` section. Add a ``Margin Left`` of ``20``. In the ``Rect`` "
"section set the node's ``Min Size`` back to 100, the same value as on the "
"LifeBar. The ``Count`` should now have some margin on the left. If you save "
"and go back to the GUI scene, it will be aligned vertically with the "
"``LifeBar``."
msgstr ""
"EnergyBar 中的 EP 標籤還有個小問題：兩個計量槽應該要垂直對齊。點擊 "
"``EnergyBar`` 節點旁邊的圖示來打開場景。選擇 ``Count`` 節點然後往下滾動找到 "
"``Custom Constants`` 段落。新增 ``Margin Left`` ，值為 ``20`` 。在 ``Rect`` "
"段落中將節點的 ``Min Size`` 改回去與 LifeBar 相同的 100。 ``Count`` 節點的左"
"邊現在應該有點邊距了。保存並回到 GUI 場景，EnergyBar 現在應該與 ``LifeBar`` "
"垂直對齊了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:593
msgid "The 2 bars align perfectly"
msgstr "兩個計量槽好好地對齊了"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:597
msgid ""
"We could have set up the ``EnergyBar`` this way a few moments ago. But this "
"shows you that you can go back to any scene anytime, tweak it, and see the "
"changes propagate through the project!"
msgstr ""
"我們也可以在剛才就設定好 ``EnergyBar`` 。但這裡只是要告訴你隨時都可以回去任何"
"場景並進行調整，並在整個專案中看看所做的更改！"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:602
msgid "Place the GUI onto the game's mockup"
msgstr "將 GUI 放到遊戲打樣上"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:604
msgid ""
"To wrap up the tutorial we're going to insert the GUI onto the game's mockup "
"scene."
msgstr "在教學的最後我們要將 GUI 放進遊戲的打樣場景中。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:607
msgid "Head to the FileSystem dock and open ``LevelMockup.tscn``."
msgstr "到檔案系統 Dock 中打開 ``LevelMockup.tscn`` 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:609
msgid ""
"Drag-and-drop the ``GUI.tscn`` scene right below the ``bg`` node and above "
"the ``Characters``. The GUI will scale to fit the entire viewport. Head to "
"the Layout menu and select the ``Center Top`` option so it anchors to the "
"top edge of the game window. Then resize the GUI to make it as small as "
"possible vertically. Now you can see how the interface looks in the context "
"of the game."
msgstr ""
"將 ``GUI.tscn`` 場景拖曳到節點樹中，放在 ``bg`` 場景底下， ``Characters`` 場"
"景上面。GUI 會縮放並貼合整個檢視區。打開畫面配置選單並選擇 ``中上`` 來將節點"
"錨定到遊戲視窗的上邊緣。接著縮放 GUI 來儘可能縮小縱軸的尺寸。現在你可以看到界"
"面在遊戲裡長得樣子了。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:616
msgid ""
"Congratulations for getting to the end of this long tutorial. You can find "
"the final project here: :download:`ui_gui_design.zip <files/ui_gui_design."
"zip>`."
msgstr ""
"恭喜你完整成了這篇長長的教學。專案的最終結果可以在這裡找到： :download:"
"`ui_gui_design.zip <files/ui_gui_design.zip>` 。"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:625
msgid ""
"**A final note about Responsive Design**. If you resize the GUI, you'll see "
"the nodes move, but the textures and text won't scale. The GUI also has a "
"minimum size, based on the textures inside of it. In games, we don't need "
"the interface to be as flexible as that of a website. You almost never want "
"to support both landscape and portrait screen orientations. It's one or the "
"other. In landscape orientation, the most common ratios range from 4:3 to "
"16:9. They are close to one another. That's why it's enough for the GUI "
"elements to only move horizontally when we change the window size."
msgstr ""
"**關於回應式設計的最後一點提醒** 。縮放 GUI 時會發現節點跟著移動，但貼圖與文"
"字不會縮放。同時 GUI 也會依據裡面的貼圖而有最小尺寸。在遊戲中，界面不需要像網"
"頁一樣彈性。製作遊戲的時候幾乎不會同時支援縱向與橫向兩種螢幕方向，只會支援一"
"種。橫向畫面時最常見的長寬比介於 4:3 至 16:9 之間，每種長寬比都很接近。所以我"
"們在更改視窗大小的時候只需要水平移動 GUI 元素就好了。"
