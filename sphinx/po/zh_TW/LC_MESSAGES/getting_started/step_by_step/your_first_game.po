# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:4
msgid "Your first game"
msgstr "第一個遊戲"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:7
msgid "Overview"
msgstr "概覽"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:9
msgid ""
"This tutorial will guide you through making your first Godot project. You "
"will learn how the Godot editor works, how to structure a project, and how "
"to build a 2D game."
msgstr ""
"本篇教學會帶領你製作出第一個 Godot 專案。在本篇教學中，會學習 Godot 是如何運"
"作的、如何組織一個專案以及如何製作一個 2D 遊戲。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:13
msgid ""
"This project is an introduction to the Godot engine. It assumes that you "
"have some programming experience already. If you're new to programming "
"entirely, you should start here: :ref:`doc_scripting`."
msgstr ""
"這個專案是用來介紹 Godot 引擎的。在這裡我們會假設你已經有一些程式設計的經驗。"
"如果完全沒有寫程式的經驗，請從 :ref:`doc_scripting` 開始。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:18
msgid ""
"The game is called \"Dodge the Creeps!\". Your character must move and avoid "
"the enemies for as long as possible. Here is a preview of the final result:"
msgstr ""
"這個遊戲叫做「Dodge the Creeps! 」。玩家角色必須不斷移動，儘可能地一直閃躲敵"
"人。最終成果會長這樣："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:24
msgid ""
"**Why 2D?** 3D games are much more complex than 2D ones. You should stick to "
"2D until you have a good understanding of the game development process and "
"how to use Godot."
msgstr ""
"**為什麼是 2D？** 3D 遊戲比 2D 來得複雜多了。直到完整掌握了遊戲開發流程以及 "
"Godot 使用方法，都應該先以 2D 為主。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:29
msgid "Project setup"
msgstr "設定專案"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:31
msgid ""
"Launch Godot and create a new project. Then, download :download:"
"`dodge_assets.zip <files/dodge_assets.zip>`. This contains the images and "
"sounds you'll be using to make the game. Unzip these files in your project "
"folder."
msgstr ""
"開啟 Godot 並建立一個新專案。接著，下載 :download:`dodge_assets.zip <files/"
"dodge_assets.zip>` 。這個檔案包含了接下來製作遊戲時會使用到的圖片與聲音檔。把"
"這些檔案解壓縮至專案資料夾中。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:36
msgid ""
"For this tutorial, we will assume you are familiar with the Godot editor. If "
"you haven't read :ref:`doc_scenes_and_nodes`, do so now for an explanation "
"of setting up a project and using the editor."
msgstr ""
"在這篇教學中，我們假設你已經熟悉 Godot 編輯器了。如果還沒讀過 :ref:"
"`doc_scenes_and_nodes` ，請先閱讀，裡面有解釋如何設定專案以及編輯器使用方法。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:40
msgid ""
"This game is designed for portrait mode, so we need to adjust the size of "
"the game window. Click on Project -> Project Settings -> Display -> Window "
"and set \"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""
"這個遊戲的畫面設計成了垂直顯示，我們需要調整遊戲視窗的大小。點擊 [專案] -> "
"[專案設定] -> [Display] (顯示) -> [Window] (視窗)，接著把 [Width] (寬度) 設"
"為 ``480`` ，[Height] (高度) 設為 ``720`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:44
msgid ""
"Also in this section, under the \"Stretch\" options, set ``Mode`` to \"2d\" "
"and ``Aspect`` to \"keep\". This ensures that the game scales consistently "
"on different sized screens."
msgstr ""
"另外，在同一個地方，將 [Stretch] (拉伸) 選項中的 ``Mode`` (模式) 設為「2d」，"
"將 [Aspect] (比例) 設為「keep」(保持)。這樣就能確保遊戲在不同大小的螢幕上會保"
"持相同的比例。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:49
msgid "Organizing the project"
msgstr "組織專案"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:51
msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene. In a larger "
"project, it might be useful to create folders to hold the various scenes and "
"their scripts, but for this relatively small game, you can save your scenes "
"and scripts in the project's root folder, identified by ``res://``.  You can "
"see your project folders in the FileSystem Dock in the lower left corner:"
msgstr ""
"在這個專案中，我們會使用三個獨立的場景： ``Player`` (玩家)、 ``Mob`` (怪物) "
"與 ``HUD`` ，我們會把這三個場景組合進遊戲的 ``Main`` (主要) 場景。在大型專案"
"中，或許開一些資料夾來儲存不同的場景與其對應的腳本會比較好，但對於相對小型的"
"遊戲，可以把場景跟腳本都保存在專案的根目錄下，也就是 ``res://`` 。可以在左下"
"角的檔案系統 Dock 中看到專案資料夾："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:62
msgid "Player scene"
msgstr "Player 場景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:64
msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"第一個場景，我們要來定義 ``Player`` 物件。把玩家做成獨立一個 Player 場景的好"
"處是：就算遊戲其他部分還沒做好，也可以獨立測試單一場景。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:69
msgid "Node structure"
msgstr "節點結構"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:71
msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"首先，我們需要選擇玩家物件的根節點。一般來說，場景的根節點通常對應了物件所需"
"要的功能——也就是物件 **是什麼**。點擊 [其他節點] 按鈕，並新增 :ref:`Area2D "
"<class_Area2D>` 節點至場景中。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:78
msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot 會在場景樹中的節點旁邊顯示一個警告圖示。可以暫時忽略，之後再來處理。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:81
msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"有了 ``Area2D`` 節點，我們就能偵測跑到了玩家範圍內物件。我們先點兩下節點，把"
"節點名稱改成 ``Player`` 。現在，場景根節點已經設定好了，接著來設定更多節點，"
"新增更多功能。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:86
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"在我們給 ``Player`` 新增任何子節點前，需要先確保不會因為點到 Player 物件而移"
"動到 Player 或改變到大小。先選擇 Player 節點，然後點擊鎖頭右邊的圖示，滑鼠移"
"到圖示上方的時候會顯示提示「確保物件的子級項目無法被選擇。」"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:93
msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"接著保存場景。選擇 [場景] -> [保存]，或是在 Windows/Linux 上按鍵盤 :kbd:"
"`Ctrl + S` ，在 macOS 上則是 :kbd:`Cmd + S` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:95
msgid "For this project, we will be following the Godot naming conventions."
msgstr "在這個專案中，我們會遵守 Godot 的命名慣例。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:97
msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript** ：類別 (節點) 使用大駝峰法 (PascalCase)，變數與函式名稱使用蛇形"
"法 (snake_case)，常數則使用全大寫 (ALL_CAPS) (詳細請參考 :ref:"
"`doc_gdscript_styleguide`)。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:101
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`).  Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#** ：類別與匯出的變數與方法使用大駝峰法 (PascalCase)，Private 欄位使用底"
"線加小駝峰 (_camelCase)，區域變數與參數使用小駝峰法 (camelCase) (請參考 :ref:"
"`doc_c_sharp_styleguide` )。在連接訊號的時候請特別注意不要打錯方法名稱。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:108
msgid "Sprite animation"
msgstr "Sprite 動畫"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:110
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"點擊 ``Player`` 節點然後新增一個 :ref:`AnimatedSprite "
"<class_AnimatedSprite>` 子節點。這個 ``AnimatedSprite`` 會負責處理玩家的外觀"
"與動畫效果。可以注意到節點旁邊有一個警告圖示。所有 ``AnimatedSprite`` 都必須"
"要有 :ref:`SpriteFrames <class_SpriteFrames>` 資源，裡面包含了所有能顯示的動"
"畫。可以在屬性面板中 ``Frames`` (影格) 屬性上點選 [空] ->[新增 SpriteFrames] "
"來建立 SpriteFrames。再點擊一次就能打開 [SpriteFrames] 面板："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:121
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"左側顯示的是動畫列表。點擊「default」(預設) 並重新命名為「walk」(走路)。接著"
"點擊 [新增動畫] 按鈕來建立第二個動畫，將其命名為「up」(上移)。接著到 [檔案系"
"統] 頁籤中找到玩家圖片——應該放在稍早解壓縮出來的 ``art`` 資料夾內。在動畫列表"
"上選擇對應的動畫，並把圖片 ``playerGrey_up[1/2]`` 以及 "
"``playerGrey_walk[1/2]`` 拖移到 [動畫影格] 那裡 ："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:130
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"對於遊戲視窗來說，這些玩家圖片看起來有點大，所以我們需要把圖片縮小。點擊 "
"``AnimatedSprite`` 節點，然後把 ``Scale`` (縮放) 屬性設為 ``(0.5, 0.5)`` 。這"
"個屬性位在屬性面板中 ``Node2D`` 標題底下。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:137
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\".  Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"最後，在 ``Player`` 節點下新增一個 :ref:`CollisionShape2D "
"<class_CollisionShape2D>` 子節點。這個節點是用來判斷玩家的「碰撞區域 (Hitbox "
"或 Collision Area)」。在這個角色上很適合使用 ``CapsuleShape2D`` 節點，所以我"
"們可以到屬性面板中的 [Shape] (形狀)，點擊 [空] -> [新增 CapsuleShape2D]。使用"
"兩個控制尺寸的圓點來把大小調整至覆蓋 Sprite："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:146
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "完成之後， ``Player`` 看起來應該會像這樣："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:150
msgid "Make sure to save the scene again after these changes."
msgstr "修改完畢後記得保存場景。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:153
msgid "Moving the player"
msgstr "移動玩家"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:155
msgid ""
"Now we need to add some functionality that we can't get from a built-in "
"node, so we'll add a script. Click the ``Player`` node and click the "
"\"Attach Script\" button:"
msgstr ""
"現在我們需要一個內建節點沒有提供的功能，所以需要自己寫腳本了。點擊 "
"``Player`` 節點，然後點擊 [附加腳本] 按鈕："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:161
msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr "腳本設定視窗內的設定可以保持預設值。直接點擊 [建立] 就好："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:164
msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"如果要建立 C# 腳本或其他語言的腳本，在點擊建立前記得在 [語言] 下拉選單內選擇"
"語言。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:169
msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr "若是第一次接觸 GDScript，建議在繼續前先閱讀 :ref:`doc_scripting` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:172
msgid "Start by declaring the member variables this object will need:"
msgstr "首先我們先宣告這個物件所需要的成員變數："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:193
msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"在第一個變數 ``speed`` 上使用 ``export`` 關鍵字可以讓我們稍後在屬性面板中指"
"定 speed 的值。當希望讓成員變數與節點內建屬性一樣可以在屬性面板中調整的話，就"
"可以用這個功能。點擊 ``Player`` 節點，就可以在 [Script Variables] (腳本變數) "
"內看到這個屬性。但請記得，如果在屬性面板中修改了數值，會覆蓋掉腳本內所指定的"
"值。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:200
msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"使用 C# 時，若要看到新匯出的變數或訊號，就需要建置或重新建置專案。要重新建置"
"專案可以手動點擊編輯器視窗底部的 [Mono] 文字來打開 Mono 面板，然後點擊 [建置"
"專案] 按鈕。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:208
msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 函式是當節點進入場景樹後會呼叫的函式，這裡正是取得遊戲視窗大小的"
"好時機："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:224
msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"接著我們可以使用 ``_process()`` 函式來定義玩家要做的事。 ``_process()`` 在每"
"一幀都會被呼叫，所以我們會用 _process() 來更新遊戲內需要常常變化的元素。而對"
"於 Player，我們需要做這些事："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:229
msgid "Check for input."
msgstr "檢查輸入。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:230
msgid "Move in the given direction."
msgstr "沿指定方向移動。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:231
msgid "Play the appropriate animation."
msgstr "播放適當的動畫。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:233
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this demo, "
"we will use the default events that are assigned to the arrow keys on the "
"keyboard."
msgstr ""
"首先，我們需要檢查輸入——玩家有按按鍵嗎？在這個遊戲中，我們需要檢查四個方向的"
"輸入。輸入操作是在專案設定中的 [輸入映射] 裡設定的。可以在輸入映射中定義自定"
"事件，並給事件指定不同的按鍵、滑鼠事件或其他輸入。在這個示範遊戲中，我們會使"
"用預設事件，這些事件是被分配到鍵盤上的方向鍵。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:240
msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""
"可以用 ``Input.is_action_pressed()`` 來偵測按鍵是否被按下。這個函式會在按鍵被"
"按下時回傳 ``true`` ，若沒按下則會回傳 ``false`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:302
msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""
"我們先從設定 ``velocity`` (速率) 開始，設定成 ``(0, 0)`` ——這表示在預設情況"
"下，玩家應該不會移動。接著依據不同的輸入來增加／減少 ``velocity`` 來往不同方"
"向移動。例如，如果同時按住 ``右`` 與 ``下`` 方向鍵，最終的 ``velocity`` 向量"
"值應該是 ``(1, 1)`` 。因為這個情況下我們同時增加了水平與垂直方向的移動距離，"
"所以玩家的移動速度應該比只在水平方向上移動 **還要快** 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:309
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"我們可以通過 **正規化** (Normalize) 速率來防止這種情況，也就是要把移動的 **距"
"離** 設定為 ``1`` ，接著乘以需要的速度。這表示在對角線上移動不會比水平移動還"
"要快了。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:313
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"如果你從來沒學習過向量數學運算或是需要複習的話，可以參考這篇 :ref:"
"`doc_vector_math` 瞭解 Godot 中是如何使用向量的。雖然對於這篇本篇教學剩下的部"
"分來說不必要，但若能瞭解 Godot 中的向量是最好不過的了。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:317
msgid ""
"We also check whether the player is moving so we can call ``play()`` or "
"``stop()`` on the AnimatedSprite."
msgstr ""
"同時也需要檢查玩家有沒有在移動，這樣才能呼叫 AnimatedSprite 上的 ``play()`` "
"跟 ``stop()`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:320
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, ``"
"$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$`` 是 ``get_node()`` 的簡寫。所以上面的程式碼中 ``$AnimatedSprite."
"play()`` 等同於 ``get_node(\"AnimatedSprite\").play()`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:323
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"在 GDScript 中， ``$`` 會回傳與目前節點相對路徑上的節點，若找不到則會回傳 "
"``null`` 。由於 AnimatedSprite 是目前節點的子節點，所以可以寫成 ``"
"$AnimatedSprite`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:326
msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""
"現在玩家會面向不同方向了，可以接著來更新玩家的位置。還可以使用 ``clamp()`` "
"(箝制) 來防止 Player 物件跑出畫面外。**箝制** 一個值，就代表把值限制在一個給"
"定的範圍內。將下列程式碼放到 ``_process`` 函式的末尾 (記得確定不要放到 "
"`else` 縮排下了)："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:347
msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"**_process()** 函式的 **delta** 參數代表了 **影格時長** ——即是自從上一個影格"
"到現在這個影格所花費的時間。通過這個數值可以確保即使幀率發生變化，移動的距離"
"也能保持不變。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:352
msgid ""
"Click \"Play Scene\" (``F6``) and confirm you can move the player around the "
"screen in all directions."
msgstr "點擊 [執行場景] (``F6``) 並測試玩家能否夠移動到任何一個方向。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:355
msgid "If you get an error in the \"Debugger\" panel that says"
msgstr "若「除錯工具」中出現了這樣的錯誤"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:357
msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance`` (嘗試在基礎型別為「null 實體」的 null 實體上呼叫「play」函式)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:359
msgid ""
"this likely means you spelled the name of the AnimatedSprite node wrong. "
"Node names are case-sensitive and ``$NodeName`` must match the name you see "
"in the scene tree."
msgstr ""
"通常這代表程式中的 AnimatedSprite 節點名稱拼錯了。節點名稱有區分大小寫，而且 "
"``$NodeName`` 這種語法中的名稱必須與場景樹裡能看到的節點名稱一致。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:364
msgid "Choosing animations"
msgstr "選擇動畫"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:366
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on its direction. We have the \"walk\" "
"animation, which shows the player walking to the right. This animation "
"should be flipped horizontally using the ``flip_h`` property for left "
"movement. We also have the \"up\" animation, which should be flipped "
"vertically with ``flip_v`` for downward movement. Let's place this code at "
"the end of the ``_process()`` function:"
msgstr ""
"現在玩家可以移動了，現在讓我們來根據移動的方向改變播放的 AnimatedSprite。"
"「walk」動畫會讓玩家看起來朝右邊行走，朝左邊行走時使用 ``flip_h`` 屬性來水平"
"翻轉動畫。另一個動畫是「up」，朝下行走時使用 ``flip_v`` 來垂直翻轉。來把程式"
"碼放到 ``_process()`` 函式的尾端："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:401
msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""
"在這段程式碼中的布林賦值是程式設計師常用的一種簡寫方式。因為做了數值比較 (會"
"得到布林值) 後也需要將這個布林值 **賦值** 到變數上，所以我們可以把這兩件事合"
"在一起做。可以比較看看下面這段程式碼跟上方範例中單行布林賦值的程式："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:425
msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr "再執行一次場景來看看各個方向的動畫是否正確。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:428
msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""
"很多人會在這裡打錯動畫名稱。SpriteFrames 面板上的動畫名稱必須與程式碼中輸入的"
"名稱一致。如果動畫名稱為 ``「Walk」`` ，則程式碼中也必須使用大寫的「W」。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:433
msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"確保能正常移動後，來把下面這行程式碼加到 ``_ready()`` 裡。如此一來在遊戲開始"
"的時候玩家會隱藏起來："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:446
msgid "Preparing for collisions"
msgstr "準備碰撞"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:448
msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"我們希望 ``Player`` 被敵人撞到時能偵測到，但我們還沒做好敵人！沒關係，因為我"
"們會用 Godot 的 **訊號** 來做這個功能。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:452
msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr "將下列程式碼加在腳本頂部的 ``extends Area2D`` 後："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:466
msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"這段程式碼定義了一個叫做「hit」的自定訊號，稍後我們會讓玩家在碰撞到敵人的時候"
"送出這個訊號。我們會使用 ``Area2D`` 來偵測碰撞。先選擇 ``Player`` 節點，然後"
"點擊屬性面板旁邊的 [節點] 分頁來看看所有 Player 能送出的訊號："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:473
msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` "
"signal. This signal will be emitted when a body contacts the player. Click "
"\"Connect..\" and the \"Connect a Signal\" window appears. We don't need to "
"change any of these settings so click \"Connect\" again. Godot will "
"automatically create a function in your player's script."
msgstr ""
"可以看到我們自定的「hit」訊號出現在這裡了！由於敵人使用 ``RigidBody2D`` 節"
"點，所以我們會需要 ``body_entered(body: Node)`` 訊號。這個訊號會在敵人的形體 "
"(Body) 接觸到玩家時送出。點擊 [連接...] 後會出現「連接訊號」視窗。我們先不動"
"這裡的設定，點擊 [連接]。Godot 會自動在玩家腳本內建立一個函式。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:482
msgid ""
"Note the green icon indicating that a signal is connected to this function. "
"Add this code to the function:"
msgstr ""
"可以注意到，出現了一個綠色圖示。這個圖示代表有訊號連到這個函式上。將這段程式"
"碼加到函式中："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:502
msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"每當敵人碰撞到玩家後都會送出這個訊號。這時我們需要關閉玩家的碰撞偵測，這樣才"
"不會觸發超過一次的 ``hit`` 訊號。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:506
msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""
"如果在引擎處理碰撞過程中間禁用碰撞區域可能會發生錯誤。所以我們需要使用 "
"``set_deferred()`` 來讓 Godot 等到能安全禁用碰撞區域後再禁用。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:510
msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr "最後我們要做的，就是新增一個函式，用來在開始新遊戲時重設玩家。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:531
msgid "Enemy scene"
msgstr "Enemy (敵人) 場景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:533
msgid ""
"Now it's time to make the enemies our player will have to dodge. Their "
"behavior will not be very complex: mobs will spawn randomly at the edges of "
"the screen, choose a random direction, and move in a straight line."
msgstr ""
"是時候來做一些讓玩家閃躲的敵人了。這些敵人的行為不會很複雜：怪物會隨機在螢幕"
"的邊緣產生，接著隨機選一個方向來直線移動。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:537
msgid ""
"We'll create a ``Mob`` scene, which we can then *instance* to create any "
"number of independent mobs in the game."
msgstr ""
"我們來建立一個 ``Mob`` (怪物) 場景，我們利用這個場景來在遊戲中 **實體化** 多"
"個獨立的怪物。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:540
msgid "See :ref:`doc_instancing` to learn more about instancing."
msgstr "請參考 :ref:`doc_instancing` 以瞭解更多有關實體化的資訊。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:543
msgid "Node setup"
msgstr "設定節點"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:545
msgid "Click Scene -> New Scene and add the following nodes:"
msgstr "點擊 [場景] -> [新增場景]，然後新增下列節點："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:547
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ":ref:`RigidBody2D <class_RigidBody2D>` (設定名稱為 ``Mob`` )"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:549
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr ":ref:`AnimatedSprite <class_AnimatedSprite>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:550
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr ":ref:`CollisionShape2D <class_CollisionShape2D>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:551
msgid ":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>`"
msgstr ":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:553
msgid ""
"Don't forget to set the children so they can't be selected, like you did "
"with the Player scene."
msgstr "別忘了把子節點設定成無法選擇，跟剛剛在 Player 場景中一樣。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:556
msgid ""
"In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity "
"Scale`` to ``0``, so the mob will not fall downward. In addition, under the "
"``PhysicsBody2D`` section, click the ``Mask`` property and uncheck the first "
"box. This will ensure the mobs do not collide with each other."
msgstr ""
"將 :ref:`RigidBody2D <class_RigidBody2D>` 的 ``Gravity Scale`` (重力量級) 設"
"為 ``0`` ，讓怪物不會下墜。另外，在 ``PhysicsBody2D`` 中，點擊 ``Mask`` (遮"
"罩) 屬性並取消選擇第一個勾選框，就可以確保怪物不會互相碰撞。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:563
msgid ""
"Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the "
"player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. "
"There are two images for each animation in the art folder."
msgstr ""
"接著像剛才設定玩家那樣，設定 :ref:`AnimatedSprite <class_AnimatedSprite>` 。"
"這次有三種動畫： ``fly`` (飛行)、 ``swim`` (游泳) 與 ``walk`` (行走)。每個動"
"畫都有兩個圖片，放在 art 資料夾中。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:567
msgid "Adjust the \"Speed (FPS)\" to ``3`` for all animations."
msgstr "將所有動畫的「速度 (FPS)」調整為 ``3`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:571
msgid "Set the ``Playing`` property in the Inspector to “On”."
msgstr "在屬性面板中勾選 ``Playing`` (播放) 屬性為「開啟」。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:573
msgid ""
"We'll select one of these animations randomly so that the mobs will have "
"some variety."
msgstr ""
"接著我們會隨機選擇其中一個動畫來播放，這樣才不會讓所有怪物看起來都一樣。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:575
msgid ""
"Like the player images, these mob images need to be scaled down. Set the "
"``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""
"就像玩家的圖片一樣，這些怪物的圖片也需要縮小。將 ``AnimatedSprite`` 的 "
"``Scale`` (縮放) 屬性設為 ``(0.75, 0.75)`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:578
msgid ""
"As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To "
"align the shape with the image, you'll need to set the ``Rotation Degrees`` "
"property to ``90`` (under \"Transform\" in the Inspector)."
msgstr ""
"與 ``Player`` 場景中一樣，新增 ``CapsuleShape2D`` 來設定碰撞區域。你會需要將 "
"``Rotation Degrees`` （旋轉角度）屬性設定為 ``90`` 才能將形狀對齊圖片（這個屬"
"性在屬性面板中的「Transform」（變形）底下）。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:582
msgid "Save the scene."
msgstr "保存場景。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:585
msgid "Enemy script"
msgstr "敵人腳本"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:587
msgid "Add a script to the ``Mob`` and add the following member variables:"
msgstr "為 ``Mob`` 新增一個腳本，並新增下列成員變數："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:611
msgid ""
"When we spawn a mob, we'll pick a random value between ``min_speed`` and "
"``max_speed`` for how fast each mob will move (it would be boring if they "
"were all moving at the same speed)."
msgstr ""
"當產生怪物時，我們會在 ``min_speed`` 與 ``max_speed`` 間取一個隨機數，用來判"
"斷怪物需要移動多快（因為如果所有怪物都用同樣速度移動的話會很無聊）。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:615
msgid ""
"Now let's look at the rest of the script. In ``_ready()`` we randomly choose "
"one of the three animation types:"
msgstr ""
"現在來看看腳本剩下的部分。我們在 ``_ready()`` 中隨機在三種動畫中選擇一個："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:637
msgid ""
"First, we get the list of animation names from the AnimatedSprite's "
"``frames`` property. This returns an Array containing all three animation "
"names: ``[\"walk\", \"swim\", \"fly\"]``."
msgstr ""
"首先，我們需要從 AnimatedSprite 的 ``frames`` 屬性中取得所有動畫的名稱。這個"
"屬性會回傳一個陣列 (Array)，包含三個動畫的名稱： ``[\"walk\", \"swim\", \"fly"
"\"]`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:641
msgid ""
"We then need to pick a random number between ``0`` and ``2`` to select one "
"of these names from the list (array indices start at ``0``). ``randi() % n`` "
"selects a random integer between ``0`` and ``n-1``."
msgstr ""
"接著我們需要選擇 ``0`` 到 ``2`` 間的一個隨機數，用來從這個陣列中選擇名稱（陣"
"列的索引從 ``0`` 開始）。 使用 ``randi() % n`` 可以從 ``0`` 到 ``n - 1`` 之間"
"隨機選擇一個整數。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:645
msgid ""
"You must use ``randomize()`` if you want your sequence of \"random\" numbers "
"to be different every time you run the scene. We're going to use "
"``randomize()`` in our ``Main`` scene, so we won't need it here."
msgstr ""
"要讓「隨機」產生的數字在每次執行場景的時候都不同的話，需要呼叫 "
"``randomize()`` 。我們之後會在 ``Main`` 場景中呼叫 ``randomize()`` 的，現在還"
"不需要他。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:649
msgid ""
"The last piece is to make the mobs delete themselves when they leave the "
"screen. Connect the ``screen_exited()`` signal of the "
"``VisibilityNotifier2D`` node and add this code:"
msgstr ""
"最後我們來讓怪物在離開畫面後刪除自己。連接 ``VisibilityNotifier2D`` 節點的 "
"``screen_exited()`` 訊號，並新增這段程式碼："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:666
msgid "This completes the `Mob` scene."
msgstr "這樣就完成了 `Mob` 場景。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:669
msgid "Main scene"
msgstr "Main（主要）場景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:671
msgid ""
"Now it's time to bring it all together. Create a new scene and add a :ref:"
"`Node <class_Node>` named ``Main``. Ensure you create a Node, **not** a "
"Node2D. Click the \"Instance\" button and select your saved ``Player.tscn``."
msgstr ""
"現在該把所有東西都組合在一起了。先建立一個新的場景，並新增一個名稱為 "
"``Main`` 的 :ref:`Node <class_Node>` 。請確認一下建立的是 Node，**而不是** "
"Node2D。點擊 [實體化] 按鈕並選擇稍早保存的 ``Player.tscn`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:678
msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""
"現在，將下列節點新增為 ``Main`` 的子節點，並他們的名稱如下（數值單位為秒）："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:681
msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>` （名稱為 ``MobTimer`` ）——用以控制怪物產生的頻率"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:682
msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""
":ref:`Timer <class_Timer>` （名稱為 ``ScoreTimer`` ）——用以每秒增加成績"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:683
msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""
":ref:`Timer <class_Timer>` （名稱為 ``StartTimer`` ）——用以在開始前延遲"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:684
msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
":ref:`Position2D <class_Position2D>` （名為 ``StartPosition`` ）——用以判斷玩"
"家的起始位置"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:686
msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "將每個 ``Timer`` 節點的 ``Wait Time`` （等待時間）屬性按照如下設定："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:689
msgid "``MobTimer``: ``0.5``"
msgstr "``MobTimer``: ``0.5``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:690
msgid "``ScoreTimer``: ``1``"
msgstr "``ScoreTimer``: ``1``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:691
msgid "``StartTimer``: ``2``"
msgstr "``StartTimer``: ``2``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:693
msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"另外，將 ``StartTimer`` 的 ``One Shot`` 屬性設為「開啟」，並將 "
"``StartPosition`` 節點的 ``Position`` 設為 ``(240, 450)`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:697
msgid "Spawning mobs"
msgstr "產生怪物"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:699
msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"Main 節點會產生新的怪物，而我們希望這些怪物出現在畫面邊緣上不同的位置。新增一"
"個 :ref:`Path2D <class_Path2D>` 節點作為 ``Main`` 的子節點，設定名稱為 "
"``MobPath`` 。之後當選擇 ``Path2D`` 的時候，編輯器上方會出現一些新的按鈕："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:706
msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Use Grid Snap\" and \"Use Snap\" are both selected. These options can "
"be found to the left of the \"Lock\" button, appearing as a magnet next to "
"some dots and intersecting lines, respectively."
msgstr ""
"選擇中間的按鈕 (「新增控制點」)，然後點擊顯示的轉角處來新增控制點並繪製路徑。"
"若要將控制點吸附到網格上，請開啟「使用網格吸附」與「使用吸附」選項，這兩個選"
"項在「鎖定」按鈕的左邊，顯示的圖示是一個磁鐵跟幾條相交的線。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:714
msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""
"請確定以 **順時針** 方向繪製路徑，不然的話怪物會 **向外** 產生而不是 **向內"
"** 產生！"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:719
msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""
"在圖片內放置了點 ``4`` 以後，點擊「關閉曲線」按鈕，就可以完成繪製曲線。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:722
msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"現在路徑已經定義好了，接著我們新增一個 :ref:`PathFollow2D "
"<class_PathFollow2D>` 節點作為 ``MobPath`` 的子節點，並將其命名為 "
"``MobSpawnLocation`` 。這個節點會在移動的時候自動旋轉並跟著路徑移動，所以我們"
"可以用 MobPath 來在路徑上隨機選擇位置與方向。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:727
msgid "Your scene should look like this:"
msgstr "現在場景看起來會這樣："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:732
msgid "Main script"
msgstr "Main（主要）腳本"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:734
msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""
"為 ``Main`` 新增一個腳本。在腳本的頂部，我們會用 ``export (PackedScene)`` 來"
"選擇要實體化的 ``Mob`` 場景。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:774
msgid ""
"Click the ``Main`` node and you will see the ``Mob`` property in the "
"Inspector under \"Script Variables\"."
msgstr ""
"點擊 ``Main`` 節點，接著可以在屬性面板中的「Script Variables」（腳本變數）中"
"看到 ``Mob`` 屬性。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:777
msgid "You can assign this property's value in two ways:"
msgstr "要為這個屬性賦值有兩個方法："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:779
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" panel and drop it in the ``Mob`` "
"property ."
msgstr "從「檔案系統」面板中拖移 ``Mob.tscn`` 到 ``Mob`` 屬性來。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:781
msgid ""
"Click the down arrow next to \"[empty]\" and choose \"Load\". Select ``Mob."
"tscn``."
msgstr "點擊「[空]」旁邊的下拉箭頭，並選擇「載入」。接著選擇 ``Mob.tscn`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:784
msgid ""
"Next, select the ``Player`` node in the Scene dock, and access the Node dock "
"on the sidebar. Make sure to have the Signals tab selected in the Node dock."
msgstr ""
"接著，從場景 Dock 中選擇 ``Player`` 節點，然後前往側欄的節點 Dock 中。節選選"
"擇節點 Dock 中的 [訊號] 分頁。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:787
msgid ""
"You should see a list of the signals for the ``Player`` node. Find and "
"double-click the ``hit`` signal in the list (or right-click it and select "
"\"Connect...\"). This will open the signal connection dialog. We want to "
"make a new function named ``game_over``, which will handle what needs to "
"happen when a game ends. Type \"game_over\" in the \"Receiver Method\" box "
"at the bottom of the signal connection dialog and click \"Connect\". Add the "
"following code to the new function, as well as a ``new_game`` function that "
"will set everything up for a new game:"
msgstr ""
"接著應該可以看到所有 ``Player`` 節點的訊號。點兩下列表中的 ``hit`` 訊號 (或是"
"右鍵點擊然後選擇 [連接...])。這樣便可以打開訊號連接對話框。這裡我們要把新函式"
"命名為 ``game_over`` ，這個函式會負責處理遊戲結束時要做的事。在 [連接訊號] 視"
"窗中的 [Receiver 方法] 內輸入「game_over」，並點擊 [連接]。將下列程式碼加到新"
"建立的函式當中，接著新增一個 ``new_game`` 函式，負責在遊戲開始時搞定一切："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:828
msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` , and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""
"現在，將各個 Timer 節點（ ``StartTimer`` 、 ``ScoreTimer`` 、與 "
"``MobTimer`` ）的 ``timeout()`` 訊號連接到 Main 腳本中。 ``StartTimer`` 會啟"
"動另外兩個 Timer。 ``ScoreTimer`` 會以 1 為單位增加分數。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:855
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position."
msgstr ""
"接著我們在 ``_on_MobTimer_timeout()`` 中建立怪物的實體，並沿著 ``Path2D`` 來"
"隨機選擇一個起始位置，然後讓怪物開始移動。在跟隨路徑時 ``PathFollow2D`` 節點"
"會自動旋轉，所以我們在使用這個節點來選擇怪物的位置的同時也會一起選擇方向。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:861
msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr ""
"需要注意的是，新建立的節點必須要使用 ``add_child()`` 來將節點新增到場景中。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:909
msgid ""
"Why ``PI``? In functions requiring angles, GDScript uses *radians*, not "
"degrees. If you're more comfortable working with degrees, you'll need to use "
"the ``deg2rad()`` and ``rad2deg()`` functions to convert between the two."
msgstr ""
"為什麼要使用 ``PI`` （圓周率）呢？在需要角度的函式中，GDScript 會使用 **弧度"
"** 而不是角度。如果你比較喜歡用角度的話，則需要使用 ``deg2rad()`` （角度轉弧"
"度）與 ``rad2deg()`` （弧度轉角度）兩個函式來轉換弧度與角度。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:915
msgid "Testing the scene"
msgstr "測試場景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:917
msgid ""
"Let's test the scene to make sure everything is working. Add this to "
"``_ready()``:"
msgstr ""
"來測試一下場景，看看是不是所有東西都正常了。將下面這段程式碼新增至 "
"``_ready()`` 中："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:934
msgid ""
"Let's also assign ``Main`` as our \"Main Scene\" - the one that runs "
"automatically when the game launches. Press the \"Play\" button and select "
"``Main.tscn`` when prompted."
msgstr ""
"同時，將 ``Main`` 設為「主要場景」——也就是遊戲啟動後會自動執行的場景。點擊"
"「執行」按鈕，當提示框出現後選擇 ``Main.tscn`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:938
msgid ""
"You should be able to move the player around, see mobs spawning, and see the "
"player disappear when hit by a mob."
msgstr ""
"現在應該可以到處移動玩家了，並會看到怪物產生出來。玩家在被怪物撞到後會消失。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:941
msgid ""
"When you're sure everything is working, remove the call to ``new_game()`` "
"from ``_ready()``."
msgstr ""
"確定好了所有東西都正常後，將呼叫 ``new_game()`` 的程式碼從 ``_ready()`` 裡刪"
"除。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:945
msgid "HUD"
msgstr "HUD"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:947
msgid ""
"The final piece our game needs is a UI: an interface to display things like "
"score, a \"game over\" message, and a restart button. Create a new scene, "
"and add a :ref:`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" "
"stands for \"heads-up display\", an informational display that appears as an "
"overlay on top of the game view."
msgstr ""
"最後，這個遊戲需要 UI：一個會顯示如分數、「Game Over」訊息、與重新開始遊戲按"
"鈕的界面。建立一個新場景並新增一個名為 ``HUD`` 的 :ref:`CanvasLayer "
"<class_CanvasLayer>` 節點。HUD 是覆蓋顯示於遊戲畫面上方，用於表示資訊的「擡頭"
"顯示器 (Heads-Up Display)」的簡稱。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:953
msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""
"使用 :ref:`CanvasLayer <class_CanvasLayer>` 節點可以讓我們在遊戲上方的圖層上"
"繪製 UI 元素，這樣上面顯示的資訊就不會被其他遊戲元素如玩家或怪物給蓋住。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:957
msgid "The HUD needs to display the following information:"
msgstr "HUD 需要顯示如下資訊："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:959
msgid "Score, changed by ``ScoreTimer``."
msgstr "分數，會通過 ``ScoreTimer`` 來更改。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:960
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr "訊息，如「Gamer Over」或「請準備！」"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:961
msgid "A \"Start\" button to begin the game."
msgstr "用來開始遊戲的「Start」按鈕。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:963
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""
"UI 元素所使用的基本節點是 :ref:`Control <class_Control>` 。我們需要使用兩種類"
"型的 :ref:`Control <class_Control>` 節點來給這個遊戲建立 UI： :ref:`Label "
"<class_Label>` （標籤）與 :ref:`Button <class_Button>` （按鈕）。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:967
msgid "Create the following as children of the ``HUD`` node:"
msgstr "為 ``HUD`` 節點建立下列子節點："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:969
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr ":ref:`Label <class_Label>` ，命名為 ``ScoreLabel`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:970
msgid ":ref:`Label <class_Label>` named ``Message``."
msgstr ":ref:`Label <class_Label>` ，命名為 ``Message`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:971
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr ":ref:`Button <class_Button>` ，命名為 ``StartButton`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:972
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr ":ref:`Timer <class_Timer>` ，命名為 ``MessageTimer`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:974
msgid ""
"Click on the ``ScoreLabel`` and type a number into the ``Text`` field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following:"
msgstr ""
"點擊 ``ScoreLabel`` 並在屬性面板中的 ``Text`` 輸入一個數字。 ``Control`` 節點"
"的預設字體很小，而且也縮放得不是很好。遊戲素材裡有包含了一個字體檔，檔名為"
"「Xolonium-Regular.ttf」。依照下列步驟來使用這個字體："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:979
msgid "Under \"Custom Fonts\", choose \"New DynamicFont\""
msgstr ""
"在「Custom Fonts」（自定義字體）中，選擇「New DynamicFont」（新增 "
"DynamicFont 格式的字體）"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:983
msgid ""
"Click on the \"DynamicFont\" you added, and under \"Font/Font Data\", choose "
"\"Load\" and select the \"Xolonium-Regular.ttf\" file. You must also set the "
"font's ``Size``. A setting of ``64`` works well."
msgstr ""
"點擊新增的「DynamicFont」，並點擊「Font/Font Data」（字體與字體資料）中的「載"
"入」，接著選擇「Xolonium-Regular.ttf」檔案。另外也必須設定字體的 ``Size`` "
"（大小）。可以設定為 ``64``。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:989
msgid ""
"Once you've done this on the ``ScoreLabel``, you can click the down arrow "
"next to the DynamicFont property and choose \"Copy\", then \"Paste\" it in "
"the same place on the other two Control nodes."
msgstr ""
"完成 ``ScoreLabel`` 的設定後，點擊 DynamicFont 屬性旁邊的下拉箭頭，並選擇"
"「Copy」（複製），接著在另外兩個 Control 節點上相同的地方「Paste」（貼上）。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:993
msgid ""
"**Anchors and Margins:** ``Control`` nodes have a position and size, but "
"they also have anchors and margins. Anchors define the origin - the "
"reference point for the edges of the node. Margins update automatically when "
"you move or resize a control node. They represent the distance from the "
"control node's edges to its anchor. See :ref:"
"`doc_design_interfaces_with_the_control_nodes` for more details."
msgstr ""
"**錨點與外邊距：** ``Control`` 節點除了位置與大小之外，也可以設定錨點 "
"(Anchor) 與外邊距 (Margin)。錨點定義原點（相對於節點邊緣的參考點）。外邊距則"
"會在移動或縮放 Control 節點時自動更新。這兩個屬性的變化會反映出 Control 節點"
"到錨點的距離。詳細說明請參考 :ref:"
"`doc_design_interfaces_with_the_control_nodes` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1000
msgid ""
"Arrange the nodes as shown below. Click the \"Layout\" button to set a "
"Control node's layout:"
msgstr "依照下圖排列節點。點擊「畫面配置」按鈕來設定 Control 節點的配置："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1005
msgid ""
"You can drag the nodes to place them manually, or for more precise "
"placement, use the following settings:"
msgstr "可以拖移節點來手動排列，或是使用下列設定來更精確地排放："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1009
msgid "ScoreLabel"
msgstr "\\ ScoreLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1011
msgid "*Layout* : \"Top Wide\""
msgstr "**畫面配置** ：「上延伸」"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1012
msgid "*Text* : ``0``"
msgstr "**Text** ： ``0``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1013
#: ../../docs/getting_started/step_by_step/your_first_game.rst:1020
msgid "*Align* : \"Center\""
msgstr "**Align** ：「Center」"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1016
msgid "Message"
msgstr "\\ Message"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1018
msgid "*Layout* : \"HCenter Wide\""
msgstr "**畫面配置** ：「水平中央延長」"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1019
msgid "*Text* : ``Dodge the Creeps!``"
msgstr "**Text** ： ``Dodge the Creeps!``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1021
msgid "*Autowrap* : \"On\""
msgstr "**Autostrap** ： 「開啟」"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1024
msgid "StartButton"
msgstr "\\ StartButton"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1026
msgid "*Text* : ``Start``"
msgstr "**Text** ： ``Start``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1027
msgid "*Layout* : \"Center Bottom\""
msgstr "**畫面配置** ：「中下」"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1028
msgid "*Margin* :"
msgstr "**Margin** ："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1030
msgid "Top: ``-200``"
msgstr "Top： ``-200``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1031
msgid "Bottom: ``-100``"
msgstr "Bottom： ``-100``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1033
msgid ""
"On the ``MessageTimer``, set the ``Wait Time`` to ``2`` and set the ``One "
"Shot`` property to \"On\"."
msgstr ""
"將 ``MessageTimer`` 的 ``Wait Time`` 設為 ``2`` ，將 ``One Shot`` 設為「開"
"啟」。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1036
msgid "Now add this script to ``HUD``:"
msgstr "現在將這個腳本新增至 ``HUD`` ："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1055
msgid ""
"The ``start_game`` signal tells the ``Main`` node that the button has been "
"pressed."
msgstr "``start_game`` 訊號會告訴 ``Main`` 節點按鈕被按下。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1077
msgid ""
"This function is called when we want to display a message temporarily, such "
"as \"Get Ready\"."
msgstr "當我們想要暫時顯示訊息（如「Get Ready」）時可以呼叫這個函式。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1111
msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""
"當玩家輸了之後會呼叫這個函式。會在畫面上顯示 2 秒「Game Over」，然後回到標題"
"畫面、暫停一下，最後顯示「Start」按鈕。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1115
msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to add delays such as in the above code, where we want to wait some "
"time before showing the \"Start\" button."
msgstr ""
"需要暫停一下下的時候，除了使用 Timer 節點外也可以使用 SceneTree（場景樹）的 "
"``create_timer()`` 函式。當需要像上面的程式碼一樣新增一點延遲的時候很有用，上"
"面的例子中我們用它來在顯示「Start」按鈕前增加一點點等待時間。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1133
msgid "This function is called by ``Main`` whenever the score changes."
msgstr "這個函式會由 ``Main`` 在分數改動的時候呼叫。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1135
msgid ""
"Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` "
"signal of ``StartButton`` and add the following code to the new functions:"
msgstr ""
"連接 ``MessageTimer`` 的 ``timeout() 訊號與 ``StartButton`` 的 ``pressed()`` "
"訊號，並新增下列程式碼到新函式當中："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1163
msgid "Connecting HUD to Main"
msgstr "將 HUD 場景連接至 Main 場景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1165
msgid ""
"Now that we're done creating the ``HUD`` scene, go back to ``Main``. "
"Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` scene. "
"The scene tree should look like this, so make sure you didn't miss anything:"
msgstr ""
"我們現在做好 ``HUD`` 場景了。讓我們回到 ``Main``。像剛才實體化 ``Player`` 場"
"景一樣，在 ``Main`` 場景中實體化 ``HUD``。場景樹會看起來像這樣，檢查一下有沒"
"有漏了什麼："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1171
msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""
"我們現在需要把 ``HUD`` 的功能連接到 ``Main`` 腳本。所以我們需要在 ``Main`` 場"
"景內新增一點點東西："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1174
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function of the Main node by typing \"new_game\" in the "
"\"Receiver Method\" in the \"Connect a Signal\" window. Verify that the "
"green connection icon now appears next to ``func new_game()`` in the script."
msgstr ""
"在節點分頁中，設定 HUD 的 ``start_game`` 訊號的連接，在「連接訊號」視窗中將"
"「Receiver 方法」設為「new_game」來將訊號連接到 Main 節點的 ``new_game()`` 函"
"式。之後檢查看看腳本中的 ``func new_game()``旁邊有沒有出現綠色的連線圖示。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1179
msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr "``new_game()`` 中，需要更新分數並顯示「Get Ready」訊息："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1194
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr "``game_over()`` 中我們需要呼叫對應的 ``HUD`` 函式："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1205
msgid ""
"Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""
"最後，將這段程式碼加到 ``_on_ScoreTimer_timeout()`` 來讓分數改變的時候能同步"
"顯示："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1217
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``Main.tscn``."
msgstr ""
"現在已經可以執行遊戲了！點擊「執行專案」按鈕。接著會被要求選擇一個主場景，這"
"裡我們選 ``Main.tscn`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1221
msgid "Removing old creeps"
msgstr "刪除舊的怪物"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1223
msgid ""
"If you play until \"Game Over\" and then start a new game right away, the "
"creeps from the previous game may still be on the screen. It would be better "
"if they all disappeared at the start of a new game. We just need a way to "
"tell *all* the mobs to remove themselves. We can do this with the \"group\" "
"feature."
msgstr ""
"如果一直玩到「Game Over」並直接開始新遊戲的話，上一場遊戲的怪物可能還在畫面"
"上。開始遊戲的時候如果能讓舊的怪物消失會更好。而我們只需要告訴 **所有** 怪"
"物，刪除自己。我們可以在這裡使用「群組」功能。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1228
msgid ""
"In the ``Mob`` scene, select the root node and click the \"Node\" tab next "
"to the Inspector (the same place where you find the node's signals). Next to "
"\"Signals\", click \"Groups\" and you can type a new group name and click "
"\"Add\"."
msgstr ""
"在 ``Mob`` 場景中，先選擇根節點，然後點擊屬性面板旁邊的「節點」分頁（跟設定節"
"點訊號的地方相同）。點擊「訊號」旁邊的「群組」，接著編輯器會讓你設定新群組名"
"稱，最後點擊「新增」。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1234
msgid ""
"Now all mobs will be in the \"mobs\" group. We can then add the following "
"line to the ``game_over()`` function in ``Main``:"
msgstr ""
"現在所有的怪物都會被放在「mobs」群組內了。我們可以接著在 ``Main`` 腳本的 "
"``game_over()`` 函式中增加下面這行的程式碼："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1247
msgid ""
"The ``call_group()`` function calls the named function on every node in a "
"group - in this case we are telling every mob to delete itself."
msgstr ""
"``call_group()`` 函式會呼叫群組中所有節點的指定名稱的函式——在這裡我們用來讓所"
"有怪物刪除自己。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1251
msgid "Finishing up"
msgstr "最終調整"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1253
msgid ""
"We have now completed all the functionality for our game. Below are some "
"remaining steps to add a bit more \"juice\" to improve the game experience. "
"Feel free to expand the gameplay with your own ideas."
msgstr ""
"現在，這個遊戲的所有功能都已經完成了。接下來的這些步驟可以讓遊戲畫龍點睛、增"
"進遊戲體驗。如果你有更多 Idea 的話，也可以自由地擴展遊戲。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1258
msgid "Background"
msgstr "背景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1260
msgid ""
"The default gray background is not very appealing, so let's change its "
"color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` "
"node. Make it the first node under ``Main`` so that it will be drawn behind "
"the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a "
"color you like and select \"Layout\" -> \"Full Rect\" so that it covers the "
"screen."
msgstr ""
"預設的灰色背景並不是很吸睛，所以來改個顏色。其中一種改背景的方式是新增一個 :"
"ref:`ColorRect <class_ColorRect>` 節點。將 ColorRect 新增為 ``Main`` 底下的第"
"一個節點，這樣 ColorRect 才會被繪製在其他節點的下方。``ColorRect`` 只有一個屬"
"性： ``Color`` （色彩）。選擇一個你喜歡的顏色，並選擇「畫面配置」->「全矩"
"形」，這樣就會覆蓋整個畫面。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1266
msgid ""
"You could also add a background image, if you have one, by using a "
"``TextureRect`` node instead."
msgstr ""
"如果你有適合的圖片的話，也可以用圖片作為背景。改用 ``TextureRect`` 節點即可。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1270
msgid "Sound effects"
msgstr "音效"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1272
msgid ""
"Sound and music can be the single most effective way to add appeal to the "
"game experience. In your game assets folder, you have two sound files: "
"\"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" "
"for when the player loses."
msgstr ""
"聲音與音樂可以是一種最有效能增加遊戲體驗吸引力的方法。遊戲素材資料夾中有兩個"
"聲音檔案：背景音樂用的「House In A Forest Loop.ogg」與玩家 Game Over 時用的"
"「gameover.wav」。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1277
msgid ""
"Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children "
"of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On "
"each one, click on the ``Stream`` property, select \"Load\", and choose the "
"corresponding audio file."
msgstr ""
"在 ``Main`` 中新增兩個 :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` 節"
"點作為子節點。將其中一個命名為 ``Music`` ，另一個則為 ``DeathSound`` 。在各個"
"節點上點擊 ``Stream`` （串流）屬性，選擇「載入」，並選擇對應的音訊檔。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1282
msgid ""
"To play the music, add ``$Music.play()`` in the ``new_game()`` function and "
"``$Music.stop()`` in the ``game_over()`` function."
msgstr ""
"要播放音樂，在 ``new_game()`` 函式中新增 ``$Music.play()`` ，並在 "
"``game_over()`` 函式中新增 ``$Music.stop()`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1285
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr "最後，在 ``game_over()`` 函式中新增 ``$DeathSound.play()`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1288
msgid "Keyboard shortcut"
msgstr "鍵盤快捷鍵"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1290
msgid ""
"Since the game is played with keyboard controls, it would be convenient if "
"we could also start the game by pressing a key on the keyboard. We can do "
"this with the \"Shortcut\" property of the ``Button`` node."
msgstr ""
"由於這個遊戲是用鍵盤控制來玩的，如果能用鍵盤上的按鍵也能開始新遊戲的話會很方"
"便。我們可以使用 ``Button`` 節點的「Shortcut」（快捷鍵）屬性來做到。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1294
msgid ""
"In the ``HUD`` scene, select the ``StartButton`` and find its *Shortcut* "
"property in the Inspector. Select \"New Shortcut\" and click on the "
"\"Shortcut\" item. A second *Shortcut* property will appear. Select \"New "
"InputEventAction\" and click the new \"InputEventAction\". Finally, in the "
"*Action* property, type the name ``ui_select``. This is the default input "
"event associated with the spacebar."
msgstr ""
"在 ``HUD`` 場景中選擇 ``StartButton`` ，並在屬性面板中找到 **Shortcut** 屬"
"性。選擇「新增 Shortcut」並點擊「Shortcut」項目。接著會出現第二個 "
"**Shortcut** 屬性。選擇「新增 InputEventAction」，並點擊新的"
"「InputEventAction」。最後，在 **Action** 屬性中輸入名稱 ``ui_select`` 。這個"
"是預設關聯在空白鍵上的輸入事件。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1302
msgid ""
"Now when the start button appears, you can either click it or press :kbd:"
"`Space` to start the game."
msgstr ""
"現在當開始按鈕出現的時候，可以點擊按鈕或是使用按鍵 :kbd:`空白鍵` 來開始新遊"
"戲。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1306
msgid "Project files"
msgstr "專案檔案"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1311
msgid "You can find a completed version of this project at these locations:"
msgstr "你可以在這幾個網址上找到這個專案的完成版："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1309
msgid "https://github.com/kidscancode/Godot3_dodge/releases"
msgstr "https://github.com/kidscancode/Godot3_dodge/releases"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1310
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr "https://github.com/godotengine/godot-demo-projects"
