# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-07 14:35+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:4
msgid "Instancing (continued)"
msgstr "實體化 (續)"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:7
msgid "Recap"
msgstr "重點"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:9
msgid "Instancing has many handy uses. At a glance, with instancing you have:"
msgstr "實體化有很多便利的用途。簡單來說，通過實體化就可以："

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:11
msgid "The ability to subdivide scenes and make them easier to manage."
msgstr "細分場景，讓場景更容易管理。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:12
msgid "A tool to manage and edit multiple node instances at once."
msgstr "通過實體化來一次管理與編輯多個節點實體。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:13
msgid ""
"A way to organize and embed complex game flows or even UIs (in Godot, UI "
"Elements are nodes, too)."
msgstr ""
"通過實體化，可以在 UI 內組織與嵌入複雜的遊戲流程 (Godot 裡的 UI 元素也是節"
"點)。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:17
msgid "Design language"
msgstr "設計語言"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:19
msgid ""
"But the greatest strength that comes with instancing scenes is that it works "
"as an excellent design language. This distinguishes Godot from all the other "
"engines out there. Godot was designed from the ground up around this concept."
msgstr ""
"其實，最大的優點就是能把「實體化場景」看作一個優秀的設計語言。這就是 Godot 與"
"其他引擎的差別，Godot 就是基於這個概念所設計的。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:24
msgid ""
"When making games with Godot, the recommended approach is to dismiss most "
"common design patterns, such as MVC or Entity-Relationship diagrams, and "
"instead think about your scenes in a more natural way. Start by imagining "
"the visible elements in your game, the ones that can be named not just by a "
"programmer, but by anyone."
msgstr ""
"當使用 Godot 製作遊戲的時候，我們建議你忽略大多數常見的設計模式，例如 MVC 或 "
"ER 圖等，轉而用更自然的方式思考場景的設計。可以先從想像遊戲中的單一元素開始，"
"不只是程式設計師能叫出名字的元素，而是任何人都喊得出名字的元素。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:30
msgid "For example, here's how a simple shooter game could be imagined:"
msgstr "例如，可以這樣想像簡單的射擊遊戲："

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:34
msgid ""
"You can come up with a diagram like this for almost any kind of game. Write "
"down the parts of the game that you can visualize, and then add arrows to "
"represent ownership of one component by another."
msgstr ""
"幾乎任何一種遊戲都可以用這種方式畫成圖片。先寫下遊戲裡可以被看到的部分，然後"
"在每個部分用箭頭來表示這些元素的從屬關係。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:38
msgid ""
"Once you have a diagram like this, the recommended process for making a game "
"is to create a scene for each element listed in the diagram. You'll use "
"instancing (either by code or directly in the editor) for the ownership "
"relationships."
msgstr ""
"畫出這樣的圖之後，我們建議你為圖上的各個元素都建立一個場景來使用，再通過實體"
"化來做出從屬關係 (可以用程式碼或是直接在編輯器裡實體化)。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:42
msgid ""
"A lot of time spent in programming games (or software in general) is on "
"designing an architecture and fitting game components to that architecture. "
"Designing based on scenes replaces that approach and makes development much "
"faster and more straightforward, allowing you to concentrate on the game "
"logic itself. Because most game components map directly to a scene, using a "
"design based on scene instantiation means little other architectural code is "
"needed."
msgstr ""
"開發遊戲 (或是一般軟體) 時，我們總會花費許多時間來設計架構，然後再花時間把遊"
"戲的元素都套用到這個架構上。以場景為基礎來設計就取代了這個過程，讓開發變得更"
"快速而且更直觀，也讓你能直接專注於實現遊戲本身的邏輯。由於大多數的遊戲元件都"
"可以直接對應到場景上，使用使用以場景實體化為基礎的設計也就能在架構上花費較少"
"的程式碼。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:48
msgid ""
"Let's take a look at one more, somewhat more complex, example of an open-"
"world type game with lots of assets and nested elements:"
msgstr ""
"再來看看另一個某方面來說更複雜的例子。這個例子是開放世界類型的遊戲，有很多素"
"材以及巢狀的元素："

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:53
msgid ""
"Take a look at the room element. Let's say we started there. We could make a "
"couple of different room scenes, with different arrangements of furniture "
"(also scenes) in them. Later, we could make a house scene, connecting rooms "
"to make up its interior."
msgstr ""
"先來從房間元素開始。我們可以做幾個不同的房間場景，裡面用不同的方式來排列傢俱 "
"(傢俱也是場景)。之後我們就能做一個房子場景，然後再把房間接上去就有了內部構造"
"了。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:58
msgid ""
"Then, we could make a citadel scene, which is made out of many instanced "
"houses. Then, we could start working on the world map terrain, adding the "
"citadel onto it."
msgstr ""
"接著，我們可以做一個城堡場景，城堡就是由很多房子的實體所組成的。再來就可以開"
"始處理世界地圖的地形了，然後把城堡放進去裡面。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:62
msgid ""
"Later, we could create scenes that represent guards (and other NPCs) and add "
"them to the citadel as well. As a result, they would be indirectly added to "
"the overall game world."
msgstr ""
"接下來我們可以建立一些代表守衛 (以及其他 NPC) 的場景，然後也把這些場景都加進"
"城堡裡。這樣一來，這些 NPC 就間接地進到了整個遊戲世界裡了。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:66
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instance more scenes. Furthermore, the editor UI is "
"designed to be user friendly for programmers and non-programmers alike. A "
"typical team development process can involve 2D or 3D artists, level "
"designers, game designers, and animators, all working with the editor "
"interface."
msgstr ""
"在 Godot 裡，很容易就可以通過這種方式來迭代出遊戲，需要做的就只是建立場景、實"
"體化場景然後建立更多場景再實體化更多場景。而且，不管是對於程式設計師或非程式"
"設計師來說，Godot 的編輯器 UI 很友善。一般標準的團隊開發流程還會有 2D 與 3D "
"設計師、關卡設計師、遊戲設計師以及動畫家的參與，大家都會使用 Godot 編輯器界面"
"來進行作業。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:73
msgid "Information overload!"
msgstr "資訊爆炸！"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:75
msgid ""
"This has been a lot of high level information dropped on you all at once. "
"However, the important part of this tutorial was to create an awareness of "
"how scenes and instancing are used in real projects."
msgstr ""
"顯然同時塞了很多高級的資訊給你。然而，這個教學最重要的部分就是要讓你大概瞭解"
"在真實的專案內是如何使用場景與實體化的。"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:79
msgid ""
"Everything discussed here will become second nature to you once you start "
"making games and putting these concepts into practice. For now, don't worry "
"about it too much, and go on to the next tutorial!"
msgstr ""
"一旦開始製作遊戲並開始實踐這裡討論到的概念，很快就會習慣了。現在，不要想太"
"多，直接進到下一個教學吧！"
