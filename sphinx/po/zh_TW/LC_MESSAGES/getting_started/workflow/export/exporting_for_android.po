# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 13:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:4
msgid "Exporting for Android"
msgstr "為 Android 匯出"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:6
msgid ""
"Exporting for Android has fewer requirements than compiling Godot for it. "
"The following steps detail what is needed to setup the SDK and the engine."
msgstr ""
"匯出至 Android 的需求比為 Android 編譯 Godot 還來得少。下列為設定 SDK 與 "
"Godot 所需的詳細步驟。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:10
msgid "Download the Android SDK"
msgstr "下載 Android SDK"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:12
msgid ""
"Download and install the Android SDK from `developer.android.com <https://"
"developer.android.com/studio/>`__."
msgstr ""
"從 `developer.android.com <https://developer.android.com/studio/>`__ 上下載並"
"安裝 Android SDK。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:15
msgid ""
"If you install Android Studio, you need to run it once to complete the SDK "
"setup."
msgstr ""
"若安裝的是 Android Studio，則必須至少先執行過一次 Android Studio 以完成設定 "
"SDK。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:18
msgid "Install OpenJDK 8"
msgstr "安裝 OpenJDK 8"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:20
msgid ""
"Download and install  `OpenJDK 8 <https://adoptopenjdk.net/index.html?"
"variant=openjdk8&jvmVariant=hotspot>`__, newer versions do not work."
msgstr ""
"下載並安裝 `OpenJDK 8 <https://adoptopenjdk.net/index.html?"
"variant=openjdk8&jvmVariant=hotspot>`__ 。無法使用較新的版本。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:24
msgid "Create a debug.keystore"
msgstr "建立 debug.keystore"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:26
msgid ""
"Android needs a debug keystore file to install to devices and distribute non-"
"release APKs. If you have used the SDK before and have built projects, ant "
"or eclipse probably generated one for you (on Linux and macOS, you can find "
"it in the ``~/.android`` directory)."
msgstr ""
"必須有除錯用金鑰儲存區，才可在 Android 上將非發行版本的 APK 安裝至裝置上。若"
"您有是用過 SDK 且曾建構過專案，則 ant 或 eclipse 可能有自動產生過金鑰儲存區 "
"(在 Linux 與 macOS 上，可以在 ``~/.android`` 目錄中找到)。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:31
msgid ""
"If you can't find it or need to generate one, the keytool command from the "
"JDK can be used for this purpose::"
msgstr "若找不到金鑰儲存區或需要產生，則可以使用 JDK 中的 keytool 指令："

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:36
msgid ""
"This will create a ``debug.keystore`` file in your current directory. You "
"should move it to a memorable location such as ``%USERPROFILE%\\.android"
"\\``, because you will need its location in a later step. For more "
"information on ``keytool`` usage, see `this Q&A article <https://godotengine."
"org/qa/21349/jdk-android-file-missing>`__."
msgstr ""
"這個指令會在目前的目錄中建立 ``debug.keystore`` 檔案。接著應將該檔案移動到好"
"記的位置，如 ``%USERPROFILE%\\.android\\`` 等，因為接下來的步驟會需要用到這個"
"路徑。更多關於 ``keystore`` 使用的說明，請參考 `這篇 Q&A 文章 (英文) "
"<https://godotengine.org/qa/21349/jdk-android-file-missing>`__ 。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:39
msgid "Make sure you have adb"
msgstr "確認是否有 adb"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:41
msgid ""
"Android Debug Bridge (``adb``) is the command line tool used to communicate "
"with Android devices. It's installed with the SDK, but you may need to "
"install one (any) of the Android API levels for it to be installed in the "
"SDK directory."
msgstr ""
"Android 偵錯橋接器 (``adb``) 是一個用來與 Android 裝置溝通的命令行工具。該工"
"具會與 SDK 一起安裝，但可能會需要先安裝一種 Android API 等級，adb 才會被安裝"
"到 SDK 目錄中。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:46
msgid "Setting it up in Godot"
msgstr "在 Godot 中設定"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:48
msgid ""
"Enter the Editor Settings screen. This screen contains the editor settings "
"for the user account in the computer (it's independent of the project)."
msgstr ""
"開啟 [編輯器設定] 畫面。該畫面中包含了用於該電腦上目前使用者帳號的設定 (編輯"
"器設定獨立於專案)。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:54
msgid "Scroll down to the section where the Android settings are located:"
msgstr "下拉至 Android 設定的部分："

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:58
msgid "In that screen, the path to 3 files needs to be set:"
msgstr "在此畫面中，需要設定 3 個檔案的路徑："

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:60
msgid ""
"The ``adb`` executable (``adb.exe`` on Windows) - It can usually be found at "
"``%LOCALAPPDATA%\\Android\\Sdk\\platform-tools\\adb.exe``."
msgstr ""
"``adb`` 執行檔 (Windows 上為 ``adb.exe``) - 通常可以在 ``%LOCALAPPDATA%"
"\\Android\\Sdk\\platform-tools\\adb.exe`` 中找到。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:63
#, fuzzy
msgid ""
"The ``jarsigner`` executable (from JDK 6 or 8) - On Windows, OpenJDK "
"installs to a directory like ``%PROGRAMFILES%\\AdoptOpenJDK\\jdk-8.0.252.09-"
"hotspot\\bin``. On Linux, it typically installs to a directory like ``/usr/"
"bin/jarsigner``. The exact path may vary depending on the OpenJDK update "
"you've installed and your machine's operating system."
msgstr ""
"(JDK 6 或 8 中的) ``jarsigner`` 執行檔 - Windows 上 OpenJDK 的安裝位置可能會"
"是 ``%PROGRAMFILES%\\ojdkbuild\\java-1.8.0-openjdk-1.8.0.232-2\\bin`` 之類"
"的。Linux 上則通常會安裝到如 ``/usr/bin/jarsigner`` 指令的位置。正確的路徑會"
"依據所安裝的 OpenJDK 版本與您的作業系統而有所不同。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:66
msgid ""
"The debug ``.keystore`` file - It can be found in the folder where you put "
"the ``debug.keystore`` file you created above."
msgstr ""
"除錯用的 ``.keystore`` 檔案 - 可以剛才建立並放置 ``debug.keystore`` 檔案的資"
"料夾中找到。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:69
msgid "Once that is configured, everything is ready to export to Android!"
msgstr "設定好了之後，就準備好能匯出到 Android 了！"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:72
msgid "Providing launcher icons"
msgstr "提供起動器圖示"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:74
msgid ""
"Launcher icons are used by Android launcher apps to represent your "
"application to users. Godot only requires high-resolution icons (for "
"``xxxhdpi`` density screens) and will automatically generate lower-"
"resolution variants."
msgstr ""
"啟動器圖示是給 Android 起動器應用程式將程式顯示給使用者看的圖示。Godot 中只需"
"要提供高解析度圖示 (用於 ``xxxhdpi`` 密度螢幕)，就會自動產生各個低解析度的版"
"本。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:76
msgid "There are two types of icons required by Godot:"
msgstr "Godot 中需要的圖示有兩種類型："

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:78
msgid ""
"**Main Icon:** The \"classic\" icon. This will be used on all Android "
"versions up to Android 8 (Oreo), exclusive. Must be at least 192×192 px."
msgstr ""
"**主圖示：** 即「經典」的圖示。會用於最高至 Android 8 (Orea) 的 Android 版"
"本。必須至少有 192×192 px。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:79
msgid ""
"**Adaptive Icons:** Starting from Android 8 (inclusive), `Adaptive Icons "
"<https://developer.android.com/guide/practices/ui_guidelines/"
"icon_design_adaptive>`_ were introduced. Applications will need to include "
"separate background and foreground icons to have a native look. The user's "
"launcher application will control the icon's animation and masking. Must be "
"at least 432×432 px."
msgstr ""
"**調適性圖示：** 自 Android 8 版 (不含) 開始開始引入了 `調適性圖示 (英文) "
"<https://developer.android.com/guide/practices/ui_guidelines/"
"icon_design_adaptive>`_ 。應用程式需要包含分開的背景與前景圖示來提供原生外"
"觀。使用者的起動器會控制圖示的動畫與遮罩。必須至少有 432×432 px。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:81
msgid ""
"It's important to adhere to some rules when designing adaptive icons. "
"`Google Design has provided a nice article <https://medium.com/google-design/"
"designing-adaptive-icons-515af294c783>`_ that helps to understand those "
"rules and some of the capabilities of adaptive icons."
msgstr ""
"在設計調適性圖示時，遵守一些規則也很重要。`Google Design 發表了一篇很棒的文"
"章 (英文) <https://medium.com/google-design/designing-adaptive-"
"icons-515af294c783>`_ ，有助於瞭解這些規則以及調適性圖示的一些限制。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:83
msgid ""
"The most important adaptive icon design rule is to have your icon critical "
"elements inside the safe zone: a centered circle with a diameter of 66dp "
"(264 pixels on ``xxxhdpi``) to avoid being clipped by the launcher."
msgstr ""
"調適性圖示設計規則中最重要的一點是要將圖示的關鍵元素放在安全區域內，即為正中"
"間有直徑 66dp 的圓圈 (``xxxhdpi`` 下為 264 像素)，才可避免圖示被起動器給剪"
"裁。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:85
msgid ""
"If you don't provide some of the requested icons, Godot will replace them "
"using a fallback chain, trying the next in line when the current one fails:"
msgstr ""
"若不提供需要的圖示，則 Godot 會自動在遞補鏈中以下一個項目來代替，當遞補鏈中目"
"前項目失敗時，則往下遞補："

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:87
msgid ""
"**Main Icon:** Provided main icon -> Project icon -> Default Godot main icon."
msgstr "**Main Icon：** 提供的主圖示 -> 專案圖示 -> 預設 Godot 主圖示。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:88
msgid ""
"**Adaptive Icon Foreground:** Provided foreground icon -> Provided main icon "
"-> Project icon -> Default Godot foreground icon."
msgstr ""
"**Adaptive Icon Foregrond:** 提供的前景圖示 -> 提供的主圖示 -> 專案圖示 -> 預"
"設 Godot 前景圖示。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:89
msgid ""
"**Adaptive Icon Background:** Provided background icon -> Default Godot "
"background icon."
msgstr "**Adaptive Icon Background:** 提供的背景圖示 -> 預設 Godot 背景圖示。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:91
msgid ""
"It's highly recommended to provide all requested icons, and at least with "
"the specified resolutions. Only this way your application will look great on "
"all Android devices and versions."
msgstr ""
"強烈建議提供所有需要的圖示，並至少要有指定的解析度。只有這樣才能讓應用程式在"
"所有 Android 設備與版本中看起來好看。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:94
msgid "Exporting for Google Play Store"
msgstr "為 Google Play Store 匯出"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:96
msgid ""
"Uploading an APK to Google's Play Store requires you to sign using a non-"
"debug keystore file; such file can be generated like this:"
msgstr ""
"要將 APK 上傳至 Google Play Store 需要以非除錯用金鑰儲存區來簽署 APK。該檔案"
"可如此產生："

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:103
msgid ""
"This keystore and key are used to verify your developer identity, remember "
"the password and keep it in a safe place! Use Google's Android Developer "
"guides to learn more about `APK signing <https://developer.android.com/"
"studio/publish/app-signing>`__."
msgstr ""
"該金鑰儲存區會用來驗證開發人員身份，請記住密碼並保存在安全處！請在 Google 的 "
"Android 開發人員指南中瞭解有關 `簽署 APK <https://developer.android.com/"
"studio/publish/app-signing>`__ 的詳情。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:106
msgid "Now fill in the following forms in your Android Export Presets:"
msgstr "接著在 Android 匯出預設中填寫下列表格："

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:110
msgid "**Release:** Enter the path to the keystore file you just generated."
msgstr "**Release：** 輸入剛才產生的金鑰儲存區檔案位置。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:111
msgid "**Release User:** Replace with the key alias."
msgstr "**Release User：** 以金鑰別名取代。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:112
msgid ""
"**Release Password:** Key password. Note that the keystore password and the "
"key password currently have to be the same."
msgstr ""
"**Release Password：** 金鑰密碼，請注意，目前金鑰儲存區密碼與金鑰的密碼必須相"
"同。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:114
msgid ""
"**Your export_presets.cfg file now contains sensitive information.** If you "
"use a version control system, you should remove it from public repositories "
"and add it to your ``.gitignore`` file or equivalent."
msgstr ""
"**現在 export_presets.cfg 檔案會包含機敏資訊。** 若使用版本控制系統，請確保將"
"該檔案從公開儲存庫中移除，並將其加入 ``.gitignore`` 檔案或同等檔案中。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:118
msgid ""
"Don't forget to uncheck the **Export With Debug** checkbox while choosing "
"the APK's name."
msgstr "設定 APK 名稱時也別忘了取消勾選 **[Export With Debug]** 勾選框。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:123
msgid "Optimizing the APK size"
msgstr "最佳化 APK 大小"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:125
msgid ""
"By default, the APK will contain native libraries for both ARMv7 and ARMv8 "
"architectures. This increases its size significantly. To create a smaller "
"APK, uncheck either **Armeabi-v 7a** or **Arm 64 -v 8a** in your project's "
"Android export preset. This will create an APK that only contains a library "
"for a single architecture. Note that applications targeting ARMv7 can also "
"run on ARMv8 devices, but the opposite is not true."
msgstr ""
"預設情況下，APK 會同時包含 ARMv7 與 ARMv8 架構的原生函式庫。這樣一來會大幅增"
"加檔案大小。要建立比較小的 APK，請於專案 Android 匯出預設中取消勾選 "
"**Armeabi-v 7a** 或 **Arm 64 -v 8a**。這樣產生的 APK 只會包含單一架構的函式"
"庫。請注意，為 ARMv7 所製作的應用程式一樣可以在 ARMv8 裝置上執行，但反過來則"
"不行。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:132
msgid ""
"Since August 2019, Google Play requires all applications to be available in "
"64-bit form. This means you cannot upload an APK that contains *just* an "
"ARMv7 library. To solve this, you can upload several APKs to Google Play "
"using its `Multiple APK support <https://developer.android.com/google/play/"
"publishing/multiple-apks>`__. Each APK should target a single architecture; "
"creating an APK for ARMv7 and ARMv8 is usually sufficient to cover most "
"devices in use today."
msgstr ""
"自 2019 年 8 月起，Google Play 中所有的應用程式都必須支援 64 位元。這表示無法"
"上傳裡面 **只有** ARMv7 函式庫的 APK。為此，可以通過 `多 APK 支援 <https://"
"developer.android.com/google/play/publishing/multiple-apks>`__ 來上傳多個 "
"APK 到 Google Play 上。每個 APK 都應至為單一重架構建置。為 ARMv7 與 ARMv8 建"
"立 APK 應該可涵蓋當今大多數的裝置。"

#: ../../docs/getting_started/workflow/export/exporting_for_android.rst:139
msgid ""
"You can optimize the size further by compiling an Android export template "
"with only the features you need. See :ref:`doc_optimizing_for_size` for more "
"information."
msgstr ""
"還可以進一步通過編譯只有所需功能的 Android 匯出樣板來進一步最佳化大小。更多資"
"訊請參考 :ref:`doc_optimizing_for_size` 。"
