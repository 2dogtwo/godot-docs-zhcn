# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 13:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:4
msgid "Applying object-oriented principles in Godot"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:6
msgid ""
"The engine offers two main ways to create reusable objects: scripts and "
"scenes. Neither of these technically define classes under the hood."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:9
msgid ""
"Still, many best practices using Godot involve applying object-oriented "
"programming principles to the scripts and scenes that compose your game. "
"That is why it's useful to understand how we can think of them as classes."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:13
#, fuzzy
msgid ""
"This guide briefly explains how scripts and scenes work in the engine's core "
"to help you understand how they work under the hood."
msgstr ""
"本指南解釋了腳本與場景在引擎核心中是如何運作的，來協助你瞭解 Godot 實際是怎麼"
"運作的，並幫助你更好地理解本系列中的一些最佳實踐是怎麼來的。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:17
msgid "How scripts work in the engine"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:19
msgid ""
"The engine provides built-in classes like :ref:`Node <class_Node>`. You can "
"extend those to create derived types using a script."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:22
#, fuzzy
msgid ""
"These scripts are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"Godot Engine 提供了一些如 :ref:`Node <class_Node>` 之類的內建類別。使用者建立"
"的型別理論上不是類別，而是用來告訴引擎要在內建類別上進行一系列初始化操作的資"
"源。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:25
msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Godot 的內部類別有一些向 :ref:`ClassDB <class_ClassDB>` 註冊類別資料的方法。"
"通過 ClassDB 這個資料庫便能在執行時存取類別資訊。``ClassDB`` 包含了如下類別資"
"訊："

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:29
#, fuzzy
msgid "Properties."
msgstr "屬性"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:30
#, fuzzy
msgid "Methods."
msgstr "方法"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:31
#, fuzzy
msgid "Constants."
msgstr "常數"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:32
#, fuzzy
msgid "Signals."
msgstr "訊號"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:34
#, fuzzy
msgid ""
"This ``ClassDB`` is what objects check against when performing an operation "
"like accessing a property or calling a method. It checks the database's "
"records and the object's base types' records to see if the object supports "
"the operation."
msgstr ""
"``ClassDB`` 即為物件在執行如存取屬性或呼叫方法等特定操作時用來檢查的地方。"
"``ClassDB`` 會檢查資料庫記錄與物件的基礎型別，來確認該物件是否支援要執行的操"
"作。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:38
msgid ""
"Attaching a :ref:`Script <class_Script>` to your object extends the methods, "
"properties, and signals available from the ``ClassDB``."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:43
#, fuzzy
msgid ""
"Even scripts that don't use the ``extends`` keyword implicitly inherit from "
"the engine's base :ref:`Reference <class_Reference>` class. As a result, you "
"can instantiate scripts without the ``extends`` keyword from code. Since "
"they extend ``Reference`` though, you cannot attach them to a :ref:`Node "
"<class_Node>`."
msgstr ""
"即時腳本不是從內建型別繼承來的，即不以 ``extends 關鍵字開始的腳本，也會隱含性"
"地自動繼承引擎的基礎 :ref:`Reference <class_Reference>` 類別。這樣一來便能讓"
"該類別在引擎覺得合邏輯的地方來遵守腳本內容。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:49
msgid "Scenes"
msgstr "場景"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:51
msgid ""
"The behavior of scenes has many similarities to classes, so it can make "
"sense to think of a scene as a class. Scenes are reusable, instantiable, and "
"inheritable groups of nodes. Creating a scene is similar to having a script "
"that creates nodes and adds them as children using ``add_child()``."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:55
#, fuzzy
msgid ""
"We often pair a scene with a scripted root node that makes use of the "
"scene's nodes. As such, the scene is often an extension of the script's "
"declarative code."
msgstr ""
"為什麼這些東西對場景組織來說有這麼重要？因為場景 **是** 物件。大家通常會將場"
"景與有腳本的根節點一起使用，然後用根節點上的腳本來使用子節點。這表示，場景通"
"常算是腳本中宣告型程式碼的延伸。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:58
msgid "The content of a scene helps to define:"
msgstr "場景的內容可以協助定義："

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:60
msgid "What nodes are available to the script"
msgstr "腳本中可以使用哪些節點"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:61
msgid "How they are organized"
msgstr "節點如何組織"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:62
msgid "How they are initialized"
msgstr "節點如何初始化"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:63
msgid "What signal connections they have with each other"
msgstr "節點之間有用什麼訊號連接"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:65
#, fuzzy
msgid ""
"Why is any of this important to scene organization? Because instances of "
"scenes *are* objects. As a result, many object-oriented principles that "
"apply to written code also apply to scenes: single responsibility, "
"encapsulation, and others."
msgstr ""
"為什麼這些東西對場景組織來說有這麼重要？因為場景 **是** 物件。大家通常會將場"
"景與有腳本的根節點一起使用，然後用根節點上的腳本來使用子節點。這表示，場景通"
"常算是腳本中宣告型程式碼的延伸。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:69
#, fuzzy
msgid ""
"The scene is *always an extension of the script attached to its root node*, "
"so you can interpret it as part of a class."
msgstr ""
"場景 **永遠是附加到場景根節點的腳本的延伸** 。可以將場景中包含的所有節點視為"
"單一類別的一部分。"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:72
#, fuzzy
msgid ""
"Most of the techniques explained in this best practices series build on this "
"point."
msgstr "本系列中的許多提示與技術解釋都以此為基礎。"
