# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 13:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:4
msgid "C# basics"
msgstr "C# 基礎"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:7
msgid "Introduction"
msgstr "簡介"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:9
msgid ""
"C# support is a new feature available since Godot 3.0. As such, you may "
"still run into some issues, or find spots where the documentation could be "
"improved. Please report issues with C# in Godot on the `engine GitHub page "
"<https://github.com/godotengine/godot/issues>`_, and any documentation "
"issues on the `documentation GitHub page <https://github.com/godotengine/"
"godot-docs/issues>`_."
msgstr ""
"C# 是自 Godot 3.0 版起新增的新功能。因此可能還是會遇到一些問題，或是有文件需"
"要改進的地方。請在 `Godot 的 GitHub 頁面 <https://github.com/godotengine/"
"godot/issues>`_ 上回報與 C# 有關的問題，而文件相關的問題請於 `說明文件 "
"GitHub 頁面 <https://github.com/godotengine/godot-docs/issues>`_ 回報。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:17
msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>` and (re)visit "
"the :ref:`Scripting section <doc_scripting>` of the step-by-step tutorial."
msgstr ""
"本頁提供了 C# 的簡介，包含 C# 為何以及如何在 Godot 中使用。之後，建議您也閱"
"讀 :ref:`如何使用特定功能 <doc_c_sharp_features>` 、:ref:`C# 與 GDScript API "
"的比較 <doc_c_sharp_differences>` 以及 (再次) 閱讀按部就班教學中的 :ref:`腳本"
"段落 <doc_scripting>` 。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:24
msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with the Mono 6.x .NET framework, including full support for "
"C# 8.0. Mono is an open source implementation of Microsoft's .NET Framework "
"based on the ECMA standards for C# and the Common Language Runtime. A good "
"starting point for checking its capabilities is the `Compatibility <http://"
"www.mono-project.com/docs/about-mono/compatibility/>`_ page in the Mono "
"documentation."
msgstr ""
"C# 是由 Microsoft 開發的高級程式語言。在 Godot 中的 C# 是基於 Mono 6.x .NET "
"框架實作的，包含對 C# 8.0 的完整支援。Mono 是基於 C# 與通用語言執行環境的 "
"ECMA 標準實作的開放原始碼版 Microsoft .NET 框架。從 Mono 文件的 `相容性 (英"
"文) <http://www.mono-project.com/docs/about-mono/compatibility/>`_ 頁面開始是"
"一個不錯的選項。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:32
msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"本教學 **不是** 完整的 C# 語言教學。若您不熟悉 C# 的語法與功能，請參考 "
"`Microsoft C# 指南 <https://docs.microsoft.com/zh-tw/dotnet/csharp/index>`_ "
"或尋找其它合適的介紹。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:39
msgid "Setting up C# for Godot"
msgstr "為 Godot 設定 C#"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:42
msgid "Windows (Visual Studio)"
msgstr "\\ Windows (Visual Studio)"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:44
msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`_ (*not* Visual Studio Code), which "
"contains utilities required to use C# in Godot. If you don't plan on using "
"the Visual Studio IDE, you can download just the `Visual Studio Build Tools "
"<https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?"
"sku=BuildTools&rel=15>`_ instead. Make sure you at least have the .NET "
"Framework 4.5 targeting pack installed, you can get it using any of the "
"installers mentioned above inside the \"Individual components\" tab."
msgstr ""
"下載並安裝最新版本的 `Visual Studio <https://visualstudio.microsoft.com/"
"downloads/>`_ (**不是** Visual Studio Code)，Visual Studio 包含了要在 Godot "
"中使用 C# 所需要的工具。若沒有要用 Visual Studio IDE，可以只下載 `Visual "
"Studio 建構工具 <https://visualstudio.microsoft.com/thank-you-downloading-"
"visual-studio/?sku=BuildTools&rel=15>`_ 。請確保至少安裝了 .NET Framework "
"4.5 目標套件，可以從上述任何安裝檔中的 [個別元件] 分頁中安裝。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:54
msgid "Windows (JetBrains Rider)"
msgstr "\\ Windows (JetBrains Rider)"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:56
msgid ""
"JetBrains Rider comes with bundled MSBuild, so nothing extra is required. "
"Make sure to set the following preferences:"
msgstr ""
"JetBrains Rider 包含了配套的 MSBuild，所以不需要其他額外軟體。請確保設定下列"
"偏好設定："

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:59
#, fuzzy
msgid "In Godot's Editor Settings:"
msgstr "編輯器設定"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:61
#, fuzzy
msgid "Set **Mono External Editor** to **JetBrains Rider**."
msgstr "將 Mono External Editor 設為 JetBrains Rider"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:62
#, fuzzy
msgid "set **Mono Build Tool** to **JetBrains Mono**."
msgstr "將 Mono Build Tool 設為 JetBrains Mono。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:64
msgid "In Rider:"
msgstr "Rider 中："

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:66
#, fuzzy
msgid ""
"Set **MSBuild version** to either **Bundled with Rider** or **.NET Core**."
msgstr "將 ``MSBuild version`` 設為 Rider 配套的版本或是 .NET Core。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:67
#, fuzzy
msgid "Install the **Godot support** plugin."
msgstr "安裝 **Godot support** 外掛。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:70
msgid "macOS and Linux"
msgstr "macOS 與 Linux"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:72
msgid ""
"Download and install the latest version of the `Mono SDK <http://www.mono-"
"project.com/download/>`_. As of Godot 3.1 beta 3, the version number doesn't "
"matter since Godot bundles its own Mono 5.18 installation. We only need the "
"Mono installation for NuGet and MSBuild which are required to use C# in "
"Godot."
msgstr ""
"下載並安裝最新的 `Mono SDK <http://www.mono-project.com/download/>`_ 。自 "
"Godot 3.1 Beta 3 版起，不需在意安裝哪個版本，因為 Godot 包含了配套的 Mono "
"5.18 安裝。安裝 Mono 只是因為在 Godot 中使用 C# 需要 NuGet 與 MSBuild。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:78
msgid ""
"To download Mono on macOS, use the \"Stable Channel\" link from the `Mono "
"Downloads Page <http://www.mono-project.com/download/>`_. The Visual Studio "
"channel is an earlier version of Mono and will not work."
msgstr ""
"要在 macOS 上下載 Mono，請使用 `Mono 下載頁面 <http://www.mono-project.com/"
"download/>`_ 中的 [Stable Channel] 連接。 Visual Studio 頻道為早期版本的 "
"Mono，將無法使用。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:84
msgid "Additional notes"
msgstr "其他注意事項"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:86
msgid ""
"Your Godot version must have Mono support enabled, so make sure to download "
"the **Mono version** of Godot. If you are building Godot from source, make "
"sure to follow the steps to enable Mono support in your build as outlined in "
"the :ref:`doc_compiling_with_mono` page."
msgstr ""
"必須使用有啟用 Mono 支援的 Godot 版本，請確保下載 **Mono 版** 的 Godot。若是"
"從原始碼建構 Godot，請確保遵守 :ref:`doc_compiling_with_mono` 頁面中的步驟來"
"啟用 Mono 支援。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:92
msgid ""
"In summary, you must have installed Visual Studio or Mono (depending on your "
"operating system) **and** the Mono-enabled version of Godot."
msgstr ""
"總之就是必須安裝 Visual Studio 或 Mono (依據作業系統而異) **並且** 安裝有啟"
"用 Mono 版本的 Godot。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:96
msgid "Configuring an external editor"
msgstr "設定外部編輯器"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:98
msgid ""
"C# support in Godot's script editor is minimal. Consider using an external "
"IDE or editor, such as  `Visual Studio Code <https://code.visualstudio.com/"
">`_ or MonoDevelop. These provide autocompletion, debugging, and other "
"useful features for C#. To select an external editor in Godot, click on "
"**Editor → Editor Settings** and scroll down to **Mono**. Under **Mono**, "
"click on **Editor**, and select your external editor of choice. Godot "
"currently supports the following external editors:"
msgstr ""
"Godot 中的腳本編輯器僅對 C# 有最小限度的支援。建議使用外部 IDE 或編輯器，如 "
"`Visual Studio Code <https://code.visualstudio.com/>`_ 或 MonoDevelop。這些編"
"輯器有提供自動補全、除錯以及其他對 C# 實用的功能。要在 Godot 中選擇外部編輯"
"器，請點擊 **[編輯器] → [編輯器設定]** 並向下滾動到 **Mono** 。在 **Mono** 中"
"點擊 **Editor** 並選擇要使用的外部編輯器。Godot 目前支援下列外部編輯器："

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:107
msgid "Visual Studio 2019"
msgstr "\\ Visual Studio 2019"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:108
msgid "Visual Studio Code"
msgstr "\\ Visual Studio Code"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:109
msgid "MonoDevelop"
msgstr "\\ MonoDevelop"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:110
msgid "Visual Studio for Mac"
msgstr "Mac 版 Visual Studio"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:111
msgid "JetBrains Rider"
msgstr "\\ JetBrains Rider"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:115
msgid ""
"If you are using Visual Studio Code, ensure you download and install the `C# "
"extension <https://marketplace.visualstudio.com/items?itemName=ms-vscode."
"csharp>`_ to enable features like syntax highlighting and IntelliSense."
msgstr ""
"若使用 Visual Studio Code，請確保有下載並安裝 `C# 擴充套件 <https://"
"marketplace.visualstudio.com/items?itemName=ms-vscode.csharp>`_ 來開啟如語法"
"醒目提示或 IntelliSense 等功能。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:121
#, fuzzy
msgid ""
"If you are using Visual Studio 2019, you must follow the instructions found "
"in the `:ref:doc_c_sharp_configuring_vs_2019_for_debugging` section below."
msgstr ""
"若使用 Visual Studio 2019，請確保有按照下方「設定 VS 2019 以進行除錯」段落中"
"的介紹。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:126
msgid "Creating a C# script"
msgstr "建立 C# 腳本"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:128
#, fuzzy
msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"成功為 Godot 設定好 C# 後，應該可以在從場景中節點右鍵選單中選擇 ``[附加腳"
"本]`` 時看到下列選項："

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:133
msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some places in the "
"documentation still lack C# examples, most concepts can be transferred "
"easily from GDScript."
msgstr ""
"請注意，雖然某些功能不同，但使用 C# 撰寫腳本時大部分概念都一樣。若還不熟悉 "
"Godot，則建議您先閱讀 :ref:`doc_scripting` 中的教學。雖然文件中的某些部分還沒"
"有 C# 範例，但大部分概念都很容易從 GDScript 轉過來。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:140
msgid "Project setup and workflow"
msgstr "專案設定與工作流程"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:142
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.mono`` and ``Properties/AssemblyInfo.cs``). All of these but ``.mono`` "
"are important and should be committed to your version control system. ``."
"mono`` can be safely added to the ignore list of your VCS. When "
"troubleshooting, it can sometimes help to delete the ``.mono`` folder and "
"let it regenerate."
msgstr ""
"建立第一個 C# 腳本後，Godot 會為目前的 Godot 專案初始化 C# 專案檔。包含產生 "
"C# 解決方案 (``.sln``) 與專案檔 (``.csproj``)、以及一些公用檔案與資料夾 (``."
"mono`` 與 ``Properties/AssemblyInfo.cs``)。這些檔案除了 ``.mono`` 之外都很重"
"要，且應該被認可 (Commit) 至版本控制系統中。``.mono`` 可以安全地新增到 VCS 中"
"的忽略列表內，有時候可能會需要刪除 ``.mono`` 資料夾並讓 Godot 重新產生。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:152
msgid "Example"
msgstr "範例"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:154
msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "下列為一個空白的 C# 腳本，包含了一些說明如何運作的註解。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:181
msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` class which is part of the "
"``Godot`` namespace. For a list of methods in the ``GD`` class, see the "
"class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"就像這樣，在 GDScript 中通常在全域的函式，如 Godot 的 ``print`` 函式，都在 "
"``Godot`` 命名空間中的 ``GD`` 類別內。要取得 ``GD`` 類別中所有方法的列表，請"
"參考類別參照頁面中的 :ref:`@GDScript <class_@gdscript>` 與 :ref:"
"`@GlobalScope <class_@globalscope>` 。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:188
msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error "
"and won't be able to run the scene: *\"Cannot find class XXX for script "
"res://XXX.cs\"*"
msgstr ""
"請記得，要附加到節點上的類別必須與 ``.cs`` 檔案的檔名相同。否則會得到下列錯誤"
"且無法執行場景： **「Cannot find class XXX for script res://XXX.cs」**"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:194
msgid "General differences between C# and GDScript"
msgstr "C# 與 GDScript 間的一般差異"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:196
msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"C# API 使用 ``PascalCase`` 而不是 GDScript/C++ 的 ``snake_case`` 。欄位、"
"Getter、Setter 都儘量轉換成屬性。一般來說，C# Godot API 都在合理情況下儘量保"
"持其習慣。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:200
msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr "更多資訊請參考 :ref:`doc_c_sharp_differences` 一頁。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:204
#, fuzzy
msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the word **Mono** at the bottom of the editor window "
"to reveal the Mono panel, then clicking the **Build Project** button."
msgstr ""
"使用 C# 時，若要看到新匯出的變數或訊號，就需要建構或重新建構專案。要重新建構"
"專案可以手動點擊編輯器視窗底部的 [Mono] 文字來打開 Mono 面板，然後點擊 [建構"
"專案] 按鈕。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:209
msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:213
msgid "Current gotchas and known issues"
msgstr "目前狀況與已知問題"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:215
msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for Mono issues <https://github.com/"
"godotengine/godot/labels/topic%3Amono>`_."
msgstr ""
"由於 Godot 中的 C# 支援還狠心，所以還有一些需要解決的問題。下表為在 Godot 中"
"使用 C# 需要注意的幾個最重要的問題，另外也請參考一下官方的 `Mono 問題追蹤器 "
"<https://github.com/godotengine/godot/labels/topic%3Amono>`_ 。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:221
msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr "雖然還是可以寫編輯器外掛，但目前很複雜。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:222
msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr "除了匯出的變數以外，熱重載時狀態不會保存並重新載入。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:224
msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr "附加 C# 腳本時參照的類別名稱必須與檔名一致。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:226
msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation."
msgstr ""
"有些方法，如 ``Get()``/``Set()``, ``Call()``/``CallDeferred()`` 與訊號連接方"
"法 ``Connect()`` 都還依賴 Godot 的 ``snake_case`` API 命名規範。所以使用如 "
"``CallDeferred(\"AddChild\")`` 時，無法正常使用 ``AddChild`` ，因為 API 預期"
"使用原本 ``snake_case`` 版的 ``add_child`` 。但依然可以使用自定屬性與方法而不"
"受此限。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:234
msgid ""
"As of Godot 3.2.2, exporting Mono projects is supported for desktop "
"platforms (Linux, Windows and macOS), Android, HTML5, and iOS. The only "
"platform not supported yet is UWP."
msgstr ""
"自 Godot 3.2.2 版起，匯出 Mono 專案支援桌面平台 (Linux, Windows 與 macOS), "
"Android, HTML5 與 iOS。唯一還不支援的平台為 UWP。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:239
msgid "Performance of C# in Godot"
msgstr "Godot 中的 C# 效能"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:241
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads. C# is faster, but requires some expensive marshalling "
"when talking to Godot."
msgstr ""
"根據一些初步的 `效能評定 <https://github.com/cart/godot3-bunnymark>`_ ，在一"
"般情況下，Godot 中的 C# 效能比起一些單純的 GDScript 情況還要快上 **～ 4 倍"
"** 。C++ 依然稍微快一點。實際情況還是依據使用方式而異。GDScript 一般來說對於"
"普通的程式編寫來說已經夠快了，而 C# 雖然更快，但與 Godot 通訊時則需要耗費許多"
"吃效能的封送處理。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:249
msgid "Using NuGet packages in Godot"
msgstr "在 Godot 中使用 NuGet 套件"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:251
msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"可以在 Godot 中配合任意 C# 專案安裝與使用 `NuGet <https://www.nuget.org/>`_ "
"套件。許多 IDE 都支援直接新增套件，這些套件也可以通過在專案根目錄的 ``."
"csproj`` 檔內加上套件參照來手動新增："

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:268
msgid ""
"By default, tools like NuGet put ``Version`` as an attribute of the "
"```PackageReference``` Node. **You must manually create a Version node as "
"shown above.**  This is because the version of MSBuild used requires this. "
"(This will be fixed in Godot 4.0.)"
msgstr ""
"預設情況下，如 NuGet 之類的工具會將 ``Version`` 放在 ```PackageReference``` "
"節點的屬性中。 **必須手動如上所示建立 Version 節點。** 需要這麼做是因為目前"
"的 MSBuild 版本所需。 (該問題將於 Godot 4.0 版修正。)"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:270
msgid ""
"Whenever packages are added or modified, run ``nuget restore`` (*not* "
"``dotnet restore``) in the root of the project directory. To ensure that "
"NuGet packages will be available for msbuild to use, run:"
msgstr ""
"每當套件新增或修改後，請在專案根目錄執行 ``nuget restore`` (**不是** "
"``dotnet restore``)。要確保 msbuild 能使用 NuGet 套件，請執行："

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:279
msgid "Profiling your C# code"
msgstr "對 C# 程式進行程式碼剖析"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:281
msgid ""
"`Mono log profiler <https://www.mono-project.com/docs/debug+profile/profile/"
"profiler/>`_ is available for Linux and macOS. Due to a Mono change, it does "
"not work on Windows currently."
msgstr ""
"在 Linux 與 macOS 中可以使用 `Mono Log Profiler <https://www.mono-project."
"com/docs/debug+profile/profile/profiler/>`_ 。由於 Mono 的更改，目前該工具無"
"法在 Windows 上使用。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:282
msgid ""
"External Mono profiler like `JetBrains dotTrace <https://www.jetbrains.com/"
"profiler/>`_ can be used as described `here <https://github.com/godotengine/"
"godot/pull/34382>`_."
msgstr ""
"如 `JetBrains dotTrace <https://www.jetbrains.com/profiler/>`_ 等外部 Mono 剖"
"析器可以按照 `這裡 <https://github.com/godotengine/godot/pull/34382>`_ 說明的"
"方式使用。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:287
msgid "Configuring VS 2019 for debugging"
msgstr "設定 VS 2019 以進行除錯"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:291
msgid ""
"Godot has built-in support for workflows involving several popular C# IDEs. "
"Built-in support for Visual Studio will be including in future versions, but "
"in the meantime, the steps below can let you configure VS 2019 for use with "
"Godot C# projects."
msgstr ""
"Godot 中內建支援在工作流程中整合數種流行的 C# IDE。對於 Visual Studio 的內建"
"支援將於未來的版本提供，但目前，可以通過下列步驟來設定 VS 2019 給 Godot C# 專"
"案使用。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:296
msgid ""
"Install VS 2019 with ``.NET desktop development`` and ``Desktop development "
"with C++`` workloads selected."
msgstr ""
"安裝 VS 2019 時請選擇 ``.NET 桌面開發`` 與 ``以 C++ 進行桌面開發`` 工作負載。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:297
msgid ""
"**Ensure that you do not have Xamarin installed.** Do not choose the "
"``Mobile development with .NET`` workload. Xamarin changes the DLLs used by "
"MonoDebugger, which breaks debugging."
msgstr ""
"**確保沒有安裝 Xamarin。** 不要選擇 ``以 .NET 進行行動開發`` 工作負載。"
"Xamarin 會更改 MonoDebugger 使用的 DLL，會導致無法除錯。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:298
msgid ""
"Install the `VSMonoDebugger extension <https://marketplace.visualstudio.com/"
"items?itemName=GordianDotNet.VSMonoDebugger0d62>`_."
msgstr ""
"安裝 `VSMonoDebugger 擴充套件 <https://marketplace.visualstudio.com/items?"
"itemName=GordianDotNet.VSMonoDebugger0d62>`_ 。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:299
msgid "In VS 2019 --> Extensions --> Mono --> Settings:"
msgstr "在 VS 2019 中 --> [擴充套件] -> [Mono] --> [設定]："

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:301
msgid "Select ``Debug/Deploy to local Windows``."
msgstr "選擇 ``除錯／部署至 Windows`` 。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:302
msgid "Leave ``Local Deploy Path`` blank."
msgstr "將 ``本機部署路徑`` 留空。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:303
msgid ""
"Set the ``Mono Debug Port`` to the port in Godot --> Project --> Project "
"Settings --> Mono --> Debugger Agent."
msgstr ""
"將 ``Mono 除錯連接埠`` 設為 Godot 中 --> [專案] -> [專案設定] -> [Mono] -> "
"[Debugger Agent] 中的連接埠。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:304
msgid ""
"Also select ``Wait for Debugger`` in the Godot Mono options. `This Godot "
"Addon <https://godotengine.org/asset-library/asset/435>`_ may be helpful."
msgstr ""
"也在 Godot Mono 選項中選擇 ``Wait for Debugger`` 。`這個 Godot 擴充功能 "
"<https://godotengine.org/asset-library/asset/435>`_ 也許有幫助。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:306
msgid ""
"Run the game in Godot. It should hang at the Godot splash screen while it "
"waits for your debugger to attach."
msgstr ""
"在 Godot 中執行遊戲。這時應該會停止在 Godot 啟動畫面，並等待除錯工具附加到遊"
"戲上。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:307
msgid ""
"In VS 2019, open your project and choose Extensions --> Mono --> Attach to "
"Mono Debugger."
msgstr ""
"在 VS 2019 中打開專案並選擇 [擴充套件] --> [Mono] -> [附加到 Mono 除錯工具]。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:310
msgid "Configuring Visual Studio Code for debugging"
msgstr "設定 Visual Studio Code 以進行除錯"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:312
msgid ""
"To configure debugging, open Visual Studio Code and download the Mono Debug "
"extension from Microsoft and the Godot extension by Ignacio. Then open the "
"Godot project folder in VS Code. Go to the Run tab and click on **create a "
"launch.json file**. Select **C# Godot** from the dropdown menu. Now, when "
"you start the debugger in VS Code your Godot project will run."
msgstr ""
