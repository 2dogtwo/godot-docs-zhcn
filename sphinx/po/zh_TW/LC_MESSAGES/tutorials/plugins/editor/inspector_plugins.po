# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:4
#, fuzzy
msgid "Inspector plugins"
msgstr "Android"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:6
msgid ""
"The inspector dock supports custom plugins to create your own widgets for "
"editing properties. This tutorial explains how to use the :ref:"
"`class_EditorInspectorPlugin` and :ref:`class_EditorProperty` classes to "
"write such plugins with the example of creating a custom value editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:12
msgid "Setup"
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:14
msgid ""
"Just like :ref:`doc_making_plugins`, we start out by making a new plugin, "
"getting a ``plugin.cfg`` file created, and start with our :ref:"
"`class_EditorPlugin`.  However, instead of using ``add_custom_node`` or "
"``add_control_to_dock`` we'll use ``add_inspector_plugin``."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:41
#, fuzzy
msgid "EditorInspectorPlugin"
msgstr "Android"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:43
msgid ""
"To actually connect into the Inspector, we create a :ref:"
"`class_EditorInspectorPlugin` class. This script provides the \"hooks\" to "
"the inspector. Thanks to this class, the editor will call the functions "
"within the EditorInspectorPlugin while it goes through the process of "
"building the UI for the inspector. The script is used to check if we should "
"enable ourselves for any :ref:`class_Object` that is currently in the "
"inspector (including any :ref:`class_Resource` that is embedded!)."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:51
msgid ""
"Once enabled, EditorInspectorPlugin has methods that allow for adding :ref:"
"`class_EditorProperty` nodes or just custom :ref:`class_Control` nodes to "
"the beginning and end of the inspector for that :ref:`class_Object`, or for "
"overriding or changing existing property editors."
msgstr ""

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:85
#, fuzzy
msgid "EditorProperty"
msgstr "開發"

#: ../../docs/tutorials/plugins/editor/inspector_plugins.rst:87
msgid ""
"Next, we define the actual :ref:`class_EditorProperty` custom value editor "
"that we want instantiated to edit integers. This is a custom :ref:"
"`class_Control` and we can add any kinds of additional nodes to make "
"advanced widgets to embed in the inspector."
msgstr ""
