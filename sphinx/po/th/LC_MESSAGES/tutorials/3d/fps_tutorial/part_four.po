# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-19 09:05+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: th\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:4
msgid "Part 4"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:7
msgid "Part Overview"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:9
msgid ""
"In this part we will be refactoring ``Player.gd`` to use a more modular "
"format, add support for joypads, and add the ability to change weapons with "
"the scroll wheel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:13
msgid ""
"While this part may not be the most interesting, it is very important. "
"Having a clean and modular code base allows us to build more complex "
"behaviour in the future."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:16
msgid ""
"You are assumed to have finished :ref:`part three "
"<doc_fps_tutorial_part_three>` before moving on to this part of the tutorial."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:18
msgid ""
"You can find the completed code for part three here: https://github.com/"
"TwistedTwigleg/Godot_FPS_Tutorial/tree/part_3"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:22
msgid ""
"Just click the green \"Clone or download\" button and choose \"Download Zip"
"\" to get the finished project for part 3."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:24
msgid "Let's get started!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:28
msgid "A quick note"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:30
msgid ""
"Before we dig into refactoring the code, let's quickly talk about *why* we "
"want to refactor the code."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:32
msgid "First, what is refactoring? According to wikipedia:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:34
msgid ""
"**\"Code refactoring is the process of restructuring existing computer code—"
"changing the factoring—without changing its external behaviour.\"**"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:36
msgid ""
"Basically, refactoring is taking code we've already written, and rewriting/"
"restructuring it without changing what it does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:38
msgid ""
"Second, why refactor? There are plenty of reasons why you may want to "
"refactor your code base, but for this tutorial there is really only three "
"major reasons:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:41
msgid ""
"1: By refactoring the code base we can take out certain elements from the "
"various functions in ``player.gd`` and separate them into their own "
"functions/scripts. ``_physics_process`` benefits greatly from this, because "
"while it does work right now, it is very confusing to navigate."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:44
msgid ""
"2: With some careful refactoring, we can take out most of the gun logic from "
"``Player.gd`` and put them into their own scripts. This is key because it "
"easily allows us to make/edit weapons and their behaviours without having to "
"change much in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:47
msgid ""
"3: Currently performance in ``Player.gd`` is okay, but with some work we can "
"make it even better! Performance was not a primary concern for the first "
"three parts of this tutorial series, and while it still is not a major "
"concern, we ideally want to write code with good performance when possible."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:50
msgid "All of these reasons are why we are going to refactor ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:52
msgid ""
"What we plan on doing in this part is taking our very linear ``Player.gd`` "
"script and make it more modular and extendible. This will allow us to more "
"easily add features later, as well as make it easier to work with in later "
"parts."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:55
msgid ""
"Even though part 4 is dedicated to refactoring ``Player.gd``, it is likely "
"we will need to do more refactoring in later parts as we continue to add "
"features!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:59
msgid "Breaking it down"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:61
msgid ""
"Current a majority of the code in ``Player.gd`` is located in "
"``_physics_process``. Right now ``_physics_process`` is a huge function with "
"several works parts. With some refactoring, we can break "
"``_physics_process`` into several smaller functions."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:64
msgid ""
"Ideally we want to make these smaller functions focused on doing a small set "
"of tasks. This makes it much easier to know where we need to add code to "
"when we are working on new features."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:67
msgid ""
"Another benefit of using smaller functions is they are generally easier to "
"debug!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:70
msgid "Breaking down input processing"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:72
msgid ""
"First, lets make a function for handling all of the :ref:`Input "
"<class_Input>` related code. This allows us to more clearly see all of our "
"player input."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:75
msgid "Create new function called `process_input` and add the following code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:193
msgid ""
"You may have noticed that all of the code so far is exactly the same as the :"
"ref:`Input <class_Input>` relate code already written in "
"``_physics_process``, but is now all placed in one function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:196
msgid "There are a few changes though:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:198
msgid ""
"Because we are now calling our input code outside of ``_physics_process`` we "
"need to change ``dir`` from a local variable to a global variable. Add ``var "
"dir = Vector3()`` with the rest of the global variables, ideally nearby the "
"movement code for organization."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:201
msgid "Do not forget to change ``dir`` to a global variable!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:203
msgid ""
"Another change is we're not directly effecting ``dir`` any more. Before we "
"were changing ``dir`` when a movement action was pressed. Now we are "
"changing a new local variable, ``input_movement_vector``, instead. This will "
"later allow us to have more than one form of directional input. By "
"multiplying ``input_movement_vector`` by the camera's directional vectors, "
"we get the same result as when we were effecting ``dir`` directly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:207
msgid ""
"Notice how we are normalizing ``input_movement_vector`` as well. This is "
"important because later when we add additional forms of directional input, "
"we do not want to move faster if two forms of input are moving at the same "
"time. For example, we do not want to move faster if we are pressing the "
"``UP`` key on the keyboard and also are pushing forward on a controller. If "
"we did not normalize, then we'd move twice as fast! By normalizing, we make "
"everyone move at the same speed, regardless of how many input devices they "
"are using."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:213
msgid "Breaking down ``KinematicBody`` movement"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:215
msgid ""
"Next we want to move all of the code relating to moving using the :ref:"
"`KinematicBody <class_KinematicBody>` into its own function. This allows us "
"to more clearly see what code we are sending :ref:`KinematicBody "
"<class_KinematicBody>` and what it does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:218
msgid ""
"Create a new function and call it ``process_movement``. Lets add the "
"following code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:253
msgid ""
"Thankfully nothing is has changed here, all we've done is moved the code out "
"of ``_physics_process``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:255
msgid ""
"If you are using Godot ``master`` branch (or Godot 3.1), you will need to "
"change ``vel = move_and_slide(vel,Vector3(0,1,0), 0.05, 4, "
"deg2rad(MAX_SLOPE_ANGLE))`` to ``vel = move_and_slide(vel,Vector3(0,1,0), "
"true, 0.05, 4, deg2rad(MAX_SLOPE_ANGLE))``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:258
msgid ""
"Now when we are ready to have the :ref:`KinematicBody <class_KinematicBody>` "
"process our movement and send us through space, all we need to do is call "
"``process_movement``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:262
msgid "Changing the weapon code structure"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:264
msgid ""
"So far, we have not really changed the structure of the code, we've just "
"shuffled it around, so lets change that."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:266
msgid ""
"One of the major things we ideally want to change is how the weapon code is "
"handled. Currently all of the weapon realted code is all in ``Player.gd``, "
"everything from how much ammo a weapon carries, to firing bullets. While "
"this has the advantage of having all of your code in one place, it would be "
"much nicer if we make a weapon interface so we can create/change weapons "
"easily without having to scroll through ``Player.gd`` to look for the bit of "
"code we want to add/change."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:270
msgid ""
"Open up ``Player.tscn`` and navigate to the ``Gun_fire_points`` node. Lets "
"make the pistol first. Select ``Pistol_point`` and attach a node and call it "
"``Weapon_Pistol.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:273
msgid ""
"Our weapon scripts are going to do four things: They're going to handle "
"*firing*, *reloading*, *equipping*, and *unequipping*."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:275
msgid "Add the following code to ``Weapon_Pistol.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:366
msgid "Lets go over what is happening in this script:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:370
msgid "First lets look at the constants and go over what each will do:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:372
msgid "``ammo_in_weapon``: How much ammo is *currently* in this weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:373
msgid ""
"``spare_ammo``: How much spare ammo we have in reserve for this weapon. "
"``spare_ammo + ammo_in_weapon = total ammo for this weapon``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:374
msgid ""
"``AMMO_IN_MAG``: The amount ammo needed to fill the weapon. To put it "
"another way, the amount of ammo in each magazine."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:375
msgid "``DAMAGE``: The amount of damage a single bullet does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:376
msgid ""
"``CAN_RELOAD``: A boolean for tracking whether this weapon has the ability "
"to reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:377
msgid ""
"``RELOADING_ANIM_NAME``: The name of the reloading animation for this weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:378
msgid "``IDLE_ANIM_NAME``: The name of the idle animation for this weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:379
msgid "``FIRE_ANIM_NAME``: The name of the firing animation for this weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:380
msgid ""
"``is_weapon_enabled``: A boolean for tracking whether or not this weapon is "
"the currently used/enabled weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:381
msgid ""
"``bullet_scene``: The bullet scene we created in part 2 of this tutorial."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:382
msgid "``player_node``: The player node and script (``Player.gd``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:386
msgid "Notice how we do not do anything in ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:388
msgid ""
"We could try and grab the player node here, but it makes a messy "
"``get_node`` call, and because we already have to aim these points in "
"``Player.gd`` anyway, we will just pass the player node then."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:391
msgid ""
"This is just a design choice. Depending on your project, it may be better to "
"use ``get_node`` in the weapon scripts."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:396
msgid "Lets look at ``fire_weapon``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:398
msgid ""
"First we make a clone of the bullet scene and add it as a child of the scene "
"root. Next we set its global transform to ``self.global_transform``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:401
msgid ""
"before we were using a ``get_node`` call to get here because we were calling "
"this from ``Player.gd``. Now that we are firing from the fire point itself, "
"we do not need to use ``get_node`` any more."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:405
msgid ""
"Then we set its scale. As before, the bullet object is too small by default, "
"so we scale it up so it's easier to see."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:407
msgid ""
"Next we set its damage. This is new, but nothing crazy. To make this work, "
"we just need to go into ``Bullet_script.gd`` and change ``const "
"BULLET_DAMAGE`` to ``var BULLET_DAMAGE``. The reason behind changing "
"``BULLET_DAMAGE`` from a constant to a normal variable is because we may "
"reuse the bullet object later (for a different weapon)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:411
msgid ""
"Do not forgot to change ``const BULLET_DAMAGE`` to ``var BULLET_DAMAGE`` in "
"``Bullet_script.gd``!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:413
msgid ""
"Then we remove one from the ammo in our weapon and play a sound (if we have "
"sounds)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:415
msgid ""
"With the exception of how we are no longer using ``get_node``, everything in "
"``fire_weapon`` is the same as the code as ``Player.gd``'s ``fire_bullet`` "
"function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:420
msgid "In ``reload_weapon`` we are doing things a little differently."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:422
msgid ""
"First we define a variable to track whether or not we can reload. We then do "
"a couple checks. The first check is checking whether or not we are in this "
"weapon's idle animation. We do not want to reload while we are playing any "
"other animation, so this check ensures that does not happen."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:426
msgid ""
"The next thing we check is whether or not we have any ammo in reserve and/or "
"if our weapon is full. We cannot reload with no spare ammo, and we do not "
"want the player to be able to reload if the weapon is already full."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:429
msgid ""
"In some games you can reload while full. Many times in these cases you lose "
"whatever ammo was in the weapon when you reload. For this tutorial though, "
"we will only allow the player to reload if they do not have a full weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:432
msgid "Then we check ``can_reload`` to see if it is true."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:434
msgid "If it is, we then calculate how much ammo we need to fill the weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:436
msgid ""
"If we have enough ammo in spares to fill the weapon, we remove the ammo we "
"are taking from spares and set ``ammo_in_weapon`` to however much ammo is in "
"a full weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:438
msgid ""
"If we do not have enough ammo in spares, we instead add all of the ammo left "
"in spares and then set our spare ammo to zero."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:440
msgid ""
"We then play the reloading animation and play a sound. We return ``true`` to "
"signal we have successfully reloaded."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:442
msgid ""
"If we cannot reload because ``reload_weapon`` is ``false``, we return "
"``false`` to signal we did not successfully reload."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:446
msgid ""
"For ``equip_weapon`` we first check if the player is in the pistol's idle "
"state."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:448
msgid ""
"If we are in the pistol's idle state we've successfully equipped the pistol. "
"We set ``is_weapon_enabled`` to ``true`` because we are now using this "
"weapon, and return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:451
msgid ""
"We need ``is_weapon_enabled`` so we do not keep trying to equip/unequip the "
"weapons over and over again. If we relied only on using the ``equip_weapon``/"
"``unequip_weapon`` functions, we could possibility get cases where we are "
"stuck in a loop where we are equipping/unequipping the same weapon over and "
"over again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:455
msgid ""
"Next we check if we are in the idle unarmed state, a state where we can "
"transition to our equip animation. If we are, then we change the animation "
"to ``Pistol_equip`` and play a sound. Finally, we return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:458
msgid ""
"The reason behind returning ``false`` unless we are in our idle animation is "
"because we will be calling this function more than once, checking to see if "
"we have successfully equipped the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:463
msgid ""
"``unequip_weapon`` is extremely similar to ``equip_weapon``, but the checks "
"are in reverse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:465
msgid ""
"We just check if we are in our idle state. If we are, and we are not already "
"unequipping we set our animation to ``Pistol_unequip``. Then we check if we "
"are in the idle animation. If we are, we set ``is_weapon_enabled`` to "
"``false`` because we are no longer using this weapon, and return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:468
msgid "Finally, if we did not return ``true``, we return false."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:470
msgid ""
"As with ``equip_weapon``, we want to return false by default because we will "
"be calling this function until it returns true."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:474
msgid "Now we just need to do the same thing for the knife and the rifle."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:476
msgid ""
"There is only one minor difference with the knife and the rifle. We still "
"define a reload function for the knife, but instead of doing anything we "
"automatically return false."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:479
msgid ""
"Select ``Knife_point``, created a new script called ``Weapon_Knife.gd``, and "
"add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:536
msgid "There are only a few things to note here."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:538
msgid ""
"The first is we still are defining ``ammo_in_weapon``, ``spare_ammo`` and "
"``AMMO_IN_MAG``. The reason behind this is so our code has a consistent "
"interface. We may later need to access these variables in all weapons, so we "
"are adding them for the knife as a way assure all weapons have these "
"variables."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:541
msgid ""
"The second thing of note is in ``reload_weapon``. Because we cannot reload a "
"knife (or at least, not this one), we just always return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:543
msgid ""
"The last thing to note is how ``fire_weapon``'s code is exactly the same as "
"the code from ``Player.gd``. The firing code for all three weapons, the "
"pistol, rifle, and knife, are exactly the same as the code in ``Player.gd``. "
"The only differences is how we are accessing the spawn point nodes and their "
"children."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:549
msgid ""
"Finally, select ``Rifle_point``, create a new script called ``Weapon_Rifle."
"gd``, and add the following code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:637
msgid ""
"Thankfully the code for the rifle is exactly the same as the pistol, with "
"``fire_weapon`` changed to use the rifle's firing code. Other than that, "
"everything is exactly the same, just adjusted for the rifle."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:641
msgid "Finishing refactoring ``Player.gd``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:643
msgid ""
"Now we are ready to use our newly refactored weapons in ``Player.gd``. "
"First, we need to change some of the global variables. Find all of the "
"constants relating to the weapons, delete them, and add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:656
msgid "Lets go over each of these new global variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:658
msgid "``current_weapon_name``: The name of the weapon currently in use."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:659
msgid ""
"``weapons``: A dictionary holding all of the weapon nodes, allowing us to "
"access them by name instead of using ``get_node``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:660
msgid ""
"``weapon_number_to_name``: A dictionary holding all of the weapons and which "
"number they represent."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:661
msgid ""
"``weapon_name_to_number``: A dictionary holding all of the weapons numbers "
"and which names they represent. Combined with ``weapon_number_to_name``, we "
"can change from number to name and back."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:662
msgid ""
"``changing_weapon``: A boolean to track whether we are trying to change "
"weapons or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:663
msgid ""
"``changing_weapon_name``: The name of the weapon we are trying to change to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:664
msgid ""
"``reloading_weapon``: A boolean to track whether we are reloading or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:666
msgid "We need to change ``_ready`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:701
msgid "Lets quickly go over the new stuff."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:703
msgid ""
"Notice how most of the code is exactly the same as before. The only code "
"that's changed is how we are handling the gun aim points, so let's look at "
"those changes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:706
msgid ""
"First, we get all of the weapon nodes using ``get_node`` and assign them to "
"the ``weapons`` dictionary."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:708
msgid ""
"Then we loop through all of the weapons in the ``weapons`` dictionary. For "
"each weapon node, we get the value assigned to that key."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:710
msgid ""
"When we are using ``for X in Y`` where ``Y`` is a dictionary, ``X`` is "
"assigned to the each **key** in the dictionary, not the value. To get the "
"value, we have to retrieve it using ``Y[X]``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:713
msgid ""
"If the weapon node is not ``null``, we set it's ``player_node`` variable to "
"``self``, and we make the point look at the gun aim position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:715
msgid ""
"The reason we check for ``null`` is because our ``UNARMED`` weapon is "
"``null``. This is just a design choice, not a requirement for FPS games. You "
"could define a \"weapon\" for the UNARMED state, but in this series we are "
"just going to use ``null``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:718
msgid ""
"Next we flip the aim point by ``180`` degrees so it doesn't fire backwards."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:720
msgid ""
"The reason behind rotating the gun aim point is explained in :ref:`part 2 "
"<doc_fps_tutorial_part_two>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:722
msgid ""
"Finally, we set ``current_weapon_name`` and ``changing_weapon_name`` to "
"``UNARMED`` so our starting weapon is ``UNARMED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:726
msgid ""
"Now we need to change ``_physics_process``. Delete everything in "
"``_physics_process`` and add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:738
msgid ""
"You may have noticed how we have a commented out function, "
"``process_view_input``. We will be using this later! For now just leave it "
"commented out!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:741
msgid ""
"Now we are calling each of our modular functions in order. Notice how we are "
"still missing ``process_changing_weapons``, ``process_reloading``, and "
"``process_UI``. Before we add those functions, lets quickly return to "
"``process_input``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:746
msgid "Finishing ``process_input``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:748
msgid ""
"First, lets change ``process_input`` so our weapon related code works with "
"the new weapon system."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:750
msgid ""
"First, delete all of the weapon related code in `process_input`. This is the "
"includes: Changing weapons, Reloading, and Firing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:753
msgid "Now at the bottom of ``process_input``, add the following code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:821
msgid "Lets go through what each of these sections are doing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:825
msgid "Lets look at the weapon changing section first."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:827
msgid ""
"The first thing we do is get the current weapon number and assign it to "
"``weapon_change_number``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:829
msgid ""
"Next we check each of the four number keys and we assign "
"``weapon_change_number`` to their value if they are pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:831
msgid ""
"Most keyboards go in the order of ``1234567890``, so we when we set "
"``weapon_change_number``, we offset the value by ``-1`` so the first key "
"(``1``) is actually ``0``, which is our first weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:834
msgid ""
"Then we check if two new actions are pressed: ``shift_weapon_positive`` and "
"``shift_weapon_negative``. We will add these actions once we've finished "
"going over ``process_input``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:837
msgid ""
"Next we clamp ``weapon_change_number`` so it cannot be higher or lower than "
"the amount of weapons we have."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:839
msgid ""
"We are making a small assumption here: We are assuming our weapons are "
"defined in a linear pattern, where we do not have any jumps in number."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:841
msgid ""
"Another thing to note is we are getting the maximum value using "
"``weapon_to_number.size()-1``. We remove ``1`` because ``size`` returns the "
"number of elements in the dictionary, starting from ``1``, while GDScript "
"accesses values starting from ``0``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:844
msgid ""
"We do not want to suddenly change weapons while already changing weapons or "
"reload, so we check to make sure both variables are ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:846
msgid ""
"Then we convert ``weapon_change_number`` to a weapon name using "
"``weapon_number_to_name`` and check to make sure we not trying to change to "
"the weapon we are already using. If we are indeed changing weapons, we set "
"``changing_weapon_name`` to the name of the weapon at ``weapon_change_name`` "
"using ``weapon_number_to_name``. Finally, we set ``changing_weapon`` to true "
"so we can process the actual weapon changing logic in "
"``process_changing_weapons``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:852
msgid ""
"For reloading we first check to make sure we are not already reload, or "
"changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:854
msgid ""
"Then we check to see if the reloading action has been pressed. Next we get "
"the current weapon and assign it to ``current_weapon``. If the current "
"weapon is not ``null`` we then make sure this weapon can reload using the "
"weapon's ``CAN_RELOAD`` constant."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:858
msgid "We check for ``null`` because we do not want to reload ``UNARMED``!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:860
msgid ""
"Next we check get the current animation state from our animation manager, "
"and we set ``is_reloading`` to ``false``. The reason we need "
"``is_reloading`` is because we need to go through each weapon and make sure "
"we are not in it's reloading state already, because we do not want to allow "
"the player to (potentially) reload if they are already in a reloading "
"animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:864
msgid ""
"We then go through each weapon in our ``weapons`` dictionary. We then get "
"the weapon node, assign it to ``weapon_node`` and check to make sure it is "
"not ``null``. If it is not ``null``, we then make sure it's "
"``RELOADING_ANIM_NAME`` constant to see if it is equal to the animation we "
"are currently in. If it is, we set ``is_reloading`` to ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:868
msgid ""
"If ``is_reloading`` is still ``false``, we then set ``reloading_weapon`` to "
"true so we can process the reloading weapon logic in ``process_reloading``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:872
msgid "Finally, we have the firing section."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:874
msgid ""
"The first thing we do is check to see if the ``fire`` action has been "
"pressed. If it has, we then make sure we are not reloading or changing "
"weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:876
msgid ""
"Next we get the current weapon and assign it to ``current_weapon``. We then "
"check to make sure it is not equal to ``null``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:878
msgid ""
"If the current weapon is not equal to ``null``, we then make sure the weapon "
"actually has ammo. If it does, we then check to see if we are in the "
"weapon's idle state. If we are indeed in the weapon's idle state, we set our "
"animation to the weapon's fire animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:881
msgid ""
"If the current weapon does not have any ammo, we set ``reloading_weapon`` to "
"true."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:884
msgid "Adding our new input map actions"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:886
msgid ""
"As mentioned above, we've defined a couple new input actions: "
"``shift_weapon_positive`` and ``shift_weapon_negative``. Currently these "
"input actions do not exist in our project, so let's add them!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:891
msgid ""
"Open up your project settings and go to the ``Input Map`` tab. In the "
"``Action`` text field, type ``shift_weapon_positive`` and press enter or "
"press the button on the side that reads ``Add``. Next write "
"``shift_weapon_negative`` and press enter or press the ``Add`` button."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:894
msgid ""
"Scroll down to the bottom of the list and click the little plus sign next to "
"one of the newly created actions."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:898
msgid ""
"You can assign whatever key you want to either of these actions. The "
"finished project has the ``Equal`` and ``Kp Add`` keys assigned to "
"``shift_weapon_positive``. ``shift_weapon_negative`` has ``Minus`` and ``Kp "
"Subtract`` keys assigned in the finished project."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:902
msgid ""
"Once you've assigned whatever keys you want to both actions, close the "
"project settings and save."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:905
msgid "Adding ``process_changing_weapons``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:907
msgid ""
"Lets make the weapon changing logic next. Open up ``Player.gd`` and add the "
"following function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:943
msgid "Lets go over what's happening here."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:945
msgid "First we check to make sure ``changing_weapon`` is ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:947
msgid ""
"Next we make a new variable, ``weapon_unequipped``, and set it to ``false``. "
"We will use ``weapon_unequipped`` to check whether or not the current weapon "
"is unequipped. We then get the current weapon and assign it to "
"``current_weapon``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:950
msgid ""
"If the current weapon is ``null``, if we are ``UNARMED``, we can conclude "
"the weapon has been successfully unequipped and set ``weapon_unequipped`` to "
"``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:952
msgid ""
"If the weapon is not ``null``, we check if the weapon is enabled. If the "
"weapon is enabled, we call it's ``unequip_weapon`` function. If it is not "
"enabled, we set ``weapon_unequipped`` to ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:954
msgid ""
"Next we check if ``weapon_unequipped`` is ``true`` or not. Remember, "
"``weapon_unequipped`` will only be true if the current weapon's "
"``is_weapon_enabled`` variable is ``false`` (or the weapon is ``null``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:957
msgid ""
"If the current weapon is successfully unequipped, we then make a variable, "
"``weapon_equipped``. ``weapon_equipped`` will serve the same function as "
"``weapon_unequipped``, but instead of tracking if we've successfully "
"unequipped the current weapon, we instead are tracking to see if the weapon "
"we are wanting to change to has been successfully equipped."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:960
msgid ""
"We then get the weapon we want to change to and assign it to "
"``weapon_to_equip``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:962
msgid ""
"Next we check to see if ``weapon_to_equip`` is ``null``. If it is, we set "
"``weapon_equipped`` to ``true`` because ``UNARMED`` does not need any "
"additional processing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:964
msgid ""
"If ``weapon_to_equip`` is not null, we then check to see if the weapon is "
"not enabled by checking it's ``is_weapon_enabled`` variable. If it is not "
"enabled, we call ``equip_weapon`` on the weapon we are wanting to equip."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:967
msgid ""
"If the weapon we are wanting to equip is enabled, we set ``weapon_equipped`` "
"to true."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:969
msgid ""
"Finally, we check to see if ``weapon_equipped`` is ``true``. If it is, we "
"set ``changing_weapon`` to ``false``, set ``current_weapon_name`` to the "
"weapon we have changed to (``changing_weapon_name``), and we set "
"``changing_weapon_name`` to a empty string."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:973
msgid "Adding ``process_reloading``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:975
msgid ""
"Let's finish up our new modular weapon system and add ``process_reloading``. "
"Make a new function called ``process_reloading`` and add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:987
msgid "Let's go over what's this function does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:989
msgid ""
"First we check to make sure we are wanting to reload. If we are, we then get "
"the current weapon and assign it to ``current_weapon``. If "
"``current_weapon`` is not equal to ``null``, we call it's ``reload_weapon`` "
"function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:992
msgid ""
"Finally, we set ``reloading_weapon`` to ``false`` because regardless of "
"whether we've successfully reloaded, we have tried and no longer need to "
"process weapon reloading."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:996
msgid "Changing ``fire_bullet``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:998
msgid ""
"Next we need to change ``fire_bullet`` because we are no longer actually "
"firing the bullets in ``Player.gd``. Change ``fire_bullet`` to the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1007
msgid ""
"Now in ``fire_bullet`` we make sure we are not changing weapons, and if we "
"are not we call the current weapon's ``fire_weapon`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1011
msgid "Adding ``process_UI``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1014
msgid ""
"Because we've changed how weapons work, we need to change how we update the "
"UI. Make a new function called ``process_UI`` and add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1028
msgid ""
"Nothing much has changed from the code that was in ``_physics_process``, "
"we've mainly just moved the UI processing code to its own function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1031
msgid ""
"The only major change is how we get the amount counts in the current weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1035
msgid ""
"Now we have successfully refactored ``Player.gd`` to use a more modular "
"approach and the weapons now are (mainly) processed in their own scripts! Go "
"give the game a test. If everything is written correctly you should be able "
"to run around and shoot things just like before."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1038
msgid ""
"Now that we've refactored ``Player.gd``, lets add something new: Let's allow "
"our plays to play using a joypad!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1041
msgid "Adding joypad input"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1043
msgid ""
"In Godot any game controller is referred to as a joypad. This includes: "
"Console controllers, Joysticks (like for flight simulators), Wheels (like "
"for driving simulators), VR Controllers, and more."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1046
msgid ""
"First we need to change a few things in our project's input map. Open up the "
"project settings and select the ``Input Map`` tab."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1048
msgid ""
"Now we need to add some joypad buttons to our various actions. Click the "
"plus icon and select ``Joy Button``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1052
msgid ""
"Feel free to use whatever button layout you want. Make sure that the device "
"selected is set to ``0``. In the finished project, we will be using the "
"following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1054
msgid "movement_sprint: ``Device 0, Button 4 (L, L1)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1055
msgid "fire: ``Device 0, Button 0 (PS Cross, XBox A, Nintendo B)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1056
msgid "reload: ``Device 0, Button 0 (PS Square, XBox X, Nintendo Y)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1057
msgid "flashlight: ``Device 0, Button 12 (D-Pad Up)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1058
msgid "shift_weapon_positive: ``Device 0, Button 15 (D-Pad Right)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1059
msgid "shift_weapon_negative: ``Device 0, Button 14 (D-Pad Right)``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1061
msgid "Once you are happy with the input, close the project settings and save."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1065
msgid "Now let's open up ``Player.gd`` and add joypad input."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1067
msgid ""
"First, we need to define a few new global variables. Add the following "
"global variables to ``Player.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1075
msgid "Lets go over what each of these do:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1077
msgid ""
"``JOYPAD_SENSITIVITY``: This is how fast our joypad joysticks will move our "
"camera."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1078
msgid ""
"``JOYPAD_DEADZONE``: The dead zone for the joypad. You may need to adjust "
"depending on your joypad."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1080
msgid ""
"Many joypads jitter around a certain point. To counter this, we ignore any "
"movement in a with a radius of JOYPAD_DEADZONE. If we did not ignore said "
"movement, the camera will jitter."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1083
msgid "Now we are ready to start handling joypad input!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1087
msgid ""
"In ``process_input`` add the following code, just before "
"``input_movement_vector = input_movement_vector.normalized()``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1102
msgid "Lets go over what we're doing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1104
msgid "First we check to see if there is a connected joypad."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1106
msgid ""
"If there is a joypad connected, we then get it's left stick axes for right/"
"left and up/down."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1108
msgid ""
"This tutorial assumes you are using a XBox 360 wired controller on Windows. "
"The axes needed may be different on different operating systems and/or "
"controllers."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1111
msgid ""
"Next we check to see if the joypad vector is within the ``JOYPAD_DEADZONE`` "
"radius. If the ``x`` or ``y`` coordinates are within the ``JOYPAD_DEADZONE`` "
"radius, we set it to zero."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1114
msgid "Finally, we add ``joypad_vec`` to ``input_movement_vector``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1116
msgid ""
"Remember how we normalize ``input_movement_vector``? This is why! If we did "
"not normalize ``input_movement_vector`` players could move faster if they "
"are pushing in the same direction with both their keyboard and their joypad!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1121
msgid ""
"Remember that commented out function in ``_physics_process``? Lets add it! "
"Remove the ``#`` in ``_physics_process`` and make a new function called "
"``process_view_input``. Add the following to ``process_view_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1157
msgid "Let's go over what's happening:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1159
msgid ""
"First we check the mouse mode. If the mouse mode is not "
"``MOUSE_MODE_CAPTURED``, we want to return, which will skip the code below."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1161
msgid ""
"The reason we are checking to see if the mouse mode is captured or not is "
"because we may want to add a pause menu later. If we do, we do not want "
"players to move around while the game is paused if they are using a joypad!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1164
msgid ""
"Next we define a new :ref:`Vector2 <class_Vector2>` called ``joypad_vec``. "
"This will hold the right joystick position if there is one, and if there is "
"not one it will default to ``(0, 0)``, which will do nothing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1167
msgid ""
"We then check to see if we have a joypad connected. If we do, we then assign "
"``joypad_vec`` to the proper axes values."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1169
msgid ""
"Depending on our OS, you may need to change the axis order. The axis values "
"proved are confirmed to work on Linux and Windows 10 using a XBox 360 wired "
"controller."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1172
msgid ""
"We then account for the joypad's dead zone, just like in ``process_input``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1174
msgid ""
"Regardless of whether or not there is a joypad connected, we rotate "
"``rotation_helper`` and ourselves using ``joypad_vec``. If we do not have a "
"joypad connected, ``joypad_vec`` will be equal to zero, which will do "
"nothing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1177
msgid ""
"Notice how the code that handles rotating ourselves and ``rotation_helper`` "
"is exactly the same as the code in ``_input``. All we've done is change the "
"values to use ``joypad_vec`` and ``JOYPAD_SENSITIVITY``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1180
msgid ""
"Due to few mouse related bugs on Windows, we cannot put mouse rotation in "
"``process_view`` as well. The tutorial will be updated once the bugs are "
"fixed!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1182
msgid "Finally, we clamp the camera's rotation so we cannot look upside down."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1186
msgid ""
"If everything is setup correctly, you can now play around using a joypad!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1188
msgid ""
"I decided not to use the joypad triggers for firing because we'd then have "
"to do some more axis managing, and because I prefer to use a shoulder button "
"to fire."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1190
msgid ""
"If you want to use the triggers for firing, you will need to change how "
"firing works in ``process_input``. You need to get the proper axis value for "
"the trigger, and check if it's over a certain value, say ``0.8`` for "
"example. If it is, you just add the same code as when the ``fire`` action "
"was pressed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1194
msgid "Adding mouse scroll wheel input"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1196
msgid ""
"Let's add one more feature before we close this part off. Let's add the "
"ability to change weapons using the scroll wheel on the mouse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1198
msgid "Open up ``Player.gd`` and add the following global variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1205
msgid "Lets go over what each of these new variables will be doing:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1207
msgid "``mouse_scroll_value``: The value of the mouse scroll wheel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1208
msgid ""
"``MOUSE_SENSITIVITY_SCROLL_WHEEL``: How much a single scroll action "
"increases mouse_scroll_value"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1212
msgid "Now lets add the following to ``_input``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1234
msgid "Let's go over what's happening here:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1236
msgid ""
"First we check if the event is a ``InputEventMouseButton`` event and that "
"our mouse mode is ``MOUSE_MODE_CAPTURED``. Then we check to see if the "
"button index is either a ``BUTTON_WHEEL_UP`` or ``BUTTON_WHEEL_DOWN`` index."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1239
msgid ""
"If the event's index is indeed a button wheel index, we then check to see if "
"it is a ``BUTTON_WHEEL_UP`` or ``BUTTON_WHEEL_DOWN`` index. Based on whether "
"it is up or down we add/remove ``MOUSE_SENSITIVITY_SCROLL_WHEEL`` to/from "
"``mouse_scroll_value``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1242
msgid ""
"Next we clamp mouse scroll value to assure it is inside the range of our "
"weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1244
msgid ""
"We then check to see if we are changing weapons or reloading. If we are "
"doing neither, we round ``mouse_scroll_value`` and cast it to a ``int``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1246
msgid ""
"We are casting ``mouse_scroll_value`` to a ``int`` so we can use it as a key "
"in our dictionary. If we left it as a float, we would get an error when we "
"try to run the project."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1249
msgid ""
"Next we check to see if the weapon name at ``round_mouse_scroll_value`` is "
"not equal to the current weapon name using ``weapon_number_to_name``. If the "
"weapon is different than our current weapon, we assign "
"``changing_weapon_name``, set ``changing_weapon`` to true so we will change "
"weapons in ``process_changing_weapon``, and set ``mouse_scroll_value`` to "
"``round_mouse_scroll_value``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1253
msgid ""
"The reason we are setting ``mouse_scroll_value`` to the rounded scroll value "
"is because we do not want the player to keep their mouse scroll wheel just "
"in between values, giving them the ability to switch almost extremely fast. "
"By assigning ``mouse_scroll_value`` to ``round_mouse_scroll_value``, we "
"assure that each weapon takes exactly the same amount of scrolling to change."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1259
msgid "Now you can change weapons using the scroll wheel! Go give it a whirl!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1262
msgid "Final notes"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1264
msgid ""
"Now ``Player.gd`` is laid out much better, is easier to extend, we've added "
"joypad input, and now the player can change weapons with the scroll wheel!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1266
msgid ""
"You can find the finished project for part 4 here: https://github.com/"
"TwistedTwigleg/Godot_FPS_Tutorial/tree/part_4"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1268
msgid ""
"The completed project has helpful comments every step of the way for almost "
"every line of code!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1270
msgid ""
"(Remember, you can download the completed project as a ZIP file if you want)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1274
msgid ""
"If you want to see what is coming next, and what could be coming in the "
"future, check out this issue on the repository: https://github.com/"
"TwistedTwigleg/Godot_FPS_Tutorial/issues/6"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1278
msgid "How to make ``Test_Level.tscn`` look cool!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1280
msgid ""
"One quick thing! As noted by **MagicLord** from the Godot forums, you can "
"make ``Test_Level.tscn`` look really cool with a little tweaking!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1282
msgid ""
"If you change the roughness values down in the Spatial materials for the "
"provided starter assets, you get this:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1286
msgid ""
"Huge thanks to **MagicLord** for sharing! (Credit for the picture goes to "
"**MagicLord** as well!)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1288
msgid ""
"All you have to do is lower the roughness (I found a value of ``0.1`` looks "
"nice) in ``LevelAssets_SpatialMaterial.tres`` and "
"``LevelAssets_Transparent_SpatialMaterial.tres``, which you can find at "
"``assets/Level_assets``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1291
msgid ""
"Remember, you have to hit the save button or your changes to "
"``LevelAssets_SpatialMaterial.tres`` and/or "
"``LevelAssets_Transparent_SpatialMaterial.tres`` will not be saved! The save "
"icon looks like a little floppy disk!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1294
msgid ""
"You can also turn on SSR (Screen Space Reflections) and/or use :ref:"
"`reflection probes <class_ReflectionProbe>` as well! Turning up the metallic "
"value a little can also give a more realistic look."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_four.rst:1297
msgid ""
"In a later part we will likely change ``Test_Level.tscn`` a bit so the sky "
"texture does not leak through the tiles before setting the material "
"roughness down in the finished project."
msgstr ""
