# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-11 13:45+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:1
msgid "optimization"
msgstr "Optimalizace"

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:7
msgid "Optimizing 3D performance"
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:10
msgid "Culling"
msgstr "Eliminace části scén"

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:12
msgid ""
"Godot will automatically perform view frustum culling in order to prevent "
"rendering objects that are outside the viewport. This works well for games "
"that take place in a small area, however things can quickly become "
"problematic in larger levels."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:18
msgid "Occlusion culling"
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:20
msgid ""
"Walking around a town for example, you may only be able to see a few "
"buildings in the street you are in, as well as the sky and a few birds "
"flying overhead. As far as a naive renderer is concerned however, you can "
"still see the entire town. It won't just render the buildings in front of "
"you, it will render the street behind that, with the people on that street, "
"the buildings behind that. You quickly end up in situations where you are "
"attempting to render 10x, or 100x more than what is visible."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:28
msgid ""
"Things aren't quite as bad as they seem, because the Z-buffer usually allows "
"the GPU to only fully shade the objects that are at the front. However, "
"unneeded objects are still reducing performance."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:32
msgid ""
"One way we can potentially reduce the amount to be rendered is to take "
"advantage of occlusion. As of version 3.2.2 there is no built in support for "
"occlusion in Godot, however with careful design you can still get many of "
"the advantages."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:36
msgid ""
"For instance in our city street scenario, you may be able to work out in "
"advance that you can only see two other streets, ``B`` and ``C``, from "
"street ``A``. Streets ``D`` to ``Z`` are hidden. In order to take advantage "
"of occlusion, all you have to do is work out when your viewer is in street "
"``A`` (perhaps using Godot Areas), then you can hide the other streets."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:42
msgid ""
"This is a manual version of what is known as a 'potentially visible set'. It "
"is a very powerful technique for speeding up rendering. You can also use it "
"to restrict physics or AI to the local area, and speed these up as well as "
"rendering."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:48
msgid "Other occlusion techniques"
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:50
msgid ""
"There are other occlusion techniques such as portals, automatic PVS, and "
"raster based occlusion culling. Some of these may be available through "
"addons, and may be available in core Godot in the future."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:55
msgid "Transparent objects"
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:57
msgid ""
"Godot sorts objects by :ref:`Material <class_Material>` and :ref:`Shader "
"<class_Shader>` to improve performance. This, however, can not be done with "
"transparent objects. Transparent objects are rendered from back to front to "
"make blending with what is behind work. As a result, try to use as few "
"transparent objects as possible. If an object has a small section with "
"transparency, try to make that section a separate surface with its own "
"Material."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:64
msgid ""
"For more information, see the :ref:`GPU optimizations "
"<doc_gpu_optimization>` doc."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:68
msgid "Level of detail (LOD)"
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:70
msgid ""
"In some situations, particularly at a distance, it can be a good idea to "
"replace complex geometry with simpler versions - the end user will probably "
"not be able to see much difference. Consider looking at a large number of "
"trees in the far distance. There are several strategies for replacing models "
"at varying distance. You could use lower poly models, or use transparency to "
"simulate more complex geometry."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:78
msgid "Billboards and imposters"
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:80
msgid ""
"The simplest version of using transparency to deal with LOD is billboards. "
"For example, you can use a single transparent quad to represent a tree at "
"distance. This can be very cheap to render, unless of course, there are many "
"trees in front of each other. In which case transparency may start eating "
"into fill rate (for more information on fill rate, see :ref:"
"`doc_gpu_optimization`)."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:86
msgid ""
"An alternative is to render not just one tree, but a number of trees "
"together as a group. This can be especially effective if you can see an area "
"but cannot physically approach it in a game."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:90
msgid ""
"You can make imposters by pre-rendering views of an object at different "
"angles. Or you can even go one step further, and periodically re-render a "
"view of an object onto a texture to be used as an imposter. At a distance, "
"you need to move the viewer a considerable distance for the angle of view to "
"change significantly. This can be complex to get working, but may be worth "
"it depending on the type of project you are making."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:98
msgid "Use instancing (MultiMesh)"
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:100
msgid ""
"If several identical objects have to be drawn in the same place or nearby, "
"try using :ref:`MultiMesh <class_MultiMesh>` instead. MultiMesh allows the "
"drawing of many thousands of objects at very little performance cost, making "
"it ideal for flocks, grass, particles, and anything else where you have "
"thousands of identical objects."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:106
msgid "Also see the :ref:`Using MultiMesh <doc_using_multimesh>` doc."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:109
msgid "Bake lighting"
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:111
msgid ""
"Lighting objects is one of the most costly rendering operations. Realtime "
"lighting, shadows (especially multiple lights), and GI are especially "
"expensive. They may simply be too much for lower power mobile devices to "
"handle."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:115
msgid ""
"Consider using baked lighting, especially for mobile. This can look "
"fantastic, but has the downside that it will not be dynamic. Sometimes this "
"is a trade off worth making."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:119
msgid ""
"In general, if several lights need to affect a scene, it's best to use :ref:"
"`doc_baked_lightmaps`. Baking can also improve the scene quality by adding "
"indirect light bounces."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:124
msgid "Animation / Skinning"
msgstr "Animace / Skinování"

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:126
msgid ""
"Animation and particularly vertex animation such as skinning and morphing "
"can be very expensive on some platforms. You may need to lower poly count "
"considerably for animated models or limit the number of them on screen at "
"any one time."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:131
msgid "Large worlds"
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:133
msgid ""
"If you are making large worlds, there are different considerations than what "
"you may be familiar with from smaller games."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:136
msgid ""
"Large worlds may need to be built in tiles that can be loaded on demand as "
"you move around the world. This can prevent memory use from getting out of "
"hand, and also limit the processing needed to the local area."
msgstr ""

#: ../../docs/tutorials/optimization/optimizing_3d_performance.rst:140
msgid ""
"There may be glitches due to floating point error in large worlds. You may "
"be able to use techniques such as orienting the world around the player "
"(rather than the other way around), or shifting the origin periodically to "
"keep things centred around (0, 0, 0)."
msgstr ""
