# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-28 16:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/gui/gui_skinning.rst:4
msgid "GUI skinning"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:7
msgid "Oh, beautiful GUI!"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:9
msgid ""
"This tutorial is about advanced skinning of a user interface. Most games "
"generally don't need this, as they end up just relying on :ref:`Label "
"<class_Label>`, :ref:`TextureRect <class_TextureRect>`, :ref:`TextureButton "
"<class_TextureButton>` and :ref:`TextureProgress <class_TextureProgress>`."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:15
msgid ""
"However, many types of games often need complex user interfaces, like MMOs, "
"traditional RPGs, Simulators, Strategy, etc. These kinds of interface are "
"also common in some games that include editors to create content, or "
"interfaces for network connectivity."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:20
msgid ""
"Godot's user interface uses these kinds of control with the default theme, "
"but they can be skinned to resemble pretty much any kind of user interface."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:25
msgid "Theme"
msgstr "TÃ©ma"

#: ../../docs/tutorials/gui/gui_skinning.rst:27
msgid ""
"The GUI is skinned through the :ref:`Theme <class_Theme>` resource. Theme "
"contains all the information required to change the entire visual styling of "
"all controls. Theme options are named, so it's not obvious which name "
"changes what (especially from code), but several tools are provided. The "
"ultimate place to look at what each theme option is for each control, which "
"will always be more up to date than any documentation, is the file `scene/"
"resources/default_theme/default_theme.cpp <https://github.com/godotengine/"
"godot/blob/master/scene/resources/default_theme/default_theme.cpp>`__. The "
"rest of this document will explain the different tools used to customize the "
"theme."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:38
msgid ""
"A Theme can be applied to any control in the scene. As a result, all "
"children and grand-children controls will use that same theme, too (unless "
"another theme is specified further down the tree). If a value is not found "
"in a theme, it will be searched in themes higher up in the hierarchy, "
"towards the root. If nothing was found, the default theme is used. This "
"system allows for flexible overriding of themes in complex user interfaces."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:48
msgid ""
"Don't use the custom theme option in the Project Settings, as there are "
"known bugs with theme propagation. Instead, apply your theme to the root "
"Control node's Theme property. It will propagate to instanced scenes "
"automatically. To get correct theming in the editor for instanced scenes, "
"you can apply the theme resource to the instanced scene's root node as well."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:55
msgid "Theme options"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:57
msgid "Each kind of option in a theme can be:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:59
msgid ""
"**An integer constant**: A single numerical constant. Generally used to "
"define spacing between components or alignment."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:61
msgid ""
"**A Color**: A single color, with or without transparency. Colors are "
"usually applied to fonts and icons."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:63
msgid ""
"**A Texture**: A single image. Textures are not often used, but when they "
"are, they represent handles to pick or icons in a complex control (such as a "
"file dialog)."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:66
msgid ""
"**A Font**: Every control that uses text can be assigned the fonts used to "
"draw strings."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:68
msgid ""
"**A StyleBox**: Stylebox is a resource that defines how to draw a panel in "
"varying sizes (more information on them later)."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:71
msgid "Every option is associated with:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:73
msgid "A name (the name of the option)"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:74
msgid "A Control (the name of the control)"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:76
msgid "An example usage:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:95
msgid ""
"In the example above, a new theme is created. The \"font_color\" option is "
"changed and then applied to a label. Therefore, the label's text (and all "
"children and grandchildren labels) will be red."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:99
msgid ""
"It is possible to override those options without using the theme directly, "
"and only for a specific control, by using the override API in :ref:`Control."
"add_color_override() <class_Control_method_add_color_override>`:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:114
msgid ""
"In the inline help of Godot (in the Script tab), you can check which theme "
"options are overridable, or check the :ref:`Control <class_Control>` class "
"reference."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:118
msgid "Customizing a control"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:120
msgid ""
"If only a few controls need to be skinned, it is often not necessary to "
"create a new theme. Controls offer their theme options as special kinds of "
"properties. If checked, overriding will take place:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:126
msgid ""
"As can be seen in the image above, theme options have little check boxes. If "
"checked, they can be used to override the value of the theme just for that "
"control."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:131
msgid "Creating a theme"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:133
msgid ""
"The simplest way to create a theme is to edit a theme resource. Create a "
"Theme from the resource menu; the editor will appear immediately. After "
"that, save it (for example, with the name mytheme.theme):"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:139
msgid ""
"This will create an empty theme that can later be loaded and assigned to "
"controls."
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:143
msgid "Example: theming a button"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:145
msgid ""
"Download these assets (:download:`skin_assets.zip <files/skin_assets.zip>`) "
"and add them to your project. Open the theme editor, click on \"Edit Theme\" "
"and select \"Add Class Items\":"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:151
msgid ""
"A menu will appear prompting the type of control to create. Select \"Button"
"\":"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:156
msgid ""
"Immediately, all button theme options will appear in the property editor, "
"where they can be edited:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:161
msgid ""
"From ``Styles``, open the \"Normal\" drop-down menu next to where it "
"probably says \"null\" and create a \"New StyleBoxTexture\", then edit it. A "
"texture stylebox contains a texture and the size of the margins that will "
"not stretch when the texture is stretched. This is called nine-patch or "
"\"3x3\" stretching:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:169
msgid ""
"Repeat the steps and add the other assets. There is no hover or disabled "
"image in the example files, so use the same stylebox as in normal. Set the "
"supplied font as the button font and change the font color to black. Soon, "
"your button will look different and retro:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:176
msgid ""
"Save this theme to the .theme file. Go to the 2D editor and create a few "
"buttons:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:181
msgid ""
"Now, go to the root node of the scene and locate the \"theme\" property, "
"replace it with the theme that was just created. It should look like this:"
msgstr ""

#: ../../docs/tutorials/gui/gui_skinning.rst:186
msgid "Congratulations! You have created a reusable GUI Theme!"
msgstr ""
