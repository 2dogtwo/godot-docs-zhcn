# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2022, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-24 15:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for X11 (Linux, \\*BSD)"
msgstr ""

msgid "Requirements"
msgstr ""

msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr ""

msgid "GCC 7+ or Clang 6+."
msgstr ""

msgid "Python 3.5+."
msgstr ""

msgid ""
"SCons 3.0+ build system. If your distribution uses Python 2 by default, or "
"you are using a version of SCons prior to 3.1.2, you will need to change the "
"version of Python that SCons uses by changing the shebang (the first line) "
"of the SCons script file to ``#! /usr/bin/python3``. Use the command ``which "
"scons`` to find the location of the SCons script file."
msgstr ""

msgid "pkg-config (used to detect the dependencies below)."
msgstr ""

msgid "X11, Xcursor, Xinerama, Xi and XRandR development libraries."
msgstr ""

msgid "MesaGL development libraries."
msgstr ""

msgid "ALSA development libraries."
msgstr ""

msgid "PulseAudio development libraries."
msgstr ""

msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr ""

msgid "*Optional* - yasm (for WebM SIMD optimizations)."
msgstr ""

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""

msgid "Distro-specific one-liners"
msgstr ""

msgid "**Alpine Linux**"
msgstr ""

msgid "**Arch Linux**"
msgstr ""

msgid "**Debian** / **Ubuntu**"
msgstr ""

msgid "**Fedora**"
msgstr ""

msgid "**FreeBSD**"
msgstr ""

msgid "**Gentoo**"
msgstr ""

msgid "**Mageia**"
msgstr ""

msgid "**OpenBSD**"
msgstr ""

msgid "**openSUSE**"
msgstr ""

msgid "**NetBSD**"
msgstr ""

msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr ""

msgid "**Solus**"
msgstr ""

msgid "Compiling"
msgstr "Kompilace"

msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr ""

msgid ""
"A good rule of thumb for the ``-j`` (*jobs*) flag, is to have at least as "
"many threads compiling Godot as you have cores in your CPU, if not one or "
"two more. Feel free to add the ``-j`` option to any SCons command you see "
"below."
msgstr ""

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"\"bin\" subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the project "
"manager."
msgstr ""

msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr ""

msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build."
msgstr ""

msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons option "
"``target=release_debug``."
msgstr ""

msgid ""
"If you are compiling Godot with GCC, you can make the binary even smaller "
"and faster by adding the SCons option ``use_lto=yes``. As link-time "
"optimization is a memory-intensive process, this will require about 7 GB of "
"available RAM while compiling."
msgstr ""

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

msgid "Compiling a headless/server build"
msgstr ""

msgid ""
"To compile a *headless* build which provides editor functionality to export "
"projects in an automated manner, use::"
msgstr ""

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""

msgid ""
"To compile a *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr ""

msgid "Building export templates"
msgstr ""

msgid ""
"Linux binaries usually won't run on distributions that are older than the "
"distribution they were built on. If you wish to distribute binaries that "
"work on most distributions, you should build them on an old distribution "
"such as Ubuntu 16.04. You can use a virtual machine or a container to set up "
"a suitable build environment."
msgstr ""

msgid ""
"To build X11 (Linux, \\*BSD) export templates, run the build system with the "
"following parameters:"
msgstr ""

msgid "(32 bits)"
msgstr ""

msgid "(64 bits)"
msgstr ""

msgid ""
"Note that cross-compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""

msgid ""
"To create standard export templates, the resulting files must be copied to:"
msgstr ""

msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux X11\" by "
"Godot):"
msgstr ""

msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""

msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin/`` directory of your Godot source folder, so the next time you "
"build, you automatically have the custom templates referenced."
msgstr ""

msgid "Using Clang and LLD for faster development"
msgstr ""

msgid ""
"You can also use Clang and LLD to build Godot. This has two upsides compared "
"to the default GCC + GNU ld setup:"
msgstr ""

msgid ""
"LLD links Godot significantly faster compared to GNU ld or gold. This leads "
"to faster iteration times."
msgstr ""

msgid "Clang tends to give more useful error messages compared to GCC."
msgstr ""

msgid ""
"To do so, install Clang and the ``lld`` package from your distribution's "
"package manager then use the following SCons command::"
msgstr ""

msgid ""
"After the build is completed, a new binary with a ``.llvm`` suffix will be "
"created in the ``bin/`` folder."
msgstr ""

msgid ""
"It's still recommended to use GCC for production builds as they can be "
"compiled using link-time optimization, making the resulting binaries smaller "
"and faster."
msgstr ""

#, fuzzy
msgid "Translation status"
msgstr "Formát překladu"
