# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-04 16:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:1
msgid "Signal"
msgstr "Signál"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Signals"
msgstr "Signály"

#: ../../docs/getting_started/step_by_step/signals.rst:10
msgid "Introduction"
msgstr "Úvod"

#: ../../docs/getting_started/step_by_step/signals.rst:12
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"Signály jsou Godot verze návrhového vzoru *observer* . Umožňují uzlu odeslat "
"zprávu, kterou ostatní uzly slyší a na kterou mohou reagovat. Například "
"místo toho, aby tlačítko nepřetržitě kontrolovalo, zda je stisknuto, může "
"při stisknutí vyslat signál."

#: ../../docs/getting_started/step_by_step/signals.rst:17
msgid ""
"You can read more about the observer pattern here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Více informací o vzoru Observer najdete zde: https://gameprogrammingpatterns."
"com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:19
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"Signály jsou způsob, jak *oddělit* herní objekty, což vede k lepší "
"organizaci a udržovatelnosti kódu. Místo toho, aby byly herní objekty nuceny "
"očekávat, že jiné objekty budou neustále přítomny, mohou v případě potřeby "
"vysílat signály, které mohou všechny zainteresované objekty odebírat a "
"reagovat na ně."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"Níže vidíte několik příkladů, jak můžete používat signály ve svých vlastních "
"projektech."

#: ../../docs/getting_started/step_by_step/signals.rst:27
msgid "Timer example"
msgstr "Příklad časovače"

#: ../../docs/getting_started/step_by_step/signals.rst:29
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"Abychom viděli, jak signály fungují, zkusme použít uzel :ref:`Timer "
"<class_Timer>`. Vytvořte novou scénu s Node2D a dvěma dětmi: Timer a a :ref:"
"`Sprite <class_Sprite>`. V doku Scéna přejmenujte Node2D na TimerExample."

#: ../../docs/getting_started/step_by_step/signals.rst:33
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Pro texturu Sprite můžete použít ikonu Godotu nebo jakýkoli jiný obrázek, "
"který se vám líbí. Toto provedete výběrem ``Load`` v rozbalovací nabídce "
"atributu Sprite's Texture. Připojte skript ke kořenovému uzlu, ale zatím k "
"němu nepřidávejte žádný kód."

#: ../../docs/getting_started/step_by_step/signals.rst:37
msgid "Your scene tree should look like this:"
msgstr "Strom scény by měl vypadat takto:"

#: ../../docs/getting_started/step_by_step/signals.rst:41
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"Ve vlastnostech uzlu Timer zaškrtněte políčko „On“ vedle položky "
"*Autostart*. To způsobí automatické spuštění časovače při spuštění scény. "
"*Wait time* můžete nechat 1 sekundu."

#: ../../docs/getting_started/step_by_step/signals.rst:45
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"Vedle karty „Inspektor“ je karta označená \"Uzel\". Klikněte na tuto kartu a "
"uvidíte všechny signály, které může vybraný uzel vysílat. V případě uzlu "
"Timer se jedná o signál \"timeout\". Tento signál je vysílán vždy, když "
"časovač dosáhne hodnoty ``0``."

#: ../../docs/getting_started/step_by_step/signals.rst:52
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"Klikněte na signál „timeout ()“ a klikněte na „Připojit ...“ ve spodní části "
"panelu signálů. Uvidíte následující okno, kde můžete definovat, jak chcete "
"signál připojit:"

#: ../../docs/getting_started/step_by_step/signals.rst:58
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"Na levé straně uvidíte uzly ve vaší scéně a můžete vybrat uzel, který by měl "
"signálu \"naslouchat\". Všimněte si, že uzel časovače je modrý, což je "
"vizuální indikace, že je to uzel, který vysílá signál. Vyberte kořenový uzel."

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"Cílový uzel *musí* mít připojený skript, jinak se zobrazí chybová zpráva."

#: ../../docs/getting_started/step_by_step/signals.rst:66
msgid ""
"If you toggle the Advanced menu, you'll see on the right side that you can "
"bind an arbitrary number of arguments of (possibly) different types. This "
"can be useful when you have more than one signal connected to the same "
"method, as each signal propagation will result in different values for those "
"extra call arguments."
msgstr ""
"Pokud přepnete nabídku Pokročilé, uvidíte na pravé straně, že můžete svázat "
"libovolný počet argumentů různých typů. To může být užitečné, pokud máte ke "
"stejné metodě připojen více než jeden signál a každé šíření signálu bude "
"předávat různé argumenty."

#: ../../docs/getting_started/step_by_step/signals.rst:70
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"V dolní části okna je pole označené „Metoda příjemce“. Toto je název funkce "
"ve skriptu cílového uzlu, který chcete použít. Ve výchozím nastavení Godot "
"vytvoří tuto funkci pomocí konvence pojmenování ``_on_ <název_uzlu> _ "
"<jméno_signálu>``, ale můžete ji změnit, pokud si budete přát."

#: ../../docs/getting_started/step_by_step/signals.rst:75
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"Klikněte na \"Připojit\" a uvidíte, že ve skriptu byla vytvořena funkce:"

#: ../../docs/getting_started/step_by_step/signals.rst:96
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"Nyní můžeme nahradit pass jakýmkoli kódem, který chceme spustit, když je "
"signál přijat. Ať Sprite mrkne:"

#: ../../docs/getting_started/step_by_step/signals.rst:121
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"Spusťte scénu a každou sekundu uvidíte jak Sprite blikne. Chcete-li prodlevu "
"změnit, změňte vlastnost časovače *Čekací doba*."

#: ../../docs/getting_started/step_by_step/signals.rst:125
msgid "Connecting signals in code"
msgstr "Připojení signálů v kódu"

#: ../../docs/getting_started/step_by_step/signals.rst:127
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"Připojení signálu můžete také uskutečnit v kódu, nikoliv v editoru. To je "
"obvykle nutné, když vytváříte instance uzlů pomocí kódu a propojení editorem "
"tedy nelze použít."

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"Nejprve odpojte signál výběrem připojení na kartě časovače „Uzel“ a "
"kliknutím na tlačítko Odpojit."

#: ../../docs/getting_started/step_by_step/signals.rst:136
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"Pro navázání spojení v kódu použijeme funkci ``connect``. Vložíme ji do "
"``_ready()``, aby se spojení navázalo při spuštění. Syntaxe funkce je "
"``<source_node>.connect(<signal_name>,<target_node>,"
"<target_function_name>)``. Zde je kód pro naše připojení časovače:"

#: ../../docs/getting_started/step_by_step/signals.rst:171
msgid "Custom signals"
msgstr "Vlastní signály"

#: ../../docs/getting_started/step_by_step/signals.rst:173
msgid "You can also declare your own custom signals in Godot:"
msgstr "V Godotu můžete také deklarovat své vlastní signály:"

#: ../../docs/getting_started/step_by_step/signals.rst:192
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"Po deklaraci se vaše vlastní signály se objeví v inspektoru a lze je "
"připojit stejným způsobem jako vestavěné signály uzlu."

#: ../../docs/getting_started/step_by_step/signals.rst:195
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr "Chcete-li vyslat signál pomocí kódu, použijte funkci ``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:222
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""
"Signál může také volitelně deklarovat jeden nebo více argumentů. Názvy "
"argumentů zadejte mezi závorkami:"

#: ../../docs/getting_started/step_by_step/signals.rst:243
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Argumenty signálu se zobrazují v doku Uzel editoru a Godot je pro vás může "
"použít k vytvoření funkcí zpětného volání. Při vysílání signálů však stále "
"můžete vysílat signály s libovolným počtem argumentů. Je tedy na vás, abyste "
"vyslali ty správné hodnoty."

#: ../../docs/getting_started/step_by_step/signals.rst:248
#, fuzzy
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr ""
"Chcete-li předat hodnoty, přidejte je jako druhý argument do funkce "
"``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:276
msgid "Conclusion"
msgstr "Závěr"

#: ../../docs/getting_started/step_by_step/signals.rst:278
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Mnoho vestavěných typů uzlů Godota poskytuje signály, které můžete použít "
"pro detekci událostí. Například :ref:`Area2D <class_Area2D>` představující "
"minci vydává signál ``body_entered``, kdykoli tělo hráče (uzel Physicsbody) "
"vstoupí do jejího kolizního tvaru, což vám umožní zaznamenat okamžik, kdy "
"hráč minci sebere."

#: ../../docs/getting_started/step_by_step/signals.rst:283
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"V následující sekci :ref:`doc_your_first_game` vytvoříte kompletní hru,která "
"ukáže využití signálů pro vzájené spojení různých herních komponent."
