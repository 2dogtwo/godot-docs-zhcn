# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:4
msgid "Control the game's UI with code"
msgstr "Ovládání uživatelského rozhraní hry pomocí kódu"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:7
msgid "Intro"
msgstr "Úvod"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:9
msgid ""
"In this tutorial, you will connect a character to a life bar and animate the "
"health loss."
msgstr ""
"V tomto tutoriálu spojíte postavu s ukazatelem života a budete animovat "
"úbytek zdraví."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:14
msgid ""
"Here's what you'll create: the bar and the counter animate when the "
"character takes a hit. They fade when it dies."
msgstr ""
"Tak tohle vytvoříte: Animovaný sloupec a počítadlo zásahů do postavy, který "
"zmizí když postava zemře."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:18
msgid "You will learn:"
msgstr "Naučíte se:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:20
msgid "How to **connect** a character to a GUI with signals"
msgstr ""
"Jak **připojit** postavu ke grafickému uživatelskému rozhraní pomocí signálů"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:21
msgid "How to **control** a GUI with GDscript"
msgstr "Jak **ovládat** grafické uživatelské rozhraní pomocí GDscriptu"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:22
msgid "How to **animate** a life bar with the :ref:`Tween <class_Tween>` node"
msgstr "Jak **animovat** proužek života pomocí uzlu :ref:`Tween <class_Tween>`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:25
msgid ""
"If you want to learn how to set up the interface instead, check out the step-"
"by-step UI tutorials:"
msgstr ""
"Pokud se chcete naučit, jak vytvořit rozhraní, podívejte se na výukové "
"programy uživatelského rozhraní krok za krokem:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:28
msgid ":doc:`ui_main_menu`"
msgstr ":doc:`ui_main_menu`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:29
msgid ":doc:`ui_game_user_interface`"
msgstr ":doc:`ui_game_user_interface`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:32
msgid ""
"When you code a game, you want to build the core gameplay first: the main "
"mechanics, player input, win and loss conditions. The UI comes a bit later. "
"You want to keep all the elements that make up your project separate if "
"possible. Each character should be in its own scene, with its own scripts, "
"and so should the UI elements. This prevents bugs, keeps your project "
"manageable, and allows different team members to work on different parts of "
"the game."
msgstr ""
"Když programujete hru, chcete nejprve vytvořit její jádro: hlavní "
"mechanismy, vstupy hráčů, podmínky výhry a prohry. Uživatelské rozhraní "
"přijde na řadu o něco později. Všechny prvky, které tvoří váš projekt, "
"chcete mít pokud možno oddělené. Každá postava by měla být ve vlastní scéně "
"s vlastními skripty a stejně tak prvky uživatelského rozhraní. Předejdete "
"tak chybám, udržíte projekt zvládnutelný a umožníte různým členům týmu "
"pracovat na různých částech hry."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:40
msgid ""
"Once the core gameplay and the UI are ready, you'll need to connect them "
"somehow. In our example, we have the Enemy who attacks the Player at "
"constant time intervals. We want the life bar to update when the Player "
"takes damage."
msgstr ""
"Jakmile je hotová základní hra i uživatelské rozhraní, je třeba je nějak "
"propojit. V našem příkladu máme Nepřítele, který na Hráče útočí v "
"konstantních časových intervalech. Chceme, aby se ukazatel života "
"aktualizoval, když Hráč utrpí poškození."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:45
msgid "To do this, we will use **signals**."
msgstr "K tomu použijeme **signály**."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:49
msgid ""
"Signals are Godot's version of the Observer pattern. They allow us to send "
"out some message. Other nodes can connect to the object that **emits** the "
"signal and receive the information. It's a powerful tool we use a lot for "
"User Interface and achievement systems. You don't want to use them "
"everywhere, though. Connecting two nodes adds some coupling between them. "
"When there's a lot of connections, they become hard to manage. For more "
"information, check out the `signals video tutorial <https://youtu.be/"
"l0BkQxF7X3E>`_ on GDquest."
msgstr ""
"Signály jsou Godotovou verzí vzoru Observer. Umožňují nám vyslat nějakou "
"zprávu. Ostatní uzly se mohou připojit k objektu, který **vysílá** signál, a "
"přijmout informaci. Je to mocný nástroj, který často používáme pro "
"uživatelské rozhraní a systémy achievmentů. Nechcete je však používat všude. "
"Propojení dvou uzlů mezi ně přidává určitou vazbu. Když je vazeb hodně, "
"obtížně se spravují. Další informace najdete ve videonávodu `signals "
"<https://youtu.be/l0BkQxF7X3E>`_ na webu GDquest."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:53
msgid "Download and explore the start project"
msgstr "Stažení a prozkoumání počátečního projektu"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:55
msgid ""
"Download the Godot project: :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. It contains all the assets and scripts you need to "
"get started. Extract the .zip archive to get two folders: `start` and `end`."
msgstr ""
"Stáhněte si projekt Godot: :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. Obsahuje všechny prostředky a skripty, které "
"potřebujete pro začátek. Rozbalením archivu .zip získáte dvě složky: `start` "
"a `end`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:58
msgid ""
"Load the ``start`` project in Godot. In the ``FileSystem`` dock, double "
"click on LevelMockup.tscn to open it. It's an RPG game's mockup where 2 "
"characters face each other. The pink enemy attacks and damages the green "
"square at regular time intervals, until its death. Feel free to try out the "
"game: the basic combat mechanics already work. But as the character isn't "
"connected to the life bar, the ``GUI`` doesn't do anything."
msgstr ""
"Načtení projektu ``start`` v Godotu. V doku ``FileSystem`` jej otevřete "
"poklepáním na soubor LevelMockup.tscn. Jedná se o model RPG hry, kde proti "
"sobě stojí 2 postavy. Růžový nepřítel v pravidelných časových intervalech "
"útočí na zelený čtverec a poškozuje ho, dokud ho nezničí. Neváhejte a "
"vyzkoušejte si hru: základní bojové mechaniky již fungují. Protože však "
"postava není spojena s ukazatelem života, ``GUI`` nic nedělá."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:68
msgid ""
"This is typical of how you'd code a game: you implement the core gameplay "
"first, handle the player's death, and only then you'll add the interface. "
"That's because the UI listens to what's happening in the game. So it can't "
"work if other systems aren't in place yet. If you design the UI before you "
"prototype and test the gameplay, chances are it won't work well and you'll "
"have to re-create it from scratch."
msgstr ""
"To je typický způsob jak by se měly vytvářet hry: nejprve implementujete "
"základní hratelnost, zpracujete smrt hráče a teprve poté přidáte rozhraní. "
"To proto, že uživatelské rozhraní naslouchá tomu, co se děje ve hře. Nemůže "
"tedy fungovat, pokud ještě nejsou zprovozněny ostatní systémy. Pokud "
"navrhnete uživatelské rozhraní dříve, než vytvoříte prototyp hry a "
"otestujete hratelnost, je pravděpodobné, že rozhraní nebude fungovat dobře a "
"budete ho muset vytvořit znovu od začátku."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:71
msgid "The scene contains a background sprite, a GUI, and two characters."
msgstr ""
"Scéna obsahuje sprite pro pozadí, grafické uživatelské rozhraní a dvě "
"postavy."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:75
msgid "The scene tree, with the GUI scene set to display its children"
msgstr ""
"Strom scén se scénou GUI nastavenou tak, aby zobrazovala své podřízené "
"položky"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:77
msgid ""
"The GUI scene encapsulates all of the game's Graphical User Interface. It "
"comes with a barebones script where we get the path to nodes that exist "
"inside the scene:"
msgstr ""
"Scéna GUI obsahuje celé grafické uživatelské rozhraní hry. Je dodávána se "
"základním skriptem, ve kterém získáme cestu k uzlům, které existují uvnitř "
"této scény:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:105
msgid ""
"``number_label`` displays a life count as a number. It's a ``Label`` node"
msgstr ""
"``number_label`` zobrazuje počet životů jako číslo. Je to uzel ``Label``"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:107
msgid "``bar`` is the life bar itself. It's a ``TextureProgress`` node"
msgstr "``bar`` je samotný ukazatel života. Je to uzel ``TextureProgress``"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:108
msgid ""
"``tween`` is a component-style node that can animate and control any value "
"or method from any other node"
msgstr ""
"``tween`` je uzel ve stylu komponenty, který může animovat a ovládat "
"jakoukoli hodnotu nebo metodu z jakéhokoli jiného uzlu"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:113
msgid ""
"The project uses a simple organization that works for game jams and tiny "
"games."
msgstr ""
"Projekt používá jednoduchou organizaci, která funguje pro herní soutěže a "
"drobné hry."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:115
msgid ""
"At the root of the project, in the `res://` folder, you will find the "
"`LevelMockup`. That's the main game scene and the one we will work with. All "
"the components that make up the game are in the `scenes/` folder. The "
"`assets/` folder contains the game sprites and the font for the HP counter. "
"In the `scripts/` folder you will find the enemy, the player, and the GUI "
"controller scripts."
msgstr ""
"V kořeni projektu, ve složce `res://`, najdete `LevelMockup`. To je hlavní "
"herní scéna, se kterou budeme pracovat. Všechny komponenty, ze kterých se "
"hra skládá, jsou ve složce `scenes/`. Složka `assets/` obsahuje herní sprity "
"a písmo pro počítadlo HP. Ve složce `scripts/` najdete skripty pro "
"nepřítele, hráče a kontrolu grafického rozhraní."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:117
msgid ""
"Click the edit scene icon to the right of the node in the scene tree to open "
"the scene in the editor. You'll see the LifeBar and EnergyBar are sub-scenes "
"themselves."
msgstr ""
"Kliknutím na ikonu upravit scénu napravo od uzlu ve stromu scén otevřete "
"scénu v editoru. Uvidíte, že LifeBar a EnergyBar jsou samy o sobě dílčími "
"scénami."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:121
msgid "The scene tree, with the Player scene set to display its children"
msgstr ""
"Strom scén se scénou Player nastavenou tak, aby se zobrazily její podřízené "
"scény"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:124
msgid "Set up the Lifebar with the Player's max\\_health"
msgstr "Nastavení ukazatele život na maximální hodnotu zdraví hráče"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:126
msgid ""
"We have to tell the GUI somehow what the player's current health is, to "
"update the lifebar's texture, and to display the remaining health in the HP "
"counter in the top left corner of the screen. To do this we send the "
"player's health to the GUI every time they take damage. The GUI will then "
"update the ``Lifebar`` and ``Number`` nodes with this value."
msgstr ""
"Musíme grafickému uživatelskému rozhraní (GUI) nějak sdělit, jaké je "
"aktuální zdraví hráče, aktualizovat texturu panelu života a zobrazit "
"zbývající zdraví v počítadle HP v levém horním rohu obrazovky. Za tímto "
"účelem odešleme grafickému uživatelskému rozhraní údaje o zdraví hráče "
"pokaždé, když utrpí poškození. Grafické uživatelské rozhraní pak o tuto "
"hodnotu aktualizuje uzly ``Lifebar`` a ``Number``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:132
msgid ""
"We could stop here to display the number, but we need to initialize the "
"bar's ``max_value`` for it to update in the right proportions. The first "
"step is thus to tell the ``GUI`` what the green character's ``max_health`` "
"is."
msgstr ""
"Mohli bychom se zde zastavit a zobrazit číslo, ale musíme inicializovat "
"hodnotu ``max_value`` sloupce, aby se aktualizoval ve správném poměru. "
"Prvním krokem je tedy sdělit uzlu ``GUI``, jaká je hodnota ``max_health`` "
"zelené postavy."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:139
msgid ""
"The bar, a `TextureProgress`, has a `max_value` of `100` by default. If you "
"don't need to display the character's health with a number, you don't need "
"to change its `max_value` property. You send a percentage from the `Player` "
"to the `GUI` instead:  `health / max_health * 100`."
msgstr ""
"Sloupec `TextureProgress` má ve výchozím nastavení hodnotu `max_value` "
"`100`. Pokud nepotřebujete zobrazovat zdraví postavy pomocí čísla, nemusíte "
"jeho vlastnost `max_value` měnit. Místo toho odešlete procenta z `Player` do "
"`GUI`:  `Zdraví / max_zdraví * 100`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:143
msgid ""
"Click the script icon to the right of the ``GUI`` in the Scene dock to open "
"its script. In the ``_ready`` function, we're going to store the "
"``Player``'s ``max_health`` in a new variable and use it to set the "
"``bar``'s ``max_value``:"
msgstr ""
"Kliknutím na ikonu skriptu vpravo od ``GUI`` v doku scény otevřete jeho "
"skript. Ve funkci ``_ready`` uložíme hodnotu ``max_health`` hráče ``Player`` "
"do nové proměnné a použijeme ji k nastavení hodnoty ``bar``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:164
msgid ""
"Let's break it down. ``$\"../Characters/Player\"`` is a shorthand that goes "
"one node up in the scene tree, and retrieves the ``Characters/Player`` node "
"from there. It gives us access to the node. The second part of the "
"statement, ``.max_health``, accesses the ``max_health`` on the Player node."
msgstr ""
"Rozebereme si to. ``$\"../Characters/Player\"`` je zkratka, která přejde o "
"jeden uzel výše ve stromu scény a získá odtud uzel ``Characters/Player``. "
"Tím získáme přístup k uzlu. Druhá část příkazu, ``.max_health``, zpřístupní "
"hodnotu ``max_health`` v uzlu Player."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:170
msgid ""
"The second line assigns this value to ``bar.max_value``. You could combine "
"the two lines into one, but we'll need to use ``player_max_health`` again "
"later in the tutorial."
msgstr ""
"Druhý řádek přiřadí tuto hodnotu souboru ``bar.max_value``. Tyto dva řádky "
"můžete spojit do jednoho, ale později v návodu budeme muset znovu použít "
"``hráč_max_health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:174
msgid ""
"``Player.gd`` sets the ``health`` to ``max_health`` at the start of the "
"game, so we could work with this. Why do we still use ``max_health``? There "
"are two reasons:"
msgstr ""
"``Player.gd`` nastaví ``health`` na ``max_health`` na začátku hry, takže "
"bychom s tím mohli pracovat. Proč stále používáme ``max_health``? Důvody "
"jsou dva:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:178
msgid ""
"We don't have the guarantee that ``health`` will always equal "
"``max_health``: a future version of the game may load a level where the "
"player already lost some health."
msgstr ""
"Nemáme záruku, že ``helath`` se bude vždy rovnat ``max_health``: v budoucí "
"verzi hry se může načíst úroveň, kde hráč již ztratil nějaké zdraví."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:184
msgid ""
"When you open a scene in the game, Godot creates nodes one by one, following "
"the order in your Scene dock, from top to bottom. `GUI` and `Player` are not "
"part of the same node branch. To make sure they both exist when we access "
"each other, we have to use the `_ready` function. Godot calls `_ready` right "
"after it loaded all nodes, before the game starts. It's the perfect function "
"to set everything up and prepare the game session. Learn more about _ready: :"
"doc:`scripting_continued`"
msgstr ""
"Když ve hře otevřete scénu, Godot vytvoří uzly jeden po druhém podle pořadí "
"v doku scény shora dolů. `GUI` a `Hráč` nejsou součástí stejné větve uzlů. "
"Abychom se ujistili, že oba existují, když k nim přistupujeme, musíme použít "
"funkci `_ready`. Godot zavolá `_ready` hned po načtení všech uzlů, ještě "
"před spuštěním hry. Je to ideální funkce pro nastavení všeho a přípravu "
"herní relace. Další informace o funkci _ready: :doc:`scripting_continued`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:188
msgid "Update health with a signal when the player takes a hit"
msgstr "Aktualizace stavu zdraví pomocí signálu, když hráč dostane zásah"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:190
msgid ""
"Our GUI is ready to receive the ``health`` value updates from the "
"``Player``. To achieve this we're going to use **signals**."
msgstr ""
"Naše grafické uživatelské rozhraní je připraveno přijímat aktualizace hodnot "
"``health`` od ``Player``. K tomu použijeme **signály**."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:195
msgid ""
"There are many useful built-in signals like `enter_tree` and `exit_tree`, "
"that all nodes emit when they are respectively created and destroyed. You "
"can also create your own using the `signal` keyword. On the `Player` node, "
"you'll find two signals we created for you: `died` and `health_changed`."
msgstr ""
"Existuje mnoho užitečných vestavěných signálů, například `enter_tree` a "
"`exit_tree`, které všechny uzly vysílají při svém vytvoření a ukončení. "
"Můžete si také vytvořit vlastní pomocí klíčového slova `signal`. V uzlu "
"`Player` najdete dva signály, které jsme pro vás vytvořili: `died` a "
"`health_changed`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:197
msgid ""
"Why don't we directly get the ``Player`` node in the ``_process`` function "
"and look at the health value? Accessing nodes this way creates tight "
"coupling between them. If you did it sparingly it may work. As your game "
"grows bigger, you may have many more connections. If you get nodes this way "
"it gets complex quickly. Not only that: you need to listen to the state "
"change constantly in the ``_process`` function. This check happens 60 times "
"a second and you'll likely break the game because of the order in which the "
"code runs."
msgstr ""
"Proč nezískáme přímo uzel ``Player`` ve funkci ``_process`` a nepodíváme se "
"na hodnotu zdraví? Přístup k uzlům tímto způsobem mezi nimi vytváří těsnou "
"vazbu. Pokud byste to udělali střídmě, mohlo by to fungovat. Jak se vaše hra "
"rozrůstá, můžete mít mnohem více spojení. Pokud budete uzly spojovat tímto "
"způsobem, rychle se vše zkomplikuje. A nejen to: ve funkci ``_process`` "
"musíte neustále naslouchat změně stavu. Tato kontrola probíhá 60krát za "
"sekundu a pravděpodobně rozbijete hru kvůli pořadí, v jakém kód běží."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:206
msgid ""
"On a given frame you may look at another node's property *before* it was "
"updated: you get a value from the last frame. This leads to obscure bugs "
"that are hard to fix. On the other hand, a signal is emitted right after a "
"change happened. It **guarantees** you're getting a fresh piece of "
"information. And you will update the state of your connected node *right "
"after* the change happened."
msgstr ""
"V daném snímku se můžete podívat na vlastnost jiného uzlu *před* jeho "
"aktualizací: získáte hodnotu z posledního snímku. To vede k nepřehledným "
"chybám, které se těžko opravují. Na druhou stranu signál je vysílán ihned "
"poté, co ke změně došlo. To **zaručuje**, že získáváte čerstvou informaci. A "
"vy budete aktualizovat stav připojeného uzlu *pravě* poté, co ke změně došlo."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:215
msgid ""
"The Observer pattern, that signals derive from, still adds a bit of coupling "
"between node branches. But it's generally lighter and more secure than "
"accessing nodes directly to communicate between two separate classes. It can "
"be okay for a parent node to get values from its children. But you'll want "
"to favor signals if you're working with two separate branches. Read Game "
"Programming Patterns for more information on the `Observer pattern <https://"
"gameprogrammingpatterns.com/observer.html>`_. The `full book <https://"
"gameprogrammingpatterns.com/contents.html>`_ is available online for free."
msgstr ""
"Vzor Observer, z něhož signály vycházejí, ještě přidává trochu vazby mezi "
"větvemi uzlů. Je však obecně jednodužší a bezpečnější než přímý přístup k "
"uzlům pro komunikaci mezi dvěma samostatnými třídami. Může být v pořádku, že "
"rodičovský uzel získává hodnoty od svých dětí. Pokud však pracujete se dvěma "
"oddělenými větvemi, budete chtít upřednostnit signály. Další informace o "
"vzoru `Observer <https://gameprogrammingpatterns.com/observer.html>`_ "
"najdete v článku Vzory programování her. Celá `kniha <https://"
"gameprogrammingpatterns.com/contents.html>`_ je k dispozici zdarma online."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:219
msgid ""
"With this in mind, let's connect the ``GUI`` to the ``Player``. Click on the "
"``Player`` node in the scene dock to select it. Head down to the Inspector "
"and click on the Node tab. This is the place to connect nodes to listen to "
"the one you selected."
msgstr ""
"S tímto vědomím připojíme ``GUI`` k ``Player``. Klikněte na uzel ``Player`` "
"v doku scény a vyberte jej. Přejděte do Inspectoru a klikněte na kartu Uzel. "
"Zde se nachází místo pro připojení uzlů naslouchajících tomu, který jste "
"vybrali."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:224
msgid "The first section lists custom signals defined in ``Player.gd``:"
msgstr ""
"První část obsahuje seznam vlastních signálů definovaných v souboru ``Player."
"gd``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:226
msgid ""
"``died`` is emitted when the character died. We will use it in a moment to "
"hide the UI."
msgstr ""
"``died`` je emitován, když postava zemřela. Za chvíli ji použijeme ke skrytí "
"uživatelského rozhraní."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:228
msgid "``health_changed`` is emitted when the character got hit."
msgstr "``health_changed`` je emitován, když postava dostane zásah."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:232
msgid "We're connecting to the health\\_changed signal"
msgstr "Připojujeme se k signálu health\\_changed"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:234
msgid ""
"Select ``health_changed`` and click on the Connect button in the bottom "
"right corner to open the Connect Signal window. On the left side you can "
"pick the node that will listen to this signal. Select the ``GUI`` node. The "
"right side of the screen lets you pack optional values with the signal. We "
"already took care of it in ``Player.gd``. In general I recommend not to add "
"too many arguments using this window as they're less convenient than doing "
"it from the code."
msgstr ""
"Vyberte položku ``health_changed`` a kliknutím na tlačítko Connect v pravém "
"dolním rohu otevřete okno Connect Signal. Na levé straně můžete vybrat uzel, "
"který bude tento signál poslouchat. Vyberte uzel ``GUI``. V pravé části "
"obrazovky můžete k signálu přibalit volitelné hodnoty. O to jsme se již "
"postarali v souboru ``Player.gd``. Obecně doporučuji nepřidávat příliš mnoho "
"argumentů pomocí tohoto okna, protože to je méně pohodlné než přidávání v "
"kódu."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:244
msgid "The Connect Signal window with the GUI node selected"
msgstr "Okno Připojit signál s vybraným uzlem GUI"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:248
msgid ""
"You can optionally connect nodes from the code. However doing it from the "
"editor has two advantages:"
msgstr ""
"Uzly můžete volitelně připojit i z kódu. Provádění z editoru má však dvě "
"výhody:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:250
msgid "Godot can write new callback functions for you in the connected script"
msgstr ""
"Godot za vás může v připojeném skriptu napsat nové funkce pro obsloužení "
"signálu"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:251
msgid ""
"An emitter icon appears next to the node that emits the signal in the Scene "
"dock"
msgstr "Vedle uzlu, který vysílá signál, se v doku scény zobrazí ikona emitoru"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:253
msgid ""
"At the bottom of the window you will find the path to the node you selected. "
"We're interested in the second row called \"Method in Node\". This is the "
"method on the ``GUI`` node that gets called when the signal is emitted. This "
"method receives the values sent with the signal and lets you process them. "
"If you look to the right, there is a \"Make Function\" radio button that is "
"on by default. Click the connect button at the bottom of the window. Godot "
"creates the method inside the ``GUI`` node. The script editor opens with the "
"cursor inside a new ``_on_Player_health_changed`` function."
msgstr ""
"Ve spodní části okna najdete cestu k vybranému uzlu. Nás zajímá druhý řádek "
"s názvem \"Metoda v uzlu\". Jedná se o metodu v uzlu ``GUI``, která se "
"zavolá při vyslání signálu. Tato metoda přijímá hodnoty zaslané se signálem "
"a umožňuje je zpracovat. Pokud se podíváte vpravo, je zde přepínač \"Make "
"Function\", který je ve výchozím nastavení zapnutý. Klepněte na tlačítko "
"připojit v dolní části okna. Godot vytvoří metodu uvnitř uzlu ``GUI``. "
"Otevře se editor skriptů s kurzorem uvnitř nové funkce "
"``_on_Player_health_changed``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:265
msgid ""
"When you connect nodes from the editor, Godot generates a method name with "
"the following pattern: ``_on_EmitterName_signal_name``. If you wrote the "
"method already, the \"Make Function\" option will keep it. You may replace "
"the name with anything you'd like."
msgstr ""
"Při připojování uzlů z editoru generuje Godot název metody s následujícím "
"vzorem: ``_on_EmitterName_signal_name``. Pokud jste metodu již napsali, "
"volba \"Make Function\" ji zachová. Název můžete nahradit čímkoli, co si "
"přejete."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:272
msgid "Godot writes the callback method for you and takes you to it"
msgstr ""
"Godot pro vás napíše metodu obsluhy signálu(callback) a přenese vás k ní"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:274
msgid ""
"Inside the parentheses after the function name, add a ``player_health`` "
"argument. When the player emits the ``health_changed`` signal, it will send "
"its current ``health`` alongside it. Your code should look like:"
msgstr ""
"Do závorek za název funkce přidejte argument ``player_health``. Když hráč "
"vyšle signál ``health_changed``, pošle spolu s ním i své aktuální "
"``health``. Váš kód by měl vypadat takto:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:292
msgid ""
"The engine does not convert PascalCase to snake_case, for C# examples we'll "
"be using PascalCase for method names & camelCase for method parameters, "
"which follows the official `C# naming conventions. <https://docs.microsoft."
"com/en-us/dotnet/standard/design-guidelines/capitalization-conventions>`_"
msgstr ""
"Engine nepřevádí PascalCase na snake_case, v příkladech v jazyce C# budeme "
"používat PascalCase pro názvy metod a camelCase pro parametry metod, což "
"odpovídá oficiální konvenci `C# pro pojmenování. <https://docs.microsoft.com/"
"en-us/dotnet/standard/design-guidelines/capitalization-conventions>`_"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:299
msgid ""
"In Player.gd, when the Player emits the health\\_changed signal, it also "
"sends its health value"
msgstr ""
"Když Player v souboru Player.gd vyšle signál health\\_changed, odešle také "
"hodnotu svého zdraví"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:302
msgid ""
"Inside ``_on_Player_health_changed``, let's call a second function called "
"``update_health`` and pass it the ``player_health`` variable."
msgstr ""
"Uvnitř funkce ``_on_Player_health_changed`` zavoláme druhou funkci s názvem "
"``update_health`` a předáme jí proměnnou ``player_health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:307
msgid ""
"We could directly update the health value on `LifeBar` and `Number`. There "
"are two reasons to use this method instead:"
msgstr ""
"Mohli bychom přímo aktualizovat hodnotu zdraví na `LifeBar` a `Number`. "
"Existují dva důvody, proč místo toho použít tuto metodu:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:309
msgid ""
"The name makes it clear for our future selves and teammates that when the "
"player took damage, we update the health count on the GUI"
msgstr ""
"Tento název dává našim budoucím kolegům a spolupracovníkům jasně najevo, že "
"když hráč utrpí poškození, aktualizujeme počet zdraví v grafickém "
"uživatelském rozhraní"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:310
msgid "We will reuse this method a bit later"
msgstr "Tuto metodu použijeme o něco později"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:312
msgid ""
"Create a new ``update_health`` method below ``_on_Player_health_changed``. "
"It takes a new\\_value as its only argument:"
msgstr ""
"Vytvořte novou metodu ``update_health`` pod ``_on_Player_health_changed``. "
"Jako jediný argument přijímá hodnotu new\\_value:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:327
msgid "This method needs to:"
msgstr "Tato metoda musí:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:329
msgid ""
"set the ``Number`` node's ``text`` to ``new_value`` converted to a string"
msgstr ""
"nastavit ``text`` uzlu ``Number`` na ``new_value`` převedený na řetězec"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:331
msgid "set the ``TextureProgress``'s ``value`` to ``new_value``"
msgstr "nastavit ``hodnotu`` ``TextureProgress`` na ``new_value``"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:350
msgid ""
"``str`` is a built-in function that converts about any value to text. "
"``Number``'s ``text`` property requires a string, so we can't assign it to "
"``new_value`` directly"
msgstr ""
"``str`` je vestavěná funkce, která převede libovolnou hodnotu na text. "
"Vlastnost ``text`` u ``Number`` vyžaduje řetězec, takže ji nemůžeme přiřadit "
"přímo ``new_value``"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:354
msgid ""
"Also call ``update_health`` at the end of the ``_ready`` function to "
"initialize the ``Number`` node's ``text`` with the right value at the start "
"of the game. Press :kbd:`F5` to test the game: the life bar updates with "
"every attack!"
msgstr ""
"Na konci funkce ``_ready`` zavolejte také funkci ``update_health``, abyste "
"inicializovali ``text`` uzlu ``Number`` správnou hodnotou na začátku hry. "
"Stiskněte :kbd:`F5` a otestujte hru: ukazatel života se aktualizuje při "
"každém útoku!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:361
msgid ""
"Both the Number node and the TextureProgress update when the Player takes a "
"hit"
msgstr "Uzel Number i TextureProgress se aktualizují, když hráč dostane zásah"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:365
msgid "Animate the loss of life with the Tween node"
msgstr "Animujte ztrátu života pomocí uzlu Tween"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:367
msgid ""
"Our interface is functional, but it could use some animation. That's a good "
"opportunity to introduce the ``Tween`` node, an essential tool to animate "
"properties. ``Tween`` animates anything you'd like from a start to an end "
"state over a certain duration. For example, it can animate the health on the "
"``TextureProgress`` from its current level to the ``Player``'s new "
"``health`` when the character takes damage."
msgstr ""
"Naše rozhraní je funkční, ale potřebovalo by trochu animace. To je dobrá "
"příležitost představit uzel ``Tween``, základní nástroj pro animaci "
"vlastností. Uzel ``Tween`` animuje cokoli, co chcete, od počátečního do "
"konečného stavu po určitou dobu. Může například animovat zdraví na "
"``TextureProgress`` z jeho aktuální úrovně na nové ``health`` hráče, když "
"postava dostane poškození."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:374
msgid ""
"The ``GUI`` scene already contains a ``Tween`` child node stored in the "
"``tween`` variable. Let's now use it. We have to make some changes to "
"``update_health``."
msgstr ""
"Scéna ``GUI`` již obsahuje podřízený uzel ``Tween`` uložený v proměnné "
"``tween``. Nyní jej použijeme. Musíme provést několik změn v "
"``update_health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:378
msgid ""
"We will use the ``Tween`` node's ``interpolate_property`` method. It takes "
"seven arguments:"
msgstr ""
"Použijeme metodu ``interpolate_property`` uzlu ``Tween``. Ta požaduje sedm "
"argumentů:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:381
msgid "A reference to the node who owns the property to animate"
msgstr "Odkaz na uzel, který obsahuje vlastnost, kterou chcete animovat"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:382
msgid "The property's identifier as a string"
msgstr "Identifikátor vlastnosti jako řetězec"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:383
msgid "The starting value"
msgstr "Počáteční hodnotu"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:384
msgid "The end value"
msgstr "Konečnou hodnotu"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:385
msgid "The animation's duration in seconds"
msgstr "Dobu trvání animace v sekundách"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:386
msgid "The type of the transition"
msgstr "Typ přechodu"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:387
msgid "The easing to use in combination with the equation."
msgstr "Uvolnění, které se použije v kombinaci s rovnicí."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:389
msgid ""
"The last two arguments combined correspond to an easing equation. This "
"controls how the value evolves from the start to the end point."
msgstr ""
"Poslední dva argumenty dohromady odpovídají uvolňovací rovnici. Ta řídí "
"vývoj hodnoty od počátečního do koncového bodu."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:393
msgid ""
"Click the script icon next to the ``GUI`` node to open it again. The "
"``Number`` node needs text to update itself, and the ``Bar`` needs a float "
"or an integer. We can use ``interpolate_property`` to animate a number, but "
"not to animate text directly. We're going to use it to animate a new ``GUI`` "
"variable named ``animated_health``."
msgstr ""
"Kliknutím na ikonu skriptu vedle uzlu ``GUI`` jej znovu otevřete. Uzel "
"``Number`` potřebuje text, aby se mohl aktualizovat, a uzel ``Bar`` pak "
"potřebuje float nebo celé číslo. Pomocí ``interpolate_property`` můžeme "
"animovat číslo, ale ne přímo text. Použijeme ji k animaci nové proměnné "
"``GUI`` s názvem ``animated_health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:399
msgid ""
"At the top of the script, define a new variable, name it "
"``animated_health``, and set its value to 0. Navigate back to the "
"``update_health`` method and clear its content. Let's animate the "
"``animated_health`` value. Call the ``Tween`` node's "
"``interpolate_property`` method:"
msgstr ""
"V horní části skriptu definujte novou proměnnou, pojmenujte ji "
"``animated_health`` a nastavte její hodnotu na 0. Přejděte zpět na metodu "
"``update_health`` a vymažte její obsah. Pro animaci hodnoty "
"``animated_health``, zavoláme metodu ``interpolate_property`` uzlu ``Tween``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:421
msgid "Let's break down the call:"
msgstr "Rozebereme si volání této funkce:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:427
msgid ""
"We target ``animated_health`` on ``self``, that is to say the ``GUI`` node. "
"``Tween``'s interpolate\\_property takes the property's name as a string. "
"That's why we write it as ``\"animated_health\"``."
msgstr ""
"Cílíme na ``animated_health`` na ``self``, tedy na uzel ``GUI``. Funkce "
"interpolate\\_property v ``Tween`` přebírá název vlastnosti jako řetězec. "
"Proto ji zapisujeme jako ``\"animated_health\"``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:435
msgid ""
"The starting point is the current value the bar's at. We still have to code "
"this part, but it's going to be ``animated_health``. The end point of the "
"animation is the ``Player``'s ``health`` after the ``health_changed``: "
"that's ``new_value``. And ``0.6`` is the animation's duration in seconds."
msgstr ""
"Výchozím bodem je aktuální hodnota sloupce. Tuto část musíme ještě "
"nakódovat, ale bude to ``animated_health``. Koncovým bodem animace je "
"``Player`` ``health`` po ``health_changed``: to je ``new_value``. A ``0,6`` "
"je doba trvání animace v sekundách."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:441
msgid ""
"The animation will not play until we activated the ``Tween`` node with "
"``tween.start()``. We only have to do this once if the node is not active. "
"Add this code after the last line:"
msgstr ""
"Animace se přehraje až po aktivaci uzlu ``Tween`` pomocí ``tween.start()``. "
"To musíme provést pouze jednou, pokud uzel není aktivní. Za poslední řádek "
"přidejte tento kód:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:460
msgid ""
"Although we could animate the `health` property on the `Player`, we "
"shouldn't. Characters should lose life instantly when they get hit. It makes "
"it a lot easier to manage their state, like to know when one died. You "
"always want to store animations in a separate data container or node. The "
"`tween` node is perfect for code-controlled animations. For hand-made "
"animations, check out `AnimationPlayer`."
msgstr ""
"Ačkoli bychom mohli animovat vlastnost `health` na `Player`, neměli bychom "
"to dělat. Postavy by měly ztrácet život okamžitě, když dostanou zásah. "
"Usnadní to správu jejich stavu, například poznáme, kdy některá z nich "
"zemřela. Animace je vždy vhodné ukládat do samostatného datového kontejneru "
"nebo uzlu. Uzel `tween` je ideální pro animace řízené kódem. Pro ručně "
"vytvářené animace se podívejte na `AnimationPlayer`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:463
msgid "Assign the animated\\_health to the LifeBar"
msgstr "Přiřazení animated\\_health k panelu života"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:465
msgid ""
"Now the ``animated_health`` variable animates but we don't update the actual "
"``Bar`` and ``Number`` nodes anymore. Let's fix this."
msgstr ""
"Nyní se proměnná ``animated_health`` animuje, ale skutečné uzly ``Bar`` a "
"``Number`` jsme přestali aktualizovat. Napravíme to."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:468
msgid "So far, the update\\_health method looks like this:"
msgstr "Metoda update\\_health zatím vypadá takto:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:492
msgid ""
"In this specific case, because ``number_label`` takes text, we need to use "
"the ``_process`` method to animate it. Let's now update the ``Number`` and "
"``TextureProgress`` nodes like before, inside of ``_process``:"
msgstr ""
"V tomto konkrétním případě, protože ``number_label`` přebírá text, musíme k "
"jeho animaci použít metodu ``_process``. Nyní aktualizujme uzly ``Number`` a "
"``TextureProgress`` jako předtím, uvnitř metody ``_process``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:514
msgid ""
"`number_label` and `bar` are variables that store references to the `Number` "
"and `TextureProgress` nodes."
msgstr ""
"`number_label` a `bar` jsou proměnné, které uchovávají odkazy na uzly "
"`Number` a `TextureProgress`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:516
msgid ""
"Play the game to see the bar animate smoothly. But the text displays decimal "
"number and looks like a mess. And considering the style of the game, it'd be "
"nice for the life bar to animate in a choppier fashion."
msgstr ""
"Zahrajte si hru a uvidíte, jak se ukazatel plynule animuje. Text však "
"zobrazuje desetinné číslo a vypadá chaoticky. Vzhledem ke stylu hry by bylo "
"vhodnější, aby se lišta života animovala plynuleji."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:522
msgid "The animation is smooth, but the number is broken"
msgstr "Animace je plynulá, ale číslo nevypadá dobře"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:524
msgid ""
"We can fix both problems by rounding out ``animated_health``. Use a local "
"variable named ``round_value`` to store the rounded ``animated_health``. "
"Then assign it to ``number_label.text`` and ``bar.value``:"
msgstr ""
"Oba problémy můžeme vyřešit zaokrouhlením ``animated_health``. Pro uložení "
"zaokrouhlené hodnoty ``animated_health`` použijte lokální proměnnou s názvem "
"``round_value``. Poté ji přiřadíme do ``number_label.text`` a ``bar.value``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:546
msgid "Try the game again to see a nice blocky animation."
msgstr "Zkuste hru spustit znovu a uvidíte pěknou blokovou animaci."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:550
msgid "By rounding out animated\\_health, we kill two birds with one stone"
msgstr "Zaokrouhlením animated\\_health zabijeme dvě mouchy jednou ranou"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:554
msgid ""
"Every time the player takes a hit, the ``GUI`` calls "
"``_on_Player_health_changed``, which in turn calls ``update_health``. This "
"updates the animation and the ``number_label`` and ``bar`` follow in "
"``_process``. The animated life bar that shows the health going down "
"gradually is a trick. It makes the GUI feel alive. If the ``Player`` takes 3 "
"damage, it happens in an instant."
msgstr ""
"Pokaždé, když hráč dostane zásah, ``GUI`` zavolá "
"``_on_Player_health_changed``, který následně provede ``update_health``. Tím "
"se aktualizuje animace a v ``_process`` následují aktualizace "
"``number_label`` a ``bar``. Animovaný ukazatel života, který ukazuje "
"postupně klesající zdraví, je finesa, díky které grafické uživatelské "
"rozhraní působí jako živé. Pokud ``Player`` obdrží 3 poškození, stane se tak "
"v okamžiku."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:562
msgid "Fade the bar when the Player dies"
msgstr "Vyblednutí ukazatele v případě Hráčovi smrti"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:564
msgid ""
"When the green character dies, it plays a death animation and fades out. At "
"this point, we shouldn't show the interface anymore. Let's fade the bar as "
"well when the character died. We will reuse the same ``Tween`` node as it "
"manages multiple animations in parallel for us."
msgstr ""
"Když zelená postava zemře, přehraje animaci smrti a zmizí. V tomto okamžiku "
"bychom již neměli zobrazovat rozhraní. Když postava zemře, zmizí i lišta. "
"Znovu použijeme stejný uzel ``Tween``, protože ten pro nás umí spravovat "
"více animací najednou a to paralelně."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:569
msgid ""
"First, the ``GUI`` needs to connect to the ``Player``'s ``died`` signal to "
"know when it died. Press :kbd:`Ctrl + F1` to jump back to the 2D Workspace. "
"Select the ``Player`` node in the Scene dock and click on the Node tab next "
"to the Inspector."
msgstr ""
"Nejprve se musí ``GUI`` připojit k signálu ``Player`` ``died``, aby se "
"dozvěděl, až ``Player`` zemře. Stisknutím :kbd:`Ctrl + F1` přejdete zpět do "
"2D pracovního prostoru. Vyberte uzel ``Player`` v doku scény a klikněte na "
"kartu Uzel vedle Inspektora."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:574
msgid "Find the ``died`` signal, select it, and click the Connect button."
msgstr "Najděte signál ``died``, vyberte jej a klikněte na tlačítko Připojit."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:578
msgid "The signal should already have the Enemy connected to it"
msgstr "K signálu by již měl být připojen Enemy"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:580
msgid ""
"In the Connecting Signal window, connect to the ``GUI`` node again. The Path "
"to Node should be ``../../GUI`` and the Method in Node should show "
"``_on_Player_died``. Leave the Make Function option on and click Connect at "
"the bottom of the window. This will take you to the ``GUI.gd`` file in the "
"Script Workspace."
msgstr ""
"V okně Připojení signálu se znovu připojte k uzlu ``GUI``. Cesta k uzlu by "
"měla být ``../../GUI`` a metoda v uzlu by měla být ``_on_Player_died``. "
"Ponechte zapnutou volbu Make Function a klikněte na Connect v dolní části "
"okna. Tím se dostanete do souboru ``GUI.gd`` v pracovním prostoru skriptu."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:588
msgid "You should get these values in the Connecting Signal window"
msgstr "V okně Připojení signálu by se měly zobrazit tyto hodnoty"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:592
msgid ""
"You should see a pattern by now: every time the GUI needs a new piece of "
"information, we emit a new signal. Use them wisely: the more connections you "
"add, the harder they are to track."
msgstr ""
"Už byste měli vidět pravidlo: pokaždé, když grafické uživatelské rozhraní "
"potřebuje novou informaci, vyšleme nový signál. Používejte signály s "
"rozumem: čím více jich přidáte, tím hůře se budou spravovat."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:594
msgid ""
"To animate a fade on a UI element, we have to use its ``modulate`` property. "
"``modulate`` is a ``Color`` that multiplies the colors of our textures."
msgstr ""
"Chceme-li animovat stmívání prvku uživatelského rozhraní, musíme použít jeho "
"vlastnost ``modulate``. ``modulate`` je vlastnost ``Color``, která násobí "
"barvy našich textur."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:600
msgid ""
"`modulate` comes from the `CanvasItem` class, All 2D and UI nodes inherit "
"from it. It lets you toggle the visibility of the node, assign a shader to "
"it, and modify it using a color with `modulate`."
msgstr ""
"`modulate` pochází ze třídy `CanvasItem`, z níž dědí všechny 2D a UI uzly. "
"Umožňuje přepínat viditelnost uzlu, přiřadit mu shader a pomocí `modulate` "
"jej upravit pomocí barvy."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:602
msgid ""
"``modulate`` takes a ``Color`` value with 4 channels: red, green, blue and "
"alpha. If we darken any of the first three channels it darkens the "
"interface. If we lower the alpha channel, our interface fades out."
msgstr ""
"``modulate`` přijímá hodnotu ``Color`` se 4 kanály: červeným, zeleným, "
"modrým a alfa. Pokud ztmavíme některý z prvních tří kanálů, rozhraní "
"ztmavne. Pokud snížíme alfa kanál, naše rozhraní vybledne."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:606
msgid ""
"We're going to tween between two color values: from a white with an alpha of "
"``1``, that is to say at full opacity, to a pure white with an alpha value "
"of ``0``, completely transparent. Let's add two variables at the top of the "
"``_on_Player_died`` method and name them ``start_color`` and ``end_color``. "
"Use the ``Color()`` constructor to build two ``Color`` values."
msgstr ""
"Budeme přecházet mezi dvěma hodnotami barev: od bílé s hodnotou alfa ``1``, "
"tedy s plným krytím, po čistě bílou s hodnotou alfa ``0``, tedy zcela "
"průhlednou. Přidáme dvě proměnné na začátek metody ``_on_Player_died`` a "
"pojmenujeme je ``start_color`` a ``end_color``. Pomocí konstruktoru "
"``Color()`` vytvoříme dvě hodnoty ``Color``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:628
msgid ""
"``Color(1.0, 1.0, 1.0)`` corresponds to white. The fourth argument, "
"respectively ``1.0`` and ``0.0`` in ``start_color`` and ``end_color``, is "
"the alpha channel."
msgstr ""
"``Color(1.0, 1.0, 1.0)`` odpovídá bílé barvě. Čtvrtý argument, respektive "
"``1.0`` a ``0.0`` v ``start_color`` a ``end_color``, je alfa kanál."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:632
msgid ""
"We then have to call the ``interpolate_property`` method of the ``Tween`` "
"node again:"
msgstr ""
"Poté musíme znovu zavolat metodu ``interpolate_property`` uzlu ``Tween``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:645
msgid ""
"This time, we change the ``modulate`` property and have it animate from "
"``start_color`` to the ``end_color``. The duration is of one second, with a "
"linear transition. Here's the complete ``_on_Player_died`` method:"
msgstr ""
"Tentokrát změníme vlastnost ``modulate`` a necháme ji animovat od "
"``start_color`` do ``end_color``. Doba trvání je jedna sekunda s lineárním "
"přechodem. Zde je kompletní metoda ``_on_Player_died``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:669
msgid "And that is it. You may now play the game to see the final result!"
msgstr ""
"A to je vše. Nyní si můžete zahrát hru a podívat se na konečný výsledek!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:673
msgid "The final result. Congratulations for getting there!"
msgstr "Konečný výsledek. Gratulujeme, že jste to dokázali!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:677
msgid ""
"Using the exact same techniques, you can change the color of the bar when "
"the Player gets poisoned, turn the bar red when its health drops low, shake "
"the UI when they take a critical hit... the principle is the same: emit a "
"signal to forward the information from the `Player` to the `GUI` and let the "
"`GUI` process it."
msgstr ""
"Pomocí úplně stejné techniky můžete změnit barvu lišty, když je hráč "
"otráven, změnit ukazatel na červenou, když jeho zdraví klesne, zatřást "
"uživatelským rozhraním, když dostane kritický zásah... princip je stejný: "
"vyšlete signál, který předá informaci z `Hráče` do `GUI` a necháte `GUI`, "
"aby ji zpracovalo."
