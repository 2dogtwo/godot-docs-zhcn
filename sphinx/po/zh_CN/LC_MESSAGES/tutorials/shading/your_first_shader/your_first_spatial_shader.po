# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:4
#, fuzzy
msgid "Your first Spatial shader"
msgstr "空间节点"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:6
msgid ""
"You have decided to start writing your own custom Spatial shader. Maybe you "
"saw a cool trick online that was done with shaders, or you have found that "
"the :ref:`SpatialMaterial <class_SpatialMaterial>` isn't quite meeting your "
"needs. Either way, you have decided to write your own and now you need "
"figure out where to start."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:11
msgid ""
"This tutorial will explain how to write a Spatial shader and will cover more "
"topics than the :ref:`CanvasItem <doc_your_first_canvasitem_shader>` "
"tutorial."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:14
msgid ""
"Spatial shaders have more built-in functionality than CanvasItem shaders. "
"The expectation with spatial shaders is that Godot has already provided the "
"functionality for common use cases and all the user needs to do in the "
"shader is set the proper parameters. This is especially true for a PBR "
"(physically based rendering) workflow."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:19
msgid ""
"This is a two-part tutorial. In this first part we are going to go through "
"how to make a simple terrain using vertex displacement from a heightmap in "
"the vertex function. In the :ref:`second part "
"<doc_your_second_spatial_shader>` we are going to take the concepts from "
"this tutorial and walk through how to set up custom materials in a fragment "
"shader by writing an ocean water shader."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:24
msgid ""
"This tutorial assumes some basic shader knowledge such as types (``vec2``, "
"``float``, ``sampler2D``), and functions. If you are uncomfortable with "
"these concepts it is best to get a gentle introduction from `The Book of "
"Shaders <https://thebookofshaders.com>`_ before completing this tutorial."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:30
msgid "Where to assign my material"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:32
msgid ""
"In 3D, objects are drawn using :ref:`Meshes <class_Mesh>`. Meshes are a "
"resource type that store geometry (the shape of your object) and materials "
"(the color and how the object reacts to light) in units called \"surfaces\". "
"A Mesh can have multiple surfaces, or just one. Typically, you would import "
"a mesh from another program (e.g. Blender). But Godot also has a few :ref:"
"`PrimitiveMeshes <class_primitivemesh>` that allow you to add basic geometry "
"to a scene without importing Meshes."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:38
msgid ""
"There are multiple node types that you can use to draw a mesh. The main one "
"is :ref:`MeshInstance <class_meshinstance>`, but you can also use :ref:"
"`Particles <class_particles>`, :ref:`MultiMeshes <class_MultiMesh>` (with a :"
"ref:`MultiMeshInstance <class_multimeshinstance>`), or others."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:42
msgid ""
"Typically, a material is associated with a given surface in a mesh, but some "
"nodes, like MeshInstance, allow you to override the material for a specific "
"surface, or for all surfaces."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:45
msgid ""
"If you set a material on the surface or mesh itself, then all MeshInstances "
"that share that mesh will share that material. However, if you want to reuse "
"the same mesh across multiple mesh instances, but have different materials "
"for each instance then you should set the material on the Meshinstance."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:49
msgid ""
"For this tutorial we will set our material on the mesh itself rather than "
"taking advantage of the MeshInstance's ability to override materials."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:53
msgid "Setting up"
msgstr "设置"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:55
#, fuzzy
msgid "Add a new :ref:`MeshInstance <class_meshinstance>` node to your scene."
msgstr ""
"``grenade_mesh``:手榴弹的参考 :ref:`MeshInstance <class_MeshInstance>` 。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:57
msgid ""
"In the inspector tab beside \"Mesh\" click \"[empty]\" and select \"New "
"PlaneMesh\". Then click on the image of a plane that appears."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:60
#, fuzzy
msgid "This adds a :ref:`PlaneMesh <class_planemesh>` to our scene."
msgstr "首先，在场景中添加 :ref:`Viewport <class_Viewport>` 。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:62
#, fuzzy
msgid ""
"Then, in the viewport, click in the upper left corner on the button that "
"says \"Perspective\". A menu will appear. In the middle of the menu are "
"options for how to display the scene. Select 'Display Wireframe'."
msgstr ""
"然后，在视区中，单击左上角，显示[透视]。 将出现一个菜单。 菜单中间是如何显示"
"场景的选项。 选择“显示线框”。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:66
msgid "This will allow you to see the triangles making up the plane."
msgstr "这将允许您查看构成平面的三角形。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:70
#, fuzzy
msgid "Now set ``Subdivide Width`` and ``Subdivide Depth`` to ``32``."
msgstr "现在将``Subdivide Width``和``Subdivide Height``设置为``32``。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:74
#, fuzzy
msgid ""
"You can see that there are now many more triangles in the :ref:"
"`Mesh<class_MeshInstance>`. This will give us more vertices to work with and "
"thus allow us to add more detail."
msgstr ""
"您可以看到现在有更多三角形 :ref:`Mesh <class_MeshInstance>`。 这将为我们提供"
"更多顶点，从而允许我们添加更多细节。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:79
msgid ""
":ref:`PrimitiveMeshes <class_primitivemesh>`, like PlaneMesh, only have one "
"surface, so instead of an array of materials there is only one. Click beside "
"\"Material\" where it says \"[empty]\" and select \"New ShaderMaterial\". "
"Then click the sphere that appears."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:83
msgid ""
"Now click beside \"Shader\" where it says \"[empty]\" and select \"New Shader"
"\"."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:85
msgid ""
"The shader editor should now pop up and you are ready to begin writing your "
"first Spatial shader!"
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:88
msgid "Shader magic"
msgstr "着色器魔术"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:92
#, fuzzy
msgid ""
"Notice how there is already error? This is because the shader editor reloads "
"shaders on the fly. The first thing Godot shaders need is a declaration of "
"what type of shader they are. We set the variable ``shader_type`` to "
"``spatial`` because this is a spatial shader."
msgstr ""
"注意它是如何抛出错误的？ 这是因为着色器编辑器会自动重新加载着色器。 Godot着色"
"器需要的第一件事就是声明它们是什么类型的着色器。 因此，我们将变量 "
"``shader_type`` 设置为 ``spatial`` 。 我们要添加的另一件事是 "
"``render_mode`` ，我们将它设置为 ``unshaded`` 。 这意味着Godot不会在此对象上"
"运行灯光着色器。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:100
#, fuzzy
msgid ""
"Next we will define the ``vertex()`` function. The ``vertex()`` function "
"determines where the vertices of your :ref:`Mesh<class_MeshInstance>` appear "
"in the final scene. We will be using it to offset the height of each vertex "
"and make our flat plane appear like a little terrain."
msgstr ""
"接下来我们将定义一个顶点着色器。 顶点着色器确定最终场景中出现的地址 :ref:"
"`Mesh <class_MeshInstance>` 的顶点。 我们将使用它来偏移每个顶点的高度，并使我"
"们的平面看起来像一个小地形。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:104
msgid "We define the vertex shader like so:"
msgstr "我们像这样定义顶点着色器:"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:112
#, fuzzy
msgid ""
"With nothing in the ``vertex()`` function, Godot will use its default vertex "
"shader. We can easily start to make changes by adding a single line:"
msgstr ""
"在 ``vertex`` 函数中没有任何内容，Godot将使用其默认的顶点着色器。 我们可以通"
"过添加一行来轻松开始进行更改:"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:121
#, fuzzy
msgid "Adding this line, you should get an image like the one below."
msgstr "添加此行您应该得到如下图像。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:125
#, fuzzy
msgid ""
"Okay, let's unpack this. The ``y`` value of the ``VERTEX`` is being "
"increased. And we are passing the ``x`` and ``z`` components of the "
"``VERTEX`` as arguments to ``cos`` and ``sin``; that gives us a wave-like "
"appearance across the ``x`` and ``z`` axes."
msgstr ""
"好吧，让我们打开它。 ``VERTEX``的``y``值正在增加。 我们传递 ``VERTEX`` 的"
"``x``和``z``组件作为 ``cos`` 和``sin``的参数，这给了我们一个横跨``x的波浪外"
"观 ``和 ``z`` 轴。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:129
#, fuzzy
msgid ""
"What we want to achieve is the look of little hills; after all. ``cos`` and "
"``sin`` already look kind of like hills. We do so by scaling the inputs to "
"the ``cos`` and ``sin`` functions."
msgstr ""
"我们想要实现的是小山丘的外观，毕竟 ``cos`` 和``sin``看起来有点像山丘。 我们通"
"过缩放“cos``和``sin``函数的输入来实现。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:140
msgid ""
"This looks better, but it is still too spiky and repetitive, let's make it a "
"little more interesting."
msgstr "看起来效果好了一些，但它仍然过于尖锐和重复，我们把它变得更有趣一点。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:143
#, fuzzy
msgid "Noise heightmap"
msgstr "烘焙光照贴图"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:145
#, fuzzy
msgid ""
"Noise is a very popular tool for faking the look of terrain. Think of it as "
"similar to the cosine function where you have repeating hills except, with "
"noise, each hill has a different height."
msgstr ""
"噪声是一种非常流行的程序生成工具。 可以认为它类似于余弦函数，除了噪音外，每个"
"山都有不同的高度。 本教程不需要了解噪声。 简单地复制和粘贴下面的代码没有任何"
"问题。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:148
msgid ""
"Godot provides the :ref:`NoiseTexture <class_noisetexture>` resource for "
"generating a noise texture that can be accessed from a shader."
msgstr ""
"Godot提供了:ref:`噪声纹理<class_noisetexture>` 资源，可以生成从着色器访问的噪"
"声纹理。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:151
msgid ""
"To access a texture in a shader add the following code near the top of your "
"shader, outside the ``vertex()`` function."
msgstr ""
"要在着色器中访问纹理，请在着色器顶部附近，“vertex()”函数外部添加以下代码。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:158
msgid ""
"This will allow you to send a noise texture to the shader. Now look in the "
"inspecter under your material. You should see a section called \"Shader "
"Params\". If you open it up you will see a section called \"noise\"."
msgstr ""
"这将允许您发送噪声纹理到着色器。现在看看材质下方的属性面板。您会看到名为“着色"
"器参数”的区域。如果展开该区域，就会看到叫做“噪音”的部分。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:161
msgid ""
"Click beside it where it says \"[empty]\" and select \"New NoiseTexture\". "
"Then in your NoiseTexture click beside where it says \"Noise\" and select "
"\"New OpenSimplexNoise\"."
msgstr ""
"点击旁边写着“[空]”的地方，选择“新建噪声纹理”。在你的噪声纹理中，点击旁边的“噪"
"声”，然后选择“新建开放式简单噪声”。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:164
msgid ""
":ref:`OpenSimplexNoise <class_opensimplexnoise>` is used by the NoiseTexture "
"to generate a heightmap."
msgstr ":ref:`开放式简单噪声<class_opensimplexnoise>` 可从噪声纹理生成高度图。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:166
#, fuzzy
msgid "Once you set it up and should look like this."
msgstr "您创建的床看起来应该是这个样子:"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:170
msgid ""
"Now, access the noise texture using the ``texture()`` function. "
"``texture()`` takes a texture as the first argument and a ``vec2`` for the "
"position on the texture as the second argument. We use the ``x`` and ``z`` "
"channels of ``VERTEX`` to determine where on the texture to look up. "
"``texture()`` returns a ``vec4`` of the ``r, g, b, a`` channels at the "
"position. Since the noise texture is grayscale, all of the values are the "
"same, so we can use any one of the channels as the height. In this case "
"we'll use the ``r``, or ``x`` channel."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:181
msgid ""
"Note: ``xyzw`` is the same as ``rgba`` in GLSL, so instead of ``texture()."
"x`` above, we could use ``texture().r``. See the `OpenGL documentation "
"<https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Vectors>`_ for more "
"details."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:184
msgid "Using this code you can see the texture creates random looking hills."
msgstr "使用此代码，您可以看到纹理创建了随机外观的山峰。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:188
msgid ""
"Right now it is too spiky, we want to soften the hills a bit. To do that we "
"will use a uniform. You already used a uniform above to pass in the noise "
"texture, now let's learn how they work."
msgstr ""
"现在它太尖锐了，我们想让山峰变得柔和一点。为此，我们将使用制服值。你已经使用"
"了上面的制服值来传入噪点纹理，现在让我们来学习它们是如何工作的。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:192
msgid "Uniforms"
msgstr "制服"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:194
#, fuzzy
msgid ""
"Uniform variables allow you to pass data from the game into the shader. They "
"are very useful for controlling shader effects. Uniforms can be almost any "
"datatype that can be used in the shader. To use a uniform, you declare it in "
"your :ref:`Shader<class_Shader>` using the keyword ``uniform``."
msgstr ""
"统一变量允许您将数据从游戏传递到着色器。 它们对于控制着色器效果非常有用。 制"
"服几乎可以是着色器中可以使用的任何数据类型。 要使用制服，请使用关键字 "
"``uniform`` 在 :ref:`Shader <class_Shader>` 中声明它。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:199
#, fuzzy
msgid "Let's make a uniform that changes the height of the terrain."
msgstr "让我们制作一个改变地形高度的制服。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:206
#, fuzzy
msgid ""
"Godot lets you initialize a uniform with a value; here, ``height_scale`` is "
"set to ``0.5``. You can set uniforms from GDScript by calling the function "
"``set_shader_param()`` on the material corresponding to the shader. The "
"value passed from GDScript takes precedence over the value used to "
"initialize it in the shader."
msgstr ""
"Godot允许您用值初始化一个制服，这里 ``height_scale`` 设置为 ``0.5`` 。 您可以"
"通过在与着色器对应的材质上调用函数 ``set_shader_param`` 来设置gdscript中的制"
"服。 从gdscript传递的值优先于用于在着色器中初始化它的值。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:216
msgid ""
"Changing uniforms from Spatial nodes is different than in CanvasItem nodes. "
"Here, we set the material inside the PlaneMesh resource. In other mesh "
"resources you may need to first access the material by calling "
"``surface_get_material()``. While in the MeshInstance you would access the "
"material using ``get_surface_material()`` or ``material_override``."
msgstr ""
"从空间节点更换制服值，与从画布组件节点更换制服值是不同的。在这里，我们将材质"
"设置在平面网格资源中。在其他网格资源中，您可能需要首先通过调"
"用“surface_get_material()”来访问材质。而在网格实例中，您将使"
"用“get_surface_material()”或“material_override”访问材料。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:222
#, fuzzy
msgid ""
"Remember that the string passed into ``set_shader_param()`` must match the "
"name of the uniform variable in the :ref:`Shader<class_Shader>`. You can use "
"the uniform variable anywhere inside your :ref:`Shader<class_Shader>`. Here, "
"we will use it to set the height value instead of arbitrarily multiplying by "
"``0.5``."
msgstr ""
"请记住，传递给 ``set_shader_param`` 的字符串必须与 :ref:`Shader "
"<class_Shader>` 中的统一变量的名称匹配。 您可以在 :ref:`Shader "
"<class_Shader>` 中的任何位置使用统一变量。 在这里，我们将使用它来设置高度值，"
"而不是任意乘以“0.5”。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:231
msgid "Now it looks  much better."
msgstr "现在看起来好多了。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:235
#, fuzzy
msgid ""
"Using uniforms, we can even change the value every frame to animate the "
"height of the terrain. Combined with :ref:`Tweens <class_Tween>`, this can "
"be especially useful for simple animations."
msgstr ""
"使用制服我们甚至可以改变每帧的值来设置地形的高度。 结合 :ref:`Tweens "
"<class_Tween>` 这对简单的动画特别有用。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:239
msgid "Interacting with light"
msgstr "与光交互"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:241
msgid ""
"First, turn wireframe off. To do so, click in the upper-left of the Viewport "
"again, where it says \"Perspective\", and select \"Display Normal\"."
msgstr ""
"首先，关闭线框显示。若恢复显示，再次点击视窗左上方的“透视”按钮，选择“正常显"
"示”。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:246
msgid ""
"Note how the mesh color goes flat. This is because the lighting on it is "
"flat. Let's add a light!"
msgstr ""
"注意网格颜色是如何变得平滑的。这是因为它的光线是平滑的。让我们加一盏灯吧!"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:248
#, fuzzy
msgid "First, we will add an :ref:`OmniLight<class_OmniLight>` to the scene."
msgstr "首先，在场景中添加 :ref:`Viewport <class_Viewport>` 。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:252
msgid ""
"You can see the light affecting the terrain, but it looks odd. The problem "
"is the light is affecting the terrain as if it were a flat plane. This is "
"because the light shader uses the normals from the :ref:`Mesh <class_mesh>` "
"to calculate light."
msgstr ""
"你会看到光线影响了地形，但这看起来很奇怪。问题是光线对地形的影响就像在平面上"
"一样。这是因为光着色器使用:ref:`网格 <class_mesh>`中的法线来计算光。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:256
msgid ""
"The normals are stored in the Mesh, but we are changing the shape of the "
"Mesh in the shader, so the normals are no longer correct. To fix this, we "
"can recalculate the normals in the shader or use a normal texture that "
"corresponds to our noise. Godot makes both easy for us."
msgstr ""
"法线存储在网格中，但是我们在着色器中改变网格的形状，所以法线不再正确。为了解"
"决这个问题，我们可以在着色器中重新计算法线，或者使用与我们的噪声相对应的法线"
"纹理。Godot让这一切变得很简单。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:260
msgid ""
"You can calculate the new normal manually in the vertex function and then "
"just set ``NORMAL``. With ``NORMAL`` set, Godot will do all the difficult "
"lighting calculations for us. We will cover this method in the next part of "
"this tutorial, for now we will read normals from a texture."
msgstr ""
"您可以在顶点函数中手动计算新的法线，然后只需设置“法线”。设置“法线”后，Godot将"
"为我们完成所有困难的光照计算。我们将在本教程的下一部分介绍这种方法，现在我们"
"将从纹理中读取法线。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:264
msgid ""
"Instead we will rely on the NoiseTexture again to calculate normals for us. "
"We do that by passing in a second noise texture."
msgstr ""
"相反，我们将再次依靠噪声来计算法线。我们通过传入第二个噪声纹理来做到这一点。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:271
msgid ""
"Set this second uniform texture to another NoiseTexture with another "
"OpenSimplexNoise. But this time, check off \"As Normalmap\"."
msgstr ""
"使用另一个开放式简单噪声将第二个均匀纹理设置为另一个噪声纹理。但这一次，勾"
"选“作为法线贴图”。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:276
#, fuzzy
msgid ""
"Now, because this is a normalmap and not a per-vertex normal, we are going "
"to assign it in the ``fragment()`` function. The ``fragment()`` function "
"will be explained in more detail in the next part of this tutorial."
msgstr ""
"因为这是一个法线映射而不是每个顶点的法线。我们将在“fragment()”函数中分配"
"它。“fragment()”函数将在本教程的下一部分详细解释。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:284
msgid ""
"When we have normals that correspond to a specific vertex we set ``NORMAL``, "
"but if you have a normalmap that comes from a texture, set the normal using "
"``NORMALMAP``. This way Godot will handle the wrapping the texture around "
"the mesh automatically."
msgstr ""
"当我们有法线对应于一个特定顶点时，我们设置“法线”，但如果你有一个来自纹理的法"
"线贴图，要使用“法线贴图”设置法线。这样，Godot将自动处理环绕网格的纹理。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:288
msgid ""
"Lastly, in order to ensure that we are reading from the same places on the "
"noise texture and the normalmap texture, we are going to pass the ``VERTEX."
"xz`` position from the ``vertex()`` function to the ``fragment()`` function. "
"We do that with varyings."
msgstr ""
"最后，为了确保我们从相同的地方读取噪声纹理和法线贴图纹理，我们要通过“VERTEX."
"xz”从“vertex()”函数到“fragment()”函数的位置。我们用偏差值来做。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:292
msgid ""
"Above the ``vertex()`` define a ``vec2`` called ``vertex_position``. And "
"inside the ``vertex()`` function assign ``VERTEX.xz`` to ``vertex_position``."
msgstr ""
"在``vertex()``上定义一个叫做``vertex_position``的``vec2``。并且在 "
"``vertex()`` 函数内分配``VERTEX.xz``到``vertex_position``。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:304
msgid ""
"And now we can access ``vertex_position`` from the ``fragment()`` function."
msgstr "现在我们可以从“fragment()”函数中访问“顶点_位置”。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:312
msgid ""
"With the normals in place the light now reacts to the height of the mesh "
"dynamically."
msgstr "法线就位后，光线就会对网格的高度做出动态反应。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:316
#, fuzzy
msgid ""
"We can even drag the light around and the lighting will update automatically."
msgstr "现在我们可以拖动灯光，灯光会自动更新。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:320
msgid ""
"Here is the full code for this tutorial. You can see it is not very long as "
"Godot handles most of the difficult stuff for you."
msgstr ""
"以下是本教程的完整代码。您可以看到，Godot会为您处理大多数繁琐的事情，本教程篇"
"幅不会太长。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_spatial_shader.rst:343
msgid ""
"That is everything for this part. Hopefully, you now understand the basics "
"of vertex shaders in Godot. In the next part of this tutorial we will write "
"a fragment function to accompany this vertex function and we will cover a "
"more advanced technique to turn this terrain into an ocean of moving waves."
msgstr ""
"这就是这部分的全部内容。希望您现在已了解Godot中顶点着色器的基本知识。在本教程"
"的下一部分中，我们将编写一个片段函数来配合这个顶点函数，并且我们将介绍一种更"
"高级的技术来将这个地形转换成一个移动的波浪海洋。"
