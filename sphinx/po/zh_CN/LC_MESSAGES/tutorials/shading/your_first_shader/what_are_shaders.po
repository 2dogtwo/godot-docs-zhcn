# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-08 22:29+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:4
#, fuzzy
msgid "What are shaders?"
msgstr "空间节点"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:9
msgid ""
"So, you have decided to give shaders a try. You have likely heard that they "
"can be used to create interesting effects that run incredibly fast. You have "
"also likely heard that they are terrifying. Both are true."
msgstr ""
"你已经决定尝试编写着色器了。你可能已经听说过，它们可用来快速创造非常有趣的效"
"果。可能也听说过它们很可怕。以上两种说法都对。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:13
msgid ""
"Shaders can be used to create a wide range of effects (in fact everything "
"drawn in a modern rendering engine is done with shaders)."
msgstr ""
"着色器可以用来创建广泛的效果(事实上，现代渲染引擎中绘制的所有东西都是用着色器"
"绘制的)。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:16
msgid ""
"Writing shaders can also be very difficult for people unfamiliar with them. "
"Godot tries to make writing shaders a little easier by exposing many useful "
"built-in features and handling some of the lower-level initialization work "
"for you. However, GLSL (the OpenGL Shading Language, which Godot uses) is "
"still unintuitive and restricting, especially for users who are used to "
"GDScript."
msgstr ""
"对于不熟悉着色器的人来说，编写着色器也是非常困难的。Godot试图通过公开许多有用"
"的内置特性，并为您处理一些较低级别的初始化工作，使编写着色器变得更容易一些。"
"然而，GLSL (OpenGL着色语言，也是Godot使用的)仍然是不直观和受限制的，特别是对"
"于习惯使用GDScript的用户。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:22
msgid "But what are they?"
msgstr "可是它是什么？"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:24
msgid ""
"Shaders are a special kind of program that runs on Graphics Processing Units "
"(GPUs). Most computers have some sort of GPU, either one integrated into "
"their CPU or discrete (meaning it is a separate hardware component, for "
"example, the typical graphics card). GPUs are especially useful for "
"rendering because they are optimized for running thousands of instructions "
"in parallel."
msgstr ""
"着色器是一种在图形处理单元(GPU)上运行的特殊程序。大多数电脑都有GPU，一个集成"
"到他们的CPU或离散的(这意味着它是一个单独的硬件组件，例如，标准显卡)。GPU对于"
"呈现特别有用，因为它们被优化为并行运行数千条指令。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:29
msgid ""
"The output of the shader is typically the colored pixels of the object drawn "
"to the viewport. But some shaders allow for specialized outputs (this is "
"especially true for APIs like Vulkan). Shaders operate inside the shader "
"pipeline. The standard process is the vertex -> fragment shader pipeline. "
"The vertex shader is used to decided where each vertex (point in a 3D model, "
"or corner of a Sprite) goes and the fragment shader decides what color "
"individual pixels receive."
msgstr ""
"着色器的输出通常是绘制到视图端口的对象的彩色像素。但是一些着色器允许特殊的输"
"出(对于像Vulkan这样的应用程序接口尤其如此)。着色器在着色器管道中操作。标准流"
"程是顶点->片段着色器管道。顶点着色器用于决定每个顶点的位置(3D模型中的点，或者"
"精灵的一角)去和片段着色器决定什么颜色个别像素接收。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:35
msgid ""
"Suppose you want to update all the pixels in a texture to a given color, on "
"the CPU you would write:"
msgstr "假设你想要将纹理中的所有像素更新为给定的颜色，你可以在CPU上这样写："

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:43
msgid ""
"In a shader you are given access only to the inside of the loop so what you "
"write looks like this:"
msgstr "在着色器中，你只能访问循环的内部，所以你写的是这样的："

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:52
msgid ""
"You have no control over how this function is called. So you have to design "
"your shaders differently from how you would design programs on the CPU."
msgstr ""
"您无法控制如何调用此函数。您必须设计不同于在中央处理器上设计程序的着色器。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:55
msgid ""
"A consequence of the shader pipeline is that you cannot access the results "
"from a previous run of the shader, you cannot access other pixels from the "
"pixel being drawn, and you cannot write outside of the current pixel being "
"drawn. This enables the GPU to execute the shader for different pixels in "
"parallel, as they do not depend on each other. This lack of flexibility is "
"designed to work with the GPU which allows shaders to be incredibly fast."
msgstr ""
"着色器管道的一个后果是，您无法访问着色器上次运行的结果，您无法从正在绘制的像"
"素中访问其他像素，而且不能在当前绘制的像素之外编写。这使得GPU能够并行地为不同"
"的像素执行着色器，因为他们彼此不耦合。这种灵活性的缺乏是为GPU的工作设计，使着"
"色器难以置信的快。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:62
msgid "What can they do"
msgstr "它能做什么"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:64
msgid "position vertices very fast"
msgstr "快速定位顶点"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:65
msgid "compute color very fast"
msgstr "快速计算颜色"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:66
msgid "compute lighting very fast"
msgstr "快速计算光照"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:67
msgid "lots and lots of math"
msgstr "进行大量的数学计算"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:70
msgid "What can't they do"
msgstr "它不能做什么"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:72
msgid "draw outside mesh"
msgstr "绘制外部网格"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:73
msgid "access other pixels from current pixel (or vertices)"
msgstr "从当前像素(或顶点)访问其他像素"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:74
msgid "store previous iterations"
msgstr "储存之前的迭代"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:75
msgid "update on the fly (they can, but they need to be compiled)"
msgstr "动态更新(可以，但是需要编译)"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:78
msgid "Structure of a shader"
msgstr "着色器的结构"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:80
msgid ""
"In Godot, shaders are made up of 3 main functions: the ``vertex()`` "
"function, the ``fragment()`` function and the ``light()`` function."
msgstr ""
"在Godot中，着色器由3个主要函数组成:“vertex()”函数，“fragment()”和“light()”函"
"数。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:83
msgid ""
"The ``vertex()`` function runs over all the vertices in the mesh and sets "
"their positions as well as some other per-vertex variables."
msgstr ""
"“vertex()”函数运行在网格中的所有顶点上，并设置它们的位置以及部分其他每个顶点"
"的变量。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:86
msgid ""
"The ``fragment()`` function runs for every pixel that is covered by the "
"mesh. It uses the variables from the ``vertex()`` function to run. The "
"variables from the ``vertex()`` function are interpolated between the "
"vertices to provide the values for the ``fragment()`` function."
msgstr ""
"函数的作用是:为网格所覆盖的每个像素运行“fragment()”函数。它使用“vertex()”函数"
"中的变量来运行。“vertex()”函数中的变量在顶点之间进行插值，以提"
"供“fragment()”函数的值。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:90
msgid ""
"The ``light()`` function runs for every pixel and for every light. It takes "
"variables from the ``fragment()`` function and from previous runs of itself."
msgstr ""
"“light()”函数用于每个像素和每束光照。它从“fragment()”函数和以前的运行中获取变"
"量。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:93
msgid ""
"For more information about how shaders operate specifically in Godot see "
"the :ref:`Shaders <doc_shaders>` doc."
msgstr ""
"有关着色器如果在Godot中工作的更多信息，请参阅 :ref:`着色器 <doc_shaders>`。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:96
msgid "Technical overview"
msgstr "技术概述"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:98
msgid ""
"GPUs are able to render graphics much faster than CPUs for a few reasons, "
"but most notably, because they are able to run calculations massively in "
"parallel. A CPU typically has 4 or 8 cores while a GPU typically has "
"thousands. That means a GPU can do hundreds of tasks at once. GPU architects "
"have exploited this in a way that allows for doing many calculations very "
"quickly, but only when many or all cores are doing the same calculation at "
"once, but with different data."
msgstr ""
"GPU渲染图形的速度要比CPU快得多，原因如下:但最值得注意的是，它们能够大规模并行"
"运行计算。CPU通常有4或8个内核，而GPU通常有数千个。这意味着GPU可以一次完成数百"
"项任务。GPU架构师已经利用了这种方式，允许快速地进行许多计算，但只有当多个或所"
"有核心同时进行相同的计算时，但数据不同。"

#: ../../docs/tutorials/shading/your_first_shader/what_are_shaders.rst:104
msgid ""
"That is where shaders come in. The GPU will call the shader a bunch of times "
"simultaneously, and then operate on different bits of data (vertices, or "
"pixels). These bunches of data are often called wavefronts. A shader will "
"run the same for every thread in the wavefront. For example, if a given GPU "
"can handle 100 threads per wavefront, a wavefront will run on a 10x10 block "
"of pixels together. And it will continue to run for all pixels in that "
"wavefront until they are complete. Accordingly, if you have one pixel slower "
"than the rest (due to excessive branching), the entire block will be slowed "
"down, resulting in massively slower render times. This is different than CPU "
"based operations, on a CPU if you can speed up even one pixel the entire "
"rendering time will decrease. On a GPU, you have to speed up the entire "
"wavefront to speed up rendering."
msgstr ""
"这就是着色器的作用。GPU会同时调用着色器很多次，然后对不同的数据位(顶点或像素)"
"进行操作。这些数据束通常被称为波前。一个着色器将在波前运行相同的每一个线程。"
"例如，如果给定的GPU可以处理每个波前100个线程，波前将一起运行在一个10x10像素块"
"上。它将继续运行在波前的所有像素，直到它们完成。因此，如果你有一个像素比其他"
"像素慢(由于过度分支)，整个区域都会减速，导致渲染时间大大降低。这与基于CPU的操"
"作不同，在CPU上，如果你能加快哪怕一个像素，整个渲染时间都会减少。在GPU上，你"
"必须加速整个波前来加速渲染。"
