# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-05 17:37+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:4
#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:51
msgid "Your first CanvasItem shader"
msgstr "你的第一个画布项着色器"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:9
msgid ""
"Shaders are special programs that execute on the GPU and are used for "
"rendering graphics. All modern rendering is done with shaders. For a more "
"detailed description of what shaders are please see :ref:`What are shaders "
"<doc_what_are_shaders>`."
msgstr ""
"着色器是在GPU上运行的，用来渲染图像的一种特殊的程序。现代渲染都是通过着色器实"
"现的。若想了解关于着色器更详细的说明，请查看 :ref:`着色器是什么 "
"<doc_what_are_shaders>`。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:13
msgid ""
"This tutorial will focus on the practical aspects of writing shader programs "
"by walking you through the process of writing a shader with both vertex and "
"fragment functions. This tutorial targets absolute beginners to shaders."
msgstr ""
"本教程将重点介绍实际编写着色器程序的各个方面，引导您走过使用顶点和片段函数编"
"写着色器的整个流程。本教程面向着色器。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:17
msgid ""
"If you have experience writing shaders and are just looking for an overview "
"of how shaders work in Godot, see the :ref:`Shading Reference <toc-shading-"
"reference>`."
msgstr ""
"如果你在着色器方面有一定的经验，只是想知道着色器在Godot中是如何运作的，请参"
"阅:ref:`着色器参考 <toc-shading-reference>`."

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:21
msgid "Setup"
msgstr "场景布置"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:23
msgid ""
":ref:`CanvasItem <doc_canvas_item_shader>` shaders are used to draw all 2D "
"objects in Godot, while :ref:`Spatial <doc_spatial_shader>` shaders are used "
"to draw all 3D objects."
msgstr ""
":ref:画布项<doc_canvas_item_shader>`着色器用来绘制Godot中所有的2D对象，而:"
"ref:`空间<doc_spatial_shader>`着色器用来绘制3D对象。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:26
msgid ""
"In order to use a shader it must be attached inside a :ref:`Material "
"<class_material>` which must be attached to an object. Materials are a type "
"of :ref:`Resource <doc_resources>`. To draw multiple objects with the same "
"material, the material must be attached to each object."
msgstr ""
"要使用着色器，它必须要被附加到一个:ref:`材质<class_material>`上，这个材质也必"
"须附加在一个对象上。材质是一种:ref:`资源<doc_resources>`。若要使用同一材质绘"
"制多个对象，该材质必须附加到每个对象上。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:30
msgid ""
"All objects derived from a :ref:`CanvasItem <class_canvasitem>` have a "
"material property. This includes all :ref:`GUI elements <class_Control>`, :"
"ref:`Sprites <class_sprite>`, :ref:`TileMaps <class_tilemap>`, :ref:"
"`MeshInstance2Ds <class_meshinstance2d>` etc. They also have an option to "
"inherit their parent's material. This can be useful if you have a large "
"number of nodes that you want to use the same material."
msgstr ""
"所有继承自:ref:`CanvasItem <class_canvasitem>`的对象都有一个材质属性，这包含"
"所有的:ref:`GUI元素<class_Control>`, :ref:`精灵<class_sprite>`, :ref:`方块地"
"图<class_tilemap>`, :ref:`2D网格实例<class_meshinstance2d>`等等。它们同时也可"
"以选择性地继承其父类的材质。 如果你有要使用同一材质的很多节点，这个特性就可以"
"派上用场。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:36
msgid ""
"To begin, create a Sprite node. You can use any CanvasItem, but for this "
"tutorial we will use a Sprite."
msgstr ""
"首先，创建一个精灵节点。你其实可以用任意的画布项，但是在这个教程中我们用精"
"灵。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:39
msgid ""
"In the Inspector, click beside \"Texture\" where it says \"[empty]\" and "
"select \"Load\", then select \"Icon.png\". For new projects, this is the "
"Godot icon. You should now see the icon in the viewport."
msgstr ""
"在属性面板里，点击“材质”旁边写着“[空]”的地方然后选择“读取”，接着选中“Icon."
"png”。对于新的项目，这个就是Godot的图标。你现在就会在视区中看到这个图标。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:42
msgid ""
"Next, look down in the Inspector, under the CanvasItem section, click beside "
"\"Material\" and select \"New ShaderMaterial\". This creates a new Material "
"resource. Click on the sphere that appears. Godot currently doesn't know "
"whether you are writing a CanvasItem Shader or a Spatial Shader and it "
"previews the output of spatial shaders. So what you are seeing is the output "
"of the default Spatial Shader."
msgstr ""
"接下来，在属性面板下的画布项部分中，点击“材质”并选择“新着色器材质”。这会创建"
"一个新的材质资源。然后点击新出现的球体。Godot目前还不知道你是要写画布项着色器"
"还是空间着色器，它显示空间着色器的输出预览，所以你看到的是默认的空间着色器的"
"输出。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:47
msgid ""
"Click beside \"Shader\" and select \"New Shader\". Finally, click on the new "
"shader resource and the shader editor will open. You are now ready to begin "
"writing your first shader."
msgstr ""
"点击“着色器”并选中“新着色器”。最后，点击新创建的着色器资源，着色器编辑器就会"
"打开。你现在就已经准备好开始写你的第一个着色器了。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:53
msgid ""
"In Godot, all shaders start with a line specifying what type of shader they "
"are. It uses the following format:"
msgstr "在Godot中，所有的着色器第一行都是指定着色器类型的，格式如下:"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:60
msgid ""
"Because we are writing a CanvasItem shader, we specify ``canvas_item`` in "
"the first line. All our code will go beneath this declaration."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:63
msgid ""
"This line tells the engine which built-in variables and functionality to "
"supply you with."
msgstr "这一行告诉游戏引擎要提供你哪些内置变量以及函数。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:65
msgid ""
"In Godot you can override three functions to control how the shader "
"operates; ``vertex``, ``fragment``, and ``light``. This tutorial will walk "
"you through writing a shader with both vertex and fragment functions. Light "
"functions are significantly more complex than vertex and fragment functions "
"and so will not be covered here."
msgstr ""
"在Godot中，你可以重写三个函数来控制着色器的运作，它们是``vertex``（顶点函"
"数），``fragment``（片段函数）和``light``（光照函数）。本教程会引导你写出一个"
"包含顶点和片段函数的着色器。因为光照函数比另外两个函数要复杂非常多，所以在这"
"里不会进行讲解。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:70
msgid "Your first fragment function"
msgstr "您的第一个片段函数"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:72
msgid ""
"The fragment function runs for every pixel in a Sprite and determines what "
"color that pixel should be."
msgstr "片段函数对精灵中的每个像素进行操作，并且决定这个像素应该是什么颜色的。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:74
msgid ""
"They are restricted to the pixels covered by the Sprite, that means you "
"cannot use one to, for example, create an outline around a Sprite."
msgstr ""
"它们限制在精灵覆盖的那些像素中，这也就意味着，你无法用片段函数来实现例如在精"
"灵周围加边框的事情。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:77
msgid ""
"The most basic fragment function does nothing except assign a single color "
"to every pixel."
msgstr "最基础的片段函数仅仅给每个像素赋予一个颜色。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:79
msgid ""
"We do so by writing a ``vec4`` to the built-in variable ``COLOR``. ``vec4`` "
"is shorthand for constructing a vector with 4 numbers. For more information "
"about vectors see the :ref:`Vector math tutorial <doc_vector_math>` "
"``COLOR`` is both an input variable to the fragment function and the final "
"output from it."
msgstr ""
"我们向内置变量``COLOR``中写入一个``vec4``来做到这点。``vec4``是创建一个四维向"
"量的简写形式。若想进一步了解向量，请参阅:ref:`向量数学教程"
"<doc_vector_math>`。``COLOR``变量既是片段函数的一个输入，同时也是它的最终输"
"出。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:91
msgid ""
"Congratulations! You're done. You have successfully written your first "
"shader in Godot."
msgstr "恭喜你！你成功在Godot中写出了你的第一个着色器。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:93
msgid "Now let's make things more complex."
msgstr "接着，我们来讨论更复杂的事情。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:95
msgid ""
"There are many inputs to the fragment function that you can use for "
"calculating ``COLOR``. ``UV`` is one of them. UV coordinates are specified "
"in your Sprite (without you knowing it!) and they tell the shader where to "
"read from textures for each part of the mesh."
msgstr ""
"你可以使用片段函数中的很多输入来计算``COLOR``，``UV``就是其中的一个。你的精灵"
"指定了UV坐标（在你不知情的情况下！），而它们告诉着色器，对于网格的每个部分从"
"纹理的何处读取信息。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:99
msgid ""
"In the fragment function you can only read from ``UV``, but you can use it "
"in other functions or to assign values to ``COLOR`` directly."
msgstr ""
"在片段函数中你只能从``UV``中读取，但是你可以在其他函数中使用，或者直接对"
"``COLOR``赋值。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:102
msgid "``UV`` varies between 0-1 from left-right and from top-bottom."
msgstr "``UV``取值在0-1之间，从左到右，由上到下。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:115
msgid "Using ``TEXTURE`` built-in"
msgstr "使用内置变量``TEXTURE``"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:117
msgid ""
"When you want to adjust a color in a Sprite you cannot just adjust the color "
"from the texture manually like in the code below."
msgstr "当你想调整精灵中的颜色时，你不能像下面的代码那样手动修改纹理中的颜色。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:127
msgid ""
"The default fragment function reads from a texture and displays it. When you "
"overwrite the default fragment function, you lose that functionality, so you "
"have to implement it yourself. You read from textures using the ``texture`` "
"function. Certain nodes, like Sprites, have a dedicated texture variable "
"that can be accessed in the shader using ``TEXTURE``. Use it together with "
"``UV`` and ``texture`` to draw the Sprite."
msgstr ""
"默认的片段函数从纹理中读取并显示它。当你覆盖了默认的片段函数，你就失去了这个"
"功能，所以你必须自己实现它。你使用“纹理”函数从纹理中读取。某些节点，比如精"
"灵，有一个专用的纹理变量，可以在着色器中使用“纹理”访问。使用它与“UV”和“纹"
"理”一起绘制精灵。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:142
#, fuzzy
msgid "Uniform input"
msgstr "制服"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:144
msgid ""
"Uniform input is used to pass data into a shader that will be the same "
"across the entire shader."
msgstr "统一值输入用于将数据传递到整个着色器中相同的着色器中。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:146
msgid ""
"You can use uniforms by defining them at the top of your shader like so:"
msgstr "你可以使用统一值定义他们在你的着色器顶部这样："

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:152
#, fuzzy
msgid ""
"For more information about usage see the :ref:`Shading Language doc "
"<doc_shading_language>`."
msgstr ""
"有关内置GLSL函数的完整列表，请参见:参考:`着色语言文档<文档_着色_语言>`。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:154
msgid "Add a uniform to change the amount of blue in our Sprite."
msgstr "添加一个统一值来改变精灵中蓝色的数量。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:165
msgid ""
"Now you can change the amount of blue in the Sprite from the editor. Look "
"back at the Inspector under where you created your shader. You should see a "
"section called \"Shader Param\". Unfold that section and you will see the "
"uniform you just declared. If you change the value in the editor, it will "
"overwrite the default value you provided in the shader."
msgstr ""
"现在，您可以从编辑器中更改精灵中的蓝色数量。回顾一下创建着色器的属性面板。您"
"可以看到一个名为“着色器参数”的部分。展开这个部分，你会看到你刚刚声明的统一"
"值。如果在编辑器中更改该值，它将覆盖着色器中提供的默认值。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:171
#, fuzzy
msgid "Interacting with shaders from code"
msgstr "与光交互"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:173
msgid ""
"You can change uniforms from code using the function ``set_shader_param()`` "
"which is called on the node's material resource. With a Sprite node, the "
"following code can be used to set the ``blue`` uniform."
msgstr ""
"可以使用函数“set_shader_param()”从代码中更改统一值，该函数在节点的材质资源上"
"调用。使用精灵节点，以下代码可用于设置“蓝色”统一值。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:181
msgid ""
"Note that the name of the uniform is a string. The string must match exactly "
"with how it is written in the shader, including spelling and case."
msgstr ""
"注意，统一值的名称是一个字符串。字符串必须与它在着色器中的书写方式完全匹配，"
"包括拼写和大小写。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:185
#, fuzzy
msgid "Your first vertex function"
msgstr "顶点函数的颜色。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:187
msgid "Now that we have a fragment function, let's write a vertex function."
msgstr "现在我们有了一个片段函数，我们再写一个顶点函数。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:189
msgid ""
"Use the vertex function to calculate where on the screen each vertex should "
"end up."
msgstr "使用顶点函数计算屏幕上每个顶点的结束位置。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:191
msgid ""
"The most important variable in the vertex function is ``VERTEX``. Initially, "
"it specifies the vertex coordinates in your model, but you also write to it "
"to determine where to actually draw those vertices. ``VERTEX`` is a ``vec2`` "
"that is initially presented in local-space (i.e. not relative to the camera, "
"viewport, or parent nodes)."
msgstr ""
"顶点函数中最重要的变量是顶点。最初，它指定模型中的顶点坐标，但你也要写进去决"
"定在哪里画那些顶点。“顶点”是一个“二维向量”，它最初出现在局部空间中(即与摄像"
"机、视图或父节点无关)。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:196
msgid "You can offset the vertices by directly adding to ``VERTEX``."
msgstr "您可以通过直接添加到“顶点”来偏移顶点。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:204
msgid ""
"Combined with the ``TIME`` built-in variable, this can be used for simple "
"animation."
msgstr "与内置变量“时间”相结合，可用于简单的动画。"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:214
msgid "Conclusion"
msgstr "总结"

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:216
msgid ""
"At their core, shaders do what you have seen so far, they compute ``VERTEX`` "
"and ``COLOR``. It is up to you to dream up more complex mathematical "
"strategies for assigning values to those variables."
msgstr ""

#: ../../docs/tutorials/shading/your_first_shader/your_first_canvasitem_shader.rst:219
msgid ""
"For inspiration, take a look at some of the more advanced shader tutorials, "
"and look at other sites like `Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ and `The Book of Shaders <https://"
"thebookofshaders.com>`_."
msgstr ""
