# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-06 14:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:4
msgid "Screen-reading shaders"
msgstr "屏幕阅读着色器"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:9
#, fuzzy
msgid ""
"Very often, it is desired to make a shader that reads from the same screen "
"to which it's writing. 3D APIs, such as OpenGL or DirectX, make this very "
"difficult because of internal hardware limitations. GPUs are extremely "
"parallel, so reading and writing causes all sorts of cache and coherency "
"problems. As a result, not even the most modern hardware supports this "
"properly."
msgstr ""
"通常需要制作一个着色器，它从它写入的同一个屏幕上读取。 由于内部硬件限制，诸如"
"OpenGL或DirectX之类的3D API使这非常困难。 GPU非常平行，因此读写会导致各种缓存"
"和一致性问题。 因此，即使是最现代的硬件也不能正确支持。"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:16
#, fuzzy
msgid ""
"The workaround is to make a copy of the screen, or a part of the screen, to "
"a back-buffer and then read from it while drawing. Godot provides a few "
"tools that make this process easy!"
msgstr ""
"解决方法是将屏幕或屏幕的一部分复制到后台缓冲区，然后在绘制时从中读取。 Godot"
"提供了一些工具，使这个过程变得简单！"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:21
#, fuzzy
msgid "SCREEN_TEXTURE built-in texture"
msgstr "SCREEN_TEXTURE内置纹理。"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:23
#, fuzzy
msgid ""
"Godot :ref:`doc_shading_language` has a special texture, ``SCREEN_TEXTURE`` "
"(and ``DEPTH_TEXTURE`` for depth, in the case of 3D). It takes as argument "
"the UV of the screen and returns a vec3 RGB with the color. A special built-"
"in varying: SCREEN_UV can be used to obtain the UV for the current fragment. "
"As a result, this simple canvas_item fragment shader:"
msgstr ""
"Godot :ref:`doc_shading_language` 有一个特殊的纹理，“SCREEN_TEXTURE”(对于深"
"度，如果是3D，则为“DEPTH_TEXTURE”)。 它将屏幕的UV作为参数，并返回带有颜色的"
"vec3 RGB。 一个特殊的内置变量:SCREEN_UV可用于获取当前片段的UV。 因此，这个简"
"单的2D片段着色器:"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:34
msgid "results in an invisible object, because it just shows what lies behind."
msgstr "导致一个不可见的对象，因为它只是显示了背后的东西。"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:36
msgid ""
"The reason why textureLod must be used is because, when Godot copies back a "
"chunk of the screen, it also does an efficient separatable gaussian blur to "
"its mipmaps."
msgstr ""
"之所以必须使用textureLod是因为，当Godot复制一大块屏幕时，它还会对其mipmap执行"
"有效的可分离高斯模糊。"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:39
msgid ""
"This allows for not only reading from the screen, but reading from it with "
"different amounts of blur at no cost."
msgstr "这不仅允许从屏幕上读取，而且可以免费读取具有不同模糊量的屏幕。"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:44
msgid ""
"Mipmaps are not generated in GLES2 due to poor performance and compatibility "
"with older devices."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:48
msgid "SCREEN_TEXTURE example"
msgstr "SCREEN_TEXTURE示例"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:50
#, fuzzy
msgid ""
"``SCREEN_TEXTURE`` can be used for many things. There is a special demo for "
"*Screen Space Shaders*, that you can download to see and learn. One example "
"is a simple shader to adjust brightness, contrast and saturation:"
msgstr ""
"SCREEN_TEXTURE可用于很多事情。 有一个 *Screen Space Shaders* 的特殊演示，您可"
"以下载查看和学习。 一个示例是一个简单的着色器来调整亮度，对比度和饱和度:"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:74
msgid "Behind the scenes"
msgstr "在幕后"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:76
#, fuzzy
msgid ""
"While this seems magical, it's not. In 2D, the ``SCREEN_TEXTURE`` built-in, "
"when first found in a node that is about to be drawn, does a full-screen "
"copy to a back-buffer. Subsequent nodes that use it in shaders will not have "
"the screen copied for them, because this ends up being inefficient. In 3D, "
"the screen is copied after the opaque geometry pass, but before the "
"transparent geometry pass, so transparent objects will not be captured in "
"the ``SCREEN_TEXTURE``."
msgstr ""
"虽然这看起来很神奇，但事实并非如此。 内置的SCREEN_TEXTURE，当首次在即将绘制的"
"节点中找到时，会将全屏复制到后台缓冲区。 在着色器中使用它的后续节点将不会为它"
"们复制屏幕，因为这最终效率低下。"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:84
#, fuzzy
msgid ""
"As a result, in 2D, if shaders that use ``SCREEN_TEXTURE`` overlap, the "
"second one will not use the result of the first one, resulting in unexpected "
"visuals:"
msgstr ""
"因此，如果使用SCREEN_TEXTURE的着色器重叠，则第二个着色器将不使用第一个着色器"
"的结果，从而导致意外的视觉效果:"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:90
#, fuzzy
msgid ""
"In the above image, the second sphere (top right) is using the same source "
"for ``SCREEN_TEXTURE`` as the first one below, so the first one \"disappears"
"\", or is not visible."
msgstr ""
"在上图中，第二个球体(右上角)使用与下面第一个相同的SCREEN_TEXTURE源，因此第一"
"个``消失``或不可见。"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:94
#, fuzzy
msgid ""
"In 2D, this can be corrected via the :ref:`BackBufferCopy "
"<class_BackBufferCopy>` node, which can be instantiated between both "
"spheres. BackBufferCopy can work by either specifying a screen region or the "
"whole screen:"
msgstr ""
"在2D中，这可以通过 :ref:`BackBufferCopy <class_BackBufferCopy>` 节点来纠正，"
"该节点可以在两个球体之间实例化。 BackBufferCopy可以通过指定屏幕区域或整个屏幕"
"来工作:"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:100
msgid "With correct back-buffer copying, the two spheres blend correctly:"
msgstr "通过正确的后缓冲区复制，两个球体正确混合:"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:104
msgid ""
"In 3D, there is less flexibility to solve this particular issue because the "
"``SCREEN_TEXTURE`` is only captured once. Be careful when using "
"``SCREEN_TEXTURE`` in 3D as it won't capture transparent objects and may "
"capture some opaque objects that are in front of the object."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:109
msgid ""
"You can reproduce the back-buffer logic in 3D by creating a :ref:`Viewport "
"<class_Viewport>` with a camera in the same position as your object, and "
"then use the :ref:`Viewport's <class_Viewport>` texture instead of "
"``SCREEN_TEXTURE``."
msgstr ""

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:114
msgid "Back-buffer logic"
msgstr "后缓冲逻辑"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:116
msgid ""
"So, to make it clearer, here's how the backbuffer copying logic works in "
"Godot:"
msgstr "所以，为了更清楚，这里是backbuffer复制逻辑在Godot中的工作原理:"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:119
#, fuzzy
msgid ""
"If a node uses the ``SCREEN_TEXTURE``, the entire screen is copied to the "
"back buffer before drawing that node. This only happens the first time; "
"subsequent nodes do not trigger this."
msgstr ""
"如果节点使用SCREEN_TEXTURE，则在绘制该节点之前将整个屏幕复制到后台缓冲区。 这"
"仅在第一次发生，后续节点不会触发此操作。"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:122
#, fuzzy
msgid ""
"If a BackBufferCopy node was processed before the situation in the point "
"above (even if ``SCREEN_TEXTURE`` was not used), the behavior described in "
"the point above does not happen. In other words, automatic copying of the "
"entire screen only happens if ``SCREEN_TEXTURE`` is used in a node for the "
"first time and no BackBufferCopy node (not disabled) was found before in "
"tree-order."
msgstr ""
"如果在上述点的情况之前处理BackBufferCopy节点(即使未使用SCREEN_TEXTURE)，则上"
"述点中描述的此行为不会发生。 换句话说，只有在第一次在节点中使用SCREEN_TEXTURE"
"并且在树顺序之前没有找到BackBufferCopy节点(未禁用)时，才会自动复制整个屏幕。"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:128
#, fuzzy
msgid ""
"BackBufferCopy can copy either the entire screen or a region. If set to only "
"a region (not the whole screen) and your shader uses pixels not in the "
"region copied, the result of that read is undefined (most likely garbage "
"from previous frames). In other words, it's possible to use BackBufferCopy "
"to copy back a region of the screen and then use ``SCREEN_TEXTURE`` on a "
"different region. Avoid this behavior!"
msgstr ""
"BackBufferCopy可以复制整个屏幕或区域。 如果仅设置为区域(不是整个屏幕)，并且着"
"色器使用不在复制区域中的像素，则该读取的结果是未定义的(很可能是前一帧中的垃"
"圾)。 换句话说，可以使用BackBufferCopy复制屏幕区域，然后在不同区域使用"
"SCREEN_TEXTURE。 避免这种行为！"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:137
msgid "DEPTH_TEXTURE"
msgstr "DEPTH_TEXTURE"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:139
#, fuzzy
msgid ""
"For 3D Shaders, it's also possible to access the screen depth buffer. For "
"this, the ``DEPTH_TEXTURE`` built-in is used. This texture is not linear; it "
"must be converted via the inverse projection matrix."
msgstr ""
"对于3D着色器，还可以访问屏幕深度缓冲区。 为此，使用内置的DEPTH_TEXTURE。 该纹"
"理不是线性的，必须通过逆投影矩阵进行转换。"

#: ../../docs/tutorials/shading/screen-reading_shaders.rst:143
msgid ""
"The following code retrieves the 3D position below the pixel being drawn:"
msgstr "以下代码检索正在绘制的像素下方的3D位置:"
