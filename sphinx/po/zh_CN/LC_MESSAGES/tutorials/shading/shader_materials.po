# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-20 15:59+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/shader_materials.rst:4
msgid "Shader materials"
msgstr "着色器材质"

#: ../../docs/tutorials/shading/shader_materials.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/shading/shader_materials.rst:9
#, fuzzy
msgid ""
"For the most common cases, Godot provides ready to use materials for most "
"types of shaders, such as :ref:`SpatialMaterial <class_SpatialMaterial>`, :"
"ref:`CanvasItemMaterial <class_CanvasItemMaterial>` and :ref:"
"`ParticlesMaterial <class_ParticlesMaterial>`. They are flexible "
"implementations that cover most use cases."
msgstr ""
"对于最常见的情况，Godot为大多数类型的着色器提供了随时可用的材质，例如"
"SpatialMaterial，CanvasItemMaterial和ParticlesMaterial(@TODO链接到教程/类)。 "
"它们是灵活的实现，涵盖了大多数用例。"

#: ../../docs/tutorials/shading/shader_materials.rst:14
msgid ""
"Shader materials allow writing a custom shader directly, for maximum "
"flexibility. Examples of this are:"
msgstr ""
"着色器材质允许直接编写自定义着色器，以获得最大的灵活性。 这方面的示例是:"

#: ../../docs/tutorials/shading/shader_materials.rst:17
msgid "Create procedural textures."
msgstr "创建程序纹理。"

#: ../../docs/tutorials/shading/shader_materials.rst:18
#, fuzzy
msgid "Create complex texture blending effects."
msgstr "创建复杂的纹理混合。"

#: ../../docs/tutorials/shading/shader_materials.rst:19
#, fuzzy
msgid "Create animated materials, or materials that change over time."
msgstr "创建随时间变化的动画材质或材质。"

#: ../../docs/tutorials/shading/shader_materials.rst:20
msgid "Create refractive effects or other advanced effects."
msgstr "创建折射效果或其他高级效果。"

#: ../../docs/tutorials/shading/shader_materials.rst:21
msgid "Create special lighting shaders for more exotic materials."
msgstr "为更具异国情调的材质创建特殊照明着色器。"

#: ../../docs/tutorials/shading/shader_materials.rst:22
msgid "Animate vertices, like tree leaves or grass."
msgstr "动画顶点，如树叶或草。"

#: ../../docs/tutorials/shading/shader_materials.rst:23
#, fuzzy
msgid "Create custom particle code."
msgstr "自定义粒子数据。"

#: ../../docs/tutorials/shading/shader_materials.rst:24
msgid "And much more!"
msgstr "以及更多！"

#: ../../docs/tutorials/shading/shader_materials.rst:26
#, fuzzy
msgid ""
"Godot provides built in functionality to make frequent operations easier. "
"Additionally, Godot's shader editor will detect errors as you type, so you "
"can see your edited shaders in real-time. It is also possible to edit "
"shaders using a visual, node-based graph editor."
msgstr ""
"传统上，大多数引擎会要求您学习GLSL，HLSL或CG，这对于大多数艺术家来说都是相当"
"复杂的。 Godot使用着色器语言的简化版本，可以在您键入时检测错误，因此您可以实"
"时查看已编辑的着色器。 此外，可以使用基于节点的可视化图形编辑器编辑着色器。"

#: ../../docs/tutorials/shading/shader_materials.rst:32
msgid "Creating a ShaderMaterial"
msgstr "创建ShaderMaterial"

#: ../../docs/tutorials/shading/shader_materials.rst:34
msgid ""
"Create a new ShaderMaterial in some object of your choice. Go to the "
"\"Material\" property and create a ShaderMaterial."
msgstr ""
"在您选择的某个对象中创建一个新的ShaderMaterial。 转到``材质``属性并创建"
"ShaderMaterial。"

#: ../../docs/tutorials/shading/shader_materials.rst:39
msgid ""
"Next, click on the shader material to see its properties. From here you can "
"create a shader or visual shader. Regular shaders use code to set their "
"properties while a visual shader uses a node based workflow."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:43
msgid ""
"If you need to you can convert a visual shader to a text shader. However you "
"can't convert a text shader to a visual shader."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:46
msgid "Choose one of them and you can start editing your shader."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:50
#, fuzzy
msgid ""
"If you create a regular shader click on it and the shader editor will open."
msgstr "编辑新创建的着色器，着色器编辑器将打开:"

#: ../../docs/tutorials/shading/shader_materials.rst:54
#, fuzzy
msgid ""
"If you create a visual shader the visual shader editor will open "
"automatically."
msgstr "编辑新创建的着色器，着色器编辑器将打开:"

#: ../../docs/tutorials/shading/shader_materials.rst:58
msgid ""
"In the visual shader editor you can click a button and see what your visual "
"shader looks like as shader code. This can be useful if you're trying to "
"replicate a text shader as nodes, or it can be used as a preview for "
"converting your visual shader to a text shader."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:67
msgid "To learn more about visual shaders, read :ref:`doc_visual_shaders`."
msgstr ""

#: ../../docs/tutorials/shading/shader_materials.rst:70
msgid "Converting to ShaderMaterial"
msgstr "转换为ShaderMaterial"

#: ../../docs/tutorials/shading/shader_materials.rst:72
#, fuzzy
msgid ""
"It is possible to convert from SpatialMaterial, CanvasItemMaterial and "
"ParticlesMaterial to ShaderMaterial. To do so, go to the material properties "
"and select the convert option."
msgstr ""
"可以将SpatialMaterial，CanvasItemMaterial和ParticlesMaterial转换为"
"ShaderMaterial。 要执行此操作，请转到材质属性并启用转换选项。"

#: ../../docs/tutorials/shading/shader_materials.rst:80
msgid ""
"Using the convert option will turn the SpatialMaterial into a ShaderMaterial "
"with a text shader, not a visual shader."
msgstr ""
