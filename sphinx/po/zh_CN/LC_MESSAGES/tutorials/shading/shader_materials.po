# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-04 23:31+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/shader_materials.rst:4
msgid "Shader materials"
msgstr "着色器材料"

#: ../../docs/tutorials/shading/shader_materials.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/shading/shader_materials.rst:9
msgid ""
"For the most common cases, Godot provides ready to use materials for most "
"types of shaders, such as SpatialMaterial, CanvasItemMaterial and "
"ParticlesMaterial (@TODO link to tutorials/classes). They are flexible "
"implementations that cover most use cases."
msgstr ""
"对于最常见的情况，Godot为大多数类型的着色器提供了随时可用的材质，例如"
"SpatialMaterial，CanvasItemMaterial和ParticlesMaterial（@TODO链接到教程/"
"类）。 它们是灵活的实现，涵盖了大多数用例。"

#: ../../docs/tutorials/shading/shader_materials.rst:14
msgid ""
"Shader materials allow writing a custom shader directly, for maximum "
"flexibility. Examples of this are:"
msgstr ""
"着色器材料允许直接编写自定义着色器，以获得最大的灵活性。 这方面的例子是："

#: ../../docs/tutorials/shading/shader_materials.rst:17
msgid "Create procedural textures."
msgstr "创建程序纹理。"

#: ../../docs/tutorials/shading/shader_materials.rst:18
msgid "Create complex texture blendings."
msgstr "创建复杂的纹理混合。"

#: ../../docs/tutorials/shading/shader_materials.rst:19
msgid "Create animated materials, or materials that change with time."
msgstr "创建随时间变化的动画材质或材质。"

#: ../../docs/tutorials/shading/shader_materials.rst:20
msgid "Create refractive effects or other advanced effects."
msgstr "创建折射效果或其他高级效果。"

#: ../../docs/tutorials/shading/shader_materials.rst:21
msgid "Create special lighting shaders for more exotic materials."
msgstr "为更具异国情调的材料创建特殊照明着色器。"

#: ../../docs/tutorials/shading/shader_materials.rst:22
msgid "Animate vertices, like tree leaves or grass."
msgstr "动画顶点，如树叶或草。"

#: ../../docs/tutorials/shading/shader_materials.rst:23
msgid ""
"Create custom particle code, that responds to baked animations or force "
"fields."
msgstr "创建自定义粒子代码，响应烘焙动画或强制字段。"

#: ../../docs/tutorials/shading/shader_materials.rst:24
msgid "And much more!"
msgstr "以及更多！"

#: ../../docs/tutorials/shading/shader_materials.rst:26
msgid ""
"Traditionally, most engines will ask you to learn GLSL, HLSL or CG, which "
"are pretty complex for the skillset of most artists. Godot uses a simplified "
"version of a shader language that will detect errors as you type, so you can "
"see your edited shaders in real-time. Additionally, it is possible to edit "
"shaders using a visual, node-based graph editor."
msgstr ""
"传统上，大多数引擎会要求你学习GLSL，HLSL或CG，这对于大多数艺术家来说都是相当"
"复杂的。 Godot使用着色器语言的简化版本，可以在您键入时检测错误，因此您可以实"
"时查看已编辑的着色器。 此外，可以使用基于节点的可视化图形编辑器编辑着色器。"

#: ../../docs/tutorials/shading/shader_materials.rst:33
msgid "Creating a ShaderMaterial"
msgstr "创建ShaderMaterial"

#: ../../docs/tutorials/shading/shader_materials.rst:35
msgid ""
"Create a new ShaderMaterial in some object of your choice. Go to the "
"\"Material\" property and create a ShaderMaterial."
msgstr ""
"在您选择的某个对象中创建一个新的ShaderMaterial。 转到“材质”属性并创建"
"ShaderMaterial。"

#: ../../docs/tutorials/shading/shader_materials.rst:40
msgid "Edit the newly created shader, and the shader editor will open:"
msgstr "编辑新创建的着色器，着色器编辑器将打开："

#: ../../docs/tutorials/shading/shader_materials.rst:45
msgid "Converting to ShaderMaterial"
msgstr "转换为ShaderMaterial"

#: ../../docs/tutorials/shading/shader_materials.rst:47
msgid ""
"It is possible to convert from SpatialMaterial, CanvasItemMaterial and "
"ParticlesMaterial to ShaderMaterial. To do this go to the material "
"properties and enable the convert option."
msgstr ""
"可以将SpatialMaterial，CanvasItemMaterial和ParticlesMaterial转换为"
"ShaderMaterial。 要执行此操作，请转到材料属性并启用转换选项。"
