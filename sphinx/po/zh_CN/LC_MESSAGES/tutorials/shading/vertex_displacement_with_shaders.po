# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-14 16:05+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:4
msgid "Vertex displacement with shaders"
msgstr "使用着色器的顶点偏移"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:9
#, fuzzy
msgid ""
"This tutorial will teach you how to displace the vertices of a :ref:`Plane "
"Mesh<class_PlaneMesh>` inside a shader. Vertex displacement can be used for "
"a wide variety of effects, but most commonly it is used as a quick way to "
"turn a flat plane into a simple terrain. Typically this is done using a "
"heightmap, but in order to keep everything self contained, in this tutorial, "
"we will use noise in a shader. At the end of this tutorial, we will have a "
"deformed plane that looks like a miniature terrain complete with dynamic "
"lighting."
msgstr ""
"本教程将教您如何在着色器中替换 :ref:`Plane Mesh <class_PlaneMesh>` 的顶点。 "
"顶点位移可用于各种效果，但最常见的是它用作将平面转变为简单地形的快速方法。 通"
"常这是使用高度图完成的，但为了保持所有内容的自包含，在本教程中我们将使用着色"
"器中的噪声。 在本教程结束时，我们将看到一个变形的平面，看起来像一个完整的动态"
"光照的微型地形。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:18
#, fuzzy
msgid "By reading this tutorial, you should gain a basic understanding of:"
msgstr "通过阅读本教程，您应该基本了解:"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:20
msgid "How to create and subdivide a :ref:`Plane Mesh<class_PlaneMesh>`"
msgstr "如何创建和细分 :ref:`Plane Mesh <class_PlaneMesh>`"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:21
msgid ""
"How to create and assign a material to a :ref:`Mesh<class_MeshInstance>`"
msgstr "如何创建和分配材质到 :ref:`Mesh <class_MeshInstance>`"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:22
msgid ""
"How to write a :ref:`Shader<class_Shader>` that displaces the vertices of a :"
"ref:`Mesh<class_MeshInstance>`"
msgstr ""
"如何写一个 :ref:`Shader <class_Shader>` 替换a :ref:`Mesh <class_MeshInstance>"
"的顶点"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:23
msgid ""
"How to pass values (Uniforms) into a :ref:`Shader<class_Shader>` to update "
"the :ref:`Mesh<class_MeshInstance>` in realtime"
msgstr ""
"如何将值(Uniforms)传递到 :ref:`Shader <class_Shader>` 以实时更新 :ref:`Mesh "
"<class_MeshInstance>`"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:24
msgid "How to approximate normals from a height function"
msgstr "如何从高度函数近似法线"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:25
msgid "How to use a light with a custom material"
msgstr "如何使用自定义材质的灯光"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:28
msgid "The plane mesh"
msgstr "平面网格"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:30
msgid ""
"First, add a :ref:`Spatial<class_Spatial>` node to the scene to act as the "
"root. Next, add a :ref:`MeshInstance<class_MeshInstance>` as a child."
msgstr ""
"首先，在场景中添加一个 :ref:`Spatial <class_Spatial>` 节点作为根。 接下来，添"
"加 :ref:`MeshInstance <class_MeshInstance>` 作为子节点。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:35
msgid ""
"Select the newly created :ref:`MeshInstance<class_MeshInstance>`. Then click "
"on the button that says \"null\" next to the :ref:`Mesh<class_MeshInstance>` "
"in the Inspector. This will bring up a list of :ref:"
"`PrimitiveMeshes<class_PrimitiveMesh>`. Select \"New PlaneMesh\"."
msgstr ""
"选择新创建的 :ref:`MeshInstance <class_MeshInstance>`。 然后单击Inspector中 :"
"ref:`Mesh <class_MeshInstance>` 旁边的“null”按钮。 这将显示一个列表 :ref:"
"`PrimitiveMeshes <class_PrimitiveMesh>`。 选择“New PlaneMesh”。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:41
msgid ""
"The button will change into a small image of a plane. Click on it to enter "
"into the Inspector for the :ref:`Plane Mesh<class_MeshInstance>`."
msgstr ""
"该按钮将变为平面的小图像。 单击它进入Inspector，进入 :ref:`Plane Mesh "
"<class_MeshInstance>`。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:44
msgid ""
"Then, in the viewport, click in the upper left corner where it says "
"[Perspective]. A menu will appear. In the middle of the menu are options for "
"how to display the scene. Select 'Display Wireframe'."
msgstr ""
"然后，在视区中，单击左上角，显示[透视]。 将出现一个菜单。 菜单中间是如何显示"
"场景的选项。 选择“显示线框”。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:50
msgid "This will allow you to see the triangles making up the plane."
msgstr "这将允许您查看构成平面的三角形。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:54
msgid "Now set the ``Subdivide Width`` and ``Subdivide Height`` to ``32``."
msgstr "现在将``Subdivide Width``和``Subdivide Height``设置为``32``。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:58
#, fuzzy
msgid ""
"You can see that there are now many more triangles in the :ref:"
"`Mesh<class_MeshInstance>`. This will give us more vertices to work with and "
"thus allow us to add more detail."
msgstr ""
"您可以看到现在有更多三角形 :ref:`Mesh <class_MeshInstance>`。 这将为我们提供"
"更多顶点，从而允许我们添加更多细节。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:65
msgid "Shader magic"
msgstr "着色器魔术"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:67
#, fuzzy
msgid ""
"Now that we have a :ref:`Plane Mesh<class_MeshInstance>` to draw, let's set "
"up the material that will deform the :ref:`Mesh<class_MeshInstance>`."
msgstr ""
"现在我们有了一个 :ref:`Plane Mesh <class_MeshInstance>` 来绘制让我们设置将变"
"形的材质 :ref:`Mesh <class_MeshInstance>`。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:69
msgid ""
"Click beside material in the :ref:`Plane Mesh<class_MeshInstance>` Menu and "
"create a new :ref:`ShaderMaterial<class_ShaderMaterial>`."
msgstr ""
"单击下面的材质 :ref:`Plane Mesh <class_MeshInstance>` 菜单并创建一个新的 :"
"ref:`ShaderMaterial <class_ShaderMaterial>`。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:73
msgid "Then click on the created :ref:`ShaderMaterial<class_ShaderMaterial>`."
msgstr "然后单击created :ref:`ShaderMaterial <class_ShaderMaterial>`。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:75
msgid ""
"Then click beside 'shader' and create a new :ref:`Shader<class_Shader>`."
msgstr "然后单击“着色器”旁边的并创建一个新的 :ref:`Shader <class_Shader>`。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:79
msgid ""
"Click into the newly created :ref:`Shader<class_Shader>`. You should now see "
"Godot's Shader editor."
msgstr ""
"单击新创建的 :ref:`Shader <class_Shader>`。 您现在应该看看Godot的Shader编辑"
"器。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:83
msgid ""
"Notice how it is throwing an error? This is because the shader editor "
"reloads shaders on the fly automatically. The first thing Godot shaders need "
"is a declaration of what type of shader they are. Accordingly, we set the "
"variable ``shader_type`` to ``spatial``. One more thing we will add is the "
"``render_mode``, we will set it to ``unshaded``. This means that Godot won't "
"run the light shader on this object."
msgstr ""
"注意它是如何抛出错误的？ 这是因为着色器编辑器会自动重新加载着色器。 Godot着色"
"器需要的第一件事就是声明它们是什么类型的着色器。 因此，我们将变量 "
"``shader_type`` 设置为 ``spatial`` 。 我们要添加的另一件事是 "
"``render_mode`` ，我们将它设置为 ``unshaded`` 。 这意味着Godot不会在此对象上"
"运行灯光着色器。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:94
#, fuzzy
msgid ""
"This should remove the errors and your :ref:`Mesh<class_MeshInstance>` "
"should turn white. If you were to comment out the ``render_mode``, the plane "
"would appear blue because it would pick up the sky colors."
msgstr ""
"这应该删除错误，您的 :ref:`Mesh <class_MeshInstance>` 应该变成白色。 如果您要"
"注释掉 ``render_mode`` ，飞机会显得很蓝，因为它会拾取天空的颜色。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:97
msgid ""
"Next we will define a vertex shader. The vertex shader determines where the "
"vertices of your :ref:`Mesh<class_MeshInstance>` appear in the final scene. "
"We will be using it to offset the height of each vertex and make our flat "
"plane appear like a little terrain."
msgstr ""
"接下来我们将定义一个顶点着色器。 顶点着色器确定最终场景中出现的地址 :ref:"
"`Mesh <class_MeshInstance>` 的顶点。 我们将使用它来偏移每个顶点的高度，并使我"
"们的平面看起来像一个小地形。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:101
msgid "We define the vertex shader like so:"
msgstr "我们像这样定义顶点着色器:"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:109
#, fuzzy
msgid ""
"With nothing in the ``vertex`` function, Godot will use its default vertex "
"shader. We can easily start to make changes by adding a single line:"
msgstr ""
"在 ``vertex`` 函数中没有任何内容，Godot将使用其默认的顶点着色器。 我们可以通"
"过添加一行来轻松开始进行更改:"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:118
#, fuzzy
msgid "Adding this line, you should get an image like the one below."
msgstr "添加此行您应该得到如下图像。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:122
#, fuzzy
msgid ""
"Okay, let's unpack this. The ``y`` value of the ``VERTEX`` is being "
"increased. And we are passing the ``x`` and ``z`` components of the "
"``VERTEX`` as arguments to ``cos`` and ``sin``; that gives us a wave-like "
"appearance across the ``x`` and ``z`` axes."
msgstr ""
"好吧，让我们打开它。 ``VERTEX``的``y``值正在增加。 我们传递 ``VERTEX`` 的"
"``x``和``z``组件作为 ``cos`` 和``sin``的参数，这给了我们一个横跨``x的波浪外"
"观 ``和 ``z`` 轴。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:126
#, fuzzy
msgid ""
"What we want to achieve is the look of little hills; after all. ``cos`` and "
"``sin`` already look kind of like hills. We do so by scaling the inputs to "
"the ``cos`` and ``sin`` functions."
msgstr ""
"我们想要实现的是小山丘的外观，毕竟 ``cos`` 和``sin``看起来有点像山丘。 我们通"
"过缩放“cos``和``sin``函数的输入来实现。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:137
msgid ""
"This looks better, but it is still too spiky. This is because ``cos`` and "
"``sin`` output values between ``-1`` and ``1``, so the range of the output "
"is much too high. We correct this by multiplying the result by ``0.5`` to "
"reduce the size."
msgstr ""
"这看起来更好，但它仍然太尖刻。 这是因为 ``cos`` 和``sin``在``-1``和````之间输"
"出值，所以输出的范围太高了。 我们通过将结果乘以“0.5”来纠正这个问题以减小大"
"小。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:148
#, fuzzy
msgid ""
"Looks much more hilly now. But ``cos`` and ``sin`` are boring. Let's move "
"onto something more interesting."
msgstr ""
"现在看起来更加丘陵了。 但是 ``cos`` 和``sin``很无聊。 让我们进入更有趣的事"
"情。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:151
msgid "Noise"
msgstr "噪声"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:153
#, fuzzy
msgid ""
"Noise is a very popular tool for procedural generation. Think of it as "
"similar to the cosine function where you have repeating hills except, with "
"noise, each hill has a different height. Understanding noise is not "
"necessary for this tutorial. There is nothing wrong with simply copying and "
"pasting the code below."
msgstr ""
"噪声是一种非常流行的程序生成工具。 可以认为它类似于余弦函数，除了噪音外，每个"
"山都有不同的高度。 本教程不需要了解噪声。 简单地复制和粘贴下面的代码没有任何"
"问题。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:158
msgid ""
"The first function we use to generate the noise is the ``hash`` function. It "
"gives the random height for each of the hill tops."
msgstr "我们用来生成噪波的第一个函数是“hash”函数。它给出了每个山顶的随机高度。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:167
#, fuzzy
msgid ""
"You will find similar functions to this all over the internet. It is "
"lovingly referred to as the 'one-liner hash function'. It works well for "
"simple noise, but there are many better alternatives floating around as "
"well. For this tutorial, it will work fine."
msgstr ""
"您将在整个互联网上找到类似的功能。 它被巧妙地称为“单线程哈希函数”。 它适用于"
"简单的噪音，但也有许多更好的替代方案。 对于本教程，它将正常工作。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:171
#, fuzzy
msgid ""
"Next we define the ``noise`` function. It smoothly interpolates between the "
"random heights. Again, if this code seems daunting, do not worry; just copy, "
"paste and move on with the tutorial."
msgstr ""
"接下来我们定义“noise”函数。它平滑地插入到随机高度之间。同样，如果这段代码看起"
"来很吓人，不要担心，只需复制粘贴并且跟着教程继续学习。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:185
#, fuzzy
msgid ""
"Lastly, to add detail, we combine successive layers of noise using something "
"called fractal brownian motion or FBM. Scary name aside, FBM noise just adds "
"together layers of noise with increasing frequency and decreasing amplitude. "
"To implement it, we run over a for loop where we increase the frequency each "
"level, decrease the amplitude, and calculate a new layer of noise."
msgstr ""
"最后，为了添加细节，我们使用分形布朗运动或FBM来组合连续的噪声层。 除了FBM噪声"
"之外，可怕的名称只会增加噪声层，增加频率并降低幅度。 为了实现它，我们运行for"
"循环，我们增加每个级别的频率，减小幅度，并计算新的噪声层。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:204
msgid ""
"We can now use this noise function in place of ``cos`` and ``sin`` in the "
"previous section."
msgstr "我们现在可以使用这个噪声函数代替上一节中的 ``cos`` 和``sin``。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:213
#, fuzzy
msgid ""
"With the noise function in place, we already have something that looks kind "
"of cool. There is a lot of detail, it kind of looks hilly or mountainous."
msgstr ""
"有了噪音功能，我们已经有了一些看起来很酷的东西。 有很多细节，有点像丘陵或山"
"区。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:217
msgid "Fragment shader"
msgstr "片段着色器"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:219
msgid ""
"The difference between a vertex shader and a fragment shader is that the "
"vertex shader runs per vertex and sets properties such as ``VERTEX`` "
"(position) and ``NORMAL``, while the fragment shader runs per pixel and, "
"most importantly, sets the ``ALBEDO`` color of the :ref:"
"`Mesh<class_MeshInstance>`."
msgstr ""
"顶点着色器和片段着色器之间的区别在于顶点着色器每个顶点运行并设置诸"
"如“VERTEX”(位置)和“正常”的属性，而片段着色器按像素运行，最重要的是， 设置 :"
"ref:`Mesh <class_MeshInstance>` 的 ``ALBEDO`` 颜色。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:223
#, fuzzy
msgid ""
"Now let's look at the :ref:`Mesh<class_MeshInstance>` with a regular shader "
"instead of the wireframe. Set the viewport back to 'Display Normal'."
msgstr ""
"现在让我们看一下 :ref:`Mesh <class_MeshInstance>` 用常规着色器而不是线框。 将"
"视区设置回“显示正常”。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:228
#, fuzzy
msgid ""
"The :ref:`Mesh<class_MeshInstance>` appears completely white because the "
"fragment shader is coloring each pixel white; but if every pixel is white, "
"we lose detail on the :ref:`Mesh<class_MeshInstance>`. So let's color each "
"pixel based on the height calculated in the vertex shader. We do so by "
"setting the ``COLOR`` variable in the vertex shader. And by setting the "
"``ALBEDO`` in the fragment shader to the calculated ``COLOR`` variable."
msgstr ""
":ref:`Mesh <class_MeshInstance>` 看起来是完全白色的，因为片段着色器将每个像素"
"着色为白色，但如果每个像素都是白色，我们就会丢失详细信息 :ref:`Mesh "
"<class_MeshInstance>`。 因此，让我们根据顶点着色器中计算的高度为每个像素着"
"色。 我们通过在顶点着色器中设置 ``COLOR`` 变量来实现。 并通过将片段着色器中"
"的“ALBEDO”设置为计算的“COLOR”变量。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:245
#, fuzzy
msgid ""
"With this change, we can see the detail of the :ref:"
"`Mesh<class_MeshInstance>`, even without displaying the :ref:"
"`Mesh<class_MeshInstance>`'s wireframe."
msgstr ""
"通过这个更改，我们可以看到 :ref:`Mesh <class_MeshInstance>` 的细节，即使没有"
"显示 :ref:`Mesh <class_MeshInstance>` 的线框。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:250
msgid "Uniforms"
msgstr "制服"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:252
#, fuzzy
msgid ""
"Uniform variables allow you to pass data from the game into the shader. They "
"can be very useful for controlling shader effects. Uniforms can be almost "
"any datatype that can be used in the shader. To use a uniform, you declare "
"it in your :ref:`Shader<class_Shader>` using the keyword ``uniform``."
msgstr ""
"统一变量允许您将数据从游戏传递到着色器。 它们对于控制着色器效果非常有用。 制"
"服几乎可以是着色器中可以使用的任何数据类型。 要使用制服，请使用关键字 "
"``uniform`` 在 :ref:`Shader <class_Shader>` 中声明它。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:257
#, fuzzy
msgid "Let's make a uniform that changes the height of the terrain."
msgstr "让我们制作一个改变地形高度的制服。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:264
#, fuzzy
msgid ""
"Godot lets you initialize a uniform with a value; here, ``height_scale`` is "
"set to ``0.5``. You can set uniforms from GDScript by calling the function "
"``set_shader_param`` on the material corresponding to the shader. The value "
"passed from GDScript takes precedence over the value used to initialize it "
"in the shader."
msgstr ""
"Godot允许您用值初始化一个制服，这里 ``height_scale`` 设置为 ``0.5`` 。 您可以"
"通过在与着色器对应的材质上调用函数 ``set_shader_param`` 来设置gdscript中的制"
"服。 从gdscript传递的值优先于用于在着色器中初始化它的值。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:273
msgid ""
"Remember that the string passed into ``set_shader_param`` must match the "
"name of the uniform variable in the :ref:`Shader<class_Shader>`. You can use "
"the uniform variable anywhere inside your :ref:`Shader<class_Shader>`. Here, "
"we will use it to set the height value instead of arbitrarily multiplying by "
"``0.5``."
msgstr ""
"请记住，传递给 ``set_shader_param`` 的字符串必须与 :ref:`Shader "
"<class_Shader>` 中的统一变量的名称匹配。 您可以在 :ref:`Shader "
"<class_Shader>` 中的任何位置使用统一变量。 在这里，我们将使用它来设置高度值，"
"而不是任意乘以“0.5”。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:282
msgid ""
"The terrain should look exactly the same, but now we have control over the "
"height easily. Here is the same terrain with ``height_scale`` set to ``1``:"
msgstr ""
"地形应该看起来完全一样，但现在我们可以轻松控制高度。 这里是 ``height_scale`` "
"设置为 ``1`` 的相同地形:"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:287
msgid "And here it is with ``height_scale`` set to ``0.2``:"
msgstr "在这里， ``height_scale`` 设置为``0.2``:"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:291
#, fuzzy
msgid ""
"Using uniforms, we can even change the value every frame to animate the "
"height of the terrain. Combined with :ref:`Tweens<class_Tween>`, this can be "
"especially useful for simple animations."
msgstr ""
"使用制服我们甚至可以改变每帧的值来设置地形的高度。 结合 :ref:`Tweens "
"<class_Tween>` 这对简单的动画特别有用。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:295
msgid "Interacting with light"
msgstr "与光交互"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:297
#, fuzzy
msgid ""
"As a final part of this tutorial, let's try to set up the terrain to "
"interact with light. First, we will add an :ref:`OmniLight<class_OmniLight>` "
"to the scene."
msgstr ""
"作为本教程的最后一部分，我们尝试设置地形以与光交互。 首先，我们将向场景中添"
"加 :ref:`OmniLight <class_OmniLight>` 。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:303
#, fuzzy
msgid ""
"You should notice that nothing changes. That is because we set the "
"``render_mode`` to ``unshaded`` at the beginning of this tutorial; let's "
"remove that."
msgstr ""
"您应该注意到没有任何变化，这是因为我们在本教程的开头将 ``render_mode`` 设置"
"为 ``unshaded`` ，让我们删除它。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:313
#, fuzzy
msgid ""
"It looks slightly better now; you can see the light affecting the terrain, "
"and it has turned blue as a result of the sky. The problem is the light is "
"affecting the terrain as if it were a flat plane. This is because the light "
"shader uses the normals of the :ref:`Mesh<class_MeshInstance>` to calculate "
"light. The normals are stored in the :ref:`Mesh<class_MeshInstance>`, but we "
"are changing the shape of the :ref:`Mesh<class_MeshInstance>` in the shader, "
"so the normals are no longer correct. To fix this, we need to recalculate "
"the normals in the shader. Godot makes this easy for us; all we have to do "
"is calculate the new normal and set ``NORMAL`` to that value in the vertex "
"shader. With ``NORMAL`` set, Godot will do all the difficult lighting "
"calculations for us."
msgstr ""
"它现在看起来稍微好一点，您可以看到影响地形的光线，并且它因天空而变成了蓝色。 "
"问题是光线正在影响地形，好像它是一个平面。 这是因为灯光着色器使用 :ref:`Mesh "
"<class_MeshInstance>` 的法线来计算光。 法线存储在 :ref:`Mesh "
"<class_MeshInstance>` 中，但是我们正在改变着色器中的 :ref:`Mesh "
"<class_MeshInstance>` 的形状，因此法线不再正确。 要解决此问题，我们需要重新计"
"算着色器中的法线。 Godot让我们很容易，我们所要做的就是计算新法线并在顶点着色"
"器中将 ``NORMAL`` 设置为该值。 通过 ``NORMAL`` 设置，Godot将为我们完成所有困"
"难的灯光计算。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:322
#, fuzzy
msgid ""
"To calculate the normal from noise, we are going to use a technique called "
"'central differences'. This is used a lot, especially in places like "
"Shadertoy, to calculate normals in shaders. What we will do is calculate the "
"noise at four points surrounding the vertex in the ``x`` and ``z`` "
"directions and then calculate the slope at the vertex from that. After all, "
"a normal is just an indicator of the slope of the noise."
msgstr ""
"为了从噪声中计算法线，我们将使用一种称为“中心差异”的技术。 这很常用，特别是在"
"像shadertoy这样的地方，用于计算着色器中的法线。 我们要做的是计算“x”和“z”方向"
"顶点周围四个点的噪声，然后计算顶点的斜率。 毕竟法线只是噪音斜率的指标。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:328
msgid "We calculate the normal with one line in the vertex shader."
msgstr "我们在顶点着色器中用一条线计算法线。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:336
msgid ""
"The variable ``e`` just makes it easier to add and subtract the right value "
"from the ``VERTEX``. Setting ``e`` to a lower number will increase the level "
"of detail of the normal."
msgstr ""
"变量 ``e`` 只是更容易从 ``VERTEX`` 中添加和减去正确的值。 将 ``e`` 设置为较低"
"的数字将增加法线的细节水平。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:339
#, fuzzy
msgid "With ``NORMAL`` calculated, the terrain now looks like:"
msgstr "使用“NORMAL”计算地形现在看起来像:"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:343
#, fuzzy
msgid ""
"This still does not look how we want it to. The issue here is that the noise "
"changes faster than the vertices do. So when we calculate the normal at the "
"point of the ``VERTEX``, it does not align with what we see in the final :"
"ref:`Mesh<class_MeshInstance>`. In order to fix this, we add more vertices. "
"The below image is made with a :ref:`Mesh<class_MeshInstance>` with "
"``subdivision`` set to ``100``."
msgstr ""
"这看起来仍然不是我们想要的。 这里的问题是噪声变化比顶点变化得快。 因此，当我"
"们计算“VERTEX”点时的法线时，它与我们在final中看到的不一致 :ref:`Mesh "
"<class_MeshInstance>`。 为了解决这个问题，我们添加了更多顶点。 下面的图像是"
"用 :ref:`Mesh <class_MeshInstance>`， ``subdivision`` 设置为 ``100`` 。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:351
#, fuzzy
msgid ""
"Now, we can drag the light around and the lighting will update automatically."
msgstr "现在我们可以拖动灯光，灯光会自动更新。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:357
#, fuzzy
msgid ""
"If you zoom the camera out, you can see that the :ref:"
"`Mesh<class_MeshInstance>` now looks like a small terrain."
msgstr ""
"如果您缩小相机，您可以看到 :ref:`Mesh <class_MeshInstance>` 现在看起来像一个"
"小地形。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:361
#, fuzzy
msgid ""
"That is everything for this tutorial. Hopefully, you now understand the "
"basics of vertex shaders in Godot. As a further exercise, try changing the "
"``height_scale`` from gdscript, try using different :ref:`Primitive "
"Meshes<class_PrimitiveMesh>`, and try making your own functions to calculate "
"``height``."
msgstr ""
"这就是本教程的一切。 希望您了解Godot的顶点着色器的基础知识。 作为进一步的练习"
"尝试从gdscript更改 ``height_scale`` ，尝试使用不同的 :ref:`Primitive Meshes "
"<class_PrimitiveMesh>`，并尝试使用自己的函数来计算 ``height`` 。"

#: ../../docs/tutorials/shading/vertex_displacement_with_shaders.rst:366
#, fuzzy
msgid ""
"For further information on how to use shaders in Godot, you should check out "
"the :ref:`doc_shading_language` page."
msgstr ""
"有关如何在Godot中使用着色器的更多信息，请查看 :ref:`doc_shading_language`页"
"面。"
