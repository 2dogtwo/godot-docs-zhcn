# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-02 11:13+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/audio/sync_with_audio.rst:4
msgid "Sync the gameplay with audio and music"
msgstr "同步游戏音频及音乐"

#: ../../docs/tutorials/audio/sync_with_audio.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/audio/sync_with_audio.rst:9
#, fuzzy
msgid ""
"In any application or game, sound and music playback will have a slight "
"delay. For games, this delay is often so small that it is negligible. Sound "
"effects will come out a few milliseconds after any play() function is "
"called. For music this does not matter as in most games it does not interact "
"with the gameplay."
msgstr ""
"在任何应用程序或游戏中，声音和音乐播放都会有轻微的延迟。对于游戏来说，这种延"
"迟通常很小，可以忽略不计。在调用播放()函数后，声音效果将在几毫秒后出现。对于"
"音乐来说这并不重要，因为在大多数游戏中它不与游戏互动。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:11
#, fuzzy
msgid ""
"Still, for some games (mainly, rhythm games), it may be required to "
"synchronize player actions with something happening in a song (usually in "
"sync with the BPM). For this, having more precise timing information for an "
"exact playback position is useful."
msgstr ""
"不过，对于一些游戏(主要是节奏游戏)，可能需要让玩家的动作与歌曲中发生的事情同"
"步(通常与拍子数同步)。因此，为精确的回放位置提供更精确的计时信息，是非常受欢"
"迎的。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:13
#, fuzzy
msgid ""
"Achieving very low playback timing precision is difficult. This is because "
"many factors are at play during audio playback:"
msgstr ""
"实现精度非常低的回放计时是非常困难的。因为在音频回放过程中有很多因素在起作"
"用："

#: ../../docs/tutorials/audio/sync_with_audio.rst:15
msgid ""
"Audio is mixed in chunks (not continuously), depending on the size of audio "
"buffers used (check latency in project settings)."
msgstr ""
"音频以块的形式混合(不是连续的)，取决于使用的音频缓冲区的大小(检查项目设置中的"
"延迟)。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:16
msgid "Mixed chunks of audio are not played immediately."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:17
msgid "Graphics APIs display two or three frames late."
msgstr "图形应用程序接口延迟显示两到三帧。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:18
msgid "When playing on TVs, some delay may be added due to image processing."
msgstr "当在电视上播放时，由于图像处理可能会增加一些延迟。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:20
#, fuzzy
msgid ""
"The most common way to reduce latency is to shrink the audio buffers (again, "
"by editing the latency setting in the project settings). The problem is that "
"when latency is too small, sound mixing will require considerably more CPU. "
"This increases the risk of skipping (a crack in sound because a mix callback "
"was lost)."
msgstr ""
"减少延迟的最常见方法是收缩音频缓冲区(同样，通过编辑项目设置中的延迟设置)。问"
"题是，当延迟太小时，它将需要相当高的CPU数量的声音混合。这就增加了跳音的风险"
"(由于混音回调丢失，导致声音出现裂痕)。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:22
#, fuzzy
msgid ""
"This is a common tradeoff, so Godot ships with sensible defaults that should "
"not need to be altered."
msgstr ""
"这是一种常见的权衡，因此Godot附带了合理的默认值，一般这些默认值不需要更改。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:24
#, fuzzy
msgid ""
"The problem, in the end, is not this slight delay but synchronizing graphics "
"and audio for games that require it. Beginning with Godot 3.2, some helpers "
"were added to obtain more precise playback timing."
msgstr ""
"最后的问题是，处理需要同步的游戏，而不是这种轻微的延迟。从Godot3.2版本开始，"
"为了获得更精确的回放时间，添加了一些辅助工具。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:27
msgid "Using the system clock to sync"
msgstr "使用系统时钟同步"

#: ../../docs/tutorials/audio/sync_with_audio.rst:29
#, fuzzy
msgid ""
"As mentioned before, If you call :ref:`AudioStreamPlayer."
"play()<class_AudioStreamPlayer_method_play>`, sound will not begin "
"immediately, but when the audio thread processes the next chunk."
msgstr ""
"如前所述，如果您调用:参考:`音频流播放器.播放()<类_音频流播放器_方法_播放>`，"
"声音不会立即开始，而是当音频线程处理下一个块时。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:31
msgid ""
"This delay can't be avoided but it can be estimated by calling :ref:"
"`AudioServer."
"get_time_to_next_mix()<class_AudioServer_method_get_time_to_next_mix>`."
msgstr ""
"这个延迟是无法避免的，但是可以通过调用来预估:参考:`音频服务.获取_时间_至_下个"
"_混音()<类_音频服务_方法_获取_时间_至_下个_混音>`。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:33
msgid ""
"The output latency (what happens after the mix) can also be estimated by "
"calling :ref:`AudioServer."
"get_output_latency()<class_AudioServer_method_get_output_latency>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:35
msgid ""
"Add these two and it's possible to guess almost exactly when sound or music "
"will begin playing in the speakers:"
msgstr "加上这两个，几乎可以准确地猜到音效或音乐什么时候开始在扬声器中播放："

#: ../../docs/tutorials/audio/sync_with_audio.rst:43
msgid ""
"This way, obtaining the actual playback position during *_process()* is "
"possible:"
msgstr "这样，就可以在*_处理()*函数中获得实际的回放位置："

#: ../../docs/tutorials/audio/sync_with_audio.rst:66
#, fuzzy
msgid ""
"In the long run, though, as the sound hardware clock is never exactly in "
"sync with the system clock, the timing information will slowly drift away."
msgstr ""
"然而，从长远来看，由于声音硬件时钟永远不会与系统时钟完全同步，它们计时的信息"
"会慢慢消失。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:68
msgid ""
"For a rhythm game where a song begins and ends after a few minutes, this "
"approach is fine (and it's the recommended approach). For a game where "
"playback can last a much longer time, the game will eventually go out of "
"sync and a different approach is needed."
msgstr ""
"在节奏游戏中，一首歌在几分钟后开始和结束，这种方法很好(也是推荐的方法)。而对"
"于一款回放时间更长的游戏来说，游戏最终将失去同步，需要一种不同的方法。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:71
msgid "Using the sound hardware clock to sync"
msgstr "使用声音硬件时钟同步"

#: ../../docs/tutorials/audio/sync_with_audio.rst:73
msgid ""
"Using :ref:`AudioStreamPlayer."
"get_playback_position()<class_AudioStreamPlayer_method_get_playback_position>` "
"to obtain the current position for the song sounds ideal, but it's not that "
"useful as-is. This value will increment in chunks (every time the audio "
"callback mixed a block of sound), so many calls can return the same value. "
"Added to this, the value will be out of sync with the speakers too because "
"of the previously mentioned reasons."
msgstr ""
"使用:参考:`音频流播放器.获取_回放_位置()<类_音频流播放器_方法_获取_回放_位置"
">`来获取歌曲的当前位置，但它并没有那么有用。这个值将以块的形式递增(每次音频回"
"调混合一个声音块时)，如此多的调用可以返回相同的值。除此之外，由于前面提到的原"
"因，该值也将与扬声器不同步。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:75
msgid ""
"To compensate for the \"chunked\" output, there is a function that can "
"help: :ref:`AudioServer."
"get_time_since_last_mix()<class_AudioServer_method_get_time_since_last_mix>`."
msgstr ""

#: ../../docs/tutorials/audio/sync_with_audio.rst:78
msgid ""
"Adding the return value from this function to *get_playback_position()* "
"increases precision:"
msgstr "将这个函数的返回值添加到*获取_回放_位置()*可以提高精度："

#: ../../docs/tutorials/audio/sync_with_audio.rst:85
msgid ""
"To increase precision, substract the latency information (how much it takes "
"for the audio to be heard after it was mixed):"
msgstr "为了提高精度，处理延迟信息（音频混合后需要多少时间才能被听到）："

#: ../../docs/tutorials/audio/sync_with_audio.rst:92
msgid ""
"The result may be a bit jittery due how multiple threads work. Just check "
"that the value is not less than in the previous frame (discard it if so). "
"This is also a less precise approach than the one before, but it will work "
"for songs of any length, or synchronizing anything (sound effects, as an "
"example) to music."
msgstr ""
"由于多线程的工作方式，结果可能会有点轻微抖动。只需检查该值是否小于前一帧中的"
"值(如果小于，则将其丢弃)。这个方法也不如之前的精确，但它适用于任何长度的歌"
"曲，或者将任何东西(例如音效)与音乐同步。"

#: ../../docs/tutorials/audio/sync_with_audio.rst:94
msgid "Here is the same code as before using this approach:"
msgstr "下面是使用这种方法之前相同的代码："
