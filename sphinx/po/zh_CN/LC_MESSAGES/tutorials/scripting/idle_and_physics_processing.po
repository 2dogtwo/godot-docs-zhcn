# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-21 17:14+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Idle and Physics Processing"
msgstr "空闲处理与物理处理"

msgid ""
"Games run in a loop. Each frame, you need to update the state of your game "
"world before drawing it on screen. Godot provides two virtual methods in the "
"Node class to do so: :ref:`Node._process() <class_Node_method__process>` "
"and :ref:`Node._physics_process() <class_Node_method__physics_process>`. If "
"you define either or both in a script, the engine will call them "
"automatically."
msgstr ""

#, fuzzy
msgid "There are two types of processing available to you:"
msgstr "Godot需要两种类型的图标:"

msgid ""
"**Idle processing** allows you to run code that updates a node every frame, "
"as often as possible."
msgstr ""

msgid ""
"**Physics processing** happens at a fixed rate, 60 times per second by "
"default. This is independent of your game's actual framerate, and keeps "
"physics running smoothly. You should use it for anything that involves the "
"physics engine, like moving a body that collides with the environment."
msgstr ""

#, fuzzy
msgid ""
"You can activate idle processing by defining the ``_process()`` method in a "
"script. You can turn it off and back on by calling :ref:`Node.set_process() "
"<class_Node_method_set_process>`."
msgstr ""
"当在脚本中找到 :ref:`Node._process() <class_Node_method__process>` 方法时，将"
"激活空闲处理。可以通过 :ref:`Node.set_process() "
"<class_Node_method_set_process>` 函数来打开或关闭。"

msgid "The engine calls this method every time it draws a frame:"
msgstr ""

#, fuzzy
msgid ""
"Keep in mind that the frequency at which the engine calls ``_process()`` "
"depends on your application's framerate, which varies over time and across "
"devices."
msgstr ""
"重要的是要记住，调用 ``_process()`` 的频率取决于应用程序运行的每秒帧数"
"（FPS）。该速率会随着时间和设备的不同而变化。"

msgid ""
"The function's ``delta`` parameter is the time elapsed in seconds since the "
"previous call to ``_process()``. Use this parameter to make calculations "
"independent of the framerate. For example, you should always multiply a "
"speed value by ``delta`` to animate a moving object."
msgstr ""

#, fuzzy
msgid ""
"Physics processing works with a similar virtual function: "
"``_physics_process()``. Use it for calculations that must happen before each "
"physics step, like moving a character that collides with the game world. As "
"mentioned above, ``_physics_process()`` runs at fixed time intervals as much "
"as possible to keep the physics interactions stable. You can change the "
"interval between physics steps in the Project Settings, under Physics -> "
"Common -> Physics Fps. By default, it's set to run 60 times per second."
msgstr ""
"用 ``_physics_process()`` 进行物理处理是相似的, 但应将其用于必须在每个物理步"
"骤之前进行的处理, 例如控制角色. 它始终在物理步骤之前运行, 并且以固定的时间间"
"隔调用: 默认为每秒60次. 你可以从 \"项目设置\" 的 \"物理\" ->\"通用\" ->\"物理"
"Fps\" 下更改时间间隔."

#, fuzzy
msgid ""
"The function ``_process()`` is not synchronized with physics. Its rate "
"depends on hardware and game optimization. It also runs after the physics "
"step in single-threaded games."
msgstr ""
"然而, 函数 ``_process()`` 不与物理同步. 它的帧率不是恒定的, 并且取决于硬件和"
"游戏优化. 在单线程游戏中它的执行是在的物理步骤之后完成的."

#, fuzzy
msgid ""
"You can see the ``_process()`` function at work by creating a scene with a "
"single Label node, with the following script attached to it:"
msgstr ""
"在作品中查看 ``_process()`` 函数的一种简单方法是创建具有单个Label节点的且带有"
"以下脚本的场景:"

#, fuzzy
msgid "When you run the scene, you should see a counter increasing each frame."
msgstr "这将显示一个每帧增加的计数器."
