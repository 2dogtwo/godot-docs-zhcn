# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-21 17:14+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Evaluating expressions"
msgstr "表达式估值"

msgid ""
"Godot provides an :ref:`class_Expression` class you can use to evaluate "
"expressions."
msgstr "Godot 提供了 :ref:`class_Expression` 类，可以用来对表达式进行估值。"

msgid "An expression can be:"
msgstr "表达式可以是："

msgid "A mathematical expression such as ``(2 + 4) * 16/4.0``."
msgstr "类似 ``(2 + 4) * 16/4.0`` 的数学表达式。"

msgid "A built-in method call like ``deg2rad(90)``."
msgstr "类似 ``deg2rad(90)`` 的内置方法调用。"

msgid ""
"A method call on an user-provided script like ``update_health()``, if "
"``base_instance`` is set to a value other than ``null`` when calling :ref:"
"`Expression.execute() <class_Expression_method_execute>`."
msgstr ""
"调用 :ref:`Expression.execute() <class_Expression_method_execute>` 时如果 "
"``base_instance`` 非 ``null``\\ ，那么调用用户提供脚本的方法，比如 "
"``update_health()``\\ 。"

msgid ""
"The Expression class is independent from GDScript. It's available even if "
"you compile Godot with the GDScript module disabled."
msgstr ""
"Expression 类是独立于 GDScript 的。即便禁用 GDScript 模块编译 Godot 也能使"
"用。"

msgid "Basic usage"
msgstr "基本用法"

msgid "To evaluate a mathematical expression, use::"
msgstr "要对数学表达式求值，请使用： ::"

msgid "The following operators are available:"
msgstr "可以使用以下操作符："

msgid "Operator"
msgstr "操作符"

msgid "Notes"
msgstr "注意"

#, fuzzy
msgid "Addition ``+``"
msgstr "补充说明"

msgid ""
"Can also be used to concatenate strings and arrays: - ``\"hello\" + \" world"
"\"`` = ``hello world`` - ``[1, 2] + [3, 4]`` = ``[1, 2, 3, 4]``"
msgstr ""

#, fuzzy
msgid "Subtraction (``-``)"
msgstr "减法"

#, fuzzy
msgid "Multiplication (``*``)"
msgstr "multiplicative"

#, fuzzy
msgid "Division (``/``)"
msgstr "Truevision Targa (``.tga``)"

msgid ""
"Performs and integer division if both operands are integers. If at least one "
"of them is a floating-point number, returns a floating-point value."
msgstr ""

msgid "Modulo (``%``)"
msgstr ""

msgid "Returns the remainder of an integer division."
msgstr ""

msgid ""
"Spaces around operators are optional. Also, keep in mind the usual `order of "
"operations <https://en.wikipedia.org/wiki/Order_of_operations>`__ applies. "
"Use parentheses to override the order of operations if needed."
msgstr ""

msgid ""
"All the Variant types supported in Godot can be used: integers, floating-"
"point numbers, strings, arrays, dictionaries, colors, vectors, …"
msgstr ""

msgid "Arrays and dictionaries can be indexed like in GDScript::"
msgstr ""

msgid "Passing variables to an expression"
msgstr "向表达式传递变量"

msgid ""
"You can pass variables to an expression. These variables will then become "
"available in the expression's \"context\" and will be substituted when used "
"in the expression::"
msgstr ""

msgid ""
"Both the variable names and variable values **must** be specified as an "
"array, even if you only define one variable. Also, variable names are **case-"
"sensitive**."
msgstr ""

msgid "Setting a base instance for the expression"
msgstr "为表达式设置基础实例"

msgid ""
"By default, an expression has a base instance of ``null``. This means the "
"expression has no base instance associated to it."
msgstr ""

msgid ""
"When calling :ref:`Expression.execute() <class_Expression_method_execute>`, "
"you can set the value of the ``base_instance`` parameter to a specific "
"object instance such as ``self``, another script instance or even a "
"singleton::"
msgstr ""

msgid "Associating a base instance allows doing the following:"
msgstr ""

msgid "Reference the instance's constants (``const``) in the expression."
msgstr ""

msgid "Reference the instance's member variables (``var``) in the expression."
msgstr ""

msgid ""
"Call methods defined in the instance and use their return values in the "
"expression."
msgstr ""

msgid ""
"Setting a base instance to a value other than ``null`` allows referencing "
"constants, member variables, and calling all methods defined in the script "
"attached to the instance. Allowing users to enter expressions may allow "
"cheating in your game, or may even introduce security vulnerabilities if you "
"allow arbitrary clients to run expressions on other players' devices."
msgstr ""

msgid "Example script"
msgstr "示例脚本"

msgid "The script below demonstrates what the Expression class is capable of::"
msgstr "下面的脚本演示的是 Expression 类的功能： ::"

msgid "The output from the script will be::"
msgstr "脚本的输出将会是： ::"

msgid "Built-in functions"
msgstr "内置函数"

msgid ""
"Most methods available in the :ref:`class_@GDScript` scope are available in "
"the Expression class, even if no base instance is bound to the expression. "
"The same parameters and return types are available."
msgstr ""
":ref:`class_@GDScript` 作用域中的大多数方法都可以在 Expression 类中使用，无需"
"为表达式绑定基础实例。参数和返回类型也是一样的。"

msgid ""
"However, unlike GDScript, parameters are **always required** even if they're "
"specified as being optional in the class reference. In contrast, this "
"restriction on arguments doesn't apply to user-made functions when you bind "
"a base instance to the expression."
msgstr ""
"然而，与 GDScript 不同，参数\\ **始终是必须的**\\ ，即使类参考中说明此参数为"
"可选。不过，为表达式绑定了基础实例时，用户定义函数的参数没有此限制。"
