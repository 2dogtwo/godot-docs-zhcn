# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 18:00+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# basics"
msgstr "C# 基础"

msgid "Introduction"
msgstr "前言"

msgid ""
".NET support has been heavily modified between Godot 3 and 4. As such, you "
"may still run into some issues, or find spots where the documentation could "
"be improved."
msgstr ""

#, fuzzy
msgid ""
"Please report issues with C# in Godot on the `engine GitHub page <https://"
"github.com/godotengine/godot/issues>`_, and any documentation issues on the "
"`documentation GitHub page <https://github.com/godotengine/godot-docs/"
"issues>`_."
msgstr ""
"C#支持是3.0版本的一项新功能. 因此, 您仍然可能会遇到一些问题, 或是发现文档中某"
"些需要改进的地方. 请在 `引擎 GitHub 页面 <https://github.com/godotengine/"
"godot/issues>`_ 上报告Godot中C#的问题, 并在 `文档 GitHub 页面 <https://"
"github.com/godotengine/godot-docs/issues>`_ 上报告任何文档问题."

#, fuzzy
msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>`, and "
"(re)visit the :ref:`Scripting section <doc_scripting>` of the step-by-step "
"tutorial."
msgstr ""
"这个页面简单介绍了C#是什么, 以及如何在Godot中使用C#. 然后, 您可能想看看 :ref:"
"`如何使用特定功能 <doc_c_sharp_features>`, 阅读有关 :ref:`C#和GDScript API 之"
"间的差异 <doc_c_sharp_differences>` 并(重新)访问逐步教程的 :ref:`编写脚本部"
"分 <doc_scripting>`."

msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with .NET 6.0."
msgstr ""

msgid ""
"Projects written in C# using Godot 4.x currently cannot be exported to "
"Android, iOS and web platforms. To use C# on those platforms, use Godot 3 "
"instead."
msgstr ""

msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"这 **不是** 一个关于C#语言整体的全面教程. 如果你还不熟悉其语法或功能, 请参阅 "
"`Microsoft C #指南 <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ "
"或在其他地方寻找合适的介绍."

msgid "Prerequisites"
msgstr "先决条件"

#, fuzzy
msgid ""
"Godot bundles the parts of .NET needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, and need to be installed separately."
msgstr ""
"Godot 捆绑了运行已经编译好的游戏所需的 Mono 部分，但 Godot 不包括构建和编译游"
"戏所需的 MSBuild 和 C# 编译器等工具。这些工具包含在 .NET SDK 中，需要单独安"
"装。"

#, fuzzy
msgid ""
"In summary, you must have installed the .NET SDK **and** the .NET-enabled "
"version of Godot."
msgstr "综上所述，你必须安装了 .NET SDK **和**\\ 支持 Mono 的 Godot 版本。"

#, fuzzy
msgid ""
"Download and install the latest stable version of the SDK from the `.NET "
"download page <https://dotnet.microsoft.com/download>`__."
msgstr ""
"安装最新的稳定版 `.NET SDK <https://dotnet.microsoft.com/download>`__\\ ，之"
"前叫做 .NET Core SDK。"

msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr "如果您使用 64 位版本的 Godot，请务必安装 64 位版本的 SDK。"

#, fuzzy
msgid ""
"If you are building Godot from source, make sure to follow the steps to "
"enable .NET support in your build as outlined in the :ref:"
"`doc_compiling_with_dotnet` page."
msgstr ""
"如果你是从源码编译Godot, 请安装最新的稳定版 `Mono <https://www.mono-project."
"com/download/stable/>`__ , 并确保按照 :ref:`doc_compiling_with_mono` 页面中概"
"述的步骤在构建中启用Mono支持."

msgid "Configuring an external editor"
msgstr "配置外部编辑器"

#, fuzzy
msgid ""
"C# support in Godot's built-in script editor is minimal. Consider using an "
"external IDE or editor, such as  `Visual Studio Code <https://code."
"visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, "
"debugging, and other useful features for C#. To select an external editor in "
"Godot, click on **Editor → Editor Settings** and scroll down to **Dotnet**. "
"Under **Dotnet**, click on **Editor**, and select your external editor of "
"choice. Godot currently supports the following external editors:"
msgstr ""
"Godot内置的脚本编辑器对C#的支持是最小的. 考虑使用外部IDE或编辑器, 如 `Visual "
"Studio Code <https://code.visualstudio.com/>`__ 或MonoDevelop. 这些都为C#提供"
"了自动完成, 调试和其他有用的功能. 要在Godot中选择一个外部编辑器, 点击 "
"**Editor → Editor Settings** , 向下滚动到 **Mono** . 在 **Mono** 下, 点击 "
"**Editor** , 然后选择您的外部编辑器.Godot目前支持以下外部编辑器:"

msgid "Visual Studio 2019"
msgstr "Visual Studio 2019"

#, fuzzy
msgid "Visual Studio 2022"
msgstr "Visual Studio 2019"

msgid "Visual Studio Code"
msgstr "Visual Studio Code"

msgid "MonoDevelop"
msgstr "MonoDevelop"

msgid "Visual Studio for Mac"
msgstr "Mac版的Visual Studio"

msgid "JetBrains Rider"
msgstr "JetBrains Rider"

msgid "See the following sections for how to configure an external editor:"
msgstr "关于如何配置外部编辑器, 请参见以下章节:"

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""
"阅读完 \"预备知识\" 部分, 就可以下载安装 `JetBrains Rider <https://www."
"jetbrains.com/rider/download>`__ ."

msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr "在Godot的 **Editor → Editor Settings** 菜单中:"

#, fuzzy
msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr ""
"设置 **Mono** -> **Editor** -> **External Editor** 为 **JetBrains Rider** ."

msgid "In Rider:"
msgstr "在Rider中:"

msgid "Set **MSBuild version** to **.NET Core**."
msgstr "设置 **MSBuild version** 为 **.NET Core** ."

msgid "Install the **Godot support** plugin."
msgstr "安装 **Godot支持** 插件."

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""
"看完 \"预备知识\" 部分, 就可以下载安装 `Visual Studio Code <https://code."
"visualstudio.com/download>`__ (又名VS Code)."

#, fuzzy
msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio "
"Code**."
msgstr ""
"设置 **Mono** -> **Editor** -> **External Editor** 为 **Visual Studio "
"Code** ."

msgid "In Visual Studio Code:"
msgstr "在 Visual Studio Code 中:"

msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""
"安装 `C # <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ 扩展."

msgid ""
"If you are using Linux you need to install the `Mono SDK <https://www.mono-"
"project.com/download/stable/#download-lin>`__ for the C# tools plugin to "
"work."
msgstr ""
"如果你使用的是 Linux，需要安装 `Mono SDK <https://www.mono-project.com/"
"download/stable/#download-lin>` 才能使用 C# 工具插件。"

msgid ""
"To configure a project for debugging, you need a ``tasks.json`` and ``launch."
"json`` file in the ``.vscode`` folder with the necessary configuration. An "
"example configuration can be found `here <https://github.com/godotengine/"
"godot-csharp-vscode/issues/43#issuecomment-1258321229>`__ . In the ``launch."
"json`` file, make sure the ``program`` parameter in the relevant "
"configuration points to your Godot executable, either by changing it to the "
"path of the executable or by defining a ``GODOT4`` environment variable that "
"points to the executable. Now, when you start the debugger in Visual Studio "
"Code, your Godot project will run."
msgstr ""

msgid ""
"There is also a `C# Tools for Godot <https://marketplace.visualstudio.com/"
"items?itemName=neikeq.godot-csharp-vscode>`__ Visual Studio Code extension, "
"that is meant to make this setup easier and to provide further useful tools. "
"But it is not yet updated to work with Godot 4."
msgstr ""

msgid "Visual Studio (Windows only)"
msgstr "Visual Studio (仅限Windows)"

msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""
"下载并安装最新版本的 `Visual Studio <https://visualstudio.microsoft.com/"
"downloads/>`__ . 如果你选择了正确的工作负载,Visual Studio将包含所需的SDK, 所"
"以你不需要手动安装 \"预先告知\" 部分列出的内容."

#, fuzzy
msgid "While installing Visual Studio, select this workload:"
msgstr "在安装Visual Studio时, 选择这些工作负载:"

#, fuzzy
msgid ".NET desktop development"
msgstr "编辑器开发"

#, fuzzy
msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr ""
"设置 **Mono** -> **Editor** -> **External Editor** 为 **Visual Studio** ."

msgid ""
"Next, you can download the Godot Visual Studio extension from github `here "
"<https://github.com/godotengine/godot-csharp-visualstudio/releases>`__. "
"Double click on the downloaded file and follow the installation process."
msgstr ""
"接下来，你需要在\\ `这里 <https://github.com/godotengine/godot-csharp-"
"visualstudio/releases>`__\\ 从 GitHub 上下载 Godot Visual Studio 扩展。双击下"
"载的文件，并按照安装过程进行安装。"

msgid ""
"The option to debug your game in Visual Studio may not appear after "
"installing the extension. To enable debugging, there is a `workaround for "
"Visual Studio 2019 <https://github.com/godotengine/godot-csharp-visualstudio/"
"issues/10#issuecomment-720153256>`__. There is `a separate issue about this "
"problem in Visual Studio 2022 <https://github.com/godotengine/godot-csharp-"
"visualstudio/issues/28>`__."
msgstr ""
"安装扩展后，可能不会出现在 Visual Studio 里调试游戏的选项。要启用调试，有一个"
"\\ `针对 Visual Studio 2019 的变通方案 <https://github.com/godotengine/godot-"
"csharp-visualstudio/issues/10#issuecomment-720153256>`__\\ 。这个问题针对 "
"Visual Studio 2022 有\\ `单独的工单 <https://github.com/godotengine/godot-"
"csharp-visualstudio/issues/28>`__\\ 。"

msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""
"如果你看到了类似“Unable to find package Godot.NET.Sdk”的错误，你的 NuGet 配置"
"可能有问题，需要进行修复。"

msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""
"修复 NuGet 配置文件的简单方法就是重新生成一个。在文件浏览器窗口中前往 "
"``%AppData%\\NuGet``\\ 。将 ``NuGet.Config`` 文件重命名或删除。重新构建 "
"Godot 项目时，就会自动用默认值创建该文件。"

msgid "Creating a C# script"
msgstr "创建C#脚本"

msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"成功为Godot设置C#之后, 在场景的节点的上下文菜单中选择 ``附加脚本`` 时, 应该看"
"到以下选项:"

#, fuzzy
msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some documentation "
"pages still lack C# examples, most notions can be transferred from GDScript."
msgstr ""
"请注意, 虽然在某些细节上有所差别, 使用C#编写代码时, 大多数概念的工作方式是相"
"通的. 如果您是刚接触Godot的新手, 此时您可能需要按照以下教程 :ref:"
"`doc_scripting`. 虽然在文档中缺乏详细的C#示例, 但大部分概念都能够在GDScript轻"
"松地阐述清楚."

msgid "Project setup and workflow"
msgstr "项目设置和工作流程"

#, fuzzy
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.godot/mono``). All of these but ``.godot/mono`` are important and should "
"be committed to your version control system. Everything under ``.godot`` can "
"be safely added to the ignore list of your VCS. When troubleshooting, it can "
"sometimes help to delete the ``.godot/mono`` folder and let it regenerate."
msgstr ""
"当您创建第一个C#脚本时,Godot会为您的Godot项目初始化C#项目文件. 这包括生成C#解"
"决方案( ``.sln`` )和项目文件( ``.csproj`` ), 以及一些实用程序文件和文件夹"
"( ``Properties/AssemblyInfo.cs`` 和 ``.mono``). 除了 ``.mono`` 之外的所有这些"
"都很重要, 应该被保存在您的版本控制系统中. 而 ``.mono`` 可以安全地添加到VCS的"
"忽略列表中. 在进行故障排除时, 删除 ``.mono`` 文件夹并让它重新生成, 有时可能会"
"有所帮助."

msgid "Example"
msgstr "示例"

msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "这是一个空白的C#脚本, 带有一些注释, 以演示其工作方式."

#, fuzzy
msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` static class which is part of "
"the ``Godot`` namespace. For a full list of methods in the ``GD`` class, see "
"the class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"如您所见, 通常在GDScript中的全局作用域内的函数(如Godot的 ``print`` 函数)可在 "
"``GD`` 类中使用, 该类是 ``Godot`` 命名空间的一部分. 有关 ``GD`` 类中方法的列"
"表, 请参见 :ref:`@GDScript <class_@gdscript>` 和 :ref:`@GlobalScope "
"<class_@globalscope>` 的类参考页."

#, fuzzy
msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error:"
msgstr ""
"请记住, 您希望附加到节点上的类应与 ``.cs`` 文件具有相同的名称. 否则, 您将收到"
"以下错误, 并且将无法运行场景: *\"无法找到类XXX, 对应脚本res://XXX.cs\"*"

msgid "*\"Cannot find class XXX for script res://XXX.cs\"*"
msgstr ""

msgid "General differences between C# and GDScript"
msgstr "C#和GDScript之间的一般差异"

msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"C#API使用 ``PascalCase`` 而不是GDScript / C++中使用的 ``snake_case`` . 在可能"
"的情况下, 字段和getters/setters已转换为属性. 一般来说,C#Godot API一贯力求尽可"
"能合理."

msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr "有关更多信息, 请参见 :ref:`doc_c_sharp_differences` 页面."

#, fuzzy
msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the word **Build** in the top right corner of the "
"editor. You can also click **MSBuild** at the bottom of the editor window to "
"reveal the MSBuild panel, then click the **Build** button to reveal a "
"dropdown, then click the **Build Solution** option."
msgstr ""
"每当你想在编辑器中看到新导出的变量或信号时，你都需要重新构建项目。这种构建可"
"以通过点击编辑器右上角的 **Build** 来手动触发。你也可以点击编辑器窗口底部的 "
"**Mono** 来显示Mono面板，然后点击 **Build Project** 按钮。"

msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr "你还需要重新构建项目集, 以应用 \"工具\" 脚本中的更改."

msgid "Current gotchas and known issues"
msgstr "目前的陷阱和已知问题"

#, fuzzy
msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for .NET issues <https://github.com/"
"godotengine/godot/labels/topic%3Adotnet>`_."
msgstr ""
"由于C#支持对Godot来说是比较新, 因此仍有一些成长的痛苦和事情需要解决. 以下是在"
"Godot中使用C#时应注意的最重要问题的列表, 但是如果有疑问, 还可以查看官方的 "
"`Mono 问题的问题追踪器 <https://github.com/godotengine/godot/labels/"
"topic%3Amono>`_."

msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr "编写编辑器插件是可能的, 但是目前相当复杂."

msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr "热重载时, 当前状态不被保存和恢复, 导出变量除外."

msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr "附加C#脚本需要引用一个类, 该类名需要匹配其文件名."

#, fuzzy
msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation. Prefer "
"using the exposed ``StringName`` in the ``PropertyName``, ``MethodName`` and "
"``SignalName`` to avoid extra ``StringName`` allocations and worrying about "
"snake_case naming."
msgstr ""
"``Get()``/``Set()``, ``Call()``/``CallDeferred()`` 等方法, 以及信号连接方法 "
"``Connect()`` 都依赖于Godot的 ``snake_case`` API命名规范. 所以, "
"``CallDeferred(\"AddChild\")`` 无法调用 ``AddChild`` , 因为API需要原始 "
"``snake_case`` 版本的 ``add_child`` . 不过, 自定义属性和方法没有此限制."

#, fuzzy
msgid ""
"As of Godot 4.0, exporting .NET projects is supported for desktop platforms "
"(Linux, Windows and macOS). Other platforms will gain support in future 4.x "
"releases."
msgstr ""
"导出 Mono 项目支持桌面平台（Linux、Windows 和 macOS）、Android、HTML5 和 "
"iOS，唯一还不支持的平台是 UWP。"

#, fuzzy
msgid "Common pitfalls"
msgstr "注释"

msgid ""
"You might encounter the following error when trying to modify some values in "
"Godot objects, e.g. when trying to change the X coordinate of a ``Node2D``:"
msgstr ""

msgid ""
"This is perfectly normal. Structs (in this example, a ``Vector2``) in C# are "
"copied on assignment, meaning that when you retrieve such an object from a "
"property or an indexer, you get a copy of it, not the object itself. "
"Modifying said copy without reassigning it afterwards won't achieve anything."
msgstr ""

msgid ""
"The workaround is simple: retrieve the entire struct, modify the value you "
"want to modify, and reassign the property."
msgstr ""

msgid ""
"Since C# 10, it is also possible to use `with expressions <https://learn."
"microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-"
"expression>`_ on structs, allowing you to do the same thing in a single line."
msgstr ""

msgid ""
"You can read more about this error on the `C# language reference <https://"
"learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/"
"cs1612>`_."
msgstr ""

msgid "Performance of C# in Godot"
msgstr "在Godot中C#的性能"

#, fuzzy
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads."
msgstr ""
"根据一些初步的 `基准测试 <https://github.com/cart/godot3-bunnymark>`_ ，C#在"
"Godot中的性能——虽然通常处于相同的数量级——但在某些天真的情况下大约是使用"
"GDScript的 **~4×** 。C++仍然要快一些； 具体情况将根据您的用例而有所不同。对于"
"大多数常规脚本工作负载而言，GDScript可能足够快。C#速度更快，但与Godot通信时需"
"要进行一些昂贵的编组（marshalling）。"

msgid ""
"Most properties of Godot C# objects that are based on ``GodotObject`` (e.g. "
"any ``Node`` like ``Control`` or ``Node3D`` like ``Camera3D``) require "
"native (interop) calls as they talk to Godot's C++ core. Consider assigning "
"values of such properties into a local variable if you need to modify or "
"read them multiple times at a single code location:"
msgstr ""

msgid ""
"Passing raw arrays (such as ``byte[]``) or ``string`` to Godot's C# API "
"requires marshalling which is comparatively pricey."
msgstr ""

msgid ""
"The implicit conversion from ``string`` to ``NodePath`` or ``StringName`` "
"incur both the native interop and marshalling costs as the ``string`` has to "
"be marshalled and passed to the respective native constructor."
msgstr ""

msgid "Using NuGet packages in Godot"
msgstr "在Godot中使用NuGet包"

msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`NuGet <https://www.nuget.org/>`_ 包可以与Godot一起安装和使用, 就像任何C#项目"
"一样. 许多IDE都可以直接添加软件包. 也可以通过在项目根目录下的 ``.csproj`` 文"
"件中添加软件包引用来手动添加它们:"

msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""
"从Godot 3.2.3开始，Godot在下次构建项目时自动下载并设置新添加的NuGet包。"

msgid "Profiling your C# code"
msgstr "分析 C# 代码"

msgid ""
"The following tools may be used for performance and memory profiling of your "
"managed code:"
msgstr ""

msgid "JetBrains Rider with dotTrace/dotMemory plugin."
msgstr ""

msgid "Standalone JetBrains dotTrace/dotMemory."
msgstr ""

#, fuzzy
msgid "Visual Studio."
msgstr "Visual Studio"

msgid ""
"Profiling managed and unmanaged code at once is possible with both JetBrains "
"tools and Visual Studio, but limited to Windows."
msgstr ""

msgid "Translation status"
msgstr "翻译状态"
