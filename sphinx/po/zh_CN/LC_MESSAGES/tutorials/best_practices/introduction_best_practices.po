# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2022, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-08 13:53+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction"
msgstr "前言"

msgid ""
"This series is a collection of best practices to help you work efficiently "
"with Godot."
msgstr "本系列是最佳实践的集合, 可帮助您有效地使用Godot."

msgid ""
"Godot allows for a great amount of flexibility in how you structure a "
"project's codebase and break it down into scenes. Each approach has its pros "
"and cons, and they can be hard to weigh until you've worked with the engine "
"for long enough."
msgstr ""
"Godot允许你在如何构建项目的代码库和将其分解为场景方面有很大的灵活性. 每种方法"
"都有它的优点和缺点, 在你与该引擎磨合足够长的时间之前, 很难权衡."

msgid ""
"There are always many ways to structure your code and solve specific "
"programming problems. It would be impossible to cover them all here."
msgstr ""
"总是有很多方法可以构造代码并解决特定的编程问题. 这里不可能涵盖所有内容."

msgid ""
"That is why each article starts from a real-world problem. We will break "
"down each problem in fundamental questions, suggest solutions, analyze the "
"pros and cons of each option, and highlight the best course of action for "
"the problem at hand."
msgstr ""
"这就是为什么每篇文章, 都是从一个现实世界的问题开始的. 我们将每个问题, 分解为"
"基本问题, 提出解决方案, 分析每种选择的利弊, 并强调针对当前问题的最佳解决方案."

msgid ""
"You should start by reading :ref:`doc_what_are_godot_classes`. It explains "
"how Godot's nodes and scenes relate to classes and objects in other Object-"
"Oriented programming languages. It will help you make sense of the rest of "
"the series."
msgstr ""
"你应该从阅读 :ref:`doc_what_are_godot_classes` 开始. 它解释了Godot的节点和场"
"景如何与其他面向对象的编程语言中的类和对象关联. 它将帮助你理解该系列的其他内"
"容."

msgid ""
"The best practices in Godot rely on Object-Oriented design principles. We "
"use tools like the `single responsibility <https://en.wikipedia.org/wiki/"
"Single_responsibility_principle>`_ principle and `encapsulation <https://en."
"wikipedia.org/wiki/Encapsulation_(computer_programming)>`_."
msgstr ""
"Godot中的最佳实践, 依赖于面向对象的设计原则. 我们使用诸如 `单一职责 <https://"
"en.wikipedia.org/wiki/Single_responsibility_principle>`_ 原则和 `封装 "
"<https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)>`_ 之类的"
"工具."

msgid "Translation status"
msgstr "翻译状态"
