# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 10:56+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/viewports/viewports.rst:4
msgid "Viewports"
msgstr "视区"

#: ../../docs/tutorials/viewports/viewports.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/viewports/viewports.rst:9
#, fuzzy
msgid ""
"Think of a :ref:`Viewport <class_Viewport>` as a screen onto which the game "
"is projected. In order to see the game, we need to have a surface on which "
"to draw it; that surface is the Root :ref:`Viewport <class_Viewport>`."
msgstr ""
"将 :ref:`Viewports <class_Viewport>` 想成投影游戏的荧幕。 为了看到游戏，我们"
"需要有一个表面来绘制它，这个表面是根节点的 :ref:`Viewport <class_Viewport>`。"

#: ../../docs/tutorials/viewports/viewports.rst:16
#, fuzzy
msgid ""
":ref:`Viewports <class_Viewport>` can also be added to the scene so that "
"there are multiple surfaces to draw on. When we are drawing to a :ref:"
"`Viewport <class_Viewport>` that is not the Root, we call it a render "
"target. We can access the contents of a render target by accessing its "
"corresponding :ref:`texture <class_ViewportTexture>`. By using a :ref:"
"`Viewport <class_Viewport>` as a render target, we can either render "
"multiple scenes simultaneously or we can render to a :ref:`texture "
"<class_ViewportTexture>` which is applied to an object in the scene, for "
"example a dynamic skybox."
msgstr ""
":ref:`Viewports <class_Viewport>` 也可以添加到场景中，以便绘制多视区。 当我们"
"绘制到一个不是根节点的 :ref:`Viewport <class_Viewport>` 时， 我们将该视区称为"
"渲染目标。 我们可以通过访问它对应的 :ref:`texture <class_ViewportTexture>` 属"
"性来访问渲染目标的内容。 通过使用作为渲染目标的 :ref:`Viewport "
"<class_Viewport>` ，我们要么可以同时渲染多个场景，要么可以渲染到场景中对象"
"的 :ref:`texture <class_ViewportTexture>` ，例如 一个动态的天空盒。"

#: ../../docs/tutorials/viewports/viewports.rst:25
#, fuzzy
msgid ""
":ref:`Viewports <class_Viewport>` have a variety of use cases, including:"
msgstr ":ref:`Viewports <class_Viewport>` 有各种用例，包括:"

#: ../../docs/tutorials/viewports/viewports.rst:27
msgid "Rendering 3D objects within a 2D game"
msgstr "在2D游戏中渲染3D物体"

#: ../../docs/tutorials/viewports/viewports.rst:28
msgid "Rendering 2D elements in a 3D game"
msgstr "在3D游戏中渲染2D元素"

#: ../../docs/tutorials/viewports/viewports.rst:29
msgid "Rendering dynamic textures"
msgstr "渲染动态纹理"

#: ../../docs/tutorials/viewports/viewports.rst:30
msgid "Generating procedural textures at runtime"
msgstr "在游戏运行时生成过程纹理"

#: ../../docs/tutorials/viewports/viewports.rst:31
msgid "Rendering multiple cameras in the same scene"
msgstr "在同一场景中渲染多个摄像机"

#: ../../docs/tutorials/viewports/viewports.rst:33
#, fuzzy
msgid ""
"What all these use cases have in common is that you are given the ability to "
"draw objects to a texture as if it were another screen and can then choose "
"what to do with the resulting texture."
msgstr ""
"所有这些用例的共同之处在于，您可以将对象绘制到纹理中，就像它在另一个屏幕那"
"样，然后您可以选择如何处理生成的纹理。"

#: ../../docs/tutorials/viewports/viewports.rst:38
msgid "Input"
msgstr "输入"

#: ../../docs/tutorials/viewports/viewports.rst:40
#, fuzzy
msgid ""
":ref:`Viewports <class_Viewport>` are also responsible for delivering "
"properly adjusted and scaled input events to all their children nodes. "
"Typically, input is received by the nearest :ref:`Viewport <class_Viewport>` "
"in the tree, but you can set :ref:`Viewports <class_Viewport>` not to "
"receive input by checking 'Disable Input' to 'on'; this will allow the next "
"nearest :ref:`Viewport <class_Viewport>` in the tree to capture the input."
msgstr ""
":ref:`Viewports <class_Viewport>` 还负责向其所有子节点提供正确调整和缩放的输"
"入事件。 通常输入是由树中最近的 :ref:`Viewport <class_Viewport>` 接收的，但您"
"可以通过选中 '禁用输入' 为 'on' 来设置 :ref:`Viewports <class_Viewport>` 不接"
"收输入，这将允许树中下个最近的 :ref:`Viewport <class_Viewport>` 来捕获输入。"

#: ../../docs/tutorials/viewports/viewports.rst:48
#, fuzzy
msgid ""
"For more information on how Godot handles input, please read the :ref:`Input "
"Event Tutorial<doc_inputevent>`."
msgstr ""
"有关Godot如何处理输入的更多信息，请阅读 :ref:`Input Event "
"Tutorial<doc_inputevent>` 。"

#: ../../docs/tutorials/viewports/viewports.rst:51
msgid "Listener"
msgstr "侦听器"

#: ../../docs/tutorials/viewports/viewports.rst:53
#, fuzzy
msgid ""
"Godot supports 3D sound (in both 2D and 3D nodes); more on this can be found "
"in the :ref:`Audio Streams Tutorial<doc_audio-streams>`. For this type of "
"sound to be audible, the :ref:`Viewport <class_Viewport>` needs to be "
"enabled as a listener (for 2D or 3D). If you are using a custom :ref:"
"`Viewport <class_Viewport>` to display your :ref:`World <class_World>`, "
"don't forget to enable this!"
msgstr ""
"Godot支持3D声音(在2D和3D节点中)，更多内容可以在 :ref:`Audio Streams "
"Tutorial<doc_audio-streams>` 中找到。 要使这种类型的声音被听到，需要启用 :"
"ref:`Viewport <class_Viewport>` 作为侦听器(用于2D或3D)。 如果您使用自定义 :"
"ref:`Viewport <class_Viewport>` 来显示您的 :ref:`World <class_World>` ，别忘"
"了开启它！"

#: ../../docs/tutorials/viewports/viewports.rst:60
msgid "Cameras (2D & 3D)"
msgstr "摄像机 (2D和3D)"

#: ../../docs/tutorials/viewports/viewports.rst:62
msgid ""
"When using a :ref:`Camera <class_Camera>` / :ref:`Camera2D "
"<class_Camera2D>`, cameras will always display on the closest parent :ref:"
"`Viewport <class_Viewport>` (going towards the root). For example, in the "
"following hierarchy:"
msgstr ""
"当使用 :ref:`Camera <class_Camera>` / :ref:`Camera2D <class_Camera2D>` 时，摄"
"像机将始终显示在最近的父节点上 :ref:`Viewport <class_Viewport>` (朝向根节"
"点)。 例如，在下面的层次结构中:"

#: ../../docs/tutorials/viewports/viewports.rst:69
msgid ""
"CameraA will display on the Root :ref:`Viewport <class_Viewport>` and it "
"will draw MeshA. CameraB will be captured by the :ref:`Viewport "
"<class_Viewport>` Node along with MeshB. Even though MeshB is in the scene "
"hierarchy, it will still not be drawn to the Root :ref:`Viewport "
"<class_Viewport>`. Similarly MeshA will not be visible from the :ref:"
"`Viewport <class_Viewport>` node because :ref:`Viewport <class_Viewport>` "
"nodes only capture nodes below them in the hierarchy."
msgstr ""
"CameraA将显示根节点的 :ref:`Viewport <class_Viewport>` ，它将绘制MeshA。 "
"CameraB将被 :ref:`Viewport <class_Viewport>` 节点以及MeshB捕获。 即使MeshB在"
"场景层次结构中，它仍然不会被绘制到根节点的 :ref:`Viewport <class_Viewport>` "
"中。 类似地，在 :ref:`Viewport <class_Viewport>` 节点中不会看到MeshA，因为 :"
"ref:`Viewport <class_Viewport>` 节点仅捕获层次结构中它下面的节点。"

#: ../../docs/tutorials/viewports/viewports.rst:75
msgid ""
"There can only be one active camera per :ref:`Viewport <class_Viewport>`, so "
"if there is more than one, make sure that the desired one has the \"current"
"\" property set, or make it the current camera by calling:"
msgstr ""
"每个视区只能有一个激活的摄像机, 因此, 如果有多个摄像机时, 请确保您需要的那个"
"摄像机的“current”属性被设置上，或者通过调用以下语句来使其成为当前摄像机:"

#: ../../docs/tutorials/viewports/viewports.rst:84
msgid "Scale & stretching"
msgstr "缩放和拉伸"

#: ../../docs/tutorials/viewports/viewports.rst:86
#, fuzzy
msgid ""
":ref:`Viewports <class_Viewport>` have a \"size\" property, which represents "
"the size of the :ref:`Viewport <class_Viewport>` in pixels. For :ref:"
"`Viewports <class_Viewport>` which are children of :ref:`ViewportContainers "
"<class_viewportcontainer>`, these values are overridden, but for all others, "
"this sets their resolution."
msgstr ""
":ref:`Viewports <class_Viewport>` 有一个“size”属性，以像素为单位表示 :ref:"
"`Viewports <class_Viewport>` 的大小。 对 :ref:`ViewportContainers "
"<class_viewportcontainer>` 的子节点 :ref:`Viewports <class_Viewport>` ，这些"
"值被覆盖，但是在其他情况下，它设置了视区的分辨率。"

#: ../../docs/tutorials/viewports/viewports.rst:90
#, fuzzy
msgid ""
"It is also possible to scale the 2D content and make the :ref:`Viewport "
"<class_Viewport>` resolution different from the one specified in size, by "
"calling:"
msgstr ""
"通过调用以下语句，还可以缩放2D内容, 使其忽略 :ref:`Viewport "
"<class_Viewport>` 中已指定的视区分辨率:"

#: ../../docs/tutorials/viewports/viewports.rst:98
msgid ""
"The root :ref:`Viewport <class_Viewport>` uses this for the stretch options "
"in the project settings. For more information on scaling and stretching "
"visit the :ref:`Multiple Resolutions Tutorial <doc_multiple_resolutions>`"
msgstr ""
"根节点的 :ref:`Viewport <class_Viewport>` 用到项目设置中的拉伸选项。 有关缩放"
"和拉伸的更多信息，请访问 :ref:`Multiple Resolutions Tutorial "
"<doc_multiple_resolutions>`"

#: ../../docs/tutorials/viewports/viewports.rst:102
msgid "Worlds"
msgstr "世界"

#: ../../docs/tutorials/viewports/viewports.rst:104
#, fuzzy
msgid ""
"For 3D, a :ref:`Viewport <class_Viewport>` will contain a :ref:`World "
"<class_World>`. This is basically the universe that links physics and "
"rendering together. Spatial-base nodes will register using the :ref:`World "
"<class_World>` of the closest :ref:`Viewport <class_Viewport>`. By default, "
"newly created :ref:`Viewports <class_Viewport>` do not contain a :ref:`World "
"<class_World>` but use the same as their parent :ref:`Viewport "
"<class_Viewport>` (the root :ref:`Viewport <class_Viewport>` always contains "
"a :ref:`World <class_World>`, which is the one objects are rendered to by "
"default). A :ref:`World <class_World>` can be set in a :ref:`Viewport "
"<class_Viewport>` using the \"world\" property, and that will separate all "
"children nodes of that :ref:`Viewport <class_Viewport>` from interacting "
"with the parent :ref:`Viewport's <class_Viewport>` :ref:`World "
"<class_World>`. This is especially useful in scenarios where, for example, "
"you might want to show a separate character in 3D imposed over the game "
"(like in StarCraft)."
msgstr ""
"对于3D, 视区将包含一个 :ref:`World <class_World>` 类。这基本上就是一个把物理"
"和渲染联系在一起的宇宙世界。基于空间概念的节点将使用最接近的视区的世界进行注"
"册。默认情况下, 新创建的视区并不包含一个新的World对象, 而是使用与父视区相同的"
"World (但是根视区确实会包含一个World对象, 其他对象默认会渲染在里面)。可以使"
"用 \"world\" 属性在视区中设置一个世界, 这将隔离该视区的所有子节点同该视区的父"
"视区交互。这在某些情形下尤为有用, 例如, 您可能希望在游戏中以三维视角来看的上"
"方显示一个单独的字符(比如星际争霸)。"

#: ../../docs/tutorials/viewports/viewports.rst:116
msgid ""
"As a helper for situations where you want to create :ref:`Viewports "
"<class_Viewport>` that display single objects and don't want to create a :"
"ref:`World <class_World>`, :ref:`Viewport <class_Viewport>` has the option "
"to use its own :ref:`World <class_World>`. This is useful when you want to "
"instance 3D characters or objects in a 2D :ref:`World <class_World2D>`."
msgstr ""
"作为您想要创建的情况的帮助 :ref:`Viewports <class_Viewport>` 显示单个对象而不"
"想创建 :ref:`World <class_World>`， :ref:`Viewport <class_Viewport>` 可以选择"
"使用自己的 :ref:`World <class_World>`。 当您想要在2D :ref:`World "
"<class_World2D>` 中实例化3D角色或对象时，这非常有用。"

#: ../../docs/tutorials/viewports/viewports.rst:121
msgid ""
"For 2D, each :ref:`Viewport <class_Viewport>` always contains its own :ref:"
"`World2D <class_World2D>`. This suffices in most cases, but in case sharing "
"them may be desired, it is possible to do so by setting the :ref:`Viewport's "
"<class_Viewport>` :ref:`World2D <class_World2D>` manually."
msgstr ""
"对于2D，每个 :ref:`Viewport <class_Viewport>` 总是包含它自己的 :ref:`World2D "
"<class_World2D>` 。 这在大多数情况下都足够了，但是如果需要共享它们，可以手动"
"设置 :ref:`Viewport的 <class_Viewport>` :ref:`World2D <class_World2D>` 。"

#: ../../docs/tutorials/viewports/viewports.rst:125
#, fuzzy
msgid ""
"For an example of how this works, see the demo projects `3D in 2D <https://"
"github.com/godotengine/godot-demo-projects/tree/master/viewport/3d_in_2d>`_ "
"and `2D in 3D <https://github.com/godotengine/godot-demo-projects/tree/"
"master/viewport/2d_in_3d>`_ respectively."
msgstr ""
"有关其工作原理的示例，请分别参阅演示项目 `3D in 2D <https://github.com/"
"godotengine/godot-demo-projects/tree/master/viewport/3d_in_2d>`_ 和 `2D in "
"3D <https://github.com/godotengine/godot-demo-projects/tree/master/"
"viewport/2d_in_3d>`_ 。"

#: ../../docs/tutorials/viewports/viewports.rst:128
msgid "Capture"
msgstr "截图"

#: ../../docs/tutorials/viewports/viewports.rst:130
#, fuzzy
msgid ""
"It is possible to query a capture of the :ref:`Viewport <class_Viewport>` "
"contents. For the root :ref:`Viewport <class_Viewport>`, this is effectively "
"a screen capture. This is done with the following code:"
msgstr ""
"可以查询 :ref:`Viewport <class_Viewport>` 内容的捕获。 对于root :ref:"
"`Viewport <class_Viewport>` 这实际上是一个屏幕截图。 这是通过以下代码完成的:"

#: ../../docs/tutorials/viewports/viewports.rst:147
#, fuzzy
msgid ""
"But if you use this in _ready() or from the first frame of the :ref:"
"`Viewport's <class_Viewport>` initialization, you will get an empty texture "
"because there is nothing to get as texture. You can deal with it using (for "
"example):"
msgstr ""
"但是如果您在_ready()或者从 :ref:`Viewport的<class_Viewport>` 初始化的第一帧中"
"使用它，您将获得一个空纹理，因为没有什么可以作为纹理。 您可以使用(例如)处理"
"它:"

#: ../../docs/tutorials/viewports/viewports.rst:158
#, fuzzy
msgid ""
"If the returned image is empty, capture still didn't happen, wait a little "
"more, as Godot's rendering API is asynchronous. For a working example of "
"this, check out the `Screen Capture example <https://github.com/godotengine/"
"godot-demo-projects/tree/master/viewport/screen_capture>`_ in the demo "
"projects"
msgstr ""
"如果返回的图像为空，则捕获仍然没有发生，等待一点，因为Godot的渲染API是异步"
"的。 有关此示例，请查看演示项目中的 `屏幕捕获示例 <https://github.com/"
"godotengine/godot-demo-projects/tree/master/viewport/screen_capture>`_"

#: ../../docs/tutorials/viewports/viewports.rst:163
msgid "Viewport Container"
msgstr "视区容器"

#: ../../docs/tutorials/viewports/viewports.rst:165
msgid ""
"If the :ref:`Viewport <class_Viewport>` is a child of a :ref:"
"`ViewportContainer <class_viewportcontainer>`, it will become active and "
"display anything it has inside. The layout looks like this:"
msgstr ""
"如果 :ref:`Viewport <class_Viewport>` 是 :ref:`ViewportContainer "
"<class_viewportcontainer>` 的子节点，它将变为活动状态并显示其内部的任何内"
"容。 布局看起来像这样:"

#: ../../docs/tutorials/viewports/viewports.rst:169
msgid ""
"The :ref:`Viewport <class_Viewport>` will cover the area of its parent :ref:"
"`ViewportContainer <class_viewportcontainer>` completely if stretch is set "
"to true in :ref:`ViewportContainer <class_viewportcontainer>`. Note: The "
"size of the :ref:`ViewportContainer <class_viewportcontainer>` cannot be "
"smaller than the size of the :ref:`Viewport <class_Viewport>`."
msgstr ""
":ref:`Viewport <class_Viewport>` 将覆盖其父级的区域 :ref:`ViewportContainer "
"<class_viewportcontainer>` 如果在以下情况下将stretch设置为true :ref:"
"`ViewportContainer <class_viewportcontainer>`。 注意: :ref:"
"`ViewportContainer <class_viewportcontainer>` 的大小不能小于 :ref:`Viewport "
"<class_Viewport>` 的大小。"

#: ../../docs/tutorials/viewports/viewports.rst:174
msgid "Rendering"
msgstr "渲染"

#: ../../docs/tutorials/viewports/viewports.rst:176
#, fuzzy
msgid ""
"Due to the fact that the :ref:`Viewport <class_Viewport>` is an entryway "
"into another rendering surface, it exposes a few rendering properties that "
"can be different from the project settings. The first is MSAA; you can "
"choose to use a different level of MSAA for each :ref:`Viewport "
"<class_Viewport>`; the default behavior is DISABLED. You can also set the :"
"ref:`Viewport <class_Viewport>` to use HDR, HDR is very useful for when you "
"want to store values in the texture that are outside the range 0.0 - 1.0."
msgstr ""
"由于以下事实 :ref:`Viewport <class_Viewport>` 是进入另一个渲染表面的入口，它"
"会暴露一些可能与项目设置不同的渲染属性。 第一个是MSAA，您可以选择为每个使用不"
"同级别的MSAA :ref:`Viewport <class_Viewport>`，默认行为是DISABLED。 您还可以"
"设置 :ref:`Viewport <class_Viewport>` 以使用HDR，当您想要在纹理中存储超出"
"0.0  -  1.0范围的值时，HDR非常有用。"

#: ../../docs/tutorials/viewports/viewports.rst:181
#, fuzzy
msgid ""
"If you know how the :ref:`Viewport <class_Viewport>` is going to be used, "
"you can set its Usage to either 3D or 2D. Godot will then restrict how the :"
"ref:`Viewport <class_Viewport>` is drawn to in accordance with your choice; "
"default is 3D."
msgstr ""
"如果您知道如何使用 :ref:`Viewport <class_Viewport>` ，您可以将其用法设置为3D"
"或2D。 然后Godot将限制如何 :ref:`Viewport <class_Viewport>` 根据您的选择绘"
"制，默认为3D。"

#: ../../docs/tutorials/viewports/viewports.rst:184
msgid ""
"Godot also provides a way of customizing how everything is drawn inside :ref:"
"`Viewports <class_Viewport>` using “Debug Draw”. Debug Draw allows you to "
"specify one of four options for how the :ref:`Viewport <class_Viewport>` "
"will display things drawn inside it. Debug Draw is disabled by default."
msgstr ""
"Godot还提供了一种自定义内部绘制方式的方法 :ref:`Viewports <class_Viewport>` "
"使用“Debug Draw”。 Debug Draw允许您指定以下四个选项之一 :ref:`Viewport "
"<class_Viewport>` 将显示在其中绘制的内容。 默认情况下禁用Debug Draw。"

#: ../../docs/tutorials/viewports/viewports.rst:190
msgid "*A scene drawn with Debug Draw disabled*"
msgstr "*禁用Debug Draw绘制的场景*"

#: ../../docs/tutorials/viewports/viewports.rst:192
msgid ""
"The other three options are Unshaded, Overdraw, and Wireframe. Unshaded "
"draws the scene without using lighting information so all the objects appear "
"flatly colored the color of their albedo."
msgstr ""
"其他三个选项是Unhaded，Overdraw和Wireframe。 无阴影在不使用光照信息的情况下绘"
"制场景，因此所有对象都显示为其反照率颜色的扁平颜色。"

#: ../../docs/tutorials/viewports/viewports.rst:198
msgid "*The same scene with Debug Draw set to Unshaded*"
msgstr "* Debug Draw设置为Unshaded *的相同场景"

#: ../../docs/tutorials/viewports/viewports.rst:200
msgid ""
"Overdraw draws the meshes semi-transparent with an additive blend so you can "
"see how the meshes overlap."
msgstr "Overdraw使用添加剂混合绘制半透明的网格，以便您可以看到网格重叠的方式。"

#: ../../docs/tutorials/viewports/viewports.rst:204
msgid "*The same scene with Debug Draw set to Overdraw*"
msgstr "* Debug Draw设置为Overdraw的同一场景*"

#: ../../docs/tutorials/viewports/viewports.rst:206
msgid ""
"Lastly, Wireframe draws the scene using only the edges of triangles in the "
"meshes. NOTE: As of this writing (v3.0.2), wireframe mode is not functional "
"and currently renders the scene normally."
msgstr ""
"最后，Wireframe仅使用网格中三角形的边缘绘制场景。 注意:在撰写本文时(v3.0.2)，"
"线框模式不起作用，并且当前正常渲染场景。"

#: ../../docs/tutorials/viewports/viewports.rst:210
msgid "Render target"
msgstr "渲染目标"

#: ../../docs/tutorials/viewports/viewports.rst:212
#, fuzzy
msgid ""
"When rendering to a :ref:`Viewport <class_Viewport>`, whatever is inside "
"will not be visible in the scene editor. To display the contents, you have "
"to draw the :ref:`Viewport's <class_Viewport>` :ref:`ViewportTexture "
"<class_ViewportTexture>` somewhere. This can be requested via code using "
"(for example):"
msgstr ""
"渲染到 :ref:`Viewport <class_Viewport>时，内部的任何内容都不会在场景编辑器中"
"显示。 要显示内容，您必须绘制 :ref:`Viewport的<class_Viewport>` :ref:"
"`ViewportTexture <class_ViewportTexture>` 某处。 这可以通过代码使用(例如):"

#: ../../docs/tutorials/viewports/viewports.rst:222
msgid ""
"Or it can be assigned in the editor by selecting \"New ViewportTexture\""
msgstr "或者可以通过选择“New ViewportTexture”在编辑器中指定它"

#: ../../docs/tutorials/viewports/viewports.rst:226
msgid ""
"and then selecting the :ref:`Viewport <class_Viewport>` you want to use."
msgstr "然后选择您想要使用的 :ref:`Viewport <class_Viewport>。"

#: ../../docs/tutorials/viewports/viewports.rst:230
#, fuzzy
msgid ""
"Every frame, the :ref:`Viewport <class_Viewport>`'s texture is cleared away "
"with the default clear color (or a transparent color if Transparent BG is "
"set to true). This can be changed by setting Clear Mode to Never or Next "
"Frame. As the name implies, Never means the texture will never be cleared, "
"while next frame will clear the texture on the next frame and then set "
"itself to Never."
msgstr ""
"每个帧 :ref:`Viewport <class_Viewport>` 的纹理用默认的清晰颜色(如果"
"Transparent BG设置为true，则为透明颜色)清除。 这可以通过将清除模式设置为从不"
"或下一帧来更改。 顾名思义，Never表示纹理永远不会被清除，而下一帧将清除下一帧"
"的纹理，然后将自己设置为Never。"

#: ../../docs/tutorials/viewports/viewports.rst:235
#, fuzzy
msgid ""
"By default, re-rendering of the :ref:`Viewport <class_Viewport>` happens "
"when the :ref:`Viewport <class_Viewport>`'s :ref:`ViewportTexture "
"<class_ViewportTexture>` has been drawn in a frame. If visible, it will be "
"rendered; otherwise, it will not. This behavior can be changed to manual "
"rendering (once), or always render, no matter if visible or not. This "
"flexibility allows users to render an image once and then use the texture "
"without incurring the cost of rendering every frame."
msgstr ""
"默认情况下，重新渲染 :ref:`Viewport <class_Viewport>` 发生在 :ref:`Viewport "
"<class_Viewport>` s :ref:`ViewportTexture <class_ViewportTexture>` 已经在框架"
"中绘制。 如果可见，它将被渲染，否则不会。 无论是否可见，此行为都可以更改为手"
"动渲染(一次)或始终渲染。 这种灵活性允许用户渲染一次图像然后使用纹理而不会产生"
"渲染每一帧的成本。"

#: ../../docs/tutorials/viewports/viewports.rst:243
msgid ""
"Make sure to check the Viewport demos! Viewport folder in the demos archive "
"available to download, or https://github.com/godotengine/godot-demo-projects/"
"tree/master/viewport"
msgstr ""
"一定要查看Viewport演示！ 可以下载演示档案中的Viewport文件夹，或https://"
"github.com/godotengine/godot-demo-projects/tree/master/viewport"
