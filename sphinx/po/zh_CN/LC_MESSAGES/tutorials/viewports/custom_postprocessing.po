# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-22 14:46+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:4
msgid "Custom post-processing"
msgstr "自定义后期处理"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:9
#, fuzzy
msgid ""
"Godot provides many post-processing effects out of the box, including Bloom, "
"DOF, and SSAO. Sometimes you want to write your own custom effect. Here's "
"how you can do so."
msgstr ""
"Godot提供了许多开箱即用的后处理效果，包括Bloom，DOF和SSAO。 有时您想编写自己"
"的自定义效果。 这是您如何做到的。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:12
msgid ""
"Post-processing effects are shaders applied to a frame after Godot rendered "
"it. You first want to render your scene into a :ref:`Viewport "
"<class_Viewport>`, then render the ``Viewport`` inside a :ref:"
"`ViewportTexture <class_ViewportTexture>` and show it on the screen."
msgstr ""
"后处理效果是在Godot渲染后应用于帧的着色器。 首先想要将场景渲染为 :ref:"
"`Viewport <class_Viewport>`，然后在 :ref:`ViewportTexture "
"<class_ViewportTexture>` 中渲染 ``Viewport`` 并在屏幕上显示它。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:16
msgid ""
"The easiest way to implement a custom post-processing shader is to use "
"Godot's built-in ability to read from the screen texture. If you're not "
"familiar with this, you should read the :ref:`Screen Reading Shaders "
"Tutorial <doc_screen-reading_shaders>` first."
msgstr ""
"实现自定义后处理着色器的最简单方法是使用Godot的内置功能从屏幕纹理中读取。 如"
"果您不熟悉这个，您应该先阅读 :ref:`屏幕阅读着色器教程<doc_screen-"
"reading_shaders>` 。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:22
#, fuzzy
msgid ""
"As of the time of writing, Godot does not support rendering to multiple "
"buffers at the same time. Your post-processing shader will not have access "
"to normals or other render passes. You only have access to the rendered "
"frame."
msgstr ""
"在撰写本文时，Godot不支持同时渲染到多个缓冲区。 您的后期处理着色器将无法访问"
"法线或其他渲染过程。 您只能访问渲染帧。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:27
msgid "Single pass post-processing"
msgstr "单通后处理"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:29
msgid ""
"You will need a ``Viewport`` to render your scene to, and a scene to render "
"your ``Viewport`` on the screen. You can use a :ref:`ViewportContainer "
"<class_ViewportContainer>` to display your ``Viewport`` on the entire screen "
"or inside another :ref:`Control <class_Control>` node."
msgstr ""
"您需要一个 ``Viewport`` 来渲染场景，一个场景在屏幕上渲染您的 ``Viewport`` 。 "
"您可以使用 :ref:`ViewportContainer <class_ViewportContainer>` 在整个屏幕上或"
"另一个屏幕内显示您的``Viewport`` :ref:`Control <class_Control>` 节点。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:36
#, fuzzy
msgid ""
"Rendering using a ``Viewport`` gives you control over how the scene render, "
"including the framerate, and you can use the ``ViewportContainer`` to render "
"3D objects in a 2D scene."
msgstr ""
"使用 ``Viewport`` 渲染可以控制场景的渲染方式，包括帧速率，您可以使用 "
"``ViewportContainer`` 在2D场景中渲染3D对象。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:40
#, fuzzy
msgid ""
"For this demo, we will use a :ref:`Node2D <class_Node2D>` with a "
"``ViewportContainer`` and finally a ``Viewport``. Your **Scene** tab should "
"look like this:"
msgstr ""
"对于这个演示，我们将使用 :ref:`Node2D <class_Node2D>` 和 "
"``ViewportContainer`` ，最后是 ``Viewport`` 。 您的“节点”选项卡应如下所示:"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:45
#, fuzzy
msgid ""
"Inside the ``Viewport``, you can have whatever you want. This will contain "
"your main scene. For this tutorial, we will use a field of random boxes:"
msgstr ""
"在“Viewport”里，您可以得到任何您想要的东西。这将包含您的主场景。对于本教程，"
"我们将使用一个随机框字段:"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:50
#, fuzzy
msgid ""
"Add a new :ref:`ShaderMaterial <class_ShaderMaterial>` to the "
"``ViewportContainer``, and assign a new shader resource to it. You can "
"access your rendered ``Viewport`` with the built-in ``TEXTURE`` uniform."
msgstr ""
"在 ``ViewportContainer`` 中添加一个新的a :ref:`ShaderMaterial "
"<class_ShaderMaterial>` ，并为其分配一个新的着色器资源。 您可以使用内置的 "
"``TEXTURE`` 制服来访问渲染的 ``Viewport`` 。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:55
#, fuzzy
msgid ""
"You can choose not to use a ``ViewportContainer``, but if you do so, you "
"will need to create your own uniform in the shader and pass the ``Viewport`` "
"texture in manually, like so:"
msgstr ""
"您可以选择不使用 ``ViewportContainer`` ，但如果这样做，您将需要在着色器中创建"
"自己的制服并手动传递 ``Viewport`` 纹理，如下所示:"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:64
msgid "And you can pass the texture into the shader from GDScript like so:"
msgstr "您可以将纹理从GDScript传递到着色器中，如下所示:"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:72
msgid ""
"Copy the following code to your shader. The above code is a single pass edge "
"detection filter, a `Sobel filter <https://en.wikipedia.org/wiki/"
"Sobel_operator>`_."
msgstr ""
"将以下代码复制到着色器。 上面的代码是单通道边缘检测滤波器， `Sobel滤波器 "
"<https://en.wikipedia.org/wiki/Sobel_operator>`_ 。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:94
msgid ""
"The Sobel filter reads pixels in a 9x9 grid around the current pixel and "
"adds them together, using weight. What makes it interesting is that it "
"assigns weights to each pixel; +1 for each of the eight around the center "
"and -8 for the center pixel. The choice of weights is called a \"kernel\". "
"You can use different kernels to create edge detection filters, outlines, "
"and all sorts of effects."
msgstr ""
"Sobel滤波器读取当前像素周围9x9网格中的像素，并使用权重将它们加在一起。 令人感"
"兴趣的是它为每个像素分配权重; 围绕中心的八个中的每一个都是+1，对于中心像素"
"是-8。 权重的选择称为“核心”。 您可以使用不同的内核来创建边缘检测过滤器，轮廓"
"和各种效果。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:102
msgid "Multi-pass post-processing"
msgstr "多通后处理"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:104
msgid ""
"Some post-processing effects like blur are resource intensive. If you break "
"them down in multiple passes however, you can make them run a lot faster. In "
"a multipass material, each pass takes the result from the previous pass as "
"an input and processes it."
msgstr ""
"像模糊这样的后处理效果是资源密集型的。 但是如果您在多次通过中将它们分解，您可"
"以让它们运行得更快。 在多通道材质中，每次传递都将前一次传递的结果作为输入并对"
"其进行处理。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:108
#, fuzzy
msgid ""
"To make a multi-pass post-processing shader, you stack ``Viewport`` nodes. "
"In the example above, you rendered the content of one ``Viewport`` object "
"into the root ``Viewport``, through a ``ViewportContainer`` node. You can do "
"the same thing for a multi-pass shader by rendering the content of one "
"``Viewport`` into another and then rendering the last ``Viewport`` into the "
"root ``Viewport``."
msgstr ""
"要制作多遍后处理着色器，请堆叠“Viewport”节点。 在上面的示例中，您通过 "
"``ViewportContainer`` 节点将一个 ``Viewport`` 对象的内容渲染到根 "
"``Viewport`` 中。 您可以通过将一个 ``Viewport`` 的内容渲染到另一个，然后将最"
"后一个 ``Viewport`` 渲染到根 ``Viewport`` 中来为多遍着色器做同样的事情。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:113
msgid "Your scene hierarchy will look something like this:"
msgstr "您的场景层次结构将如下所示:"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:117
msgid ""
"Godot will render the bottom ``Viewport`` node first. So if the order of the "
"passes matters for your shaders, make sure that you assign the shader you "
"want to apply first to the lowest ``ViewportContainer`` in the tree."
msgstr ""
"Godot将首先渲染底部的 ``Viewport`` 节点。 因此，如果遍历的顺序对着色器很重"
"要，请确保将要首先应用的着色器指定给树中最低的 ``ViewportContainer`` 。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:123
msgid ""
"You can also render your Viewports separately without nesting them like "
"this. You just need to use two Viewports and to render them one after the "
"other."
msgstr ""
"您也可以单独渲染视区，而不必像这样嵌套它们。 您只需要使用两个视区并一个接一个"
"地渲染它们。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:126
#, fuzzy
msgid ""
"Apart from the node structure, the steps are the same as with the single-"
"pass post-processing shader."
msgstr "除节点结构外，步骤与单遍后处理着色器相同。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:128
msgid ""
"As an example, you could write a full screen Gaussian blur effect by "
"attaching the following pieces of code to each of the :ref:"
"`ViewportContainers <class_ViewportContainer>`. The order in which you apply "
"the shaders does not matter:"
msgstr ""
"例如，您可以通过将以下代码段附加到以下每个代码来编写全屏高斯模糊效果 :ref:"
"`ViewportContainers <class_ViewportContainer>`。 应用着色器的顺序无关紧要:"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:168
#, fuzzy
msgid ""
"Using the above code, you should end up with a full screen blur effect like "
"below."
msgstr "使用上面的代码，您应该得到如下所示的全屏模糊效果。"

#: ../../docs/tutorials/viewports/custom_postprocessing.rst:172
#, fuzzy
msgid ""
"For more information on how ``Viewport`` nodes work, see the :ref:`Viewports "
"Tutorial <doc_viewports>`."
msgstr ""
"有关 ``Viewport`` 节点如何工作的更多信息，请参阅 :ref:`Viewports Tutorial "
"<doc_viewports>`。"
