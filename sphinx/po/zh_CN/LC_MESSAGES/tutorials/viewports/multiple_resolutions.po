# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-21 13:40+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:4
msgid "Multiple resolutions"
msgstr "多分辨率"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:8
#, fuzzy
msgid "The problem of multiple resolutions"
msgstr "多分辨率"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:10
msgid ""
"Developers often have trouble understanding  how to best support multiple "
"resolutions in their games. For Desktop and Console games this is more or "
"less straightforward, as most screen aspect ratios are 16:9 and resolutions "
"are standard (720,1080,2k,4k,etc)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:14
msgid ""
"For mobile games at first it was easy. For many years, the iPhone (and iPad) "
"used the same resolution. When *Retina* was implemented, they just doubled "
"the amount of pixel density (so most developers had assets in default and "
"double resolutions)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:18
msgid ""
"Nowadays this is no longer the case, as there are plenty of different screen "
"sizes, densities and aspect ratios for mobile, and non conventional sizes "
"are becoming trendy for Desktop, such as ultra-wide."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:22
msgid ""
"For 3D games there is not much of a need to support multiple resolutions "
"(from the aesthetic point of view). The 3D geometry will just fill the "
"screen based on the field-of-view, disregarding the aspect ratio. The main "
"reason one may want to support this, in this case, is for *performance* "
"reasons (running in lower resolution to increase frames per second)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:27
msgid ""
"For 2D and game UIs, this is a different matter, as art needs to be created "
"using specific pixel sizes in software such as Photoshop, Gimp, Krita, etc."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:30
msgid ""
"Given layouts, aspect ratios, resolutions and pixel densities can change so "
"much, it is no longer possible to design UIs for every specific screen. "
"Another method must be used."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:34
msgid "One size fits all"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:36
msgid ""
"The most common approach nowadays is to just use a single *base* resolution "
"and then fit it to everything else. This resolution is how most players are "
"expected to play the game (given their hardware). For mobile, Google has "
"useful `stats <https://developer.android.com/about/dashboards>`_ online, and "
"for desktop, Steam `also does <https://store.steampowered.com/hwsurvey/Steam-"
"Hardware-Software-Survey-Welcome-to-Steam>`_."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:41
msgid ""
"As an example, Steam shows that the most common *primary display resolution* "
"is 1920x1080, so a sensible approach is to develop a game for this "
"resolution, then handle scaling for different sizes and aspect ratios."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:43
#, fuzzy
msgid "Godot provides a several useful tools to do this easily."
msgstr "Godot 还提供了一系列通用的容器:"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:46
msgid "Base size"
msgstr "基本大小"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:48
msgid ""
"A base size for the window can be specified in the project settings under "
"\"Display\", \"Window\"."
msgstr "可以在“显示”，“窗口”下的项目设置中指定窗口的基本大小。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:53
msgid ""
"However, what it does is not completely obvious; the engine will *not* "
"attempt to switch the monitor to this resolution. Rather, think of this "
"setting as the \"design size\", i.e. the size of the area that you work with "
"in the editor. This setting corresponds directly to the size of the blue "
"rectangle in the 2D editor."
msgstr ""
"然而，它的作用并不完全明显; 引擎将 *不* 尝试将显示器切换到此分辨率。 相反，将"
"此设置视为“设计大小”，即您在编辑器中使用的区域的大小。 此设置直接对应于2D编辑"
"器中蓝色矩形的大小。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:59
msgid ""
"There is often a need to support devices with screen and window sizes that "
"are different from this base size. Godot offers many ways to control how the "
"viewport will be resized and stretched to different screen sizes."
msgstr ""
"通常需要支持具有与该基本大小不同的屏幕和窗口大小的设备。 Godot提供了许多方法"
"来控制视区的大小调整和拉伸到不同的屏幕大小。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:65
msgid "Resizing"
msgstr "调整大小"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:67
msgid ""
"There are several types of devices, with several types of screens, which in "
"turn have different pixel density and resolutions. Handling all of them can "
"be a lot of work, so Godot tries to make the developer's life a little "
"easier. The :ref:`Viewport <class_Viewport>` node has several functions to "
"handle resizing, and the root node of the scene tree is always a viewport "
"(scenes loaded are instanced as a child of it, and it can always be accessed "
"by calling ``get_tree().get_root()`` or ``get_node(\"/root\")``)."
msgstr ""
"市面上有着各种各样的设备, 拥有各种类型的屏幕, 依次有着不同的像素密度和分辨"
"率。处理所有的类型工作量巨大, 所以Godot试图让开发者的生活变得更简单。 :ref:"
"`Viewport <class_Viewport>` 节点提供了几个处理大小调整的函数, 而场景树的根节"
"点始终是一个Viewport (场景将作为它的子节点被实例化, 并且始终可以通过调用"
"``get_tree().get_root()`` 或``get_node(\"/root\")`` 来访问它。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:76
msgid ""
"In any case, while changing the root Viewport params is probably the most "
"flexible way to deal with the problem, it can be a lot of work, code and "
"guessing, so Godot provides a simple set of parameters in the project "
"settings to handle multiple resolutions."
msgstr ""
"在任何情况下, 虽然更改”根视区“的参数可能是解决问题的最灵活方法, 但这样做的可"
"能包含大量工作、大量代码和大量推测过程, 因此Godot在“项目设置”中提供了一组简单"
"的参数来处理多分辨率问题。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:82
msgid "Stretch settings"
msgstr "拉伸设置"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:84
msgid ""
"Stretch settings are located in the project settings, it's just a bunch of "
"configuration variables that provide several options:"
msgstr "拉伸设置位于项目设置中, 它只是一系列提供多种选项的配置变量:"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:90
msgid "Stretch Mode"
msgstr "拉伸模式 (Stretch mode)"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:92
msgid ""
"The \"Stretch Mode\" setting defines how the base size is stretched to fit "
"the resolution of the window or screen."
msgstr "“拉伸模式”设置定义如何拉伸基本大小以适合窗口或屏幕的分辨率。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:97
msgid ""
"The animations below use a \"base size\" of just 16×9 pixels to demonstrate "
"the effect of different stretch modes. A single sprite, also 16×9 pixels in "
"size, covers the entire viewport, and a diagonal :ref:`Line2D "
"<class_Line2D>` is added on top of it:"
msgstr ""
"下面的动画使用仅16×9像素的“基本大小”来演示不同拉伸模式的效果。 单个精灵，大小"
"也是16×9像素，覆盖整个视区，并在其上添加一个对角线 :ref:`Line2D "
"<class_Line2D>` :"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:107
msgid ""
"Stretch Mode = **Disabled** (default): No stretching happens. One unit in "
"the scene corresponds to one pixel on the screen. In this mode, the "
"\"Stretch Aspect\" setting has no effect."
msgstr ""
"拉伸模式= **禁用**(默认值):不进行拉伸。 场景中的一个单元对应于屏幕上的一个像"
"素。 在此模式下，“拉伸纵横比”设置无效。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:111
msgid ""
"This is a good option if you want full control over every screen pixel, and "
"is probably the best option for 3D games."
msgstr ""
"如果您想要完全控制每个屏幕像素，这是一个不错的选择，并且可能是3D游戏的最佳选"
"择。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:116
msgid ""
"Stretch Mode = **2D**: In this mode, the size specified in display/width and "
"display/height in the project settings will be stretched to cover the whole "
"screen (taking the \"Stretch Aspect\" setting into account). This means that "
"everything will be rendered directly at the target resolution. 3D will be "
"largely unaffected, while in 2D there is no longer a 1:1 correspondence "
"between sprite pixels and screen pixels, which may result in scaling "
"artifacts."
msgstr ""
"拉伸模式= ** 2D**: 在此模式下，项目设置中显示/宽度和显示/高度中指定的大小将被"
"拉伸以覆盖整个屏幕(考虑“拉伸方面”设置)。 这意味着所有内容都将直接以目标分辨率"
"呈现。 3D将基本上不受影响，而在2D中，精灵像素和屏幕像素之间不再存在1:1的对应"
"关系，这可能导致缩放伪像。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:124
msgid ""
"This is a good option if your 2D artwork has a sufficiently high resolution "
"and does not require pixel-perfect rendering. Consider enabling texture "
"filtering and mipmapping on your 2D textures and fonts."
msgstr ""
"如果您的2D图稿具有足够高的分辨率并且不需要像素完美渲染，那么这是一个不错的选"
"择。 考虑在2D纹理和字体上启用纹理过滤和mipmapping。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:131
msgid ""
"Stretch Mode = **Viewport**: Viewport scaling means that the size of the "
"root :ref:`Viewport <class_Viewport>` is set precisely to the base size "
"specified in the \"Display\" section of the project settings. The scene is "
"rendered to this viewport first. Finally, this viewport is scaled to fit the "
"screen (taking the \"Stretch Aspect\" setting into account)."
msgstr ""
"拉伸模式= **Viewport**: 视区缩放意味着根 :ref:`Viewport <class_Viewport>` 的"
"大小精确设置为项目设置的“显示”部分中指定的基本大小。 首先将场景渲染到此视"
"区。 最后，缩放此视区以适合屏幕(考虑“拉伸方面”设置)。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:138
msgid ""
"This mode is useful when working with pixel-precise games, or for the sake "
"of rendering to a lower resolution for improving performance."
msgstr ""
"在使用像素精确游戏时，或者为了提高性能而渲染到较低分辨率，此模式非常有用。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:144
msgid "Stretch Aspect"
msgstr "拉伸比例(Stretch aspect)"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:146
msgid ""
"The second setting is the stretch aspect. Note that this only takes effect "
"if \"Stretch Mode\" is set to something other than \"disabled\"."
msgstr ""
"第二个设置是拉伸方面。 请注意，仅当“拉伸模式”设置为“禁用”以外的其他值时，此操"
"作才会生效。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:149
msgid ""
"In the animations below, you will notice gray and black areas. The black "
"areas are added by the engine and cannot be drawn into. The gray areas are "
"part of your scene, and can be drawn to. The gray areas correspond to the "
"region outside the blue frame you see in the 2D editor."
msgstr ""
"在下面的动画中，您会注意到灰色和黑色区域。 黑色区域由引擎添加，无法绘制。 灰"
"色区域是场景的一部分，可以绘制。 灰色区域对应于您在2D编辑器中看到的蓝色框架外"
"的区域。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:154
msgid ""
"Stretch Aspect = **Ignore**: Ignore the aspect ratio when stretching the "
"screen. This means that the original resolution will be stretched to exactly "
"fill the screen, even if it's wider or narrower. This may result in "
"nonuniform stretching: things looking wider or taller than designed."
msgstr ""
"拉伸纵横比= **忽略**:拉伸屏幕时忽略纵横比。 这意味着原始分辨率将被拉伸以准确"
"填充屏幕，即使它更宽或更窄。 这可能导致拉伸不均匀:看起来比设计更宽或更高的东"
"西。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:162
msgid ""
"Stretch Aspect = **Keep**: Keep aspect ratio when stretching the screen. "
"This means that the viewport retains its original size regardless of the "
"screen resolution, and black bars will be added to the top/bottom of the "
"screen (\"letterboxing\") or the sides (\"pillarboxing\")."
msgstr ""
"拉伸纵横比= **保持**:拉伸屏幕时保持纵横比。 这意味着无论屏幕分辨率如何，视区"
"都会保留其原始大小，并且黑色条将添加到屏幕的顶部/底部(“letterboxing”)或侧面"
"(“pillarboxing”)。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:168
msgid ""
"This is a good option if you know the aspect ratio of your target devices in "
"advance, or if you don't want to handle different aspect ratios."
msgstr ""
"如果您事先知道目标设备的宽高比，或者您不想处理不同的宽高比，这是一个不错的选"
"择。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:174
msgid ""
"Stretch Aspect = **Keep Width**: Keep aspect ratio when stretching the "
"screen. If the screen is wider than the base size, black bars are added at "
"the left and right (pillarboxing). But if the screen is taller than the base "
"resolution, the viewport will be grown in the vertical direction (and more "
"content will be visible to the bottom). You can also think of this as "
"\"Expand Vertically\"."
msgstr ""
"拉伸纵横比= **保持宽度**:拉伸屏幕时保持纵横比。 如果屏幕宽于基本大小，则在左"
"侧和右侧添加黑条(柱框)。 但是如果屏幕高于基本分辨率，则视区将在垂直方向上生长"
"(并且底部可以看到更多内容)。 您也可以将其视为“垂直展开”。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:181
msgid ""
"This is usually the best option for creating GUIs or HUDs that scale, so "
"some controls can be anchored to the bottom (:ref:`doc_size_and_anchors`)."
msgstr ""
"这通常是创建可扩展的GUI或HUD的最佳选择，因此一些控件可以锚定到底部( :ref:"
"`doc_size_and_anchors`)。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:187
msgid ""
"Stretch Aspect = **Keep Height**: Keep aspect ratio when stretching the "
"screen. If the screen is taller than the base size, black bars are added at "
"the top and bottom (letterboxing). But if the screen is wider than the base "
"resolution, the viewport will be grown in the horizontal direction (and more "
"content will be visible to the right). You can also think of this as "
"\"Expand Horizontally\"."
msgstr ""
"拉伸纵横比= **保持高度**:拉伸屏幕时保持纵横比。 如果屏幕高于基本大小，则在顶"
"部和底部添加黑条(letterboxing)。 但是，如果屏幕比基本分辨率宽，则视区将在水平"
"方向上生长(并且右侧可以看到更多内容)。 您也可以将其视为“水平扩展”。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:194
msgid ""
"This is usually the best option for 2D games that scroll horizontally (like "
"runners or platformers)."
msgstr "这通常是水平滚动的2D游戏的最佳选择(如跑步者或平台游戏者)。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:199
msgid ""
"Stretch Aspect = **Expand**: Keep aspect ratio when stretching the screen, "
"but keep neither the base width nor height. Depending on the screen aspect "
"ratio, the viewport will either be larger in the horizontal direction (if "
"the screen is wider than the base size) or in the vertical direction (if the "
"screen is taller than the original size)."
msgstr ""
"拉伸纵横比= **展开**:拉伸屏幕时保持纵横比，但既不保持基本宽度也不保持高度。 "
"根据屏幕宽高比，视区将在水平方向上较大(如果屏幕宽于基本大小)或在垂直方向上(如"
"果屏幕高于原始大小)。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:209
msgid "Stretch Shrink"
msgstr "拉伸收缩"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:211
msgid ""
"The \"Shrink\" setting allows you to add an extra scaling factor on top of "
"what the \"Stretch\" options above already provide. The default value of 1 "
"means that no scaling occurs."
msgstr ""
"“收缩”设置允许您在上面提供的“拉伸”选项之上添加额外的缩放系数。 默认值1表示不"
"进行缩放。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:215
msgid ""
"If, for example, you set \"Shrink\" to 4 and leave \"Stretch Mode\" on "
"\"Disabled\", each unit in your scene will correspond to 4×4 pixels on the "
"screen."
msgstr ""
"例如，如果将“Shrink”设置为4并将“Stretch Mode”设置为“Disabled”，则场景中的每个"
"单元将对应于屏幕上的4×4像素。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:219
msgid ""
"If \"Stretch Mode\" is set to something other than \"Disabled\", the size of "
"the root viewport is scaled down by the \"Shrink\" factor, and pixels in the "
"output are scaled up by the same amount. This is rarely useful for 2D games, "
"but can be used to increase performance in 3D games by rendering them at a "
"lower resolution."
msgstr ""
"如果将“拉伸模式”设置为“禁用”以外的其他值，则根视区的大小将按“缩小”因子缩小，"
"并且输出中的像素按比例放大。 这对2D游戏很少有用，但可以通过以较低分辨率渲染来"
"提高3D游戏的性能。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:226
msgid "From scripts"
msgstr "来自脚本"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:228
#, fuzzy
msgid ""
"To configure stretching at runtime from a script, use the ``get_tree()."
"set_screen_stretch()`` function (see :ref:`SceneTree.set_screen_stretch() "
"<class_SceneTree_method_set_screen_stretch>`)."
msgstr ""
"要在运行时从脚本配置拉伸，请使用 ``get_tree().set_screen_stretch()`` 函数(请"
"参阅 :ref:`SceneTree.set_screen_stretch() "
"<class_SceneTree_method_set_screen_stretch>`)。"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:233
msgid "Reducing aliasing on downsampling"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:235
msgid ""
"If the game has a very high base resolution (say 4k), aliasing might appear "
"when downsampling to something considerably lower like 720. This can be "
"detected and reduced by forcing to shrink all images by 2 upon load (this is "
"very fast). This can be achieved by calling"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:245
msgid "Before most game data is loaded."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:248
#, fuzzy
msgid "Handling aspect ratios"
msgstr "处理通知"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:250
msgid ""
"Once scaling for different resolutions is accounted for, just make sure that "
"your *user interface* also scales for different aspect ratios. This can be "
"easily done using :ref:`anchors <doc_size_and_anchors>` and/or :ref:"
"`containers <doc_gui_containers>`."
msgstr ""
