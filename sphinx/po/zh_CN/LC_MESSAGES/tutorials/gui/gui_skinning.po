# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/gui/gui_skinning.rst:4
msgid "GUI skinning"
msgstr "GUI 外观定制"

#: ../../docs/tutorials/gui/gui_skinning.rst:7
msgid "Oh, beautiful GUI!"
msgstr "哦, 漂亮的GUI!"

#: ../../docs/tutorials/gui/gui_skinning.rst:9
msgid ""
"This tutorial is about advanced skinning of a user interface. Most games "
"generally don't need this, as they end up just relying on :ref:`Label "
"<class_Label>`, :ref:`TextureRect <class_TextureRect>`, :ref:`TextureButton "
"<class_TextureButton>` and :ref:`TextureProgress <class_TextureProgress>`."
msgstr ""
"本教程是关于用户界面的高级外观定制. 大多数游戏一般不需要这个, 因为他们最终只"
"依赖 :ref:`Label <class_Label>`, :ref:`TextureRect <class_TextureRect>`, :"
"ref:`TextureButton <class_TextureButton>` 和 :ref:`TextureProgress "
"<class_TextureProgress>`."

#: ../../docs/tutorials/gui/gui_skinning.rst:15
msgid ""
"However, many types of games often need complex user interfaces, like MMOs, "
"traditional RPGs, Simulators, Strategy, etc. These kinds of interface are "
"also common in some games that include editors to create content, or "
"interfaces for network connectivity."
msgstr ""
"然而, 许多类型的游戏往往需要复杂的用户界面, 如MMO, 传统RPG, 模拟, 战略等. 这"
"类界面在一些游戏中也很常见, 包括创建内容的编辑器, 或网络连接的界面."

#: ../../docs/tutorials/gui/gui_skinning.rst:20
msgid ""
"Godot's user interface uses these kinds of control with the default theme, "
"but they can be skinned to resemble pretty much any kind of user interface."
msgstr ""
"Godot的用户界面使用了这些带有默认主题的控件, 但它们可以被换上皮肤, 以类似于几"
"乎任何类型的用户界面."

#: ../../docs/tutorials/gui/gui_skinning.rst:25
msgid "Theme"
msgstr "主题"

#: ../../docs/tutorials/gui/gui_skinning.rst:27
msgid ""
"The GUI is skinned through the :ref:`Theme <class_Theme>` resource. Theme "
"contains all the information required to change the entire visual styling of "
"all controls. Theme options are named, so it's not obvious which name "
"changes what (especially from code), but several tools are provided. The "
"ultimate place to look at what each theme option is for each control, which "
"will always be more up to date than any documentation, is the file `scene/"
"resources/default_theme/default_theme.cpp <https://github.com/godotengine/"
"godot/blob/master/scene/resources/default_theme/default_theme.cpp>`__. The "
"rest of this document will explain the different tools used to customize the "
"theme."
msgstr ""
"GUI通过 :ref:`Theme <class_Theme>` 资源进行外观定制. 主题包含改变所有控件的整"
"体样式所需的所有信息. 主题选项是命名的, 所以哪个名称更改什么并不明显(尤其是从"
"代码中), 但提供了几个工具. 查看每个控件的每个主题选项的最终地方是 `scene/"
"resources/default_theme/default_theme.cpp <https://github.com/godotengine/"
"godot/blob/master/scene/resources/default_theme/default_theme.cpp>`__ 文件, "
"它总是比任何文档都更新及时. 本文档的其余部分将说明用于定制主题的不同工具."

#: ../../docs/tutorials/gui/gui_skinning.rst:38
msgid ""
"A Theme can be applied to any control in the scene. As a result, all "
"children and grand-children controls will use that same theme, too (unless "
"another theme is specified further down the tree). If a value is not found "
"in a theme, it will be searched in themes higher up in the hierarchy, "
"towards the root. If nothing was found, the default theme is used. This "
"system allows for flexible overriding of themes in complex user interfaces."
msgstr ""
"一个主题可以应用于场景中的任何控件. 因此, 所有的子级和孙级控件也将使用相同的"
"主题, 除非在树的下面指定了另一个主题. 如果在一个主题中没有找到一个值, 那么它"
"将在层次结构中朝着根的方向高层主题中搜索. 如果没有找到, 则使用默认主题. 当前"
"系统允许在复杂的用户界面中灵活地重写主题."

#: ../../docs/tutorials/gui/gui_skinning.rst:48
msgid ""
"Don't use the custom theme option in the Project Settings, as there are "
"known bugs with theme propagation. Instead, apply your theme to the root "
"Control node's Theme property. It will propagate to instanced scenes "
"automatically. To get correct theming in the editor for instanced scenes, "
"you can apply the theme resource to the instanced scene's root node as well."
msgstr ""
"不要使用 Project Settings 中的自定义主题选项, 因为主题传播存在已知的错误. 取"
"而代之的是, 将你的主题应用到根控制节点的主题属性中. 它将自动传播到实例场景"
"中. 要想在编辑器中获得正确的实例场景主题, 你还可以将主题资源也应用到实例场景"
"的根节点."

#: ../../docs/tutorials/gui/gui_skinning.rst:55
msgid "Theme options"
msgstr "主题选项"

#: ../../docs/tutorials/gui/gui_skinning.rst:57
msgid "Each kind of option in a theme can be:"
msgstr "一个主题中的每种选项可以是："

#: ../../docs/tutorials/gui/gui_skinning.rst:59
msgid ""
"**An integer constant**: A single numerical constant. Generally used to "
"define spacing between components or alignment."
msgstr "**整数常量** ：一个数值常量，一般用于定义组件的间距和对齐相关设置。"

#: ../../docs/tutorials/gui/gui_skinning.rst:61
msgid ""
"**A Color**: A single color, with or without transparency. Colors are "
"usually applied to fonts and icons."
msgstr "**颜色** ：单一颜色，具不具备透明度皆可。颜色通常应用于字体和图标。"

#: ../../docs/tutorials/gui/gui_skinning.rst:63
msgid ""
"**A Texture**: A single image. Textures are not often used, but when they "
"are, they represent handles to pick or icons in a complex control (such as a "
"file dialog)."
msgstr ""
"**纹理** ：一个单独的图像。纹理并不经常使用，但当它们被使用时，表示复杂控件中"
"的选取手柄或图标（如文件对话框）。"

#: ../../docs/tutorials/gui/gui_skinning.rst:66
msgid ""
"**A Font**: Every control that uses text can be assigned the fonts used to "
"draw strings."
msgstr "**字体** ：每个使用文本的控件都可以设置字体用于绘制字符串。"

#: ../../docs/tutorials/gui/gui_skinning.rst:68
msgid ""
"**A StyleBox**: Stylebox is a resource that defines how to draw a panel in "
"varying sizes (more information on them later)."
msgstr ""
"**样式盒** ：样式盒（Stylebox）是一种资源，用以定义如何绘制不同大小的面板（更"
"多信息见下文）。"

#: ../../docs/tutorials/gui/gui_skinning.rst:71
msgid "Every option is associated with:"
msgstr "每个选项都与以下内容关联:"

#: ../../docs/tutorials/gui/gui_skinning.rst:73
msgid "A name (the name of the option)"
msgstr "名称 (选项的名称)"

#: ../../docs/tutorials/gui/gui_skinning.rst:74
msgid "A Control (the name of the control)"
msgstr "控件 (控件的名称)"

#: ../../docs/tutorials/gui/gui_skinning.rst:76
msgid "An example usage:"
msgstr "示例用法:"

#: ../../docs/tutorials/gui/gui_skinning.rst:95
msgid ""
"In the example above, a new theme is created. The \"font_color\" option is "
"changed and then applied to a label. Therefore, the label's text (and all "
"children and grandchildren labels) will be red."
msgstr ""
"在上面的例子中, 一个新主题被创建.\"font_color\" 选项被改变, 然后应用于一个标"
"签. 进而, 该标签的文本以及所有子级和孙级标签, 将是红色."

#: ../../docs/tutorials/gui/gui_skinning.rst:99
msgid ""
"It is possible to override those options without using the theme directly, "
"and only for a specific control, by using the override API in :ref:`Control."
"add_color_override() <class_Control_method_add_color_override>`:"
msgstr ""
"通过使用 :ref:`Control.add_color_override() "
"<class_Control_method_add_color_override>` 中的重写API, 可以在不直接使用主题"
"的情况下覆盖这些选项, 这只针对特定的控件:"

#: ../../docs/tutorials/gui/gui_skinning.rst:114
msgid ""
"In the inline help of Godot (in the Script tab), you can check which theme "
"options are overridable, or check the :ref:`Control <class_Control>` class "
"reference."
msgstr ""
"在Godot的内置帮助中(在脚本选项卡中), 你可以查看哪些主题选项是可重写的, 或者查"
"看 :ref:`Control <class_Control>` 类的参考."

#: ../../docs/tutorials/gui/gui_skinning.rst:118
msgid "Customizing a control"
msgstr "自定义控件"

#: ../../docs/tutorials/gui/gui_skinning.rst:120
msgid ""
"If only a few controls need to be skinned, it is often not necessary to "
"create a new theme. Controls offer their theme options as special kinds of "
"properties. If checked, overriding will take place:"
msgstr ""
"如果只需要外观定制少数几个控件, 通常没有必要创建一个新主题. 控件提供其主题选"
"项作为特殊类型的属性(在检查面板上). 一旦勾选, 覆写就会生效:"

#: ../../docs/tutorials/gui/gui_skinning.rst:126
msgid ""
"As can be seen in the image above, theme options have little check boxes. If "
"checked, they can be used to override the value of the theme just for that "
"control."
msgstr ""
"从上面的图片中可以看出, 主题选项有一些小复选框. 如果选中, 它们可以用来覆盖该"
"控件的主题属性值."

#: ../../docs/tutorials/gui/gui_skinning.rst:131
msgid "Creating a theme"
msgstr "创建主题"

#: ../../docs/tutorials/gui/gui_skinning.rst:133
msgid ""
"The simplest way to create a theme is to edit a theme resource. Create a "
"Theme from the resource menu; the editor will appear immediately. After "
"that, save it (for example, with the name mytheme.theme):"
msgstr ""
"创建一个主题的最简单方法是编辑一个主题资源. 从资源菜单中创建一个主题；编辑器"
"随之出现. 之后, 保存它 (例如, 名称为mytheme.theme):"

#: ../../docs/tutorials/gui/gui_skinning.rst:139
msgid ""
"This will create an empty theme that can later be loaded and assigned to "
"controls."
msgstr "这将创建一个空主题, 之后可以将其加载并分配给控件."

#: ../../docs/tutorials/gui/gui_skinning.rst:143
msgid "Example: theming a button"
msgstr "示例: 指定一个按钮的主题"

#: ../../docs/tutorials/gui/gui_skinning.rst:145
msgid ""
"Download these assets (:download:`skin_assets.zip <files/skin_assets.zip>`) "
"and add them to your project. Open the theme editor, click on \"Edit Theme\" "
"and select \"Add Class Items\":"
msgstr ""
"下载这些资产(:download:`skin_assets.zip <files/skin_assets.zip>` )并将它们添"
"加到你的项目中. 打开主题编辑器, 点击 \"编辑主题\", 选择 \"Add Class Items\" :"

#: ../../docs/tutorials/gui/gui_skinning.rst:151
msgid ""
"A menu will appear prompting the type of control to create. Select \"Button"
"\":"
msgstr "然后将出现一个菜单, 提示要创建的控件类型. 选择 \"Button\":"

#: ../../docs/tutorials/gui/gui_skinning.rst:156
msgid ""
"Immediately, all button theme options will appear in the property editor, "
"where they can be edited:"
msgstr "所有按钮主题选项都将立刻显示在属性面板中, 可以在其中进行编辑:"

#: ../../docs/tutorials/gui/gui_skinning.rst:161
msgid ""
"From ``Styles``, open the \"Normal\" drop-down menu next to where it "
"probably says \"null\" and create a \"New StyleBoxTexture\", then edit it. A "
"texture stylebox contains a texture and the size of the margins that will "
"not stretch when the texture is stretched. This is called nine-patch or "
"\"3x3\" stretching:"
msgstr ""
"在 ``Styles`` 中，打开可能显示“空”旁边的“Normal”下拉菜单，选择“新建 "
"StyleBoxTexture”，然后编辑。纹理样式盒包含一个纹理和边距的尺寸，当纹理被拉伸"
"时，边距不会被拉伸。这就是所谓的九宫格或“3x3”拉伸："

#: ../../docs/tutorials/gui/gui_skinning.rst:169
msgid ""
"Repeat the steps and add the other assets. There is no hover or disabled "
"image in the example files, so use the same stylebox as in normal. Set the "
"supplied font as the button font and change the font color to black. Soon, "
"your button will look different and retro:"
msgstr ""
"重复上述步骤并添加其他资源。示例文件中没有提供“Hover”和“Disabled”的图片，因此"
"使用与“Normal”状态相同的样式盒。将提供的字体设置为按钮字体，并将字体颜色更改"
"为黑色。很快地，你的按钮就看起来不同了，并且变得复古："

#: ../../docs/tutorials/gui/gui_skinning.rst:176
msgid ""
"Save this theme to the .theme file. Go to the 2D editor and create a few "
"buttons:"
msgstr "把这个主题保存到 .theme文件中. 转到2D编辑器, 创建几个按钮:"

#: ../../docs/tutorials/gui/gui_skinning.rst:181
msgid ""
"Now, go to the root node of the scene and locate the \"theme\" property, "
"replace it with the theme that was just created. It should look like this:"
msgstr ""
"现在, 转到场景的根节点, 找到 \"theme\" 属性, 用刚刚创建的主题替换它. 它应该看"
"起来像这样:"

#: ../../docs/tutorials/gui/gui_skinning.rst:186
msgid "Congratulations! You have created a reusable GUI Theme!"
msgstr "恭喜咯！您已经创建了一个可反复使用的 GUI 主题!"
