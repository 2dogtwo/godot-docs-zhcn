# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-02 11:13+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:4
msgid "Kinematic character (2D)"
msgstr "动力学角色(二维)"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:9
msgid ""
"Yes, the name sounds strange. \"Kinematic Character\". What is that? The "
"reason for the name is that, when physics engines came out, they were called "
"\"Dynamics\" engines (because they dealt mainly with collision responses). "
"Many attempts were made to create a character controller using the dynamics "
"engines, but it wasn't as easy as it seemed. Godot has one of the best "
"implementations of dynamic character controller you can find (as it can be "
"seen in the 2d/platformer demo), but using it requires a considerable level "
"of skill and understanding of physics engines (or a lot of patience with "
"trial and error)."
msgstr ""
"是的，名字听起来很奇怪。 “动力学角色”。 那是什么？ 原因是当物理引擎问世时，它"
"们被称为“动力”引擎(因为它们主要处理碰撞响应)。 人们做了许多尝试，想使用动力引"
"擎创建一个角色控制器，但它并不像看起来那么容易。 Godot拥有您能找到的最好的动"
"态角色控制器(可以在 二维/游戏平台这个演示中查看)，但使用它需要相当高水平的技"
"能和对物理引擎的理解(或者对试验和试错有足够的耐心)。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:19
msgid ""
"Some physics engines, such as Havok seem to swear by dynamic character "
"controllers as the best option, while others (PhysX) would rather promote "
"the kinematic one."
msgstr ""
"像Havok这样的物理引擎似乎认为动态角色控制器是最好的选择，而其他物理引擎"
"(PhysX)则更愿意推广动力学。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:23
msgid "So, what is the difference?:"
msgstr "那么区别是什么呢？:"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:25
#, fuzzy
msgid ""
"A **dynamic character controller** uses a rigid body with an infinite "
"inertia tensor. Basically, it's a rigid body that can't rotate. Physics "
"engines always let objects collide, then solve their collisions all "
"together. This makes dynamic character controllers able to interact with "
"other physics objects seamlessly (as seen in the platformer demo), however "
"these interactions are not always predictable. Collisions can also take more "
"than one frame to be solved, so a few collisions may seem to displace a tiny "
"bit. Those problems can be fixed, but require a certain amount of skill."
msgstr ""
"**动态角色控制器** 使用具有无限惯性张量的刚体。 基本上，它是一个不能旋转的刚"
"体。 物理引擎总是让物体碰撞，然后一起解决它们的碰撞。 这使得动态角色控制器能"
"够无缝地与其他物理对象交互(如平台演示程序中所示)，但这些交互并不总是可预测"
"的。 碰撞也可能需要多个帧来解决，因此一些碰撞似乎可以取代一点点。 这些问题可"
"以修复，但需要一定的技能。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:34
#, fuzzy
msgid ""
"A **kinematic character controller** is assumed to always begin in a non-"
"colliding state, and will always move to a non colliding state. If it starts "
"in a colliding state, it will try to free itself (like rigid bodies do), but "
"this is the exception, not the rule. This makes their control and motion a "
"lot more predictable and easier to program. However, as a downside, they "
"can't directly interact with other physics objects (unless done by hand in "
"code)."
msgstr ""
"**运动角色控制器** 被假设成以非碰撞状态开始，并且将始终移动到非碰撞状态。 如"
"果它以碰撞状态开始，它会尝试释放自己(就像刚体一样)，但这是例外，而不是规则。 "
"这使得他们的控制和动作更容易被预测并且更容易编程。 但是缺点是，它们不能直接与"
"其他物理对象交互(除非在代码中手动完成)。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:42
msgid ""
"This short tutorial will focus on the kinematic character controller. "
"Basically, the old-school way of handling collisions (which is not "
"necessarily simpler under the hood, but well hidden and presented as a nice "
"and simple API)."
msgstr ""
"这个简短的教程将重点介绍动力学角色控制器。基本上，传统处理冲突的方法(它并不一"
"定在底层更简单，但隐蔽性很好，并且呈现为一个简洁漂亮的API)。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:48
msgid "Physics process"
msgstr "物理过程"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:50
msgid ""
"To manage the logic of a kinematic body or character, it is always advised "
"to use physics process, because it's called before physics step and its "
"execution is in sync with physics server, also it is called the same amount "
"of times per second, always. This makes physics and motion calculation work "
"in a more predictable way than using regular process, which might have "
"spikes or lose precision if the frame rate is too high or too low."
msgstr ""
"为了管理运动物体或角色的逻辑，总是建议使用物理过程，因为它在物理步骤之前被调"
"用并且它的执行与物理服务器同步，它也被称为每秒相同的次数。 这使得物理和运动计"
"算以比使用常规过程更可预测的方式工作，如果帧速率太高或太低，则可能具有尖峰或"
"丢失精度。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:79
msgid "Scene setup"
msgstr "建立场景"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:81
msgid ""
"To have something to test, here's the scene (from the tilemap tutorial): :"
"download:`kbscene.zip <files/kbscene.zip>`. We'll be creating a new scene "
"for the character. Use the robot sprite and create a scene like this:"
msgstr ""
"要测试一下，这里是场景(来自tilemap教程): :download:`kbscene.zip <files/"
"kbscene.zip>`。 我们将为角色创造一个新场景。 使用机器人精灵并创建一个这样的场"
"景:"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:87
msgid ""
"You'll notice that there's a warning icon next to our CollisionShape2D node; "
"that's because we haven't defined a shape for it. Create a new CircleShape2D "
"in the shape property of CollisionShape2D. Click on <CircleShape2D> to go to "
"the options for it, and set the radius to 30:"
msgstr ""
"您会注意到，在\"二维碰撞形状\"（CollisionShape2D）节点旁边有一个警告图标；那"
"是因为我们还没有定义它的形状。在\"二维碰撞形状\"（CollisionShape2D）的形状属"
"性中创建一个新的二维圆形形状（CircleShape2D）。点击<二维圆形形状"
">（CircleShape2D）进入选项，将半径设置为30:"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:94
#, fuzzy
msgid ""
"**Note: As mentioned before in the physics tutorial, the physics engine "
"can't handle scale on most types of shapes (only collision polygons, planes "
"and segments work), so always change the parameters (such as radius) of the "
"shape instead of scaling it. The same is also true for the kinematic/rigid/"
"static bodies themselves, as their scale affects the shape scale.**"
msgstr ""
"**注意:如前面在物理教程中所提到的，物理引擎无法处理大多数类型的形状(只有碰撞"
"多边形，平面和线段工作)，所以总是改变形状的参数(如半径) 缩放它。 运动/刚性/静"
"态物体本身也是如此，因为它们的尺度会影响形状比例。**"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:101
#, fuzzy
msgid ""
"Now, create a script for the character, the one used as an example above "
"should work as a base."
msgstr "现在为角色创建一个脚本，上面用作示例的脚本应该作为基础。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:104
msgid ""
"Finally, instance that character scene in the tilemap, and make the map "
"scene the main one, so it runs when pressing play."
msgstr ""
"最后，实例化tilemap中的角色场景，并使地图场景成为主场景，因此在按下播放时运"
"行。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:110
#, fuzzy
msgid "Moving the kinematic character"
msgstr "移动运动学角色(2D)"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:112
#, fuzzy
msgid ""
"Go back to the character scene, and open the script, the magic begins now! "
"Kinematic body will do nothing by default, but it has a useful function "
"called :ref:`KinematicBody2D.move_and_collide() "
"<class_KinematicBody2D_method_move_and_collide>`. This function takes a :ref:"
"`Vector2 <class_Vector2>` as an argument, and tries to apply that motion to "
"the kinematic body. If a collision happens, it stops right at the moment of "
"the collision."
msgstr ""
"回到角色场景，打开脚本，魔法就要开始！ 默认情况下，运动体不会做任何事情，但它"
"有一个有用的函数叫做 :ref:`KinematicBody2D."
"move_and_collide()<class_KinematicBody2D_method_move_and_collide>`。 此函数"
"将 :ref:`Vector2 <class_Vector2>` 作为参数，并尝试将该运动应用于运动体。 如果"
"发生碰撞，它会在碰撞时停止。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:120
msgid "So, let's move our sprite downwards until it hits the floor:"
msgstr "所以，让我们向下移动我们的精灵，直到它撞上地板:"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:144
msgid ""
"The result is that the character will move, but stop right when hitting the "
"floor. Pretty cool, huh?"
msgstr "结果是角色会移动，但在击中地板时会停止。 很酷，对吧？"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:147
#, fuzzy
msgid ""
"The next step will be adding gravity to the mix, this way it behaves a "
"little more like a regular game character:"
msgstr "下一步将增加重力，这样它的行为更像一个真正的游戏角色:"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:183
#, fuzzy
msgid ""
"Now the character falls smoothly. Let's make it walk to the sides, left and "
"right when touching the directional keys. Remember that the values being "
"used (for speed at least) are pixels/second."
msgstr ""
"现在角色顺利落下。 当触摸方向键时，让它向左侧和右侧行走。 请记住，所使用的值"
"(至少速度)是像素/秒。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:187
msgid "This adds simple walking support by pressing left and right:"
msgstr "通过向左和向右按下可以增加简单的步行支持:"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:252
msgid "And give it a try."
msgstr "试一试。"

#: ../../docs/tutorials/physics/kinematic_character_2d.rst:254
msgid ""
"This is a good starting point for a platformer. A more complete demo can be "
"found in the demo zip distributed with the engine, or in the https://github."
"com/godotengine/godot-demo-projects/tree/master/2d/kinematic_character."
msgstr ""
"这是平台游戏的良好起点。 可以在随引擎分发的演示zip中找到更完整的演示，或者在"
"https://github.com/godotengine/godot-demo-projects/tree/master/2d/"
"kinematic_character中找到。"
