# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 18:00+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making HTTP requests"
msgstr "进行 HTTP 请求"

msgid "Why use HTTP?"
msgstr ""

msgid ""
"`HTTP requests <https://developer.mozilla.org/en-US/docs/Web/HTTP>`_ are "
"useful to communicate with web servers and other non-Godot programs."
msgstr ""

msgid ""
"Compared to Godot's other networking features (like :ref:`High-level "
"multiplayer <doc_high_level_multiplayer>`), HTTP requests have more overhead "
"and take more time to get going, so they aren't suited for real-time "
"communication, and aren't great to send lots of small updates as is common "
"for multiplayer gameplay."
msgstr ""

msgid ""
"HTTP, however, offers interoperability with external web resources and is "
"great at sending and receiving large amounts of data, for example to "
"transfer files like game assets."
msgstr ""

msgid ""
"So HTTP may be useful for your game's login system, lobby browser, to "
"retrieve some information from the web or to download game assets."
msgstr ""

msgid ""
"This tutorial assumes some familiarity with Godot and the Godot Editor. "
"Refer to the :ref:`Introduction <toc-learn-introduction>` and the :ref:`Step "
"by step <toc-learn-step_by_step>` tutorial, especially its :ref:`Nodes and "
"Scenes <doc_nodes_and_scenes>` and :ref:`Creating your first script "
"<doc_scripting_first_script>` pages if needed."
msgstr ""

#, fuzzy
msgid "HTTP requests in Godot"
msgstr "进行 HTTP 请求"

msgid ""
"The :ref:`HTTPRequest <class_HTTPRequest>` node is the easiest way to make "
"HTTP requests in Godot. It is backed by the more low-level :ref:`HTTPClient "
"<class_HTTPClient>`, for which a tutorial is available :ref:`here "
"<doc_http_client_class>`."
msgstr ""
"在Godot中, 用 :ref:`HTTPRequest <class_HTTPRequest>` 节点发出HTTP请求是最简单"
"的方法. 它继承自更低级别的 :ref:`HTTPClient <class_HTTPClient>` , 相关的教程"
"见 :ref:`here <doc_http_client_class>`."

msgid ""
"For this example, we will make an HTTP request to GitHub to retrieve the "
"name of the latest Godot release."
msgstr ""

#, fuzzy
msgid ""
"When exporting to **Android**, make sure to enable the **Internet** "
"permission in the Android export preset before exporting the project or "
"using one-click deploy. Otherwise, network communication of any kind will be "
"blocked by the Android OS."
msgstr ""
"当导出到 Android 时，在导出项目或使用一键部署之前，确保在 Android 导出预设中"
"启用 ``INTERNET`` 权限。否则，任何形式的网络通信都会被 Android 系统阻止。"

#, fuzzy
msgid "Preparing the scene"
msgstr "准备场景"

msgid ""
"Create a new empty scene, add a root :ref:`Node <class_Node>` and add a "
"script to it. Then add a :ref:`HTTPRequest <class_HTTPRequest>` node as a "
"child."
msgstr ""

#, fuzzy
msgid "Scripting the request"
msgstr "启动项目"

msgid ""
"When the project is started (so in ``_ready()``), we're going to send an "
"HTTP request to Github using our :ref:`HTTPRequest <class_HTTPRequest>` "
"node, and once the request completes, we're going to parse the returned JSON "
"data, look for the ``name`` field and print that to console."
msgstr ""

msgid ""
"Save the script and the scene, and run the project. The name of the most "
"recent Godot release on Github should be printed to the output log. For more "
"information on parsing JSON, see the class references for :ref:`JSON "
"<class_JSON>`."
msgstr ""

msgid ""
"Note that you may want to check whether the ``result`` equals "
"``RESULT_SUCCESS`` and whether a JSON parsing error occurred, see the JSON "
"class reference and :ref:`HTTPRequest <class_HTTPRequest>` for more."
msgstr ""
"请注意, 您可能需要检查 ``result`` 是否等于 ``RESULT_SUCCESS`` 以及JSON解析错"
"误是否发生, 要了解更多信息, 请参阅JSON类型参考和 :ref:`HTTPRequest "
"<class_HTTPRequest>` ."

#, fuzzy
msgid ""
"You have to wait for a request to finish before sending another one. Making "
"multiple request at once requires you to have one node per request. A common "
"strategy is to create and delete HTTPRequest nodes at runtime as necessary."
msgstr ""
"请记住, 在发送另一个请求之前, 您必须等待请求完成. 一次发出多个请求需要每个请"
"求有一个节点. 常见的策略是在运行时根据需要创建和删除HTTPRequest节点."

#, fuzzy
msgid "Sending data to the server"
msgstr "将数据发送到服务器"

msgid ""
"Until now, we have limited ourselves to requesting data from a server. But "
"what if you need to send data to the server? Here is a common way of doing "
"it:"
msgstr ""
"到目前为止, 我们仅限于从服务器上请求数据. 但如果你需要向服务器发送数据呢？这"
"里有一个常见的方法:"

#, fuzzy
msgid "Setting custom HTTP headers"
msgstr "创建自定义容器"

#, fuzzy
msgid ""
"Of course, you can also set custom HTTP headers. These are given as a string "
"array, with each string containing a header in the format ``\"header: "
"value\"``. For example, to set a custom user agent (the HTTP ``User-Agent`` "
"header) you could use the following:"
msgstr ""
"当然, 您也可以设置自定义的HTTP头部. 它们以字符串数组的形式给出, 每个字符串都"
"包含一个格式为 ``\"header: value\"`` 的头部. 例如, 要设置自定义用户代理(HTTP"
"的 ``user-agent`` 头部部分), 您可以像这样使用:"

#, fuzzy
msgid ""
"Be aware that someone might analyse and decompile your released application "
"and thus may gain access to any embedded authorization information like "
"tokens, usernames or passwords. That means it is usually not a good idea to "
"embed things such as database access credentials inside your game. Avoid "
"providing information useful to an attacker whenever possible."
msgstr ""
"此外, 在使用授权调用API时, 请注意有人可能会分析和反编译已发布的应用程序, 因此"
"可能会访问到任何嵌入程序的授权信息, 如令牌, 用户名或密码等. 这意味着在游戏中"
"嵌入诸如数据库访问凭证之类的东西通常不是一个好主意. 尽可能避免提供对攻击者有"
"用的信息."

msgid "Translation status"
msgstr "翻译状态"
