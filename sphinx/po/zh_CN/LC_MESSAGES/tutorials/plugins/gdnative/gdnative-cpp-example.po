# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-04 23:31+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:4
msgid "GDNative C++ example"
msgstr "GDNative C ++示例"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:9
msgid ""
"This tutorial builds on top of the information given in the :ref:`GDNative C "
"example <doc_gdnative_c_example>`, so we highly recommend you read that "
"first."
msgstr ""
"本教程建立在：ref：`GDNative C example <doc_gdnative_c_example>`中给出的信息"
"之上，因此我们强烈建议您先阅读。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:13
msgid ""
"The C++ bindings for GDNative are built on top of the NativeScript GDNative "
"API and provide a nicer way to \"extend\" nodes in Godot using C++. This is "
"equivalent to writing scripts in GDScript, but in C++ instead."
msgstr ""
"GDNative的C ++绑定构建在NativeScript GDNative API之上，并提供了一种使用C ++在"
"Godot中“扩展”节点的更好方法。 这相当于在GDScript中编写脚本，而是在C ++中编写"
"脚本。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:18
msgid ""
"Godot 3.1 saw the introduction of the NativeScript 1.1 additions that "
"enabled the GDNative team to build a nicer C++ bindings library. These "
"changes have now been merged into the master branch and will be the way we "
"go forward. If you want to write a C++ GDNative plugin that also supports "
"Godot 3.0 you will need to use the 3.0 branch and the NativeScript 1.0 "
"syntax. We'll be showing them side by side in this writeup."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:26
msgid ""
"You can download the full example we'll be creating in this tutorial `on "
"GitHub <https://github.com/BastiaanOlij/gdnative_cpp_example>`_."
msgstr ""
"您可以在 `GitHub <https://github.com/BastiaanOlij/gdnative_cpp_example>`_上下"
"载我们将在本教程中创建的完整示例。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:30
msgid "Setting up the project"
msgstr "设置项目"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:32
msgid "There are a few prerequisites you'll need:"
msgstr "您需要一些先决条件："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:34
msgid "a Godot 3.x executable,"
msgstr "Godot 3.x可执行文件，"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:35
msgid "a C++ compiler,"
msgstr "一个C ++编译器，"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:36
msgid "SCons as a build tool,"
msgstr "SCons作为构建工具，"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:37
msgid ""
"a copy of the `godot-cpp repository <https://github.com/GodotNativeTools/"
"godot-cpp>`_."
msgstr ""
"`godot-cpp repository <https://github.com/GodotNativeTools/godot-cpp>`_ 的副"
"本。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:39
msgid ""
"See also :ref:`Compiling <toc-devel-compiling>` as the build tools are "
"identical to the ones you need to compile Godot from source."
msgstr ""
"另请参阅：ref：`编译 <toc-devel-compiling>` 因为构建工具与从源代码编译Godot所"
"需的构建工具相同。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:42
#, fuzzy
msgid ""
"You can download these repositories from GitHub or let Git do the work for "
"you. Note that these repositories now have different branches for different "
"versions of Godot. GDNative modules written for an earlier version of Godot "
"will work in newer versions (with the exception of one breaking change in "
"ARVR interfaces between 3.0 and 3.1) but not vise versa so make sure you "
"download the correct branch. Also note that the version of Godot you use to "
"generate the ``api.json`` with becomes your minimum version."
msgstr ""
"您可以从GitHub下载这些存储库，或让Git为您完成工作。 请注意，这些存储库现在对"
"于不同版本的Godot具有不同的分支。 为早期版本的Godot编写的GDNative模块将在较新"
"版本中运行（除了3.0和3.1之间的ARVR接口的一次重大更改），但反之亦然，因此请确"
"保下载正确的分支。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:52
msgid ""
"If you are versioning your project using Git, it is a good idea to add them "
"as Git submodules:"
msgstr "如果您使用Git对项目进行版本控制，最好将它们添加为Git子模块："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:74
msgid ""
"If you decide to just download the repositories or clone them into your "
"project folder, make sure to keep the folder layout identical to the one "
"described here, as much of the code we'll be showcasing here assumes the "
"project follows this layout."
msgstr ""
"如果您决定只下载存储库或将它们克隆到项目文件夹中，请确保文件夹布局与此处描述"
"的相同，因为我们将在此处展示的代码假定项目遵循此布局。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:79
#, fuzzy
msgid "Do make sure you clone recursive to pull in both repositories:"
msgstr "确保你克隆递归以拉入两个存储库：.. code-block :: none"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:94
#, fuzzy
msgid ""
"``godot-cpp`` now includes ``godot_headers`` as a nested submodule, if "
"you've manually downloaded them please make sure to place ``godot_headers`` "
"inside of the ``godot-cpp`` folder."
msgstr ""
"我添加了``-b 3.0``作为示例，说明如何为特定版本的Godot选择特定分支。 另外"
"``godot-cpp``现在包含``godot_headers``作为嵌套子模块，如果你手动下载它们，请"
"确保在``godot-cpp``文件夹中放置``godot_headers``。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:96
#, fuzzy
msgid ""
"You don't have to do it this way but we've found it easiest to manage. If "
"you decide to just download the repositories or just clone them into your "
"folder, make sure to keep the folder layout the same as we've setup here as "
"much of the code we'll be showcasing here assumes the project has this "
"layout."
msgstr ""
"你不必这样做，但我发现它最容易管理。 如果您决定只下载存储库或只是将它们克隆到"
"您的文件夹中，请确保保持文件夹布局与我在此处设置的相同，因为我们将在此处展示"
"的代码假定项目具有此布局。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:98
msgid ""
"If you cloned the example from the link specified in the introduction, the "
"submodules are not automatically initialized. You will need to execute the "
"following commands:"
msgstr ""
"如果从介绍中指定的链接克隆示例，子模块不会自动初始化。 您需要执行以下命令："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:107
msgid "This will clone these two repositories into your project folder."
msgstr "这会将这两个存储库克隆到您的项目文件夹中。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:110
msgid "Building the C++ bindings"
msgstr "构建C ++绑定"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:112
msgid ""
"Now that we've downloaded our prerequisites, it is time to build the C++ "
"bindings."
msgstr "现在我们已经下载了我们的先决条件，现在是构建C ++绑定的时候了。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:115
msgid ""
"The repository contains a copy of the metadata for the current Godot "
"release, but if you need to build these bindings for a newer version of "
"Godot, simply call the Godot executable:"
msgstr ""
"存储库包含当前Godot版本的元数据副本，但如果您需要为较新版本的Godot构建这些绑"
"定，只需调用Godot可执行文件："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:123
msgid ""
"Place the resulting ``api.json`` file in the project folder and add "
"``use_custom_api_file=yes custom_api_file=../api.json`` to the scons command "
"below."
msgstr ""
"将生成的``api.json``文件放在项目文件夹中，并将``use_custom_api_file = yes "
"custom_api_file = .. / api.json``添加到下面的scons命令中。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:125
msgid ""
"To generate and compile the bindings, use this command (replacing "
"``<platform>`` with ``windows``, ``x11`` or ``osx`` depending on your OS):"
msgstr ""
"要生成和编译绑定，请使用此命令（根据您的操作系统将``<platform>``替换为"
"``windows``，``x11``或``osx``）："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:134
msgid ""
"This step will take a while. When it is completed, you should have static "
"libraries that can be compiled into your project stored in ``godot-cpp/bin/"
"``."
msgstr ""
"这一步将需要一段时间。 完成后，你应该有一个静态库，可以编译到你的项目中，存储"
"在``godot-cpp / bin /``中。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:137
msgid ""
"At some point in the future, compiled binaries will be available, making "
"this step optional."
msgstr "在将来的某个时刻，已编译的二进制文件将可用，使此步骤可选。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:140
msgid ""
"You may need to add ``bits=64`` to the command on Windows. We're still "
"working on better auto detection."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:143
msgid "Creating a simple plugin"
msgstr "创建一个简单的插件"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:145
msgid ""
"Now it's time to build an actual plugin. We'll start by creating an empty "
"Godot project in which we'll place a few files."
msgstr ""
"现在是构建实际插件的时候了。 我们首先创建一个空的Godot项目，我们将在其中放置"
"一些文件。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:148
msgid ""
"Open Godot and create a new project. For this example, we will place it in a "
"folder called ``demo`` inside our GDNative module's folder structure."
msgstr ""
"打开戈多并创建一个新项目。 对于这个例子，我们将它放在我们的GDNative模块的文件"
"夹结构中名为``demo``的文件夹中。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:151
msgid ""
"In our demo project, we'll create a scene containing a Node called \"Main\" "
"and we'll save it as ``main.tscn``. We'll come back to that later."
msgstr ""
"在我们的演示项目中，我们将创建一个包含名为“Main”的节点的场景，我们将其保存为"
"``main.tscn``。 我们稍后再回过头来看看。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:154
msgid ""
"Back in the top-level GDNative module folder, we're also going to create a "
"subfolder called ``src`` in which we'll place our source files."
msgstr ""
"回到顶级GDNative模块文件夹，我们还将创建一个名为``src``的子文件夹，我们将在其"
"中放置源文件。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:157
msgid ""
"You should now have ``demo``, ``godot-cpp``, ``godot_headers``, and ``src`` "
"directories in your GDNative module."
msgstr ""
"你现在应该在你的GDNative模块中有``demo``，``godot-cpp``，``godot_headers``和"
"``src``目录。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:160
msgid ""
"In the ``src`` folder, we'll start with creating our header file for the "
"GDNative node we'll be creating. We will name it ``gdexample.h``:"
msgstr ""
"在``src``文件夹中，我们将首先为我们将要创建的GDNative节点创建头文件。 我们将"
"它命名为``gdexample.h``："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:224
msgid ""
"There are a few things of note to the above. We're including ``Godot.hpp`` "
"which contains all our basic definitions. After that, we include ``Sprite."
"hpp`` which contains bindings to the Sprite class. We'll be extending this "
"class in our module."
msgstr ""
"以上有一些注意事项。 我们包括``Godot.hpp``，其中包含我们所有的基本定义。 之"
"后，我们包含``Sprite.hpp``，它包含对Sprite类的绑定。 我们将在我们的模块中扩展"
"这个类。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:229
msgid ""
"We're using the namespace ``godot``, since everything in GDNative is defined "
"within this namespace."
msgstr ""
"我们使用命名空间``godot``，因为GDNative中的所有内容都在此命名空间中定义。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:232
#, fuzzy
msgid ""
"Then we have our class definition, which inherits from our Sprite through a "
"container class. We'll see a few side effects of this later on. The "
"``GODOT_CLASS`` macro sets up a few internal things for us."
msgstr ""
"然后我们有了我们的类定义，它通过容器类从我们的Sprite继承。 我们稍后会看到一些"
"副作用。 这也是NativeScript 1.1中将要改进的主要部分。 ``GODOT_CLASS``宏为我们"
"设置了一些内部事物。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:236
msgid "After that, we declare a single member variable called ``time_passed``."
msgstr "之后，我们声明一个名为``time_passed``的成员变量。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:238
#, fuzzy
msgid ""
"In the next block we're defining our methods, we obviously have our "
"constructor and destructor defined, but there are two other functions that "
"will likely look familiar to some, and one new method."
msgstr ""
"在下一个块中我们定义了我们的方法，我们显然已经定义了构造函数和析构函数，但是"
"还有其他两个函数可能看起来很熟悉。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:242
#, fuzzy
msgid ""
"The first is ``_register_methods``, which is a static function that Godot "
"will call to find out which methods can be called on our NativeScript and "
"which properties it exposes. The second is our ``_process`` function, which "
"will work exactly the same as the ``_process`` function you're used to in "
"GDScript. The third is our ``_init`` function which is called after Godot "
"has properly set up our object. It has to exist even if you don't place any "
"code in it."
msgstr ""
"第一个是``_register_methods``，这是一个静态函数，戈多将调用它来找出可以在我们"
"的NativeScript上调用哪些方法以及它暴露的属性。 第二个是我们的``_process``函"
"数，它与你在GDScript中习惯的``_process``函数完全相同。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:251
#, fuzzy
msgid "Let's implement our functions by creating our ``gdexample.cpp`` file:"
msgstr "所以，让我们通过创建``gdexample.cpp``文件来实现我们的函数："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:311
#, fuzzy
msgid ""
"This one should be straightforward. We're implementing each method of our "
"class that we defined in our header file. Note that the ``register_method`` "
"call **must** expose the ``_process`` method, otherwise Godot will not be "
"able to use it. However, we do not have to tell Godot about our constructor, "
"destructor and ``_init`` functions."
msgstr ""
"这个应该是直截了当的。 我们正在实现我们在头文件中定义的每个类的方法。 注意"
"``register_method``调用**必须**公开``_process``方法，否则Godot将无法使用它。 "
"但是，我们不必告诉Godot我们的构造函数和析构函数。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:317
msgid ""
"The other method of note is our ``_process`` function, which simply keeps "
"track of how much time has passed and calculates a new position for our "
"sprite using a simple sine and cosine function. What stands out is calling "
"``owner->set_position`` to call one of the build in methods of our Sprite. "
"This is because our class is a container class; ``owner`` points to the "
"actual Sprite node our script relates to. In the upcoming NativeScript 1.1, "
"``set_position`` can be called directly on our class."
msgstr ""
"另一种注意方法是我们的``_process``函数，它只是跟踪已经过了多少时间，并使用简"
"单的正弦和余弦函数计算我们的精灵的新位置。 突出的是调用``owner-> "
"set_position``来调用我们的Sprite的一个内置方法。 这是因为我们的类是一个容器"
"类; ``owner``指向我们脚本所涉及的实际Sprite节点。 在即将发布的NativeScript "
"1.1中，可以在我们的类上直接调用``set_position``。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:326
#, fuzzy
msgid ""
"There is one more C++ file we need; we'll name it ``gdlibrary.cpp``. Our "
"GDNative plugin can contain multiple NativeScripts, each with their own "
"header and source file like we've implemented ``GDExample`` up above. What "
"we need now is a small bit of code that tells Godot about all the "
"NativeScripts in our GDNative plugin."
msgstr ""
"还有一个我们需要的C ++文件; 我们将它命名为``gdlibrary.cpp``。 我们的GDNative"
"插件可以包含多个NativeScripts，每个都有自己的头文件和源文件，就像我们在上面实"
"现了``gdexample``一样。 我们现在需要的是一小段代码，告诉Godot我们的GDNative插"
"件中的所有NativeScripts。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:350
msgid ""
"Note that we are not using the ``godot`` namespace here, since the three "
"functions implemented here need to be defined without a namespace."
msgstr ""
"请注意，我们这里没有使用``godot``命名空间，因为这里实现的三个函数需要在没有命"
"名空间的情况下定义。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:353
msgid ""
"The ``godot_gdnative_init`` and ``godot_gdnative_terminate`` functions get "
"called respectively when Godot loads our plugin and when it unloads it. All "
"we're doing here is parse through the functions in our bindings module to "
"initialize them, but you might have to set up more things depending on your "
"needs."
msgstr ""
"当Godot加载我们的插件并卸载它时，分别调用``godot_gdnative_init``和"
"``godot_gdnative_terminate``函数。 我们在这里所做的只是解析我们的绑定模块中的"
"函数来初始化它们，但您可能需要根据需要设置更多内容。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:359
msgid ""
"The important function is the third function called "
"``godot_nativescript_init``. We first call a function in our bindings "
"library that does its usual stuff. After that, we call the function "
"``register_class`` for each of our classes in our library."
msgstr ""
"重要的功能是第三个函数叫做`godot_nativescript_init``。 我们首先在我们的绑定库"
"中调用一个函数来执行它常用的东西。 之后，我们为库中的每个类调用函数"
"``register_class``。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:365
msgid "Compiling the plugin"
msgstr "编译插件"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:367
msgid ""
"We cannot easily write by hand a ``SConstruct`` file that SCons would use "
"for building. For the purpose of this example, just use :download:`this "
"hardcoded SConstruct file <files/cpp_example/SConstruct>` we've prepared. "
"We'll cover a more customizable, detailed example on how to use these build "
"files in a subsequent tutorial."
msgstr ""
"我们不能轻易地手工编写SCons用于构建的``SConstruct``文件。 出于这个例子的目"
"的，只需使用：download：`这个硬编码的SConstruct文件<files / cpp_example / "
"SConstruct>`我们已经准备好了。 我们将在后续教程中介绍如何使用这些构建文件的更"
"可定制的详细示例。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:373
msgid ""
"This ``SConstruct`` file was written to be used with the latest godot-cpp "
"master, you may need to make small changes using it with older versions or "
"refer to the ``SConstruct`` file in the Godot 3.0 documentation."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:375
msgid ""
"Once you've downloaded the ``SConstruct`` file, place it in your GDNative "
"module folder besides ``godot-cpp``, ``godot_headers`` and ``demo``, then "
"run:"
msgstr ""
"一旦你下载了``SConstruct``文件，除了``godot-cpp``，``godot_headers``和"
"``demo``之外，把它放在你的GDNative模块文件夹中，然后运行："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:383
msgid "You should now be able to find the module in ``demo/bin/<platform>``."
msgstr "您现在应该能够在``demo / bin / <platform>``中找到该模块。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:387
msgid ""
"Here, we've compiled both godot-cpp and our gdexample library as debug "
"builds. For optimized builds, you should compile them using the "
"``target=release`` switch."
msgstr ""
"在这里，我们编译了godot-cpp和我们的gdexample库作为调试版本。 对于优化的构建，"
"您应该使用``target = release``开关编译它们。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:392
msgid "Using the GDNative module"
msgstr "使用GDNative模块"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:394
msgid ""
"Before we jump back into Godot, we need to create two more files in ``demo/"
"bin/``. Both can be created using the Godot editor, but it may be faster to "
"create them directly."
msgstr ""
"在我们跳回Godot之前，我们需要在``demo / bin /``中再创建两个文件。 两者都可以"
"使用Godot编辑器创建，但直接创建它们可能会更快。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:398
msgid ""
"The first one is a file that lets Godot know what dynamic libraries should "
"be loaded for each platform and is called ``gdexample.gdnlib``."
msgstr ""
"第一个是一个文件，让Godot知道应该为每个平台加载什么动态库，并称为``gdexample."
"gdnlib``。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:422
msgid ""
"This file contains a ``general`` section that controls how the module is "
"loaded. It also contains a prefix section which should be left on ``godot_`` "
"for now. If you change this, you'll need to rename various functions that "
"are used as entry points. This was added for the iPhone platform because it "
"doesn't allow dynamic libraries to be deployed, yet GDNative modules are "
"linked statically."
msgstr ""
"该文件包含一个“general”部分，用于控制模块的加载方式。 它还包含一个前缀部分，"
"现在应该留在``godot_``。 如果更改此设置，则需要重命名用作入口点的各种函数。 "
"这是为iPhone平台添加的，因为它不允许部署动态库，但GDNative模块是静态链接的。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:429
msgid ""
"The ``entry`` section is the important bit: it tells Godot the location of "
"the dynamic library in the project's filesystem for each supported platform. "
"It will also result in *just* that file being exported when you export the "
"project, which means the data pack won't contain libraries that are "
"incompatible with the target platform."
msgstr ""
"``entry``部分是重要的一点：它告诉Godot每个支持平台的项目文件系统中动态库的位"
"置。 导出项目时，它也会导致* just *导出文件，这意味着数据包不会包含与目标平台"
"不兼容的库。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:435
msgid ""
"Finally, the ``dependencies`` section allows you to name additional dynamic "
"libraries that should be included as well. This is important when your "
"GDNative plugin implements someone else's library and requires you to supply "
"a third-party dynamic library with your project."
msgstr ""
"最后，``dependencies``部分允许您命名应包含的其他动态库。 当您的GDNative插件实"
"现其他人的库并要求您为项目提供第三方动态库时，这一点非常重要。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:440
msgid ""
"If you double click on the ``gdexample.gdnlib`` file within Godot, you'll "
"see there are far more options to set:"
msgstr ""
"如果你双击Godot中的``gdexample.gdnlib``文件，你会看到还有更多的选项要设置："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:445
msgid ""
"The second file we need to create is a file used by each NativeScript we've "
"added to our plugin. We'll name it ``gdexample.gdns`` for our gdexample "
"NativeScript."
msgstr ""
"我们需要创建的第二个文件是我们添加到插件中的每个NativeScript使用的文件。 我们"
"将它命名为``gdexample.gdns``用于我们的gdexample NativeScript。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:462
#, fuzzy
msgid ""
"This is a standard Godot resource; you could just create it directly in your "
"scene, but saving it to a file makes it much easier to reuse it in other "
"places. This resource points to our gdnlib file, so that Godot can know "
"which dynamic library contains our NativeScript. It also defines the "
"``class_name`` which identifies the NativeScript in our plugin we want to "
"use."
msgstr ""
"这是标准的Godot资源; 您可以直接在场景中创建它，但将其保存到文件可以更容易地在"
"其他地方重用它。 这个资源指向我们的gdnlib文件，因此Godot可以知道哪个动态库包"
"含我们的NativeScript。 它还定义了``class_name``，它标识了我们想要使用的插件中"
"的NativeScript。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:469
msgid ""
"Time to jump back into Godot. We load up the main scene we created way back "
"in the beginning and now add a Sprite to our scene:"
msgstr ""
"是时候跳回戈多了。 我们在开始时加载我们创建的主场景，现在为场景添加一个"
"Sprite："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:474
msgid ""
"We're going to assign the Godot logo to this sprite as our texture, disable "
"the ``centered`` property and drag our ``gdexample.gdns`` file onto the "
"``script`` property of the sprite:"
msgstr ""
"我们要将Godot徽标指定给这个精灵作为我们的纹理，禁用``centered``属性并将我们的"
"``gdexample.gdns``文件拖到精灵的``script``属性中："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:480
msgid "We're finally ready to run the project:"
msgstr "我们终于准备好运行这个项目了："

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:485
#, fuzzy
msgid "Adding properties"
msgstr "节点属性"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:487
msgid ""
"GDScript allows you to add properties to your script using the ``export`` "
"keyword. In GDNative you have to register the properties and there are two "
"ways of doing this. You can either bind directly to a member or use a setter "
"and getter function."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:493
msgid ""
"There is a third option, just like in GDScript you can directly implement "
"the ``_get_property_list``, ``_get`` and ``_set`` methods of an object but "
"that goes far beyond the scope of this tutorial."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:497
msgid ""
"We'll examine both starting with the direct bind. Lets add a property that "
"allows us to control the amplitude of our wave."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:500
msgid ""
"In our ``gdexample.h`` file we simply need to add a member variable like so:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:510
msgid ""
"In our ``gdexample.cpp`` file we need to make a number of changes, we will "
"only show the methods we end up changing, don't remove the lines we're "
"omitting:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:562
msgid ""
"Once you compile the module with these changes in place you will see that a "
"property has been added to our interface. You can now change this property "
"and when you run your project, you will see that our Godot icon travels "
"along a larger figure."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:567
msgid ""
"Lets do the same but for the speed of our animation and use a setter and "
"getter function. Our ``gdexample.h`` header file again only needs a few more "
"lines of code:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:581
msgid ""
"This requires a few more changes to our ``gdexample.cpp`` file, again we're "
"only showing the methods that have changed so don't remove anything we're "
"omitting:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:653
msgid ""
"Now when the project is compiled we'll see another property called speed. "
"Changing its value will make the animation go faster or slower."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:656
msgid ""
"For this example there is no obvious advantage of using a setter and getter. "
"It is just more code to write. For a simple example as this there may be a "
"good reason for a setter if you want to react on the variable being changed "
"but in many cases just binding the variable will be enough."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:661
msgid ""
"Getters and setters become far more useful in more complex scenarios where "
"you need to make additional choices based on the state of your object."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:667
msgid ""
"For simplicity we've left out the optional parameters in the "
"register_property<class, type> method call. These parameters are "
"``rpc_mode``, ``usage``, ``hint`` and ``hint_string``. These can be used to "
"further configure how properties are displayed and set on the Godot side."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:673
msgid ""
"Modern C++ compilers are able to infer the class and variable type and allow "
"you to omit the ``<GDExample, float>`` part of our ``register_property`` "
"method. we've had mixed experiences with this however."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:679
msgid "Signals"
msgstr "信号"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:681
msgid ""
"Last but not least, signals fully work in GDNative as well. Having your "
"module react to a signal given out by another object requires you to call "
"``connect`` on that object. We can't think of a good example for our "
"wobbling Godot icon, we would need to showcase a far more complete example."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:687
msgid "This however is the required syntax:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:698
msgid ""
"Note that you can only call ``my_method`` if you've previously registered it "
"in your ``_register_methods`` method."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:701
msgid ""
"Having your object sending out signals is far more common. For our wobbling "
"Godot icon we'll do something silly just to show how it works. We're going "
"to emit a signal every time a second has passed and pass the new location "
"along."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:706
msgid ""
"In our ``gdexample.h`` header file we just need to define a new member "
"``time_emit``:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:716
msgid ""
"The changes in ``gdexample.cpp`` are a bit more elaborate this time. First "
"you'll need to set ``time_emit = 0.0;`` in either our ``_init`` method or in "
"our constructor. But the other two needed changes we'll look at one by one."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:720
msgid ""
"In our ``_register_methods`` method we need to declare our signal and we do "
"this as follows:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:747
msgid ""
"Here we see a nice improvement in the latest version of godot-cpp where our "
"``register_signal`` method can be a single call first taking the signals "
"name, then having pairs of values specificying the parameter name and type "
"of each parameter we'll send along with this signal."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:752
msgid ""
"For NativeScript 1.0 we first build a dictionary in which we tell Godot "
"about the types of arguments we will pass to our signal, and then register "
"it."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:755
msgid "Next we'll need to change our ``_process`` method:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:801
msgid ""
"After a second has passed we emit our signal and reset our counter. Again in "
"the new version of godot-cpp we can add our parameter values directly to "
"``emit_signal``. In NativeScript 1.0 We first build an array of values and "
"then call ``emit_signal``."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:807
msgid ""
"Once compiled we can go into Godot and select our sprite node. On our "
"``Node`` tab we find our new signal and link it up by pressing connect. "
"We've added a script on our main node and implemented our signal like this:"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:818
msgid "Every second we simply output our position to the console."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:822
msgid "NativeScript 1.1 v.s. NativeScript 1.0"
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:824
msgid ""
"So far in our example above there doesn't seem to be a lot of difference "
"between the old and new syntax. The class is defined slightly differently "
"and we no longer use the ``owner`` member to call methods on the Godot side "
"of our object. A lot of the improvements are hidden under the hood."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:829
msgid ""
"This example only deals with simple variables and simple methods. Especially "
"once you start passing references to other objects or when you start calling "
"methods that require more complex parameters, NativeScript 1.1 does start to "
"show its benefits."
msgstr ""

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:835
msgid "Next steps"
msgstr "下一步"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:837
msgid ""
"The above is only a simple example, but we hope it shows you the basics. You "
"can build upon this example to create full-fledged scripts to control nodes "
"in Godot using C++."
msgstr ""
"以上只是一个简单的例子，但我们希望它向您展示基础知识。 您可以在此示例的基础上"
"构建完整的脚本，以使用C ++控制Godot中的节点。"

#: ../../docs/tutorials/plugins/gdnative/gdnative-cpp-example.rst:841
msgid ""
"You should be able to edit and recompile the plugin while the Godot editor "
"remains open; just rerun the project after the library has finished building."
msgstr ""
"在Godot编辑器保持打开状态时，您应该能够编辑和重新编译插件; 在库完成构建后重新"
"运行项目。"
