# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:4
msgid "Procedural geometry"
msgstr "程序几何"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:6
msgid ""
"There are many ways to procedurally generate geometry in Godot. In this "
"tutorial series we will explore a few of them. Each technique has its own "
"benefits and drawbacks, so it is best to understand each one and how it can "
"be useful in a given situation."
msgstr ""
"在Godot中, 有许多方法可以程序化地生成几何体. 在本系列教程中, 我们将探讨其中的"
"几种方法. 每种技术都有自己的优点和缺点, 所以最好了解每种技术, 以及它在特定情"
"况下如何发挥作用."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:20
msgid "What is geometry?"
msgstr "什么是几何？"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:22
msgid ""
"Geometry is a fancy way of saying shape. In computer graphics, geometry is "
"typically represented by an array of positions called \"vertices\". In "
"Godot, geometry is represented by Meshes."
msgstr ""
"几何学是形状的一种花式说法. 在计算机图形学中, 几何图形通常由称为 \"顶点\" 的"
"位置数组来表示. 在Godot中, 几何体用Meshes来表示."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:26
msgid "What is a Mesh?"
msgstr "什么是网格？"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:28
msgid ""
"Many things in Godot have mesh in their name: the :ref:`Mesh <class_Mesh>`, "
"the :ref:`ArrayMesh <class_ArrayMesh>`, the :ref:`MeshInstance "
"<class_MeshInstance>`, the :ref:`MultiMesh <class_MultiMesh>`, and the :ref:"
"`MultiMeshInstance <class_MultiMeshInstance>`. While they are all related, "
"they have slightly different uses."
msgstr ""
"在Godot中, 很多东西的名字中都有mesh: :ref:`Mesh <class_Mesh>` , :ref:"
"`ArrayMesh <class_ArrayMesh>` , :ref:`MeshInstance <class_MeshInstance>` , :"
"ref:`MultiMesh <class_MultiMesh>` 和 :ref:`MultiMeshInstance "
"<class_MultiMeshInstance>` . 虽然它们都是相关的, 但用途略有不同."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:32
msgid ""
"Meshes and ArrayMeshes are resources that are drawn using a MeshInstance "
"node. Resources like Meshes and ArrayMeshes cannot be added to the scene "
"directly. A MeshInstance represents one instance of a mesh in your scene. "
"You can reuse a single mesh in multiple MeshInstances to draw it in "
"different parts of your scene with different materials or transformations "
"(scale, rotation, position etc.)."
msgstr ""
"Meshes 和 ArrayMeshes 是使用 MeshInstance 节点绘制的资源. 像Mesh和ArrayMeshes"
"这样的资源不能直接添加到场景中. 一个MeshInstance代表了场景中网格的一个实例. "
"您可以在多个MeshInstance中重复使用一个网格, 用不同的材质或变换(比例, 旋转, 位"
"置等)在场景的不同部分绘制它."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:38
msgid ""
"If you are going to draw the same object many times, it can be helpful to "
"use a MultiMesh with a MultiMeshInstance. The MultiMeshInstance draws meshes "
"thousands of times very cheaply. It takes advantage of hardware instancing "
"in order to do so. The drawback with using a MultiMeshInstance is that you "
"are limited to one material for all instances. It uses an instance array to "
"store different colors and transformations for each instance, but all the "
"instances use the same material."
msgstr ""
"如果你要多次绘制同一个对象, 那么使用MultiMesh与MultiMeshInstance会很有帮助."
"MultiMeshInstance可以非常便宜地绘制数千次网格. 它利用了硬件实例的优势来实现这"
"一目的. 使用MultiMeshInstance的缺点是所有实例只能使用一种材料. 它使用一个实例"
"数组为每个实例存储不同的颜色和变换, 但所有的实例都使用相同的材质."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:46
msgid "What a Mesh is"
msgstr "什么是网格"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:48
msgid ""
"A Mesh is composed of one or more surfaces. A surface is an array composed "
"of multiple sub-arrays containing vertices, normals, UVs, etc. Normally the "
"process of constructing surfaces and meshes is hidden from the user in the :"
"ref:`VisualServer <class_VisualServer>`, but with ArrayMeshes, the user can "
"construct a Mesh manually by passing in an array containing the surface "
"information."
msgstr ""
"一个Mesh是由一个或多个曲面组成. 曲面是由多个子数组组成的数组, 包含顶点, 法"
"线, UV等. 通常情况下, 构造曲面和网格的过程对用户来说是隐藏在 :ref:"
"`VisualServer <class_VisualServer>` 中的, 但是通过ArrayMeshes, 用户可以通过传"
"递一个包含曲面信息的数组来手动构造一个Mesh."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:54
msgid "Surfaces"
msgstr "Surfaces"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:56
msgid ""
"Each surface has its own material. Alternatively, you can override the "
"material for all surfaces in the Mesh when you use a MeshInstance using "
"``MeshInstance.override_material``."
msgstr ""
"每个曲面都有自己的材质. 另外, 当你使用MeshInstance时, 你可以使用 "
"``MeshInstance.override_material`` 覆盖Mesh中所有曲面的材质."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:60
msgid "Surface array"
msgstr "表面数组"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:62
msgid ""
"The surface array is an array of length ``ArrayMesh.ARRAY_MAX``. Each "
"position in the array is filled with a sub-array containing per-vertex "
"information. For example, the array located at ``ArrayMesh.ARRAY_NORMAL`` is "
"a :ref:`PoolVector3Array <class_PoolVector3Array>` of vertex normals."
msgstr ""
"曲面数组是一个长度为 ``ArrayMesh.ARRAY_MAX`` 的数组. 数组中的每个位置都有一个"
"子数组, 包含每个顶点的信息. 例如, 位于 ``ArrayMesh.ARRAY_NORMAL`` 处的数组是"
"一个 :ref:`PoolVector3Array <class_PoolVector3Array>` 的顶点法线."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:66
msgid ""
"The surface array can be indexed or non-indexed. Creating a non-indexed "
"array is as easy as not assigning an array at the index ``ArrayMesh."
"ARRAY_INDEX``. A non-indexed array stores unique vertex information for "
"every triangle, meaning that when two triangle share a vertex, the vertex is "
"duplicated in the array. An indexed surface array only stores vertex "
"information for each unique vertex and then also stores an array of indices "
"which maps out how to construct the triangles from the vertex array. In "
"general, using an indexed array is faster, but it means you have to share "
"vertex data between triangles, which is not always desired (e.g. when you "
"want per-face normals)."
msgstr ""
"曲面数组可以是有索引的, 也可以是非索引的. 创建非索引数组就像在索引 "
"``ArrayMesh.ARRAY_INDEX`` 处不分配数组一样简单. 非索引数组为每个三角形存储唯"
"一的顶点信息, 也就是说, 当两个三角形共用一个顶点时, 顶点在数组中是重复的. 有"
"索引的曲面数组只存储每个唯一顶点的顶点信息, 然后还存储一个索引数组, 它映射出"
"如何从顶点数组构造三角形. 一般来说, 使用索引数组的速度更快, 但这意味着您必须"
"在三角形之间共享顶点数据, 这并不总是需要的(例如, 当您想要每面法线时)."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:75
msgid "Tools"
msgstr "工具"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:77
msgid ""
"Godot provides different ways of accessing and working with geometry. More "
"information on each will be provided in the following tutorials."
msgstr ""
"Godot 提供了不同的访问和处理几何体的方法. 关于每种方法的更多信息将在下面的教"
"程中提供."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:81
msgid "ArrayMesh"
msgstr "ArrayMesh"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:83
msgid ""
"The ArrayMesh resource extends Mesh to add a few different quality of life "
"functions, and most importantly, the ability to construct a Mesh surface "
"through scripting."
msgstr ""
"ArrayMesh资源扩展了Mesh, 增加了一些不同的便捷功能, 最重要的是, 可以通过脚本构"
"建Mesh曲面."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:86
msgid ""
"For more information about the ArrayMesh, please see the :ref:`ArrayMesh "
"tutorial <doc_arraymesh>`."
msgstr ""
"有关ArrayMesh的更多信息, 请参阅 :ref:`ArrayMesh tutorial <doc_arraymesh>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:89
msgid "MeshDataTool"
msgstr "MeshDataTool"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:91
msgid ""
"The MeshDataTool is a resource that converts Mesh data into arrays of "
"vertices, faces, and edges that can be modified at runtime."
msgstr ""
"MeshDataTool是一个将Mesh数据转换为顶点, 面和边的数组的资源, 可以在运行时进行"
"修改."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:94
msgid ""
"For more information about the MeshDataTool, please see the :ref:"
"`MeshDataTool tutorial <doc_meshdatatool>`."
msgstr ""
"有关 MeshDataTool 的完整列表, 请参见 :ref:`MeshDataTool tutorial "
"<doc_meshdatatool>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:97
msgid "SurfaceTool"
msgstr "SurfaceTool"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:99
msgid ""
"The SurfaceTool allows the creation of Meshes using an OpenGL 1.x immediate "
"mode style interface."
msgstr "SurfaceTool允许使用OpenGL 1.x即时模式风格的接口创建网格."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:101
msgid ""
"For more information about the SurfaceTool, please see the :ref:`SurfaceTool "
"tutorial <doc_surfacetool>`."
msgstr ""
"有关SurfaceTool的更多信息, 请阅读 :ref:`SurfaceTool tutorial "
"<doc_surfacetool>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:104
msgid "ImmediateGeometry"
msgstr "Immediate geometry (立即几何体)"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:106
msgid ""
"ImmediateGeometry is a node that uses an immediate mode style interface "
"(like SurfaceTool) to draw objects. The difference between ImmediateGeometry "
"and the SurfaceTool is that ImmediateGeometry is a node itself that can be "
"added to the scene tree and is drawn directly from the code. The SurfaceTool "
"generates a Mesh that needs to be added a MeshInstance to be seen."
msgstr ""
"ImmediateGeometry是一个使用即时模式风格接口(像SurfaceTool一样)绘制对象的节点."
"ImmediateGeometry和SurfaceTool的区别在于,ImperialGeometry本身是一个节点, 可以"
"添加到场景树中, 直接从代码中绘制.SurfaceTool生成一个Mesh, 需要添加一个"
"MeshInstance才能看到."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:111
msgid ""
"ImmediateGeometry is useful for prototyping because of the straightforward "
"API, but it is slow because the geometry is rebuilt every frame. It is most "
"useful for quickly adding simple geometry to debug visually (e.g. by drawing "
"lines to visualize physics raycasts etc.)."
msgstr ""
"ImmediateGeometry因为其直接的API而对原型设计很有用, 但它的速度很慢, 因为每一"
"帧都要重建几何体. 它最有用的是快速添加简单的几何体来进行可视化调试(例如, 通过"
"画线来可视化物理学射线广播等)."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:115
msgid ""
"For more information about ImmediateGeometry, please see the :ref:"
"`ImmediateGeometry tutorial <doc_immediategeometry>`."
msgstr ""
"有关 ImmediateGeometry 的更多信息, 请参见 :ref:`ImmediateGeometry tutorial "
"<doc_immediategeometry>` ."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:118
msgid "Which one should I use?"
msgstr "我应该使用哪一个？"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:120
msgid ""
"Which method you use depends on what you are trying to do and what kind of "
"procedure you are comfortable with."
msgstr "用哪种方法取决于你想做什么, 以及你能接受什么样的程序."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:122
msgid ""
"Both SurfaceTool and ArrayMesh are excellent for generating static geometry "
"(meshes) that don't change over time."
msgstr ""
"SurfaceTool和ArrayMesh都是生成不随时间变化的静态几何体(网格)的绝佳工具."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:124
msgid ""
"Using an ArrayMesh is slightly faster than using a SurfaceTool, but the API "
"is more a little more challenging. Additionally, SurfaceTool has a few "
"quality of life methods such as ``generate_normals()`` and ``index()``."
msgstr ""
"使用ArrayMesh比使用SurfaceTool稍快一些, 但API的难度更大一些. 另外,SurfaceTool"
"还有一些便捷的方法, 比如 ``generate_normals()`` 和 ``index()`` ."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:127
msgid ""
"ImmediateGeometry regenerates the mesh every frame, so it is much slower "
"than ArrayMesh or SurfaceTool. However, if you need the geometry to change "
"every frame anyway it provides a much easier interface that may even be a "
"little faster than generating an ArrayMesh every frame."
msgstr ""
"ImmediateGeometry 每一帧都会重新生成网格, 所以它比 ArrayMesh 或 SurfaceTool "
"慢很多. 然而, 如果你需要每一帧都改变几何体, 它提供了一个更简单的接口, 甚至可"
"能比每一帧生成一个ArrayMesh更快."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:131
msgid ""
"The MeshDataTool is not fast, but it gives you access to all kinds of "
"properties of the mesh that you don't get with the others (edges, faces, "
"etc.). It is incredibly useful when you need that sort of data to transform "
"the mesh, but it is not a good idea to use if that information is not "
"needed. The MeshDataTool is best used if you are going to be using an "
"algorithm that requires access to the face or edge array."
msgstr ""
"MeshDataTool的速度并不快, 但它可以让你访问网格的各种属性, 而这些属性是其他工"
"具无法获得的(边, 面等). 当你需要这类数据来变换网格时, 它是非常有用的, 但如果"
"不需要这些信息, 就不适合使用. 如果您要使用需要访问面或边缘数组的算法, 最好使"
"用 MeshDataTool."
