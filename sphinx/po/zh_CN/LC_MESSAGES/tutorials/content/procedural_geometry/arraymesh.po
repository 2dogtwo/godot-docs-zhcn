# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-02 13:32+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:4
msgid "Using the ArrayMesh"
msgstr "使用ArrayMesh"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:6
msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`"
msgstr "本教程将介绍使用 :ref:`ArrayMesh <class_arraymesh>` 的基础知识"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:8
msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to four "
"parameters. The first two are required, while the second two are optional."
msgstr ""
"为此,我们将使用函数 :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` ,它最多需要四个参数.前两个"
"参数是必须的,后两个参数是可选的."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:11
msgid ""
"The first is the ``PrimitiveType``, this is an OpenGL concept that instructs "
"the GPU how to arrange the primitive based on the vertices given whether it "
"is triangles, lines, points, etc. A complete list can be found under the :"
"ref:`Mesh <class_mesh>` class reference page."
msgstr ""
"第一个是``PrimitiveType``,这是一个OpenGL的概念,指示GPU如何根据给定的顶点来安"
"排基元,是三角形、线、点等.完整的列表可以在 :ref:`Mesh <class_mesh>`类参考页面"
"下找到."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:16
msgid ""
"The second is the actual Array that stores the mesh information. The array "
"is a normal Godot array that is constructed with empty brackets ``[]``. It "
"stores a ``Pool**Array`` (e.g. PoolVector3Array, PoolIntArray, etc.) for "
"each type of information."
msgstr ""
"第二种是存储网格信息的实际Array.该数组是一个普通的Godot数组,用空括号``[]``构"
"造.它为每一种类型的信息存储一个``Pool**Array``(如PoolVector3Array、"
"PoolIntArray等)."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:20
msgid "``ARRAY_VERTEX`` = 0 | PoolVector3Array or PoolVector2Array"
msgstr "``ARRAY_VERTEX`` = 0 | PoolVector3Array or PoolVector2Array"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:21
msgid "``ARRAY_NORMAL`` = 1 | PoolVector3Array"
msgstr "``ARRAY_NORMAL`` = 1 | PoolVector3Array"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:22
msgid ""
"``ARRAY_TANGENT`` = 2 | PoolRealArray of groups of 4 floats. first 3 floats "
"determine the tangent, and the last the binormal direction as -1 or 1."
msgstr ""
"``ARRAY_TANGENT`` = 2 | PoolRealArray 4组浮点数,前3个浮点数决定切线,最后一个"
"决定双法线方向,为-1或1."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:24
msgid "``ARRAY_COLOR`` = 3 | PoolColorArray"
msgstr "``ARRAY_COLOR`` = 3 | PoolColorArray"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:25
msgid "``ARRAY_TEX_UV`` = 4 | PoolVector2Array or PoolVector3Array"
msgstr "``ARRAY_TEX_UV`` = 4 | PoolVector2Array or PoolVector3Array"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:26
msgid "``ARRAY_TEX_UV2`` = 5 | PoolVector2Array or PoolVector3Array"
msgstr "``ARRAY_TEX_UV2`` = 5 | PoolVector2Array or PoolVector3Array"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:27
msgid ""
"``ARRAY_BONES`` = 6 | PoolRealArray of groups of 4 floats or PoolIntArray of "
"groups of 4 ints"
msgstr "``ARRAY_BONES`` = 6 | 4组浮点数的PoolRealArray或4组ints的PoolIntArray"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:28
msgid "``ARRAY_WEIGHTS`` = 7 | PoolRealArray of groups of 4 floats"
msgstr "``ARRAY_WEIGHTS`` = 7 | 4个浮点的浮动数组"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:29
msgid "``ARRAY_INDEX`` = 8 | PoolIntArray"
msgstr "``ARRAY_INDEX`` = 8 | PoolIntArray"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:31
msgid ""
"The Array of vertices is always required. All the others are optional and "
"will only be used if included."
msgstr "顶点阵列是必须的.所有其他的都是可选的,只有在包含的情况下才会使用."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:33
msgid ""
"Each array needs to have the same number of elements as the vertex array "
"except for the index array. For arrays like tangents, an element is a group "
"of 4 floats. So the array size will be four times the size of the vertex "
"array size, but they will have the same number of elements"
msgstr ""
"除了索引数组外,每个数组的元素数量需要和顶点数组相同.对于像切线这样的数组,一个"
"元素是4个浮动数组.所以数组的大小将是顶点数组大小的4倍,但它们的元素数是一样的"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:37
msgid "The index array is unique."
msgstr "索引数组是唯一的."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:39
msgid ""
"The third parameter is an array of blendshapes for the Mesh to use. While "
"this tutorial does not cover using blendshapes, it is possible to specify "
"them when creating a surface from arrays."
msgstr ""
"第三个参数是网格要使用的混合形状数组.虽然本教程不涉及混合形状的使用,但在从数"
"组创建曲面时,可以指定它们."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:42
msgid ""
"The last parameter is the compress flags which specifies which arrays to "
"store with half as many bits. The values can be found in the classref for :"
"ref:`VisualServer <class_visualserver>` under :ref:`ArrayFormat "
"<enum_visualserver_arrayformat>`."
msgstr ""
"最后一个参数是压缩标志,指定哪些数组要用一半的比特数来存储.这些值可以在 :ref:"
"`VisualServer <class_visualserver>`的classref中的 :ref:`ArrayFormat "
"<enum_visualserver_arrayformat>`下找到."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:45
msgid ""
"For normal usage you will find it is best to leave the last two parameters "
"empty."
msgstr "对于正常的使用,你会发现最好将最后两个参数留空."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:48
msgid "ArrayMesh"
msgstr "ArrayMesh"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:50
msgid ""
"Add an :ref:`ArrayMesh <class_arraymesh>` to a MeshInstance. Normally, "
"adding an ArrayMesh in the editor is not useful, but in this case it allows "
"as to access the ArrayMesh from code without creating one."
msgstr ""
"在Mesh实例中添加一个 :ref:`ArrayMesh <class_arraymesh>` .通常情况下,在编辑器"
"中添加ArrayMesh是没有用的,但在这种情况下,允许从代码中访问ArrayMesh,而不需要创"
"建一个."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:54
msgid "Next, add a script to the MeshInstance."
msgstr "接下来,在MeshInstance中添加一个脚本."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:56
msgid "Under ``_ready()``, create a new Array."
msgstr "在``_ready()``下创建一个新的数组."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:63
msgid ""
"This will be the array that we keep our surface information in, it will hold "
"all the arrays of data that the surface needs. Godot will expect it to be of "
"size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""
"这将是保存表面信息的数组,将保存表面需要的所有数据数组.Godot希望它的大小最大"
"是 ``Mesh.ARRAY_MAX`` ,所以要相应调整."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:73
msgid "Next create the arrays for each data type you will use."
msgstr "接下来,为您将使用的每种数据类型创建数组."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:83
msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""
"一旦你用几何体填充了你的数据数组,就可以通过将每个数组添加到 "
"``surface_array`` ,然后提交到网格中来创建网格."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:96
msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""
"在这个例子中,使用了 ``Mesh.PRIMITIVE_TRIANGLES`` ,但你也可以使用mesh中的任何"
"基本类型."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:99
msgid "Put together the full code looks like:"
msgstr "完整的代码如下:"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:130
msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code that could go in the middle."
msgstr "中间可以放你想要的任何代码.下面将介绍一些放在中间的示例代码."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:134
msgid "Generating geometry"
msgstr "生成几何体"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:136
msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""
"这是生成球体的示例代码. 尽管代码是用GDScript编写的,但是Godot并没有指定用特定"
"的方式来实现它. 这种实现方式与ArrayMeshes无关,仅仅是一种通用的生成球体的方"
"式. 如果您觉得这比较难以理解,或者想更全面了解 procedural geometry,可以在网上"
"寻找相关的教程进行学习."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:203
msgid "Combined with the code above, this code will generate a sphere."
msgstr "与上面的代码相结合,这段代码将生成一个球体."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:205
msgid ""
"When it comes to generating geometry with the ArrayMesh you need to "
"understand what goes in each array and then you can follow tutorials for any "
"language/engine and convert it into Godot."
msgstr ""
"当谈到用ArrayMesh生成几何体时,你需要了解每个数组中的内容,然后可以按照任何语言"
"和引擎的教程将其转换为Godot."

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:209
msgid "Saving"
msgstr "保存中"

#: ../../docs/tutorials/content/procedural_geometry/arraymesh.rst:211
msgid ""
"Finally, Godot provides a single method to save ArrayMeshes using the :ref:"
"`ResourceSaver <class_resourcesaver>` class. This is useful when you want to "
"generate a mesh and then use it later without having to re-generate."
msgstr ""
"最后,Godot提供了一个单一的方法,使用 :ref:`ResourceSaver "
"<class_resourcesaver>` 类来保存ArrayMeshes.当你想生成一个网格,然后在以后使用"
"它而不需要重新生成时,这个方法很有用."
