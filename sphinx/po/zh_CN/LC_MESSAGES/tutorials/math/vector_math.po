# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-30 19:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/math/vector_math.rst:4
msgid "Vector math"
msgstr "向量数学"

#: ../../docs/tutorials/math/vector_math.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/math/vector_math.rst:9
msgid ""
"This tutorial is a short and practical introduction to linear algebra as it "
"applies to game development. Linear algebra is the study of vectors and "
"their uses. Vectors have many applications in both 2D and 3D development and "
"Godot uses them extensively. Developing a good understanding of vector math "
"is essential to becoming a strong game developer."
msgstr ""
"本教程是一个简短而实用的线性代数介绍，因为它适用于游戏开发。线性代数是研究向"
"量及其用途的学科。向量在二维和三维开发中都有许多应用，Godot对它们的应用非常广"
"泛。要成为一名优秀的游戏开发者，对向量数学的理解是必不可少的。"

#: ../../docs/tutorials/math/vector_math.rst:15
msgid ""
"This tutorial is **not** a formal textbook on linear algebra. We will only "
"be looking at how it is applied to game development. For a broader look at "
"the mathematics, see https://www.khanacademy.org/math/linear-algebra"
msgstr ""
"本教程 **不是** 线性代数的正式教科书。我们将只关注它如何应用于游戏开发。要更"
"全面地了解数学，请参见 https://www.khanacademy.org/math/linear-algebra"

#: ../../docs/tutorials/math/vector_math.rst:21
msgid "Coordinate systems (2D)"
msgstr "坐标系统(2D)"

#: ../../docs/tutorials/math/vector_math.rst:23
msgid ""
"In 2D space, coordinates are defined using a horizontal axis (``x``) and a "
"vertical axis (``y``). A particular position in 2D space is written as a "
"pair of values such as ``(4, 3)``."
msgstr ""
"在2D空间中，使用水平轴(``x``)和垂直轴(``y``)定义坐标。2D空间中的特定位置被写"
"成一对值，如``(4, 3)``。"

#: ../../docs/tutorials/math/vector_math.rst:29
msgid ""
"If you're new to computer graphics, it might seem odd that the positive "
"``y`` axis points **downwards** instead of upwards, as you probably learned "
"in math class. However, this is common in most computer graphics "
"applications."
msgstr ""
"如果您是计算机图形学的新手，您可能会觉得很奇怪， ``y`` 轴的正方向是 **向下"
"**，而不是向上(您在数学课上学到的就像那样)。然而，这在大多数计算机图形应用程"
"序中是常见的。"

#: ../../docs/tutorials/math/vector_math.rst:34
msgid ""
"Any position in the 2D plane can be identified by a pair of numbers in this "
"way. However, we can also think of the position ``(4, 3)`` as an **offset** "
"from the ``(0, 0)`` point, or **origin**. Draw an arrow pointing from the "
"origin to the point:"
msgstr ""
"二维平面上的任何位置都可以用一对数字来表示。然而，我们也可以将位置 ``(4, "
"3)`` 看作是从 ``(0, 0)`` 点或 **原点** 出发的 **偏移** 。画一个箭头从原点指向"
"点:"

#: ../../docs/tutorials/math/vector_math.rst:41
msgid ""
"This is a **vector**. A vector represents a lot of useful information. As "
"well as telling us that the point is at ``(4, 3)``, we can also think of it "
"as an angle ``θ`` and a length (or magnitude) ``m``. In this case, the arrow "
"is a **position vector** - it denotes a position in space, relative to the "
"origin."
msgstr ""
"这是一个 **向量** 。向量表示许多有用的信息。除了告诉我们点在 ``(4, 3)`` 之"
"外，我们还可以把它看成角度 ``θ`` 和长度(或幅度) ``m``。在这种情况下，箭头是一"
"个 **位置向量** -它表示空间中相对于原点的位置。"

#: ../../docs/tutorials/math/vector_math.rst:47
msgid ""
"A very important point to consider about vectors is that they only represent "
"**relative** direction and magnitude. There is no concept of a vector's "
"position. The following two vectors are identical:"
msgstr ""
"关于向量，需要考虑的一个重要点是它们仅表示 **相对** 方向和大小。没有一个向量"
"的位置的概念。以下两个向量相同:"

#: ../../docs/tutorials/math/vector_math.rst:53
msgid ""
"Both vectors represent a point 4 units to the right and 3 units below some "
"starting point. It does not matter where on the plane you draw the vector, "
"it always represents a relative direction and magnitude."
msgstr ""
"这两个向量都表示向右4个单位，在某个起始点以下3个单位。不管您在平面上画哪个向"
"量，它总是代表一个相对的方向和大小。"

#: ../../docs/tutorials/math/vector_math.rst:58
msgid "Vector operations"
msgstr "向量运算"

#: ../../docs/tutorials/math/vector_math.rst:60
#, fuzzy
msgid ""
"You can use either method (x and y coordinates or angle and magnitude) to "
"refer to a vector, but for convenience, programmers typically use the "
"coordinate notation. For example, in Godot, the origin is the top-left "
"corner of the screen, so to place a 2D node named ``Node2D`` 400 pixels to "
"the right and 300 pixels down, use the following code:"
msgstr ""
"您可以使用任意一种方法(x和y坐标或角度和大小)来引用向量，但是为了方便起见，程"
"序员通常使用坐标表示法。例如，在Godot中，原点是屏幕左上角，因此要将一个名为"
"``Node2D`` 的2D节点向右放置400像素，向下放置300像素，请使用以下代码:"

#: ../../docs/tutorials/math/vector_math.rst:76
#, fuzzy
msgid ""
"Godot supports both :ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>` for 2D and 3D usage, respectively. The same mathematical "
"rules discussed in this article apply to both types."
msgstr ""
"Godot支持 :ref:`Vector2 <class_Vector2>` 和 :ref:`Vector3 <class_Vector3>` 分"
"别用于2D和3D。本文讨论的数学规则同样适用于这两种类型。"

#: ../../docs/tutorials/math/vector_math.rst:81
msgid "Member access"
msgstr "成员访问"

#: ../../docs/tutorials/math/vector_math.rst:83
msgid ""
"The individual components of the vector can be accessed directly by name."
msgstr "向量的各个组成部分可以直接通过名称访问。"

#: ../../docs/tutorials/math/vector_math.rst:105
msgid "Adding vectors"
msgstr "添加向量"

#: ../../docs/tutorials/math/vector_math.rst:107
msgid ""
"When adding or subtracting two vectors, the corresponding components are "
"added:"
msgstr "当两个向量相加或相减时，相应的分量相加:"

#: ../../docs/tutorials/math/vector_math.rst:118
msgid ""
"We can also see this visually by adding the second vector at the end of the "
"first:"
msgstr "我们也可以通过在第一个向量的末尾加上第二个向量来直观地看到这一点:"

#: ../../docs/tutorials/math/vector_math.rst:123
msgid "Note that adding ``a + b`` gives the same result as ``b + a``."
msgstr "注意，加法 ``a + b`` 和 ``b + a``得到的结果是一样的。"

#: ../../docs/tutorials/math/vector_math.rst:126
msgid "Scalar multiplication"
msgstr "标量乘法"

#: ../../docs/tutorials/math/vector_math.rst:128
msgid ""
"Vectors represent both direction and magnitude. A value representing only "
"magnitude is called a **scalar**."
msgstr "向量表示方向和幅度。仅表示幅值的值称为 **标量**。"

#: ../../docs/tutorials/math/vector_math.rst:131
msgid "A vector can be multiplied by a **scalar**:"
msgstr "一个向量可以乘以一个标量:"

#: ../../docs/tutorials/math/vector_math.rst:146
msgid ""
"Multiplying a vector by a scalar does not change its direction, only its "
"magnitude. This is how you **scale** a vector."
msgstr "向量乘以标量不会改变它的方向，只会改变它的幅值。这就是缩放向量的方法。"

#: ../../docs/tutorials/math/vector_math.rst:150
msgid "Practical applications"
msgstr "实际应用"

#: ../../docs/tutorials/math/vector_math.rst:152
msgid "Let's look at two common uses for vector addition and subtraction."
msgstr "让我们看看向量加法和减法的两种常见用法。"

#: ../../docs/tutorials/math/vector_math.rst:155
msgid "Movement"
msgstr "移动"

#: ../../docs/tutorials/math/vector_math.rst:157
msgid ""
"A vector can represent **any** quantity with a magnitude and direction. "
"Typical examples are: position, velocity, acceleration, and force. In this "
"image, the spaceship at step 1 has a position vector of ``(1,3)`` and a "
"velocity vector of ``(2,1)``. The velocity vector represents how far the "
"ship moves each step. We can find the position for step 2 by adding the "
"velocity to the current position."
msgstr ""
"向量可以表示具有大小和方向的任何量。典型的示例有:位置、速度、加速度和力。在这"
"幅图像中，在第一步的飞船有一个位置向量为``(1,3)``和一个速度向量为``(2,1)``。"
"速度向量表示船舶每一步移动的距离。通过将速度加到当前位置，我们可以求出步骤2的"
"位置。"

#: ../../docs/tutorials/math/vector_math.rst:165
msgid ""
"Velocity measures the **change** in position per unit of time. The new "
"position is found by adding velocity to the previous position."
msgstr ""
"速度测量单位时间内位置的变化。新的位置是通过在前一个位置上增加速度来找到的。"

#: ../../docs/tutorials/math/vector_math.rst:169
msgid "Pointing toward a target"
msgstr "指向一个目标"

#: ../../docs/tutorials/math/vector_math.rst:171
msgid ""
"In this scenario, you have a tank that wishes to point its turret at a "
"robot. Subtracting the tank's position from the robot's position gives the "
"vector pointing from the tank to the robot."
msgstr ""
"在这个场景中，您有一个坦克，希望它的炮塔指向机器人。从机器人的位置减去坦克的"
"位置就得到了从坦克指向机器人的向量。"

#: ../../docs/tutorials/math/vector_math.rst:177
msgid "To find a vector pointing from ``A`` to ``B`` use ``B - A``."
msgstr "要找到从 ``A`` 指向 ``B`` 的向量，请使用 ``B - A``。"

#: ../../docs/tutorials/math/vector_math.rst:180
msgid "Unit vectors"
msgstr "单位向量"

#: ../../docs/tutorials/math/vector_math.rst:182
msgid ""
"A vector with **magnitude** of ``1`` is called a **unit vector**. They are "
"also sometimes referred to as **direction vectors** or **normals**. Unit "
"vectors are helpful when you need to keep track of a direction."
msgstr ""
"一个 **大小** 为 ``1`` 的向量称为 **单位向量** 。它们有时也被称为 **方向向量"
"** 或 **法线** 。当您需要跟踪一个方向时，单位向量是有用的。"

#: ../../docs/tutorials/math/vector_math.rst:187
msgid "Normalization"
msgstr "归一化"

#: ../../docs/tutorials/math/vector_math.rst:189
#, fuzzy
msgid ""
"**Normalizing** a vector means reducing its length to ``1`` while preserving "
"its direction. This is done by dividing each of its components by its "
"magnitude. Because this is such a common operation, ``Vector2`` and "
"``Vector3`` provide a method for normalizing:"
msgstr ""
"**归一化** 向量意味着在保持其方向的同时将其长度减少到 ``1`` 。这是通过将每个"
"分量除以其大小来完成的:"

#: ../../docs/tutorials/math/vector_math.rst:204
msgid ""
"Because normalization involves dividing by the vector's length, you cannot "
"normalize a vector of length ``0``. Attempting to do so will result in an "
"error."
msgstr ""
"因为归一化需要除以向量的长度，所以不能对长度为``0``的向量进行归一化。试图这样"
"做会导致错误。"

#: ../../docs/tutorials/math/vector_math.rst:209
msgid "Reflection"
msgstr "反射"

#: ../../docs/tutorials/math/vector_math.rst:211
msgid ""
"A common use of unit vectors is to indicate **normals**. Normal vectors are "
"unit vectors aligned perpendicularly to a surface, defining its direction. "
"They are commonly used for lighting, collisions, and other operations "
"involving surfaces."
msgstr ""
"单位向量的一种常见用法是表示 **法线** 。法向量是垂直于曲面的单位向量，定义了"
"曲面的方向。它们通常用于照明、碰撞和涉及表面的其他操作。"

#: ../../docs/tutorials/math/vector_math.rst:216
msgid ""
"For example, imagine we have a moving ball that we want to bounce off a wall "
"or other object:"
msgstr "例如，假设我们有一个移动的球，我们想从墙上或其他物体上弹回来:"

#: ../../docs/tutorials/math/vector_math.rst:221
msgid ""
"The surface normal has a value of ``(0, -1)`` because this is a horizontal "
"surface. When the ball collides, we take its remaining motion (the amount "
"left over when it hits the surface) and reflect it using the normal. In "
"Godot, the :ref:`Vector2 <class_Vector2>` class has a ``bounce()`` method to "
"handle this. Here is a GDScript example of the diagram above using a :ref:"
"`KinematicBody2D <class_KinematicBody2D>`:"
msgstr ""
"因为这是一个水平曲面，所以曲面法线的值为 ``(0, -1)`` 。当球碰撞时，我们取它的"
"剩余运动(当它撞到表面时剩余的量)，用法线反射它。在Godot中， :ref:`Vector2 "
"<class_Vector2>` 类有一个 ``bounce()`` 方法来处理这个问题。上图有一个使用 :"
"ref:`KinematicBody2D <class_KinematicBody2D>` 的GDScript示例:"

#: ../../docs/tutorials/math/vector_math.rst:251
msgid "Dot product"
msgstr "点乘"

#: ../../docs/tutorials/math/vector_math.rst:253
msgid ""
"The **dot product** is one of the most important concepts in vector math, "
"but is often misunderstood. Dot product is an operation on two vectors that "
"returns a **scalar**. Unlike a vector, which contains both magnitude and "
"direction, a scalar value has only magnitude."
msgstr ""
"**点乘** 是向量数学中最重要的概念之一，但经常被误解。点乘是对两个向量的操作，"
"它返回一个 **标量**。与同时包含大小和方向的向量不同，标量值只有大小。"

#: ../../docs/tutorials/math/vector_math.rst:258
msgid "The formula for dot product takes two common forms:"
msgstr "点乘公式有两种常见形式:"

#: ../../docs/tutorials/math/vector_math.rst:262
msgid "and"
msgstr "以及"

#: ../../docs/tutorials/math/vector_math.rst:266
msgid ""
"However, in most cases it is easiest to use the built-in method. Note that "
"the order of the two vectors does not matter:"
msgstr ""
"然而，在大多数情况下，使用内置方法是最容易的。注意，两个向量的顺序并不重要:"

#: ../../docs/tutorials/math/vector_math.rst:280
msgid ""
"The dot product is most useful when used with unit vectors, making the first "
"formula reduce to just ``cosθ``. This means we can use the dot product to "
"tell us something about the angle between two vectors:"
msgstr ""
"当与单位向量一起使用时，点积是最有用的，使得第一个公式减少到仅有 ``cosθ``。这"
"意味着我们可以使用点积来告诉我们关于两个向量之间的角度的一些信息:"

#: ../../docs/tutorials/math/vector_math.rst:286
msgid ""
"When using unit vectors, the result will always be between ``-1`` (180°) and "
"``1`` (0°)."
msgstr "当使用单位向量,结果总是会在 ``-1`` (180°) 和 ``1`` (0°) 之间。"

#: ../../docs/tutorials/math/vector_math.rst:290
msgid "Facing"
msgstr "面向问题"

#: ../../docs/tutorials/math/vector_math.rst:292
msgid ""
"We can use this fact to detect whether an object is facing toward another "
"object. In the diagram below, the player ``P`` is trying to avoid the "
"zombies ``A`` and ``B``. Assuming a zombie's field of view is **180°**, can "
"they see the player?"
msgstr ""
"我们可以利用这个事实来检测一个物体是否面向另一个物体。在下图中，游戏角色 "
"``P`` 试图避开丧尸 ``A`` 和 ``B`` 。假设一个丧尸的视野是 **180°** , 他们能看"
"到游戏角色吗?"

#: ../../docs/tutorials/math/vector_math.rst:298
#, fuzzy
msgid ""
"The green arrows ``fA`` and ``fB`` are **unit vectors** representing the "
"zombies' facing directions and the blue semicircle represents its field of "
"view. For zombie ``A``, we find the direction vector ``AP`` pointing to the "
"player using ``P - A`` and normalize it, however, Godot has a helper method "
"to do this called ``direction_to``. If the angle between this vector and the "
"facing vector is less than 90°, then the zombie can see the player."
msgstr ""
"绿色箭头 ``fA`` 和 ``fB`` 是 **单位向量** 表示丧尸的朝向，蓝色半圆表示其视"
"野。对于丧尸 ``A`` ，我们使用 ``P - A`` 找到指向游戏角色的方向向量 ``AP`` 并"
"将其归一化。如果这个向量和面向向量之间的夹角小于90°,那么丧尸可以看到游戏角"
"色。"

#: ../../docs/tutorials/math/vector_math.rst:306
msgid "In code it would look like this:"
msgstr "在代码中是这样的:"

#: ../../docs/tutorials/math/vector_math.rst:324
msgid "Cross product"
msgstr "叉乘"

#: ../../docs/tutorials/math/vector_math.rst:326
#, fuzzy
msgid ""
"Like the dot product, the **cross product** is an operation on two vectors. "
"However, the result of the cross product is a vector with a direction that "
"is perpendicular to both. Its magnitude depends on their relative angle. If "
"two vectors are parallel, the result of their cross product will be a null "
"vector."
msgstr ""
"和点乘一样， **叉乘** 是对两个向量的运算。然而，叉乘的结果是一个方向垂直于这"
"两个向量的向量。它的大小取决于它们的相对角度。如果两个向量是平行的，它们叉乘"
"的结果就是零向量。"

#: ../../docs/tutorials/math/vector_math.rst:335
msgid "The cross product is calculated like this:"
msgstr "叉乘是这样计算的:"

#: ../../docs/tutorials/math/vector_math.rst:354
msgid "With Godot, you can use the built-in method:"
msgstr "使用Godot，您可以使用内置的方法:"

#: ../../docs/tutorials/math/vector_math.rst:365
msgid ""
"In the cross product, order matters. ``a.cross(b)`` does not give the same "
"result as ``b.cross(a)``. The resulting vectors point in **opposite** "
"directions."
msgstr ""
"在叉乘中，顺序很重要。``a.cross(b)`` 和 ``b.cross(a)`` 的结果不一样。得到的向"
"量指向相反的方向。"

#: ../../docs/tutorials/math/vector_math.rst:370
msgid "Calculating normals"
msgstr "法线计算"

#: ../../docs/tutorials/math/vector_math.rst:372
msgid ""
"One common use of cross products is to find the surface normal of a plane or "
"surface in 3D space. If we have the triangle ``ABC`` we can use vector "
"subtraction to find two edges ``AB`` and ``AC``. Using the cross product, "
"``AB x AC`` produces a vector perpendicular to both: the surface normal."
msgstr ""
"叉乘的一种常用方法是在三维空间中求平面或曲面的表面法向量。如果我们有三角形 "
"``ABC`` 我们可以用向量减法找到两条边 ``AB`` 和 ``AC``。通过叉乘， ``AB x "
"AC`` 得到一个垂直于这两个向量的向量:表面法向量。"

#: ../../docs/tutorials/math/vector_math.rst:377
msgid "Here is a function to calculate a triangle's normal:"
msgstr "下面是一个计算三角形法线的函数:"

#: ../../docs/tutorials/math/vector_math.rst:401
msgid "Pointing to a target"
msgstr "指向目标"

#: ../../docs/tutorials/math/vector_math.rst:403
#, fuzzy
msgid ""
"In the dot product section above, we saw how it could be used to find the "
"angle between two vectors. However, in 3D, this is not enough information. "
"We also need to know what axis to rotate around. We can find that by "
"calculating the cross product of the current facing direction and the target "
"direction. The resulting perpendicular vector is the axis of rotation."
msgstr ""
"在上面的点乘部分，我们看到了如何用它来求两个向量之间的夹角。然而，在3D中，这"
"是不够的。我们还需要知道绕哪个轴旋转。这可以通过计算当前方向与目标方向的叉乘"
"得到。得到的垂直向量是旋转轴。"

#: ../../docs/tutorials/math/vector_math.rst:411
msgid "More information"
msgstr "更多信息"

#: ../../docs/tutorials/math/vector_math.rst:413
msgid ""
"For more information on using vector math in Godot, see the following "
"articles:"
msgstr "有关在Godot中使用向量数学的更多信息，请参阅以下文章:"

#: ../../docs/tutorials/math/vector_math.rst:415
msgid ":ref:`doc_vectors_advanced`"
msgstr ":ref:`doc_vectors_advanced`"

#: ../../docs/tutorials/math/vector_math.rst:416
msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"
