# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/math/interpolation.rst:4
msgid "Interpolation"
msgstr "插值"

#: ../../docs/tutorials/math/interpolation.rst:6
msgid ""
"Interpolation is a very basic operation in graphics programming. It's good "
"to become familiar with it in order to expand your horizons as a graphics "
"developer."
msgstr ""
"插值是图形编程中一个非常基本的操作。作为一名图形开发人员，熟悉它有助于扩展您"
"的视野。"

#: ../../docs/tutorials/math/interpolation.rst:8
msgid ""
"The basic idea is that you want to transition from A to B. A value ``t``, "
"represents the states in-between."
msgstr "基本思想是从A转换到B。“t”值是介于两者之间的状态。"

#: ../../docs/tutorials/math/interpolation.rst:10
msgid ""
"As an example if ``t`` is 0, then the state is A. If ``t`` is 1, then the "
"state is B. Anything in-between is an *interpolation*."
msgstr ""
"举个例子，如果 ``t`` 值为0，那么状态是A。如果 ``t`` 值是1，状态是B。任何介于"
"两者之间的都是*插值*。"

#: ../../docs/tutorials/math/interpolation.rst:12
#, fuzzy
msgid ""
"Between two real (floating-point) numbers, a simple interpolation is usually "
"described as:"
msgstr "在两个实数(浮点数)之间，一个简单的插值通常描述为："

#: ../../docs/tutorials/math/interpolation.rst:19
msgid "And often simplified to:"
msgstr "通常简化为:"

#: ../../docs/tutorials/math/interpolation.rst:26
msgid ""
"The name of this type of interpolation, which transforms a value into "
"another at *constant speed* is *\"linear\"*. So, when you hear about *Linear "
"Interpolation*, you know they are referring to this simple formula."
msgstr ""
"这类型的插值名字,将一个值以*恒定速度*转换成另一个值*“线性”*。当你听说线性插值"
"时，就知道他们是指这个简单的公式。"

#: ../../docs/tutorials/math/interpolation.rst:28
msgid ""
"There are other types of interpolations, which will not be covered here. A "
"recommended read afterwards is the :ref:`Bezier <doc_beziers_and_curves>` "
"page."
msgstr ""
"还有其他类型的插值，这里将不做讨论。建议之后阅读:参考:`贝塞尔<文档_贝塞尔_及_"
"曲线>`页面。"

#: ../../docs/tutorials/math/interpolation.rst:31
#, fuzzy
msgid "Vector interpolation"
msgstr "轨道插补"

#: ../../docs/tutorials/math/interpolation.rst:33
msgid ""
"Vector types (:ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>`) can also be interpolated, they come with handy functions "
"to do it :ref:`Vector2.linear_interpolate() "
"<class_Vector2_method_linear_interpolate>` and :ref:`Vector3."
"linear_interpolate() <class_Vector3_method_linear_interpolate>`."
msgstr ""
"向量类型(:参考:`二维向量<类_二维向量>` 和 :参考:`三维向量<类_三维向量>`)也可"
"以插值，它们提供了方便的函数来实现这一点:参考:`二维向量.线性_插值() <类_二维"
"向量_方法_线性_插值>` 和:参考:`三维向量.线性_插值() <类_三维向量_方法_线性_插"
"值>`。"

#: ../../docs/tutorials/math/interpolation.rst:36
msgid ""
"For cubic interpolation, there are also :ref:`Vector2.cubic_interpolate() "
"<class_Vector2_method_linear_interpolate>` and :ref:`Vector3."
"cubic_interpolate() <class_Vector3_method_linear_interpolate>`, which do a :"
"ref:`Bezier <doc_beziers_and_curves>` style interpolation."
msgstr ""
"以及立方插值，请参见:参考:`二维向量.立方_插值() <类_二维向量_方法_线性_插值>`"
"和:参考:`三维向量.立方_插值() <类_三维向量_方法_线性_插值>`，使用:参考:`贝塞"
"尔<文档_贝塞尔_及_曲线>`制作风格插值。"

#: ../../docs/tutorials/math/interpolation.rst:38
msgid ""
"Here is simple pseudo-code for going from point A to B using interpolation:"
msgstr "下面是使用插值从A点到B点的简单伪代码:"

#: ../../docs/tutorials/math/interpolation.rst:48
#, fuzzy
msgid "It will produce the following motion:"
msgstr "这样做会产生以下行为:"

#: ../../docs/tutorials/math/interpolation.rst:53
#, fuzzy
msgid "Transform interpolation"
msgstr "轨道插补"

#: ../../docs/tutorials/math/interpolation.rst:55
msgid ""
"It is also possible to interpolate whole transforms (make sure they have "
"either uniform scale or, at least, the same non-uniform scale). For this, "
"the function :ref:`Transform.interpolate_with() "
"<class_Transform_method_interpolate_with>` can be used."
msgstr ""
"也可以插值整个变换(确保它们要么具有统一的刻度，要么至少具有相同的非均匀刻"
"度)。为此，可以使用这个函数:参考:`变换.插值_与() <类_变换_方法_插值_与>`。"

#: ../../docs/tutorials/math/interpolation.rst:58
msgid ""
"Here is an example of transforming a monkey from Position1 to Position2:"
msgstr "下面是将猴子从位置1转换为位置2的例子："

#: ../../docs/tutorials/math/interpolation.rst:62
#, fuzzy
msgid "Using the following pseudocode:"
msgstr "添加以下代码:"

#: ../../docs/tutorials/math/interpolation.rst:74
#, fuzzy
msgid "And again, it will produce the following motion:"
msgstr "这样做会产生以下行为:"

#: ../../docs/tutorials/math/interpolation.rst:80
#, fuzzy
msgid "Smoothing motion"
msgstr "根骨骼运动"

#: ../../docs/tutorials/math/interpolation.rst:82
msgid ""
"Interpolation can be used to smooth movement, rotation, etc. Here is an "
"example of a circle following the mouse using smoothed motion:"
msgstr "插值可用于平滑运动、旋转等。下面是使用平滑运动跟随鼠标的圆圈的例子："

#: ../../docs/tutorials/math/interpolation.rst:94
#, fuzzy
msgid "Here is how it looks:"
msgstr "下面是它的外观图:"

#: ../../docs/tutorials/math/interpolation.rst:98
msgid ""
"This useful for smoothing camera movement, allies following you (ensuring "
"they stay within a certain range), and many other common game patterns."
msgstr ""
"这对平滑相机运动很有用，队友在跟随你(确保他们保持在一定范围内)，以及许多其他"
"常见的游戏模式。"
