# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-09 11:43+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/io/saving_games.rst:4
msgid "Saving games"
msgstr "保存游戏"

#: ../../docs/tutorials/io/saving_games.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/io/saving_games.rst:9
msgid ""
"Save games can be complicated. It can be desired to store more information "
"than the current level or number of stars earned on a level. More advanced "
"save games may need to store additional information about an arbitrary "
"number of objects. This will allow the save function to scale as the game "
"grows more complex."
msgstr ""
"保存游戏可能很复杂。可以想想这会存储，比角色等级或在某等级上赚取的星星数量，"
"更多的信息。更高级的保存游戏可能需要存储关于具有任意数量的对象的附加信息。当"
"游戏变得更加复杂时，这将需要保存函数来辅助。"

#: ../../docs/tutorials/io/saving_games.rst:16
msgid "Identify persistent objects"
msgstr "识别持久化对象"

#: ../../docs/tutorials/io/saving_games.rst:18
#, fuzzy
msgid ""
"Firstly, we should identify what objects we want to keep between game "
"sessions and what information we want to keep from those objects. For this "
"tutorial, we will use groups to mark and handle objects to be saved, but "
"other methods are certainly possible."
msgstr ""
"首先，我们应该确定在游戏会话中要保存什么对象，以及我们要从这些对象中保存什么"
"信息。本教程中，我们将使用组来标记和处理要保存的对象，当然也有其他可行的方"
"法。"

#: ../../docs/tutorials/io/saving_games.rst:23
#, fuzzy
msgid ""
"We will start by adding objects we wish to save to the \"Persist\" group. As "
"in the :ref:`doc_scripting_continued` tutorial, we can do this through "
"either the GUI or script. Let's add the relevant nodes using the GUI:"
msgstr ""
"首先我们将添加对象，它将保存到“Persist”组。 在 :ref:"
"`doc_scripting_continued` 教程中，我们学会了通过GUI或脚本完成此操作。 那就让"
"我们使用GUI来添加相关节点吧:"

#: ../../docs/tutorials/io/saving_games.rst:29
#, fuzzy
msgid ""
"Once this is done, when we need to save the game, we can get all objects to "
"save them and then tell them all to save with this script:"
msgstr ""
"完成此操作后， 在我们需要保存游戏时，我们可以获取所有对象以保存它们，然后告诉"
"所有对象通过此脚本保存数据:"

#: ../../docs/tutorials/io/saving_games.rst:49
msgid "Serializing"
msgstr "序列化"

#: ../../docs/tutorials/io/saving_games.rst:51
#, fuzzy
msgid ""
"The next step is to serialize the data. This makes it much easier to read "
"from and store to disk. In this case, we're assuming each member of group "
"Persist is an instanced node and thus has a path. GDScript has helper "
"functions for this, such as :ref:`to_json() "
"<class_@GDScript_method_to_json>` and :ref:`parse_json() "
"<class_@GDScript_method_parse_json>`, so we will use a dictionary. Our node "
"needs to contain a save function that returns this data. The save function "
"will look like this:"
msgstr ""
"下一步是序列化数据。 这使得从硬盘读取数据和存储数据到硬盘变得更加容易。 在这"
"种情况下，我们假设Persist组的每个成员都是一个实例节点，因此有一个路径。 因为"
"GDScript有相关的辅助函数，如 :ref:`to_json() "
"<class_@GDScript_method_to_json>` 和 :ref:`parse_json() "
"<class_@GDScript_parse_json>`，所以我们使用字典来表示数据。 我们的节点需要包"
"含一个返回此类型数据的保存函数。 保存函数如下所示:"

#: ../../docs/tutorials/io/saving_games.rst:114
#, fuzzy
msgid ""
"This gives us a dictionary with the style ``{ \"variable_name\":"
"value_of_variable }``, which will be useful when loading."
msgstr ""
"我们得到一个样式为 ``{ \"variable_name\":that_variables_value }`` 的字典，它"
"在加载游戏数据时很有用。"

#: ../../docs/tutorials/io/saving_games.rst:119
msgid "Saving and reading data"
msgstr "保存和读取数据"

#: ../../docs/tutorials/io/saving_games.rst:121
#, fuzzy
msgid ""
"As covered in the :ref:`doc_filesystem` tutorial, we'll need to open a file "
"and write to it and then later, read from it. Now that we have a way to call "
"our groups and get their relevant data, let's use to_json() to convert it "
"into an easily stored string and store them in a file. Doing it this way "
"ensures that each line is its own object, so we have an easy way to pull the "
"data out of the file as well."
msgstr ""
"正如在 :ref:`doc_filesystem` 教程中所述，我们需要打开一个文件并向其中写入数"
"据，然后可以从中读取数据。 既然我们有办法调用我们的组并获取它们的相关数据，那"
"么就让我们使用 to_json() 将数据转换成一个容易存储的字符串并将它存储在文件中"
"吧。 这样做可以确保每一行都是自包含的对象，因此我们也可以轻松地将数据从文件中"
"提取出来。"

#: ../../docs/tutorials/io/saving_games.rst:166
#, fuzzy
msgid ""
"Game saved! Loading is fairly simple as well. For that, we'll read each "
"line, use parse_json() to read it back to a dict, and then iterate over the "
"dict to read our values. But we'll need to first create the object and we "
"can use the filename and parent values to achieve that. Here is our load "
"function:"
msgstr ""
"游戏保存好了！ 加载也很简单。 为此，我们将读取每一行，使用parse_json() 将其读"
"回到一个字典中，然后遍历字典以读取保存的值。 首先我们需要创建对象，这可以通过"
"使用文件名和父值来实现。 这就是我们的加载函数:"

#: ../../docs/tutorials/io/saving_games.rst:254
#, fuzzy
msgid ""
"And now, we can save and load an arbitrary number of objects laid out almost "
"anywhere across the scene tree! Each object can store different data "
"depending on what it needs to save."
msgstr ""
"现在我们可以保存和加载几乎任何位于场景树中的任意数量的对象了！ 每个对象可以根"
"据需要保存的内容存储不同的数据。"

#: ../../docs/tutorials/io/saving_games.rst:259
msgid "Some notes"
msgstr "一些注释"

#: ../../docs/tutorials/io/saving_games.rst:261
msgid ""
"We may have glossed over a step, but setting the game state to one fit to "
"start loading data can be complicated. This step will need to be heavily "
"customized based on the needs of an individual project."
msgstr ""
"我们可能已经忽略了一个步骤，但将游戏状态设置到适合以加载数据可能很复杂。 需要"
"根据单个项目的需求对此步骤进行大量定制。"

#: ../../docs/tutorials/io/saving_games.rst:265
#, fuzzy
msgid ""
"This implementation assumes no Persist objects are children of other Persist "
"objects. Otherwise, invalid paths would be created. To accommodate nested "
"Persist objects, consider saving objects in stages. Load parent objects "
"first so they are available for the add_child() call when child objects are "
"loaded. You will also need a way to link children to parents as the NodePath "
"will likely be invalid."
msgstr ""
"此实现假定没有Persist对象是其他Persist对象的子对象。 这样做会产生无效路径。 "
"如果这是项目的需求之一，则需要考虑这一点。 分阶段保存对象(父对象优先)，以便在"
"加载子对象时可用它们将确保它们可用于add_child() 调用。 由于NodePath可能无效，"
"因此还需要某种方式将子项链接到父项。"
