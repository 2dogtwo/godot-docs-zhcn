# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-05 17:37+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/io/background_loading.rst:4
msgid "Background loading"
msgstr "后台加载"

#: ../../docs/tutorials/io/background_loading.rst:6
#, fuzzy
msgid ""
"When switching the main scene of your game (e.g. going to a new level), you "
"might want to show a loading screen with some indication that progress is "
"being made. The main load method (``ResourceLoader::load`` or just ``load`` "
"from GDScript) blocks your thread, making your game appear frozen and "
"unresponsive while the resource is being loaded. This document discusses the "
"alternative of using the ``ResourceInteractiveLoader`` class for smoother "
"load screens."
msgstr ""
"当您切换游戏的主场景时(例如切换到一个新关卡)，您可能想创建一个可以显示进度的"
"加载界面。常用的加载方法( ``ResourceLoader::load`` 或GDScript的 ``load``)会在"
"加载资源时阻塞线程，因此不被采用。本文将讨论用于平滑加载的 "
"``ResourceInteractiveLoader`` 类。"

#: ../../docs/tutorials/io/background_loading.rst:15
msgid "ResourceInteractiveLoader"
msgstr "ResourceInteractiveLoader"

#: ../../docs/tutorials/io/background_loading.rst:17
msgid ""
"The ``ResourceInteractiveLoader`` class allows you to load a resource in "
"stages. Every time the method ``poll`` is called, a new stage is loaded, and "
"control is returned to the caller. Each stage is generally a sub-resource "
"that is loaded by the main resource. For example, if you're loading a scene "
"that loads 10 images, each image will be one stage."
msgstr ""
"``ResourceInteractiveLoader`` 类允许在阶段中加载资源。每次调用 ``poll`` 方法"
"时，都会加载一个新阶段，并将控制权返回给调用方。每个阶段通常是由主资源加载的"
"子资源。例如，如果您正在加载一个场景，该场景加载10幅图像，那么每个图像将是一"
"个阶段。"

#: ../../docs/tutorials/io/background_loading.rst:24
msgid "Usage"
msgstr "用法"

#: ../../docs/tutorials/io/background_loading.rst:26
msgid "Usage is generally as follows"
msgstr "一般用法如下"

#: ../../docs/tutorials/io/background_loading.rst:29
msgid "Obtaining a ResourceInteractiveLoader"
msgstr "获取ResourceInteractiveLoader"

#: ../../docs/tutorials/io/background_loading.rst:35
msgid ""
"This method will give you a ResourceInteractiveLoader that you will use to "
"manage the load operation."
msgstr ""
"此方法将向您提供一个ResourceInteractiveLoader，您将使用它来管理加载操作。"

#: ../../docs/tutorials/io/background_loading.rst:39
msgid "Polling"
msgstr "轮询"

#: ../../docs/tutorials/io/background_loading.rst:45
msgid ""
"Use this method to advance the progress of the load. Each call to ``poll`` "
"will load the next stage of your resource. Keep in mind that each stage is "
"one entire \"atomic\" resource, such as an image, or a mesh, so it will take "
"several frames to load."
msgstr ""
"使用此方法可以推进加载的进度。 每次调用 ``poll`` 都会加载资源的下一个阶段。 "
"请记住，每个阶段都是一个完整的``原子``资源，例如图像或网格，它往往需要几帧才"
"能加载。"

#: ../../docs/tutorials/io/background_loading.rst:50
msgid ""
"Returns ``OK`` on no errors, ``ERR_FILE_EOF`` when loading is finished. Any "
"other return value means there was an error and loading has stopped."
msgstr ""
"没有错误时返回 ``OK`` ，加载完成后返回 ``ERR_FILE_EOF`` 。 返回其他任何值时表"
"示存在错误并且已停止加载。"

#: ../../docs/tutorials/io/background_loading.rst:54
msgid "Load progress (optional)"
msgstr "加载进度(可选)"

#: ../../docs/tutorials/io/background_loading.rst:56
msgid "To query the progress of the load, use the following methods:"
msgstr "要查询加载进度，请使用以下方法:"

#: ../../docs/tutorials/io/background_loading.rst:63
msgid ""
"``get_stage_count`` returns the total number of stages to load. "
"``get_stage`` returns the current stage being loaded."
msgstr ""
"``get_stage_count`` 返回要加载的阶段总数。``get_stage`` 返回当前正在加载的阶"
"段。"

#: ../../docs/tutorials/io/background_loading.rst:67
msgid "Forcing completion (optional)"
msgstr "强制完成(可选)"

#: ../../docs/tutorials/io/background_loading.rst:73
msgid ""
"Use this method if you need to load the entire resource in the current "
"frame, without any more steps."
msgstr "如果需要在当前帧中加载整个资源，请使用此方法，而无需执行别的步骤。"

#: ../../docs/tutorials/io/background_loading.rst:77
msgid "Obtaining the resource"
msgstr "获取资源"

#: ../../docs/tutorials/io/background_loading.rst:83
msgid ""
"If everything goes well, use this method to retrieve your loaded resource."
msgstr "如果一切顺利，请使用此方法检索已加载的资源。"

#: ../../docs/tutorials/io/background_loading.rst:87
msgid "Example"
msgstr "示例"

#: ../../docs/tutorials/io/background_loading.rst:89
msgid ""
"This example demonstrates how to load a new scene. Consider it in the "
"context of the :ref:`doc_singletons_autoload` example."
msgstr ""
"此示例演示如何加载新场景。 请结合 :ref:`doc_singletons_autoload` 示例来看。"

#: ../../docs/tutorials/io/background_loading.rst:92
#, fuzzy
msgid ""
"First, we set up some variables and initialize the ``current_scene`` with "
"the main scene of the game:"
msgstr "首先，我们设置一些变量并用游戏的主场景初始化 ``current_scene`` :"

#: ../../docs/tutorials/io/background_loading.rst:106
#, fuzzy
msgid ""
"The function ``goto_scene`` is called from the game when the scene needs to "
"be switched. It requests an interactive loader, and calls "
"``set_process(true)`` to start polling the loader in the ``_process`` "
"callback. It also starts a \"loading\" animation, which could show a "
"progress bar or loading screen."
msgstr ""
"当需要切换场景时，从游戏中调用 ``goto_scene`` 函数。 它请求一个交互式加载器，"
"并调用 ``set_process(true)`` 同时在 ``_process`` 回调中启动轮询加载器。 它还"
"会启动一个“加载”动画，以显示进度条或加载屏幕等。"

#: ../../docs/tutorials/io/background_loading.rst:128
#, fuzzy
msgid ""
"``_process`` is where the loader is polled. ``poll`` is called, and then we "
"deal with the return value from that call. ``OK`` means keep polling, "
"``ERR_FILE_EOF`` means loading is done, anything else means there was an "
"error. Also note we skip one frame (via ``wait_frames``, set on the "
"``goto_scene`` function) to allow the loading screen to show up."
msgstr ""
"``_process`` 是加载器被轮询的地方。 调用 ``poll`` ，然后我们处理该调用的返回"
"值。 ``OK`` 表示保持轮询， ``ERR_FILE_EOF`` 表示加载完成，其他任何表示存在错"
"误。 另请注意，我们跳过一帧(通过 ``wait_frames`` ，在 ``goto_scene`` 函数上设"
"置)以允许加载屏幕显示。"

#: ../../docs/tutorials/io/background_loading.rst:134
#, fuzzy
msgid ""
"Note how we use ``OS.get_ticks_msec`` to control how long we block the "
"thread. Some stages might load fast, which means we might be able to cram "
"more than one call to ``poll`` in one frame; some might take way more than "
"your value for ``time_max``, so keep in mind we won't have precise control "
"over the timings."
msgstr ""
"注意我们如何使用 ``OS.get_ticks_msec`` 来控制我们阻塞线程的时间。 某些阶段可"
"能加载速度很快，这意味着我们可以在一帧中调用多次调用 ``poll`` ，有些可能比 "
"``time_max`` 的值更多，所以请记住我们不可以精确控制时间。"

#: ../../docs/tutorials/io/background_loading.rst:170
msgid ""
"Some extra helper functions. ``update_progress`` updates a progress bar, or "
"can also update a paused animation (the animation represents the entire load "
"process from beginning to end). ``set_new_scene`` puts the newly loaded "
"scene on the tree. Because it's a scene being loaded, ``instance()`` needs "
"to be called on the resource obtained from the loader."
msgstr ""
"一些额外的辅助函数。 ``update_progress`` 更新进度条，或者也可以更新暂停的动画"
"(动画从头到尾表示整个加载过程)。 ``set_new_scene`` 将新加载的场景放在树上。 "
"因为它是一个被加载的场景，所以需要在从加载器获得的资源上调用 "
"``instance()`` 。"

#: ../../docs/tutorials/io/background_loading.rst:195
msgid "Using multiple threads"
msgstr "使用多个线程"

#: ../../docs/tutorials/io/background_loading.rst:197
msgid ""
"ResourceInteractiveLoader can be used from multiple threads. A couple of "
"things to keep in mind if you attempt it:"
msgstr ""
"多个线程可以用在ResourceInteractiveLoader中。 如果您尝试一下，请记住以下几点:"

#: ../../docs/tutorials/io/background_loading.rst:201
#, fuzzy
msgid "Use a semaphore"
msgstr "使用信号量"

#: ../../docs/tutorials/io/background_loading.rst:203
#, fuzzy
msgid ""
"While your thread waits for the main thread to request a new resource, use a "
"``Semaphore`` to sleep (instead of a busy loop or anything similar)."
msgstr ""
"当您的线程等待主线程请求新资源时，使用信号量来休眠(而不是繁忙的循环或类似的东"
"西)。"

#: ../../docs/tutorials/io/background_loading.rst:207
msgid "Not blocking main thread during the polling"
msgstr "在轮询期间不阻塞主线程"

#: ../../docs/tutorials/io/background_loading.rst:209
#, fuzzy
msgid ""
"If you have a mutex to allow calls from the main thread to your loader "
"class, don't lock the main thread while you call ``poll`` on your loader "
"class. When a resource is done loading, it might require some resources from "
"the low-level APIs (VisualServer, etc), which might need to lock the main "
"thread to acquire them. This might cause a deadlock if the main thread is "
"waiting for your mutex while your thread is waiting to load a resource."
msgstr ""
"如果您有一个互斥锁允许从主线程到您的加载器类的调用，那么在您在加载器上调用 "
"``poll`` 时不要锁定它。 当资源加载完毕时，可能需要来自低级API(VisualServer等)"
"的一些资源，这可能需要锁定主线程以获取它们。 如果主线程在您的线程正在等待加载"
"资源时等待您的互斥锁，则可能会导致死锁。"

#: ../../docs/tutorials/io/background_loading.rst:218
msgid "Example class"
msgstr "示例类"

#: ../../docs/tutorials/io/background_loading.rst:220
msgid ""
"You can find an example class for loading resources in threads here: :"
"download:`resource_queue.gd <files/resource_queue.gd>`. Usage is as follows:"
msgstr ""
"您可以在这里找到一个用于在线程中加载资源的示例类: :download:`resource_queue."
"gd <files / resource_queue.gd>`。 用法如下:"

#: ../../docs/tutorials/io/background_loading.rst:227
msgid "Call after you instance the class to start the thread."
msgstr "在实例化类之后调用以启动线程。"

#: ../../docs/tutorials/io/background_loading.rst:233
#, fuzzy
msgid ""
"Queue a resource. Use optional argument \"p_in_front\" to put it in front of "
"the queue."
msgstr "排队资源。 使用可选参数“p_in_front”将其放在队列前面。"

#: ../../docs/tutorials/io/background_loading.rst:240
msgid "Remove a resource from the queue, discarding any loading done."
msgstr "从队列中删除资源，丢弃任何已完成的加载。"

#: ../../docs/tutorials/io/background_loading.rst:246
#, fuzzy
msgid ""
"Returns ``true`` if a resource is fully loaded and ready to be retrieved."
msgstr "如果资源已完成加载并准备好检索，则返回true。"

#: ../../docs/tutorials/io/background_loading.rst:252
#, fuzzy
msgid ""
"Get the progress of a resource. Returns -1 if there was an error (for "
"example if the resource is not in the queue), or a number between 0.0 and "
"1.0 with the progress of the load. Use mostly for cosmetic purposes "
"(updating progress bars, etc), use ``is_ready`` to find out if a resource is "
"actually ready."
msgstr ""
"获取资源的进度。 错误时返回-1(例如，如果资源不在队列中)，或者在加载进度的情况"
"下返回介于0.0和1.0之间的数字。 主要用于美容目的(更新进度条等)，使用 "
"``is_ready`` 来查明资源是否实际就绪。"

#: ../../docs/tutorials/io/background_loading.rst:262
#, fuzzy
msgid ""
"Returns the fully loaded resource, or ``null`` on error. If the resource is "
"not fully loaded (``is_ready`` returns ``false``), it will block your thread "
"and finish the load. If the resource is not on the queue, it will call "
"``ResourceLoader::load`` to load it normally and return it."
msgstr ""
"返回完全加载的资源，或者出错时返回null。 如果资源没有完成加载(``is_ready``返"
"回false)，它将阻塞您的线程并完成加载。 如果资源不在队列中，它将调用"
"``ResourceLoader :: load``来正常加载它并返回它。"

#: ../../docs/tutorials/io/background_loading.rst:268
msgid "Example:"
msgstr "示例："

#: ../../docs/tutorials/io/background_loading.rst:298
#, fuzzy
msgid ""
"**Note**: this code, in its current form, is not tested in real world "
"scenarios. If you run into any issues, ask for help in one of `Godot's "
"community channels <https://godotengine.org/community>`__."
msgstr ""
"**注意**:当前形式的此代码未在实际场景中进行测试。 在IRC上询问punto(irc."
"freenode.net上的#godotengine)寻求帮助。"
