# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-21 17:14+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Your first 2D shader"
msgstr "您的第一个 2D 着色器"

msgid "Introduction"
msgstr "前言"

#, fuzzy
msgid ""
"Shaders are special programs that execute on the GPU and are used for "
"rendering graphics. All modern rendering is done with shaders. For a more "
"detailed description of what shaders are please see :ref:`What are shaders "
"<doc_introduction_to_shaders>`."
msgstr ""
"着色器是在GPU上运行的, 用来渲染图像的一种特殊的程序. 现代渲染都是通过着色器实"
"现的. 若想了解关于着色器更详细的说明, 请查看 :ref:`着色器是什么 "
"<doc_what_are_shaders>`."

msgid ""
"This tutorial will focus on the practical aspects of writing shader programs "
"by walking you through the process of writing a shader with both vertex and "
"fragment functions. This tutorial targets absolute beginners to shaders."
msgstr ""
"本教程将重点介绍实际编写着色器程序的各个方面, 引导您走过使用顶点和片段函数编"
"写着色器的整个流程. 本教程面向着色器."

msgid ""
"If you have experience writing shaders and are just looking for an overview "
"of how shaders work in Godot, see the :ref:`Shading Reference <toc-shading-"
"reference>`."
msgstr ""
"如果你在着色器方面有一定的经验, 只是想知道着色器在Godot中是如何运作的, 请参"
"阅 :ref:`着色器参考 <toc-shading-reference>`."

msgid "Setup"
msgstr "场景布置"

msgid ""
":ref:`CanvasItem <doc_canvas_item_shader>` shaders are used to draw all 2D"
msgstr ":ref:`CanvasItem <doc_canvas_item_shader>` 着色器用于绘制所有 2D 内容"

#, fuzzy
msgid ""
"objects in Godot, while :ref:`Spatial <doc_spatial_shader>` shaders are used "
"to draw all 3D objects."
msgstr ""
":ref:`CanvasItem <doc_canvas_item_shader>` 着色器用于绘制Godot中的所有2D对"
"象, 而 :ref:`Spatial <doc_spatial_shader>` 着色器用于绘制所有3D对象."

msgid ""
"In order to use a shader it must be attached inside a :ref:`Material "
"<class_material>` which must be attached to an object. Materials are a type "
"of :ref:`Resource <doc_resources>`. To draw multiple objects with the same "
"material, the material must be attached to each object."
msgstr ""
"要使用着色器, 它必须要被附加到一个 :ref:`材质 <class_material>` 上, 这个材质"
"也必须附加在一个对象上. 材质是一种 :ref:`资源 <doc_resources>`. 若要使用同一"
"材质绘制多个对象, 该材质必须附加到每个对象上."

msgid ""
"All objects derived from a :ref:`CanvasItem <class_canvasitem>` have a "
"material property. This includes all :ref:`GUI elements <class_Control>`, :"
"ref:`Sprites <class_sprite>`, :ref:`TileMaps <class_tilemap>`, :ref:"
"`MeshInstance2Ds <class_meshinstance2d>` etc. They also have an option to "
"inherit their parent's material. This can be useful if you have a large "
"number of nodes that you want to use the same material."
msgstr ""
"所有继承自 :ref:`CanvasItem <class_canvasitem>` 的对象都有一个材质属性, 这包"
"含所有的 :ref:`GUI 元素 <class_Control>`, :ref:`精灵 <class_sprite>`, :ref:`"
"方块地图 <class_tilemap>`, :ref:`2D 网格实例 <class_meshinstance2d>` 等等. 它"
"们同时也可以选择性地继承其父类的材质. 如果你有要使用同一材质的很多节点, 这个"
"特性就可以派上用场."

msgid ""
"To begin, create a Sprite node. You can use any CanvasItem, but for this "
"tutorial we will use a Sprite."
msgstr ""
"首先, 创建一个精灵节点. 你其实可以用任意的画布项, 但是在这个教程中我们用精灵."

msgid ""
"In the Inspector, click beside \"Texture\" where it says \"[empty]\" and "
"select \"Load\", then select \"Icon.png\". For new projects, this is the "
"Godot icon. You should now see the icon in the viewport."
msgstr ""
"在属性面板里, 点击 \"材质\" 旁边写着 \"[空]\" 的地方然后选择 \"读取\", 接着选"
"中 \"Icon.png\". 对于新的项目, 这个就是Godot的图标. 你现在就会在视区中看到这"
"个图标."

msgid ""
"Next, look down in the Inspector, under the CanvasItem section, click beside "
"\"Material\" and select \"New ShaderMaterial\". This creates a new Material "
"resource. Click on the sphere that appears. Godot currently doesn't know "
"whether you are writing a CanvasItem Shader or a Spatial Shader and it "
"previews the output of spatial shaders. So what you are seeing is the output "
"of the default Spatial Shader."
msgstr ""
"接下来，在属性面板下的 CanvasItem 部分中，在“Material”旁点击并选择“新建 "
"ShaderMaterial”。这会创建一个新的材质资源。然后点击新出现的球体。Godot 目前还"
"不知道你是要写 CanvasItem 着色器还是 Spatial 着色器，它显示 Spatial 着色器的"
"输出预览，所以你看到的是默认的 Spatial 着色器的输出。"

msgid ""
"Click beside \"Shader\" and select \"New Shader\". Finally, click on the new "
"shader resource and the shader editor will open. You are now ready to begin "
"writing your first shader."
msgstr ""
"点击 \"着色器\" 并选中 \"新着色器\". 最后, 点击新创建的着色器资源, 着色器编辑"
"器就会打开. 你现在就已经准备好开始写你的第一个着色器了."

msgid "Your first CanvasItem shader"
msgstr "你的第一个 CanvasItem 着色器"

msgid ""
"In Godot, all shaders start with a line specifying what type of shader they "
"are. It uses the following format:"
msgstr "在Godot中, 所有的着色器第一行都是指定着色器类型的, 格式如下:"

msgid ""
"Because we are writing a CanvasItem shader, we specify ``canvas_item`` in "
"the first line. All our code will go beneath this declaration."
msgstr ""
"因为我们正在编写CanvasItem着色器, 所以我们在第一行中指定了 ``canvas_item``. "
"我们所有的代码都会在这个声明下面."

msgid ""
"This line tells the engine which built-in variables and functionality to "
"supply you with."
msgstr "这一行告诉游戏引擎要提供你哪些内置变量以及函数."

msgid ""
"In Godot you can override three functions to control how the shader "
"operates; ``vertex``, ``fragment``, and ``light``. This tutorial will walk "
"you through writing a shader with both vertex and fragment functions. Light "
"functions are significantly more complex than vertex and fragment functions "
"and so will not be covered here."
msgstr ""
"在Godot中, 你可以重写三个函数来控制着色器的运作, 它们是 ``vertex`` (顶点函"
"数), ``fragment`` (片段函数)和 ``light`` (光照函数). 本教程会引导你写出一个包"
"含顶点和片段函数的着色器. 因为光照函数比另外两个函数要复杂非常多, 所以在这里"
"不会进行讲解."

msgid "Your first fragment function"
msgstr "您的第一个片段函数"

msgid ""
"The fragment function runs for every pixel in a Sprite and determines what "
"color that pixel should be."
msgstr "片段函数对精灵中的每个像素进行操作, 并且决定这个像素应该是什么颜色的."

msgid ""
"They are restricted to the pixels covered by the Sprite, that means you "
"cannot use one to, for example, create an outline around a Sprite."
msgstr ""
"它们限制在精灵覆盖的那些像素中, 这也就意味着, 你无法用片段函数来实现例如在精"
"灵周围加边框的事情."

msgid ""
"The most basic fragment function does nothing except assign a single color "
"to every pixel."
msgstr "最基础的片段函数仅仅给每个像素赋予一个颜色."

msgid ""
"We do so by writing a ``vec4`` to the built-in variable ``COLOR``. ``vec4`` "
"is shorthand for constructing a vector with 4 numbers. For more information "
"about vectors see the :ref:`Vector math tutorial <doc_vector_math>` "
"``COLOR`` is both an input variable to the fragment function and the final "
"output from it."
msgstr ""
"我们向内置变量 ``COLOR`` 中写入一个 ``vec4`` 来做到这点. ``vec4`` 是创建一个"
"四维向量的简写形式. 若想进一步了解向量, 请参阅 :ref:`向量数学教程 "
"<doc_vector_math>`. ``COLOR`` 变量既是片段函数的一个输入, 同时也是它的最终输"
"出."

msgid ""
"Congratulations! You're done. You have successfully written your first "
"shader in Godot."
msgstr "恭喜你！你成功在Godot中写出了你的第一个着色器."

msgid "Now let's make things more complex."
msgstr "接着, 我们来讨论更复杂的事情."

msgid ""
"There are many inputs to the fragment function that you can use for "
"calculating ``COLOR``. ``UV`` is one of them. UV coordinates are specified "
"in your Sprite (without you knowing it!) and they tell the shader where to "
"read from textures for each part of the mesh."
msgstr ""
"你可以使用片段函数中的很多输入来计算 ``COLOR``, ``UV`` 就是其中的一个. 你的精"
"灵指定了UV坐标(在你不知情的情况下！), 而它们告诉着色器, 对于网格的每个部分从"
"纹理的何处读取信息."

msgid ""
"In the fragment function you can only read from ``UV``, but you can use it "
"in other functions or to assign values to ``COLOR`` directly."
msgstr ""
"在片段函数中你只能从 ``UV`` 中读取, 但是你可以在其他函数中使用, 或者直接对 "
"``COLOR`` 赋值."

msgid "``UV`` varies between 0-1 from left-right and from top-bottom."
msgstr "``UV`` 取值在0-1之间, 从左到右, 由上到下."

msgid "Using ``TEXTURE`` built-in"
msgstr "使用内置变量 ``TEXTURE``"

msgid ""
"When you want to adjust a color in a Sprite you cannot just adjust the color "
"from the texture manually like in the code below."
msgstr "当你想调整精灵中的颜色时, 你不能像下面的代码那样手动修改纹理中的颜色."

msgid ""
"The default fragment function reads from a texture and displays it. When you "
"overwrite the default fragment function, you lose that functionality, so you "
"have to implement it yourself. You read from textures using the ``texture`` "
"function. Certain nodes, like Sprites, have a dedicated texture variable "
"that can be accessed in the shader using ``TEXTURE``. Use it together with "
"``UV`` and ``texture`` to draw the Sprite."
msgstr ""
"默认的片段函数从纹理中读取并显示它. 当你覆盖了默认的片段函数, 你就失去了这个"
"功能, 所以你必须自己实现它. 你使用 \"纹理\" 函数从纹理中读取. 某些节点, 比如"
"精灵, 有一个专用的纹理变量, 可以在着色器中使用 \"纹理\" 访问. 使用它与 \"UV"
"\" 和 \"纹理\" 一起绘制精灵."

msgid "Uniform input"
msgstr "Uniform输入"

msgid ""
"Uniform input is used to pass data into a shader that will be the same "
"across the entire shader."
msgstr "Uniform输入是用来向着色器传递数据的, 这些数据在整个着色器中是相同的."

msgid ""
"You can use uniforms by defining them at the top of your shader like so:"
msgstr "你可以通过在着色器顶部定义来使用Uniform值, 如:"

msgid ""
"For more information about usage see the :ref:`Shading Language doc "
"<doc_shading_language>`."
msgstr "用法的更多详情请参见 :ref:`着色语言文档 <doc_shading_language>` ."

msgid "Add a uniform to change the amount of blue in our Sprite."
msgstr "添加一个Uniform值来改变精灵中蓝色量."

msgid ""
"Now you can change the amount of blue in the Sprite from the editor. Look "
"back at the Inspector under where you created your shader. You should see a "
"section called \"Shader Param\". Unfold that section and you will see the "
"uniform you just declared. If you change the value in the editor, it will "
"overwrite the default value you provided in the shader."
msgstr ""
"现在你可以在编辑器中改变Sprite的蓝色量. 回头看看你创建着色器的地方的属性面"
"板. 你应该看到一个叫做 \"Shader Param\" 的部分. 展开这个部分, 你会看到你刚刚"
"声明的Uniform. 如果你在编辑器中改变这个值, 它将覆盖你在着色器中提供的默认值."

msgid "Interacting with shaders from code"
msgstr "代码与着色器的交互"

msgid ""
"You can change uniforms from code using the function ``set_shader_param()`` "
"which is called on the node's material resource. With a Sprite node, the "
"following code can be used to set the ``blue`` uniform."
msgstr ""
"你可以使用在节点的材质资源上调用的函数 ``set_shader_param()`` , 从代码中改变"
"Uniform. 对于一个Sprite节点, 可以使用下面的代码来设置 ``blue`` Uniform."

msgid ""
"Note that the name of the uniform is a string. The string must match exactly "
"with how it is written in the shader, including spelling and case."
msgstr ""
"注意,uniform值的名称是一个字符串. 字符串必须与它在着色器中的书写方式完全匹"
"配, 包括拼写和大小写."

msgid "Your first vertex function"
msgstr "你的第一个顶点函数"

msgid "Now that we have a fragment function, let's write a vertex function."
msgstr "现在我们有了一个片段函数, 我们再写一个顶点函数."

msgid ""
"Use the vertex function to calculate where on the screen each vertex should "
"end up."
msgstr "使用顶点函数计算屏幕上每个顶点的结束位置."

msgid ""
"The most important variable in the vertex function is ``VERTEX``. Initially, "
"it specifies the vertex coordinates in your model, but you also write to it "
"to determine where to actually draw those vertices. ``VERTEX`` is a ``vec2`` "
"that is initially presented in local-space (i.e. not relative to the camera, "
"viewport, or parent nodes)."
msgstr ""
"顶点函数中最重要的变量是顶点. 最初, 它指定模型中的顶点坐标, 但你也要写进去决"
"定在哪里画那些顶点.\"顶点\" 是一个 \"二维向量\", 它最初出现在局部空间中(即与"
"摄像机, 视图或父节点无关)."

msgid "You can offset the vertices by directly adding to ``VERTEX``."
msgstr "您可以通过直接添加到 \"顶点\" 来偏移顶点."

msgid ""
"Combined with the ``TIME`` built-in variable, this can be used for simple "
"animation."
msgstr "与内置变量 \"时间\" 相结合, 可用于简单的动画."

msgid "Conclusion"
msgstr "总结"

msgid ""
"At their core, shaders do what you have seen so far, they compute ``VERTEX`` "
"and ``COLOR``. It is up to you to dream up more complex mathematical "
"strategies for assigning values to those variables."
msgstr ""
"着色器的核心, 如你所见, 是计算 ``VERTEX`` 和 ``COLOR``. 你可以制定更复杂的数"
"学策略来给这些变量赋值."

msgid ""
"For inspiration, take a look at some of the more advanced shader tutorials, "
"and look at other sites like `Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ and `The Book of Shaders <https://"
"thebookofshaders.com>`_."
msgstr ""
"一些更高级的着色器教程可以给你启发, 如 `Shadertoy <https://www.shadertoy.com/"
"results?query=&sort=popular&from=10&num=4>`_ 和 `着色器之书 <https://"
"thebookofshaders.com/?lan=ch>`_ ."
