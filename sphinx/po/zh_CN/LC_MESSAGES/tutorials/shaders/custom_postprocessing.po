# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-18 18:00+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom post-processing"
msgstr "自定义后期处理"

msgid "Introduction"
msgstr "前言"

#, fuzzy
msgid ""
"Godot provides many post-processing effects out of the box, including Bloom, "
"DOF, and SSAO. However, advanced use cases may require custom effects. This "
"article explains how to write your own custom effects."
msgstr ""
"Godot 提供许多开箱即用的后处理效果，包括泛光、DOF 和 SSAO。有时你想编写自己的"
"自定义效果。下面介绍如何做到这一点。"

msgid ""
"The easiest way to implement a custom post-processing shader is to use "
"Godot's built-in ability to read from the screen texture. If you're not "
"familiar with this, you should read the :ref:`Screen Reading Shaders "
"Tutorial <doc_screen-reading_shaders>` first."
msgstr ""
"实现自定义后期处理着色器的最简单方法是使用Godot的内置功能从屏幕纹理中读取. 如"
"果您不熟悉这个, 您应该先阅读 :ref:`屏幕阅读着色器教程 <doc_screen-"
"reading_shaders>` ."

msgid "Single pass post-processing"
msgstr "单通后期处理"

msgid ""
"Post-processing effects are shaders applied to a frame after Godot has "
"rendered it. To apply a shader to a frame, create a :ref:`CanvasLayer "
"<class_CanvasLayer>`, and give it a :ref:`ColorRect <class_ColorRect>`. "
"Assign a new :ref:`ShaderMaterial <class_ShaderMaterial>` to the newly "
"created ``ColorRect``, and set the ``ColorRect``'s layout to \"Full Rect\"."
msgstr ""

#, fuzzy
msgid "Your scene tree will look something like this:"
msgstr "您的场景层次结构将如下所示："

msgid ""
"Another more efficient method is to use a :ref:`BackBufferCopy "
"<class_BackBufferCopy>` to copy a region of the screen to a buffer and to "
"access it in a shader script through a ``sampler2D`` using "
"``hint_screen_texture``."
msgstr ""

msgid ""
"As of the time of writing, Godot does not support rendering to multiple "
"buffers at the same time. Your post-processing shader will not have access "
"to normals or other render passes. You only have access to the rendered "
"frame."
msgstr ""
"在撰写本文时,Godot不支持同时对多个缓冲区进行渲染. 处理之后着色器将无法访问法"
"线或其他渲染通道. 你只能访问已渲染的帧."

#, fuzzy
msgid ""
"For this demo, we will use this :ref:`Sprite <class_Sprite2D>` of a sheep."
msgstr ":ref:`Sprite <class_Sprite>` 中间的这个小十字就是旋转轴心："

msgid ""
"Assign a new :ref:`Shader <class_Shader>` to the ``ColorRect``'s "
"``ShaderMaterial``. You can access the frame's texture and UV with a "
"``sampler2D`` using ``hint_screen_texture`` and the built in ``SCREEN_UV`` "
"uniforms."
msgstr ""

#, fuzzy
msgid ""
"Copy the following code to your shader. The code below is a hex pixelization "
"shader by `arlez80 <https://bitbucket.org/arlez80/hex-mosaic/src/master/>`_,"
msgstr ""
"将以下代码复制到着色器. 上面的代码是单通道边缘检测滤波器, `Sobel 滤波器 "
"<https://en.wikipedia.org/wiki/Sobel_operator>`_ ."

#, fuzzy
msgid "The sheep will look something like this:"
msgstr "您的场景层次结构将如下所示："

msgid "Multi-pass post-processing"
msgstr "多通后期处理"

#, fuzzy
msgid ""
"Some post-processing effects like blurs are resource intensive. You can make "
"them run a lot faster if you break them down in multiple passes. In a "
"multipass material, each pass takes the result from the previous pass as an "
"input and processes it."
msgstr ""
"像模糊这样的后期处理效果是资源密集型的. 但是如果您在多次通过中将它们分解, 您"
"可以让它们运行得更快. 在多通道材质中, 每次传递都将前一次传递的结果作为输入并"
"对其进行处理."

msgid ""
"To produce a multi-pass post-processing shader, you stack ``CanvasLayer`` "
"and ``ColorRect`` nodes. In the example above, you use a ``CanvasLayer`` "
"object to render a shader using the frame on the layer below. Apart from the "
"node structure, the steps are the same as with the single-pass post-"
"processing shader."
msgstr ""

#, fuzzy
msgid ""
"As an example, you could write a full screen Gaussian blur effect by "
"attaching the following pieces of code to each of the ``ColorRect`` nodes. "
"The order in which you apply the shaders depends on the position of the "
"``CanvasLayer`` in the scene tree, higher means sooner. For this blur "
"shader, the order does not matter."
msgstr ""
"例如, 您可以通过将以下代码段附加到以下每个代码来编写全屏高斯模糊效果 :ref:"
"`ViewportContainers <class_ViewportContainer>`. 应用着色器的顺序无关紧要:"

msgid ""
"Using the above code, you should end up with a full screen blur effect like "
"below."
msgstr "使用上面的代码, 您应该得到如下所示的全屏模糊效果."

msgid "Translation status"
msgstr "翻译状态"
