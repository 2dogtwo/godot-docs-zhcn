# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-09 11:43+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/platform/services_for_ios.rst:4
msgid "Services for iOS"
msgstr "适用于iOS的服务"

#: ../../docs/tutorials/platform/services_for_ios.rst:6
msgid ""
"At the moment, there are two iOS APIs partially implemented, GameCenter and "
"Storekit. Both use the same model of asynchronous calls explained below."
msgstr ""
"目前，有两个部分实现的iOS API，GameCenter和Storekit。 两者都使用下面解释的相"
"同模型的异步调用。"

#: ../../docs/tutorials/platform/services_for_ios.rst:11
msgid "Asynchronous methods"
msgstr "异步方法"

#: ../../docs/tutorials/platform/services_for_ios.rst:13
msgid ""
"When requesting an asynchronous operation, the method will look like this:"
msgstr "请求异步操作时，方法如下所示:"

#: ../../docs/tutorials/platform/services_for_ios.rst:20
msgid ""
"The parameter will usually be a Dictionary, with the information necessary "
"to make the request, and the call will have two phases. First, the method "
"will immediately return an Error value. If the Error is not 'OK', the call "
"operation is completed, with an error probably caused locally (no internet "
"connection, API incorrectly configured, etc). If the error value is 'OK', a "
"response event will be produced and added to the 'pending events' queue. "
"Example:"
msgstr ""
"参数通常是一个字典，包含发出请求所需的信息，并且调用将有两个阶段。 首先，该方"
"法将立即返回Error值。 如果错误不是“OK”，则调用操作完成，可能在本地引起错误(没"
"有Internet连接，API配置不正确等)。 如果错误值为“OK”，则会生成响应事件并将其添"
"加到“挂起事件”队列中。 例:"

#: ../../docs/tutorials/platform/services_for_ios.rst:47
msgid ""
"Remember that when a call returns OK, the API will *always* produce an event "
"through the pending_event interface, even if it's an error, or a network "
"timeout, etc. You should be able to, for example, safely block the interface "
"waiting for a reply from the server. If any of the APIs don't behave this "
"way it should be treated as a bug."
msgstr ""
"请记住，当一个调用返回OK时，API将 *始终* 通过pending_event接口产生一个事件，"
"即使它是一个错误，或网络超时等。您应该能够，例如，安全地阻止等待的接口 来自服"
"务器的回复。 如果任何API不以这种方式运行，则应将其视为错误。"

#: ../../docs/tutorials/platform/services_for_ios.rst:53
msgid "The pending event interface consists of two methods:"
msgstr "挂起事件接口包含两个方法:"

#: ../../docs/tutorials/platform/services_for_ios.rst:55
msgid ""
"``get_pending_event_count()`` Returns the number of pending events on the "
"queue."
msgstr "``get_pending_event_count()``返回队列中挂起事件的数量。"

#: ../../docs/tutorials/platform/services_for_ios.rst:58
msgid ""
"``Variant pop_pending_event()`` Pops the first event from the queue and "
"returns it."
msgstr "``Variant pop_pending_event()``弹出队列中的第一个事件并返回它。"

#: ../../docs/tutorials/platform/services_for_ios.rst:62
msgid "Store Kit"
msgstr "商店套件"

#: ../../docs/tutorials/platform/services_for_ios.rst:64
msgid "Implemented in platform/iphone/in_app_store.mm"
msgstr "在platform / iphone / in_app_store.mm中实现"

#: ../../docs/tutorials/platform/services_for_ios.rst:66
msgid ""
"The Store Kit API is accessible through the \"InAppStore\" singleton (will "
"always be available from gdscript). It is initialized automatically. It has "
"three methods for purchasing:"
msgstr ""
"Store Kit API可通过“InAppStore”单例访问(始终可从gdscript获得)。 它会自动初始"
"化。 它有三种购买方式:"

#: ../../docs/tutorials/platform/services_for_ios.rst:70
msgid "``Error purchase(Variant p_params);``"
msgstr "``Error purchase(Variant p_params);``"

#: ../../docs/tutorials/platform/services_for_ios.rst:71
msgid "``Error request_product_info(Variant p_params);``"
msgstr "``Error request_product_info(Variant p_params);``"

#: ../../docs/tutorials/platform/services_for_ios.rst:72
msgid "``Error restore_purchases();``"
msgstr "``Error restore_purchases();``"

#: ../../docs/tutorials/platform/services_for_ios.rst:74
msgid "and the pending_event interface"
msgstr "和pending_event接口"

#: ../../docs/tutorials/platform/services_for_ios.rst:82
msgid "purchase"
msgstr "采购"

#: ../../docs/tutorials/platform/services_for_ios.rst:84
msgid "Purchases a product id through the Store Kit API."
msgstr "通过Store Kit API购买产品ID。"

#: ../../docs/tutorials/platform/services_for_ios.rst:87
#: ../../docs/tutorials/platform/services_for_ios.rst:127
#: ../../docs/tutorials/platform/services_for_ios.rst:196
#: ../../docs/tutorials/platform/services_for_ios.rst:240
#: ../../docs/tutorials/platform/services_for_ios.rst:385
msgid "Parameters"
msgstr "参数"

#: ../../docs/tutorials/platform/services_for_ios.rst:89
msgid ""
"Takes a Dictionary as a parameter, with one field, ``product_id``, a string "
"with your product id. Example:"
msgstr ""
"将Dictionary作为参数，使用一个字段 ``product_id`` ，一个包含产品ID的字符串。 "
"例:"

#: ../../docs/tutorials/platform/services_for_ios.rst:97
#: ../../docs/tutorials/platform/services_for_ios.rst:137
#: ../../docs/tutorials/platform/services_for_ios.rst:161
#: ../../docs/tutorials/platform/services_for_ios.rst:210
#: ../../docs/tutorials/platform/services_for_ios.rst:257
#: ../../docs/tutorials/platform/services_for_ios.rst:286
#: ../../docs/tutorials/platform/services_for_ios.rst:316
#: ../../docs/tutorials/platform/services_for_ios.rst:348
#: ../../docs/tutorials/platform/services_for_ios.rst:405
msgid "Response event"
msgstr "响应事件"

#: ../../docs/tutorials/platform/services_for_ios.rst:99
#: ../../docs/tutorials/platform/services_for_ios.rst:139
#: ../../docs/tutorials/platform/services_for_ios.rst:212
#: ../../docs/tutorials/platform/services_for_ios.rst:259
#: ../../docs/tutorials/platform/services_for_ios.rst:288
#: ../../docs/tutorials/platform/services_for_ios.rst:318
#: ../../docs/tutorials/platform/services_for_ios.rst:350
#: ../../docs/tutorials/platform/services_for_ios.rst:407
msgid "The response event will be a dictionary with the following fields:"
msgstr "响应事件将是包含以下字段的字典:"

#: ../../docs/tutorials/platform/services_for_ios.rst:101
#: ../../docs/tutorials/platform/services_for_ios.rst:214
#: ../../docs/tutorials/platform/services_for_ios.rst:261
#: ../../docs/tutorials/platform/services_for_ios.rst:290
#: ../../docs/tutorials/platform/services_for_ios.rst:320
#: ../../docs/tutorials/platform/services_for_ios.rst:352
msgid "On error:"
msgstr "出错:"

#: ../../docs/tutorials/platform/services_for_ios.rst:111
#: ../../docs/tutorials/platform/services_for_ios.rst:225
#: ../../docs/tutorials/platform/services_for_ios.rst:271
#: ../../docs/tutorials/platform/services_for_ios.rst:300
#: ../../docs/tutorials/platform/services_for_ios.rst:330
#: ../../docs/tutorials/platform/services_for_ios.rst:362
msgid "On success:"
msgstr "成功时:"

#: ../../docs/tutorials/platform/services_for_ios.rst:122
msgid "request_product_info"
msgstr "request_product_info"

#: ../../docs/tutorials/platform/services_for_ios.rst:124
msgid "Requests the product info on a list of product IDs."
msgstr "在产品ID列表中请求产品信息。"

#: ../../docs/tutorials/platform/services_for_ios.rst:129
msgid ""
"Takes a Dictionary as a parameter, with one field, ``product_ids``, a string "
"array with a list of product ids. Example:"
msgstr ""
"将Dictionary作为参数，使用一个字段 ``product_ids`` ，一个带有产品ID列表的字符"
"串数组。 例:"

#: ../../docs/tutorials/platform/services_for_ios.rst:155
msgid "restore_purchases"
msgstr "restore_purchases"

#: ../../docs/tutorials/platform/services_for_ios.rst:157
msgid ""
"Restores previously made purchases on user's account. This will create "
"response events for each previously purchased product id."
msgstr ""
"恢复以前在用户帐户上进行的购买。 这将为每个先前购买的产品ID创建响应事件。"

#: ../../docs/tutorials/platform/services_for_ios.rst:163
msgid "The response events will be dictionaries with the following fields:"
msgstr "响应事件将是包含以下字段的字典:"

#: ../../docs/tutorials/platform/services_for_ios.rst:174
msgid "Game Center"
msgstr "游戏中心"

#: ../../docs/tutorials/platform/services_for_ios.rst:176
msgid "Implemented in platform/iphone/game_center.mm"
msgstr "在platform / iphone / game_center.mm中实现"

#: ../../docs/tutorials/platform/services_for_ios.rst:178
msgid ""
"The Game Center API is available through the \"GameCenter\" singleton. It "
"has 6 methods:"
msgstr "Game Center API可通过“GameCenter”单例获得。 它有6种方法:"

#: ../../docs/tutorials/platform/services_for_ios.rst:181
msgid "``Error post_score(Variant p_score);``"
msgstr "``Error post_score(Variant p_score);``"

#: ../../docs/tutorials/platform/services_for_ios.rst:182
msgid "``Erroraward_achievement(Variant p_params);``"
msgstr "``Erroraward_achievement(Variant p_params);``"

#: ../../docs/tutorials/platform/services_for_ios.rst:183
msgid "``Error reset_achievements();``"
msgstr "``Error reset_achievements();``"

#: ../../docs/tutorials/platform/services_for_ios.rst:184
msgid "``Error request_achievements();``"
msgstr "``Error request_achievements();``"

#: ../../docs/tutorials/platform/services_for_ios.rst:185
msgid "``Error request_achievement_descriptions();``"
msgstr "``Error request_achievement_descriptions();``"

#: ../../docs/tutorials/platform/services_for_ios.rst:186
msgid "``Error show_game_center(Variant p_params);``"
msgstr "``Error show_game_center(Variant p_params);``"

#: ../../docs/tutorials/platform/services_for_ios.rst:188
msgid "plus the standard pending event interface."
msgstr "加上标准的待处理事件接口。"

#: ../../docs/tutorials/platform/services_for_ios.rst:191
msgid "post_score"
msgstr "post_score"

#: ../../docs/tutorials/platform/services_for_ios.rst:193
msgid "Posts a score to a Game Center leaderboard."
msgstr "将分数发布到游戏中心排行榜。"

#: ../../docs/tutorials/platform/services_for_ios.rst:198
#: ../../docs/tutorials/platform/services_for_ios.rst:387
msgid "Takes a Dictionary as a parameter, with two fields:"
msgstr "将Dictionary作为参数，包含两个字段:"

#: ../../docs/tutorials/platform/services_for_ios.rst:200
msgid "``score`` a float number"
msgstr "``得分``浮点数"

#: ../../docs/tutorials/platform/services_for_ios.rst:201
msgid "``category`` a string with the category name"
msgstr "``category``一个带有类别名称的字符串"

#: ../../docs/tutorials/platform/services_for_ios.rst:203
#: ../../docs/tutorials/platform/services_for_ios.rst:250
msgid "Example:"
msgstr "例:"

#: ../../docs/tutorials/platform/services_for_ios.rst:235
msgid "award_achievement"
msgstr "award_achievement"

#: ../../docs/tutorials/platform/services_for_ios.rst:237
msgid "Modifies the progress of a Game Center achievement."
msgstr "修改游戏中心成就的进度。"

#: ../../docs/tutorials/platform/services_for_ios.rst:242
msgid "Takes a Dictionary as a parameter, with 3 fields:"
msgstr "将Dictionary作为参数，包含3个字段:"

#: ../../docs/tutorials/platform/services_for_ios.rst:244
msgid "``name`` (string) the achievement name"
msgstr "``name``(字符串)成就名称"

#: ../../docs/tutorials/platform/services_for_ios.rst:245
msgid ""
"``progress`` (float) the achievement progress from 0.0 to 100.0 (passed to "
"``GKAchievement::percentComplete``)"
msgstr ""
"``progress``(浮动)成就进度从0.0到100.0(传递给``GKAchievement :: "
"percentComplete``)"

#: ../../docs/tutorials/platform/services_for_ios.rst:247
msgid ""
"``show_completion_banner`` (bool) whether Game Center should display an "
"achievement banner at the top of the screen"
msgstr "``show_completion_banner``(bool)游戏中心是否应该在屏幕顶部显示成就横幅"

#: ../../docs/tutorials/platform/services_for_ios.rst:281
msgid "reset_achievements"
msgstr "reset_achievements"

#: ../../docs/tutorials/platform/services_for_ios.rst:283
msgid "Clears all Game Center achievements. The function takes no parameters."
msgstr "清除所有Game Center成就。 该函数不带参数。"

#: ../../docs/tutorials/platform/services_for_ios.rst:310
msgid "request_achievements"
msgstr "request_achievements"

#: ../../docs/tutorials/platform/services_for_ios.rst:312
msgid ""
"Request all the Game Center achievements the player has made progress on. "
"The function takes no parameters."
msgstr "请求游戏角色取得进步的所有游戏中心成就。 该函数不带参数。"

#: ../../docs/tutorials/platform/services_for_ios.rst:342
msgid "request_achievement_descriptions"
msgstr "request_achievement_descriptions"

#: ../../docs/tutorials/platform/services_for_ios.rst:344
msgid ""
"Request the descriptions of all existing Game Center achievements regardless "
"of progress. The function takes no parameters."
msgstr "无论进度如何，都要求描述所有现有的Game Center成就。 该函数不带参数。"

#: ../../docs/tutorials/platform/services_for_ios.rst:379
msgid "show_game_center"
msgstr "show_game_center"

#: ../../docs/tutorials/platform/services_for_ios.rst:381
msgid ""
"Displays the built in Game Center overlay showing leaderboards, "
"achievements, and challenges."
msgstr "显示内置的游戏中心叠加层，显示排行榜，成就和挑战。"

#: ../../docs/tutorials/platform/services_for_ios.rst:389
msgid ""
"``view`` (string) (optional) the name of the view to present. Accepts "
"\"default\", \"leaderboards\", \"achievements\", or \"challenges\". Defaults "
"to \"default\"."
msgstr ""
"``view``(string)(可选)要呈现的视图的名称。 接受“默认”，“排行榜”，“成就”或“挑"
"战”。 默认为“默认”。"

#: ../../docs/tutorials/platform/services_for_ios.rst:392
msgid ""
"``leaderboard_name`` (string) (optional) the name of the leaderboard to "
"present. Only used when \"view\" is \"leaderboards\" (or \"default\" is "
"configured to show leaderboards). If not specified, Game Center will display "
"the aggregate leaderboard."
msgstr ""
"``leaderboard_name``(字符串)(可选)要显示的排行榜的名称。 仅在“视图”为“排行"
"榜”(或“默认”配置为显示排行榜)时使用。 如果未指定，Game Center将显示聚合排行"
"榜。"

#: ../../docs/tutorials/platform/services_for_ios.rst:397
msgid "Examples:"
msgstr "示例:"

#: ../../docs/tutorials/platform/services_for_ios.rst:409
msgid "On close:"
msgstr "关闭时:"

#: ../../docs/tutorials/platform/services_for_ios.rst:419
msgid "Multi-platform games"
msgstr "多平台游戏"

#: ../../docs/tutorials/platform/services_for_ios.rst:421
msgid ""
"When working on a multi-platform game, you won't always have the \"GameCenter"
"\" singleton available (for example when running on PC or Android). Because "
"the gdscript compiler looks up the singletons at compile time, you can't "
"just query the singletons to see and use what you need inside a conditional "
"block, you need to also define them as valid identifiers (local variable or "
"class member). This is an example of how to work around this in a class:"
msgstr ""
"在开发多平台游戏时，您不会总是使用“GameCenter”单例(例如在PC或Android上运行"
"时)。 因为gdscript编译器在编译时查找单例，所以不能只查询单例以查看和使用条件"
"块中需要的内容，还需要将它们定义为有效标识符(局部变量或类成员)。 这是一个如何"
"在类中解决此问题的示例:"
