# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-26 22:13+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:4
msgid "Thread safe APIs"
msgstr "线程安全的API"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:7
msgid "Threads"
msgstr "线程"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:9
msgid ""
"Using threads is a common way to balance processing scatter it across CPUs "
"and cores. Godot supports multi threading, but not in the whole engine."
msgstr ""
"使用线程是一种平衡进程的常用方法, 它可将工作分散到各个CPU和核心中。 Godot支持"
"多线程，但不是在整个引擎中。"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:12
msgid ""
"Below is a list of the areas in Godot and how they can be used with threads."
msgstr "下面是Godot的相关领域列表以及它们如何与线程一起使用的介绍。"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:15
msgid "Global scope"
msgstr "全局范围"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:17
msgid ""
":ref:`Global Scope<class_@GlobalScope>` singletons are all thread safe. "
"Accessing servers from threads is supported (for VisualServer and Physics "
"servers, ensure threaded or thread safe operation is enabled in the project "
"settings!)."
msgstr ""
":ref:`Global Scope<class_@GlobalScope>` 单例都是线程安全的。 支持从线程访问服"
"务器(对于VisualServer和Physics服务器，确保在项目设置中启用了线程安全操作！)。"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:19
msgid ""
"This makes them ideal for code that creates dozens of thousands of instances "
"in servers and controls them from threads. Of course, it requires a bit more "
"code, as this is used directly and not within the scene tree."
msgstr ""
"这使它们成为在服务器中创建数十万个实例并从线程控制它们的代码的理想选择。 当"
"然，还需要更多的代码, 因为这是直接使用的而不是嵌入场景树中使用 。"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:22
msgid "Scene tree"
msgstr "场景树"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:24
msgid ""
"Interacting with the active scene tree is **NOT** thread safe. Make sure to "
"use mutexes when sending data between threads. If you want to call functions "
"from a thread, the *call_deferred* function may be used:"
msgstr ""
"与激活的场景树交互 **不是** 线程安全的。 确保在线程之间发送数据时使用互斥"
"锁。 如果要从线程调用函数，可以使用 *call_deferred* 函数:"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:33
msgid ""
"However, creating scene chunks (nodes in tree arrangement) outside the "
"active tree is fine. This way, parts of a scene can be built or instantiated "
"in a thread, then added in the main thread:"
msgstr ""
"但是，可以在激活的场景树外创建场景块(以树形式排列的节点)。 这样，可以在线程中"
"构建或实例化部分场景，然后将其添加到主线程中:"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:43
msgid "GDScript arrays, dictionaries"
msgstr "GDScript数组，字典"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:45
msgid ""
"In GDScript, reading and writing elements from multiple threads is ok, but "
"anything that changes the container size (resizing, adding or removing "
"elements) requires locking a mutex."
msgstr ""
"在GDScript中，可以从多个线程读取和写入元素，但是任何改变容器大小(调整大小，添"
"加或删除元素)的操作都需要锁定互斥。"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:48
msgid "Resources"
msgstr "资源"

#: ../../docs/tutorials/threads/thread_safe_apis.rst:50
msgid ""
"Modifying a unique resource from multiple threads is not supported, but "
"loading them on threads or handling a reference is perfectly supported. "
"Scenes, textures, meshes, etc. Can be loaded and manipulated on threads, "
"then added to the active scene in the main thread."
msgstr ""
"不支持从多个线程修改唯一资源，但完全支持在线程上加载它们或处理引用。 场景，纹"
"理，网格等可以在线程上加载和操作，然后添加到主线程中的活动场景中。"
