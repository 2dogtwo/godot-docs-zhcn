# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:4
msgid "Custom drawing in 2D"
msgstr "2D中的自定义绘图"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:7
msgid "Why?"
msgstr "为什么？"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:9
msgid ""
"Godot has nodes to draw sprites, polygons, particles, and all sorts of "
"stuff. For most cases, this is enough; but not always. Before crying in "
"fear, angst, and rage because a node to draw that specific *something* does "
"not exist... it would be good to know that it is possible to easily make any "
"2D node (be it :ref:`Control <class_Control>` or :ref:`Node2D "
"<class_Node2D>` based) draw custom commands. It is *really* easy to do it, "
"too."
msgstr ""
"Godot有Sprite、多边形、粒子和各种东西的节点。 在大多数情况下，他们已经足够"
"了, 但并不总是这样。在因为不存在绘制特定 *东西* 的节点，而在恐惧、焦虑和愤怒"
"中哭泣之前...有知道, 让任何2D节点(不管它是继承自 :ref:`Control "
"<class_Control>` 还是 :ref:`Node2D <class_Node2D>` ) 绘制一个自定义命令是很轻"
"松的。 而且这 *真的非常* 容易操作。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:17
msgid "But..."
msgstr "但是..."

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:19
msgid ""
"Custom drawing manually in a node is *really* useful. Here are some examples "
"why:"
msgstr "在节点中手动自定义绘图 *真的* 非常有用。 以下是一些示例原因:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:22
msgid ""
"Drawing shapes or logic that is not handled by nodes (example: making a node "
"that draws a circle, an image with trails, a special kind of animated "
"polygon, etc)."
msgstr ""
"绘制未由节点处理的形状或逻辑(例如：制作一个可以绘制圆，带有轨迹的图像，特殊类"
"型的动画多边形等的节点)。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:25
msgid ""
"Visualizations that are not that compatible with nodes: (example: a tetris "
"board). The tetris example uses a custom draw function to draw the blocks."
msgstr ""
"与节点不兼容的可视化：(例如：俄罗斯方块)。 Godot俄罗斯方块示例使用自定义绘制"
"功能来绘制那些小块。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:28
msgid ""
"Drawing a large number of simple objects. Custom drawing avoids the overhead "
"of using nodes which makes it less memory intensive and potentially faster."
msgstr ""
"绘制大量的简单对象。自定义绘制避免了使用节点的开销，这减少了内存占用，而且有"
"可能更快。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:31
msgid ""
"Making a custom UI control. There are plenty of controls available, but it's "
"easy to run into the need to make a new, custom one."
msgstr ""
"制作自定义UI控件。 尽管有很多可用的控件，但很容易遇到需要制作新自定义控件的情"
"况。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:35
msgid "OK, how?"
msgstr "好吧，怎么做？"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:37
msgid ""
"Add a script to any :ref:`CanvasItem <class_CanvasItem>` derived node, like :"
"ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`. Then override "
"the ``_draw()`` function."
msgstr ""
"添加一个脚本到任何 :ref:`CanvasItem <class_CanvasItem>` 的派生节点，如 :ref:"
"`Control <class_Control>` 或 :ref:`Node2D <class_Node2D>`。 然后重载_draw()函"
"数。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:57
msgid ""
"Draw commands are described in the :ref:`CanvasItem <class_CanvasItem>` "
"class reference. There are plenty of them."
msgstr ""
"绘制命令在 :ref:`CanvasItem <class_CanvasItem>` 类型引文中有所描述, 有不少绘"
"制命令。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:61
msgid "Updating"
msgstr "更新"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:63
msgid ""
"The ``_draw()`` function is only called once, and then the draw commands are "
"cached and remembered, so further calls are unnecessary."
msgstr ""
"``_draw()`` 函数只调用一次，然后绘制命令被缓存并记住，因此不需要进一步调用。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:66
msgid ""
"If re-drawing is required because a state or something else changed, simply "
"call :ref:`CanvasItem.update() <class_CanvasItem_method_update>` in that "
"same node and a new ``_draw()`` call will happen."
msgstr ""
"如果由于状态或其他更改而需要重新绘制，只需在同一节点中调用 :ref:`CanvasItem."
"update()<class_CanvasItem_method_update>` 就会发生新的 ``_draw()`` 调用。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:70
msgid ""
"Here is a little more complex example, a texture variable that will be "
"redrawn if modified:"
msgstr "这是一个更复杂的示例。 这是一个被修改就会重新绘制的纹理变量:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:114
msgid ""
"In some cases, it may be desired to draw every frame. For this, just call "
"``update()`` from the ``_process()`` callback, like this:"
msgstr ""
"在某些情况下，可能需要绘制每一帧。 为此，只需从 ``_process()`` 回调调用 "
"``update()`` ，如下所示:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:146
msgid "An example: drawing circular arcs"
msgstr "一个示例:绘制圆弧"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:148
msgid ""
"We will now use the custom drawing functionality of the Godot Engine to draw "
"something that Godot doesn't provide functions for. As an example, Godot "
"provides a ``draw_circle()`` function that draws a whole circle. However, "
"what about drawing a portion of a circle? You will have to code a function "
"to perform this and draw it yourself."
msgstr ""
"我们现在将使用Godot Engine的自定义绘图功能来绘制Godot不提供功能的内容。 比"
"如，Godot提供了 ``draw_circle()`` 函数，它会绘制一个完整的圆。 但是，画一个圆"
"的一部分怎么说？你必须编写一个函数来执行此操作, 自己绘制它。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:154
msgid "Arc function"
msgstr "弧函数"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:156
msgid ""
"An arc is defined by its support circle parameters, that is, the center "
"position and the radius. The arc itself is then defined by the angle it "
"starts from and the angle at which it stops. These are the 4 arguments that "
"we have to provide to our drawing function. We'll also provide the color "
"value, so we can draw the arc in different colors if we wish."
msgstr ""
"弧由其所在的圆的参数定义。 即:中心位置和半径。弧本身由开始的角度和停止的角度"
"来定义。 这些是我们必须为绘图提供的4个参数。 我们还将提供颜色值，因此我们可以"
"根据需要绘制不同颜色的圆弧。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:161
msgid ""
"Basically, drawing a shape on the screen requires it to be decomposed into a "
"certain number of points linked from one to the next. As you can imagine, "
"the more points your shape is made of, the smoother it will appear, but the "
"heavier it will also be in terms of processing cost. In general, if your "
"shape is huge (or in 3D, close to the camera), it will require more points "
"to be drawn without it being angular-looking. On the contrary, if your shape "
"is small (or in 3D, far from the camera), you may decrease its number of "
"points to save processing costs; this is known as *Level of Detail (LOD)*. "
"In our example, we will simply use a fixed number of points, no matter the "
"radius."
msgstr ""
"基本上，在屏幕上绘制形状需要将其分解为一定量首位相接的点。 你可以预见到，点越"
"多，它就越平滑，但处理开销就越大。 一般来说，如果你的形状很大（或者在3D场景中"
"靠近相机），则需要绘制更多的点才不会看起来像是有棱角的。 相反，如果你的形状很"
"小（或在3D场景里远离相机），你可以减少其点数以节省处理成本。 这称为 *多层次细"
"节(Level of Detail, LoD)* 。 在我们的示例中，无论半径如何，我们都只使用固定数"
"量的点。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:201
msgid ""
"Remember the number of points our shape has to be decomposed into? We fixed "
"this number in the ``nb_points`` variable to a value of ``32``. Then, we "
"initialize an empty ``PoolVector2Array``, which is simply an array of "
"``Vector2``\\ s."
msgstr ""
"还记得我们的形状必须分解成成的点的数量吗？ 我们将 ``nb_points`` 变量中的这个"
"数字修改为32。然后，我们初始化一个空的 ``PoolVector2Array`` ，就是一个Vector2"
"数组。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:205
msgid ""
"The next step consists of computing the actual positions of these 32 points "
"that compose an arc. This is done in the first for-loop: we iterate over the "
"number of points for which we want to compute the positions, plus one to "
"include the last point. We first determine the angle of each point, between "
"the starting and ending angles."
msgstr ""
"下一步包括计算构成弧的这32个点的实际位置。 这是在第一个for循环中完成的：我们"
"迭代我们想要计算位置的点的数量，后面+1来包括最后一个点。 我们首先确定起点和终"
"点之间每个点的角度。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:210
msgid ""
"The reason why each angle is decreased by 90° is that we will compute 2D "
"positions out of each angle using trigonometry (you know, cosine and sine "
"stuff...). However, to be simple, ``cos()`` and ``sin()`` use radians, not "
"degrees. The angle of 0° (0 radian) starts at 3 o'clock, although we want to "
"start counting at 12 o'clock. So we decrease each angle by 90° in order to "
"start counting from 12 o'clock."
msgstr ""
"每个角度减小90°的原因是我们将使用三角函数计算每个角度的2D位置（你知道，余弦和"
"正弦之类的东西......）。 但是，为了简单， ``cos()`` 和 ``sin()`` 使用弧度，而"
"不是度数作为参数。 虽然我们想在12点钟位置开始计数，但0°(0弧度)的角度从3点钟位"
"置开始。 因此我们将每个角度减小90°，以便从12点位置开始计数。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:216
msgid ""
"The actual position of a point located on a circle at angle ``angle`` (in "
"radians) is given by ``Vector2(cos(angle), sin(angle))``. Since ``cos()`` "
"and ``sin()`` return values between -1 and 1, the position is located on a "
"circle of radius 1. To have this position on our support circle, which has a "
"radius of ``radius``, we simply need to multiply the position by ``radius``. "
"Finally, we need to position our support circle at the ``center`` position, "
"which is performed by adding it to our ``Vector2`` value. Finally, we insert "
"the point in the ``PoolVector2Array`` which was previously defined."
msgstr ""
"以角度 ``angle`` (单位是弧度)位于圆上的点的实际位置由 ``Vector2(cos(angle), "
"sin(angle))`` 给出。 由于 ``cos()`` 和 ``sin()`` 返回介于-1和1之间的值，因此"
"位置位于半径为1的圆上。要将此位置放在我们的半径为 ``radius`` 的辅助圆上，我们"
"只需要将那个位置乘以 ``radius`` 。 最后，我们需要将我们的辅助圆定位在 "
"``center`` 位置，这是通过将其与我们的 ``Vector2`` 相加来实现的。 最后，我们在"
"之前定义的 ``PoolVector2Array`` 中插入这个点。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:224
msgid ""
"Now, we need to actually draw our points. As you can imagine, we will not "
"simply draw our 32 points: we need to draw everything that is between each "
"of them. We could have computed every point ourselves using the previous "
"method, and drew it one by one. But this is too complicated and inefficient "
"(except if explicitly needed), so we simply draw lines between each pair of "
"points. Unless the radius of our support circle is big, the length of each "
"line between a pair of points will never be long enough to see them. If that "
"were to happen, we would simply need to increase the number of points."
msgstr ""
"现在，我们需要实际绘制我们的点。 你可以想象，我们不会简单地画出我们的32个点："
"我们需要绘制每一点之间的所有内容。 我们可以使用前面的方法自己计算每个点，然后"
"逐个绘制。 但这太复杂和低效了(除非确实需要)。 因此，我们只需在每对点之间绘制"
"线条。 除非我们的辅助圆的半径很大，否则一对点之间每条线的长度永远不会长到足以"
"看到它们。 如果发生这种情况，我们只需要增加点的个数就可以了。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:234
msgid "Draw the arc on the screen"
msgstr "在屏幕上绘制弧形"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:236
msgid ""
"We now have a function that draws stuff on the screen; it is time to call it "
"inside the ``_draw()`` function:"
msgstr ""
"我们现在有一个在屏幕上绘制内容的函数; 是时候在 ``_draw()`` 函数中调用它了:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:263
msgid "Result:"
msgstr "结果:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:268
msgid "Arc polygon function"
msgstr "弧多边形函数"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:270
msgid ""
"We can take this a step further and not only write a function that draws the "
"plain portion of the disc defined by the arc, but also its shape. The method "
"is exactly the same as before, except that we draw a polygon instead of "
"lines:"
msgstr ""
"我们可以更进一步，不仅仅绘制一个由弧定义的扇形的边缘，还可以绘制其形体。 该方"
"法与以前完全相同，只是我们绘制的是多边形而不是线条:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:310
msgid "Dynamic custom drawing"
msgstr "动态自定义绘图"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:312
msgid ""
"All right, we are now able to draw custom stuff on the screen. However, it "
"is static; let's make this shape turn around the center. The solution to do "
"this is simply to change the angle_from and angle_to values over time. For "
"our example, we will simply increment them by 50. This increment value has "
"to remain constant or else the rotation speed will change accordingly."
msgstr ""
"好吧，我们现在能够在屏幕上绘制自定义内容。 然而，它是静态的; 我们让这个形状围"
"绕中心转动吧。 这样做的方法就是随着时间的推移改变angle_from和angle_to值。 对"
"于我们的示例，我们将简单地将它们递增50。此增量值必须保持不变，否则旋转速度将"
"相应地改变。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:318
msgid ""
"First, we have to make both angle_from and angle_to variables global at the "
"top of our script. Also note that you can store them in other nodes and "
"access them using ``get_node()``."
msgstr ""
"首先，我们必须在我们的angle_from和angle_to变量变成全局变量, 放在脚本顶部。 另"
"请注意，您可以将它们存储在其他节点中并使用 ``get_node()`` 访问它们。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:340
msgid "We make these values change in the _process(delta) function."
msgstr "我们在_process(delta)函数中更改这些值。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:342
msgid ""
"We also increment our angle_from and angle_to values here. However, we must "
"not forget to ``wrap()`` the resulting values between 0 and 360°! That is, "
"if the angle is 361°, then it is actually 1°. If you don't wrap these "
"values, the script will work correctly, but the angle values will grow "
"bigger and bigger over time until they reach the maximum integer value Godot "
"can manage (``2^31 - 1``). When this happens, Godot may crash or produce "
"unexpected behavior."
msgstr ""
"我们也在这里增加angle_from和angle_to值。 但是，我们不能忘记将结果 ``wrap()`` "
"在0到360°之间！ 也就是说，如果角度是361°，那么它实际上是1°。 如果您不包装这些"
"值，脚本将正常工作，但角度值将随着时间的推移变得越来越大，直到它们达到Godot可"
"以管理的最大整数值(``2^31 - 1``)。 当发生这种情况时，Godot可能会崩溃或产生意"
"外行为。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:349
msgid ""
"Finally, we must not forget to call the ``update()`` function, which "
"automatically calls ``_draw()``. This way, you can control when you want to "
"refresh the frame."
msgstr ""
"最后，我们不要忘记调用 ``update()`` 函数，它自动调用 ``_draw()`` 。 这样，您"
"可以控制何时要刷新这一帧。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:389
msgid ""
"Also, don't forget to modify the ``_draw()`` function to make use of these "
"variables:"
msgstr "另外，不要忘记修改 ``_draw()`` 函数来使用这些变量:"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:413
msgid ""
"Let's run! It works, but the arc is rotating insanely fast! What's wrong?"
msgstr "我们运行吧！ 它工作正常，但弧线旋转快得疯掉了！ 怎么了？"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:416
msgid ""
"The reason is that your GPU is actually displaying the frames as fast as it "
"can. We need to \"normalize\" the drawing by this speed; to achieve that, we "
"have to make use of the ``delta`` parameter of the ``_process()`` function. "
"``delta`` contains the time elapsed between the two last rendered frames. It "
"is generally small (about 0.0003 seconds, but this depends on your "
"hardware), so using ``delta`` to control your drawing ensures that your "
"program runs at the same speed on everybody's hardware."
msgstr ""
"原因是你的GPU实际上正在尽可能快地显示帧。 我们需要以这个速度为基准“标准化”绘"
"图的速度。 为了实现这个效果，我们必须使用 ``_process()`` 函数的 ``delta`` 参"
"数。 ``delta`` 包含最后两个渲染帧之间经过的时间。 它通常很小(约0.0003秒，但这"
"取决于你的硬件)。 因此，使用 ``delta`` 来控制绘图可确保程序在每个人的硬件上以"
"相同的速度运行。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:424
msgid ""
"In our case, we simply need to multiply our ``rotation_angle`` variable by "
"``delta`` in the ``_process()`` function. This way, our 2 angles will be "
"increased by a much smaller value, which directly depends on the rendering "
"speed."
msgstr ""
"在我们的示例中，我们只需要在 ``_process()`` 函数中将 ``rotation_angle`` 变量"
"乘以 ``delta`` 。 这样，我们的2个角度会以一个小得多的值递增，值的大小直接取决"
"于渲染速度。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:458
msgid "Let's run again! This time, the rotation displays fine!"
msgstr "让我们再运行一次！ 这次，旋转显示正常！"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:461
msgid "Tools"
msgstr "工具"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:463
msgid ""
"Drawing your own nodes might also be desired while running them in the "
"editor to use as a preview or visualization of some feature or behavior."
msgstr ""
"绘制自己的节点的功能在编辑器中, 用来可视化/预览某种特性或行为的时候可能会有"
"用。"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:467
msgid ""
"Remember to use the \"tool\" keyword at the top of the script (check the :"
"ref:`doc_gdscript` reference if you forgot what this does)."
msgstr ""
"请记住在脚本顶部使用“tool”关键字(如果您忘记了它做什么，请查看 :ref:"
"`doc_gdscript` 参考文档)。"
