# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/canvas_layers.rst:4
msgid "Canvas layers"
msgstr "Canvas Layers(画布层)"

#: ../../docs/tutorials/2d/canvas_layers.rst:7
msgid "Viewport and Canvas items"
msgstr "Viewport (视窗) 和 Canvas Item (画布项)"

#: ../../docs/tutorials/2d/canvas_layers.rst:9
msgid ""
"Regular 2D nodes, such as :ref:`Node2D <class_Node2D>` or :ref:`Control "
"<class_Control>` both inherit from :ref:`CanvasItem <class_CanvasItem>`, "
"which is the base for all 2D nodes. CanvasItems can be arranged in trees. "
"Each item will inherit its parent's transform. This means that when the "
"parent is moved, the children will move too."
msgstr ""
"常规2D节点, 如 :ref:`Node2D <class_Node2D>` 或 :ref:`Control "
"<class_Control>` 都继承自 :ref:`CanvasItem <class_CanvasItem>` , 它是所有2D节"
"点的基础.CanvasItem 被组织成树状结构, 同时继承它们父节点的变换. 这意味着在移"
"动父节点时, 子节点也会被移动."

#: ../../docs/tutorials/2d/canvas_layers.rst:16
msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, and will be displayed "
"through it."
msgstr ""
"CanvasItem 节点和继承他们的节点, 都作为 :ref:`Viewport <class_Viewport>` 的直"
"接或间接子节点放置, 并将通过它显示."

#: ../../docs/tutorials/2d/canvas_layers.rst:19
msgid ""
"A Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, which allows applying a custom :"
"ref:`Transform2D <class_Transform2D>` transform to the CanvasItem hierarchy "
"it contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""
"Viewport 具有属性 :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>` , 它允许对它所包含的CanvasItem层"
"级施加一个自定义的 :ref:`Transform2D <class_Transform2D>` 变换. 如 :ref:"
"`Camera2D <class_Camera2D>` 的主要工作方式就是改变那个Transform2D变换."

#: ../../docs/tutorials/2d/canvas_layers.rst:25
msgid ""
"Effects like scrolling are best achieved by manipulating the canvas "
"transform property. This approach is more efficient than moving the root "
"canvas item (and hence the whole scene)."
msgstr ""
"像滚动这样的效果最好是通过操纵画布transform变换属性来实现。这种方法比移动根画"
"布项(以及整个场景)更有效。"

#: ../../docs/tutorials/2d/canvas_layers.rst:28
#, fuzzy
msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. For example:"
msgstr ""
"通常情况下, 我们不希望游戏中的 *所有东西* 都受到画布变换的影响. 相应的例子有:"

#: ../../docs/tutorials/2d/canvas_layers.rst:31
msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr "**Parallax Backgrounds(视差背景)** : 比场景其他部分移动得慢的背景."

#: ../../docs/tutorials/2d/canvas_layers.rst:33
#, fuzzy
msgid ""
"**UI**: Think of a user interface (UI) or head-up display (HUD) superimposed "
"on our view of the game world. We want a life counter, score display and "
"other elements to retain their screen positions even when our view of the "
"game world changes."
msgstr ""
"**用户界面** : 想象一个UI(用户界面)或HUD(平视显示器) 叠加在我们的游戏世界视图"
"上. 我们想要生命计数器, 分数显示等东西保持其屏幕位置, 即使当游戏世界中的视角"
"正在改变时他们也不动."

#: ../../docs/tutorials/2d/canvas_layers.rst:34
msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""
"**Transitions(转场)** : 我们应该希望用于转场的效果(淡入淡出之类的东西)也保持"
"在固定的位置."

#: ../../docs/tutorials/2d/canvas_layers.rst:36
msgid "How can these problems be solved in a single scene tree?"
msgstr "如何在单个场景树中解决这些问题？"

#: ../../docs/tutorials/2d/canvas_layers.rst:39
msgid "CanvasLayers"
msgstr "CanvasLayer(画布层)"

#: ../../docs/tutorials/2d/canvas_layers.rst:41
msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""
"答案是 :ref:`CanvasLayer <class_CanvasLayer>` , 它是一个节点, 为所有子代和孙"
"代添加一个单独的2D渲染层.Viewport的子节点默认在图层 \"0 \" 处绘制, 而"
"CanvasLayer将在任何数字层处绘制. 数字较大的图层将绘制在数字较小的图层之上."
"CanvasLayers也有自己的变换, 不依赖于其他层的变换. 这使得当我们对游戏世界的观"
"察发生变化时,UI可以固定在屏幕空间中."

#: ../../docs/tutorials/2d/canvas_layers.rst:50
msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""
"比如说创建Parallax Background(视差背景). 这可以通过层为 \"-1\" 的CanvasLayer"
"完成. 带有分数, 生命计数器和暂停按钮的屏幕也可以创建在编号为 \"1\" 的层中."

#: ../../docs/tutorials/2d/canvas_layers.rst:54
msgid "Here's a diagram of how it looks:"
msgstr "下面是它的图示:"

#: ../../docs/tutorials/2d/canvas_layers.rst:58
msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"CanvasLayer 独立于树顺序, 它们仅依赖于它们的层数, 因此可以只在需要时让它们实"
"例化."

#: ../../docs/tutorials/2d/canvas_layers.rst:61
msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is  correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2d nodes also have a property for "
"controlling their drawing order (see :ref:`Node2D.z_index "
"<class_Node2D_property_z_index>`)."
msgstr ""
"CanvasLayer 不需要控制节点的绘制顺序. 确保节点被正确绘制在 \"前面\" 或 \"后面"
"\" 的标准方法是操作场景面板中节点的顺序. 也许违反直觉, 场景面板中最上面的节点"
"绘制在视图端口中较低的节点 *后面* . 二维节点也有控制其绘图顺序的属性(参考 :"
"ref:`Node2D.z_index <class_Node2D_property_z_index>` )."
