# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-27 08:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:4
#, fuzzy
msgid "2D Sprite animation"
msgstr "精灵动画"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:9
msgid ""
"In this tutorial, you'll learn two different ways to create 2D animated "
"characters. Typically, when you create or download an animated character, it "
"will come in one of two ways: as individual images or as a single sprite "
"sheet containing all the animation's frames. Depending on which type of "
"assets you have, you can choose one of the following solutions."
msgstr ""
"在本教程中，您将学习创建二维动画角色的两种不同方法。通常，当您创建或下载动画"
"角色时，它将以两种方式出现：作为单独的图像或一个包含所有动画帧的单张精灵表。"
"根据您拥有的资产类型，您可以选择以下解决方案之一。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:15
msgid ""
"First, we'll use :ref:`AnimatedSprite <class_AnimatedSprite>` to animate a "
"collection of individual images. Then, to use a sprite sheet, we'll use :ref:"
"`AnimationPlayer <class_AnimationPlayer>` along with the *Animation* "
"property of :ref:`Sprite <class_Sprite>`."
msgstr ""
"首先，我们将使用:参考:`动画精灵<类_动画精灵>`为单个图像的集合制作动画。然后使"
"用精灵表，我们将使用:参考:`动画播放器 <c类_动画播放器>`以及:参考:`精灵<类_精"
"灵>`的*动画*属性。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:20
msgid "Art for the following examples by https://opengameart.org/users/ansimuz"
msgstr "以下示例由https://opengameart.org/users/ansimuz提供"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:23
msgid "Individual images with AnimatedSprite"
msgstr "带有动画精灵的独立图像"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:25
msgid ""
"In this scenario, you have a collection of images, each containing one of "
"your character's animation frames. For this example, we'll use the following "
"animation:"
msgstr ""
"在这个场景中，你有一组图像，每一个都包含你角色的动画帧。对于这个例子，我们将"
"使用以下动画："

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:31
#, fuzzy
msgid ""
"You can download the images here: :download:`run_animation.zip <files/"
"run_animation.zip>`"
msgstr ""
"您可以在此处下载此示例项目 : :download:`2D_movement_demo.zip "
"<files/2D_movement_demo.zip>`"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:34
msgid ""
"Unzip the images and place them in your project folder. Set up your scene "
"tree with the following nodes:"
msgstr "解压缩这些图像并将它们放在项目文件夹中。使用以下节点设置场景树："

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:39
#: ../../docs/tutorials/2d/2d_sprite_animation.rst:109
msgid ""
"The root node could also be :ref:`Area2D <class_Area2D>` or :ref:"
"`RigidBody2D <class_RigidBody2D>`. The animation will still be made in the "
"same way. Once the animation is completed, you can assign a shape to the "
"CollisionShape2D. See :ref:`Physics Introduction <doc_physics_introduction>` "
"for more information."
msgstr ""
"根节点也可以是:参考:`二维区域<类_二维区域>`或:参考:`二维刚体<类_二维刚体>`。"
"动画仍然会以同样的方式制作。一旦动画完成，您可以为二维碰撞形状分配一个形状。"
"更多信息请参见:参考:`物理介绍<文档_物理_介绍>`。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:46
msgid ""
"Now select the ``AnimatedSprite`` and in its *SpriteFrames* property, select "
"\"New SpriteFrames\"."
msgstr "现在选择“动画精灵”，并在*精灵帧*属性中，选择“新建精灵帧”。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:51
msgid ""
"Click on the new SpriteFrames resource and you'll see a new panel appear at "
"the bottom of the editor window:"
msgstr "点击新的精灵帧资源，你会看到一个新的面板出现在编辑器窗口的底部："

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:56
msgid ""
"From the FileSystem dock on the left side, drag the 8 individual images into "
"the center part of the SpriteFrames panel. On the left side, change the name "
"of the animation from \"default\" to \"run\"."
msgstr ""
"从左边的文件系统面板，将这8张独立的图片拖放到精灵帧面板的中间部分。在左边，将"
"动画名称从“默认”更改为“奔跑”。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:62
#, fuzzy
msgid ""
"Back in the Inspector, check the box for the *Playing* property. You should "
"now see the animation playing in the viewport. However, it is a bit slow. To "
"fix this, change the *Speed (FPS)* setting in the SpriteFrames panel to 10."
msgstr ""
"回到属性面板，选中“播放”属性的复选框。您现在应该可以看到在视区中播放的动画。"
"然而，它有点慢。为了解决这个问题，更改精灵帧面板中的*速度(每秒帧数)*设置。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:66
msgid ""
"You can add additional animations by clicking the \"New Animation\" button "
"and adding additional images."
msgstr "您可以通过点击“新建动画”按钮，并添加额外的图像，来添加额外的动画。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:70
#, fuzzy
msgid "Controlling the animation"
msgstr "创建动画"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:72
msgid ""
"Once the animation is complete, you can control the animation via code using "
"the ``play()`` and ``stop()`` methods. Here is a brief example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""
"一旦动画完成，您可以通过代码中的“播放()”和“停止()”方法控制动画。这里有一个简"
"单的例子来播放动画，同时按住右箭头键，键位松开后就停下。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:90
#, fuzzy
msgid "Sprite sheet with AnimationPlayer"
msgstr "使用动画面板"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:92
msgid ""
"In the event you have a sprite sheet containing all of your animation "
"frames, you can't easily use ``AnimatedSprite``. Instead, you can use a "
"standard :ref:`Sprite <class_Sprite>` node to display the texture, and then "
"animate the change from texture to texture with :ref:`AnimationPlayer "
"<class_AnimationPlayer>`."
msgstr ""
"如果你有一个包含所有动画帧的精灵表，你不能轻易使用“动画精灵”。相反，您可以使"
"用一个标准的:参考:`精灵<类_精灵>`节点来显示纹理，然后用:参考:`动画播放器<类_"
"动画播放器>`对纹理之间的变化进行动画处理。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:97
msgid "Consider this sprite sheet, which contains 6 frames of animation:"
msgstr "考虑一下这个精灵表，包含6帧动画："

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:101
msgid ""
"Right-click the image and choose \"Save Image As\" to download, then copy "
"the image into your project folder."
msgstr "右键单击图片，选择“图片另存为”下载，然后将图像复制到项目文件夹中。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:104
msgid ""
"Our goal is to display these images one after another in a loop. Start by "
"setting up your scene tree:"
msgstr ""
"我们的目的是，在一个循环中一个接一个地显示这些图像。首先设置你的场景树："

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:116
msgid ""
"Drag the spritesheet into the Sprite's *Texture* property, and you'll see "
"the whole sheet displayed on the screen. To slice it up into individual "
"frames, expand the *Animation* section in the Inspector and set the "
"*Hframes* to ``6``. *Hframes* and *Vframes* are the number of horizontal and "
"vertical frames in your sprite sheet."
msgstr ""
"将精灵表拖拽到精灵的纹理属性中，你会看到整个表显示在屏幕上。把它分割成单独的"
"帧，在属性面板中展开*动画*部分，将*水平帧*设置为“6”。*水平帧*和*垂直帧*是精灵"
"表中水平和垂直帧的数量。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:124
msgid ""
"Now try changing the value of the *Frame* property. You'll see that it "
"ranges from ``0`` to ``5`` and the image displayed by the Sprite changes "
"accordingly. This is the property we'll be animating."
msgstr ""
"现在尝试更改*帧*属性的值。您将看到它的范围从“0”到“5”，精灵所显示的图像也随之"
"改变。这就是我们想要的动画属性。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:128
msgid ""
"Select the ``AnimationPlayer`` and click the \"Animation\" button followed "
"by \"New\". Name the new animation \"walk\". Set the animation length to "
"``0.6`` and click the \"Loop\" button so that our animation will repeat."
msgstr ""
"选择“动画播放器”，然后点击“动画”按钮，然后点击“新建”按钮。将新动画命名为“走"
"路”。将动画长度设置为“0.6”，点击“循环”按钮，动画将会重复。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:134
msgid ""
"Now select the ``Sprite`` node and click the key icon to add a new track."
msgstr "现在选择“精灵”节点，并单击钥匙图标，添加一个新的轨道。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:138
msgid ""
"Continue adding frames at each point in the timeline (``0.1`` seconds by "
"default), until you have all the frames from 0 to 5. You'll see the frames "
"actually appearing in the animation track:"
msgstr ""
"继续在时间轴的每一点添加帧(默认为“0.1”秒)，直到你得到了从0到5的所有帧。你会看"
"到这些帧实际上出现在动画轨道："

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:144
msgid "Press \"Play\" on the animation to see how it looks."
msgstr "按下动画上的“播放”键，看看效果如何。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:149
#, fuzzy
msgid "Controlling an AnimationPlayer animation"
msgstr "创建动画"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:151
#, fuzzy
msgid ""
"Like with AnimatedSprite, you can control the animation via code using the "
"``play()`` and ``stop()`` methods. Again, here is an example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""
"一旦动画完成，您可以通过代码中的“播放()”和“停止()”方法控制动画。这里有一个简"
"单的例子来播放动画，同时按住右箭头键，键位松开后就停下。"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:168
msgid ""
"If updating both an animation and a separate property at once (for example, "
"a platformer may update the sprite's ``h_flip``/``v_flip`` properties when a "
"character turns while starting a 'turning' animation), it's important to "
"keep in mind that ``play()`` isn't applied instantly. Instead, it's applied "
"the next time the :ref:`AnimationPlayer <class_AnimationPlayer>` is "
"processed. This may end up being on the next frame, causing a 'glitch' "
"frame, where the property change was applied but the animation was not. If "
"this turns out to be a problem, after calling ``play()``, you can call "
"``advance(0)`` to update the animation immediately."
msgstr ""

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:179
msgid "Summary"
msgstr "总结"

#: ../../docs/tutorials/2d/2d_sprite_animation.rst:181
msgid ""
"These examples illustrate the two most common situations you'll encounter in "
"2D animation. Each has its benefits. Working with ``AnimationPlayer`` is a "
"bit more complex, but provides additional functionality, since you can also "
"animate other properties like position or scale. Experiment and see which "
"works best for your needs."
msgstr ""
"这些例子说明了在二维动画中最常见的两种情况。每种方法都有其好处。使用动画播放"
"器有点复杂，但是提供了额外的功能，因为你也可以为其他属性做动画，如位置或比"
"例。试验一下，看看哪种最适合你的需要。"
