# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-15 18:11+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/2d_transforms.rst:4
msgid "Viewport and canvas transforms"
msgstr "视区和画布变换"

#: ../../docs/tutorials/2d/2d_transforms.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/tutorials/2d/2d_transforms.rst:9
msgid ""
"This is an overview of the 2D transforms going on for nodes from the moment "
"they draw their content locally to the time they are drawn onto the screen. "
"This overview discusses very low level details of the engine."
msgstr ""
"本小节概述了， 节点从绘制本地内容开始到显示到屏幕上结束的过程中的2D变换。 本"
"概述从非常的低级别上，讨论了引擎的细节。"

#: ../../docs/tutorials/2d/2d_transforms.rst:14
msgid "Canvas transform"
msgstr "画布变换"

#: ../../docs/tutorials/2d/2d_transforms.rst:16
msgid ""
"As mentioned in the previous tutorial, :ref:`doc_canvas_layers`, every "
"CanvasItem node (remember that Node2D and Control based nodes use CanvasItem "
"as their common root) will reside in a *Canvas Layer*. Every canvas layer "
"has a transform (translation, rotation, scale, etc.) that can be accessed as "
"a :ref:`Transform2D <class_Transform2D>`."
msgstr ""
"正如前面教程中提到的那样 :ref:`doc_canvas_layers`，每个画布项节点(记住Node2D"
"和基于Control的节点使用画布项作为它们的公共根)将驻留在 *画布层* 中。 每个画布"
"层都有一个变换(平移，旋转，缩放等)，可以作为 :ref:`Transform2D "
"<class_Transform2D>` 进行访问。"

#: ../../docs/tutorials/2d/2d_transforms.rst:22
msgid ""
"Also covered in the previous tutorial, nodes are drawn by default in Layer "
"0, in the built-in canvas. To put nodes in a different layer, a :ref:"
"`CanvasLayer <class_CanvasLayer>` node can be used."
msgstr ""
"在上一个教程中也有介绍，默认情况下，在内置画布的第0层中绘制节点。 要将节点放"
"在不同的层中，可以使用 :ref:`CanvasLayer <class_CanvasLayer>` 节点。"

#: ../../docs/tutorials/2d/2d_transforms.rst:27
msgid "Global canvas transform"
msgstr "全局画布变换"

#: ../../docs/tutorials/2d/2d_transforms.rst:29
msgid ""
"Viewports also have a Global Canvas transform (also a :ref:`Transform2D "
"<class_Transform2D>`). This is the master transform and affects all "
"individual *Canvas Layer* transforms. Generally, this transform is not of "
"much use, but is used in the CanvasItem Editor in Godot's editor."
msgstr ""
"视区还具有全局画布变换(也是 :ref:`Transform2D <class_Transform2D>` )。 这是主"
"变换并影响所有单独的 *画布层* 变换。 通常这种变换用得不多，主要用在Godot的编"
"辑器中的画布项编辑器中。"

#: ../../docs/tutorials/2d/2d_transforms.rst:36
msgid "Stretch transform"
msgstr "拉伸变换"

#: ../../docs/tutorials/2d/2d_transforms.rst:38
msgid ""
"Finally, viewports have a *Stretch Transform*, which is used when resizing "
"or stretching the screen. This transform is used internally (as described "
"in :ref:`doc_multiple_resolutions`), but can also be manually set on each "
"viewport."
msgstr ""
"最后，视区有 *拉伸变换* ，用于调整大小或拉伸屏幕。 此变换在内部使用(见 :ref:"
"`doc_multiple_resolutions` )，但也可以在每个视区上手动设置。"

#: ../../docs/tutorials/2d/2d_transforms.rst:43
#, fuzzy
msgid ""
"Input events received in the :ref:`MainLoop._input_event() "
"<class_MainLoop_method__input_event>` callback are multiplied by this "
"transform but lack the ones above. To convert InputEvent coordinates to "
"local CanvasItem coordinates, the :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` function was added for "
"convenience."
msgstr ""
"在 :ref:`MainLoop._input_event() <class_MainLoop_method__input_event>` 回调中"
"接收的输入事件乘以此变换，无法实现上述变换。 还需要将InputEvent坐标转换为本地"
"画布项坐标，为方便转换，引擎添加了 :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` 函数。"

#: ../../docs/tutorials/2d/2d_transforms.rst:50
msgid "Transform order"
msgstr "变换顺序"

#: ../../docs/tutorials/2d/2d_transforms.rst:52
msgid ""
"For a coordinate in CanvasItem local properties to become an actual screen "
"coordinate, the following chain of transforms must be applied:"
msgstr "要使画布项的本地属性中的坐标成为实际屏幕坐标，必须应用以下一系列变换:"

#: ../../docs/tutorials/2d/2d_transforms.rst:58
msgid "Transform functions"
msgstr "变换函数"

#: ../../docs/tutorials/2d/2d_transforms.rst:60
msgid "Obtaining each transform can be achieved with the following functions:"
msgstr "通过以下函数可以实现每个转换:"

#: ../../docs/tutorials/2d/2d_transforms.rst:63
msgid "Type"
msgstr "类型"

#: ../../docs/tutorials/2d/2d_transforms.rst:63
msgid "Transform"
msgstr "变换"

#: ../../docs/tutorials/2d/2d_transforms.rst:65
msgid "CanvasItem"
msgstr "CanvasItem"

#: ../../docs/tutorials/2d/2d_transforms.rst:65
#, fuzzy
msgid ""
":ref:`CanvasItem.get_global_transform() "
"<class_CanvasItem_method_get_global_transform>`"
msgstr ""
":ref:`CanvasItem.get_global_transform() "
"<class_CanvasItem_method_get_global_transform>`"

#: ../../docs/tutorials/2d/2d_transforms.rst:67
msgid "CanvasLayer"
msgstr "CanvasLayer"

#: ../../docs/tutorials/2d/2d_transforms.rst:67
#, fuzzy
msgid ""
":ref:`CanvasItem.get_canvas_transform() "
"<class_CanvasItem_method_get_canvas_transform>`"
msgstr ""
":ref:`CanvasItem.get_canvas_transform() "
"<class_CanvasItem_method_get_canvas_transform>`"

#: ../../docs/tutorials/2d/2d_transforms.rst:69
msgid "CanvasLayer+GlobalCanvas+Stretch"
msgstr "CanvasLayer+GlobalCanvas+Stretch"

#: ../../docs/tutorials/2d/2d_transforms.rst:69
#, fuzzy
msgid ""
":ref:`CanvasItem.get_viewport_transform() "
"<class_CanvasItem_method_get_viewport_transform>`"
msgstr ""
":ref:`CanvasItem.get_viewport_transform() "
"<class_CanvasItem_method_get_viewport_transform>`"

#: ../../docs/tutorials/2d/2d_transforms.rst:72
msgid ""
"Finally, then, to convert a CanvasItem local coordinates to screen "
"coordinates, just multiply in the following order:"
msgstr "最后，然后，要将画布项的本地坐标转换为屏幕坐标，只需按以下顺序相乘:"

#: ../../docs/tutorials/2d/2d_transforms.rst:84
msgid ""
"Keep in mind, however, that it is generally not desired to work with screen "
"coordinates. The recommended approach is to simply work in Canvas "
"coordinates (``CanvasItem.get_global_transform()``), to allow automatic "
"screen resolution resizing to work properly."
msgstr ""
"但请记住，通常情况最好不要使用屏幕坐标。 推荐的方法是， 仅仅使用画布坐标"
"( ``CanvasItem.get_global_transform()`` )，以保证在调整屏幕大小后使其能正常工"
"作。"

#: ../../docs/tutorials/2d/2d_transforms.rst:90
msgid "Feeding custom input events"
msgstr "提供自定义输入事件"

#: ../../docs/tutorials/2d/2d_transforms.rst:92
msgid ""
"It is often desired to feed custom input events to the scene tree. With the "
"above knowledge, to correctly do this, it must be done the following way:"
msgstr ""
"通常需要将自定义输入事件提供给场景树。 有了上述知识，要正确地做到这一点，必须"
"通过以下方式完成:"
