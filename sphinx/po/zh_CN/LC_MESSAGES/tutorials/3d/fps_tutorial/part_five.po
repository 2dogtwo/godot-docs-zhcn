# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-08 22:29+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:4
msgid "Part 5"
msgstr "第5部分"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:7
#, fuzzy
msgid "Part overview"
msgstr "零件概述"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:9
#, fuzzy
msgid ""
"In this part, we're going to add grenades to the player, give the player the "
"ability to grab and throw objects, and add turrets!"
msgstr ""
"在这部分中，我们将向游戏角色添加手榴弹，让游戏角色能够抓住并投掷物体，并添加"
"炮塔！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:13
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_four` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_four` will be the starting project for part 5"
msgstr ""
"在继续本教程的这一部分之前，我们假设您已经完成了 :ref:"
"`doc_fps_tutorial_part_four`。 完成的项目来自 :ref:"
"`doc_fps_tutorial_part_four`将成为第5部分的起始项目"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:16
msgid "Let's get started!"
msgstr "让我们开始吧！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:19
msgid "Adding grenades"
msgstr "添加手榴弹"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:21
#, fuzzy
msgid ""
"Firstly, let's give the player some grenades to play with. Open up ``Grenade."
"tscn``."
msgstr "首先，让我们给游戏角色一些手榴弹。 打开 ``Grenade.tscn``。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:23
#, fuzzy
msgid ""
"There are a few things to note here, the first and foremost being that the "
"grenades are going to use :ref:`RigidBody <class_RigidBody>` nodes. We're "
"going to use :ref:`RigidBody <class_RigidBody>` nodes for our grenades so "
"they bounce around the world in a (somewhat) realistic manner."
msgstr ""
"这里有一些注意事项，首先是手榴弹将要使用 :ref:`RigidBody <class_RigidBody>` "
"节点。 我们将使用 :ref:`RigidBody <class_RigidBody>` 我们手榴弹的节点，所以它"
"们以某种(某种)现实的方式在世界各地反弹。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:26
msgid ""
"The second thing to note is ``Blast_Area``. This is an :ref:`Area "
"<class_Area>` node that will represent the blast radius of the grenade."
msgstr ""
"第二点需要注意的是 ``Blast_Area``。 这是一个 :ref:`Area <class_Area>` 节点，"
"它代表手榴弹的爆炸半径。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:28
#, fuzzy
msgid ""
"Finally, the last thing to note is ``Explosion``. This is the :ref:"
"`Particles <class_Particles>` node that will emit an explosion effect when "
"the grenade explodes. One thing to note here is that we have ``One shot`` "
"enabled. This is so we emit all the particles at once. The particles are "
"also emitted using world coordinates instead of local coordinates, so we "
"have ``Local Coords`` unchecked as well."
msgstr ""
"最后，最后要注意的是“爆炸”。 这是 :ref:`Particles <class_Particles>` 节点，当"
"手榴弹爆炸时会发出爆炸效果。 这里要注意的一点是我们启用了“一次性”。 这样我们"
"一次发射所有粒子。 粒子也是使用世界坐标而不是局部坐标发射的，所以我们也没有选"
"中“局部坐标”。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:32
msgid ""
"If you want, you can see how the particles are set up by looking through the "
"particle's ``Process Material`` and ``Draw Passes``."
msgstr ""
"如果需要，您可以通过查看粒子的“过程材质”和“绘制过程”来查看粒子是如何设置的。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:34
msgid ""
"Let's write the code needed for the grenade. Select ``Grenade`` and make a "
"new script called ``Grenade.gd``. Add the following:"
msgstr ""
"让我们编写手榴弹所需的代码。 选择 ``Grenade`` 并制作一个名为 ``Grenade.gd`` "
"的新脚本。 添加以下内容:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:90
msgid "Let's go over what's happening, starting with the class variables:"
msgstr "让我们回顾一下正在发生的事情，从类变量开始:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:92
msgid ""
"``GRENADE_DAMAGE``: The amount of damage the grenade causes when it explodes."
msgstr "``GRENADE DAMAGE``:手榴弹爆炸时造成的伤害量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:93
msgid ""
"``GRENADE_TIME``: The amount of time the grenade takes (in seconds) to "
"explode once it's created/thrown."
msgstr "``GRENADE_TIME``:手榴弹在创建/抛出后爆炸所需的时间(以秒为单位)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:94
msgid ""
"``grenade_timer``: A variable for tracking how long the grenade has been "
"created/thrown."
msgstr "``grenade_timer``:一个变量，用于跟踪手榴弹被创建/抛出的时间。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:95
msgid ""
"``EXPLOSION_WAIT_TIME``: The amount of time needed (in seconds) to wait "
"before we destroy the grenade scene after the explosion"
msgstr ""
"``EXPLOSION_WAIT_TIME``:爆炸后我们摧毁手榴弹场景所需的等待时间(以秒为单位)"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:96
msgid ""
"``explosion_wait_timer``: A variable for tracking how much time has passed "
"since the grenade exploded."
msgstr ""
"``explosion_wait_timer``:一个变量，用于跟踪自手榴弹爆炸以来已经过了多少时间。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:97
msgid ""
"``rigid_shape``: The :ref:`CollisionShape <class_CollisionShape>` for the "
"grenade's :ref:`RigidBody <class_RigidBody>`."
msgstr ""
"``rigid_shape``: :ref:`CollisionShape <class_CollisionShape>` 用于手榴弹 :"
"ref:`RigidBody <class_RigidBody>`。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:98
msgid ""
"``grenade_mesh``: The :ref:`MeshInstance <class_MeshInstance>` for the "
"grenade."
msgstr ""
"``grenade_mesh``:手榴弹的参考 :ref:`MeshInstance <class_MeshInstance>` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:99
msgid ""
"``blast_area``: The blast :ref:`Area <class_Area>` used to damage things "
"when the grenade explodes."
msgstr ""
"``blast_area``:爆炸 :ref:`Area <class_Area>` 用于在手榴弹爆炸时损坏东西。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:100
#, fuzzy
msgid ""
"``explosion_particles``: The :ref:`Particles <class_Particles>` that come "
"out when the grenade explodes."
msgstr ""
"``explosion_particles``:当手榴弹爆炸时发挥作用 :ref:`Particles "
"<class_Particles>` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:102
msgid ""
"Notice how ``EXPLOSION_WAIT_TIME`` is a rather strange number (``0.48``). "
"This is because we want ``EXPLOSION_WAIT_TIME`` to be equal to the length of "
"time the explosion particles are emitting, so when the particles are done we "
"destroy/free the grenade. We calculate ``EXPLOSION_WAIT_TIME`` by taking the "
"particle's life time and dividing it by the particle's speed scale. This "
"gets us the exact time the explosion particles will last."
msgstr ""
"注意 ``EXPLOSION_WAIT_TIME`` 是一个相当奇怪的数字(``0.48``)。 这是因为我们希"
"望 ``EXPLOSION_WAIT_TIME`` 等于爆炸粒子发射的时间长度，所以当粒子完成时我们会"
"摧毁/释放手榴弹。 我们通过获取粒子的生命时间并将其除以粒子的速度刻度来计"
"算“EXPLOSION_WAIT_TIME”。 这让我们得到了爆炸粒子持续的确切时间。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:108
msgid "Now let's turn our attention to ``_ready``."
msgstr "现在让我们把注意力转向 ``_ready`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:110
#, fuzzy
msgid ""
"First we get all the nodes we'll need and assign them to the proper class "
"variables."
msgstr "首先，我们得到我们需要的所有节点，并将它们分配给正确的类变量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:112
msgid ""
"We need to get the :ref:`CollisionShape <class_CollisionShape>` and :ref:"
"`MeshInstance <class_MeshInstance>` because similarly to the target in :ref:"
"`doc_fps_tutorial_part_four`, we will be hiding the grenade's mesh and "
"disabling the collision shape when the grenade explodes."
msgstr ""
"我们需要得到 :ref:`CollisionShape <class_CollisionShape>` 和 :ref:"
"`MeshInstance <class_MeshInstance>` 因为类似于 :ref:"
"`doc_fps_tutorial_part_four`中的目标，我们将隐藏手榴弹的网格并禁用碰撞形状 手"
"榴弹爆炸了。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:115
msgid ""
"The reason we need to get the blast :ref:`Area <class_Area>` is so we can "
"damage everything inside it when the grenade explodes. We'll be using code "
"similar to the knife code in the player. We need the :ref:`Particles "
"<class_Particles>` so we can emit particles when the grenade explodes."
msgstr ""
"我们需要获得爆炸的原因 :ref:`Area <class_Area>` 这样我们可以在手榴弹爆炸时损"
"坏其内部的一切。 我们将使用与游戏角色中的刀代码类似的代码。 我们需要 :ref:"
"`Particles <class_Particles>` 所以我们可以在手榴弹爆炸时发射粒子。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:118
#, fuzzy
msgid ""
"After we get all the nodes and assign them to their class variables, we then "
"make sure the explosion particles are not emitting, and that they are set to "
"emit in one shot. This is to be extra sure the particles will behave the way "
"we expect them to."
msgstr ""
"在我们获得所有节点并将它们分配给它们的类变量之后，我们确保爆炸粒子不会发射，"
"并且它们被设置为一次发射。 这是更加确定粒子将按照我们期望的方式运行。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:123
msgid "Now let's look at ``_process``."
msgstr "现在让我们来看看`_process``。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:125
#, fuzzy
msgid ""
"Firstly, we check to see if the ``grenade_timer`` is less than "
"``GRENADE_TIME``. If it is, we add ``delta`` and return. This is so the "
"grenade has to wait ``GRENADE_TIME`` seconds before exploding, allowing the :"
"ref:`RigidBody <class_RigidBody>` to move around."
msgstr ""
"首先，我们检查 ``grenade_timer`` 是否小于 ``GRENADE_TIMER`` 。 如果是，我们添"
"加 ``delta`` 并返回。 这是因为手榴弹必须在爆炸前等待 ``GRENADE_TIME`` 秒，允"
"许 :ref:`RigidBody <class_RigidBody>` 移动。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:128
msgid ""
"If ``grenade_timer`` is at ``GRENADE_TIMER`` or higher, we then need to "
"check if the grenade has waited long enough and needs to explode. We do this "
"by checking to see if ``explosion_wait_timer`` is equal to ``0`` or less. "
"Since we will be adding ``delta`` to ``explosion_wait_timer`` right after, "
"whatever code under the check will only be called once, right when the "
"grenade has waited long enough and needs to explode."
msgstr ""
"如果 ``grenade_timer`` 位于 ``GRENADE_TIMER`` 或更高，那么我们需要检查手榴弹"
"是否等待了足够长的时间并且需要爆炸。 我们通过检查 ``explosion_wait_timer`` 是"
"否等于 ``0`` 或更少来做到这一点。 因为我们将立即将 ``delta`` 添加到 "
"``explosion_wait_timer`` ，所以检查下的任何代码只会被调用一次，就在手榴弹等待"
"足够长并且需要爆炸时。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:132
msgid ""
"If the grenade has waited long enough to explode, we first tell the "
"``explosion_particles`` to emit. Then we make ``grenade_mesh`` invisible, "
"and disable ``rigid_shape``, effectively hiding the grenade."
msgstr ""
"如果手榴弹已经等待足够长的时间爆炸，我们首先告诉“爆炸_粒子”发射。 然后我们使 "
"``grenade_mesh`` 不可见，并禁用 ``rigid_shape`` ，有效地隐藏了手榴弹。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:135
msgid ""
"We then set the :ref:`RigidBody <class_RigidBody>`'s mode to ``MODE_STATIC`` "
"so the grenade does not move."
msgstr ""
"然后我们将 :ref:`RigidBody <class_RigidBody>的模式设置为 ``MODE_STATIC`` ，这"
"样手榴弹就不会移动了。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:137
#, fuzzy
msgid ""
"Then we get all the bodies in ``blast_area``, check to see if they have the "
"``bullet_hit`` method/function, and if they do, we call it and pass in "
"``GRENADE_DAMAGE`` and the transform from the body looking at the grenade. "
"This makes it where the bodies exploded by the grenade will explode outwards "
"from the grenade's position."
msgstr ""
"然后我们得到 ``blast_area`` 中的所有主体，检查他们是否有 ``bullet_hit`` 方法/"
"函数，如果他们这样做，我们调用它并传入 ``GRENADE_DAMAGE`` 并从中转换 物体看着"
"手榴弹。 这使得手榴弹爆炸的物体会从手榴弹的位置向外爆炸。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:140
#, fuzzy
msgid ""
"We then check to see if ``explosion_wait_timer`` is less than "
"``EXPLOSION_WAIT_TIME``. If it is, we add ``delta`` to "
"``explosion_wait_timer``."
msgstr ""
"然后我们检查 ``explosion_wait_timer`` 是否小于 ``EXPLOSION_WAIT_TIME`` 。 如"
"果是，我们将 ``delta`` 添加到 ``explosion_wait_time`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:142
#, fuzzy
msgid ""
"Next, we check to see if ``explosion_wait_timer`` is greater than or equal "
"to ``EXPLOSION_WAIT_TIME``. Because we added ``delta``, this will only be "
"called once. If ``explosion_wait_timer`` is greater or equal to "
"``EXPLOSION_WAIT_TIME``, the grenade has waited long enough to let the :ref:"
"`Particles <class_Particles>` play and we can free/destroy the grenade, as "
"we no longer need it."
msgstr ""
"接下来我们检查 ``explosion_wait_timer`` 是否大于或等于 "
"``EXPLOSION_WAIT_TIME`` 。 因为我们添加了 ``delta`` ，所以只会调用一次。 如"
"果 ``explosion_wait_timer`` 大于或等于 ``EXPLOSION_WAIT_TIME`` ，则手榴弹已等"
"待足够长时间让 :ref:`Particles <class_Particles>` 玩，我们可以释放/销毁手榴"
"弹，因为我们不再需要它。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:148
msgid ""
"Let's quickly get the sticky grenade set up too. Open up ``Sticky_Grenade."
"tscn``."
msgstr "让我们快速设置粘性手榴弹。 打开 ``Sticky_Grenade.tscn`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:150
msgid ""
"``Sticky_Grenade.tscn`` is almost identical to ``Grenade.tscn``, with one "
"small addition. We now have a second :ref:`Area <class_Area>`, called "
"``Sticky_Area``. We will be using ``Stick_Area`` to detect when the sticky "
"grenade has collided with the environment and needs to stick to something."
msgstr ""
"``Sticky_Grenade.tscn``几乎与``Grenade.tscn``相同，只有一个小的补充。 我们现"
"在有第二个 :ref:`Area <class_Area>`，称为 ``Sticky_Area`` 。 我们将使"
"用“Stick_Area”来检测粘性手榴弹何时与环境相撞并需要粘在某物上。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:154
msgid ""
"Select ``Sticky_Grenade`` and make a new script called ``Sticky_Grenade."
"gd``. Add the following:"
msgstr ""
"选择 ``Sticky_Grenade`` 并制作一个名为 ``Sticky_Grenade.gd`` 的新脚本。 添加"
"以下内容:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:244
msgid ""
"The code above is almost identical to the code for ``Grenade.gd``, so let's "
"just go over what's changed."
msgstr ""
"上面的代码几乎与 ``Grenade.gd`` 的代码完全相同，所以让我们回顾一下已经改变的"
"代码。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:246
#, fuzzy
msgid "Firstly, we have a few more class variables:"
msgstr "首先，我们还有一些类变量:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:248
msgid ""
"``attached``: A variable for tracking whether or not the sticky grenade has "
"attached to a :ref:`PhysicsBody <class_PhysicsBody>`."
msgstr ""
"``附加``:一个变量，用于跟踪粘性手榴弹是否附加到 :ref:`PhysicsBody "
"<class_PhysicsBody>`。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:249
#, fuzzy
msgid ""
"``attach_point``: A variable to hold a :ref:`Spatial <class_Spatial>` that "
"will be at the position where the sticky grenade collided."
msgstr ""
"``attach_point``:一个变量，用于保存 :ref:`Spatial <class_Spatial>` ，它将位于"
"粘性手榴弹碰撞的位置。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:250
msgid ""
"``player_body``: The player's :ref:`KinematicBody <class_KinematicBody>`."
msgstr ""
"``player_body``:游戏角色的 :ref:`KinematicBody <class_KinematicBody>`。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:252
#, fuzzy
msgid ""
"They have been added to enable the sticky grenade to stick to any :ref:"
"`PhysicsBody <class_PhysicsBody>` it might hit. We also now need the "
"player's :ref:`KinematicBody <class_KinematicBody>` so the sticky grenade "
"does not stick to the player when the player throws it."
msgstr ""
"这些添加物是如此粘性手榴弹可以坚持任何 :ref:`PhysicsBody <class_PhysicsBody>"
"它碰巧碰到了。 我们现在还需要游戏角色的 :ref:`KinematicBody "
"<class_KinematicBody>` 所以当游戏角色抛出时，粘性手榴弹不会粘在游戏角色身上。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:257
msgid ""
"Now let's look at the small change in ``_ready``. In ``_ready`` we've added "
"a line of code so when any body enters ``Stick_Area``, the "
"``collided_with_body`` function is called."
msgstr ""
"现在让我们来看看`_ready``中的小变化。 在 ``_ready`` 中我们添加了一行代码，因"
"此当任何物体进入 ``Stick_Area`` 时，会调用 ``collided_with_body`` 函数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:262
msgid "Next let's take a look at ``collided_with_body``."
msgstr "接下来让我们来看看 ``collided_with_body`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:264
#, fuzzy
msgid ""
"Firstly, we make sure the sticky grenade is not colliding with itself. "
"Because the sticky :ref:`Area <class_Area>` does not know it's attached to "
"the grenade's :ref:`RigidBody <class_RigidBody>`, we need to make sure it's "
"not going to stick to itself by checking to make sure the body it has "
"collided with is not itself. If we have collided with ourself, we ignore it "
"by returning."
msgstr ""
"首先，我们确保粘性手榴弹不会与自身发生碰撞。 因为sticky :ref:`Area "
"<class_Area>` 不知道它附加在手榴弹上 :ref:`RigidBody <class_RigidBody>`，我们"
"需要确保它不会坚持自己通过检查以确保它的物体 与之相撞并不是本身。 如果我们与"
"自己发生冲突，我们会通过返回来忽略它。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:269
msgid ""
"We then check to see if we have something assigned to ``player_body``, and "
"if the body the sticky grenade has collided with is the player that threw "
"it. If the body the sticky grenade has collided with is indeed "
"``player_body``, we ignore it by returning."
msgstr ""
"然后我们检查一下是否有东西分配给 ``player_body`` ，如果粘手榴弹碰撞的物体是投"
"掷它的游戏角色。 如果粘手榴弹碰到的物体确实是'`player_body``，我们会通过返回"
"来忽略它。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:272
#, fuzzy
msgid ""
"Next, we check if the sticky grenade has attached to something already or "
"not."
msgstr "接下来，我们检查粘性手榴弹是否已经附着在某物上。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:274
#, fuzzy
msgid ""
"If the sticky grenade is not attached, we then set ``attached`` to ``true`` "
"so we know the sticky grenade has attached to something."
msgstr ""
"如果没有粘贴手榴弹，我们将“附加”设置为真，这样我们就知道粘性手榴弹附着在某物"
"上。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:276
msgid ""
"We then make a new :ref:`Spatial <class_Spatial>` node, and make it a child "
"of the body the sticky grenade collided with. We then set the :ref:`Spatial "
"<class_Spatial>`'s position to the sticky grenade's current global position."
msgstr ""
"然后我们创建一个新的 :ref:`Spatial <class_Spatial>` 节点，并使其成为粘性手榴"
"弹与之碰撞的物体的子节点。 然后我们将 :ref:`Spatial <class_Spatial>的位置设置"
"为粘性手榴弹当前的全球位置。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:279
msgid ""
"Because we've added the :ref:`Spatial <class_Spatial>` as a child of the "
"body the sticky grenade has collided with, it will follow along with said "
"body. We can then use this :ref:`Spatial <class_Spatial>` to set the sticky "
"grenade's position, so it is always at the same position relative to the "
"body it collided with."
msgstr ""
"因为我们已经添加了 :ref:`Spatial <class_Spatial>` 作为粘性手榴弹碰撞的物体的"
"一个子节点，它将跟随所述物体。 然后我们可以使用它 :ref:`Spatial "
"<class_Spatial>` 来设置粘性手榴弹的位置，因此它总是在相对于它碰撞的物体的相同"
"位置。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:282
msgid ""
"We then disable ``rigid_shape`` so the sticky grenade is not constantly "
"moving whatever body it has collided with. Finally, we set our mode to "
"``MODE_STATIC`` so the grenade does not move."
msgstr ""
"然后我们禁用 ``rigid_shape`` ，这样粘手榴弹就不会一直移动它碰到的任何物体。 "
"最后，我们将模式设置为“MODE_STATIC”，因此手榴弹不会移动。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:287
msgid "Finally, lets go over the few changes in ``_process``."
msgstr "最后，让我们回顾一下 ``_process`` 中的一些变化。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:289
msgid ""
"Now we're checking to see if the sticky grenade is attached right at the top "
"of ``_process``."
msgstr "现在我们正在检查粘性手榴弹是否附在“_process`”的顶部。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:291
msgid ""
"If the sticky grenade is attached, we then make sure the attached point is "
"not equal to ``null``. If the attached point is not equal to ``null``, we "
"set the sticky grenade's global position (using its global :ref:`Transform "
"<class_Transform>`'s origin) to the global position of the :ref:`Spatial "
"<class_Spatial>` assigned to ``attach_point`` (using its global :ref:"
"`Transform <class_Transform>`'s origin)."
msgstr ""
"如果连接了粘性手榴弹，我们确保附加的点不等于“null”。 如果附加的点不等于 "
"``null`` ，我们将粘性手榴弹的全局位置(使用其global :ref:`Transform "
"<class_Transform>的原点)设置为 :ref:`Spatial <的全局位置 class_Spatial>` 赋值"
"给 ``attach_point`` (使用它的global :ref:`Transform <class_Transform>` 的原"
"点)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:295
msgid ""
"The only other change is now before we free/destroy the sticky grenade is to "
"check to see if the sticky grenade has an attached point. If it does, we "
"also call ``queue_free`` on the attach point, so it's also freed/destroyed."
msgstr ""
"在我们释放/销毁粘性手榴弹之前，现在唯一的另一个变化是检查粘性手榴弹是否有附着"
"点。 如果是这样，我们也在连接点上调用 ``queue_free`` ，因此它也被释放/销毁。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:299
msgid "Adding grenades to the player"
msgstr "向游戏角色添加手榴弹"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:301
msgid ""
"Now we need to add some code to ``Player.gd`` so we can use the grenades."
msgstr "现在我们需要在 ``Player.gd`` 中添加一些代码，以便我们可以使用手榴弹。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:303
#, fuzzy
msgid ""
"Firstly, open up ``Player.tscn`` and expand the node tree until you get to "
"``Rotation_Helper``. Notice how in ``Rotation_Helper`` we have a node called "
"``Grenade_Toss_Pos``. This is where we will be spawning the grenades."
msgstr ""
"首先，打开 ``Player.tscn`` 并展开节点树，直到您到达 ``Rotation_Helper`` 。 注"
"意在 ``Rotation_Helper`` 中我们有一个名为 ``Grenade_Toss_Pos`` 的节点。 这是"
"我们将产生手榴弹的地方。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:306
#, fuzzy
msgid ""
"Also notice how it's slightly rotated on the ``X`` axis, so it's not "
"pointing straight, but rather slightly up. By changing the rotation of "
"``Grenade_Toss_Pos``, you can change the angle at which the grenades are "
"tossed."
msgstr ""
"还要注意它是如何在“X”轴上轻微旋转的，所以它不是直指，而是略微向上。 通过改"
"变“Grenade_Toss_Pos”的旋转，您可以改变投掷手榴弹的角度。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:309
msgid ""
"Okay, now let's start making the grenades work with the player. Add the "
"following class variables to ``Player.gd``:"
msgstr ""
"好的，现在让我们开始让手榴弹与游戏角色一起工作。 将以下类变量添加到``Player."
"gd``:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:319
msgid ""
"``grenade_amounts``: The amount of grenades the player is currently carrying "
"(for each type of grenade)."
msgstr ""
"``grenade_amounts``:游戏角色当前携带的手榴弹数量(针对每种类型的手榴弹)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:320
msgid ""
"``current_grenade``: The name of the grenade the player is currently using."
msgstr "``current_grenade``:游戏角色目前正在使用的手榴弹的名称。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:321
msgid "``grenade_scene``: The grenade scene we worked on earlier."
msgstr "``grenade_scene``:我们之前工作的手榴弹场景。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:322
msgid ""
"``sticky_grenade_scene``: The sticky grenade scene we worked on earlier."
msgstr "``sticky_grenade_scene``:我们之前工作过的粘手榴弹场景。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:323
#, fuzzy
msgid ""
"``GRENADE_THROW_FORCE``: The force at which the player will throw the "
"grenades."
msgstr "``GRENADE_THROW_FORCE``:游戏角色投掷手榴弹的力量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:325
msgid "Most of these variables are similar to how we have our weapons set up."
msgstr "大多数这些变量与我们设置武器的方式类似。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:327
msgid ""
"While it's possible to make a more modular grenade system, I found it was "
"not worth the additional complexity for just two grenades. If you were going "
"to make a more complex FPS with more grenades, you'd likely want to make a "
"system for grenades similar to how we have the weapons set up."
msgstr ""
"虽然可以制作更模块化的手榴弹系统，但我发现仅仅两枚手榴弹的额外复杂性是不值得"
"的。 如果您打算制造一个更复杂的FPS和更多的手榴弹，您可能想要建立一个类似于我"
"们如何设置武器的手榴弹系统。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:332
msgid ""
"Now we need to add some code in ``_process_input`` Add the following to "
"``_process_input``:"
msgstr ""
"现在我们需要在 ``_process_input`` 中添加一些代码。将以下内容添加到"
"``_process_input``:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:362
msgid "Let's go over what's happening here."
msgstr "让我们回顾一下这里发生的事情。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:364
#, fuzzy
msgid ""
"Firstly, we check to see if the ``change_grenade`` action has just been "
"pressed. If it has, we then check to see which grenade the player is "
"currently using. Based on the name of the grenade the player is currently "
"using, we change ``current_grenade`` to the opposite grenade name."
msgstr ""
"首先，我们检查是否刚刚按下了 ``change_grenade`` 动作。 如果有，我们检查游戏角"
"色当前使用的手榴弹。 根据游戏角色当前使用的手榴弹的名称，我们"
"将“current_grenade”改为相反的手榴弹名称。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:367
msgid ""
"Next we check to see if the ``fire_grenade`` action has just been pressed. "
"If it has, we then check to see if the player has more than ``0`` grenades "
"for the current grenade type selected."
msgstr ""
"接下来我们检查是否刚刚按下了 ``fire_grenade`` 动作。 如果有，我们检查游戏角色"
"是否有超过“0”的手榴弹，用于当前选择的手榴弹类型。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:370
msgid ""
"If the player has more than ``0`` grenades, we then remove one from the "
"grenade amounts for the current grenade. Then, based on the grenade the "
"player is currently using, we instance the proper grenade scene and assign "
"it to ``grenade_clone``."
msgstr ""
"如果游戏角色拥有超过“0”的手榴弹，我们就会从当前手榴弹的手榴弹数量中移除一"
"枚。 然后，根据游戏角色当前正在使用的手榴弹，我们实例化正确的手榴弹场景并将其"
"分配给“grenade_clone”。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:373
msgid ""
"Next we add ``grenade_clone`` as a child of the node at the root and set its "
"global :ref:`Transform <class_Transform>` to ``Grenade_Toss_Pos``'s global :"
"ref:`Transform <class_Transform>`. Finally, we apply an impulse to the "
"grenade so that it is launched forward, relative to the ``Z`` directional "
"vector of ``grenade_clone``'s."
msgstr ""
"接下来，我们将 ``grenade_clone`` 添加为根节点的子节点，并将其global :ref:"
"`Transform <class_Transform>` 设置为 ``Grenade_Toss_Pos`` 的global :ref:"
"`Transform <class_Transform>`。 最后，我们对手榴弹施加一个冲动，使它相对于 "
"``grenade_clone`` 的 ``Z`` 方向向量向前发射。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:379
msgid ""
"Now the player can use both types of grenades, but there are still a few "
"things we should probably add before we move on to adding the other things."
msgstr ""
"现在游戏角色可以使用两种类型的手榴弹，但在我们继续添加其他东西之前，我们应该"
"添加一些东西。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:381
msgid ""
"We still need a way to show the player how many grenades are left, and we "
"should probably add a way to get more grenades when the player picks up ammo."
msgstr ""
"我们仍然需要一种方法向游戏角色展示剩下多少手榴弹，我们应该在游戏角色拿起弹药"
"时增加一种获得更多手榴弹的方法。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:383
#, fuzzy
msgid ""
"Firstly, let's change some of the code in ``Player.gd`` to show how many "
"grenades are left. Change ``process_UI`` to the following:"
msgstr ""
"首先，让我们改变一下“Player.gd”中的一些代码，以显示剩下多少手榴弹。 将 "
"``process_UI`` 更改为以下内容:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:399
msgid "Now we'll show how many grenades the player has left in the UI."
msgstr "现在我们将展示游戏角色在UI中留下多少手榴弹。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:401
msgid ""
"While we're still in ``Player.gd``, let's add a function to add grenades to "
"the player. Add the following function to ``Player.gd``:"
msgstr ""
"当我们还在 ``Player.gd`` 时，让我们添加一个向游戏角色添加手榴弹的功能。 将以"
"下函数添加到``Player.gd``:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:409
msgid ""
"Now we can add a grenade using ``add_grenade``, and it will automatically be "
"clamped to a maximum of ``4`` grenades."
msgstr ""
"现在我们可以使用 ``add_grenade`` 添加一个手榴弹，它会自动被夹到最大的 ``4`` "
"手榴弹。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:411
msgid ""
"You can change the ``4`` to a constant if you want. You'd need to make a new "
"global constant, something like ``MAX_GRENADES``, and then change the clamp "
"from ``clamp(grenade_amounts[current_grenade], 0, 4)`` to "
"``clamp(grenade_amounts[current_grenade], 0, MAX_GRENADES)``"
msgstr ""
"如果需要，可以将“4”改为常量。 您需要创建一个新的全局常量，比如 "
"``MAX_GRENADES`` ，然后将钳位从``clamp(grenade_amounts [current_grenade]，"
"0,4)``更改为``clamp(grenade_amounts [current_grenade]， 0，MAX_GRENADES)``"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:414
msgid ""
"If you do not want to limit how many grenades the player can carry, remove "
"the line that clamps the grenades altogether!"
msgstr "如果您不想限制游戏角色可以携带多少手榴弹，那就去掉完全夹住手榴弹的线！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:416
msgid ""
"Now we have a function to add grenades, let's open up ``AmmoPickup.gd`` and "
"use it!"
msgstr ""
"现在我们有一个添加手榴弹的功能，让我们打开 ``AmmoPickup.gd`` 并使用它！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:418
msgid ""
"Open up ``AmmoPickup.gd`` and go to the ``trigger_body_entered`` function. "
"Change it to the following:"
msgstr ""
"打开 ``AmmoPickup.gd`` 并转到 ``trigger_body_entered`` 函数。 将其更改为以下"
"内容:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:433
msgid ""
"Now we are also checking to see if the body has the ``add_grenade`` "
"function. If it does, we call it like we call ``add_ammo``."
msgstr ""
"现在我们还要检查主体是否有 ``add_grenade`` 函数。 如果是这样，我们称之"
"为“add_ammo”。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:435
msgid ""
"You may have noticed we are using a new constant we have not defined yet, "
"``GRENADE_AMOUNTS``. Let's add it! Add the following class variable to "
"``AmmoPickup.gd`` with the other class variables:"
msgstr ""
"您可能已经注意到我们正在使用一个尚未定义的新常量， ``GRENADE_AMOUNTS`` 。 我"
"们加上吧！ 使用其他类变量将以下类变量添加到``AmmoPickup.gd``:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:442
#, fuzzy
msgid "``GRENADE_AMOUNTS``: The amount of grenades each pickup contains."
msgstr "``GRENADE_AMOUNTS``:每个拾取的手榴弹数量包含。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:444
#, fuzzy
msgid ""
"Notice how the second element in ``GRENADE_AMOUNTS`` is ``0``. This is so "
"the small ammo pickup does not give the player any additional grenades."
msgstr ""
"注意 ``GRENADE_AMOUNTS`` 中的第二个元素是如何 ``0`` 。 这样小的弹药拾取不会给"
"游戏角色任何额外的手榴弹。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:449
msgid "Now you should be able to throw grenades! Go give it a try!"
msgstr "现在您应该可以投掷手榴弹了！ 去尝试吧！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:453
msgid "Adding the ability to grab and throw RigidBody nodes to the player"
msgstr "添加抓取并将RigidBody节点投射到游戏角色的功能"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:455
#, fuzzy
msgid ""
"Next, let's give the player the ability to pick up and throw :ref:`RigidBody "
"<class_RigidBody>` nodes."
msgstr ""
"接下来让我们给予游戏角色拾取和抛出的能力 :ref:`RigidBody <class_RigidBody>` "
"节点。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:457
msgid "Open up ``Player.gd`` and add the following class variables:"
msgstr "打开 ``Player.gd`` 并添加以下类变量:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:466
msgid ""
"``grabbed_object``: A variable to hold the grabbed :ref:`RigidBody "
"<class_RigidBody>` node."
msgstr ""
"``grabbed_object``:一个用于保存抓取的变量 :ref:`RigidBody <class_RigidBody>` "
"节点。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:467
#, fuzzy
msgid ""
"``OBJECT_THROW_FORCE``: The force with which the player throws the grabbed "
"object."
msgstr "``OBJECT_THROW_FORCE``:游戏角色将被抓物体甩开的力量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:468
#, fuzzy
msgid ""
"``OBJECT_GRAB_DISTANCE``: The distance away from the camera at which the "
"player holds the grabbed object."
msgstr "``OBJECT_GRAB_DISTANCE``:游戏角色握住被抓物体的距离。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:469
msgid ""
"``OBJECT_GRAB_RAY_DISTANCE``: The distance the :ref:`Raycast "
"<class_Raycast>` goes. This is the player's grab distance."
msgstr ""
"``OBJECT_GRAB_RAY_DISTANCE``:距离 :ref:`Raycast <class_Raycast>` 去了。 这是"
"游戏角色的抓地距离。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:471
msgid ""
"With that done, all we need to do is add some code to ``process_input``:"
msgstr "完成后，我们需要做的就是在 ``process_input`` 中添加一些代码:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:509
msgid "Let's go over what's happening."
msgstr "让我们回顾一下正在发生的事情。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:511
#, fuzzy
msgid ""
"Firstly, we check to see if the action pressed is the ``fire`` action, and "
"that the player is using the ``UNARMED`` 'weapon'. This is because we only "
"want the player to be able to pick up and throw objects when the player is "
"not using any weapons. This is a design choice, but I feel it gives "
"``UNARMED`` a use."
msgstr ""
"首先，我们检查按下的动作是否是“火”动作，并且游戏角色正在使用“UNARMED``'武"
"器'。 这是因为我们只希望游戏角色在游戏角色不使用任何武器时能够拾取和投掷物"
"体。 这是一个设计选择，但我觉得它给 ``UNARMED`` 一个用途。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:515
msgid "Next we check to see whether or not ``grabbed_object`` is ``null``."
msgstr "接下来我们检查 ``grabbed_object`` 是否为 ``null``。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:519
msgid ""
"If ``grabbed_object`` is ``null``, we want to see if we can pick up a :ref:"
"`RigidBody <class_RigidBody>`."
msgstr ""
"如果 ``grabbed_object`` 是 ``null`` ，我们想看看我们是否可以选择 :ref:"
"`RigidBody <class_RigidBody>`。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:521
msgid ""
"We first get the direct space state from the current :ref:`World "
"<class_World>`. This is so we can cast a ray entirely from code, instead of "
"having to use a :ref:`Raycast <class_Raycast>` node."
msgstr ""
"我们首先从当前获得直接空间状态 :ref:`World <class_World>`。 这样我们就可以完"
"全从代码中投射光线，而不必使用 :ref:`Raycast <class_Raycast>` 节点。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:524
msgid ""
"see :ref:`Ray-casting <doc_ray-casting>` for more information on raycasting "
"in Godot."
msgstr ""
"请参阅 :ref:`Ray-casting <doc_ray-casting>` 了解有关Godot的光线投射的更多信"
"息。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:526
msgid ""
"Then we get the center of the screen by dividing the current :ref:`Viewport "
"<class_Viewport>` size in half. We then get the ray's origin point and end "
"point using ``project_ray_origin`` and ``project_ray_normal`` from the "
"camera. If you want to know more about how these functions work, see :ref:"
"`Ray-casting <doc_ray-casting>`."
msgstr ""
"然后我们通过将当前 :ref:`Viewport <class_Viewport>` 大小分成两半来得到屏幕的"
"中心。 然后我们使用摄像机的 ``project_ray_origin`` 和 ``project_ray_normal`` "
"获取射线的原点和终点。 如果您想了解有关这些函数如何工作的更多信息，请参阅 :"
"ref:`Ray-casting <doc_ray-casting>`。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:529
msgid ""
"Next we send the ray into the space state and see if it gets a result. We "
"add the player and the knife's :ref:`Area <class_Area>` as two exceptions so "
"the player cannot carry themselves or the knife's collision :ref:`Area "
"<class_Area>`."
msgstr ""
"接下来，我们将光线发送到空间状态，看看它是否得到了结果。 我们添加了游戏角色和"
"刀子 :ref:`Area <class_Area>` 作为两个例外，因此游戏角色无法携带自己或刀的碰"
"撞 :ref:`Area <class_Area>`。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:532
#, fuzzy
msgid ""
"Then we check to see if we got a result back from the ray. If no object has "
"collided with the ray, an empty Dictionary will be returned. If the "
"Dictionary is not empty (i.e. at least one object has collided), we then see "
"if the collider the ray collided with is a :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""
"然后我们检查一下我们是否从光线中得到了一个结果。 如果有的话，我们会看到射线碰"
"撞的对撞机是否是 :ref:`RigidBody <class_RigidBody>`。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:534
msgid ""
"If the ray collided with a :ref:`RigidBody <class_RigidBody>`, we set "
"``grabbed_object`` to the collider the ray collided with. We then set the "
"mode on the :ref:`RigidBody <class_RigidBody>` we collided with to "
"``MODE_STATIC`` so it doesn't move in our hands."
msgstr ""
"如果光线与 :ref:`RigidBody <class_RigidBody>相撞，我们将 ``grabbed_object`` "
"设置为光线与光线相撞的对撞机。 然后我们将模式设置为 :ref:`RigidBody "
"<class_RigidBody>` 我们与 ``MODE_STATIC`` 相撞，所以它不会在我们手中移动。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:537
msgid ""
"Finally, we set the grabbed :ref:`RigidBody <class_RigidBody>`'s collision "
"layer and collision mask to ``0``. This will make the grabbed :ref:"
"`RigidBody <class_RigidBody>` have no collision layer or mask, which means "
"it will not be able to collide with anything as long as we are holding it."
msgstr ""
"最后，我们将抓取的 :ref:`RigidBody <class_RigidBody>的碰撞层和碰撞掩码设置"
"为“0”。 这将使得抓住 :ref:`RigidBody <class_RigidBody>` 没有碰撞层或掩码，这"
"意味着只要我们拿着它就不会碰到任何东西。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:542
msgid ""
"If ``grabbed_object`` is not ``null``, then we need to throw the :ref:"
"`RigidBody <class_RigidBody>` the player is holding."
msgstr ""
"如果 ``grabbed_object`` 不是 ``null`` ，那么我们需要抛出游戏角色持有的 :ref:"
"`RigidBody <class_RigidBody>。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:544
#, fuzzy
msgid ""
"We first set the mode of the :ref:`RigidBody <class_RigidBody>` we are "
"holding to ``MODE_RIGID``."
msgstr ""
"我们首先设置 :ref:`RigidBody <class_RigidBody>` 我们保持模式为 "
"``MODE_RIGID`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:546
msgid ""
"This is making a rather large assumption that all the rigid bodies will be "
"using ``MODE_RIGID``. While that is the case for this tutorial series, that "
"may not be the case in other projects."
msgstr ""
"这是一个相当大的假设，即所有刚体都将使用“MODE_RIGID”。 虽然本教程系列就是这种"
"情况，但在其他项目中可能并非如此。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:549
#, fuzzy
msgid ""
"If you have rigid bodies with different modes, you may need to store the "
"mode of the :ref:`RigidBody <class_RigidBody>` you have picked up into a "
"class variable so you can change it back to the mode it was in before you "
"picked it up."
msgstr ""
"如果您有 :ref:`RigidBody <class_RigidBody>` 有不同的模式，您可能需要存储 :"
"ref:`RigidBody <class_RigidBody>的模式您已经选择了一个类变量，所以您可以把它"
"改回来 在您拿起它之前的模式。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:552
msgid ""
"Then we apply an impulse to send it flying forward. We send it flying in the "
"direction the camera is facing, using the force we set in the "
"``OBJECT_THROW_FORCE`` variable."
msgstr ""
"然后我们施加冲动将它向前飞。 我们使用我们在 ``OBJECT_THROW_FORCE`` 变量中设置"
"的力将它发送到相机朝向的方向。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:554
msgid ""
"We then set the grabbed :ref:`RigidBody <class_RigidBody>`'s collision layer "
"and mask to ``1``, so it can collide with anything on layer ``1`` again."
msgstr ""
"然后我们将抓取的 :ref:`RigidBody <class_RigidBody>的碰撞层和掩码设置为 "
"``1`` ，这样它就可以再次与层“1”上的任何东西碰撞。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:556
msgid ""
"This is, once again, making a rather large assumption that all the rigid "
"bodies will be only on collision layer ``1``, and all collision masks will "
"be on layer ``1``. If you are using this script in other projects, you may "
"need to store the collision layer/mask of the :ref:`RigidBody "
"<class_RigidBody>` in a variable before you change them to ``0``, so you "
"would have the original collision layer/mask to set for them when you are "
"reversing the process."
msgstr ""
"这又是一个相当大的假设，即所有刚体都只在碰撞层“1”上，所有碰撞掩模都在"
"层“1”上。 如果您在其他项目中使用此脚本，您可能需要在变量中存储 :ref:"
"`RigidBody <class_RigidBody>` 的碰撞图层/掩码，然后将它们更改为“0”，这样您就"
"可以 在您反转过程时为其设置的原始碰撞图层/蒙版。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:559
msgid ""
"Finally, we set ``grabbed_object`` to ``null`` since the player has "
"successfully thrown the held object."
msgstr ""
"最后，我们将 ``grabbed_object`` 设置为 ``null`` ，因为游戏角色已经成功抛出了"
"被保持的对象。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:563
msgid ""
"The last thing we do is check to see whether or not ``grabbed_object`` is "
"equal to ``null``, outside all of the grabbing/throwing related code."
msgstr ""
"我们做的最后一件事是在所有抓取/投掷相关代码之外检查 ``grabbed_object`` 是否等"
"于 ``null`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:565
msgid ""
"While technically not input related, it's easy enough to place the code "
"moving the grabbed object here because it's only two lines, and then all of "
"the grabbing/throwing code is in one place"
msgstr ""
"虽然技术上没有输入相关，但是将代码移动到此处的代码很容易，因为它只有两行，然"
"后所有的抓取/抛出代码都在一个地方"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:568
msgid ""
"If the player is holding an object, we set its global position to the "
"camera's position plus ``OBJECT_GRAB_DISTANCE`` in the direction the camera "
"is facing."
msgstr ""
"如果游戏角色持有一个物体，我们将其全局位置设置为相机的位置以及相机朝向的方向"
"上的“OBJECT_GRAB_DISTANCE”。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:572
msgid ""
"Before we test this, we need to change something in ``_physics_process``. "
"While the player is holding an object, we do not want the player to be able "
"to change weapons or reload, so change ``_physics_process`` to the following:"
msgstr ""
"在我们测试之前，我们需要在 ``_physics_process`` 中改变一些东西。 当游戏角色持"
"有一个物体时，我们不希望游戏角色能够更换武器或重装，所以将 "
"``_physics_process`` 改为:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:589
msgid "Now the player cannot change weapons or reload while holding an object."
msgstr "现在游戏角色在拿着物体时无法改变武器或重装。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:591
msgid ""
"Now you can grab and throw RigidBody nodes while you're in the ``UNARMED`` "
"state! Go give it a try!"
msgstr ""
"现在，当您处于“UNARMED”状态时，您可以抓住并抛出RigidBody节点！ 去尝试吧！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:594
msgid "Adding a turret"
msgstr "添加一个炮塔"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:596
msgid "Next, let's make a turret to shoot the player!"
msgstr "接下来，让我们制作一个炮塔射击游戏角色！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:598
msgid ""
"Open up ``Turret.tscn``. Expand ``Turret`` if it's not already expanded."
msgstr "打开 ``Turret.tscn`` 。 如果尚未展开，请展开 ``Turret`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:600
#, fuzzy
msgid ""
"Notice how the turret is broken up into several parts: ``Base``, ``Head``, "
"``Vision_Area``, and a ``Smoke`` :ref:`Particles <class_Particles>` node."
msgstr ""
"注意炮塔如何分成几个部分。 我们有一个 ``Base`` ， ``Head`` ， "
"``Vision_Area`` 和一个``Smoke`` :ref:`Particles <class_Particles>`。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:602
#, fuzzy
msgid ""
"Open up ``Base`` and you'll find it's a :ref:`StaticBody <class_StaticBody>` "
"and a mesh. Open up ``Head`` and you'll find there are several meshes, a :"
"ref:`StaticBody <class_StaticBody>` and a :ref:`Raycast <class_Raycast>` "
"node."
msgstr ""
"打开 ``Base`` 您会发现它是 :ref:`StaticBody <class_StaticBody>` 和一个网格。 "
"打开 ``Head`` 您会发现有几个网格，a :ref:`StaticBody <class_StaticBody>` 和"
"a :ref:`Raycast <class_Raycast>` 节点。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:605
msgid ""
"One thing to note with the ``Head`` is that the raycast will be where the "
"turret's bullets will fire from if we are using raycasting. We also have two "
"meshes called ``Flash`` and ``Flash_2``. These will be the muzzle flash that "
"briefly shows when the turret fires."
msgstr ""
"“头部”的一个注意事项是，如果我们使用光线投射，光线投射将是炮塔射击的地方。 我"
"们还有两个网格叫做 ``Flash`` 和 ``Flash_2`` 。 这些将是枪口闪光，简要显示炮塔"
"开火时。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:608
msgid ""
"``Vision_Area`` is an :ref:`Area <class_Area>` we'll use as the turret's "
"ability to see. When something enters ``Vision_Area``, we'll assume the "
"turret can see it."
msgstr ""
"``Vision_Area``是 :ref:`Area <class_Area>` 我们将用作炮塔的能力。 当某些东西"
"进入“Vision_Area”时，我们会认为炮塔可以看到它。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:610
msgid ""
"``Smoke`` is a :ref:`Particles <class_Particles>` node that will play when "
"the turret is destroyed and repairing."
msgstr ""
"``Smoke``是一个 :ref:`Particles <class_Particles>` 节点将在炮塔被摧毁和修复时"
"播放。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:614
msgid ""
"Now that we've looked at how the scene is set up, lets start writing the "
"code for the turret. Select ``Turret`` and create a new script called "
"``Turret.gd``. Add the following to ``Turret.gd``:"
msgstr ""
"现在我们已经了解了如何设置场景，让我们开始编写炮塔的代码。 选择 ``Turret`` 并"
"创建一个名为 ``Turret.gd`` 的新脚本。 将以下内容添加到``Turret.gd``:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:780
msgid ""
"This is quite a bit of code, so let's break it down function by function. "
"Let's first look at the class variables:"
msgstr "这是相当多的代码，所以让我们按功能分解它。 我们先来看一下类变量:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:782
#, fuzzy
msgid ""
"``use_raycast``: An exported boolean so we can change whether the turret "
"uses objects or raycasting for bullets."
msgstr ""
"``use_raycast``:一个导出的布尔值，这样我们可以改变炮塔是使用物体还是射线投射"
"子弹。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:783
msgid ""
"``TURRET_DAMAGE_BULLET``: The amount of damage a single bullet scene does."
msgstr "``TURRET_DAMAGE_BULLET``:单个子弹场景造成的伤害量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:784
msgid ""
"``TURRET_DAMAGE_RAYCAST``: The amount of damage a single :ref:`Raycast "
"<class_Raycast>` bullet does."
msgstr ""
"``TURRET_DAMAGE_RAYCAST``:单个损坏的数量 :ref:`Raycast <class_Raycast>` "
"bullet。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:785
msgid ""
"``FLASH_TIME``: The amount of time (in seconds) the muzzle flash meshes are "
"visible."
msgstr "``FLASH_TIME``:枪口闪光网格的可见时间(以秒为单位)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:786
msgid ""
"``flash_timer``: A variable for tracking how long the muzzle flash meshes "
"have been visible."
msgstr "``flash_timer``:一个变量，用于跟踪枪口闪光网格的可见时间。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:787
msgid "``FIRE_TIME``: The amount of time (in seconds) needed to fire a bullet."
msgstr "``FIRE_TIME``:发射子弹所需的时间(以秒为单位)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:788
msgid ""
"``fire_timer``: A variable for tracking how much time has passed since the "
"turret last fired."
msgstr "``fire_timer``:一个变量，用于跟踪炮塔上次射击后经过的时间。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:789
msgid "``node_turret_head``: A variable to hold the ``Head`` node."
msgstr "``node_turret_head``:一个用于保存 ``Head`` 节点的变量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:790
msgid ""
"``node_raycast``: A variable to hold the :ref:`Raycast <class_Raycast>` node "
"attached to the turret's head."
msgstr ""
"``node_raycast``:一个变量，用于保存附加到炮塔头部的 :ref:`Raycast "
"<class_Raycast>` 节点。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:791
msgid ""
"``node_flash_one``: A variable to hold the first muzzle flash :ref:"
"`MeshInstance <class_MeshInstance>`."
msgstr ""
"``node_flash_one``:一个用于保存第一个枪口flash的变量 :ref:`MeshInstance "
"<class_MeshInstance>`。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:792
msgid ""
"``node_flash_two``: A variable to hold the second muzzle flash :ref:"
"`MeshInstance <class_MeshInstance>`."
msgstr ""
"``node_flash_two``:一个用于保存第二个枪口flash的变量 :ref:`MeshInstance "
"<class_MeshInstance>`。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:793
msgid "``ammo_in_turret``: The amount of ammo currently in the turret."
msgstr "``ammo_in_turret``:目前炮塔中的弹药数量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:794
msgid "``AMMO_IN_FULL_TURRET``: The amount of ammo in a full turret."
msgstr "``AMMO_IN_FULL_TURRET``:完整炮塔中的弹药数量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:795
msgid "``AMMO_RELOAD_TIME``: The amount of time it takes the turret to reload."
msgstr "``AMMO_RELOAD_TIME``:炮塔重装的时间。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:796
msgid ""
"``ammo_reload_timer``: A variable for tracking how long the turret has been "
"reloading."
msgstr "``ammo_reload_timer``:一个变量，用于跟踪炮塔重装的时间。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:797
msgid "``current_target``: The turret's current target."
msgstr "``current_target``:炮塔的当前目标。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:798
msgid ""
"``is_active``: A variable for tracking whether the turret is able to fire at "
"the target."
msgstr "``is_active``:用于跟踪炮塔是否能够射向目标的变量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:799
msgid ""
"``PLAYER_HEIGHT``: The amount of height we're adding to the target so we're "
"not shooting at its feet."
msgstr "``PLAYER_HEIGHT``:我们添加到目标的高度，所以我们不会在它的脚下射击。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:800
msgid "``smoke_particles``: A variable to hold the smoke particles node."
msgstr "``smoke_particles``:用于保存烟雾粒子节点的变量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:801
msgid "``turret_health``: The amount of health the turret currently has."
msgstr "``turret_health``:炮塔目前的健康状况。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:802
msgid "``MAX_TURRET_HEALTH``: The amount of health a fully healed turret has."
msgstr "``MAX_TURRET_HEALTH``:完全愈合的炮塔的健康量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:803
msgid ""
"``DESTROYED_TIME``: The amount of time (in seconds) it takes for a destroyed "
"turret to repair itself."
msgstr "``DESTROYED_TIME``:被毁坏的炮塔修复自己所花费的时间(以秒为单位)。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:804
msgid ""
"``destroyed_timer``: A variable for tracking the amount of time a turret has "
"been destroyed."
msgstr "``destroyed_timer``:一个变量，用于跟踪炮塔被摧毁的时间。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:805
msgid ""
"``bullet_scene``: The bullet scene the turret fires (same scene as the "
"player's pistol)"
msgstr "``bullet_scene``:炮塔射击的子弹场景(与游戏角色的手枪相同的场景)"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:807
#, fuzzy
msgid "Whew, that's quite a few class variables!"
msgstr "Phew，这是几个类变量！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:811
msgid "Let's go through ``_ready`` next."
msgstr "接下来我们来看看`_ready``。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:813
#, fuzzy
msgid ""
"Firstly, we get the vision area and connect the ``body_entered`` and "
"``body_exited`` signals to ``body_entered_vision`` and "
"``body_exited_vision``, respectively."
msgstr ""
"首先，我们得到视觉区域，并分别将 ``body_entered`` 和 ``body_exited`` 信号连接"
"到 ``body_entered_vision`` 和 ``body_exited_vision`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:815
#, fuzzy
msgid ""
"We then get all the nodes and assign them to their respective variables."
msgstr "然后，我们获取所有节点并将它们分配给各自的变量。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:817
#, fuzzy
msgid ""
"Next, we add some exceptions to the :ref:`Raycast <class_Raycast>` so the "
"turret cannot hurt itself."
msgstr ""
"接下来我们添加一些例外 :ref:`Raycast <class_Raycast>` 所以炮塔不会伤害自己。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:819
msgid ""
"Then we make both flash meshes invisible at start, since we are not going to "
"be firing during ``_ready``."
msgstr ""
"然后我们在开始时使两个闪存网格都不可见，因为我们不会在“_ready”期间触发。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:821
#, fuzzy
msgid ""
"We then get the smoke particles node and assign it to the "
"``smoke_particles`` variable. We also set ``emitting`` to ``false`` to "
"ensure the particles are not emitting until the turret is broken."
msgstr ""
"然后我们得到烟雾粒子节点并将其分配给 ``smoke_particles`` 节点。 我们还将 "
"``emit`` 设置为 ``false`` 以确保粒子在炮塔断裂之前不会发射。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:824
msgid ""
"Finally, we set the turret's health to ``MAX_TURRET_HEALTH`` so it starts at "
"full health."
msgstr ""
"最后，我们将炮塔的生命值设置为“MAX_TURRET_HEALTH”，以便从完全健康状态开始。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:828
msgid "Now let's go through ``_physics_process``."
msgstr "现在让我们来看看`_physics_process``。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:830
#, fuzzy
msgid ""
"Firstly, we check whether the turret is active. If the turret is active, we "
"want to process the firing code."
msgstr ""
"首先，我们检查炮塔是否有效。 如果炮塔处于活动状态，我们希望处理射击代码。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:832
#, fuzzy
msgid ""
"Next, if ``flash_timer`` is greater than zero, meaning the flash meshes are "
"visible, we want to remove delta from ``flash_timer``. If ``flash_timer`` "
"gets to zero or less after we've subtracted ``delta``, we want to hide both "
"of the flash meshes."
msgstr ""
"接下来我们检查 ``flash_timer`` 是否大于零，这意味着flash网格是可见的，我们想"
"从 ``flash_timer`` 中删除delta。 如果在我们减去“delta”之后 ``flash_timer`` 变"
"为零或更小，我们想要隐藏两个闪存网格。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:836
#, fuzzy
msgid ""
"Next, we check whether the turret has a target. If the turret has a target, "
"we make the turret head look at it, adding ``PLAYER_HEIGHT`` so it is not "
"aiming at the player's feet."
msgstr ""
"接下来我们检查炮塔是否有目标。 如果炮塔有目标，我们让炮塔头看它，加"
"上“PLAYER_HEIGHT”，这样它就不会瞄准游戏角色的脚。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:839
#, fuzzy
msgid ""
"We then check whether the turret's health is greater than zero. If it is, we "
"then check whether there is ammo in the turret."
msgstr ""
"然后我们检查炮塔的健康状况是否大于零。 如果是，我们然后检查炮塔中是否有弹药。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:841
#, fuzzy
msgid ""
"If there is, we then check whether ``fire_timer`` is greater than zero. If "
"it is, the turret cannot fire and we need to remove ``delta`` from "
"``fire_timer``. If ``fire_timer`` is less than or equal to zero, the turret "
"can fire a bullet, so we call the ``fire_bullet`` function."
msgstr ""
"如果炮塔中有弹药，我们会检查 ``fire_timer`` 是否大于零。 如果 ``fire_timer`` "
"大于零，炮塔就无法射击，我们需要从 ``fire_timer`` 中删除 ``delta`` 。 如果 "
"``fire_timer`` 等于或小于零，炮塔可以发射子弹，所以我们称之为 "
"``fire_bullet`` 函数。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:844
#, fuzzy
msgid ""
"If there isn't any ammo in the turret, we check whether "
"``ammo_reload_timer`` is greater than zero. If it is, we subtract ``delta`` "
"from ``ammo_reload_timer``. If ``ammo_reload_timer`` is less than or equal "
"to zero, we set ``ammo_in_turret`` to ``AMMO_IN_FULL_TURRET`` because the "
"turret has waited long enough to refill its ammo."
msgstr ""
"如果炮塔中没有任何弹药，我们会检查 ``ammo_reload_timer`` 是否大于零。 如果 "
"``ammo_reload_timer`` 大于零，我们从 ``ammo_reload_timer`` 中减去 "
"``delta`` 。 如果 ``ammo_reload_timer`` 等于或小于零，我们将 "
"``ammo_in_turret`` 设置为 ``AMMO_IN_FULL_TURRET`` ，因为炮塔已等待足够长的时"
"间来重新填充弹药。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:848
#, fuzzy
msgid ""
"Next, we check whether the turret's health is less than or equal to ``0`` "
"outside of whether it is active or not. If the turret's health is zero or "
"less, we then check whether ``destroyed_timer`` is greater than zero. If it "
"is, we subtract ``delta`` from ``destroyed_timer``."
msgstr ""
"接下来我们检查炮塔的健康状况是否小于或等于“0”，除了它是否有效。 如果炮塔的健"
"康状况为零或更低，我们会检查 ``destroyed_timer`` 是否大于零。 如果被破坏的计"
"时器大于零，我们从 ``destroyed_timer`` 中减去 ``delta`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:851
msgid ""
"If ``destroyed_timer`` is less than or equal to zero, we set "
"``turret_health`` to ``MAX_TURRET_HEALTH`` and stop emitting smoke particles "
"by setting ``smoke_particles.emitting`` to ``false``."
msgstr ""
"如果 ``destroyed_timer`` 小于或等于零，我们将 ``turret_health`` 设置为 "
"``MAX_TURRET_HEALTH`` 并通过将 ``smoke_particles.emitting`` 设置为 ``false`` "
"来停止冒烟。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:856
msgid "Next let's go through ``fire_bullet``."
msgstr "接下来让我们来看看 ``fire_bullet`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:858
#, fuzzy
msgid "Firstly, we check whether the turret is using a raycast."
msgstr "首先，我们检查炮塔是否正在使用光线投射。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:860
#, fuzzy
msgid ""
"The code for using a raycast is almost entirely the same as the code in the "
"rifle from :ref:`doc_fps_tutorial_part_two`, so I'm only going to go over it "
"briefly."
msgstr ""
"使用光线投射的代码几乎完全与步枪中的代码相同 :ref:"
"`doc_fps_tutorial_part_two`，所以我只是简单地介绍它。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:863
#, fuzzy
msgid ""
"We first make the raycast look at the target, ensuring the raycast will hit "
"the target if nothing is in the way. We then force the raycast to update so "
"we get a frame perfect collision check. We then check whether the raycast "
"has collided with anything. If it has, we then check whether the collided "
"body has the ``bullet_hit`` method. If it does, we call it and pass in the "
"damage a single raycast bullet does along with the raycast's transform. We "
"then subtract ``1`` from ``ammo_in_turret``."
msgstr ""
"我们首先让光线投射看目标，确保如果没有任何障碍，光线投射将击中目标。 然后，我"
"们强制更新光线投射，以便我们进行帧完美碰撞检查。 然后我们检查光线投射是否与任"
"何东西相撞。 如果光线投射与某些事物发生碰撞，我们会检查碰撞体是否具"
"有“bullet_hit”功能。 如果确实如此，我们称之为并传递一个光线投射子弹与光线投射"
"变换一起造成的伤害。 然后我们从 ``ammo_in_turret`` 中删除 ``1`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:868
msgid ""
"If the turret is not using a raycast, we spawn a bullet object instead. This "
"code is almost entirely the same as the code in the pistol from :ref:"
"`doc_fps_tutorial_part_two`, so like with the raycast code, I'm only going "
"to go over it briefly."
msgstr ""
"如果炮塔没有使用光线投射，我们会生成一个子弹对象。 这段代码几乎完全与手枪中的"
"代码相同 :ref:`doc_fps_tutorial_part_two`，所以与光线播放代码一样，我只是简单"
"地介绍一下。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:871
#, fuzzy
msgid ""
"We first make a bullet clone and assign it to ``clone``. We then add that as "
"a child of the root node. We set the bullet's global transform to the barrel "
"end, scale it up since it's too small, and set its damage and speed using "
"the turret's constant class variables. We then subtract ``1`` from "
"``ammo_in_turret``."
msgstr ""
"我们首先制作一个子弹克隆并将其分配给 ``clone`` 。 然后我们将其添加为根节点的"
"子节点。 我们将子弹的全局变换设置为桶端，由于它太小而将其放大，并使用炮塔的常"
"量类变量设置它的伤害和速度。 然后我们从 ``ammo_in_turret`` 中删除 ``1`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:875
#, fuzzy
msgid ""
"Then, regardless of which bullet method we used, we make both of the muzzle "
"flash meshes visible. We set ``flash_timer`` and ``fire_timer`` to "
"``FLASH_TIME`` and ``FIRE_TIME``, respectively. We then check whether the "
"turret has used the last bullet in its ammo. If it has, we set "
"``ammo_reload_timer`` to ``AMMO_RELOAD_TIME`` so the turret reloads."
msgstr ""
"然后，无论我们使用哪种子弹方法，我们都可以看到两个枪口闪光网格。 我们将 "
"``flash_timer`` 和 ``fire_timer`` 分别设置为 ``FLASH_TIME`` 和 "
"``FIRE_TIME`` 。 然后我们检查炮塔是否使用了弹药中的最后一颗子弹。 如果炮塔使"
"用了最后一个子弹，我们将 ``ammo_reload_timer`` 设置为 ``AMMO_RELOAD_TIME`` ，"
"以便炮塔重新加载。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:881
msgid ""
"Let's look at ``body_entered_vision`` next, and thankfully it is rather "
"short."
msgstr "让我们看看接下来的 ``body_entered_vision`` ，谢天谢地，它很短。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:883
#, fuzzy
msgid ""
"We first check whether the turret currently has a target by checking if "
"``current_target`` is equal to ``null``. If the turret does not have a "
"target, we then check whether the body that has just entered the vision :ref:"
"`Area <class_Area>` is a :ref:`KinematicBody <class_KinematicBody>`."
msgstr ""
"我们首先通过检查 ``current_target`` 是否等于 ``null`` 来检查炮塔当前是否有目"
"标。 如果炮塔没有目标，我们检查刚刚进入视觉的物体 :ref:`Area <class_Area>` "
"是 :ref:`KinematicBody <class_KinematicBody>"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:886
#, fuzzy
msgid ""
"We're assuming the turret should only fire at :ref:`KinematicBody "
"<class_KinematicBody>` nodes since that is what the player is using."
msgstr ""
"我们假设炮塔只应在以下地方开火 :ref:`KinematicBody <class_KinematicBody>` 节"
"点，因为那是游戏角色正在使用的。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:888
msgid ""
"If the body that just entered the vision :ref:`Area <class_Area>` is a :ref:"
"`KinematicBody <class_KinematicBody>`, we set ``current_target`` to the "
"body, and set ``is_active`` to ``true``."
msgstr ""
"如果刚进入视觉的主体 :ref:`Area <class_Area>` 是 :ref:`KinematicBody "
"<class_KinematicBody>`，我们将 ``current_target`` 设置为body，并将 "
"``is_active`` 设置为 ``true`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:893
msgid "Now let's look at ``body_exited_vision``."
msgstr "现在让我们来看看 ``body_exited_vision`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:895
#, fuzzy
msgid ""
"Firstly, we check whether the turret has a target. If it does, we then check "
"whether the body that has just left the turret's vision :ref:`Area "
"<class_Area>` is the turret's target."
msgstr ""
"首先，我们检查炮塔是否有目标。 如果炮塔有目标，我们检查刚刚离开炮塔视线的物"
"体 :ref:`Area <class_Area>` 是炮塔的目标。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:898
#, fuzzy
msgid ""
"If the body that has just left the vision :ref:`Area <class_Area>` is the "
"turret's current target, we set ``current_target`` to ``null``, set "
"``is_active`` to ``false``, and reset all the variables related to firing "
"the turret since the turret no longer has a target to fire at."
msgstr ""
"如果刚刚离开视觉的物体 :ref:`Area <class_Area>` 是炮塔的当前目标，我们将 "
"``current_target`` 设置为 ``null`` ，将 ``is_active`` 设置为 ``false`` ， 并"
"重置所有与发射炮塔有关的变量，因为炮塔不再有射击目标。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:903
msgid "Finally, let's look at ``bullet_hit``."
msgstr "最后，让我们看一下 ``bullet_hit`` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:905
#, fuzzy
msgid ""
"We first subtract however much damage the bullet causes from the turret's "
"health."
msgstr "我们首先从炮塔的健康状况中移除子弹造成的大量伤害。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:907
#, fuzzy
msgid ""
"Then, we check whether the turret has been destroyed (health being zero or "
"less). If the turret is destroyed, we start emitting the smoke particles and "
"set ``destroyed_timer`` to ``DESTROYED_TIME`` so the turret has to wait "
"before being repaired."
msgstr ""
"然后我们检查炮塔是否已被摧毁(健康状况为零或更少)。 如果炮塔被摧毁，我们开始冒"
"烟雾颗粒，并将“destroyed_timer”设置为“DESTROYED_TIME”，因此炮塔必须等待才能修"
"复。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:912
#, fuzzy
msgid ""
"Whew, with all of that done and coded, we only have one last thing to do "
"before the turret is ready for use. Open up ``Turret.tscn`` if it's not "
"already open and select one of the :ref:`StaticBody <class_StaticBody>` "
"nodes from either ``Base`` or ``Head``. Create a new script called "
"``TurretBodies.gd`` and attach it to whichever :ref:`StaticBody "
"<class_StaticBody>` you have selected."
msgstr ""
"Phew，完成所有这些并编码后，我们在炮塔准备好使用之前只有最后一件事要做。 如果"
"它还没有打开，打开 ``Turret.tscn`` 并从 ``Base`` 或 ``Head`` 中选择一个 :ref:"
"`StaticBody <class_StaticBody>` 节点。 创建一个名为 ``TurretBodies.gd`` 的新"
"脚本，并将其附加到以下任何一个 :ref:`StaticBody <class_StaticBody>` 。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:916
msgid "Add the following code to ``TurretBodies.gd``:"
msgstr "将以下代码添加到``TurretBodies.gd``:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:931
#, fuzzy
msgid ""
"All this code does is call ``bullet_hit`` on whatever node to which "
"``path_to_turret_root`` leads. Go back to the editor and assign the :ref:"
"`NodePath <class_NodePath>` to the ``Turret`` node."
msgstr ""
"所有这些代码都在 ``path_to_turret_root`` 导致的节点上调用 ``bullet_hit`` 。 "
"返回编辑器并将 :ref:`NodePath <class_NodePath>` 分配给 ``Turret`` 节点。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:934
msgid ""
"Now select the other :ref:`StaticBody <class_StaticBody>` node (either in "
"``Body`` or ``Head``) and assign ``TurretBodies.gd`` script to it. Once the "
"script is attached, assign again the :ref:`NodePath <class_NodePath>` to the "
"``Turret`` node."
msgstr ""
"现在选择另一个 :ref:`StaticBody <class_StaticBody>` 节点(在 ``Body`` 或 "
"``Head`` 中)并为其指定 ``TurretBodies.gd`` 脚本。 附加脚本后，再次将 :ref:"
"`NodePath <class_NodePath>` 分配给 ``Turret`` 节点。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:939
#, fuzzy
msgid ""
"The last thing we need to do is add a way for the player to be hurt. Since "
"all the bullets use the ``bullet_hit`` function, we need to add that "
"function to the player."
msgstr ""
"我们需要做的最后一件事是为游戏角色增添一种伤害方式。 由于所有子弹都使用 "
"``bullet_hit`` 函数，我们需要将该函数添加到游戏角色。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:941
msgid "Open ``Player.gd`` and add the following:"
msgstr "打开 ``Player.gd`` 并添加以下内容:"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:948
msgid ""
"With all that done, you should have fully operational turrets! Go place a "
"few in one/both/all of the scenes and give them a try!"
msgstr ""
"完成所有这些后，您应该拥有完全可操作的炮塔！ 在一个/两个/所有场景中进行几次尝"
"试！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:951
msgid "Final notes"
msgstr "最后的笔记"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:955
msgid ""
"Now you can pick up :ref:`RigidBody <class_RigidBody>` nodes and throw "
"grenades. We now also have turrets to fire at the player."
msgstr ""
"现在您可以拿起 :ref:`RigidBody <class_RigidBody>` 节点并投掷手榴弹。 我们现在"
"也有炮塔射击游戏角色。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:957
msgid ""
"In :ref:`doc_fps_tutorial_part_six`, we're going to add a main menu and a "
"pause menu, add a respawn system for the player, and change/move the sound "
"system so we can use it from any script."
msgstr ""
"在 :ref:`doc_fps_tutorial_part_six`中，我们将添加一个主菜单和一个暂停菜单，为"
"游戏角色添加重新生成的系统，以及更改/移动声音系统，以便我们可以从任何脚本中使"
"用它。"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:960
msgid "If you ever get lost, be sure to read over the code again!"
msgstr "如果您迷路了，请务必再次阅读代码！"

#: ../../docs/tutorials/3d/fps_tutorial/part_five.rst:962
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_5.zip <files/Godot_FPS_Part_5.zip>`"
msgstr ""
"您可以在这里下载这个部分的完成项目: :download:`Godot_FPS_Part_5.zip <files / "
"Godot_FPS_Part_5.zip>`"
