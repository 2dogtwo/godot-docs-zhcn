# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-27 08:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:4
#, fuzzy
msgid "Animating thousands of fish with MultiMeshInstance"
msgstr "用渐变节点动画生命的损失"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:6
msgid ""
"This tutorial explores a technique used in the game `ABZU <https://www."
"gdcvault.com/play/1024409/Creating-the-Art-of-ABZ>`_ for rendering and "
"animating thousands of fish using vertex animation and static mesh "
"instancing."
msgstr ""
"本教程探索了游戏“ABZU <https://www.gdcvault.com/play/1024409/Creating-the-"
"Art-of-ABZ>”中使用的一种技术，该技术使用顶点动画和静态网格实例，来渲染和制作"
"成千上万的鱼动画。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:10
msgid ""
"In Godot, this can be accomplished with a custom :ref:`Shader "
"<class_Shader>` and a :ref:`MultiMeshInstance <class_MultiMeshInstance>`. "
"Using the following technique you can render thousands of animated objects, "
"even on low end hardware."
msgstr ""
"在Godot中，这可以通过自定义:参考:`着色器<类_着色器>`和:参考:`多重网格实例<类_"
"多重网格实例>`实现。使用下面的技术，你可以渲染成千上万的动画对象，即使是在低"
"端硬件上。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:14
msgid ""
"We will start by animating one fish. Then, we will see how to extend that "
"animation to thousands of fish."
msgstr "我们将从一条鱼的动画开始。然后，我们将看到如何将该动画扩展到数千条鱼。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:18
#, fuzzy
msgid "Animating one Fish"
msgstr "动画"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:20
#, fuzzy
msgid ""
"We will start with a single fish. Load your fish model into a :ref:"
"`MeshInstance <class_MeshInstance>` and add a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"单击下面的材质 :ref:`Plane Mesh <class_MeshInstance>` 菜单并创建一个新的 :"
"ref:`ShaderMaterial <class_ShaderMaterial>`。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:23
msgid ""
"Here is the fish we will be using for the example images, you can use any "
"fish model you like."
msgstr "这是我们用于示例图像的鱼，您可以使用任何您喜欢的鱼模型。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:27
msgid ""
"The fish model in this tutorial is made by `QuaterniusDev <http://quaternius."
"com>`_ and is shared with a creative commons license. CC0 1.0 Universal (CC0 "
"1.0) Public Domain Dedication https://creativecommons.org/publicdomain/"
"zero/1.0/"
msgstr ""
"本教程中的鱼模型由“QuaterniusDev<http://quaternius.com>”制作，使用如下知识共"
"享许可。CC0 1.0通用(CC0 1.0)公共领域贡献https://creativecommons.org/"
"publicdomain/zero/1.0/"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:31
msgid ""
"Typically, you would use bones and a :ref:`Skeleton <class_Skeleton>` to "
"animate objects. However, bones are animated on the CPU and so you end "
"having to calculate thousands of operations every frame and it becomes "
"impossible to have thousands of objects. Using vertex animation in a vertex "
"shader, you avoid using bones and can instead calculate the full animation "
"in a few lines of code and completely on the GPU."
msgstr ""
"通常情况下，您将使用单根骨和:参考:`骨骼<类_骨骼>`为对象做动画。然而，单根骨的"
"动画在CPU上进行计算，所以你必须为每一帧计算成千上万的操作，那么就不可能有成千"
"上万的对象。在顶点着色器中使用顶点动画，你就可以避免使用单根骨，而是完全在GPU"
"上，使用几行代码来计算完整的动画。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:37
msgid "The animation will be made of four key motions:"
msgstr "动画由四个关键帧动作组成："

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:39
msgid "A side to side motion"
msgstr "从一边运动到另一边"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:40
msgid "A pivot motion around the center of the fish"
msgstr "绕着鱼的中心作旋转运动"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:41
msgid "A panning wave motion"
msgstr "平移波动运动"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:42
msgid "A panning twist motion"
msgstr "平移扭转运动"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:44
msgid ""
"All the code for the animation will be in the vertex shader with uniforms "
"controlling the amount of motion. We use uniforms to control the strength of "
"the motion so that you can tweak the animation in editor and see the results "
"in real time, without the shader having to recompile."
msgstr ""
"有关动画的所有代码都将在顶点着色器中，并有一致的控制运动量。 我们统一来控制运"
"动的强度，以便您可以在编辑器中调整动画并实时查看结果，而不需要着色器重新编"
"译。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:48
msgid ""
"All the motions will be made using cosine waves applied to ``VERTEX`` in "
"model space. We want the vertices to be in model space so that the motion is "
"always relative to the orientation of the fish. For example, side-to-side "
"will always be move the fish back and forth in its left to right direction, "
"instead of on the ``x`` axis in the world orientation."
msgstr ""
"所有动作都将使用模型空间中应用于``VERTEX``的余弦波进行。 我们希望顶点位于模型"
"空间中，以便运动始终相对于鱼的方向。 例如，从一侧到另一侧将始终在左右方向上来"
"回移动鱼，而不是在世界方向上的``x``轴上。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:53
msgid ""
"In order to control the speed of the animation, we will start by defining "
"our own time variable using ``TIME``."
msgstr "为了控制动画的速度，我们将通过使用“时间”定义自己的时间变量开始。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:60
msgid ""
"The first motion we will implement is the side to side motion. It can be "
"made by offsetting ``VERTEX.x`` by ``cos`` of ``TIME``. Each time the mesh "
"is rendered, all the vertices will move to the side by the amount of "
"``cos(time)``."
msgstr ""
"我们将实施的第一项议案是左右运动。 它可以通过``TIME``的``cos``抵消``VERTEX."
"x``来制作。 每次渲染网格时，所有顶点都会移动到“cos（时间）”的数量。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:69
msgid "The resulting animation should look something like this:"
msgstr "生成的动画看起来是这样的："

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:73
msgid ""
"Next, we add the pivot. Because the fish is centered at (0, 0), all we have "
"to do is multiply ``VERTEX`` by a rotation matrix for it to rotate around "
"the center of the fish."
msgstr ""
"接下来，我们添加轴心点。 因为鱼以（0, 0）为中心，我们所要做的只是将“VERTEX”乘"
"以旋转矩阵，使其围绕鱼的中心旋转。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:76
msgid "We construct a rotation matrix like so:"
msgstr "我们构造一个旋转矩阵, 如下所示:"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:85
msgid ""
"And then we apply it in the ``x`` and ``z`` axes by multiplying it by "
"``VERTEX.xz``."
msgstr "然后我们把它应用到“x”轴和“z”轴上乘以“顶点.xz”。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:91
#, fuzzy
msgid "With only the pivot applied you should see something like this:"
msgstr "如果您选择两个节点，您应该会看到这样的结果"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:95
msgid ""
"The next two motions need to pan down the spine of the fish. For that, we "
"need a new variable, ``body``. ``body`` is a float that is ``0`` at the tail "
"of the fish and ``1`` at its head."
msgstr ""
"接下来的两个动作需要顺着鱼的脊柱向下平移。为此，我们需要一个新的变量，“身"
"体”。“身体”是一个浮点数，在鱼的尾巴上是“0”，在它的头部是“1”。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:102
msgid ""
"The next motion is a cosine wave that moves down the length of the fish. To "
"make it move along the spine of the fish, we offset the input to ``cos`` by "
"the position along the spine, which is the variable we defined above, "
"``body``."
msgstr ""
"下一个运动是沿着鱼的长度向下移动的余弦波。为了让它沿着鱼的脊柱移动，我们用脊"
"柱的位置来偏移输入到“余弦”的位置，也就是我们在上面定义的变量“身体”。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:111
msgid ""
"This looks very similar to the side to side motion we defined above, but in "
"this one, by using ``body`` to offset ``cos`` each vertex along the spine "
"has a different position in the wave making it look like a wave is moving "
"along the fish."
msgstr ""
"这看起来很像我们上面定义的左右运动，但在这个例子中，通过使用“身体”来偏移“余"
"弦”，沿着脊柱的每个顶点在波浪中都有不同的位置，使它看起来像是沿着鱼移动的波"
"浪。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:117
msgid ""
"The last motion is the twist, which is a panning roll along the spine. "
"Similarly to the pivot, we first  construct a rotation matrix."
msgstr ""
"最后一个动作是扭转，也就是沿着脊柱滚动。类似轴心运动，我们首先构造一个旋转矩"
"阵。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:126
msgid ""
"We apply the rotation in the ``xy`` axes so that the fish appears to roll "
"around its spine. For this to work, the fishes spine needs to be centered on "
"the ``z`` axis."
msgstr ""
"我们在“xy”轴上旋转，这样鱼就会绕着它的脊柱滚动。要做到这一点，鱼的脊柱需要"
"以“z”轴为中心。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:133
#, fuzzy
msgid "Here is the fish with twist applied:"
msgstr "这是GDScript示例代码:"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:137
msgid ""
"If we apply all these motions one after another, we get a fluid jelly-like "
"motion."
msgstr "如果我们一个接一个地应用这些运动，就得到一个类似液体凝胶似的运动。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:141
msgid ""
"Normal fish swim mostly with the back half of their body. Accordingly, we "
"need to limit the panning motions to the back half of the fish. To do this, "
"we create a new variable, ``mask``."
msgstr ""
"通常鱼主要使用身体的后半部分游泳。因此，我们需要将平移运动限制在鱼的后半部"
"分。为此，我们创建一个新变量“遮罩”。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:144
msgid ""
"``mask`` is a float that goes from ``0`` at the front of the fish to ``1`` "
"at the end  using ``smoothstep`` to control the point at which the "
"transition from ``0`` to ``1`` happens."
msgstr ""
"“遮罩”是一个浮点数，它使用“平滑步进”控制从“0”到“1”之间发生转换的点，从鱼最前"
"面的“0”到最后的“1”。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:152
msgid "Below is an image of the fish with ``mask`` used as ``COLOR``:"
msgstr "以下是这条鱼的图片，使用“颜色”作为“遮罩”："

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:156
msgid ""
"For the wave, we multiply the motion by ``mask`` which will limit it to the "
"back half."
msgstr "对于波浪，我们将运动乘以“遮罩”，这就把它限制在后半部分。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:163
msgid ""
"In order to apply the mask to the twist, we use ``mix``. ``mix`` allows us "
"to mix the vertex position between a fully rotated vertex and one that is "
"not rotated. We need to use ``mix`` instead of multiplying ``mask`` by the "
"rotated ``VERTEX`` because we are not adding the motion to the ``VERTEX`` we "
"are replacing the ``VERTEX`` with the rotated version. If we multiplied that "
"by ``mask`` we would shrink the fish."
msgstr ""
"为了将遮罩应用于扭曲，我们使用“混合”。“混合”允许我们混合一个完全旋转的顶点和"
"一个没有旋转的顶点之间的顶点位置。我们需要使用“混合”而不是“遮罩”乘以旋转的“顶"
"点”，因为我们没有将运动添加到“顶点”，而是用旋转的版本替换了“顶点”。如果我们把"
"它乘以“遮罩”，鱼就会缩小。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:174
msgid "Putting the four motions together gives us the final animation."
msgstr "将四个动作组合在一起，就得到了最终的动画效果。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:178
msgid ""
"Go ahead and play with the uniforms in order to alter the swim cycle of the "
"fish. You will find that you can create a wide variety of swim styles using "
"these four motions."
msgstr ""
"为了改变鱼的游泳周期，继续统一播放吧。你会发现可以用这四个动作创造出多种多样"
"的游泳风格。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:182
msgid "Making a school of fish"
msgstr "制作一群鱼"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:184
#, fuzzy
msgid ""
"Godot makes it easy to render thousands of the same object using a "
"MultiMeshInstance node."
msgstr "godot 使在属性面板中创建自定义资源变得很容易。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:186
msgid ""
"A MultiMeshInstance node is created and used the same way you would make a "
"MeshInstance node. For this tutorial, we will name the MultiMeshInstance "
"node ``School``, because it will contain a school of fish."
msgstr ""
"创建和使用多重网格实例节点的方法，与创建网格实例节点相同。在本教程中，我们将"
"把多重网格实例节点命名为“鱼群”，因为里面会有一群鱼。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:190
msgid ""
"Once you have a MultiMeshInstance add a :ref:`MultiMesh <class_MultiMesh>`, "
"and to that MultiMesh add your :ref:`Mesh <class_Mesh>` with the shader from "
"above."
msgstr ""
"一旦你有了一个多重网格实例，添加:参考:`多重网格<类_多重网格>`，然后添加:参考:"
"`网格<类_网格>`和上面的着色器。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:193
msgid ""
"MultiMeshes draw your Mesh with three additional per-instance properties: "
"Transform (rotation, translation, scale), Color, and Custom. Custom is used "
"to pass in 4 multi-use variables using a :ref:`Color <class_Color>`."
msgstr ""
"多重网格使用三个额外的实例属性来绘制网格：变换(旋转、平移、缩放)、颜色和自定"
"义。自定义用于使用:参考:`颜色<类_颜色>`传入4个多用途变量。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:197
msgid ""
"``instance_count`` specifies how many instances of the mesh you want to "
"draw. For now, leave ``instance_count`` at ``0`` because you cannot change "
"any of the other parameters while ``instance_count`` is larger than ``0``. "
"We will set ``instance count`` in GDScript later."
msgstr ""
"“实例_数量”指定要绘制的网格的实例数量。现在，将“实例_数量”保留为“0”，因为"
"当“实例_数量”大于“0”时，您不能更改任何其他参数。我们稍后将在GDScript中设置“实"
"例数量”。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:201
msgid ""
"``transform_format`` specifies whether the transforms used are 3D or 2D. For "
"this tutorial, select 3D."
msgstr "“变换_格式”指定使用的变换是3D还是2D。对于本教程，选择3D。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:203
msgid ""
"For both ``color_format`` and ``custom_data_format`` you can choose between "
"``None``, ``Byte``, and ``Float``. ``None`` means you won't be passing in "
"that data (either a per-instance ``COLOR`` variable, or ``INSTANCE_CUSTOM``) "
"to the shader. ``Byte`` means each number making up the color you pass in "
"will be stored with 8 bits while ``Float`` means each number will be stored "
"in a floating point number (32 bits). ``Float`` is slower but more precise, "
"``Byte`` will take less memory and be faster, but you may see some visual "
"artifacts."
msgstr ""
"对于“颜色_格式”和“自定义_数据_格式”，您可以在“无”，“字节”，和“浮点数”之间进行"
"选择，“无”表示您不会传递该数据(可以是每个实例的“颜色”变量，也可以是“实例_自定"
"义”变量)到着色器中。“字节”表示每个组成颜色的数字将被存储为8位，“浮点数”表示每"
"个数字将被存储为一个浮点数(32位)。“浮点数”更慢但更精确，“字节”将占用更少的内"
"存和更快，但您可能会看到一些视觉瑕疵。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:210
msgid "Now, set ``instance_count`` to the number of fish you want to have."
msgstr "现在，将“实例_数量”设置为您想要的鱼的数量。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:212
msgid "Next we need to set the per-instance transforms."
msgstr "接下来，我们需要设置每个实例的变换。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:214
msgid ""
"There are two ways to set per-instance transforms for MultiMeshes. The first "
"is entirely in editor and is described in the :ref:`MultiMeshInstance "
"tutorial <doc_using_multi_mesh_instance>`."
msgstr ""
"有两种方法可以为多个时间轴设置每个实例的变换。第一个完全在编辑器中，在:参考:`"
"多重网格实例教程<文档_使用_多重_网格_实例>`中进行了描述。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:217
msgid ""
"The second is to loop over all the instances and set their transforms in "
"code. Below, we use GDScript to loop over all the instances and set their "
"transform to a random position."
msgstr ""
"第二种方法是，遍历所有实例，并在代码中设置它们的变换。下面，我们使用GDScript"
"遍历所有实例，并将它们的变换设置为随机位置。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:227
msgid ""
"Running this script will place the fish in random positions in a box around "
"the position of the MultiMeshInstance."
msgstr "运行此脚本，会在多重网格实例位置周围的框中随机放置鱼。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:230
msgid ""
"If performance is an issue for you, try running the scene with GLES2 or with "
"fewer fish."
msgstr "如果你关注性能问题，试着使用GLES2运行场景或摆放更少的鱼。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:232
msgid ""
"Notice how all the fish  are all in the same position in their swim cycle? "
"It makes them look very robotic. The next step is to give each fish a "
"different position in the swim cycle so the entire school looks more organic."
msgstr ""
"你注意到所有的鱼在它们的游泳周期中都处于相同的位置吗？这让他们看起来很机械刻"
"板。下一步是让每条鱼在游泳周期中处于不同的位置，这样整个鱼群看起来就更加生动"
"自然了。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:237
#, fuzzy
msgid "Animating a school of fish"
msgstr "动画控件"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:239
msgid ""
"One of the benefits of animating the fish using ``cos`` functions is that "
"they are animated with one parameter, ``time``. In order to give each fish a "
"unique position in the swim cycle, we only need to offset ``time``."
msgstr ""
"使用“余弦”函数给鱼动画的一个好处是，它们只需要一个参数，“时间”。为了让每条鱼"
"在游泳周期中处于单独的位置，我们只需要偏移“时间”。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:243
msgid ""
"We do that by adding the per-instance custom value ``INSTANCE_CUSTOM`` to "
"``time``."
msgstr "为此，我们将每个实例的自定义值“实例_自定义”添加到“时间”中。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:249
msgid ""
"Next, we need to pass a value into ``INSTANCE_CUSTOM``. We do that by adding "
"one line into the ``for`` loop from above. In the ``for`` loop we assign "
"each instance a set of four random floats to use."
msgstr ""
"接下来，我们需要向“实例_自定义”传递一个值。通过在上面的“for”循环中添加一行来"
"实现这一点。在“for”循环中，为每个实例分配一组四个随机浮点数来使用。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:257
msgid ""
"Now the fish all have unique positions in the swim cycle. You can give them "
"a little more individuality by using ``INSTANCE_CUSTOM`` to make them swim "
"faster or slower by multiplying by ``TIME``."
msgstr ""
"现在这些鱼在游泳周期中都有独特的位置。你可以通过使用“实例_自定义”乘以“时间”让"
"它们游泳更快或更慢，从而让它们更个性化。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:266
msgid ""
"You can even experiment with changing the per-instance color the same way "
"you changed the per-instance custom value."
msgstr "甚至您还可以像更改每个实例的自定义值一样，尝试更改每个实例的颜色。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:269
msgid ""
"One problem that you will run into at this point is that the fish are "
"animated, but they are not moving. You can move them by updating the per-"
"instance transform for each fish every frame. Although doing so will be "
"faster then moving thousands of MeshInstances per frame, it is still likely "
"to be slow."
msgstr ""
"您会遇到一个问题，鱼虽然是有动画的，但它们并没有移动。您可以通过更新每帧鱼的"
"每个实例转换来移动它们。尽管这样做比每帧移动数千个网格实例要快，它仍然可能是"
"缓慢的。"

#: ../../docs/tutorials/3d/vertex_animation/animating_thousands_of_fish.rst:274
msgid ""
"In the next tutorial we will cover how to use :ref:`Particles "
"<class_Particles>` to take advantage of the GPU and move each fish around "
"individually while still receiving the benefits of instancing."
msgstr ""
"下一个教程，我们将介绍如何使用:参考:`粒子<类_粒子>`来利用GPU，分别移动每条"
"鱼，同时还能获得实例化的好处。"
