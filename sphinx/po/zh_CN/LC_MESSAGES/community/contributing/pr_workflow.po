# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-27 12:19+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/community/contributing/pr_workflow.rst:4
msgid "Pull request workflow"
msgstr "拉取请求(PR)工作流程"

#: ../../docs/community/contributing/pr_workflow.rst:8
msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""
"Godot使用的所谓 ``PR工作流程`` 对于许多使用Git的项目来说都很常见，并且对于资"
"深自由软件贡献者应该很熟悉。这个想法是只有少数(如果有的话)直接提交给 "
"*master* 分支。相反，贡献者 *fork* 项目(即创建它的副本，他们可以按照自己的意"
"愿修改)，然后使用GitHub接口从其fork的一个分支请求 *pull* 到原始(通常命名为 "
"*upstream* )存储库的一个分支。"

#: ../../docs/community/contributing/pr_workflow.rst:16
msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""
"然后，生成的 *拉取请求* (PR)可以由其他贡献者审查，可能批准它、拒绝它、或者最"
"常要求修改它。一旦获得批准，PR就可以由其中一个核心开发人员合并，其提交将成为"
"目标分支(通常是 *master* 分支)的一部分。"

#: ../../docs/community/contributing/pr_workflow.rst:22
#, fuzzy
msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organization of Godot's Git repository."
msgstr ""
"我们将一起通过一个示例展示典型的工作流程和相关的Git命令。但首先，让我们快速了"
"解Godot的Git存储库的组织结构。"

#: ../../docs/community/contributing/pr_workflow.rst:27
msgid "Git source repository"
msgstr "Git源存储库"

#: ../../docs/community/contributing/pr_workflow.rst:29
msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""
"GitHub上的 `存储库 <https://github.com/godotengine/godot>`_ 是一个 `Git "
"<https://git-scm.com>`_ 代码存储库以及一个嵌入式问题跟踪器和PR系统。"

#: ../../docs/community/contributing/pr_workflow.rst:33
msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"如果您正在为文档做贡献，可以在 `这里 <https://github.com/godotengine/godot-"
"docs>`_ 找到它的存储库。"

#: ../../docs/community/contributing/pr_workflow.rst:36
msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""
"Git版本控制系统是用于跟踪源代码的连续编辑的工具——为了高效地为Godot做贡献，*强"
"烈* 建议学习Git命令行的基础知识。Git有一些图形界面，但是它们通常会鼓励用户养"
"成关于Git和PR工作流程的不良习惯，因此我们建议不要使用它们。特别是，我们建议不"
"要使用GitHub的在线编辑器进行代码贡献(尽管可以进行较小的修复或文档更改)，因为"
"它会对每个文件和每个修改强制执行一次提交，因此很快导致PR的Git历史记录不可读"
"(尤其是在同行评审之后)。"

#: ../../docs/community/contributing/pr_workflow.rst:46
msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website."
msgstr ""
"Git的“书”的第一部分很好地介绍了该工具的原理以及您在日常工作流程中需要掌握的各"
"种命令。您可以在 `Git SCM <https://git-scm.com/book/en/v2>`_ 网站上在线阅读它"
"们。"

#: ../../docs/community/contributing/pr_workflow.rst:51
msgid "The branches on the Git repository are organized as follows:"
msgstr "Git存储库上的分支被组织如下："

#: ../../docs/community/contributing/pr_workflow.rst:53
msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""
"``master`` 分支是开发下一个主要版本的地方。作为开发分支，它可能不稳定，不适合"
"用于生产。这是应该优先进行PR的地方。"

#: ../../docs/community/contributing/pr_workflow.rst:57
#, fuzzy
msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next major "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, you will "
"have to check if your changes are also relevant for the ``master`` branch."
msgstr ""
"稳定的分支以它们的版本命名，例如 ``3.0`` 和 ``2.1`` 。它们(例如3.0.2或2.1.5)"
"用于将错误修复和增强功能从 ``master`` 分支移植到当前维护的稳定版本。根据经"
"验，将保留最后一个稳定分支直到下一个主要版本(例如，将保留 ``2.0`` 分支直到"
"Godot 2.1发行)。如果要对维护的稳定分支进行PR，则必须检查您的更改是否也与 "
"``master`` 分支相关。"

#: ../../docs/community/contributing/pr_workflow.rst:65
msgid ""
"There might be feature branches at time, usually meant to be merged into the "
"``master`` branch at some time."
msgstr "有时可能会有功能分支，通常意味着在某个时候合并到 ``master`` 分支。"

#: ../../docs/community/contributing/pr_workflow.rst:69
msgid "Forking and cloning"
msgstr "分叉和克隆"

#: ../../docs/community/contributing/pr_workflow.rst:71
msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""
"第一步是在GitHub上 *分叉* `godotengine/godot <https://github.com/godotengine/"
"godot>`_ 库。 为此，您需要拥有一个GitHub帐户并登录。在存储库的GitHub页面的右"
"上角，您应该看到如下所示的 ``Fork`` 按钮："

#: ../../docs/community/contributing/pr_workflow.rst:78
msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""
"点击它，一段时间后，您应该被重定向到您自己的Godot存储库分叉，并将GitHub用户名"
"作为名称空间："

#: ../../docs/community/contributing/pr_workflow.rst:83
msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""
"然后您可以 *克隆* 您的分叉，即创建在线存储库的本地副本(在Git中叫做 *origin "
"remote*)。如果您还没有，若您使用的是Windows或macOS，请从 `其网站 <https://"
"git-scm.com>`_ 下载Git；若您使用的是Linux，请通过您的软件包管理器安装它。"

#: ../../docs/community/contributing/pr_workflow.rst:88
msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""
"如果您使用的是Windows，请打开Git Bash键入命令。macOS和Linux用户可以使用各自的"
"终端。"

#: ../../docs/community/contributing/pr_workflow.rst:91
msgid "To clone your fork from GitHub, use the following command:"
msgstr "要从GitHub克隆您的fork，请使用以下命令："

#: ../../docs/community/contributing/pr_workflow.rst:97
msgid ""
"In our examples, the \"$\" character denotes the command line prompt on "
"typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""
"在我们的示例中，``$`` 字符表示典型UNIX shell上的命令行提示符。 它不是命令的一"
"部分，不应该键入。"

#: ../../docs/community/contributing/pr_workflow.rst:101
msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""
"稍后，您应该在当前工作目录中有一个 ``godot`` 目录。 使用 ``cd`` 命令进入它："

#: ../../docs/community/contributing/pr_workflow.rst:108
msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr "我们将从建立对我们分叉的原始存储库的引用开始："

#: ../../docs/community/contributing/pr_workflow.rst:115
msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"godotengine/godot repository. This will be useful when you want to pull new "
"commits from its ``master`` branch to update your fork. You have another "
"``remote`` reference named ``origin``, which points to your fork."
msgstr ""
"这将创建一个名为 ``upstream`` 的引用，指向原始的godotengine/godot存储库。当您"
"想从它的 ``master`` 分支中提取新的提交来更新您的fork时，这将非常有用。您有另"
"一个名为 ``origin`` 的 ``remote`` 引用，它指向您的fork。"

#: ../../docs/community/contributing/pr_workflow.rst:120
msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""
"您只需要做一次上面的步骤，只要您保留本地的 ``godot`` 文件夹(您可以随意移动"
"它，相关的元数据隐藏在它的 ``.git`` 子文件夹中)。"

#: ../../docs/community/contributing/pr_workflow.rst:124
msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr "*分支、拉取、编码、暂存、提交、推送、重新设置基线……技术。*"

#: ../../docs/community/contributing/pr_workflow.rst:127
msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""
"这对Daft Punk的 *技术* 的不良看法显示了Git初学者对其工作流程的一般概念：许多"
"奇怪的命令可以通过复制和粘贴来学习，希望它们能按预期运行。这实际上并不是一种"
"糟糕的学习方式，只要您好奇并且在迷失时毫不犹豫地询问您的搜索引擎，因此，我们"
"将为您提供在Git中工作时要了解的基本命令。"

#: ../../docs/community/contributing/pr_workflow.rst:135
msgid ""
"In the following, we will assume that you want to implement a feature in "
"Godot's project manager, which is coded in the ``editor/project_manager."
"cpp`` file."
msgstr ""
"在下文中，我们假设您要在Godot的项目管理器中实现一个功能，该功能已在 ``editor/"
"project_manager.cpp`` 文件中编码。"

#: ../../docs/community/contributing/pr_workflow.rst:140
msgid "Branching"
msgstr "分支"

#: ../../docs/community/contributing/pr_workflow.rst:142
msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""
"默认情况下，``git clone`` 应该让您进入fork(``origin``)的 ``master`` 分支。要"
"开始自己的功能开发，我们将创建一个功能分支："

#: ../../docs/community/contributing/pr_workflow.rst:154
msgid "This command is equivalent:"
msgstr "此命令是等效的："

#: ../../docs/community/contributing/pr_workflow.rst:161
msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr "如果您想回到 ``master`` 分支，您会使用："

#: ../../docs/community/contributing/pr_workflow.rst:167
msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr "您可以使用 ``git branch`` 命令查看当前使用的分支："

#: ../../docs/community/contributing/pr_workflow.rst:178
msgid "Updating your branch"
msgstr "更新您的分支"

#: ../../docs/community/contributing/pr_workflow.rst:180
msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""
"第一次(在您分叉上游存储库之后)不需要这样做。 但是，下次您想要处理某些事情时，"
"您会注意到您的fork的 ``master`` 落后于上游 ``master`` 分支几个提交：其他贡献"
"者的拉取请求同时被合并。"

#: ../../docs/community/contributing/pr_workflow.rst:186
msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""
"为了确保您开发的功能与当前的上游 ``master`` 分支之间不会发生冲突，您将不得不"
"通过 *拉* 上游分支来更新您的分支。"

#: ../../docs/community/contributing/pr_workflow.rst:194
#, fuzzy
msgid ""
"However, if you had local commits, this method will create a so-called "
"\"merge commit\", and you will soon hear from fellow contributors that those "
"are not wanted in PRs. To update the branch without creating a merge commit, "
"you will have to use the ``--rebase`` option, so that your local commits are "
"replayed on top of the updated upstream ``master`` branch. It will "
"effectively modify the Git history of your branch, but that is for the "
"greater good."
msgstr ""
"但是，如果您有本地提交，则此方法将创建一个所谓的“合并提交”，并且您很快就会从"
"其他贡献者那里得知，PR中不需要这些提交。那么如何在不创建合并提交的情况下更新"
"分支？您将必须使用 ``--rebase`` 选项，以便在更新的上游master分支顶部重放本地"
"提交。它将有效地修改分支的Git历史记录，但这将更有利。"

#: ../../docs/community/contributing/pr_workflow.rst:201
msgid "Therefore, the command that you should (almost) always use is:"
msgstr "因此，您应该(几乎)始终使用的命令是："

#: ../../docs/community/contributing/pr_workflow.rst:208
msgid ""
"If you have already pushed the merge commit without using ``rebase``, or "
"have made any other changes that have resulted in undesired history, you may "
"use a hard reset to revert to a specific commit and try again:"
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:216
msgid ""
"Once you have done this, you may run ``--rebase`` to merge master correctly."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:218
msgid ""
"If you have already pushed the wrong commits to your remote branch, you will "
"have to force push by using ``git push --force``."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:221
msgid ""
"``git reset --hard`` can be a dangerous operation, especially if you have "
"untracked or uncommitted changes. However, if you have committed changes "
"that you reset using ``git reset --hard``, you may still be able to recover "
"them by resetting to a commit ID found with the ``git reflog`` command."
msgstr ""

#: ../../docs/community/contributing/pr_workflow.rst:228
msgid "Making changes"
msgstr "做出变更"

#: ../../docs/community/contributing/pr_workflow.rst:230
msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""
"然后，您将使用常用的开发环境(文本编辑器，IDE等)对我们的示例的 ``editor/"
"project_manager.cpp`` 文件进行更改。"

#: ../../docs/community/contributing/pr_workflow.rst:234
msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""
"默认情况下，这些更改是 *未暂存的(unstaged)*。暂存区域是您的工作目录(您进行修"
"改的位置)和本地git存储库(``.git`` 文件夹中的提交和所有元数据)之间的一个层。要"
"将工作目录中的更改带到Git存储库，您需要使用 ``git add`` 命令对它们进行 *暂存"
"(stage)*，然后使用 ``git commit`` 命令提交它们。"

#: ../../docs/community/contributing/pr_workflow.rst:241
msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr "在暂存之前，暂存后和提交之后，您应该了解各种命令来查看当前工作。"

#: ../../docs/community/contributing/pr_workflow.rst:244
msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr "``git diff`` 将显示当前未暂存的更改，即工作目录和暂存区域之间的差异。"

#: ../../docs/community/contributing/pr_workflow.rst:246
msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr "``git checkout -- <files>`` 将撤消给定文件的未暂存更改。"

#: ../../docs/community/contributing/pr_workflow.rst:248
msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr "``git add <files>`` 将 *暂存* 列出的文件的更改。"

#: ../../docs/community/contributing/pr_workflow.rst:249
msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""
"``git diff --staged`` 将显示当前的暂存的更改，即暂存区域和上次提交之间的差"
"异。"

#: ../../docs/community/contributing/pr_workflow.rst:251
msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr "``git reset HEAD <files>`` 将 *取消暂存* 列出的文件的更改。"

#: ../../docs/community/contributing/pr_workflow.rst:252
msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr "``git status`` 将显示当前暂存和未暂存的修改。"

#: ../../docs/community/contributing/pr_workflow.rst:254
msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""
"``git commit`` 将提交暂存文件。它将打开一个文本编辑器(您可以使用 "
"``GIT_EDITOR`` 环境变量或Git配置中的 ``core.editor`` 设置来定义要使用的编辑"
"器)，以便您编写提交日志。您可以使用 ``git commit -m \"Cool commit log\"`` 直"
"接写日志。"

#: ../../docs/community/contributing/pr_workflow.rst:259
msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""
"``git log`` 将显示当前分支的最后提交。 如果您做了本地提交，它们应该显示在顶"
"部。"

#: ../../docs/community/contributing/pr_workflow.rst:261
msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""
"``git show`` 将显示上次提交的更改。您还可以指定提交哈希以查看该提交的更改。"

#: ../../docs/community/contributing/pr_workflow.rst:264
msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""
"要记住的东西太多了！不用担心，当您需要进行更改时，只需检查一下备忘单，然后边"
"做边学即可。"

#: ../../docs/community/contributing/pr_workflow.rst:267
msgid "Here's how the shell history could look like on our example:"
msgstr "以下是我们的示例中shell历史记录的样子："

#: ../../docs/community/contributing/pr_workflow.rst:299
msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""
"有了这个，我们应该在 ``better-project-manager`` 分支中有两个新的提交，这些提"
"交不在 ``master`` 分支中。它们仍然只是本地的，远程分支不知道它们，上游存储库"
"也不知道。"

#: ../../docs/community/contributing/pr_workflow.rst:304
msgid "Pushing changes to a remote"
msgstr "将更改推送到远程"

#: ../../docs/community/contributing/pr_workflow.rst:306
msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""
"这就是 ``git push`` 将发挥作用的地方。在Git中，提交总是在本地存储库中完成(与"
"Subversion不同，其提交将直接修改远程存储库)。您需要 *推送* 新提交到远程分支以"
"与世界共享它们。这个语法是："

#: ../../docs/community/contributing/pr_workflow.rst:315
msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""
"如果您希望远程分支与本地分支具有相同的名称，则可以省略有关远程分支的部分，在"
"本示例中就是这种情况，因此我们将执行以下操作："

#: ../../docs/community/contributing/pr_workflow.rst:323
msgid ""
"Git will ask you for your username and password, and the changes will be "
"sent to your remote. If you check the fork's page on GitHub, you should see "
"a new branch with your added commits."
msgstr ""
"Git会要求您提供用户名和密码，更改将发送到您的远程分支。如果您在GitHub上查看"
"fork的页面，则应该看到一个带有已添加提交的新分支。"

#: ../../docs/community/contributing/pr_workflow.rst:328
msgid "Issuing a pull request"
msgstr "发出拉取请求"

#: ../../docs/community/contributing/pr_workflow.rst:330
msgid ""
"When you load your fork's branch on GitHub, you should see a line saying *"
"\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch."
msgstr ""
"当您在GitHub上加载fork的分支时，您应该看到一行说 *“此分支比godotengine:master"
"提前2个提交。”* 如果您的 ``master`` 分支与上游 ``master`` 分支不同步，则可能"
"会有一些提交。"

#: ../../docs/community/contributing/pr_workflow.rst:337
msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the godotengine/godot upstream "
"repository. It should show you your two commits, and state \"Able to merge"
"\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR, something went wrong. Go to IRC and ask for "
"support :)"
msgstr ""
"在那一行，有一个 ``拉取请求`` 链接。点击它将打开一个表单，该表单使您可以在"
"godotengine/godot上游存储库上发出拉取请求。它应该显示您的两个提交，并声明 ``"
"能够合并``。 如果没有(例如，它有更多的提交，或说有合并冲突)，不要创建PR，出错"
"了。去IRC并寻求支持：)"

#: ../../docs/community/contributing/pr_workflow.rst:343
msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""
"为PR使用明确的标题，并将必要的详细信息放在注释区域。您可以拖放屏幕截图，GIF或"
"压缩的项目(如果相关)，以展示您的工作实现的内容。点击“创建拉取请求”，没错！"

#: ../../docs/community/contributing/pr_workflow.rst:349
msgid "Modifying a pull request"
msgstr "修改拉取请求"

#: ../../docs/community/contributing/pr_workflow.rst:351
msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""
"虽然它是由其他贡献者审核的，但您经常需要对尚未合并的PR进行更改，或者是因为贡"
"献者要求他们，或者是因为您在测试时发现了自己的问题。"

#: ../../docs/community/contributing/pr_workflow.rst:355
msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""
"好消息是您可以简单地通过对您发出拉取请求的分支进行操作来修改拉取请求。 您可"
"以，例如在该分支上进行新的提交，将其推送到您的分支，PR将自动更新："

#: ../../docs/community/contributing/pr_workflow.rst:370
msgid "That should do the trick, but..."
msgstr "这应该是诀窍，但……"

#: ../../docs/community/contributing/pr_workflow.rst:373
msgid "Mastering the PR workflow: the rebase"
msgstr "掌握PR工作流程：重新设置基线"

#: ../../docs/community/contributing/pr_workflow.rst:375
msgid ""
"On the situation outlined above, your fellow contributors who are "
"particularly pedantic regarding the Git history might ask your to *rebase* "
"your branch to *squash* or *meld* the last two commits together (i.e. the "
"two related to the project manager), as the second commit basically fixes an "
"issue in the first one."
msgstr ""
"在上面提到的情况下，您的对于Git历史特别迂腐的贡献者，可能会要求您 *重新设置基"
"线* 您的分支来 *压缩* 或者 *合并* 最后两个提交到一起(即两个与这个项目 "
"``manager`` 有关)， 因为第二个提交基本上解决了第一个提交的问题。"

#: ../../docs/community/contributing/pr_workflow.rst:380
msgid ""
"Once the PR is merged, it is not relevant for a changelog reader that the PR "
"author made mistakes; instead, we want to keep only commits that bring from "
"one working state to another working state."
msgstr ""
"PR合并后，将与变更日志读者即PR编写者无关将让人误解。相反，我们只想保留从一个"
"工作状态进入另一工作状态的提交。"

#: ../../docs/community/contributing/pr_workflow.rst:384
msgid ""
"To squash those two commits together, we will have to *rewrite history*. "
"Right, we have that power. You may read that it's a bad practice, and it's "
"true when it comes to branches of the upstream repo. But in your fork, you "
"can do whatever you want, and everything is allowed to get neat PRs :)"
msgstr ""
"要将这两个提交压缩在一起，我们将不得不 *重写历史记录* 。对，我们有这种能力。"
"您可能会了解到这是一个不好的做法，确实，当涉及到上游存储库的分支时。但是在您"
"的分叉中，您可以做任何您想做的事情，并且一切都被允许以获得整洁的PR :)"

#: ../../docs/community/contributing/pr_workflow.rst:389
msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit hash as argument, and will let you modify all commits "
"between that commit hash and the last one of the branch, the so-called "
"*HEAD*. In our example, we want to act on the last two commits, so we will "
"do:"
msgstr ""
"我们将使用 *交互式重新设置基线* ``git rebase -i`` 来执行此操作。此命令将使用"
"提交哈希作为参数，并允许您修改该提交哈希与分支的最后一个提交之间的所有提交，"
"即所谓的 *HEAD*。在我们的示例中，我们希望对最后两次提交采取行动，因此我们将执"
"行以下操作："

#: ../../docs/community/contributing/pr_workflow.rst:400
msgid "This will open a text editor with:"
msgstr "这将打开一个文本编辑器："

#: ../../docs/community/contributing/pr_workflow.rst:407
msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""
"编辑器还将显示有关如何对这些提交采取行动的说明。特别是，它应该告诉您 "
"``pick`` 意味着使用该提交(什么都不做)，并且 ``squash`` 和 ``fixup`` 可以用于"
"在其父提交中 *合并* 提交。``squash`` 和 ``fixup`` 之间的区别在于 ``fixup`` 会"
"从压缩的提交中丢弃提交日志。在我们的示例中，我们对保持 ``修复错字`` 提交的日"
"志不感兴趣，因此我们使用："

#: ../../docs/community/contributing/pr_workflow.rst:420
msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""
"保存并退出编辑器后，将发生重新设置基线。第二个提交将被合并到第一个提交中，并"
"且 ``git log`` 和 ``git show`` 现在应该确认您只有一个具有先前两个提交的更改的"
"提交。"

#: ../../docs/community/contributing/pr_workflow.rst:425
msgid ""
"You could have avoided this rebase by using ``git commit --amend`` when "
"fixing the typo. This command will write the staged changes directly into "
"the *last* commit (``HEAD``), instead of creating a new commit like we did "
"in this example. So it is equivalent to what we did with a new commit and "
"then a rebase to mark it as \"fixup\"."
msgstr ""
"您可以在修复拼写错误时使用 ``git commit --amend`` 来避免这种重新设置基线。此"
"命令将暂存更改直接写入 *最后的* 提交(``HEAD``)，而不是像我们在此示例中那样创"
"建新提交。因此，这等效于我们对新提交进行的操作，然后进行了重新设置基线以将其"
"标记为 ``fixup``。"

#: ../../docs/community/contributing/pr_workflow.rst:431
msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""
"但！你改写了历史，现在你的本地和远程分支有分歧。实际上，以上示例中的提交"
"1b4aad7将已更改，因此获得了新的提交哈希。如果您尝试推送到远程分支，将引发错"
"误："

#: ../../docs/community/contributing/pr_workflow.rst:445
#, fuzzy
msgid ""
"This is a sane behavior, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""
"这是一种理智的行为，Git不允许您推送将覆盖远程内容的更改。 但这实际上是我们要"
"在此处执行的操作，因此我们将不得不 *强制* 执行此操作："

#: ../../docs/community/contributing/pr_workflow.rst:453
msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""
"还有没错！ Git很乐意用您在本地拥有的东西 *替换* 您的远程分支(所以使用 ``git "
"log`` 确保您想要的东西)。这也将相应地更新PR。"

#: ../../docs/community/contributing/pr_workflow.rst:458
msgid "Deleting a Git branch"
msgstr "删除Git分支"

#: ../../docs/community/contributing/pr_workflow.rst:460
msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""
"在您的提交请求合并之后，您应该做的最后一件事是：删除用于PR的Git分支。如果不删"
"除分支不会有问题，但是这样做是一个好习惯。您将需要执行两次，一次是对本地分"
"支，另一次是对GitHub上的远程分支。"

#: ../../docs/community/contributing/pr_workflow.rst:465
msgid "To delete our better project manager branch locally, use this command:"
msgstr "要在本地删除 ``better project manager`` 分支，请使用以下命令："

#: ../../docs/community/contributing/pr_workflow.rst:471
msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""
"或者，如果分支尚未合并，我们想要删除它，不是使用 ``-d``，而是使用 ``-D``。"

#: ../../docs/community/contributing/pr_workflow.rst:474
msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr "接下来，要删除GitHub上的远程分支，请使用以下命令："
