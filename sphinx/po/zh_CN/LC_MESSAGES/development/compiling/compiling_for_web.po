# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-30 19:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/compiling/compiling_for_web.rst:4
msgid "Compiling for the Web"
msgstr "为Web平台编译"

#: ../../docs/development/compiling/compiling_for_web.rst:9
msgid "Requirements"
msgstr "需求"

#: ../../docs/development/compiling/compiling_for_web.rst:11
msgid "To compile export templates for the Web, the following is required:"
msgstr "要编译Web的导出模板，需要以下内容："

#: ../../docs/development/compiling/compiling_for_web.rst:13
msgid "`Emscripten 1.39.0+ <https://emscripten.org>`__."
msgstr ""

#: ../../docs/development/compiling/compiling_for_web.rst:14
#, fuzzy
msgid "`Python 3.5+ <https://www.python.org/>`__."
msgstr "`Python 2.7+ 或 Python 3.5+ <https://www.python.org/>`__"

#: ../../docs/development/compiling/compiling_for_web.rst:15
#, fuzzy
msgid "`SCons 3.0+ <https://www.scons.org>`__ build system."
msgstr "`SCons <https://www.scons.org>`__ 构建系统"

#: ../../docs/development/compiling/compiling_for_web.rst:17
msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"有关Godot的SCons用法的一般概述，请参阅 :ref:"
"`doc_introduction_to_the_buildsystem`。"

#: ../../docs/development/compiling/compiling_for_web.rst:21
msgid "Building export templates"
msgstr "构建导出模板"

#: ../../docs/development/compiling/compiling_for_web.rst:23
msgid ""
"Before starting, confirm that the Emscripten configuration file exists and "
"specifies all settings correctly. This file is available as ``~/."
"emscripten`` on UNIX-like systems and ``%USERPROFILE%\\.emscripten`` on "
"Windows. It's usually written by the Emscripten SDK, e.g. when invoking "
"``emsdk activate latest``, or by your package manager. It's also created "
"when starting Emscripten's ``emcc`` program if the file doesn't exist."
msgstr ""
"在开始之前，请确认Emscripten配置文件存在并正确指定所有设置。这个文件在类UNIX"
"系统上为 ``~/.emscripten``，在Windows上为 ``%USERPROFILE%\\.emscripten`` 。它"
"通常由Emscripten SDK编写，例如当调用 ``emsdk activate latest`` 时，或者由您的"
"包管理器调用。如果文件不存在，它也会在启动Emscripten的 ``emcc`` 程序时创建。"

#: ../../docs/development/compiling/compiling_for_web.rst:30
msgid ""
"On Windows, make sure to escape backslashes of paths within the Emscripten "
"configuration file as double backslashes ``\\\\`` or use Unix-style paths "
"with a single forward slash ``/``."
msgstr ""
"在Windows平台上，确保将Emscripten配置文件中的路径反斜杠，转义为双反斜杠 ``\\"
"\\``，或者使用带有单个正斜杠 ``/`` 的Unix式的路径。"

#: ../../docs/development/compiling/compiling_for_web.rst:34
msgid ""
"Open a terminal and navigate to the root directory of the engine source "
"code. Then instruct SCons to build the JavaScript platform. Specify "
"``target`` as either ``release`` for a release build or ``release_debug`` "
"for a debug build::"
msgstr ""
"打开终端并导航到引擎源代码的根目录。然后指示SCons构建JavaScript平台。为发布版"
"本将 ``target`` 指定 ``release``，或为调试版本将 ``target`` 指定 "
"``release_debug``："

#: ../../docs/development/compiling/compiling_for_web.rst:41
msgid ""
"By default, the :ref:`JavaScript singleton <doc_javascript_eval>` will be "
"built into the engine. Since ``eval()`` calls can be a security concern, the "
"``javascript_eval`` option can be used to build without the singleton::"
msgstr ""
"默认情况下，将生成 :ref:`JavaScript 单例 <doc_javascript_eval>` 到引擎。由于 "
"``eval()`` 调用可能是一个安全问题，``javascript_eval`` 选项可用于构建而不需要"
"单例："

#: ../../docs/development/compiling/compiling_for_web.rst:48
msgid ""
"The engine will now be compiled to WebAssembly by Emscripten. Once finished, "
"the resulting file will be placed in the ``bin`` subdirectory. Its name is "
"``godot.javascript.opt.zip`` for release or ``godot.javascript.opt.debug."
"zip`` for debug."
msgstr ""
"现在，引擎将由Emscripten编译为WebAssembly。完成后，生成的文件将放在 ``bin`` "
"子目录中。针对发布版本的名字是 ``godot.javascript.opt.zip``，或针对调试版本的"
"是 ``godot.javascript.opt.debug.zip``。"

#: ../../docs/development/compiling/compiling_for_web.rst:53
msgid ""
"Finally, rename the zip archive to ``webassembly_release.zip`` for the "
"release template::"
msgstr ""
"最后，将zip存档重命名为 ``webassembly_release.zip`` 以获取发布版本的模板："

#: ../../docs/development/compiling/compiling_for_web.rst:58
msgid "And ``webassembly_debug.zip`` for the debug template::"
msgstr "调试模板的 ``webassembly_debug.zip``："

#: ../../docs/development/compiling/compiling_for_web.rst:63
msgid "Building per asm.js translation or LLVM backend"
msgstr "构建每个asm.js转换或LLVM后端"

#: ../../docs/development/compiling/compiling_for_web.rst:65
msgid ""
"WebAssembly can be compiled in two ways: The default is to first compile to "
"asm.js, a highly optimizable subset of JavaScript, using Emscripten's "
"*fastcomp* fork of LLVM. This code is then translated to WebAssembly using a "
"tool called ``asm2wasm``. Emscripten automatically takes care of both "
"processes, we simply run SCons."
msgstr ""
"WebAssembly可以用两种方式编译：默认是首先使用Emscripten的 *fastcomp* LLVM分支"
"编译为asm.js，这是一个高度可优化的JavaScript子集。然后使用名为 ``asm2wasm`` "
"的工具将此代码转换为WebAssembly。Emscripten会自动处理这两个进程，我们只需运行"
"SCons。"

#: ../../docs/development/compiling/compiling_for_web.rst:71
msgid ""
"The other method uses LLVM's WebAssembly backend. This backend is available "
"starting with LLVM 8 or in development builds. Emscripten manages this "
"process as well, so we just invoke SCons."
msgstr ""
"另一种方法是使用LLVM的WebAssembly后端。此后端可从LLVM 8开始或在开发版本中使"
"用。Emscripten也管理此过程，因此我们仅调用SCons。"

#: ../../docs/development/compiling/compiling_for_web.rst:75
msgid ""
"In order to choose one of the two methods, the ``LLVM_ROOT`` variable in the "
"Emscripten configuration file is used. If it points to a directory "
"containing binaries of Emscripten's *fastcomp* fork of clang, ``asm2wasm`` "
"is used. This is the default in a normal Emscripten installation. Otherwise, "
"LLVM binaries built with the WebAssembly backend will be expected and the "
"LLVM's WebAssembly backend is used."
msgstr ""
"为了选择两种方法中的一种，使用Emscripten配置文件中的 ``LLVM_ROOT`` 变量。如果"
"它指向包含Emscripten的 *fastcomp* 分叉的clang的二进制文件的目录，则使用 "
"``asm2wasm``。这是常规Emscripten安装中的默认设置。否则，将使用WebAssembly后端"
"构建的LLVM二进制文件，并使用LLVM的WebAssembly后端。"
