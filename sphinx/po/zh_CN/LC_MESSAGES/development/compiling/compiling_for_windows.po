# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-27 08:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/compiling/compiling_for_windows.rst:4
msgid "Compiling for Windows"
msgstr "为Windows平台编译"

#: ../../docs/development/compiling/compiling_for_windows.rst:9
msgid "Requirements"
msgstr "需求"

#: ../../docs/development/compiling/compiling_for_windows.rst:11
msgid "For compiling under Windows, the following is required:"
msgstr "要在Windows下进行编译，需要以下内容："

#: ../../docs/development/compiling/compiling_for_windows.rst:13
#, fuzzy
msgid ""
"`Visual Studio Community <https://www.visualstudio.com/vs/community/>`_, "
"version 2015 (14.0) or later. VS 2019 is recommended. **Make sure to read "
"\"Installing Visual Studio caveats\" below or you will have to run/download "
"the installer again.**"
msgstr ""
"`Visual Studio社区版 <https://www.visualstudio.com/vs/community/>`_，版本"
"2015 （14.0） 或更高版本。**请务必阅读下面的“安装Visual Studio注意事项”，否则"
"您将不得不再次运行/下载安装程序。**"

#: ../../docs/development/compiling/compiling_for_windows.rst:17
#, fuzzy
msgid ""
"MinGW-w64 with GCC can be used as an alternative to Visual Studio. Be sure "
"to install/configure it to use the ``posix`` thread model."
msgstr "MinGW-w64可以替代Visual Studio。"

#: ../../docs/development/compiling/compiling_for_windows.rst:19
msgid ""
"`Python 3.5+ (recommended) or Python 2.7+. <https://www.python.org/downloads/"
"windows/>`_"
msgstr ""
"`Python 3.5+ （推荐） 或 Python 2.7+ <https://www.python.org/downloads/"
"windows/>`_"

#: ../../docs/development/compiling/compiling_for_windows.rst:20
msgid ""
"`SCons <https://www.scons.org>`_ build system. If using Visual Studio 2019, "
"you *must* have SCons 3.1.1 or later."
msgstr ""

#: ../../docs/development/compiling/compiling_for_windows.rst:22
msgid ""
"*Optional* - `yasm <https://yasm.tortall.net/>`_ (for WebM SIMD "
"optimizations)"
msgstr "*可选* - `yasm <https://yasm.tortall.net/>`_ （用于WebM SIMD优化）"

#: ../../docs/development/compiling/compiling_for_windows.rst:24
msgid ""
"If you have `Scoop <https://scoop.sh/>`_ installed, you can easily install "
"MinGW and other dependencies using the following command::"
msgstr ""
"如果您已安装 `Scoop <https://scoop.sh/>`_，则可以使用以下命令轻松安装MinGW和"
"其他依赖项："

#: ../../docs/development/compiling/compiling_for_windows.rst:29
#, fuzzy
msgid ""
"If you have `MSYS2 <https://www.msys2.org/>`_ installed, you can easily "
"install MinGW and other dependencies using the following command::"
msgstr ""
"如果您已安装 `Scoop <https://scoop.sh/>`_，则可以使用以下命令轻松安装MinGW和"
"其他依赖项："

#: ../../docs/development/compiling/compiling_for_windows.rst:40
msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"有关Godot的SCons用法的一般概述，请参阅 :ref:"
"`doc_introduction_to_the_buildsystem`。"

#: ../../docs/development/compiling/compiling_for_windows.rst:44
msgid "Setting up SCons"
msgstr "设置SCons"

#: ../../docs/development/compiling/compiling_for_windows.rst:46
msgid ""
"First, make sure to enable the option to add Python to the ``PATH`` in the "
"Python installer. The SCons installer should then detect and use the "
"existing Python installation."
msgstr ""
"首先，请确保启用Python安装程序中的将Python添加到 ``PATH`` 选项。然后，SCons安"
"装程序应检测并使用现有的Python安装。"

#: ../../docs/development/compiling/compiling_for_windows.rst:50
msgid ""
"To check whether you have installed Python and SCons correctly, you can type "
"``python --version`` and ``scons --version`` into a command prompt (``cmd."
"exe``)."
msgstr ""
"要检查是否已正确安装Python和SCons，可以在命令提示符 （``cmd.exe``） 中键入 "
"``python --version`` 和 ``scons --version``。"

#: ../../docs/development/compiling/compiling_for_windows.rst:54
msgid ""
"If the commands above don't work, make sure to add Python to your ``PATH`` "
"environment variable after installing it, then check again. You can do so by "
"running the Python installer again and enabling the option to add Python to "
"the ``PATH``."
msgstr ""
"如果上面的命令不起作用，请确保在安装后将Python添加到 ``PATH`` 环境变量中，然"
"后再次检查。为此，您可以再次运行Python安装程序并启用将Python添加到 ``PATH`` "
"的选项。"

#: ../../docs/development/compiling/compiling_for_windows.rst:62
msgid "Installing Visual Studio caveats"
msgstr "安装Visual Studio注意事项"

#: ../../docs/development/compiling/compiling_for_windows.rst:64
msgid ""
"If installing Visual Studio 2017 or 2019, make sure to enable **C++** in the "
"list of workflows to install."
msgstr ""
"如果安装Visual Studio 2017或2019，请确保启用要安装的工作流程列表中的 **C+"
"+** 。"

#: ../../docs/development/compiling/compiling_for_windows.rst:67
msgid ""
"If installing Visual Studio 2015, make sure to run a **Custom** installation "
"instead of **Typical** and select **C++** as a language there."
msgstr ""
"如果安装Visual Studio 2015，请确保运行 **自定义** 安装而不是 **典型** 安装，"
"然后选择 **C++** 作为语言。"

#: ../../docs/development/compiling/compiling_for_windows.rst:70
msgid ""
"If you've already made the mistake of installing Visual Studio without C++ "
"support, run the installer again; it should present you a **Modify** button. "
"Running the installer from *Add/Remove Programs* will only give you a "
"**Repair** option, which won't let you install C++ tools."
msgstr ""
"如果您已经犯了在没有C++支持的情况下安装Visual Studio的错误，请再次运行安装程"
"序；它将为您提供一个 **修改** 按钮。从 *添加/删除程序* 中运行安装程序只会给您"
"提供 **修复** 选项，而该选项将不允许您安装C++工具。"

#: ../../docs/development/compiling/compiling_for_windows.rst:76
msgid "Downloading Godot's source"
msgstr "下载Godot的源代码"

#: ../../docs/development/compiling/compiling_for_windows.rst:78
msgid ""
"Godot's source code is `hosted on GitHub <https://github.com/godotengine/"
"godot>`_. Downloading it (cloning) using `Git <https://git-scm.com/>`_ is "
"recommended."
msgstr ""
"Godot的源代码位于 `GitHub <https://github.com/godotengine/godot>`_ 上。建议使"
"用 `Git <https://git-scm.com/>`_ 下载（克隆）。"

#: ../../docs/development/compiling/compiling_for_windows.rst:81
msgid ""
"The tutorial will assume from now on that you placed the source code in ``C:"
"\\godot``."
msgstr "从现在开始，本教程将假设您将源代码放在 ``C:\\ godot``。"

#: ../../docs/development/compiling/compiling_for_windows.rst:85
msgid "Compiling"
msgstr "开始编译"

#: ../../docs/development/compiling/compiling_for_windows.rst:88
msgid "Selecting a compiler"
msgstr "选择编译器"

#: ../../docs/development/compiling/compiling_for_windows.rst:90
msgid ""
"SCons will automatically find and use an existing Visual Studio "
"installation. If you do not have Visual Studio installed, it will attempt to "
"use MinGW instead. If you already have Visual Studio installed and want to "
"use MinGW, pass ``use_mingw=yes`` to the SCons command line."
msgstr ""
"SCons将自动查找并使用现有的Visual Studio安装。如果您没有安装Visual Studio，它"
"将尝试改用MinGW。如果您已经安装了Visual Studio，并且想使用MinGW，请将 "
"``use_mingw=yes`` 传递给SCons命令行。"

#: ../../docs/development/compiling/compiling_for_windows.rst:95
msgid ""
"During development, using the Visual Studio compiler is usually a better "
"idea, as it links the Godot binary much faster than MinGW. However, MinGW "
"can produce more optimized binaries using link-time optimization (see "
"below), making it a better choice for production use."
msgstr ""
"在开发过程中，通常最好使用Visual Studio编译器，因为它比MinGW更快地链接Godot二"
"进制文件。但是，MinGW可以使用链接时间优化（请参见下文）来生成更多优化的二进制"
"文件，从而使其成为生产使用的更好选择。"

#: ../../docs/development/compiling/compiling_for_windows.rst:101
msgid "Running SCons"
msgstr "运行SCons"

#: ../../docs/development/compiling/compiling_for_windows.rst:103
msgid ""
"After opening a command prompt, change to the root directory of the engine "
"source code (using ``cd``) and type::"
msgstr "打开命令提示符后，转到引擎源代码的根目录（使用 ``cd``），然后键入："

#: ../../docs/development/compiling/compiling_for_windows.rst:108
msgid "You can specify a number of CPU threads to use to speed up the build::"
msgstr "您可以指定CPU线程数来加速构建："

#: ../../docs/development/compiling/compiling_for_windows.rst:112
msgid ""
"In general, it is OK to have at least as many threads compiling Godot as you "
"have cores in your CPU, if not one or two more. Feel free to add the -j "
"option to any SCons command you see below."
msgstr ""
"通常，编译Godot的线程数与CPU内核的数量（即使不超过一个或两个）可以一样多。随"
"时将 -j 选项添加到您在下面看到的任何SCons命令中。"

#: ../../docs/development/compiling/compiling_for_windows.rst:116
msgid ""
"When compiling with multiple CPU threads, SCons may warn about pywin32 being "
"missing. You can safely ignore this warning."
msgstr ""
"使用多个CPU线程进行编译时，SCons可能会警告pywin32丢失。您可以放心地忽略此警"
"告。"

#: ../../docs/development/compiling/compiling_for_windows.rst:119
msgid ""
"If all goes well, the resulting binary executable will be placed in ``C:"
"\\godot\\bin\\`` with the name ``godot.windows.tools.32.exe`` or ``godot."
"windows.tools.64.exe``."
msgstr ""
"如果一切顺利，将生成的二进制可执行文件位于 ``C:\\godot\\bin\\`` ，其名称为 "
"``godot.windows.tools.32.exe`` 或 ``godot.windows.tools.64.exe``。"

#: ../../docs/development/compiling/compiling_for_windows.rst:123
#, fuzzy
msgid ""
"By default, SCons will build a binary matching your CPU architecture, but "
"this can be overridden using ``bits=64`` or ``bits=32``."
msgstr ""
"默认情况下，SCons将构建与您的CPU体系结构匹配的二进制文件，但是可以使用 "
"``bits=64`` 或 ``bits=32`` 来覆盖它。"

#: ../../docs/development/compiling/compiling_for_windows.rst:126
msgid ""
"This executable file contains the whole engine and runs without any "
"dependencies. Running it will bring up the Project Manager."
msgstr ""
"该可执行文件包含整个引擎，并且运行时没有任何依赖关系。运行它会启动项目管理"
"器。"

#: ../../docs/development/compiling/compiling_for_windows.rst:129
msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons option "
"``target=release_debug``."
msgstr ""
"如果您正在编译Godot用于生产用途，那么您可以通过添加SCons选项 "
"``target=release_debug`` 来使最终的可执行文件更小更快。"

#: ../../docs/development/compiling/compiling_for_windows.rst:133
msgid ""
"If you are compiling Godot with MinGW, you can make the binary even smaller "
"and faster by adding the SCons option ``use_lto=yes``. As link-time "
"optimization is a memory-intensive process, this will require about 3 GB of "
"available RAM while compiling."
msgstr ""
"如果要使用MinGW编译Godot，则可以通过添加SCons选项 ``use_lto=yes`` 使二进制文"
"件变得更小、更快。由于链接时间优化是一个占用大量内存的过程，因此编译时将需要"
"大约3 GB的可用RAM。"

#: ../../docs/development/compiling/compiling_for_windows.rst:139
msgid "Development in Visual Studio or other IDEs"
msgstr "在Visual Studio或其他IDE中进行开发"

#: ../../docs/development/compiling/compiling_for_windows.rst:141
msgid ""
"For most projects, using only scripting is enough but when development in C+"
"+ is needed, for creating modules or extending the engine, working with an "
"IDE is usually desirable."
msgstr ""
"对于大多数项目，只使用脚本就足够了，但是当需要C++开发时，为了创建模块或扩展引"
"擎，通常需要使用IDE。"

#: ../../docs/development/compiling/compiling_for_windows.rst:145
msgid ""
"You can create a Visual Studio solution via SCons by running SCons with the "
"``vsproj=yes`` parameter, like this::"
msgstr ""
"您可以通过使用 ``vsproj=yes`` 参数运行SCons来创建Visual Studio解决方案，如下"
"所示："

#: ../../docs/development/compiling/compiling_for_windows.rst:150
msgid ""
"You will be able to open Godot's source in a Visual Studio solution now, and "
"able to build Godot using Visual Studio's **Build** button."
msgstr ""
"您现在可以在Visual Studio解决方案中打开Godot的源代码，并能够通过Visual Studio"
"的 **构建** 按钮构建Godot。"

#: ../../docs/development/compiling/compiling_for_windows.rst:153
msgid ""
"If you need to edit the build commands, they are located in \"Godot\" "
"project settings, NMAKE sheet. SCons is called at the end of the commands. "
"If you make a mistake, copy the command from one of the other build "
"configurations (debug, release_debug, release) or architectures (Win32/x64); "
"they are equivalent."
msgstr ""
"如果需要编辑构建命令，它们位于“Godot”项目设置，NMAKE表中。在命令结束时调用"
"SCons。如果出错，请从其他构建配置（debug，release_debug，release）或体系结构"
"（Win32 / x64）中复制命令。它们是等价的。"

#: ../../docs/development/compiling/compiling_for_windows.rst:160
msgid "Cross-compiling for Windows from other operating systems"
msgstr "从其他操作系统为Windows交叉编译"

#: ../../docs/development/compiling/compiling_for_windows.rst:162
msgid ""
"If you are a Linux or macOS user, you need to install `MinGW-w64 <https://"
"mingw-w64.org/doku.php>`_, which typically comes in 32-bit and 64-bit "
"variants. The package names may differ based on your distribution, here are "
"some known ones:"
msgstr ""
"如果您是Linux或macOS用户，则需要安装 `MinGW-w64 <https://mingw-w64.org/doku."
"php>`_，它通常包含32位和64位变体。包名称可能因您的发行版而异，以下是一些已知"
"的发行版："

#: ../../docs/development/compiling/compiling_for_windows.rst:168
msgid "**Arch Linux**"
msgstr "**Arch Linux**"

#: ../../docs/development/compiling/compiling_for_windows.rst:168
msgid "Install `mingw-w64-gcc from the AUR`_."
msgstr "安装 `AUR中的mingw-w64-gcc`_。"

#: ../../docs/development/compiling/compiling_for_windows.rst:170
msgid "**Debian** / **Ubuntu**"
msgstr "**Debian** / **Ubuntu**"

#: ../../docs/development/compiling/compiling_for_windows.rst:174
msgid "**Fedora**"
msgstr "**Fedora**"

#: ../../docs/development/compiling/compiling_for_windows.rst:179
msgid "**macOS**"
msgstr "**macOS**"

#: ../../docs/development/compiling/compiling_for_windows.rst:183
msgid "**Mageia**"
msgstr "**Mageia**"

#: ../../docs/development/compiling/compiling_for_windows.rst:191
msgid ""
"Before attempting the compilation, SCons will check for the following "
"binaries in your ``PATH`` environment variable::"
msgstr "在尝试编译之前，SCons将在 ``PATH`` 环境变量中检查以下二进制文件："

#: ../../docs/development/compiling/compiling_for_windows.rst:197
msgid ""
"If the binaries are not located in the ``PATH`` (e.g. ``/usr/bin``), you can "
"define the following environment variables to give a hint to the build "
"system::"
msgstr ""
"如果这些二进制文件不在 ``PATH`` 中（例如 ``/usr/bin``），则可以定义以下环境变"
"量来提示以构建系统："

#: ../../docs/development/compiling/compiling_for_windows.rst:204
msgid ""
"To make sure you are doing things correctly, executing the following in the "
"shell should result in a working compiler (the version output may differ "
"based on your system)::"
msgstr ""
"为了确保您做的事正确，在shell中执行以下操作将导致编译器正常工作（版本输出可能"
"因您的系统而异）："

#: ../../docs/development/compiling/compiling_for_windows.rst:212
msgid "Troubleshooting"
msgstr "故障排除"

#: ../../docs/development/compiling/compiling_for_windows.rst:214
msgid ""
"Cross-compiling from some Ubuntu versions may lead to `this bug <https://"
"github.com/godotengine/godot/issues/9258>`_, due to a default configuration "
"lacking support for POSIX threading."
msgstr ""
"由于默认配置不支持POSIX线程，因此从某些Ubuntu版本进行交叉编译可能会导致 `此"
"bug <https://github.com/godotengine/godot/issues/9258>`_ 。"

#: ../../docs/development/compiling/compiling_for_windows.rst:218
msgid ""
"You can change that configuration following those instructions, for 64-bit::"
msgstr "您可以按照以下说明针对64位更改该配置："

#: ../../docs/development/compiling/compiling_for_windows.rst:226
msgid "And for 32-bit::"
msgstr "对于32位："

#: ../../docs/development/compiling/compiling_for_windows.rst:234
msgid "Creating Windows export templates"
msgstr "创建Windows导出模板"

#: ../../docs/development/compiling/compiling_for_windows.rst:236
msgid ""
"Windows export templates are created by compiling Godot without the editor, "
"with the following flags::"
msgstr "Windows导出模板是通过编译不使用编辑器的Godot来创建的，带有以下标志："

#: ../../docs/development/compiling/compiling_for_windows.rst:244
msgid ""
"If you plan on replacing the standard export templates, copy these to the "
"following location, replacing ``<version>`` with the version identifier "
"(such as ``3.1.1.stable`` or ``3.2.dev``)::"
msgstr ""
"如果计划替换标准导出模板，复制模板到以下位置，并用版本标识符（例如 ``3.1.1."
"stable`` 或 ``3.2.dev``）替换 ``<version>``："

#: ../../docs/development/compiling/compiling_for_windows.rst:250
msgid "With the following names::"
msgstr "使用以下名称："

#: ../../docs/development/compiling/compiling_for_windows.rst:257
msgid ""
"However, if you are using custom modules or custom engine code, you may "
"instead want to configure your binaries as custom export templates here:"
msgstr ""
"此外，如果您使用的是自定义模块或自定义引擎代码，则可能需要在此处将二进制文件"
"配置为自定义导出模板："

#: ../../docs/development/compiling/compiling_for_windows.rst:263
msgid ""
"You don't need to copy them in this case, just reference the resulting files "
"in the ``bin\\`` directory of your Godot source folder, so the next time you "
"build, you will automatically have the custom templates referenced."
msgstr ""
"在这种情况下，您不需要复制它们，只需引用在Godot源文件夹的 ``bin\\`` 目录中生"
"成的文件，因此下次构建时，将自动引用自定义模板。"
