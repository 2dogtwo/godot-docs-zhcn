# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-13 12:14+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/compiling/compiling_for_windows.rst:4
msgid "Compiling for Windows"
msgstr "为Windows平台编译"

#: ../../docs/development/compiling/compiling_for_windows.rst:9
msgid "Requirements"
msgstr "需求"

#: ../../docs/development/compiling/compiling_for_windows.rst:11
msgid "For compiling under Windows, the following is required:"
msgstr "要在Windows下进行编译，需要以下内容："

#: ../../docs/development/compiling/compiling_for_windows.rst:13
msgid ""
"Visual C++, `Visual Studio Community <https://www.visualstudio.com/vs/"
"community/>`__ (recommended), version 2013 (12.0) or later. **Make sure you "
"read Installing Visual Studio caveats below or you will have to run/download "
"the installer again.**"
msgstr ""
"Visual C ++，`Visual Studio社区 <https://www.visualstudio.com/vs/community/"
">`__ （推荐），版本2013（12.0）或更高版本。 **请确保阅读下面的安装Visual "
"Studio警告，或者您必须再次运行/下载安装程序。**"

#: ../../docs/development/compiling/compiling_for_windows.rst:18
msgid "`Python 2.7+ or Python 3.5+ <https://www.python.org/downloads/>`__."
msgstr "`Python 2.7+或Python 3.5+ <https://www.python.org/downloads/>`__。"

#: ../../docs/development/compiling/compiling_for_windows.rst:19
msgid ""
"`Pywin32 Python Extension <https://github.com/mhammond/pywin32>`__ for "
"parallel builds (which increase the build speed by a great factor)."
msgstr ""
"`Pywin32 Python Extension <https://github.com/mhammond/pywin32>`__用于并行构"
"建（它可以提高构建速度）。"

#: ../../docs/development/compiling/compiling_for_windows.rst:21
msgid "`SCons <https://www.scons.org>`__ build system."
msgstr "`SCons <https://www.scons.org>`__构建系统。"

#: ../../docs/development/compiling/compiling_for_windows.rst:23
msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"有关Godot的SCons用法的一般概述，请参阅 ：ref："
"`doc_introduction_to_the_buildsystem`。"

#: ../../docs/development/compiling/compiling_for_windows.rst:27
msgid "Setting up SCons"
msgstr "设置SCons"

#: ../../docs/development/compiling/compiling_for_windows.rst:29
msgid ""
"Python adds the interpreter (python.exe) to the path. It usually installs in "
"``C:\\Python`` (or ``C:\\Python[Version]``). SCons installs inside the "
"Python install (typically in the ``Scripts`` folder) and provides a batch "
"file called ``scons.bat``. The location of this file can be added to the "
"path or it can simply be copied to ``C:\\Python`` together with the "
"interpreter executable."
msgstr ""
"Python将解释器（python.exe）添加到路径中。 它通常安装在``C：\\ Python``（或"
"``C：\\ Python [Version]``）中。 SCons安装在Python安装中（通常在``Scripts``文"
"件夹中），并提供一个名为``scons.bat``的批处理文件。 可以将此文件的位置添加到"
"路径中，也可以将其与解释器可执行文件一起复制到“C：\\ Python”。"

#: ../../docs/development/compiling/compiling_for_windows.rst:36
msgid ""
"To check whether you have installed Python and SCons correctly, you can type "
"``python --version`` and ``scons --version`` into the Windows Command Prompt "
"(``cmd.exe``)."
msgstr ""
"要检查是否已正确安装Python和SCons，可以在Windows命令提示符（``cmd.exe``）中键"
"入``python --version``和``scons --version``。"

#: ../../docs/development/compiling/compiling_for_windows.rst:40
msgid ""
"If commands above do not work, make sure you add Python to your PATH "
"environment variable after installing it, and check again."
msgstr ""
"如果上面的命令不起作用，请确保在安装后将Python添加到PATH环境变量中，然后再次"
"检查。"

#: ../../docs/development/compiling/compiling_for_windows.rst:44
msgid "Setting up Pywin32"
msgstr "设置Pywin32"

#: ../../docs/development/compiling/compiling_for_windows.rst:46
msgid ""
"Pywin32 is required for parallel builds using multiple CPU cores. If SCons "
"is issuing a warning about Pywin32 after parsing SConstruct build "
"instructions, when beginning to build, you need to install it properly from "
"the correct installer executable for your Python version `located at Github. "
"<https://github.com/mhammond/pywin32/releases>`__"
msgstr ""
"使用多个CPU内核的并行构建需要Pywin32。 如果SCons在解析SConstruct构建指令后发"
"出有关Pywin32的警告，那么在开始构建时，您需要从位于Github的Python版本的正确安"
"装程序可执行文件中正确安装 `它。 <https://github.com/mhammond/pywin32/"
"releases>`__"

#: ../../docs/development/compiling/compiling_for_windows.rst:52
msgid ""
"For example, if you installed a 32-bit version of Python 2.7, you would want "
"to install the latest version of Pywin32 that is built for the mentioned "
"version of Python. That executable installer would be named ``pywin32-221."
"win32-py2.7.exe``."
msgstr ""
"例如，如果您安装了Python 2.7的32位版本，您可能希望安装为前面提到的Python版本"
"构建的最新版本Pywin32。该可执行安装程序将命名为' pywin32-221.win32-py2.7.exe "
"' '。"

#: ../../docs/development/compiling/compiling_for_windows.rst:56
msgid ""
"The ``amd64`` version of Pywin32 is for a 64-bit version of Python "
"``pywin32-221.win-amd64-py2.7.exe``. Change the ``py`` number to install for "
"your version of Python (check via ``python --version`` mentioned above)."
msgstr ""
"Pywin32的``amd64``版本适用于64位版本的Python``pywin32-221.win-amd64-py2.7."
"exe``。 更改`py``数字以安装您的Python版本（通过上面提到的``python --version``"
"检查）。"

#: ../../docs/development/compiling/compiling_for_windows.rst:63
msgid "Installing Visual Studio caveats"
msgstr "安装Visual Studio警告"

#: ../../docs/development/compiling/compiling_for_windows.rst:65
msgid ""
"If installing Visual Studio 2015 or later, make sure to run **Custom** "
"installation, not **Typical** and select C++ as language there (and any "
"other things you might need). The installer does not install C++ by default. "
"C++ was the `only language made optional <https://blogs.msdn.microsoft.com/"
"vcblog/2015/07/24/setup-changes-in-visual-studio-2015-affecting-c-developers/"
">`__ in Visual Studio 2015."
msgstr ""
"如果安装Visual Studio 2015或更高版本，请确保运行** Custom **安装，而不是**典"
"型**并选择C ++作为语言（以及您可能需要的任何其他内容）。 安装程序默认不安装C "
"++。 C ++是 `唯一的语言可选 <https://blogs.msdn.microsoft.com/"
"vcblog/2015/07/24/setup-changes-in-visual-studio-2015-affecting-c-developers/"
">`__ 在Visual Studio 2015中。"

#: ../../docs/development/compiling/compiling_for_windows.rst:71
msgid ""
"If you have already made the mistake of installing a **Typical**, "
"installation, rerun the executable installer you downloaded from internet, "
"it will give you a **Modify** Button option. Running the install from Add/"
"Remove programs will only give you the \"Repair\" option, which will do "
"nothing for your problem."
msgstr ""
"如果您已经错误地安装了**典型**，安装，重新运行从Internet下载的可执行安装程"
"序，它将为您提供**修改**按钮选项。 从“添加/删除程序”运行安装只会为您提供“修"
"复”选项，该选项对您的问题无效。"

#: ../../docs/development/compiling/compiling_for_windows.rst:77
msgid ""
"If you're using Express, make sure you get/have a version that can compile "
"for ***C++, Desktop***."
msgstr ""
"如果您正在使用Express，请确保您拥有可以为*** C ++，Desktop ***编译的版本。"

#: ../../docs/development/compiling/compiling_for_windows.rst:81
msgid "Downloading Godot's source"
msgstr "下载戈多的来源"

#: ../../docs/development/compiling/compiling_for_windows.rst:83
msgid ""
"`Godot's <https://github.com/godotengine/godot>`__ source is hosted on "
"GitHub. Downloading it (cloning) via `Git <https://git-scm.com/>`__ is "
"recommended."
msgstr ""
"`戈多的 <https://github.com/godotengine/godot>`__来源托管在GitHub上。 建议通"
"过`Git <https://git-scm.com/>`__下载（克隆）。"

#: ../../docs/development/compiling/compiling_for_windows.rst:86
msgid ""
"The tutorial will presume from now on that you placed the source into ``C:"
"\\godot``."
msgstr "从现在开始，本教程将假设您将源放入``C：\\ godot``。"

#: ../../docs/development/compiling/compiling_for_windows.rst:90
msgid "Compiling"
msgstr "开始编译"

#: ../../docs/development/compiling/compiling_for_windows.rst:92
msgid ""
"SCons will not be able out of the box to compile from the Windows Command "
"Prompt (``cmd.exe``) because SCons and Visual C++ compiler will not be able "
"to locate environment variables and executables they need for compilation."
msgstr ""
"从Windows命令提示符（``cmd.exe``）编译SCons将无法开箱即用，因为SCons和Visual "
"C ++编译器将无法找到编译所需的环境变量和可执行文件。"

#: ../../docs/development/compiling/compiling_for_windows.rst:97
msgid ""
"Therefore, you need to start a Visual Studio command prompt. It sets up "
"environment variables needed by SCons to locate the compiler. It should be "
"called similar to one of the below names (for your respective version of "
"Visual Studio):"
msgstr ""
"因此，您需要启动Visual Studio命令提示符。 它设置SCons定位编译器所需的环境变"
"量。 它应该被称为类似于以下名称之一（对于您的各自版本的Visual Studio）："

#: ../../docs/development/compiling/compiling_for_windows.rst:102
msgid "\"Developer Command Prompt for VS2013\""
msgstr "“VS2013的开发人员命令提示符”"

#: ../../docs/development/compiling/compiling_for_windows.rst:103
msgid "\"VS2013 x64 Native Tools Command Prompt\""
msgstr "“VS2013 x64 Native Tools命令提示符”"

#: ../../docs/development/compiling/compiling_for_windows.rst:104
msgid "\"VS2013 x86 Native Tools Command Prompt\""
msgstr "“VS2013 x86 Native Tools命令提示符”"

#: ../../docs/development/compiling/compiling_for_windows.rst:105
msgid "\"VS2013 x64 Cross Tools Command Prompt\""
msgstr "“VS2013 x64交叉工具命令提示”"

#: ../../docs/development/compiling/compiling_for_windows.rst:106
msgid "\"VS2013 x86 Cross Tools Command Prompt\""
msgstr "“VS2013 x86交叉工具命令提示”"

#: ../../docs/development/compiling/compiling_for_windows.rst:108
msgid ""
"You should be able to find at least the Developer Command Prompt for your "
"version of Visual Studio in your start menu."
msgstr ""
"您应该能够在开始菜单中找到至少适用于您的Visual Studio版本的开发人员命令提示"
"符。"

#: ../../docs/development/compiling/compiling_for_windows.rst:111
msgid ""
"However Visual Studio sometimes seems to not install some of the above "
"shortcuts, except the Developer Console at these locations that are "
"automatically searched by the start menu search option:"
msgstr ""
"但是Visual Studio有时似乎没有安装上述某些快捷方式，除了开发菜单搜索选项自动搜"
"索的这些位置的开发者控制台："

#: ../../docs/development/compiling/compiling_for_windows.rst:121
msgid ""
"If you found the Developer Console, it will do for now to create a 32-bit "
"version of Godot, but if you want the 64-bit version, you might need to "
"setup the prompts manually for easy access."
msgstr ""
"如果您找到了Developer Console，它现在将创建一个32位版本的Godot，但如果您需要"
"64位版本，则可能需要手动设置提示以便于访问。"

#: ../../docs/development/compiling/compiling_for_windows.rst:125
msgid ""
"If you don't see some of the shortcuts, \"How the prompts actually work\" "
"section below will explain how to setup these prompts if you need them."
msgstr ""
"如果您没有看到某些快捷方式，“下面的提示如何实际工作”部分将说明如何在需要时设"
"置这些提示。"

#: ../../docs/development/compiling/compiling_for_windows.rst:129
msgid "About the Developer/Tools Command Prompts and the Visual C++ compiler"
msgstr "关于Developer / Tools命令提示符和Visual C ++编译器"

#: ../../docs/development/compiling/compiling_for_windows.rst:131
msgid ""
"There is a few things you need to know about these consoles and the Visual C+"
"+ compiler."
msgstr "关于这些控制台和Visual C ++编译器，您需要了解一些事项。"

#: ../../docs/development/compiling/compiling_for_windows.rst:134
msgid ""
"Your Visual Studio installation will ship with several Visual C++ compilers, "
"them being more or less identical, however each ``cl.exe`` (Visual C++ "
"compiler) will compile Godot for a different architecture (32-bit x86 or 64-"
"bit x86; the ARM compiler is not supported)."
msgstr ""
"您的Visual Studio安装将附带几个Visual C ++编译器，它们或多或少相同，但每个"
"``cl.exe``（Visual C ++编译器）将为不同的架构（32位x86或64位x86）编译Godot ;"
"不支持ARM编译器）。"

#: ../../docs/development/compiling/compiling_for_windows.rst:139
msgid ""
"The **Developer Command Prompt** will build a 32-bit version of Godot by "
"using the 32-bit Visual C++ compiler."
msgstr ""
"** Developer Command Prompt **将使用32位Visual C ++编译器构建32位版本的"
"Godot。"

#: ../../docs/development/compiling/compiling_for_windows.rst:142
msgid ""
"**Native Tools** Prompts (mentioned above) are used when you want the 32-bit "
"cl.exe to compile a 32-bit executable (x86 Native Tools Command Prompt). For "
"the 64-bit cl.exe, it will compile a 64-bit executable (x64 Native Tools "
"Command Prompt)."
msgstr ""
"**本机工具**当您希望32位cl.exe编译32位可执行文件（x86 Native Tools命令提示"
"符）时，将使用提示（如上所述）。 对于64位cl.exe，它将编译64位可执行文件（x64 "
"Native Tools命令提示符）。"

#: ../../docs/development/compiling/compiling_for_windows.rst:147
msgid ""
"The **Cross Tools** are used when your Windows is using one architecture (32-"
"bit, for example) and you need to compile to a different architecture (64-"
"bit). As you might be familiar, 32-bit Windows can not run 64-bit "
"executables, but you still might need to compile for them."
msgstr ""
"当您的Windows使用一种体系结构（例如32位）并且需要编译为不同的体系结构（64位）"
"时，将使用** Cross Tools **。 您可能已经熟悉，32位Windows无法运行64位可执行文"
"件，但您仍可能需要为它们进行编译。"

#: ../../docs/development/compiling/compiling_for_windows.rst:152
msgid "For example:"
msgstr "例如："

#: ../../docs/development/compiling/compiling_for_windows.rst:154
msgid ""
"\"VS2013 x64 Cross Tools Command Prompt\" will use a 32-bit cl.exe that will "
"compile a 64 bit application."
msgstr "“VS2013 x64交叉工具命令提示符”将使用将编译64位应用程序的32位cl.exe。"

#: ../../docs/development/compiling/compiling_for_windows.rst:157
msgid ""
"\"VS2013 x86 Cross Tools Command Prompt\" will use a 64-bit cl.exe that will "
"compile a 32-bit application. This one is useful if you are running a 32-bit "
"Windows."
msgstr ""
"“VS2013 x86交叉工具命令提示符”将使用将编译32位应用程序的64位cl.exe。 如果您运"
"行的是32位Windows，则此选项非常有用。"

#: ../../docs/development/compiling/compiling_for_windows.rst:161
msgid ""
"On a 64-bit Windows, you can run any of above prompts and compilers (``cl."
"exe`` executables) because 64-bit Windows can run any 32-bit application. 32-"
"bit Windows cannot run 64-bit executables, so the Visual Studio installer "
"won't even install shortcuts for some of these prompts."
msgstr ""
"在64位Windows上，您可以运行上述任何提示和编译器（``cl.exe``可执行文件），因为"
"64位Windows可以运行任何32位应用程序。 32位Windows无法运行64位可执行文件，因此"
"Visual Studio安装程序甚至不会为某些提示安装快捷方式。"

#: ../../docs/development/compiling/compiling_for_windows.rst:167
msgid ""
"Note that you need to choose the **Developer Console** or the correct "
"**Tools Prompt** to build Godot for the correct architecture. Use only "
"Native Prompts if you are not sure yet what exactly Cross Compile Prompts do."
msgstr ""
"请注意，您需要选择** Developer Console **或正确的** Tools Prompt **来构建"
"Godot以获得正确的架构。 如果您还不确定Cross Compile Prompts究竟做了什么，请仅"
"使用Native Prempts。"

#: ../../docs/development/compiling/compiling_for_windows.rst:173
msgid "Running SCons"
msgstr "运行SCons"

#: ../../docs/development/compiling/compiling_for_windows.rst:175
msgid ""
"Once inside the **Developer Console/Tools Console Prompt**, go to the root "
"directory of the engine source code and type:"
msgstr ""
"进入** Developer Console / Tools Console Prompt **后，转到引擎源代码的根目录"
"并输入："

#: ../../docs/development/compiling/compiling_for_windows.rst:182
msgid ""
"Tip: if you installed \"Pywin32 Python Extension\" you can append the -j "
"command to instruct SCons to run parallel builds like this:"
msgstr ""
"提示：如果你安装了“Pywin32 Python Extension”，你可以附加-j命令来指示SCons运行"
"这样的并行构建："

#: ../../docs/development/compiling/compiling_for_windows.rst:189
msgid ""
"In general, it is OK to have at least as many threads compiling Godot as you "
"have cores in your CPU, if not one or two more. Feel free to add the -j "
"option to any SCons command you see below if you setup the \"Pywin32 Python "
"Extension\"."
msgstr ""
"一般情况下，如果不是一两个核心，那么至少可以在CPU中拥有与核心一样多的线程来编"
"译Godot。 如果您设置了“Pywin32 Python Extension”，请随意将-j选项添加到您在下"
"面看到的任何SCons命令中。"

#: ../../docs/development/compiling/compiling_for_windows.rst:194
msgid ""
"If all goes well, the resulting binary executable will be placed in ``C:"
"\\godot\\bin\\`` with the name of ``godot.windows.tools.32.exe`` or ``godot."
"windows.tools.64.exe``. SCons will automatically detect what compiler "
"architecture the environment (the prompt) is setup for and will build a "
"corresponding executable."
msgstr ""
"如果一切顺利，生成的二进制可执行文件将放在``C：\\ godot \\ bin \\``中，名称为"
"``godot.windows.tools.32.exe``或``godot.windows.tools。64.exe``。 SCons将自动"
"检测环境（提示）的设置编译器体系结构，并将构建相应的可执行文件。"

#: ../../docs/development/compiling/compiling_for_windows.rst:200
msgid ""
"This executable file contains the whole engine and runs without any "
"dependencies. Executing it will bring up the Project Manager."
msgstr ""
"此可执行文件包含整个引擎，并且运行时没有任何依赖性。 执行它将调出项目经理。"

#: ../../docs/development/compiling/compiling_for_windows.rst:203
msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons option "
"``target=release_debug``."
msgstr ""
"如果您正在编译Godot用于生产用途，那么您可以通过添加SCons选项``target = "
"release_debug``来使最终的可执行文件更小更快。"

#: ../../docs/development/compiling/compiling_for_windows.rst:208
msgid "How the prompts actually work"
msgstr "提示如何实际工作"

#: ../../docs/development/compiling/compiling_for_windows.rst:210
msgid ""
"The Visual Studio command prompts are just shortcuts that call the standard "
"Command Prompt and have it run a batch file before giving  you control. The "
"batch file itself is called **vcvarsall.bat** and it sets up environment "
"variables, including the PATH variable, so that the correct version of the "
"compiler can be run. The Developer Command Prompt calls a different file "
"called **VsDevCmd.bat** but none of the other tools that this batch file "
"enables are needed by Godot/SCons."
msgstr ""
"Visual Studio命令提示只是调用标准命令提示符的快捷方式，并让它在您给予控制之前"
"运行批处理文件。 批处理文件本身称为** vcvarsall.bat **，它设置环境变量，包括"
"PATH变量，以便可以运行正确的编译器版本。 Developer Command Prompt调用另一个名"
"为** VsDevCmd.bat **的文件，但Godot / SCons不需要这个批处理文件启用的其他工"
"具。"

#: ../../docs/development/compiling/compiling_for_windows.rst:218
msgid ""
"Since you are probably using Visual Studio 2013 or 2015, if you need to "
"recreate them manually, use the below folders, or place them on the desktop/"
"taskbar:"
msgstr ""
"由于您可能正在使用Visual Studio 2013或2015，如果您需要手动重新创建它们，请使"
"用以下文件夹，或将它们放在桌面/任务栏上："

#: ../../docs/development/compiling/compiling_for_windows.rst:227
msgid ""
"Start the creation of the shortcut by pressing the ``right mouse button/New/"
"Shortcut`` in an empty place in your desired location."
msgstr "在所需位置的空白处按“鼠标右键/新建/快捷方式”，开始创建快捷方式。"

#: ../../docs/development/compiling/compiling_for_windows.rst:230
msgid ""
"Then copy one of these commands below for the corresponding tool you need "
"into the \"Path\" and \"Name\" sections of the shortcut creation wizard, and "
"fix the path to the batch file if needed."
msgstr ""
"然后将以下这些命令之一复制到快捷方式创建向导的“路径”和“名称”部分中所需的相应"
"工具，并根据需要修复批处理文件的路径。"

#: ../../docs/development/compiling/compiling_for_windows.rst:234
msgid "Visual Studio 2013 is in the \"Microsoft Visual Studio 12.0\" folder."
msgstr "Visual Studio 2013位于“Microsoft Visual Studio 12.0”文件夹中。"

#: ../../docs/development/compiling/compiling_for_windows.rst:235
msgid "Visual Studio 2015 is in the \"Microsoft Visual Studio 14.0\" folder."
msgstr "Visual Studio 2015位于“Microsoft Visual Studio 14.0”文件夹中。"

#: ../../docs/development/compiling/compiling_for_windows.rst:236
msgid "etc."
msgstr "等等"

#: ../../docs/development/compiling/compiling_for_windows.rst:255
msgid ""
"After you create the shortcut, in the shortcut's properties, that you can "
"access by right clicking with your mouse on the shortcut itself, you can "
"choose the starting directory of the command prompt (\"Start in\" field)."
msgstr ""
"创建快捷方式后，在快捷方式的属性中，可以通过在快捷方式上单击鼠标右键来访问该"
"快捷方式，可以选择命令提示符的起始目录（“开始”字段）。"

#: ../../docs/development/compiling/compiling_for_windows.rst:260
msgid ""
"Some of these shortcuts (namely the 64-bit compilers) seem to not be "
"available in the Express edition of Visual Studio or Visual C++. Before "
"recreating the commands, make sure that ``cl.exe`` executables are present "
"in one of these locations, they are the actual compilers for the "
"architecture you want to build from the command prompt."
msgstr ""
"其中一些快捷方式（即64位编译器）似乎在Visual Studio或Visual C ++的Express版本"
"中不可用。 在重新创建命令之前，请确保其中一个位置中存在“cl.exe”可执行文件，它"
"们是您要从命令提示符构建的体系结构的实际编译器。"

#: ../../docs/development/compiling/compiling_for_windows.rst:281
msgid ""
"In case you are wondering what these prompt shortcuts do, they call ``cmd."
"exe`` with the ``\\k`` option and have it run a Batch file."
msgstr ""
"如果您想知道这些提示快捷方式的作用，他们会使用``\\ k``选项调用``cmd.exe``并让"
"它运行批处理文件。"

#: ../../docs/development/compiling/compiling_for_windows.rst:293
msgid "How to run an automated build of Godot"
msgstr "如何运行戈多的自动构建"

#: ../../docs/development/compiling/compiling_for_windows.rst:295
msgid ""
"If you just need to run the compilation process via a Batch file or directly "
"in the Windows Command Prompt you need to use the following command:"
msgstr ""
"如果只需要通过批处理文件或直接在Windows命令提示符下运行编译过程，则需要使用以"
"下命令："

#: ../../docs/development/compiling/compiling_for_windows.rst:303
msgid "with one of the following parameters:"
msgstr "使用以下参数之一："

#: ../../docs/development/compiling/compiling_for_windows.rst:305
msgid "x86 (32-bit cl.exe to compile for the 32-bit architecture)"
msgstr "x86（32位cl.exe编译为32位架构）"

#: ../../docs/development/compiling/compiling_for_windows.rst:306
msgid "amd64 (64-bit cl.exe to compile for the 64-bit architecture)"
msgstr "amd64（为64位架构编译的64位cl.exe）"

#: ../../docs/development/compiling/compiling_for_windows.rst:307
msgid "x86_amd64 (32-bit cl.exe to compile for the 64-bit architecture)"
msgstr "x86_amd64（为64位架构编译的32位cl.exe）"

#: ../../docs/development/compiling/compiling_for_windows.rst:308
msgid "amd64_x86 (64-bit cl.exe to compile for the 32-bit architecture)"
msgstr "amd64_x86（为32位架构编译的64位cl.exe）"

#: ../../docs/development/compiling/compiling_for_windows.rst:310
msgid "and after that one, you can run SCons:"
msgstr "在那之后，你可以运行SCons："

#: ../../docs/development/compiling/compiling_for_windows.rst:316
msgid "or you can run them together:"
msgstr "或者你可以一起运行它们："

#: ../../docs/development/compiling/compiling_for_windows.rst:327
msgid "Development in Visual Studio or other IDEs"
msgstr "在Visual Studio或其他IDE中进行开发"

#: ../../docs/development/compiling/compiling_for_windows.rst:329
msgid ""
"For most projects, using only scripting is enough but when development in C+"
"+ is needed, for creating modules or extending the engine, working with an "
"IDE is usually desirable."
msgstr ""
"对于大多数项目，只使用脚本就足够了，但是当需要C++开发时，为了创建模块或扩展引"
"擎，通常需要使用IDE。"

#: ../../docs/development/compiling/compiling_for_windows.rst:333
msgid ""
"You can create a Visual Studio solution via SCons by running SCons with the "
"``vsproj=yes`` parameter, like this:"
msgstr ""
"您可以通过使用``vsproj = yes``参数运行SCons来创建Visual Studio解决方案，如下"
"所示："

#: ../../docs/development/compiling/compiling_for_windows.rst:340
msgid ""
"You will be able to open Godot's source in a Visual Studio solution now, and "
"able to build Godot via the Visual Studio **Build** button. However, make "
"sure that you have installed Pywin32 so that parallel (-j) builds work "
"properly."
msgstr ""
"您现在可以在Visual Studio解决方案中打开Godot的源代码，并能够通过Visual "
"Studio ** Build **按钮构建Godot。 但是，请确保已安装Pywin32，以便并行（-j）构"
"建正常工作。"

#: ../../docs/development/compiling/compiling_for_windows.rst:345
msgid ""
"If you need to edit the compilation commands, they are located in \"Godot\" "
"project settings, NMAKE sheet. SCons is called at the end of the commands. "
"If you make a mistake, copy the command from one of the other build "
"configurations (debug, release_debug, release) or architectures (Win32/x64). "
"They are equivalent."
msgstr ""
"如果需要编辑编译命令，它们位于“Godot”项目设置，NMAKE表中。 在命令结束时调用"
"SCons。 如果出错，请从其他构建配置（debug，release_debug，release）或体系结构"
"（Win32 / x64）中复制命令。 它们是等价的。"

#: ../../docs/development/compiling/compiling_for_windows.rst:352
msgid "Cross-compiling for Windows from other operating systems"
msgstr "从其他操作系统交叉编译Windows"

#: ../../docs/development/compiling/compiling_for_windows.rst:354
msgid ""
"If you are a Linux or macOS user, you need to install `MinGW-w64 <https://"
"mingw-w64.org/doku.php>`_, which typically comes in 32-bit and 64-bit "
"variants. The package names may differ based on your distro, here are some "
"known ones:"
msgstr ""
"如果您是Linux或macOS用户，则需要安装`MinGW-w64 <https://mingw-w64.org/doku."
"php>`_，它通常包含32位和64位变体。 包名称可能因您的发行版而异，以下是一些已知"
"的发行版："

#: ../../docs/development/compiling/compiling_for_windows.rst:359
msgid "**Arch**"
msgstr "**Arch**"

#: ../../docs/development/compiling/compiling_for_windows.rst:363
msgid "**Debian** / **Ubuntu**"
msgstr "**Debian** / **Ubuntu**"

#: ../../docs/development/compiling/compiling_for_windows.rst:367
msgid "**Fedora**"
msgstr "**Fedora**"

#: ../../docs/development/compiling/compiling_for_windows.rst:371
msgid "**macOS**"
msgstr "**macOS**"

#: ../../docs/development/compiling/compiling_for_windows.rst:375
msgid "**Mageia**"
msgstr "**Mageia**"

#: ../../docs/development/compiling/compiling_for_windows.rst:380
msgid ""
"Before allowing you to attempt the compilation, SCons will check for the "
"following binaries in your ``$PATH``:"
msgstr "在允许您尝试编译之前，SCons将在您的``$ PATH``中检查以下二进制文件："

#: ../../docs/development/compiling/compiling_for_windows.rst:388
msgid ""
"If the binaries are not located in the ``$PATH`` (e.g. ``/usr/bin``), you "
"can define the following environment variables to give a hint to the build "
"system:"
msgstr ""
"如果二进制文件不在``$ PATH``中（例如``/ usr / bin``），你可以定义以下环境变量"
"来给构建系统一个提示："

#: ../../docs/development/compiling/compiling_for_windows.rst:397
msgid ""
"To make sure you are doing things correctly, executing the following in the "
"shell should result in a working compiler (the version output may differ "
"based on your system):"
msgstr ""
"为了确保您正确地执行操作，在shell中执行以下操作应该会生成一个正常工作的编译器"
"（版本输出可能因您的系统而异）："

#: ../../docs/development/compiling/compiling_for_windows.rst:407
msgid "Troubleshooting"
msgstr "故障排除"

#: ../../docs/development/compiling/compiling_for_windows.rst:409
msgid ""
"Cross-compiling from some versions of Ubuntu may lead to `this bug <https://"
"github.com/godotengine/godot/issues/9258>`_, due to a default configuration "
"lacking support for POSIX threading."
msgstr ""
"某些版本的Ubuntu的交叉编译可能会导致 `此错误 <https://github.com/godotengine/"
"godot/issues/9258>`_，因为默认配置缺乏对POSIX线程的支持。"

#: ../../docs/development/compiling/compiling_for_windows.rst:412
msgid ""
"You can change that configuration following those instructions, for 32-bit:"
msgstr "您可以按照这些说明更改该配置，对于32位："

#: ../../docs/development/compiling/compiling_for_windows.rst:422
msgid "And for 64-bit:"
msgstr "而对于64位："

#: ../../docs/development/compiling/compiling_for_windows.rst:432
msgid "Creating Windows export templates"
msgstr "创建Windows导出模板"

#: ../../docs/development/compiling/compiling_for_windows.rst:434
msgid ""
"Windows export templates are created by compiling Godot as release, with the "
"following flags:"
msgstr "Windows导出模板是通过将Godot编译为release来创建的，具有以下标志："

#: ../../docs/development/compiling/compiling_for_windows.rst:437
msgid "(using Mingw32 command prompt, using the bits parameter)"
msgstr "（使用Mingw32命令提示符，使用bits参数）"

#: ../../docs/development/compiling/compiling_for_windows.rst:444
msgid "(using Mingw-w64 command prompt, using the bits parameter)"
msgstr "（使用Mingw-w64命令提示符，使用bits参数）"

#: ../../docs/development/compiling/compiling_for_windows.rst:451
msgid ""
"(using the Visual Studio command prompts for the correct architecture, "
"notice the lack of bits parameter)"
msgstr "（使用Visual Studio命令提示正确的体系结构，注意缺少bits参数）"

#: ../../docs/development/compiling/compiling_for_windows.rst:459
msgid "If you plan on replacing the standard templates, copy these to:"
msgstr "如果您打算更换标准模板，请将这些模板复制到："

#: ../../docs/development/compiling/compiling_for_windows.rst:465
msgid "With the following names:"
msgstr "使用以下名称："

#: ../../docs/development/compiling/compiling_for_windows.rst:474
msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""
"此外，如果你正在开发自定义模块或修改引擎的其他 C++ 代码，则可以在此处将你编译"
"好的二进制文件配置为自定义导出模板："

#: ../../docs/development/compiling/compiling_for_windows.rst:480
msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin\\`` directory of your Godot source folder, so the next time you "
"build you automatically have the custom templates referenced."
msgstr ""
"你甚至不需要复制它们，你只需要在Godot源文件夹的``bin \\``目录中引用结果文件，"
"这样你下次构建时就会自动引用自定义模板。"
