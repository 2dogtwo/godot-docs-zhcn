# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-08 22:29+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/compiling/compiling_for_uwp.rst:4
msgid "Compiling for Universal Windows Platform"
msgstr "为 :abbr:`UWP(Universal Windows Platform，通用Windows平台)` 编译"

#: ../../docs/development/compiling/compiling_for_uwp.rst:9
msgid "Requirements"
msgstr "需求"

#: ../../docs/development/compiling/compiling_for_uwp.rst:11
msgid "SCons (see :ref:`doc_compiling_for_windows` for more details)."
msgstr "SCons（有关详细信息，请参阅 :ref:`doc_compiling_for_windows`）。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:12
msgid ""
"Visual Studio 2015 Update 2. It may work with earlier versions. See :ref:"
"`doc_compiling_for_windows` about the caveats of installing it and the "
"various prompts."
msgstr ""
"Visual Studio 2015 Update 2。它可能适用于早期版本。请参阅 :ref:"
"`doc_compiling_for_windows`，了解安装它的注意事项和各种提示。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:15
msgid "Windows 10 SDK (can be selected in Visual Studio installation)."
msgstr "Windows 10 SDK（可在Visual Studio安装中选择）。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:16
msgid ""
"`ANGLE source <https://github.com/Microsoft/angle>`__. Use the ``ms_master`` "
"(default) branch. Keep it in a path without spaces to avoid problems."
msgstr ""
"`ANGLE source <https://github.com/Microsoft/angle>`__。使用 ``ms_master`` "
"（默认）分支。将其保存在没有空格的路径中以避免出现问题。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:20
msgid ""
"The ANGLE repo by Microsoft has been discontinued and the ``ms_master`` "
"branch has been cleared out."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:23
msgid ""
"As a temporary workaround however, it is still possible to download an older "
"state of the source code via commit `c61d048 <https://github.com/microsoft/"
"angle/tree/c61d0488abd9663e0d4d2450db7345baa2c0dfb6>`__."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:26
msgid ""
"This page will eventually be updated in the future to reflect the new build "
"instructions."
msgstr ""

#: ../../docs/development/compiling/compiling_for_uwp.rst:29
msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"有关Godot的SCons用法的一般概述，请参阅 :ref:"
"`doc_introduction_to_the_buildsystem`。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:33
msgid "Compiling"
msgstr "开始编译"

#: ../../docs/development/compiling/compiling_for_uwp.rst:35
msgid ""
"You need to open a proper Visual Studio prompt for the target architecture "
"you want to build. Check :ref:`doc_compiling_for_windows` to see how these "
"prompts work."
msgstr ""
"您需要为要构建的目标体系结构打开正确的Visual Studio提示符。检查 :ref:"
"`doc_compiling_for_windows` 以查看这些提示是如何工作的。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:39
msgid ""
"There are three target architectures for UWP: x86 (32-bits), x64 (64-bits) "
"and ARM (32-bits). For the latter, you can run ``vcvarsall.bat`` with "
"``x86_arm`` or ``amd64_arm`` as argument to set the environment."
msgstr ""
"UWP有三种目标体系结构：x86（32位），x64（64位）和ARM（32位）。对于后者，您可"
"以使用 ``x86_arm`` 或 ``amd64_arm`` 作为参数运行 ``vcvarsall.bat`` 来设置环"
"境。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:43
msgid ""
"Set the ``ANGLE_SRC_PATH`` to the directory where you downloaded the ANGLE "
"source code. The build process will also build ANGLE to produce the required "
"DLLs for the selected architecture."
msgstr ""
"将 ``ANGLE_SRC_PATH`` 设置为您下载ANGLE源代码的目录。构建过程还将构建ANGLE以"
"生成所选体系结构所需的DLL。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:47
msgid ""
"Once you're set, run the SCons command similarly to the other platforms::"
msgstr "设置完成后，与其他平台类似地运行SCons命令："

#: ../../docs/development/compiling/compiling_for_uwp.rst:52
msgid "Creating UWP export templates"
msgstr "创建UWP导出模板"

#: ../../docs/development/compiling/compiling_for_uwp.rst:54
msgid ""
"To export using the editor you need to properly build package the templates. "
"You need all three architectures with ``debug`` and ``release`` templates to "
"be able to export."
msgstr ""
"要使用编辑器导出，您需要正确构建打包模板。您需要具有 ``debug`` 和 "
"``release`` 模板的所有三种体系结构才能导出。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:58
msgid ""
"Open the command prompt for one architecture and run SCons twice (once for "
"each target)::"
msgstr "为一种体系结构打开命令提示符，然后运行SCons两次（每个目标一次）："

#: ../../docs/development/compiling/compiling_for_uwp.rst:64
msgid "Repeat for the other architectures."
msgstr "为其他架构重复上述过程。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:66
msgid ""
"In the end your ``bin`` folder will have the ``.exe`` binaries with a name "
"like ``godot.uwp.opt.debug.32.x86.exe`` (with variations for each target/"
"arch)."
msgstr ""
"最后您的 ``bin`` 文件夹将有 ``.exe`` 二进制文件，其名称类似于 ``godot.uwp."
"opt.debug.32.x86.exe`` (每个目标/架构的变体)。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:70
msgid ""
"Copy one of these to ``misc/dist/uwp_template`` inside the Godot source "
"folder and rename the binary to ``godot.uwp.exe``. From the ANGLE source, "
"under ``winrt/10/src/Release_%arch%`` (where ``%arch%`` can be ``Win32``, "
"``x64`` or ``ARM``), get the ``libEGL.dll`` and the ``libGLESv2.dll``, "
"putting them along with the executable."
msgstr ""
"将其中一个复制到Godot源文件夹中的 ``misc/dist/uwp_template``，并将二进制文件"
"重命名为 ``godot.uwp.exe`` 。从在 ``winrt/10/src/Release_%arch%`` （ ``%arch"
"%`` 可以是 ``Win32``、``x64`` 或 ``ARM``）下的ANGLE源代码， 获取 ``libEGL."
"dll`` 和 ``libGLESv2.dll``，将它们与可执行文件放在一起。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:76
msgid ""
"Add the files in the ``uwp_template`` folder to a ZIP. Rename the resulting "
"Zip according to the target/architecture of the template::"
msgstr ""
"将 ``uwp_template`` 文件夹中的文件添加到ZIP中。根据模板的目标/体系结构重命名"
"生成的Zip："

#: ../../docs/development/compiling/compiling_for_uwp.rst:86
msgid ""
"Move those templates to the ``[versionstring]\\templates`` folder in Godot "
"settings path, where `versionstring` is the version of Godot you have "
"compiled the export templates for - e.g. `3.0.alpha` for the alpha version "
"of Godot 3. If you don't want to replace the templates, you can set the "
"\"Custom Package\" property in the export window."
msgstr ""
"将这些模板移动到Godot设置中的路径 ``[versionstring]\\templates`` 文件夹，其"
"中 `versionstring` 是您编译导出模板针对的Godot版本——例如 ``3.0.alpha`` 针对"
"Godot 3的alpha版本。如果您不想替换模板，可以在导出窗口中设置 ``自定义包`` 属"
"性。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:93
msgid "Running UWP apps with Visual Studio"
msgstr "使用Visual Studio运行UWP应用程序"

#: ../../docs/development/compiling/compiling_for_uwp.rst:95
msgid ""
"If you want to debug the UWP port or simply run your apps without packaging "
"and signing, you can deploy and launch them using Visual Studio. It might be "
"the easiest way if you are testing on a device such as a Windows Phone or an "
"Xbox One."
msgstr ""
"如果要调试UWP端口或只是在没有打包和签名的情况下运行应用程序，可以使用Visual "
"Studio部署和启动它们。如果您在Windows Phone或Xbox One等设备上进行测试，这可能"
"是最简单的方法。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:100
msgid ""
"Within the ANGLE source folder, open ``templates`` and double-click the "
"``install.bat`` script file. This will install the Visual Studio project "
"templates for ANGLE apps."
msgstr ""
"在ANGLE源文件夹中，打开 ``templates`` 并双击 ``install.bat`` 脚本文件。这将为"
"ANGLE应用程序安装Visual Studio项目模板。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:104
msgid ""
"If you have not built Godot yet, open the ``winrt/10/src/angle.sln`` "
"solution from the ANGLE source and build it to Release/Win32 target. You may "
"also need to build it for ARM if you plan to run on a device. You can also "
"use MSBuild if you're comfortable with the command line."
msgstr ""
"如果还没有构建Godot，请从ANGLE源打开 ``winrt/10/src/angle.sln`` 解决方案，并"
"将其构建到 Release/Win32 目标。如果您计划在设备上运行，则可能还需要为ARM构建"
"它。如果您对命令行感到满意，也可以使用MSBuild。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:109
msgid ""
"Create a new Windows App project using the \"App for OpenGL ES (Windows "
"Universal)\" project template, which can be found under the ``Visual C++/"
"Windows/Universal`` category."
msgstr ""
"使用“App for OpenGL ES(Windows Universal)”项目模板创建一个新的Windows应用程序"
"项目，该模板位于 ``Visual C++/Windows/Universal`` 类别下。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:113
msgid ""
"This is a base project with the ANGLE dependencies already set up. However, "
"by default it picks the debug version of the DLLs which usually have poor "
"performance. So in the \"Binaries\" filter, click in each of the DLLs there "
"and in the \"Properties\" window and change the relative path from "
"``Debug_Win32`` to ``Release_Win32`` (or ``Release_ARM`` for devices)."
msgstr ""
"这是一个已经设置了ANGLE依赖项的基础项目。但是，默认情况下，它会选择通常性能较"
"差的DLL的调试版本。因此，在“二进制”过滤器中，单击其中的每个DLL并在“属性”窗口"
"中，将相对路径从 ``Debug_Win32`` 更改为 ``Release_Win32`` （或针对设备的 "
"``Release_ARM``）。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:119
msgid ""
"In the same \"Binaries\" filter, select \"Add > Existing Item\" and point to "
"the Godot executable for UWP you have. In the \"Properties\" window, set "
"\"Content\" to ``True`` so it's included in the project."
msgstr ""
"在相同的“二进制”过滤器中，选择“添加>现有项”并指向您拥有的针对UWP的Godot可执行"
"文件。在“属性”窗口中，将“内容”设置为 ``True``，以使它包含在项目中。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:123
msgid ""
"Right-click the ``Package.appxmanifest`` file and select \"Open With... > "
"XML (Text) Editor\". In the ``Package/Applications/Application`` element, "
"replace the ``Executable`` attribute from ``$targetnametoken$.exe`` to "
"``godot.uwp.exe`` (or whatever your Godot executable is called). Also change "
"the ``EntryPoint`` attribute to ``GodotUWP.App``. This will ensure that the "
"Godot executable is correctly called when the app starts."
msgstr ""
"右键单击 ``Package.appxmanifest`` 文件并选择“打开使用……> XML(Text)编辑器”。"
"在 ``Package/Applications/Application`` 元素中，将 ``$targetnametoken$.exe`` "
"中的 ``Executable`` 属性替换为 ``godot.uwp.exe`` （或者调用您的Godot可执行文"
"件，无论它是什么）。同时将 ``EntryPoint`` 属性更改为 ``GodotUWP.App`` 。这将"
"确保在应用程序启动时正确调用Godot可执行文件。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:130
msgid ""
"Create a folder (*not* a filter) called ``game`` in your Visual Studio "
"project folder and there you can put either a ``data.pck`` file or your "
"Godot project files. After that, make sure to include it all with the \"Add "
"> Existing Item\" command and set their \"Content\" property to ``True`` so "
"they're copied to the app."
msgstr ""
"在Visual Studio项目文件夹中创建一个名为 ``game`` 的文件夹（*不是* 过滤器），"
"您可以在其中放置 ``data.pck`` 文件或Godot项目文件。之后，请确保使用“添加>现有"
"项目”命令将其全部包含在内，并将其“内容”属性设置为 ``True``，以便将它们复制到"
"应用程序中。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:136
msgid ""
"To ease the workflow, you can open the \"Solution Properties\" and in the "
"\"Configuration\" section untick the \"Build\" option for the app. You still "
"have to build it at least once to generate some needed files, you can do so "
"by right-clicking the project (*not* the solution) in the \"Solution Explorer"
"\" and selecting \"Build\"."
msgstr ""
"为了简化工作流程，您可以打开“解决方案属性”，然后在“配置”部分中取消选中应用程"
"序的“构建”选项。您仍然必须至少构建一次以生成一些所需的文件，您可以通过右键单"
"击“解决方案资源管理器”中的项目（*不是* 解决方案）并选择“构建”来实现。"

#: ../../docs/development/compiling/compiling_for_uwp.rst:142
msgid ""
"Now you can just run the project and your app should open. You can use also "
"the \"Start Without Debugging\" from the \"Debug\" menu (Ctrl+F5) to make it "
"launch faster."
msgstr ""
"现在您可以运行该项目，您的应用程序应该打开。您也可以使用“调试”菜单中的“无调试"
"启动”（Ctrl + F5）来使其更快启动。"
