# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-09 12:15+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/cpp/core_types.rst:4
msgid "Core types"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:6
msgid ""
"Godot has a rich set of classes and templates that compose its core, and "
"everything is built upon them."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:9
msgid ""
"This reference will try to list them in order for their better understanding."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:13
msgid "Definitions"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:15
msgid ""
"Godot uses the standard C98 datatypes, such as ``uint8_t``, ``uint32_t``, "
"``int64_t``, etc. which are nowadays supported by every compiler. "
"Reinventing the wheel for those is not fun, as it makes code more difficult "
"to read."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:20
msgid ""
"In general, care is not taken to use the most efficient datatype for a given "
"task unless using large structures or arrays. ``int`` is used through most "
"of the code unless necessary. This is done because nowadays every device has "
"at least a 32 bits bus and can do such operations in one cycle. It makes "
"code more readable too."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:26
msgid ""
"For files or memory sizes, ``size_t`` is used, which is warranted to be 64 "
"bits."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:29
msgid ""
"For Unicode characters, CharType instead of wchar_t is used, because many "
"architectures have 4 bytes long wchar_t, where 2 bytes might be desired. "
"However, by default, this has not been forced and CharType maps directly to "
"wchar_t."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:35
#: ../../docs/development/cpp/core_types.rst:133
#: ../../docs/development/cpp/core_types.rst:167
#: ../../docs/development/cpp/core_types.rst:183
#: ../../docs/development/cpp/core_types.rst:199
#: ../../docs/development/cpp/core_types.rst:210
#: ../../docs/development/cpp/core_types.rst:221
#: ../../docs/development/cpp/core_types.rst:234
msgid "References:"
msgstr "参阅资料:"

#: ../../docs/development/cpp/core_types.rst:37
msgid ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/master/core/"
"typedefs.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:40
msgid "Memory model"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:42
msgid ""
"PC is a wonderful architecture. Computers often have gigabytes of RAM, "
"terabytes of storage and gigahertz of CPU, and when an application needs "
"more resources the OS will swap out the inactive ones. Other architectures "
"(like mobile or consoles) are in general more limited."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:47
msgid ""
"The most common memory model is the heap, where an application will request "
"a region of memory, and the underlying OS will try to fit it somewhere and "
"return it. This often works best and is flexible, but over time and with "
"abuse, this can lead to segmentation."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:52
msgid ""
"Segmentation slowly creates holes that are too small for most common "
"allocations, so that memory is wasted. There is a lot of literature about "
"heap and segmentation, so this topic will not be developed further here. "
"Modern operating systems use paged memory, which helps mitigate the problem "
"of segmentation but doesn't solve it."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:58
msgid ""
"However, in many studies and tests, it is shown that given enough memory, if "
"the maximum allocation size is below a given threshold in proportion to the "
"maximum heap size and proportion of memory intended to be unused, "
"segmentation will not be a problem over time as it will remain constant. In "
"other words, leave 10-20% of your memory free and perform all small "
"allocations and you are fine."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:65
msgid ""
"Godot ensures that all objects that can be allocated dynamically are small "
"(less than a few kb at most). But what happens if an allocation is too large "
"(like an image or mesh geometry or large array)? In this case Godot has the "
"option to use a dynamic memory pool. This memory needs to be locked to be "
"accessed, and if an allocation runs out of memory, the pool will be "
"rearranged and compacted on demand. Depending on the need of the game, the "
"programmer can configure the dynamic memory pool size."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:74
msgid "Allocating memory"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:76
msgid ""
"Godot has many tools for tracking memory usage in a game, especially during "
"debug. Because of this, the regular C and C++ library calls should not be "
"used. Instead, a few other ones are provided."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:80
msgid "For C-style allocation, Godot provides a few macros:"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:88
msgid ""
"These are equivalent to the usual malloc, realloc, free of the standard "
"library."
msgstr ""

#: ../../docs/development/cpp/core_types.rst:91
msgid "For C++-style allocation, special macros are provided:"
msgstr "这些宏可以用来处理 C++ 风格的内存分配："

#: ../../docs/development/cpp/core_types.rst:101
msgid "which are equivalent to new, delete, new[] and delete[]."
msgstr "他们对应 new、delete、new[] 和 delete[] 。"

#: ../../docs/development/cpp/core_types.rst:103
msgid ""
"memnew/memdelete also use a little C++ magic and notify Objects right after "
"they are created, and right before they are deleted."
msgstr ""
"memnew / memdelete 也使用一点 C++ 的魔法，在创建完、删除成后立即通知对象池。"

#: ../../docs/development/cpp/core_types.rst:106
#, fuzzy
msgid ""
"For dynamic memory, the DVector<> template is provided. Use it like this:"
msgstr "至于动态内存分配， 使用  DVector<> 模板类， 像这样："

#: ../../docs/development/cpp/core_types.rst:113
#, fuzzy
msgid ""
"DVector is a standard vector class, it can be accessed using the [] "
"operator, but that's probably slow for large amount of accesses (as it has "
"to lock internally). A few helpers exist for this:"
msgstr ""
"DVector 就是通常的 vector 类， 我们可以使用下标运算符取它的元素；大量频繁的读"
"写可能是低效的（因为它内部使用了锁）。这里是使用示例："

#: ../../docs/development/cpp/core_types.rst:122
msgid "and"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:129
msgid ""
"respectively. These allow fast read/write from DVectors and keep it locked "
"until they go out of scope."
msgstr "这样，允许从 DVectors 快速读写并保持锁定状态，直到它们它们超出作用域。"

#: ../../docs/development/cpp/core_types.rst:135
msgid ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/master/core/os/"
"memory.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:136
msgid ""
"`core/dvector.h <https://github.com/godotengine/godot/blob/master/core/"
"dvector.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:139
msgid "Containers"
msgstr "容器"

#: ../../docs/development/cpp/core_types.rst:141
msgid "Godot provides also a set of common containers:"
msgstr "Godot 还提供了一系列通用的容器："

#: ../../docs/development/cpp/core_types.rst:143
msgid "Vector"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:144
msgid "List"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:145
msgid "Set"
msgstr "Set"

#: ../../docs/development/cpp/core_types.rst:146
msgid "Map"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:148
#, fuzzy
msgid ""
"They are simple and aim to be as minimal as possible, as templates in C++ "
"are often inlined and make the binary size much fatter, both in debug "
"symbols and code. List, Set and Map can be iterated using pointers, like "
"this:"
msgstr ""
"由于 C++ 模板类在展开后会增加代码体积，我们尽可能的让他们保持简单小巧。 "
"List、Set、Map都能够通过指针进行迭代，像这样："

#: ../../docs/development/cpp/core_types.rst:159
msgid "The Vector<> class also has a few nice features:"
msgstr "使用Vector<> 类有这些好处："

#: ../../docs/development/cpp/core_types.rst:161
msgid ""
"It does copy on write, so making copies of it is cheap as long as they are "
"not modified."
msgstr "它在写入时复制，因此只要它们没有被修改，就无需制作它的副本。"

#: ../../docs/development/cpp/core_types.rst:163
msgid ""
"It supports multi-threading, by using atomic operations on the reference "
"counter."
msgstr "它通过在引用计数器上使用原子操作来支持多线程。"

#: ../../docs/development/cpp/core_types.rst:169
msgid ""
"`core/vector.h <https://github.com/godotengine/godot/blob/master/core/vector."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:170
msgid ""
"`core/list.h <https://github.com/godotengine/godot/blob/master/core/list."
"h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:171
msgid ""
"`core/set.h <https://github.com/godotengine/godot/blob/master/core/set.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:172
msgid ""
"`core/map.h <https://github.com/godotengine/godot/blob/master/core/map.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:175
msgid "String"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:177
msgid ""
"Godot also provides a String class. This class has a huge amount of "
"features, full Unicode support in all the functions (like case operations) "
"and utf8 parsing/extracting, as well as helpers for conversion and "
"visualization."
msgstr ""
"Godot 还提供了一个字符串类 String。 这个类有丰富的功能，支持 Unicode 字符"
"集。 还提供了一些通用的辅助功能（utf8 解析等）。"

#: ../../docs/development/cpp/core_types.rst:185
msgid ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/master/core/"
"ustring.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:188
msgid "StringName"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:190
#, fuzzy
msgid ""
"StringNames are like a String, but they are unique. Creating a StringName "
"from a string results in a unique internal pointer for all equal strings. "
"StringNames are useful for using strings as identifier, as comparing them is "
"basically comparing a pointer."
msgstr ""
"StringName 和 String 类似， 不同的是他们是唯一的。使用同一个字符串创建的 "
"StringName 对象内部指向同一指针。 StringName 在使用字符处作为标识符时会很有"
"用，因为比较他们的性能和比较两个指针接近。"

#: ../../docs/development/cpp/core_types.rst:195
msgid ""
"Creation of a StringName (especially a new one) is slow, but comparison is "
"fast."
msgstr "创建一个 StringName (尤其是新的字符串) 很慢， 但比较他们是非常快的。"

#: ../../docs/development/cpp/core_types.rst:201
msgid ""
"`core/string_db.h <https://github.com/godotengine/godot/blob/master/core/"
"string_db.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:204
msgid "Math types"
msgstr "数学类型"

#: ../../docs/development/cpp/core_types.rst:206
#, fuzzy
msgid ""
"There are several linear math types available in the core/math directory."
msgstr "core/math 目录中有几种线性代数常用的类型，基本上就是这样。"

#: ../../docs/development/cpp/core_types.rst:212
msgid ""
"`core/math <https://github.com/godotengine/godot/tree/master/core/math>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:215
msgid "NodePath"
msgstr "NodePath"

#: ../../docs/development/cpp/core_types.rst:217
msgid ""
"This is a special datatype used for storing paths in a scene tree and "
"referencing them fast."
msgstr "这是一种特殊的数据类型，用于在场景树中存储路径并快速引用它们。"

#: ../../docs/development/cpp/core_types.rst:223
msgid ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/master/core/"
"node_path.h>`__"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:226
msgid "RID"
msgstr ""

#: ../../docs/development/cpp/core_types.rst:228
msgid ""
"RIDs are resource IDs. Servers use these to reference data stored in them. "
"RIDs are opaque, meaning that the data they reference can't be accessed "
"directly. RIDs are unique, even for different types of referenced data."
msgstr ""
"RID是资源ID。 Server中使用它们来引用存储在其中的数据。 RID是不透明的，这意味"
"着它们引用的数据不能直接访问。 即使对于不同类型的数据，RID也是唯一的。"

#: ../../docs/development/cpp/core_types.rst:236
msgid ""
"`core/rid.h <https://github.com/godotengine/godot/blob/master/core/rid.h>`__"
msgstr ""
