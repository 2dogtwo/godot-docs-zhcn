# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-18 09:48+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/cpp/core_types.rst:4
msgid "Core types"
msgstr "核心类型"

#: ../../docs/development/cpp/core_types.rst:6
msgid ""
"Godot has a rich set of classes and templates that compose its core, and "
"everything is built upon them."
msgstr "Godot有丰富的用来撰写它的核心的类和模板集，所有的东西都基于它们构建。"

#: ../../docs/development/cpp/core_types.rst:9
msgid ""
"This reference will try to list them in order for their better understanding."
msgstr "这份参考将试着按顺序列出它们，使之更容易被理解。"

#: ../../docs/development/cpp/core_types.rst:13
msgid "Definitions"
msgstr "定义"

#: ../../docs/development/cpp/core_types.rst:15
msgid ""
"Godot uses the standard C98 datatypes, such as ``uint8_t``, ``uint32_t``, "
"``int64_t``, etc. which are nowadays supported by every compiler. "
"Reinventing the wheel for those is not fun, as it makes code more difficult "
"to read."
msgstr ""
"Godot使用标准的C98数据类型，例如 ``uint8_t`` ，``uint32_t``， ``int64_t`` "
"等，现在每个编译器都支持这些数据类型。 为那些重新发明轮子并不好玩，因为它使代"
"码更难以阅读。"

#: ../../docs/development/cpp/core_types.rst:20
msgid ""
"In general, care is not taken to use the most efficient datatype for a given "
"task unless using large structures or arrays. ``int`` is used through most "
"of the code unless necessary. This is done because nowadays every device has "
"at least a 32 bits bus and can do such operations in one cycle. It makes "
"code more readable too."
msgstr ""
"通常，除非使用大型结构或数组，否则不要小心使用给定任务的最有效数据类型。 除非"
"必要，否则 ``int`` 用于大多数代码。 这样做是因为现在每个设备至少具有32位总线"
"并且可以在一个周期中执行这样的操作。 它使代码更具可读性。"

#: ../../docs/development/cpp/core_types.rst:26
msgid ""
"For files or memory sizes, ``size_t`` is used, which is warranted to be 64 "
"bits."
msgstr "对于文件或内存大小，使用 ``size_t`` ，保证为64位。"

#: ../../docs/development/cpp/core_types.rst:29
msgid ""
"For Unicode characters, CharType instead of wchar_t is used, because many "
"architectures have 4 bytes long wchar_t, where 2 bytes might be desired. "
"However, by default, this has not been forced and CharType maps directly to "
"wchar_t."
msgstr ""
"对于Unicode字符，使用CharType而不是wchar_t，因为许多体系结构具有4个字节长的"
"wchar_t，其中可能需要2个字节。 但是，默认情况下，这不会被强制，CharType会直接"
"映射到wchar_t。"

#: ../../docs/development/cpp/core_types.rst:35
#: ../../docs/development/cpp/core_types.rst:132
#: ../../docs/development/cpp/core_types.rst:166
#: ../../docs/development/cpp/core_types.rst:182
#: ../../docs/development/cpp/core_types.rst:198
#: ../../docs/development/cpp/core_types.rst:209
#: ../../docs/development/cpp/core_types.rst:220
#: ../../docs/development/cpp/core_types.rst:233
msgid "References:"
msgstr "参阅资料:"

#: ../../docs/development/cpp/core_types.rst:37
msgid ""
"`core/typedefs.h <https://github.com/godotengine/godot/blob/master/core/"
"typedefs.h>`__"
msgstr ""
"`core / typedefs.h <https://github.com/godotengine/godot/blob/master/core/"
"typedefs.h>`__"

#: ../../docs/development/cpp/core_types.rst:40
msgid "Memory model"
msgstr "内存模型"

#: ../../docs/development/cpp/core_types.rst:42
msgid ""
"PC is a wonderful architecture. Computers often have gigabytes of RAM, "
"terabytes of storage and gigahertz of CPU, and when an application needs "
"more resources the OS will swap out the inactive ones. Other architectures "
"(like mobile or consoles) are in general more limited."
msgstr ""
"PC有一个很棒的架构。计算机通常具有数十亿字节的RAM，数TB的存储空间，和千兆赫兹"
"的处理器，当应用程序需要更多资源时，操作系统将交换出不活动的资源。其他架构(如"
"移动设备或游戏主机)在这方面通常有很多限制。"

#: ../../docs/development/cpp/core_types.rst:47
msgid ""
"The most common memory model is the heap, where an application will request "
"a region of memory, and the underlying OS will try to fit it somewhere and "
"return it. This often works best and is flexible, but over time and with "
"abuse, this can lead to segmentation."
msgstr ""
"最常见的内存模型是堆，应用程序会从中请求一块内存区域，底层操作系统会试着从某"
"处找到一块这样的内存并返回它。这通常运作得很好不会出岔子，但随着时间的推移或"
"者被滥用，也可能导致堆被切分得乱七八糟。"

#: ../../docs/development/cpp/core_types.rst:52
msgid ""
"Segmentation slowly creates holes that are too small for most common "
"allocations, so that memory is wasted. There is a lot of literature about "
"heap and segmentation, so this topic will not be developed further here. "
"Modern operating systems use paged memory, which helps mitigate the problem "
"of segmentation but doesn't solve it."
msgstr ""
"随着更多的常规分配，这样的切分会慢慢创建出许多过小的内存空洞，从而使内存被浪"
"费掉。关于堆和切分的文献有很多，所以这个就不做展开讨论。现代操作系统使用了分"
"页内存，这有助于缓解切分问题，但也不是说能完全解决问题。"

#: ../../docs/development/cpp/core_types.rst:58
msgid ""
"However, in many studies and tests, it is shown that given enough memory, if "
"the maximum allocation size is below a given threshold in proportion to the "
"maximum heap size and proportion of memory intended to be unused, "
"segmentation will not be a problem over time as it will remain constant. In "
"other words, leave 10-20% of your memory free and perform all small "
"allocations and you are fine."
msgstr ""
"然而，许多的研究和测试显示出，在给出足够内存的情况下，如果实际最大分配大小，"
"与堆的最大大小比较，所占比例低于一个阈值，或者说内存中还有一定比例未使用内存"
"时，堆被切分这件事就不会随着时间的推移成为问题。换句话说，留出10-20％的内存空"
"间，再执行小额内存分配，您也没事。"

#: ../../docs/development/cpp/core_types.rst:65
msgid ""
"Godot ensures that all objects that can be allocated dynamically are small "
"(less than a few kb at most). But what happens if an allocation is too large "
"(like an image or mesh geometry or large array)? In this case Godot has the "
"option to use a dynamic memory pool. This memory needs to be locked to be "
"accessed, and if an allocation runs out of memory, the pool will be "
"rearranged and compacted on demand. Depending on the need of the game, the "
"programmer can configure the dynamic memory pool size."
msgstr ""
"Godot确保所有的可动态分配的对象都很小(最多不到几kb)。但是如果出现很大的分配"
"(像图像、网格几何数据或大数组)，会怎样呢？在这种情况下，Godot可以选择使用动态"
"内存池。内存会被锁定以进行访问操作；如果内存不足，则内存池会根据需要进行重新"
"排列和压缩。根据游戏的需要，程序员可以配置动态内存池的大小。"

#: ../../docs/development/cpp/core_types.rst:74
msgid "Allocating memory"
msgstr "内存分配"

#: ../../docs/development/cpp/core_types.rst:76
msgid ""
"Godot has many tools for tracking memory usage in a game, especially during "
"debug. Because of this, the regular C and C++ library calls should not be "
"used. Instead, a few other ones are provided."
msgstr ""
"Godot有许多工具可用于跟踪游戏中的内存使用情况，尤其是在调试期间。因此，不应使"
"用常规的C和C++库调用。相反，Godot提供了一些其它的供您使用。"

#: ../../docs/development/cpp/core_types.rst:80
msgid "For C-style allocation, Godot provides a few macros:"
msgstr "Godot提供了一些宏可以用来处理C风格的内存分配:"

#: ../../docs/development/cpp/core_types.rst:88
msgid ""
"These are equivalent to the usual malloc, realloc, free of the standard C "
"library."
msgstr "这些等同于通常的malloc，realloc，不含标准C库。"

#: ../../docs/development/cpp/core_types.rst:91
msgid "For C++-style allocation, special macros are provided:"
msgstr "这些宏可以用来处理C++风格的内存分配:"

#: ../../docs/development/cpp/core_types.rst:101
msgid "which are equivalent to new, delete, new[] and delete[]."
msgstr "他们对应了new，delete，new[]和delete[]。"

#: ../../docs/development/cpp/core_types.rst:103
msgid ""
"memnew/memdelete also use a little C++ magic and notify Objects right after "
"they are created, and right before they are deleted."
msgstr ""
"memnew/memdelete也使用一点C++的小技巧，在创建或删除对象之后，会立即通知对象"
"池。"

#: ../../docs/development/cpp/core_types.rst:106
msgid ""
"For dynamic memory, the PoolVector<> template is provided. PoolVector is a "
"standard vector class, and is very similar to vector in the C++ standard "
"library. To create a PoolVector buffer, use this:"
msgstr ""
"对于动态内存，提供了PoolVector <>模板。 PoolVector是一个标准的向量类，与C++标"
"准库中的vector非常相似。 要创建PoolVector缓冲区，请使用以下命令:"

#: ../../docs/development/cpp/core_types.rst:114
msgid ""
"PoolVector can be accessed using the [] operator and a few helpers exist for "
"this:"
msgstr "可以使用[]运算符访问PoolVector，并且存在一些帮助:"

#: ../../docs/development/cpp/core_types.rst:126
msgid ""
"These operations allow fast read/write from PoolVectors and keep it locked "
"until they go out of scope. However, PoolVectors should be used for small, "
"dynamic memory operations, as read() and write() are too slow for a large "
"amount of accesses."
msgstr ""
"这些操作允许从PoolVectors快速读/写并保持锁定直到它们超出范围。 但是，"
"PoolVectors应该用于小型动态内存操作，因为read()和write()对于大量访问来说太慢"
"了。"

#: ../../docs/development/cpp/core_types.rst:134
msgid ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/master/core/os/"
"memory.h>`__"
msgstr ""
"`core/os/memory.h <https://github.com/godotengine/godot/blob/master/core/os/"
"memory.h>`__"

#: ../../docs/development/cpp/core_types.rst:135
msgid ""
"`core/dvector.h <https://github.com/godotengine/godot/blob/master/core/"
"dvector.h>`__"
msgstr ""
"`core/dvector.h <https://github.com/godotengine/godot/blob/master/core/"
"dvector.h>`__"

#: ../../docs/development/cpp/core_types.rst:138
msgid "Containers"
msgstr "容器"

#: ../../docs/development/cpp/core_types.rst:140
msgid "Godot provides also a set of common containers:"
msgstr "Godot 还提供了一系列通用的容器:"

#: ../../docs/development/cpp/core_types.rst:142
msgid "Vector"
msgstr "Vector"

#: ../../docs/development/cpp/core_types.rst:143
msgid "List"
msgstr "List"

#: ../../docs/development/cpp/core_types.rst:144
msgid "Set"
msgstr "Set"

#: ../../docs/development/cpp/core_types.rst:145
msgid "Map"
msgstr "Map"

#: ../../docs/development/cpp/core_types.rst:147
msgid ""
"They are simple and aim to be as minimal as possible, as templates in C++ "
"are often inlined and make the binary size much fatter, both in debug "
"symbols and code. List, Set and Map can be iterated using pointers, like "
"this:"
msgstr ""
"它们很简单，旨在尽可能小，因为C++中的模板经常被内联，并且在调试符号和代码中使"
"二进制大小更加丰富。 可以使用指针迭代List，Set和Map，如下所示:"

#: ../../docs/development/cpp/core_types.rst:158
msgid "The Vector<> class also has a few nice features:"
msgstr "使用Vector<> 类有这些好处:"

#: ../../docs/development/cpp/core_types.rst:160
msgid ""
"It does copy on write, so making copies of it is cheap as long as they are "
"not modified."
msgstr "它在写入时复制，因此只要它们没有被修改，就无需制作它的副本。"

#: ../../docs/development/cpp/core_types.rst:162
msgid ""
"It supports multi-threading, by using atomic operations on the reference "
"counter."
msgstr "它通过在引用计数器上使用原子操作来支持多线程。"

#: ../../docs/development/cpp/core_types.rst:168
msgid ""
"`core/vector.h <https://github.com/godotengine/godot/blob/master/core/vector."
"h>`__"
msgstr ""
"`core/vector.h <https://github.com/godotengine/godot/blob/master/core/vector."
"h>`__"

#: ../../docs/development/cpp/core_types.rst:169
msgid ""
"`core/list.h <https://github.com/godotengine/godot/blob/master/core/list."
"h>`__"
msgstr ""
"`core/list.h <https://github.com/godotengine/godot/blob/master/core/list."
"h>`__"

#: ../../docs/development/cpp/core_types.rst:170
msgid ""
"`core/set.h <https://github.com/godotengine/godot/blob/master/core/set.h>`__"
msgstr ""
"`core/set.h <https://github.com/godotengine/godot/blob/master/core/set.h>`__"

#: ../../docs/development/cpp/core_types.rst:171
msgid ""
"`core/map.h <https://github.com/godotengine/godot/blob/master/core/map.h>`__"
msgstr ""
"`core/map.h <https://github.com/godotengine/godot/blob/master/core/map.h>`__"

#: ../../docs/development/cpp/core_types.rst:174
msgid "String"
msgstr "字符串"

#: ../../docs/development/cpp/core_types.rst:176
msgid ""
"Godot also provides a String class. This class has a huge amount of "
"features, full Unicode support in all the functions (like case operations) "
"and utf8 parsing/extracting, as well as helpers for conversion and "
"visualization."
msgstr ""
"Godot 还提供了一个字符串类 String。 这个类有丰富的功能，支持 Unicode 字符"
"集。 还提供了一些通用的辅助功能(utf8 解析等)。"

#: ../../docs/development/cpp/core_types.rst:184
msgid ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/master/core/"
"ustring.h>`__"
msgstr ""
"`core/ustring.h <https://github.com/godotengine/godot/blob/master/core/"
"ustring.h>`__"

#: ../../docs/development/cpp/core_types.rst:187
msgid "StringName"
msgstr "字符串名称"

#: ../../docs/development/cpp/core_types.rst:189
msgid ""
"StringNames are like a String, but they are unique. Creating a StringName "
"from a string results in a unique internal pointer for all equal strings. "
"StringNames are useful for using strings as identifier, as comparing them is "
"basically comparing a pointer."
msgstr ""
"字符串名称和字符串类似，不同的是它们是唯一的。使用同一个字符串创建的字符串名"
"称对象内部指向同一指针。 字符串名称在使用字符处作为标识符时会很有用，因为比较"
"它们的性能和比较两个指针接近。"

#: ../../docs/development/cpp/core_types.rst:194
msgid ""
"Creation of a StringName (especially a new one) is slow, but comparison is "
"fast."
msgstr "创建一个字符串名称(尤其是新的) 是慢的， 但比较它们是快的。"

#: ../../docs/development/cpp/core_types.rst:200
msgid ""
"`core/string_db.h <https://github.com/godotengine/godot/blob/master/core/"
"string_db.h>`__"
msgstr ""
"`core/string_db.h <https://github.com/godotengine/godot/blob/master/core/"
"string_db.h>`__"

#: ../../docs/development/cpp/core_types.rst:203
msgid "Math types"
msgstr "数学类型"

#: ../../docs/development/cpp/core_types.rst:205
msgid ""
"There are several linear math types available in the core/math directory."
msgstr "在core/math目录中，有几种线性代数常用的类型。"

#: ../../docs/development/cpp/core_types.rst:211
msgid ""
"`core/math <https://github.com/godotengine/godot/tree/master/core/math>`__"
msgstr ""
"`core/math <https://github.com/godotengine/godot/tree/master/core/math>`__"

#: ../../docs/development/cpp/core_types.rst:214
msgid "NodePath"
msgstr "节点路径"

#: ../../docs/development/cpp/core_types.rst:216
msgid ""
"This is a special datatype used for storing paths in a scene tree and "
"referencing them fast."
msgstr "这是一种特殊的数据类型，用于在场景树中存储路径并快速引用它们。"

#: ../../docs/development/cpp/core_types.rst:222
msgid ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/master/core/"
"node_path.h>`__"
msgstr ""
"`core/node_path.h <https://github.com/godotengine/godot/blob/master/core/"
"node_path.h>`__"

#: ../../docs/development/cpp/core_types.rst:225
msgid "RID"
msgstr "RID"

#: ../../docs/development/cpp/core_types.rst:227
msgid ""
"RIDs are resource IDs. Servers use these to reference data stored in them. "
"RIDs are opaque, meaning that the data they reference can't be accessed "
"directly. RIDs are unique, even for different types of referenced data."
msgstr ""
"RID是资源ID。服务器使用这些来引用存储在其中的数据。RID是不透明的，这意味着它"
"们引用的数据不能直接访问。RID是唯一的，甚至对于不同类型的引用数据也是如此。"

#: ../../docs/development/cpp/core_types.rst:235
msgid ""
"`core/rid.h <https://github.com/godotengine/godot/blob/master/core/rid.h>`__"
msgstr ""
"`core/rid.h <https://github.com/godotengine/godot/blob/master/core/rid.h>`__"
