# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-20 15:59+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:4
msgid "Custom modules in C++"
msgstr "自定义C++模块"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:7
msgid "Modules"
msgstr "模块（Modules）"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:9
msgid ""
"Godot allows extending the engine in a modular way. New modules can be "
"created and then enabled/disabled. This allows for adding new engine "
"functionality at every level without modifying the core, which can be split "
"for use and reuse in different modules."
msgstr ""
"Godot 允许通过模块化的方式对引擎进行扩展。您可以创建新的模块，然后启用/禁用"
"它。这允许在每个级别添加新的引擎功能，而无需修改内核，可以将其拆分以供在不同"
"模块中使用和重用。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:14
msgid ""
"Modules are located in the ``modules/`` subdirectory of the build system. By "
"default, many different modules exist, such as GDScript (which, yes, is not "
"part of the base engine), the Mono runtime, a regular expressions module, "
"and others. As many new modules as desired can be created and combined, and "
"the SCons build system will take care of it transparently."
msgstr ""
"模块位于构建系统的 ``modules/`` 子目录中。默认情况下，存在许多不同的模块，例"
"如GDScript（是，它不是基本引擎的一部分）、Mono运行时、正则表达式模块等。 可以"
"创建和组合任意数量的新模块，SCons构建系统将透明地处理该模块。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:22
msgid "What for?"
msgstr "可以做什么？"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:24
msgid ""
"While it's recommended that most of a game be written in scripting (as it is "
"an enormous time saver), it's perfectly possible to use C++ instead. Adding C"
"++ modules can be useful in the following scenarios:"
msgstr ""
"尽管我们建议使用脚本编写游戏的大部分代码（因为这能够节省大量的时间），但使用 "
"C++ 进行开发也是完全可行的。在以下情况下，添加C ++模块可能会很有用："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:28
msgid "Binding an external library to Godot (like PhysX, FMOD, etc)."
msgstr "将外部库绑定到Godot（例如PhysX、FMOD等）。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:29
msgid "Optimize critical parts of a game."
msgstr "优化游戏的核心部分。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:30
msgid "Adding new functionality to the engine and/or editor."
msgstr "为引擎和/或编辑器添加新功能。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:31
msgid "Porting an existing game."
msgstr "移植现有的游戏项目。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:32
msgid "Write a whole, new game in C++ because you can't live without C++."
msgstr "使用 C++ 编写整个新游戏，因为您离不开 C++。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:35
msgid "Creating a new module"
msgstr "创新新模块"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:37
msgid ""
"Before creating a module, make sure to download the source code of Godot and "
"manage to compile it. There are tutorials in the documentation for this."
msgstr "在创建模块之前，请确保下载Godot的源代码并进行编译。文档中有相关教程。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:40
msgid ""
"To create a new module, the first step is creating a directory inside "
"``modules/``. If you want to maintain the module separately, you can "
"checkout a different VCS into modules and use it."
msgstr ""
"要创建一个新模块，首先我们要在 ``modules/`` 文件夹下创建一个新目录。如果要单"
"独维护模块，则可以在版本控制系统（VCS）检出到模块中并使用它。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:44
msgid ""
"The example module will be called \"summator\", and is placed inside the "
"Godot source tree (``C:\\godot`` refers to wherever the Godot sources are "
"located):"
msgstr ""
"示例模块将被称为 ``求和器（summator）``，并放置在Godot源代码树的内部（``C:"
"\\godot`` 指的是Godot源代码所在的位置）："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:55
msgid "Inside we will create a simple summator class:"
msgstr "在内部，我们将创建一个简单的 ``summator`` 类："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:84
msgid "And then the cpp file."
msgstr "然后是cpp文件。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:114
msgid ""
"Then, the new class needs to be registered somehow, so two more files need "
"to be created:"
msgstr "然后，需要以某种方式注册新类，因此需要再创建两个文件："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:122
msgid "With the following contents:"
msgstr "具有以下内容："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:149
msgid ""
"Next, we need to create a ``SCsub`` file so the build system compiles this "
"module:"
msgstr "接下来，我们需要创建一个 ``SCsub`` 文件，以便构建系统编译此模块："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:160
msgid ""
"With multiple sources, you can also add each file individually to a Python "
"string list:"
msgstr "使用多个源文件，您还可以将每个文件分别添加到Python字符串列表中："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:168
msgid ""
"This allows for powerful possibilities using Python to construct the file "
"list using loops and logic statements. Look at some of the other modules "
"that ship with Godot by default for examples."
msgstr ""
"这提供了使用Python使用循环和逻辑语句构造文件列表的强大可能性。请查看默认情况"
"下Godot附带的其他一些模块作为示例。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:172
msgid ""
"To add include directories for the compiler to look at you can append it to "
"the environment's paths:"
msgstr "要添加供编译器查看的包含目录，可以将其追加到环境的路径中："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:180
msgid ""
"If you want to add custom compiler flags when building your module, you need "
"to clone `env` first, so it won't add those flags to whole Godot build "
"(which can cause errors). Example `SCsub` with custom flags:"
msgstr ""
"如果要在构建模块时添加自定义编译器标志，则需要首先克隆 `env`，这样它就不会将"
"这些标志添加到整个Godot构建中（这可能会导致错误）。带有自定义标志的示例 "
"`SCsub`："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:195
msgid ""
"And finally, the configuration file for the module, this is a simple python "
"script that must be named ``config.py``:"
msgstr ""
"最后是模块的配置文件，这是一个简单的python脚本，必须命名为 ``config.py``："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:208
msgid ""
"The module is asked if it's OK to build for the specific platform (in this "
"case, ``True`` means it will build for every platform)."
msgstr ""
"询问模块是否可以针对特定平台进行构建（在这种情况下，``True`` 表示它将针对每个"
"平台进行构建）。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:211
msgid ""
"And that's it. Hope it was not too complex! Your module should look like "
"this:"
msgstr "就是这样。 希望它不太复杂！ 您的模块应如下所示："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:223
msgid ""
"You can then zip it and share the module with everyone else. When building "
"for every platform (instructions in the previous sections), your module will "
"be included."
msgstr ""
"然后，您可以压缩它并与其他所有人分享该模块。当针对每个平台进行构建时（上一节"
"中的说明），您的模块将包括在内。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:227
msgid ""
"There is a parameter limit of 5 in C++ modules for things such as "
"subclasses. This can be raised to 13 by including the header file ``core/"
"method_bind_ext.gen.inc``."
msgstr ""

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:232
msgid "Using the module"
msgstr "使用模块"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:234
msgid "You can now use your newly created module from any script:"
msgstr "现在，您可以通过任何脚本使用新创建的模块："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:245
msgid "And the output will be ``60``."
msgstr "输出将是 ``60``。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:247
msgid ""
"The previous Summator example is great for small, custom modules, but what "
"if you want to use a larger, external library?  Refer to :ref:"
"`doc_binding_to_external_libraries` for details about binding to external "
"libraries."
msgstr ""
"前面的Summator示例非常适合小型的自定义模块，但是如果想使用更大的外部库该怎么"
"办？请参阅 :ref:`doc_binding_to_external_libraries` 以获得有关绑定到外部库的"
"详细信息。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:253
msgid "Improving the build system for development"
msgstr "改善开发的构建系统"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:255
msgid ""
"So far we defined a clean and simple SCsub that allows us to add the sources "
"of our new module as part of the Godot binary."
msgstr ""
"到目前为止，我们定义了一个干净简单的SCsub，它允许我们将新模块的源文件添加为"
"Godot二进制文件的一部分。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:258
msgid ""
"This static approach is fine when we want to build a release version of our "
"game given we want all the modules in a single binary."
msgstr ""
"那么当我们要构建游戏的发行版，并希望将所有模块都放在一个二进制文件中时，这种"
"静态方法就很好。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:261
msgid ""
"However the trade-off is every single change means a full recompilation of "
"the game. Even if SCons is able to detect and recompile only the file that "
"have changed, finding such files and eventually linking the final binary is "
"a long and costly part."
msgstr ""
"然而，每一次更改都意味着游戏的全面重新编译。即使SCons能够检测和重新编译仅已被"
"更改的文件，找到这样的文件，并最终链接到最终的二进制文件，是一个漫长而成本高"
"昂的过程。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:266
msgid ""
"The solution to avoid such a cost is to build our own module as a shared "
"library that will be dynamically loaded when starting our game's binary."
msgstr ""
"避免这种成本的解决方案是将我们自己的模块构建为共享库，该库在启动游戏二进制文"
"件时将动态加载。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:299
msgid ""
"Once compiled, we should end up with a ``bin`` directory containing both the "
"``godot*`` binary and our ``libsummator*.so``. However given the .so is not "
"in a standard directory (like ``/usr/lib``), we have to help our binary find "
"it during runtime with the ``LD_LIBRARY_PATH`` environ variable:"
msgstr ""
"编译完成后，在 ``bin`` 目录下可以找到 ``godot*`` 可执行文件和 我们的模块库 "
"``libsummator*.so``。但是，鉴于 ``.so`` 文件不在标准目录（如 ``/usr/lib``）"
"中，我们必须使用 ``LD_LIBRARY_PATH`` 环境变量帮助二进制文件在运行时找到它："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:309
msgid ""
"**note**: Pay attention you have to ``export`` the environ variable "
"otherwise you won't be able to play your project from within the editor."
msgstr ""
"**注意**：请注意，您必须 ``export`` 该环境变量，否则将无法在编辑器中启动项"
"目。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:312
msgid ""
"On top of that, it would be nice to be able to select whether to compile our "
"module as shared library (for development) or as a part of the Godot binary "
"(for release). To do that we can define a custom flag to be passed to SCons "
"using the `ARGUMENT` command:"
msgstr ""
"最重要的是，能够选择将我们的模块编译为共享库（用于开发）还是作为Godot二进制文"
"件的一部分（用于发行版）将是一件很不错的事情。为此，我们可以使用 `ARGUMENT` "
"命令定义要传递给SCons的自定义标志："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:344
msgid ""
"Now by default ``scons`` command will build our module as part of Godot's "
"binary and as a shared library when passing ``summator_shared=yes``."
msgstr ""
"现在默认情况下，``scons`` 命令会将我们的模块构建为Godot二进制文件的一部分，并"
"在传递 ``summator_shared=yes`` 时构建为共享库。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:347
msgid ""
"Finally you can even speedup build further by explicitly specifying your "
"shared module as target in the scons command:"
msgstr ""
"最后，您甚至可以通过在scons命令中将共享模块显式指定为目标来进一步加快构建速"
"度："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:355
msgid "Writing custom documentation"
msgstr "编写自定义文档"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:357
msgid ""
"Writing documentation may seem like a boring task, but it is highly "
"recommended to document your newly created module in order to make it easier "
"for users to benefit from it. Not to mention that the code you've written "
"one year ago may become indistinguishable from the code that was written by "
"someone else, so be kind to your future self!"
msgstr ""
"编写文档看起来可能是一项无聊的任务，但仍然强烈建议您为新创建的模块编写文档，"
"以便使用这个模块的其他人从中受益。更不用说，您一年后可能与无法区分它与其他人"
"写的代码，所以对未来的您自己好一点吧！"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:363
msgid "There are several steps in order to setup custom docs for the module:"
msgstr "为了设置模块的自定义文档，有几个步骤："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:365
msgid ""
"Make a new directory in the root of the module. The directory name can be "
"anything, but we'll be using the ``doc_classes`` name throughout this "
"section."
msgstr ""
"在模块的根目录中创建一个新目录。目录名称可以是任何名称，但是在本节中，我们将"
"使用 ``doc_classes`` 名称。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:368
msgid "Append the following code snippet to ``config.py``:"
msgstr "将以下代码段追加到 ``config.py``："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:380
msgid ""
"The ``get_doc_classes()`` method is necessary for the build system to know "
"which documentation classes of the module must be merged, since the module "
"may contain several classes. Replace ``ClassName`` with the name of the "
"class you want to write documentation for. If you need docs for more than "
"one class, append those as well."
msgstr ""
"``get_doc_classes()`` 方法是构建系统了解模块的哪些文档类必须被合并所必需的，"
"因为该模块可能包含多个类。将 ``ClassName`` 替换为您要为其编写文档的类的名"
"称。 如果您需要多个类的文档，请追加这些文档。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:386
msgid ""
"The ``get_doc_path()`` method is used by the build system to determine the "
"location of the docs. In our case, they will be located in the "
"``doc_classes`` directory."
msgstr ""
"构建系统使用 ``get_doc_path()`` 方法来确定文档的位置。在我们的例子中，它们将"
"位于 ``doc_classes`` 目录中。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:390
msgid "Run command:"
msgstr "运行命令："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:396
msgid ""
"This will dump the engine API reference to the given ``<path>`` in XML "
"format. Notice that you'll need to configure your ``PATH`` to locate Godot's "
"executable, and make sure that you have write access rights. If not, you "
"might encounter an error similar to the following:"
msgstr ""
"这会将引擎API参考以XML格式转储到给定的 ``<path>`` 中。请注意，您需要配置 "
"``PATH`` 以找到Godot的可执行文件，并确保您具有写访问权。否则您可能会遇到类似"
"于以下错误："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:406
msgid "Get generated doc file from ``godot/doc/classes/ClassName.xml``"
msgstr "从 ``godot/doc/classes/ClassName.xml`` 获取生成的doc文件"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:408
msgid ""
"Copy this file to ``doc_classes``, optionally edit it, then compile the "
"engine."
msgstr "将此文件复制到 ``doc_classes``，可以选择对其进行编辑，然后编译引擎。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:410
msgid ""
"The build system will fetch the documentation files from the ``doc_classes`` "
"directory and merge them with the base types. Once the compilation process "
"is finished, the docs will become accessible within the engine's built-in "
"documentation system."
msgstr ""
"构建系统将从 ``doc_classes`` 目录中获取文档文件，并将其与基本类型合并。编译过"
"程完成后，即可在引擎的内置文档系统中访问文档。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:414
msgid ""
"In order to keep documentation up-to-date, all you'll have to do is simply "
"modify one of the ``ClassName.xml`` files and recompile the engine from now "
"on."
msgstr ""
"为了使文档保持最新，从现在开始您所要做的就是，每当简单地修改其中一个 "
"``ClassName.xml`` 文件，就重新编译引擎。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:420
msgid "Adding custom editor icons"
msgstr "添加自定义编辑器图标"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:422
msgid ""
"Similarly to how you can write self-contained documentation within a module, "
"you can also create your own custom icons for classes to appear in the "
"editor."
msgstr ""
"与如何在模块中编写独立的文档类似，您也可以为类创建自己的自定义图标，以使其出"
"现在编辑器中。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:425
msgid ""
"For the actual process of creating editor icons to be integrated within the "
"engine, please refer to :ref:`doc_editor_icons` first."
msgstr ""
"有关创建要集成到引擎中的编辑器图标的实际过程，首先请参考 :ref:"
"`doc_editor_icons`。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:428
msgid "Once you've created your icon(s), proceed with the following steps:"
msgstr "创建图标后，请执行以下步骤："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:430
msgid ""
"Make a new directory in the root of the module named ``icons``. This is the "
"default path for the engine to look for module's editor icons."
msgstr ""
"在名为 ``icons`` 的模块的根目录中创建一个新目录。这是引擎查找模块的编辑器图标"
"的默认路径。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:433
msgid ""
"Move your newly created ``svg`` icons (optimized or not) into that folder."
msgstr "将新创建的 ``svg`` 图标（已优化或未优化）移动到该文件夹中。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:435
msgid ""
"Recompile the engine and run the editor. Now the icon(s) will appear in "
"editor's interface where appropriate."
msgstr ""
"重新编译引擎并运行编辑器。现在，相应的图标将出现在编辑器的界面中合适的位置"
"中。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:438
msgid ""
"If you'd like to store your icons somewhere else within your module, add the "
"following code snippet to ``config.py`` to override the default path:"
msgstr ""
"如果您想将图标存储在模块内的其他位置，请将以下代码段添加到 ``config.py`` 以覆"
"盖默认路径："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:447
msgid "Summing up"
msgstr "总结"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:449
msgid "Remember to:"
msgstr "记得："

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:451
msgid "use ``GDCLASS`` macro for inheritance, so Godot can wrap it"
msgstr "对于继承使用 ``GDCLASS`` 宏，因此Godot可以封装它"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:452
msgid ""
"use ``_bind_methods`` to bind your functions to scripting, and to allow them "
"to work as callbacks for signals."
msgstr ""
"使用 ``_bind_methods`` 将您的函数绑定到脚本，并允许它们充当信号的回调。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:455
msgid ""
"But this is not all, depending what you do, you will be greeted with some "
"(hopefully positive) surprises."
msgstr "但这还不是全部，取决于您做什么，您会得到一些（希望是积极的）惊喜。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:458
msgid ""
"If you inherit from :ref:`class_Node` (or any derived node type, such as "
"Sprite), your new class will appear in the editor, in the inheritance tree "
"in the \"Add Node\" dialog."
msgstr ""
"如果从 :ref:`class_Node` （或任何派生的节点类型，例如Sprite）继承，则新类将显"
"示在编辑器的“添加节点”对话框的继承树中。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:461
msgid ""
"If you inherit from :ref:`class_Resource`, it will appear in the resource "
"list, and all the exposed properties can be serialized when saved/loaded."
msgstr ""
"如果您从 :ref:`class_Resource` 继承，则它将出现在资源列表中，并且所有暴露的属"
"性在保存/加载时都可以序列化。"

#: ../../docs/development/cpp/custom_modules_in_cpp.rst:464
msgid ""
"By this same logic, you can extend the Editor and almost any area of the "
"engine."
msgstr "通过同样的逻辑，您可以扩展编辑器，以及引擎中几乎所有领域。"
