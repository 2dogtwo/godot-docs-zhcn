# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-05 17:37+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:4
msgid "Binding to external libraries"
msgstr "绑定到外部库"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:7
msgid "Modules"
msgstr "模块（Modules）"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:9
msgid ""
"The Summator example in :ref:`doc_custom_modules_in_c++` is great for small, "
"custom modules, but what if you want to use a larger, external library? "
"Let's look at an example using Festival, a speech synthesis (text-to-speech) "
"library written in C++."
msgstr ""
":ref:`doc_custom_modules_in_c++` 中的Summator示例非常适合小型自定义模块，但如"
"果您想使用更大的外部库，该怎么办？ 让我们看一个使用Festival的示例，这是一个用"
"C++编写的语音合成（文本到语音）库。"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:14
msgid ""
"To bind to an external library, set up a module directory similar to the "
"Summator example:"
msgstr "要绑定到外部库，请设置类似于Summator示例的模块目录："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:20
msgid "Next, you will create a header file with a simple TTS class:"
msgstr "接下来，您将使用简单的TTS类创建头文件："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:45
msgid "And then you'll add the cpp file."
msgstr "然后您将添加cpp文件。"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:70
msgid ""
"Just as before, the new class needs to be registered somehow, so two more "
"files need to be created:"
msgstr "和以前一样，需要以某种方式注册新类，因此还需要创建两个文件："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:78
msgid "With the following contents:"
msgstr "具有以下内容："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:105
msgid ""
"Next, you need to create a ``SCsub`` file so the build system compiles this "
"module:"
msgstr "接下来，需要创建一个 ``SCsub`` 文件，以便构建系统编译此模块："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:117
msgid ""
"You'll need to install the external library on your machine to get the .a "
"library files.  See the library's official documentation for specific "
"instructions on how to do this for your operation system.  We've included "
"the installation commands for Linux below, for reference."
msgstr ""
"您需要在计算机上安装外部库才能获取.a库文件。有关如何为您的操作系统执行此操作"
"的特定说明，请参见库的官方文档。我们在下面包含了Linux的安装命令，以供参考。"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:128
msgid ""
"**Important:** The voices that Festival uses (and any other potential "
"external/3rd-party resource) all have varying licenses and terms of use; "
"some (if not most) of them may be be problematic with Godot, even if the "
"Festival Library itself is MIT License compatible. Please be sure to check "
"the licenses and terms of use."
msgstr ""
"**重要：** Festival使用的声音（以及任何其他潜在的外部/第三方资源）均具有不同"
"的许可和使用条款；即使Festival库本身是与MIT许可兼容的，但其中的一些（不是大多"
"数）可能与Godot会有问题。请务必检查许可和使用条款。"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:133
msgid ""
"The external library will also need to be installed inside your module to "
"make the source files accessible to the compiler, while also keeping the "
"module code self-contained.  The festival and speech_tools libraries can be "
"installed from the modules/tts/ directory via git using the following "
"commands:"
msgstr ""
"外部库也需要安装在模块内部，以使编译器可以访问源文件，同时保持模块代码独立。"
"可以通过 ``git`` 使用以下命令从 ``modules/tts/`` 目录中安装 ``Festival`` 和 "
"``Speech_tools`` 库："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:143
msgid ""
"If you don't want the external repository source files committed to your "
"repository, you can link to them instead by adding them as submodules (from "
"within the modules/tts/ directory), as seen below:"
msgstr ""
"如果您不希望将外部存储库源文件提交到您的存储库，您可以通过将它们添加为子模块"
"（从 ``modules/tts/`` 目录中）来链接它们，如下所示："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:152
msgid ""
"**Important:** Please note that Git submodules are not used in the Godot "
"repository.  If you are developing a module to be merged into the main Godot "
"repository, you should not use submodules.  If your module doesn't get "
"merged in, you can always try to implement the external library as a "
"GDNative C++ plugin."
msgstr ""
"**重要：** 请注意，Godot存储库中未使用Git子模块。如果要开发将要合并到主Godot"
"存储库中的模块，则不应使用子模块。如果您的模块未合并，则始终可以尝试将外部库"
"实现为GDNative C++插件。"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:157
msgid ""
"To add include directories for the compiler to look at you can append it to "
"the environment's paths:"
msgstr "要添加供编译器查看的包含目录，可以将其追加到环境的路径中："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:168
msgid ""
"If you want to add custom compiler flags when building your module, you need "
"to clone `env` first, so it won't add those flags to whole Godot build "
"(which can cause errors). Example `SCsub` with custom flags:"
msgstr ""
"如果要在构建模块时添加自定义编译器标志，则需要首先克隆 `env`，这样它就不会将"
"这些标志添加到整个Godot构建中（这可能会导致错误）。带有自定义标志的示例 "
"`SCsub`："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:183
msgid "The final module should look like this:"
msgstr "最终模块应如下所示："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:201
msgid "Using the module"
msgstr "使用模块"

#: ../../docs/development/cpp/binding_to_external_libraries.rst:203
msgid "You can now use your newly created module from any script:"
msgstr "现在，您可以通过任何脚本使用新创建的模块："

#: ../../docs/development/cpp/binding_to_external_libraries.rst:212
msgid "And the output will be ``is_spoken: True`` if the text is spoken."
msgstr "如果说出文本，输出将是 ``is_spoken:True`` 。"
