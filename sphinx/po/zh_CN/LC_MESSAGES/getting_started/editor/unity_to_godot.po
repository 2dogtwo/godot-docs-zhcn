# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 12:09+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/editor/unity_to_godot.rst:8
#, fuzzy
msgid "From Unity to Godot Engine"
msgstr "从 Unity3D 迁移到 Godot 引擎"

#: ../../docs/getting_started/editor/unity_to_godot.rst:10
msgid ""
"This guide provides an overview of Godot Engine from the viewpoint of a "
"Unity user, and aims to help you migrate your existing Unity experience into "
"the world of Godot."
msgstr ""
"该指南提供了从 Unity 用户的角度所作的概览,并旨在帮助您将现有的Unity体验迁移至"
"Godot的世界里。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:14
msgid "Differences"
msgstr "不同"

#: ../../docs/getting_started/editor/unity_to_godot.rst:17
msgid "Unity"
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:17
msgid "Godot"
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:19
msgid "License"
msgstr "许可证"

#: ../../docs/getting_started/editor/unity_to_godot.rst:19
msgid ""
"Proprietary, closed, free license with revenue caps and usage restrictions"
msgstr "专有，封闭，有收入上限和使用限制的免费许可证"

#: ../../docs/getting_started/editor/unity_to_godot.rst:19
msgid "MIT license, free and fully open source without any restriction"
msgstr "MIT许可证，免费，完全开源，没有任何限制"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "OS (editor)"
msgstr "OS (编辑器)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "Windows, macOS, Linux (unofficial and unsupported)"
msgstr "Windows, macOS, Linux (非正式的，不被支持的)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "Windows, macOS, X11 (Linux, \\*BSD)"
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "OS (export)"
msgstr "OS (导出)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "**Desktop:** Windows, macOS, Linux"
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:24
msgid "**Mobile:** Android, iOS, Windows Phone, Tizen"
msgstr "移动端: Android, iOS, Windows Phone, Tizen,"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "**Web:** WebAssembly or asm.js"
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:26
msgid "**Consoles:** PS4, PS Vita, Xbox One, Xbox 360, Wii U, Nintendo 3DS"
msgstr "游戏主机: PS4, PS Vita, Xbox One, Xbox 360, Wii U, Nintendo 3DS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
msgid ""
"**VR:** Oculus Rift, SteamVR, Google Cardboard, Playstation VR, Gear VR, "
"HoloLens"
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:28
msgid "**TV:** Android TV, Samsung SMART TV, tvOS"
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "**Desktop:** Windows, macOS, X11"
msgstr "桌面端: Windows, X11, macOS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:24
msgid "**Mobile:** Android, iOS"
msgstr "移动端: Android, iOS,"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "**Web:** WebAssembly"
msgstr "网页: WebAssembly"

#: ../../docs/getting_started/editor/unity_to_godot.rst:26
msgid "**Console:** See :ref:`doc_consoles`"
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
msgid "**VR:** Oculus Rift, SteamVR"
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid "Scene system"
msgstr "场景系统"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid "Component/Scene (GameObject > Component)"
msgstr "组件/场景 (游戏物体 > 组件)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:31
msgid "Prefabs"
msgstr "预制体"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid ""
":ref:`Scene tree and nodes <doc_scenes_and_nodes>`, allowing scenes to be "
"nested and/or inherit other scenes"
msgstr ""
":ref:`场景树和节点<doc_scenes_and_nodes>`，允许场景被嵌套或继承其他场景"

#: ../../docs/getting_started/editor/unity_to_godot.rst:33
msgid "Third-party tools"
msgstr "第三方工具"

#: ../../docs/getting_started/editor/unity_to_godot.rst:33
msgid "Visual Studio or VS Code"
msgstr "Visual Studio 或 VS Code"

#: ../../docs/getting_started/editor/unity_to_godot.rst:33
msgid ":ref:`External editors are possible <doc_external_editor>`"
msgstr ":ref:`可使用外部编辑器 <doc_external_editor>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:34
msgid ":ref:`Android SDK for Android export <doc_exporting_for_android>`"
msgstr ":ref:`用于导出安卓平台的 Android SDK <doc_exporting_for_android>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:36
msgid "Killer features"
msgstr "杀手级的功能"

#: ../../docs/getting_started/editor/unity_to_godot.rst:36
msgid "Huge community"
msgstr "庞大的社区"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid "Large assets store"
msgstr "大型的素材商店"

#: ../../docs/getting_started/editor/unity_to_godot.rst:36
msgid "Scene System"
msgstr "场景系统"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid ":ref:`Animation Pipeline <doc_animations>`"
msgstr ":ref:`动画管线 <doc_animations>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:38
msgid ":ref:`Easy to write Shaders <doc_shading_language>`"
msgstr ":ref:`易于书写的着色器 <doc_shading_language>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:39
msgid "Debug on Device"
msgstr "在设备上排错"

#: ../../docs/getting_started/editor/unity_to_godot.rst:46
msgid "The editor"
msgstr "编辑器"

#: ../../docs/getting_started/editor/unity_to_godot.rst:48
msgid ""
"Godot Engine provides a rich-featured editor that allows you to build your "
"games. The pictures below display both editors with colored blocks to "
"indicate common functionalities."
msgstr ""
"Godot引擎提供了一个功能丰富的编辑器，可让您构建您的游戏。以下的图片展示了带有"
"表示常用功能的色彩块的编辑器。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:55
msgid ""
"Note that Godot editor allows you to dock each panel at the side of the "
"scene editor you wish."
msgstr "请注意，Godot编辑器允许您任意将各个面板停靠在场景编辑器的一侧。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:57
#, fuzzy
msgid ""
"While both editors may seem similar, there are many differences below the "
"surface. Both let you organize the project using the filesystem, but Godot's "
"approach is simpler with a single configuration file, minimalist text "
"format, and no metadata. All this contributes to Godot being much friendlier "
"to VCS systems such as Git, Subversion, or Mercurial."
msgstr ""
"虽然这两个编辑器看上去相同，但是在外表之下有着许多的不同。两者都允许你使用文"
"件系统来组织项目，但是Godot的方法更简单，只需要一个非常小的文本格式文件，而不"
"需要元数据。所有这些都使得 Godot 对VCS系统（如 Git ， Subversion 或 "
"Mercurial ）更友好。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:62
msgid ""
"Godot's Scene panel is similar to Unity's Hierarchy panel but, as each node "
"has a specific function, the approach used by Godot is more visually "
"descriptive. In other words, it's easier to understand what a specific scene "
"does at a glance."
msgstr ""
"虽然Godot的场景面板和Unity的Hierarchy面板很相似，但是因为每个节点都有特殊的功"
"能，Godot的用法更具有视觉描述性。换句话说，看一眼就能理解一个特定场景的功能。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:66
#, fuzzy
msgid ""
"The Inspector in Godot is more minimalist and designed to only show "
"properties. Thanks to this, objects can export a much larger amount of "
"useful parameters to the user without having to hide functionality in "
"language APIs. As a plus, Godot allows animating any of those properties "
"visually, so changing colors, textures, enumerations, or even links to "
"resources in real-time is possible without involving code."
msgstr ""
"Godot 的 Inspector 面板更为简单，且它的设计只为显示属性服务。得益于此，对象可"
"以向用户输出大量有用的参数，而无需把功能隐藏在语言 API 中。另外，Godot允许可"
"视化地为任何这些属性制作动画，所以可以在不使用代码的情况下实时改变颜色，纹"
"理，枚举甚至是实时链接资源。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:71
msgid ""
"Finally, the Toolbar at the top of the screen is similar in the sense that "
"it allows controlling the project playback, but projects in Godot run in a "
"separate window, as they don't execute inside the editor (but the tree and "
"objects can still be explored in the debugger window)."
msgstr ""
"最后，屏幕上方的工具条都有着类似的功能，那就是控制项目的播放，但是 Godot 的项"
"目是在独立窗口中运行的，它们不会在编辑器中执行(但是树和对象仍然可以在调试窗口"
"中查看)。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:75
#, fuzzy
msgid ""
"This approach has the disadvantage that the running game can't be explored "
"from different angles (though this may be supported in the future and "
"displaying collision gizmos in the running game is already possible), but in "
"exchange has several advantages:"
msgstr ""
"这种方法的缺点就是运行中的游戏不能从其他角度观察(尽管未来可能会得到支持，并在"
"运行中的游戏里显示碰撞体 gizmo也有可能)，但是作为交换有几个优点："

#: ../../docs/getting_started/editor/unity_to_godot.rst:79
#, fuzzy
msgid ""
"Running the project and closing it is fast (Unity has to save, run the "
"project, close the project, and then reload the previous state)."
msgstr ""
"运行项目与关闭它会非常快( Unity 必须保存，再运行项目，关闭项目，然后重载之前"
"的状态)。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:80
#, fuzzy
msgid ""
"Live editing is a lot more useful because changes done to the editor take "
"effect immediately in the game and are not lost (nor have to be synced) when "
"the game is closed. This allows fantastic workflows, like creating levels "
"while you play them."
msgstr ""
"实时编辑更加有用，因为对编辑器做的更改会立即在游戏中生效，并且在游戏关闭时不"
"会丢失(也不必同步)。这提供了出色的工作流程，比如在你运行的时候创建关卡。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:81
#, fuzzy
msgid "The editor is more stable because the game runs in a separate process."
msgstr "编辑器更加稳定，因为游戏运行在一个单独的进程中。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:83
#, fuzzy
msgid ""
"Finally, the top toolbar includes a menu for remote debugging. These options "
"make it simple to deploy to a device (connected phone, tablet, or browser "
"via HTML5), and debug/live edit on it after the game was exported."
msgstr ""
"最后，顶部的工具条包含了一个远程排错的菜单。这些选项让在设备上的部署变得简单"
"(连接到手机，平板或者是支持HTML5的浏览器)，并可以在游戏导出之后排错/实时编"
"辑。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:88
msgid "The scene system"
msgstr "场景系统"

#: ../../docs/getting_started/editor/unity_to_godot.rst:90
#, fuzzy
msgid ""
"This is the most important difference between Unity and Godot and, actually, "
"the favourite feature of most Godot users."
msgstr ""
"这是Unity和Godot间最重要的不同点，实际上也是大多数 Godot 用户最喜爱的特性。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:92
#, fuzzy
msgid ""
"Unity's scene system consists of embedding all the required assets in a "
"scene and linking them together by setting components and scripts to them."
msgstr ""
"Unity的场景系统包含了一个将所有需要的素材嵌入到其中的场景，并通过设置组件和脚"
"本将它们链接在一起。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:95
#, fuzzy
msgid ""
"Godot's scene system is different: it actually consists in a tree made of "
"nodes. Each node serves a purpose: Sprite, Mesh, Light, etc. Basically, this "
"is similar to the Unity scene system. However, each node can have multiple "
"children, which makes each a subscene of the main scene. This means you can "
"compose a whole scene with different scenes stored in different files."
msgstr ""
"Godot 的场景系统与其不同：它实际上包含一个由节点组成的树。每一个节点都有它的"
"用途：精灵，网格，灯光。。。基本上，这与Unity场景系统类似。但是，每个节点可以"
"有多个子节点，这使得每个节点都成为主场景的子场景。这意味着你可以用不同的场景"
"组成一个完整的场景，存储在不同的文件中。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:100
msgid ""
"For example, think of a platformer level. You would compose it with multiple "
"elements:"
msgstr "例如，一个平台游戏的关卡。你可以用多个元素来组合它："

#: ../../docs/getting_started/editor/unity_to_godot.rst:102
msgid "Bricks"
msgstr "砖块"

#: ../../docs/getting_started/editor/unity_to_godot.rst:103
msgid "Coins"
msgstr "金币"

#: ../../docs/getting_started/editor/unity_to_godot.rst:104
msgid "The player"
msgstr "玩家"

#: ../../docs/getting_started/editor/unity_to_godot.rst:105
msgid "The enemies"
msgstr "敌人"

#: ../../docs/getting_started/editor/unity_to_godot.rst:108
#, fuzzy
msgid ""
"In Unity, you would put all the GameObjects in the scene: the player, "
"multiple instances of enemies, bricks everywhere to form the ground of the "
"level and then multiple instances of coins all over the level. You would "
"then add various components to each element to link them and add logic in "
"the level: For example, you'd add a BoxCollider2D to all the elements of the "
"scene so that they can collide. This principle is different in Godot."
msgstr ""
"在Unity中，你可以将所有 GameObjects 放入场景中：玩家，敌人的多个实例，组成关"
"卡各个地方的砖块，还有放在关卡中的金币的多个实例。然后，你可以将各种组件添加"
"到每个元素以将它们链接起来并添加关卡中的逻辑：例如，你应该会为场景的所有元素"
"各添加一个BoxCollider2D，以便它们可以发生碰撞。这个原则在 Godot中是不同的。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:113
msgid ""
"In Godot, you would split your whole scene into 3 separate, smaller scenes, "
"which you would then instance in the main scene."
msgstr ""
"在Godot中，你要把整个场景分成3个独立的小场景，然后你将在主场景中实例化它们。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:115
msgid "**First, a scene for the Player alone.**"
msgstr "**首先，一个只有玩家的场景。**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:117
msgid ""
"Consider the player as a reusable element in other levels. It is composed of "
"one node in particular: an AnimatedSprite node, which contains the sprite "
"textures to form various animations (for example, walking animation)"
msgstr ""
"把玩家视为一个在其他关卡中可重用的元素。它通常由一个节点组成：一个精灵动画节"
"点，它包含可生成各种动画的精灵纹理(例如，步行动画)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:120
msgid "**Second, a scene for the Enemy.**"
msgstr "**其次，一个敌人场景。**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:122
msgid ""
"There again, an enemy is a reusable element in other levels. It is almost "
"the same as the Player node - the only differences are the script (that "
"manages AI, mostly) and sprite textures used by the AnimatedSprite."
msgstr ""
"敌人也是其他关卡的可重用元素。它与Player节点几乎相同 - 唯一的区别是 "
"AnimatedSprite 所使用的脚本（主要是管理AI的）和精灵纹理。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:126
msgid "**Lastly, the Level scene.**"
msgstr "**最后，关卡场景。**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:128
#, fuzzy
msgid ""
"It is composed of Bricks (for platforms), Coins (for the player to grab) and "
"a certain number of instances of the previous Enemy scene. These will be "
"different, separate enemies, whose behaviour and appearance will be the same "
"as defined in the Enemy scene. Each instance is then considered as a node in "
"the Level scene tree. Of course, you can set different properties for each "
"Enemy node (to change its color, for example)."
msgstr ""
"它由砖块(用于平台)，金币(供玩家抓取)和一定数量的前一个敌人场景的实例组成。这"
"些将是不同的，独立的敌人，其行为和外观将与“敌人”场景中定义的相同。然后将每个"
"实例视为关卡场景树中的节点。当然，你可以为每个敌人节点设置不同的属性(例如改变"
"它的颜色)。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:134
msgid ""
"Finally, the main scene would then be composed of one root node with 2 "
"children: a Player instance node, and a Level instance node. The root node "
"can be anything, generally a \"root\" type such as \"Node\" which is the "
"most global type, or \"Node2D\" (root type of all 2D-related nodes), "
"\"Spatial\" (root type of all 3D-related nodes) or \"Control\" (root type of "
"all GUI-related nodes)."
msgstr ""
"最后，主场景将由一个有着两个孩子节点的根节点组成：玩家实例节点和关卡实例节"
"点。根节点可以是任何东西，通常是“根”类型，例如最高级别全局类型的“节点”，或"
"者“2D节点”（所有2D相关节点的根类型），“空间”（所有3D相关节点的根类型）或“控"
"制”（所有GUI相关节点的根类型）。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:140
#, fuzzy
msgid ""
"As you can see, every scene is organized as a tree. The same goes for nodes' "
"properties: you don't *add* a collision component to a node to make it "
"collidable like Unity does. Instead, you make this node a *child* of a new "
"specific node that has collision properties. Godot features various "
"collision types nodes, depending on the usage (see the :ref:`Physics "
"introduction <doc_physics_introduction>`)."
msgstr ""
"正如你所看到的，每个场景由一棵树所组成。节点的属性也是如此：你不必像Unity一样"
"*添加*一个碰撞组件到一个节点以使得它可以碰撞。相反，您要将此节点设置为一个具"
"有碰撞属性的新特定节点的* 子节点 *。Godot具有各种碰撞类型节点，具体取决于使用"
"情况（请参阅： ref：`Physics introduction <doc_physics_introduction>`。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:145
msgid ""
"Question: What are the advantages of this system? Wouldn't this system "
"potentially increase the depth of the scene tree? Besides, Unity allows "
"organizing GameObjects by putting them in empty GameObjects."
msgstr ""
"问题：这个系统的优点是什么？这个系统不会增加场景树的深度吗？此外，Unity允许通"
"过将 GameObjects 放置在空的 GameObjects 中来组织他们。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:147
#, fuzzy
msgid ""
"First, this system is closer to the well-known object-oriented paradigm: "
"Godot provides a number of nodes which are not clearly \"Game Objects\", but "
"they provide their children with their own capabilities: this is inheritance."
msgstr ""
"首先，这个系统更接近于众所周知的面向对象的标准： Godot 提供了许多不清楚“游戏"
"对象”的节点，但它们为子节点提供了自己本身的功能：这就是继承。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:148
#, fuzzy
msgid ""
"Second, it allows the extraction a subtree of the scene to make it a scene "
"of its own, which answers the second and third questions: even if a scene "
"tree gets too deep, it can be split into smaller subtrees. This also allows "
"a better solution for reusability, as you can include any subtree as a child "
"of any node. Putting multiple nodes in an empty GameObject in Unity does not "
"provide the same possibility, apart from a visual organization."
msgstr ""
"其次，它允许抽出场景的一个子树使其成为它自己的一个场景，这回答了第二个和第三"
"个问题：即使场景树变得太深，它也可以拆分成更小的子树。这也提供了有着可重用性"
"的更好的解决方案，因为您可以将任何子树作为任何节点的子节点。除了可视化组织"
"外，将多个节点放入Unity中的空 GameObject 中并不能提供相同的可能性。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:151
#, fuzzy
msgid ""
"These are the most important concepts you need to remember: \"node\", "
"\"parent node\", and \"child node\"."
msgstr "这些是你需要记住的最重要的概念：“节点”，“父节点”和“子节点”。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:155
msgid "Project organization"
msgstr "项目组织"

#: ../../docs/getting_started/editor/unity_to_godot.rst:159
msgid ""
"We previously observed that there is no perfect solution to set a project "
"architecture. Any solution will work for Unity and Godot, so this point has "
"a lesser importance."
msgstr ""
"我们之前观察到，没有完美的设置项目体系结构的解决方案。 任何解决方案都适用于 "
"Unity 和 Godot ，所以这一点不太重要。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:162
#, fuzzy
msgid ""
"However, we often observe a common architecture for Unity projects, which "
"consists of having one Assets folder in the root directory that contains "
"various folders, one per type of asset: Audio, Graphics, Models, Materials, "
"Scripts, Scenes, etc."
msgstr ""
"但是，我们经常可以注意到Unity项目的一个通用体系结构，它包含一个在根目录中的"
"Assets文件夹，其中包含各种文件夹，每种资源类型各一个：音频，图形，模型，材"
"质，脚本，场景等。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:165
#, fuzzy
msgid ""
"As described before, the Godot scene system allows splitting scenes into "
"smaller scenes. Since each scene and subscene is actually one scene file in "
"the project, we recommend organizing your project a bit differently. This "
"wiki provides a page for this: :ref:`doc_project_organization`."
msgstr ""
"如前所述，Godot场景系统允许将场景切割成更小的场景。 由于每个场景和子场景实际"
"上都是项目中的一个场景文件，因此我们建议用不同的方法组织你的项目。 这个wiki为"
"此提供了一个页面：：ref：`doc_project_organization`。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:171
msgid "Where are my prefabs?"
msgstr "我的预制体在哪里？"

#: ../../docs/getting_started/editor/unity_to_godot.rst:173
msgid ""
"The concept of prefabs as provided by Unity is a 'template' element of the "
"scene. It is reusable, and each instance of the prefab that exists in the "
"scene has an existence of its own, but all of them have the same properties "
"as defined by the prefab."
msgstr ""
"Unity 提供的预制体的概念是场景的“模板”元素。 它是可重复使用的，并且场景中存在"
"的预制体的每个实例都有其自己的存在，但它们都具有与预制体所定义的相同的属性。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:177
#, fuzzy
msgid ""
"Godot does not provide prefabs as such, but this functionality is here, "
"again, filled thanks to its scene system: As we saw the scene system is "
"organized as a tree. Godot allows you to save a subtree of a scene as its "
"own scene, thus saved into its own file. This new scene can then be "
"instanced as many times as you want. Any change you make to this new, "
"separate scene will be applied to its instances. However, any change you "
"make to the instance will not have any impact on the 'template' scene."
msgstr ""
"Godot不提供这样的预制体，但它的功能由它的场景系统所弥补：正如我们所看到的，场"
"景系统由一棵树组成。 Godot 允许你将场景的一个子树保存为自己的场景，并保存在自"
"己的文件中。这个新场景可以随意多次实例化。您对这个新的独立场景所做的任何更改"
"都将应用于其实例。但是，对实例所做的任何更改都不会对“模板”场景产生任何影响。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:185
#, fuzzy
msgid ""
"To be precise, you can modify the parameters of the instance in the "
"Inspector panel. However, the nodes that compose this instance are locked "
"although you can unlock them if you need to by right-clicking the instance "
"in the Scene tree and selecting \"Editable children\" in the menu. You don't "
"need to do this to add new children nodes to this node, but it is possible. "
"Remember that these new children will belong to the instance, not the "
"'template' scene. If you want to add new children to all the instances of "
"your 'template' scene, then you need to add them in the 'template' scene."
msgstr ""
"确切地说，你可以在 Inspector 面板中修改实例的参数。但是，组成此实例的节点已锁"
"定，如果有必要请右键单击“场景”树中的实例并在菜单中选择“可编辑的子项”，即可以"
"解锁它们。 您不需要这样做来为此节点添加新的子节点，但请记住，这些新子节点将属"
"于该实例，而不是“模板”场景。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:195
msgid "Glossary correspondence"
msgstr "术语对应"

#: ../../docs/getting_started/editor/unity_to_godot.rst:197
msgid ""
"GameObject -> Node Add a component -> Inheriting Prefab -> Externalized "
"branch"
msgstr "GameObject - >节点 添加组件 - >继承 预制体 - >外化分支"

#: ../../docs/getting_started/editor/unity_to_godot.rst:203
msgid "Scripting: GDScript, C# and Visual Script"
msgstr "脚本：GDScript ，C＃ 和 Visual Script"

#: ../../docs/getting_started/editor/unity_to_godot.rst:206
msgid "Design"
msgstr "设计"

#: ../../docs/getting_started/editor/unity_to_godot.rst:208
msgid ""
"As you may know already, Unity supports C#. C# benefits from its integration "
"with Visual Studio and other features, such as static typing."
msgstr ""
"如你所知，Unity 支持 C#。C# 从与 Visual Studio 集成中受益和其他的功能中受益，"
"例如静态类型。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:210
#, fuzzy
msgid ""
"Godot provides its own scripting language, :ref:`GDScript <doc_scripting>` "
"as well as support for :ref:`Visual Script <toc-learn-scripting-"
"visual_script>` and :ref:`C# <doc_c_sharp>`. GDScript borrows its syntax "
"from Python, but is not related to it. If you wonder about the reasoning for "
"a custom scripting language, please read the :ref:`doc_gdscript` and :ref:"
"`doc_faq` pages. GDScript is strongly attached to the Godot API and is "
"really easy to learn: Between one evening for an experienced programmer and "
"a week for a complete beginner."
msgstr ""
"Godot提供了自己的脚本语言：ref：`GDScript <doc_scripting>` ，并且支持：ref："
"`Visual Script <toc-learn-scripting-visual_script>`和：ref：`C＃"
"<doc_c_sharp>`。 GDScript 从 Python 中借用了它的语法，但与它无关。如果您想知"
"道自定义脚本语言的原因，请阅读：ref：`GDScript <doc_gdscript>`和`FAQ <faq>`_ "
"pages。GDScript 非常依赖于Godot API，但它的确很容易学习：一个有经验的程序员一"
"个晚上就能学会，一个真正的初学者也只需一个星期。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:216
#, fuzzy
msgid ""
"Unity allows you to attach as many scripts as you want to a GameObject. Each "
"script adds a behaviour to the GameObject: For example, you can attach a "
"script so that it reacts to the player's controls, and another that controls "
"its specific game logic."
msgstr ""
"Unity允许您将任意数量的脚本添加到 GameObject 上。每个脚本都会向 GameObject 添"
"加一个行为：例如，你可以添加一个脚本，以便它对玩家的控制作出反应，而另一个脚"
"本控制其特定的游戏逻辑。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:220
#, fuzzy
msgid ""
"In Godot, you can only attach one script per node. You can use either an "
"external GDScript file or include the script directly in the node. If you "
"need to attach more scripts to one node, then you may consider two "
"solutions, depending on your scene and on what you want to achieve:"
msgstr ""
"在Godot中，每个节点只能附加一个脚本。您可以使用外部 GDScript 文件，也可以直接"
"将其包含在节点中。如果您需要将更多脚本附加到一个节点上，那么您可以考虑这两种"
"解决方案，具体取决于您的场景以及您想实现的目标："

#: ../../docs/getting_started/editor/unity_to_godot.rst:224
msgid ""
"either add a new node between your target node and its current parent, then "
"add a script to this new node."
msgstr ""
"在目标节点和其当前父节点之间添加一个新节点，然后向该新节点添加一个脚本。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:225
#, fuzzy
msgid ""
"or, you can split your target node into multiple children and attach one "
"script to each of them."
msgstr "或者，您可以将您的目标节点分成多个子节点并为其中的每一个添加一个脚本。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:227
#, fuzzy
msgid ""
"As you can see, it can be easy to turn a scene tree to a mess. This is why "
"it is important to have a real reflection and consider splitting a "
"complicated scene into multiple, smaller branches."
msgstr ""
"正如你所看到的，把场景树变成一团糟可能很容易。 这就是拥有一个真正的反射的重要"
"性，并且考虑把一个复杂的场景分成多个小的分支。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:231
#, fuzzy
msgid "Connections: groups and signals"
msgstr "连接：组和信号"

#: ../../docs/getting_started/editor/unity_to_godot.rst:233
#, fuzzy
msgid ""
"You can control nodes by accessing them using a script and calling functions "
"(built-in or user-defined) on them. But there's more: You can also place "
"them in a group and call a function on all nodes contained in this group! "
"This is explained in :ref:`this page <doc_scripting_continued>`."
msgstr ""
"您可以通过使用脚本访问它们来控制节点，并调用它们上的函数（内置的或用户定义"
"的）。但还有：你也可以将它们放在一个组中，并调用一个在该组中包含的所有节点上"
"的函数！解释如下：ref：`this page <doc_scripting_continued>`。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:237
#, fuzzy
msgid ""
"But there's more! Certain nodes throw signals when certain actions happen. "
"You can connect these signals to call a specific function when they happen. "
"Note that you can define your own signals and send them whenever you want. "
"This feature is documented `here <../scripting/gdscript/gdscript_basics."
"html#signals>`_."
msgstr ""
"但还有！ 某些节点在某些操作发生时会抛出信号。您可以连接这些信号以便在触发的时"
"候来调用特定的函数。请注意，您可以定义自己的信号并随时发送。这个功能记录在这"
"里<gdscript.html＃signals>`_。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:243
#, fuzzy
msgid "Script Serialization"
msgstr "精灵动画"

#: ../../docs/getting_started/editor/unity_to_godot.rst:245
msgid "Unity can handle script serialization in two ways:"
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:247
msgid ""
"Implicit: All public fields in a class are automatically serialized if the "
"type is a serializable type (``Dictionary`` is not serializable)."
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:248
msgid ""
"Explicit: Non-public fields can be serialized using the ``[SerializeField]`` "
"attribute."
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:250
msgid ""
"Godot also has a built-in script serialization system, but it works only "
"explicitly. You can serialize any serializable type (:ref:`built-in and "
"various engine types <doc_binary_serialization_api>`, including :ref:"
"`class_Array` and :ref:`class_Dictionary`) using the ``export`` keyword. "
"This workflow is explained `here <../scripting/gdscript/gdscript_basics."
"html#exports>`_."
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:254
msgid ""
"Unity also has a data type called ``ScriptableObject`` used to serialize "
"custom asset objects. Its equivalent in Godot is the base class for all "
"resources: :ref:`class_Resource`. Creating a script that inherits :ref:"
"`class_Resource` will allow you to create custom serializable objects. More "
"information about resources can be found :ref:`here <doc_resources>`."
msgstr ""

#: ../../docs/getting_started/editor/unity_to_godot.rst:259
msgid "Using Godot in C++"
msgstr "在 Godot 中使用 C++"

#: ../../docs/getting_started/editor/unity_to_godot.rst:261
#, fuzzy
msgid ""
"For your information, Godot also allows you to develop your project directly "
"in C++ by using its API, which is not possible with Unity at the moment. As "
"an example, you can consider Godot Engine's editor as a \"game\" written in C"
"++ using Godot API."
msgstr ""
"供您参考，Godot 还允许您直接使用其 API 和 C ++ 来开发项目，而目前这不适用于 "
"Unity 。 例如，您可以将 Godot 引擎的编辑器视为使用 Godot API 用C ++编写的“游"
"戏”。"

#: ../../docs/getting_started/editor/unity_to_godot.rst:263
msgid ""
"If you are interested in using Godot in C++, you may want to start reading "
"the :ref:`Developing in C++ <doc_introduction_to_godot_development>` page."
msgstr ""
"如果您有兴趣在 Godot 中使用 C ++，您可能需要阅读：ref：`用C ++开发"
"<doc_introduction_to_godot_development>`页面。"
