# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 10:56+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:4
msgid "Command line tutorial"
msgstr "命令行教程"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:8
msgid ""
"Some developers like using the command line extensively. Godot is designed "
"to be friendly to them, so here are the steps for working entirely from the "
"command line. Given the engine relies on almost no external libraries, "
"initialization times are pretty fast, making it suitable for this workflow."
msgstr ""
"一些开发人员喜欢广泛使用命令行。 Godot 被设计为对他们友好，所以这里是完全用命"
"令行工作的步骤。 鉴于引擎几乎没有依赖于外部库，所以初始化时间非常快，使得其适"
"用于此工作流程。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:15
msgid "Path"
msgstr "路径"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:17
msgid ""
"It is recommended that your Godot binary be in your PATH environment "
"variable, so it can be executed easily from any place by typing ``godot``. "
"You can do so on Linux by placing the Godot binary in ``/usr/local/bin`` and "
"making sure it is called ``godot``."
msgstr ""
"建议您的 Godot 二进制文件位于PATH环境变量中，因此可以通过输入 ``godot`` 从任"
"意位置轻松执行它。 您可以在Linux上通过将Godot二进制文件放入``/ usr / local / "
"bin``中并确保它被命名为``godot``来实现。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:23
msgid "Setting the project path"
msgstr "设置项目路径"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:25
msgid ""
"Depending on where your Godot binary is located and what your current "
"working directory is, you may need to set the path to your project for any "
"of the following commands to work correctly."
msgstr ""
"根据您的 Godot 二进制文件所在的位置以及您当前的工作目录，您可能需要将项目路径"
"设置为以下任一命令才能正常工作。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:29
msgid ""
"This can be done by giving the path to the ``project.godot`` file of your "
"project as either the first argument, like this:"
msgstr ""
"这需要通过将项目的`` project.godot ``文件的路径作为第一个参数来实现，如下所"
"示:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:36
msgid "Or by using the ``--path`` argument:"
msgstr "或者使用 ``--path`` 参数:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:42
msgid ""
"For example, the full command for exporting your game (as explained below) "
"might look like this:"
msgstr "例如，用于导出游戏的完整命令(如下所述)可能看上去是这样的:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:49
msgid "Creating a project"
msgstr "创建一个项目"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:52
msgid ""
"Creating a project from the command line can be done by navigating the shell "
"to the desired place and making a project.godot file."
msgstr ""
"从命令行创建一个项目非常简单，只需将shell导航到所需的位置，并创建 project."
"godot 文件，即使其为空的。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:63
msgid "The project can now be opened with Godot."
msgstr "现在可以使用Godot打开该项目。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:67
msgid "Running the editor"
msgstr "运行编辑器"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:69
msgid ""
"Running the editor is done by executing Godot with the ``-e`` flag. This "
"must be done from within the project directory or a subdirectory, otherwise "
"the command is ignored and the project manager appears."
msgstr ""
"运行编辑器是通过用 ``-e`` 标志执行Godot来完成的。 这必须在项目目录或子目录内"
"完成，否则该命令将被忽略并显示项目管理器。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:77
msgid ""
"If a scene has been created and saved, it can be edited later by running the "
"same code with that scene as argument."
msgstr ""
"如果已经创建并保存了一个场景，它可以通过运行把场景作为参数的同样的代码来进行"
"编辑。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:85
msgid "Erasing a scene"
msgstr "删除一个场景"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:87
msgid ""
"Godot is friends with your filesystem and will not create extra metadata "
"files. Use ``rm`` to erase a scene file. Make sure nothing references that "
"scene or else an error will be thrown upon opening."
msgstr ""
"Godot对您的文件系统非常友好，不会创建额外的元数据文件，只需使用 ``rm`` 来删除"
"文件。 确保没有对该场景的引用，否则在打开时会抛出错误。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:96
msgid "Running the game"
msgstr "运行游戏"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:98
msgid ""
"To run the game, simply execute Godot within the project directory or "
"subdirectory."
msgstr "要运行游戏，只需在项目目录或子目录中执行 Godot 即可。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:105
msgid ""
"When a specific scene needs to be tested, pass that scene to the command "
"line."
msgstr "当需要测试特定的场景时，将该场景传递给命令行。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:113
msgid "Debugging"
msgstr "调试"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:115
msgid ""
"Catching errors in the command line can be a difficult task because they "
"just fly by. For this, a command line debugger is provided by adding ``-d``. "
"It works for running either the game or a simple scene."
msgstr ""
"捕捉命令行中的错误可能是一项艰巨的任务，因为它们一闪而过。 为此，通过添加 ``-"
"d`` 来提供命令行调试器。 它适用于运行游戏或简单的场景。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:130
msgid "Exporting"
msgstr "导出"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:132
msgid ""
"Exporting the project from the command line is also supported. This is "
"especially useful for continuous integration setups. The version of Godot "
"that is headless (server build, no video) is ideal for this."
msgstr ""
"从命令行导出项目也被支持。 这对建构持续集成特别有用。 headless的Godot版本(服"
"务器版本，无视频)对此非常理想。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:141
msgid ""
"The platform names recognized by the ``--export`` switch are the same as "
"displayed in the export wizard of the editor. To get a list of supported "
"platforms from the command line, try exporting to a non-recognized platform "
"and the full listing of platforms your configuration supports will be shown."
msgstr ""
"由 ``--export`` 开关识别的平台名称要与编辑器的导出向导中显示的相同。 要从命令"
"行获取受支持平台的列表，只需尝试导出到未识别的平台，然后就会显示配置支持的完"
"整平台列表。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:147
msgid ""
"To export a debug version of the game, use the ``--export-debug`` switch "
"instead of ``--export``. Their parameters and usage are the same."
msgstr ""
"要导出游戏的调试版本，请使用 ``--export-debug`` 开关而不是 ``--export`` 。 他"
"们的参数和用法是相同的。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:151
msgid "Running a script"
msgstr "运行脚本"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:153
msgid ""
"It is possible to run a simple .gd script from the command line. This "
"feature is especially useful in large projects, for batch conversion of "
"assets or custom import/export."
msgstr ""
"可以从命令行运行简单的 .gd 脚本。 此功能在非常大的项目中特别有用，可用于批量"
"转换资源或自定义导入/导出。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:157
msgid "The script must inherit from SceneTree or MainLoop."
msgstr "该脚本必须继承了场景树或主循环。"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:159
msgid "Here is a simple example of how it works:"
msgstr "下面是一个简单的示例，说明它是如何工作的:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:170
msgid "And how to run it:"
msgstr "以及如何运行它:"

#: ../../docs/getting_started/editor/command_line_tutorial.rst:177
msgid ""
"If no project.godot exists at the path, current path is assumed to be the "
"current working directory (unless ``-path`` is specified)."
msgstr ""
"如果路径中不存在 project.godot ，则假定当前路径是当前工作目录(除非指定了 ``-"
"path`` 参数)。"
