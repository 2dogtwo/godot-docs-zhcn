# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 14:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:4
msgid "Instancing (continued)"
msgstr "实例化(续)"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:7
msgid "Recap"
msgstr "概要"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:9
msgid "Instancing has many handy uses. At a glance, with instancing you have:"
msgstr "实例化有许多方便的用途. 一目了然, 通过实例化您拥有:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:11
msgid "The ability to subdivide scenes and make them easier to manage."
msgstr "细分场景, 使它们更易于管理的能力."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:12
msgid "A tool to manage and edit multiple node instances at once."
msgstr "一种同时管理和编辑多个节点实例的工具."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:13
msgid ""
"A way to organize and embed complex game flows or even UIs (in Godot, UI "
"Elements are nodes, too)."
msgstr "一种组织和嵌入复杂游戏流甚至UI(在Godot中,UI元素也是节点)的方式."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:17
msgid "Design language"
msgstr "设计语言"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:19
msgid ""
"But the greatest strength that comes with instancing scenes is that it works "
"as an excellent design language. This distinguishes Godot from all the other "
"engines out there. Godot was designed from the ground up around this concept."
msgstr ""
"但实例化场景带来的最大优势在于它可以作为一种优秀的设计语言. 这将Godot与其它所"
"有引擎区分开来.Godot就是围绕这个概念从头开始设计的."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:24
msgid ""
"When making games with Godot, the recommended approach is to dismiss most "
"common design patterns, such as MVC or Entity-Relationship diagrams, and "
"instead think about your scenes in a more natural way. Start by imagining "
"the visible elements in your game, the ones that can be named not just by a "
"programmer, but by anyone."
msgstr ""
"在使用Godot制作游戏时, 推荐的方法是忽略大多数常见的设计模式, 如MVC或实体关系"
"图, 而是以更自然的方式思考场景. 首先想象一下游戏中可见的元素, 这些元素可以由"
"任何人而非仅仅是由程序员命名."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:30
msgid "For example, here's how a simple shooter game could be imagined:"
msgstr "例如, 这是一个简单的射击游戏可以想象的方式:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:34
msgid ""
"You can come up with a diagram like this for almost any kind of game. Write "
"down the parts of the game that you can visualize, and then add arrows to "
"represent ownership of one component by another."
msgstr ""
"对于几乎任何类型的游戏, 都可以想出这样的图表. 写下游戏可以看见的部分, 然后添"
"加箭头以表示组件之间的从属关系."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:38
msgid ""
"Once you have a diagram like this, the recommended process for making a game "
"is to create a scene for each element listed in the diagram. You'll use "
"instancing (either by code or directly in the editor) for the ownership "
"relationships."
msgstr ""
"一旦得到这样的图, 制作游戏的推荐过程就是为图中列出的每个元素创建一个场景. 使"
"用实例化(通过代码或直接在编辑器中)实现从属关系."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:42
msgid ""
"A lot of time spent in programming games (or software in general) is on "
"designing an architecture and fitting game components to that architecture. "
"Designing based on scenes replaces that approach and makes development much "
"faster and more straightforward, allowing you to concentrate on the game "
"logic itself. Because most game components map directly to a scene, using a "
"design based on scene instantiation means little other architectural code is "
"needed."
msgstr ""
"在编程游戏(或一般软件)上花费的大量时间主要用于设计架构并使游戏组件适合该架"
"构. 基于场景的设计取代了这种方法, 使开发更快, 更直接, 允许专注于游戏逻辑本"
"身. 因为大多数游戏组件直接映射到场景, 所以使用基于场景实例化的设计意味着需要"
"很少的其他架构代码."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:48
msgid ""
"Let's take a look at one more, somewhat more complex, example of an open-"
"world type game with lots of assets and nested elements:"
msgstr "我们来看看另一个更复杂的开放世界类游戏的示例, 它有很多素材和嵌套元素:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:53
msgid ""
"Take a look at the room element. Let's say we started there. We could make a "
"couple of different room scenes, with different arrangements of furniture "
"(also scenes) in them. Later, we could make a house scene, connecting rooms "
"to make up its interior."
msgstr ""
"看看房间(Room)元素. 比方说, 我们从这里开始. 可以制作几个不同的房间场景, 其中"
"包括不同的家具(也包括场景). 之后, 可以制作房屋(House)场景, 连通房间以构成其内"
"部."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:58
msgid ""
"Then, we could make a citadel scene, which is made out of many instanced "
"houses. Then, we could start working on the world map terrain, adding the "
"citadel onto it."
msgstr ""
"然后, 可以制作一个由许多实例化的房屋组成的城堡(Citadel)场景. 接着, 可以开始做"
"世界地图地形(Terrain), 并将城堡添加进去."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:62
msgid ""
"Later, we could create scenes that represent guards (and other NPCs) and add "
"them to the citadel as well. As a result, they would be indirectly added to "
"the overall game world."
msgstr ""
"之后, 可以创建代表守卫(和其他NPC)的场景, 并将它们添加到城堡中. 因此, 它们将间"
"接地添加到整个游戏世界中."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:66
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instance more scenes. Furthermore, the editor UI is "
"designed to be user friendly for programmers and non-programmers alike. A "
"typical team development process can involve 2D or 3D artists, level "
"designers, game designers, and animators, all working with the editor "
"interface."
msgstr ""
"使用Godot, 就可以很容易地像这样迭代您的游戏, 因为您需要做的就是创建和实例化更"
"多的场景. 编辑器UI也被设计成对程序员和非程序员一样友好. 一个典型的团队开发过"
"程会涉及2D或3D美术工作者, 关卡设计师, 游戏设计师, 和动画师, 他们都可以这个编"
"辑器界面工作."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:73
msgid "Information overload!"
msgstr "信息超载！"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:75
msgid ""
"This has been a lot of high level information dropped on you all at once. "
"However, the important part of this tutorial was to create an awareness of "
"how scenes and instancing are used in real projects."
msgstr ""
"很多进阶的信息全部同时掉到了你身上. 然而, 本教程最重要部分是建立一个如何在实"
"际项目中使用场景和实例化的意识."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:79
msgid ""
"Everything discussed here will become second nature to you once you start "
"making games and putting these concepts into practice. For now, don't worry "
"about it too much, and go on to the next tutorial!"
msgstr ""
"一旦开始制作游戏并将这些概念付诸实践, 这里讨论的所有内容都将成为你的第二天"
"性. 现在, 不要太担心, 继续下一个教程！"
