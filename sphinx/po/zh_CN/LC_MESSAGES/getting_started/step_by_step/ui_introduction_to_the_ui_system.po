# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 14:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:4
msgid "Design interfaces with the Control nodes"
msgstr "使用 ``Control`` 节点设计界面"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:6
msgid ""
"Computer displays, mobile phones, and TV screens come in all shapes and "
"sizes. To ship a game, you'll need to support different screen ratios and "
"resolutions. It can be hard to build responsive interfaces that adapt to all "
"platforms. Thankfully, Godot comes with robust tools to design and manage a "
"responsive User Interface."
msgstr ""
"电脑显示器, 手机, 和电视屏幕有各种形状和尺寸. 要发布一款游戏, 要发布游戏, 您"
"需要支持不同的屏幕比例和分辨率. 构建适应所有平台的响应式接口可能很困难. 值得"
"庆幸的是,Godot附带了功能强大的工具, 可以设计和管理响应式用户界面."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:14
msgid "Godot's editor is made with the engine's UI framework"
msgstr "Godot的编辑器由引擎的UI框架制成"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:16
msgid "This guide will get you started with UI design. You will learn:"
msgstr "本指南将帮助您开始进行UI设计. 你将学习:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:18
msgid "The five most useful control nodes to build your games' interface"
msgstr "建立游戏界面的五个最有用的控制节点"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:19
msgid "How to work with the anchor of UI elements"
msgstr "如何使用UI元素的锚点"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:20
msgid ""
"How to efficiently place and arrange your user interface using containers"
msgstr "如何使用容器有效地放置和排列用户界面"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:22
msgid ""
"The five most common containers (you can learn more about containers in the :"
"ref:`GUI Containers <doc_gui_containers>` documentation page)."
msgstr ""
"五个最常用的容器(您可以在 :ref:`GUI 容器 <doc_gui_containers>` 文档页面中, 了"
"解有关容器的更多信息)."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:25
msgid ""
"To learn how to control the interface and connect it to other scripts, read :"
"ref:`Build your first game UI in Godot <doc_ui_game_user_interface>`."
msgstr ""
"要了解如何控制界面并将其连接到其他脚本, 请阅读: :ref:`在Godot中构建您的第一个"
"游戏UI <doc_ui_game_user_interface>`."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:28
msgid ""
"To design your UI, you'll use the Control nodes. These are the nodes with "
"green icons in the editor. There are dozens of them, for creating anything "
"from life bars to complex applications. Godot's editor itself is built using "
"Control nodes."
msgstr ""
"要设计UI, 您将使用 ``Control`` 节点. 这些就是编辑器中带有绿色图标的节点. 它们"
"有数十种, 可用于创建从生命条到复杂应用程序的所有内容.Godot的编辑器本身是使用 "
"``Control`` 节点构建的."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:32
msgid ""
"Control nodes have unique properties that allow them to work well with one "
"another. Other visual nodes, like Node2D and Sprite don't have these "
"capabilities. So to make your life easier use Control nodes wherever "
"possible when building your UIs."
msgstr ""
"``Control`` 节点具有独特的属性, 使它们能很好地相互协作. 其他可视节点(如 "
"``Node2D`` 和 ``Sprite``)没有这些功能. 因此, 为了使您的生活更轻松, 请在构建UI"
"时尽可能使用 ``Control`` 节点."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:36
msgid "All control nodes share the same main properties:"
msgstr "所有 ``Control`` 节点具有相同的主要属性:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:38
msgid "Anchor"
msgstr "锚"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:39
msgid "Bounding rectangle"
msgstr "边界矩形"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:40
msgid "Focus and focus neighbor"
msgstr "焦点和焦点邻居"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:41
msgid "Size flags"
msgstr "大小标志"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:42
msgid "Margin"
msgstr "边距"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:43
msgid "The optional UI theme"
msgstr "可选的UI主题"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:45
msgid ""
"Once you understand the basics of the Control node, it will take you less "
"time to learn all the nodes that derive from it."
msgstr ""
"一旦了解了 ``Control`` 节点的基础知识, 您将花费更少的时间来学习从其派生的所有"
"节点."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:50
msgid "The 5 most common UI elements"
msgstr "5个最常见的UI元素"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:52
msgid ""
"Godot ships with dozens of Control nodes. A lot of them are here to help you "
"build editor plugins and applications."
msgstr ""
"Godot附带了数十个 ``Control`` 节点. 这里有很多插件可以帮助您构建编辑器插件和"
"应用程序."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:55
msgid ""
"For most games, you'll only need five types of UI elements, and a few "
"Containers. These five Control nodes are:"
msgstr ""
"对于大多数游戏, 您只需要五种类型的UI元素和一些容器. 这五个 ``Control`` 节点"
"是:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:58
msgid "Label: for displaying text"
msgstr "``Label``: 用于显示文本"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:59
msgid ""
"TextureRect: used mostly for backgrounds, or everything that should be a "
"static image"
msgstr "``TextureRect``: 主要用于背景, 或应为静态图像的所有内容"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:61
msgid ""
"TextureProgress: for lifebars, loading bars, horizontal, vertical or radial"
msgstr "``TextureProgress``: 适用于生命条, 进度条, 水平杆, 垂直杆或径向杆"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:63
msgid "NinePatchRect: for scalable panels"
msgstr "``NinePatchRect``: 可缩放面板"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:64
msgid "TextureButton: to create buttons"
msgstr "``TextureButton``: 用于创建按钮"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:68
msgid "The 5 most common Control nodes for UI design"
msgstr "用于UI设计的5个最常见的 ``Control`` 节点"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:71
msgid "TextureRect"
msgstr "TextureRect"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:73
msgid ""
"**TextureRect** displays a texture or image inside a UI. It seems similar to "
"the Sprite node, but it offers multiple scaling modes. Set the Stretch Mode "
"property to change its behavior:"
msgstr ""
"**TextureRect** 在UI内显示纹理或图像. 它与Sprite节点类似, 但提供了多种缩放模"
"式, 设置拉伸模式属性可改变其行为:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:77
msgid ""
"``Scale On Expand (compat)`` scales the texture to fit the node's bounding "
"rectangle, only if ``expand`` property is ``true``; otherwise, it behaves "
"like ``Keep`` mode. Default mode for backwards compatibility."
msgstr ""
"``扩展缩放(兼容)(Scale On Expand (compat))`` 仅当 ``expand`` 属性为 ``true`` "
"时, 缩放纹理以适合节点的边界矩形； 否则, 其行为类似于 ``保持(Keep)`` 模式. 默"
"认模式用于向后兼容."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:80
msgid "``Scale`` scales the texture to fit the node's bounding rectangle."
msgstr "``缩放(Scale)`` 缩放纹理以适应节点的边界矩形."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:81
msgid "``Tile`` makes the texture repeat, but it won't scale."
msgstr "``平铺(Tile)`` 使纹理重复出现, 但不会缩放."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:82
msgid ""
"``Keep`` and ``Keep Centered`` force the texture to remain at its original "
"size, in the top left corner or the center of the frame respectively."
msgstr ""
"``保持(Keep)`` 和 ``保持居中(Keep Centered)`` 强制纹理保持其原始大小, 分别位"
"于框架的左上角或中心."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:85
msgid ""
"``Keep Aspect`` and ``Keep Aspect Centered`` scales the texture but force it "
"to remain its original aspect ratio, in the top left corner or the center of "
"the frame respectively."
msgstr ""
"``保持纵横比(Keep Aspect)`` 和 ``保持纵横比居中(Keep Aspect Centered)`` 可缩"
"放纹理, 但会强制其保持其原始纵横比, 分别位于框架的左上角或中心."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:87
msgid ""
"``Keep Aspect Covered`` works just like ``Keep Aspect Centered`` but the "
"shorter side fits the bounding rectangle and the other one clips to the "
"node's limits."
msgstr ""
"``保持纵横比覆盖(Keep Aspect Covered)`` 的工作方式与 ``保持纵横比居中`` 的一"
"样, 但较短的一侧适合边界矩形, 而另一侧则裁剪到节点的极限."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:90
msgid ""
"As with Sprite nodes, you can modulate the TextureRect's color. Click the "
"``Modulate`` property and use the color picker."
msgstr ""
"与 ``Sprite`` 节点一样, 您可以调制 ``TextureRect`` 的颜色. 点击 ``Modulate(调"
"制)`` 属性并使用颜色选择器."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:95
msgid "TextureRect modulated with a red color"
msgstr "用红色调制的 ``TextureRect``"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:98
msgid "TextureButton"
msgstr "纹理按钮(TextureButton)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:100
msgid ""
"**TextureButton** is like TextureRect, except it has 6 texture slots: one "
"for each of the button's states. Most of the time, you'll use the Normal, "
"Pressed, and Hover textures. Focused is useful if your interface listens to "
"the keyboard's input. The sixth image slot, the Click Mask, lets you define "
"the clickable area using a 1-bit, pure black and white image."
msgstr ""
"**纹理按钮** (TextureButton)类似于纹理矩形(TextureRect), 只不过它有6个纹理"
"槽: 每个纹理槽对应一个按钮的状态. 大多数时候, 会使用Normal(普通), Pressed(按"
"下)和Hover(悬停)纹理.Focused(聚焦)适用于监听键盘输入的界面.Click Mask(点击遮"
"罩)允许你使用1位的纯黑白图片定义可点击区域."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:107
msgid ""
"In the Base Button section, you'll find a few checkboxes that change how the "
"button behaves. When ``Toggle Mode`` is on, the button will toggle between "
"active and normal states when you press it. ``Disabled`` makes it disabled "
"by default, in which case it will use the ``Disabled`` texture. "
"TextureButton shares a few properties with the texture frame: it has a "
"``modulate`` property, to change its color, and ``Resize`` and ``Stretch`` "
"modes to change its scale behavior."
msgstr ""
"在 ``基本按钮(Base Button)`` 部分中, 您会发现一些复选框可以更改按钮的行为. "
"当 ``切换模式(Toggle Mode)`` 开启时, 当您按下该按钮时, 它将在活动状态和正常状"
"态之间切换.``禁用(Disabled)`` 会让它默认被禁用, 在这种情况下, 它会使用 ``禁用"
"(Disabled)`` 纹理.``纹理按钮(TextureButton)`` 与纹理框架共享一些属性: 它具有 "
"``Modulate(调制)`` 属性以更改其颜色, 并具有 ``调整大小(Resize)`` 和 ``拉伸"
"(Stretch)`` 模式以更改其缩放行为."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:117
msgid "TextureButton and its 5 texture slots"
msgstr "``TextureButton`` 及其5个纹理插槽"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:120
msgid "TextureProgress"
msgstr "TextureProgress"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:122
msgid ""
"**TextureProgress** layers up to 3 sprites to create a progress bar. The "
"Under and Over textures sandwich the Progress one, which displays the bar's "
"value."
msgstr ""
"**TextureProgress** 最多可以将3个精灵分层来创建一个进度条.Under和Over纹理将"
"Progress纹理夹在中间, 显示进度条的数值."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:126
msgid ""
"The ``Mode`` property controls the direction in which the bar grows: "
"horizontally, vertically, or radially. If you set it to radial, the "
"``Initial Angle`` and ``Fill Degrees`` properties let you limit the range of "
"the gauge."
msgstr ""
"``模式(Mode)`` 属性控制进度条的增长方向: 水平, 垂直或径向. 如果将其设置为径"
"向, 则可以使用 ``初始角度(Initial Angle)`` 和 ``填充度(Fill Degrees)`` 属性来"
"限制量规的范围."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:131
msgid ""
"To animate the bar, you'll want to look at the Range section. Set the "
"``Min`` and ``Max`` properties to define the range of the gauge. For "
"instance, to represent a character's life, you'll want to set ``Min`` to ``0,"
"`` and ``Max`` to the character's maximum life. Change the ``Value`` "
"property to update the bar. If you leave the ``Min`` and ``Max`` values to "
"the default of ``0`` and ``100,`` and set the ``Value`` property to ``40``, "
"40% of the ``Progress`` texture will show up, and 60% of it will stay hidden."
msgstr ""
"要动画化进度条, 您需要查看 ``Range`` 部分. 设置 ``Min`` 和 ``Max`` 属性来定义"
"量规的范围. 例如, 要表示角色的生命, 您需要将 ``Min`` 设置为 ``0``, 将 "
"``Max`` 设置为角色的最大生命. 更改 ``Value`` 属性以更新进度条. 如果将 "
"``Min`` 和 ``Max`` 的值设置为 ``0`` 和 ``100`` 的默认值, 并将 ``Value`` 属性"
"设置为 ``40``,``Progress`` 纹理的40%会显示,60%会隐藏."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:141
msgid "TextureProgress bar, two thirds filled"
msgstr "``TextureProgress`` 条, 三分之二填充"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:144
msgid "Label"
msgstr "标签"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:146
msgid ""
"**Label** prints text to the screen. You'll find all its properties in the "
"Label section, in the Inspector. Write the text in the ``Text`` property, "
"and check Autowrap if you want it to respect the textbox's size. If Autowrap "
"is off, you won't be able to scale the node. You can align the text "
"horizontally and vertically with Align and Valign, respectively."
msgstr ""
"**标签** 打印文本到屏幕. 您可以在检查器的标签部分中找到其所有属性. 将文本写"
"入 ``Text`` 属性中, 然后检查自动换行是否要遵守文本框的大小, 如果禁用自动包"
"裹, 则将无法缩放节点. 您可以分别使用Align和Valign将文本水平和垂直对齐."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:155
msgid "Picture of a Label"
msgstr "``Label`` 图片"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:158
msgid "NinePatchRect"
msgstr "九宫格纹理(NinePatchRect)"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:160
msgid ""
"**NinePatchRect** takes a texture split in 3 rows and 3 columns. The center "
"and the sides tile when you scale the texture, but it never scales the "
"corners. It is useful to build panels, dialog boxes and scalable backgrounds "
"for your UI."
msgstr ""
"**NinePatchRect** 将纹理分割成3行和3列. 缩放纹理时, 中心和侧面会平铺, 但不会"
"缩放角落. 为UI构建面板, 对话框和可伸缩的背景非常有用."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:167
msgid "NinePatchRect scaled with the min\\_size property"
msgstr "``NinePatchRect`` 使用 ``min_size`` 属性缩放"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:170
msgid "There are two workflows to build responsive UIs"
msgstr "有两个工作流程可以构建响应式UI"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:172
msgid ""
"There are two workflows to build scalable and flexible interfaces in Godot:"
msgstr "在Godot中, 有两个工作流程可构建可伸缩和灵活的界面:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:174
msgid ""
"**Place UI elements precisely with anchors:** Use the **Layout** menu to "
"place and resize a UI element relative to its parent."
msgstr ""
"**用锚点精确地放置UI元素:** 使用 **Layout** 菜单来放置和调整UI元素相对于其父"
"元素的大小."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:175
msgid ""
"**Arrange control nodes automatically with containers:** Use container nodes "
"to automatically scale and place UI elements."
msgstr ""
"**Arrange control nodes automatically with containers:** 使用容器节点自动缩放"
"和放置UI元素."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:177
msgid ""
"The two approaches are not always compatible. Because a container controls "
"its children, you cannot use the layout menu on them. Each container has a "
"specific effect, so you may need to nest several of them to get a working "
"interface. With the layout approach you work from the bottom up, on the "
"children. As you don't insert extra containers in the scene it can make for "
"cleaner hierarchies, but it's harder to arrange items in a row, column, "
"grid, etc."
msgstr ""
"这两种方法并不总是兼容的. 由于容器控制着其子项, 因此您无法在其上使用布局菜"
"单. 每个容器都有特定的作用, 因此您可能需要嵌套几个容器才能获得工作界面. 使用"
"布局方法时, 您将从下至上处理子级. 由于没有在场景中插入额外的容器, 所以层次结"
"构会更加清晰, 但是很难在行, 列, 栅格等中排列项."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:179
msgid ""
"As you create UIs for your games and tools, you'll develop a sense for what "
"fits best in each situation."
msgstr "在为游戏和工具创建UI时, 您将对每种情况下最合适的内容有所了解."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:183
msgid "Place UI elements precisely with anchors"
msgstr "用锚精确地放置UI元素"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:185
msgid ""
"Control nodes have a position and size, but they also have anchors and "
"margins. Anchors define the origin, or the reference point, for the Left, "
"Top, Right and Bottom edges of the node. Change any of the 4 anchors to "
"change the reference point of the margins."
msgstr ""
"``Control`` 节点有位置和大小, 但它们也有锚和边距. 锚定义节点的左, 上, 右和下"
"边缘的原点或参考点. 更改4个锚中的任何一个, 将更改边距的参考点."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:192
msgid "The anchor property"
msgstr "锚属性"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:195
msgid "How to change the anchor"
msgstr "如何更换锚"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:197
msgid ""
"Like any properties, you can edit the 4 anchor points in the Inspector, but "
"this is not the most convenient way. When you select a control node, the "
"layout menu appears above the viewport, in the toolbar. It gives you a list "
"of icons to set all 4 anchors with a single click, instead of using the "
"inspector's 4 properties. The layout menu will only show up when you select "
"a control node."
msgstr ""
"与任何属性一样, 您可以在属性检查器面板中编辑4个锚点, 但这不是最方便的方法. 选"
"择控制节点后, 布局菜单将出现在视图上方的工具栏中. 它为您提供了一个图标列表, "
"在此通过单击就可以设置所有4个锚点, 而不必在属性检查器面板去设置4个属性. 仅当"
"选择控制节点时, 才会显示布局菜单."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:206
msgid "The layout menu in the viewport"
msgstr "视图中的布局菜单"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:209
msgid "Anchors are relative to the parent container"
msgstr "相对于父容器的锚"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:211
msgid ""
"Each anchor is a value between 0 and 1. For the left and top anchors, a "
"value of 0 means that without any margin, the node's edges will align with "
"the left and top edges of its parent. For the right and bottom edges, a "
"value of 1 means they'll align with the parent container's right and bottom "
"edges. On the other hand, margins represent a distance to the anchor "
"position in pixels, while anchors are relative to the parent container's "
"size."
msgstr ""
"每个锚都是0到1之间的值. 对于左侧和顶部锚点, 值0表示没有任何边距, 节点的边缘将"
"与其父节点的左侧和顶部边缘对齐. 对于右边缘和底边缘, 值为1表示它们将与父容器的"
"右边缘和底边缘对齐. 另一方面, 边距表示到锚点位置的距离(以像素为单位), 而锚点"
"是相对于父容器的大小."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:221
msgid ""
"Margins are relative to the anchor position, which is relative to the "
"anchors. In practice, you'll often let the container update margins for you"
msgstr "边距相对于相对于锚的锚位置. 在实践中, 您通常会让容器为您更新边距"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:226
msgid "Margins change with the anchor"
msgstr "边距随锚而变化"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:228
msgid ""
"Margins update automatically when you move or resize a control node. They "
"represent the distance from the control node's edges to its anchor, which is "
"relative to the parent control node or container. That's why your control "
"nodes should always be inside a container, as we'll see in a moment. If "
"there's no parent, the margins will be relative to the node's own bounding "
"Rectangle, set in the Rect section, in the inspector."
msgstr ""
"当您移动或调整控制节点的大小时, 边距会自动更新. 它们表示从控制节点的边缘到其"
"锚点的距离, 该锚点是相对于父控制节点或容器的. 这就是为什么您的控制节点应始终"
"位于容器内的原因, 我们稍后会看到. 如果没有父对象, 则边距将相对于属性检查器的"
"矩形部分中设置的, 即节点自己的边界矩形."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:238
msgid "Margins on a CenterContainer set to the \"Full Rect\" anchor"
msgstr "``CenterContainer`` 上的边距设置为 ``Full Rect(填充矩形)`` 锚点"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:240
msgid ""
"Try to change the anchors or nest your Control nodes inside Containers: the "
"margins will update. You'll rarely need to edit the margins manually. Always "
"try to find a container to help you first; Godot comes with nodes to solve "
"all the common cases for you. Need to add space between a lifebar and the "
"border of the screen? Use the MarginContainer. Want to build a vertical "
"menu? Use the VBoxContainer. More on these below."
msgstr ""
"尝试更改锚点或将 ``Control`` 节点嵌套在 ``Containers`` 中: 边距将更新. 您几乎"
"不需要手动编辑边距. 始终尝试先找到一个可以帮助您的容器；Godot带有节点, 可以为"
"您解决所有常见情况. 需要在生命条和屏幕边界之间添加空间？使用 "
"``VBoxContainer``. 更多关于这些的内容, 参见下文."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:249
msgid "Use size tags to change how UI elements fill the available space"
msgstr "使用大小标签来更改UI元素如何填充可用空间"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:251
msgid ""
"Every control node has Size Flags. They tell containers how the UI elements "
"should scale. If you add the \"Fill\" flag to the Horizontal or Vertical "
"property, the node's bounding box will take all the space it can, but it'll "
"respect its siblings and retain its size. If there are 3 TextureRect nodes "
"in an HBoxContainer, with the \"Fill\" flags on both axes, they'll each take "
"up to a third of the available space, but no more. The container will take "
"over the node and resize it automatically."
msgstr ""
"每个控制节点都有尺寸标志. 它们告诉容器UI元素应该如何缩放. 如果你在水平或垂直"
"属性上添加了 \"Fill \" 标志, 节点的边界框将占用所有的空间, 但它会尊重它的兄弟"
"姐妹并保留其尺寸. 如果在一个 HBoxContainer 中有 3 个 TextureRect 节点, 在两个"
"轴上都有 \"Fill\" 标志, 它们将各自占用三分之一的可用空间, 但不会超过. 容器将"
"接管该节点并自动调整其大小."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:261
msgid "3 UI elements in an HBoxContainer, they align horizontally"
msgstr "``HBoxContainer`` 中的3个UI元素, 它们是水平对齐的"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:263
msgid ""
"The \"Expand\" flag lets the UI element take all the space it can, and push "
"against its siblings. Its bounding rectangle will grow against the edges of "
"its parent, or until it's blocked by another UI node."
msgstr ""
"``Expand(展开)`` 标志允许UI元素获得它所能获得的所有空间, 并推动其兄弟元素. 它"
"的边界矩形将沿其父对象的边缘增长, 或直到它被另一个UI节点阻止为止."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:269
msgid ""
"The same example as above, but the center node has the \"Expand\" size flag"
msgstr "与上面的示例相同, 但是中心节点有 ``Expand(展开)`` 大小标志"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:272
msgid ""
"You'll need some practice to understand the size tags, as their effect can "
"change quite a bit depending on how you set up your interface."
msgstr ""
"您需要进行一些练习来理解大小标签, 因为它们的效果可能会根据您设置界面的方式而"
"发生很大变化."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:276
msgid "Arrange control nodes automatically with containers"
msgstr "使用容器自动排列控制节点"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:278
msgid ""
"Containers automatically arrange all children Control nodes including other "
"containers in rows, columns, and more. Use them to add padding around your "
"interface or center nodes in their bounding rectangles. All built-in "
"containers update in the editor, so you can see the effect instantly."
msgstr ""
"容器会自动排列所有子控件节点, 包括行, 列等中的其他容器. 使用它们在边界矩形的"
"界面或中心节点周围添加 ``填充(padding)``. 所有内置容器都会在编辑器中更新, 因"
"此您可以立即看到效果."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:284
msgid ""
"Containers have a few special properties to control how they arrange UI "
"elements. To change them, navigate down to the Custom Constants section in "
"the Inspector."
msgstr ""
"容器具有一些特殊的属性来控制它们如何排列UI元素. 要更改它们, 请导航至属性检查"
"器中的 ``自定义常量`` 部分."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:289
msgid "The 5 most useful containers"
msgstr "5个最有用的容器"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:291
msgid ""
"If you build tools, you might need all of the containers. But for most "
"games, a handful will be enough:"
msgstr ""
"如果您构建工具, 您可能需要所有的容器. 但是对于大多数游戏来说, 只需几个就足够"
"了:"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:294
msgid "MarginContainer, to add margins around parts of the UI"
msgstr "MarginContainer边缘容器, 以在部分UI周围添加边缘"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:295
msgid "CenterContainer, to center its children in its bounding box"
msgstr "``CenterContainer``, 将其子项放在其边界框中"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:296
msgid ""
"VboxContainer and HboxContainer, to arrange UI elements in rows or columns"
msgstr "``VboxContainer`` 和 ``HboxContainer``, 用于在行或列中排列UI元素"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:298
msgid "GridContainer, to arrange Controls nodes in a grid-like pattern"
msgstr "``GridContainer``, 以栅格状模式排列 ``Controls`` 节点"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:300
msgid ""
"CenterContainer centers all its children inside of its bounding rectangle. "
"It's one you typically use for title screens, if you want the options to "
"stay in the center of the viewport. As it centers everything, you'll often "
"want a single container nested inside it. If you use textures and buttons "
"instead, they'll stack up."
msgstr ""
"``CenterContainer`` 将其所有子项居中于其边界矩形内. 如果希望这些选项停留在视"
"图的中心, 通常使用它作为标题屏幕. 当它使所有内容居中时, 您通常会希望在其中嵌"
"套一个容器. 如果改用纹理和按钮对象, 它们会堆积在一起."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:308
msgid ""
"CenterContainer in action. The life bar centers inside its parent container."
msgstr "``CenterContainer`` 的作用. 生命条位于它的父容器内部."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:311
msgid ""
"The MarginContainer adds a margin on any side of the child nodes. Add a "
"MarginContainer that encompasses the entire viewport to add a separation "
"between the edge of the window and the UI. You can set a margin on the top, "
"left, right, or bottom side of the container. No need to tick the checkbox: "
"click the corresponding value box and type any number. It will activate "
"automatically."
msgstr ""
"``MarginContainer`` 在子节点的任何一侧添加一个边距. 添加一个包含整个视图的 "
"``MarginContainer``, 以在窗口边缘和UI之间添加分隔. 您可以在容器的顶部, 左侧, "
"右侧, 或底部设置边距. 无需勾选该复选框: 点击相应的值框并输入任何数字. 它会自"
"动激活."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:320
msgid "The MarginContainer adds a 40px margin around the Game User Interface"
msgstr "``MarginContainer`` 在游戏用户界面周围添加了40px的边距"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:322
msgid ""
"There are two BoxContainers: VBoxContainer and HBoxContainer. You cannot add "
"the BoxContainer node itself, as it is a helper class, but you can use "
"vertical and horizontal box containers. They arrange nodes either in rows or "
"columns. Use them to line up items in a shop, or to build complex grids with "
"rows and columns of different sizes, as you can nest them to your heart's "
"content."
msgstr ""
"有两个 ``BoxContainer``:``VBoxContainer`` 和 ``HBoxContainer``. 您不能添加 "
"``BoxContainer`` 节点本身, 因为它是一个辅助类, 但是您可以使用垂直和水平框容"
"器. 它们将节点排列成行或列. 使用它们可以在商店中排列商品, 或使用大小不同的行"
"和列构建复杂的栅格, 因为您可以将它们嵌套在所需位置."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:331
msgid "The HBoxContainer horizontally aligns UI elements"
msgstr "``HBoxContainer`` 水平对齐UI元素"

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:333
msgid ""
"VBoxContainer automatically arranges its children into a column. It puts "
"them one after the other. If you use the separation parameter, it will leave "
"a gap between its children. HBoxContainer arranges UI elements in a row. "
"It's similar to the VBoxContainer, with an extra ``add_spacer`` method to "
"add a spacer control node before its first child or after its last child, "
"from a script."
msgstr ""
"``VBoxContainer`` 自动将其子级排列为一列. 它把它们一个接一个地放置. 如果使用"
"分离参数, 它将在其子级之间留有空隙.``HBoxContainer`` 将UI元素排列成一行. 它类"
"似于 ``VBoxContainer``, 具有一个额外的 ``add_spacer`` 方法, 可从脚本中在第一"
"个子节点之前或最后一个子节点之后添加一个间隔控制节点."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:340
msgid ""
"The GridContainer lets you arrange UI elements in a grid-like pattern. You "
"can only control the number of columns it has, and it will set the number of "
"rows by itself, based on its children's count. If you have nine children and "
"three columns, you will have 9÷3 = 3 rows. Add three more children and "
"you'll have four rows. In other words, it will create new rows as you add "
"more textures and buttons. Like the box containers, it has two properties to "
"set the vertical and horizontal separation between the rows and columns "
"respectively."
msgstr ""
"``GridContainer`` 允许您按网格模式排列UI元素. 您只能控制其具有的列数, 并且它"
"将根据其子级计数自行设置行数. 如果您有9个子节点和3列, 您将有9÷3 = 3行. 再加3"
"个子项, 就有4行了. 换句话说, 当您添加更多纹理和按钮时, 它将创建新行. 像盒子容"
"器一样, 它具有两个属性, 分别设置行和列之间的垂直和水平间隔."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:351
msgid "A GridContainer with 2 columns. It sizes each column automatically."
msgstr "具有2列的 ``GridContainer``. 它会自动调整每列的大小."

#: ../../docs/getting_started/step_by_step/ui_introduction_to_the_ui_system.rst:353
msgid ""
"Godot's UI system is complex, and has a lot more to offer. To learn how to "
"design more advanced interfaces, head to the :ref:`GUI section <toc-learn-"
"features-gui>` of the docs."
msgstr ""
"Godot的UI系统很复杂, 并且提供了更多功能. 要了解如何设计更高级的界面, 请转到文"
"档的 :ref:`GUI 部分 <toc-learn-features-gui>`."
