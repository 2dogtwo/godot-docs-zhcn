# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-21 17:14+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Signal"
msgstr "信号"

msgid "Using Signals"
msgstr "使用信号"

msgid ""
"In this lesson, we will look at signals. They are messages that nodes emit "
"when something specific happens to them, like a button being pressed. Other "
"nodes can connect to that signal and call a function when the event occurs."
msgstr ""

msgid ""
"It is a delegation mechanism built into Godot that allows one game object to "
"react to a change in another without them referencing one another. Using "
"signals limits `coupling <https://en.wikipedia.org/wiki/"
"Coupling_(computer_programming)>`_ and keeps your code flexible."
msgstr ""

msgid ""
"For example, you might have a life bar on the screen that represents the "
"player’s health. When the player takes damage or uses a healing potion, you "
"want the bar to reflect the change. To do so, in Godot, you would use "
"signals."
msgstr ""

#, fuzzy
msgid ""
"As mentioned in the introduction, signals are Godot's version of the "
"observer pattern. You can learn more about it here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"您可以在这里阅读有关观察者模式的更多信息：\\ https://gameprogrammingpatterns."
"com/observer.html"

msgid ""
"We will now use a signal to make our Godot icon from last part move and stop "
"by pressing a button."
msgstr ""

msgid "Scene setup"
msgstr "场景设置"

msgid "Create a new scene by going to the menu Scene -> New Scene."
msgstr ""

msgid ""
"In the Scene dock, click the 2D Scene button. This will add a Node2D as our "
"root."
msgstr ""

msgid ""
"In the FileSystem dock, click and drag the ``Sprite.tscn`` file you saved "
"previously onto the Node2D to instantiate it."
msgstr ""

msgid ""
"We want to add another node as a sibling of the Sprite. To do so, right-"
"click on Node2D and select Add Child Node."
msgstr ""

msgid "Search for the Button node type and add it."
msgstr "寻找并添加按钮（Button）节点类型。"

msgid ""
"The node is small by default. Click and drag on the bottom-right handle of "
"the Button in the viewport to resize it."
msgstr "按钮默认大小为“小”。点击并拖拽按钮右下角的手柄在视窗中重新设置大小。"

#, fuzzy
msgid ""
"If you don't see the handles, ensure the select tool is active in the "
"toolbar."
msgstr "如果您没有看到变化, 请重新加载场景(关闭它并再次打开)."

msgid "Click and drag on the button itself to move it closer to the sprite."
msgstr "点击并拖拽按钮使其更接近精灵。"

msgid ""
"You can also write a label on the Button by editing its Text property in the "
"Inspector."
msgstr "你也可以通过更改在属性检查器中的文字（Text）属性给按钮写一个标签。"

msgid "Your scene tree and viewport should look like this."
msgstr "您的场景树和视窗应该是类似这样的。"

msgid "Connecting a signal in the editor"
msgstr "在编辑器中连接信号"

msgid ""
"Here, we want to connect the Button's \"pressed\" signal to our Sprite, and "
"we want to call a new function that will toggle its motion on and off. We "
"need to have a script attached to the Sprite node, which we do from the "
"previous lesson."
msgstr ""

msgid ""
"You can connect signals in the Node dock. Select the Button node and, on the "
"right side of the editor, click on the tab named \"Node\" next to the "
"Inspector."
msgstr ""

msgid "The dock displays a list of signals available on the selected node."
msgstr ""

msgid "Double-click the \"pressed\" signal to open the node connection window."
msgstr ""

msgid ""
"There, you can connect the signal to the Sprite node. The node needs a "
"receiver method, a function that Godot will call when the Button emits the "
"signal. The editor generates one for you. By convention, we name these "
"callback methods \"_on_NodeName_signal_name\". Here, it'll be "
"\"_on_Button_pressed\"."
msgstr ""

msgid ""
"When connecting signals via the editor's Node dock, you can use two modes. "
"The simple one only allows you to connect to nodes that have a script "
"attached to them and creates a new callback function on them."
msgstr ""

msgid ""
"The advanced view lets you connect to any node and any built-in function, "
"add arguments to the callback, and set options. You can toggle the mode in "
"the window's bottom-right by clicking the radio button."
msgstr ""

msgid ""
"Click the connect button to complete the signal connection and jump to the "
"Script workspace. You should see the new method with a connection icon in "
"the left margin."
msgstr ""

msgid ""
"If you click the icon, a window pops up and displays information about the "
"connection. This feature is only available when connecting nodes in the "
"editor."
msgstr ""

msgid ""
"Let's replace the line with the ``pass`` keyword with code that'll toggle "
"the node's motion."
msgstr ""

msgid ""
"Our Sprite moves thanks to code in the ``_process()`` function. Godot "
"provides a method to toggle processing on and off: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Another method of the Node class, "
"``is_processing()``, returns ``true`` if idle processing is active. We can "
"use the ``not`` keyword to invert the value."
msgstr ""

msgid ""
"This function will toggle processing and, in turn, the icon's motion on and "
"off upon pressing the button."
msgstr ""

msgid ""
"Before trying the game, we need to simplify our ``_process()`` function to "
"move the node automatically and not wait for user input. Replace it with the "
"following code, which we saw two lessons ago:"
msgstr ""

#, fuzzy
msgid "Your complete ``Sprite.gd`` code should look like the following."
msgstr "您完成的 ``Sprite2D.gd`` 代码应该是这样的。"

#, fuzzy
msgid ""
"Run the scene now and click the button to see the sprite start and stop."
msgstr "运行场景并按下按钮, 你应该得到以下结果:"

msgid "Connecting a signal via code"
msgstr "用代码连接信号"

msgid ""
"You can connect signals via code instead of using the editor. This is "
"necessary when you create nodes or instantiate scenes inside of a script."
msgstr ""

msgid ""
"Let's use a different node here. Godot has a :ref:`Timer <class_Timer>` node "
"that's useful to implement skill cooldown times, weapon reloading, and more."
msgstr ""

#, fuzzy
msgid ""
"Head back to the 2D workspace. You can either click the \"2D\" text at the "
"top of the window or press :kbd:`Ctrl + F2` (:kbd:`Alt + 2` on macOS)."
msgstr ""
"在 **3D工作区** 中, 你可以使用网格, 灯光, 并设计3D游戏的关卡. 按 :kbd:`F2` "
"(或 :kbd:`Alt + 2` 在macOS上)进入."

#, fuzzy
msgid ""
"In the Scene dock, right-click on the Sprite node and add a new node. Search "
"for Timer and add the corresponding node. Your scene should now look like "
"this."
msgstr ""
"在“场景”面板中，右键点击 Sprite2D 节点并添加新节点。找到 Timer 并添加对应节"
"点。你的场景现在应该类似这样。"

msgid ""
"With the Timer node selected, go to the Inspector and check the "
"**Autostart** property."
msgstr "选中 Timer 节点，在“检查器”中勾选\\ **Autostart**\\ （自动开启）属性。"

#, fuzzy
msgid ""
"Click the script icon next to Sprite to jump back to the scripting workspace."
msgstr "点击 Sprite2D 旁的脚本图标，返回脚本工作区。"

msgid "We need to do two operations to connect the nodes via code:"
msgstr ""

#, fuzzy
msgid "Get a reference to the Timer from the Sprite."
msgstr "从 Sprite2D 获取 Timer 的引用。"

msgid "Call the Timer's ``connect()`` method."
msgstr "调用 Timer 的 ``connect()`` 方法。"

msgid ""
"To connect to a signal via code, you need to call the ``connect()`` method "
"of the node you want to listen to. In this case, we want to listen to the "
"Timer's \"timeout\" signal."
msgstr ""
"要使用代码来连接信号，你需要调用所需监听节点的 ``connect()`` 方法。这里我们要"
"监听的是 Timer 的“timeout”信号。"

msgid ""
"To get a reference to a node relative to the current one, we use the method :"
"ref:`Node.get_node() <class_Node_method_get_node>`. We can store the "
"reference in a variable."
msgstr ""

msgid ""
"The function ``get_node()`` looks at the Sprite's children and gets nodes by "
"their name. For example, if you renamed the Timer node to \"BlinkingTimer\" "
"in the editor, you would have to change the call to "
"``get_node(\"BlinkingTimer\")``."
msgstr ""

msgid ""
"We can now connect the Timer to the Sprite in the ``_ready()`` function."
msgstr ""

msgid ""
"The line reads like so: we connect the Timer's \"timeout\" signal to the "
"node to which the script is attached (``self``). When the Timer emits "
"\"timeout\", we want to call the function \"_on_Timer_timeout\", that we "
"need to define. Let's add it at the bottom of our script and use it to "
"toggle our sprite's visibility."
msgstr ""

msgid ""
"The ``visible`` property is a boolean that controls the visibility of our "
"node. The line ``visible = not visible`` toggles the value. If ``visible`` "
"is ``true``, it becomes ``false``, and vice-versa."
msgstr ""

msgid "Custom signals"
msgstr "自定义信号"

msgid ""
"You can define custom signals in a script. Say, for example, that you want "
"to show a game over screen when the player's health reaches zero. To do so, "
"you could define a signal named \"died\" or \"health_depleted\" when their "
"health reaches 0."
msgstr ""

msgid ""
"As signals represent events that just occurred, we generally use an action "
"verb in the past tense in their names."
msgstr ""

msgid ""
"Your signals work the same way as built-in ones: they appear in the Node tab "
"and you can connect to them like any other."
msgstr ""

msgid "To emit a signal in your scripts, call ``emit_signal()``."
msgstr "要通过代码发出信号, 声明 ``emit_signal`` 函数:"

#, fuzzy
msgid ""
"A signal can optionally declare one or more arguments. Specify the argument "
"names between parentheses:"
msgstr "信号还可以选择声明一个或多个参数. 在括号之间指定参数名称:"

msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"这些信号参数显示在编辑器的节点停靠面板中,Godot可以使用它们为您生成回调函数. "
"但是, 发出信号时仍然可以发出任意数量的参数；所以由你来决定是否发出正确的值."

#, fuzzy
msgid ""
"To emit values along with the signal, add them as extra arguments to the "
"``emit_signal()`` function:"
msgstr "要传递值，将它们作为第二个参数添加到 ``emit_signal`` 函数中:"

msgid "Summary"
msgstr "总结"

msgid ""
"Any node in Godot emits signals when something specific happens to them, "
"like a button being pressed. Other nodes can connect to individual signals "
"and react to selected events."
msgstr ""

msgid ""
"Signals have many uses. With them, you can react to a node entering or "
"exiting the game world, to a collision, to a character entering or leaving "
"an area, to an element of the interface changing size, and much more."
msgstr ""

#, fuzzy
msgid ""
"For example, an :ref:`Area2D <class_Area2D>` representing a coin emits a "
"``body_entered`` signal whenever the player's physics body enters its "
"collision shape, allowing you to know when the player collected it."
msgstr ""
"Godot的许多内置节点类型提供了可用于检测事件的信号. 例如, 代表硬币的 :ref:"
"`Area2D <class_Area2D>` 在游戏角色的物理体进入碰撞形状时发出 "
"``body_entered`` 信号, 让您知道游戏角色何时收集了它."

#, fuzzy
msgid ""
"In the next section, :ref:`doc_your_first_2d_game`, you'll create a complete "
"2D game and put everything you learned so far into practice."
msgstr ""
"在下一节 :ref:`doc_your_first_game` 中, 您将构建一个完整的游戏, 其中包括使用"
"多种信号来连接不同的游戏组件."
