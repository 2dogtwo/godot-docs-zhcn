# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/instancing.rst:4
msgid "Instancing"
msgstr "实例化"

#: ../../docs/getting_started/step_by_step/instancing.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/getting_started/step_by_step/instancing.rst:9
msgid ""
"Creating a single scene and adding nodes into it might work for small "
"projects, but as a project grows in size and complexity, the number of nodes "
"can quickly become unmanageable. To address this, Godot allows a project to "
"be separated into any number of scenes. This provides you with a powerful "
"tool that helps you organize the different components of your game."
msgstr ""
"创建单个场景并向其中添加节点，这可能适用于小型项目，但随着项目规模和复杂度的"
"增长，节点数量可能很快变得无法管理。为了解决这个问题，Godot允许一个项目被分成"
"许多场景。这提供了一个强大的工具，有助于组织游戏的不同组件。"

#: ../../docs/getting_started/step_by_step/instancing.rst:15
msgid ""
"In :ref:`doc_scenes_and_nodes` you learned that a scene is a collection of "
"nodes organized in a tree structure, with a single node as the tree root."
msgstr ""
"在 :ref:`doc_scenes_and_nodes` 中，你已了解场景是一个以树结构组织的节点的集"
"合，并由单个节点作为树的根节点。"

#: ../../docs/getting_started/step_by_step/instancing.rst:20
msgid ""
"You can create as many scenes as you like and save them to disk. Scenes "
"saved in this manner are called \"Packed Scenes\" and have a ``.tscn`` "
"filename extension."
msgstr ""
"可以创建任意多的场景并将其保存到磁盘。以这种方式保存的场景被称为“打包场景”，"
"并会有个 ``.tscn`` 扩展名。"

#: ../../docs/getting_started/step_by_step/instancing.rst:26
msgid ""
"Once a scene has been saved, it can be instanced into another scene as if it "
"were any other node."
msgstr ""
"一旦场景被保存，它就可以被实例化到另一个场景中，就像它是任何其他节点一样。"

#: ../../docs/getting_started/step_by_step/instancing.rst:31
msgid "In the above picture, Scene B was added to Scene A as an instance."
msgstr "在上面的图片中，场景B作为实例被添加到A中。"

#: ../../docs/getting_started/step_by_step/instancing.rst:34
msgid "Instancing by example"
msgstr "通过示例实例化"

#: ../../docs/getting_started/step_by_step/instancing.rst:36
msgid ""
"To learn how instancing works, let's start by downloading a sample project: :"
"download:`instancing.zip <files/instancing.zip>`."
msgstr ""
"要了解实例化如何工作，我们先下载一个示例项目： :download:`instancing.zip "
"<files/instancing.zip>`。"

#: ../../docs/getting_started/step_by_step/instancing.rst:39
msgid ""
"Unzip this project anywhere you like. Then open Godot and add this project "
"to the project manager using the 'Import' button:"
msgstr ""
"解压该项目到任意位置。然后打开Godot，用 :menuselection:`导入(Import)` 按钮将"
"项目添加到到项目管理器中："

#: ../../docs/getting_started/step_by_step/instancing.rst:44
msgid ""
"Browse to the folder you extracted and open the \"project.godot\" file you "
"can find inside it. After doing this, the new project will appear on the "
"list of projects. Edit the project by pressing the 'Edit' button."
msgstr ""
"浏览到解压到的文件夹，然后打开可以在其中找到 ``project.godot`` 文件。执行此操"
"作后，新项目将显示在项目列表中。按 :menuselection:`编辑(Edit)` 按钮编辑项目。"

#: ../../docs/getting_started/step_by_step/instancing.rst:48
msgid ""
"This project contains two scenes: \"Ball.tscn\" and \"Main.tscn\". The ball "
"scene uses a :ref:`RigidBody2D <class_RigidBody2D>` to provide physics "
"behavior while the main scene has a set of obstacles for the ball to collide "
"with (using :ref:`StaticBody2D <class_StaticBody2D>`)."
msgstr ""
"该项目包含两个场景：``Ball.tscn`` 和 ``Main.tscn``。 ball 场景使用 :ref:"
"`RigidBody2D <class_RigidBody2D>` 来提供物理行为，而主场景有一组用于与球碰撞"
"的障碍物(使用 :ref:`StaticBody2D <class_StaticBody2D>`)。"

#: ../../docs/getting_started/step_by_step/instancing.rst:57
msgid "Open the ``Main`` scene, and then select the root node:"
msgstr "打开 ``Main`` 场景，然后选择根节点："

#: ../../docs/getting_started/step_by_step/instancing.rst:61
msgid ""
"We want to add an instance of the ``Ball`` scene as a child of ``Main``. "
"Click the \"link\"-shaped button (its hover-text says \"Instance a scene "
"file as a Node.\") and select the ``Ball.tscn`` file."
msgstr ""
"我们要添加一个 ``Ball`` 场景的实例，作为 ``Main`` 场景的子节点。点击“链接”形"
"状的按钮(悬浮框写着 ``实例化场景文件作为节点。``)然后选择 ``Ball.tscn`` 文"
"件。"

#: ../../docs/getting_started/step_by_step/instancing.rst:67
msgid ""
"The ball will be placed at the top-left corner of the screen area (this is "
"``(0, 0)`` in screen coordinates). Click and drag the ball somewhere near "
"the top-center of the scene:"
msgstr ""
"这个球会被放置在屏幕区域的左上角(即屏幕坐标 ``(0, 0)``)。点击并将球拖到场景顶"
"部中心附近的某处："

#: ../../docs/getting_started/step_by_step/instancing.rst:73
msgid "Press \"Play\" and watch the ball fall to the bottom of the screen:"
msgstr "按下 :menuselection:`运行(Play)`，会看到球落到场景底部："

#: ../../docs/getting_started/step_by_step/instancing.rst:78
msgid "Multiple instances"
msgstr "多个实例"

#: ../../docs/getting_started/step_by_step/instancing.rst:80
msgid ""
"You can add as many instances as you like to a scene, either by using the "
"\"Instance\" button again, or by clicking on the ball instance and pressing :"
"kbd:`Ctrl + D` (:kbd:`Cmd + D` on macOS) to duplicate it:"
msgstr ""
"你可以在一个场景中添加任意数量的实例，可以再次使用 \"实例化\"按钮，也可以点击"
"球的实例，然后按:kbd:`Ctrl + D`（MacOS上按:kbd:`Cmd + D`）复制它:"

#: ../../docs/getting_started/step_by_step/instancing.rst:86
msgid "Run the scene again and all of the balls will fall."
msgstr "再次运行场景，这些球都会落下来。"

#: ../../docs/getting_started/step_by_step/instancing.rst:91
msgid "Editing instances"
msgstr "编辑实例"

#: ../../docs/getting_started/step_by_step/instancing.rst:93
msgid ""
"Open the ``Ball`` scene, expand the ``PhysicsMaterial`` by clicking on it, "
"and set the ``Bounce`` property to ``1``."
msgstr ""
"打开 ``Ball`` 场景, 点击 ``PhysicsMaterial`` 展开, 然后设置 ``Bounce`` 属性"
"为 ``1``."

#: ../../docs/getting_started/step_by_step/instancing.rst:98
msgid ""
"Press \"Play\" and notice that all of the instanced balls are now much more "
"bouncy. Because the instanced balls are based on the saved scene, changes to "
"that scene will affect all instances."
msgstr ""
"按下 :menuselection:`播放(Play)`，请注意现在所有被实例化的球会变得更有弹性。"
"因为被实例化的球基于保存过的场景，更改该场景会影响所有实例。"

#: ../../docs/getting_started/step_by_step/instancing.rst:102
msgid ""
"You can also adjust individual instances. Set the bounce value back to ``0`` "
"and then in the ``Main`` scene, select one of the instanced balls. Resources "
"like ``PhysicsMaterial`` are shared between instances by default, so we need "
"to make it unique. Click on the tools button in the top-right of the "
"Inspector dock and select \"Make Sub-Resources Unique\". Set its ``Bounce`` "
"to ``1`` and press \"Play\"."
msgstr ""
"也可以只调整个别实例。 先将 ``Bounce`` 设回 ``0`` ，然后在 ``Main`` 场景中，"
"选择一个要修改的球。 默认情况下在实例间共享同一个 ``PhysicsMaterial`` 这样的"
"资源，因此修改前需要使其独立于其他实例。 点击属性面板右上方的工具按钮，选"
"择“转为独立子资源”，并将 ``Bounce`` 设置为 ``1`` ，测试修改后的效果。"

#: ../../docs/getting_started/step_by_step/instancing.rst:111
msgid ""
"Notice that a grey \"revert\" button appears next to the adjusted property. "
"When this button is present, it means you modified a property in the "
"instanced scene to override its value in the saved scene. Even if that "
"property is modified in the original scene, the custom value will remain. "
"Pressing the revert button will restore the property to the value in the "
"saved scene."
msgstr ""
"可以注意到调整后的属性旁边有一个 :menuselection:`还原(revert)` 按钮。当这个按"
"钮出现，意味着修改了这个实例化场景属性，覆盖了它原有的值。即便再次修改原场景"
"的属性，它的值也会保持不变。按下还原按钮将会把属性值还原为原场景设定值。"

#: ../../docs/getting_started/step_by_step/instancing.rst:119
msgid "Conclusion"
msgstr "总结"

#: ../../docs/getting_started/step_by_step/instancing.rst:121
msgid ""
"Instancing can be useful when you want to create many copies of the same "
"object. It is also possible to create instances in code by using GDScript, "
"see :ref:`doc_instancing_continued`."
msgstr ""
"当您想创建同一对象的多个副本时，实例化会非常有用。您也可以使用GDScript创建实"
"例(请参阅 :ref:`doc_scripting_continued`)。"
