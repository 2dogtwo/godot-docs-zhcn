# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-11 13:45+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:4
msgid "Design a title screen"
msgstr "设计标题画面"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:6
msgid ""
"In the next two tutorials, you will build two responsive UI (user interface) "
"scenes step-by-step using the engine's UI system:"
msgstr ""
"在接下来的两个教程中，您将使用引擎的UI（用户界面）系统逐步构建两个响应式UI场"
"景："

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:9
msgid "A main menu."
msgstr "一个主菜单。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:10
msgid "A game UI with a health bar, energy bar, bomb and money counters."
msgstr "一个带有健康条、能量条、炸弹和金钱计数器的游戏UI。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:12
msgid ""
"You will learn how to design game UIs efficiently, and how to use Godot's "
"Control nodes. This page focuses on the visual part: everything you do from "
"the editor. To learn how to code a life bar, read :doc:`ui_code_a_life_bar`."
msgstr ""
"您将学习如何有效地设计游戏UI，以及如何使用Godot的 ``Control`` 节点。该页面专"
"注于视觉部分，仅在编辑器中完成所有操作。要学习如何编写血槽，请阅读 :doc:"
"`ui_code_a_life_bar`。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:20
msgid "The GUI you're going to create."
msgstr "您将要创建的GUI。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:22
msgid ""
"Download the project files: :download:`ui_main_menu_design.zip <files/"
"ui_main_menu_design.zip>` and extract the archive. Import the ``start/`` "
"project in Godot to follow this tutorial. The ``end/`` folder contains the "
"final result. You'll find all the sprites in the ``start/assets/main_menu`` "
"folder."
msgstr ""
"下载项目文件： :download:`ui_main_menu_design.zip <files/ui_main_menu_design."
"zip>` 并解压缩存档。在Godot中导入 ``start/`` 项目以遵循本教程。``end/`` 文件"
"夹包含最终结果。您将在 ``start/assets/main_menu`` 文件夹中找到所有精灵。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:30
#, fuzzy
msgid ""
"Read the :doc:`ui_introduction_to_the_ui_system` first to learn how Godot's "
"UI system works."
msgstr ""
"先阅读:doc:`ui_introduction_to_the_ui_system`来学习Godot的用户界面系统是如何"
"工作的。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:34
msgid "How to design your game UI"
msgstr "如何设计您的游戏UI"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:36
msgid ""
"To design a good UI, you want to come up with a rough mockup first: a plain "
"drawing version that focuses on the placement of your UI components, their "
"size, and user interaction. Pen and paper is all you need. You shouldn't use "
"fancy and final graphics at this stage. Then, you only need simple "
"placeholder sprites and you're good to jump into Godot. You want to make "
"sure the players can find their way around the interface using those "
"placeholders."
msgstr ""
"要设计一个好的UI，您首先要提出一个粗略的模型：一个纯绘制版本，重点放在UI组件"
"的位置、它们的大小、和用户交互上。您只需要纸和笔。在此阶段，您不应该使用精美"
"的图形和最终图形。然后，您只需要简单的占位符精灵，就可以进入Godot。您要确保玩"
"家可以使用这些占位符在界面周围找到自己的路。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:46
msgid "The UI's rough plan or mockup"
msgstr "UI的粗略计划或模型"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:48
msgid ""
"Placeholder doesn't have to mean ugly, but you should keep the graphics "
"simple and clean. Avoid special effects, animation, and detailed "
"illustration before you have players playtest your UI. Otherwise:"
msgstr ""
"占位符不一定意味着难看，但是您应该保持图形简单和干净。在让玩家对UI进行游戏测"
"试之前，请避免使用特殊效果、动画、和详细的插图。 否则："

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:52
msgid ""
"The graphics might skew the players' perception of the experience and you'll "
"miss out on valuable feedback."
msgstr "不好的图形可能会误导玩家对游戏的看法，您将会错过宝贵的反馈意见。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:54
msgid "If the User Experience doesn't work, you'll have to redo some sprites."
msgstr "如果用户体验不好，你还得重新设计一些角色。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:58
msgid ""
"Always try to make the interface work with simple text and boxes first. It's "
"easy to replace the textures later. Professional UX designers often work "
"with plain outlines and boxes in greyscale. When you take colors and fancy "
"visuals away, it's a lot easier to size and place UI elements properly. It "
"helps you refine the design foundation you'll build upon."
msgstr ""
"总是首先尝试让界面使用简单的文本和框。以后替换纹理很容易。专业的UX设计师通常"
"使用灰色的简单轮廓和框。当您去掉颜色和精美的视觉效果时，正确地设置和放置UI元"
"素要容易得多。它可以帮助您完善将要建立的设计基础。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:65
msgid "There are two ways to design your UI in Godot. You can:"
msgstr "在Godot中有两种方法来设计UI。 您可以："

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:67
msgid ""
"Build it all in a single scene, and eventually save some branches as "
"reusable scenes."
msgstr ""
"先将UI全部放在一个场景中，最后再提取出一些具有共性的组件保存为可重用场景。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:69
msgid ""
"Build template scenes for reusable components and create specific components "
"that inherit from your base scenes."
msgstr "从可复用组件构建模板场景，并创建从基本场景继承的特定组件。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:72
#, fuzzy
msgid ""
"We will use the first approach, because the first version of your UI may not "
"work as well as you'd like. You're likely to throw parts away and redesign "
"components as you go. When you're sure everything works, it's easy to make "
"some parts reusable, as you'll see below."
msgstr ""
"我们将使用第一种方法，因为您的UI的第一个版本可能不像您希望的那样工作。您可能"
"会扔掉零件，重新设计零件。当您确信一切工作正常时，很容易使某些部件复用，如下"
"所示。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:79
msgid ""
"The files you'll find in Godot. The graphics look cleaner than on the rough "
"design, but they're still placeholders."
msgstr ""
"在Godot中可以看到下载的文件。(简单的)图形看起来非常整洁，这比粗糙的设计更有视"
"觉上的优势（能更好地表达你的意图）。但它们仍然是作为一个占位符来使用的。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:83
msgid "Design the main menu"
msgstr "设计主菜单"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:85
msgid ""
"Before we jump into the editor, we want to plan how we'll nest containers "
"based on our mockup image."
msgstr "在进入编辑器之前，我们要计划如何基于模型图像嵌套容器。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:89
#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:292
msgid "Break down the UI mockup"
msgstr "分解UI模型"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:91
msgid "Here are my three rules of thumb to find the right containers:"
msgstr "这是我找到合适容器的三个经验法则："

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:93
msgid ""
"Break down the UI into nested boxes, from the largest that contains "
"everything, to the smallest ones, that encompass one widget, like a bar with "
"its label, a panel or a button."
msgstr ""
"将UI分解为嵌套的盒式结构。从包含所有内容的最大盒子，到包含一个像带有标签的进"
"度条、面板或按钮这样的小部件的小盒子。所有一切都是盒子。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:96
msgid "If there's some padding around an area, use a ``MarginContainer``."
msgstr "如果一个区域周围有一些填充，使用 ``MarginContainer``。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:97
msgid ""
"If the elements are arranged in rows or columns, use an ``HBoxContainer`` or "
"``VBoxContainer``."
msgstr ""
"如果元素是按行或列组织的，请使用 ``HBoxContainer`` 或 ``VBoxContainer``组件。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:100
msgid ""
"These rules are enough to get us started, and work well for simple "
"interfaces."
msgstr "这些规则足以使我们入门，并且对于简单的界面也能很好地工作。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:103
msgid ""
"For the main menu, the largest box is the entire game window. There's "
"padding between the edges of the window and the first components: this "
"should be a ``MarginContainer``. Then, the screen is split into two columns, "
"so we'll use an ``HBoxContainer``. In the left column, we'll manage the rows "
"with a ``VBoxContainer``. And in the right column, we'll center the "
"illustration with a ``CenterContainer``."
msgstr ""
"对于主菜单，最大的框是整个游戏窗口。窗口的边缘和第一个组件之间有填充：这儿应"
"该使用一个 ``MarginContainer``。然后，将屏幕分为两列，因此我们将使用一个 "
"``HBoxContainer``。在左栏中，我们将使用一个 ``VBoxContainer`` 来管理行。在右"
"列中，我们将使用一个 ``CenterContainer`` 将插图居中。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:112
msgid "Interface building blocks, broken down using the three rules of thumb."
msgstr "构建界面的块，使用上面说到的三个经验法则分解。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:116
msgid ""
"Containers adapt to the window's resolution and width-to-height ratio. "
"Although we could place UI elements by hand, containers are faster, more "
"precise, and **responsive**."
msgstr ""
"容器适应窗户的分辨率和宽高比。虽然我们可以手动放置UI元素，但是容器更快、更精"
"确、响应更快。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:121
msgid "Prepare the Main Menu scene"
msgstr "准备主菜单场景"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:125
msgid ""
"This tutorial is based on a window size of 1366×768. To change the project's "
"base window size, open **Project > Project Settings** at the top of the "
"editor then change **Display > Window > Size > Width** to ``1366`` and "
"**Display > Window > Size > Height** to ``768``."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:130
msgid ""
"If you forget to change the window size, anchors and containers may not "
"behave as expected."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:133
msgid ""
"Let's create the main menu. We'll build it in a single scene. To create an "
"empty scene, click on **Scene > New Scene**."
msgstr ""
"让我们创建主菜单。我们将在一个单一的场景中构建它。要创建一个空场景，请单击 ``"
"场景`` 菜单 -> ``新建场景``。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:136
#, fuzzy
msgid ""
"We have to add a root node before we can save the scene. Your UI's root "
"should be the outermost container or element. In this case it's a "
"``MarginContainer``. ``MarginContainer`` is a good starting point for most "
"interfaces, as you often need padding around the UI. Press :kbd:`Ctrl + S` (:"
"kbd:`Cmd + S` on macOS) to save the scene to the disk. Name it *MainMenu*."
msgstr ""
"在保存场景之前，我们必须添加一个根节点。UI的根应该是最外层的容器或元素。在这"
"种情况下，它是一个 ``MarginContainer``。``MarginContainer`` 是大多数界面的良"
"好起点，因为您经常需要在UI周围填充。按下 ``Meta+S`` 将场景保存到磁盘。把它命"
"名为 *MainMenu* 。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:142
msgid ""
"Select the ``MarginContainer`` again, and head to the inspector to define "
"the margins' size. Scroll down the ``Control`` class, to the ``Custom "
"Constants`` section. Unfold it. Set the margins as such:"
msgstr ""
"再次选择 ``MarginContainer``，然后转向属性检查器面板来定义边距的大小。向下滚"
"动 ``Control`` 类，到 ``Custom Constants（自定义常量）`` 部分。展开它。设置边"
"距如下："

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:146
msgid "Margin Right: *120*"
msgstr "右边距：*120*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:147
msgid "Margin Top: *80*"
msgstr "顶部边距：*80*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:148
msgid "Margin Left: *120*"
msgstr "左边距：*120*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:149
msgid "Margin Bottom: *80*"
msgstr "底部边距：*80*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:151
msgid ""
"We want the container to fit the window. In the toolbar above the Viewport, "
"open the **Layout** menu and select the last option, **Full Rect**."
msgstr ""
"我们希望容器能充满窗口。在视图上方的工具栏中，打开 ``布局（Layout）`` 菜单，"
"然后选择最后一个选项 ``Full Rect``。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:155
msgid "Add the UI sprites"
msgstr "添加UI精灵"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:157
msgid ""
"Select the ``MarginContainer``, and create the UI elements as "
"``TextureRect`` nodes. We need:"
msgstr ""
"选择 ``MarginContainer``，并将UI元素创建为 ``TextureRect`` 节点。我们需要："

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:160
msgid "the title or logo,"
msgstr "标题或LOGO；"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:161
msgid "the three text options as individual nodes,"
msgstr "三个文本选项，作为单独的节点；"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:162
msgid "the version note,"
msgstr "版本注释；"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:163
#, fuzzy
msgid "and the main menu's illustration."
msgstr "和主菜单的插图。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:165
#, fuzzy
msgid ""
"Click the **Add Node** button or press :kbd:`Ctrl + A` (:kbd:`Cmd + A` on "
"macOS) on your keyboard. Start to type ``TextureRect`` to find the "
"corresponding node and press enter. With the new node selected, press :kbd:"
"`Ctrl + D` (:kbd:`Cmd + D` on macOS) five times to create five extra "
"``TextureRect`` instances."
msgstr ""
"点击 ``添加节点（Add Node）`` 按钮或按键盘上的（Ctrl+A） ``Meta+A``。开始键"
"入 ``TextureRect`` 以找到相应的节点，然后按 ``Enter`` 键。选中新节点后，按"
"(Ctrl+D) ``Meta+D`` 五次以创建额外的五个 ``TextureRect`` 实例。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:170
msgid ""
"Click each of the nodes to select it. In the inspector, find the **Texture** "
"property and click **[empty] > Load**. A file browser opens and lets you "
"pick a sprite to load into the texture slot."
msgstr ""
"点击每个节点以将其选中。在属性检查器中，找到 ``Texture`` 属性，然后点击"
"``[empty]`` -> ``Load``。将打开一个文件浏览器，让您选择一个精灵以加载到纹理插"
"槽中。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:176
msgid "The file browser lets you find and load textures."
msgstr "文件浏览器可以让你查找和加载贴图。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:178
msgid ""
"Repeat the operation for all ``TextureRect`` nodes. You should have the "
"logo, the illustration, the three menu options and the version note, each as "
"a separate node. Then, double click on each of the nodes in the Scene tab to "
"rename them. Nothing has been placed in containers yet so this should look "
"messy."
msgstr ""
"对所有 ``TextureRect`` 节点重复该操作。您应该拥有logo、插图、三个菜单选项和版"
"本标注，它们分别作为一个单独的节点。然后，双击场景选项卡中的每个节点以重命名"
"它们。尚未在容器中放置任何东西，因此看起来应该很杂乱。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:186
msgid "The six nodes with textures loaded."
msgstr "六个带贴图的节点已加载。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:190
msgid ""
"If you want to support localization in your game, use ``Labels`` for menu "
"options instead of ``TextureRect``."
msgstr ""
"如果要在游戏中支持本地化，请使用 ``Labels`` 代替菜单项 ``TextureRect``。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:194
msgid "Add containers to place UI elements automatically"
msgstr "添加容器以自动放置UI元素"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:196
#, fuzzy
msgid ""
"Our main menu has some margin around the edges of the screen. It is split in "
"two parts: on the left, you have the logo and the menu options. On the "
"right, you have the characters. We can use one of two containers to achieve "
"this: ``HSplitContainer`` or ``HBoxContainer``. Split containers split the "
"area into two: a left and a right side or a top and a bottom side. They also "
"allow the user to resize the left and right areas using an interactive bar. "
"On the other hand, ``HBoxContainer`` just splits itself into as many columns "
"as it has children. Although you can deactivate the split container's resize "
"behavior, I recommend to favor box containers."
msgstr ""
"我们的主菜单在屏幕边缘周围有一些边距。它分为两部分：在左侧，有logo和菜单选"
"项。在右边，有字符。我们可以使用两个容器之一来实现此目的： "
"``HSplitContainer`` 或 ``HBoxContainer``。拆分容器将区域分为两部分：左侧和右"
"侧，或顶部和底部。它们还允许用户使用交互式栏来调整左右区域的大小。另一方面，"
"``HBoxContainer`` 只是将自身拆分为具有与子级数目相同的列。尽管您可以禁用拆分"
"容器的调整大小行为，但还是建议您使用盒式容器。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:207
msgid ""
"Select the ``MarginContainer`` and add an ``HBoxContainer``. Then, we need "
"two containers as children of our ``HBoxContainer``: a ``VBoxContainer`` for "
"the menu options on the left, and a ``CenterContainer`` for the illustration "
"on the right."
msgstr ""
"选择 ``MarginContainer`` 并添加 ``HBoxContainer``。然后，我们需要两个容器作"
"为 ``HBoxContainer`` 的子容器：一个 ``VBoxContainer`` 用于左边的菜单选项，一"
"个 ``CenterContainer`` 用于右边的插图。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:214
msgid ""
"You should have four nested containers and the TextureRect nodes sitting "
"aside from it."
msgstr "您应该有四个嵌套容器，并且下方有好几个 ``TextureRect`` 贴图节点。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:217
msgid ""
"In the node tree, select all the ``TextureRect`` nodes that should go on the "
"left side: the logo, the menu options (Continue, NewGame, Options), and the "
"version note. Drag and drop them into the ``VBoxContainer``. The nodes "
"should position automatically."
msgstr ""
"在节点树中，选择应该在左侧出现的所有 ``TextureRect`` (贴图)节点：logo，菜单选"
"项和版本标注。将它们拖放到 ``VBoxContainer`` 中。节点就会自动定位。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:224
msgid "Containers automatically place and resize textures"
msgstr "容器自动放置和调整纹理大小"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:226
msgid "We're left with two problems to solve:"
msgstr "我们还有两个问题要解决："

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:228
msgid "The characters on the right aren't centered."
msgstr "右边的字符没有居中。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:229
msgid "There's no space between the logo and the other UI elements."
msgstr "Logo和其他UI元素之间没有合适的间距。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:231
msgid ""
"To center the characters on the right, first select the ``CenterContainer``. "
"Then in the Inspector, scroll down to the **Size Flags** category and click "
"on the field to the right of the **Vertical** property, and check **Expand** "
"in addition to **Fill**. Do the same for the **Horizontal** property. This "
"makes the ``CenterContainer`` expand into all available space while "
"respecting its neighbour ``VBoxContainer``. Finally, drag and drop the "
"Characters node into the ``CenterContainer``. The Characters element will "
"center automatically."
msgstr ""
"要使字符居右，请首先选择 ``CenterContainer``。然后在属性检查器中，向下滚动到 "
"``尺寸标记（Size Flags）`` 类别，然后点击 ``垂直（Vertical）`` 属性右侧的字"
"段，并检查 ``扩展（Expand）`` 还有 ``填充（Fill）``。对 ``水平（Horizontal）"
"`` 属性执行相同的操作。这使得 ``CenterContainer`` 扩展到所有可用空间，同时不"
"妨碍其邻居 ``VBoxContainer``。最后，将 ``Characters`` 节点拖放到 "
"``CenterContainer`` 中。``Characters`` 元素将自动居中。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:242
msgid ""
"The character node centers inside the right half of the screen as soon as "
"you place it inside the CenterContainer."
msgstr ""
"将角色节点放置在 ``CenterContainer`` 中后，它将立即在屏幕的右半部分居中。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:245
#, fuzzy
msgid ""
"To space out the menu options and the logo on the left, we'll use one final "
"container and its size flags. Select the ``VBoxContainer`` and press :kbd:"
"`Ctrl + A` (:kbd:`Cmd + A` on macOS) to add a new node inside it. Add a "
"second ``VBoxContainer`` and name it *MenuOptions*. Select all three menu "
"options, ``Continue``, ``NewGame`` and ``Options``, and drag and drop them "
"inside the new ``VBoxContainer``. The UI's layout should barely change, if "
"at all."
msgstr ""
"为了在左侧隔开菜单选项和logo，我们将使用一个最终容器及其尺寸标记。选择 "
"``VBoxContainer`` 并按 ``Meta + A`` 在其中添加一个新节点。添加第二个 "
"``VBoxContainer``，并将其命名为 ``MenuOptions``。选择所有三个菜单选项 ``继续"
"（Continue）``，``新游戏（NewGame）`` 和 ``选项（Options）``，并将它们拖放到"
"新的 ``VBoxContainer`` 中。UI的布局应该几乎不会变化。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:255
msgid ""
"Place the new container between the other two nodes to retain the UI's "
"layout."
msgstr "将新容器放置在其他两个节点之间，以保持UI的布局。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:258
msgid ""
"Now we grouped the menu options together, we can tell their container to "
"expand to take as much vertical space as possible. Select the "
"``MenuOptions`` node. In the Inspector, scroll down to the **Size Flags** "
"category. Click on the field to the right of the **Vertical** property, and "
"check **Expand** in addition to **Fill**. The container expands to take all "
"the available vertical space while respecting its neighbors, the ``Logo`` "
"and ``Version`` elements."
msgstr ""
"现在我们将菜单选项编组在一起，我们可以让它们的容器扩展到尽可能多的垂直空间。"
"选择 ``MenuOptions`` 节点。在属性检查器面板中，向下滚动到 ``尺寸标志（Size "
"Flags）`` 类别。点击 ``垂直（Vertical）`` 属性右侧的字段，并检查 ``展开"
"（Expand）`` 和 ``填充（Fill）``。容器将扩展以占据所有可用的垂直空间。但它不"
"会影响到它的邻居， 即 ``Logo`` 和 ``Version`` 元素。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:266
msgid ""
"To center the nodes in the ``VBoxContainer``, scroll to the top of the "
"Inspector and change the **Alignment** property to **Center**."
msgstr ""
"要使节点在 ``VBoxContainer`` 中居中，请滚动到属性检查器的顶部，然后将 "
"``Alignment`` 属性更改为 ``Center``。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:271
msgid "The menu options should center vertically in the UI's left column."
msgstr "菜单选项应在UI的左边的列式布局中垂直居中。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:273
msgid ""
"To wrap things up, let's add some separation between the menu options. "
"Expand the **Custom Constants** category below **Size Flags**, and click the "
"field next to the **Separation** parameter. Set it to 30. Once you press "
"enter, the **Separation** property becomes active and Godot adds 30 pixels "
"between menu options."
msgstr ""
"为了把东西都包裹起来，让我们在菜单选项之间添加一些分隔。展开 ``大小标记"
"（Size Flags）`` 下面的 ``自定义常量（Custom Constants）`` 类别，然后点击 ``"
"分隔（Separation）`` 参数旁边的字段。设置为30。一旦您按下回车键，``分隔"
"（Separation）`` 属性就会激活，Godot会在菜单选项之间增加30个像素。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:281
msgid "The final interface."
msgstr "最终界面。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:283
msgid ""
"Without a single line of code, we have a precise and responsive main menu."
msgstr "没有一行代码，我们就有了一个精确且响应迅速的主菜单。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:286
msgid ""
"Congratulations for getting there! You can download the final menu :download:"
"`ui_main_menu_design.zip <files/ui_main_menu_design.zip>` to compare with "
"your own. In the next tutorial, you'll create a Game User Interface with "
"bars and item counters."
msgstr ""
"恭喜你到达！您可以下载最终菜单 :download:`ui_main_menu_design.zip <files/"
"ui_main_menu_design.zip>` 以与您自己的进行比较。在下一个教程中，您将创建一个"
"带有条形和项目计数器的游戏用户界面。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:294
msgid ""
"A responsive User Interface is all about making sure our UIs scale well on "
"all screen types. TV screens and computer displays have different sizes and "
"ratios. In Godot, we use containers to control the position and the size of "
"UI elements."
msgstr ""
"响应式用户界面就是要确保我们的UI在所有屏幕类型上都能很好地缩放。电视屏幕和计"
"算机显示器具有不同的大小和比例。在Godot中，我们使用容器来控制UI元素的位置和大"
"小。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:299
#, fuzzy
msgid ""
"The order in which you nest matters. To see if your UI adapts nicely to "
"different screen ratios, select the root node, press :kbd:`Q` to activate "
"the Select Mode, select the container and click and drag on one of the "
"container's corners to resize it. The UI components should flow inside of it."
msgstr ""
"嵌套的顺序很重要。要查看UI是否能很好地适应不同的屏幕比例，请选择根节点，按Q键"
"激活选择模式，选择容器，然后单击并拖动容器的某个角落以调整其大小。UI组件应该"
"在其中流动。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:305
msgid ""
"You'll notice that although containers move sprites around, they don't scale "
"them. This is normal. We want the UI system to handle different screen "
"ratios, but we also need the entire game to adapt to different screen "
"resolutions. To do this, Godot scales the entire window up and down."
msgstr ""
"您会注意到，尽管容器在周围移动精灵，但不会缩放它们。这是正常的。我们希望UI系"
"统能够处理不同的屏幕比例，但是我们还需要整个游戏来适应不同的屏幕分辨率。为"
"此，Godot将上下缩放整个窗口。"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:311
msgid ""
"You can change the scale mode in the project settings: click **Project > "
"Project Settings** in the top menu. In the window's left column, look for "
"the **Display** category. Click on the **Window** sub-category. On the right "
"side of the window, you'll find a **Stretch** section. The three settings, "
"**Mode**, **Aspect**, and **Shrink**, control the screen size. For more "
"information, see :ref:`doc_multiple_resolutions`."
msgstr ""
"您可以在项目设置中更改缩放模式：点击项目菜单 -> 项目设置。在窗口的左列中，查"
"找显示类别。点击窗口子类别。在窗口的右边，您会找到一个叫 **Stretch** 的部分。"
"三个设置，模式、纵横比、和缩小，控制屏幕的大小。有关更多信息，请参见 :ref:"
"`doc_multiple_resolutions`。"
