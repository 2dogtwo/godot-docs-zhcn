# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-29 21:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting.rst:4
msgid "Scripting"
msgstr "编写脚本"

#: ../../docs/getting_started/step_by_step/scripting.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../docs/getting_started/step_by_step/scripting.rst:9
msgid ""
"Before Godot 3.0, the only choice for scripting a game was to use :ref:"
"`GDScript<doc_gdscript>`. Nowadays, Godot has four (yes, four!) official "
"languages and the ability to add extra scripting languages dynamically!"
msgstr ""
"在Godot 3.0版本之前，编写游戏脚本的唯一选择是使用GDScript。 如今，Godot已经有"
"四种（没错，是四种！）官方语言，可以动态添加额外脚本语言！"

#: ../../docs/getting_started/step_by_step/scripting.rst:13
msgid ""
"This is great, mostly due to the large amount of flexibility provided, but "
"it also makes our work supporting languages more difficult."
msgstr ""
"这很好，主要在于提供了大量的灵活性，但也使得我们对语言的支持工作变得更加困"
"难。"

#: ../../docs/getting_started/step_by_step/scripting.rst:16
msgid ""
"The \"main\" languages in Godot, though, are GDScript and VisualScript. The "
"main reason to choose them is their level of integration with Godot, as this "
"makes the experience smoother; both have slick editor integration, while C# "
"and C++ need to be edited in a separate IDE. If you are a big fan of "
"statically typed languages, go with C# and C++ instead."
msgstr ""
"不过，Godot中的“主要”语言是GDScript和VisualScript。选择它们的主要原因是它们与"
"Godot的整合程度，它们使体验更佳顺畅；两者都有非常好的编辑器集成，而C#和C++需"
"要在外部IDE中进行编辑。如果您是静态语言的忠实粉丝，也可以使用C#和C++。"

#: ../../docs/getting_started/step_by_step/scripting.rst:22
msgid "GDScript"
msgstr "GDScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:24
msgid ""
":ref:`GDScript<doc_gdscript>` is, as mentioned above, the main language used "
"in Godot. Using it has some positive points compared to other languages due "
"to its high integration with Godot:"
msgstr ""
"如上所述，GDScript是Godot主要的使用语言。由于其与Godot高度整合，使用它较其他"
"语言而言，有一些积极意义："

#: ../../docs/getting_started/step_by_step/scripting.rst:28
msgid ""
"It's simple, elegant, and designed to be familiar for users of other "
"languages such as Lua, Python, Squirrel, etc."
msgstr "简单，优雅，设计上为Lua、Python、Squirrel等语言用户所熟悉。"

#: ../../docs/getting_started/step_by_step/scripting.rst:29
msgid "Loads and compiles blazingly fast."
msgstr "加载和编译速度飞快。"

#: ../../docs/getting_started/step_by_step/scripting.rst:30
msgid ""
"The editor integration is a pleasure to work with, with code completion for "
"nodes, signals, and many other items pertaining to the scene being edited."
msgstr "编辑器集成非常令人愉快，有节点、信号、其它场景相关项目的代码完成。"

#: ../../docs/getting_started/step_by_step/scripting.rst:31
msgid ""
"Has vector types built-in (such as Vectors, transforms, etc.), making it "
"efficient for heavy use of linear algebra."
msgstr "有内建向量类型(比如Vector、Transform等)，大量使用线性代数时非常有效。"

#: ../../docs/getting_started/step_by_step/scripting.rst:32
msgid ""
"Supports multiple threads as efficiently as statically typed languages - one "
"of the limitations that made us avoid VMs such as Lua, Squirrel, etc."
msgstr ""
"支持多线程，像静态类型语言一样有效 - 这是我们避免使用诸如Lua、Squirrel等虚拟"
"机的原因之一。"

#: ../../docs/getting_started/step_by_step/scripting.rst:33
msgid ""
"Uses no garbage collector, so it trades a small bit of automation (most "
"objects are reference counted anyway), by determinism."
msgstr ""
"不使用垃圾回收器，所以它确定性地自动处理之这部分(大多数对象都是引用计数)。"

#: ../../docs/getting_started/step_by_step/scripting.rst:34
msgid ""
"Its dynamic nature makes it easy to optimize sections of code in C++ (via "
"GDNative) if more performance is required, all without recompiling the "
"engine."
msgstr ""
"它的动态特性使其需要提高性能时，可以很容易地优化C++代码段(通过GDNative)，而这"
"些不需要重新编译引擎。"

#: ../../docs/getting_started/step_by_step/scripting.rst:36
msgid ""
"If you're undecided and have experience with programming, especially "
"dynamically typed languages, go for GDScript!"
msgstr ""
"如果您还没决定好，并且对编程有经验，特别是动态类型语言，那就选择GDScript吧！"

#: ../../docs/getting_started/step_by_step/scripting.rst:40
msgid "VisualScript"
msgstr "可视化脚本"

#: ../../docs/getting_started/step_by_step/scripting.rst:42
msgid ""
"Beginning with 3.0, Godot offers :ref:`Visual "
"Scripting<doc_what_is_visual_script>`. This is a typical implementation of a "
"\"blocks and connections\" language, but adapted to how Godot works."
msgstr ""
"从3.0开始，Godot开始支持 :ref:`可视化脚本<doc_what_is_visual_script>`。这是典"
"型的“节点和连线”语言的实现，但适用于Godot的开发方式。"

#: ../../docs/getting_started/step_by_step/scripting.rst:46
msgid ""
"Visual scripting is a great tool for non-programmers, or even for "
"experienced developers who want to make parts of the code more accessible to "
"others, like game designers or artists."
msgstr ""
"对非程序员来说，可视化编程是一个很好的工具，甚至对于经验丰富的开发人员来说也"
"是如此，他们想让部分代码易于被他人访问，比如游戏设计师和美术工作者。"

#: ../../docs/getting_started/step_by_step/scripting.rst:50
msgid ""
"It can also be used by programmers to build state machines or custom visual "
"node workflows - for example, a dialogue system."
msgstr "程序员也可以用它创建状态机或自定义可视节点工作流程，例如对话系统。"

#: ../../docs/getting_started/step_by_step/scripting.rst:55
msgid ".NET / C#"
msgstr ".NET / C#"

#: ../../docs/getting_started/step_by_step/scripting.rst:57
msgid ""
"As Microsoft's C# is a favorite amongst game developers, we have added "
"official support for it. C# is a mature language with tons of code written "
"for it, and support was added thanks to a generous donation from Microsoft."
msgstr ""
"由于微软的C#是游戏开发者的最爱，我们增加了官方支持。C#是一种成熟的语言，人们"
"为它编写了大量代码，而且支持得益于微软的慷慨捐赠。"

#: ../../docs/getting_started/step_by_step/scripting.rst:62
msgid ""
"It has an excellent tradeoff between performance and ease of use, although "
"one must be aware of its garbage collector."
msgstr "它在性能和易用性之间有很好的折衷，但必须注意它的垃圾收集器。"

#: ../../docs/getting_started/step_by_step/scripting.rst:65
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory any third-party .NET library or framework can be used for scripting "
"in Godot, as well as any Common Language Infrastructure-compliant "
"programming language, such as F#, Boo or ClojureCLR. In practice however, C# "
"is the only officially supported .NET option."
msgstr ""
"由于Godot使用 `Mono <https://mono-project.com>`_ .NET运行时，因此理论上任何第"
"三方.NET库或框架都可用于编写Godot脚本，以及任何符合通用语言标准架构的语言，如"
"F#、Boo或ClojureCLR。但实际上，C#是唯一官方支持的.NET选项。"

#: ../../docs/getting_started/step_by_step/scripting.rst:71
msgid "GDNative / C++"
msgstr "GDNative / C++"

#: ../../docs/getting_started/step_by_step/scripting.rst:73
msgid ""
"Finally, one of our brightest additions for the 3.0 release: GDNative allows "
"scripting in C++ without needing to recompile (or even restart) Godot."
msgstr ""
"最后是3.0版本的一个亮点:GDNative允许在C++中编写脚本，无需重新编译(甚至都不用"
"重启)Godot。"

#: ../../docs/getting_started/step_by_step/scripting.rst:77
msgid ""
"Any C++ version can be used, and mixing compiler brands and versions for the "
"generated shared libraries works perfectly, thanks to our use of an internal "
"C API Bridge."
msgstr ""
"任意C++版本都可以使用，由于我们在内部使用了C API Bridge，混合编译器和生成的共"
"享库都可以完美工作。"

#: ../../docs/getting_started/step_by_step/scripting.rst:81
msgid ""
"This language is the best choice for performance and does not need to be "
"used throughout an entire game, as other parts can be written in GDScript or "
"Visual Script. However the API is clear and easy to use as it resembles, "
"mostly, Godot's actual C++ API."
msgstr ""
"这种语言是性能上的最佳选择，它不需要在整个游戏中都使用，因为其他部分可以用"
"GDScript或Visual Script编写。它的API清晰且易于使用，类似于Godot的C++ API。"

#: ../../docs/getting_started/step_by_step/scripting.rst:86
msgid ""
"More languages can be made available through the GDNative interface, but "
"keep in mind we don't have official support for them."
msgstr "通过GDNative接口可以使用更多语言，但请记住我们没有官方支持。"

#: ../../docs/getting_started/step_by_step/scripting.rst:90
msgid "Scripting a scene"
msgstr "编写场景脚本"

#: ../../docs/getting_started/step_by_step/scripting.rst:92
msgid ""
"For the rest of this tutorial we'll set up a GUI scene consisting of a "
"button and a label, where pressing the button will update the label. This "
"will demonstrate:"
msgstr ""
"在教程剩下的部分里，我们将建立一个GUI场景，包含一个按钮和一个标签，当按下按钮"
"时标签会更新。这将会演示:"

#: ../../docs/getting_started/step_by_step/scripting.rst:96
msgid "Writing a script and attaching it to a node."
msgstr "编写脚本并附加到节点上。"

#: ../../docs/getting_started/step_by_step/scripting.rst:97
msgid "Hooking up UI elements via signals."
msgstr "通过信号来连接到UI元素。"

#: ../../docs/getting_started/step_by_step/scripting.rst:98
msgid "Writing a script that can access other nodes in the scene."
msgstr "编写脚本，使其能访问场景中的其它节点。"

#: ../../docs/getting_started/step_by_step/scripting.rst:100
msgid ""
"Before continuing, please make sure to read the :ref:"
"`GDScript<doc_gdscript>` reference. It's a language designed to be simple, "
"and the reference is short, so it will not take more than a few minutes to "
"get an overview of the concepts."
msgstr ""
"在继续之前，请务必阅读GDScript参考。它被设计为一种简单的语言，参考文献很简"
"短，因此阐述这些概念并不会花费几分钟时间。"

#: ../../docs/getting_started/step_by_step/scripting.rst:105
msgid "Scene setup"
msgstr "建立场景"

#: ../../docs/getting_started/step_by_step/scripting.rst:107
msgid ""
"Use the \"Add Child Node\" dialogue accessed from the Scene tab (or by "
"pressing ``Ctrl+A``) to create a hierarchy with the following nodes:"
msgstr ""
"使用场景(Scene)选项卡来访问“添加子节点”(Add Child Node)对话框(或者按下 ``Ctrl"
"+A``)，创建以下节点结构:"

#: ../../docs/getting_started/step_by_step/scripting.rst:110
msgid "Panel"
msgstr "面板"

#: ../../docs/getting_started/step_by_step/scripting.rst:112
msgid "Label"
msgstr "标签"

#: ../../docs/getting_started/step_by_step/scripting.rst:113
msgid "Button"
msgstr "按钮"

#: ../../docs/getting_started/step_by_step/scripting.rst:115
msgid "The scene tree should look like this:"
msgstr "场景树看起来应该是这个样子:"

#: ../../docs/getting_started/step_by_step/scripting.rst:119
msgid ""
"Use the 2D editor to position and resize the Button and Label so that they "
"look like the image below. You can set the text from the Inspector tab."
msgstr ""
"使用2D编辑器定位并调整按钮和标签的大小，使其看起来像下面的样子。您可以在属性"
"面板(Inspector)选项卡中设置文字。"

#: ../../docs/getting_started/step_by_step/scripting.rst:124
msgid "Finally, save the scene with a name such as ``sayhello.tscn``."
msgstr "最后，保存场景，用例如 ``sayhello.tscn`` 这样的名字。"

#: ../../docs/getting_started/step_by_step/scripting.rst:129
msgid "Adding a script"
msgstr "添加脚本"

#: ../../docs/getting_started/step_by_step/scripting.rst:131
msgid ""
"Right click on the Panel node, then select \"Attach Script\" from the "
"context menu:"
msgstr "右击Panel节点， 在弹出菜单中选择“附加脚本(Attach Script)”:"

#: ../../docs/getting_started/step_by_step/scripting.rst:136
msgid ""
"The script creation dialog will pop up. This dialog allows you to set the "
"script's language, class name, and other relevant options."
msgstr ""
"脚本创建对话框会弹出。这个对话框允许您设置脚本语言、类名和其它相关选项。"

#: ../../docs/getting_started/step_by_step/scripting.rst:139
msgid ""
"In GDScript, the file itself represents the class, so the class name field "
"is not editable."
msgstr "在GDScript里，文件本身代表了类，所以类名一栏无法编辑。"

#: ../../docs/getting_started/step_by_step/scripting.rst:142
msgid ""
"The node we're attaching the script to is a panel, so the Inherits field "
"will automatically be filled in with \"Panel\". This is what we want, as the "
"script's goal is to extend the functionality of our panel node."
msgstr ""
"我们要附加脚本的节点是个Panel(面板)，所以继承一栏会被自动填入“Panel”。这是我"
"们想要的，因为脚本的目的就是扩展这个面板节点的功能。"

#: ../../docs/getting_started/step_by_step/scripting.rst:146
msgid "Finally, enter a path name for the script and select Create:"
msgstr "最后，输入脚本的路径名然后选择新建(Create):"

#: ../../docs/getting_started/step_by_step/scripting.rst:150
msgid ""
"The script will then be created and added to the node. You can see this as "
"an \"Open script\" icon next to the node in the Scene tab, as well as in the "
"script property under Inspector:"
msgstr ""
"脚本会被创建并将添加至Panel节点上。您可以通过场景选项卡中节点旁边的“打开脚"
"本”图标或属性面板中的Script属性来查看这个脚本:"

#: ../../docs/getting_started/step_by_step/scripting.rst:156
msgid ""
"To edit the script, select either of these buttons, both of which are "
"highlighted in the above image. This will bring you to the script editor, "
"where a default template will be included:"
msgstr ""
"要编辑脚本，选择上述按钮之一，这两个按钮都在上图中突出显示。这会把您带到脚本"
"编辑器处，其中包含了默认模版:"

#: ../../docs/getting_started/step_by_step/scripting.rst:161
msgid ""
"There's not much there. The ``_ready()`` function is called when the node, "
"and all its children, enters the active scene. **Note:** ``_ready()`` is not "
"the constructor; the constructor is instead ``_init()``."
msgstr ""
"这里没有多少内容。 ``_ready()`` 函数在节点及其所有子节点进入活动场景时调用。 "
"**注意:** ``_ready()`` 并不是构造器；构造器是 ``_init()``。"

#: ../../docs/getting_started/step_by_step/scripting.rst:166
msgid "The role of the script"
msgstr "脚本的作用"

#: ../../docs/getting_started/step_by_step/scripting.rst:168
msgid ""
"A script adds behavior to a node. It is used to control how the node "
"functions as well as how it interacts with other nodes: children, parent, "
"siblings, and so on. The local scope of the script is the node. In other "
"words, the script inherits the functions provided by that node."
msgstr ""
"脚本为节点添加行为。它用于控制节点的功能以及它如何与其他节点交互:子节点、父节"
"点、同级节点等。脚本的作用域是(它附着的)节点。换句话说，该脚本继承了该节点提"
"供的功能。"

#: ../../docs/getting_started/step_by_step/scripting.rst:179
msgid "Handling a signal"
msgstr "处理信号"

#: ../../docs/getting_started/step_by_step/scripting.rst:181
msgid ""
"Signals are \"emitted\" when some specific kind of action happens, and they "
"can be connected to any function of any script instance. Signals are used "
"mostly in GUI nodes, although other nodes have them too, and you can even "
"define custom signals in your own scripts."
msgstr ""
"当某种特定行为发生时，信号会被“触发”，并且它们可以连接到任意脚本实例的任意函"
"数。信号主要用于GUI节点，不过其他节点也有信号，您甚至可以在自己的脚本里定义自"
"定义信号。"

#: ../../docs/getting_started/step_by_step/scripting.rst:186
msgid ""
"In this step, we'll connect the \"pressed\" signal to a custom function. "
"Forming connections is the first part and defining the custom function is "
"the second part. For the first part, Godot provides two ways to create "
"connections: through a visual interface the editor provides or through code."
msgstr ""
"在这一步中，我们将“pressed(按下)”信号连接到一个自定义函数上。形成连接是第一部"
"分，定义自定义函数是第二部分。对于第一部分，Godot提供了两种创建连接的方式:通"
"过编辑器的可视化界面或通过代码。"

#: ../../docs/getting_started/step_by_step/scripting.rst:191
msgid ""
"While we will use the code method for the remainder of this tutorial series, "
"let's cover how the editor interface works for future reference."
msgstr ""
"虽然我们会在本系列教程的其余部分中使用代码方法，但现在还是介绍一下如何用编辑"
"器界面操作以供将来参考。"

#: ../../docs/getting_started/step_by_step/scripting.rst:194
msgid ""
"Select the Button node in the scene tree and then select the \"Node\" tab. "
"Next, make sure that you have \"Signals\" selected."
msgstr ""
"在场景树中选择Button节点，然后选择“Node”选项卡。接下来，确保您选中"
"了“Signals”选项。"

#: ../../docs/getting_started/step_by_step/scripting.rst:199
msgid ""
"If you then select \"pressed()\" under \"BaseButton\" and click the "
"\"Connect...\" button in the bottom right, you'll open up the connection "
"creation dialogue."
msgstr ""
"选择“BaseButton”下的“pressed()”然后点击右下方的“Connect...(连接)”，会打开连接"
"创建对话框。"

#: ../../docs/getting_started/step_by_step/scripting.rst:204
msgid ""
"In the bottom-left are the key things you need to create a connection: a "
"node which implements the method you want to trigger (represented here as a "
"NodePath) and the name of the method to trigger."
msgstr ""
"左下方是创建连接所需的关键:实现您想要触发方法的节点(在此用NodePath表示)以及要"
"触发的方法的名字。"

#: ../../docs/getting_started/step_by_step/scripting.rst:208
msgid ""
"The top-left section displays a list of your scene's nodes with the emitting "
"node's name highlighted in red. Select the \"Panel\" node here. When you "
"select a node, the NodePath at the bottom will automatically update to point "
"to a relative path from the emitting node to the selected node."
msgstr ""
"左上部分显示了您的场景节点列表，其中触发节点的名称以红色突出显示。在这里选"
"择“Panel”节点。当您选择一个节点时，底部的NodePath将自动更新为触发节点到所选节"
"点的相对路径。"

#: ../../docs/getting_started/step_by_step/scripting.rst:213
#, fuzzy
msgid ""
"By default, the method name will contain the emitting node's name (\"Button"
"\" in this case), resulting in ``_on_[EmitterNode]_[signal_name]``. If you "
"do have the \"Make Function\" check button checked, then the editor will "
"generate the function for you before setting up the connection."
msgstr ""
"默认情况下，方法名称将包含触发节点的名称(这里为“Button”)，从而生成“_on_[触发"
"节点]_[信号名]”这样的名字。如果您选中了“生成函数”复选框，编辑器会在建立连接之"
"前生成这个函数。"

#: ../../docs/getting_started/step_by_step/scripting.rst:218
msgid ""
"And that concludes the guide on how to use the visual interface. However, "
"this is a scripting tutorial, so for the sake of learning, let's dive into "
"the manual process!"
msgstr ""
"这就结束了关于如何使用可视界面的指南。然而这是一个脚本教程，所以为了学习，让"
"我们使用代码方法！"

#: ../../docs/getting_started/step_by_step/scripting.rst:222
msgid ""
"To accomplish this, we will introduce a function that is probably the most "
"used by Godot programmers: :ref:`Node.get_node() "
"<class_Node_method_get_node>`. This function uses paths to fetch nodes "
"anywhere in the scene, relative to the node that owns the script."
msgstr ""
"为了达成目的，我们先介绍一个可能是被Godot程序员使用最多的函数: :ref:`Node."
"get_node() <class_Node_method_get_node>`。该函数使用路径来获取场景中相对于该"
"脚本的节点的任何位置的节点。"

#: ../../docs/getting_started/step_by_step/scripting.rst:227
msgid ""
"For the sake of convenience, delete everything underneath ``extends Panel``. "
"You will fill out the rest of the script manually."
msgstr ""
"为了方便起见，删除 ``extends Panel`` 下的所有内容。您要手动填写脚本的其余部"
"分。"

#: ../../docs/getting_started/step_by_step/scripting.rst:230
msgid ""
"Because the Button and Label are siblings under the Panel where the script "
"is attached, you can fetch the Button by typing the following underneath the "
"``_ready()`` function:"
msgstr ""
"由于Button和Label是有脚本附加的Panel下的兄弟节点，因此可以通过在 "
"``_ready()`` 函数下输入以下内容来获取Button引用:"

#: ../../docs/getting_started/step_by_step/scripting.rst:247
msgid "Next, write a function which will be called when the button is pressed:"
msgstr "接下来，写一个函数，按钮按下时它会被触发:"

#: ../../docs/getting_started/step_by_step/scripting.rst:262
msgid ""
"Finally, connect the button's \"pressed\" signal to ``_ready()`` by using :"
"ref:`Object.connect() <class_Object_method_connect>`."
msgstr ""
"最后，通过 :ref:`Object.connect() <class_Object_method_connect>` 来连接按钮"
"的 “pressed” 信号到 ``_ready()`` 。"

#: ../../docs/getting_started/step_by_step/scripting.rst:278
msgid "The final script should look like this:"
msgstr "脚本最终看起来是这个样子:"

#: ../../docs/getting_started/step_by_step/scripting.rst:311
msgid ""
"Run the scene and press the button. You should get the following result:"
msgstr "运行场景并按下按钮，您应该看到这个结果:"

#: ../../docs/getting_started/step_by_step/scripting.rst:315
msgid "Why, hello there! Congratulations on scripting your first scene."
msgstr "您好啊！恭喜您完成了您的第一个场景脚本。"

#: ../../docs/getting_started/step_by_step/scripting.rst:319
msgid ""
"A common misunderstanding regarding this tutorial is how ``get_node(path)`` "
"works. For a given node, ``get_node(path)`` searches its immediate children. "
"In the above code, this means that Button must be a child of Panel. If "
"Button were instead a child of Label, the code to obtain it would be:"
msgstr ""
"本教程的一个常见的误解是 ``get_node(path)`` 的工作原理。对于给定节点， "
"``get_node(path)`` 搜索它的直接子节点。在上面代码中，Button必须是Panel的子"
"项。如果Button是Label的子项，则获得它的代码是:"

#: ../../docs/getting_started/step_by_step/scripting.rst:337
msgid "Also, remember that nodes are referenced by name, not by type."
msgstr "另外，注意节点是通过节点名，而不是类型来获取的。"

#: ../../docs/getting_started/step_by_step/scripting.rst:341
msgid ""
"The right-hand panel of the connect dialogue is for binding specific values "
"to the connected function's parameters. You can add and remove values of "
"different types."
msgstr ""
"连接对话框的右侧面板用于将特定值绑定到连接函数的参数。您可以添加和删除不同类"
"型的值。"

#: ../../docs/getting_started/step_by_step/scripting.rst:345
msgid ""
"The code approach also enables this with a 4th ``Array`` parameter that is "
"empty by default. Feel free to read up on the ``Object.connect`` method for "
"more information."
msgstr ""
"代码方法下可以用默认为空的第四个 ``Array`` 参数来启用额外参数。参阅 ``Object."
"connect`` 方法以获取更多信息。"
