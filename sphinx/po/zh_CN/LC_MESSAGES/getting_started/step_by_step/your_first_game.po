# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-16 22:53+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:4
msgid "Your first game"
msgstr "您的第一个游戏"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:7
msgid "Overview"
msgstr "概览"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:9
msgid ""
"This tutorial will guide you through making your first Godot project. You "
"will learn how the Godot editor works, how to structure a project, and how "
"to build a 2D game."
msgstr ""
"这个教学将会全程引导您做一个您的第一个Godot项目。您能从中学到Godot编辑器如何"
"工作，一个项目如何构造出来，还有2D游戏如何做出来。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:13
msgid ""
"This project is an introduction to the Godot engine. It assumes that you "
"have some programming experience already. If you're new to programming "
"entirely, you should start here: :ref:`doc_scripting`."
msgstr ""
"这个项目是Godot引擎的一个介绍。是以您已经有了一些编程经验为前提的。如果您对编"
"程完全是菜鸟，您应当从这一条开始: :ref:`doc_scripting` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:18
msgid ""
"The game is called \"Dodge the Creeps!\". Your character must move and avoid "
"the enemies for as long as possible. Here is a preview of the final result:"
msgstr ""
"这个游戏叫做“Dodge the Creeps!”。您的角色必须尽力的通过移动来避开敌人。下面是"
"最终效果的预览:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:24
msgid ""
"**Why 2D?** 3D games are much more complex than 2D ones. You should stick to "
"2D until you have a good understanding of the game development process."
msgstr ""
"**为什么是2D游戏** 3D游戏比2D游戏复杂很多。您应当从2D游戏入手直到您能很好的理"
"解游戏开发工序。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:28
msgid "Project setup"
msgstr "项目设置"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:30
msgid ""
"Launch Godot and create a new project. Then, download :download:"
"`dodge_assets.zip <files/dodge_assets.zip>` - the images and sounds you'll "
"be using to make the game. Unzip these files to your project folder."
msgstr ""
"运行Godot新建一个项目。然后下载 :download:`dodge_assets.zip <files/"
"dodge_assets.zip>` - 您会在游戏中用到的图片和声音。解压这个文件到您的项目文件"
"夹。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:34
msgid ""
"For this tutorial, we will assume you are familiar with the editor. If you "
"haven't read :ref:`doc_scenes_and_nodes`, do so now for an explanation of "
"setting up a project and using the editor."
msgstr ""
"对于本教程，我们假设您熟悉编辑器。如果您还没有阅读 :ref:"
"`doc_scenes_and_nodes` ，那么赶紧看看，以了解如何设置项目并使用编辑器。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:38
msgid ""
"This game will use portrait mode, so we need to adjust the size of the game "
"window. Click on Project -> Project Settings -> Display -> Window and set "
"\"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""
"这个游戏会使用竖屏模式，所以我们需要调整游戏窗口的大小。点击项目->项目设置->"
"显示->窗口，设置“宽度”为480，“高度”为720。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:43
msgid "Organizing the project"
msgstr "组织项目"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:45
msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene. In a larger "
"project, it might be useful to make folders to hold the various scenes and "
"their scripts, but for this relatively small game, you can save your scenes "
"and scripts in the project's root folder, referred to as ``res://``.  You "
"can see your project folders in the FileSystem Dock in the lower left corner:"
msgstr ""
"在这个项目里，我们会做出来3个独立的场景: ``Player`` , ``Mob`` 和 ``HUD`` ,我"
"们游戏的 ``Main`` 场景由这3个场景组合而成。在更大的项目里，一般会把不同的场景"
"及其脚本放到各自的文件夹里。但是对于这次的小游戏，您可以将您的场景和脚本都存"
"放在根目录 ``res://`` 下。您能在文件系统面板的左上角看到您的项目文件夹:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:56
msgid "Player scene"
msgstr "游戏角色场景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:58
msgid ""
"The first scene we will make defines the ``Player`` object. One of the "
"benefits of creating a separate Player scene is that we can test it "
"separately, even before we've created other parts of the game."
msgstr ""
"第一个场景，我们会定义“player”对象。创建一个分开的游戏角色场景的好处是我们可"
"以单独测试它，即使我们还没有创建游戏的其它部分。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:63
msgid "Node structure"
msgstr "节点结构"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:65
msgid ""
"To begin, click the \"Add/Create a New Node\" button and add an :ref:`Area2D "
"<class_Area2D>` node to the scene."
msgstr ""
"首先，单击“添加/创建一个新节点”按钮，并向场景添加一个 :ref:`Area2D "
"<class_Area2D>` 节点。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:70
msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change its name to ``Player`` by clicking on the node's name. This is the "
"scene's root node. We can add additional nodes to the player to add "
"functionality."
msgstr ""
"使用 ``Area2D`` 类我们可以检测物体是否跑到游戏角色之中或者与游戏角色发生交"
"叠。点击节点将其重命名为 ``Player`` ，它是场景的根节点，我们可以对该游戏角色"
"节点添加额外的节点来添加其功能。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:75
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"在我们向 ``Player`` 节点添加子节点之前，我们可能希望确保不会因为点击他们而不"
"小心移动或缩放他们，那就选中该节点然后点击锁头右侧的图标，它的工具提示描述"
"为“确保物体的子节点不会被选中。”"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:82
msgid ""
"Save the scene. Click Scene -> Save, or press ``Ctrl+S`` on Windows/Linux or "
"``Command+S`` on Mac."
msgstr ""
"保存场景，点击场景→保存，或者在Windows/Linux平台上按下 ``Ctrl+S`` 或是Mac上按"
"下 ``Command+S``。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:84
msgid "For this project, we will be following the Godot naming conventions."
msgstr "对于这个项目，我们将遵循Godot命名约定。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:86
msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"对于该项目，我们会遵循Godot的命名规范，类(节点)使用 ``PascalCase`` (大写分隔)"
"命名，变量和函数使用 ``snake_case`` (下划线分隔)命名，常量使用 ``ALL_CAPS`` "
"(全大写)命名。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:90
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`).  Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**:类，导出变量和方法使用PascalCase，私有字段使用_camelCase，局部变量和参"
"数使用camelCase(参见 :ref:`doc_c_sharp_styleguide`)。连接信号时，请注意精确键"
"入方法名称。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:97
msgid "Sprite animation"
msgstr "精灵动画"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:99
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Next, in the same location, click "
"``<SpriteFrames>``, then click \"Open Editor\" to open the \"SpriteFrames\" "
"panel:"
msgstr ""
"单击“播放器”节点并添加“动画精灵”节点作为子节点。“动画精灵”将处理我们播放器的"
"外观和动画。请注意，该节点旁边有一个警告符号。一个“动画精灵”需要一个“精灵序列"
"帧”资源，它是一个可显示的动画列表。要创建它，在属性面板中找到“序列帧”属性，然"
"后单击“[空白]” - >“新建精灵序列帧”。接下来，在该位置，单击“<精灵序列帧>”，然"
"后单击“打开编辑器”以打开“精灵序列帧”面板："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:111
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"right\". Then click the \"Add\" button to create a second animation "
"named \"up\". Drag the two images for each animation, named "
"``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, into the \"Animation "
"Frames\" side of the panel:"
msgstr ""
"左边是一个动画列表。单击“默认”，并将其重命名为“right”。然后点击“添加”按钮，创"
"建第二个动画名为“up”。将每个动画的两个图像(名"
"为“playerGrey_up[1/2]”和“playerGrey_walk[1/2]”)拖到面板的“动画帧”一侧:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:118
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"游戏角色图像对于游戏窗口来说有点太大，所以我们需要缩小它们。 单击 "
"``AnimatedSprite`` 节点并将 ``Scale`` 属性设置为 ``(0.5,0.5)`` 。 您可以在 "
"``Node2D`` 标题下的属性面板中找到它。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:125
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\".  Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"最后，添加一个:参考:`二维碰撞形状<类_二维碰撞形状>`作为玩家（Player）的子节"
"点。它用于决定游戏角色的“碰撞盒”，亦或者说是它碰撞区域的边界。对于该角色，给"
"他一个二维胶囊体形状（CapsuleShape2D） 节点再好不过了，那么接下来，在属性面板"
"找到形状（Shape）部分，点击[空白](empty)->“新建二维胶囊体形状”（New "
"CapsuleShape2D）。使用两个尺寸手柄，调整胶囊的形状及大小，以覆盖住精灵:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:134
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "完成后，您的``Player``场景看起来应该像这样:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:139
msgid "Moving the player"
msgstr "移动游戏角色"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:141
msgid ""
"Now we need to add some functionality that we can't get from a built-in "
"node, so we'll add a script. Click the ``Player`` node and click the \"Add "
"Script\" button:"
msgstr ""
"现在我们需要添加一些内置节点所不具备的功能，因此我们要添加一个脚本。点击 "
"``Player`` 节点然后点击“添加脚本”按钮:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:147
msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr "在脚本设定窗口中，您可以都留默认选项，只要点击“创建”就好:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:150
msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"如果您要创建一个C#脚本或者其他语言的脚本，那就在创建之前在 `语言` 下拉菜单中"
"选择语言。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:155
msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr "如果这是您第一次使用GDScript，请在继续之前阅读 :ref:`doc_scripting`。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:158
msgid "Start by declaring the member variables this object will need:"
msgstr "首先声明该对象将会用到的成员变量:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:179
msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"在第一个变量“速度”（speed）上使用“导出”（export）关键字，这样允许我们在属性面"
"板中设置它的值。便利之处在于，您能够像节点内置属性一样调整它的值。单击“玩"
"家”（Player）节点，您将看到该属性现在已出现在属性面板的“脚本变量”（Script "
"Variables）部分中。请记住，如果您在此处更改值，它将覆盖脚本中已写入的值。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:186
msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"如果您正在使用C#，则需要(重新)构建项目程序集，只要您想查看新的导出变量或信"
"号。可以通过单击编辑器窗口底部的“Mono”一词来手动触发此构建，以显示Mono "
"Panel，然后单击“Build Project”按钮。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:194
msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 函数会在节点进入场景树的时候被调用，这也是我们用来获取游戏窗口大"
"小的好时候:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:210
msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"现在我们可以使用“_处理”函数（_process()）来定义玩家将要做什么。“_处理”函数"
"（_process()）在每一帧都会被调用，所以我们会用它来实时更新游戏中预计会经常发"
"生变化的元素。对于玩家，我们需要执行以下操作："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:215
msgid "Check for input."
msgstr "检测输入。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:216
msgid "Move in the given direction."
msgstr "以给定方向移动。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:217
msgid "Play the appropriate animation."
msgstr "播放适当的动画。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:219
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this demo, "
"we will use the default events that are assigned to the arrow keys on the "
"keyboard."
msgstr ""
"首先，我们需要检测输入——玩家是否按了某个键？对于这个游戏来说，我们有四个方向"
"的输入需要检测。输入操作在“输入映射”下的“项目设置”中定义。在这里，您可以自定"
"义事件，并分配不同的键位、鼠标事件或是其他输入。对于这个演示项目来说，我们会"
"使用已经分配给键盘方向键的默认事件。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:226
msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it is pressed or ``false`` if it isn't."
msgstr ""
"您可以通过 ``Input.is_action_pressed()`` 检测一个按键是否被按下，该函数会在按"
"下时返回 ``true`` ，否则返回 ``false``。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:288
msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* than if it just moved horizontally."
msgstr ""
"我们首先将速度（velocity）设置为（0,0）- 默认情况下，玩家不应该移动。然后我们"
"检查每个输入，并从速度（velocity）中添加/减去以获得总方向。例如，如果你同时持"
"有向右（right）和向下（down），由此产生的速度（velocity）向量将是（1,1）。在"
"这种情况下，由于我们正在添加水平和垂直运动，玩家将比移动水平*更快*移动。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:295
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, and multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"我们可以通过对速度向量 *归一化* 来防止这件事，这也就意味着我们会把它的 *模* "
"设置为 ``1`` ，并乘以想要的速度，这也就意味着不再有更快的对角线移动方式。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:299
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"如果您从未使用过向量数学，亦或者需要温故知新，您可以看看这里 :ref:"
"`doc_vector_math` 关于向量在Godot中使用的解释说明。最好是了解一下尽管对于本教"
"程剩下的部分来说这并不必要。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:303
msgid ""
"We also check whether the player is moving so we can start or stop the "
"AnimatedSprite animation."
msgstr ""
"我们也会检测某个问价是否在移动，以便我们能够启动或停止AnimatedSprite的动画。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:306
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"在GDScript中，“$”的含义是返回当前节点的相对路径上的节点，如果找不到节点则返回"
"空值（null）。由于动画精灵（AnimatedSprite）是当前节点的子节点，我们可以使用"
"这种形式$AnimatedSprite。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:309
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, ``"
"$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$`` 是 ``get_node()`` 的简写，因此在上面的代码中， ``$AnimatedSprite."
"play()`` 与 ``get_node(\"AnimatedSprite\").play()`` 等效。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:312
msgid ""
"Now that we have a movement direction, we can update the player's position "
"and use ``clamp()`` to prevent it from leaving the screen by adding the "
"following to the bottom of the ``_process`` function:"
msgstr ""
"现在我们有一个移动方向，我们可以更新玩家的位置并使用“钳住”（clamp()）来防止它"
"离开屏幕，方法是在“_处理”函数（_process()）函数底部添加以下内容："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:332
msgid "*Clamping* a value means restricting it to a given range."
msgstr "*夹住*一个值意味着将其限制在一个给定区间内。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:334
msgid ""
"Click \"Play Scene\" (``F6``) and confirm you can move the player around the "
"screen in all directions. The console output that opens upon playing the "
"scene can be closed by clicking ``Output`` (which should be highlighted in "
"blue) in the lower left of the Bottom Panel."
msgstr ""
"单击 \"播放场景\"( ``F6`` )并确认您可以在各个方向上围绕屏幕进行移动。 运行时"
"打开的控制台输出可以通过单击底部面板左下角的 ``日志`` (应该以蓝色突出显示)来"
"关闭。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:339
msgid ""
"If you get an error in the \"Debugger\" panel that refers to a \"null "
"instance\", this likely means you spelled the node name wrong. Node names "
"are case-sensitive and ``$NodeName`` or ``get_node(\"NodeName\")`` must "
"match the name you see in the scene tree."
msgstr ""
"如果您在“调试器”面板中得到一个错误说引用了一个“null实例”，似乎您节点的名字拼"
"写有误。节点名是对大小写敏感的并且 ``$NodeName`` 或 ``get_node(\"NodeName"
"\")`` 必须与您在场景书中见到的名字一致。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:344
msgid "Choosing animations"
msgstr "选择动画"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:346
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on direction. We have a \"right\" animation, "
"which should be flipped horizontally using the ``flip_h`` property for left "
"movement, and an \"up\" animation, which should be flipped vertically with "
"``flip_v`` for downward movement. Let's place this code at the end of our "
"``_process()`` function:"
msgstr ""
"既然游戏角色能够移动，我们就需要基于方向来改变AnimatedSprite正在播放的动画。"
"我们有一个“right”动画，其应该在向左的运动中通过 ``flip_h`` 属性被左右翻转，以"
"及一个“up”动画，其应该在向下的运动中通过 ``flip_v`` 属性上下翻转。那我们就在 "
"``_process()`` 函数的结尾添加这些代码吧:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:380
msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Consider this code versus the shortened boolean assignment "
"above:"
msgstr ""
"上面代码中的布尔赋值是程序员的常用简写。 考虑此代码与上面缩短的布尔赋值:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:399
msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions. When you're sure the movement is working correctly, add this "
"line to ``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"再次运行场景并检查各方向的动画是否正确，当您确定移动正常工作的话，将下面一行"
"代码加到 ``_ready()`` 中以便游戏角色在游戏开始时被隐藏:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:414
msgid "Preparing for collisions"
msgstr "准备碰撞"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:416
msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"我们希望 ``Player`` 能够检测它何时被一个敌人撞到，但是我们还没做敌人呢！没关"
"系，因为我们将要用Godot的 *信号* 功能来实现。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:420
msgid "Add the following at the top of the script, after ``extends Area2d``:"
msgstr "在脚本开头， ``extends Area2d`` 下添加:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:434
msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"这段代码定义了一个叫 “hit” 的自定义信号，当我们的游戏角色撞到某个敌人的时候，"
"我们就让 “hit” 发射(发送出去)。我们用 ``Area2D`` 来检测碰撞，选择 ``Player`` "
"节点并点击属性面板标签页旁的 “节点” 标签页来查看游戏角色能够发射的所有信号:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:441
msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered( Object "
"body )`` signal; this will be emitted when a body contacts the player. Click "
"\"Connect..\" and then \"Connect\" again on the \"Connecting Signal\" "
"window. We don't need to change any of these settings - Godot will "
"automatically create a function in your player's script. This function will "
"be called whenever the signal is emitted - it *handles* the signal."
msgstr ""
"请注意我们的自定义“hit”信号也在存在！由于我们的敌人移动是``RigidBody2D``节"
"点，我们需要``body_entered（Object body）``信号;这将在body接触玩家时发出。单"
"击“连接...”，然后在“连接信号”窗口再次“连接”。我们不需要更改任何这些设置 -戈多"
"将自动在您的编辑器脚本中创建一个功能。每当发出信号时都会调用此函数 -用它来*处"
"理*这个信号。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:450
msgid ""
"When connecting a signal, instead of having Godot create a function for you, "
"you can also give the name of an existing function that you want to link the "
"signal to."
msgstr ""
"当连接一个信号时，除了Godot为您创建的函数之外，您也要给出一个已有函数的名称用"
"于将信号连接到它上。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:454
msgid "Add this code to the function:"
msgstr "为该节点添加函数:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:473
msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"每次敌人击中玩家时, 都会发出信号。我们需要禁用玩家的碰撞, 这样我们就不会多次"
"触发 ``hit`` 信号。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:477
msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` allows "
"us to have Godot wait to disable the shape until it's safe to do so."
msgstr ""
"如果在引擎的碰撞处理过程中发生错误，禁用区域的碰撞形状可能会导致错误。使用"
"``set_deferred（）``允许我们让戈多等待禁用形状，直到安全为止。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:482
msgid ""
"The last piece for our player is to add a function we can call to reset the "
"player when starting a new game."
msgstr "游戏角色的最后一部分就是添加一个功能，用于在开始新游戏时重置游戏角色。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:503
msgid "Enemy scene"
msgstr "敌人场景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:505
msgid ""
"Now it's time to make the enemies our player will have to dodge. Their "
"behavior will not be very complex: mobs will spawn randomly at the edges of "
"the screen and move in a random direction in a straight line, then despawn "
"when they go offscreen."
msgstr ""
"现在是时候去做一些游戏角色必须躲避的敌人了。他们的行为并不复杂:怪物会在屏幕边"
"缘随机生成并以随机方向沿直线运动，然后会在离开屏幕时消失。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:510
msgid ""
"We will build this into a ``Mob`` scene, which we can then *instance* to "
"create any number of independent mobs in the game."
msgstr ""
"我们会将其构建到 ``Mob`` 场景中，我们稍后会实例化这个场景来在游戏中创建若干个"
"独立的怪物。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:514
msgid "Node setup"
msgstr "节点设置"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:516
msgid "Click Scene -> New Scene and we'll create the Mob."
msgstr "点击场景→新建场景，然后我们就可以创建Mob了。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:518
msgid "The Mob scene will use the following nodes:"
msgstr "Mob场景将会使用如下节点:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:520
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ":ref:`RigidBody2D <class_RigidBody2D>` (名为 ``Mob``)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:522
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr ":ref:`AnimatedSprite <class_AnimatedSprite>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:523
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr ":ref:`CollisionShape2D <class_CollisionShape2D>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:524
msgid ""
":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>` (named "
"``Visibility``)"
msgstr "\n"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:526
msgid ""
"Don't forget to set the children so they can't be selected, like you did "
"with the Player scene."
msgstr "别忘记设置其子节点以不被选中，就像您在处理Player场景时一样。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:529
msgid ""
"In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity "
"Scale`` to ``0``, so the mob will not fall downward. In addition, under the "
"``PhysicsBody2D`` section, click the ``Mask`` property and uncheck the first "
"box. This will ensure the mobs do not collide with each other."
msgstr ""
"在 :ref:`RigidBody2D <class_RigidBody2D>` 属性中，设置 ``Gravity Scale`` 为 "
"``0``，以防止怪物向下移动。此外，在 ``PhysicsBody2D`` 部分下，点击 ``Mask`` "
"属性并去除第一个复选框的勾选，这会确保怪物不会彼此碰撞。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:536
msgid ""
"Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the "
"player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. "
"Set the ``Playing`` property in the Inspector to \"On\" and adjust the "
"\"Speed (FPS)\" setting as shown below. We'll select one of these animations "
"randomly so that the mobs will have some variety."
msgstr ""
"设置 :ref:`AnimatedSprite <class_AnimatedSprite>` 就像您为游戏角色做的那样。"
"这一次, 我们有3动画: ``fly``, ``swim``, 和 ``walk``。将属性面板中的 "
"``Playing`` 属性设置为 \"On\" 并调整 \"速度 (FPS)\" 设置, 如下所示。我们将随"
"机选择这些动画之一, 使怪物将有一些变量。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:543
msgid ""
"``fly`` should be set to 3 FPS, with ``swim`` and ``walk`` set to 4 FPS."
msgstr "``fly`` 应设置为3 FPS, ``swim`` 和 ``walk``应设置为4 FPS."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:545
msgid ""
"Like the player images, these mob images need to be scaled down. Set the "
"``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""
"像游戏角色图片一样，这些怪物的图片也要缩小。设置 ``AnimatedSprite`` 的 "
"``Scale`` 属性为 ``(0.75, 0.75)``。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:548
msgid ""
"As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To "
"align the shape with the image, you'll need to set the ``Rotation Degrees`` "
"property to ``90`` under ``Node2D``."
msgstr ""
"正如在 \"游戏角色\" 场景中, 添加一个 \"CapsuleShape2D\" 的碰撞。要将形状与图"
"像对齐, 您需要将 \"Rotation Degrees\" 属性设置为 \"Node2D\" 下的 \"90\"。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:553
msgid "Enemy script"
msgstr "敌人的脚本"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:555
msgid "Add a script to the ``Mob`` and add the following member variables:"
msgstr "添加一条脚本到 ``Mob`` 然后添加以下成员变量:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:581
msgid ""
"When we spawn a mob, we'll pick a random value between ``min_speed`` and "
"``max_speed`` for how fast each mob will move (it would be boring if they "
"were all moving at the same speed). We also have an array containing the "
"names of the three animations, which we'll use to select a random one. Make "
"sure you've spelled these the same in the script and in the SpriteFrames "
"resource."
msgstr ""
"当我们生成一个怪物时，我们将在“min_speed”和“max_speed”之间随机选择一个值，表"
"示每个怪物移动的速度(如果它们都以相同的速度移动，那就太无聊了)。我们还有一个"
"数组，其中包含三个动画的名称，我们将使用它来随机选择一个动画。请确保您在脚本"
"和spriteframe资源中拼写相同."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:587
msgid ""
"Now let's look at the rest of the script. In ``_ready()`` we randomly choose "
"one of the three animation types:"
msgstr ""
"现在让我们来看看脚本的其余部分。在\"_ready()\" 中，我们从三个动画类型中随机选"
"择一个:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:606
msgid ""
"You must use ``randomize()`` if you want your sequence of \"random\" numbers "
"to be different every time you run the scene. We're going to use "
"``randomize()`` in our ``Main`` scene, so we won't need it here. ``randi() % "
"n`` is the standard way to get a random integer between ``0`` and ``n-1``."
msgstr ""
"如果希望每次打开场景时，您的\"random\"成员顺序都不一样，则必须使用 "
"``randomize()`` 。我们将会在我们的 ``Main`` 场景中使用 ``randomize()``，所以"
"我们不会在这里使用。 ``randi() % n``是一种标准的方式，用于产生 ``0`` 到 "
"``n-1`` 的随机整数。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:612
msgid ""
"The last piece is to make the mobs delete themselves when they leave the "
"screen. Connect the ``screen_exited()`` signal of the ``Visibility`` node "
"and add this code:"
msgstr ""
"最后一部分就是，当怪物离开屏幕后，让他们删除掉自己，连接 ``Visibility`` 的 "
"``screen_exited()`` 信号节点然后增加代码:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:629
msgid "This completes the `Mob` scene."
msgstr "这会完成 `Mob`场景。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:632
msgid "Main scene"
msgstr "主场景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:634
msgid ""
"Now it's time to bring it all together. Create a new scene and add a :ref:"
"`Node <class_Node>` named ``Main``. Click the \"Instance\" button and select "
"your saved ``Player.tscn``."
msgstr ""
"现在是时候将其整合起来了。创建一个新场景并添加一个: :ref:`Node <class_Node>` "
"命名为“Main”。点击“实例”按钮并选择您保存的 ``Player.tscn``。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:640
msgid "See :ref:`doc_instancing` to learn more about instancing."
msgstr "查阅 :ref:`doc_instancing` 来学习更多关于实例的知识。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:642
msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""
"现在, 将以下节点添加为 \"Main\" 的子级, 并按显示的名称命名它们 (值以秒为单"
"位):"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:645
msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>` (命名为 ``MobTimer`` ) - 可用来控制怪物产生的频率"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:646
msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ":ref:`Timer <class_Timer>` (命名为 ``ScoreTimer`` ) - 每秒钟增加分数"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:647
msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ":ref:`Timer <class_Timer>` (命名为 ``StartTimer``)-在开始前给出延迟"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:648
msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
":ref:`Position2D <class_Position2D>` (命名为 ``StartPosition`` ) - 表示游戏角"
"色的起始位置"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:650
msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "设置每个 ``Timer`` 节点的 ``Wait Time`` 属性，如下所示:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:653
msgid "``MobTimer``: ``0.5``"
msgstr "``MobTimer``: ``0.5``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:654
msgid "``ScoreTimer``: ``1``"
msgstr "``ScoreTimer``: ``1``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:655
msgid "``StartTimer``: ``2``"
msgstr "``StartTimer``: ``2``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:657
msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"另外, 将 \"StartTimer\" 的 \"One Shot\" 属性设置为 \"On\", 并将 "
"\"StartPosition\" 节点的 \"Position\" 设置为 \"(240、450)\"。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:661
msgid "Spawning mobs"
msgstr "生成怪物"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:663
msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"主节点将会生成新的怪物，并且我们需要他们出现在屏幕边缘的随机地点。添加一个 :"
"ref:`Path2D <class_Path2D>` 节点，命名为 ``MobPath``，作为 ``Main`` 的子节"
"点。当您选择 ``Path2D`` 后，您就能在编辑器的上方看到一些新按钮:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:670
msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Snap to Grid\" is checked. This option can be found under the "
"\"Snapping options\" button to the left of the \"Lock\" button, appearing as "
"a series of three vertical dots."
msgstr ""
"选择中间的(“添加点”)然后在所示的拐角通过单击来新增点，绘制出路径。要使点吸附"
"到网格，确保“吸附到网格”被选中。此选项可以在“吸附选项(Snapping options)”按钮"
"下方，“锁定(Lock)”按钮的左边找到，以一系列三个垂直点的形式出现。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:678
msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr "按 *顺时针* 顺序绘制路径，否则您的怪物会指向 *向外* 而不是 *向内* !"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:681
msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr "在图像中放置点“4”后，点击“闭合曲线”按钮，您的曲线就完成了。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:684
msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"现在已经定义了路径，添加一个 :ref:`PathFollow2D <class_PathFollow2D>` 节点作"
"为 ``MobPath`` 的子节点，并将其命名为 ``MobSpawnLocation``。此节点在移动时将"
"自动旋转并跟随路径，因此我们可以使用它沿路径选择一个随机位置和方向。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:690
msgid "Main script"
msgstr "主脚本"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:692
msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""
"在“Main”中添加一个脚本。在脚本的顶部，我们使用' export (PackedScene) ' '来允"
"许我们选择我们想要实例化的Mob场景。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:732
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" panel and drop it in the ``Mob`` "
"property under the Script Variables of the ``Main`` node."
msgstr ""
"从“文件系统”面板中拖动“Mob.tscn”，并将其放在“Main”节点的脚本变量下的“Mob”属性"
"中。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:735
msgid ""
"Next, click on the Player and connect the ``hit`` signal. We want to make a "
"new function named ``game_over``, which will handle what needs to happen "
"when a game ends. Type \"game_over\" in the \"Method In Node\" box at the "
"bottom of the \"Connecting Signal\" window. Add the following code, as well "
"as a ``new_game`` function to set everything up for a new game:"
msgstr ""
"接下来，点击游戏角色并连接“hit”信号。我们希望创建一个名为‘game_over’的新函"
"数，它将处理游戏结束时需要发生的事情。在“连接信号”窗口底部的“方法在节点”框中"
"键入“game_over”。添加以下代码，以及' ' new_game ' '函数来设置新游戏的所有内"
"容:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:772
msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` ,and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""
"现在，将每个计时器节点(' StartTimer '、' ScoreTimer '和' MobTimer ')的' ' "
"timeout() ' '信号连接到主脚本。' StartTimer ' '将启动其他两个计时器。' ' "
"ScoreTimer ' '将把分数增加1."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:799
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position."
msgstr ""
"在 ``_on_MobTimer_timeout()`` 函数中,我们将创建一个mob实例，沿着 ``Path2D`` "
"选择一个随机起始位置, 并设置mob的运动。``PathFollow2D`` 节点会随着路径自动旋"
"转，因此我们会使用它来选择mob的方向以及它的位置。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:805
msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr "注意，必须使用 ``add_child()`` 将新实例添加到场景中。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:808
msgid ""
"Now click on ``MobTimer`` in the scene window then head to inspector window, "
"switch to node view then click on ``timeout()`` and connect the signal."
msgstr ""
"现在在场景窗口中点击 ``MobTimer`` ，然后前往inspector窗口，切换到节点视图，然"
"后点击 ``timeout()`` 并连接signal。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:811
msgid "Add the following code:"
msgstr "添加以下代码:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:859
msgid ""
"In functions requiring angles, GDScript uses *radians*, not degrees. If "
"you're more comfortable working with degrees, you'll need to use the "
"``deg2rad()`` and ``rad2deg()`` functions to convert between the two."
msgstr ""
"在需要角度的函数中，GDScript使用 *弧度* ，而不是角度。如果您更喜欢使用角度，"
"则需要使用 ``deg2rad()`` 和 ``rad2deg()`` 函数在角度和弧度之间进行转换。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:865
msgid "HUD"
msgstr "HUD"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:867
msgid ""
"The final piece our game needs is a UI: an interface to display things like "
"score, a \"game over\" message, and a restart button. Create a new scene, "
"and add a :ref:`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" "
"stands for \"heads-up display\", an informational display that appears as an "
"overlay on top of the game view."
msgstr ""
"我们的游戏需要的最后一个部分是UI: 一个用来显示诸如分数，“游戏结束”消息和重新"
"开始按钮等的界面。创建一个新场景，并添加命名为 ``HUD`` 的 :ref:`CanvasLayer "
"<class_CanvasLayer>` 节点。\"HUD\"代表\"平视显示\", 一种显示在游戏视图上面的"
"信息显示。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:873
msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""
":ref:`CanvasLayer <class_CanvasLayer>` 节点允许我们在游戏其余部分上面的层上绘"
"制UI元素， 以便其显示的信息不会被任何游戏元素覆盖，比如游戏角色或mobs。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:877
msgid "The HUD displays the following information:"
msgstr "HUD显示以下信息:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:879
msgid "Score, changed by ``ScoreTimer``."
msgstr "分数，用 ``ScoreTimer`` 改变。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:880
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr "一条信息，如”Game Over“或”Get Ready！“"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:881
msgid "A \"Start\" button to begin the game."
msgstr "一个“Start”按钮来开始游戏。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:883
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""
"UI元素的基本节点是 :ref:`Control <class_Control>`。要创造UI，我们会使用 :ref:"
"`Control <class_Control>` 的两种节点: :ref:`Label <class_Label>` 和 :ref:"
"`Button <class_Button>` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:887
msgid "Create the following as children of the ``HUD`` node:"
msgstr "创造以下节点作为 ``HUD`` 的子节点:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:889
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr ":ref:`Label <class_Label>` 命名为 ``ScoreLabel``。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:890
msgid ":ref:`Label <class_Label>` named ``MessageLabel``."
msgstr ":ref:`Label <class_Label>` 命名为 ``MessageLabel``。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:891
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr ":ref:`Button <class_Button>` 命名为 ``StartButton``。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:892
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr ":ref:`Timer <class_Timer>` 命名为 ``MessageTimer`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:894
msgid ""
"Click on the ``ScoreLabel`` and type a number into the _Text_ field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following for each of the three "
"``Control`` nodes:"
msgstr ""
"单击“ScoreLabel”并在Inspector属性检查器的_Text_字段中键入一个数字。 "
"``Control``节点的默认字体很小，不能很好地扩展。游戏资产中包含一个名"
"为“Xolonium-Regular.ttf”的字体文件。要使用此字体，请对三个“Control”节点中的每"
"一个执行以下操作："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:900
msgid "Under \"Custom Fonts\", choose \"New DynamicFont\""
msgstr "在 \"Custom Fonts\" 的下拉选项中，选择 \"New DynamicFont\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:904
msgid ""
"Click on the \"DynamicFont\" you added, and under \"Font/Font Data\", choose "
"\"Load\" and select the \"Xolonium-Regular.ttf\" file. You must also set the "
"font's ``Size``. A setting of ``64`` works well."
msgstr ""
"点击您添加的 \"DynamicFont\" ，然后在 \"Font Data\" 的下拉选项中选择 \"Load"
"\" 并选择 \"Xolonium-Regular.ttf\" 文件。您还必须设置字体的 ``Size`` 。设置"
"为 ``64`` 就可以了。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:910
msgid ""
"**Anchors and Margins:** ``Control`` nodes have a position and size, but "
"they also have anchors and margins. Anchors define the origin - the "
"reference point for the edges of the node. Margins update automatically when "
"you move or resize a control node. They represent the distance from the "
"control node's edges to its anchor. See :ref:"
"`doc_design_interfaces_with_the_control_nodes` for more details."
msgstr ""
"**锚点和边距**: ``Control`` 节点不仅有位置和大小，也有锚点和边距。锚点定义了"
"原点 - 节点边缘的参考点。 当您移动或调整Control节点大小时，边距会自定更新。它"
"们表示从Control节点的边缘到其锚点的距离。详情请参阅 :ref:"
"`doc_design_interfaces_with_the_control_nodes` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:917
msgid ""
"Arrange the nodes as shown below. Click the \"Anchor\" button to set a "
"Control node's anchor:"
msgstr "按如下图所示排列节点。 点击\"Anchor\"按钮来设置Control节点的锚点:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:922
msgid ""
"You can drag the nodes to place them manually, or for more precise "
"placement, use the following settings:"
msgstr "您可以手动拖动节点来放置它们，或者为了更精确的放置，使用以下设置:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:926
msgid "ScoreLabel"
msgstr "分数标签"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:928
msgid "*Text* : ``0``"
msgstr "*文本*: ``0``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:929
msgid "*Layout* : \"Top Wide\""
msgstr "*布局*: \"顶部宽度\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:930
#: ../../docs/getting_started/step_by_step/your_first_game.rst:937
msgid "*Align* : \"Center\""
msgstr "*对齐*: \"居中\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:933
msgid "MessageLabel"
msgstr "消息标签"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:935
msgid "*Text* : ``Dodge the Creeps!``"
msgstr "*文本*: ``躲避小兵!``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:936
msgid "*Layout* : \"HCenter Wide\""
msgstr "``布局``: \"水平中心宽\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:940
msgid "StartButton"
msgstr "开始按钮"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:942
msgid "*Text* : ``Start``"
msgstr "*文本*: ``开始``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:943
msgid "*Layout* : \"Center Bottom\""
msgstr "``布局``: \"中心底部\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:944
msgid "*Margin* :"
msgstr "*边距*："

#: ../../docs/getting_started/step_by_step/your_first_game.rst:946
msgid "Top: ``-200``"
msgstr "顶部: ``-200``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:947
msgid "Bottom: ``-100``"
msgstr "底部: ``-100``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:949
msgid "Now add this script to ``HUD``:"
msgstr "现将这个脚本添加到 ``HUD``:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:968
msgid ""
"The ``start_game`` signal tells the ``Main`` node that the button has been "
"pressed."
msgstr "“start_game”信号通知“Main”节点，按钮已经被按下。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:990
msgid ""
"This function is called when we want to display a message temporarily, such "
"as \"Get Ready\". On the ``MessageTimer``, set the ``Wait Time`` to ``2`` "
"and set the ``One Shot`` property to \"On\"."
msgstr ""
"当我们想要显示一条临时消息时，比如 \"Get Ready\" ，就会调用这个函数。在 "
"``MessageTimer`` 中，将 ``Wait Time`` 设置为 ``2`` 并将 ``One Shot`` 属性设置"
"为 \"On\" 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1021
msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""
"当玩家输掉时调用这个函数。它将显示 \"Game Over\" 2秒，然后返回标题屏幕并显示 "
"\"Start\" 按钮。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1025
msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to delay, such as in the above code, where we want to wait a little "
"bit of time before showing the \"Start\" button."
msgstr ""
"当您需要暂停很短的时间时, 使用 Timer 节点的替代方法是使用场景树的 "
"``create_timer()`` 功能。这对于延迟非常有用, 例如在上面的代码中, 我们要等待一"
"点时间后再显示 “Start” 按钮。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1043
msgid "This function is called by ``Main`` whenever the score changes."
msgstr "每当分数改变，这个函数会在 ``Main`` 场景中被调用。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1045
msgid ""
"Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` "
"signal of ``StartButton``."
msgstr "连接‘MessageTimer’的‘timeout()’信号和‘StartButton’的‘pressed()’信号。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1072
msgid "Connecting HUD to Main"
msgstr "将HUD场景连接到Main场景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1074
msgid ""
"Now that we're done creating the ``HUD`` scene, save it and go back to "
"``Main``. Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` "
"scene, and place it at the bottom of the tree. The full tree should look "
"like this, so make sure you didn't miss anything:"
msgstr ""
"现在我们完成了创建 ``HUD`` 场景，保存并返回 ``Main`` 场景。和 ``Player`` 场景"
"的做法一样在 ``Main`` 场景中实例化 ``HUD`` 场景， 并把它放置到场景树的底部。 "
"完整的场景树看起来应该像这样，所以确保您没有错过任何东西:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1081
msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""
"现在我们需要将 ``HUD`` 功能与我们的 ``Main`` 脚本连接起来。这需要在 ``Main`` "
"场景中添加一些内容:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1084
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function."
msgstr ""
"在Node选项卡中， 将HUD的 ``start_game`` 信号连接到 ``new_game()`` 函数。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1087
msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr "在 ``new_game()`` 函数中， 更新分数显示并显示 \"Get Ready\" 消息:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1102
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr "在 ``game_over()`` 中我们需要调用相应的 ``HUD`` 函数:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1113
msgid ""
"Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""
"最后，将下面的代码添加到 ``_on_ScoreTimer_timeout()`` 以保持不断变化的分数的"
"同步显示:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1125
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``Main.tscn``."
msgstr ""
"现在您准备好了！点击\"Play the Project\"按钮。您会被要求选择主场景，这里选择 "
"``Main.tscn`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1129
msgid "Removing old creeps"
msgstr "删除旧的小怪"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1131
msgid ""
"If you play until \"Game Over\" and then start a new game the creeps from "
"the previous game are still on screen. It would be better if they all "
"disappeared at the start of a new game."
msgstr ""
"如果你一直玩到“游戏结束”，然后重新开始新游戏，上次游戏的小怪仍然显示在屏幕"
"上。假如它们在新游戏开始时被清除，我们的游戏就会更完善。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1135
msgid ""
"We'll use the ``start_game`` signal that's already being emitted by the "
"``HUD`` node to remove the remaining creeps. We can't use the editor to "
"connect the signal to the mobs in the way we need because there are no "
"``Mob`` nodes in the ``Main`` scene tree until we run the game. Instead "
"we'll use code."
msgstr ""
"我们将使用“开始_游戏”信号，它已经被``HUD``节点发出，以删除剩余的小怪。我们无"
"法使用编辑器以需要的方式将信号连接到``Mob``节点，因为在运行游戏之前，"
"``Main`` 场景树中没有``Mob``节点。相反，我们将使用代码。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1140
msgid ""
"Start by adding a new function to ``Mob.gd``. ``queue_free()`` will delete "
"the current node at the end of the current frame."
msgstr ""
"首先向``Mob.gd``添加一个新函数。``queue_free()``将在当前帧的末尾删除当前节"
"点。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1149
msgid ""
"Then in ``Main.gd`` add a new line inside the ``_on_MobTimer_timeout()`` "
"function, at the end."
msgstr ""
"然后在``Main.gd``中，``_on_MobTimer_timeout()``函数中的末尾，添加新的行。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1157
msgid ""
"This line tells the new Mob node (referenced by the ``mob`` variable) to "
"respond to any ``start_game`` signal emitted by the ``HUD`` node by running "
"its ``_on_start_game()`` function."
msgstr ""
"这一行告诉新Mob节点(由``mob``变量引用)通过运行``_on_start_game()``函数来响应"
"``HUD``节点发出的任何``开始_游戏``信号。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1162
msgid "Finishing up"
msgstr "完成了"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1164
msgid ""
"We have now completed all the functionality for our game. Below are some "
"remaining steps to add a bit more \"juice\" to improve the game experience. "
"Feel free to expand the gameplay with your own ideas."
msgstr ""
"现在我们已经完成了游戏的所有功能。下面是一些额外的步骤，添加更多的\"juice\"来"
"提升游戏体验。您可以用您自己的想法来扩展游戏玩法。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1169
msgid "Background"
msgstr "背景"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1171
msgid ""
"The default gray background is not very appealing, so let's change its "
"color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` "
"node. Make it the first node under ``Main`` so that it will be drawn behind "
"the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a "
"color you like and drag the size of the ``ColorRect`` so that it covers the "
"screen."
msgstr ""
"默认的灰色背景不是很吸引人， 让我们改变它的颜色。 一种方法是使用 :ref:"
"`ColorRect <class_ColorRect>` 节点。使它成为 ``Main`` 场景下的第一个节点，这"
"样它就会被绘制到其它节点的后面。 ``ColorRect`` 只有一个属性: ``Color`` 。选择"
"一个您喜欢的颜色并拖拽 ``ColorRect`` 的大小使它覆盖整个屏幕。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1178
msgid ""
"You could also add a background image, if you have one, by using a "
"``Sprite`` node."
msgstr "如果您有背景图片，您也可以通过使用 ``Sprite`` 节点来添加背景图片。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1182
msgid "Sound effects"
msgstr "声音效果"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1184
msgid ""
"Sound and music can be the single most effective way to add appeal to the "
"game experience. In your game assets folder, you have two sound files: "
"\"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" "
"for when the player loses."
msgstr ""
"声音和音乐是增加游戏体验的吸引力的最有效的方式。在游戏资源文件夹中，有两个声"
"音文件:\"House In a Forest Loop.ogg\"用于背景音乐， \"gameover.wav\"将在游戏"
"角色输掉游戏时播放。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1189
msgid ""
"Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children "
"of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On "
"each one, click on the ``Stream`` property, select \"Load\", and choose the "
"corresponding audio file."
msgstr ""
"在 ``Main`` 场景中添加两个 :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` 节点。一个命名为 ``Music``，另一个命名为 "
"``DeathSound`` 。在每个节点选项上，点击 ``Stream``属性， 选择\"Load\"，然后选"
"择相应的音频文件。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1194
msgid ""
"To play the music, add ``$Music.play()`` in the ``new_game()`` function and "
"``$Music.stop()`` in the ``game_over()`` function."
msgstr ""
"要播放音乐，在 ``new_game()`` 函数中添加 ``$Music.play()``，在 "
"``game_over()`` 函数中添加 ``$Music.stop()`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1197
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr "最后， 在 ``game_over()`` 函数中添加 ``$DeathSound.play()`` 。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1200
msgid "Keyboard Shortcut"
msgstr "键盘快捷键"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1202
msgid ""
"Since the game is played with keyboard controls, it would be convenient if "
"we could also start the game by pressing a key on the keyboard. One way to "
"do this is using the \"Shortcut\" property of the ``Button`` node."
msgstr ""
"因为游戏是用键盘控制的，如果我们也能按下键盘上的一个键来开始游戏就会很方"
"便。\n"
"一种方法是使用`Button`节点的“快捷方式”属性。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1206
msgid ""
"In the ``HUD`` scene, select the ``StartButton`` and find its _Shortcut_ "
"property in the Inspector. Select \"New Shortcut\" and click on the "
"\"Shortcut\" item. A second _Shortcut_ property will appear. Select \"New "
"InputEventAction\" and click the new \"InputEvent\". Finally, in the "
"_Action_ property, type the name \"ui_select\". This is the default input "
"event associated with the spacebar."
msgstr ""
"在`HUD`场景中，选择`StartButton`并在Inspector中找到它的_Shortcut_属性。\n"
"选择“新建快捷方式”，点击“快捷方式”项。\n"
"第二个_Shortcut_属性将出现。\n"
"选择“New InputEventAction”并单击新的“InputEvent”。\n"
"最后，在_Action_属性中输入名称“ui_select”。\n"
"这是与空格键关联的默认输入事件。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1214
msgid ""
"Now when the start button appears, you can either click it or press the "
"spacebar to start the game."
msgstr "现在，当开始按钮出现时，您可以单击它或按空格键来启动游戏。"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1218
msgid "Project files"
msgstr "项目文件"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1221
msgid "You can find a completed version of this project at these locations:"
msgstr "您可以在这里找到这个项目的完整版本:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1221
msgid "https://github.com/kidscancode/Godot3_dodge/releases"
msgstr "https://github.com/kidscancode/Godot3_dodge/releases"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1222
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr "https://github.com/godotengine/godot-demo-projects"
