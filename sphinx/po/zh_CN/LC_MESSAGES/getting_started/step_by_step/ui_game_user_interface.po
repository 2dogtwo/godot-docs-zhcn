# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-04 16:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:4
msgid "Design the GUI"
msgstr "设计GUI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:6
msgid ""
"Now that you've nailed the basics, we're going to see how to build a game "
"Graphical User Interface (GUI) with reusable UI components: a life bar, an "
"energy bar, and bomb and emerald counters. By the end of this tutorial, "
"you'll have a game GUI, ready to control with GDscript or VisualScript:"
msgstr ""
"现在, 您已经掌握了基础知识, 我们将了解如何构建具有可复用的UI组件的游戏图形用"
"户界面(GUI): 生命条, 能量条, 以及炸弹和翡翠计数器. 在本教程结束时, 您将拥有一"
"个游戏GUI, 可以使用GDscript或VisualScript进行控制:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:13
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:621
msgid "The final result"
msgstr "最终效果"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:15
msgid "You'll also learn to:"
msgstr "你还将学习:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:17
msgid "Create flexible UI components"
msgstr "创建灵活的UI组件"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:18
msgid "Use scene inheritance"
msgstr "使用场景继承"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:19
msgid "Build a complex UI"
msgstr "构建一个复杂的UI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:21
msgid ""
"Download the project files: :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` and extract the archive. Import the `start/` project in "
"Godot to follow this tutorial. The `end/` folder contains the final result."
msgstr ""
"下载项目文件: :download:`ui_gui_design.zip <files/ui_gui_design.zip>` 并解压"
"缩存档. 在Godot中导入 `start/` 项目以遵循本教程.`end/` 文件夹包含最终结果."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:25
msgid ""
"You can watch this tutorial as a `video on YouTube <https://www.youtube.com/"
"watch?v=y1E_y9AIqow>`_."
msgstr ""
"你可以观看这个教程 `在Youtube 上的视频 <https://www.youtube.com/watch?"
"v=y1E_y9AIqow>`_ (英语且需要VPN)."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:28
msgid "Breaking down the UI"
msgstr "分解UI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:30
msgid ""
"Let's break down the final UI and plan the containers we'll use. As in the :"
"doc:`ui_main_menu`, it starts with a ``MarginContainer``. Then, we can see "
"up to three columns:"
msgstr ""
"让我们分解最终的UI并计划将要使用的容器. 和 :doc:`ui_main_menu` 一样, 它以 "
"``MarginContainer`` 开头. 然后, 我们最多可以看到三列:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:34
msgid "The life and energy counters on the left"
msgstr "左边是生命和能量的计数器"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:35
msgid "The life and energy bars"
msgstr "生命和能量条"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:36
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:42
msgid "The bomb and emerald counters on the right"
msgstr "右侧是炸弹和翡翠的计数器"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:38
msgid ""
"But the bar's label and the gauge are two parts of the same UI element. If "
"we think of them this way, we're left with two columns:"
msgstr ""
"但是条的标签和标尺是同一个UI元素的两个部分. 如果我们这样想的话, 就剩下两列了:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:41
msgid "The life and energy bars on the left"
msgstr "左边是生命和能量条"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:44
msgid ""
"This makes it easier to nest containers: we have some margins around the "
"border of the screen using a ``MarginContainer``, followed by an "
"``HBoxContainer`` to manage our two columns. The two bars stack on top of "
"one another inside a ``VBoxContainer``. And we'll need a last "
"``HBoxContainer`` in the right column to place the bomb and emerald counters "
"side-by-side."
msgstr ""
"这使嵌套容器变得更加容易: 我们使用 ``MarginContainer``, 在屏幕边框周围留有一"
"些边距, 然后使用 ``HBoxContainer`` 来管理两列. 这两个条在 ``VBoxContainer`` "
"中叠加在一起. 我们在右列中需要最后一个 ``HBoxContainer``, 来并排放置炸弹和翡"
"翠计数器."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:53
msgid "We get a clean UI layout with only 4 containers"
msgstr "我们只用4个容器就能得到干净的UI布局"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:55
msgid ""
"We will need extra containers inside the individual UI components, but this "
"gives us the main GUI scene's structure. With this plan in place, we can "
"jump into Godot and create our GUI."
msgstr ""
"我们将需要在各个UI组件内添加额外的容器, 但这为我们提供了主GUI场景的结构. 有了"
"这个计划, 我们可以进入Godot并创建我们的GUI."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:60
msgid "Create the base GUI"
msgstr "创建基本GUI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:62
msgid ""
"There are two possible approaches to the GUI: we can design elements in "
"separate scenes and put them together, or prototype everything in a single "
"scene and break it down later. I recommend working with a single scene as "
"you can play with your UI's placement and proportions faster this way. Once "
"it looks good, you can save entire sections of the node tree as reusable sub-"
"scenes. We'll do that in a moment."
msgstr ""
"GUI有两种可能的方法: 我们可以在单独的场景中设计元素并将它们放在一起, 或者在一"
"个场景中对所有内容进行原型制作, 然后将其分解. 建议使用单个场景, 因为这样可以"
"更快地处理UI的位置和比例. 一旦看起来不错, 就可以将节点树的整个部分保存为可重"
"用子场景. 我们稍后就做."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:69
msgid "For now, let's start with a few containers."
msgstr "现在, 让我们从几个容器开始."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:71
msgid ""
"Create a new scene and add a ``MarginContainer``. Select the node and name "
"it ``GUI``."
msgstr ""
"创建一个新场景并添加一个 ``MarginContainer``. 选择节点并将其命名为 ``GUI``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:74
msgid ""
"We want our interface to anchor to the top of the screen. Select the ``GUI`` "
"node and click the Layout button at the top of the viewport. Select the "
"``Top Wide`` option. The ``GUI`` node will anchor to the top edge of its "
"parent, the viewport by default. It will resize automatically on the "
"vertical axis to make space for its child UI components."
msgstr ""
"我们希望我们的界面锚定到屏幕的顶部. 选择 ``GUI`` 节点并单击视图顶部的布局按"
"钮. 选择 ``Top Wide(顶部宽)`` 选项. 默认情况下, ``GUI`` 节点将锚定到其父级的"
"视图顶部. 它将在垂直轴上自动调整大小, 为其子UI组件腾出空间."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:80
msgid "Save the scene as ``GUI.tscn``. We will put the entire GUI in it."
msgstr "将场景另存为 ``GUI.tscn``. 我们将整个GUI放入其中."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:82
msgid ""
"With the ``MarginContainer`` selected, head to the inspector and scroll down "
"to the custom constants section. Unfold it and click the field next to each "
"of the ``Margin`` properties. Set them all to ``20`` pixels. Next, add an "
"``HBoxContainer`` node. This one will contain our two bars on the left and "
"separate them from the two counters on the right."
msgstr ""
"选择 ``MarginContainer`` 后, 前往属性检查器并向下滚动到自定义常量部分. 展开"
"它, 然后点击每个 ``Margin`` 属性旁边的字段. 将它们全部设置为 ``20`` 像素. 接"
"下来, 添加一个 ``HBoxContainer`` 节点. 接下来, 添加一个 `HBoxContainer` 节"
"点. 这一个将在左侧包含我们的两个条, 并将它们与右侧的两个计数器分开."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:88
msgid ""
"We want to stack the bars vertically inside the ``HBoxContainer``. Add a "
"``VBoxContainer`` as a child of ``HBoxContainer`` and name it ``Bars``. "
"Select the parent ``HBoxContainer`` again and this time, add another "
"``HBoxContainer`` as a child of it. Call it ``Counters``. With these four "
"containers, we have the base for our GUI scene."
msgstr ""
"我们想将条形图垂直堆叠在 ``HBoxContainer`` 中. 添加一个 ``VBoxContainer`` 作"
"为 ``HBoxContainer`` 的子项, 并将其命名为 ``Bars``. 再次选择父级 "
"``HBoxContainer``, 这次添加另一个 ``HBoxContainer`` 作为其子级. 称之为 "
"``Counters``. 有了这四个容器, 我们就为我们的GUI场景奠定了基础."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:95
msgid "You should have 4 containers that look like this"
msgstr "你应该有4个看起来像这样的容器"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:99
msgid ""
"We can work this way because we first broke down our UI design and took a "
"few moments to think about the containers we'd use. When you follow a "
"tutorial like this, it may seem weird. But once you're working on real "
"games, you'll see it's an efficient workflow."
msgstr ""
"之所以可以这样做, 是因为我们首先分解了UI设计, 并花了一些时间来考虑要使用的容"
"器. 当你学习这样的教程时, 可能会觉得很奇怪. 但是一旦你在真正的游戏中工作, 你"
"就会发现它是一种高效的工作流程."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:105
msgid "Create the bars' base"
msgstr "创建条形基础"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:107
msgid ""
"Each bar is split into two sub-elements that align horizontally: the label "
"with the health count on the left, and the gauge on the right. Once again, "
"the ``HBoxContainer`` is the perfect tool for the job. Select the ``Bars`` "
"node and add a new ``HBoxContainer`` inside of it. Name it ``Bar``."
msgstr ""
"每个条形图拆分为两个水平对齐的子元素: 带有健康计数的标签在左侧, 量规在右侧. "
"再次, ``HBoxContainer`` 是完成这项工作的理想工具. 选择 ``Bars`` 节点, 并在其"
"中添加一个新的 ``HBoxContainer``. 将其命名为 ``Bar``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:113
msgid ""
"The label itself requires at least three nodes: a ``NinePatchRect`` for the "
"background, on top of which we'll add a texture on the left, either ``HP`` "
"or ``EP``, and a ``Label`` on the right for the value. We can nest "
"``Control`` nodes however we want. We could use the ``NinePatchRect`` as a "
"parent for the two other elements, as it encompasses them. In general, you "
"want to use containers instead, as their role is to help organize UI "
"components. We'll need a ``MarginContainer`` later anyway to add some space "
"between the life count and the gauge. Select the ``Bar`` and add a "
"``MarginContainer``. Name it ``Count``. Inside of it, add three nodes:"
msgstr ""
"标签本身至少需要三个节点: 一个作为背景的 ``NinePatchRect``, 在其顶部, 我们将"
"在左侧添加一个纹理, 即 ``HP`` 或 ``EP``, 并在右侧用来显示值的一个 ``Label``. "
"我们可以根据需要嵌套 ``Control`` 节点. 我们可以将 ``NinePatchRect`` 用作其他"
"两个元素的父元素, 因为它包含了它俩. 通常, 你想使用容器代替, 因为它们的作用是"
"帮助组织UI组件. 无论如何, 我们以后都需要一个 ``MarginContainer`` 来在生命计数"
"和量规之间增加一些空间. 选择 ``Bar`` 并添加一个 ``MarginContainer``. 将其命名"
"为 ``Count``. 在其中添加三个节点:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:124
msgid "A ``NinePatchRect`` named ``Background``"
msgstr "一个名为 ``Background`` 的 ``NinePatchRect``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:125
msgid "A ``TextureRect`` named ``Title``"
msgstr "一个名为 ``Title`` 的 ``TextureRect``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:126
msgid "And a ``Label`` named ``Number``"
msgstr "和一个名为 ``Number`` 的 ``Label``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:128
msgid "To add the nodes as siblings, always select the ``Count`` node first."
msgstr "要将节点添加为兄弟节点, 请始终先选择 ``Count`` 节点."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:132
msgid ""
"Your scene tree should look like this. We're ready to throw in some textures"
msgstr "你的场景树应如图所示. 我们准备加入一些纹理"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:135
msgid ""
"Our scene is still empty. It's time to throw in some textures. To load the "
"textures, head to the FileSystem dock to the left of the viewport. Browse "
"down to the res://assets/GUI folder."
msgstr ""
"我们的场景仍然是空的. 是时候加入一些纹理了. 要加载纹理, 请转到视图左侧的文件"
"系统停靠面板. 向下浏览到 ``res://assets/GUI`` 文件夹."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:141
msgid "You should see a list of textures that we'll use to skin our interface."
msgstr "你应该会看到我们将用来为界面蒙皮的纹理列表."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:144
msgid ""
"Select the ``Background`` in the Scene dock. In the Inspector, you should "
"see a ``Texture`` property. In the FileSystem tab, click and drag "
"``label_HP_bg.png`` onto the ``Texture`` slot. It stays squashed. The parent "
"MarginContainer will force its size down to 0 until we force elements inside "
"the container to have a minimum size. Select the ``Background`` node. In the "
"Inspector, scroll down to the Rect section. Set ``Min Size`` to (100, 40). "
"You should see the ``Background`` resize along with its parent containers."
msgstr ""
"在场景停靠面板中选择 ``Background``. 在属性检查器中, 你应该看到一个 "
"``Texture`` 属性. 在 ``FileSystem`` 选项卡中, 点击并将 ``label_HP_bg.png`` 拖"
"到 ``Texture`` 插槽中. 它保持压扁. 父 ``MarginContainer`` 将强制其大小降为0, "
"直到我们强制容器中的元素具有最小大小. 选择 ``Background`` 节点. 在属性检查器"
"面板中, 向下滚动到 ``Rect`` 部分. 设置 ``Min Size`` 为(100,40). 你应该会看到 "
"``Background`` 和它的父容器一起重调大小."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:153
msgid ""
"Next, select the ``Title`` and drag and drop ``label_HP.png`` into its "
"``Texture`` slot. Select the ``Number`` node, click the field next to the "
"``Text`` property and type ``10``. This way, we can see both nodes in the "
"viewport. They should stack up in the top-left corner of their parent "
"``MarginContainer``."
msgstr ""
"接下来, 选择 ``Title`` 并将 ``label_HP.png`` 拖放到其 ``Texture`` 插槽中. 选"
"择 ``Number`` 节点, 点击 ``Text`` 属性旁边的字段, 然后键入 ``10``. 这样, 我们"
"可以在视图中看到两个节点. 他们应该堆叠在其父级 ``MarginContainer`` 的左上角."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:161
msgid "If you select both nodes, you should see something like this"
msgstr "如果你选择两个节点, 你应该会看到这样的结果"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:163
msgid ""
"As they have a container as their direct parent, we cannot move them freely: "
"the ``Count`` node will always reset their anchors, their size and position. "
"Try to move and resize the nodes in the viewport. Then, select any of the "
"three textures and press :kbd:`Ctrl + Up` or :kbd:`Ctrl + Down` to reorder "
"them in the Scene dock. They'll snap back to their previous size and "
"position."
msgstr ""
"因为它们有一个container节点(容器类节点)作为其直接的父节点, 所以我们无法自由移"
"动它们:``Count`` 节点将始终重置其锚, 其大小和位置. 尝试移动视图中的节点并调整"
"其大小. 然后, 选择三个纹理中的任何一个, 然后按 :kbd:`Ctrl Up` 或 :kbd:`Ctrl "
"Down` 在场景停靠面板中对其重新排序. 他们将恢复到之前的大小和位置."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:170
msgid ""
"Parent containers control the size, the scale, the margins, and the anchors "
"of their direct children. To modify the nodes, you must nest them inside a "
"regular Control or another UI element. We'll use the ``Background`` as a "
"parent for the ``Title`` and ``Number``. Select both the ``Title`` and "
"``Number``, and drag and drop them onto ``Background``."
msgstr ""
"父容器控制其直接子代的大小, 比例, 边距和锚点. 若要修改节点, 必须将它们嵌套在"
"常规 ``Control`` 或另一个UI元素中. 我们将使用 ``Background`` 作为 ``Title`` "
"和 ``Number`` 的父元素. 选择 ``Title`` 和 ``Number``, 然后拖放到 "
"``Background`` 上."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:179
msgid ""
"By using the Background node as the two textures' parent, we take control "
"away from the Count MarginContainer"
msgstr ""
"通过将 ``Background`` 节点用作两个纹理的父级, 我们将控制权从 ``Count``, 即 "
"``MarginContainer`` 节点移开"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:182
msgid ""
"Select the ``Title`` and in the Inspector, change its ``Stretch Mode`` "
"property to ``Keep Centered``. Next find the ``Rect`` category in the "
"Inspector and change the ``Size`` property to (50, 40) so it only takes the "
"left half of the background.  Next, select the ``Number`` node. In the "
"viewport, click the ``Layout`` menu and click ``Full Rect``. The node will "
"resize to fit the ``Background``. Head to the Inspector and change its "
"``Align`` property to ``Right``, and the ``Valign`` property to ``Center``. "
"The text should snap to the center of the ``Background``'s right edge. "
"Resize the node horizontally, so it takes the right half of the "
"``Background`` and there's a bit of padding with the right edge."
msgstr ""
"选择 ``Title``, 然后在属性检查器中, 将其 ``拉伸模式(Stretch Mode)`` 属性更改"
"为 ``保持居中(Keep Centered)``. 接下来, 在属性检查器中找到 ``Rect`` 类别, 并"
"将 ``Size`` 属性更改为 (50, 40), 使其仅占据背景的左半部分. 接下来, 选择 "
"``Number`` 节点. 在视图中, 点击 ``Layout`` 菜单并点击 ``Full Rect``. 节点将调"
"整大小以适合 ``Background``. 前往属性检查器并将其 ``Align`` 属性更改为 "
"``Right``, 将 ``Valign`` 属性更改为 ``Center``. 文本应对齐到 ``Background`` "
"右边缘的中心. 水平调整节点的大小, 因此它占据了 ``Background`` 的右半部分, 并"
"且右边缘有一些填充."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:195
msgid ""
"Here's how the nodes' bounding boxes should look in the viewport. Keep it "
"rough, you don't need to place them too precisely for now."
msgstr ""
"这是节点的边界框在视图中的外观. 保持粗糙, 你现在不需要将它们放置得过于精确."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:199
msgid "Replace the Label's font"
msgstr "替换 ``Label`` 的字体"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:201
msgid ""
"The label's font is too small. We need to replace it. Select the ``Number`` "
"node and in the Inspector, scroll down to the ``Control`` class, and find "
"the ``Custom Font`` category. Click the field next to the ``Font`` property "
"and click on ``New Dynamic Font``. Click on the field again and select Edit."
msgstr ""
"标签字体太小. 我们需要更换它. 选择 ``Number`` 节点, 然后在属性检查器中, 向下"
"滚动到 ``Control`` 类, 然后找到 ``Custom Font`` 类别. 点击 ``Font`` 属性旁边"
"的字段, 然后点击 ``新建动态字体``. 再次点击该字段, 然后选择编辑."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:207
msgid ""
"You will enter the ``Dynamic Font`` resource. Unfold the ``Font`` category "
"and click the field next to ``Font Data``. Click the ``Load`` button. In the "
"file browser, navigate down to the assets/font folder and double click "
"``Comfortaa-Bold.ttf`` to open it. You should see the font update in the "
"viewport. Unfold the settings category to change the font size. Set the "
"``Size`` property to a higher value, like ``24`` or ``28``."
msgstr ""
"你将输入 ``动态字体(Dynamic Font)`` 资源. 展开 ``字体(Font)`` 类别, 然后点击 "
"``字体数据(Font Data)`` 旁边的字段. 点击 ``加载(Load)`` 按钮. 在文件浏览器"
"中, 向下浏览到 ``assets/font`` 文件夹, 然后双击 ``Comfortaa-Bold.ttf`` 将其打"
"开. 你应该在视图中看到字体更新. 展开设置类别以更改字体大小. 将 ``Size`` 属性"
"设置为较高的值, 例如 ``24`` 或 ``28``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:215
msgid ""
"We now need the text's baseline, the number's lower edge, to align with the "
"HP texture on the left. To do so, still in the ``DynamicFont`` resource, you "
"can tweak the ``Bottom`` property under the ``Extra Spacing`` category. It "
"adds some bottom padding to the text. Click the ``Number`` node in the Scene "
"tab to go back to the node's properties and change the ``Valign`` to "
"``Bottom``. To adjust the text's baseline, click on the font field under the "
"``Custom Font`` category again and tweak the ``Bottom`` property until the "
"text aligns with the ``Title`` node. I used a value of ``2`` pixels."
msgstr ""
"现在, 我们需要文本的基线, 即数字的下边缘, 以与左侧的 ``HP`` 纹理对齐. 为此, "
"仍在 ``DynamicFont`` 资源中, 您可以在 ``Extra Spacing`` 类别下调整 "
"``Bottom`` 属性. 它为文本添加了一些底部填充. 点击场景选项卡中的 ``Number`` 节"
"点, 返回到节点属性, 然后将 ``Valign`` 更改为 ``Bottom``. 要调整文本的基线, 请"
"再次单击 ``自定义字体(Custom Font)`` 类别下的 ``字体`` 字段, 并调整 ``底部"
"(Bottom)`` 属性, 直到文本与 ``标题(Title)`` 节点对齐. 这里使用了 ``2`` 像素的"
"值."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:227
msgid "With a Bottom value of 2 pixels, the Number aligns with the Title"
msgstr "底部值为2像素, 数字与标题对齐"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:229
msgid ""
"With this, we finished the hardest part of the GUI. Congratulations! Let's "
"move on to the simpler nodes."
msgstr "至此, 我们完成了GUI中最难的部分. 恭喜您！让我们继续讨论更简单的节点."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:233
msgid "Add the progress bar"
msgstr "添加进度条"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:235
msgid ""
"We need one last element to complete our life bar: the gauge itself. Godot "
"ships with a ``TextureProgress`` node that has everything we need."
msgstr ""
"我们需要最后一个元素来完成我们的生命条: 量规本身.Godot附带了一个 "
"``TextureProgress`` 节点, 该节点具有我们所需的一切."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:238
msgid ""
"Select the Bar node and add a ``TextureProgress`` inside of it. Name it "
"``Gauge``. In the inspector unfold the ``Textures`` section. Head to the "
"FileSystem dock and drag and drop the ``lifebar_bg.png`` texture onto the "
"``Under`` slot. Do the same with the ``lifebar_fill.png`` image and drop it "
"onto the ``Progress`` slot. Under the ``Range`` class in the inspector, "
"change the ``Value`` property to ``50`` to see the gauge fill up."
msgstr ""
"选择 ``Bar`` 节点, 并在其中添加 ``TextureProgress``. 命名为 ``Gauge``. 在属性"
"检查器中展开 ``纹理(Textures)`` 部分. 转到 ``FileSystem`` 停靠面板, 然后将 "
"``lifebar_bg.png`` 纹理拖放到 ``Under`` 插槽中. 对 ``lifebar_fill.png`` 图像"
"执行相同的操作, 然后将其拖放到 ``Progress`` 插槽中. 在属性检查器面板的 "
"``Range`` 类下, 将 ``Value`` 属性更改为 ``50``, 以查看量规是否被填满."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:246
msgid "With only five ``Control`` nodes, our first bar is ready to use."
msgstr "只有五个 ``Control`` 节点, 我们的第一个条可以使用了."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:250
msgid ""
"That's it, our life bar is ready. This last part was quick, wasn't it? "
"That's thanks to our robust container setup."
msgstr ""
"就是这样, 我们的生命条已准备就绪. 最后一部分很快, 不是吗？这要归功于我们强大"
"的容器设置."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:254
msgid "Design the bomb and emerald counters"
msgstr "设计炸弹和翡翠计数器"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:256
msgid ""
"The bomb and emerald counters are like the bar's ``Count`` node. So we'll "
"duplicate it and use it as a template."
msgstr ""
"炸弹和翡翠计数器就像条形图的 ``Count`` 节点一样. 因此, 我们将其复制并用作模"
"板."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:259
msgid ""
"Under the ``Bar`` node, select ``Count`` and press :kbd:`Ctrl + D` to "
"duplicate it. Drag and drop the new node under the ``Counters`` "
"``HBoxContainer`` at the bottom of the scene tree. You should see it resize "
"automatically. Don't worry about this for now, we'll fix the size soon."
msgstr ""
"在 ``Bar`` 节点下, 选择 ``Count`` , 然后按 :kbd:`Ctrl+D` 复制它. 将新节点拖放"
"到场景树中名为 ``Counters`` 的 ``HBoxContainer`` 节点下. 您应该看到它会自动调"
"整大小, 暂时不用担心, 我们会尽快修复它."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:264
msgid ""
"Rename the ``Count2`` node to ``Counter``. Unlike the bars, we want the "
"number to be on the left, and an icon to sit on the right. The setup is the "
"same: we need a background (a ``NinePatchRect``), the title, and the number "
"nodes. The ``Title`` node is a ``TextureRect``, so it's what we need to "
"display the icon. In the scene tree, select the ``Title`` node, and rename "
"it to ``Icon``."
msgstr ""
"将 ``Count2`` 节点重命名为 ``Counter`` . 与条形图不同, 我们希望数字在左边, 图"
"标在右边. 设置是相同的: 我们需要一个背景( ``NinePatchRect`` ), 标题, 和数字节"
"点. ``Title`` 节点是一个 ``TextureRect``, 这就是我们需要用来显示图标. 在场景"
"树中, 选择 ``Title`` 节点, 并将其重命名为 ``Icon``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:273
msgid "Here's how your node tree should look so far"
msgstr "到目前为止, 这是你的节点树的外观"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:275
msgid ""
"With the ``Icon`` node selected, in the inspector, scroll to the top to see "
"the ``Texture`` slot. Head to the FileSystem dock on the left and select the "
"``bombs_icon.png``. Drag and drop it onto the ``Texture`` slot. In the Scene "
"Tab select both the ``Icon`` and the ``Number`` nodes. Click the Layout menu "
"in the toolbar at the top of the viewport and select ``Full Rect``. Both "
"nodes will update to fit the size of the ``Background``."
msgstr ""
"选中 ``Icon`` 节点后, 在属性检查器中, 滚动到顶部以查看 ``Texture`` 插槽. 转到"
"左侧的 ``FileSystem`` 停靠面板, 然后选择 ``bombs_icon.png``. 将其拖放到 "
"``Texture`` 插槽中. 在场景选项卡中, 选择 ``Icon`` 和 ``Number`` 节点. 点击视"
"图顶部工具栏中的 ``Layout`` 菜单, 然后选择 ``全角(Full Rect)``. 两个节点都将"
"更新以适合 ``背景(Background)`` 的大小."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:285
msgid "The nodes anchor to the entire Background, but their position is off"
msgstr "节点锚定到整个背景, 但是它们的位置不正确"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:287
msgid ""
"Let's change the ``Number``'s align properties to move it to the left and "
"center of the ``Background``. Select the ``Number`` node, change its "
"``Align`` property to left and the ``Valign`` property to center. Then "
"resize its left edge a bit to add some padding between the left edge of the "
"``Background`` and the text."
msgstr ""
"让我们更改 ``Number`` 的 ``align`` 属性, 将其移至 ``Background`` 的左侧和中"
"央. 选择 ``Number`` 节点, 将其 ``Align`` 属性更改为左侧, 并将 ``Valign`` 属性"
"更改为居中. 然后稍微调整其左边缘的大小, 以在 ``Background`` 的左边缘和文本之"
"间添加一些填充."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:295
msgid "The Number node aligned to the left and center"
msgstr "``Number`` 节点左对齐并居中"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:297
msgid ""
"To overlap the Icon and the background, we need a few tweaks. First, our "
"background is a bit too tall. It's because it's inside a margin container "
"that is controlled by the top-most GUI node. Select the GUI node at the top "
"of the scene tree and downsize it vertically so that it's as thin as "
"possible. You'll see the gauge prevents you from making it too small. A "
"container cannot be smaller than the minimal size of its children. The "
"container's margins also weigh in."
msgstr ""
"要使 ``Icon`` 和背景叠加, 我们需要进行一些调整. 首先, 我们的背景有点高. 这是"
"因为它位于由最顶层GUI节点控制的边距容器内. 选择场景树顶部的GUI节点, 并垂直缩"
"小其尺寸, 以使其尽可能薄. 你会看到仪表防止你把它做得太小. 容器不能小于其子容"
"器的最小大小. 容器的边距也很重要."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:305
msgid ""
"Select the Icon, click the Layout menu, and select ``Full Rect`` to re-"
"center it. We need it to anchor to the ``Background``'s right edge. Open the "
"Layout menu again and select ``Center Right``. Move the icon up so it is "
"centered vertically with the ``Background``."
msgstr ""
"选择图标, 点击布局菜单, 然后选择 ``全矩形(Full Rect)`` 以重新居中. 我们需要它"
"锚定到 ``Background`` 的右边缘. 再次打开 ``Layout`` 菜单并选择 ``右居中"
"(Center Right)``. 向上移动图标, 使其垂直居中于 ``Background``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:313
msgid ""
"The bomb icon anchors to the Background's right edge. Resize the Counter "
"container to see the Icon node stick to its right side"
msgstr ""
"炸弹图标锚定在 ``背景(Background)`` 的右边缘. 调整 ``计数器(Counter)`` 容器的"
"大小, 以查看粘在其右侧的 ``图标(Icon)`` 节点"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:316
msgid ""
"Because we duplicated the ``Counter`` from the bar's ``Count``, the "
"``Number`` node's font is off. Select the ``Number`` node again, head to the "
"``Font`` property, and click it to access the ``DynamicFont`` resource. In "
"the ``Extra Spacing`` section, change the ``Bottom`` value to ``0`` to reset "
"the font's baseline. Our counter now works as expected."
msgstr ""
"因为我们从条形图的 ``Count`` 中复制了 ``Counter``, 所以 ``Number`` 节点的字体"
"关闭了. 再次选择 ``Number`` 节点, 转到 ``Font`` 属性, 然后点击它访问 "
"``DynamicFont`` 资源. 在 ``Extra Spacing`` 部分, 将 ``Bottom`` 值改为 ``0`` "
"以重置字体的基线. 我们的计数器现在运作正常."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:323
msgid ""
"Let's make the ``Counters`` anchor to the right edge of the viewport. To do "
"so, we need to set the ``Bars`` container take all the available horizontal "
"space it can. Select the ``Bars`` node and scroll down to the ``Size Flags`` "
"category. In the ``Horizontal`` category, check the ``Expand`` value. The "
"``Bars`` node should resize and push the counter to the right side of the "
"screen."
msgstr ""
"让我们将 ``Counters`` 锚定到视图的右边缘. 为此, 我们需要将 ``Bars`` 容器设置"
"为占用所有可用的水平空间. 选择 ``Bars`` 节点, 然后向下滚动到 ``Size Flags`` "
"类别. 在 ``Horizontal`` 类别中, 检查 ``Expand`` 值. ``Bars`` 节点应调整大小并"
"将计数器推到屏幕右侧."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:331
msgid ""
"An expanding container eats all the space it can from its parent, pushing "
"everything else along the way"
msgstr "一个扩展的容器会占用其父容器的所有空间, 推动沿途的其他一切东西"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:335
msgid "Turn the bar and counter into reusable UI components"
msgstr "将条形图和计数器变成可复用的UI组件"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:337
msgid ""
"We have one bar and one counter widget. But we need two of each. We may need "
"to change the bars' design or their functionality later on. It'd be great if "
"we could have a single scene to store a UI element's template, and child "
"scenes to work on variations. Godot lets us do this with Inherited Scenes."
msgstr ""
"我们有一个条形图和一个计数器小部件. 但是我们每种都需要两个. 稍后我们可能需要"
"更改条形图的设计或功能. 如果我们可以有一个场景来存储UI元素的模板, 并让子场景"
"来处理变体, 那就太好了.Godot让我们通过继承的场景做到这一点."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:343
msgid ""
"Let's save both the ``Counter`` and the ``Bar`` branches as separate scenes "
"that we'll reduce to create the ``LifeBar``, the ``EnergyBar``, the "
"``BombCounter``, and the ``EmeraldCounter``. Select the ``Bar`` "
"HBoxContainer. Right click on it and click on ``Save Branch as Scene``. Save "
"the scene as ``Bar.tscn``. You should see the node branch turn it to a "
"single ``Bar`` node."
msgstr ""
"让我们将 ``Counter`` 和 ``Bar`` 分支保存为单独的场景, 将它们简化为创建 "
"``LifeBar``, ``EnergyBar``, ``BombCounter``, 和 ``EmeraldCounter``. 选择 "
"``Bar`` ``HBoxContainer``. 右键点击它, 然后点击 ``将分支另存为场景(Save "
"Branch as Scene)``. 将场景保存为 ``Bar.tscn``. 您应该看到节点分支将其变为单"
"个 ``Bar`` 节点."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:352
msgid ""
"A scene is a tree of nodes. The topmost node is the tree's **root**, and the "
"children at the bottom of the hierarchy are **leaves**. Any node other than "
"the root along with one or more children is a **branch**. We can encapsulate "
"node branches into separate scenes, or load and merge them from other scenes "
"into the active one. Right click on any node in the Scene dock and select "
"``Save Branch as Scene`` or ``Merge from Scene``."
msgstr ""
"场景是节点树. 最顶部的节点是树的 **根** , 层次结构底部的子级是 **叶** . 除根"
"节点以外的任何节点以及一个或多个子节点都是 **分支** . 我们可以将节点分支封装"
"到单独的场景中, 或者将它们从其他场景加载并合并到活动场景中. 右键点击场景停靠"
"面板中的任何节点, 然后选择 ``将分支另存为场景(Save Branch as Scene)`` 或 ``从"
"场景合并(Merge from Scene)``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:360
msgid ""
"Then, select the ``Counter`` node and do the same. Right click, ``Save "
"Branch as Scene``, and save it as ``Counter.tscn``. A new edit scene icon "
"appears to the right of the nodes in the scene tree. Click on the one next "
"to ``Bar`` to open the corresponding scene. Resize the ``Bar`` node so that "
"its bounding box fits its content. The way we named and placed the Control "
"nodes, we're ready to inherit this template and create the life bar. It's "
"the same for the ``Counter``."
msgstr ""
"然后, 选择 ``Counter`` 节点并执行相同的操作. 右键单击 ``将分支另存为场景"
"(Save Branch as Scene)``, 并将其保存为 ``Counter.tscn``. 新的编辑场景图标将显"
"示在场景树中节点的右侧. 点击 ``Bar`` 旁边的一个以打开相应的场景. 调整 "
"``Bar`` 节点的大小, 使其边界框适合其内容. 我们以命名和放置 ``Control`` 节点的"
"方式, 已经准备好继承此模板并创建生命条. 同理操作 ``Counter``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:370
msgid "With no extra changes, our Bar is ready to use"
msgstr "无需额外更改, 我们的条形图即可使用"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:373
msgid "Use scene inheritance to create the remaining elements"
msgstr "使用场景继承创建其余元素"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:375
msgid ""
"We need two bars that work the same way: they should feature a label on the "
"left, with some value, and a horizontal gauge on the right. The only "
"difference is that one has the HP label and is green, while the other is "
"called EP and is yellow. Godot gives us a powerful tool to create a common "
"base to reuse for all bars in the game: **inherited scenes**."
msgstr ""
"我们需要两个条的工作方式相同: 它们的左侧应有标签, 并带有一些值, 右侧应有水平"
"量规. 唯一的区别是一个带有 ``HP`` 标签, 并且是绿色的, 而另一个叫做 ``EP``, 并"
"且是黄色的.Godot为我们提供了一个强大的工具, 可以为游戏中的所有条形图创建通用"
"基础: **继承的场景** ."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:383
msgid ""
"Inherited scenes help us keep the GUI scene clean. In the end, we will only "
"have containers and one node for each UI component."
msgstr ""
"继承的场景可帮助我们保持GUI场景的整洁. 最后, 每个UI组件只有一个容器和一个节"
"点."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:386
msgid ""
"On an inherited scene, you can change any property of every node in the "
"inspector, aside from its name. If you modify and save the parent scene, all "
"the inherited scenes update to reflect the changes. If you change a value in "
"the inherited scene, it will always override the parent's property. It's "
"useful for UIs, as they often require variations of the same elements. In "
"general, in UI design, buttons, panels etc. share a common base style and "
"interactions. We don't want to copy it over to all variations manually."
msgstr ""
"在继承的场景上, 除了名称之外, 还可以更改属性检查器中每个节点的任何属性. 如果"
"修改并保存父场景, 则所有继承的场景都会更新以反映所做的更改. 如果您在继承的场"
"景中更改值, 它将始终覆盖父级的属性. 这对于UI很有用, 因为它们经常需要相同元素"
"的变体. 通常, 在UI设计中, 按钮, 面板等具有相同的基本样式和交互. 我们不想手动"
"将其复制到所有变体中."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:395
msgid ""
"A reload icon will appear next to the properties you override. Click it to "
"reset the value to the parent scene's default."
msgstr ""
"重新加载图标将出现在你重写的属性旁边. 点击它可将值重置为父场景的默认值."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:400
msgid ""
"Think of scene inheritance like the node tree, or the ``extends`` keyword in "
"GDScript. An inherited scene does everything like its parent, but you can "
"override properties, resources and add extra nodes and scripts to extend its "
"functionality."
msgstr ""
"将场景继承想像成节点树, 或者在GDScript中使用 ``extends`` 关键字. 继承的场景会"
"像其父级一样执行所有操作, 但是你可以覆盖属性, 资源并添加额外的节点和脚本来扩"
"展其功能."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:406
msgid "Inherit the Bar Scene to build the LifeBar"
msgstr "继承 ``Bar`` 场景来构建生命条"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:408
msgid ""
"Go to ``Scene -> New Inherited Scene`` to create a new type of ``Bar``. "
"Select the Bar scene and open it. You should see a new [unsaved] tab, that's "
"like your ``Bar``, but with all nodes except the root in grey. Press :kbd:"
"`Ctrl + S` (:kbd:`Cmd + S` on macOS) to save the new inherited scene and "
"name it ``LifeBar``."
msgstr ""
"点击编辑器左上角选项会弹出一个场景文件选择器 ``场景 -> 新建继承的场景(Scene -"
"> New Inherited Scene)`` 以创建新的 ``Bar`` 类型. 选择 ``Bar`` 场景并将其打"
"开. 您应该看到一个新的 [未保存] 标签, 就像您的 ``Bar`` , 但除了根节点以外的其"
"余子节点均为灰色. 按 :kbd:`Ctrl+S` ( :kbd:`Cmd+S` on macOS) 保存新的继承场景"
"并将其命名为 ``LifeBar``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:416
msgid "You can't rename grey nodes. This tells you they have a parent scene"
msgstr "你不能重命名灰色节点. 这表示它们有一个父级场景"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:418
msgid ""
"First, rename the root or top level node to ``LifeBar``. We always want the "
"root to describe exactly what this UI component is. The name differentiates "
"this bar from the ``EnergyBar`` we'll create next. The other nodes inside "
"the scene should describe the component's structure with broad terms, so it "
"works with all inherited scenes. Like our ``TextureProgress`` and ``Number`` "
"nodes."
msgstr ""
"首先, 将根节点或顶级节点重命名为 ``LifeBar``. 我们始终希望根目录准确描述此UI"
"组件是什么. 该名称与接下来要创建的 ``EnergyBar`` 区别开来. 场景内的其他节点应"
"使用广义术语来描述组件的结构, 因此它适用于所有继承的场景. 就像我们的 "
"``TextureProgress`` 和 ``Number`` 节点一样."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:427
msgid ""
"If you've ever done web design, it's the same spirit as working with CSS: "
"you create a base class, and add variations with modifier classes. From a "
"base button class, you'll have button-green and button-red variations for "
"the user to accept and refuse prompts. The new class contains the name of "
"the parent element and an extra keyword to explain how it modifies it. When "
"we create an inherited scene and change the name of the top level node, "
"we're doing the same thing."
msgstr ""
"如果你曾经做过网页设计, 则它与使用CSS的精神相同: 创建基类, 并使用修饰符类添加"
"变体. 在基本的按钮类中, 你将具有绿色的按钮和红色的按钮供用户接受和拒绝提示. "
"新类包含父元素的名称和一个额外的关键字, 以说明其修改方式. 创建继承的场景并更"
"改顶级节点的名称时, 我们正在做相同的事情."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:436
msgid "Design the EnergyBar"
msgstr "设计 ``EnergyBar``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:438
msgid ""
"We already setup the ``LifeBar``'s design with the main ``Bar`` scene. Now "
"we need the ``EnergyBar``."
msgstr ""
"我们已经使用主 ``Bar`` 场景设置了 ``LifeBar`` 的设计. 现在我们需要 "
"``EnergyBar``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:441
msgid ""
"Let's create a new inherited scene, and once again select the ``Bar.tscn`` "
"scene and open it. Double-click on the ``Bar`` root node and rename it to "
"``EnergyBar``. Save the new scene as ``EnergyBar.tscn``. We need to replace "
"the HP texture with EP one, and to change the textures on the gauge."
msgstr ""
"让我们创建一个新的继承场景, 然后再次选择 ``Bar.tscn`` 场景并将其打开. 双击 "
"``Bar`` 根节点, 并将其重命名为 ``EnergyBar``. 保存新场景为 ``EnergyBar."
"tscn``. 我们需要用 ``EP`` 的纹理替换 ``HP`` 纹理, 并更改量规上的纹理."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:447
msgid ""
"Head to the FileSystem dock on the left, select the ``Title`` node in the "
"Scene tree and drag and drop the ``label_EP.png`` file onto the texture "
"slot. Select the ``Number`` node and change the ``Text`` property to a "
"different value like ``14``."
msgstr ""
"转到左侧的 ``FileSystem`` 停靠面板, 在场景树中选择 ``Title`` 节点, 然后将 "
"``label_EP.png`` 文件拖放到纹理插槽中. 选择 ``Number`` 节点, 然后将 ``Text`` "
"属性更改为另一个值, 例如 ``14``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:452
msgid ""
"You'll notice the EP texture is smaller than the HP one. We should update "
"the ``Number``'s font size to better fit it. A font is a resource. All the "
"nodes in the entire project that use this resource will be affected by any "
"property we change. You can try to change the size to a huge value like "
"``40`` and switch back to the ``LifeBar`` or the ``Bar`` scenes. You will "
"see the text increased in size."
msgstr ""
"你会注意到 ``EP`` 纹理比 ``HP`` 纹理小. 我们应该更新 ``Number`` 的字体大小以"
"更好地适应它. 字体是一种资源. 使用此资源的整个项目中的所有节点都将受到我们更"
"改的任何属性的影响. 你可以尝试将大小更改为较大的值, 例如 ``40``, 然后切换回 "
"``LifeBar`` 或 ``Bar`` 场景. 你将看到文本的大小增加了."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:461
msgid "If we change the font resource, all the nodes that use it are affected"
msgstr "如果我们更改字体资源, 则使用该字体资源的所有节点都会受到影响"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:464
msgid ""
"To change the font size on this node only, we must create a copy of the font "
"resource. Select the ``Number`` node again and click on the wrench and "
"screwdriver icon on the top right of the inspector. In the drop-down menu, "
"select the ``Make Sub-Resources Unique`` option. Godot will find all the "
"resources this node uses and create unique copies for us."
msgstr ""
"要仅在此节点上更改字体大小, 我们必须创建字体资源的副本. 再次选择 ``Number`` "
"节点, 并点击属性检查器面板右上角的扳手和螺丝刀图标. 在下拉菜单中, 选择 ``使子"
"资源唯一(Make Sub-Resources Unique)`` 选项.Godot将找到该节点使用的所有资源, "
"并为我们创建唯一的副本."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:472
msgid "Use this option to create unique copies of the resources for one node"
msgstr "使用此选项为一个节点创建资源的唯一副本"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:476
msgid ""
"When you duplicate a node from the Scene tree, with :kbd:`Ctrl + D` (:kbd:"
"`Cmd + D` on macOS), it shares its resources with the original node. You "
"need to use ``Make Sub-Resources Unique`` before you can tweak the resources "
"without affecting the source node."
msgstr ""
"当您从场景树中复制节点时, 如果使用 :kbd:`Ctrl+D` ( :kbd:`Cmd+D` on macOS), 它"
"将与原始节点共享资源. 您需要先使用 ``使子资源唯一(Make Sub-Resources "
"Unique)``, 然后才能调整复制节点的资源而不影响源节点."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:481
msgid ""
"Scroll down to the ``Custom Font`` section and open ``Font``. Lower the "
"``Size`` to a smaller value like ``20`` or ``22``. You may also need to "
"adjust the ``Bottom`` spacing value to align the text's baseline with the EP "
"label on the left."
msgstr ""
"向下滚动到 ``自定义字体(Custom Font)`` 部分, 然后打开 ``字体(Font)``. 将 ``大"
"小(Size)`` 降低到较小的值, 例如 ``20`` 或 ``22``. 你可能还需要调整 ``底部"
"(Bottom)`` 间距值, 以将文本的基线与左侧的 ``EP`` 标签对齐."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:488
msgid "The EP Count widget, with a smaller font than its HP counterpart"
msgstr "``EP Count`` 小部件, 其字体比 ``HP`` 同类小"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:490
msgid ""
"Now, select the ``TextureProgress`` node. Drag the ``energy_bar_bg.png`` "
"file onto the ``Under`` slot and do the same for ``energy_bar_fill.png`` and "
"drop it onto the ``Progress`` texture slot."
msgstr ""
"现在, 选择 ``TextureProgress`` 节点. 拖动 ``energy_bar_bg.png`` 文件到 "
"``Under`` 槽, 并对 ``energy_bar_fill.png`` 执行相同的操作. 然后把它放到 "
"``Progress`` 纹理槽中."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:494
msgid ""
"You can resize the node vertically so that its bounding rectangle fits the "
"gauge. Do the same with the ``Count`` node until its size aligns with that "
"of the bar. Because the minimal size of ``TextureProgress`` is set based on "
"its textures, you won't be able to downsize the ``Count`` node below that. "
"That is also the size the ``Bar`` container will have. You may downscale "
"this one as well."
msgstr ""
"你可以垂直调整节点的大小, 以使其边界矩形适合量规. 对 ``Count`` 节点执行相同的"
"操作, 直到其大小与条的大小对齐为止. 因为 ``TextureProgress`` 的最小大小是根据"
"其纹理设置的, 所以你将无法缩小 ``Count`` 节点低于该值大小. 这也是 ``Bar`` 容"
"器将具有的大小. 你也可以缩小此尺寸."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:501
msgid ""
"Last but not least, the ``Background`` container has a minimum size that "
"makes it a bit large. Select it and in the ``Rect`` section, change the "
"``Min Size`` property down to ``80`` pixels. It should resize automatically "
"and the ``Title`` and ``Number`` nodes should reposition as well."
msgstr ""
"最后但并非最不重要的一点是, ``背景(Background)`` 容器的最小尺寸使其变得有点"
"大. 选择它, 然后在 ``矩形(Rect)`` 部分中, 将 ``最小大小(Min Size)`` 属性更改"
"为 ``80`` 像素. 它应该自动调整大小, 并且 ``Title`` 和 ``Number`` 节点也应重新"
"定位."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:509
msgid "The Count looks better now it's a bit smaller"
msgstr "``Count`` 看起来好多了, 现在小了一点"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:513
msgid ""
"The Count node's size affects the position of the TextureProgress. As we'll "
"align our bars vertically in a moment, we're better off using the Counter's "
"left margin to resize our EP label. This way both the EnergyBar's Count and "
"the LifeBar's Count nodes are one hundred pixels wide, so both gauges will "
"align perfectly."
msgstr ""
"Count节点的大小会影响TextureProgress的位置. 因为我们一会儿要垂直对齐我们的条"
"形图, 所以我们最好使用计数器的左边缘来调整我们的EP标签的大小. 这样EnergyBar的"
"Count和LifeBar的Count节点都是100像素宽, 所以两个仪表都会完美对齐."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:520
msgid "Prepare the bomb and emerald counters"
msgstr "准备炸弹和翡翠计数器"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:522
msgid ""
"Let us now take care of the counters. Go to ``Scene -> New Inherited Scene`` "
"and select the ``Counter.tscn`` as a base. Rename the root node as "
"``BombCounter`` too. Save the new scene as ``BombCounter.tscn``. That's all "
"for this scene."
msgstr ""
"现在让我们来处理计数器. 进入 ``场景 -> 新继承的场景(Scene -> New Inherited "
"Scene)``, 选择 ``Counter.tscn`` 作为基础. 也将根节点重命名为 "
"``BombCounter``. 将新场景保存为 ``BombCounter.tscn``. 这就是这个场景的全部内"
"容."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:529
msgid "The bomb counter is the same as the original Counter scene"
msgstr "炸弹计数器与原始计数器场景相同"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:531
msgid ""
"Go to ``Scene -> New Inherited Scene`` again and select ``Counter.tscn`` "
"once more. Rename the root node ``EmeraldCounter`` and save the scene as "
"``EmeraldCounter.tscn``. For this one, we mainly need to replace the bomb "
"icon with the emerald icon. In the FileSystem tab, drag the ``emeralds_icon."
"png`` onto the ``Icon`` node's ``Texture`` slot. ``Icon`` already anchors to "
"the right edge of the ``Background`` node so we can change its position and "
"it will scale and reposition with the ``EmeraldCounter`` container. Shift "
"the emerald icon a bit to the right and down. Use the Arrow Keys on the "
"keyboard to nudge its position. Save, and we're done with all the UI "
"elements."
msgstr ""
"再次转到 ``场景 -> 新继承的场景(Scene -> New Inherited Scene)`` , 然后再次选"
"择 ``Counter.tscn`` . 重命名根节点为 ``EmeraldCounter`` , 并将场景保存为 "
"``EmeraldCounter.tscn`` . 对于这个新继承的场景, 我们主要将炸弹图标替换为翡翠"
"图标. 在 ``FileSystem(文件系统)`` 选项卡中, 将 ``emeralds icon.png`` 拖到 "
"``Icon`` 节点 的 ``Texture`` 属性插槽中. ``Icon`` 已经锚定在 ``Background`` "
"节点的右边缘, 因此我们可以更改其位置, 并使用 ``EmeraldCounter`` 容器对其进行"
"缩放和重新定位. 向右和向下稍微移动翡翠图标. 使用键盘上的箭头键微调其位置. 保"
"存, 我们已经完成了所有UI元素."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:544
msgid "The emerald counter should look something like this"
msgstr "翡翠计数器看起来应该像这样"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:547
msgid "Add the UI components to the final GUI"
msgstr "将UI组件添加到最终的GUI"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:549
msgid ""
"Time to add all the UI elements to the main GUI scene. Open the ``GUI.tscn`` "
"scene again, and delete the ``Bar`` and ``Counter`` nodes. In the FileSystem "
"dock, find the ``LifeBar.tscn`` and drag and drop it onto the ``Bars`` "
"container in the scene tree. Do the same for the ``EnergyBar``. You should "
"see them align vertically."
msgstr ""
"是时候将所有UI元素添加到主GUI场景中了. 再次打开 ``GUI.tscn`` 场景, 并删除 "
"``Bar`` 和 ``Counter`` 节点. 在 ``FileSystem`` 停靠面板中, 找到 ``LifeBar."
"tscn`` 并将其拖放到场景树中的 ``Bars`` 容器上. 对 ``EnergyBar`` 执行相同的操"
"作. 你应该看到它们垂直对齐."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:557
msgid "The LifeBar and the EnergyBar align automatically"
msgstr "``LifeBar`` 和 ``EnergyBar`` 自动对齐"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:559
msgid ""
"Now, drag and drop the ``BombCounter.tscn`` and ``EmeraldCounter.tscn`` "
"scenes onto the ``Counters`` node. They'll resize automatically."
msgstr ""
"现在, 将 ``BombCounter.tscn`` 和 ``EmeraldCounter.tscn`` 场景拖放到 "
"``Counters`` 节点上. 它们会自动调整大小."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:564
msgid "The nodes resize to take all the available vertical space"
msgstr "调整节点大小以占用所有可用的垂直空间"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:566
msgid ""
"To let the ``EmeraldCounter`` and ``BombCounter`` use the size we defined in "
"``Counter.tscn``, we need to change the ``Size Flags`` on the ``Counters`` "
"container. Select the ``Counters`` node and unfold the ``Size Flags`` "
"section in the Inspector. Uncheck the ``Fill`` tag for the ``Vertical`` "
"property, and check ``Shrink Center`` so the container centers inside the "
"``HBoxContainer``."
msgstr ""
"为了让 ``EmeraldCounter`` 和 ``BombCounter`` 使用我们在 ``Counter.tscn`` 中定"
"义的大小, 我们需要在 ``Counters`` 容器上更改 ``Size Flags``. 选择 "
"``Counters`` 节点, 然后在属性检查器中展开 ``Size Flags`` 部分. 取消选中 ``垂"
"直(Vertical)`` 属性的 ``填充(Fill)`` 标记, 然后选中 ``收缩中心(Shrink "
"Center)``, 以便容器在 ``HBoxContainer`` 内部居中."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:575
msgid "Now both counters have a decent size"
msgstr "现在, 这两个计数器都有一个像样的大小"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:579
msgid ""
"Change the ``Min Size`` property of the ``Counters`` container to control "
"the height of the counters' background."
msgstr "更改 ``Counters`` 容器的 ``Min Size`` 属性, 以控制计数器背景的高度."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:582
msgid ""
"We have one small issue left with the EP label on the EnergyBar: the 2 bars "
"should align vertically. Click the icon next to the ``EnergyBar`` node to "
"open its scene. Select the ``Count`` node and scroll down to the ``Custom "
"Constants`` section. Add a ``Margin Left`` of ``20``. In the ``Rect`` "
"section set the node's ``Min Size`` back to 100, the same value as on the "
"LifeBar. The ``Count`` should now have some margin on the left. If you save "
"and go back to the GUI scene, it will be aligned vertically with the "
"``LifeBar``."
msgstr ""
"我们在 ``EnergyBar`` 上留下一个带有 ``EP`` 标签的小问题:2个条应垂直对齐. 点"
"击 ``EnergyBar`` 节点旁边的图标以打开其场景. 选择 ``Count`` 节点, 然后向下滚"
"动到 ``Custom Constants`` 部分. 添加一个 ``20`` 的 ``Margin Left``. 在 "
"``Rect`` 部分, 将节点的 ``Min Size`` 设置为100, 与 ``LifeBar`` 相同. "
"``Count`` 现在应该在左边有一些边距. 如果您保存并返回GUI场景, 它将与 "
"``LifeBar`` 垂直对齐."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:593
msgid "The 2 bars align perfectly"
msgstr "2个条形图完美对齐"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:597
msgid ""
"We could have set up the ``EnergyBar`` this way a few moments ago. But this "
"shows you that you can go back to any scene anytime, tweak it, and see the "
"changes propagate through the project!"
msgstr ""
"我们原本可以这样设置 ``EnergyBar``. 但是, 这表明您可以随时返回任何场景进行调"
"整, 并查看更改在项目中的传播！"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:602
msgid "Place the GUI onto the game's mockup"
msgstr "把GUI放到游戏的模型上"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:604
msgid ""
"To wrap up the tutorial we're going to insert the GUI onto the game's mockup "
"scene."
msgstr "为了结束本教程, 我们将GUI插入到游戏的模型场景中."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:607
msgid "Head to the FileSystem dock and open ``LevelMockup.tscn``."
msgstr "前往文件系统停靠面板, 打开 ``LevelMockup.tscn``."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:609
msgid ""
"Drag-and-drop the ``GUI.tscn`` scene right below the ``bg`` node and above "
"the ``Characters``. The GUI will scale to fit the entire viewport. Head to "
"the Layout menu and select the ``Center Top`` option so it anchors to the "
"top edge of the game window. Then resize the GUI to make it as small as "
"possible vertically. Now you can see how the interface looks in the context "
"of the game."
msgstr ""
"将 ``GUI.tscn`` 场景拖放到 ``bg`` 节点下方和 ``Character`` 上方.GUI将缩放以适"
"合整个视图. 前往 ``Layout`` 菜单并选择 ``Center Top`` 选项, 使其锚定到游戏窗"
"口的顶部边缘. 然后调整GUI的大小, 使其在垂直方向上尽可能小. 现在, 你可以看到界"
"面在游戏中的外观."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:616
msgid ""
"Congratulations for getting to the end of this long tutorial. You can find "
"the final project here: :download:`ui_gui_design.zip <files/ui_gui_design."
"zip>`."
msgstr ""
"祝贺您完成了这篇冗长的教程. 最终项目您可以在 :download:`ui_gui_design.zip "
"<files/ui_gui_design.zip>` 找到."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:625
msgid ""
"**A final note about Responsive Design**. If you resize the GUI, you'll see "
"the nodes move, but the textures and text won't scale. The GUI also has a "
"minimum size, based on the textures inside of it. In games, we don't need "
"the interface to be as flexible as that of a website. You almost never want "
"to support both landscape and portrait screen orientations. It's one or the "
"other. In landscape orientation, the most common ratios range from 4:3 to "
"16:9. They are close to one another. That's why it's enough for the GUI "
"elements to only move horizontally when we change the window size."
msgstr ""
"**关于响应式设计的最后说明** . 如果调整GUI的大小, 您将看到节点移动, 但是纹理"
"和文本将无法缩放.GUI的最小尺寸取决于其内部的纹理大小. 在游戏中, 我们不需要界"
"面像网站一样灵活. 您几乎永远都不想同时支持横向和纵向屏幕方向. 要么横向, 要么"
"纵向. 在横向模式中, 最常见的比例范围是 4:3到16:9. 它们很接近. 这就是为什么当"
"我们更改窗口大小时,GUI元素仅水平移动就足够了."
