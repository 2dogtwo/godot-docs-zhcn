# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:4
msgid "Godot's design philosophy"
msgstr "Godot的设计理念"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:6
msgid "Now that you've gotten your hands wet, let's talk about Godot's design."
msgstr "既然您已经小试身手，让我们谈谈Godot的设计。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:8
msgid ""
"**Every game engine is different and fits different needs.** Not only do "
"they offer a range of features, but the design of each engine is unique. "
"This leads to different workflows and different ways to form your games' "
"structures. This all stems from their respective design philosophies."
msgstr ""
"**每个游戏引擎都不同，以满足不同的需求。** 它们不仅提供一系列功能，而且每个引"
"擎的设计都是独一无二的。这将导致不同工作流程和项目组织结构。这一切都源于它们"
"各自的设计理念。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:13
msgid ""
"This page is here to help you understand how Godot works, starting with some "
"of its core pillars. It is not a list of available features, nor is it an "
"engine comparison. To know if any engine can be a good fit for your project, "
"you need to try it out for yourself and understand its design and "
"limitations."
msgstr ""
"这个页面是为了帮助您通过godot的一些核心功能来理解它的工作原理。这个页面既不是"
"godot特性的介绍列表，也不会对各个引擎做比较。要知道哪一种引擎更适合您的项目，"
"您需要自己尝试一下并了解各个引擎对设计和局限性。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:19
msgid ""
"Please watch `Discover Godot 3, the Free game engine <https://youtu."
"be/4v3qge-3CqQ>`_ if you're looking for an overview of the engine's features."
msgstr ""
"如果您正在寻找引擎特性的概述，请观看 `探索免费游戏引擎Godot 3 <https://youtu."
"be/4v3qge-3CqQ>`_ 。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:23
msgid "Object-oriented design and composition"
msgstr "面向对象的设计与组合"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:25
msgid ""
"Godot embraces object-oriented design at its core with its flexible scene "
"system and Node hierarchy. It tries to stay away from strict programming "
"patterns to offer an intuitive way to structure your game."
msgstr ""
"Godot凭借其灵活的场景系统和节点层次结构，将面向对象设计作为其核心。它试图远离"
"严格的编程模式，以提供直观的方式来构建游戏。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:29
msgid ""
"For one, Godot lets you **compose or aggregate** scenes. It's like nested "
"prefabs: you can create a BlinkingLight scene and a BrokenLantern scene that "
"uses the BlinkingLight. Then, create a city filled with BrokenLanterns. "
"Change the BlinkingLight's color, save, and all the BrokenLanterns in the "
"city will update instantly."
msgstr ""
"首先，Godot可以让您 **组合或聚合** 场景。就像嵌套的预制件一样：您可以创建 "
"``BlinkingLight`` 场景，并创建使用 ``BlinkingLight`` 的 ``BrokenLantern`` 场"
"景。然后，创建一个充满 ``BrokenLanterns`` 的城市。更改BlinkingLight的颜色，保"
"存，城市中的所有 ``BrokenLantern`` 都会立即更新。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:36
msgid "On top of that, you can **inherit** from any scene."
msgstr "最重要的是，您可以从任何场景 **继承** 。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:38
msgid ""
"A Godot scene could be a Weapon, a Character, an Item, a Door, a Level, part "
"of a level… anything you'd like. It works like a class in pure code, except "
"you're free to design it by using the editor, using only the code, or mixing "
"and matching the two."
msgstr ""
"一个Godot场景可以是武器、角色、物品、门、关卡、关卡的一部分……任何你能想象的东"
"西。它就像类一样，但也可以使用编辑器、纯代码或同时使用两者来编辑场景。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:43
msgid ""
"It's different from prefabs you find in several 3D engines, as you can then "
"inherit from and extend those scenes. You may create a Magician that extends "
"your Character. Modify the Character in the editor and the Magician will "
"update as well. It helps you build your projects so that their structure "
"matches the game's design."
msgstr ""
"和其他几个3D引擎的Prefab（预制体）不同，场景可以通过继承来扩展。你可以创建一"
"个 ``Magician（魔术师）`` 来扩展您的 ``Character（角色）`` 。在编辑器中修改 "
"``Character（角色）`` （例如添加跳跃功能）， ``Magician（魔术师）`` 也会更"
"新。这样设计可以帮你保持项目结构与设计的一致性。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:49
msgid "|image0|"
msgstr "|image0|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:51
msgid ""
"Also note that Godot offers many different types of objects called nodes, "
"each with a specific purpose. Nodes are part of a tree and always inherit "
"from their parents up to the Node class. Although the engine does feature "
"components like collision shapes, they're the exception, not the norm."
msgstr ""
"另外，Godot提供了不同类型的节点（Node）对象，每种节点都有特定的用途。节点是场"
"景树的一部分，并且最终继承自 ``Node`` 类。尽管引擎确实具有碰撞形状之类的组"
"件，但它们是例外（并非Node，属于Resource）。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:57
msgid "|image1|"
msgstr "|image1|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:59
msgid ""
"Sprite is a Node2D, a CanvasItem and a Node. It has all the properties and "
"features of its three parent classes, like transforms or the ability to draw "
"custom shapes and render with a custom shader."
msgstr ""
"``Sprite`` 是 ``Node2D``，``CanvasItem`` 和 ``Node`` 类型。它具有三个父类的所"
"有属性和特性，比如 ``transforms`` 或者绘制自定义形状和渲染自定义着色的能力。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:64
msgid "All-inclusive package"
msgstr "完善的工具集"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:66
msgid ""
"Godot tries to provide its own tools to answer most common needs. It has a "
"dedicated scripting workspace, an animation editor, a tilemap editor, a "
"shader editor, a debugger, a profiler, the ability to hot-reload locally and "
"on remote devices, etc."
msgstr ""
"Godot尝试提供自己的工具来满足最常见的需求。它具有专用的脚本工作区、动画编辑"
"器、tilemap编辑器、着色器编辑器、调试器、分析器、能够在本地和远程等设备上热重"
"载的功能。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:71
msgid "|image2|"
msgstr "|image2|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:73
msgid ""
"The goal is to offer a full package to create games and a continuous user "
"experience. You can still work with external programs as long as there is an "
"import plugin for it. Or you can create one, like the `Tiled Map Importer "
"<https://github.com/vnen/godot-tiled-importer>`__."
msgstr ""
"我们的目标是提供一个完整的软件包来创建游戏以及持续的用户体验。您仍然可以和外"
"部程序一起工作，只要有一个导入插件做支持。或者您可以自己创建一个，比如 "
"`Tiled Map导入器 <https://github.com/vnen/godot-tiled-importer>`__ 。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:78
msgid ""
"That is also partly why Godot offers its own programming languages GDscript "
"and VisualScript, along with C#. They're designed for the needs of game "
"developers and game designers, and they're tightly integrated in the engine "
"and the editor."
msgstr ""
"这也是为什么Godot提供自己的编程语言GDscript和VisualScript以及C#的部分原因。它"
"们是为满足游戏开发人员和游戏设计师的需求而设计的，并且紧密集成在引擎和编辑器"
"中。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:83
msgid ""
"GDscript lets you write simple code using Python-like syntax, yet it detects "
"types and offers a static language's quality of auto-completion. It is also "
"optimized for gameplay code with built-in types like Vectors and Colors."
msgstr ""
"GDscript使您可以使用类似Python的语法编写简单的代码，但是它可以检测类型并提供"
"静态语言的自动补全特质。它还针对具有内置类型（如 ``Vectors`` 和 ``Colors`` ）"
"的游戏代码进行了优化。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:87
msgid ""
"Note that with GDNative, you can write high-performance code using compiled "
"languages like C, C++, Rust, or Python (using the Cython compiler) without "
"recompiling the engine."
msgstr ""
"请注意，使用GDNative，您可以编写出使用类似C、C++、Rust或Python（使用Cython编"
"译器）这类的编译语言编写的高性能代码，而无需重新编译引擎。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:91
msgid "|image3|"
msgstr "|image3|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:93
msgid ""
"*VisualScript is a node-based programming language that integrates well in "
"the editor. You can drag and drop nodes or resources into the graph to "
"create new code blocks.*"
msgstr ""
"*VisualScript是一种基于节点的编程语言，可以很好地集成到编辑器中。 您可以将节"
"点或资源拖放到图中以创建新的代码块。*"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:97
msgid ""
"Note that the 3D workspace doesn't feature as many tools as the 2D "
"workspace. You'll need external programs or add-ons to edit terrains, "
"animate complex characters, and so on. Godot provides a complete API to "
"extend the editor's functionality using game code. See `The Godot editor is "
"a Godot game`_ below."
msgstr ""
"请注意，3D工作区不像2D工作区有那么多工具。你将需要外部程序或插件来编辑地形、"
"动画复杂角色等。Godot提供了完整的API，可以使用游戏代码扩展编辑器的功能。参见"
"下面的 `Godot编辑器是一个Godot游戏<#the-godot-editor-is-a-godot-game>`_ 。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:102
msgid "|image4|"
msgstr "|image4|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:104
msgid ""
"*A State Machine editor plugin in Godot 2 by kubecz3k. It lets you manage "
"states and transitions visually.*"
msgstr ""
"*Godube 2中的状态机编辑器插件，由kubecz3k开发。它使您可以直观地管理状态和转"
"换。*"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:108
msgid "Open source"
msgstr "开源"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:110
msgid ""
"Godot offers a fully open source codebase under the **MIT license**. This "
"means all the technologies that ship with it have to be Free (as in freedom) "
"as well. For the most part, they're developed from the ground up by "
"contributors."
msgstr ""
"Godot源代码采用了 **MIT许可证** 。这意味着它附带的所有技术也必须是自由的（自"
"由使用、修改等）。大部分代码都是由贡献者从头开始开发的。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:115
msgid ""
"Anyone can plug in proprietary tools for the needs of their projects — they "
"just won't ship with the engine. This may include Google AdMob, or FMOD. Any "
"of these can come as third-party plugins instead."
msgstr ""
"任何人都可以根据各自需求添加专有软件——当然它们是不会通过引擎一起提供。包括"
"Google AdMob或FMOD等，如果需要可以作为第三方插件来提供。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:120
msgid ""
"On the other hand, an open codebase means you can **learn from and extend "
"the engine** to your heart's content. You can also debug games easily, as "
"Godot will print errors with a stack trace, even if they come from the "
"engine itself."
msgstr ""
"另一方面，开放源代码意味着你可以 **学习并扩展引擎** 。你也可以很容易地调试游"
"戏，因为Godot会使用堆栈跟踪打印所有错误，即使这些错误来自引擎本身。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:126
msgid ""
"This **does not affect the work you do with Godot** in any way: there's no "
"strings attached to the engine or anything you make with it."
msgstr ""
"**开放源码的协议不会以任何方式影响您用Godot所创作的作品**：不会有附加条件影响"
"Godot引擎与您用Godot制作的东西。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:130
msgid "Community-driven"
msgstr "社区驱动"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:132
msgid ""
"**Godot is made by its community, for the community, and for all game "
"creators out there.** It's the needs of the users and open discussions that "
"drive the core updates. New features from the core developers often focus on "
"what will benefit the most users first."
msgstr ""
"**Godot开发自社区，为其社区内外所有游戏开发者创造的。** 由用户需求及公开讨论"
"驱动核心更新。核心开发人员的新功能通常将重点放在首先让大多数用户受益的方面。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:137
msgid ""
"That said, although a handful of core developers work on it full-time, the "
"project has over 600 contributors at the time of writing. Benevolent "
"programmers work on features they may need themselves, so you'll see "
"improvements in all corners of the engine at the same time in every major "
"release."
msgstr ""
"就是说，尽管只有少数全职的核心开发者，但在撰写本文时，该项目已有超过600位贡献"
"者。仁慈的程序员致力于完善他们可能需要的功能，因此在每个主要版本中都能看到引"
"擎各个方面的改进。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:144
msgid "The Godot editor is a Godot game"
msgstr "Godot编辑器是一个Godot游戏"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:146
msgid ""
"The Godot editor runs on the game engine. It uses the engine's own UI "
"system, it can hot-reload code and scenes when you test your projects, or "
"run game code in the editor. This means you can **use the same code** and "
"scenes for your games, or **build plugins and extend the editor.**"
msgstr ""
"Godot编辑器运行在游戏引擎上。它使用引擎自己的UI系统，可以在测试项目时热重载代"
"码和场景，也可以在编辑器中运行游戏代码。这意味着 **使用相同的代码** 和场景既"
"可以构建游戏，也可以 **构建插件并扩展编辑器** 。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:151
msgid ""
"This leads to a reliable and flexible UI system, as it powers the editor "
"itself. With the ``tool`` keyword, you can run any game code in the editor."
msgstr ""
"由于它为编辑器本身提供了动力，因此这导致了可靠且灵活的UI系统。 使用 `` "
"tool`` 关键字，您可以在编辑器中运行任何游戏代码。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:154
msgid "|image5|"
msgstr "|image5|"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:156
msgid ""
"*RPG in a Box is a voxel RPG editor made with Godot 2. It uses Godot's UI "
"tools for its node-based programming system and for the rest of the "
"interface.*"
msgstr ""
"*RPG in a Box* 是一个用Godot 2制作的RPG体素编辑器。它使用Godot的UI工具来制作"
"其基于节点的编程系统和界面的其余部分。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:160
msgid ""
"Put the ``tool`` keyword at the top of any GDScript file and it will run in "
"the editor. This lets you import and export plugins, create plugins like "
"custom level editors, or create scripts with the same nodes and API you use "
"in your projects."
msgstr ""
"将 ``tool`` 关键字放在任何GDScript文件的顶部，它将在编辑器中运行。这使您可以"
"导入和导出插件，创建自定义级别编辑器之类的插件，或使用与项目中使用的相同的节"
"点和API来创建脚本。"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:166
msgid "Separate 2D and 3D engines"
msgstr "独立的2D和3D引擎"

#: ../../docs/getting_started/step_by_step/godot_design_philosophy.rst:168
msgid ""
"Godot offers dedicated 2D and 3D rendering engines. As a result, **the base "
"unit for 2D scenes is pixels.** Even though the engines are separate, you "
"can render 2D in 3D, 3D in 2D, and overlay 2D sprites and interfaces over "
"your 3D world."
msgstr ""
"Godot提供专门的2D和3D渲染引擎。因此，**2D场景的基本单位是像素。** 即使引擎是"
"分开的，您可以在3D渲染2D，在2D渲染3D，并在您的3D世界叠加2D精灵和界面。"
