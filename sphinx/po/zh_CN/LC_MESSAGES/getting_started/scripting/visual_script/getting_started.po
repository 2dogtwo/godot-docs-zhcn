# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:4
msgid "Getting started with Visual Scripting"
msgstr "可视化脚本入门"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:6
msgid ""
"As with everything in Godot, we prioritize a good experience over copying or "
"integrating third party solutions which might not fit nicely in the current "
"workflow. This led us to write our own version of how we believe this "
"feature would work best with the engine."
msgstr ""
"与Godot中的所有内容一样，我们优先考虑良好的体验，而不是复制或集成可能无法很好"
"地适应当前工作流程的第三方解决方案。这导致我们编写了自己的版本，我们认为此功"
"能最适合引擎使用的版本。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:10
msgid ""
"In Godot, a Visual Script fits smoothly together with regular scripts in the "
"Editor tab"
msgstr "在Godot中，可视化脚本与在编辑器选项卡中的常规脚本配合得很好"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:15
msgid ""
"In fact, Visual Scripting integrates so well to Godot that it's hard to "
"believe it was added only in version 3.0. This is because, when editing, the "
"rest of Godot panels and docks act like a palette from where you can drag "
"and drop all sorts of information to the script canvas:"
msgstr ""
"实际上，可视化脚本与Godot的集成是如此之好，以至于很难相信仅在3.0版中才添加了"
"它。这是因为，在编辑时，其余的Godot面板和停靠面板就像一个调色板一样，您可以从"
"中将各种信息拖放到脚本画布上："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:23
msgid "Creating a script"
msgstr "创建一个脚本"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:25
msgid ""
"Creating scripts works the same as with other scripting languages: Select "
"any node in the scene and push the \"New Script\" button at the top right "
"corner of the Scene Tree dock:"
msgstr ""
"创建脚本的工作方式与其他脚本语言相同：选择场景中的任何节点，然后按场景树面板"
"右上角的 ``新建脚本`` 按钮："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:31
msgid ""
"Once it opens, the script type \"Visual Script\" must be selected from the "
"drop down list. The script extension must be \".vs\" (for Visual Script!)."
msgstr ""
"打开后，必须从下拉列表中选择脚本类型 ``可视化脚本（Visual Script）``。脚本扩"
"展名必须为 ``.vs`` （对于可视化脚本！）。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:37
msgid ""
"Finally, the Script Editor will open, allowing you to start editing the "
"visual script:"
msgstr "最后，脚本编辑器将打开，允许开始编辑可视脚本："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:43
msgid "Adding a function"
msgstr "添加一个函数"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:45
msgid ""
"Unlike other visual scripting implementations, Visual Scripting in Godot is "
"heavily based on functions. This happens because it uses the same interface "
"to communicate with the engine as other scripting engines. In Godot, the "
"scripting interface is universal and all implementations conform to it."
msgstr ""
"与其他可视化脚本实现不同，Godot中的可视化脚本重度基于功能。这是因为它使用与其"
"他脚本引擎相同的接口与引擎进行通信。在Godot中，脚本接口是通用的，并且所有实现"
"都遵循它。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:49
msgid "A function is an individual canvas with nodes connected."
msgstr "函数是连接了节点的单个画布。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:51
msgid ""
"A single script can contain many functions, each of which will have a canvas "
"of its own, allowing for more organization."
msgstr ""
"单个脚本可以包含许多函数，每个函数都有自己的画布，从而允许进行更多的组织。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:53
msgid "There are three main ways to add functions in a script:"
msgstr "在脚本中添加函数的主要方法有三种："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:56
msgid "Overriding a virtual function"
msgstr "重写一个虚函数"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:58
msgid ""
"Most types of nodes and other types of objects in Godot contain virtual "
"functions. These are functions that will be called (run your code) when "
"something happens and can be looked up in the reference. Virtual functions "
"are listed when pressing the \"Override\" icon in the member panel:"
msgstr ""
"Godot中大多数类型的节点和其他类型的对象都包含虚拟函数。这些功能在发生某些情况"
"时将被调用（运行您的代码），并且可以在参考中查找这些函数。当按下成员面板中的 "
"``覆盖`` 图标时，将列出虚函数："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:65
msgid ""
"In the following example, a function will be executed when the node is "
"loaded and added to the running scene. For this, the _ready() virtual method "
"will be overridden:"
msgstr ""
"在以下示例中，将在节点被加载并被添加到运行场景时执行一个函数。为此，"
"``_ready()`` 虚函数将被重写："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:71
msgid "Finally, a canvas appears for this function, showing the override:"
msgstr "最后，一个画布出现在这个函数上，显示重写："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:76
msgid ""
"As some functions expect you to return a value, they will also add a return "
"node where such value is supposed to be provided:"
msgstr ""
"由于某些函数希望您返回值，因此它们还会在应该提供该值的地方，添加一个返回节"
"点："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:83
msgid "Connecting a signal to a function"
msgstr "连接一个信号到一个函数"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:85
msgid ""
"Nodes in a tree emit signals when something happens. Godot uses signals for "
"all sorts of things. A typical example would be a button that emits a "
"\"pressed\" signal when actually pressed."
msgstr ""
"当某些事情发生时，树中的节点会发出信号。Godot将信号用于各种事物。一个典型的例"
"子是一个按钮，当实际按下按钮时会发出 ``按下`` 信号。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:88
msgid ""
"For this, a node must be selected and the Node tab opened. This will allow "
"inspecting the signals. Once they are displayed, connect the \"pressed\" "
"signal:"
msgstr ""
"为此，必须选择一个节点并打开节点选项卡。这将允许检查信号。一旦它们被显示，连"
"接 ``按下`` 信号："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:94
msgid ""
"This will open the connection dialog. In this dialog, you must select the "
"node where the signal will be connected to, and the function that will "
"receive the signal:"
msgstr ""
"这将打开连接对话框。在此对话框中，您必须选择信号要被连接到的节点，以及将接收"
"信号的函数："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:100
msgid ""
"If this is done right, a new function will be created in our script and a "
"signal will automatically be connected to it:"
msgstr ""
"如果正确完成，将在我们的脚本中创建一个新函数，并自动将一个信号连接到它："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:107
msgid "Creating a function manually"
msgstr "手动创建一个函数"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:109
msgid ""
"The last way to create functions is to do it manually. In general, this is "
"not as common unless you really need it. Custom functions work when another "
"(or the same) script calls them manually. The main use cases for this are "
"breaking a larger function up into several manageable chunks and reusing "
"your visual code."
msgstr ""
"创建函数的最后一种方法是手动完成。一般来说，除非您真的需要，否则这是不常见"
"的。当另一个（或相同）脚本手动调用自定义函数时，它们会起作用。这样做的主要用"
"例是，将一个较大的函数分解为几个可管理的块，并重新使用可视化代码。"

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:113
msgid ""
"To create a function manually, push the big \"Plus\" button, and a new "
"function will be added with a default name:"
msgstr ""
"要手动创建函数，请按下 ``加号`` 按钮，然后将添加一个具有默认名称的新函数："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:119
msgid ""
"This will add a new function, which can be renamed by simply double clicking "
"its name:"
msgstr "这将添加一个新函数，只需双击其名称即可重命名该函数："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:125
msgid ""
"To edit the \"arguments\" this function can get (the values you pass to it "
"when you call this function), simply click the Function node and check the "
"inspector:"
msgstr ""
"要编辑此函数可以获得的 ``参数`` （调用此函数时传递给它的值），只需点击 ``函数"
"（Function）`` 节点并检查属性检查器："

#: ../../docs/getting_started/scripting/visual_script/getting_started.rst:131
msgid "More on that will be explained later in this document."
msgstr "关于这一点的更多内容，将在本文后面解释。"
