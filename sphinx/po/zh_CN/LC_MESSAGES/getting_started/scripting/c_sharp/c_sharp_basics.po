# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-17 12:25+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:4
msgid "Introduction"
msgstr "简介"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:6
msgid ""
"C# support is a new feature available since Godot 3.0. As such, you may "
"still run into some issues, or find spots where the documentation could be "
"improved. Please report issues with C# in Godot on the `engine GitHub page "
"<https://github.com/godotengine/godot/issues>`_, and any documentation "
"issues on the `documentation GitHub page <https://github.com/godotengine/"
"godot-docs/issues>`_."
msgstr ""
"支持C#是3.0版本的一项新功能。因此，您可能会遇到一些问题，或是发现文档中某些需"
"要改进的地方。请在Godot引擎的GitHub页面 <https://github.com/godotengine/"
"godot/issues>提交您在使用C#过程中遇到的问题，或者在任意文档讨论区<https://"
"github.com/godotengine/godot-docs/issues>提交您的问题。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:14
msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>` and (re)visit "
"the :ref:`Scripting section <doc_scripting>` of the step-by-step tutorial."
msgstr ""
"这个页面简单介绍了C#是什么，以及如何在Godot中使用C#。然后，您可能需要查看“如"
"何使用特定功能<doc_c_sharp_features>”，阅读“C#和GDScript的API之间有何不同"
"<doc_c_sharp_differences>”，以及（重新）阅读入门教程的“脚本”部分"
"<doc_scripting>。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:21
msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with the Mono 5.x .NET framework, including full support for "
"C# 7.0. Mono is an open source implementation of Microsoft's .NET Framework "
"based on the ECMA standards for C# and the Common Language Runtime. A good "
"starting point for checking its capabilities is the `Compatibility <http://"
"www.mono-project.com/docs/about-mono/compatibility/>`_ page in the Mono "
"documentation."
msgstr ""
"C#是Microsoft开发的一种高级编程语言。 在Godot中，它是使用Mono 5.x .NET框架实"
"现的，包括对C#7.0的完全支持。 Mono是Microsoft .NET Framework的开源实现，基于"
"ECMA的C#标准和公共语言运行时。 检查其功能的一个很好的起点是Mono文档中的“兼容"
"性<http://www.mono-project.com/docs/about-mono/compatibility/>`_ 页面。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:29
msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"这不是一个关于C#语言整体的全面教程。 如果您还不熟悉其语法或功能，请参阅 "
"`Microsoft C#指南 <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ 或"
"在其他地方寻找合适的介绍。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:36
msgid "Setting up C# for Godot"
msgstr "在Godot中设置C#"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:39
msgid "Windows"
msgstr "Windows"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:41
msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`_ (*not* Visual Studio Code), which "
"contains utilities required to use C# in Godot. If you don't plan on using "
"the Visual Studio IDE, you can download just the `Visual Studio Build Tools "
"<https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?"
"sku=BuildTools&rel=15>`_ instead. Make sure you at least have the .NET "
"Framework 4.5 targeting pack installed, you can get it using any of the "
"installers mentioned above inside the \"Individual components\" tab."
msgstr ""
"下载并安装最新版本的`Visual Studio <https://visualstudio.microsoft.com/"
"downloads/>`_ （*不是* Visual Studio Code！），它会包含Godot中用到的C#工具。"
"如果你不打算用Visual Studio IDE的话，也可以只用下载 `Visual Studio Build "
"Tools <https://visualstudio.microsoft.com/thank-you-downloading-visual-"
"studio/?sku=BuildTools&rel=15>`_ 。你可以在上述任何安装程序中的“独立组件”选项"
"卡里找到 .NET Framework 4.5 targeting pack，请确保安装。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:51
msgid "macOS and Linux"
msgstr "macOS平台及Linux平台"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:53
msgid ""
"Download and install the latest version of the `Mono SDK <http://www.mono-"
"project.com/download/>`_. As of Godot 3.1 beta 3, the version number doesn't "
"matter since Godot bundles its own Mono 5.18 installation. We only need the "
"Mono installation for NuGet and MSBuild which are required to use C# in "
"Godot."
msgstr ""
"下载并安装最新版本的 `Mono SDK <http://www.mono-project.com/download/>`_ 。对"
"于Godot 3.1 beta 3，下载的哪个版本都无所谓，因为Godot自身就捆绑了Mono 5.18的"
"安装。我们只需要为NuGet和MSBuild安装Mono就可以，那正是Godot中C#需要的。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:59
msgid ""
"To download Mono on macOS, use the \"Stable Channel\" link from the `Mono "
"Downloads Page <http://www.mono-project.com/download/>`_. The Visual Studio "
"channel is an earlier version of Mono and will not work."
msgstr ""
"在macOS平台下载Mono，请使用“Mono下载页面<http://www.mono-project.com/"
"download/>”中的“稳定通道”链接。Visual Studio通道是Mono早期版本，将无法正常工"
"作。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:65
msgid "Additional notes"
msgstr "补充说明"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:67
msgid ""
"Your Godot version must have Mono support enabled, so make sure to download "
"the **Mono version** of Godot. If you are building Godot from source, make "
"sure to follow the steps to enable Mono support in your build as outlined in "
"the :ref:`doc_compiling_with_mono` page."
msgstr ""
"您的Godot版本必须启用Mono支持，因此请务必下载Godot的**Mono版本**。如果您是从"
"源代码构建Godot，请确保按照以下页面<doc_compiling_with_mono>内的步骤启用Mono"
"支持。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:73
msgid ""
"In summary, you must have installed Visual Studio or Mono (depending on your "
"operating system) **and** the Mono-enabled version of Godot."
msgstr ""
"总之，您必须安装Visual Studio或Mono（取决于您使用的操作系统）**和**启用支持"
"Mono的Godot版本。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:77
msgid "Configuring an external editor"
msgstr "配置外部编辑器"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:79
msgid ""
"C# support in Godot's script editor is minimal. Consider using an external "
"IDE or editor, such as  `Visual Studio Code <https://code.visualstudio.com/"
">`_ or MonoDevelop. These provide autocompletion, debugging, and other "
"useful features for C#. To select an external editor in Godot, click on "
"**Editor → Editor Settings** and scroll down to **Mono**. Under **Mono**, "
"click on **Editor**, and select your external editor of choice."
msgstr ""
"Godot的脚本编辑器对C＃支持很少。因此建议您使用考虑使用外部IDE或编辑器，例如"
"Visual Studio Code编辑器<https://code.visualstudio.com/>或MonoDevelop编辑器。"
"它们为C＃提供自动代码补全，启用调试和其他有用的功能。要在Godot中选择外部编辑"
"器，请单击** 编辑器→编辑器设置**并向下滚动到** Mono **。在** Mono **下，单击"
"** 编辑器 **，然后选择您指定的外部编辑器。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:87
msgid ""
"If you are using Visual Studio Code, ensure you download and install the `C# "
"extension <https://marketplace.visualstudio.com/items?itemName=ms-vscode."
"csharp>`_ to enable features like syntax highlighting and IntelliSense."
msgstr ""
"如果你在使用Visual Studio Code，请确保下载了 `C# 插件 <https://marketplace."
"visualstudio.com/items?itemName=ms-vscode.csharp>`_ 以启用诸如IntelliSense和"
"语法高亮的特性。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:92
msgid "Creating a C# script"
msgstr "创建C#脚本"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:94
msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting ``Attach script`` in the context menu of a node in "
"your scene:"
msgstr ""
"成功为Godot设置C＃后，在场景中节点的上下文菜单中选择“连接脚本”时，应该会看到"
"以下选项："

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:99
msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some places in the "
"documentation still lack C# examples, most concepts can be transferred "
"easily from GDScript."
msgstr ""
"请注意，虽然在某些细节上有所差别，使用C#编写代码时，大多数概念的工作方式是相"
"通的。如果您是刚接触Godot的新手，您可能需要按照以下教程“脚本”。虽然在文档中缺"
"乏详细的C#示例，但大部分概念都能够在GDScript轻松地阐述清楚。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:106
msgid "Project setup and workflow"
msgstr "项目设置和工作流程"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:108
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.mono`` and ``Properties/AssemblyInfo.cs``). All of these but ``.mono`` "
"are important and should be committed to your version control system. ``."
"mono`` can be safely added to the ignore list of your VCS. When "
"troubleshooting, it can sometimes help to delete the ``.mono`` folder and "
"let it regenerate."
msgstr ""
"当您创建第一个C#脚本时，Godot会为您的Godot项目初始化C#项目文件。 这包括生成C#"
"解决方案( ``.sln`` )和项目( ``.csproj`` )以及一些实用程序文件和文件夹( ``."
"mono`` ，有时是 ``Properties`` )。 除了 ``.mono`` 之外的所有这些都很重要，应"
"该保存在您的版本控制系统中。 ``.mono``可以安全地添加到VCS的忽略列表中。 在进"
"行故障排除时，有时可以帮助删除 ``.mono`` 文件夹并让它重新生成。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:117
#, fuzzy
msgid ""
"Note that currently, there are some issues where Godot and the C# project "
"don't stay in sync; if you delete, rename or move a C# script, the change "
"may not be reflected in the C# project file. In cases like this, you will "
"have to edit the C# project file manually."
msgstr ""
"请注意，目前Godot和C#项目存在一些不同步的问题; 如果删除，重命名或移动脚本或节"
"点等内容，它们可能不再匹配。 在这种情况下，可以帮助手动编辑解决方案文件。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:122
#, fuzzy
msgid ""
"For example, if you created a script (e.g. ``Test.cs``) and delete it in "
"Godot, compilation will fail because the missing file is still expected to "
"be there by the C# project file. For now, you can simply open up the ``."
"csproj`` file and look for the ``ItemGroup``, there should be a line "
"included like the following:"
msgstr ""
"示例:如果您创建了一个脚本(例如 ``Test.cs`` )并在Godot中将其删除，则编译将失"
"败，因为现在仍然希望CS项目存在丢失的文件。 您现在可以简单地打开 ``.csproj`` "
"并查找 ``ItemGroup`` ，应该包含如下所示的一行:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:136
#, fuzzy
msgid ""
"Simply remove that line and your project should build correctly again. Same "
"for renaming and moving things, simply rename and move them in the project "
"file if needed."
msgstr ""
"只需删除该行，您的项目现在应该再次构建正常。 对于重命名和移动内容，只需重命名"
"并在项目文件中移动它们(如果需要)。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:141
msgid "Example"
msgstr "示例"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:143
msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "这是一个空白的C#脚本，带有一些注释来演示它是如何工作的。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:170
#, fuzzy
msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` class which is part of the "
"``Godot`` namespace. For a list of methods in the ``GD`` class, see the "
"class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"正如您所看到的，GDScript中通常位于全局范围内的东西，如Godot的 ``print`` 函"
"数，可以在 ``GD`` 命名空间中找到。 有关这些的列表，请参阅类参考页面 :ref:"
"`@GDScript <class_ @ gdscript>` 和 :ref:`@GlobalScope <class_ @ "
"globalscope>`。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:177
#, fuzzy
msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error "
"and won't be able to run the scene: *\"Cannot find class XXX for script "
"res://XXX.cs\"*"
msgstr ""
"请记住，您希望附加到节点的类应命名为 ``.cs`` 文件。 如果没有，您将收到以下错"
"误，并且无法运行场景:``找不到类XXX的脚本res:// XXX.cs``。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:183
msgid "General differences between C# and GDScript"
msgstr "C#和GDScript之间的一般差异"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:185
msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"C#API在GDScript / C++中使用 ``PascalCase`` 而不是 ``snake_case`` 。 在可能的"
"情况下，字段和getter / setter已转换为属性。 一般来说，C#Godot API力求尽可能合"
"理。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:189
#, fuzzy
msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr "有关更多信息，请参阅 :ref:`doc_c_sharp_differences` 页面。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:192
msgid "Current gotchas and known issues"
msgstr "目前的陷阱和已知问题"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:194
#, fuzzy
msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for Mono issues <https://github.com/"
"godotengine/godot/labels/topic%3Amono>`_."
msgstr ""
"由于C#支持对Godot来说是一个新手，因此仍有一些成长的痛苦和事情需要解决。 下面"
"列出了在Godot潜入C#时应该注意的最重要的问题，但是如果有疑问的话还要看一下Mono"
"问题的官方 `问题跟踪器 <https://github.com/godotengine/godot/labels/topic"
"%3Amono>`_ 。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:200
#, fuzzy
msgid ""
"As explained above, the C# project isn't always kept in sync automatically "
"when things are deleted, renamed or moved in Godot (`#12917 <https://github."
"com/godotengine/godot/issues/12917>`_)."
msgstr ""
"如上所述，当在Godot中删除，重命名或移动内容时，C#项目并不总是自动保持同步(`＃"
"12917 <https://github.com/godotengine/godot/issues/12917>`_ )"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:203
#, fuzzy
msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr "目前尚不支持在C#中编写编辑器插件和工具脚本"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:204
msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr "在热重装中，当前状态不会得到保存并且会被恢复，除了已经导出的变量之外。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:206
#, fuzzy
msgid ""
"Exporting Mono projects is only supported for desktop platforms (Linux, "
"Windows and macOS). Android, iOS, HTML5 and UWP are not currently supported "
"(`#20267 <https://github.com/godotengine/godot/issues/20267>`_, `#20268 "
"<https://github.com/godotengine/godot/issues/20268>`_ `#20270 <https://"
"github.com/godotengine/godot/issues/20270>`_ `#20271 <https://github.com/"
"godotengine/godot/issues/20271>`_)."
msgstr ""
"仅桌面平台(Linux，Windows和macOS)支持导出Mono项目。 目前不支持HTML5，"
"Android，iOS和UWP( `＃18364评论 <https://github.com/godotengine/godot/"
"issues/18364#issuecomment-406222102>`_ )"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:212
msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr "附加C#脚本需要引用一个类，该类名需要匹配其文件名。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:216
msgid "Performance of C# in Godot"
msgstr "在Godot中表现C#"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:218
#, fuzzy
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads. C# is faster, but requires some expensive marshalling "
"when talking to Godot."
msgstr ""
"根据一些初步的 `基准测试 <https://github.com/cart/godot3-bunnymark>`_ ，在"
"Godot中C#的性能 - 虽然通常在相同的数量级 - 大约是**〜4x ** GDScript在一些天真"
"的情况下。 为了获得完整的性能，C++仍然快一点; 具体情况将根据您的使用情况而有"
"所不同。 对于大多数通用脚本工作负载而言，GDScript可能足够快。 C#更快，但在与"
"Godot交谈时需要一些昂贵的编组。"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:226
#, fuzzy
msgid "Using NuGet packages in Godot"
msgstr "在Godot中使用Nuget包"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:228
#, fuzzy
msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`Nuget <https://www.nuget.org/>`_ 可以像Godot一样安装和使用Godot，就像任何项"
"目一样。 许多IDE(例如vs代码)可以直接添加包。 也可以通过在项目根目录中的."
"csproj文件中添加包引用来手动添加它们:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:243
#, fuzzy
msgid ""
"Whenever packages are added or modified, run ``nuget restore`` in the root "
"of the project directory. To ensure that NuGet packages will be available "
"for msbuild to use, run:"
msgstr ""
"每当添加或修改包时，在项目目录的根目录中运行nuget restore，以确保nuget包可供"
"msbuild使用，运行::"
