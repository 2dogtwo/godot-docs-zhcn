# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-27 08:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:4
msgid "GDScript style guide"
msgstr "GDScript 风格指南"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:6
#, fuzzy
msgid ""
"This style guide lists conventions to write elegant GDScript. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""
"该样式指南列出了编写优雅GDScript的约定。目标是促进编写干净、可读的代码，并促"
"进项目、讨论和教程之间的一致性。希望这也会促进开发自动格式化工具。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:11
#, fuzzy
msgid ""
"Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""
"由于GDScript与Python非常接近，因此本指南的灵感来自Python的 `PEP 8 <https://"
"www.python.org/dev/peps/pep-0008/>`__ 编程风格指南。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:15
msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:19
msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:22
msgid ""
"Godot's built-in script editor uses a lot of these conventions by default. "
"Let it help you."
msgstr "Godot的内置脚本编辑器默认使用了很多这些约定。让它帮助您。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:25
#, fuzzy
msgid "Here is a complete class example based on these guidelines:"
msgstr "下面是一个简单的示例，说明它是如何工作的："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:92
#, fuzzy
msgid "Formatting"
msgstr "格式"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:95
#, fuzzy
msgid "Encoding and special characters"
msgstr "处理通知"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:97
#, fuzzy
msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr "使用换行符（**LF**）来换行，而不是 ``CRLF`` 或 ``CR``。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:98
msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:99
#, fuzzy
msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""
"使用不带 `字节顺序标记（BOM） <https://en.wikipedia.org/wiki/"
"Byte_order_mark>`_ 的 **UTF-8** 编码。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:100
#, fuzzy
msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr "使用 **4空格** 代替制表符进行缩进（称为“软制表符”）。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:103
msgid "Indentation"
msgstr "缩进"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:105
msgid "Each indent level should be one greater than the block containing it."
msgstr "每个缩进级别必须大于包含它的代码块。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:107
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:127
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:146
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:199
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:223
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:270
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:300
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:325
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:345
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:371
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:660
msgid "**Good**:"
msgstr "**良好的**："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:114
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:135
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:169
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:210
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:229
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:280
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:307
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:332
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:352
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:381
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:668
msgid "**Bad**:"
msgstr "**糟糕的**："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:124
msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr "使用2个缩进级别来区分续行与常规代码块。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:143
msgid ""
"Exceptions to this rule are arrays, dictionaries, and enums. Use a single "
"indentation level to distinguish continuation lines:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:193
msgid "Trailing comma"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:195
msgid ""
"Use a trailing comma on the last line in arrays, dictionaries, and enums. "
"This results in easier refactoring and better diffs in version control as "
"the last line doesn't need to be modified when adding new elements."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:221
msgid ""
"Trailing commas are unnecessary in single-line lists, so don't add them in "
"this case."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:236
msgid "Blank lines"
msgstr "空白行"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:238
msgid "Surround functions and class definitions with two blank lines:"
msgstr "用两个空行包围函数和类定义："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:253
msgid "Use one blank line inside functions to separate logical sections."
msgstr "函数内部使用一个空行来分隔逻辑部分。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:256
#, fuzzy
msgid "Line length"
msgstr "length"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:258
msgid "Keep individual lines of code under 100 characters."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:260
msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two scripts opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:265
msgid "One statement per line"
msgstr "一条语句一行"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:267
#, fuzzy
msgid ""
"Never combine multiple statements on a single line. No, C programmers, not "
"even with a single line conditional statement."
msgstr ""
"不要在一行上合并多个语句 。不，C程序员，不能使用单行条件语句（三元运算符除"
"外）！"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:288
msgid "The only exception to that rule is the ternary operator:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:295
msgid "Avoid unnecessary parentheses"
msgstr "避免不必要的圆括号"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:297
msgid ""
"Avoid parentheses in expressions and conditional statements. Unless "
"necessary for order of operations, they only reduce readability."
msgstr ""
"避免表达式和条件语句中的括号。除非对操作顺序有必要，否则它们只会降低可读性。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:315
#, fuzzy
msgid "Boolean operators"
msgstr "布尔或"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:317
msgid ""
"Prefer the plain English versions of boolean operators, as they are the most "
"accessible:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:319
#, fuzzy
msgid "Use ``and`` instead of ``&&``."
msgstr "``and`` ``&&``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:320
#, fuzzy
msgid "Use ``or`` instead of ``||``."
msgstr "``or`` ``||``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:322
msgid ""
"You may also use parentheses around boolean operators to clear any "
"ambiguity. This can make long expressions easier to read."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:340
#, fuzzy
msgid "Comment spacing"
msgstr "注释"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:342
#, fuzzy
msgid ""
"Regular comments should start with a space, but not code that you comment "
"out. This helps differentiate text comments from disabled code."
msgstr ""
"普通注释开头应该留一个空格，但如果是为了停用代码而将其注释掉则不需要留。这样"
"可以用来区分文本注释和停用的代码。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:361
msgid ""
"In the script editor, to toggle the selected code commented, press "
"<kbd>Ctrl</kbd> <kbd>K</kbd>. This feature adds a single # sign at the start "
"of the selected lines."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:366
msgid "Whitespace"
msgstr "空格"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:368
#, fuzzy
msgid ""
"Always use one space around operators and after commas. Also, avoid extra "
"spaces in dictionary references and function calls."
msgstr ""
"请始终在运算符前后和逗号后使用一个空格。避免在字典引用和函数调用中使用多余的"
"空格，也不要创建 ``列（columns）``。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:391
msgid "Don't use spaces to align expressions vertically:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:400
msgid "Quotes"
msgstr "引号"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:402
msgid ""
"Use double quotes unless single quotes make it possible to escape fewer "
"characters in a given string. See the examples below:"
msgstr ""
"尽量使用双引号，除非单引号可以让字符串中需要转义的字符变少。见如下示例："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:422
msgid "Naming conventions"
msgstr "命名约定"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:424
#, fuzzy
msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""
"这些命名约定遵循 Godot 引擎风格。打破这些将使您的代码与内置的命名约定冲突, 这"
"是丑陋的。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:429
msgid "Classes and nodes"
msgstr "类与节点"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:431
msgid "Use PascalCase for class and node names:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:437
#, fuzzy
msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr "将类加载到常量或变量时同样适用："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:444
msgid "Functions and variables"
msgstr "函数与变量"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:446
#, fuzzy
msgid "Use snake\\_case to name functions and variables:"
msgstr "函数与变量"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:453
#, fuzzy
msgid ""
"Prepend a single underscore (\\_) to virtual methods functions the user must "
"override, private functions, and private variables:"
msgstr ""
"在虚方法（用户必须重写的函数）、私有函数、和私有变量前加一个下划线（\\_）："
"``func _ready()``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:462
msgid "Signals"
msgstr "信号"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:464
#, fuzzy
msgid "Use the past tense to name signals:"
msgstr "使用过去时态："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:472
#, fuzzy
msgid "Constants and enums"
msgstr "常量模式"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:474
#, fuzzy
msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr ""
"使用 CONSTANT\\_CASE，全部大写，用下划线（\\_）分隔单词 ``const MAX_SPEED = "
"200``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:481
msgid ""
"Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as "
"they are constants:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:495
#, fuzzy
msgid "Code order"
msgstr "树顺序"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:497
msgid ""
"This first section focuses on code order. For formatting, see :ref:"
"`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:500
msgid "We suggest to organize GDScript code this way:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:523
msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:527
msgid "This code order follows four rules of thumb:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:529
msgid "Properties and signals come first, followed by methods."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:530
msgid "Public comes before private."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:531
msgid "Virtual callbacks come before the class's interface."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:532
msgid ""
"The object's construction and initialization functions, ``_init`` and "
"``_ready``, come before functions that modify the object at runtime."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:537
#, fuzzy
msgid "Class declaration"
msgstr "注意事项"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:539
msgid ""
"If the code is meant to run in the editor, place the ``tool`` keyword on the "
"first line of the script."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:542
msgid ""
"Follow with the `class_name` if necessary. You can turn a GDScript file into "
"a global type in your project using this feature. For more information, see :"
"ref:`doc_gdscript`."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:546
msgid "Then, add the `extends` keyword if the class extends a built-in type."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:548
msgid ""
"Following that, you should have the class's optional docstring as comments. "
"You can use that to explain the role of your class to your teammates, how it "
"works, and how other developers should use it, for example."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:560
#, fuzzy
msgid "Signals and properties"
msgstr "节点属性"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:562
msgid ""
"Write signal declarations, followed by properties, that is to say, member "
"variables, after the docstring."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:565
msgid ""
"Enums should come after signals, as you can use them as export hints for "
"other properties."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:568
msgid ""
"Then, write constants, exported variables, public, private, and onready "
"variables, in that order."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:591
msgid ""
"The GDScript compiler evaluates onready variables right before the "
"``_ready`` callback. You can use that to cache node dependencies, that is to "
"say, to get child nodes in the scene that your class relies on. This is what "
"the example above shows."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:598
#, fuzzy
msgid "Methods and static functions"
msgstr "静态函数"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:600
msgid "After the class's properties come the methods."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:602
msgid ""
"Start with the ``_init()`` callback method, that the engine will call upon "
"creating the object in memory. Follow with the ``_ready()`` callback, that "
"Godot calls when it adds a node to the scene tree."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:606
msgid ""
"These function should come first because they show how the object is "
"initialized."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:609
msgid ""
"Other built-in virtual callbacks, like ``_unhandled_input()`` and "
"``_physics_process``, should come next. These control the object's main loop "
"and interactions with the game engine."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:613
msgid ""
"The rest of the class's interface, public and private methods, come after "
"that, in that order."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:650
msgid "Static typing"
msgstr "静态类型"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:652
msgid ""
"Since Godot 3.1, GDScript supports :ref:`optional static "
"typing<doc_gdscript_static_typing>`."
msgstr ""
"从Godot 3.1开始，GDScript支持 :ref:`可选的静态类型 "
"<doc_gdscript_static_typing>`。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:655
msgid "Type hints"
msgstr "类型提示"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:657
msgid ""
"Place the colon right after the variable's name, without a space, and let "
"the GDScript compiler infer the variable's type when possible."
msgstr ""
"将冒号放在变量名称之后，不带空格，并在尽可能让GDScript编译器推断变量的类型。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:676
msgid ""
"When you let the compiler infer the type hint, write the colon and equal "
"signs together: ``:=``."
msgstr "当让编译器推断类型提示时，将冒号和等号一起写： ``:=``。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:682
msgid ""
"Add a space on either sides of the return type arrow when defining functions."
msgstr "定义函数时，在返回类型箭头的两侧添加一个空格。"
