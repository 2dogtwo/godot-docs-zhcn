# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-06 14:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:4
msgid "GDScript style guide"
msgstr "GDScript 风格指南"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:6
msgid ""
"This style guide lists conventions to write elegant GDScript. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""
"该样式指南列出了编写优雅GDScript的约定。目标是促进编写干净、可读的代码，并促"
"进项目、讨论和教程之间的一致性。希望这也会促进开发自动格式化工具。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:11
msgid ""
"Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""
"由于GDScript与Python非常接近，因此本指南的灵感来自Python的 `PEP 8 <https://"
"www.python.org/dev/peps/pep-0008/>`__ 编程风格指南。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:15
msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""
"风格指南并不是硬性的规则手册。有时，您可能无法应用下面的一些准则。当这种情况"
"发生时，使用你最好的判断，并询问其他开发人员的见解。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:19
msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr "一般来说，在项目和团队中保持代码的一致性比遵循本指南进行tee更为重要。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:22
msgid ""
"Godot's built-in script editor uses a lot of these conventions by default. "
"Let it help you."
msgstr "Godot的内置脚本编辑器默认使用了很多这些约定。让它帮助您。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:25
msgid "Here is a complete class example based on these guidelines:"
msgstr "下面是一个简单的示例，说明它是如何工作的："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:94
msgid "Formatting"
msgstr "格式"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:97
msgid "Encoding and special characters"
msgstr "编码和特殊字符"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:99
msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr "使用换行符（**LF**）来换行，而不是 ``CRLF`` 或 ``CR``。（编辑默认）"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:100
msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr "在每个文件的末尾使用一个换行符。*(编辑器默认设置)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:101
msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""
"使用不带 `字节顺序标记（BOM） <https://en.wikipedia.org/wiki/"
"Byte_order_mark>`_ 的 **UTF-8** 编码。（编辑默认）"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:102
msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr "使用 **Tabs** 代替制表符进行缩进（称为“软制表符”）。（编辑默认）"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:105
msgid "Indentation"
msgstr "缩进"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:107
msgid "Each indent level should be one greater than the block containing it."
msgstr "每个缩进级别必须大于包含它的代码块。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:109
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:129
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:148
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:201
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:225
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:272
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:302
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:327
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:347
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:373
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:697
msgid "**Good**:"
msgstr "**良好的**："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:116
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:137
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:171
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:212
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:231
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:282
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:309
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:334
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:354
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:383
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:705
msgid "**Bad**:"
msgstr "**糟糕的**："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:126
msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr "使用2个缩进级别来区分续行与常规代码块。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:145
msgid ""
"Exceptions to this rule are arrays, dictionaries, and enums. Use a single "
"indentation level to distinguish continuation lines:"
msgstr "此规则的例外是数组、字典和枚举。使用单个缩进级别来区分连续行："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:195
msgid "Trailing comma"
msgstr "尾随逗号"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:197
msgid ""
"Use a trailing comma on the last line in arrays, dictionaries, and enums. "
"This results in easier refactoring and better diffs in version control as "
"the last line doesn't need to be modified when adding new elements."
msgstr ""
"在数组、字典和枚举的最后一行使用逗号。这将使版本控制中的重构更容易，差异也更"
"大，因为添加新元素时不需要修改最后一行。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:223
msgid ""
"Trailing commas are unnecessary in single-line lists, so don't add them in "
"this case."
msgstr "单行列表中不需要尾随逗号，因此在这种情况下不要添加它们。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:238
msgid "Blank lines"
msgstr "空白行"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:240
msgid "Surround functions and class definitions with two blank lines:"
msgstr "用两个空行包围函数和类定义："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:255
msgid "Use one blank line inside functions to separate logical sections."
msgstr "函数内部使用一个空行来分隔逻辑部分。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:258
msgid "Line length"
msgstr "Line length（可能是字符长度）"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:260
msgid "Keep individual lines of code under 100 characters."
msgstr "把每行代码控制在100个字符以内。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:262
msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two scripts opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""
"如果可以的话，尽量把行控制在80个字符以下。这有助于在小屏幕上阅读代码，并在外"
"部文本编辑器中并排打开两个脚本。例如，在查看差异修订时。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:267
msgid "One statement per line"
msgstr "一条语句一行"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:269
msgid ""
"Never combine multiple statements on a single line. No, C programmers, not "
"even with a single line conditional statement."
msgstr ""
"不要在一行上合并多个语句 。不要像C语言那样，不能使用单行条件语句（三元运算符"
"除外）。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:290
msgid "The only exception to that rule is the ternary operator:"
msgstr "该规则的唯一例外是三元运算符："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:297
msgid "Avoid unnecessary parentheses"
msgstr "避免不必要的圆括号"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:299
msgid ""
"Avoid parentheses in expressions and conditional statements. Unless "
"necessary for order of operations, they only reduce readability."
msgstr ""
"避免表达式和条件语句中的括号。除非对操作顺序有必要，否则它们只会降低可读性。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:317
msgid "Boolean operators"
msgstr "布尔运算"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:319
msgid ""
"Prefer the plain English versions of boolean operators, as they are the most "
"accessible:"
msgstr "首选布尔运算符的纯英文版本，因为它们是最容易访问的："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:321
msgid "Use ``and`` instead of ``&&``."
msgstr "使用``and``代替 ``&&``。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:322
msgid "Use ``or`` instead of ``||``."
msgstr "使用``or``代替 ``||``。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:324
msgid ""
"You may also use parentheses around boolean operators to clear any "
"ambiguity. This can make long expressions easier to read."
msgstr ""
"也可以在布尔运算符周围使用括号来清除任何歧义。这可以使长表达式更容易阅读。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:342
msgid "Comment spacing"
msgstr "注释间距"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:344
msgid ""
"Regular comments should start with a space, but not code that you comment "
"out. This helps differentiate text comments from disabled code."
msgstr ""
"普通注释开头应该留一个空格，但如果是为了停用代码而将其注释掉则不需要留。这样"
"可以用来区分文本注释和停用的代码。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:363
#, fuzzy
msgid ""
"In the script editor, to toggle the selected code commented, press :kbd:"
"`Ctrl + K`. This feature adds a single # sign at the start of the selected "
"lines."
msgstr ""
"在脚本编辑器中，要切换已注释的选定代码，请按<kbd>Ctrl</kbd><kbd>K</kbd>。此功"
"能在选定行的开头添加一个#符号。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:368
msgid "Whitespace"
msgstr "空格"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:370
msgid ""
"Always use one space around operators and after commas. Also, avoid extra "
"spaces in dictionary references and function calls."
msgstr ""
"请始终在运算符前后和逗号后使用一个空格。也避免在字典引用和函数调用中使用多余"
"的空格。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:393
msgid "Don't use spaces to align expressions vertically:"
msgstr "不要使用空格垂直对齐表达式："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:402
msgid "Quotes"
msgstr "引号"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:404
msgid ""
"Use double quotes unless single quotes make it possible to escape fewer "
"characters in a given string. See the examples below:"
msgstr ""
"尽量使用双引号，除非单引号可以让字符串中需要转义的字符变少。见如下示例："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:424
msgid "Naming conventions"
msgstr "命名约定"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:426
msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""
"这些命名约定遵循 Godot 引擎风格。打破这些都会使你的代码与内置的命名约定冲突，"
"导致风格不一致的代码。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:431
#, fuzzy
msgid "File names"
msgstr "文件名称"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:433
msgid ""
"Use snake_case for file names. For named classes, convert the PascalCase "
"class name to snake_case::"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:446
msgid ""
"This is consistent with how C++ files are named in Godot's source code. This "
"also avoids case sensitivity issues that can crop up when exporting a "
"project from Windows to other platforms."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:451
msgid "Classes and nodes"
msgstr "类与节点"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:453
msgid "Use PascalCase for class and node names:"
msgstr "对类和节点名称使用帕斯卡命名法（PascalCase）："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:459
msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr "将类加载到常量或变量时同样适用："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:466
msgid "Functions and variables"
msgstr "函数与变量"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:468
msgid "Use snake\\_case to name functions and variables:"
msgstr "使用蛇形命名法（snake\\_case）来命名函数与变量："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:475
msgid ""
"Prepend a single underscore (\\_) to virtual methods functions the user must "
"override, private functions, and private variables:"
msgstr ""
"在虚方法（用户必须重写的函数）、私有函数、和私有变量前加一个下划线（\\_）："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:484
msgid "Signals"
msgstr "信号"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:486
msgid "Use the past tense to name signals:"
msgstr "用过去时态来命名信号："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:494
msgid "Constants and enums"
msgstr "常数和枚举"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:496
msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr "使用 CONSTANT\\_CASE，全部大写，用下划线（\\_）分隔单词 ："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:503
msgid ""
"Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as "
"they are constants:"
msgstr ""
"对枚举*名称*使用PascalCase，对其成员使用CONSTANT\\_CASE ，因为它们是常量："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:517
msgid "Code order"
msgstr "代码顺序"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:519
msgid ""
"This first section focuses on code order. For formatting, see :ref:"
"`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""
"第一节主要讨论代码顺序。有关格式，请参见 :ref:`formatting`。有关命名约定，请"
"参见 :ref:`naming_conventions`。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:522
msgid "We suggest to organize GDScript code this way:"
msgstr "我们建议按以下方式组织GDScript代码："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:545
msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""
"我们优化了顺序，使从上到下阅读代码变得容易，帮助第一次阅读代码的开发人员了解"
"代码的工作原理，并避免与变量声明顺序相关的错误。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:549
msgid "This code order follows four rules of thumb:"
msgstr "此代码顺序遵循四个经验法则："

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:551
msgid "Properties and signals come first, followed by methods."
msgstr "首先是属性和信号，然后是方法。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:552
msgid "Public comes before private."
msgstr "公共变量优先于私有变量。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:553
msgid "Virtual callbacks come before the class's interface."
msgstr "虚拟回调出现在类的接口之前。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:554
msgid ""
"The object's construction and initialization functions, ``_init`` and "
"``_ready``, come before functions that modify the object at runtime."
msgstr ""
"对象的构造和初始化函数``_init``和``_ready``应该在运行时修改对象的函数之前。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:559
msgid "Class declaration"
msgstr "类声明"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:561
msgid ""
"If the code is meant to run in the editor, place the ``tool`` keyword on the "
"first line of the script."
msgstr "如果代码要在编辑器中运行，请将 ``tool`` 关键字放在脚本的第一行。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:564
msgid ""
"Follow with the `class_name` if necessary. You can turn a GDScript file into "
"a global type in your project using this feature. For more information, see :"
"ref:`doc_gdscript`."
msgstr ""
"如有必要，在后面加上 `class_name`。您可以使用此功能将GDScript文件转换为项目中"
"的全局类型。有关更多信息，请参见 :ref:`doc gdscript`。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:568
msgid "Then, add the `extends` keyword if the class extends a built-in type."
msgstr "然后，如果类扩展了内置类型，则添加 `extends` 关键字。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:570
msgid ""
"Following that, you should have the class's optional docstring as comments. "
"You can use that to explain the role of your class to your teammates, how it "
"works, and how other developers should use it, for example."
msgstr ""
"然后，您应该添加类的可选文档字符串作为注释。您可以使用它来向您的团队解释类的"
"角色、工作原理，以及其他开发人员应该如何使用它，下面举个例子。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:582
msgid "Signals and properties"
msgstr "信号和属性"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:584
#, fuzzy
msgid ""
"Write signal declarations, followed by properties, that is to say, member "
"variables, after the docstring."
msgstr "编写信号声明，后跟属性（即成员变量），在文档字符串之后。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:587
msgid ""
"Enums should come after signals, as you can use them as export hints for "
"other properties."
msgstr "枚举应该在信号之后，因为您可以将它们用作其他属性的导出提示。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:590
msgid ""
"Then, write constants, exported variables, public, private, and onready "
"variables, in that order."
msgstr "然后，按该顺序写入常量、导出变量、公共变量、私有变量和 onready 变量。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:615
msgid ""
"The GDScript compiler evaluates onready variables right before the "
"``_ready`` callback. You can use that to cache node dependencies, that is to "
"say, to get child nodes in the scene that your class relies on. This is what "
"the example above shows."
msgstr ""
"GDScript编译器在 ``_ready`` 函数回调之前计算onready变量。您可以使用它来缓存节"
"点依赖项，也就是说，在您的类所依赖的场景中获取子节点。这就是上面的例子所展示"
"的。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:621
#, fuzzy
msgid "Member variables"
msgstr "成员访问"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:623
msgid ""
"Don't declare member variables if they are only used locally in a method, as "
"it makes the code more difficult to follow. Instead, declare them as local "
"variables in the method's body."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:628
#, fuzzy
msgid "Local variables"
msgstr "局部变量"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:630
msgid ""
"Declare local variables as close as possible to their first use. This makes "
"it easier to follow the code, without having to scroll too much to find "
"where the variable was declared."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:635
msgid "Methods and static functions"
msgstr "方法和静态函数"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:637
msgid "After the class's properties come the methods."
msgstr "在类的属性之后是方法。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:639
msgid ""
"Start with the ``_init()`` callback method, that the engine will call upon "
"creating the object in memory. Follow with the ``_ready()`` callback, that "
"Godot calls when it adds a node to the scene tree."
msgstr ""
"从 ``_init()`` 回调方法开始，引擎将在创建内存对象时调用该方法。接下来是 "
"``_ready()`` 回调，当Godot向场景树添加一个节点时调用它。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:643
msgid ""
"These function should come first because they show how the object is "
"initialized."
msgstr "这些函数应首先出现，因为它们显示如何初始化对象。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:646
msgid ""
"Other built-in virtual callbacks, like ``_unhandled_input()`` and "
"``_physics_process``, should come next. These control the object's main loop "
"and interactions with the game engine."
msgstr ""
"其他内置的虚拟回调，如 ``_unhandling_input()`` 和 ``_physics_process``，应该"
"放在后面。它们控制对象的主循环和与游戏引擎的交互。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:650
msgid ""
"The rest of the class's interface, public and private methods, come after "
"that, in that order."
msgstr "类的其余接口，公共和私有方法，都是按照这个顺序出现的。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:687
msgid "Static typing"
msgstr "静态类型"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:689
msgid ""
"Since Godot 3.1, GDScript supports :ref:`optional static "
"typing<doc_gdscript_static_typing>`."
msgstr ""
"从Godot 3.1开始，GDScript支持 :ref:`可选的静态类型 "
"<doc_gdscript_static_typing>`。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:692
msgid "Type hints"
msgstr "类型提示"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:694
msgid ""
"Place the colon right after the variable's name, without a space, and let "
"the GDScript compiler infer the variable's type when possible."
msgstr ""
"将冒号放在变量名称之后，不带空格，并在尽可能让GDScript编译器推断变量的类型。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:713
msgid ""
"When you let the compiler infer the type hint, write the colon and equal "
"signs together: ``:=``."
msgstr "当让编译器推断类型提示时，将冒号和等号一起写： ``:=``。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:719
msgid ""
"Add a space on either sides of the return type arrow when defining functions."
msgstr "定义函数时，在返回类型箭头的两侧添加一个空格。"
