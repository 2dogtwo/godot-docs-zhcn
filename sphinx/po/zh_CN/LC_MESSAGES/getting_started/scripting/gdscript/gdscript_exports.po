# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-04 09:58+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:4
msgid "GDScript exports"
msgstr "GDScript 导出"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:7
msgid "Introduction to exports"
msgstr "导出简介"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:9
msgid ""
"In Godot, class members can be exported. This means their value gets saved "
"along with the resource (such as the :ref:`scene <class_PackedScene>`) "
"they're attached to. They will also be available for editing in the property "
"editor. Exporting is done by using the ``export`` keyword::"
msgstr ""
"在Godot中，可以导出类成员。这意味着它们的值会与它们所附加的资源（例如 :ref:"
"`scene <class_PackedScene>`）一起保存。它们也可以在属性编辑器中进行编辑。导出"
"使用关键字 ``export`` 来完成："

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:18
msgid ""
"An exported variable must be initialized to a constant expression or have an "
"export hint in the form of an argument to the ``export`` keyword (see the "
"*Examples* section below)."
msgstr ""
"``export`` 关键字后，导出的变量必须初始化为常量表达式，或者具有使用的参数形式"
"的导出提示（请参见下面的 *示例* 部分）。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:22
msgid ""
"One of the fundamental benefits of exporting member variables is to have "
"them visible and editable in the editor. This way, artists and game "
"designers can modify values that later influence how the program runs. For "
"this, a special export syntax is provided."
msgstr ""
"导出成员变量的基本好处之一是使它们在编辑器中可见并可编辑。这样，美术师和游戏"
"设计师可以修改值，这些值以后会影响程序的运行方式。为此，提供了一种特殊的导出"
"语法。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:29
msgid ""
"Exporting properties can also be done in other languages such as C#. The "
"syntax varies depending on the language."
msgstr "导出属性也可以使用其他语言（例如C#）来完成。语法因语言而异。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:33
msgid "Examples"
msgstr "示例"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:129
msgid ""
"It must be noted that even if the script is not being run while in the "
"editor, the exported properties are still editable. This can be used in "
"conjunction with a :ref:`script in \"tool\" mode <doc_gdscript_tool_mode>`."
msgstr ""
"必须注意，即使在编辑器中未运行脚本，导出的属性仍可编辑。可以与 :ref:`使用工具"
"模式的脚本 <doc_gdscript_tool_mode>` 结合使用。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:134
msgid "Exporting bit flags"
msgstr "导出位标志"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:136
msgid ""
"Integers used as bit flags can store multiple ``true``/``false`` (boolean) "
"values in one property. By using the export hint ``int, FLAGS``, they can be "
"set from the editor::"
msgstr ""
"用作位标志的整数可以在一个属性中存储多个 ``true``/``false``（布尔值）值。通过"
"使用导出提示 ``int, FLAGS``，可以从编辑器中设置它们："

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:143
msgid ""
"Restricting the flags to a certain number of named flags is also possible. "
"The syntax is similar to the enumeration syntax::"
msgstr "也可以将标志限制为一定数量的命名标志。语法类似于枚举语法："

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:149
msgid ""
"In this example, ``Fire`` has value 1, ``Water`` has value 2, ``Earth`` has "
"value 4 and ``Wind`` corresponds to value 8. Usually, constants should be "
"defined accordingly (e.g. ``const ELEMENT_WIND = 8`` and so on)."
msgstr ""
"在这个示例中， ``Fire`` 的值是1， ``Water`` 的值是2， ``Earth`` 的值是4， "
"``Wind`` 的值是8。通常，应相应地定义常量（例如 ``const ELEMENT_WIND = 8`` "
"等）。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:154
msgid ""
"Using bit flags requires some understanding of bitwise operations. If in "
"doubt, boolean variables should be exported instead."
msgstr "使用位标志需要了解位操作。如果有疑问，应该导出布尔变量。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:158
msgid "Exporting arrays"
msgstr "导出数组"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:160
msgid ""
"Exporting arrays works, but with an important caveat: while regular arrays "
"are created local to every class instance, exported arrays are *shared* "
"between all instances. This means that editing them in one instance will "
"cause them to change in all other instances. Exported arrays can have "
"initializers, but they must be constant expressions."
msgstr ""
"导出数组是可行的，但有一个重要的注意事项：尽管每个类实例都是创建局部的常规数"
"组，但是导出的数组在所有实例之间都是 *共享的*。这意味着在一个实例中对其进行编"
"辑将导致它们在所有其他实例中进行更改。导出的数组可以具有初始化器，但是它们必"
"须是常量表达式。"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:166
msgid ""
"If the exported array specifies a type which inherits from Resource, the "
"array values can be set in the inspector by dragging and dropping multiple "
"files from the FileSystem dock at once."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:206
#, fuzzy
msgid "Setting exported variables from a tool script"
msgstr "从本地文件系统启动导出的游戏"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:208
msgid ""
"When changing an exported variable's value from a script in :ref:"
"`doc_gdscript_tool_mode`, the value in the inspector won't be updated "
"automatically. To update it, call :ref:`property_list_changed_notify() "
"<class_Object_method_property_list_changed_notify>` after setting the "
"exported variable's value."
msgstr ""
