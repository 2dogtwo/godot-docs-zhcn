# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 14:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:4
msgid "GDScript exports"
msgstr "GDScript 导出"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:7
msgid "Introduction to exports"
msgstr "导出简介"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:9
msgid ""
"In Godot, class members can be exported. This means their value gets saved "
"along with the resource (such as the :ref:`scene <class_PackedScene>`) "
"they're attached to. They will also be available for editing in the property "
"editor. Exporting is done by using the ``export`` keyword::"
msgstr ""
"在Godot中, 可以导出类成员. 这意味着它们的值会与它们所附加的资源(例如 :ref:"
"`scene <class_PackedScene>`)一起保存. 它们也可以在属性编辑器中进行编辑. 导出"
"使用关键字 ``export`` 来完成:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:18
msgid ""
"An exported variable must be initialized to a constant expression or have an "
"export hint in the form of an argument to the ``export`` keyword (see the "
"*Examples* section below)."
msgstr ""
"``export`` 关键字后, 导出的变量必须初始化为常量表达式, 或者具有使用的参数形式"
"的导出提示(请参见下面的 *示例* 部分)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:22
msgid ""
"One of the fundamental benefits of exporting member variables is to have "
"them visible and editable in the editor. This way, artists and game "
"designers can modify values that later influence how the program runs. For "
"this, a special export syntax is provided."
msgstr ""
"导出成员变量的基本好处之一是使它们在编辑器中可见并可编辑. 这样, 美术师和游戏"
"设计师可以修改值, 这些值以后会影响程序的运行方式. 为此, 提供了一种特殊的导出"
"语法."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:29
msgid ""
"Exporting properties can also be done in other languages such as C#. The "
"syntax varies depending on the language."
msgstr "导出属性也可以使用其他语言(例如C#)来完成. 语法因语言而异."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:33
msgid "Examples"
msgstr "示例"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:136
msgid ""
"It must be noted that even if the script is not being run while in the "
"editor, the exported properties are still editable. This can be used in "
"conjunction with a :ref:`script in \"tool\" mode <doc_gdscript_tool_mode>`."
msgstr ""
"必须注意, 即使在编辑器中未运行脚本, 导出的属性仍可编辑. 可以与 :ref:`使用工具"
"模式的脚本 <doc_gdscript_tool_mode>` 结合使用."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:141
msgid "Exporting bit flags"
msgstr "导出位标志"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:143
msgid ""
"Integers used as bit flags can store multiple ``true``/``false`` (boolean) "
"values in one property. By using the export hint ``int, FLAGS, ...``, they "
"can be set from the editor::"
msgstr ""
"用作位标志的整数可以在一个属性中存储多个 ``true``/ ``false`` (布尔值)值. 通过"
"使用导出提示 ``int, FLAGS`` , 可以从属性检查器中设置它们:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:150
msgid ""
"You must provide a string description for each flag. In this example, "
"``Fire`` has value 1, ``Water`` has value 2, ``Earth`` has value 4 and "
"``Wind`` corresponds to value 8. Usually, constants should be defined "
"accordingly (e.g. ``const ELEMENT_WIND = 8`` and so on)."
msgstr ""
"你必须为每个标志提供一个字符串描述. 在这个例子中, ``火(Fire)`` 的值是1, ``水"
"(Water)`` 的值是2, ``土(Earth)`` 的值是4, ``风(Wind)`` 对应的值是8. 通常, 应"
"相应地定义常量(例如 ``const ELEMENT_WIND = 8`` 等等)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:155
msgid ""
"Export hints are also provided for the physics and render layers defined in "
"the project settings::"
msgstr "也可以为项目设置中定义的物理层和渲染层提供导出提示:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:162
msgid ""
"Using bit flags requires some understanding of bitwise operations. If in "
"doubt, use boolean variables instead."
msgstr "使用位标志需要对位操作有一定的了解. 如果有疑问, 请使用布尔变量代替."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:166
msgid "Exporting arrays"
msgstr "导出数组"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:168
msgid ""
"Exported arrays can have initializers, but they must be constant expressions."
msgstr "导出的数组可以具有初始化器, 但是它们必须是常量表达式."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:170
msgid ""
"If the exported array specifies a type which inherits from Resource, the "
"array values can be set in the inspector by dragging and dropping multiple "
"files from the FileSystem dock at once."
msgstr ""
"如果导出的数组指定了从Resource继承的类型, 则可以通过一次从FileSystem扩展坞中"
"拖放多个文件来在检查器中设置数组值."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:208
msgid "Setting exported variables from a tool script"
msgstr "从工具脚本设置导出变量"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:210
msgid ""
"When changing an exported variable's value from a script in :ref:"
"`doc_gdscript_tool_mode`, the value in the inspector won't be updated "
"automatically. To update it, call :ref:`property_list_changed_notify() "
"<class_Object_method_property_list_changed_notify>` after setting the "
"exported variable's value."
msgstr ""
"在 :ref:`doc_gdscript_tool_mode` 下的脚本中, 更改一个导出变量的值时, 属性检查"
"器中对应的值不会自动更新. 要更新它, 请在设置导出变量的值之后, 调用 :ref:"
"`property_list_changed_notify() "
"<class_Object_method_property_list_changed_notify>` ."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:217
msgid "Advanced exports"
msgstr "导出进阶"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:219
msgid ""
"Not every type of export can be provided on the level of the language itself "
"to avoid unnecessary design complexity. The following describes some more or "
"less common exporting features which can be implemented with a low-level API."
msgstr ""
"为了避免不必要的复杂设计, 不是所有导出类型都在语言层面上提供. 下面将说明一些"
"能用底层API实现的, 较为常见的导出方法."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:223
msgid ""
"Before reading further, you should get familiar with the way properties are "
"handled and how they can be customized with :ref:`_set() "
"<class_Object_method__get_property_list>`, :ref:`_get() "
"<class_Object_method__get_property_list>`, and :ref:`_get_property_list() "
"<class_Object_method__get_property_list>` methods as described in :ref:"
"`doc_accessing_data_or_logic_from_object`."
msgstr ""
"在进一步阅读前, 你需要熟悉属性(properties)的运作方式和它们是如何通过 :ref:"
"`_set() <class_Object_method__get_property_list>` , :ref:`_get() "
"<class_Object_method__get_property_list>` 以及 :ref:`_get_property_list() "
"<class_Object_method__get_property_list>` 方式进行定制的. 详情可参阅 :ref:"
"`doc_accessing_data_or_logic_from_object` ."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:230
msgid ""
"For binding properties using the above methods in C++, see :ref:"
"`doc_binding_properties_using_set_get_property_list`."
msgstr ""
"要用上述方法绑定属性, 参阅 :ref:"
"`doc_binding_properties_using_set_get_property_list`."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:233
msgid ""
"The script must operate in the ``tool`` mode so the above methods can work "
"from within the editor."
msgstr "脚本必须在 ``tool`` 模式运行, 上述方法才能在编辑器内运行."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:237
msgid "Adding script categories"
msgstr "对脚本中的属性添加类别"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:239
msgid ""
"For better visual distinguishing of properties, a special script category "
"can be embedded into the inspector to act as a separator. ``Script "
"Variables`` is one example of a built-in category."
msgstr ""
"为了在视觉上更好区分各个属性, 可以将特殊的脚本分类作为分割线嵌入属性检查器."
"``Script Variables`` 就是一种内建分类."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:256
msgid "``name`` is the name of a category to be added to the inspector;"
msgstr "``name`` 是要加入属性面板中的分类的名字；"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:258
msgid ""
"``PROPERTY_USAGE_CATEGORY`` indicates that the property should be treated as "
"a script category specifically, so the type ``TYPE_NIL`` can be ignored as "
"it won't be actually used for the scripting logic, yet it must be defined "
"anyway."
msgstr ""
"``PROPERTY_USAGE_CATEGORY`` 表明了该属性应被视为一个脚本分类, 因此可以忽略 "
"``TYPE_NIL`` 这个类型, 因为它其实并没有被脚本逻辑所处理. 但无论如何, 你还是要"
"在这儿定义它."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:263
msgid "Grouping properties"
msgstr "对属性进行分组"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:265
msgid "A list of properties with similar names can be grouped."
msgstr "名称类似的属性们可以添加为一组."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:279
msgid ""
"``name`` is the name of a group which is going to be displayed as "
"collapsible list of properties;"
msgstr "``name`` 是包含了一组属性的可折叠群组的名称；"

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:282
msgid ""
"every successive property added after the group property will be collapsed "
"and shortened as determined by the prefix defined via the ``hint_string`` "
"key. For instance, ``rotate_speed`` is going to be shortened to ``speed`` in "
"this case."
msgstr ""
"接下来所有新增的属性都会被放在该群组中, 通过 ``hint_string`` 字典键定义为可折"
"叠, 并以其为前缀缩写名称. 例如, 本例中的 ``rotate_speed`` 将会被缩写为 "
"``speed``."

#: ../../docs/getting_started/scripting/gdscript/gdscript_exports.rst:286
msgid ""
"``PROPERTY_USAGE_GROUP`` indicates that the property should be treated as a "
"script group specifically, so the type ``TYPE_NIL`` can be ignored as it "
"won't be actually used for the scripting logic, yet it must be defined "
"anyway."
msgstr ""
"``PROPERTY_USAGE_GROUP`` 表明了该属性应被视为一个脚本分类, 因此可以忽略 "
"``TYPE_NIL`` 这个类型, 因为它其实并没有被脚本逻辑所处理. 但无论如何, 你还是要"
"在这儿定义它."
