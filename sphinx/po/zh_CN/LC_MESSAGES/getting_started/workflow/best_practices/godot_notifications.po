# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-02 13:32+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:4
msgid "Godot notifications"
msgstr "Godot通知"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:6
msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_method__notification>` method. Its purpose is to allow the "
"Object to respond to a variety of engine-level callbacks that may relate to "
"it. For example, if the engine tells a :ref:`CanvasItem <class_CanvasItem>` "
"to \"draw\", it will call ``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Godot中的每个对象都实现 :ref:`_notification "
"<class_Object_method__notification>` 方法.其目的是允许对象响应可能与之相关的"
"各种引擎级回调.例如,如果引擎告诉一个 :ref:`CanvasItem <class_CanvasItem>` 去 "
"``绘制``,它将调用 ``_notification(NOTIFICATION_DRAW)``."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:13
msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"这些通知中的某些通知,例如 ``draw``,可用于在脚本中覆盖.如此之多,以至于Godot公"
"开了许多具有专用功能的通知:"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:16
msgid "``_ready()`` : NOTIFICATION_READY"
msgstr "``_ready()`` : NOTIFICATION_READY"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:18
msgid "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"
msgstr "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:20
msgid "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"
msgstr "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:22
msgid "``_process(delta)`` : NOTIFICATION_PROCESS"
msgstr "``_process(delta)`` : NOTIFICATION_PROCESS"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:24
msgid "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"
msgstr "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:26
msgid "``_input()`` : NOTIFICATION_INPUT"
msgstr "``_input()`` : NOTIFICATION_INPUT"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:28
msgid "``_unhandled_input()`` : NOTIFICATION_UNHANDLED_INPUT"
msgstr "``_unhandled_input()`` : NOTIFICATION_UNHANDLED_INPUT"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:30
msgid "``_draw()`` : NOTIFICATION_DRAW"
msgstr "``_draw()`` : NOTIFICATION_DRAW"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:32
msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone:"
msgstr "用户可能 *不会* 意识到,通知仅针对 ``Node`` 以外的类型存在:"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:35
msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`:在对象初始化期间触发的回"
"调.脚本无法访问."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:38
msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a 'destructor'."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: 在引擎删除一个Object(即 "
"'destructor' 析构函数)之前触发的回调."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:42
msgid ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`: a callback that "
"triggers when the mouse enters the window in the operating system that "
"displays the game content."
msgstr ""
":ref:`MainLoop::NOTIFICATION_WM_MOUSE_ENTER "
"<class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER>`:当鼠标进入,显示游戏内"
"容的操作系统窗口时,触发的回调."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:46
msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"而且,在节点中 *确实* 存在许多回调,都没有任何专用方法,但是它们仍然非常有用."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:49
msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`:任何时候将一个子节点添加到另一个"
"节点时,都会触发的回调."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:52
msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`:任何时候从另一个节点删除一个子"
"节点时,都会触发的回调."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:56
msgid ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: a callback that triggers "
"after a Popup node completes any ``popup*`` method. Note the difference from "
"its ``about_to_show`` signal which triggers *before* its appearance."
msgstr ""
":ref:`Popup::NOTIFICATION_POST_POPUP "
"<class_Popup_constant_NOTIFICATION_POST_POPUP>`: 一个回调,在Popup节点完成任"
"何 ``popup*`` 方法后触发.注意与它的 ``about_to_show`` 信号的区别,后者在*出现"
"之前*触发."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:61
msgid ""
"One can access all these custom notifications from the universal "
"``_notification`` method."
msgstr "您可以从通用的 ``_notification`` 方法,访问所有这些自定义通知."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:65
msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr "文档中标记为 ``虚拟(virtual)`` 的方法,也打算被脚本重写."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:68
msgid ""
"A classic example is the :ref:`_init <class_Object_method__init>` method in "
"Object. While it has no ``NOTIFICATION_*`` equivalent, the engine still "
"calls the method. Most languages (except C#) rely on it as a constructor."
msgstr ""
"一个经典的例子是 ``Object`` 中的 :ref:`_init <class_Object_method__init>` 方"
"法.虽然它没有等效的 ``NOTIFICATION_*``,但是引擎仍然调用该方法.大多数语言(C#除"
"外)都将其用作构造函数."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:73
msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr "那么,在哪种情况下应该使用这些通知或虚函数呢？"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:77
msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process vs. _physics_process vs. \\*_input"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:79
msgid ""
"Use ``_process`` when one needs a framerate-dependent deltatime between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-yield-timeout loop is another option."
msgstr ""
"当需要帧之间依赖于帧速率的 ``deltatime`` 时,请使用 ``_process``.如果更新对象"
"数据的代码,需要尽可能频繁地更新,那么这是正确放置这些代码的地方.经常在这里执行"
"循环逻辑检查和数据缓存,但它取决于需要更新估算的频率.如果他们不需要执行每一帧,"
"那么执行一个 ``Timer-yield-timeout`` 循环是另一种选择."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:97
msgid ""
"Use ``_physics_process`` when one needs a framerate-independent deltatime "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"当一个帧之间需要独立于帧速率的 ``deltatime`` 时,请使用 ``_physics_process``."
"如果不管时间是快还是慢,代码需要随着时间的推移进行一致的更新,那么这是正确的放"
"置这些代码的地方.重复的运动学和对象变换操作,应在此处执行."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:102
msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process`` and "
"``_physics_process`` will trigger at every opportunity (they do not \"rest\" "
"by default). In contrast, ``*_input`` callbacks will trigger only on frames "
"in which the engine has actually detected the input."
msgstr ""
"为了获得最佳性能,应尽可能避免在这些回调期间,进行输入检查.``_process`` 和 "
"``_physics_process`` 将在每个机会触发(默认情况下它们不会 ``休息``).相反,"
"``*_input`` 回调仅在,引擎实际检测到输入的帧上触发."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:108
msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related deltatime "
"methods as needed."
msgstr ""
"可以同样检查输入回调中的输入动作.如果要使用增量时间,则可以根据需要从相关的增"
"量时间方法中获取它."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:156
msgid "_init vs. initialization vs. export"
msgstr "_init vs. initialization vs. export"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:158
msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute here. Other property or SceneTree-independent initializations "
"should also run here. This triggers before ``_ready`` or ``_enter_tree``, "
"but after a script creates and initializes its properties."
msgstr ""
"如果脚本初始化它自己的节点子树,没有场景,代码应该在这里执行.其他属性或独立于 "
"``SceneTree`` 的 ``initialization`` 也应在此处运行.这会在 ``_ready`` 或 "
"``_enter_tree`` 之前触发,但是会在脚本创建并初始化其属性之后触发."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:163
msgid ""
"Scripts have three types of property assignments that can occur during "
"instantiation:"
msgstr "脚本具有实例化期间,可能发生的三种类型的属性分配:"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:210
msgid ""
"When instantiating a scene, property values will set up according to the "
"following sequence:"
msgstr "当实例化一个场景时,将根据以下顺序设置属性值:"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:213
msgid ""
"**Initial value assignment:** instantiation will assign either the "
"initialization value or the init assignment value. Init assignments take "
"priority over initialization values."
msgstr ""
"**Initial value assignment:** ``instantiation`` 将分配 ``instantiation`` 值"
"或 ``init`` 分配值. ``init`` 分配的优先级高于 ``initialization`` 值."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:217
msgid ""
"**Exported value assignment:** If instancing from a scene rather than a "
"script, Godot will assign the exported value to replace the initial value "
"defined in the script."
msgstr ""
"**导出值赋值**:如果从一个场景而不是脚本中实例化,Godot将分配导出的值,来替换脚"
"本中定义的初始值."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:221
msgid ""
"As a result, instantiating a script versus a scene will affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr "因此,实例化脚本和场景,将影响初始化,*和* 引擎调用 ``setter`` 的次数."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:225
msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:227
msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init`` calls) and build the tree "
"going downwards from the root. This causes ``_enter_tree`` calls to cascade "
"down the tree. Once the tree is complete, leaf nodes call ``_ready``. A node "
"will call this method once all child nodes have finished calling theirs. "
"This then causes a reverse cascade going up back to the tree's root."
msgstr ""
"当实例化连接到第一个执行场景的场景时,Godot将实例化树下的节点(进行 ``_init`` "
"调用),并构建从根向下的树.这导致 ``_enter_tree`` 调用,向下级联树.当树构建完成,"
"叶子节点调用 ``_ready``.一旦所有子节点都完成了对它们的子节点的调用,一个节点就"
"会调用这个方法.然后,这将导致反向级联回到树的根部."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:234
msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree`` callbacks trigger. "
"Instead, only the ``_init`` and later ``_ready`` calls occur."
msgstr ""
"在实例化一个脚本或一个独立场景时,节点不会在创建时添加到场景树,所以没有 "
"``_enter_tree`` 的回调触发器.相反,只发生 ``_init`` 和之后的 ``_ready`` 调用."

#: ../../docs/getting_started/workflow/best_practices/godot_notifications.rst:238
msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"如果需要触发作为节点设置父级到另一个节点而发生的行为,无论它是否作为在主要/活"
"动场景中的部分发生,都可以使用 :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>` 通知.例如,这有一个将节点的方法,"
"连接到父节点上的自定义信号,而不会失败的代码段.在运行时可能创建的,以数据为中心"
"的节点上有用."
