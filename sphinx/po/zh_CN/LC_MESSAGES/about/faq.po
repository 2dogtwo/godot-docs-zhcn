# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-28 16:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/about/faq.rst:1
msgid "FAQ"
msgstr "常见问题"

#: ../../docs/about/faq.rst:7
msgid "Frequently asked questions"
msgstr "常见问题"

#: ../../docs/about/faq.rst:10
msgid ""
"What can I do with Godot? How much does it cost? What are the license terms?"
msgstr "可以用Godot做什么？需要花多少钱？有哪些许可条款？"

#: ../../docs/about/faq.rst:12
msgid ""
"Godot is `Free and Open-Source Software <https://en.wikipedia.org/wiki/"
"Free_and_open-source_software>`_ available under the `OSI-approved <https://"
"opensource.org/licenses/MIT>`_ MIT license. This means it is free as in "
"\"free speech\" as well as in \"free beer.\""
msgstr ""
"Godot是 `Free和开源的软件 <https://en.wikipedia.org/wiki/Free_and_open-"
"source_software>`_ 可在 `OSI认可的 <https://opensource.org/licenses/MIT>`_ "
"MIT许可证下使用。这里的 `free` 就像“言论自由(free speech)”和“免费啤酒(free "
"beer)”里的 `free` 一样，它是自由且免费的。"

#: ../../docs/about/faq.rst:14
msgid "In short:"
msgstr "简而言之："

#: ../../docs/about/faq.rst:16
msgid ""
"You are free to download and use Godot for any purpose, personal, non-"
"profit, commercial, or otherwise."
msgstr "您可以出于任何目的，个人、非营利、商业或其他目的，下载和使用Godot。"

#: ../../docs/about/faq.rst:17
msgid ""
"You are free to modify, distribute, redistribute, and remix Godot to your "
"heart's content, for any reason, both non-commercially and commercially."
msgstr ""
"您可以出于任何原因，非商业和商业原因，自由地修改、分发、再分发、重新组织Godot"
"的代码。"

#: ../../docs/about/faq.rst:19
msgid ""
"All the contents of this accompanying documentation are published under the "
"permissive Creative Commons Attribution 3.0 (`CC-BY 3.0 <https://"
"creativecommons.org/licenses/by/3.0/>`_) license, with attribution to \"Juan "
"Linietsky, Ariel Manzur and the Godot Engine community.\""
msgstr ""
"该附带文档的所有内容均在宽松的知识共享署名3.0 ( `CC-BY 3.0 <https://"
"creativecommons.org/licenses/by/3.0/>`_ ) 许可下发布，署名为“Juan Linietsky、"
"Ariel Manzur和Godot引擎社区”。"

#: ../../docs/about/faq.rst:23
msgid ""
"Logos and icons are generally under the same Creative Commons license. Note "
"that some third-party libraries included with Godot's source code may have "
"different licenses."
msgstr ""
"Logo徽标和图标均在相同的CC共享许可下。注意，Godot的源代码中包含的某些第三方库"
"可能具有不同的许可。"

#: ../../docs/about/faq.rst:27
msgid ""
"For full details, look at the `COPYRIGHT.txt <https://github.com/godotengine/"
"godot/blob/master/COPYRIGHT.txt>`_ as well as the `LICENSE.txt <https://"
"github.com/godotengine/godot/blob/master/LICENSE.txt>`_ and `LOGO_LICENSE."
"txt <https://github.com/godotengine/godot/blob/master/LOGO_LICENSE.md>`_ "
"files in the Godot repository."
msgstr ""
"有关详细信息，请查看Godot存储库中的 `COPYRIGHT.txt <https://github.com/"
"godotengine/godot/blob/master/COPYRIGHT.txt>`_ 以及 `LICENSE.txt <https://"
"github.com/godotengine/godot/blob/master/LICENSE.txt>`_ 和 `LOGO_LICENSE.txt "
"<https://github.com/godotengine/godot/blob/master/LOGO_LICENSE.md>`_ 文件。"

#: ../../docs/about/faq.rst:31
msgid ""
"Also, see `the license page on the Godot website <https://godotengine.org/"
"license>`_."
msgstr ""
"还可以查阅 `Godot网站上的许可页面 <https://godotengine.org/license>`_。"

#: ../../docs/about/faq.rst:34
msgid "Which platforms are supported by Godot?"
msgstr "Godot支持哪些平台？"

#: ../../docs/about/faq.rst:36
msgid "**For the editor:**"
msgstr "**编辑器：**"

#: ../../docs/about/faq.rst:38
msgid "Windows"
msgstr "Windows"

#: ../../docs/about/faq.rst:39 ../../docs/about/faq.rst:45
msgid "macOS"
msgstr "macOS系统"

#: ../../docs/about/faq.rst:40 ../../docs/about/faq.rst:46
msgid "X11 (Linux, \\*BSD)"
msgstr "X11(Linux，\\*BSD)"

#: ../../docs/about/faq.rst:42
msgid "**For exporting your games:**"
msgstr "**导出游戏：**"

#: ../../docs/about/faq.rst:44
msgid "Windows (and UWP)"
msgstr "Windows(包括 UWP)"

#: ../../docs/about/faq.rst:47
msgid "Android"
msgstr "Android"

#: ../../docs/about/faq.rst:48
msgid "iOS"
msgstr "iOS"

#: ../../docs/about/faq.rst:49
msgid "Web"
msgstr "Web"

#: ../../docs/about/faq.rst:51
msgid ""
"Both 32- and 64-bit binaries are supported where it makes sense, with 64 "
"being the default."
msgstr "同时支持32位和64位的二进制文件，默认为64位。"

#: ../../docs/about/faq.rst:54
msgid ""
"Some users also report building and using Godot successfully on ARM-based "
"systems with Linux, like the Raspberry Pi."
msgstr ""
"一些用户还报告在使用Linux的基于ARM的系统上成功构建和使用Godot，如树莓派 。"

#: ../../docs/about/faq.rst:57
msgid ""
"Additionally, there is some unofficial third-party work being done on "
"building for some consoles. However, none of this is included in the default "
"build scripts or export templates at this time."
msgstr ""
"此外，还有一些非官方的第三方工作正在为一些游戏机构建。 但是，目前默认构建脚本"
"或导出模板中都不包含这些内容。"

#: ../../docs/about/faq.rst:61
msgid ""
"For more on this, see the sections on :ref:`exporting <toc-learn-workflow-"
"export>` and :ref:`compiling Godot yourself <toc-devel-compiling>`."
msgstr ""
"有关这方面的更多信息，请参阅 :ref:`导出 <toc-learn-workflow-export>` 和 :ref:"
"`编译Godot <toc-devel-compiling>` 章节。"

#: ../../docs/about/faq.rst:65
msgid "Which programming languages are supported in Godot?"
msgstr "Godot支持哪些编程语言？"

#: ../../docs/about/faq.rst:67
msgid ""
"The officially supported languages for Godot are GDScript, Visual Scripting, "
"C#, and C++. See the subcategories for each language in the :ref:`scripting "
"<toc-learn-scripting>` section."
msgstr ""
"Godot官方支持的语言是GDScript、Visual Scripting、C＃和C ++。 请参阅 :ref:`编"
"写脚本 <toc-learn-scripting>` 章节中的每种语言的子类别。"

#: ../../docs/about/faq.rst:71
msgid ""
"If you are just starting out with either Godot or game development in "
"general, GDScript is the recommended language to learn and use since it is "
"native to Godot. While scripting languages tend to be less performant than "
"lower-level languages in the long run, for prototyping, developing Minimum "
"Viable Products (MVPs), and focusing on Time-To-Market (TTM), GDScript will "
"provide a fast, friendly, and capable way of developing your games."
msgstr ""
"如果您刚刚开始使用Godot或游戏开发，GDScript是学习和使用的推荐语言，因为它是"
"Godot的本地语言。 虽然从长远来看，脚本语言的性能往往低于低级语言，但对于原型"
"设计、开发最小可行产品(MVP)以及专注于上市时间(TTM)，GDScript将提供快速、友好"
"和胜任的方式用于开发游戏。"

#: ../../docs/about/faq.rst:78
msgid ""
"Note that C# support is still relatively new, and as such, you may encounter "
"some issues along the way. Our friendly and hard-working development "
"community is always ready to tackle new problems as they arise, but since "
"this is an open-source project, we recommend that you first do some due "
"diligence yourself. Searching through discussions on `open issues <https://"
"github.com/godotengine/godot/issues>`_ is a great way to start your "
"troubleshooting."
msgstr ""
"请注意，C＃的支持仍然相对较初级，因此，使用该语言可能会遇到一些问题。 我们友"
"好且勤奋的开发社区随时准备解决出现的新问题，但由于这是一个开源项目，我们建议"
"您先自己做一些排查。 通过在 `公开问题 <https://github.com/godotengine/godot/"
"issues>`_ 的讨论里进行搜索是开始故障排除的好方法。"

#: ../../docs/about/faq.rst:85
msgid ""
"As for new languages, support is possible via third parties using the "
"GDNative / NativeScript / PluginScript facilities. (See the question about "
"plugins below.) Work is currently underway, for example, on unofficial "
"bindings for Godot to `Python <https://github.com/touilleMan/godot-python>`_ "
"and `Nim <https://github.com/pragmagic/godot-nim>`_."
msgstr ""
"对于新语言，可以通过使用GDNative / NativeScript / PluginScript第三方工具获得"
"支持。(请参阅下面关于插件的问题。)目前正在进行工作，例如，关于Godot与 "
"`Python <https://github.com/touilleMan/godot-python>`_ 和 `Nim <https://"
"github.com/pragmagic/godot-nim>`_ 的非官方绑定。"

#: ../../docs/about/faq.rst:93
msgid "What is GDScript and why should I use it?"
msgstr "GDScript是什么？为什么要用它？"

#: ../../docs/about/faq.rst:95
msgid ""
"GDScript is Godot's integrated scripting language. It was built from the "
"ground up to maximize Godot's potential in the least amount of code, "
"affording both novice and expert developers alike to capitalize on Godot's "
"strengths as fast as possible. If you've ever written anything in a language "
"like Python before then you'll feel right at home. For examples, history, "
"and a complete overview of the power GDScript offers you, check out the :ref:"
"`GDScript scripting guide <doc_gdscript>`."
msgstr ""
"GDScript是Godot的集成脚本语言。它是从头开始构建的，为了以最少的代码最大化"
"Godot的潜力，使新手和专家开发人员都能尽可能快地利用Godot的优势。如果你曾经用"
"过像Python这样的语言写过任何东西，那么你会感到宾至如归。如果您想要了解关于"
"GDScript的示例、历史、完整介绍和功能，查看 :ref:`GDScript脚本指南 "
"<doc_gdscript>`。"

#: ../../docs/about/faq.rst:102
msgid ""
"There are several reasons to use GDScript--especially when you are "
"prototyping, in alpha/beta stages of your project, or are not creating the "
"next AAA title--but the most salient reason is the overall **reduction of "
"complexity.**"
msgstr ""
"使用GDScript有几个原因——特别是在进行原型设计时，在项目的alpha/beta阶段，或者"
"没有创建下一个3A大作——但最突出的原因是整体 **复杂度降低。**"

#: ../../docs/about/faq.rst:106
msgid ""
"The original intent of creating a tightly integrated, custom scripting "
"language for Godot was two-fold: first, it reduces the amount of time "
"necessary to get up and running with Godot, giving developers a rapid way of "
"exposing themselves to the engine with a focus on productivity; second, it "
"reduces the overall burden of maintenance, attenuates the dimensionality of "
"issues, and allows the developers of the engine to focus on squashing bugs "
"and improving features related to the engine core--rather than spending a "
"lot of time trying to get a small set of incremental features working across "
"a large set of languages."
msgstr ""
"为Godot创建一个紧密集成的自定义脚本语言的初衷是双重的：首先，关于生产力，它减"
"少了启动和运行Godot所需的时间，使开发人员能够快速接触引擎；其次，它减少了维护"
"的总体负担，减少了问题的维度，并允许引擎的开发人员专注于排除错误并改进与引擎"
"核心相关的功能——而不是花费大量时间来尝试在一大堆语言中获得一小组增量功能。"

#: ../../docs/about/faq.rst:114
msgid ""
"Since Godot is an open-source project, it was imperative from the start to "
"prioritize a more integrated and seamless experience over attracting "
"additional users by supporting more familiar programming languages--"
"especially when supporting those more familiar languages would result in a "
"worse experience. We understand if you would rather use another language in "
"Godot (see the list of supported options above). That being said, if you "
"haven't given GDScript a try, try it for **three days**. Just like Godot, "
"once you see how powerful it is and rapid your development becomes, we think "
"GDScript will grow on you."
msgstr ""
"由于Godot是一个开源项目，因此从一开始就必须优先考虑更加集成和无缝的体验，而不"
"是通过支持更熟悉的编程语言来吸引更多用户——特别是在支持那些更熟悉的语言会导致"
"更糟糕的体验时。 我们理解您更愿意在Godot中使用其他语言(请参阅上面支持的选项列"
"表)。话虽如此，如果你还没试过GDScript，先试 **三天**。就像Godot一样，一旦你看"
"到它有多强大并且开发多迅速，我们认为GDScript将在你的身上得到成长。"

#: ../../docs/about/faq.rst:123
msgid ""
"More information about getting comfortable with GDScript or dynamically "
"typed languages can be found in the :ref:`doc_gdscript_more_efficiently` "
"tutorial."
msgstr ""
"有关熟悉GDScript或动态类型语言的更多信息，请参阅 :ref:"
"`doc_gdscript_more_efficiently` 教程。"

#: ../../docs/about/faq.rst:127
msgid "What were the motivations behind creating GDScript?"
msgstr "创建GDScript背后的动机是什么？"

#: ../../docs/about/faq.rst:129
msgid ""
"In the early days, the engine used the `Lua <https://www.lua.org>`__ "
"scripting language. Lua is fast, but creating bindings to an object oriented "
"system (by using fallbacks) was complex and slow and took an enormous amount "
"of code. After some experiments with `Python <https://www.python.org>`__, it "
"also proved difficult to embed."
msgstr ""
"在早期，引擎使用 `Lua <https://www.lua.org>`__ 脚本语言。Lua速度很快，但是创"
"建到面向对象的系统的绑定（通过使用回退）是非常复杂且缓慢的，并且需要大量代"
"码。在用 `Python <https://www.python.org>`__ 进行了一些实验后, 它也被证明是难"
"以嵌入的。"

#: ../../docs/about/faq.rst:135
msgid ""
"The main reasons for creating a custom scripting language for Godot were:"
msgstr "为Godot创建自定义脚本语言的主要原因是："

#: ../../docs/about/faq.rst:137
msgid ""
"Poor threading support in most script VMs, and Godot uses threads (Lua, "
"Python, Squirrel, JavaScript, ActionScript, etc.)."
msgstr ""
"大多数脚本语言(Lua、Python、Squirrel、JS、AS等)的虚拟机(VM)对线程的没有很好的"
"支持，但Godot需要使用线程。"

#: ../../docs/about/faq.rst:139
msgid ""
"Poor class-extending support in most script VMs, and adapting to the way "
"Godot works is highly inefficient (Lua, Python, JavaScript)."
msgstr ""
"大多数脚本语言(Lua、Python、JS)的虚拟机没有很好地支持类扩展，适配Godot工作方"
"式的效率极低。"

#: ../../docs/about/faq.rst:141
msgid ""
"Many existing languages have horrible interfaces for binding to C++, "
"resulting in large amount of code, bugs, bottlenecks, and general "
"inefficiency (Lua, Python, Squirrel, JavaScript, etc.) We wanted to focus on "
"a great engine, not a great amount of integrations."
msgstr ""
"许多现有语言具有绑定到C ++的糟糕接口，会导致产生大量代码、错误、瓶颈和普遍的"
"效率低下(Lua、Python、Squirrel、JS等)。我们希望专注于一个更好的引擎，而不是大"
"量的整合。"

#: ../../docs/about/faq.rst:144
msgid ""
"No native vector types (vector3, matrix4, etc.), resulting in highly reduced "
"performance when using custom types (Lua, Python, Squirrel, JavaScript, "
"ActionScript, etc.)."
msgstr ""
"没有原生向量类型(vector3、matrix4等)，导致使用自定义类型实现时性能大大降低"
"(Lua、Python、Squirrel、JS、AS等)。"

#: ../../docs/about/faq.rst:147
msgid ""
"Garbage collector results in stalls or unnecessarily large memory usage "
"(Lua, Python, JavaScript, ActionScript, etc.)."
msgstr "垃圾收集器导致停顿或不必要的大内存使用(Lua、Python、JS、AS等)。"

#: ../../docs/about/faq.rst:149
msgid ""
"Difficulty to integrate with the code editor for providing code completion, "
"live editing, etc. (all of them). This is well-supported by GDScript."
msgstr ""
"难以与Godot代码编辑器集成从而支持代码补全、动态编辑等。(所有这些语言)。但这方"
"面GDScript支持得很好。"

#: ../../docs/about/faq.rst:153
msgid "GDScript was designed to curtail the issues above, and more."
msgstr "GDScript为减少上述问题以及更多问题而设计。"

#: ../../docs/about/faq.rst:156
msgid "What type of 3D model formats does Godot support?"
msgstr "Godot支持哪些3D模型格式?"

#: ../../docs/about/faq.rst:158
msgid ""
"Godot supports Collada via the `OpenCollada <https://github.com/KhronosGroup/"
"OpenCOLLADA/wiki/OpenCOLLADA-Tools>`_ exporter (Maya, 3DSMax). If you are "
"using Blender, take a look at our own `Better Collada Exporter <https://"
"godotengine.org/download>`_."
msgstr ""
"即便如此，Godot对Collada的支持非常好，如果您在用Maya或3DS Max，请使用 "
"`OpenCollada <https://github.com/KhronosGroup/OpenCOLLADA/wiki/OpenCOLLADA-"
"Tools>`_ 导出，以便得到最大程度地兼容。如果您使用的是Blender，可以用我们的 "
"`Better Collada Exporter <https://godotengine.org/download>`_。"

#: ../../docs/about/faq.rst:161
msgid "As of Godot 3.0, glTF is supported."
msgstr "Godot从3.0版本开始支持gITF。"

#: ../../docs/about/faq.rst:163
msgid ""
"FBX is supported via the Open Asset Import library. However, FBX is "
"proprietary so we recommend using other formats listed above, if suitable "
"for your workflow."
msgstr ""
"FBX可以通过开源的插件来支持。因此，我们建议您在适合您的工作流程的情况下使用上"
"面列出的其他格式。"

#: ../../docs/about/faq.rst:167
msgid ""
"Will [insert closed SDK such as FMOD, GameWorks, etc.] be supported in Godot?"
msgstr "能否在Godot中加入闭源SDK，比如FMOD、GameWorks等？"

#: ../../docs/about/faq.rst:169
msgid ""
"The aim of Godot is to create a free and open-source MIT-licensed engine "
"that is modular and extendable. There are no plans for the core engine "
"development community to support any third-party, closed-source/proprietary "
"SDKs, as integrating with these would go against Godot's ethos."
msgstr ""
"Godot的目的是创建一个遵循免费开源MIT许可的引擎，而且是模块化和可扩展的。核心"
"引擎开发社区没有计划支持任何第三方、闭源或专有SDK，因为这些SDK的集成会违背"
"Godot的精神。"

#: ../../docs/about/faq.rst:174
msgid ""
"That said, because Godot is open-source and modular, nothing prevents you or "
"anyone else interested in adding those libraries as a module and shipping "
"your game with them--as either open- or closed-source."
msgstr ""
"也就是说，正因为Godot是开源和模块化的，所以没有什么能阻止你或其他任何感兴趣的"
"人将这些库添加为模块并使用它们——无论是开源还是闭源——发布游戏。"

#: ../../docs/about/faq.rst:178
msgid ""
"To see how support for your SDK of choice could still be provided, look at "
"the Plugins question below."
msgstr "如欲了解如何支持您使用的SDK，请查看下面的插件问题。"

#: ../../docs/about/faq.rst:181
msgid ""
"If you know of a third-party SDK that is not supported by Godot but that "
"offers free and open-source integration, consider starting the integration "
"work yourself. Godot is not owned by one person; it belongs to the "
"community, and it grows along with ambitious community contributors like you."
msgstr ""
"如果您知道Godot不支持但是想提供免费和开源集成的第三方SDK，请考虑自己开始集成"
"工作。Godot不属于一个人；它属于社区，它与像您一样雄心勃勃的社区贡献者一起成"
"长。"

#: ../../docs/about/faq.rst:187
msgid "Why does Godot use Vulkan or OpenGL instead of Direct3D?"
msgstr ""

#: ../../docs/about/faq.rst:189
msgid ""
"Godot aims for cross-platform compatibility and open standards first and "
"foremost. OpenGL and Vulkan are the technologies that are both open and "
"available (nearly) on all platforms. Thanks to this design decision, a "
"project developed with Godot on Windows will run out of the box on Linux, "
"macOS, and more."
msgstr ""

#: ../../docs/about/faq.rst:195
msgid ""
"Since Godot only has a few people working on its renderer, we would prefer "
"having fewer rendering backends to maintain. On top of that, using a single "
"API on all platforms allows for greater consistency with fewer platform-"
"specific issues."
msgstr ""

#: ../../docs/about/faq.rst:200
msgid ""
"In the long term, we may develop a Direct3D 12 renderer for Godot (mainly "
"for the Xbox's purposes), but Vulkan and OpenGL will remain the default "
"rendering backends on all platforms, including Windows."
msgstr ""

#: ../../docs/about/faq.rst:205
msgid ""
"How should assets be created to handle multiple resolutions and aspect "
"ratios?"
msgstr "如果要适配多种分辨率和纵横比，素材应做哪些处理？"

#: ../../docs/about/faq.rst:207
msgid ""
"This question pops up often and it's probably thanks to the misunderstanding "
"created by Apple when they originally doubled the resolution of their "
"devices. It made people think that having the same assets in different "
"resolutions was a good idea, so many continued towards that path. That "
"originally worked to a point and only for Apple devices, but then several "
"Android and Apple devices with different resolutions and aspect ratios were "
"created, with a very wide range of sizes and DPIs."
msgstr ""
"这个问题很常见，可能要归功于苹果公司。苹果一开始将它们的设备分辨率加倍，让人"
"觉得不同分辨率使用相同的素材是个好主意，所以很多人就这么做下去了。起初只有苹"
"果设备这么做，但安卓和后来的苹果设备又有了不同的分辨率和宽高比，它们的大小和"
"DPI变得多种多样。"

#: ../../docs/about/faq.rst:215
msgid ""
"The most common and proper way to achieve this is to, instead, use a single "
"base resolution for the game and only handle different screen aspect ratios. "
"This is mostly needed for 2D, as in 3D it's just a matter of Camera XFov or "
"YFov."
msgstr ""
"最常见和最恰当的处理方法是，为游戏使用单一基本分辨率，并仅处理不同的屏幕宽高"
"比。 这主要是2D游戏所需要做的，因为在3D游戏中它只是相机 XFov或YFov的问题。"

#: ../../docs/about/faq.rst:219
msgid ""
"Choose a single base resolution for your game. Even if there are devices "
"that go up to 2K and devices that go down to 400p, regular hardware scaling "
"in your device will take care of this at little or no performance cost. Most "
"common choices are either near 1080p (1920x1080) or 720p (1280x720). Keep in "
"mind the higher the resolution, the larger your assets, the more memory they "
"will take and the longer the time it will take for loading."
msgstr ""
"为游戏选择一个基本分辨率。即使有高达2K的设备和低至400p的设备，设备中的常规硬"
"件缩放也会在很少或没有性能成本的情况下解决这个问题。 最常见的选择是接近"
"1080p（1920x1080）或720p（1280x720）。 请记住，分辨率越高，素材越大，占用的内"
"存就越多，加载所需的时间也就越长。"

#: ../../docs/about/faq.rst:227
msgid ""
"Use the stretch options in Godot; 2D stretching while keeping aspect ratios "
"works best. Check the :ref:`doc_multiple_resolutions` tutorial on how to "
"achieve this."
msgstr ""
"使用Godot中的拉伸(Stretch)选项；2D保持宽高比时拉伸效果最好。参阅教程 :ref:"
"`doc_multiple_resolutions` 来学习如何实现它。"

#: ../../docs/about/faq.rst:231
msgid ""
"Determine a minimum resolution and then decide if you want your game to "
"stretch vertically or horizontally for different aspect ratios, or if there "
"is one aspect ratio and you want black bars to appear instead. This is also "
"explained in :ref:`doc_multiple_resolutions`."
msgstr ""
"确定最小分辨率，然后决定是否希望游戏垂直或水平拉伸以获得不同的宽高比，或者如"
"果有一个宽高比并且您希望显示黑条。 这也在 :ref:`doc_multiple_resolutions` 有"
"所解释。"

#: ../../docs/about/faq.rst:236
msgid ""
"For user interfaces, use the :ref:`anchoring <doc_size_and_anchors>` to "
"determine where controls should stay and move. If UIs are more complex, "
"consider learning about Containers."
msgstr ""
"对于用户界面，请使用 :ref:`锚定 <doc_size_and_anchors>` 来确定控件应停留和移"
"动的位置。 如果UI更复杂，请考虑学习容器。"

#: ../../docs/about/faq.rst:240
msgid "And that's it! Your game should work in multiple resolutions."
msgstr "就是这样！您的游戏应该能够以多种分辨率运行。"

#: ../../docs/about/faq.rst:242
msgid ""
"If there is a desire to make your game also work on ancient devices with "
"tiny screens (fewer than 300 pixels in width), you can use the export option "
"to shrink images, and set that build to be used for certain screen sizes in "
"the App Store or Google Play."
msgstr ""
"如果希望让您的游戏也适用于具有小屏幕(宽度小于300像素)的古老设备，可以在导出选"
"项中缩小图像，并且在App Store或Google Play中将它设为用于特定的屏幕大小。"

#: ../../docs/about/faq.rst:248
msgid "How can I extend Godot?"
msgstr "如何扩展Godot？"

#: ../../docs/about/faq.rst:250
msgid ""
"For extending Godot, like creating Godot Editor plugins or adding support "
"for additional languages, take a look at :ref:`EditorPlugins "
"<doc_making_plugins>` and tool scripts."
msgstr ""
"要扩展Godot，比如创建Godot编辑器插件或添加对其他语言的支持，请参阅 :ref:`编辑"
"器插件 <doc_making_plugins>` 和工具脚本。"

#: ../../docs/about/faq.rst:254
msgid "Also, see the official blog posts on these topics:"
msgstr "另外，请参阅有关这些主题的官方博客："

#: ../../docs/about/faq.rst:256
msgid ""
"`A look at the GDNative architecture <https://godotengine.org/article/look-"
"gdnative-architecture>`_"
msgstr ""
"`GDNative架构概览 <https://godotengine.org/article/look-gdnative-"
"architecture>`_"

#: ../../docs/about/faq.rst:257
msgid "`GDNative is here! <https://godotengine.org/article/dlscript-here>`_"
msgstr "`GDNative来了! <https://godotengine.org/article/dlscript-here>`_"

#: ../../docs/about/faq.rst:259
msgid ""
"You can also take a look at the GDScript implementation, the Godot modules, "
"as well as the `unofficial Python support <https://github.com/touilleMan/"
"godot-python>`_ for Godot. This would be a good starting point to see how "
"another third-party library integrates with Godot."
msgstr ""
"您还可以查看GDScript的实现、Godot模块以及Godot的 `非官方Python支持 <https://"
"github.com/touilleMan/godot-python>`_ 。这个将是您了解如何将第三方库整合到"
"Godot中的第一步。"

#: ../../docs/about/faq.rst:265
#, fuzzy
msgid "When is the next release of Godot out?"
msgstr "下一个版本什么时候出来？"

#: ../../docs/about/faq.rst:267
#, fuzzy
msgid ""
"When it's ready! See :ref:`doc_release_policy_when_is_next_release_out` for "
"more information."
msgstr "详情见 :ref:`doc_running_code_in_the_editor`。"

#: ../../docs/about/faq.rst:271
msgid "I would like to contribute! How can I get started?"
msgstr "想要贡献！ 如何开始？"

#: ../../docs/about/faq.rst:273
msgid ""
"Awesome! As an open-source project, Godot thrives off of the innovation and "
"ambition of developers like you."
msgstr ""
"太棒了！作为一个开源项目，Godot的发展得益于像您这样的开发者的创新和雄心。"

#: ../../docs/about/faq.rst:276
msgid ""
"The first place to get started is in the `issues <https://github.com/"
"godotengine/godot/issues>`_. Find an issue that resonates with you, then "
"proceed to the `How to Contribute <https://github.com/godotengine/godot/blob/"
"master/CONTRIBUTING.md#contributing-pull-requests>`_ guide to learn how to "
"fork, modify, and submit a Pull Request (PR) with your changes."
msgstr ""
"开始的第一个地方是在 `问题列表 <https://github.com/godotengine/godot/"
"issues>`_。找到一个与您产生共鸣的问题，然后继续阅读 `如何贡献 <https://"
"github.com/godotengine/godot/blob/master/CONTRIBUTING.md#contributing-pull-"
"requests>`_ 指南，学习如何使用更改派生、修改和提交Pull Request (PR)。"

#: ../../docs/about/faq.rst:281
msgid "I have a great idea for Godot. How can I share it?"
msgstr "有关于Godot的好主意。如何分享它？"

#: ../../docs/about/faq.rst:283
msgid ""
"It might be tempting to want to bring ideas to Godot, like ones that result "
"in massive core changes, some sort of mimicry of what another game engine "
"does, or alternative workflows that you'd like built into the editor. These "
"are great, and we are thankful to have such motivated people want to "
"contribute, but Godot's focus is and always will be the core functionality "
"as outlined in the `Roadmap <https://github.com/godotengine/godot-roadmap/"
"blob/master/ROADMAP.md>`_, `squashing bugs and addressing issues <https://"
"github.com/godotengine/godot/issues>`_, and conversations between Godot "
"community members."
msgstr ""
"想要把一些想法带给Godot会很诱人，比如导致大量核心变化的想法，某种模仿其他游戏"
"引擎所做的事情，或者您想要在编辑器中构建另一种工作流程。这些都是伟大的，我们"
"感谢有这些想要积极贡献的人，但Godot的焦点是而且始终将是在 `路线图 <https://"
"github.com/godotengine/godot-roadmap/blob/master/ROADMAP.md>`_ 中概述的核心功"
"能。`排查bug和解决问题 <https://github.com/godotengine/godot/issues>`_，以及"
"与Godot社区成员之间的讨论。"

#: ../../docs/about/faq.rst:292
msgid ""
"Most developers in the Godot community will be more interested to learn "
"about things like:"
msgstr "Godot社区中的大多数开发人员都会更有兴趣了解以下内容："

#: ../../docs/about/faq.rst:295
msgid ""
"Your experience using the software and the problems you have (we care about "
"this much more than ideas on how to improve it)."
msgstr ""
"您使用该软件的经验和您遇到的问题(我们关心的不仅仅是关于如何改进它的想法)。"

#: ../../docs/about/faq.rst:297
msgid ""
"The features you would like to see implemented because you need them for "
"your project."
msgstr "您希望实现的功能，因为您需要它们用于您的项目。"

#: ../../docs/about/faq.rst:299
msgid ""
"The concepts that were difficult to understand while learning the software."
msgstr "学习软件时难以理解的概念。"

#: ../../docs/about/faq.rst:300
msgid "The parts of your workflow you would like to see optimized."
msgstr "您的工作流程中希望优化的部分。"

#: ../../docs/about/faq.rst:301
msgid ""
"Parts where you missed clear tutorials or where the documentation wasn't "
"clear."
msgstr "教程不全的部分或者文档不清晰的部分。"

#: ../../docs/about/faq.rst:303
msgid ""
"Please don't feel like your ideas for Godot are unwelcome. Instead, try to "
"reformulate them as a problem first, so developers and the community have a "
"functional foundation to ground your ideas on."
msgstr ""
"因此，请不要觉得您对Godot的想法是不受欢迎的。相反，首先尝试将它们作为问题重新"
"表述出来，这样开发人员和社区会有一个功能依据，可以为您的想法奠定基础。"

#: ../../docs/about/faq.rst:307
msgid ""
"A good way to approach sharing your ideas and problems with the community is "
"as a set of user stories. Explain what you are trying to do, what behavior "
"you expect to happen, and then what behavior actually happened. Framing "
"problems and ideas this way will help the whole community stay focused on "
"improving developer experiences as a whole."
msgstr ""
"与社区分享您的想法和问题的一个好方法是用案例来说明。解释您想做什么，您期望发"
"生什么行为，然后实际发生了什么行为。以这种方式体现问题和想法，将有助于整个社"
"区始终专注于作为一个整体改善开发者的体验。"

#: ../../docs/about/faq.rst:313
msgid ""
"Bonus points for bringing screenshots, concrete numbers, test cases, or "
"example projects (if applicable)."
msgstr "最好可以附上截图、具体数值、测试用例或示例项目(如果有的话)。"

#: ../../docs/about/faq.rst:317
msgid "Is it possible to use Godot as a library?"
msgstr "是否能将Godot作为库使用？"

#: ../../docs/about/faq.rst:319
msgid ""
"Godot is meant to be used with its editor. We recommend you give it a try, "
"as it will most likely save you time in the long term. There are no plans to "
"make Godot usable as a library, as it would make the rest of the engine more "
"convoluted and difficult to use for casual users."
msgstr ""
"Godot旨在与其编辑器一起使用。我们建议您尝试一下编辑器，因为从长远来看，它很可"
"能会节省您的时间。目前尚无计划把Godot作为库(library)使用，因为这会使引擎的其"
"余部分更加混乱，难以为普通用户使用。"

#: ../../docs/about/faq.rst:324
msgid ""
"If you want to use a rendering library, look into using an established "
"rendering engine instead. Keep in mind rendering engines usually have "
"smaller communities compared to Godot. This will make it more difficult to "
"find answers to your questions."
msgstr ""
"如果你想使用一个渲染库，那就使用一个已经建立的渲染引擎来代替。需要注意的是，"
"与Godot相比，渲染引擎通常拥有更小的社区，这将会使你解决问题的难度加大。"

#: ../../docs/about/faq.rst:330
msgid "Why does Godot not use STL (Standard Template Library)"
msgstr "为什么Godot不使用STL(标准模板库)？"

#: ../../docs/about/faq.rst:332
msgid ""
"Like many other libraries (Qt as an example), Godot does not make use of "
"STL. We believe STL is a great general purpose library, but we had special "
"requirements for Godot."
msgstr ""
"像许多其他库一样(Qt就是一个例子)，Godot没有使用STL。我们相信STL是一个伟大的通"
"用库，但我们对Godot有特殊的要求。"

#: ../../docs/about/faq.rst:336
msgid ""
"STL templates create very large symbols, which results in huge debug "
"binaries. We use few templates with very short names instead."
msgstr ""
"STL模板会创建大量符号，这会产生大量的调试二进制文件。 我们使用名称很短的少量"
"模板来代替。"

#: ../../docs/about/faq.rst:337
msgid ""
"Most of our containers cater to special needs, like Vector, which uses copy "
"on write and we use to pass data around, or the RID system, which requires "
"O(1) access time for performance. Likewise, our hash map implementations are "
"designed to integrate seamlessly with internal engine types."
msgstr ""
"我们的大多数容器都满足特殊需求，例如 `Vector`，它使用写时复制，我们用它来传递"
"数据，或RID系统，这需要O(1)访问时间来提高性能。同样，我们的哈希映射实现旨在与"
"内部引擎类型无缝集成。"

#: ../../docs/about/faq.rst:338
msgid ""
"Our containers have memory tracking built-in, which helps better track "
"memory usage."
msgstr "我们的容器内置了内存跟踪，这有助于更好地跟踪内存使用情况。"

#: ../../docs/about/faq.rst:339
msgid ""
"For large arrays, we use pooled memory, which can be mapped to either a "
"preallocated buffer or virtual memory."
msgstr "对于大型数组，我们使用内存池，可以映射到预先分配的缓冲区或虚拟内存。"

#: ../../docs/about/faq.rst:340
msgid ""
"We use our custom String type, as the one provided by STL is too basic and "
"lacks proper internationalization support."
msgstr ""
"我们使用自定义字符串类型，由于STL提供的版本过于基础，并且缺乏适当的国际化支"
"持。"

#: ../../docs/about/faq.rst:343
msgid "Why does Godot not use exceptions?"
msgstr "为什么Godot不使用异常？"

#: ../../docs/about/faq.rst:345
msgid ""
"We believe games should not crash, no matter what. If an unexpected "
"situation happens, Godot will print an error (which can be traced even to "
"script), but then it will try to recover as gracefully as possible and keep "
"going."
msgstr ""
"我们相信无论如何游戏都不应该崩溃。如果发生意外情况，Godot将打印一个错误(甚至"
"可以追溯到脚本)，但之后它会尽可能优雅地恢复，并继续前进。"

#: ../../docs/about/faq.rst:350
msgid ""
"Additionally, exceptions significantly increase binary size for the "
"executable."
msgstr "此外，异常会显著增加可执行文件的二进制大小。"

#: ../../docs/about/faq.rst:354
msgid "Why does Godot not enforce RTTI?"
msgstr "为什么Godot不执行运行时类型识别(RTTI)？"

#: ../../docs/about/faq.rst:356
msgid ""
"Godot provides its own type-casting system, which can optionally use RTTI "
"internally. Disabling RTTI in Godot means considerably smaller binary sizes "
"can be achieved, at a little performance cost."
msgstr ""
"Godot提供了自己的类型转换系统，可以可选地在内部使用运行时类型识别(RTTI)。在"
"Godot中禁用运行时类型识别，意味着可以以较小的性能代价实现相当小的二进制大小。"

#: ../../docs/about/faq.rst:361
msgid "Why does Godot not force users to implement DoD (Data oriented Design)?"
msgstr "为什么Godot不强迫用户实践DoD(面向数据设计)？"

#: ../../docs/about/faq.rst:363
msgid ""
"While Godot internally for a lot of the heavy performance tasks attempts to "
"use cache coherency as well as possible, we believe most users don't really "
"need to be forced to use DoD practices."
msgstr ""
"虽然Godot内部针对许多繁重的性能任务，尝试尽可能地使用缓存一致性，但我们相信大"
"多数用户并不真正需要被迫使用DoD实践。"

#: ../../docs/about/faq.rst:367
msgid ""
"DoD is mostly a cache coherency optimization that can only gain you "
"significant performance improvements when dealing with dozens of thousands "
"of objects (which are processed every frame with little modification). As "
"in, if you are moving a few hundred sprites or enemies per frame, DoD won't "
"help you, and you should consider a different approach to optimization."
msgstr ""
"面向数据设计主要是缓存一致性优化，它只能在处理成千上万个对象时获得显著的性能"
"提升(每帧都经过少量修改)。比如，如果你每帧移动几百个精灵或敌人，面向数据设计"
"不会帮您的，您应该考虑一种不同的优化方法。"

#: ../../docs/about/faq.rst:374
msgid ""
"The vast majority of games do not need this and Godot provides handy helpers "
"to do the job for most cases when you do."
msgstr ""
"绝大多数游戏都不需要这个，并且Godot提供了方便的辅助工具来完成大多数情况下的工"
"作。"

#: ../../docs/about/faq.rst:377
msgid ""
"If a game that really needs to process such large amount of objects is "
"needed, our recommendation is to use C++ and GDNative for the high "
"performance parts and GDScript (or C#) for the rest of the game."
msgstr ""
"如果一个游戏确实需要处理如此庞大的对象，我们建议在游戏的高性能部分使用C++和"
"GDNative，而其余部分使用GDScript(或C#)。"

#: ../../docs/about/faq.rst:382
msgid "How can I support Godot development or contribute?"
msgstr "怎样支持或参与Godot的发展呢？"

#: ../../docs/about/faq.rst:384
msgid "See :ref:`doc_ways_to_contribute`."
msgstr "参阅 :ref:`doc_ways_to_contribute`。"

#: ../../docs/about/faq.rst:387
msgid "Who is working on Godot? How can I contact you?"
msgstr "谁在为Godot工作？如何联系？"

#: ../../docs/about/faq.rst:389
msgid ""
"See the corresponding page on the `Godot website <https://godotengine.org/"
"contact>`_."
msgstr "请参照 `Godot官网 <https://godotengine.org/contact>`_ 上的相应页面。"
