# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 13:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/optimization/batching.rst:4
#, fuzzy
msgid "Optimization using batching"
msgstr "최적화(Optimization)"

#: ../../docs/tutorials/optimization/batching.rst:7
msgid "Introduction"
msgstr "소개"

#: ../../docs/tutorials/optimization/batching.rst:9
msgid ""
"Game engines have to send a set of instructions to the GPU in order to tell "
"the GPU what and where to draw. These instructions are sent using common "
"instructions, called APIs (Application Programming Interfaces), examples of "
"which are OpenGL, OpenGL ES, and Vulkan."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:14
msgid ""
"Different APIs incur different costs when drawing objects. OpenGL handles a "
"lot of work for the user in the GPU driver at the cost of more expensive "
"draw calls. As a result, applications can often be sped up by reducing the "
"number of draw calls."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:21
msgid "2D batching is currently only supported when using the GLES2 renderer."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:24
#, fuzzy
msgid "Draw calls"
msgstr "단점"

#: ../../docs/tutorials/optimization/batching.rst:26
msgid ""
"In 2D, we need to tell the GPU to render a series of primitives (rectangles, "
"lines, polygons etc). The most obvious technique is to tell the GPU to "
"render one primitive at a time, telling it some information such as the "
"texture used, the material, the position, size, etc. then saying \"Draw!"
"\" (this is called a draw call)."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:32
msgid ""
"It turns out that while this is conceptually simple from the engine side, "
"GPUs operate very slowly when used in this manner. GPUs work much more "
"efficiently if, instead of telling them to draw a single primitive, you tell "
"them to draw a number of similar primitives all in one draw call, which we "
"will call a \"batch\"."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:37
msgid ""
"And it turns out that they don't just work a bit faster when used in this "
"manner, they work a *lot* faster."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:40
msgid ""
"As Godot is designed to be a general purpose engine, the primitives coming "
"into the Godot renderer can be in any order, sometimes similar, and "
"sometimes dissimilar. In order to match the general purpose nature of Godot "
"with the batching preferences of GPUs, Godot features an intermediate layer "
"which can automatically group together primitives wherever possible, and "
"send these batches on to the GPU. This can give an increase in rendering "
"performance while requiring few, if any, changes to your Godot project."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:49
#, fuzzy
msgid "How it works"
msgstr "도표는 다음과 같습니다:"

#: ../../docs/tutorials/optimization/batching.rst:51
msgid ""
"Instructions come into the renderer from your game in the form of a series "
"of items, each of which can contain one or more commands. The items "
"correspond to Nodes in the scene tree, and the commands correspond to "
"primitives such as rectangles or polygons. Some items, such as tilemaps, and "
"text, can contain a large number of commands (tiles and letters "
"respectively). Others, such as sprites, may only contain a single command "
"(rectangle)."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:58
msgid "The batcher uses two main techniques to group together primitives:"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:60
msgid "Consecutive items can be joined together"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:61
msgid "Consecutive commands within an item can be joined to form a batch"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:64
msgid "Breaking batching"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:66
msgid ""
"Batching can only take place if the items or commands are similar enough to "
"be rendered in one draw call. Certain changes (or techniques), by necessity, "
"prevent the formation of a contiguous batch, this is referred to as "
"'breaking batching'."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:70
msgid ""
"Batching will be broken by (amongst other things): * Change of texture * "
"Change of material * Change of primitive type (say going from rectangles to "
"lines)"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:77
msgid ""
"If for example, you draw a series of sprites each with a different texture, "
"there is no way they can be batched."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:81
#, fuzzy
msgid "Render order"
msgstr "플레이스 홀더 수정자"

#: ../../docs/tutorials/optimization/batching.rst:83
msgid ""
"The question arises, if only similar items can be drawn together in a batch, "
"why don't we look through all the items in a scene, group together all the "
"similar items, and draw them together?"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:87
msgid ""
"In 3D, this is often exactly how engines work. However, in Godot 2D, items "
"are drawn in 'painter's order', from back to front. This ensures that items "
"at the front are drawn on top of earlier items, when they overlap."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:91
msgid ""
"This also means that if we try and draw objects in order of, for example, "
"texture, then this painter's order may break and objects will be drawn in "
"the wrong order."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:95
msgid ""
"In Godot this back to front order is determined by: * The order of objects "
"in the scene tree * The Z index of objects * The canvas layer * Y sort nodes"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:103
msgid ""
"You can group similar objects together for easier batching. While doing so "
"is not a requirement on your part, think of it as an optional approach that "
"can improve performance in some cases. See the diagnostics section in order "
"to help you make this decision."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:109
#, fuzzy
msgid "A trick"
msgstr "벽돌"

#: ../../docs/tutorials/optimization/batching.rst:111
msgid ""
"And now a sleight of hand. Although the idea of painter's order is that "
"objects are rendered from back to front, consider 3 objects A, B and C, that "
"contain 2 different textures, grass and wood."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:117
msgid "In painter's order they are ordered:"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:125
msgid ""
"Because the texture changes, they cannot be batched, and will be rendered in "
"3 draw calls."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:128
msgid ""
"However, painter's order is only needed on the assumption that they will be "
"drawn *on top* of each other. If we relax that assumption, i.e. if none of "
"these 3 objects are overlapping, there is *no need* to preserve painter's "
"order. The rendered result will be the same. What if we could take advantage "
"of this?"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:134
msgid "Item reordering"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:138
msgid ""
"It turns out that we can reorder items. However, we can only do this if the "
"items satisfy the conditions of an overlap test, to ensure that the end "
"result will be the same as if they were not reordered. The overlap test is "
"very cheap in performance terms, but not absolutely free, so there is a "
"slight cost to looking ahead to decide whether items can be reordered. The "
"number of items to lookahead for reordering can be set in project settings "
"(see below), in order to balance the costs and benefits in your project."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:152
msgid ""
"Because the texture only changes once, we can render the above in only 2 "
"draw calls."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:156
msgid "Lights"
msgstr "빛(Lights)"

#: ../../docs/tutorials/optimization/batching.rst:158
msgid ""
"Although the job for the batching system is normally quite straightforward, "
"it becomes considerably more complex when 2D lights are used, because lights "
"are drawn using extra passes, one for each light affecting the primitive. "
"Consider 2 sprites A and B, with identical texture and material. Without "
"lights they would be batched together and drawn in one draw call. But with 3 "
"lights, they would be drawn as follows, each line a draw call:"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:178
msgid ""
"That is a lot of draw calls, 8 for only 2 sprites. Now consider we are "
"drawing 1000 sprites, the number of draw calls quickly becomes astronomical, "
"and performance suffers. This is partly why lights have the potential to "
"drastically slow down 2D."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:183
msgid ""
"However, if you remember our magician's trick from item reordering, it turns "
"out we can use the same trick to get around painter's order for lights!"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:186
msgid ""
"If A and B are not overlapping, we can render them together in a batch, so "
"the draw process is as follows:"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:199
msgid ""
"That is 4 draw calls. Not bad, that is a 50% improvement. However consider "
"that in a real game, you might be drawing closer to 1000 sprites."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:202
msgid "Before: 1000 * 4 = 4000 draw calls."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:203
msgid "After: 1 * 4 = 4 draw calls."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:205
msgid ""
"That is a 1000× decrease in draw calls, and should give a huge increase in "
"performance."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:209
#, fuzzy
msgid "Overlap test"
msgstr "오버라이딩(Overriding) 가능한 함수들"

#: ../../docs/tutorials/optimization/batching.rst:211
msgid ""
"However, as with the item reordering, things are not that simple, we must "
"first perform the overlap test to determine whether we can join these "
"primitives, and the overlap test has a small cost. So again you can choose "
"the number of primitives to lookahead in the overlap test to balance the "
"benefits against the cost. Usually with lights the benefits far outweigh the "
"costs."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:217
msgid ""
"Also consider that depending on the arrangement of primitives in the "
"viewport, the overlap test will sometimes fail (because the primitives "
"overlap and thus should not be joined). So in practice the decrease in draw "
"calls may be less dramatic than the perfect situation of no overlap. However "
"performance is usually far higher than without this lighting optimization."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:224
msgid "Light Scissoring"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:226
msgid ""
"Batching can make it more difficult to cull out objects that are not "
"affected or partially affected by a light. This can increase the fill rate "
"requirements quite a bit, and slow rendering. Fill rate is the rate at which "
"pixels are colored, it is another potential bottleneck unrelated to draw "
"calls."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:231
msgid ""
"In order to counter this problem, (and also speedup lighting in general), "
"batching introduces light scissoring. This enables the use of the OpenGL "
"command ``glScissor()``, which identifies an area, outside of which, the GPU "
"will not render any pixels. We can thus greatly optimize fill rate by "
"identifying the intersection area between a light and a primitive, and limit "
"rendering the light to *that area only*."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:238
msgid ""
"Light scissoring is controlled with the :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` project setting. This value is between 1.0 and 0.0, "
"with 1.0 being off (no scissoring), and 0.0 being scissoring in every "
"circumstance. The reason for the setting is that there may be some small "
"cost to scissoring on some hardware. Generally though, when you are using "
"lighting, it should result in some performance gains."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:246
msgid ""
"The relationship between the threshold and whether a scissor operation takes "
"place is not altogether straight forward, but generally it represents the "
"pixel area that is potentially 'saved' by a scissor operation (i.e. the fill "
"rate saved). At 1.0, the entire screens pixels would need to be saved, which "
"rarely if ever happens, so it is switched off. In practice the useful values "
"are bunched towards zero, as only a small percentage of pixels need to be "
"saved for the operation to be useful."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:254
msgid ""
"The exact relationship is probably not necessary for users to worry about, "
"but out of interest is included in the appendix."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:259
msgid ""
"*Bottom right is a light, the red area is the pixels saved by the scissoring "
"operation. Only the intersection needs to be rendered.*"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:263
#, fuzzy
msgid "Vertex baking"
msgstr "벡터 내장 타입"

#: ../../docs/tutorials/optimization/batching.rst:265
msgid "The GPU shader receives instructions on what to draw in 2 main ways:"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:267
msgid "Shader uniforms (e.g. modulate color, item transform)"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:268
msgid "Vertex attributes (vertex color, local transform)"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:270
msgid ""
"However, within a single draw call (batch) we cannot change uniforms. This "
"means that naively, we would not be able to batch together items or commands "
"that change final_modulate, or item transform. Unfortunately that is an "
"awful lot of cases. Sprites for instance typically are individual nodes with "
"their own item transform, and they may have their own color modulate."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:276
msgid ""
"To get around this problem, the batching can \"bake\" some of the uniforms "
"into the vertex attributes."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:279
msgid ""
"The item transform can be combined with the local transform and sent in a "
"vertex attribute."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:282
msgid ""
"The final modulate color can be combined with the vertex colors, and sent in "
"a vertex attribute."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:285
msgid ""
"In most cases this works fine, but this shortcut breaks down if a shader "
"expects these values to be available individually, rather than combined. "
"This can happen in custom shaders."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:290
#, fuzzy
msgid "Custom Shaders"
msgstr "맞춤 메시"

#: ../../docs/tutorials/optimization/batching.rst:292
msgid ""
"As a result certain operations in custom shaders will prevent baking, and "
"thus decrease the potential for batching. While we are working to decrease "
"these cases, currently the following conditions apply:"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:296
msgid ""
"Reading or writing ``COLOR`` or ``MODULATE`` - disables vertex color baking"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:297
msgid "Reading ``VERTEX`` - disables vertex position baking"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:300
#, fuzzy
msgid "Project Settings"
msgstr "프로젝트 설정"

#: ../../docs/tutorials/optimization/batching.rst:302
msgid ""
"In order to fine tune batching, a number of project settings are available. "
"You can usually leave these at default during development, but it is a good "
"idea to experiment to ensure you are getting maximum performance. Spending a "
"little time tweaking parameters can often give considerable performance "
"gain, for very little effort. See the tooltips in the project settings for "
"more info."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:309
#, fuzzy
msgid "rendering/batching/options"
msgstr "애니메이션 설정"

#: ../../docs/tutorials/optimization/batching.rst:311
msgid ""
":ref:`use_batching <class_ProjectSettings_property_rendering/batching/"
"options/use_batching>` - Turns batching on and off"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:315
msgid ""
":ref:`use_batching_in_editor <class_ProjectSettings_property_rendering/"
"batching/options/use_batching_in_editor>`"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:318
msgid ""
":ref:`single_rect_fallback <class_ProjectSettings_property_rendering/"
"batching/options/single_rect_fallback>` - This is a faster way of drawing "
"unbatchable rectangles, however it may lead to flicker on some hardware so "
"is not recommended"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:324
msgid "rendering/batching/parameters"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:326
msgid ""
":ref:`max_join_item_commands <class_ProjectSettings_property_rendering/"
"batching/parameters/max_join_item_commands>` - One of the most important "
"ways of achieving batching is to join suitable adjacent items (nodes) "
"together, however they can only be joined if the commands they contain are "
"compatible. The system must therefore do a lookahead through the commands in "
"an item to determine whether it can be joined. This has a small cost per "
"command, and items with a large number of commands are not worth joining, so "
"the best value may be project dependent."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:335
msgid ""
":ref:`colored_vertex_format_threshold "
"<class_ProjectSettings_property_rendering/batching/parameters/"
"colored_vertex_format_threshold>` - Baking colors into vertices results in a "
"larger vertex format. This is not necessarily worth doing unless there are a "
"lot of color changes going on within a joined item. This parameter "
"represents the proportion of commands containing color changes / the total "
"commands, above which it switches to baked colors."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:343
msgid ""
":ref:`batch_buffer_size <class_ProjectSettings_property_rendering/batching/"
"parameters/batch_buffer_size>` - This determines the maximum size of a "
"batch, it doesn't have a huge effect on performance but can be worth "
"decreasing for mobile if RAM is at a premium."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:348
msgid ""
":ref:`item_reordering_lookahead <class_ProjectSettings_property_rendering/"
"batching/parameters/item_reordering_lookahead>` - Item reordering can help "
"especially with interleaved sprites using different textures. The lookahead "
"for the overlap test has a small cost, so the best value may change per "
"project."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:355
msgid "rendering/batching/lights"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:357
msgid ""
":ref:`scissor_area_threshold <class_ProjectSettings_property_rendering/"
"batching/lights/scissor_area_threshold>` - See light scissoring."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:361
msgid ""
":ref:`max_join_items <class_ProjectSettings_property_rendering/batching/"
"lights/max_join_items>`  - Joining items before lighting can significantly "
"increase performance. This requires an overlap test, which has a small cost, "
"so the costs and benefits may be project dependent, and hence the best value "
"to use here."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:369
msgid "rendering/batching/debug"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:371
msgid ""
":ref:`flash_batching <class_ProjectSettings_property_rendering/batching/"
"debug/flash_batching>`  - This is purely a debugging feature to identify "
"regressions between the batching and legacy renderer. When it is switched "
"on, the batching and legacy renderer are used alternately on each frame. "
"This will decrease performance, and should not be used for your final "
"export, only for testing."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:378
msgid ""
":ref:`diagnose_frame <class_ProjectSettings_property_rendering/batching/"
"debug/diagnose_frame>`  - This will periodically print a diagnostic batching "
"log to the Godot IDE / console."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:384
msgid "rendering/batching/precision"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:386
msgid ""
":ref:`uv_contract <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract>` - On some hardware (notably some Android devices) "
"there have been reports of tilemap tiles drawing slightly outside their UV "
"range, leading to edge artifacts such as lines around tiles. If you see this "
"problem, try enabling uv contract. This makes a small contraction in the UV "
"coordinates to compensate for precision errors on devices."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:394
msgid ""
":ref:`uv_contract_amount <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract_amount>` - Hopefully the default amount should cure "
"artifacts on most devices, but just in case, this value is editable."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:400
msgid "Diagnostics"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:402
msgid ""
"Although you can change parameters and examine the effect on frame rate, "
"this can feel like working blindly, with no idea of what is going on under "
"the hood. To help with this, batching offers a diagnostic mode, which will "
"periodically print out (to the IDE or console) a list of the batches that "
"are being processed. This can help pin point situations where batching is "
"not occurring as intended, and help you to fix them, in order to get the "
"best possible performance."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:411
msgid "Reading a diagnostic"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:436
msgid "This is a typical diagnostic."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:438
msgid ""
"**joined_item** - A joined item can contain 1 or more references to items "
"(nodes). Generally joined_items containing many references is preferable to "
"many joined_items containing a single reference. Whether items can be joined "
"will be determined by their contents and compatibility with the previous "
"item."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:443
msgid ""
"**batch R** - a batch containing rectangles. The second number is the number "
"of rects. The second number in square brackets is the Godot texture ID, and "
"the numbers in curly braces is the color. If the batch contains more than "
"one rect, MULTI is added to the line to make it easy to identify. Seeing "
"MULTI is good, because this indicates successful batching."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:448
msgid ""
"**batch D** - a default batch, containing everything else that is not "
"currently batched."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:452
#, fuzzy
msgid "Default Batches"
msgstr "기본 기능"

#: ../../docs/tutorials/optimization/batching.rst:454
msgid ""
"The second number following default batches is the number of commands in the "
"batch, and it is followed by a brief summary of the contents:"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:472
msgid ""
"You may see \"dummy\" default batches containing no commands, you can ignore "
"these."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:476
msgid "FAQ"
msgstr "자주 묻는 질문(FAQ)"

#: ../../docs/tutorials/optimization/batching.rst:479
msgid "I don't get a large performance increase from switching on batching"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:481
msgid ""
"Try the diagnostics, see how much batching is occurring, and whether it can "
"be improved"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:483
#, fuzzy
msgid "Try changing parameters"
msgstr "가져오기 매개변수 변경하기"

#: ../../docs/tutorials/optimization/batching.rst:484
msgid "Consider that batching may not be your bottleneck (see bottlenecks)"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:487
msgid "I get a decrease in performance with batching"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:489
msgid "Try steps to increase batching given above"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:490
msgid ""
"Try switching :ref:`single_rect_fallback "
"<class_ProjectSettings_property_rendering/batching/options/"
"single_rect_fallback>` to on"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:493
msgid ""
"The single rect fallback method is the default used without batching, and it "
"is approximately twice as fast, however it can result in flicker on some "
"hardware, so its use is discouraged"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:496
msgid ""
"After trying the above, if your scene is still performing worse, consider "
"turning off batching."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:500
msgid "I use custom shaders and the items are not batching"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:502
msgid ""
"Custom shaders can be problematic for batching, see the custom shaders "
"section"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:505
msgid "I am seeing line artifacts appear on certain hardware"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:507
msgid ""
"See the :ref:`uv_contract <class_ProjectSettings_property_rendering/batching/"
"precision/uv_contract>` project setting which can be used to solve this "
"problem."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:512
msgid "I use a large number of textures, so few items are being batched"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:514
msgid ""
"Consider the use of texture atlases. As well as allowing batching, these "
"reduce the need for state changes associated with changing texture."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:518
msgid "Appendix"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:521
msgid "Light scissoring threshold calculation"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:523
msgid ""
"The actual proportion of screen pixel area used as the threshold is the :ref:"
"`scissor_area_threshold <class_ProjectSettings_property_rendering/batching/"
"lights/scissor_area_threshold>` value to the power of 4."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:528
msgid ""
"For example, on a screen size ``1920 x 1080`` there are ``2,073,600`` pixels."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:530
msgid "At a threshold of ``1000`` pixels, the proportion would be:"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:537
msgid "The power of 0.25 is the opposite of power of 4)."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:539
msgid ""
"So a :ref:`scissor_area_threshold <class_ProjectSettings_property_rendering/"
"batching/lights/scissor_area_threshold>` of 0.15 would be a reasonable value "
"to try."
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:543
msgid ""
"Going the other way, for instance with a :ref:`scissor_area_threshold "
"<class_ProjectSettings_property_rendering/batching/lights/"
"scissor_area_threshold>` of ``0.5``:"
msgstr ""

#: ../../docs/tutorials/optimization/batching.rst:552
msgid ""
"If the number of pixels saved is more than this threshold, the scissor is "
"activated."
msgstr ""
