# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-21 13:40+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:4
msgid "Multiple resolutions"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:8
#, fuzzy
msgid "The problem of multiple resolutions"
msgstr "전환(transition) 유형"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:10
msgid ""
"Developers often have trouble understanding  how to best support multiple "
"resolutions in their games. For Desktop and Console games this is more or "
"less straightforward, as most screen aspect ratios are 16:9 and resolutions "
"are standard (720,1080,2k,4k,etc)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:14
msgid ""
"For mobile games at first it was easy. For many years, the iPhone (and iPad) "
"used the same resolution. When *Retina* was implemented, they just doubled "
"the amount of pixel density (so most developers had assets in default and "
"double resolutions)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:18
msgid ""
"Nowadays this is no longer the case, as there are plenty of different screen "
"sizes, densities and aspect ratios for mobile, and non conventional sizes "
"are becoming trendy for Desktop, such as ultra-wide."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:22
msgid ""
"For 3D games there is not much of a need to support multiple resolutions "
"(from the aesthetic point of view). The 3D geometry will just fill the "
"screen based on the field-of-view, disregarding the aspect ratio. The main "
"reason one may want to support this, in this case, is for *performance* "
"reasons (running in lower resolution to increase frames per second)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:27
msgid ""
"For 2D and game UIs, this is a different matter, as art needs to be created "
"using specific pixel sizes in software such as Photoshop, Gimp, Krita, etc."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:30
msgid ""
"Given layouts, aspect ratios, resolutions and pixel densities can change so "
"much, it is no longer possible to design UIs for every specific screen. "
"Another method must be used."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:34
msgid "One size fits all"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:36
msgid ""
"The most common approach nowadays is to just use a single *base* resolution "
"and then fit it to everything else. This resolution is how most players are "
"expected to play the game (given their hardware). For mobile, Google has "
"useful `stats <https://developer.android.com/about/dashboards>`_ online, and "
"for desktop, Steam `also does <https://store.steampowered.com/hwsurvey/Steam-"
"Hardware-Software-Survey-Welcome-to-Steam>`_."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:41
msgid ""
"As an example, Steam shows that the most common *primary display resolution* "
"is 1920x1080, so a sensible approach is to develop a game for this "
"resolution, then handle scaling for different sizes and aspect ratios."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:43
msgid "Godot provides a several useful tools to do this easily."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:46
msgid "Base size"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:48
msgid ""
"A base size for the window can be specified in the project settings under "
"\"Display\", \"Window\"."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:53
msgid ""
"However, what it does is not completely obvious; the engine will *not* "
"attempt to switch the monitor to this resolution. Rather, think of this "
"setting as the \"design size\", i.e. the size of the area that you work with "
"in the editor. This setting corresponds directly to the size of the blue "
"rectangle in the 2D editor."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:59
msgid ""
"There is often a need to support devices with screen and window sizes that "
"are different from this base size. Godot offers many ways to control how the "
"viewport will be resized and stretched to different screen sizes."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:65
msgid "Resizing"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:67
msgid ""
"There are several types of devices, with several types of screens, which in "
"turn have different pixel density and resolutions. Handling all of them can "
"be a lot of work, so Godot tries to make the developer's life a little "
"easier. The :ref:`Viewport <class_Viewport>` node has several functions to "
"handle resizing, and the root node of the scene tree is always a viewport "
"(scenes loaded are instanced as a child of it, and it can always be accessed "
"by calling ``get_tree().get_root()`` or ``get_node(\"/root\")``)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:76
msgid ""
"In any case, while changing the root Viewport params is probably the most "
"flexible way to deal with the problem, it can be a lot of work, code and "
"guessing, so Godot provides a simple set of parameters in the project "
"settings to handle multiple resolutions."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:82
msgid "Stretch settings"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:84
msgid ""
"Stretch settings are located in the project settings, it's just a bunch of "
"configuration variables that provide several options:"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:90
msgid "Stretch Mode"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:92
msgid ""
"The \"Stretch Mode\" setting defines how the base size is stretched to fit "
"the resolution of the window or screen."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:97
msgid ""
"The animations below use a \"base size\" of just 16×9 pixels to demonstrate "
"the effect of different stretch modes. A single sprite, also 16×9 pixels in "
"size, covers the entire viewport, and a diagonal :ref:`Line2D "
"<class_Line2D>` is added on top of it:"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:107
msgid ""
"Stretch Mode = **Disabled** (default): No stretching happens. One unit in "
"the scene corresponds to one pixel on the screen. In this mode, the "
"\"Stretch Aspect\" setting has no effect."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:111
msgid ""
"This is a good option if you want full control over every screen pixel, and "
"is probably the best option for 3D games."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:116
msgid ""
"Stretch Mode = **2D**: In this mode, the size specified in display/width and "
"display/height in the project settings will be stretched to cover the whole "
"screen (taking the \"Stretch Aspect\" setting into account). This means that "
"everything will be rendered directly at the target resolution. 3D will be "
"largely unaffected, while in 2D there is no longer a 1:1 correspondence "
"between sprite pixels and screen pixels, which may result in scaling "
"artifacts."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:124
msgid ""
"This is a good option if your 2D artwork has a sufficiently high resolution "
"and does not require pixel-perfect rendering. Consider enabling texture "
"filtering and mipmapping on your 2D textures and fonts."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:131
msgid ""
"Stretch Mode = **Viewport**: Viewport scaling means that the size of the "
"root :ref:`Viewport <class_Viewport>` is set precisely to the base size "
"specified in the \"Display\" section of the project settings. The scene is "
"rendered to this viewport first. Finally, this viewport is scaled to fit the "
"screen (taking the \"Stretch Aspect\" setting into account)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:138
msgid ""
"This mode is useful when working with pixel-precise games, or for the sake "
"of rendering to a lower resolution for improving performance."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:144
msgid "Stretch Aspect"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:146
msgid ""
"The second setting is the stretch aspect. Note that this only takes effect "
"if \"Stretch Mode\" is set to something other than \"disabled\"."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:149
msgid ""
"In the animations below, you will notice gray and black areas. The black "
"areas are added by the engine and cannot be drawn into. The gray areas are "
"part of your scene, and can be drawn to. The gray areas correspond to the "
"region outside the blue frame you see in the 2D editor."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:154
msgid ""
"Stretch Aspect = **Ignore**: Ignore the aspect ratio when stretching the "
"screen. This means that the original resolution will be stretched to exactly "
"fill the screen, even if it's wider or narrower. This may result in "
"nonuniform stretching: things looking wider or taller than designed."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:162
msgid ""
"Stretch Aspect = **Keep**: Keep aspect ratio when stretching the screen. "
"This means that the viewport retains its original size regardless of the "
"screen resolution, and black bars will be added to the top/bottom of the "
"screen (\"letterboxing\") or the sides (\"pillarboxing\")."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:168
msgid ""
"This is a good option if you know the aspect ratio of your target devices in "
"advance, or if you don't want to handle different aspect ratios."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:174
msgid ""
"Stretch Aspect = **Keep Width**: Keep aspect ratio when stretching the "
"screen. If the screen is wider than the base size, black bars are added at "
"the left and right (pillarboxing). But if the screen is taller than the base "
"resolution, the viewport will be grown in the vertical direction (and more "
"content will be visible to the bottom). You can also think of this as "
"\"Expand Vertically\"."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:181
msgid ""
"This is usually the best option for creating GUIs or HUDs that scale, so "
"some controls can be anchored to the bottom (:ref:`doc_size_and_anchors`)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:187
msgid ""
"Stretch Aspect = **Keep Height**: Keep aspect ratio when stretching the "
"screen. If the screen is taller than the base size, black bars are added at "
"the top and bottom (letterboxing). But if the screen is wider than the base "
"resolution, the viewport will be grown in the horizontal direction (and more "
"content will be visible to the right). You can also think of this as "
"\"Expand Horizontally\"."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:194
msgid ""
"This is usually the best option for 2D games that scroll horizontally (like "
"runners or platformers)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:199
msgid ""
"Stretch Aspect = **Expand**: Keep aspect ratio when stretching the screen, "
"but keep neither the base width nor height. Depending on the screen aspect "
"ratio, the viewport will either be larger in the horizontal direction (if "
"the screen is wider than the base size) or in the vertical direction (if the "
"screen is taller than the original size)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:209
msgid "Stretch Shrink"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:211
msgid ""
"The \"Shrink\" setting allows you to add an extra scaling factor on top of "
"what the \"Stretch\" options above already provide. The default value of 1 "
"means that no scaling occurs."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:215
msgid ""
"If, for example, you set \"Shrink\" to 4 and leave \"Stretch Mode\" on "
"\"Disabled\", each unit in your scene will correspond to 4×4 pixels on the "
"screen."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:219
msgid ""
"If \"Stretch Mode\" is set to something other than \"Disabled\", the size of "
"the root viewport is scaled down by the \"Shrink\" factor, and pixels in the "
"output are scaled up by the same amount. This is rarely useful for 2D games, "
"but can be used to increase performance in 3D games by rendering them at a "
"lower resolution."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:226
msgid "From scripts"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:228
msgid ""
"To configure stretching at runtime from a script, use the ``get_tree()."
"set_screen_stretch()`` function (see :ref:`SceneTree.set_screen_stretch() "
"<class_SceneTree_method_set_screen_stretch>`)."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:233
msgid "Reducing aliasing on downsampling"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:235
msgid ""
"If the game has a very high base resolution (say 4k), aliasing might appear "
"when downsampling to something considerably lower like 720. This can be "
"detected and reduced by forcing to shrink all images by 2 upon load (this is "
"very fast). This can be achieved by calling"
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:245
msgid "Before most game data is loaded."
msgstr ""

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:248
#, fuzzy
msgid "Handling aspect ratios"
msgstr "시그널 다루기"

#: ../../docs/tutorials/viewports/multiple_resolutions.rst:250
msgid ""
"Once scaling for different resolutions is accounted for, just make sure that "
"your *user interface* also scales for different aspect ratios. This can be "
"easily done using :ref:`anchors <doc_size_and_anchors>` and/or :ref:"
"`containers <doc_gui_containers>`."
msgstr ""
