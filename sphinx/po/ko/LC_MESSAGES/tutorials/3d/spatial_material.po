# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-26 10:06+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/spatial_material.rst:4
msgid "Spatial Material"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:7
msgid "Introduction"
msgstr "소개"

#: ../../docs/tutorials/3d/spatial_material.rst:9
msgid ""
"For Godot 3, instead of following the trend and focusing on shader graphs, "
"we put in most of the work offering a default material that covers far more "
"use cases. This replaces the old \"FixedMaterial\" in Godot 2.x"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:13
msgid ""
"SpatialMaterial is a 3D material and aims to have most features artists look "
"for in a material. Additionally, it can be converted to shader code and be "
"further modified if desired."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:17
msgid ""
"This tutorial will attempt to cover most parameters present in "
"SpatialMaterial."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:20
msgid "Flags"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:22
msgid ""
"Spatial materials have many flags determining the general usage of a "
"material."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:27
msgid "Transparent"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:29
msgid ""
"In Godot, materials are not transparent unless specifically toggled as such. "
"The main reason behind this is that transparent materials are rendered using "
"a different technique (sorted from back to front and rendered in order)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:33
msgid ""
"This technique is less efficient (many state changes happen) and makes the "
"materials unusable with many mid and post processing effects (such as SSAO, "
"SSR, etc) that require perfectly opaque geometry."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:37
msgid ""
"For this reason, materials in Godot are assumed opaque unless specified "
"otherwise. The main settings that enable transparency are:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:40
msgid "Transparent flag (this one)"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:41
msgid "Blend mode set to other than Mix"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:42
msgid "Enabling distance or proximity fade"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:45
msgid "Unshaded"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:47
msgid ""
"In most cases, it is common for materials to be affected by lighting "
"(shaded)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:49
msgid ""
"Sometimes, however, one might want to show just the albedo (color) and "
"ignore the rest. Toggling this flag on will remove all shading and show "
"pure, unlit, color."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:54
msgid "Vertex Lighting"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:56
msgid ""
"Godot has a more or less uniform cost per pixel (thanks to depth pre pass). "
"All lighting calculations are made by running the lighting shader on every "
"pixel."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:59
msgid ""
"As these calculations are costly, performance can be brought down "
"considerably in some corner cases such as drawing several layers of "
"transparency (common in particle systems). Switching to per vertex lighting "
"may help these cases."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:62
msgid ""
"Additionally, on low-end or mobile devices, switching to vertex lighting can "
"considerably increase rendering performance."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:67
msgid ""
"Keep in mind that when vertex lighting is enabled, only directional lighting "
"can produce shadows (for performance reasons)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:70
msgid "No Depth Test"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:72
msgid ""
"In order for close objects to appear over far away objects, depth testing is "
"performed. Disabling it has the result of objects appearing over (or under) "
"everything else."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:75
msgid ""
"Disabling this makes the most sense for drawing indicators in world space, "
"and works very well with the \"render priority\" property of Material (see "
"bottom)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:81
msgid "Use Point Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:83
msgid ""
"This option is only active when the geometry rendered is made of points (it "
"generally is just made of triangles when imported from 3D DCCs). If so, then "
"points can be sized (see below)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:88
msgid "World Triplanar"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:90
msgid ""
"When using triplanar mapping (see below, in the UV1 and UV2 settings) "
"triplanar is computed in object local space. This option makes triplanar "
"work in world space."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:94
msgid "Fixed Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:96
msgid ""
"Makes the object rendered at the same size no matter the distance. This is, "
"again, useful mostly for indicators (no depth test and high render priority) "
"and some types of billboards."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:100
msgid "Do Not Receive Shadows"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:102
msgid ""
"Makes the object not receive any kind of shadow that would otherwise be cast "
"onto it."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:105
msgid "Vertex Color"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:107
msgid ""
"This menu allows choosing what is done by default to vertex colors that come "
"from your 3D modelling application. By default, they are ignored."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:113
msgid "Use as Albedo"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:115
msgid "Vertex color is used as albedo color."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:118
msgid "Is SRGB"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:120
msgid ""
"Most 3D DCCs will likely export vertex colors as SRGB, so toggling this "
"option on will help them look correct."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:125
msgid "Parameters"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:127
msgid ""
"SpatialMaterial also has several configurable parameters to tweak many "
"aspects of the rendering:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:132
msgid "Diffuse Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:134
msgid ""
"Specifies the algorithm used by diffuse scattering of light when hitting the "
"object. The default one is Burley. Other modes are also available:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:137
msgid ""
"**Burley:** Default mode, the original Disney Principled PBS diffuse "
"algorithm."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:138
msgid "**Lambert:** Is not affected by roughness."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:139
msgid ""
"**Lambert Wrap:** Extends Lambert to cover more than 90 degrees when "
"roughness increases. Works great for hair and simulating cheap subsurface "
"scattering. This implementation is energy conserving."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:140
msgid ""
"**Oren Nayar:** This implementation aims to take microsurfacing into account "
"(via roughness). Works well for clay-like materials and some types of cloth."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:141
msgid ""
"**Toon:** Provides a hard cut for lighting, with smoothing affected by "
"roughness. It is recommended you disable sky contribution from your "
"environment's ambient light settings or disable ambient light in the spatial "
"material to achieve a better effect."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:146
msgid "Specular Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:148
msgid ""
"Specifies how the specular blob will be rendered. The specular blob "
"represents the shape of a light source reflected in the object."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:150
msgid "**ShlickGGX:** The most common blob used by PBR 3D engines nowadays."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:151
msgid ""
"**Blinn:** Common in previous-generation engines. Not worth using nowadays "
"but left here for the sake of compatibility."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:152
msgid "**Phong:** Same as above."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:153
msgid ""
"**Toon:** Creates a toon blob, which changes size depending on roughness."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:154
msgid "**Disabled:** Sometimes, that blob gets in the way. Be gone!"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:160
msgid "Blend Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:162
msgid ""
"Controls the blend mode for the material. Keep in mind that any mode other "
"than Mix forces the object to go through transparent pipeline."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:164
msgid "Mix: Default blend mode, alpha controls how much the object is visible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:165
msgid ""
"Add: Object is blended additively, nice for flares or some fire-like effects."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:166
msgid "Sub: Object is subtracted."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:167
msgid "Mul: Object is multiplied."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:172
msgid "Cull Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:174
msgid ""
"Determines which side of the object is not drawn when back-faces are "
"rendered:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:176
msgid "Back: Back of the object is culled when not visible (default)"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:177
msgid "Front: Front of the object is culled when not visible"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:178
msgid ""
"Disabled: Used for objects that are double sided (no culling is performed)"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:181
msgid "Depth Draw Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:183
msgid "Specifies when depth rendering must take place."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:185
msgid "Opaque Only (default): Depth is only drawn for opaque objects"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:186
msgid "Always: Depth draw is drawn for both opaque and transparent objects"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:187
msgid ""
"Never: No depth draw takes place (note: do not confuse with depth test "
"option above)"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:188
msgid ""
"Depth Pre-Pass: For transparent objects, an opaque pass is made first with "
"the opaque parts, then transparency is drawn above. Use this option with "
"transparent grass or tree foliage."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:194
msgid "Line Width"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:196
msgid ""
"When drawing lines, specify the width of the lines being drawn. This option "
"is not available in most modern hardware."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:199
msgid "Point Size"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:201
msgid "When drawing points, specify the point size in pixels."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:204
msgid "Billboard Mode"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:206
msgid ""
"Enables billboard mode for drawing materials. This controls how the object "
"faces the camera:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:208
msgid "Disabled: Billboard mode is disabled"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:209
msgid ""
"Enabled: Billboard mode is enabled, object -Z axis will always face the "
"camera."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:210
msgid "Y-Billboard: Object X axis will always be aligned with the camera"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:211
msgid ""
"Particles: When using particle systems, this type of billboard is best, "
"because it allows specifying animation options."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:215
msgid "Above options are only enabled for Particle Billboard."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:218
msgid "Grow"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:220
msgid "Grows the object vertices in the direction pointed by their normals:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:224
msgid ""
"This is commonly used to create cheap outlines. Add a second material pass, "
"make it black and unshaded, reverse culling (Cull Front), and add some grow:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:230
msgid "Use Alpha Scissor"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:232
msgid ""
"When transparency other than 0 or 1 is not needed, it's possible to set a "
"threshold to avoid the object from rendering these pixels."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:236
msgid ""
"This renders the object via the opaque pipeline which is faster and allows "
"it to do mid and post process effects such as SSAO, SSR, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:239
msgid "Material colors, maps and channels"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:241
msgid ""
"Besides the parameters, what defines materials themselves are the colors, "
"textures and channels. Godot supports a extensive list of them. They will be "
"described in detail below:"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:244
msgid "Albedo"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:246
msgid ""
"Albedo is the base color for the material. Everything else works based on "
"it. When set to *unshaded* this is the only color that is visible as-is. In "
"previous versions of Godot, this channel was named *diffuse*. The change of "
"name mainly happened because, in PBR rendering, this color affects many more "
"calculations than just the diffuse lighting path."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:252
msgid "Albedo color and texture can be used together as they are multiplied."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:254
msgid ""
"*Alpha channel* in albedo color and texture is also used for the object "
"transparency. If you use a color or texture with *alpha channel*, make sure "
"to either enable transparency or *alpha scissoring* for it to work."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:259
msgid "Metallic"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:261
msgid ""
"Godot uses a Metallic model over competing models due to its simplicity. "
"This parameter pretty much defines how reflective the materials is. The more "
"reflective it is, the least diffuse/ambient light and the more reflected "
"light. This model is called \"energy conserving\"."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:266
msgid ""
"The \"specular\" parameter here is just a general amount of for the "
"reflectivity (unlike *metallic*, this one is not energy conserving, so "
"simply leave it as 0.5 and don't touch it unless you need to)."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:270
msgid ""
"The minimum internal reflectivity is 0.04, so (just like in real life) it's "
"impossible to make a material completely unreflective."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:276
msgid "Roughness"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:278
msgid ""
"Roughness affects mainly the way reflection happens. A value of 0 makes it a "
"perfect mirror while a value of 1 completely blurs the reflection "
"(simulating the natural microsurfacing). Most common types of materials can "
"be achieved from the right combination of *Metallic* and *Roughness*."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:285
msgid "Emission"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:287
msgid ""
"Emission specifies how much light is emitted by the material (keep in mind "
"this does not do lighting on surrounding geometry unless GI Probe is used). "
"This value is just added to the resulting final image and is not affected by "
"other lighting in the scene."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:296
msgid "Normalmap"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:298
msgid ""
"Normal mapping allows to set a texture that represents finer shape detail. "
"This does not modify geometry, just the incident angle for light. In Godot, "
"only R and G are used for normalmaps, in order to attain better "
"compatibility."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:305
msgid "Rim"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:307
msgid ""
"Some fabrics have small micro fur that causes light to scatter around it. "
"Godot emulates this with the *rim* parameter. Unlike other rim lighting "
"implementations which just use the emission channel, this one actually takes "
"light into account (no light means no rim). This makes the effect "
"considerably more believable."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:314
msgid ""
"Rim size depends on roughness, and there is a special parameter to specify "
"how it must be colored. If *tint* is 0, the color of the light is used for "
"the rim. If *tint* is 1, then the albedo of the material is used. Using "
"intermediate values generally works best."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:319
msgid "Clearcoat"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:321
msgid ""
"The *clearcoat* parameter is used mostly to add a *secondary* pass of "
"transparent coat to the material. This is common in car paint and toys. In "
"practice, it's a smaller specular blob added on top of the existing material."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:326
msgid "Anisotropy"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:328
msgid ""
"Changes the shape of the specular blow and aligns it to tangent space. "
"Anisotropy is commonly used with hair, or to make materials such as brushed "
"aluminium more realistic. It works especially well when combined with "
"flowmaps."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:336
msgid "Ambient Occlusion"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:338
msgid ""
"In Godot's new PBR workflow, it is possible to specify a pre-baked ambient "
"occlusion map. This map affects how much ambient light reaches each surface "
"of the object (it does not affect direct light). While it is possible to use "
"Screen Space Ambient Occlusion (SSAO) to generate AO, nothing will beat the "
"quality of a nicely baked AO map. It is recommended to pre-bake AO whenever "
"possible."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:346
msgid "Depth"
msgstr "깊이"

#: ../../docs/tutorials/3d/spatial_material.rst:348
msgid ""
"Setting a depth map to a material produces a ray-marched search to emulate "
"the proper displacement of cavities along the view direction. This is not "
"real added geometry, but an illusion of depth. It may not work for complex "
"objects, but it produces a realistic depth effect for textures. For best "
"results, *Depth* should be used together with normal mapping."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:356
msgid "Subsurface Scattering"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:358
msgid ""
"This effect emulates light that goes beneath an object's surface, is "
"scattered, and then comes out. It's useful to make realistic skin, marble, "
"colored liquids, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:365
msgid "Transmission"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:367
msgid ""
"Controls how much light from the lit side (visible to light) is transferred "
"to the dark side (opposite side to light). This works well for thin objects "
"such as tree/plant leaves, grass, human ears, etc."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:374
msgid "Refraction"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:376
msgid ""
"When refraction is enabled, it supersedes alpha blending, and Godot attempts "
"to fetch information from behind the object being rendered instead. This "
"allows distorting the transparency in a way similar to refraction."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:383
msgid "Detail"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:385
msgid ""
"Godot allows using secondary albedo and normal maps to generate a detail "
"texture, which can be blended in many ways. Combining with secondary UV or "
"triplanar modes, many interesting textures can be achieved."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:392
msgid "UV1 and UV2"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:394
msgid ""
"Godot supports 2 UV channels per material. Secondary UV is often useful for "
"AO or Emission (baked light). UVs can be scaled and offseted which is useful "
"in textures with repeat."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:398
msgid "Triplanar Mapping"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:400
msgid ""
"Triplanar mapping is supported for both UV1 and UV2. This is an alternative "
"way to obtain texture coordinates, often called \"Autotexture\". Textures "
"are sampled in X,Y and Z and blended by the normal. Triplanar can be either "
"worldspace or object space."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:405
msgid ""
"In the image below, you can see how all primitives share the same material "
"with world triplanar, so bricks continue smoothly between them."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:411
msgid "Proximity and Distance Fade"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:413
msgid ""
"Godot allows materials to fade by proximity to each other as well as "
"depending on the distance to the viewer. Proximity fade is useful for "
"effects such as soft particles or a mass of water with a smooth blending to "
"the shores. Distance fade is useful for light shafts or indicators that are "
"only present after a given distance."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:417
msgid ""
"Keep in mind enabling these enables alpha blending, so abusing them for a "
"whole scene is not generally a good idea."
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:422
msgid "Render Priority"
msgstr ""

#: ../../docs/tutorials/3d/spatial_material.rst:424
msgid ""
"Rendering order can be changed for objects although this is mostly useful "
"for transparent objects (or opaque objects that do depth draw but no color "
"draw, useful for cracks on the floor)."
msgstr ""
