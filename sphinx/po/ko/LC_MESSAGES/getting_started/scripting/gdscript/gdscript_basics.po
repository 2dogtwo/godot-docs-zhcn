# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:4
msgid "GDScript basics"
msgstr "GDScript 기초"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:7
msgid "Introduction"
msgstr "소개"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:9
msgid ""
"*GDScript* is a high-level, dynamically typed programming language used to "
"create content. It uses a syntax similar to `Python <https://en.wikipedia."
"org/wiki/Python_%28programming_language%29>`_ (blocks are indent-based and "
"many keywords are similar). Its goal is to be optimized for and tightly "
"integrated with Godot Engine, allowing great flexibility for content "
"creation and integration."
msgstr ""
"*GDScript*\\ 는 하이 레벨의, 동적 타입 프로그래밍 언어입니다. 문법은 `Python "
"<https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%EC%8D%AC>`_\\ 과 유사합니"
"다 (블록이 들여쓰기 기반이고, 많은 키워드가 비슷합니다). 이 언어의 목적은 내"
"용 만들기 및 통합에 좋은 유연성을 바탕으로, Godot 엔진과 강하게 통합되어 최적"
"화하는 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:17
msgid "History"
msgstr "역사"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:19
msgid ""
"In the early days, the engine used the `Lua <https://www.lua.org>`__ "
"scripting language. Lua is fast, but creating bindings to an object oriented "
"system (by using fallbacks) was complex and slow and took an enormous amount "
"of code. After some experiments with `Python <https://www.python.org>`__, it "
"also proved difficult to embed."
msgstr ""
"처음에는 `Lua <https://www.lua.org>`__ 스크립팅 언어를 사용했습니다. Lua는 빠"
"르지만, (Fallback을 사용해서) 객체 지향 시스템에 묶는 일은 복잡하고 느리면서"
"도 엄청난 양의 코드가 필요했습니다. `Python <https://www.python.org>`__\\ 을 "
"몇 번 사용해봤지만, 포함하기는 어려웠습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:25
msgid ""
"The last third party scripting language that was used for shipped games was "
"`Squirrel <http://squirrel-lang.org>`__, but it was dropped as well. At that "
"point, it became evident that a custom scripting language could more "
"optimally make use of Godot's particular architecture:"
msgstr ""
"게임을 배포하는데 사용한 마지막 외부 스크립팅 언어는 `Squirrel <http://"
"squirrel-lang.org>`__\\ 이었습니다, 하지만 역시 탈락했습니다. 이 시기에서, "
"Godot의 특수한 구조에 최적화된 언어는 맞춤 스크립팅 언어라는 것을 확신했습니"
"다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:30
msgid ""
"Godot embeds scripts in nodes. Most languages are not designed with this in "
"mind."
msgstr ""
"Godot는 노드에 스크립트를 삽입합니다. 대부분의 언어는 이런 생각으로 설계되진 "
"않죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:32
msgid ""
"Godot uses several built-in data types for 2D and 3D math. Script languages "
"do not provide this, and binding them is inefficient."
msgstr ""
"Godot는 2D와 3D 수학 용 내장 데이터 유형을 여러 개 사용합니다. 스크립트 언어"
"는 이런 데이터 유형을 제공하지 않고, 바인딩하는 것은 비효율적입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:34
msgid ""
"Godot uses threads heavily for lifting and initializing data from the net or "
"disk. Script interpreters for common languages are not friendly to this."
msgstr ""
"Godot는 넷 또는 디스크에서 데이터를 리프트하고 초기화하기 위해 스레드를 많이 "
"사용합니다. 일반적인 언어 용 스크립트 인터프리터는 스레드 사용에 친절하지 않"
"습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:37
msgid ""
"Godot already has a memory management model for resources, most script "
"languages provide their own, which results in duplicate effort and bugs."
msgstr ""
"Godot는 이미 리소스 용 메모리 관리 모델을 갖고 있지만, 대부분의 스크립트 언어"
"는 자체적인 모델을 갖고 있어서, 노력이 배로 들면서 버그를 초래합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:40
msgid ""
"Binding code is always messy and results in several failure points, "
"unexpected bugs and generally low maintainability."
msgstr ""
"코드를 바인딩 하는 것은 항상 엉망이면서 동시에 여러 실패 지점, 예기치 못한 버"
"그, 그리고 일반적으로 낮은 유지 능력을 초래합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:43
msgid ""
"The result of these considerations is *GDScript*. The language and "
"interpreter for GDScript ended up being smaller than the binding code itself "
"for Lua and Squirrel, while having equal functionality. With time, having a "
"built-in language has proven to be a huge advantage."
msgstr ""
"이 고려 사항의 결과물이 *GDScript*\\ 입니다. GDScript의 언어와 인터프리터는 "
"Lua와 Squirrel의 바인딩 코드보다 작아졌으면서도 같은 기능을 갖습니다. 시간이 "
"흐르면서 내장 언어를 갖는 것이 큰 장점이 된다는 것이 증명됐습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:49
msgid "Example of GDScript"
msgstr "GDScript 예제"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:51
msgid ""
"Some people can learn better by taking a look at the syntax, so here's a "
"simple example of how GDScript looks."
msgstr ""
"몇 몇 사람은 문법을 보는 것으로 언어를 더 잘 이해합니다. 따라서 GDScript를 어"
"떻게 사용하는 지 간단한 예제를 보여 드리겠습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:134
msgid ""
"If you have previous experience with statically typed languages such as C, C+"
"+, or C# but never used a dynamically typed one before, it is advised you "
"read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""
"이전에 C, C++, C#과 같은 정적 타입 언어에 대한 경험이 있지만, 한 번도 동적 타"
"입 언어를 써 본 적이 없다면, 이 튜토리얼을 읽는 것이 좋습니다: :ref:"
"`doc_gdscript_more_efficiently`."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:139
msgid "Language"
msgstr "언어"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:141
msgid ""
"In the following, an overview is given to GDScript. Details, such as which "
"methods are available to arrays or other objects, should be looked up in the "
"linked class descriptions."
msgstr ""
"여기서부터 GDScript의 개요입니다. 어떤 메서드가 배열 혹은 다른 객체에 이용할 "
"수 있는지와 같은 세부 사항은 클래스 설명의 링크를 확인해주세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:146
msgid "Identifiers"
msgstr "식별자(Identifier)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:148
msgid ""
"Any string that restricts itself to alphabetic characters (``a`` to ``z`` "
"and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an "
"identifier. Additionally, identifiers must not begin with a digit. "
"Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""
"알파벳 문자로 제한되는 문자열 (``a``\\ 부터 ``z``, ``A``\\ 부터 ``Z``), 숫자 "
"(``0``\\ 부터 ``9``), ``_``\\ 는 식별자입니다. 추가로 식별자는 숫자로 시작할 "
"수 없습니다. 식별자는 대소문자를 구분합니다 (``foo``\\ 는 ``FOO``\\ 와 다릅니"
"다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:154
msgid "Keywords"
msgstr "키워드(Keyword)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:156
msgid ""
"The following is the list of keywords supported by the language. Since "
"keywords are reserved words (tokens), they can't be used as identifiers. "
"Operators (like ``in``, ``not``, ``and`` or ``or``) and names of built-in "
"types as listed in the following sections are also reserved."
msgstr ""
"다음은 언어에서 지원하는 키워드 목록입니다. 키워드는 예약된 단어(토큰)이기 때"
"문에, 식별자로 사용할 수 없습니다. 다음 섹션에 나열된 (``in``, ``not``, "
"``and`` 혹은 ``or`` 와 같은) 연산자와 내장 타입 이름 역시 예약된 단어입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:161
msgid ""
"Keywords are defined in the `GDScript tokenizer <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ in "
"case you want to take a look under the hood."
msgstr ""
"키워드는 `GDScript tokenizer <https://github.com/godotengine/godot/blob/"
"master/modules/gdscript/gdscript_tokenizer.cpp>`_\\ 에서 정의됩니다. 정체가 "
"궁금하다면 확인해보세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:165
msgid "Keyword"
msgstr "키워드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:165
msgid "Description"
msgstr "설명"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:167
msgid "if"
msgstr "if"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:167
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:169
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:171
msgid "See `if/else/elif`_."
msgstr "`if/else/elif`_\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:169
msgid "elif"
msgstr "elif"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:171
msgid "else"
msgstr "else"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:173
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:809
msgid "for"
msgstr "for"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:173
msgid "See for_."
msgstr "for_\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:175
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:798
msgid "while"
msgstr "while"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:175
msgid "See while_."
msgstr "while_\\ 을 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:177
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:844
msgid "match"
msgstr "match"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:177
msgid "See match_."
msgstr "match_\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:179
msgid "break"
msgstr "break"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:179
msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr "현재의 ``for`` 또는 ``while`` 루프 실행을 끝냅니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:181
msgid "continue"
msgstr "continue"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:181
msgid ""
"Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr "즉시 ``for`` 또는 ``while`` 루프의 다음 반복으로 건너 뜁니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:183
msgid "pass"
msgstr "pass"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:183
msgid ""
"Used where a statement is required syntactically but execution of code is "
"undesired, e.g. in empty functions."
msgstr ""
"명령문이 문법적으로는 필요하지만 실행할 만한 코드가 마땅치 않을 때 사용됩니"
"다. 예: 빈 함수."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:185
msgid "return"
msgstr "return"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:185
msgid "Returns a value from a function."
msgstr "함수에서 값을 반환합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:187
msgid "class"
msgstr "class"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:187
msgid "Defines a class."
msgstr "클래스를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:189
msgid "extends"
msgstr "extends"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:189
msgid "Defines what class to extend with the current class."
msgstr "현재 클래스로 확장할 클래스를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:191
msgid "is"
msgstr "is"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:191
msgid ""
"Tests whether a variable extends a given class, or is of a given built-in "
"type."
msgstr ""
"변수가 주어진 클래스를 확장하는지, 혹은 변수가 주어진 내장 유형인지 여부를 테"
"스트합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:193
msgid "as"
msgstr "as"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:193
msgid "Cast the value to a given type if possible."
msgstr "가능하다면 주어진 유형으로 값을 캐스트합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:195
msgid "self"
msgstr "self"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:195
msgid "Refers to current class instance."
msgstr "현재 클래스 인스턴스를 참조합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:197
msgid "tool"
msgstr "tool"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:197
msgid "Executes the script in the editor."
msgstr "편집기에서 스크립트를 실행합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:199
msgid "signal"
msgstr "signal"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:199
msgid "Defines a signal."
msgstr "시그널을 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:201
msgid "func"
msgstr "func"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:201
msgid "Defines a function."
msgstr "함수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:203
msgid "static"
msgstr "static"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:203
msgid "Defines a static function. Static member variables are not allowed."
msgstr "정적 함수를 정의합니다. 정적 멤버 변수를 허용하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:205
msgid "const"
msgstr "const"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:205
msgid "Defines a constant."
msgstr "상수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:207
msgid "enum"
msgstr "enum"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:207
msgid "Defines an enum."
msgstr "열거형을 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:209
msgid "var"
msgstr "var"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:209
msgid "Defines a variable."
msgstr "변수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:211
msgid "onready"
msgstr "onready"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:211
msgid ""
"Initializes a variable once the Node the script is attached to and its "
"children are part of the scene tree."
msgstr ""
"스크립트가 붙은 노드이고 노드의 자식이 씬 트리의 일부분인 경우, 변수를 초기화"
"합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:213
msgid "export"
msgstr "export"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:213
msgid ""
"Saves a variable along with the resource it's attached to and makes it "
"visible and modifiable in the editor."
msgstr "변수를 리소스와 함께 저장하고 편집기에서 보고 수정할 수 있게 만듭니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:215
msgid "setget"
msgstr "setget"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:215
msgid "Defines setter and getter functions for a variable."
msgstr "변수에 대한 setter(세터)와 getter(게터) 함수를 정의합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:217
msgid "breakpoint"
msgstr "breakpoint"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:217
msgid "Editor helper for debugger breakpoints."
msgstr "디버거 중단점 용 편집기 도우미."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:219
msgid "preload"
msgstr "preload"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:219
msgid "Preloads a class or variable. See `Classes as resources`_."
msgstr ""
"클래스나 변수를 미리 불러옵니다(Preload). `리소스로 취급되는 클래스`_\\ 를 참"
"고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:221
msgid "yield"
msgstr "yield"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:221
msgid "Coroutine support. See `Coroutines with yield`_."
msgstr ""
"Coroutine(코루틴)을 지원합니다. `yield를 갖는 Coroutine(코루틴)`_\\ 을 참고하"
"세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:223
msgid "assert"
msgstr "assert"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:223
msgid ""
"Asserts a condition, logs error on failure. Ignored in non-debug builds. See "
"`Assert keyword`_."
msgstr ""
"조건을 가정(Assert)하고 실패 시 오류를 기록합니다. 디버그가 아닌 빌드에서는 "
"무시됩니다. `Assert 키워드`_\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:225
msgid "remote"
msgstr "remote"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:225
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:227
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:229
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:231
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:233
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:235
msgid ""
"Networking RPC annotation. See :ref:`high-level multiplayer docs "
"<doc_high_level_multiplayer>`."
msgstr ""
"네트워킹 RPC(Remote Procedure Call, 원격 프로시저 호출) 주석. :ref:`하이 레"
"벨 멀티플레이어 문서 <doc_high_level_multiplayer>`\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:227
msgid "master"
msgstr "master"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:229
msgid "puppet"
msgstr "puppet"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:231
msgid "remotesync"
msgstr "remotesync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:233
msgid "mastersync"
msgstr "mastersync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:235
msgid "puppetsync"
msgstr "puppetsync"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:237
msgid "PI"
msgstr "PI"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:237
msgid "PI constant."
msgstr "PI 상수."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:239
msgid "TAU"
msgstr "TAU"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:239
msgid "TAU constant."
msgstr "TAU 상수."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:241
msgid "INF"
msgstr "INF"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:241
msgid "Infinity constant. Used for comparisons."
msgstr "무한대 상수. 비교로 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:243
msgid "NAN"
msgstr "NAN"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:243
msgid "NAN (not a number) constant. Used for comparisons."
msgstr "NAN (Not A Number, 숫자 아님) 상수. 비교로 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:247
msgid "Operators"
msgstr "연산자(Operator)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:249
msgid "The following is the list of supported operators and their precedence."
msgstr "다음은 지원하는 연산자 목록과 우선 순위입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:252
msgid "**Operator**"
msgstr "**연산자**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:252
msgid "**Description**"
msgstr "**설명**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:254
msgid "``x[index]``"
msgstr "``x[index]``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:254
msgid "Subscription (highest priority)"
msgstr "구독(Subscription) (가장 높은 우선 순위)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:256
msgid "``x.attribute``"
msgstr "``x.attribute``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:256
msgid "Attribute reference"
msgstr "속성 참조"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:258
msgid "``foo()``"
msgstr "``foo()``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:258
msgid "Function call"
msgstr "함수 호출"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:260
msgid "``is``"
msgstr "``is``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:260
msgid "Instance type checker"
msgstr "인스턴스 유형 검사기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:262
msgid "``~``"
msgstr "``~``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:262
msgid "Bitwise NOT"
msgstr "비트 단위 NOT"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:264
msgid "``-x``"
msgstr "``-x``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:264
msgid "Negative / Unary negation"
msgstr "음수 / 단항 부정"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:266
msgid "``*`` ``/`` ``%``"
msgstr "``*`` ``/`` ``%``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:266
msgid "Multiplication / Division / Remainder"
msgstr "곱하기 / 나누기 / 나머지"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:268
msgid ""
"These operators have the same behavior as C++. Integer division is truncated "
"rather than returning a fractional number, and the % operator is only "
"available for ints (\"fmod\" for floats)"
msgstr ""
"이 연산자는 C++의 연산자와 같습니다. 정수 나누기는 소수점 부분을 잘라냅니다. "
"그리고 % 연산자는 정수에만 사용됩니다 (실수 용 연산자는 \"fmod\"입니다)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:274
msgid "``+``"
msgstr "``+``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:274
msgid "Addition / Concatenation of arrays"
msgstr "배열의 추가 / 연결"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:276
msgid "``-``"
msgstr "``-``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:276
msgid "Subtraction"
msgstr "빼기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:278
msgid "``<<`` ``>>``"
msgstr "``<<`` ``>>``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:278
msgid "Bit shifting"
msgstr "비트 자리 옮김"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:280
msgid "``&``"
msgstr "``&``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:280
msgid "Bitwise AND"
msgstr "비트 단위 AND"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:282
msgid "``^``"
msgstr "``^``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:282
msgid "Bitwise XOR"
msgstr "비트 단위 XOR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:284
msgid "``|``"
msgstr "``|``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:284
msgid "Bitwise OR"
msgstr "비트 단위 OR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:286
msgid "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"
msgstr "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:286
msgid "Comparisons"
msgstr "비교"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:288
msgid "``in``"
msgstr "``in``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:288
msgid "Content test"
msgstr "내용 테스트"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:290
msgid "``!`` ``not``"
msgstr "``!`` ``not``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:290
msgid "Boolean NOT"
msgstr "불리언 NOT"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:292
msgid "``and`` ``&&``"
msgstr "``and`` ``&&``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:292
msgid "Boolean AND"
msgstr "불리언 AND"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:294
msgid "``or`` ``||``"
msgstr "``or`` ``||``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:294
msgid "Boolean OR"
msgstr "불리언 OR"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:296
msgid "``if x else``"
msgstr "``if x else``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:296
msgid "Ternary if/else"
msgstr "삼항 if/else"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:298
msgid "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=``"
msgstr "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:298
msgid "Assignment (lowest priority)"
msgstr "할당 (가장 낮은 우선 순위)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:302
msgid "Literals"
msgstr "리터럴(Literal)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:305
msgid "**Literal**"
msgstr "**리터럴**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:305
msgid "**Type**"
msgstr "**유형**"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:307
msgid "``45``"
msgstr "``45``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:307
msgid "Base 10 integer"
msgstr "기본 10진법 정수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:309
msgid "``0x8F51``"
msgstr "``0x8F51``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:309
msgid "Base 16 (hexadecimal) integer"
msgstr "기본 16진법 정수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:311
msgid "``0b101010``"
msgstr "``0b101010``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:311
msgid "Base 2 (binary) integer"
msgstr "기본 2진법 정수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:313
msgid "``3.14``, ``58.1e-10``"
msgstr "``3.14``, ``58.1e-10``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:313
msgid "Floating-point number (real)"
msgstr "부동 소수점 숫자 (실수)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:315
msgid "``\"Hello\"``, ``\"Hi\"``"
msgstr "``\"안녕하세요\"``, ``\"안녕\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:315
msgid "Strings"
msgstr "문자열"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:317
msgid "``\"\"\"Hello\"\"\"``"
msgstr "``\"\"\"안녕하세요\"\"\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:317
msgid "Multiline string"
msgstr "여러 줄 문자열"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:319
msgid "``@\"Node/Label\"``"
msgstr "``@\"Node/Label\"``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:319
msgid ":ref:`class_NodePath` or StringName"
msgstr "노드 경로(:ref:`class_NodePath`) 혹은 문자열 이름(StringName)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:321
msgid "``$NodePath``"
msgstr "``$NodePath``"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:321
msgid "Shorthand for ``get_node(\"NodePath\")``"
msgstr "``get_node(\"NodePath\")``\\ 의 짧은 표현"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:325
msgid "Comments"
msgstr "주석(Comment)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:327
msgid ""
"Anything from a ``#`` to the end of the line is ignored and is considered a "
"comment."
msgstr "``#``\\ 부터 줄 끝까지는 주석으로 간주되어 무시됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:337
msgid "Built-in types"
msgstr "내장 유형(Built-in type)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:339
msgid ""
"Built-in types are stack-allocated. They are passed as values. This means a "
"copy is created on each assignment or when passing them as arguments to "
"functions. The only exceptions are ``Array``\\ s and ``Dictionaries``, which "
"are passed by reference so they are shared. (Pooled arrays such as "
"``PoolByteArray`` are still passed as values.)"
msgstr ""
"내장 유형은 스택에 할당됩니다. 이 유형은 값으로 전달됩니다. 즉, 사본은 각 할"
"당에서, 혹은 유형이 인수로서 함수로 전달될 때 만들어집니다. 유일한 예외 사항"
"은 ``배열(Array)``\\ 과 ``딕셔너리(Dictionary)``\\ 로, 참조로 전달되기 때문"
"에 공유됩니다. (``PoolByteArray``\\ 와 같은 풀 형식의 배열은 여전히 값으로 전"
"달됩니다.)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:346
msgid "Basic built-in types"
msgstr "기본 내장 유형"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:348
msgid "A variable in GDScript can be assigned to several built-in types."
msgstr "GDScript의 변수에는 여러 내장 유형을 할당할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:351
msgid "null"
msgstr "null"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:353
msgid ""
"``null`` is an empty data type that contains no information and can not be "
"assigned any other value."
msgstr ""
"``null``\\ 은 빈 데이터 유형으로 정보를 갖고 있지 않습니다. 그리고 어떤 값이"
"라도 할당할 수 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:357
msgid ":ref:`bool <class_bool>`"
msgstr ":ref:`bool <class_bool>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:359
msgid "Short for \"boolean\", it can only contain ``true`` or ``false``."
msgstr ""
"\"불리언(Boolean)\"의 약자로, 오직 ``true`` 또는 ``false``\\ 만 갖습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:362
msgid ":ref:`int <class_int>`"
msgstr ":ref:`int <class_int>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:364
msgid ""
"Short for \"integer\", it stores whole numbers (positive and negative). It "
"is stored as a 64-bit value, equivalent to \"int64_t\" in C++."
msgstr ""
"\"정수(Integer)\"의 약자로, 모든 숫자 (양수와 음수)를 저장합니다. 64비트 값으"
"로 저장하며, 이는 C++에서 \"int64_t\"와 같습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:368
msgid ":ref:`float <class_float>`"
msgstr ":ref:`float <class_float>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:370
msgid ""
"Stores real numbers, including decimals, using floating-point values. It is "
"stored as a 64-bit value, equivalent to \"double\" in C++. Note: Currently, "
"data structures such as Vector2, Vector3, and PoolRealArray store 32-bit "
"single-precision \"float\" values."
msgstr ""
"소수점을 사용한 소수를 포함하는 실수를 저장합니다. 64비트 값으로 저장되며, 이"
"는 C++에서 \"double\"과 같습니다. 참고: 현재로서는 Vector2, Vector3, "
"PoolRealArray와 같은 데이터 구조는 32비트 단정도(Single-precision) \"float\" "
"값을 저장합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:376
msgid ":ref:`String <class_String>`"
msgstr ":ref:`String <class_String>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:378
msgid ""
"A sequence of characters in `Unicode format <https://en.wikipedia.org/wiki/"
"Unicode>`_. Strings can contain `standard C escape sequences <https://en."
"wikipedia.org/wiki/Escape_sequences_in_C>`_. GDScript also supports :ref:"
"`doc_gdscript_printf`."
msgstr ""
"`Unicode 형식 <https://ko.wikipedia.org/wiki/Unicode>`_\\ 에 있는 일련의 문"
"자. 문자열은 `표준 C 이스케이프 시퀀스 <https://en.wikipedia.org/wiki/"
"Escape_sequences_in_C>`_\\ 를 가질 수 있습니다. GDScript는 :ref:"
"`doc_gdscript_printf`\\ 도 지원합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:384
msgid "Vector built-in types"
msgstr "벡터 내장 유형"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:387
msgid ":ref:`Vector2 <class_Vector2>`"
msgstr ":ref:`Vector2 <class_Vector2>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:389
msgid ""
"2D vector type containing ``x`` and ``y`` fields. Can also be accessed as an "
"array."
msgstr ""
"2D 벡터 유형으로, ``x``\\ 와 ``y`` 영역을 갖고 있습니다. 배열로 접근할 수도 "
"있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:393
msgid ":ref:`Rect2 <class_Rect2>`"
msgstr ":ref:`Rect2 <class_Rect2>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:395
msgid ""
"2D Rectangle type containing two vectors fields: ``position`` and ``size``. "
"Also contains an ``end`` field which is ``position + size``."
msgstr ""
"2D 사각형 유형으로 두 개의 벡터 영역을 갖고 있습니다: ``position``\\ 과 "
"``size``. 또한 ``position + size``\\ 를 의미하는 ``end`` 영역을 갖습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:399
msgid ":ref:`Vector3 <class_Vector3>`"
msgstr ":ref:`Vector3 <class_Vector3>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:401
msgid ""
"3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be "
"accessed as an array."
msgstr ""
"3D 벡터 유형으로, ``x``, ``y``, ``z`` 영역을 갖고 있습니다. 배열로 접근할 수"
"도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:405
msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr ":ref:`Transform2D <class_Transform2D>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:407
msgid "3×2 matrix used for 2D transforms."
msgstr "3x2 행렬(Matrix)로 2D 변형에 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:410
msgid ":ref:`Plane <class_Plane>`"
msgstr ":ref:`Plane <class_Plane>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:412
msgid ""
"3D Plane type in normalized form that contains a ``normal`` vector field and "
"a ``d`` scalar distance."
msgstr ""
"표준화된 형태의 3D 평면(Plane) 유형으로 ``normal`` 벡터 영역과 ``d`` 스칼라 "
"거리를 갖고 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:416
msgid ":ref:`Quat <class_Quat>`"
msgstr ":ref:`Quat <class_Quat>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:418
msgid ""
"Quaternion is a datatype used for representing a 3D rotation. It's useful "
"for interpolating rotations."
msgstr ""
"사원수(Quaternion)는 3D 회전을 표현하기 위해 사용되는 데이터 유형입니다. 회"
"전 값을 보간하는 용도로 사용됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:422
msgid ":ref:`AABB <class_AABB>`"
msgstr ":ref:`AABB <class_AABB>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:424
msgid ""
"Axis-aligned bounding box (or 3D box) contains 2 vectors fields: "
"``position`` and ``size``. Also contains an ``end`` field which is "
"``position + size``."
msgstr ""
"축이 정렬된 경계 사각형으로 (혹은 3D 상자) 2개의 벡터 영역을 갖습니다: "
"``position``\\ 과 ``size``. 혹은 ``position + size``\\ 를 의미하는 ``end`` 영"
"역을 갖습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:429
msgid ":ref:`Basis <class_Basis>`"
msgstr ":ref:`Basis <class_Basis>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:431
msgid ""
"3x3 matrix used for 3D rotation and scale. It contains 3 vector fields "
"(``x``, ``y`` and ``z``) and can also be accessed as an array of 3D vectors."
msgstr ""
"3x3 행렬로 3D 회전과 크기 조정에 사용됩니다. 3개의 벡터 영역 (``x``, ``y``, "
"``z``)을 갖습니다. 3D 벡터의 배열로 접근할 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:436
msgid ":ref:`Transform <class_Transform>`"
msgstr ":ref:`Transform <class_Transform>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:438
msgid ""
"3D Transform contains a Basis field ``basis`` and a Vector3 field ``origin``."
msgstr ""
"3D 변형(Transform)으로, Basis 영역 ``basis``\\ 와 Vector3 영역 ``origin``\\ "
"을 갖습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:442
msgid "Engine built-in types"
msgstr "엔진 내장 타입"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:445
msgid ":ref:`Color <class_Color>`"
msgstr ":ref:`Color <class_Color>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:447
msgid ""
"Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can also "
"be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""
"색상(Color) 데이터 유형으로 ``r``, ``g``, ``b``, ``a`` 영역을 갖습니다. 색조/"
"채도/명도 용으로 ``h``, ``s``, ``v``\\ 로 접근할 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:451
msgid ":ref:`NodePath <class_NodePath>`"
msgstr ":ref:`NodePath <class_NodePath>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:453
msgid ""
"Compiled path to a node used mainly in the scene system. It can be easily "
"assigned to, and from, a String."
msgstr ""
"노드로 컴파일된 경로로, 주로 씬 시스템에서 사용됩니다. 쉽게 문자열로 할당하거"
"나 할당될 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:457
msgid ":ref:`RID <class_RID>`"
msgstr ":ref:`RID <class_RID>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:459
msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""
"리소스 ID (RID). 서버는 불투명한 데이터를 참조하기 위해 제네릭 RID를 사용합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:462
msgid ":ref:`Object <class_Object>`"
msgstr ":ref:`Object <class_Object>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:464
msgid "Base class for anything that is not a built-in type."
msgstr "내장 유형이 아닌 모든 것의 기본 클래스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:467
msgid "Container built-in types"
msgstr "컨테이너(Container) 내장 유형"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:470
msgid ":ref:`Array <class_Array>`"
msgstr ":ref:`Array <class_Array>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:472
msgid ""
"Generic sequence of arbitrary object types, including other arrays or "
"dictionaries (see below). The array can resize dynamically. Arrays are "
"indexed starting from index ``0``. Negative indices count from the end."
msgstr ""
"임의 객체 유형의 일반적인 시퀀스(Sequence)로, 다른 배열(Array)이나 딕셔너리"
"(Dictionary)를 포함합니다 (아래를 참고하세요). 배열의 크기는 동적으로 조절할 "
"수 있습니다. 배열은 인덱스 ``0``\\ 부터 번호를 매깁니다. 번호를 음수로 하면 "
"배열의 끝부터 셉니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:486
msgid ""
"GDScript arrays are allocated linearly in memory for speed. Large arrays "
"(more than tens of thousands of elements) may however cause memory "
"fragmentation. If this is a concern, special types of arrays are available. "
"These only accept a single data type. They avoid memory fragmentation and "
"use less memory, but are atomic and tend to run slower than generic arrays. "
"They are therefore only recommended to use for large data sets:"
msgstr ""
"GDScript 배열은 속도를 위해 선형적으로 메모리에 할당됩니다. (수 만개보다 더) "
"많은 배열은 메모리 단편화를 발생할 수 있습니다. 이것이 염려된다면 특수 유형"
"의 배열을 사용할 수 있습니다. 이 배열에는 하나의 데이터 유형만 들어갈 수 있습"
"니다. 메모리 단편화를 방지할 뿐더러, 더 적은 메모리를 사용하지만 원자적이고 "
"기본 배열보다 더 느리게 실행됩니다. 따라서 많은 데이터 집합을 사용할 때만 추"
"천합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:493
msgid ""
":ref:`PoolByteArray <class_PoolByteArray>`: An array of bytes (integers from "
"0 to 255)."
msgstr ""
":ref:`PoolByteArray <class_PoolByteArray>`: 바이트의 배열 (0부터 255까지의 정"
"수)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:494
msgid ":ref:`PoolIntArray <class_PoolIntArray>`: An array of integers."
msgstr ":ref:`PoolIntArray <class_PoolIntArray>`: 정수의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:495
msgid ":ref:`PoolRealArray <class_PoolRealArray>`: An array of floats."
msgstr ":ref:`PoolRealArray <class_PoolRealArray>`: 실수의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:496
msgid ":ref:`PoolStringArray <class_PoolStringArray>`: An array of strings."
msgstr ":ref:`PoolStringArray <class_PoolStringArray>`: 문자열의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:497
msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: An array of :ref:`Vector2 "
"<class_Vector2>` objects."
msgstr ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: :ref:`Vector2 "
"<class_Vector2>` 객체의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:498
msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: An array of :ref:`Vector3 "
"<class_Vector3>` objects."
msgstr ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: :ref:`Vector3 "
"<class_Vector3>` 객체의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:499
msgid ""
":ref:`PoolColorArray <class_PoolColorArray>`: An array of :ref:`Color "
"<class_Color>` objects."
msgstr ""
":ref:`PoolColorArray <class_PoolColorArray>`: :ref:`Color <class_Color>` 객체"
"의 배열."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:502
msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr ":ref:`Dictionary <class_Dictionary>`"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:504
msgid "Associative container which contains values referenced by unique keys."
msgstr "고유 키로 참조되는 값을 갖는 연관 컨테이너입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:517
msgid ""
"Lua-style table syntax is also supported. Lua-style uses ``=`` instead of ``:"
"`` and doesn't use quotes to mark string keys (making for slightly less to "
"write). Note however that like any GDScript identifier, keys written in this "
"form cannot start with a digit."
msgstr ""
"Lua 스타일의 테이블 문법 역시 지원합니다. Lua 스타일은 ``:`` 대신 ``=``\\ 을 "
"사용하고 (문자의 양을 줄이기 위해) 문자열 키를 표시하기 위한 따옴표를 사용하"
"지 않습니다. 하지만 모든 GDScript 식별자와 마찬가지로, 이 양식에 맞더라도 키"
"를 숫자로 시작할 수 없습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:531
msgid ""
"To add a key to an existing dictionary, access it like an existing key and "
"assign to it::"
msgstr ""
"존재하는 딕셔너리에 키를 추가하려면, 기존 키와 같은 방식으로 접근한 뒤 할당해"
"야 합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:540
msgid "Data"
msgstr "데이터(Data)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:543
msgid "Variables"
msgstr "변수(Variable)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:545
msgid ""
"Variables can exist as class members or local to functions. They are created "
"with the ``var`` keyword and may, optionally, be assigned a value upon "
"initialization."
msgstr ""
"변수는 클래스 멤버, 혹은 함수에 지역으로 존재할 수 잇습니다. 변수는 ``var`` "
"키워드 만들 수 있으며, 초기화에 값을 지정할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:556
msgid ""
"Variables can optionally have a type specification. When a type is "
"specified, the variable will be forced to have always that same type, and "
"trying to assign an incompatible value will raise an error."
msgstr ""
"변수는 선택적으로 유형을 지정할 수 있습니다. 유형을 지정하면, 그 변수는 항상 "
"같은 유형으로 제한되며, 유형에 맞지 않는 값을 할당하려 하면 오류가 발생합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:560
msgid ""
"Types are specified in the variable declaration using a ``:`` (colon) symbol "
"after the variable name, followed by the type."
msgstr ""
"유형은 변수 선언에서 변수 이름 뒤에 ``:`` (쌍점) 기호를 붙인 다음, 유형 이름"
"을 지정합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:568
msgid ""
"If the variable is initialized within the declaration, the type can be "
"inferred, so it's possible to omit the type name::"
msgstr ""
"변수가 선언 내에서 초기화된다면, 유형은 유추할 수 있게 됩니다. 따라서 유형 이"
"름을 생략하는 것이 가능합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:574
msgid ""
"Type inference is only possible if the assigned value has a defined type, "
"otherwise it will raise an error."
msgstr ""
"유형 추론은 할당된 값이 정의된 유형이 있는 경우에만 가능합니다. 그렇지 않으"
"면 오류가 발생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:577
msgid "Valid types are:"
msgstr "올바른 타입은 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:579
msgid "Built-in types (Array, Vector2, int, String, etc.)."
msgstr "내장 유형 (Array, Vector2, int, String 등)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:580
msgid "Engine classes (Node, Resource, Reference, etc.)."
msgstr "엔진 클래스 (Node, Resource, Reference 등)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:581
msgid ""
"Constant names if they contain a script resource (``MyScript`` if you "
"declared ``const MyScript = preload(\"res://my_script.gd\")``)."
msgstr ""
"스크립트 리소스가 포함된 상수 이름 (``const MyScript = preload(\"res://"
"my_script.gd\")``\\ 를 선언했다면 ``MyScript``\\ 가 이에 속합니다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:582
msgid ""
"Other classes in the same script, respecting scope (``InnerClass."
"NestedClass`` if you declared ``class NestedClass`` inside the ``class "
"InnerClass`` in the same scope)."
msgstr ""
"같은 스크립트에서 유효 범위를 준수하는 다른 클래스 (같은 유효 범위에서 "
"``class InnerClass`` 안에 ``class NestedClass``\\ 를 선언했다면 ``InnerClass."
"NestedClass``\\ 가 이에 속합니다)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:583
msgid "Script classes declared with the ``class_name`` keyword."
msgstr "``class_name`` 키워드로 선언된 스크립트 클래스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:586
msgid "Casting"
msgstr "캐스팅(Casting)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:588
msgid ""
"Values assigned to typed variables must have a compatible type. If it's "
"needed to coerce a value to be of a certain type, in particular for object "
"types, you can use the casting operator ``as``."
msgstr ""
"유형이 있는 변수에는 그에 맞는 유형을 지닌 값을 지정해야 합니다. 만약 값을 특"
"정 유형으로, 특히 객체 유형으로 강제 변환해야 한다면, 캐스팅 연산자 ``as``\\ "
"를 사용해야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:592
msgid ""
"Casting between object types results in the same object if the value is of "
"the same type or a subtype of the cast type."
msgstr ""
"객체 유형 간 캐스팅에서 값이 캐스트 유형과 같은 유형이거나 하위 유형이라면 같"
"은 객체를 만듭니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:600
msgid ""
"If the value is not a subtype, the casting operation will result in a "
"``null`` value."
msgstr "값이 하위 유형이 아니라면 캐스팅 연산자는 ``null`` 값을 내보냅니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:607
msgid ""
"For built-in types, they will be forcibly converted if possible, otherwise "
"the engine will raise an error."
msgstr ""
"내장 유형의 경우, 가능하다면 강제로 유형을 변환하지만, 불가능하다면 오류를 발"
"생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:616
msgid ""
"Casting is also useful to have better type-safe variables when interacting "
"with the scene tree::"
msgstr ""
"캐스팅은 더 유형에 안전한 변수를 만드는데 유용합니다. 씬 트리에서 상호작용하"
"다 보면 변수의 유형에 불확실해질 수도 있기 때문이죠::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:626
msgid "Constants"
msgstr "상수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:628
msgid ""
"Constants are similar to variables, but must be constants or constant "
"expressions and must be assigned on initialization."
msgstr ""
"상수는 변수와 비슷하지만, 상수 또는 상수 식이어야만 하며 초기화 시 값이 지정"
"되어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:642
msgid ""
"Although the type of constants is inferred from the assigned value, it's "
"also possible to add explicit type specification::"
msgstr ""
"상수의 유형은 지정된 값에서 유추할 수 있지만, 명시적인 유형 지정을 추가할 수"
"도 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:648
msgid "Assigning a value of an incompatible type will raise an error."
msgstr "맞지 않은 유형의 값을 지정하면 오류가 발생합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:651
msgid "Enums"
msgstr "열거형(Enum)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:653
msgid ""
"Enums are basically a shorthand for constants, and are pretty useful if you "
"want to assign consecutive integers to some constant."
msgstr ""
"열거형은 기본적으로 상수의 축약형으로, 연속적인 정수를 일부 상수에 지정할 때 "
"꽤 유용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:656
msgid ""
"If you pass a name to the enum, it will put all the keys inside a constant "
"dictionary of that name."
msgstr ""
"열거형에 이름을 전달하면, 열거형은 해당 이름의 상수 딕셔너리 안에 모든 키를 "
"넣습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:659
msgid ""
"In Godot 3.1 and later, keys in a named enum are not registered as global "
"constants. They should be accessed prefixed by the enum's name (``Name."
"KEY``); see an example below."
msgstr ""
"Godot 3.1부터는, 이름있는 열거형에서 키(Key)는 전역 상수로 등록할 수 없습니"
"다. 키에 접근하려면 열거형의 이름이 앞에 있어야합니다 (``이름.KEY``). 아래의 "
"예제를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:679
msgid "Functions"
msgstr "함수(Function)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:681
msgid ""
"Functions always belong to a `class <Classes_>`_. The scope priority for "
"variable look-up is: local → class member → global. The ``self`` variable is "
"always available and is provided as an option for accessing class members, "
"but is not always required (and should *not* be sent as the function's first "
"argument, unlike Python)."
msgstr ""
"함수는 항상 `클래스 <Classes_>`_\\ 에 속합니다. 변수 조회 범위의 우선 순위는 "
"다음과 같습니다: 지역(Local) → 클래스 멤버(Class Member) → 전역(Global). "
"``self`` 변수는 항상 사용할 수 있고, 클래스 멤버에 접근할 수 있는 설정으로 제"
"공합니다. 하지만 항상 필요한 것은 아닙니다 (함수의 첫 번째 인수로 보내서는 *"
"안* 됩니다. Python과는 다른 점이죠)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:694
msgid ""
"A function can ``return`` at any point. The default return value is ``null``."
msgstr ""
"함수는 언제든지 ``반환(return)``\\ 할 수 있습니다. 기본 반환 값은 ``null``\\ "
"입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:696
msgid ""
"Functions can also have type specification for the arguments and for the "
"return value. Types for arguments can be added in a similar way to "
"variables::"
msgstr ""
"그리고 함수는 인수와 반환 값의 유형 지정을 할 수 있습니다. 인수의 유형은 변수"
"에서와 비슷한 방식으로 추가할 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:702
msgid ""
"If a function argument has a default value, it's possible to infer the type::"
msgstr "함수 인수가 기본 값을 갖는다면, 유형을 추론할 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:707
msgid ""
"The return type of the function can be specified after the arguments list "
"using the arrow token (``->``)::"
msgstr ""
"함수의 반환 유형은 화살표 토큰 (``->``)을 사용하여 인수 목록 뒤에 지정할 수 "
"있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:713
msgid ""
"Functions that have a return type **must** return a proper value. Setting "
"the type as ``void`` means the function doesn't return anything. Void "
"functions can return early with the ``return`` keyword, but they can't "
"return any value."
msgstr ""
"반환 유형을 갖는 함수는 **반드시** 그에 맞는 값을 반환해야 합니다. 유형을 "
"``void``\\ 로 설정하면 함수는 아무 것도 반환하면 안 됩니다. Void 함수는 "
"``return`` 키워드로 함수에서 일찍 반환할 수 있지만, 거기서 값을 반환하면 안 "
"됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:722
msgid ""
"Non-void functions must **always** return a value, so if your code has "
"branching statements (such as an ``if``/``else`` construct), all the "
"possible paths must have a return. E.g., if you have a ``return`` inside an "
"``if`` block but not after it, the editor will raise an error because if the "
"block is not executed, the function won't have a valid value to return."
msgstr ""
"Void가 아닌 함수는 반드시 **항상** 값을 반환해야 합니다. 따라서 코드가 "
"(``if``/``else`` 구조와 같은) 분기문을 갖고 있다면, 모든 가능한 경로에 반환"
"이 필요합니다. 다시 말해 ``if`` 블록 안에 ``return``\\ 을 넣어 줬지만, 그 이"
"후에는 하지 않았다면, 편집기는 오류를 발생합니다. 조건에 맞지 않아 블록이 실"
"행하지 않았다면, 함수는 올바른 값을 반환할 수 없기 때문이죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:730
msgid "Referencing functions"
msgstr "함수 참조하기(Referencing functions)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:732
msgid ""
"Contrary to Python, functions are *not* first-class objects in GDScript. "
"This means they cannot be stored in variables, passed as an argument to "
"another function or be returned from other functions. This is for "
"performance reasons."
msgstr ""
"Python과 달리, 함수는 GDScript에서 최상위 클래스 객체가 *아닙니다*. 즉, 함수"
"를 변수에 저장할 수 없고, 다른 함수에 인수로 전달되거나 다른 함수로부터 반환"
"될 수 없습니다. 성능의 문제 때문입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:736
msgid ""
"To reference a function by name at run-time, (e.g. to store it in a "
"variable, or pass it to another function as an argument) one must use the "
"``call`` or ``funcref`` helpers::"
msgstr ""
"런타임에 함수를 이름으로 참조하려면 (예: 그것을 변수로 저장하거나, 다른 함수"
"에 인수로 전달하는 경우), ``call``\\ 이나 ``funcref`` 도우미를 사용해야 합니"
"다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:750
msgid "Static functions"
msgstr "정적 함수(Static functions)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:752
msgid ""
"A function can be declared static. When a function is static, it has no "
"access to the instance member variables or ``self``. This is mainly useful "
"to make libraries of helper functions::"
msgstr ""
"함수를 정적으로 선언할 수 있습니다. 함수가 정적인 상태라면, 인스턴스 멤버 변"
"수나 ``self``\\ 로 접근할 수 없습니다. 주로 도우미 함수의 라이브러리를 만드는"
"데 유용합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:761
msgid "Statements and control flow"
msgstr "명령문(Statement)과 제어 흐름(Control Flow)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:763
msgid ""
"Statements are standard and can be assignments, function calls, control flow "
"structures, etc (see below). ``;`` as a statement separator is entirely "
"optional."
msgstr ""
"명령문은 표준으로 할당(Assignment), 함수 호출(Function Call), 제어 흐름 "
"(Control Flow) 구조 등이 될 수 있습니다. 명령문 구분 기호인 ``;``\\ 의 사용"
"은 자유입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:768
msgid "if/else/elif"
msgstr "if/else/elif"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:770
msgid ""
"Simple conditions are created by using the ``if``/``else``/``elif`` syntax. "
"Parenthesis around conditions are allowed, but not required. Given the "
"nature of the tab-based indentation, ``elif`` can be used instead of "
"``else``/``if`` to maintain a level of indentation."
msgstr ""
"간단한 조건은 ``if``/``else``/``elif`` 문법을 사용해 만들 수 있습니다. 조건"
"문 주변에 괄호를 씌워도 되지만, 필수는 아닙니다. 탭 기반 들여쓰기의 특성을 감"
"안하여, ``elif`` 는 ``else``/``if`` 대신 사용하여 들여쓰기 높이를 유지할 수 "
"있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:784
msgid "Short statements can be written on the same line as the condition::"
msgstr "간단한 명령문은 조건처럼 같은 줄에 적을 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:791
msgid ""
"Sometimes, you might want to assign a different initial value based on a "
"boolean expression. In this case, ternary-if expressions come in handy::"
msgstr ""
"때로는, 불리언(Boolean) 표현식을 기반으로 다른 초기 값을 지정해야 하는 경우"
"가 있습니다. 이 경우에는 삼항 표현식을 쓰면 됩니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:800
msgid ""
"Simple loops are created by using ``while`` syntax. Loops can be broken "
"using ``break`` or continued using ``continue``:"
msgstr ""
"간단한 루프는 ``while`` 문법으로 만들 수 있습니다. 루프는 ``break``\\ 를 사용"
"하여 끊거나 ``continue``\\ 를 사용하여 계속 갈 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:811
msgid ""
"To iterate through a range, such as an array or table, a *for* loop is used. "
"When iterating over an array, the current array element is stored in the "
"loop variable. When iterating over a dictionary, the *index* is stored in "
"the loop variable."
msgstr ""
"배열이나 테이블과 같은 범위에서 반복을 시행하려면 *for* 루프를 사용합니다. "
"한 배열을 반복할 때, 현재 배열 요소는 루프 변수에 저장됩니다. 딕셔너리를 반복"
"할 때, *인덱스*\\ 는 루프 변수에 저장됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:846
msgid ""
"A ``match`` statement is used to branch execution of a program. It's the "
"equivalent of the ``switch`` statement found in many other languages, but "
"offers some additional features."
msgstr ""
"``match`` 명령문은 프로그램 실행을 분기화하는 데 사용됩니다. 이것은 많은 다"
"른 언어에서 찾을 수 있는 ``switch`` 명령문과 유사하지만 몇 가지 추가 기능을 "
"제공합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:849
msgid "Basic syntax::"
msgstr "기본 문법::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:860
msgid "**Crash-course for people who are familiar with switch statements**:"
msgstr "**switch 명령문에 익숙한 사람들을 위한 집중 강좌**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:862
msgid "Replace ``switch`` with ``match``."
msgstr "``switch``\\ 를 ``match``\\ 로 바꾸세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:863
msgid "Remove ``case``."
msgstr "``case``\\ 를 제거하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:864
msgid ""
"Remove any ``break``\\ s. If you don't want to ``break`` by default, you can "
"use ``continue`` for a fallthrough."
msgstr ""
"모든 ``break``\\ 를 제거하세요. 기본적으로 ``break``\\ 가 되지 않도록 하고 싶"
"다면, 다른 언어의 fallthrough 키워드처럼 ``continue``\\ 를 사용할 수 있습니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:865
msgid "Change ``default`` to a single underscore."
msgstr "``default``\\ 를 하나의 밑줄로 변경하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:868
msgid "**Control flow**:"
msgstr "**제어 흐름(Control flow)**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:870
msgid ""
"The patterns are matched from top to bottom. If a pattern matches, the "
"corresponding block will be executed. After that, the execution continues "
"below the ``match`` statement. If you want to have a fallthrough, you can "
"use ``continue`` to stop execution in the current block and check the ones "
"below it."
msgstr ""
"패턴은 위에서 아래로 맞춰봅니다. 패턴이 맞으면, 해당 블록이 실행됩니다. 그런 "
"다음 실행은 ``match`` 명령문에서 계속됩니다. fallthrough 키워드를 쓰고 싶다"
"면, 대신 ``continue``\\ 로 현재 블록의 실행을 멈추고 다음 블록을 확인하게 할 "
"수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:874
msgid "There are 6 pattern types:"
msgstr "6 가지 패턴 유형이 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:886
msgid "Constant pattern"
msgstr "상수 패턴(Constant pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:877
msgid "Constant primitives, like numbers and strings::"
msgstr "숫자와 문자열과 같은 상수 원시값(Primitive)::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:898
msgid "Variable pattern"
msgstr "변수 패턴(Variable pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:889
msgid "Matches the contents of a variable/enum::"
msgstr "변수/열거형의 내용을 맞춰봅니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:912
msgid "Wildcard pattern"
msgstr "임의 문자 기호 패턴(Wildcard pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:901
msgid "This pattern matches everything. It's written as a single underscore."
msgstr "이 패턴은 모든 것을 대조합니다. 하나의 밑줄로 쓸 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:903
msgid ""
"It can be used as the equivalent of the ``default`` in a ``switch`` "
"statement in other languages::"
msgstr ""
"다른 언어의 ``switch`` 명령문의 ``default``\\ 와 같은 의미로 쓰입니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:925
msgid "Binding pattern"
msgstr "바인딩 패턴(Binding pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:915
msgid ""
"A binding pattern introduces a new variable. Like the wildcard pattern, it "
"matches everything - and also gives that value a name. It's especially "
"useful in array and dictionary patterns::"
msgstr ""
"바인딩 패턴은 새 변수를 도입합니다. 임의 문자 기호 패턴과 마찬가지로, 전부를 "
"비교합니다. 그리고 값에 이름을 부여합니다. 이는 특히 배열 패턴과 딕셔너리 패"
"턴에 유용합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:946
msgid "Array pattern"
msgstr "배열 패턴(Array pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:928
msgid ""
"Matches an array. Every single element of the array pattern is a pattern "
"itself, so you can nest them."
msgstr ""
"배열을 비교합니다. 배열 패턴의 각 단일 요소도 패턴이므로, 패턴을 중첩할 수 있"
"습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:930
msgid ""
"The length of the array is tested first, it has to be the same size as the "
"pattern, otherwise the pattern doesn't match."
msgstr ""
"배열의 길이가 먼저 테스트 되고, 그것이 패턴과 같은 크기이어야 합니다, 그렇지 "
"않으면 패턴이 일치하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:932
msgid ""
"**Open-ended array**: An array can be bigger than the pattern by making the "
"last subpattern ``..``."
msgstr ""
"**개방형 배열(Open-ended array)**: 배열의 마지막 하위 패턴을 ``..``\\ 으로 만"
"들어서 패턴보다 배열이 더 커질 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:934
msgid "Every subpattern has to be comma-separated."
msgstr "각 하위 패턴은 쉼표로 분리해야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:973
msgid "Dictionary pattern"
msgstr "딕셔너리 패턴(Dictionary pattern)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:949
msgid ""
"Works in the same way as the array pattern. Every key has to be a constant "
"pattern."
msgstr ""
"배열 패턴과 같은 방식으로 작동합니다. 모든 키는 일정한 패턴이어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:951
msgid ""
"The size of the dictionary is tested first, it has to be the same size as "
"the pattern, otherwise the pattern doesn't match."
msgstr ""
"딕셔너리의 크기가 먼저 테스트 되고, 그것이 패턴과 같은 크기이어야 합니다, 그"
"렇지 않으면 패턴이 일치하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:953
msgid ""
"**Open-ended dictionary**: A dictionary can be bigger than the pattern by "
"making the last subpattern ``..``."
msgstr ""
"**개방형 딕셔너리**(Open-ended dictionary): 딕셔너리의 마지막 하위 패턴을 "
"``..``\\ 으로 만들어서 패턴보다 딕셔너리가 더 커질 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:955
msgid "Every subpattern has to be comma separated."
msgstr "모든 하위 패턴은 쉼표로 분리되어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:957
msgid ""
"If you don't specify a value, then only the existence of the key is checked."
msgstr "값을 지정하지 않으면, 키의 존재 여부만 확인됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:959
msgid "A value pattern is separated from the key pattern with a ``:``."
msgstr "값 패턴과 키 패턴은 ``:``\\ 로 분리합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:986
msgid "Multiple patterns"
msgstr "여러 패턴(Multiple patterns)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:976
msgid ""
"You can also specify multiple patterns separated by a comma. These patterns "
"aren't allowed to have any bindings in them."
msgstr ""
"여러 패턴을 쉼표로 분리해서 지정할 수 있습니다. 이 패턴들 사이에서 바인딩은 "
"허용되지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:989
msgid "Classes"
msgstr "클래스(Class)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:991
msgid ""
"By default, all script files are unnamed classes. In this case, you can only "
"reference them using the file's path, using either a relative or an absolute "
"path. For example, if you name a script file ``character.gd``::"
msgstr ""
"기본적으로 모든 스크립트 파일은 이름 없는 클래스입니다. 이 경우에는, 상대 경"
"로나 절대 경로와 같은 파일의 경로를 사용해서 참조만 할 수 있습니다. 예를 들"
"어, 스크립트 파일의 이름을 ``characrer.gd``\\ 라고 지었다면 다음과 같이 참조"
"합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1004
msgid ""
"Instead, you can give your class a name to register it as a new type in "
"Godot's editor. For that, you use the ``class_name`` keyword. You can add an "
"optional comma followed by a path to an image, to use it as an icon. Your "
"class will then appear with its new icon in the editor::"
msgstr ""
"대신 클래스에 이름을 붙여서 Godot 편집기의 새 유형으로 등록할 수 있습니다. 이"
"를 위해, ``class_name`` 키워드를 사용합니다. 개별적으로 쉼표를 붙인 다음, 아"
"이콘으로 사용할 이미지의 경로를 입력할 수 있습니다. 만든 클래스는 새 아이콘"
"을 가진 채로 편집기에서 볼 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1017
msgid "Here's a class file example:"
msgstr "클래스 파일 예제입니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1036
msgid ""
"Godot's class syntax is compact: it can only contain member variables or "
"functions. You can use static functions, but not static member variables. In "
"the same way, the engine initializes variables every time you create an "
"instance, and this includes arrays and dictionaries. This is in the spirit "
"of thread safety, since scripts can be initialized in separate threads "
"without the user knowing."
msgstr ""
"Godot의 클래스 문법은 간결합니다: 오직 멤버 변수 혹은 함수만 가질 수 있습니"
"다. 정적 함수를 사용할 수 있지만, 정적 멤버 변수는 사용할 수 없습니다. 이처"
"럼 엔진은 인스턴스를 만드는 매 시간마다 변수를 초기화합니다. 그리고 여기에는 "
"배열과 딕셔너리가 포함됩니다. 스레드 안전의 정신이 비롯된 것입니다. 여러 스레"
"드에서 스크립트가 사용자 모르게 초기화될 수 있기 때문입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1044
msgid "Inheritance"
msgstr "상속(Inheritance)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1046
msgid "A class (stored as a file) can inherit from:"
msgstr "(파일로 저장한) 클래스는 여기서 상속될 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1048
msgid "A global class."
msgstr "전역 클래스(Global class)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1049
msgid "Another class file."
msgstr "다른 클래스 파일."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1050
msgid "An inner class inside another class file."
msgstr "다른 클래스 파일 안의 내부 클래스."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1052
msgid "Multiple inheritance is not allowed."
msgstr "다중 상속은 허용되지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1054
msgid "Inheritance uses the ``extends`` keyword::"
msgstr "``extends`` 키워드를 사용하여 상속합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1066
msgid ""
"To check if a given instance inherits from a given class, the ``is`` keyword "
"can be used::"
msgstr ""
"주어진 인스턴스가 주어진 클래스로부터 상속받았는지 확인하려면, ``is`` 키워드"
"를 사용할 수 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1078
msgid ""
"To call a function in a *parent class* (i.e. one ``extend``-ed in your "
"current class), prepend ``.`` to the function name::"
msgstr ""
"*부모 클래스*\\ 에서 (다시 말해, 현재 클래스에서 ``extend``\\ 된 클래스에서) "
"함수를 호출하려면, 함수 이름 앞에 ``.``\\ 을 입력하세요::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1083
msgid ""
"This is especially useful because functions in extending classes replace "
"functions with the same name in their parent classes. If you still want to "
"call them, you can prefix them with ``.`` (like the ``super`` keyword in "
"other languages)::"
msgstr ""
"특히 확장하는 클래스의 함수는 부모 클래스에서 같은 이름의 함수로 교체한다는 "
"점에서 유용합니다. 확장하는 클래스의 함수를 계속 호출하고 싶으면, 접두사로 "
"``.``\\ 을 붙이면 됩니다 (다른 언어에서 ``super`` 키워드처럼 말이죠)::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1091
msgid ""
"Default functions like  ``_init``, and most notifications such as "
"``_enter_tree``, ``_exit_tree``, ``_process``, ``_physics_process``, etc. "
"are called in all parent classes automatically. There is no need to call "
"them explicitly when overloading them."
msgstr ""
"``_init``\\ 과 같은 기본 함수와 대부분의 알림, ``_enter_tree``, "
"``_exit_tree``, ``_process``, ``_physics_process``\\ 등은 모든 부모 클래스에"
"서 자동으로 호출할 수 있습니다. 함수를 오버로드(Overload)할 때 명시척으로 호"
"출하지 않아도 됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1098
msgid "Class Constructor"
msgstr "클래스 생성자(Class Constructor)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1100
msgid ""
"The class constructor, called on class instantiation, is named ``_init``. As "
"mentioned earlier, the constructors of parent classes are called "
"automatically when inheriting a class. So, there is usually no need to call "
"``._init()`` explicitly."
msgstr ""
"클래스 인스턴스화라고 부르는 클래스 생성자는 ``_init``\\ 이라고 부릅니다. 앞"
"에서 말했듯이, 부모 클래스의 생성자는 클래스를 상속할 때 자동으로 호출됩니"
"다. 따라서 보통 명시적으로 ``_init()``\\ 을 호출하지 않습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1105
msgid ""
"Unlike the call of a regular function, like in the above example with ``."
"some_func``, if the constructor from the inherited class takes arguments, "
"they are passed like this::"
msgstr ""
"위의 ``.some_func`` 함수로 보여준 표준 함수의 호출과는 달리, 상속받은 클래스"
"의 생성자가 인수를 갖는다면, 이와 같이 전달됩니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1112
msgid "This is better explained through examples. Consider this scenario::"
msgstr ""
"예제를 통해서 더 쉽게 설명해 보겠습니다. 다음 시나리오를 생각해보세요::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1132
msgid "There are a few things to keep in mind here:"
msgstr "유의해야 할 몇 가지 사항이 있습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1134
msgid ""
"If the inherited class (``State.gd``) defines a ``_init`` constructor that "
"takes arguments (``e`` in this case), then the inheriting class (``Idle."
"gd``) *must* define ``_init`` as well and pass appropriate parameters to "
"``_init`` from ``State.gd``."
msgstr ""
"상속받은 클래스 (``State.gd``)가 인수를 갖는 ``_init`` 생성자를 정의한다면 "
"(여기서 인수는 ``e``가 되겠죠), 상속하는 클래스 (``Idle.gd``)는 *반드시* "
"``_init``\\ 을 정의해야 하고, ``State.gd``\\ 에서 적절한 매개변수를 ``_init``"
"\\ 으로 전달해야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1137
msgid ""
"``Idle.gd`` can have a different number of arguments than the parent class "
"``State.gd``."
msgstr ""
"``idle.gd``\\ 는 부모 클래스 ``State.gd``\\ 와는 다른 개수의 인수를 가질 수 "
"있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1138
msgid ""
"In the example above, ``e`` passed to the ``State.gd`` constructor is the "
"same ``e`` passed in to ``Idle.gd``."
msgstr ""
"위의 예제에서 State.gd`` 생성자로 전달된 ``e``\\ 는 ``Idle.gd``\\ 로 전달된 "
"``e``\\ 와 같습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1140
msgid ""
"If ``Idle.gd``'s ``_init`` constructor takes 0 arguments, it still needs to "
"pass some value to the ``State.gd`` parent class, even if it does nothing. "
"This brings us to the fact that you can pass literals in the base "
"constructor as well, not just variables. eg.::"
msgstr ""
"``Idle.gd``\\ 의 ``_init`` 생성자가 0 개의 인수를 갖더라도, 어떤 값을 "
"``State.gd`` 부모 클래스로 전달해야 합니다. 그것이 쓸모가 없더라도 말이죠. 이"
"것으로 알게된 것은 기본 생성자에서 변수 뿐만 아니라 리터럴도 전달할 수 있다"
"는 것입니다. 예::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1150
msgid "Inner classes"
msgstr "내부 클래스(Inner Class)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1152
msgid ""
"A class file can contain inner classes. Inner classes are defined using the "
"``class`` keyword. They are instanced using the ``ClassName.new()`` function."
msgstr ""
"클래스 파일은 내부 클래스를 가질 수 있습니다. 내부 클래스는 ``class`` 키워드"
"로 정의할 수 있습니다. 내부 클래스는 ``ClassName.new()`` 함수로 인스턴스될 "
"수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1174
msgid "Classes as resources"
msgstr "리소스로 취급되는 클래스"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1176
msgid ""
"Classes stored as files are treated as :ref:`resources <class_GDScript>`. "
"They must be loaded from disk to access them in other classes. This is done "
"using either the ``load`` or ``preload`` functions (see below). Instancing "
"of a loaded class resource is done by calling the ``new`` function on the "
"class object::"
msgstr ""
"파일로 저장된 클래스는 :ref:`리소스 <class_GDScript>`\\ 로 취급됩니다. 다른 "
"클래스에서 접근하려면 반드시 디스크에서 불러와야 합니다. 불러오려면 ``load``"
"\\ 나 ``preload`` 함수를 사용할 수 있습니다 (아래를 참고하세요). 불러온 클래"
"스 리소스를 인스턴스하려면 클래스 객체에 ``new`` 함수를 호출해야 합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1192
msgid "Exports"
msgstr "내보내기(Export)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1196
msgid ""
"Documentation about exports has been moved to :ref:`doc_gdscript_exports`."
msgstr "내보내기에 관한 서술은 :ref:`doc_gdscript_exports`\\ 로 옮겨졌습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1199
msgid "Setters/getters"
msgstr "Setter(세터)/Getter(게터)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1201
msgid ""
"It is often useful to know when a class' member variable changes for "
"whatever reason. It may also be desired to encapsulate its access in some "
"way."
msgstr ""
"클래스 멤버 변수가 어떤 이유로든 언제 변경되는지를 아는 것은 종종 유용합니"
"다. 어떤 방식으로 그것의 접근을 캡슐화 하는 것이 필요할 수도 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1204
msgid ""
"For this, GDScript provides a *setter/getter* syntax using the ``setget`` "
"keyword. It is used directly after a variable definition:"
msgstr ""
"이를 위해, GDScript는 ``setget`` 키워드를 사용하는 *setter/getter* 문법을 제"
"공합니다. 변수 정의 바로 뒤에 사용됩니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1211
msgid ""
"Whenever the value of ``variable`` is modified by an *external* source (i.e. "
"not from local usage in the class), the *setter* function (``setterfunc`` "
"above) will be called. This happens *before* the value is changed. The "
"*setter* must decide what to do with the new value. Vice versa, when "
"``variable`` is accessed, the *getter* function (``getterfunc`` above) must "
"``return`` the desired value. Below is an example::"
msgstr ""
"``변수``\\ 의 값이 (클래스에서 지역 범위의 사용이 아닌) *외부* 소스에 의해 수"
"정되었다면, (위 예시에서 ``setterfunc``\\ 에 해당하는) *Setter* 함수가 호출됩"
"니다. 호출은 값이 변하기 *전*\\ 에 일어납니다. *Setter*\\ 는 새 값으로 수행"
"할 작업을 결정해야 합니다. 반대로, ``변수``\\ 에 접근할 때, (위 예시에서 "
"``getterfunc``\\ 에 해당하는) *Getter* 함수는 반드시 그에 맞는 값을 ``반환``"
"\\ 합니다. 아래는 예제입니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1225
msgid "Either of the *setter* or *getter* functions can be omitted::"
msgstr ""
"정의할 때, *Setter* 혹은 *Getter* 함수, 둘 중 하나가 생략되어도도 됩니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1232
msgid ""
"Setters and getters are useful when :ref:`exporting variables "
"<doc_gdscript_exports>` to the editor in tool scripts or plugins, for "
"validating input."
msgstr ""
"Setter와 Getter는 tool 스크립트나 플러그인에서, 입력을 확인하기 위해 편집기"
"로 :ref:`변수를 내보내기 <doc_gdscript_exports>`\\ 에 유용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1235
msgid ""
"As said, *local* access will *not* trigger the setter and getter. Here is an "
"illustration of this:"
msgstr ""
"말했듯이 *지역(Local)* 접근은 Setter와 Getter를 작동하지 *않을* 것입니다. 이 "
"예제로 설명하겠습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1252
msgid "Tool mode"
msgstr "Tool mode(도구 모드)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1254
msgid ""
"By default, scripts don't run inside the editor and only the exported "
"properties can be changed. In some cases, it is desired that they do run "
"inside the editor (as long as they don't execute game code or manually avoid "
"doing so). For this, the ``tool`` keyword exists and must be placed at the "
"top of the file::"
msgstr ""
"기본적으로 스크립트는 편집기 내에서 실행하지 않으며, 오직 내보낸 속성만 편집"
"기에서 변경할 수 있습니다. 하지만 몇 몇 경우에는, 편집기 내에서 스크립트가 실"
"행되는 것이 유용할 때가 있습니다 (스크립트가 게임 코드를 실행하지 않거나 수동"
"으로 실행하지 않는 경우가 있죠). 이를 위한 ``tool`` 키워드가 있고, 파일의 최"
"상단에 배치되어야 합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1267
msgid "See :ref:`doc_running_code_in_the_editor` for more information."
msgstr "자세한 설명은 :ref:`doc_running_code_in_the_editor`\\ 를 참고하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1269
msgid ""
"Be cautious when freeing nodes with ``queue_free()`` or ``free()`` in a tool "
"script (especially the script's owner itself). As tool scripts run their "
"code in the editor, misusing them may lead to crashing the editor."
msgstr ""
"Tool 스크립트에서 ``queue_free()``\\ 나 ``free()``\\ 로 노드를 해제할 때는 조"
"심하세요 (특히 스크립트의 소유권이 자기 자신일 때). Tool 스크립트는 편집기에"
"서 코드를 실행하기 때문에, 잘못 해제하면 편집기가 튕길 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1275
msgid "Memory management"
msgstr "메모리 관리"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1277
msgid ""
"If a class inherits from :ref:`class_Reference`, then instances will be "
"freed when no longer in use. No garbage collector exists, just reference "
"counting. By default, all classes that don't define inheritance extend "
"**Reference**. If this is not desired, then a class must inherit :ref:"
"`class_Object` manually and must call instance.free(). To avoid reference "
"cycles that can't be freed, a ``weakref`` function is provided for creating "
"weak references."
msgstr ""
"클래스가 :ref:`class_Reference` 에서 상속할 때, 더 이상 사용하지 않게 되면 인"
"스턴스는 해제됩니다. 가비지 콜렉터 없이, 참조만 계산됩니다. 기본적으로, 상속"
"을 정의하지 않는 모든 클래스는 **참조** 를 확장합니다. 바람직하지 않다면, 클"
"래스는 :ref:`class_Object` 를 수동으로 상속해야만 하고 instance.free()를 호출"
"해야만 합니다. 해제할 수 없는 참조 사이클을 피하기 위해, 약한 참조를 생성하"
"는 ``weakref`` 함수가 제공됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1285
msgid ""
"Alternatively, when not using references, the "
"``is_instance_valid(instance)`` can be used to check if an object has been "
"freed."
msgstr ""
"또는, 참조를 사용하지 않을 때, ``is_instance_valid(instance)`` 가 객체가 해제"
"되었는 지를 확인하는데 사용될 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1292
msgid "Signals"
msgstr "시그널"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1294
msgid ""
"Signals are a tool to emit messages from an object that other objects can "
"react to. To create custom signals for a class, use the ``signal`` keyword."
msgstr ""
"시그널은 한 객체에서 메시지를 방출해서 메시지를 받을 수 있는 다른 객체가 받"
"는 도구입니다. 클래스에서 맞춤 시그널을 만들려면, ``signal`` 키워드를 사용하"
"세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1306
msgid ""
"Signals are a `Callback <https://en.wikipedia.org/wiki/"
"Callback_(computer_programming)>`_ mechanism. They also fill the role of "
"Observers, a common programming pattern. For more information, read the "
"`Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ in "
"the Game Programming Patterns ebook."
msgstr ""
"시그널은 `콜백 <https://ko.wikipedia.org/wiki/%EC%BD%9C%EB%B0%B1>`_ 메커니즘"
"입니다. 그리고 일반적인 프로그래밍 패턴인 옵저버(Observer) 규칙도 있습니다. "
"자세한 정보는 Game Programming Patterns의 전자책, `Observer tutorial "
"<https://gameprogrammingpatterns.com/observer.html>`_\\ 을 참고해주세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1313
msgid ""
"You can connect these signals to methods the same way you connect built-in "
"signals of nodes like :ref:`class_Button` or :ref:`class_RigidBody`."
msgstr ""
"맞춤 시그널도 :ref:`class_Button`\\ 나 :ref:`class_RigidBody`\\ 와 같은 노드"
"에 내장된 시그널을 연결하는 방법과 같은 방식으로 메서드에 연결할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1316
msgid ""
"In the example below, we connect the ``health_depleted`` signal from a "
"``Character`` node to a ``Game`` node. When the ``Character`` node emits the "
"signal, the game node's ``_on_Character_health_depleted`` is called::"
msgstr ""
"아래의 예제에서, ``Character`` 노드의 ``health_depleted`` 시그널을 ``Game`` "
"노드에 연결했습니다. ``Character`` 노드가 시그널을 방출하면, Game 노드의 "
"``_on_Character_health_depleted``\\ 가 호출됩니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1329
msgid "You can emit as many arguments as you want along with a signal."
msgstr "하나의 시그널에 원하는 만큼 많은 인수를 함께 방출할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1331
msgid ""
"Here is an example where this is useful. Let's say we want a life bar on "
"screen to react to health changes with an animation, but we want to keep the "
"user interface separate from the player in our scene tree."
msgstr ""
"어디서 이 점이 유용하게 쓰이는 지 예제와 함께 알아봅시다. 한 번 상상해봅시"
"다. 체력 막대가 필요합니다. 체력이 변하면 체력 막대도 따라서 변합니다. 하지"
"만 씬 트리에서 플레이어와 사용자 인터페이스는 분리되어 있어야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1335
msgid ""
"In our ``Character.gd`` script, we define a ``health_changed`` signal and "
"emit it with :ref:`Object.emit_signal() <class_Object_method_emit_signal>`, "
"and from a ``Game`` node higher up our scene tree, we connect it to the "
"``Lifebar`` using the :ref:`Object.connect() <class_Object_method_connect>` "
"method::"
msgstr ""
"``Character.gd`` 스크립트에서 ``health_changed`` 시그널을 정의했습니다. 그리"
"고 :ref:`Object.emit_signal() <class_Object_method_emit_signal>`\\ 로 방출합"
"니다. 그리고 앁 트리에서 가장 높이 있는 ``Game`` 노드에서 :ref:`Object."
"connect() <class_Object_method_connect>` 메서드를 사용해 시그널을 ``Lifebar``"
"\\ 에 연결합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1375
msgid ""
"To use signals, your class has to extend the ``Object`` class or any type "
"extending it like ``Node``, ``KinematicBody``, ``Control``..."
msgstr ""
"시그널을 쓰려면, 클래스가 ``Object`` 클래스나 다른 확장하는 클래스, "
"``Node``, ``KinematicBody``, ``Control`` 등을 확장(extend)해야 합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1378
msgid ""
"In the ``Game`` node, we get both the ``Character`` and ``Lifebar`` nodes, "
"then connect the character, that emits the signal, to the receiver, the "
"``Lifebar`` node in this case."
msgstr ""
"``Game`` 노드에는 ``Character``\\ 와 ``Lifebar`` 노드 둘 다 갖고 있습니다. "
"Character를 연결(Connect)하고 시그널을 리시버로 방출합니다. 이 경우는 "
"``Lifebar``\\ 가 해당하겠죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1392
msgid ""
"This allows the ``Lifebar`` to react to health changes without coupling it "
"to the ``Character`` node."
msgstr ""
"이렇게 하면 ``Lifebar``\\ 는 ``Character`` 노드와 묶지 않고도 체력 변화에 반"
"응할 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1395
msgid ""
"You can write optional argument names in parentheses after the signal's "
"definition::"
msgstr ""
"시그널을 정의한 후에, 개별적으로 괄호 안에 인수 이름을 적을 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1401
msgid ""
"These arguments show up in the editor's node dock, and Godot can use them to "
"generate callback functions for you. However, you can still emit any number "
"of arguments when you emit signals; it's up to you to emit the correct "
"values."
msgstr ""
"인수는 편집기의 노드(Node) 독에 보입니다. 그리고 Godot는 이 인수로 콜백 함수"
"를 생성할 수 있습니다. 하지만 시그널을 방출할 때 여전히 많은 수의 인수를 방출"
"할 수 있습니다. 다시 말해 올바른 값을 방출하는 일은 당신에게 달린 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1407
msgid ""
"GDScript can bind an array of values to connections between a signal and a "
"method. When the signal is emitted, the callback method receives the bound "
"values. These bound arguments are unique to each connection, and the values "
"will stay the same."
msgstr ""
"GDScript는 시그널과 메서드 간 연결을 위해 배열의 값에 바인딩할 수 있습니다. "
"시그널을 방출할 때, 콜백 메서드는 바운드 값을 받습니다. 이 바운드 인수는 각 "
"연결에서 유일하며, 값도 똑같이 유지됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1412
msgid ""
"You can use this array of values to add extra constant information to the "
"connection if the emitted signal itself doesn't give you access to all the "
"data that you need."
msgstr ""
"이 배열의 값으로 연결에 여분의 상수 정보를 추가할 수 있습니다. 시그널이 방출"
"됐지만 필요한 데이터로 접근하지 못할 수도 있으니까요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1416
msgid ""
"Building on the example above, let's say we want to display a log of the "
"damage taken by each character on the screen, like ``Player1 took 22 damage."
"``. The ``health_changed`` signal doesn't give us the name of the character "
"that took damage. So when we connect the signal to the in-game console, we "
"can add the character's name in the binds array argument::"
msgstr ""
"위의 예제를 바탕으로, 화면에서 각 캐릭터가 받은 대미지의 로그를 표시해봅시"
"다. 예를 들면 ``Player1은 22의 대미지를 받았다.``\\ 같이 말이죠. "
"``health_changed`` 시그널은 대미지를 받는 Character의 이름을 주고 있지 않습니"
"다. 따라서 시그널을 게임 내 콘솔에 연결하면, 바인딩 배열 인수에 Character의 "
"이름을 추가할 수 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1430
msgid ""
"Our ``BattleLog`` node receives each element in the binds array as an extra "
"argument::"
msgstr "``BattleLog`` 노드는 바인딩 배열의 각 요소를 추가 인수로 받습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1443
msgid "Coroutines with yield"
msgstr "yield를 가진 코루틴(Coroutine)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1445
msgid ""
"GDScript offers support for `coroutines <https://en.wikipedia.org/wiki/"
"Coroutine>`_ via the :ref:`yield<class_@GDScript_method_yield>` built-in "
"function. Calling ``yield()`` will immediately return from the current "
"function, with the current frozen state of the same function as the return "
"value. Calling ``resume()`` on this resulting object will continue execution "
"and return whatever the function returns. Once resumed, the state object "
"becomes invalid. Here is an example::"
msgstr ""
"GDScript는 :ref:`yield<class_@GDScript_method_yield>` 내장 함수를 통해 `코루"
"틴(Coroutines) <https://en.wikipedia.org/wiki/Coroutine>`_\\ 을 지원합니다. "
"``yield()``\\ 를 호출하면 즉시 현재 함수에서 같은 함수의 현재 상태를 반환합니"
"다. 그리고 ``resume``\\ 을 결과 객체에 호출하면 실행이 계속되고 함수가 반환하"
"는 값을 반환합니다. 다시 시작하면 상태 객체는 무효화됩니다. 여기 예제가 있습"
"니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1465
#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1485
msgid "Will print::"
msgstr "이렇게 프린트됩니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1471
msgid ""
"It is also possible to pass values between ``yield()`` and ``resume()``, for "
"example::"
msgstr ""
"``yield()``\\ 와 ``resume()`` 사이에 값을 전달할 수도 있습니다. 예를 들면::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1491
msgid ""
"Remember to save the new function state, when using multiple ``yield``\\s::"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1505
msgid "Coroutines & signals"
msgstr "코루틴 & 시그널"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1507
msgid ""
"The real strength of using ``yield`` is when combined with signals. "
"``yield`` can accept two arguments, an object and a signal. When the signal "
"is received, execution will recommence. Here are some examples::"
msgstr ""
"``yield``\\ 의 진정한 힘은 시그널과 결합할 때 나타납니다. ``yield``\\ 는 두 "
"개의 인수를 받을 수 있습니다.하나는 객체, 다른 하나는 시그널이죠. 시그널을 받"
"으면 실행이 다시 시작됩니다. 여기 몇 가지 예제가 있습니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1520
msgid ""
"Coroutines themselves use the ``completed`` signal when they transition into "
"an invalid state, for example::"
msgstr ""
"코루틴은 무효 상태로 전환할 때 ``complated`` 시그널을 사용합니다. 예를 들어::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1531
msgid ""
"``my_func`` will only continue execution once both buttons have been pressed."
msgstr "``my_func``\\ 은 오직 두 버튼이 한번에 눌릴 때 계속 실행됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1534
msgid "Onready keyword"
msgstr "Onready 키워드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1536
msgid ""
"When using nodes, it's common to desire to keep references to parts of the "
"scene in a variable. As scenes are only warranted to be configured when "
"entering the active scene tree, the sub-nodes can only be obtained when a "
"call to ``Node._ready()`` is made."
msgstr ""
"노드를 쓸 때, 씬의 일부를 변수로 참조하는 것이 일반적입니다. 씬은 활성 씬 트"
"리에 들어갈 때만 구성하기 때문에, 하위 노드는 ``Node._ready()``\\ 로의 호출"
"이 있을 때만 가져올 수 있습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1548
msgid ""
"This can get a little cumbersome, especially when nodes and external "
"references pile up. For this, GDScript has the ``onready`` keyword, that "
"defers initialization of a member variable until ``_ready()`` is called. It "
"can replace the above code with a single line::"
msgstr ""
"이 작업은 특히, 노드와 외부 참조가 쌓이다 보면 번거로울 수 있습니다. 이를 위"
"해 GDScript는 ``onready`` 키워드를 갖고 있습니다. 이 키워드로 멤버 변수의 초"
"기화는 ``_ready()``\\ 를 호출할 때까지 지연합니다. 위의 코드를 한 줄로 대체"
"가 가능합니다::"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1556
msgid "Assert keyword"
msgstr "Assert 키워드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1558
msgid ""
"The ``assert`` keyword can be used to check conditions in debug builds. "
"These assertions are ignored in non-debug builds. This means that the "
"expression passed as argument won't be evaluated in a project exported in "
"release mode. Due to this, assertions must **not** contain expressions that "
"have side effects. Otherwise, the behavior of the script would vary "
"depending on whether the project is run in a debug build."
msgstr ""
"``assert`` 키워드는 디버그 빌드에서 상태를 확인할 때 사용할 수 있습니다. 디버"
"그 빌드가 아니면 assert 키워드는 무시됩니다. 즉, 인수로 보낸 명령문은 출시 모"
"드로 내보낸 프로젝트에서 평가하지 않습니다. 이 때문에, assert는 반드시 역효과"
"를 일으킬 소지가 있는 표현식을 가질 수 **없습니다**. 그렇지 않으면, 스크립트"
"는 프로젝트가 디버그 빌드인지 여부에 따라 매우 다르게 동작할 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_basics.rst:1570
msgid ""
"When running a project from the editor, the project will be paused if an "
"assertion error occurs."
msgstr ""
"편집기에서 프로젝트를 실행할 때, assert 오류가 발생하면 프로젝트는 일시정지합"
"니다."
