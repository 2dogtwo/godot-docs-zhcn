# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-27 08:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:4
msgid "GDScript style guide"
msgstr "GDScript 스타일 가이드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:6
msgid ""
"This style guide lists conventions to write elegant GDScript. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""
"여기에 있는 스타일 가이드는 GDScript를 아름답게 작성하도록 하는 관례를 나열했"
"습니다. 이 스타일 가이드의 목적은 프로젝트 사이, 사람들의 토론 사이, 튜토리"
"얼 사이에서 깨끗하고 읽기 쉬운 코드를 작성함과 동시에 일관성을 유지하도록 하"
"는 것입니다. 이 기능이 자동 서식 도구의 개발에 도움이 되길 바랍니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:11
msgid ""
"Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""
"GDScript가 Python과 밀접하기 때문에, 이 가이드는 Python의 `PEP 8 <https://"
"www.python.org/dev/peps/pep-0008/>`__ 프로그래밍 스타일 가이드에서 영감을 얻"
"었습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:15
msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""
"스타일 가이드는 빡빡한 법전이 아닙니다. 아직은 아래의 가이드라인을 적용하지 "
"못할 수도 있습니다. 그렇다 하더라도, 최선의 판단으로 동료 개발자에게 통찰력"
"을 갖도록 요청하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:19
msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr ""
"일반적으로 프로젝트와 팀 내에서 코드를 일관적으로 유지하는 것이 아래의 가이드"
"보다 더 중요합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:22
msgid ""
"Godot's built-in script editor uses a lot of these conventions by default. "
"Let it help you."
msgstr ""
"Godot의 내장 스크립트 편집기는 기본적으로 많은 규정을 사용합니다. 그것이 당신"
"을 돕도록 하십시오."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:25
msgid "Here is a complete class example based on these guidelines:"
msgstr "이 가이드라인을 기반으로 한 전체 클래스 예제입니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:92
msgid "Formatting"
msgstr "서식(Formatting)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:95
msgid "Encoding and special characters"
msgstr "인코딩과 특수 문자"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:97
msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr ""
"줄 바꿈을 위해 라인 피드 (**LF**) 문자를 사용합니다. CRLF나 CR은 사용하지 않"
"습니다 *(편집기 기본 설정)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:98
msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr ""
"각 파일의 끝에 하나의 라인 피드 문자를 사용합니다. *(편집기 기본 설정)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:99
msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""
"`바이트 순서 표식 <https://ko.wikipedia.org/wiki/%EB%B0%94%EC%9D%B4%ED%8A%B8_"
"%EC%88%9C%EC%84%9C_%ED%91%9C%EC%8B%9D>`_ 없이 **UTF-8** 인코딩을 사용합니다. "
"*(편집기 기본 설정)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:100
msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr ""
"들여쓰기로 스페이스바 대신 **Tab(탭)** 키를 사용합니다. *(편집기 기본 설정)*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:103
msgid "Indentation"
msgstr "들여쓰기(Indentation)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:105
msgid "Each indent level should be one greater than the block containing it."
msgstr "각 들여쓰기 수준은 그것을 포함하는 블록보다 한 단계 더 커야합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:107
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:127
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:146
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:199
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:223
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:270
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:300
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:325
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:345
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:371
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:660
msgid "**Good**:"
msgstr "**좋음**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:114
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:135
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:169
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:210
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:229
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:280
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:307
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:332
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:352
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:381
#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:668
msgid "**Bad**:"
msgstr "**나쁨**:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:124
msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr ""
"계속되는 줄은 정규 코드 블록과 구분하기 위해 2단계의 들여쓰기 수준을 사용합니"
"다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:143
msgid ""
"Exceptions to this rule are arrays, dictionaries, and enums. Use a single "
"indentation level to distinguish continuation lines:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:193
msgid "Trailing comma"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:195
msgid ""
"Use a trailing comma on the last line in arrays, dictionaries, and enums. "
"This results in easier refactoring and better diffs in version control as "
"the last line doesn't need to be modified when adding new elements."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:221
msgid ""
"Trailing commas are unnecessary in single-line lists, so don't add them in "
"this case."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:236
msgid "Blank lines"
msgstr "공백 줄"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:238
msgid "Surround functions and class definitions with two blank lines:"
msgstr "함수와 클래스 정의를 두 개의 공백 줄로 묶습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:253
msgid "Use one blank line inside functions to separate logical sections."
msgstr "논리 섹션을 분리하기 위해 함수 안에 하나의 공백 줄을 사용합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:256
msgid "Line length"
msgstr "줄 길이"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:258
msgid "Keep individual lines of code under 100 characters."
msgstr "코드 한 줄은 100 문자 이내로 유지합니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:260
msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two scripts opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""
"가능하다면 80 문자 이내로 유지해보세요. 이렇게 하면 작은 화면에서도 코드를 읽"
"기 쉽고, 외부 텍스트 편집기에서 양쪽에 두 스크립트가 열려있는 화면에서도 읽"
"기 쉽습니다. 예를 들어 서로 다른 코드 개정판을 볼 때가 있죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:265
msgid "One statement per line"
msgstr "한 줄에 하나의 명령문"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:267
msgid ""
"Never combine multiple statements on a single line. No, C programmers, not "
"even with a single line conditional statement."
msgstr ""
"한 줄에 여러 명령문을 묶지 마세요. C 프로그래머라면 한 줄에 조건문을 함께 사"
"용하지 마세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:288
msgid "The only exception to that rule is the ternary operator:"
msgstr "유일한 예외라면 삼항(Ternary) 연산자일 것입니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:295
msgid "Avoid unnecessary parentheses"
msgstr "불필요한 괄호 피하기"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:297
msgid ""
"Avoid parentheses in expressions and conditional statements. Unless "
"necessary for order of operations, they only reduce readability."
msgstr ""
"표현식과 조건문에 괄호를 사용하지 마십시오. 연산 명령에 필요한 경우가 아니라"
"면, 가독성만 떨어뜨릴 것입니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:315
msgid "Boolean operators"
msgstr "불리언(Boolean) 연산자"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:317
msgid ""
"Prefer the plain English versions of boolean operators, as they are the most "
"accessible:"
msgstr "불리언 연산자의 영어 버전이 가장 접근하기 쉽습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:319
msgid "Use ``and`` instead of ``&&``."
msgstr "``&&`` 대신 ``and``\\ 를 사용하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:320
msgid "Use ``or`` instead of ``||``."
msgstr "``||`` 대신 ``or``\\ 를 사용하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:322
msgid ""
"You may also use parentheses around boolean operators to clear any "
"ambiguity. This can make long expressions easier to read."
msgstr ""
"모호한 표현을 막고자 불리언 연산자 주변에 괄호를 사용합니다. 이렇게 하면 긴 "
"표현식도 읽기 쉬워집니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:340
msgid "Comment spacing"
msgstr "주석(Comment) 간격"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:342
msgid ""
"Regular comments should start with a space, but not code that you comment "
"out. This helps differentiate text comments from disabled code."
msgstr ""
"표준 주석은 한 칸 띄고 시작해야 합니다. 하지만 코드에 놓은 주석은 띄지 않습니"
"다. 이렇게 하면 코드를 비활성화한 것과 텍스트 주석을 구분하기 좋습니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:361
msgid ""
"In the script editor, to toggle the selected code commented, press "
"<kbd>Ctrl</kbd> <kbd>K</kbd>. This feature adds a single # sign at the start "
"of the selected lines."
msgstr ""
"스크립트 편집기에서 선택한 코드를 주석으로 바꾸려면 <kbd>Ctrl</kbd> <kbd>K</"
"kbd>\\ 를 누르세요. 누르면 선택한 줄의 처음 부분에 # 기호가 생깁니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:366
msgid "Whitespace"
msgstr "공백"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:368
msgid ""
"Always use one space around operators and after commas. Also, avoid extra "
"spaces in dictionary references and function calls."
msgstr ""
"연산자와 쉼표 뒤에는 한 칸을 띄어주세요. 그리고 딕셔너리 참조와 함수 호출에"
"는 띄어쓰기를 피하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:391
msgid "Don't use spaces to align expressions vertically:"
msgstr "표현식이 수직으로 나열하는 띄어쓰기를 하지 마세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:400
msgid "Quotes"
msgstr "따옴표"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:402
msgid ""
"Use double quotes unless single quotes make it possible to escape fewer "
"characters in a given string. See the examples below:"
msgstr ""
"작은 따옴표로 주어진 문자열을 더 작은 문자 수로 이스케이프하게 만드는 것이 아"
"니라면 큰 따옴표를 사용하세요. 아래의 예제를 참고하세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:422
msgid "Naming conventions"
msgstr "명명 규칙"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:424
msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""
"이러한 명명 규칙은 Godot 엔진 스타일을 따릅니다. 이 규칙을 깨면 코드는 내장 "
"명명 규칙으로 망가지며, 일관되지 않은 코드가 됩니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:429
msgid "Classes and nodes"
msgstr "클래스와 노드"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:431
msgid "Use PascalCase for class and node names:"
msgstr "클래스와 노드 이름에는 파스칼 표기법(PascalCase)을 사용하세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:437
msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr ""
"그리고 상수 또는 변수로 클래스를 불러올 때도 파스칼 표기법(PascalCase)을 사용"
"하세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:444
msgid "Functions and variables"
msgstr "함수와 변수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:446
msgid "Use snake\\_case to name functions and variables:"
msgstr "함수와 변수 이름에는 스네이크 표기법(snake\\_case)를 사용하세요:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:453
msgid ""
"Prepend a single underscore (\\_) to virtual methods functions the user must "
"override, private functions, and private variables:"
msgstr ""
"개인 함수, 개인 변수, 사용자가 다시 정의하는 가상 메서드 함수 앞에는 밑줄 "
"(\\_) 하나가 있어야 합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:462
msgid "Signals"
msgstr "시그널(Signal)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:464
msgid "Use the past tense to name signals:"
msgstr "시그널의 이름에는 과거형을 사용합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:472
msgid "Constants and enums"
msgstr "상수(Constant)와 열거형(enum)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:474
msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr ""
"CONSTANT\\_CASE로 상수를 작성합니다. 다시 말해, 모든 단어는 대문자로 하고 띄"
"어쓰기 대신 밑줄 (\\_)을 사용합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:481
msgid ""
"Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as "
"they are constants:"
msgstr ""
"열거형 *이름*\\ 에는 파스칼 표기법(PascalCase)을 사용하고, 열거형의 멤버에는 "
"상수와 마찬가지로 CONSTANT\\_CASE를 사용합니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:495
msgid "Code order"
msgstr "코드 순서"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:497
msgid ""
"This first section focuses on code order. For formatting, see :ref:"
"`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""
"이 섹션은 코드 순서에 중점을 둡니다. 서식에 관해서는 :ref:`formatting`\\ 을 "
"참고해주세요. 명명 규칙에 관해서는 :ref:`naming_conventions`\\ 을 참고해주세"
"요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:500
msgid "We suggest to organize GDScript code this way:"
msgstr "제안하는 GDScript 코드 구조는 다음과 같습니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:523
msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""
"이 순서는 위에서 아래까지 코드를 읽기 쉽게 최적화했습니다. 개발자가 한 눈에 "
"코드가 어떻게 작동하는 지 알도록, 그리고 변수 선언의 순서와 관련된 오류가 발"
"생하지 않도록 말이죠."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:527
msgid "This code order follows four rules of thumb:"
msgstr "이 코드 순서는 네 가지 규칙을 따릅니다:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:529
msgid "Properties and signals come first, followed by methods."
msgstr "속성과 시그널이 첫 번째로 옵니다. 그 뒤는 메서드가 나옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:530
msgid "Public comes before private."
msgstr "공개(Public) 코드가 개인(Private) 코드보다 먼저 옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:531
msgid "Virtual callbacks come before the class's interface."
msgstr ""
"가상 콜백(Virtual Callback)이 클래스의 인터페이스(Class's Interface)보다 먼"
"저 옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:532
msgid ""
"The object's construction and initialization functions, ``_init`` and "
"``_ready``, come before functions that modify the object at runtime."
msgstr ""
"객체의 구조와 초기화 함수인 ``_init``\\ 과 ``_ready``\\ 는 런타임에서 객체를 "
"수정하도록 함수 이전에 옵니다."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:537
msgid "Class declaration"
msgstr "클래스 선언(Declaration)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:539
msgid ""
"If the code is meant to run in the editor, place the ``tool`` keyword on the "
"first line of the script."
msgstr ""
"코드가 편집기에서 작동하게 하려면, 스크립트의 첫 번째 줄에 ``tool`` 키워드를 "
"배치하세요."

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:542
msgid ""
"Follow with the `class_name` if necessary. You can turn a GDScript file into "
"a global type in your project using this feature. For more information, see :"
"ref:`doc_gdscript`."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:546
msgid "Then, add the `extends` keyword if the class extends a built-in type."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:548
msgid ""
"Following that, you should have the class's optional docstring as comments. "
"You can use that to explain the role of your class to your teammates, how it "
"works, and how other developers should use it, for example."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:560
#, fuzzy
msgid "Signals and properties"
msgstr "노드 속성"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:562
msgid ""
"Write signal declarations, followed by properties, that is to say, member "
"variables, after the docstring."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:565
msgid ""
"Enums should come after signals, as you can use them as export hints for "
"other properties."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:568
msgid ""
"Then, write constants, exported variables, public, private, and onready "
"variables, in that order."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:591
msgid ""
"The GDScript compiler evaluates onready variables right before the "
"``_ready`` callback. You can use that to cache node dependencies, that is to "
"say, to get child nodes in the scene that your class relies on. This is what "
"the example above shows."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:598
#, fuzzy
msgid "Methods and static functions"
msgstr "정적 함수(Static functions)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:600
msgid "After the class's properties come the methods."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:602
msgid ""
"Start with the ``_init()`` callback method, that the engine will call upon "
"creating the object in memory. Follow with the ``_ready()`` callback, that "
"Godot calls when it adds a node to the scene tree."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:606
msgid ""
"These function should come first because they show how the object is "
"initialized."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:609
msgid ""
"Other built-in virtual callbacks, like ``_unhandled_input()`` and "
"``_physics_process``, should come next. These control the object's main loop "
"and interactions with the game engine."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:613
msgid ""
"The rest of the class's interface, public and private methods, come after "
"that, in that order."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:650
#, fuzzy
msgid "Static typing"
msgstr "정적 함수"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:652
msgid ""
"Since Godot 3.1, GDScript supports :ref:`optional static "
"typing<doc_gdscript_static_typing>`."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:655
#, fuzzy
msgid "Type hints"
msgstr "타입(Types)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:657
msgid ""
"Place the colon right after the variable's name, without a space, and let "
"the GDScript compiler infer the variable's type when possible."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:676
msgid ""
"When you let the compiler infer the type hint, write the colon and equal "
"signs together: ``:=``."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_styleguide.rst:682
msgid ""
"Add a space on either sides of the return type arrow when defining functions."
msgstr ""
