# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-18 09:48+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:4
msgid "Introduction"
msgstr "소개"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:6
#, fuzzy
msgid ""
"C# support is a new feature available since Godot 3.0. As such, you may "
"still run into some issues, or find spots where the documentation could be "
"improved. Please report issues with C# in Godot on the `engine GitHub page "
"<https://github.com/godotengine/godot/issues>`_, and any documentation "
"issues on the `documentation GitHub page <https://github.com/godotengine/"
"godot-docs/issues>`_."
msgstr ""
"C# 지원은 Godot 3.0의 새로운 기능입니다. 따라서, 실행 중 여전히 문제가 발생"
"할 수 있고, 문서를 개선할 수 있는 부분을 발견할 수도 있습니다. `엔진 Github "
"페이지 <https://github.com/godotengine/godot/issues>`_\\ 에서 Godot의 C#관련 "
"문제들을 보고해주세요. 그리고 문서상의 문제는`문서 Github 페이지 <https://"
"github.com/godotengine/godot-docs/issues>`_\\ 에서 보고해주세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:14
#, fuzzy
msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>` and (re)visit "
"the :ref:`Scripting section <doc_scripting>` of the step-by-step tutorial."
msgstr ""
"이 페이지는 C#에 대한 간단한 소개와 그것이 무엇인지, 그리고 그것을 Godot에서 "
"사용하는 방법을 제공합니다. 그런 다음, :ref:`특정 기능을 사용하는 방법 "
"<doc_c_sharp_features>`\\ 을 살펴보고, :ref:`C# 과 GDScript API의 차이점 "
"<doc_c_sharp_differences>`\\ 에 대해 읽고 단계별 튜토리얼의 :ref:`스크립팅 섹"
"션 <doc_scripting>`\\ 을 확인하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:21
msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with the Mono 5.x .NET framework, including full support for "
"C# 7.0. Mono is an open source implementation of Microsoft's .NET Framework "
"based on the ECMA standards for C# and the Common Language Runtime. A good "
"starting point for checking its capabilities is the `Compatibility <http://"
"www.mono-project.com/docs/about-mono/compatibility/>`_ page in the Mono "
"documentation."
msgstr ""
"C#은 하이 레벨 프로그래밍 언어로 Microsoft가 개발했습니다. Godot에서는 Mono "
"5.x .NET framework로 구현되었으며, C# 7.0을 완전 지원합니다. Mono는 Microsoft"
"의 .NET Framework의 오픈 소스로 C#을 위한 ECMA 표준과 Common Language Runtime"
"에 기반으로 구현되었습니다. 적합성을 확인하기 위한 좋은 출발점으로 Mono 문서"
"에 있는 `적합성<http://www.mono-project.com/docs/about-mono/compatibility/"
">`_ 페이지 입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:29
msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"이것은 전체적으로 C# 언어에 대한 본격적인 튜토리얼이 **아닙니다**. 문법이나 "
"기능에 익숙하지 않다면  `Microsoft C# 가이드 <https://docs.microsoft.com/en-"
"us/dotnet/csharp/index>`_\\ 를 보거나 다른 적합한 설명을 찾아보세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:36
#, fuzzy
msgid "Setting up C# for Godot"
msgstr "Godot에 C# 설치하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:39
msgid "Windows"
msgstr "윈도우"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:41
msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`_ (*not* Visual Studio Code), which "
"contains utilities required to use C# in Godot. If you don't plan on using "
"the Visual Studio IDE, you can download just the `Visual Studio Build Tools "
"<https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?"
"sku=BuildTools&rel=15>`_ instead."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:50
msgid "macOS and Linux"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:52
msgid ""
"Download and install the latest version of the `Mono SDK <http://www.mono-"
"project.com/download/>`_. As of Godot 3.1 beta 3, the version number doesn't "
"matter since Godot bundles its own Mono 5.18 installation. We only need the "
"Mono installation for NuGet and MSBuild which are required to use C# in "
"Godot."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:58
#, fuzzy
msgid ""
"To download Mono on macOS, use the \"Stable Channel\" link from the `Mono "
"Downloads Page <http://www.mono-project.com/download/>`_. The Visual Studio "
"channel is an earlier version of Mono and will not work."
msgstr ""
"Mac에서 Mono v5.12+를 다운로드 하기 위해, `Mono 다운로드 페이지 <http://www."
"mono-project.com/download/>`_\\ 로 가서 \"Stable Channel\" 링크로 가세요.  "
"Visual Studio 채널은 이전 버전의 Mono로 Godot 3.0.3 이상에서는 작동하지 않습"
"니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:64
#, fuzzy
msgid "Additional notes"
msgstr "추가 정보:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:66
#, fuzzy
msgid ""
"Your Godot version must have Mono support enabled, so make sure to download "
"the **Mono version** of Godot. If you are building Godot from source, make "
"sure to follow the steps to enable Mono support in your build as outlined in "
"the :ref:`doc_compiling_with_mono` page."
msgstr ""
"소스에서 Godot를 빌드하는 경우, :ref:`doc_compiling_with_mono` 페이지에서 설"
"명된 Mono 지원이 포함된 빌드를 따르셔야 합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:72
#, fuzzy
msgid ""
"In summary, you must have installed Visual Studio or Mono (depending on your "
"operating system) **and** the Mono-enabled version of Godot."
msgstr ""
"요약하자면, 1) 현재 Godot 버전에 해당하는 Mono SDK 버전을 설치하고, 2) Godot"
"의 Mono 버전을 설치해야 합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:76
msgid "Configuring an external editor"
msgstr "외부 편집기 구성하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:78
#, fuzzy
msgid ""
"While Godot has its own script editor, its support for C# is kept minimal; "
"it's recommended that you use an external IDE or editor instead, such as "
"`Visual Studio Code <https://code.visualstudio.com/>`_ or MonoDevelop. These "
"provide auto-completion, debugging and other features useful when working "
"with C#. To set it up in Godot, click on **Editor → Editor Settings** and "
"scroll down to the bottom to the **Mono** settings. Under **Mono**, click on "
"**Editor** then choose your external editor of choice."
msgstr ""
"Godot가 자체 스크립트 에디터를 갖고 있지만, C#에 대한 지원은 최소한이므로 외"
"부 IDE나 편집기를 사용하는 것을 추천합니다, Microsoft Visual Studio Code나 "
"MonoDevelop 같은 것은 자동 완성을 제공하며 C#으로 작업할 때 디버깅과 다른 유"
"용한 기능이 있습니다. Godot에 설정하기 위해, ``에디터``\\ 를 클릭하고 ``에디"
"터 설정``\\ 으로 갑니다. 아래로 스크롤하면, ``Mono`` 설정이 나옵니다. Mono에"
"서 ``Editor``\\ 를 클릭하고 외부 편집기를 선택하는 페이지가 나타납니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:87
msgid ""
"If you are using Visual Studio Code, ensure you download and install the `C# "
"extension <https://marketplace.visualstudio.com/items?itemName=ms-vscode."
"csharp>`_ to enable features like syntax highlighting and IntelliSense."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:92
msgid "Creating a C# script"
msgstr "C# 스크립트 만들기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:94
#, fuzzy
msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting ``Attach script`` in the context menu of a node in "
"your scene:"
msgstr ""
"Godot를 위한 C# 설정이 성공적으로 마친 후, 씬의 노드 메뉴에서 ``스크립트 붙이"
"기``\\ 를 눌렀을 때, 다음 설정이 보여야 합니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:99
#, fuzzy
msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some places in the "
"documentation still lack C# examples, most concepts can be transferred "
"easily from GDScript."
msgstr ""
"일부 세부 사항이 변경되는 동안, 대부분의 작업은 스크립팅을 C#으로 하는 것과 "
"동일합니다. Godot로 처음 접해보신다면, 이 시점에서 :ref:`doc_scripting` 튜토"
"리얼을 정독하시는 것이 좋습니다. 문서의 일부는 C# 예제가 부족하지만, 대부분"
"은 일찍이 GDScript에서 옮길 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:106
msgid "Project setup and workflow"
msgstr "프로젝트 설정과 작업 흐름"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:108
#, fuzzy
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.mono`` and ``Properties/AssemblyInfo.cs``). All of these but ``.mono`` "
"are important and should be committed to your version control system. ``."
"mono`` can be safely added to the ignore list of your VCS. When "
"troubleshooting, it can sometimes help to delete the ``.mono`` folder and "
"let it regenerate."
msgstr ""
"첫 C# 스크립트를 생성하면, Godot는 Godot 프로젝트를 위한 C# 프로젝트 파일을 "
"초기화합니다. 여기에는 C# 솔루션 (``.sin``)이나 프로젝트 (``.csproj``) 파일 "
"뿐만 아니라, 일부 유용 파일과 폴더들 (``.mono``, sometimes ``Properties``)을 "
"생성하는 것도 포함합니다. ``.mono``\\ 를 제외하고는 모두 중요하므로 버전 관"
"리 시스템에 유지해야 합니다. ``.mono``\\ 는 버전관리 시스템의 무시 목록에 쉽"
"게 추가할 수 있습니다. 문제를 해결할 때, ``.mono`` 폴더를 삭제하고 다시 만드"
"는 것이 때로는 도움이 됩니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:117
#, fuzzy
msgid ""
"Note that currently, there are some issues where Godot and the C# project "
"don't stay in sync; if you delete, rename or move a C# script, the change "
"may not be reflected in the C# project file. In cases like this, you will "
"have to edit the C# project file manually."
msgstr ""
"현재, Godot와 C# 프로젝트는 동기화 되지 않는 문제가 있습니다; 스크립트나 노"
"드 따위를 삭제, 이름 변경, 이동을 한다면 더 이상 맞춰지지 않게 될 것입니다. "
"이 경우, 수동으로 솔루션 파일을 편집하는 것이 도움이 됩니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:122
#, fuzzy
msgid ""
"For example, if you created a script (e.g. ``Test.cs``) and delete it in "
"Godot, compilation will fail because the missing file is still expected to "
"be there by the C# project file. For now, you can simply open up the ``."
"csproj`` file and look for the ``ItemGroup``, there should be a line "
"included like the following:"
msgstr ""
"예제: 스크립트를 생성하고 (예를 들어 ``Test.cs``)그리고 Godot에서 삭제한다"
"면, CS 프로젝트로 있을 것이라고 예측되는 파일이 없기 때문에 편집은 실패할 것"
"입니다. 당분간, 단순히 ``.csproj`` 파일을 열고 ``ItemGroup``\\ 을 본다면 다음"
"과 같은 글이 있어야 합니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:136
#, fuzzy
msgid ""
"Simply remove that line and your project should build correctly again. Same "
"for renaming and moving things, simply rename and move them in the project "
"file if needed."
msgstr ""
"단순히 이 글을 삭제하면 프로젝트는 다시 잘 지어져야 합니다. 이름 변경과 이동"
"도 이와 마찬가지로, 간단히 필요에 따라 이름을 바꾸고 프로젝트 파일로 옮깁니"
"다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:141
msgid "Example"
msgstr "예제"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:143
msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr ""
"여기 몇 가지 주석으로 작업이 이루어지는 방법을 설명하는 공백 C# 스크립트가 있"
"습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:170
#, fuzzy
msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` class which is part of the "
"``Godot`` namespace. For a list of methods in the ``GD`` class, see the "
"class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"보시다시피, Godot의 ``print`` 함수와 같은 전역 범위의 것은 기본적으로 ``GD`` "
"네임 스페이스로 이용할 수 있습니다. 그 목록을 보려면 :ref:`@GDScript "
"<class_@gdscript>`\\ 와 :ref:`@GlobalScope <class_@globalscope>`\\ 에 대한 클"
"래스 참조 페이지를 참고하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:177
#, fuzzy
msgid ""
"Keep in mind that the class you wish to attach to your node should be named "
"as the ``.cs`` file. Otherwise, you will get the following error and won't "
"be able to run the scene: *\"Cannot find class XXX for script res://XXX.cs\"*"
msgstr ""
"노드에 붙이고 싶은 클래스 이름이 ``.cs`` 파일이어야 한다는 사실을 명심하세"
"요. 그렇지 않으면, 다음과 같은 오류를 받게 되며 씬을 실행할 수 없을 것입니"
"다: ``Cannot find class XXX for script res://XXX.cs``."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:183
msgid "General differences between C# and GDScript"
msgstr "C#과 GDScript와의 일반적인 차이"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:185
msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"GDScript/C++에서는 ``snake_case``\\ 를 쓰지만 C# API는 ``PascalCase``\\ 를 씁"
"니다. 가능하면 공백과 getters/setters이 속성으로 변환됩니다. 일반적으로 C# "
"Godot API는 합리적으로 가능한 것처럼 관용적이도록 노력합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:189
#, fuzzy
msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr "더 자세한 내용은, :ref:`doc_c_sharp_differences` 페이지를 참고하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:192
msgid "Current gotchas and known issues"
msgstr "현재 문제와 알려진 문제"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:194
#, fuzzy
msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for Mono issues <https://github.com/"
"godotengine/godot/labels/topic%3Amono>`_."
msgstr ""
"C# 지원이 Godot에서 꽤 새롭기 때문에, 성장통이 있고 다듬어야 할 곳이 여전히 "
"있습니다. 하단에는 가장 중요한 문제 목록으로 Godot에서 C#으로 갈 때 알아두어"
"야 합니다, 하지만 의심스러운 점이 있다면 공식 `Mono 이슈를 위한 이슈 트래커 "
"<https://github.com/godotengine/godot/labels/topic%3Amono>`_\\ 를 살펴보세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:200
#, fuzzy
msgid ""
"As explained above, the C# project isn't always kept in sync automatically "
"when things are deleted, renamed or moved in Godot (`#12917 <https://github."
"com/godotengine/godot/issues/12917>`_)."
msgstr ""
"위에서 설명했듯이, C# 프로젝트가 Godot에서 삭제, 이름 변경, 이동을 할 때 항"
"상 동기화를 자동으로 하지는 않습니다 (`#12917 <https://github.com/"
"godotengine/godot/issues/12917>`_)"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:203
#, fuzzy
msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr ""
"C#에서 에디터 플러그인과 툴 스크립트를 적는 것은 아직 지원하지 않습니다"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:204
msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:206
#, fuzzy
msgid ""
"Exporting Mono projects is only supported for desktop platforms (Linux, "
"Windows and macOS). Android, iOS, HTML5 and UWP are not currently supported "
"(`#20267 <https://github.com/godotengine/godot/issues/20267>`_, `#20268 "
"<https://github.com/godotengine/godot/issues/20268>`_ `#20270 <https://"
"github.com/godotengine/godot/issues/20270>`_ `#20271 <https://github.com/"
"godotengine/godot/issues/20271>`_)."
msgstr ""
"Mono 프로젝트를 내보내는 것은 데스크탑 플랫폼 (Linux, 윈도우, 그리고 macOS)"
"만 지원합니다. HTML5, Android, iOS 그리고 UWP는 현재는 지원하지 않습니다 "
"(`#18364 comment <https://github.com/godotengine/godot/"
"issues/18364#issuecomment-406222102>`_)"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:212
msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:216
msgid "Performance of C# in Godot"
msgstr "Godot에서 C#의 퍼포먼스"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:218
#, fuzzy
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads. C# is faster, but requires some expensive marshalling "
"when talking to Godot."
msgstr ""
"일부 예비  `벤치마크 <https://github.com/cart/godot3-bunnymark>`_\\ 에 따르"
"면, Godot에서 C#의 퍼포먼스는 - 일반적으로 같은 순서의 크기에서 - 순수한 경우"
"에서 대략 GDScript의 **~4x**\\ 입니다. 전체 퍼포먼스에서는, C++이 아직 조금 "
"더 빠릅니다; 하지만 세부 사항은 사용하는 경우에 따라 다릅니다. GDScript는 대"
"부분의 일반적인 스크립팅 작업에 충분히 빠릅니다. C#이 더 빠르지만, Godot에 대"
"화하려면 마샬링이 필요합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:226
#, fuzzy
msgid "Using NuGet packages in Godot"
msgstr "Godot에서 Nuget 패키지 사용하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:228
#, fuzzy
msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`Nuget <https://www.nuget.org/>`_ 패키지를 설치하여 프로젝트처럼, Godot와 사"
"용할 수 있습니다. (vs 코드와 같은) 많은 IDE는 직접 패키지를 추가할 수 있습니"
"다. 또한 프로젝트 루트에 있는 ``.csproj`` 파일에 패키지 참조를 수동으로 추가"
"할 수 있습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:243
#, fuzzy
msgid ""
"Whenever packages are added or modified, run ``nuget restore`` in the root "
"of the project directory. To ensure that NuGet packages will be available "
"for msbuild to use, run:"
msgstr ""
"패키지가 추가되고 수정될 때마다,프로젝트 디렉토리 루트에서 nuget restore를 실"
"행하여, msbuild가 사용하고 실행하기 위한 nuget 패키지를 이용할 수 있도록 합니"
"다::"
