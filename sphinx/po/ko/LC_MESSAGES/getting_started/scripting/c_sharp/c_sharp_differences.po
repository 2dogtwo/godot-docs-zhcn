# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-22 14:46+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:4
#, fuzzy
msgid "C# API differences to GDScript"
msgstr "GDScript와의 API 차이점"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:6
msgid "This is a (incomplete) list of API differences between C# and GDScript."
msgstr "이것은 C#과 GDScript간의 (불완전한) API 차이점 목록입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:9
msgid "General differences"
msgstr "일반적인 차이점"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:11
msgid ""
"As explained in the :ref:`doc_c_sharp`, C# generally uses ``PascalCase`` "
"instead of the ``snake_case`` used in GDScript and C++."
msgstr ""
":ref:`doc_c_sharp`\\ 에서 설명했듯이, GDScript와 C++에서 ``snake_case``\\ 가 "
"사용되는 반면, C#은 ``PascalCase``\\ 를 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:15
msgid "Global scope"
msgstr "전역 범위"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:17
msgid ""
"Global functions and some constants had to be moved to classes, since C# "
"does not allow declaring them in namespaces. Most global constants were "
"moved to their own enums."
msgstr ""
"C#은 네임 스페이스에서 전역 함수와 일부 상수는 선언하지 않기 때문에 이 둘은 "
"클래스로 이동해야 합니다. 대부분의 전역 상수는 자신의 열거형으로 이동합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:22
msgid "Constants"
msgstr "상수"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:24
msgid ""
"Global constants were moved to their own enums. For example, ``ERR_*`` "
"constants were moved to the ``Error`` enum."
msgstr ""
"전역 상수는 자신의 열거형으로 이동합니다. 예를 들어 ``ERR_*`` 상수는 "
"``Error`` 열거형으로 이동합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:27
msgid "Special cases:"
msgstr "특별한 경우:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:30
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:59
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:199
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:214
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:226
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:237
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:245
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:260
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:272
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:329
msgid "GDScript"
msgstr "GDScript"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:30
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:59
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:199
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:214
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:226
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:237
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:245
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:260
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:272
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:329
msgid "C#"
msgstr "C#"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:32
msgid "``SPKEY``"
msgstr "``SPKEY``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:32
msgid "``GD.SpKey``"
msgstr "``GD.SpKey``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:33
msgid "``TYPE_*``"
msgstr "``TYPE_*``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:33
msgid "``Variant.Type`` enum"
msgstr "``Variant.Type`` 열거형"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:34
msgid "``OP_*``"
msgstr "``OP_*``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:34
msgid "``Variant.Operator`` enum"
msgstr "``Variant.Operator`` 열거형"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:38
msgid "Math functions"
msgstr "수학 함수"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:40
msgid ""
"Math global functions, like ``abs``, ``acos``, ``asin``, ``atan`` and "
"``atan2``, are located under ``Mathf`` as ``Abs``, ``Acos``, ``Asin``, "
"``Atan`` and ``Atan2``. The ``PI`` constant can be found as ``Mathf.Pi``."
msgstr ""
"``abs``, ``acos``, ``asin``, ``atan`` 그리고 ``atan2``\\ 와 같은 수학 전역 함"
"수는 ``Mathf``\\ 에 위치하며,  ``Abs``, ``Acos``, ``Asin``, ``Atan`` 그리고 "
"``Atan2``\\ 로 존재합니다. ``PI`` 상수는 ``Mathf.Pi``\\ 입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:45
msgid "Random functions"
msgstr "랜덤 함수"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:47
msgid ""
"Random global functions, like ``rand_range`` and ``rand_seed``, are located "
"under ``GD``. Example: ``GD.RandRange`` and ``GD.RandSeed``."
msgstr ""
"``rand_range``\\ 와 ``rand_seed``\\ 와 같은 랜덤 전역 함수는 ``GD``\\ 에 위치"
"합니다. 예: ``GD.RandRange``\\ 와 ``GD.RandSeed``."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:51
msgid "Other functions"
msgstr "기타 함수"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:53
msgid ""
"Many other global functions like ``print`` and ``var2str`` are located under "
"``GD``. Example: ``GD.Print`` and ``GD.Var2Str``."
msgstr ""
"``print``\\ 와 ``var2str``\\ 와 같은 기타 다른 전역 함수는 ``GD``\\ 에 위치합"
"니다. 예: ``GD.Print``\\ 와 ``GD.Var2Str``."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:56
msgid "Exceptions:"
msgstr "예외:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:61
msgid "``weakref(obj)``"
msgstr "``weakref(obj)``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:61
msgid "``Object.WeakRef(obj)``"
msgstr "``Object.WeakRef(obj)``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:62
msgid "``is_instance_valid(obj)``"
msgstr "``is_instance_valid(obj)``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:62
msgid "``Object.IsInstanceValid(obj)``"
msgstr "``Object.IsInstanceValid(obj)``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:66
msgid "Tips"
msgstr "팁"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:68
msgid ""
"Sometimes it can be useful to use the ``using static`` directive. This "
"directive allows to access the members and nested types of a class without "
"specifying the class name."
msgstr ""
"때로는 ``using static`` 지시문을 사용하는 게 유용할 수 있습니다. 이 지시문이"
"면 클래스 이름을 지정하지 않고도 클래스의 멤버와 중첩된 타입에 접근할 수 있습"
"니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:71
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:92
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:132
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:143
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:155
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:313
msgid "Example:"
msgstr "예시:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:86
msgid "Export keyword"
msgstr "Export 키워드"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:88
msgid ""
"Use the ``[Export]`` attribute instead of the GDScript ``export`` keyword. "
"This attribute can also be provided with optional :ref:"
"`PropertyHint<enum_@GlobalScope_PropertyHint>` and ``hintString`` "
"parameters. Default values can be set by assigning a value."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:114
msgid "Signal keyword"
msgstr "Signal 키워드"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:116
msgid ""
"Use the ``[Signal]`` attribute to declare a signal instead of the GDScript "
"``signal`` keyword. This attribute should be used on a `delegate`, whose "
"name signature will be used to define the signal."
msgstr ""
"GDScript의 ``signal`` 키워드 대신 ``[Signal]`` 속성을 사용하여 시그널을 선언"
"합니다. 이 속성은 `delegate`\\ 에 사용되어야 하며, 이름은 시그널을 정의하는 "
"데 사용됩니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:124
msgid "See also: :ref:`c_sharp_signals`"
msgstr "이것도 보세요: :ref:`c_sharp_signals`"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:127
msgid "Singletons"
msgstr "Singletons"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:129
msgid ""
"Singletons are available as static classes rather than using the singleton "
"pattern. This is to make code less verbose than it would be with an "
"``Instance`` property."
msgstr ""
"싱글톤은 싱글톤 패턴을 사용하는 대신 정적 클래스로 사용할 수 있습니다. 이것으"
"로 ``Instance`` 속성으로 작업하는 것과 비슷하면서도 더 적은 문장의 코드를 만"
"들 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:138
msgid ""
"However, in some very rare cases this is not enough. For example, you may "
"want to access a member from the base class ``Godot.Object``, like "
"``Connect``. For such use cases we provide a static property named "
"``Singleton`` that returns the singleton instance. The type of this instance "
"is ``Godot.Object``."
msgstr ""
"하지만, 일부 드문 경우가 있어 충분하지 않습니다. 예를 들어 ``Connect``\\ 처"
"럼 기본 클래스 ``Godot.Object``\\ 의 멤버로 접근해야하는 경우가 있습니다. 이"
"런 경우를 위해, 싱글톤 인스턴스를 반환하는 ``Singleton`` 정적 속성을 제공합니"
"다. 인스턴스의 타입은 ``Godot.Object``\\ 입니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:150
msgid "String"
msgstr "String"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:152
msgid ""
"Use ``System.String`` (``string``). Most of Godot's String methods are "
"provided by the ``StringExtensions`` class as extension methods."
msgstr ""
"``System.String`` (``string``)을 사용합니다. 모든 Godot 문자열 메서드는 "
"``StringExtensions`` 클래스에서 확장 메서드 형태로 제공됩니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:162
msgid "There are a few differences, though:"
msgstr "하지만 몇 가지 차이점은 있습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:164
msgid ""
"``erase``: Strings are immutable in C#, so we cannot modify the string "
"passed to the extension method. For this reason, ``Erase`` was added as an "
"extension method of ``StringBuilder`` instead of string. Alternatively, you "
"can use ``string.Remove``."
msgstr ""
"``erase``: C#에서는 문자열이 변경되지 않아서 확장 메서드에 전달된 문자열을 수"
"정할 수 없습니다. 이런 이유로 ``Erase``\\ 는 문자열의 확장 메서드가 아닌, "
"``StringBuilder``\\ 의 확장 메서드 형태로 추가되었습니다. 이를 대체하기 위해 "
"``string.Remove``\\ 를 사용할 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:168
msgid ""
"``IsSubsequenceOf``/``IsSubsequenceOfi``: An additional method is provided, "
"which is an overload of ``IsSubsequenceOf``, allowing you to explicitly "
"specify case sensitivity:"
msgstr ""
"``IsSubsequenceOf``/``IsSubsequenceOfi``: ``IsSubsequenceOf``\\ 의 오버로드"
"(overload)인 추가 메서드를 제공하여, 명시적으로 대소문자를 구분할 수 있습니"
"다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:179
msgid ""
"``Match``/``Matchn``/``ExprMatch``: An additional method is provided besides "
"``Match`` and ``Matchn``, which allows you to explicitly specify case "
"sensitivity:"
msgstr ""
"``Match``/``Matchn``/``ExprMatch``: ``Match``\\ 와 ``Matchn``\\ 이외에 추가 "
"메서드를 제공하여, 명시적으로 대소문자를 구분할 수 있습니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:190
msgid "Basis"
msgstr "Basis"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:192
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Basis()`` initializes all primitive members to their default value. Use "
"``Basis.Identity`` for the equivalent of ``Basis()`` in GDScript and C++."
msgstr ""
"C#에서 Struct은 매개변수 없는 생성자를 가질 수 없습니다. 따라서 ``new "
"Basis()``\\ 는 모든 기본 멤버를 기본 값으로 초기화합니다. GDScript와 C++에서 "
"``Basis()``\\ 에 해당하는 것으로 ``Basis.Identity``\\ 를 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:196
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:242
msgid "The following method was converted to a property with a different name:"
msgstr "다음 메서드들는 다른 이름으로 변경된 속성들입니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:201
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:217
msgid "``get_scale()``"
msgstr "``get_scale()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:201
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:217
msgid "``Scale``"
msgstr "``Scale``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:205
msgid "Transform2D"
msgstr "Transform2D"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:207
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Transform2D()`` initializes all primitive members to their default value. "
"Please use ``Transform2D.Identity`` for the equivalent of ``Transform2D()`` "
"in GDScript and C++."
msgstr ""
"C#에서 Struct는 매개변수 없는 생성자를 가질 수 없습니다. 따라서, ``new "
"Transform2D()``\\ 는 모든 기본 멤버를 기본 값으로 초기화합니다. GDScript와 C+"
"+에서 ``Transform2D()``\\ 에 해당하는 것으로 ``Transform2D.Identity``\\ 를 사"
"용해주세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:211
msgid ""
"The following methods were converted to properties with their respective "
"names changed:"
msgstr "다음 메서드들은 관련된 이름으로 변경된 속성들입니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:216
msgid "``get_rotation()``"
msgstr "``get_rotation()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:216
msgid "``Rotation``"
msgstr "``Rotation``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:221
msgid "Plane"
msgstr "Plane"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:223
msgid ""
"The following method was converted to a property with a *slightly* different "
"name:"
msgstr "다음 메서드는 *약간* 다른 이름으로 변경된 속성입니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:228
msgid "``center()``"
msgstr "``center()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:228
msgid "``Center``"
msgstr "``Center``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:232
msgid "Rect2"
msgstr "Rect2"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:234
msgid ""
"The following field was converted to a property with a *slightly* different "
"name:"
msgstr "다음 영역은 *약간* 다른 이름으로 변경된 속성입니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:239
msgid "``end``"
msgstr "``end``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:239
msgid "``End``"
msgstr "``End``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:247
msgid "``get_area()``"
msgstr "``get_area()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:247
msgid "``Area``"
msgstr "``Area``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:251
msgid "Quat"
msgstr "Quat"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:253
msgid ""
"Structs cannot have parameterless constructors in C#. Therefore, ``new "
"Quat()`` initializes all primitive members to their default value. Please "
"use ``Quat.Identity`` for the equivalent of ``Quat()`` in GDScript and C++."
msgstr ""
"C#에서 Struct는 매개변수 없는 생성자를 가질 수 없습니다. 따라서, ``new "
"Quat()``\\ 는 모든 기본 멤버를 기본 값으로 초기화합니다. GDScript와 C++에서 "
"``Quat()``\\ 에 해당하는 것으로 ``Quat.Identity``\\ 를 사용해주세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:257
msgid ""
"The following methods were converted to a property with a different name:"
msgstr "다음 메서드는 다른 이름으로 변경된 속성들입니다:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:262
msgid "``length()``"
msgstr "``length()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:262
msgid "``Length``"
msgstr "``Length``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:263
msgid "``length_squared()``"
msgstr "``length_squared()``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:263
msgid "``LengthSquared``"
msgstr "``LengthSquared``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:267
msgid "Array"
msgstr "배열"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:269
msgid ""
"*This is temporary. PoolArrays will need their own types to be used the way "
"they are meant to.*"
msgstr ""
"*이것은 일시적인 것입니다. PoolArray도 자신을 의미하는 자체적인 타입이 필요"
"할 것입니다.*"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:274
msgid "``Array``"
msgstr "``Array``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:274
#, fuzzy
msgid "``Godot.Collections.Array``"
msgstr "``Godot.Array``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:275
msgid "``PoolIntArray``"
msgstr "``PoolIntArray``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:275
msgid "``int[]``"
msgstr "``int[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:276
msgid "``PoolByteArray``"
msgstr "``PoolByteArray``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:276
msgid "``byte[]``"
msgstr "``byte[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:277
msgid "``PoolFloatArray``"
msgstr "``PoolFloatArray``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:277
msgid "``float[]``"
msgstr "``float[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:278
msgid "``PoolStringArray``"
msgstr "``PoolStringArray``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:278
msgid "``String[]``"
msgstr "``String[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:279
msgid "``PoolColorArray``"
msgstr "``PoolColorArray``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:279
msgid "``Color[]``"
msgstr "``Color[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:280
msgid "``PoolVector2Array``"
msgstr "``PoolVector2Array``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:280
msgid "``Vector2[]``"
msgstr "``Vector2[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:281
msgid "``PoolVector3Array``"
msgstr "``PoolVector3Array``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:281
msgid "``Vector3[]``"
msgstr "``Vector3[]``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:284
#, fuzzy
msgid ""
"``Godot.Collections.Array<T>`` is a type-safe wrapper around ``Godot."
"Collections.Array``. Use the ``Godot.Collections.Array<T>(Godot.Collections."
"Array)`` constructor to create one."
msgstr ""
"``Godot.Array<T>``\\ 는 ``Godot.Array``\\ 를 둘러싸는 타입 안전 포장지입니"
"다. 만들기 위해 ``Godot.Array<T>(Godot.Array)`` 생성자를 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:288
msgid "Dictionary"
msgstr "딕셔너리"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:290
#, fuzzy
msgid "Use ``Godot.Collections.Dictionary``."
msgstr "``Godot.Dictionary``\\ 를 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:292
#, fuzzy
msgid ""
"``Godot.Collections.Dictionary<T>`` is a type-safe wrapper around ``Godot."
"Collections.Dictionary``. Use the ``Godot.Collections.Dictionary<T>(Godot."
"Collections.Dictionary)`` constructor to create one."
msgstr ""
"``Godot.Dictionary<T>``\\ 는 ``Godot.Dictionary``\\ 를 둘러싸는 타입 안전 포"
"장지입니다. 만들기 위해 ``Godot.Dictionary<T>(Godot.Dictionary)`` 생성자를 사"
"용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:296
msgid "Variant"
msgstr "Variant"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:298
msgid "``System.Object`` (``object``) is used instead of ``Variant``."
msgstr "``Variant`` 대신 ``System.Object`` (``object``)를 사용하세요."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:301
msgid "Communicating with other scripting languages"
msgstr "다른 스크립팅 언어와 소통하기"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:303
msgid "This is explained extensively in :ref:`doc_cross_language_scripting`."
msgstr ""
"이것은 : ref :`doc_cross_language_scripting`에 광범위하게 설명되어 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:306
msgid "Yield"
msgstr "Yield"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:308
msgid ""
"Something similar to GDScript's ``yield`` with a single parameter can be "
"achieved with C#'s `yield keyword <https://docs.microsoft.com/en-US/dotnet/"
"csharp/language-reference/keywords/yield>`_."
msgstr ""
"단일 매개변수를 사용하는 GDScript의 ``yield``\\ 와 비슷한 C#의 `yield 키워드 "
"<https://docs.microsoft.com/ko/dotnet/csharp/language-reference/keywords/"
"yield>`_."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:311
msgid ""
"The equivalent of yield on signal can be achieved with async/await and "
"``Godot.Object.ToSignal``."
msgstr ""
"async/await와 ``Godot.Object.ToSignal``\\로 시그널에서 yield와 동일한 효과를 "
"얻을 수 있습니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:321
msgid "Other differences"
msgstr "다른 차이점"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:323
msgid ""
"``preload``, as it works in GDScript, is not available in C#. Use ``GD."
"Load`` or ``ResourceLoader.Load`` instead."
msgstr ""
"GDScript에서 쓰이는 ``preload``\\ 는 C#에서 사용할 수 없습니다. 대신 ``GD."
"Load`` 또는 ``ResourceLoader.Load``\\ 를 사용합니다."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:326
msgid "Other differences:"
msgstr "다른 차이점:"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:331
msgid "``Color8``"
msgstr "``Color8``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:331
msgid "``Color.Color8``"
msgstr "``Color.Color8``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:332
msgid "``is_inf``"
msgstr "``is_inf``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:332
msgid "``float.IsInfinity``"
msgstr "``float.IsInfinity``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:333
msgid "``is_nan``"
msgstr "``is_nan``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:333
msgid "``float.IsNaN``"
msgstr "``float.IsNaN``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:334
msgid "``dict2inst``"
msgstr "``dict2inst``"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:334
#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:335
msgid "TODO"
msgstr "TODO"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_differences.rst:335
msgid "``inst2dict``"
msgstr "``inst2dict``"
