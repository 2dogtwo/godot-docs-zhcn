# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-20 10:29+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:4
msgid "Nodes and terminology"
msgstr "노드 그리고 용어"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:6
msgid ""
"Before continuing, it must be noted that the *Node* terminology needs to be "
"used with care. When referring to *Visual Script Nodes* (or generally "
"*Nodes*) this text will refer to the little boxes you connect with lines, "
"which are part of a graph. When referring to *Scene Nodes*, it is implied "
"that the elements that make up a Scene are being referred, which are part of "
"a tree. Their naming is similar but their function is different. When "
"referring to *Node* here, it will be implied that a *Visual Script Node* is "
"referred to unless indicated otherwise."
msgstr ""
"계속 하기 전에, *Node* 용어 사용에 유의해야 합니다. *Visual Script Nodes* (또"
"는 일반적으로 *Nodes*)를 볼 때 이 텍스트는 당신이 그래프의 일부인 선으로 연결"
"한 작은 상자를 보여줄 것입니다. *Scene Nodes*\\ 를 볼 때, 씬이 보이도록 구성"
"하는 요소로, 트리의 일부분임을 상징합니다. 그들의 이름은 비슷하지만 그들의 함"
"수는 다릅니다. 여기에서 *Node*\\ 를 본다면, 달리 명시되지 않는 한 *Visual "
"Script Node*\\ 가 보여지는 것을 상징할 것입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:15
msgid "Node properties"
msgstr "노드 속성"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:17
msgid ""
"Like in most visual scripting implementations, each node has editable "
"properties. In Godot, though, we try to avoid bloating the nodes with "
"editable controls for the sake of readability."
msgstr ""
"대부분의 Visual scripting 구현과 마찬가지로, 각 노드에는 편집 가능한 속성이 "
"있습니다. 하지만 godot에서는, 가독성을 높이기 위해 편집 가능한 제어 수단을 사"
"용하여 노드가 팽창하는 것을 방지하려고 합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:20
msgid ""
"Nodes still display the required information as text, but editing is done "
"via the *Inspector*. To edit them, select any node and edit its properties "
"in the *Inspector*."
msgstr ""
"노드는 여전히 필요한 정보를 텍스트로 표시하지만, 편집은 *인스펙터*\\ 를 통해 "
"이루어집니다. 노드를 편집하려면, 아무 노드나 선택하고 *인스펙터*\\ 에서 해당 "
"속성을 편집합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:25
msgid "Ports and connections"
msgstr "포트 그리고 연결"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:27
msgid ""
"Programming in Godot Visual Scripting is done via *Nodes* and *Port "
"Connections* inside each function."
msgstr ""
"Godot Visual Scripting에서 프로그래밍은 각 함수 안에서 *노드*\\ 와 *포트 연결"
"*\\ 을 통해 이루어집니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:31
msgid "Ports"
msgstr "포트(Ports)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:33
msgid ""
"Nodes in Godot Visual Scripting have *Ports*. These are endpoints that "
"appear to the left and right of nodes and which can be used to make "
"*Connections*: There are two types of *Ports*: *Sequence* and *Data*."
msgstr ""
"Godot Visual Scripting의 노드는 *포트*\\ 를 가지고 있습니다. 노드의 왼쪽과 오"
"른쪽에는 끝 점이 나타나고 거기서 *연결(Connections)*\\ 을 만들 수 있습니다: "
"두 가지 유형의 *포트*\\ 가 있습니다: *시퀀스(Sequence)* 그리고 *데이터"
"(Data)*."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:40
#, fuzzy
msgid ""
"*Sequence Ports* indicate the order in which operations are executed. "
"Typically when a *Node* is done processing, it will go to the next node from "
"one of the ports at the right. If nothing is connected, the function may "
"end, or another output *Sequence Port* might be tried (this depends on the "
"node). Thanks to this, you can follow the logic flow within a function by "
"following the white lines. Not every *Node* has *Sequence Ports*. In fact, "
"most do not."
msgstr ""
"*시퀀스 포트*\\ 는 작업이 실행되는 순서를 나타냅니다. 일반적으로 *노드*\\ 가 "
"처리를 완료하면, 오른쪽에 있는 포트 중 하나에서 다음 노드로 이동합니다. 연결"
"된 것이 없으면 함수는 종료되거나, 다른 출력 *시퀀스 포트*\\ 가 작업될 수 있습"
"니다 (노드마다 다름). 이 덕분에, 흰색 선을 따라 함수 내의 논리 흐름을 따라갈 "
"수 있습니다. 모든 *노드*\\ 가 *시퀀스 포트*\\ 를 가지고 있지는 않습니다. 사"
"실, 대부분이 없습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:46
msgid ""
"*Data Ports* ports contain typed values. Types can be any regular Godot "
"types, such as a boolean, an integer, a string, a Vector3, an array, any "
"Object or Scene Node, etc. A *Data Port* on the right side of a node is "
"considered an output, while, a port on the left side is an input. Connecting "
"them allows information to flow to the next node."
msgstr ""
"*데이터 포트(Data Ports)* 포트는 타입 값을 포함합니다. 타입은 부울, 정수, 문"
"자열, Vector3, 배열, 모든 객체 또는 씬 노드 등과 같은 일반 Godot 타입이 될 "
"수 있습니다. 노드의 오른쪽에 있는 *데이터 포트*는 출력으로 간주되며, 한편 왼"
"쪽의 포트는 입력입니다. 이들을 연결하면 정보를 다음 노드로 전달할 수 있습니"
"다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:51
msgid ""
"Not all *Data Port* types are compatible and will allow connections, though. "
"Pay special attention to colors and icons, as each type has a different "
"representation:"
msgstr ""
"모든 *데이터 포트* 타입이 호환되거나 연결이 되는 것은 아닙니다. 각 타입마다 "
"다르게 표현되어있는, 색상과 아이콘에 특히 주의를 기울이세요:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:58
msgid "Connections"
msgstr "연결(Connections)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:60
msgid ""
"Connecting is a relatively simple process. Drag an *Output Port* towards an "
"*Input Port*."
msgstr ""
"연결은 비교적 간단한 과정입니다. *출력 포트(Output Port)*\\ 를 *입력 포트"
"(Input Port)*\\ 로 드래그 합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:65
msgid ""
"Disconnecting takes a bit more practice. Disconnecting in *Data Ports* "
"happens by dragging the *Input* away, while for *Sequence Ports*, this "
"happens by dragging the *Output* away."
msgstr ""
"연결 해제는 좀 더 연습이 필요합니다. *데이터 포트*\\ 에서 연결 해제는 *입력*"
"\\ 을 드래그 하는 것으로 이루어지는 반면, *시퀀스 포트*\\ 의 경우 *출력*\\ "
"을 드래그 하는 것으로 이루어집니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:71
#, fuzzy
msgid ""
"This may seem strange at first, but it happens because *Data Ports* are 1:N "
"(A single output port can connect to many inputs), while *Sequence Ports* "
"are N:1 (Many sequence outputs can be connected to a single input)."
msgstr ""
"처음에는 이상하게 보일 수도 있습니다, 하지만 *데이터 포트*\\ 는 1:N (단일 출"
"력 포트가 많은 입력에 연결될 수 있음)인 반면, *시퀀스 포트*\\ 는 N:1 (많은 시"
"퀀스 출력이 단일 입력에 연결될 수 있음)이기 때문입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:75
msgid ""
"Connecting to empty space (drag to connect but unpress over empty space) is "
"also context sensitive, it will supply a list of most common operations. For "
"sequences, it will be conditional nodes:"
msgstr ""
"빈 공간에 연결하는 것 (드래그 하여 연결하고 빈 공간을 누르지 않은 경우) 또한 "
"컨텍스트에 민감하여, 가장 흔한 작업 목록을 제공 합니다. 시퀀스의 경우에는 조"
"건부 노드가 됩니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:81
msgid "While, for data, a contextual set/get/call menu will open:"
msgstr "한편 데이터의 경우, 컨텍스트적 Set/Get/Call 메뉴가 열립니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:87
msgid "Adding nodes"
msgstr "노드 추가하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:89
msgid ""
"Finally! We got to the fun part! But, before explaining in more detail what "
"each type of node does, let's take a short look at how nodes are most "
"commonly added and dealt with."
msgstr ""
"마침내! 재미있는 부분에 도착했습니다! 하지만 각 노드 타입이 하는 일에 대해 구"
"체적으로 설명하기 전에, 어떻게 노드가 가장 일반적으로 추가되고 처리되는 지 짧"
"게 한번 알아봅시다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:94
msgid "Accessing scene nodes"
msgstr "씬 노드 액세스하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:96
msgid ""
"One of the most common tasks is accessing Scene Tree Nodes (again, not to "
"mistake with *Visual Script Nodes*). Dragging from the Scene Tree and "
"dropping into the canvas will ask you to *call a method* (sometimes referred "
"to as *member function*) on this node."
msgstr ""
"흔한 작업들 중 하나로는 씬 트리 노드(Scene Tree Nodes)에 액세스하는 것이 있습"
"니다 (다시 한번 말하건데, *Visual Script Nodes*\\ 로 착각하지 마십시오). 씬 "
"트리에서 캔버스로 드래그 하여 놓으면 이 노드에서 \"메서드 호출(call a "
"method)\" (*멤버 함수(member function)*\\ 라고 하기도 함) 여부를 물어봅니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:102
msgid ""
"While accessing properties is desired in most cases (more on that below), "
"sometimes *calling methods* can be useful too. Methods execute specific "
"actions on objects. In the above case, the mouse pointer can be warped to a "
"position in local coordinates to the control. Another common use case is "
"queueing a node for deletion, which is done with the *queue_free* method."
msgstr ""
"대부분의 경우 속성에 액세스하는 것이 좋지만 (아래에 자세히 설명되어 있음), 때"
"로는 *메서드 호출*\\ 도 유용할 수 있습니다. 메서드는 객체에서 특정 작업을 실"
"행합니다. 위의 경우로는, 마우스 포인터는 컨트롤에 대한 로컬 좌표의 위치로 비"
"틀 수 있습니다. 또 다른 일반적인 사용 사례는 노드를 삭제하기 위해 대기하는 것"
"으로, *queue_free* 메서드를 사용하여 이루어집니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:109
msgid ""
"Care must be taken that this only works if the scene being edited contains "
"your *Visual Script* in one of the nodes! Otherwise, a warning will be shown."
msgstr ""
"편집 중인 씬들 중 한 노드가 *Visual Script*\\ 를 포함하고 있어야만 작동된다"
"는 것에 주의하세요! 그렇지 않으면, 경고가 표시됩니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:113
msgid "Accessing scene node properties"
msgstr "씬 노드 속성 액세스하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:115
msgid ""
"This is the most common way to edit *Scene Nodes* in Visual Scripting. "
"Select a *Scene Node* from the *Scene Tree*, go to the Inspector, find *the "
"Name* of the property you want to edit (hint, *not* the value!) and drag it "
"to the canvas:"
msgstr ""
"이것은 Visual Scripting에서 *씬 노드*\\ 를 편집하는 가장 일반적인 방법입니"
"다. *씬 트리*\\ 에서 *씬 노드*\\ 를 선택하고, 인스펙터로 가서, 편집하려는 속"
"성의 *이름*\\ 을 찾고 (힌트, 값이 *아닙니다!*) 캔버스로 드래그 해옵니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:120
msgid ""
"The result is that this value can be changed from your script by writing to "
"a *Data Port*."
msgstr ""
"결과적으로 이 값은 *데이터 포트*\\ 에 기록하여 스크립트에서 변경할 수 있습니"
"다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:122
msgid ""
"If instead reading this value is desired, drag the node again but hold the "
"*Control* key (or Command on Mac). This will create a getter:"
msgstr ""
"이 값을 가져오는 대신, *Ctrl* 키 (혹은 Mac에서 Command 키)를 누른 채로 드래"
"그 합니다. Getter가 생성됩니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:127
msgid "In this case, the value can be read from a *Data Port*."
msgstr "이 경우에, *데이터 포트*\\ 에서 값을 읽을 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:131
msgid "Variables"
msgstr "변수(Variable)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:133
msgid ""
"Variables are memory containers local to the script which can hold a value. "
"This value can be read from any of the functions of the script or from other "
"scripts via the method described in the previous step."
msgstr ""
"변수는 값을 저장할 수 있는 스크립트의 로컬 메모리 컨테이너입니다. 이 값은 스"
"크립트의 모든 기능이나 이전 단계에서 설명한 방법을 통해 다른 스크립트에서 읽"
"을 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:135
msgid ""
"To add a Variable, push the \"+\" button on the *Variables* section of the "
"Members panel. Double-click the new variable to rename it:"
msgstr ""
"변수를 추가하려면, 멤버 패널의 *변수* 섹션에 있는 \"+\"버튼을 누릅니다. 새 변"
"수를 더블 클릭하여 이름을 바꿉니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:140
msgid "Right-clicking the variable allows you to configure its properties:"
msgstr "우클릭으로 변수의 속성을 구성할 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:147
#, fuzzy
msgid ""
"As it can be seen above, the type and initial value of the variable can be "
"changed, as well as some property hints. Ticking the \"Export\" option makes "
"the variable visible in the Inspector when selecting the node. This also "
"makes it available to other scripts via the method described in the previous "
"step."
msgstr ""
"위에서 볼 수 있듯이, 변수의 타입과 초기 값은 물론 일부 속성 힌트도 변경할 수 "
"있습니다. \"Export\"옵션을 선택하면 노드를 선택할 때 인스펙터에 변수가 표시됩"
"니다. 이 또한 이전 단계에서 설명한 방법으로 다른 스크립트에서도 사용할 수 있"
"습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:153
msgid ""
"To use the variable in the script, simply drag it to the canvas to create a "
"getter:"
msgstr ""
"스크립트에서 변수를 사용하려면, 간단히 캔버스로 드래그 하여 Getter를 생성합니"
"다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:158
msgid "Likewise, hold *Control* (*Command* on Mac) to drop a setter:"
msgstr ""
"마찬가지로, *Ctrl* (혹은 Mac에서 *Command*)을 눌러서 Setter를 놓습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:164
msgid "Signals"
msgstr "시그널(Signal)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:166
msgid ""
"It is also possible to create your own signals in a script and use them. For "
"this, do the same steps you did for variables in the previous step, except "
"for *Signals*:"
msgstr ""
"스크립트에서 자신의 시그널을 만들어서 사용하는 것도 가능합니다. 이를 위해 *시"
"그널*\\ 을 제외하고, 이전 단계의 변수에 작업한 것과 같은 절차를 진행해야 합니"
"다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:171
#, fuzzy
msgid ""
"A signal can also be edited via the right-click menu to customize its "
"arguments:"
msgstr "우클릭 메뉴를 통해 시그널의 인수를 정의하도록 편집할 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:176
#, fuzzy
msgid ""
"The signal you have created will appear in the Inspector, along with the "
"built-in node signals. This allows you to connect it from another script "
"from another *Scene Node*:"
msgstr ""
"생성된 시그널은 내장 노드 시그널과 함께 인스펙터에 나타납니다. 이를 통해 다"
"른 *씬 노드*\\ 의 다른 스크립트에 시그널을 연결할 수 있습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:181
msgid "Finally, to emit the signal, simply drag it to the canvas:"
msgstr "마침내, 시그널이 방출하도록, 간단히 캔버스로 드래그 합니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:186
msgid ""
"Remember that emitting a signal is a sequenced operation, so it must come "
"from a Sequence port."
msgstr ""
"시그널이 방출한다는 것은 시퀀스 된 동작이므로, 반드시 시퀀스 포트로부터 와야 "
"한다는 것을 잊지 마세요."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:190
msgid "Adding more nodes"
msgstr "더 많은 노드 추가하기"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:192
msgid ""
"Now that the basics are covered, let's discuss the large amount of utility "
"nodes available for your canvas! Below the member panel, exists the list of "
"all available node types:"
msgstr ""
"이제 기초가 다듬어졌으니, 캔버스에 쓸 수 있는 많은 양의 유용한 노드에 대해 이"
"야기해봅시다! 멤버 패널 아래에, 이용 가능한 노드 타입 목록이 존재합니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:198
msgid "Ctrl-F (Command-F on Mac) allows you to search the list."
msgstr "Ctrl-F (혹은 Mac에서 Command-F)로 목록을 검색할 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:200
msgid ""
"Any of them can be dragged to the scene. Unlike nodes (e.g. dragging a "
"property from the Inspector sets the context to the node being edited "
"automatically), these are added without any \"contextual\" information, so "
"this has to be done manually."
msgstr ""
"어느 것들이든 씬으로 드래그 할 수 있습니다. 노드와 달리 (예를 들어 인스펙터에"
"서 속성을 드래그 하는 것으로 자동으로 편집된 노드에 대한 컨텍스트를 설정하는 "
"것), 그들은 어떤 \"컨텍스트적\" 정보 없이 추가됩니다, 따라서 작업을 수동으로 "
"수행하여야 합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:206
msgid ""
"Remember that you can check the class reference for what each node does, as "
"they are documented there. That mentioned, a brief overview of node types "
"follows:"
msgstr ""
"노드들이 문서화 되어있기 때문에, 어떤 각각의 노드가 무엇을 하는지 알기 위해 "
"클래스 레퍼런스를 확인할 수 있다는 것을 기억하세요. 즉, 노드 타입의 간단한 개"
"요는 다음과 같습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:211
msgid "Constants"
msgstr "상수(Constant)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:213
msgid ""
"Constant nodes are nodes that provide values that, while not changing over "
"time, can be useful as reference values. Most of the time they are integer "
"or float."
msgstr ""
"상수 노드는 값을 제공하고, 시간이 지나도 값이 변하지 않는 노드로서, 참조 값으"
"로 유용합니다. 대부분 정수 또는 실수입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:219
#, fuzzy
msgid ""
"The first one is \"Constant\", which allows you to select any value of any "
"type as constant, from an integer (42) to a String (\"Hello!\"). In general, "
"this node is not used that often because of default input values in *Data "
"Ports*, but it's good to know it exists."
msgstr ""
"첫 번째 것은 \"Constant\"로 상수 값이나 타입을 선택할 수 있습니다, 상수 (42)"
"부터 문자열 (\"Hello!\")까지 말이죠. 기본적으로 이 노드는 *데이터 포트*\\ 의 "
"기본 입력 값 때문에 자주 쓰이지는 않지만, 알아두면 좋습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:221
msgid ""
"The second is the GlobalConstant node, which contains a long list of "
"constants for global types in Godot. In there you can find some useful "
"constants to refer to key names, joystick or mouse buttons, etc."
msgstr ""
"두 번째 것은 GlobalConstant 노드로, Godot에서 글로벌 타입을 위한 긴 상수 목록"
"을 포함합니다. 여기서는 키 이름, 조이스틱이나 마우스 버튼 등을 나타내는 유용"
"한 상수를 볼 수 있습니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:224
#, fuzzy
msgid ""
"The third one is MathConstant, which provides typical mathematical "
"constants, such as PI, E, etc."
msgstr ""
"세 번째 것은 MathConstant로, PI, E 등과 같은 전형적인 수학적 상수를 제공합니"
"다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:228
msgid "Data"
msgstr "데이터"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:230
msgid ""
"Data nodes deal with all sorts of access to information. Any information in "
"Godot is accessed via these nodes, so they are some of the most important "
"ones to use and pretty diverse."
msgstr ""
"데이터 노드는 정보에 대한 모든 종류의 액세스를 처리합니다. Godot에서는 어떤 "
"정보도 이 노드를 통해 액세스 되므로, 그들은 중요하게 쓰이는 것들 중 하나로서 "
"꽤 다양합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:236
msgid ""
"There are many types of nodes of interest here, so a short attempt to "
"describe them will follow:"
msgstr ""
"흥미를 가질만한 많은 타입의 노드가 있으므로, 그들을 설명하기 위한 간단한 시도"
"가 따르겠습니다:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:240
msgid "Action"
msgstr "액션(Action)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:242
msgid ""
"Action nodes are vital when dealing with input from a device. You can read "
"more about actions in the (@TODO ACTION TUTE LINK). In the following example "
"below, the control is moved to the right when the \"move_right\" action is "
"pressed."
msgstr ""
"액션 노드는 기기의 입력을 처리할 때 중요합니다. 액션에 대한 더 자세한 것은 "
"(@TODO ACTION TUTE LINK)에서 볼 수 있습니다. 아래의 다음 예시는, \"move_right"
"\" 액션이 눌렸을 때 컨트롤이 오른쪽으로 움직이는 것입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:249
msgid "Engine Singleton"
msgstr "엔진 싱글톤(Engine Singleton)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:251
#, fuzzy
msgid ""
"Engine singletons are global interfaces (meaning they can be accessed "
"without a reference; unlike Scene Nodes, they are always available). They "
"have several purposes, but in general, they are useful for low-level access "
"or OS-related access."
msgstr ""
"엔진 싱글톤은 글로벌 인터페이스입니다 (즉 씬 노드와 달리, 참조 없이 액세스 "
"될 수 있고 항상 이용 가능합니다). 그들은 여러 목적을 지니지만, 대개 로우 레"
"벨 액세스나 OS 관련 액세스에 유용합니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:257
msgid ""
"Remember that dragging a connection to empty space will help you call "
"functions or set/get properties on these:"
msgstr ""
"연결을 빈 공간에 드래그 하는 것으로 함수나 Set/Get 속성을 불러오는 것(Call)"
"을 기억하세요:"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:263
msgid "Local Variables"
msgstr "로컬 변수(Local Variables)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:265
msgid ""
"These are nodes you can use as temporary storage for your graphs. Make sure "
"they all have the same name and type when using them and they will reference "
"the same piece of memory."
msgstr ""
"이 노드는 그래프의 임시 저장소로 사용할 수 있는 노드입니다. 반드시 그들을 사"
"용할 때 모두 같은 이름과 타입을 가져야 한다는 것을 명심하세요, 그러면 그들은 "
"같은 메모리를 참조할 것입니다."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:270
msgid ""
"As it can be seen above, there are two nodes available: A simple getter, and "
"a sequenced getter (setting requires a sequence port)."
msgstr ""
"위에서 볼 수 있듯이, 두 개의 노드를 사용할 수 있습니다: 간단한 Getter, 그리"
"고 시퀀스된 Getter (설정에 시퀀스 포트가 필요합니다)."

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:274
msgid "Scene Node"
msgstr "씬 노드(Scene Node)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:276
msgid ""
"This is just a reference to a node in the tree, but it's easier to use this "
"node by dragging the actual node from the scene tree to the canvas (this "
"will create it and configure it)."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:281
msgid "Self"
msgstr "Self(셀프)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:283
msgid ""
"In some rare occasions, it may be desired to pass this Scene Node as "
"argument. It can be used to call functions and set/get properties, or drag "
"nodes (or event the node itself that has the script) from the Scene Tree to "
"the canvas for this."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:288
msgid "SceneTree"
msgstr "SceneTree"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:290
msgid ""
"This node is similar to the Singleton node because it references the "
"SceneTree, which contains the active scene. SceneTree, however, only works "
"when the node is sitting in the scene and active, otherwise accessing it "
"will return an error."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:294
msgid ""
"SceneTree allows for many low-level things, like setting stretch options, "
"calling groups, make timers, or even load another scene. It's a good class "
"to get familiar with."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:299
msgid "Preload"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:301
msgid ""
"This does the same function as preload() in GDScript. It maintains this "
"resource loaded and ready to use. Rather than instancing the node, it's "
"simpler to drag the desired resource from the filesystem dock to the canvas."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:306
msgid "Resource Path"
msgstr "리소스 경로"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:308
msgid ""
"This node is a simple helper to get a string with a path to a resource you "
"can pick. It's useful in functions that load things from disk."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:313
msgid "Comment"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:315
msgid ""
"A Comment node works as a node you can resize to put around other nodes. It "
"will not try to get focus or be brought to top when selecting it. It can "
"also be used to write text on it."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:322
msgid "Flow Control"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:324
msgid ""
"Flow control nodes allow the execution to take different branches, usually "
"depending on a given condition."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:331
msgid "Condition"
msgstr "조건"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:333
msgid ""
"This is a simple node that checks a bool port. If true, it will go via the "
"\"true\" sequence port. If false, the second. After going for either of "
"them, it goes via the \"done\" port. Leaving sequence ports disconnected is "
"fine if not all of them are used."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:339
msgid "Iterator"
msgstr "반복자"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:341
msgid ""
"Some data types in Godot (ie, arrays, dictionaries) are iterable. This means "
"that a bit of code can run for each element that it has."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:344
msgid ""
"The Iterator node goes through all elements and, for each of them, it goes "
"via the \"each\" sequence port, making the element available in the \"elem\" "
"data port."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:347
msgid "When done, it goes via the \"exit\" sequence port."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:351
msgid "Return"
msgstr "리턴"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:353
msgid ""
"Some functions can return values. In general for virtual ones, Godot will "
"add the Return node for you. A return node forces the function to end."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:358
msgid "Sequence"
msgstr "시퀀스"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:360
msgid ""
"This node is useful mostly for organizing your graph. It calls its sequence "
"ports in order."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:364
msgid "TypeCast"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:366
msgid ""
"This is a useful and commonly used node. You can use it to cast arguments or "
"other objects to the type you desire. Afterwards, you can even drag the "
"object output to get full completion."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:372
msgid ""
"It is also possible to cast to a script, which will allow complete script "
"properties and functions:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:378
msgid "Switch"
msgstr "스위치"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:380
msgid ""
"The Switch node is similar to the Condition node, but it matches many values "
"at the same time."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:384
msgid "While"
msgstr "While"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:386
msgid ""
"This is a more primitive form of iteration. \"repeat\" sequence output will "
"be called as long as the condition in the \"cond\" data port is met."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:391
msgid "Functions"
msgstr "함수(Function)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:393
msgid ""
"Functions are simple helpers, most of the time deterministic. They take some "
"arguments as input and return an output. They are almost never sequenced."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:398
msgid "Built-In"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:400
msgid ""
"There is a list of built-in helpers. The list is almost identical to the one "
"from GDScript (@TODO, link to gdscript methods?). Most of them are "
"mathematical functions, but others can be useful helpers. Make sure to take "
"a look at the list at some point."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:406
msgid "By Type"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:408
msgid ""
"Those are the methods available to basic types. For example, if you want a "
"dot-product, you can search for \"dot\" instead of the Vector3 category. In "
"most cases just search the list of nodes, it should be faster."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:413
msgid "Call"
msgstr "호출"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:415
msgid ""
"This is the generic calling node. It is rarely used directly but by dragging "
"to empty space on an already configured node."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:419
msgid "Constructors"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:421
msgid ""
"These are all the functions needed to create Godot basic datatypes. For "
"example, If you need to create a Vector3 out of 3 floats, a constructor must "
"be used."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:427
msgid "Destructor"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:429
msgid ""
"This is the opposite to Constructor, it allows to separate any basic type "
"(ie, Vector3) into its sub-elements."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:435
msgid "Emit Signal"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:437
msgid ""
"Emits signals from any object. In general it's not that useful, as dragging "
"a signal to the canvas works better."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:441
msgid "Get/Set"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:443
msgid ""
"Generic Getter/Setter node. Dragging properties from the Inspector works "
"better, as they appear properly configured on drop."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:447
msgid "Wait"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:449
msgid ""
"The Wait nodes will suspend execution of the function until something "
"happens (many frames can pass until resuming, in fact). Default nodes allow "
"you to wait for a frame to pass, a fixed frame or a given amount of time "
"until execution is resumed."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:454
msgid "Yield"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:456
msgid ""
"This node completely suspends the execution of the script, and it will make "
"the function return a value that can be used to resume execution."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:460
msgid "Yield Signal"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:462
msgid "Same as Yield, but will wait until a given signal is emitted."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:466
msgid "Index"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:468
msgid ""
"Generic indexing operator, not often used but it's good that it exists just "
"in case."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:472
msgid "Operators"
msgstr "연산자(Operators)"

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:474
msgid ""
"These are mostly generic operators, such as addition, multiplication, "
"comparison, etc. By default, these mostly accept any datatype (and will "
"throw an error at run-time if the types fed do not match those expected by "
"the operator). It is always recommended to set the right type for operators "
"to catch errors faster and make the graph easier to read."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:483
msgid "Expression Node"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:485
msgid ""
"Among the operators, the *Expression* node is the most powerful. If well "
"used, it allows you to enormously simplify visual scripts that are math or "
"logic heavy. Type any expression on it and it will be executed in real-time."
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:488
msgid "Expression nodes can:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:490
msgid ""
"Perform math and logic expressions based on custom inputs (eg: \"a*5+b\", "
"where a and b are custom inputs):"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:495
msgid "Access local variables or properties:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:500
msgid ""
"Use most of the existing built-in functions that are available to GDScript, "
"such as sin(),cos(),print(), as well as constructors, such as Vector3(x,y,z),"
"Rect2(..), etc.:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:505
msgid "Call API functions:"
msgstr ""

#: ../../docs/getting_started/scripting/visual_script/nodes_purposes.rst:510
msgid ""
"Use sequenced mode, which makes more sense in case of respecting the "
"processing order:"
msgstr ""
