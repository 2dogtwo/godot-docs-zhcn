# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 11:09+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:4
msgid "Your first game"
msgstr "당신의 첫 게임"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:7
msgid "Overview"
msgstr "개요"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:9
msgid ""
"This tutorial will guide you through making your first Godot project. You "
"will learn how the Godot editor works, how to structure a project, and how "
"to build a 2D game."
msgstr ""
"이 튜토리얼은 첫 Godot 프로젝트를 만드는 과정을 안내합니다. Godot 에디터가 어"
"떻게 작동하는지, 프로젝트를 구성하는 방법, 2D 게임을 만드는 방법을 배우게 됩"
"니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:13
msgid ""
"This project is an introduction to the Godot engine. It assumes that you "
"have some programming experience already. If you're new to programming "
"entirely, you should start here: :ref:`doc_scripting`. If you want to use C# "
"in Godot, please also read :ref:`doc_c_sharp` before continuing."
msgstr ""
"이 프로젝트는 Godot 엔진에 대한 소개입니다. 이 튜토리얼에서 여러분은 프로그래"
"밍 경험이 조금 있다고 가정하겠습니다. 프로그래밍에 완전 처음이라면 여기서부"
"터 시작하세요: :ref:`doc_scripting`. 만약 Godot에서 C#을 사용하고 싶다면, 진"
"행하기 전에 :ref:`doc_c_sharp`\\ 를 읽어보세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:19
msgid ""
"The game is called \"Dodge the Creeps!\". Your character must move and avoid "
"the enemies for as long as possible. Here is a preview of the final result:"
msgstr ""
"게임 이름은 \"Dodge the Creeps!\"입니다. 캐릭터는 가능한 오랫동안 움직이면서 "
"적을 피해야 합니다. 다음은 앞으로 보게 될 최종 결과물입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:25
msgid ""
"**Why 2D?** 3D games are much more complex than 2D ones. You should stick to "
"2D until you have a good understanding of the game development process and "
"how to use Godot."
msgstr ""
"**왜 2D인가요?** 3D 게임은 2D 게임보다 훨씬 더 복잡합니다. 게임 개발 과정과 "
"Godot를 잘 알기 전까지는 2D 게임을 개발하는 것이 좋습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:30
msgid "Project setup"
msgstr "프로젝트 설정하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:32
msgid ""
"Launch Godot and create a new project. Then, download :download:"
"`dodge_assets.zip <files/dodge_assets.zip>`. This contains the images and "
"sounds you'll be using to make the game. Unzip these files in your project "
"folder."
msgstr ""
"Godot를 실행하고 새 프로젝트를 만드세요. 그런 다음 :download:`dodge_assets."
"zip <files/dodge_assets.zip>`\\ 을 다운로드하세요. 여기에는 게임에 쓸 이미지"
"와 소리가 포함되어 있습니다. 프로젝트 폴더에서 압축을 풀어줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:37
msgid ""
"For this tutorial, we will assume you are familiar with the Godot editor. If "
"you haven't read :ref:`doc_scenes_and_nodes`, do so now for an explanation "
"of setting up a project and using the editor."
msgstr ""
"이 튜토리얼에서는 여러분이 Godot 에디터에 익숙하다고 가정하겠습니다. 아직 :"
"ref:`doc_scenes_and_nodes`\\ 를 읽지 않았다면 돌아가서 에디터를 사용해 프로젝"
"트를 설정하는 방법을 읽어보고 오세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:41
msgid ""
"This game is designed for portrait mode, so we need to adjust the size of "
"the game window. Click on Project -> Project Settings -> Display -> Window "
"and set \"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""
"이 게임은 세로 모드를 사용합니다. 따라서 게임 창의 크기를 조정해야 합니다. 프"
"로젝트(Project) -> 프로젝트 설정(Project Settings) -> Display -> Window를 클"
"릭하고 \"Width\"를 ``480``\\ 으로, \"Height\"을 ``720``\\ 으로 설정하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:45
msgid ""
"Also in this section, under the \"Stretch\" options, set ``Mode`` to \"2d\" "
"and ``Aspect`` to \"keep\". This ensures that the game scales consistently "
"on different sized screens."
msgstr ""
"또한 이 섹션의 \"Stretch\" 옵션에서 ``Mode``\\ 를 \"2d\"로, ``Aspect``\\ 를 "
"\"keep\"으로 설정하세요. 이렇게 하면 게임이 다양한 크기의 화면에서 일관되게 "
"확장됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:50
msgid "Organizing the project"
msgstr "프로젝트 조직하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:52
msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene. In a larger "
"project, it might be useful to create folders to hold the various scenes and "
"their scripts, but for this relatively small game, you can save your scenes "
"and scripts in the project's root folder, identified by ``res://``.  You can "
"see your project folders in the FileSystem Dock in the lower left corner:"
msgstr ""
"이 프로젝트에서는 ``Player``, ``Mob``, ``HUD``\\ 의 3개의 독립적인 씬을 만들"
"고 게임의 ``Main`` 씬으로 결합할 것입니다. 더 큰 프로젝트에서는 다양한 씬과 "
"해당 스크립트를 저장할 폴더를 만드는 것이 유용할 수 있지만 이와 같이 비교적 "
"작은 게임의 경우 ``res://``\\ 로 식별되는 프로젝트의 루트 폴더에 씬과 스크립"
"트를 저장할 수 있습니다. 왼쪽 아래의 파일시스템(FileSystem) 독에서 프로젝트 "
"폴더를 볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:63
msgid "Player scene"
msgstr "Player 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:65
msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"첫 번째 씬은 ``Player`` 오브젝트를 정의합니다. 별도의 플레이어 씬을 만드는 것"
"의 장점 중 하나는 게임의 다른 부분을 만들기 전에도 별도로 테스트할 수 있다는 "
"것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:70
msgid "Node structure"
msgstr "노드 구조"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:72
msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"시작하려면 플레이어 오브젝트의 루트 노드를 선택해야 합니다. 일반적으로 씬의 "
"루트 노드는 개체가 원하는 기능, 즉 개체가 *무엇*인지를 반영해야 합니다. \"다"
"른 노드(Other Node)\" 버튼을 클릭하고 씬에 :ref:`Area2D <class_Area2D>` 노드"
"를 추가하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:79
msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot는 씬 트리에서 노드 옆에 경고 아이콘을 보여줍니다. 지금은 무시해도 됩니"
"다. 나중에 다룰 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:82
msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"``Area2D``\\ 를 사용하면 플레이어와 겹치거나 충돌하는 물체를 감지할 수 있습니"
"다. 노드를 두 번 클릭하여 노드 이름을 ``Player``\\ 로 변경하세요. 이제 씬의 "
"루트 노드를 설정했으므로 노드를 추가해 더 많은 기능을 줄 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:87
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"``Player`` 노드에 자식을 추가하기 전에, 실수로 자식을 클릭해서 자식이 움직이"
"거나 크기가 바뀌지 않도록 해야 합니다. 노드를 선택하고 자물쇠 오른쪽에 있는 "
"아이콘을 클릭하세요. 노드의 툴 팁에는 \"오브젝트의 자식을 선택하지 않도록 합"
"니다.\" 라고 표시됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:94
msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"씬을 저장합니다. 씬(Scene) -> 씬 저장(Save Scene)을 클릭하거나 Windows/Linux"
"에서는 :kbd:`Ctrl + S`\\ 를, Mac에서는 :kbd:`Cmd + S`\\ 를 누르세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:96
msgid "For this project, we will be following the Godot naming conventions."
msgstr "이 프로젝트에서, 우리는 Godot의 명명 규칙을 따를 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:98
msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: 클래스(노드)는 파스칼 표기법(PascalCase)을 사용하고, 변수와 함"
"수는 스네이크_표기법(snake_case)을 사용하며, 상수는 전부 대문자(ALL_CAPS)를 "
"사용합니다(:ref:`doc_gdscript_styleguide` 참조)."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:102
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`).  Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: 클래스, export 변수 그리고 메서드는 파스칼 표기법(PascalCase)을 사용"
"합니다. private 필드는 카멜 표기법(_camelCase)를 사용합니다. 지역변수와 매개"
"변수는 카멜 표기법(camelCase)을 사용합니다(:ref:`doc_c_sharp_styleguide` 참"
"고). 시그널을 연결할 때는 메서드 이름을 정확하게 입력하도록 주의하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:109
msgid "Sprite animation"
msgstr "스프라이트 애니메이션"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:111
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"``Player`` 노드를 클릭하고 :ref:`AnimatedSprite <class_AnimatedSprite>` 노드"
"를 자식으로 추가하세요. ``AnimatedSprite``\\ 는 플레이어의 모양과 애니메이션"
"을 처리합니다. 노드 옆을 보면 주의 표시가 있습니다. ``AnimatedSprite``\\ 에"
"는 표시할 수 있는 애니메이션 목록인 :ref:`SpriteFrames <class_SpriteFrames>` "
"리소스가 필요합니다. 리소스를 만들려면 인스펙터(Inspector)에서 ``Frames`` 속"
"성을 찾아, \"[비었음]([empty])\" -> \"새 SpriteFrames(New SpriteFrames)\"를 "
"클릭하세요. 이러면 자동으로 \"SpriteFrames\" 패널이 열립니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:122
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"왼쪽에는 애니메이션 목록이 있습니다. \"default\"를 클릭하고 이름을 \"right"
"\"로 바꾸세요. 그런 다음 \"새 애니메이션(New Animation)\" 버튼을 클릭해 \"up"
"\"이라는 두 번째 애니메이션을 만드세요. \"파일시스템(FileSystem)\" 독에서 플"
"레이어 이미지를 찾으세요. 이 이미지는 이전에 압축을 푼 ``art`` 폴더 안에 있습"
"니다. ``playerGrey_up[1/2]``\\ 와 ``playerGrey_walk[1/2]`` 두 개의 이미지를 "
"해당 애니메이션에 대한 패널의 \"애니메이션 프레임(Animation Frame)\" 쪽으로 "
"끌어다 놓으세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:131
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"플레이어 이미지가 게임 창에 비해 너무 크기 때문에, 크기를 줄여야 합니다. "
"``AnimatedSprite`` 노드를 클릭하고 ``Scale`` 속성을 ``(0.5, 0.5)``\\ 로 설정"
"하세요. 인스펙터(Inspecter)의 ``Node2D`` 에서 찾을 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:138
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\".  Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"마지막으로, :ref:`CollisionShape2D <class_CollisionShape2D>`\\ 를 ``Player``"
"\\ 의 자식으로 추가하세요. 이것이 플레이어의 \"히트박스(hitbox)\", 즉 콜리전 "
"영역을 결정합니다. 이 캐릭터에게는 ``CapsuleShape2D`` 노드가 가장 적합합니"
"다, 그러므로 인스펙터(Inspecter)의 \"Shape\" 옆에 \"[비었음]([empty])\" -> "
"\"새 CapsuleShape2D(New CapsuleShape2D)\"를 클릭하세요. 스프라이트 전체를 덮"
"도록 두 개의 크기 핸들로 콜리전 영역 크기를 조절하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:147
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "다 되셨다면, 당신의 ``Player`` 씬은 이렇게 되어야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:151
msgid "Make sure to save the scene again after these changes."
msgstr "이러한 변경 후에 씬을 다시 저장하는 것을 잊지 마세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:154
msgid "Moving the player"
msgstr "플레이어 움직이기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:156
msgid ""
"Now we need to add some functionality that we can't get from a built-in "
"node, so we'll add a script. Click the ``Player`` node and click the "
"\"Attach Script\" button:"
msgstr ""
"이제 내장 노드 만으로는 얻을 수 없는 몇 가지 기능을 추가해야 하므로 스크립트"
"를 만들겁니다. ``Player`` 노드를 클릭하고 \"스크립트 추가(Attach Script)\" 버"
"튼을 누르세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:162
msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"스크립트 설정 창은 기본 설정으로 냅두어도 됩니다. 그냥 \"만들기(Create)\"를 "
"누르세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:165
msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"C#이나 다른 언어로 스크립트를 만들려면 만들기를 누르기 전에 `언어(language)` "
"드롭 다운 메뉴에서 언어를 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:170
msgid "Start by declaring the member variables this object will need:"
msgstr "이 오브젝트가 필요로 하는 멤버 변수를 선언함으로써 시작합시다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:191
msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"첫 번째 변수인 ``speed``\\ 에 ``export`` 키워드를 사용하면 인스펙터"
"(Inspector) 내에서 값을 설정할 수 있습니다. 인스펙터(Inspector)에서도 원하는 "
"값으로 조정할 수 있어서 편리합니다. ``Player`` 노드를 선택하면 인스펙터"
"(Inspector)의 \"Script Variables\" 섹션에 나타납니다. 여기서 값을 바꾸면 스크"
"립트에 작성한 값을 오버라이드한다는 점을 기억하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:198
msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"여러분이 C#을 사용한다면, 새로운 외부변수(export variables)나 시그널을 보기 "
"위해서 프로젝트 구성물(assemblies)을 다시 빌드할 필요가 있습니다. 이 컴파일"
"은 에디터 밑의 \"Mono\" 단어를 클릭해 Mono 패널이 나타나게 한 후 \"프로젝트 "
"빌드(Build Project)\" 버튼을 눌러서 수동으로 진행됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:206
msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 함수는 노드가 씬 트리에 들어올 때 호출되는데, 이 때가 게임 창의 "
"크기를 알아보기 좋은 순간입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:222
msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"이제 ``_process()`` 함수를 사용해서 플레이어가 무엇을 할 지 정의할 수 있습니"
"다. ``_process()``\\ 는 매 프레임마다 호출되므로, 게임에서 자주 변하는 요소들"
"을 업데이트하기 위해서 사용할 수 있습니다. 플레이어에게는, 다음과 같은 작업"
"이 필요합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:227
msgid "Check for input."
msgstr "입력을 확인."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:228
msgid "Move in the given direction."
msgstr "주어진 방향으로 이동."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:229
msgid "Play the appropriate animation."
msgstr "적절한 애니메이션을 재생."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:231
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this demo, "
"we will use the default events that are assigned to the arrow keys on the "
"keyboard."
msgstr ""
"먼저, 입력을 확인해야 합니다 - 플레이어가 키를 누르는 중일까요? 이 게임에서, "
"우리는 방향키 입력을 확인해야 합니다. 입력 액션은 프로젝트 설정(Project "
"Settings)의 \"입력 맵(Input Map)\"에 정의되어 있습니다. 여기에서 사용자 지정 "
"이벤트를 정의하고 여기에 다른 키, 마우스 이벤트, 혹은 다른 입력을 할당할 수"
"도 있습니다. 이 데모에서, 우리는 키보드의 방향키가 할당된 기본 이벤트를 사용"
"할 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:238
msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""
"``Input.is_action_pressed()``\\ 를 사용해서 키가 눌러졌는지를 감지할 수 있는"
"데, 눌러지면 ``true`` 값을 반환하고 그렇지 않으면 ``false`` 값을 반환합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:300
msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""
"먼저 ``velocity``\\ 를 ``(0, 0)``\\ 으로 설정합니다. 기본적으로 플레이어는 움"
"직이지 않아야 합니다. 그런 다음 각 입력을 확인하고 ``velocity``\\ 에서 더하거"
"나 빼서 최종 방향을 얻습니다. 예를 들어, ``오른쪽 방향키``\\ 와 ``아래쪽 방향"
"키``\\ 을 동시에 누르고 있으면 결과 ``velocity`` 벡터는 ``(1, 1)``\\ 이 됩니"
"다. 이 경우 동시에 수평과 수직 방향으로 이동하기 때문에 플레이어는 수평으로 "
"이동할 때보다 대각선으로 *더 빠르게* 이동합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:307
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"우리는 velocity를 *정규화(normalize)*\\하면, 즉 velocity의 *길이(length)*\\ "
"를 ``1``\\ 로 설정한 다음, 원하는 속도를 곱하면 이 문제를 방지할 수 있습니"
"다. 이렇게 하면 더 이상 대각선 방향 이동속도가 더 빠르지 않습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:311
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"이제까지 벡터 수학을 안 써봤거나 복습이 필요하다면 :ref:`doc_vector_math`\\ "
"에서 Godot에서 벡터를 어떻게 사용하는지 볼 수 있습니다. 보면 좋지만 나머지 튜"
"토리얼을 위해 꼭 필수적인 것은 아닙니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:315
msgid ""
"We also check whether the player is moving so we can call ``play()`` or "
"``stop()`` on the AnimatedSprite."
msgstr ""
"이제 AnimatedSprite에서 ``play()``\\ 와 ``stop()``\\ 을 호출할 수 있도록 플레"
"이어가 움직이고 있는지를 확인할 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:318
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, ``"
"$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$``\\ 는 ``get_node()``\\ 의 줄임말입니다. 그래서 위의 코드인 ``"
"$AnimatedSprite.play()``\\ 는 ``get_node(\"AnimatedSprite\").play()``\\ 와 같"
"습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:321
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"GDScript에서, ``$``\\ 는 현재 노드에서 상대적인 경로에 있는 노드를 반환하거"
"나, 노드가 없다면 ``null`` 값을 반환합니다. AnimatedSprite가 현재 노드의 자식"
"인 상태이므로, ``$AnimatedSprite``\\ 를 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:324
msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""
"이동 방향이 있으므로 이제 플레이어의 위치를 업데이트할 수 있습니다. 또한 "
"``clamp()``\\ 를 사용해 플레이어가 화면에서 나가는 것을 방지할 수 있습니다. *"
"클램핑(Clamping)*\\ 은 값을 주어진 범위로 제한하는 것을 의미합니다. "
"``_process`` 함수의 맨 아래에 다음을 추가합니다(`else` 아래에 들여쓰기가 되"
"어 있지 않은지 확인하세요):"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:345
msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"`_process()` 함수에 있는 매개변수 `delta` 는 (이전 프레임이 완료되는데 걸린 "
"시간인) \"프레임 길이(frame length)\" 를 참조합니다. 이 값을 사용하면 프레임 "
"레이트가 변경되어도 플레이어의 이동속도를 항상 일정하게 유지할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:350
msgid ""
"Click \"Play Scene\" (``F6``) and confirm you can move the player around the "
"screen in all directions."
msgstr ""
"\"씬 실행(Play Scene)\" (``F6``)을 누르고 플레이어가 화면 내에서 모든 방향으"
"로 움직일 수 있는지 확인하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:353
msgid "If you get an error in the \"Debugger\" panel that says"
msgstr "\"디버거(Debugger)\" 패널에 다음과 같은 오류가 표시되는 경우"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:355
msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:357
msgid ""
"this likely means you spelled the name of the AnimatedSprite node wrong. "
"Node names are case-sensitive and ``$NodeName`` must match the name you see "
"in the scene tree."
msgstr ""
"이는 AnimatedSprite 노드의 이름을 잘못 입력했음을 의미합니다. 노드 이름은 대"
"소문자를 구분하며 ``$NodeName``\\ 또는 ``get_node(\"NodeName\")``\\ 이 씬 트"
"리에 표시되는 이름과 일치해야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:362
msgid "Choosing animations"
msgstr "애니메이션 고르기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:364
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on its direction. We have the \"walk\" "
"animation, which shows the player walking to the right. This animation "
"should be flipped horizontally using the ``flip_h`` property for left "
"movement. We also have the \"up\" animation, which should be flipped "
"vertically with ``flip_v`` for downward movement. Let's place this code at "
"the end of the ``_process()`` function:"
msgstr ""
"이제 플레이어가 이동할 수 있으므로 방향에 따라 AnimatedSprite가 재생 중인 애"
"니메이션을 변경해야 합니다. 플레이어가 오른쪽으로 걷는 것을 보여주는 \"walk"
"\" 애니메이션이 있습니다. 이 애니메이션은 왼쪽 이동을 위해 ``flip_h`` 속성을 "
"사용해 수평으로 뒤집혀져야 합니다. 아래로 이동하려면 ``flip_v``\\ 로 수직으"
"로 뒤집혀져야 하는 \"up\" 애니메이션도 있습니다. 이 코드를 ``_process()`` 함"
"수의 끝에 배치해 보겠습니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:399
msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""
"위 코드의 불리언(boolean) 값 할당은 프로그래머를 위한 일반적인 축약입니다. 우"
"리는 비교 테스트(boolean)를 수행하고 또한 boolean 값을 *할당*하기 때문에 두 "
"가지를 동시에 수행할 수 있습니다. 아래 코드와 위의 한 줄 부울 할당 명령문을 "
"비교해보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:423
msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr "씬을 다시 재생하고 애니메이션이 각 방향에서 올바른지 확인합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:426
msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""
"흔한 실수로 애니메이션 이름을 잘못 입력합니다. SpriteFrames 패널의 애니메이"
"션 이름은 코드에 입력한 것과 일치해야 합니다. 애니메이션 이름을 ``\"Walk\"``"
"\\ 으로 지은 경우 코드에 대문자 \"W\"를 사용해야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:431
msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"플레이어가 제대로 움직이고 있다고 생각하면 다음 줄을 ``_ready()``\\ 에 추가해"
"보세요. 게임이 시작될 때 플레이어가 숨겨집니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:444
msgid "Preparing for collisions"
msgstr "콜리전 준비하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:446
msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"우리는 ``Player``\\ 가 적과 닿았다는 것을 감지하길 원하지만 아직 적을 만들지 "
"않았습니다! 충돌이 작동하도록 우리는 Godot의 *시그널(signal)* 기능을 사용할 "
"것이기 때문에 괜찮습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:450
msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr "스크립트 맨 위 ``extends Area2D`` 다음에 아래 코드를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:464
msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"이것은 적과 충돌할 때 플레이어가 방출하는 \"hit\"라는 사용자 지정 시그널을 정"
"의합니다. 충돌을 감지하기 위해 ``Area2D``\\ 를 사용합니다. ``Player`` 노드를 "
"선택하고 인스펙터(Inspector) 독 옆에 있는 \"노드(Node)\" 독을 클릭해 플레이어"
"가 방출할 수 있는 시그널 목록을 확인해보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:471
msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` "
"signal. This signal will be emitted when a body contacts the player. Click "
"\"Connect..\" and the \"Connect a Signal\" window appears. We don't need to "
"change any of these settings so click \"Connect\" again. Godot will "
"automatically create a function in your player's script."
msgstr ""
"우리의 커스텀 \"hit\" 시그널도 거기에 있다는 점에 주목하세요! 적들은 "
"``RigidBody2D`` 노드가 될 것이기 때문에, 우리는 ``body_entered(body: Node)`` "
"시그널이 필요합니다. 이 시그널을 적과 플레이어와 닿았을 때 방출할 것입니다. "
"\"연결(Connect)\"을 누르면 \"시그널을 메서드에 연결(Connect a Signal to a "
"Method)\" 창이 열립니다. 우리는 어떤 설정도 바꿀 필요가 없으므로 \"연결"
"(Connect)\"을 누르세요. - Godot는 자동으로 플레이어 스크립트에 함수를 생성해"
"줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:480
msgid ""
"Note the green icon indicating that a signal is connected to this function. "
"Add this code to the function:"
msgstr ""
"시그널이 이 기능에 연결되었음을 나타내는 녹색 아이콘에 유의하세요. 다음 코드"
"를 함수에 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:500
msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"적이 플레이어에 충돌할 때마다 시그널이 방출됩니다. 우리는 두 번 이상 ``hit`` "
"시그널이 발동되지 않도록 플레이어의 콜리전을 비활성화 해야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:504
msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""
"엔진의 충돌 처리 도중에 영역의 콜리전 모양을 비활성화하면 오류가 발생할 수 있"
"습니다. ``set_deferred()``\\ 를 사용하면 Godot가 모양을 비활성화 하기에 안전"
"해질 때까지 기다려줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:508
msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr ""
"마지막으로 새로운 게임을 시작할 때 플레이어를 초기화하기 위해 호출할 수 있는 "
"함수를 추가합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:529
msgid "Enemy scene"
msgstr "적 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:531
msgid ""
"Now it's time to make the enemies our player will have to dodge. Their "
"behavior will not be very complex: mobs will spawn randomly at the edges of "
"the screen, choose a random direction, and move in a straight line."
msgstr ""
"이제 우리의 플레이어가 피할 몹을 만들 차례입니다. 이들의 행동은 그리 복잡하"
"진 않을 것입니다: 몹이 아무렇게나 화면의 가장자리에서 나타나고 무작위 방향을 "
"선택해 직선으로 이동합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:535
msgid ""
"We'll create a ``Mob`` scene, which we can then *instance* to create any "
"number of independent mobs in the game."
msgstr ""
"먼저 ``Mob`` 장면을 생성할 것입니다. 그런 다음 *인스턴스화*\\ 해서 게임에서 "
"원하는 수의 독립적인 몹을 생성할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:538
msgid "See :ref:`doc_instancing` to learn more about instancing."
msgstr "인스턴스에 대해 더 알고 싶다면 :ref:`doc_instancing` 를 읽어보세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:541
msgid "Node setup"
msgstr "노드 설정하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:543
msgid "Click Scene -> New Scene and add the following nodes:"
msgstr "씬(Scene) -> 새 씬(New Scene)을 클릭 후 다음 노드들을 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:545
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ":ref:`RigidBody2D <class_RigidBody2D>` ( ``Mob``\\ 으로 이름지음)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:547
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr ":ref:`AnimatedSprite <class_AnimatedSprite>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:548
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr ":ref:`CollisionShape2D <class_CollisionShape2D>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:549
msgid ":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>`"
msgstr ""
":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>` ( ``Visibility``\\ "
"로 이름지음)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:551
msgid ""
"Don't forget to set the children so they can't be selected, like you did "
"with the Player scene."
msgstr ""
"플레이어 씬에서 한 것과 마찬가지로, 자식이 선택되지 않도록 설정하는 것을 잊지"
"마세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:554
msgid ""
"In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity "
"Scale`` to ``0``, so the mob will not fall downward. In addition, under the "
"``PhysicsBody2D`` section, click the ``Mask`` property and uncheck the first "
"box. This will ensure the mobs do not collide with each other."
msgstr ""
":ref:`RigidBody2D <class_RigidBody2D>` 속성에서 ``Gravity Scale`` 을 ``0`` 으"
"로 설정해 몹이 아래로 떨어지지 않도록 합니다. 그리고, ``PhysicsBody2D`` 섹션"
"의 ``Mask`` 속성을 클릭하고 첫 번째 상자의 체크를 푸세요. 이것은 몹들끼리 충"
"돌하지 않도록 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:561
msgid ""
"Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the "
"player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. "
"There are two images for each animation in the art folder."
msgstr ""
"플레이어에서 설정한 것처럼 :ref:`AnimatedSprite <class_AnimatedSprite>`\\ 를 "
"설정합니다. 이번에는 ``fly``, ``swim``, ``walk``\\ 의 3가지 애니메이션이 있습"
"니다. art 폴더에는 각 애니메이션에 대해 두 개의 이미지가 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:565
msgid "Adjust the \"Speed (FPS)\" to ``3`` for all animations."
msgstr "모든 애니메이션의 \"속도(FPS)\"를 ``3``\\ 으로 조정하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:569
msgid "Set the ``Playing`` property in the Inspector to “On”."
msgstr ""
"인스펙터(Inspector)에서 ``Playing`` 속성을 \"사용(On)\"으로 설정하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:571
msgid ""
"We'll select one of these animations randomly so that the mobs will have "
"some variety."
msgstr ""
"몬스터가 다양해질 수 있도록 이 애니메이션 중 하나를 무작위로 선택할 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:573
msgid ""
"Like the player images, these mob images need to be scaled down. Set the "
"``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""
"플레이어 이미지처럼, 이 몹 이미지들도 크기를 줄일 필요가 있습니다. "
"``AnimatedSprite``\\ 의 ``Scale`` 속성을 ``(0.75, 0.75)``\\ 로 설정하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:576
msgid ""
"As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To "
"align the shape with the image, you'll need to set the ``Rotation Degrees`` "
"property to ``90`` (under \"Transform\" in the Inspector)."
msgstr ""
"``Player`` 씬처럼 콜리전을 위한 ``CapsuleShape2D``\\ 을 추가하세요. 이미지와 "
"모양이 같도록, ``Node2D`` 아래 ``Rotation Degrees`` 속성을 ``90``\\ 으로 설정"
"해야 합니다(인스펙터(Inspector)의 \"Transform\" 아래에 있음)."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:580
msgid "Save the scene."
msgstr "씬을 저장하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:583
msgid "Enemy script"
msgstr "적 스크립트"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:585
msgid "Add a script to the ``Mob`` and add the following member variables:"
msgstr "``Mob``\\ 에게 스크립트를 추가해주고 다음 멤버 변수를 추가해주세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:609
msgid ""
"When we spawn a mob, we'll pick a random value between ``min_speed`` and "
"``max_speed`` for how fast each mob will move (it would be boring if they "
"were all moving at the same speed)."
msgstr ""
"모든 몹이 같은 속도로 움직인다면 지루하기 때문에 몹을 생성할 때 각 몹이 이동"
"하는 속도에 대해 ``min_speed``\\ 와 ``max_speed`` 사이의 임의의 값을 선택할 "
"것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:613
msgid ""
"Now let's look at the rest of the script. In ``_ready()`` we randomly choose "
"one of the three animation types:"
msgstr ""
"이제 스크립트의 나머지를 봅시다. ``_ready()`` 에서 우리는 무작위로 세 개의 애"
"니메이션 유형 중 하나를 고릅니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:635
msgid ""
"First, we get the list of animation names from the AnimatedSprite's "
"``frames`` property. This returns an Array containing all three animation "
"names: ``[\"walk\", \"swim\", \"fly\"]``."
msgstr ""
"먼저 AnimatedSprite의 ``frames`` 속성에서 애니메이션 이름 목록을 가져옵니다. "
"이것은 ``[\"walk\", \"swim\", \"fly\"]``\\ 의 세 가지 애니메이션 이름을 모두 "
"포함하는 배열을 반환합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:639
msgid ""
"We then need to pick a random number between ``0`` and ``2`` to select one "
"of these names from the list (array indices start at ``0``). ``randi() % n`` "
"selects a random integer between ``0`` and ``n-1``."
msgstr ""
"그런 다음 목록에서 이 이름 중 하나를 선택하려면 ``0``\\ 과 ``2`` 사이의 임의"
"의 숫자를 선택해야 합니다(배열 인덱스는 ``0``\\ 에서 시작). ``randi() % n``"
"\\ 은 ``0``\\ 과 ``n-1`` 사이의 임의의 정수를 선택합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:643
msgid ""
"You must use ``randomize()`` if you want your sequence of \"random\" numbers "
"to be different every time you run the scene. We're going to use "
"``randomize()`` in our ``Main`` scene, so we won't need it here."
msgstr ""
"씬을 실행할 때 매 순간마다 \"무작위\" 숫자 배열이 다르기를 원한다면 "
"``randomize()``\\ 를 사용해야 합니다. ``randomize()``\\ 를 ``Main`` 씬에서 사"
"용할 것이기 때문에 여기서는 필요하지 않습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:647
msgid ""
"The last piece is to make the mobs delete themselves when they leave the "
"screen. Connect the ``screen_exited()`` signal of the "
"``VisibilityNotifier2D`` node and add this code:"
msgstr ""
"마지막 과정은 몹이 화면을 떠날 때 스스로 삭제하도록 하는 것입니다. "
"``VisibilityNotifier2D`` 노드의 ``screen_exited()`` 시그널을 연결하고 다음 코"
"드를 추가합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:664
msgid "This completes the `Mob` scene."
msgstr "이것으로 `Mob` 씬이 완성되었습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:667
msgid "Main scene"
msgstr "메인 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:669
msgid ""
"Now it's time to bring it all together. Create a new scene and add a :ref:"
"`Node <class_Node>` named ``Main``. Ensure you create a Node, **not** a "
"Node2D. Click the \"Instance\" button and select your saved ``Player.tscn``."
msgstr ""
"이제 모든 것을 하나로 모을 때입니다. 새 장면을 만들고 ``Main``\\ 이라는 이름"
"의 :ref:`Node <class_Node>`\\ 를 추가하세요. Node2D가 아닌 **Node**\\ 를 만들"
"어야 합니다. \"인스턴스화(Instance)\" 버튼을 클릭하고 저장된 ``Player.tscn``"
"\\ 을 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:676
msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""
"``Main`` 의 자식으로 다음의 노드들을 추가하고, 설명대로 이름을 지으세요 (값"
"은 초 단위입니다):"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:679
msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>` (``MobTimer`` 라고 이름지음) - 얼마나 자주 몹이 스"
"폰하는지를 조절하기 위해 사용"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:680
msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""
":ref:`Timer <class_Timer>` (``ScoreTimer`` 라고 이름지음) - 매 초마다 점수를 "
"증가시키기 위해 사용"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:681
msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""
":ref:`Timer <class_Timer>` (``StratTimer`` 라고 이름지음) - 시작하기 전에 지"
"연시간을 주기 위해 사용"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:682
msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
":ref:`Position2D <class_Position2D>` (``StartPosition`` 이라고 이름지음) - 플"
"레이어의 시작 지점을 표시하기 위해 사용"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:684
msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "각 ``Timer``\\ 마다 ``Wait Time`` 속성을 다음과 같이 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:687
msgid "``MobTimer``: ``0.5``"
msgstr "``MobTimer``: ``0.5``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:688
msgid "``ScoreTimer``: ``1``"
msgstr "``ScoreTimer``: ``1``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:689
msgid "``StartTimer``: ``2``"
msgstr "``StartTimer``: ``2``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:691
msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"그리고, ``StartTimer`` 속성의 ``One Shot``\\ 을 \"사용(On)\"으로 설정하고 "
"``StartPosition`` 노드의 ``Position``\\ 을 ``(240, 450)`` 으로 설정하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:695
msgid "Spawning mobs"
msgstr "몹 스폰하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:697
msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"메인 노드는 새로운 몹을 스폰할 것이고 우리는 몹이 화면 모서리 아무 위치에서"
"나 나타나도록 만들고 싶습니다. :ref:`Path2D <class_Path2D>` 노드를 ``Main``"
"\\ 의 자식으로 추가하고 ``MobPath``\\ 라고 이름지으세요. ``Path2D``\\ 를 선택"
"하면 편집기 위쪽에 새로운 버튼들이 나타납니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:704
msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Use Grid Snap\" and \"Use Snap\" are both selected. These options can "
"be found to the left of the \"Lock\" button, appearing as a magnet next to "
"some dots and intersecting lines, respectively."
msgstr ""
"가운데 버튼 \"점 추가(Add Point)\"을 선택하고 점을 추가하기 위해 표시된 모서"
"리를 클릭해서 경로를 그리세요. 점이 그리드에 스냅(snap)되도록 하려면 \"격자 "
"스냅 사용(Use Grid Snap)\" 및 \"스냅 사용(Use Snap)\"이 모두 선택되어 있는지 "
"확인하세요. 이 옵션은 \"잠금(Lock)\" 버튼 왼쪽에서 찾을 수 있으며, 각각 점과 "
"교차선 옆에 자석이 있는 모양입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:712
msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""
"*시계 방향* 으로 그리세요, 그렇지 않으면 몹들은 *안쪽* 이 아닌 *바깥쪽* 으로 "
"향할 것입니다!"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:717
msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""
"이미지에서 ``4``\\ 개의 점을 찍고 난 후, \"곡선 닫기(Close Curve)\" 버튼을 누"
"르면 곡선이 완성됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:720
msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"이제 경로를 정의하기 위해 :ref:`PathFollow2D <class_PathFollow2D>` 노드를 "
"``MobPath``\\ 의 자식으로 추가한 후 ``MobSpawnLocation``\\ 이라고 이름지으세"
"요. 이 노드는 자동으로 회전하고 이동하면서 경로를 따라갈 것입니다, 그러므로 "
"경로를 따라 임의의 위치와 방향을 선택하기 위해 이것을 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:725
msgid "Your scene should look like this:"
msgstr "씬 트리는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:730
msgid "Main script"
msgstr "메인 스크립트"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:732
msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""
"``Main``\\ 에 스크립트를 추가합니다. 스크립트의 위에 ``export (PackedScene)``"
"\\ 를 사용해서 우리가 인스턴스화하길 원하는 몹 씬을 고를 수 있도록 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:772
msgid ""
"Click the ``Main`` node and you will see the ``Mob`` property in the "
"Inspector under \"Script Variables\"."
msgstr ""
"``Main`` 노드를 클릭하면 인스펙터(Inspector)의 \"Script Variables\" 아래에서 "
"``Mob`` 속성을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:775
msgid "You can assign this property's value in two ways:"
msgstr "다음 두 가지 방법으로 이 속성의 값을 할당할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:777
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" panel and drop it in the ``Mob`` "
"property ."
msgstr ""
"\"파일시스템(FileSystem)\" 패널에서 ``Mob.tscn``\\ 을 ``Main`` 노드의 스크립"
"트 속성 아래 ``Mob`` 속성에 끌어다 놓으세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:779
msgid ""
"Click the down arrow next to \"[empty]\" and choose \"Load\". Select ``Mob."
"tscn``."
msgstr ""
"\"[비었음]([empty])\" 옆에 있는 아래쪽 화살표를 클릭하고 \"불러오기"
"(Load)\"를 선택하세요. ``Mob.tscn``\\ 을 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:782
msgid ""
"Next, select the ``Player`` node in the Scene dock, and access the Node dock "
"on the sidebar. Make sure to have the Signals tab selected in the Node dock."
msgstr ""
"다음으로 씬(Scene) 독에서 ``Player`` 노드를 선택하고 사이드바에서 노드(Node) "
"독에 접근하세요. 노드(Node) 독에서 시그널(Signal) 탭을 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:785
msgid ""
"You should see a list of the signals for the ``Player`` node. Find and "
"double-click the ``hit`` signal in the list (or right-click it and select "
"\"Connect...\"). This will open the signal connection dialog. We want to "
"make a new function named ``game_over``, which will handle what needs to "
"happen when a game ends. Type \"game_over\" in the \"Receiver Method\" box "
"at the bottom of the signal connection dialog and click \"Connect\". Add the "
"following code to the new function, as well as a ``new_game`` function that "
"will set everything up for a new game:"
msgstr ""
"``Player`` 노드에 대한 시그널 목록이 표시되어야 합니다. 목록에서 ``hit`` 시그"
"널을 찾아 두 번 클릭하세요(또는 마우스 오른쪽 단추로 클릭하고 \"연결..."
"(Connect...)\" 선택). 그러면 시그널 연결 대화 상자가 열립니다. 우리는 게임이 "
"끝났을 때 일어날 일을 처리할 ``game_over``\\ 라는 새로운 함수를 만들고 싶습니"
"다. 신호 연결 대화 상자 아래쪽의 \"받는 메서드(Receiver Method)\" 상자에 "
"\"game_over\"를 입력하고 \"연결(Connect)\"을 클릭하세요. 다음 코드를 새 함수"
"에 추가하고 새 게임에 대한 모든 것을 설정하는 ``new_game`` 함수를 추가합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:826
msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` , and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""
"이제 각 Timer 노드(``StartTimer``, ``ScoreTimer`` 및 ``MobTimer``)의 "
"``timeout()`` 시그널을 메인 스크립트에 연결하세요. ``StartTimer``\\ 는 다른 "
"두 타이머를 작동시킵니다. ``ScoreTimer``\\ 는 점수를 1씩 증가시킵니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:853
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position."
msgstr ""
"``_on_MobTimer_timeout()``\\ 에서 우리는 몹 인스턴스를 만들고, ``Path2D``\\ "
"에 따라 무작위 시작점을 결정하고, 몹이 움직이도록 설정할 것입니다. "
"``PathFollow2D`` 노드는 자동으로 경로를 따라 돌기 때문에 몹들의 위치와 방향"
"을 선택하기 위해서 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:859
msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr "새로운 인스턴스는 ``add_child()``\\ 를 사용해야 추가할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:907
msgid ""
"Why ``PI``? In functions requiring angles, GDScript uses *radians*, not "
"degrees. If you're more comfortable working with degrees, you'll need to use "
"the ``deg2rad()`` and ``rad2deg()`` functions to convert between the two."
msgstr ""
"왜 ``PI``\\ 인가요? 각도가 필요한 함수에서 GDScript는 디그리(degree)가 아닌 "
"라디안(*radians*)을 사용합니다. 디그리를 가지고 작업하는 것이 더 편하다면 "
"``deg2rad()``\\ 와 ``rad2deg()`` 함수를 사용해 변환해야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:913
msgid "Testing the scene"
msgstr "씬 테스트하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:915
msgid ""
"Let's test the scene to make sure everything is working. Add this to "
"``_ready()``:"
msgstr ""
"모든 것이 제대로 작동하는지 확인하기 위해 씬을 테스트해 보겠습니다. "
"``_ready()``\\ 에 다음을 추가합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:932
msgid ""
"Let's also assign ``Main`` as our \"Main Scene\" - the one that runs "
"automatically when the game launches. Press the \"Play\" button and select "
"``Main.tscn`` when prompted."
msgstr ""
"게임이 시작될 때 자동으로 실행되는 \"Main Scene\"으로 ``Main``\\ 을 지정해 보"
"겠습니다. \"재생(Play)\" 버튼을 누르고 메시지가 표시되면 ``Main.tscn``\\ 을 "
"선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:936
msgid ""
"You should be able to move the player around, see mobs spawning, and see the "
"player disappear when hit by a mob."
msgstr ""
"플레이어를 움직이고, 몹들이 스폰되는 것을 보고, 플레이어가 몹과 충돌할 때 사"
"라지는 것을 볼 수 있어야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:939
msgid ""
"When you're sure everything is working, remove the call to ``new_game()`` "
"from ``_ready()``."
msgstr ""
"모든 것이 제대로 작동한다고 확신한다면 '_ready()'에서 ``new_game()`` 함수 호"
"출을 제거하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:943
msgid "HUD"
msgstr "HUD"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:945
msgid ""
"The final piece our game needs is a UI: an interface to display things like "
"score, a \"game over\" message, and a restart button. Create a new scene, "
"and add a :ref:`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" "
"stands for \"heads-up display\", an informational display that appears as an "
"overlay on top of the game view."
msgstr ""
"게임에 마지막으로 필요한 것은 UI입니다: 인터페이스로 점수, \"game over\" 메시"
"지, 재시작 버튼을 화면에 보여줍니다. 새 씬을 만들고, :ref:`CanvasLayer "
"<class_CanvasLayer>` 노드를 추가하고 ``HUD``\\ 라고 이름지으세요. \"HUD\"는 "
"\"heads-up display\"의 약자로, 정보를 게임 화면 앞에 덮어씌우는 방식입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:951
msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""
":ref:`CanvasLayer <class_CanvasLayer>` 노드는 게임 위 레이어에 우리의 UI 요소"
"들을 그릴수 있게 해주고, 이로써 보여지는 정보가 플레이어나 몹과 같은 게임 요"
"소들에 의해 가려지지 않게 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:955
msgid "The HUD needs to display the following information:"
msgstr "HUD는 다음 정보를 표시해야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:957
msgid "Score, changed by ``ScoreTimer``."
msgstr "``ScoreTimer``\\ 에 의해 변경되는 점수(Score)."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:958
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr "\"Game Over\"나 \"Get Ready!\"와 같은 메시지"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:959
msgid "A \"Start\" button to begin the game."
msgstr "게임을 시작하기 위한 \"Start\" 버튼."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:961
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""
"UI 요소의 기초가 되는 노드는 :ref:`Control <class_Control>`\\ 입니다. UI를 만"
"들기 위해, 우리는 두 가지 타입의 :ref:`Control <class_Control>` 노드: :ref:"
"`Label <class_Label>`\\ 과 :ref:`Button <class_Button>`\\ 을 사용할 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:965
msgid "Create the following as children of the ``HUD`` node:"
msgstr "다음 노드들을 ``HUD`` 노드의 자식으로 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:967
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr "``ScoreLabel``\\ 로 이름지은 :ref:`Label <class_Label>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:968
msgid ":ref:`Label <class_Label>` named ``Message``."
msgstr "``Message``\\ 로 이름지은 :ref:`Label <class_Label>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:969
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr "``StartButton``\\ 으로 이름지은 :ref:`Button <class_Button>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:970
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr "``MessageTimer``\\ 로 이름지은 :ref:`Timer <class_Timer>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:972
msgid ""
"Click on the ``ScoreLabel`` and type a number into the ``Text`` field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following:"
msgstr ""
"``ScoreLabel``\\ 을 클릭하고 인스펙터(Inspecter)의 *Text* 필드에 숫자를 입력"
"하세요. ``Control`` 노드의 기본 폰트는 작아서 크기 조정이 잘 되지 않습니다. "
"게임 에셋에는 \"Xolonium-Regular.ttf\"라는 폰트 파일이 있습니다. 이 폰트를 사"
"용하려면, 각 ``Control`` 노드마다 다음과 같이 하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:977
msgid "Under \"Custom Fonts\", choose \"New DynamicFont\""
msgstr "\"Custom Fonts\" 에서, \"새 DynamicFont\"를 선택하세요"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:981
msgid ""
"Click on the \"DynamicFont\" you added, and under \"Font/Font Data\", choose "
"\"Load\" and select the \"Xolonium-Regular.ttf\" file. You must also set the "
"font's ``Size``. A setting of ``64`` works well."
msgstr ""
"추가한 \"DynamicFont\"를 클릭하고, \"Font/Font Data\" 아래에서, \"불러오기"
"(Load)\"를 눌러서 \"Xolonium-Regular.ttf\" 파일을 선택하세요. 또한 폰트의 "
"``Size``\\ 도 설정해야 합니다. ``64`` 정도가 좋습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:987
msgid ""
"Once you've done this on the ``ScoreLabel``, you can click the down arrow "
"next to the DynamicFont property and choose \"Copy\", then \"Paste\" it in "
"the same place on the other two Control nodes."
msgstr ""
"``ScoreLabel``\\ 에서 이 작업을 수행하고 나면 DynamicFont 속성 옆에 있는 아래"
"쪽 화살표를 클릭하고 \"복사(Copy)\"를 선택한 다음 다른 두 Control 노드의 같"
"은 위치에 \"붙여넣기(Paste)\"를 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:991
msgid ""
"**Anchors and Margins:** ``Control`` nodes have a position and size, but "
"they also have anchors and margins. Anchors define the origin - the "
"reference point for the edges of the node. Margins update automatically when "
"you move or resize a control node. They represent the distance from the "
"control node's edges to its anchor. See :ref:"
"`doc_design_interfaces_with_the_control_nodes` for more details."
msgstr ""
"**앵커(Anchors)와 마진(Margins):** ``Control`` 노드는 위치와 크기를 가지고 있"
"고, 앵커와 마진 또한 가지고 있습니다. 앵커는 노드의 가장자리에 대한 참조점인 "
"원점을 정의합니다. 마진은 컨트롤 노드를 움직이거나 크기를 조정할 때 자동으로 "
"업데이트됩니다. 마진은 컨트롤 노드들의 모서리가 앵커로부터 얼마나 떨어져 있"
"는 지를 나타냅니다. 더 자세한 설명은 :ref:"
"`doc_design_interfaces_with_the_control_nodes`\\ 를 참고하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:998
msgid ""
"Arrange the nodes as shown below. Click the \"Layout\" button to set a "
"Control node's layout:"
msgstr ""
"아래에 보이는 대로 노드를 배열하세요. \"레이아웃(Layout)\" 버튼을 클릭해서 "
"Control 노드의 레이아웃을 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1003
msgid ""
"You can drag the nodes to place them manually, or for more precise "
"placement, use the following settings:"
msgstr ""
"여러분은 노드를 드래그해서 수동으로 놓을 수도 있지만 더 정확하게 하고 싶다면 "
"다음 설정을 사용하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1007
msgid "ScoreLabel"
msgstr "ScoreLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1009
msgid "*Layout* : \"Top Wide\""
msgstr "*레이아웃(Layout)* : \"위쪽 넓게(Top Wide)\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1010
msgid "*Text* : ``0``"
msgstr "*Text* : ``0``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1011
#: ../../docs/getting_started/step_by_step/your_first_game.rst:1018
msgid "*Align* : \"Center\""
msgstr "*Align* : \"Center\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1014
msgid "Message"
msgstr "Message"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1016
msgid "*Layout* : \"HCenter Wide\""
msgstr "*레이아웃(Layout)* : \"수평선 중앙 넓게(HCenter Wide)\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1017
msgid "*Text* : ``Dodge the Creeps!``"
msgstr "*Text* : ``Dodge the Creeps!``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1019
msgid "*Autowrap* : \"On\""
msgstr "*Autowrap* : \"On\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1022
msgid "StartButton"
msgstr "StartButton"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1024
msgid "*Text* : ``Start``"
msgstr "*Text* : ``Start``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1025
msgid "*Layout* : \"Center Bottom\""
msgstr "*레이아웃(Layout)* : \"아래쪽 중앙(Center Bottom)\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1026
msgid "*Margin* :"
msgstr "*Margin* :"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1028
msgid "Top: ``-200``"
msgstr "Top: ``-200``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1029
msgid "Bottom: ``-100``"
msgstr "Bottom: ``-100``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1031
msgid ""
"On the ``MessageTimer``, set the ``Wait Time`` to ``2`` and set the ``One "
"Shot`` property to \"On\"."
msgstr ""
"``MessageTimer``\\ 에서 ``Wait Time``\\ 을 ``2``\\ 로 설정하고 ``One Shot`` "
"속성을 \"사용(On)\"으로 설정합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1034
msgid "Now add this script to ``HUD``:"
msgstr "이제 ``HUD``\\ 에 이 스크립트를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1053
msgid ""
"The ``start_game`` signal tells the ``Main`` node that the button has been "
"pressed."
msgstr "``start_game`` 시그널은 ``Main`` 노드에게 버튼이 눌려졌음을 알립니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1075
msgid ""
"This function is called when we want to display a message temporarily, such "
"as \"Get Ready\"."
msgstr ""
"이 함수는 \"Get Ready\"와 같은 메시지를 일시적으로 표시하고 싶을 때 호출됩니"
"다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1109
msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""
"이 함수는 플레이어가 패배했을 때 호출됩니다. 이 함수는 2초동안 \"Game Over"
"\"를 보여주고, 타이틀 화면으로 돌아와서, 잠깐 일시정지한 후 \"Start\" 버튼을 "
"보여줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1113
msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to add delays such as in the above code, where we want to wait some "
"time before showing the \"Start\" button."
msgstr ""
"잠시 일시 정지를 해야 한다면 타이머 노드를 사용하는 대신 SceneTree의 "
"``create_timer()`` 함수를 사용하는 것이 좋습니다. 이 함수는 \"Start\" 버튼을 "
"표시하기 전에 잠시 기다려야 하는 위의 코드와 같이 지연을 추가하는 데 매우 유"
"용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1131
msgid "This function is called by ``Main`` whenever the score changes."
msgstr "이 함수는 점수가 변경될 때마다 ``Main``\\ 에 의해서 호출됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1133
msgid ""
"Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` "
"signal of ``StartButton`` and add the following code to the new functions:"
msgstr ""
"``MessageTimer``\\ 의 ``timeout()`` 시그널과 ``StartButton``\\ 의 "
"``pressed()`` 시그널을 연결하고 다음 코드를 새 함수에 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1161
msgid "Connecting HUD to Main"
msgstr "메인에 HUD를 연결하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1163
msgid ""
"Now that we're done creating the ``HUD`` scene, go back to ``Main``. "
"Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` scene. "
"The scene tree should look like this, so make sure you didn't miss anything:"
msgstr ""
"이제 ``HUD`` 씬 만들기가 끝났으니 저장하고 다시 ``Main``\\ 으로 돌아가세요. "
"``Player`` 씬에서 했듯이 ``HUD`` 씬을 ``Main``\\ 에 인스턴스화하고, 트리의 "
"맨 아래에 배치하세요. 모든 트리는 다음처럼 보여야 하므로, 놓친 것이 없는지 확"
"인해보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1169
msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""
"이제 ``HUD`` 기능을 ``Main`` 스크립트에 연결할 것입니다. 여기에는 ``Main`` 씬"
"에 추가적인 것들이 요구됩니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1172
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function of the Main node by typing \"new_game\" in the "
"\"Receiver Method\" in the \"Connect a Signal\" window. Verify that the "
"green connection icon now appears next to ``func new_game()`` in the script."
msgstr ""
"Node 탭에서 \"시그널을 메서드에 연결(Connect a Signal to a Method)\" 창의 "
"\"받는 메서드(Receiver Method)\"에 \"new_game\"을 입력해 HUD의 "
"``start_game`` 신호를 Main 노드의 ``new_game()`` 함수에 연결하세요. 이제 스크"
"립트의 ``func new_game()`` 옆에 녹색 연결 아이콘이 나타나는지 확인하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1177
msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr ""
"``new_game()``\\ 에서, 점수 화면을 업데이트하고 \"Get Ready\" 메시지를 보이"
"게 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1192
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr "``game_over()``\\ 에서는, 해당 ``HUD`` 함수를 호출해야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1203
msgid ""
"Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""
"마지막으로, ``_on_ScoreTimer_timeout()``\\ 을 추가해서 점수가 바뀌면 화면과 "
"일치하도록 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1215
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``Main.tscn``."
msgstr ""
"이제 실행할 준비가 끝났습니다! \"프로젝트 실행\" 버튼을 누르세요. 메인 씬을 "
"선택하라고 물어보면 ``Main.tscn``\\ 을 골라줍시다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1219
msgid "Removing old creeps"
msgstr "오래된 적들 제거하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1221
msgid ""
"If you play until \"Game Over\" and then start a new game right away, the "
"creeps from the previous game may still be on the screen. It would be better "
"if they all disappeared at the start of a new game. We just need a way to "
"tell *all* the mobs to remove themselves. We can do this with the \"group\" "
"feature."
msgstr ""
"\"Game Over\"까지 플레이한 다음 바로 새 게임을 시작하면 이전 게임의 크립이 화"
"면에 계속 표시될 수 있습니다. 새 게임이 시작될 때 모두 사라지면 더 좋을 것입"
"니다. 우리는 *모든* 몹에게 스스로 제거하도록 지시할 방법이 필요합니다. \"그룹"
"(group)\" 기능으로 이 작업을 수행할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1226
msgid ""
"In the ``Mob`` scene, select the root node and click the \"Node\" tab next "
"to the Inspector (the same place where you find the node's signals). Next to "
"\"Signals\", click \"Groups\" and you can type a new group name and click "
"\"Add\"."
msgstr ""
"``Mob`` 씬에서 루트 노드를 선택하고 인스펙터 옆에 있는 \"노드(Node)\" 탭을 클"
"릭하세요(노드의 시그널을 찾을 수 있는 동일한 위치). \"시그널(Signals)\" 옆에 "
"있는 \"그룹(Groups)\"을 클릭하고 새 그룹 이름을 입력하고 \"추가(Add)\"를 클릭"
"하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1232
msgid ""
"Now all mobs will be in the \"mobs\" group. We can then add the following "
"line to the ``game_over()`` function in ``Main``:"
msgstr ""
"이제 모든 몹이 \"몹\" 그룹에 포함됩니다. 그런 다음 ``Main``\\ 의 "
"``game_over()`` 함수에 다음 줄을 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1245
msgid ""
"The ``call_group()`` function calls the named function on every node in a "
"group - in this case we are telling every mob to delete itself."
msgstr ""
"``call_group()`` 함수는 그룹의 모든 노드에서 지정된 함수를 호출합니다. 이 경"
"우 모든 몹에게 자신을 삭제하도록 지시합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1249
msgid "Finishing up"
msgstr "마무리 작업"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1251
msgid ""
"We have now completed all the functionality for our game. Below are some "
"remaining steps to add a bit more \"juice\" to improve the game experience. "
"Feel free to expand the gameplay with your own ideas."
msgstr ""
"우리는 게임의 모든 기능을 마친 상태입니다. 밑에 남아있는 단계는 게임의 경험"
"을 향상시킬 \"주스\"를 추가하는 것입니다. 독창적인 아이디어로 자유롭게 게임 "
"플레이를 확장시켜보세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1256
msgid "Background"
msgstr "배경(Background)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1258
msgid ""
"The default gray background is not very appealing, so let's change its "
"color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` "
"node. Make it the first node under ``Main`` so that it will be drawn behind "
"the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a "
"color you like and select \"Layout\" -> \"Full Rect\" so that it covers the "
"screen."
msgstr ""
"회색 기본 배경은 그다지 매력적이지 않아요, 그러니 색깔을 바꿔봅시다. 그 방법 "
"중 하나는 :ref:`ColorRect <class_ColorRect>` 노드를 사용하는 것입니다. "
"``Main`` 바로 밑의 첫 번째 노드로 만들어서 다른 노드의 뒤에 그려지도록 하세"
"요. ``ColorRect``\\ 에는 오직 하나의 속성: ``Color``\\ 만 있습니다. 원하는 색"
"깔을 고르고 \"레이아웃(Layout)\" -> \"사각형 전체(Full Rect)\"를 선택해서 화"
"면을 덮어주세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1264
msgid ""
"You could also add a background image, if you have one, by using a "
"``TextureRect`` node instead."
msgstr "대신 ``TextureRect`` 노드를 사용해 배경 이미지를 추가할 수도 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1268
msgid "Sound effects"
msgstr "음향 효과(Sound effects)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1270
msgid ""
"Sound and music can be the single most effective way to add appeal to the "
"game experience. In your game assets folder, you have two sound files: "
"\"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" "
"for when the player loses."
msgstr ""
"사운드와 음악은 게임 경험을 매력적으로 만들어주는 가장 효과적인 요소가 될 수 "
"있습니다. 게임 애셋 폴더에서, 두 개의 사운드 파일을 찾을 수 있습니다: "
"\"House In a Forest Loop.ogg\"는 배경 음악으로, \"gameover.wav\"는 플레이어"
"가 죽었을 때 사용하면 됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1275
msgid ""
"Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children "
"of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On "
"each one, click on the ``Stream`` property, select \"Load\", and choose the "
"corresponding audio file."
msgstr ""
"두 개의 :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` 노드를 ``Main``\\ "
"의 자식으로 추가하세요. 하나는 ``Music``\\ 으로, 다른 하나는 ``DeathSound``"
"\\ 로 이름지으세요. 각각 ``Stream`` 속성을 클릭하고 \"불러오기(Load)\"를 선택"
"해서 이름에 맞는 오디오 파일을 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1280
msgid ""
"To play the music, add ``$Music.play()`` in the ``new_game()`` function and "
"``$Music.stop()`` in the ``game_over()`` function."
msgstr ""
"음악을 실행시키려면, ``new_game()`` 함수에 ``$Music.play()``\\ 를 추가하고 "
"``game_over()`` 함수에 ``$Music.stop()``\\ 을 추가하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1283
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr ""
"마지막으로 ``game_over()`` 함수에 ``$DeathSound.play()``\\ 를 추가하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1286
msgid "Keyboard shortcut"
msgstr "키보드 단축키"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1288
msgid ""
"Since the game is played with keyboard controls, it would be convenient if "
"we could also start the game by pressing a key on the keyboard. We can do "
"this with the \"Shortcut\" property of the ``Button`` node."
msgstr ""
"게임은 키보드 조작으로 진행되기 때문에 키보드의 키를 눌러 게임을 시작할 수도 "
"있다면 편리할 것입니다. ``Button`` 노드의 \"Shortcut\" 속성을 사용해 이 작업"
"을 수행할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1292
msgid ""
"In the ``HUD`` scene, select the ``StartButton`` and find its *Shortcut* "
"property in the Inspector. Select \"New Shortcut\" and click on the "
"\"Shortcut\" item. A second *Shortcut* property will appear. Select \"New "
"InputEventAction\" and click the new \"InputEventAction\". Finally, in the "
"*Action* property, type the name ``ui_select``. This is the default input "
"event associated with the spacebar."
msgstr ""
"``HUD`` 씬에서 ``StartButton``\\ 을 선택하고 인스펙터(Inspector)에서 "
"*Shortcut* 속성을 찾으세요. \"새 Shortcut(New Shortcut)\"을 선택하고 "
"\"Shortcut\" 항목을 클릭하세요. 두 번째 *Shortcut* 속성이 열립니다. \"새 "
"InputEventAction(New InputEventAction)\"을 선택하세요. 마지막으로 *Action* 속"
"성에서 이름을 \"ui_select\"로 입력하세요. 이것은 스페이스바로 지정된 기본 입"
"력 이벤트입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1300
msgid ""
"Now when the start button appears, you can either click it or press :kbd:"
"`Space` to start the game."
msgstr ""
"이제 시작 버튼이 나타날 때, 버튼을 클릭하거나 :kbd:`Space`\\ 를 눌러서 게임"
"을 시작할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1304
msgid "Project files"
msgstr "프로젝트 파일"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1309
msgid "You can find a completed version of this project at these locations:"
msgstr "여기에서 이 프로젝트의 완성 버전을 찾을 수 있습니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1307
msgid "https://github.com/kidscancode/Godot3_dodge/releases"
msgstr "https://github.com/kidscancode/Godot3_dodge/releases"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1308
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr "https://github.com/godotengine/godot-demo-projects"
