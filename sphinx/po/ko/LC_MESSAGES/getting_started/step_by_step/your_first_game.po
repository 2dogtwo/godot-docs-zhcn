# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-22 14:46+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:4
msgid "Your first game"
msgstr "당신의 첫 게임"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:7
msgid "Overview"
msgstr "개요"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:9
msgid ""
"This tutorial will guide you through making your first Godot project. You "
"will learn how the Godot editor works, how to structure a project, and how "
"to build a 2D game."
msgstr ""
"이 튜토리얼은 첫 Godot 프로젝트를 만드는 과정을 안내합니다. Godot 편집기가 어"
"떻게 작동하는지, 프로젝트를 구성하는 방법, 2D 게임을 만드는 방법을 배우게 됩"
"니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:13
msgid ""
"This project is an introduction to the Godot engine. It assumes that you "
"have some programming experience already. If you're new to programming "
"entirely, you should start here: :ref:`doc_scripting`."
msgstr ""
"이 프로젝트는 Godot 엔진에 대한 소개입니다. 이 튜토리얼에서 당신은 프로그래"
"밍 경험이 조금 있다고 가정하겠습니다. 프로그래밍에 완전 처음이라면 여기서부"
"터 시작하세요: :ref:`doc_scripting`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:18
msgid ""
"The game is called \"Dodge the Creeps!\". Your character must move and avoid "
"the enemies for as long as possible. Here is a preview of the final result:"
msgstr ""
"게임 이름은 \"Dodge the Creeps!\"입니다. 캐릭터는 가능한 오랫동안 움직이면서 "
"적을 피해야 합니다. 다음은 앞으로 보게 될 최종 결과물입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:24
#, fuzzy
msgid ""
"**Why 2D?** 3D games are much more complex than 2D ones. You should stick to "
"2D until you have a good understanding of the game development process and "
"how to use Godot."
msgstr ""
"**왜 2D인가요?** 3D 게임은 2D 게임보다 훨씬 더 복잡합니다. 게임 개발 과정을 "
"잘 알 때까지는 2D 게임을 개발하는 것이 좋습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:29
msgid "Project setup"
msgstr "프로젝트 설정하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:31
#, fuzzy
msgid ""
"Launch Godot and create a new project. Then, download :download:"
"`dodge_assets.zip <files/dodge_assets.zip>`. This contains the images and "
"sounds you'll be using to make the game. Unzip these files in your project "
"folder."
msgstr ""
"Godot를 실행하고 새 프로젝트를 만드세요. 그런 다음 :download:`dodge_assets."
"zip <files/dodge_assets.zip>`\\ 을 다운로드하세요. 여기에는 게임에 쓸 이미지"
"와 소리가 있습니다. 프로젝트 폴더에서 압축을 풀어줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:36
#, fuzzy
msgid ""
"For this tutorial, we will assume you are familiar with the Godot editor. If "
"you haven't read :ref:`doc_scenes_and_nodes`, do so now for an explanation "
"of setting up a project and using the editor."
msgstr ""
"이 튜토리얼에서는 당신이 편집기에 익숙하다고 가정하겠습니다. 아직 :ref:"
"`doc_scenes_and_nodes`\\ 를 읽지 않았다면 당장 돌아가세요. 돌아가서 편집기를 "
"사용해 프로젝트를 설정하는 법을 배우고 오세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:40
#, fuzzy
msgid ""
"This game is designed for portrait mode, so we need to adjust the size of "
"the game window. Click on Project -> Project Settings -> Display -> Window "
"and set \"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""
"이 게임은 세로 모드를 사용합니다. 따라서 게임 창의 크기를 조정해야 합니다. 프"
"로젝트(Project) -> 프로젝트 설정(Project Settings) -> Display -> Window를 클"
"릭하고 \"Width\"를 ``480``\\ 으로, \"Height\"를 ``720``\\ 으로 설정합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:44
msgid ""
"Also in this section, under the \"Stretch\" options, set ``Mode`` to \"2d\" "
"and ``Aspect`` to \"keep\". This ensures that the game scales consistently "
"on different sized screens."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:49
msgid "Organizing the project"
msgstr "프로젝트 조직하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:51
#, fuzzy
msgid ""
"In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and "
"``HUD``, which we will combine into the game's ``Main`` scene. In a larger "
"project, it might be useful to create folders to hold the various scenes and "
"their scripts, but for this relatively small game, you can save your scenes "
"and scripts in the project's root folder, identified by ``res://``.  You can "
"see your project folders in the FileSystem Dock in the lower left corner:"
msgstr ""
"이 프로젝트에서 우리는  ``Player`` , ``Mob`` , ``HUD``\\ 의 세 개의 개별 씬"
"을 만들 것입니다. 이 씬들을 게임의 ``Main`` 씬으로 묶을 것입니다. 규모가 큰 "
"프로젝트라면 다양한 씬과 스크립트를 저장하는 폴더를 만드는 것이 유용하겠지"
"만, 상대적으로 규모가 작은 이 게임에서는 ``res://``\\ 라고 하는 루트 폴더에 "
"씬과 스크립트를 저장하겠습니다.  프로젝트 폴더는 왼쪽 아래에 있는 파일 시스템"
"(FileSystem) 독에서 볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:62
msgid "Player scene"
msgstr "Player(플레이어) 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:64
msgid ""
"The first scene we will make defines the ``Player`` object. One of the "
"benefits of creating a separate Player scene is that we can test it "
"separately, even before we've created other parts of the game."
msgstr ""
"처음으로 정의할 씬은 ``Player`` 객체입니다. 별도의 Player 씬을 만들면 게임의 "
"다른 부분을 만들기 전에 따로 실험해 볼 수 있다는 장점이 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:69
msgid "Node structure"
msgstr "노드 구조"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:71
msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:78
msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot는 씬 트리에서 노드 옆에 경고 아이콘을 보여줍니다. 지금은 무시해도 됩니"
"다. 나중에 다룰 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:81
#, fuzzy
msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"``Area2D``\\ 를 사용하면 Player와 겹치거나 부딪히는 물체를 감지할 수 있습니"
"다. 노드 이름을 클릭하고 이름을 ``Player``\\ 로 바꾸세요. 이 노드가 씬의 루"
"트 노드입니다. Player에게 기능을 추가하기 위해 별도의 노드를 추가할 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:86
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock; its tooltip says \"Makes sure "
"the object's children are not selectable.\""
msgstr ""
"``Player`` 노드에 자식을 추가하기 전에, 실수로 자식을 클릭해서 자식이 움직이"
"거나 크기가 바뀌지 않도록 해야 합니다. 노드를 선택하고 자물쇠 오른쪽에 있는 "
"아이콘을 클릭하세요. 노드의 툴 팁에는 \"객체의 자식을 선택하지 않도록 해요."
"\" 라고 표시됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:93
#, fuzzy
msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"씬을 저장합니다. 씬 -> 씬 저장을 클릭하거나 Windows/Linux에서는 ``Ctrl+S`` "
"를, Mac에서는 ``Command+S`` 를 누릅니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:95
msgid "For this project, we will be following the Godot naming conventions."
msgstr "이 프로젝트에서, 우리는 Godot의 명명 규칙을 따를 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:97
msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: 클래스(노드)는 ``PascalCase`` 를 사용하고', 변수와 함수는 "
"``snake_case`` 를 사용하며, 상수는 ``ALL_CAPS`` 를 사용합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:101
msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`).  Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**:  클래스, export 변수 그리고 메쏘드는 PascalCase를 사용합니다. "
"private 필드는  _camelCase를 사용합니다.  지역변수(local variables)와  파라미"
"터는 camelCase를 사용합니다 (참고 :ref:`doc_c_sharp_styleguide`). 시그널을 연"
"결할 때는 메쏘드 이름을 정확하게 입력하도록 주의하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:108
msgid "Sprite animation"
msgstr "스프라이트 애니메이션"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:110
#, fuzzy
msgid ""
"Click on the ``Player`` node and add an :ref:`AnimatedSprite "
"<class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle "
"the appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames "
"<class_SpriteFrames>` resource, which is a list of the animations it can "
"display. To create one, find the ``Frames`` property in the Inspector and "
"click \"[empty]\" -> \"New SpriteFrames\". Click again to open the "
"\"SpriteFrames\" panel:"
msgstr ""
"``Player`` 노드를 클릭하고 :ref:`AnimatedSprite <class_AnimatedSprite>` 노드"
"를 자식으로 추가하세요. ``AnimatedSprite``\\ 는 플레이어의 외형과 애니메이션"
"을 다루게 됩니다. 노드 옆을 보면 주의 표시가 있습니다. ``AnimatedSprite``\\ "
"는 :ref:`SpriteFrames <class_SpriteFrames>` 리소스가 필요합니다. "
"SpriteFrames 리소스는 보여줄 수 있는 애니메이션 목록을 보여줍니다. 리소스를 "
"만들려면 인스펙터(Inspecter)에서 ``Frames`` 속성을 찾아, \"[비었음]\" -> "
"\"새 SpriteFrames\"를 클릭하세요. 이러면 자동으로 스프라이트 프레임"
"(SpriteFrames) 패널이 열릴 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:121
#, fuzzy
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"New Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"왼쪽에는 애니메이션 목록이 있습니다. \"default\"를 클릭하고 \"right\"로 이름"
"을 바꾸세요. 그런 뒤 \"추가\" 버튼을 눌러 두 번째 애니메이션을 만들고 \"up"
"\"이라 이름을 지읍시다. 각 애니메이션에 두 개의 이미지를 드래그 하고, \"애니"
"메이션 프레임\" 패널 안에 하나는 ``playerGrey_up[1/2]`` 다른 하나는 "
"``playerGrey_walk[1/2]`` 라고 이름을 지읍니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:130
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` "
"property to ``(0.5, 0.5)``. You can find it in the Inspector under the "
"``Node2D`` heading."
msgstr ""
"플레이어 이미지들이 게임 창에 비해 너무 크기 때문에, 크기를 줄여야 합니다. "
"``AnimatedSprite`` 노드를 클릭하고 ``Scale`` 속성을 ``(0.5, 0.5)`` 로 설정하"
"세요. 인스펙터(Inspecter)의 ``Node2D`` 에서 찾으실 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:137
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> "
"\"New CapsuleShape2D\".  Using the two size handles, resize the shape to "
"cover the sprite:"
msgstr ""
"마지막으로, :ref:`CollisionShape2D <class_CollisionShape2D>`\\ 를 ``Player``"
"\\ 의 자식으로 추가하세요. 이것이 플레이어의 \"hitbox\", 즉 충돌 영역의 범위"
"를 결정합니다. 이 캐릭터에게는, ``CapsuleShape2D`` 노드가 가장 적합합니다, 그"
"러므로 인스펙터(Inspecter)의 \"Shape\" 옆에 \"<비었음>\"\" -> \"새 "
"CapsuleShape2D\"를 클릭하세요.  스프라이트를 덮도록 두 개의 크기 핸들로 크기"
"를 조정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:146
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "다 되셨다면, 당신의 ``Player`` 씬은 이렇게 되어야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:150
msgid "Make sure to save the scene again after these changes."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:153
msgid "Moving the player"
msgstr "플레이어 움직이기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:155
#, fuzzy
msgid ""
"Now we need to add some functionality that we can't get from a built-in "
"node, so we'll add a script. Click the ``Player`` node and click the "
"\"Attach Script\" button:"
msgstr ""
"이제 내장 노드 만으로는 얻을 수 없는 몇 가지 기능을 추가해야 합니다, 그래서 "
"스크립트를 만들겁니다. ``Player`` 노드를 클릭하고 \"스크립트 추가\" 버튼을 누"
"르세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:161
msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"스크립트 설정 창에서는, 기본 설정으로 냅두어도 됩니다. 그냥 \"생성\"을 누르세"
"요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:164
msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"만약 C# 스크립트나 다른 언어로 생성하려한다면, 생성을 누르기 전에 `언어` 메뉴"
"에서 언어를 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:169
msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""
"처음 GDScript를 보시는 거라면, 계속하기 전에 :ref:`doc_scripting` 를 읽어주세"
"요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:172
msgid "Start by declaring the member variables this object will need:"
msgstr "이 객체가 필요로 하는 멤버 변수를 선언함으로써 시작합시다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:193
msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the \"Script "
"Variables\" section of the Inspector. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"첫 번째 변수인 ``speed``\\ 에 ``export`` 키워드를 사용하면 인스펙터"
"(Inspecter) 내에서 값을 설정할 수 있습니다. 편리한 점으로는 인스펙터"
"(Inspecter)에서도 원하는 값으로 조정할 수 있는 것입니다. ``Player`` 노드를 선"
"택하면 인스펙터(Inspecter)의 \"Script Variables\" 섹션에 나타납니다. 기억하세"
"요, 여기서 값을 바꾸면 스크립트에 작성한 값도 재정의됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:200
msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the word \"Mono\" at the bottom of the editor window "
"to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""
"당신이 C#을 사용한다면, 새로운 외부변수(export variables)나 시그널을 보기 위"
"해서 프로젝트 구성물(assemblies)를 (재)컴파일(build)할 필요가 있습니다. 이 컴"
"파일은 편집기 의 밑에 \"Mono\" 단어를 클릭하여 Mono 패널이 나타나게 한 후 "
"\"프로젝트 생성(Build)\" 버튼을 눌러서 수동으로 진행됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:208
msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 함수는 노드가 씬 트리에 들어올 때 호출됩니다, 이는 게임 창의 크"
"기를 알아보기 좋은 순간입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:224
msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"이제 ``_process()`` 함수를 사용해서 플레이어가 무엇을 할 지 정의할 수 있습니"
"다. ``_process()``\\ 는 매 프레임마다 호출되므로, 게임에서 자주 변하는 요소들"
"을 업데이트하기 위해서 사용할 수 있습니다. 플레이어에게는, 다음과 같은 작업"
"이 필요합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:229
msgid "Check for input."
msgstr "입력을 확인."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:230
msgid "Move in the given direction."
msgstr "주어진 방향으로 이동."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:231
msgid "Play the appropriate animation."
msgstr "적절한 애니메이션을 재생."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:233
msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this demo, "
"we will use the default events that are assigned to the arrow keys on the "
"keyboard."
msgstr ""
"먼저, 입력을 확인해야 합니다 - 플레이어가 키를 누르는 것이라 할까요? 이 게임"
"에서, 우리는 입력을 확인하기 위한 4개의 방향키를 갖고 있습니다. 입력 액션은 "
"프로젝트 설정의 \"Input Map\"에서 정의할 수 있습니다. 사용자 지정 이벤트를 정"
"의하고 이를 다른 키, 마우스 이벤트, 혹은 다른 입력으로 지정할 수도 있습니다. "
"이 데모에서는, 우리는 키보드에 있는 방향키가 지정된 기본 이벤트를 사용할 것입"
"니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:240
#, fuzzy
msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""
"``Input.is_action_pressed()`` 를 사용해서 키가 눌러졌는지를 감지할 수 있습니"
"다, 눌러지면 ``true`` 값을 내보내고 그렇지 않으면 ``false`` 값을 내보냅니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:302
#, fuzzy
msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""
"``velocity``\\ 를 ``(0, 0)``\\ 으로 설정하는 것으로 시작합니다 - 기본 값으로 "
"플레이어는 움직이지 않아야 합니다. 그 후 각 입력을 확인하고 ``velocity``\\ 에"
"서 더하기/빼기를 통해 전체 방향을 얻습니다.  예를 들어 당신이 ``오른쪽`` 과 "
"``아래`` 를 동시에 누른다면, 결과 ``velocity`` 벡터는 ``(1, 1)`` 이 될 것입니"
"다. 이런 경우에서, 상하좌우 움직임을 추가하는 것은, 플레이어는 단순히 수평으"
"로 움직이는 것보다 *더 빠르게* 움직이게 됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:309
#, fuzzy
msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"우리는 이 속도를 *노멀라이즈* 해서 예방할 수 있습니다, 즉 우리는 이것의 *범위"
"* 를 ``1`` 로 설정하고, 원하는 속도로 곱해줍니다. 이렇게 하면 더 이상 대각선 "
"이동속도가 빨라지지 않습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:313
msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"이제까지 벡터 수학을 안 써봤거나, 회복이 필요하다면, Godot에서 벡터 사용에 관"
"한 설명을 :ref:`doc_vector_math` 에서 보실 수 있습니다. 보면 좋지만 나머지 튜"
"토리얼을 위해 꼭 필수적인 것은 아닙니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:317
#, fuzzy
msgid ""
"We also check whether the player is moving so we can call ``play()`` or "
"``stop()`` on the AnimatedSprite."
msgstr ""
"우리는 또 AnimatedSprite 애니메이션을 재생하고 정지할 수 있도록 플레이어가 움"
"직이고 있는지를 확인할 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:320
msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, ``"
"$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\")."
"play()``."
msgstr ""
"``$`` 는 ``get_node()`` 의 줄임말입니다. 그래서 위의 코드인, ``"
"$AnimatedSprite.play()`` 는 ``get_node(\"AnimatedSprite\").play()`` 와 같습니"
"다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:323
msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite is "
"a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""
"GDScript에서, ``$``\\ 는 현재 노드에서 상대적인 경로에 있는 노드를 반환하거"
"나, 노드가 없다면 ``null`` 값을 반환합니다. AnimatedSprite가 현재 노드의 자식"
"인 상태이므로, ``$AnimatedSprite``\\ 를 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:326
#, fuzzy
msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""
"이제 우리에게는 이동 방향이 있습니다. 즉, 플레이어의 위치를 업데이트할 수 있"
"습니다. 그리고 ``clamp()``\\ 를 사용해서 플레이어가 화면에서 나가는 것을 방지"
"합니다. 값을 *죄다(Clamp)*\\ 라는 것은 주어진 범위로 값을 제한한다는 뜻입니"
"다. 다음 함수를 ``_process`` 함수 아래에 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:347
msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"`_process()`함수에 있는 매개변수 `delta` 는 \"frame length\" (이전 프레임이 "
"완료되는데 걸린 시간) 를 참조 합니다. 이 값을 사용하면 프레임 레이트가 변경되"
"어도 당신의 이동속도를 항상 일정하게 유지 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:352
msgid ""
"Click \"Play Scene\" (``F6``) and confirm you can move the player around the "
"screen in all directions."
msgstr ""
"\"씬 실행\" (``F6``) 을 누르고 플레이어가 화면 내에서 모든 방향으로 움직일 "
"수 있는지 확인하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:355
msgid "If you get an error in the \"Debugger\" panel that says"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:357
msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:359
#, fuzzy
msgid ""
"this likely means you spelled the name of the AnimatedSprite node wrong. "
"Node names are case-sensitive and ``$NodeName`` must match the name you see "
"in the scene tree."
msgstr ""
"\"디버거\" 패널에서 \"null instance\"라고 하면서 에러가 뜬다면, 노드 이름의 "
"철자를 틀렸다는 것을 의미합니다. 노드 이름은 대소문자를 구별하고  ``"
"$NodeName`` 이나 ``get_node(\"NodeName\")`` 이 씬 트리에서 보는 이름이 일치해"
"야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:364
msgid "Choosing animations"
msgstr "애니메이션 고르기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:366
#, fuzzy
msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite is playing based on its direction. We have the \"walk\" "
"animation, which shows the player walking to the right. This animation "
"should be flipped horizontally using the ``flip_h`` property for left "
"movement. We also have the \"up\" animation, which should be flipped "
"vertically with ``flip_v`` for downward movement. Let's place this code at "
"the end of the ``_process()`` function:"
msgstr ""
"이제 캐릭터가 움직이니, 방향에 맞는 AnimatedSprite가 움직이도록 바꿔야 합니"
"다. 우리는 \"오른쪽\" 애니메이션이 있고 이걸 왼쪽 움직임으로 쓰려면 가로로 뒤"
"집어야 하므로 ``flip_h`` 속성을 써줍니다, 그리고 \"위\" 애니메이션도 아래 움"
"직임으로 쓰려면 세로로 뒤집어야 하므로 ``flip_v`` 을 써줍니다. "
"``_process()`` 아래에 이 코드를 작성해주세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:401
#, fuzzy
msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""
"위 코드 내의 불리언 할당은 프로그래머를 위한 일반적인 짧은 표현입니다. 위의 "
"단축된 불리언 할당을 이 코드와 비교해서 생각해보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:425
msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:428
msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:433
#, fuzzy
msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"씬을 다시 실행하고 애니메이션이 각 방향으로 잘 움직이는지 확인하세요. 잘 작동"
"된다고 확신된다면, 플레이어가 게임이 시작할 때 안 보이도록 이 문장을 "
"``_ready()`` 에 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:446
msgid "Preparing for collisions"
msgstr "충돌 준비하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:448
msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"우리는 ``Player`` 가 적과 닿았다는 것을 감지하길 원합니다, 하지만 아직 적을 "
"안 만들었습니다! 괜찮습니다, 왜냐하면 충돌이 작동하도록 우리는 Godot의 *시그"
"널(signal)* 기능을 사용할 것이기 때문입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:452
#, fuzzy
msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr "``extends Area2d`` 다음에 스크립트 상단에 다음을 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:466
msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"이것은 \"hit\"라 불리는 사용자 지정 시그널을 정의해서 적과 충돌할 때 우리의 "
"플레이어가 방출하도록 (내보내도록) 합니다. 우리는 ``Area2D`` 로 그 충돌을 감"
"지할 겁니다. ``Player`` 노드를 선택하고 인스펙터(Inspecter) 탭 옆의 \"노드\" "
"탭을 클릭하고 플레이어가 방출할 수 있는 시그널들을 확인해 보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:473
#, fuzzy
msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` "
"signal. This signal will be emitted when a body contacts the player. Click "
"\"Connect..\" and the \"Connect a Signal\" window appears. We don't need to "
"change any of these settings so click \"Connect\" again. Godot will "
"automatically create a function in your player's script."
msgstr ""
"우리의 \"hit\" 시그널도 거기에 있다는 것에 주목하세요! 적들은 "
"``RigidBody2D`` 노드가 될 것이기 때문에, 우리는 ``body_entered( Object "
"body )`` 시그널이 필요하고, 이걸로 바디가 플레이어와 접촉할 때 방출하도록 할 "
"것입니다. \"연결하기..\" 를 누르고 \"시그널 연결하기\" 창에서 \"연결\"을 누릅"
"니다. 우리는 어떤 설정도 바꿀 필요가 없습니다 - Godot는 자동으로 플레이어 스"
"크립트에 함수를 생성해줍니다. 이 함수는 시그널이 방출될 때마다 호출될 것입니"
"다 - 시그널을 *처리하는 것*\\ 입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:482
msgid ""
"Note the green icon indicating that a signal is connected to this function. "
"Add this code to the function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:502
msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"매번 적이 플레이어를 때리면, 시그널이 방출됩니다. 우리는 두 번 이상 ``hit`` "
"시그널이 발동되지 않도록 플레이어의 충돌을 비활성화 해야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:506
#, fuzzy
msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""
"엔진의 충돌 처리 중에 영역의 충돌 모양을 비활성화 하는 것은 오류를 초래할 수 "
"있습니다. ``set_deferred()``\\ 를 사용하면 Godot가 모양을 비활성화해도 안전"
"할 때까지 기다려줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:510
#, fuzzy
msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr ""
"우리 플레이어의 마지막 과제는 호출할 수 있는 함수를 추가해서 새 게임이 시작"
"할 때 플레이어를 리셋할 수 있게 하는 겁니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:531
msgid "Enemy scene"
msgstr "적 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:533
#, fuzzy
msgid ""
"Now it's time to make the enemies our player will have to dodge. Their "
"behavior will not be very complex: mobs will spawn randomly at the edges of "
"the screen, choose a random direction, and move in a straight line."
msgstr ""
"이제 우리의 플레이어가 피할 적을 만들 차례입니다. 이들의 행동은 그리 복잡하"
"진 않을겁니다: 적이 아무렇게나 화면의 가장자리에서 나타나고 무작위 방향으로 "
"직선으로 나아갑니다, 그리고 화면을 벗어나면 사라집니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:537
#, fuzzy
msgid ""
"We'll create a ``Mob`` scene, which we can then *instance* to create any "
"number of independent mobs in the game."
msgstr ""
"그러면 ``Mob`` 씬에 이 작업을 해야 합니다, 이것을 *인스턴스* 해서 게임에선 정"
"해진 수 만큼의 적들을 만들 것입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:540
msgid "See :ref:`doc_instancing` to learn more about instancing."
msgstr "인스턴스에 대해 더 알고 싶다면 :ref:`doc_instancing` 로 가세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:543
msgid "Node setup"
msgstr "노드 설정하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:545
msgid "Click Scene -> New Scene and add the following nodes:"
msgstr "씬 -> 새 씬을 클릭 후 다음 노드들을 추가합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:547
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ":ref:`RigidBody2D <class_RigidBody2D>` ( ``Mob`` 으로 이름지음)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:549
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr ":ref:`AnimatedSprite <class_AnimatedSprite>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:550
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr ":ref:`CollisionShape2D <class_CollisionShape2D>`"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:551
#, fuzzy
msgid ":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>`"
msgstr ""
":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>` ( ``Visibility`` 으"
"로 이름지음)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:553
msgid ""
"Don't forget to set the children so they can't be selected, like you did "
"with the Player scene."
msgstr ""
"플레이어 씬에서 한 것과 마찬가지로, 자식이 선택되지 않도록 설정하는 것을 잊지"
"마세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:556
msgid ""
"In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity "
"Scale`` to ``0``, so the mob will not fall downward. In addition, under the "
"``PhysicsBody2D`` section, click the ``Mask`` property and uncheck the first "
"box. This will ensure the mobs do not collide with each other."
msgstr ""
":ref:`RigidBody2D <class_RigidBody2D>` 속성에서는, ``Gravity Scale`` 을 "
"``0`` 으로 설정해 적이 아래로 떨어지지 않도록 합니다. 그리고, "
"``PhysicsBody2D``  섹션의 ``Mask`` 속성을 클릭하고 첫 번째 상자의 체크를 푸세"
"요. 이것은 적들끼리 충돌하지 않도록 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:563
#, fuzzy
msgid ""
"Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the "
"player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. "
"There are two images for each animation in the art folder."
msgstr ""
":ref:`AnimatedSprite <class_AnimatedSprite>` 를 당신이 플레이어에서 한 것처"
"럼 설정합니다. 이번엔, 3 개의 애니메이션이 있습니다: ``fly``, ``swim``, 그리"
"고 ``walk`` 이죠. 인스펙터(Inspecter)의 ``Playing`` 를 \"On\"으로 설정합니"
"다. 그리고 \"Speed (FPS)\" 를 아래에 보이는대로 조정해줍시다. 우리는 이 애니"
"메이션들 중 하나를 무작위로 선택해서, 적들이 다양하게 보이도록 할 겁니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:567
msgid "Adjust the \"Speed (FPS)\" to ``3`` for all animations."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:571
#, fuzzy
msgid "Set the ``Playing`` property in the Inspector to “On”."
msgstr ""
"인스펙터(Inspecter)에서 ``script`` 속성을 당신의 스크립트로 설정합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:573
msgid ""
"We'll select one of these animations randomly so that the mobs will have "
"some variety."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:575
msgid ""
"Like the player images, these mob images need to be scaled down. Set the "
"``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""
"플레이어 이미지처럼, 이 적 이미지들도 크기를 줄일 필요가 있습니다. "
"``AnimatedSprite`` 의 ``Scale`` 속성을 ``(0.75, 0.75)`` 으로 설정합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:578
#, fuzzy
msgid ""
"As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To "
"align the shape with the image, you'll need to set the ``Rotation Degrees`` "
"property to ``90`` (under \"Transform\" in the Inspector)."
msgstr ""
"``Player`` 씬처럼, 충돌을 위한 ``CapsuleShape2D`` 을 추가합니다. 이미지와 모"
"양이 같도록, ``Node2D`` 아래 ``Rotation Degrees`` 속성을 ``90`` 으로 설정해"
"야 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:582
msgid "Save the scene."
msgstr "씬을 저장합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:585
msgid "Enemy script"
msgstr "적 스크립트"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:587
msgid "Add a script to the ``Mob`` and add the following member variables:"
msgstr "``Mob`` 에게 스크립트를 추가해주고 다음의 멤버 변수를 추가해주세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:611
#, fuzzy
msgid ""
"When we spawn a mob, we'll pick a random value between ``min_speed`` and "
"``max_speed`` for how fast each mob will move (it would be boring if they "
"were all moving at the same speed)."
msgstr ""
"적이 스폰할 때, ``min_speed``\\ 와 ``max_speed``\\ 사이 무작위 값으로 각 적들"
"이 빠르게 움직이는 정도를 선택하도록 할 겁니다 (모두가 같은 속도로 움직이면 "
"지루할 것입니다). 그리고 세 개의 애니메이션의 이름이 들어있는 배열이 있는데 "
"이걸 무작위로 선택해서 사용할 겁니다. 스크립트와 SpriteFrames 리소스에서 철자"
"가 같은지 확인하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:615
msgid ""
"Now let's look at the rest of the script. In ``_ready()`` we randomly choose "
"one of the three animation types:"
msgstr ""
"이제 스크립트의 나머지를 봅시다. ``_ready()`` 에서 우리는 무작위로 세 개의 애"
"니메이션 유형들 중 하나를 고릅니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:637
msgid ""
"First, we get the list of animation names from the AnimatedSprite's "
"``frames`` property. This returns an Array containing all three animation "
"names: ``[\"walk\", \"swim\", \"fly\"]``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:641
msgid ""
"We then need to pick a random number between ``0`` and ``2`` to select one "
"of these names from the list (array indices start at ``0``). ``randi() % n`` "
"selects a random integer between ``0`` and ``n-1``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:645
#, fuzzy
msgid ""
"You must use ``randomize()`` if you want your sequence of \"random\" numbers "
"to be different every time you run the scene. We're going to use "
"``randomize()`` in our ``Main`` scene, so we won't need it here."
msgstr ""
"씬을 실행할 때 매 순간마다 다른 \"무작위\" 숫자의 순서를 원한다면 "
"``randomize()`` 를 사용해야 합니다. ``randomize()`` 를 우리의 ``Main`` 씬에 "
"사용할꺼니까, 더이상 여기 있으면 안됩니다. ``randi() % n`` 은  ``0`` 과 "
"``n-1`` 사이의 무작위 정수 값을 얻는 기본적인 방법입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:649
#, fuzzy
msgid ""
"The last piece is to make the mobs delete themselves when they leave the "
"screen. Connect the ``screen_exited()`` signal of the "
"``VisibilityNotifier2D`` node and add this code:"
msgstr ""
"적이 나갈 때 스스로를 삭제하는 것이 적의 마지막 과제입니다. ``Visubility`` 노"
"드의 ``screen_exited()`` 시그널을 연결하고 이 코드를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:666
msgid "This completes the `Mob` scene."
msgstr "이걸로 `적` 씬이 완성되었습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:669
msgid "Main scene"
msgstr "메인 씬"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:671
msgid ""
"Now it's time to bring it all together. Create a new scene and add a :ref:"
"`Node <class_Node>` named ``Main``. Click the \"Instance\" button and select "
"your saved ``Player.tscn``."
msgstr ""
"이제 이 모두를 모을 차례입니다. 새 씬을 만들고 ``Main`` 이라는 이름의 :ref:"
"`Node <class_Node>` 를 만드세요. \"인스턴스\" 버튼을 누르고 저장한 ``Player."
"tscn`` 을 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:677
msgid ""
"Now, add the following nodes as children of ``Main``, and name them as shown "
"(values are in seconds):"
msgstr ""
"``Main`` 의 자식으로 다음의 노드들을 추가하고, 여기에서 설명하는 대로 이름을 "
"지으세요 (값은 초 단위 입니다):"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:680
msgid ""
":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs "
"spawn"
msgstr ""
":ref:`Timer <class_Timer>` (``MobTimer`` 라고 이름지음) - 얼마나 자주 적이 스"
"폰하는지를 조절함"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:681
msgid ""
":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score "
"every second"
msgstr ""
":ref:`Timer <class_Timer>` (``ScoreTimer`` 라고 이름지음) - 매 초마다 점수를 "
"증가시킴"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:682
msgid ""
":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before "
"starting"
msgstr ""
":ref:`Timer <class_Timer>` (``StratTimer`` 라고 이름지음) - 시작하기 전에 지"
"연시간을 줌"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:683
msgid ""
":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate "
"the player's start position"
msgstr ""
":ref:`Position2D <class_Position2D>` (``StartPosition`` 이라고 이름지음) - 플"
"레이어의 시작 위치를 표시함"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:685
msgid ""
"Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr "각  ``Timer`` 마다 ``Wait Time`` 속성을 다음과 같이 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:688
msgid "``MobTimer``: ``0.5``"
msgstr "``MobTimer``: ``0.5``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:689
msgid "``ScoreTimer``: ``1``"
msgstr "``ScoreTimer``: ``1``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:690
msgid "``StartTimer``: ``2``"
msgstr "``StartTimer``: ``2``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:692
msgid ""
"In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and "
"set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""
"그리고, ``StartTimer`` 속성의 ``One Shot`` 을 \"On\"으로 설정하고 "
"``StartPosition`` 노드의 ``Position`` 을 ``(240, 450)`` 으로 설정하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:696
msgid "Spawning mobs"
msgstr "적 스폰하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:698
msgid ""
"The Main node will be spawning new mobs, and we want them to appear at a "
"random location on the edge of the screen. Add a :ref:`Path2D "
"<class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you "
"select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""
"메인 노드는 새로운 적들을 스폰할 것이고 우리는 그들이 화면 모서리 아무 위치에"
"서나 나타나도록 만들고 싶습니다. :ref:`Path2D <class_Path2D>` 노드를 "
"``Main`` 의 자식으로 추가하고 ``MobPath`` 라고 이름지으세요. ``Path2D`` 를 선"
"택한다면, 당신은 편집기 위쪽에 새로운 버튼들이 보일 것입니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:705
#, fuzzy
msgid ""
"Select the middle one (\"Add Point\") and draw the path by clicking to add "
"the points at the corners shown. To have the points snap to the grid, make "
"sure \"Use Grid Snap\" is selected. This option can be found to the left of "
"the \"Lock\" button, appearing as a magnet next to some intersecting lines."
msgstr ""
"가운데 것을 선택하고 (\"포인트 추가\") 클릭으로 모서리에 포인트를 추가하고 경"
"로를 그립니다. 포인트가 그리드에 스냅되게 하려면, \"그리드에 스냅\"이 체크되"
"어있어야 합니다. 이 설정은 \"잠금\" 버튼 왼쪽과 \"스냅 설정\" 버튼 옆의 세 개"
"의 점에서 찾을 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:712
msgid ""
"Draw the path in *clockwise* order, or your mobs will spawn pointing "
"*outwards* instead of *inwards*!"
msgstr ""
"*시계 방향* 으로 그리세요, 그렇지 않으면 적들은 *안쪽* 이 아닌 *바깥쪽* 으로 "
"향할 것입니다!"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:717
msgid ""
"After placing point ``4`` in the image, click the \"Close Curve\" button and "
"your curve will be complete."
msgstr ""
"이미지에서 ``4`` 포인트를 찍고 난 후, \"커브 닫기\" 버튼을 누르면 커브가 완성"
"됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:720
msgid ""
"Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` "
"node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node "
"will automatically rotate and follow the path as it moves, so we can use it "
"to select a random position and direction along the path."
msgstr ""
"이제 경로를 정의하기 위해, :ref:`PathFollow2D <class_PathFollow2D>` 노드를 "
"``MobPath`` 의 자식으로 추가한 후, ``MobSpawnLocation`` 이라고 이름짓습니다. "
"이 노드는 자동으로 회전하고 이동하면서 경로를 따라갈 것입니다, 그래서 우리는 "
"이걸로 경로를 따라 임의의 위치와 방향을 선택하기 위해 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:725
#, fuzzy
msgid "Your scene should look like this:"
msgstr "씬 트리는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:730
msgid "Main script"
msgstr "메인 스크립트"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:732
msgid ""
"Add a script to ``Main``. At the top of the script, we use ``export "
"(PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""
"``Main`` 에 스크립트를 추가합니다. 스크립트의 위에 ``export (PackedScene)`` "
"를 사용해서 우리가 인스턴스하길 원하는 적 씬을 고를 수 있도록 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:772
msgid ""
"Click the ``Main`` node and you will see the ``Mob`` property in the "
"Inspector under \"Script Variables\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:775
msgid "You can assign this property's value in two ways:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:777
#, fuzzy
msgid ""
"Drag ``Mob.tscn`` from the \"FileSystem\" panel and drop it in the ``Mob`` "
"property ."
msgstr ""
"\"파일 시스템\" 패널에서 ``Mob.tscn`` 을 드래그하고 ``Main`` 노드의 스크립트 "
"속성 아래 ``Mob`` 속성에 드랍하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:779
msgid ""
"Click the down arrow next to \"[empty]\" and choose \"Load\". Select ``Mob."
"tscn``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:782
#, fuzzy
msgid ""
"Next, click on the Player and connect the ``hit`` signal. We want to make a "
"new function named ``game_over``, which will handle what needs to happen "
"when a game ends. Type \"game_over\" in the \"Receiver Method\" box at the "
"bottom of the \"Connect a Signal\" window and click \"Connect\". Add the "
"following code to the new function, as well as a ``new_game`` function that "
"will set everything up for a new game:"
msgstr ""
"다음으로, 플레이어를 클릭하고 ``hit`` 시그널과 연결하세요. 우리는 "
"``game_over`` 라는 새로운 함수를 만들어서, 게임이 끝날 때 발생하도록 조절할 "
"것입니다. \"시그널 연결\" 창 아래 \"Method In Node\" 박스에 \"game_over\" 라"
"고 치세요. 다음의 코드를 추가하고 ``new_game`` 함수를 추가하여 새로운 게임을 "
"위한 모든 것들을 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:820
#, fuzzy
msgid ""
"Now connect the ``timeout()`` signal of each of the Timer nodes "
"(``StartTimer``, ``ScoreTimer`` , and ``MobTimer``) to the main script. "
"``StartTimer`` will start the other two timers. ``ScoreTimer`` will "
"increment the score by 1."
msgstr ""
"이제 각 Timer 노드 (``StartTimer``, ``ScoreTimer`` ,그리고 ``MobTimer``) 의 "
"``timeout()`` 시그널을 연결하세요. ``StartTimer`` 는 나머지 두 타이머를 시작"
"하게 만들 것입니다. ``ScoreTimer`` 는 점수가 1씩 증가하게 합니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:847
msgid ""
"In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random "
"starting location along the ``Path2D``, and set the mob in motion. The "
"``PathFollow2D`` node will automatically rotate as it follows the path, so "
"we will use that to select the mob's direction as well as its position."
msgstr ""
"``_on_MobTimer_timeout()`` 에서 우리는 몹 인스턴스를 만들고, ``Path2D`` 에 따"
"라 무작위 시작점을 결정하고, 적이 움직이도록 설정할 것입니다. "
"``PathFollow2D`` 노드는 자동으로 경로를 따라 돌고, 그래서 이걸로 적들의 위치"
"와 방향을 선택하기 위해서 사용할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:853
msgid ""
"Note that a new instance must be added to the scene using ``add_child()``."
msgstr "새로운 인스턴스는 ``add_child()`` 를 사용해야 추가할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:901
#, fuzzy
msgid ""
"Why ``PI``? In functions requiring angles, GDScript uses *radians*, not "
"degrees. If you're more comfortable working with degrees, you'll need to use "
"the ``deg2rad()`` and ``rad2deg()`` functions to convert between the two."
msgstr ""
"각도가 필요한 기능에서, GDScript는 각도가 아닌, *라디안* 을 사용합니다. 각도"
"로 좀 더 편한 작업을 하고싶다면, ``deg2rad()`` 와 ``rad2deg()`` 함수로 이 둘"
"을 전환할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:907
#, fuzzy
msgid "Testing the scene"
msgstr "씬 설정하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:909
msgid ""
"Let's test the scene to make sure everything is working. Add this to "
"``_ready()``:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:926
msgid ""
"Let's also assign ``Main`` as our \"Main Scene\" - the one that runs "
"automatically when the game launches. Press the \"Play\" button and select "
"``Main.tscn`` when prompted."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:930
msgid ""
"You should be able to move the player around, see mobs spawning, and see the "
"player disappear when hit by a mob."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:933
msgid ""
"When you're sure everything is working, remove the call to ``new_game()`` "
"from ``_ready()``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:937
msgid "HUD"
msgstr "HUD"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:939
msgid ""
"The final piece our game needs is a UI: an interface to display things like "
"score, a \"game over\" message, and a restart button. Create a new scene, "
"and add a :ref:`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" "
"stands for \"heads-up display\", an informational display that appears as an "
"overlay on top of the game view."
msgstr ""
"게임에 마지막으로 필요한 것은 UI입니다: 인터페이스로 화면에 점수, \"게임 오버"
"\" 메시지, 재시작 버튼을 보여줍니다. 새 씬을 만들고,  :ref:`CanvasLayer "
"<class_CanvasLayer>` 노드를 추가하고 ``HUD`` 라고 이름지으세요. \"HUD\"는 "
"\"heads-up display\"의 약자로, 정보가 게임 화면 앞에 덮어씌우는 방식입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:945
msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""
":ref:`CanvasLayer <class_CanvasLayer>` 노드는 게임 위 레이어에 우리의 UI 요소"
"들을 그릴수 있게 해주고, 이로써 보여지는 정보가 플레이어나 적과 같은 게임 요"
"소들에 의해 가려지지 않게 만듭니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:949
#, fuzzy
msgid "The HUD needs to display the following information:"
msgstr "HUD는 다음의 정보들을 보여줍니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:951
msgid "Score, changed by ``ScoreTimer``."
msgstr "점수, ``ScoreTimer`` 가 바꿈."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:952
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr "메시지, \"Game Over\"나 \"Get Ready!\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:953
msgid "A \"Start\" button to begin the game."
msgstr "게임을 시작하기 위한 \"Start\" 버튼."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:955
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""
"UI 요소에 기초가 되는 노드는 :ref:`Control <class_Control>` 입니다. UI를 만들"
"기 위해, 우리는 두 가지 형식의 :ref:`Control <class_Control>` 노드를 쓸겁니"
"다: :ref:`Label <class_Label>` 과 :ref:`Button <class_Button>` 입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:959
msgid "Create the following as children of the ``HUD`` node:"
msgstr "다음에 맞춰 ``HUD`` 노드의 자식으로 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:961
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr "``ScoreLabel`` 로 이름지은 :ref:`Label <class_Label>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:962
#, fuzzy
msgid ":ref:`Label <class_Label>` named ``Message``."
msgstr "``MessageLabel`` 로 이름지은 :ref:`Label <class_Label>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:963
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr "``StartButton`` 으로 이름지은 :ref:`Button <class_Button>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:964
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr "``MessageTimer`` 로 이름지은 :ref:`Timer <class_Timer>`."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:966
#, fuzzy
msgid ""
"Click on the ``ScoreLabel`` and type a number into the ``Text`` field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following:"
msgstr ""
"``ScoreLabel``\\ 을 클릭하고 인스펙터(Inspecter)의 *Text* 영역에 숫자를 입력"
"하세요. ``Control`` 노드의 기본 폰트는 작고 크게 만들기 어렵습니다. game "
"assets에는 \"Xolonium-Regular.ttf\"라는 폰트 파일이 있습니다. 이 폰트를 사용"
"하려면, 각 ``Control`` 노드마다 다음과 같이 하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:971
msgid "Under \"Custom Fonts\", choose \"New DynamicFont\""
msgstr "\"Custom Fonts\" 에서, \"새 DynamicFont\"를 선택하세요"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:975
msgid ""
"Click on the \"DynamicFont\" you added, and under \"Font/Font Data\", choose "
"\"Load\" and select the \"Xolonium-Regular.ttf\" file. You must also set the "
"font's ``Size``. A setting of ``64`` works well."
msgstr ""
"추가한 \"DynamicFont\"를 클릭하시고, \"Font/Font Data\" 아래에서, \"불러오기"
"\"를 눌러서 \"Xolonium-Regular.ttf\" 파일을 선택하세요. 또한 폰트의 ``Size`` "
"도 설정해야 합니다. ``64`` 정도가 좋습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:981
msgid ""
"Once you've done this on the ``ScoreLabel``, you can click the down arrow "
"next to the DynamicFont property and choose \"Copy\", then \"Paste\" it in "
"the same place on the other two Control nodes."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:985
msgid ""
"**Anchors and Margins:** ``Control`` nodes have a position and size, but "
"they also have anchors and margins. Anchors define the origin - the "
"reference point for the edges of the node. Margins update automatically when "
"you move or resize a control node. They represent the distance from the "
"control node's edges to its anchor. See :ref:"
"`doc_design_interfaces_with_the_control_nodes` for more details."
msgstr ""
"**앵커(Anchors)와 마진(Margins):** ``Control`` 노드는 위치와 크기를 가지고 있"
"고, 앵커과 마진 또한 가지고 있습니다. 앵커는 중심은 정의합니다 - 노드의 모서"
"리를 위한 참고 포인트. 마진은 컨트롤 노드를 움직이거나 크기를 조절할 때 자동"
"으로 업데이트됩니다. 이것은 컨트롤 노드들의 모서리가 앵커로부터 얼마나 떨어"
"져 있는 지를 나타냅니다. 더 자세한 설명은 :ref:"
"`doc_design_interfaces_with_the_control_nodes` 를 참고하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:992
msgid ""
"Arrange the nodes as shown below. Click the \"Layout\" button to set a "
"Control node's layout:"
msgstr ""
"아래에 보이는 대로 노드를 정렬하세요. \"레이아웃(Layout)\" 버튼을 클릭해서 "
"Control 노드의 레이아웃을 설정하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:997
msgid ""
"You can drag the nodes to place them manually, or for more precise "
"placement, use the following settings:"
msgstr ""
"당신은 노드들을 드래그해서 수동으로 놓을 수도 있습니다, 혹은 더 정확한 방법으"
"로는, 다음의 설정을 사용하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1001
msgid "ScoreLabel"
msgstr "ScoreLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1003
msgid "*Layout* : \"Top Wide\""
msgstr "*레이아웃* : \"Top Wide\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1004
msgid "*Text* : ``0``"
msgstr "*Text* : ``0``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1005
#: ../../docs/getting_started/step_by_step/your_first_game.rst:1012
msgid "*Align* : \"Center\""
msgstr "*Align* : \"Center\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1008
#, fuzzy
msgid "Message"
msgstr "MessageLabel"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1010
msgid "*Layout* : \"HCenter Wide\""
msgstr "*레이아웃* : \"HCenter Wide\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1011
msgid "*Text* : ``Dodge the Creeps!``"
msgstr "*Text* : ``Dodge the Creeps!``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1013
msgid "*Autowrap* : \"On\""
msgstr "*Autowrap* : \"On\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1016
msgid "StartButton"
msgstr "StartButton"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1018
msgid "*Text* : ``Start``"
msgstr "*Text* : ``Start``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1019
msgid "*Layout* : \"Center Bottom\""
msgstr "*레이아웃* : \"Center Bottom\""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1020
msgid "*Margin* :"
msgstr "*Margin* :"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1022
msgid "Top: ``-200``"
msgstr "Top: ``-200``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1023
msgid "Bottom: ``-100``"
msgstr "Bottom: ``-100``"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1025
#, fuzzy
msgid ""
"On the ``MessageTimer``, set the ``Wait Time`` to ``2`` and set the ``One "
"Shot`` property to \"On\"."
msgstr ""
"이 함수는 우리가 원하는 메시지를 일시적으로 보여줄 때 호출됩니다, \"Get Ready"
"\" 처럼 말이죠. ``MessageTimer`` 에서, ``WaitTime`` 을 ``2`` 로 설정하고 "
"``OneShot`` 속성을 \"On\"으로 하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1028
msgid "Now add this script to ``HUD``:"
msgstr "이제 ``HUD`` 에 이 스크립트를 추가하세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1047
msgid ""
"The ``start_game`` signal tells the ``Main`` node that the button has been "
"pressed."
msgstr "``start_game`` 시그널은 ``Main`` 노드에게 버튼이 눌려졌음을 알립니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1069
#, fuzzy
msgid ""
"This function is called when we want to display a message temporarily, such "
"as \"Get Ready\"."
msgstr ""
"이 함수는 우리가 원하는 메시지를 일시적으로 보여줄 때 호출됩니다, \"Get Ready"
"\" 처럼 말이죠. ``MessageTimer`` 에서, ``WaitTime`` 을 ``2`` 로 설정하고 "
"``OneShot`` 속성을 \"On\"으로 하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1103
msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""
"이 함수는 플레이어가 패배했을 때 호출됩니다. 이것은 2초동안 \"Game Over\"를 "
"보여주고, 타이틀 화면으로 돌아와서, 잠깐 일시정지한 후 \"Start\" 버튼을 보여"
"줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1107
#, fuzzy
msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to add delays such as in the above code, where we want to wait some "
"time before showing the \"Start\" button."
msgstr ""
"짧은 시간동안 일시 정지를 하고 싶을 때, Timer 노드를 사용하는 대체재로 "
"SceneTree의 ``create_timer()`` 함수를 사용하는 것입니다. 위의 코드에서처럼 시"
"간 지연에 매우 유용한데, \"Start\" 버튼을 보여주기 전에 약간의 시간을 기다려"
"줍니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1125
msgid "This function is called by ``Main`` whenever the score changes."
msgstr "이 함수는 점수가 변경될 때마다 ``Main`` 에 의해서 호출됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1127
#, fuzzy
msgid ""
"Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` "
"signal of ``StartButton`` and add the following code to the new functions:"
msgstr ""
"``MessageTimer`` 의 ``timeout()`` 시그널과 ``StartButton`` 의 ``pressed()`` "
"를 연결하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1155
msgid "Connecting HUD to Main"
msgstr "메인에 HUD를 연결하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1157
#, fuzzy
msgid ""
"Now that we're done creating the ``HUD`` scene, go back to ``Main``. "
"Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` scene. "
"The scene tree should look like this, so make sure you didn't miss anything:"
msgstr ""
"이제 ``HUD`` 씬 만들기가 끝났습니다, 저장하고 다시 ``Main`` 으로 돌아갑니다. "
"``Player`` 씬에서 했듯이 ``HUD`` 씬을 ``Main`` 에 인스턴스하고, 트리의 맨 아"
"래에 위치시킵니다. 모든 트리는 이렇게 되어야 하므로, 놓친 것이 없는지 확인해"
"보세요:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1163
msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""
"이제 ``HUD`` 기능을 ``Main`` 스크립트에 연결할겁니다. 여기에는 ``Main`` 씬에 "
"추가적인 것이 요구됩니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1166
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function of the Main node by typing \"new_game\" in the "
"\"Receiver Method\" in the \"Connect a Signal\" window. Verify that the "
"green connection icon now appears next to ``func new_game()`` in the script."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1171
msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr ""
"``new_game()`` 에서, 점수 화면을 업데이트하고 \"Get Ready\" 메시지를 보이게 "
"합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1186
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr "``game_over()`` 에서는, 일치하는 ``HUD`` 함수를 호출해야 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1197
msgid ""
"Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""
"마지막으로, ``_on_ScoreTimer_timeout()`` 를 추가해서 점수가 바뀌는 것과 일치"
"한 화면을 유지하도록 합니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1209
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``Main.tscn``."
msgstr ""
"이제 실행할 준비가 끝났습니다! \"프로젝트 실행\" 버튼을 누르세요. 아마 메인 "
"씬을 선택하라고 물어볼 겁니다, ``Main.tscn`` 을 골라줍시다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1213
msgid "Removing old creeps"
msgstr "오래된 적들 제거하기"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1215
#, fuzzy
msgid ""
"If you play until \"Game Over\" and then start a new game right away, the "
"creeps from the previous game may still be on the screen. It would be better "
"if they all disappeared at the start of a new game. We just need a way to "
"tell *all* the mobs to remove themselves. We can do this with the \"group\" "
"feature."
msgstr ""
"\"Game Over\"까지 게임을 하고 새 게임을 시작해도, 전 판에서 있었던 적들이 아"
"직 화면에 남아 있습니다.새 게임이 시작되면 적이 모두 사라지는 것이 좋을 것입"
"니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1220
msgid ""
"In the ``Mob`` scene, select the root node and click the \"Node\" tab next "
"to the Inspector (the same place where you find the node's signals). Next to "
"\"Signals\", click \"Groups\" and you can type a new group name and click "
"\"Add\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1226
msgid ""
"Now all mobs will be in the \"mobs\" group. We can then add the following "
"line to the ``game_over()`` function in ``Main``:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1239
msgid ""
"The ``call_group()`` function calls the named function on every node in a "
"group - in this case we are telling every mob to delete itself."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1243
msgid "Finishing up"
msgstr "마무리 작업"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1245
msgid ""
"We have now completed all the functionality for our game. Below are some "
"remaining steps to add a bit more \"juice\" to improve the game experience. "
"Feel free to expand the gameplay with your own ideas."
msgstr ""
"우리는 게임의 모든 기능을 마친 상태입니다. 밑에 남아있는 단계는 게임의 경험"
"을 향상시킬 \"주스\"를 추가하는 것입니다. 독창적인 아이디어로 자유롭게 게임 "
"플레이를 확장시켜보세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1250
msgid "Background"
msgstr "배경(Background)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1252
#, fuzzy
msgid ""
"The default gray background is not very appealing, so let's change its "
"color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` "
"node. Make it the first node under ``Main`` so that it will be drawn behind "
"the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a "
"color you like and select \"Layout\" -> \"Full Rect\" so that it covers the "
"screen."
msgstr ""
"기본 회색 배경은 그렇게 멋지지는 않습니다, 그래서 색깔을 바꿔봅시다. 그 방법"
"들 중 하나는 :ref:`ColorRect <class_ColorRect>` 노드를 사용하는 것입니다. "
"``Main`` 바로 밑 첫 번째 노드로 놓아서 다른 노드들 뒤에 그려지도록 하세요. "
"``ColorRect`` 는 오직 하나의 속성만 가지고 있습니다: ``Color`` 입니다. 원하"
"는 색깔을 고르고 ``ColorRect`` 의 크기를 조절해 화면을 덮도록 만듭시다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1258
#, fuzzy
msgid ""
"You could also add a background image, if you have one, by using a "
"``TextureRect`` node instead."
msgstr ""
"또한 배경 이미지를 추가할 수도 있는데, 이미지가 있다면, ``Sprite`` 노드를 사"
"용하면 됩니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1262
msgid "Sound effects"
msgstr "음향 효과(Sound effects)"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1264
msgid ""
"Sound and music can be the single most effective way to add appeal to the "
"game experience. In your game assets folder, you have two sound files: "
"\"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" "
"for when the player loses."
msgstr ""
"사운드와 음악은 게임 경험을 멋지게 만들어주는 가장 효과적인 물건입니다. 게임 "
"애셋 폴더에서, 두 개의 사운드 파일을 찾으실 수 있습니다: \"House In a Forest "
"Loop.ogg\"는 배경 음악으로, \"gameover.wav\"는 플레이어가 죽었을 때 쓰면 됩니"
"다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1269
msgid ""
"Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children "
"of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On "
"each one, click on the ``Stream`` property, select \"Load\", and choose the "
"corresponding audio file."
msgstr ""
"두 개의 :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` 노드를 ``Main`` "
"의 자식으로 추가하세요. 하나는 ``Music`` 으로, 다른 하나는 ``DeathSound`` 로 "
"이름 지으세요. 각각에서, ``Stream`` 속성을 클릭하시고 \"Load\"를 선택해서 이"
"름에 맞는 오디오 파일을 선택하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1274
msgid ""
"To play the music, add ``$Music.play()`` in the ``new_game()`` function and "
"``$Music.stop()`` in the ``game_over()`` function."
msgstr ""
"음악을 실행시키려면, ``new_game()`` 함수에 ``$Music.play()`` 를 추가하고 "
"``game_over()`` 함수에 ``$Music.stop()`` 을 추가하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1277
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr ""
"마지막으로, ``game_over()`` 함수에 ``$DeathSound.play()`` 를 추가하세요."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1280
#, fuzzy
msgid "Keyboard shortcut"
msgstr "키보드 단축키"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1282
#, fuzzy
msgid ""
"Since the game is played with keyboard controls, it would be convenient if "
"we could also start the game by pressing a key on the keyboard. We can do "
"this with the \"Shortcut\" property of the ``Button`` node."
msgstr ""
"게임을 키보드로 조작하면, 키보드의 한 버튼을 눌러서 게임을 실행할 수 있도록 "
"하는 게 편리할 것입니다. 이렇게 하는 방법들 중 하나로 ``Button`` 노드의 "
"\"Shortcut\" 속성을 사용하는 것이 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1286
#, fuzzy
msgid ""
"In the ``HUD`` scene, select the ``StartButton`` and find its *Shortcut* "
"property in the Inspector. Select \"New Shortcut\" and click on the "
"\"Shortcut\" item. A second *Shortcut* property will appear. Select \"New "
"InputEventAction\" and click the new \"InputEventAction\". Finally, in the "
"*Action* property, type the name ``ui_select``. This is the default input "
"event associated with the spacebar."
msgstr ""
"``HUD`` 씬에서 ``StartButton``\\ 을 선택하고 인스펙터(Inspecter)에서 "
"*Shortcut* 속성을 찾으세요. \"새 Shortcut\"을 선택하고 \"Shortcut\" 항목을 클"
"릭하세요. 두 번째 *Shortcut* 속성이 나타날 것입니다. \"새 InputEventAction"
"\"을 선택하고 새로운 \"InputEvent\"을 클릭하세요. 마지막으로 *Action* 속성에"
"서 이름을 \"ui_select\"로 입력하세요. 이것은 스페이스바로 지정된 기본 입력 이"
"벤트입니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1294
#, fuzzy
msgid ""
"Now when the start button appears, you can either click it or press :kbd:"
"`Space` to start the game."
msgstr ""
"이제 시작 버튼이 나타날 때, 버튼을 클릭하거나 스페이스바를 눌러서 게임을 시작"
"할 수 있습니다."

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1298
msgid "Project files"
msgstr "프로젝트 파일"

#: ../../docs/<generated>:1
msgid "You can find a completed version of this project at these locations:"
msgstr "당신은 여기서 이 프로젝트의 완성 버전을 확인하실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1301
msgid "https://github.com/kidscancode/Godot3_dodge/releases"
msgstr "https://github.com/kidscancode/Godot3_dodge/releases"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1302
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr "https://github.com/godotengine/godot-demo-projects"
