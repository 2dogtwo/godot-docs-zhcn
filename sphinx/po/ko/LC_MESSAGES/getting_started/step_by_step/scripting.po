# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-06 09:15+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting.rst:4
msgid "Scripting"
msgstr "스크립팅"

#: ../../docs/getting_started/step_by_step/scripting.rst:7
msgid "Introduction"
msgstr "소개"

#: ../../docs/getting_started/step_by_step/scripting.rst:9
msgid ""
"Before Godot 3.0, the only choice for scripting a game was to use :ref:"
"`doc_gdscript`. Nowadays, Godot has four (yes, four!) official languages and "
"the ability to add extra scripting languages dynamically!"
msgstr ""
"Godot 3.0 이전에는, 스크립팅 하는 법이 :ref:`doc_gdscript`뿐 이었습니다. 지금"
"은, Godot은 4개를 (그래요, 4개!) 공식 언어로 갖고 있고 추가로 스크립트 언어"
"를 추가하는 기능도 있습니다!"

#: ../../docs/getting_started/step_by_step/scripting.rst:13
msgid ""
"This is great, mostly due the large amount of flexibility provided, but it "
"also makes our work supporting languages more difficult."
msgstr ""
"이것은 대단합니다, 기존의 경우에는 유연성을 제공해 주었지만, 다른 언어를 지원"
"하기 어렵게 만들기도 했습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:16
msgid ""
"The \"Main\" languages in Godot, though, are GDScript and VisualScript. The "
"main reason to choose them is their level of integration with Godot, as this "
"makes the experience smoother; both have slick editor integration, while C# "
"and C++ need to be edited in a separate IDE. If you are a big fan of "
"statically typed languages, go with C# and C++ instead."
msgstr ""
"Godot에서 \"메인\" 언어는 GDScript와 VisualScript입니다. 이들이 선택된 주된 "
"이유는 Godot과 통합 능력이 좋기 때문입니다, 둘다 매끄러운 에디터 통합을 갖고 "
"있습니다, 반면 C#과 C++는 별도의 IDE에 속합니다. 당신이 정적 언어를 좋아한다"
"면, C#과 C++로 이동하세요."

#: ../../docs/getting_started/step_by_step/scripting.rst:22
msgid "GDScript"
msgstr "GDScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:24
msgid ""
":ref:`doc_gdscript` is, as mentioned above, the main language used in Godot. "
"Using it has some positive points compared to other languages due to its "
"high integration with Godot:"
msgstr ""
":ref:`doc_gdscript`는 앞에서 말했듯, Godot에서 사용되는 메인 언어입니다. 이 "
"언어는 다른 언어들에 비해 Godot과의 높은 통합성으로 인해 갖는 장점이 있습니"
"다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:28
msgid ""
"It's simple, elegant, and designed to be familiar for users of other "
"languages such as Lua, Python, Squirrel, etc."
msgstr ""
"간단하고, 우아하고, 그리고 디자인 면에서도 Lua, Python, Squirrel 등과 같은 다"
"른 언어들과 비슷합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:29
msgid "Loads and compiles blazingly fast."
msgstr "매우 빠르게 로드되고 컴파일됩니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:30
msgid ""
"The editor integration is a pleasure to work with, with code completion for "
"nodes, signals, and many other items pertaining to the scene being edited."
msgstr ""
"에디터 통합은 노드, 시그널, 그리고 작업 중인 씬과 관련된 많은 항목들의 코드 "
"완성을 작업하는 즐거움입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:31
msgid ""
"Has vector types built-in (such as Vectors, transforms, etc.), making it "
"efficient for heavy use of linear algebra."
msgstr ""
"(Vectors, transforms 등과 같은) 많은 벡터 타입을 지니고 있어서, 선형 대수를 "
"많이 사용하는데 효율적입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:32
msgid ""
"Supports multiple threads as efficiently as statically typed languages - one "
"of the limitations that made us avoid VMs such as Lua, Squirrel, etc."
msgstr ""
"정적 언어처럼 효율적인 여러 스레드를 지원합니다 - 이것이 Lua, Squirrel 등의 "
"가상 머신을 피하게 만든 이유입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:33
msgid ""
"Uses no garbage collector, so it trades a small bit of automation (most "
"objects are reference counted anyway), by determinism."
msgstr ""
"가비지 컬렉터를 쓰지 않아서, 작업이 약간의 자동화를 버리는 대신 결정론적으로 "
"처리됩니다 (어쨌든 대부분의 오브젝트들은 참조 카운트됩니다)."

#: ../../docs/getting_started/step_by_step/scripting.rst:34
msgid ""
"Its dynamic nature makes it easy to optimize sections of code in C++ (via "
"GDNative) if more performance is required, all without recompiling the "
"engine."
msgstr ""
"더 많은 퍼포먼스가 필요하다면, 엔진을 전부 다시 컴파일하지 않아도 (GDNative"
"를 통해) C++의 코드 섹션을 쉽게 최적화할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:36
msgid ""
"If you're undecided and have experience with programming, especially "
"dynamically typed languages, go for GDScript!"
msgstr ""
"아직 프로그래밍에 경험이 없고 특히 동적 언어를 정하지 않았다면, GDScript로 시"
"작해보세요!"

#: ../../docs/getting_started/step_by_step/scripting.rst:40
msgid "VisualScript"
msgstr "VisualScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:42
msgid ""
"Beginning with 3.0, Godot offers :ref:`Visual "
"Scripting<doc_what_is_visual_script>`. This is a typical implementation of a "
"\"blocks and connections\" language, but adapted to how Godot works."
msgstr ""
"3.0을 시작하면서, Godot은 :ref:`Visual Scripting<doc_what_is_visual_script>`"
"을 제공합니다. 이것은 \"블록과 연결\" 언어의 일반적인 구현이지만, Godot의 작"
"동 방식에 맞게 조정됬습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:46
msgid ""
"Visual scripting is a great tool for non-programmers, or even for "
"experienced developers who want to make parts of the code more accessible to "
"others, like game designers or artists."
msgstr ""
"Visual scripting은 비 프로그래머 뿐만 아니라 경험있는 프로그래머도 게임 디자"
"이너나 아티스트와 같은 사람들이 코드 일부분을 보기 쉽게 만들어 주는 멋진 도구"
"입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:50
msgid ""
"It can also be used by programmers to build state machines or custom visual "
"node workflows - for example, a dialogue system."
msgstr ""
"프로그래머에게는 이걸로 상태 시스템이나 사용자 지정 시각적 노드 워크플로워를 "
"만들 수도 있습니다 - 예를 들면 대화 시스템이죠."

#: ../../docs/getting_started/step_by_step/scripting.rst:55
msgid ".NET / C#"
msgstr ".NET / C#"

#: ../../docs/getting_started/step_by_step/scripting.rst:57
msgid ""
"As Microsoft's C# is a favorite amongst game developers, we have added "
"official support for it. C# is a mature language with tons of code written "
"for it, and support was added thanks to a generous donation from Microsoft."
msgstr ""
"마이크로소프트의 C#은 게임 개발자들 사이에서 사랑받는 언어이기에, 우리는 이"
"걸 공식 지원합니다. C#은 많은 코드들로 작성된 완전한 언어로, 마이크로소프트"
"의 풍부한 도움에 우리는 지원하게 되었습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:62
msgid ""
"It has an excellent tradeoff between performance and ease of use, although "
"one must be aware of its garbage collector."
msgstr ""
"비록 가비지 컬랙터에 대해 알아야 하지만, 이것은 퍼포먼스와 사용의 용이성 두가"
"지를 절충하고 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:65
msgid ""
"C# is usually the best choice for companies. The large amount of programmers "
"familiar with it means less time can be spent learning Godot and more time "
"can be spent programming with it."
msgstr ""
"C#은 보통 회사에게 잘 쓰입니다. 많은 프로그래머들이 Godot을 배우는 대신 이걸 "
"가지고 프로그래밍하는데 시간을 투자 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:69
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory any third-party .NET library or framework can be used for scripting "
"in Godot, as well as any Common Language Infrastructure-compliant "
"programming language, such as F#, Boo or ClojureCLR. In practice however, C# "
"is the only officially supported .NET option."
msgstr ""
"Godot이 `Mono <https://mono-project.com>`_ .NET 런타임을 사용하기 때문에, 이"
"론적으로 어떤 서드 파티 .NET 라이브러리나 프레임워크라도 Godot의 스크립트에 "
"사용될 수 있고, F#, Boo, ClojureCLR와 같은 공용 언어 인프라 호환 프로그래밍 "
"언어 또한 가능합니다. 하지만, 실제로는 C#만 공식으로 지원하는 .NET 옵션입니"
"다."

#: ../../docs/getting_started/step_by_step/scripting.rst:75
msgid "GDNative / C++"
msgstr "GDNative / C++"

#: ../../docs/getting_started/step_by_step/scripting.rst:77
msgid ""
"Finally, one of our brightest additions for the 3.0 release: GDNative allows "
"scripting in C++ without needing to recompile (or even restart) Godot."
msgstr ""
"마침내 3.0 출시에 가장 빛나는 추가점들 중 하나인: GDNative는 Godot을 다시 컴"
"파일 하지 않아도 (심지어 재시작을 하지않아도) C++에서 스크립팅 할 수 있게 만"
"듭니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:81
msgid ""
"Any C++ version can be used, and mixing compiler brands and versions for the "
"generated shared libraries works perfectly, thanks to our use of an internal "
"C API Bridge."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:85
msgid ""
"This language is the best choice for performance and does not need to be "
"used throughout an entire game, as other parts can be written in GDScript or "
"Visual Script. However the API is clear and easy to use as it resembles, "
"mostly, Godot's actual C++ API."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:90
msgid ""
"More languages can be made available through the GDNative interface, but "
"keep in mind we don't have official support for them."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:94
msgid "Scripting a scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:96
msgid ""
"For the rest of this tutorial we'll set up a GUI scene consisting of a "
"button and a label, where pressing the button will update the label. This "
"will demonstrate:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:100
msgid "Writing a script and attaching it to a node."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:101
msgid "Hooking up UI elements via signals."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:102
msgid "Writing a script that can access other nodes in the scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:104
msgid ""
"Before continuing, please make sure to read the :ref:`doc_gdscript` "
"reference. It's a language designed to be simple, and the reference is "
"short, so it will not take more than a few minutes to get an overview of the "
"concepts."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:109
msgid "Scene setup"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:111
msgid ""
"Use the \"Add Child Node\" dialogue accessed from the Scene tab (or by "
"pressing ``Ctrl+A``) to create a hierarchy with the following nodes:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:114
msgid "Panel"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:116
msgid "Label"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:117
msgid "Button"
msgstr "버튼"

#: ../../docs/getting_started/step_by_step/scripting.rst:119
msgid "The scene tree should look like this:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:123
msgid ""
"Use the 2D editor to position and resize the Button and Label so that they "
"look like the image below. You can set the text from the Inspector tab."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:128
msgid "Finally, save the scene with a name such as ``sayhello.tscn``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:133
msgid "Adding a script"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:135
msgid ""
"Right click on the Panel node, then select \"Attach Script\" from the "
"context menu:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:140
msgid ""
"The script creation dialog will pop up. This dialog allows you to set the "
"script's language, class name, and other relevant options."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:143
msgid ""
"In GDScript the file itself represents the class, so the class name field is "
"not editable."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:146
msgid ""
"The node we're attaching the script to is a panel, so the Inherits field "
"will automatically be filled in with \"Panel\". This is what we want, as the "
"script's goal is to extend the functionality of our panel node."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:150
msgid "Finally, enter a path name for the script and select Create:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:154
msgid ""
"The script will then be created and added to the node. You can see this as "
"an \"Open script\" icon next to the node in the Scene tab, as well as in the "
"script property under Inspector:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:160
msgid ""
"To edit the script, select either of these buttons, both of which are "
"highlighted in the above image. This will bring you to the script editor "
"where a default template will be included:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:165
msgid ""
"There's not much there. The ``_ready()`` function is called when the node, "
"and all its children, enters the active scene. **Note:** ``_ready()`` is not "
"the constructor; the constructor is instead ``_init()``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:170
msgid "The role of the script"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:172
msgid ""
"A script adds behavior to a node. It is used to control how the node "
"functions as well as how it interacts with other nodes: children, parent, "
"siblings, and so on. The local scope of the script is the node. In other "
"words, the script inherits the functions provided by that node."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:180
msgid "Handling a signal"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:182
msgid ""
"Signals are \"emitted\" when some specific kind of action happens, and they "
"can be connected to any function of any script instance. Signals are used "
"mostly in GUI nodes, although other nodes have them too, and you can even "
"define custom signals in your own scripts."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:187
msgid ""
"In this step, we'll connect the \"pressed\" signal to a custom function. "
"Forming connections is the first part and defining the custom function is "
"the second part. For the first part, Godot provides two ways to create "
"connections: through a visual interface the editor provides or through code."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:192
msgid ""
"While we will use the code method for the remainder of this tutorial series, "
"let's cover how the editor interface works for future reference."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:195
msgid ""
"Select the Button node in the scene tree and then select the \"Node\" tab. "
"Next, make sure that you have \"Signals\" selected."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:200
msgid ""
"If you then select \"pressed()\" under \"BaseButton\" and click the "
"\"Connect...\" button in the bottom right, you'll open up the connection "
"creation dialogue."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:205
msgid ""
"In the bottom-left are the key things you need to create a connection: a "
"node which implements the method you want to trigger (represented here as a "
"NodePath) and the name of the method to trigger."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:209
msgid ""
"The top-left section displays a list of your scene's nodes with the emitting "
"node's name highlighted in red. Select the \"Panel\" node here. When you "
"select a node, the NodePath at the bottom will automatically update to point "
"a relative path from the emitting node to the selected node."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:214
msgid ""
"By default, the method name will contain the emitting node's name (\"Button"
"\" in this case), resulting in \"_on_[EmitterNode]_[signal_name]\". If you "
"do have the \"Make Function\" check button checked, then the editor will "
"generate the function for you before setting up the connection."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:219
msgid ""
"And that concludes the guide on how to use the visual interface. However, "
"this is a scripting tutorial, so for the sake of learning, let's dive in to "
"the manual process!"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:223
msgid ""
"To accomplish this, we will introduce a function that is probably the most "
"used by Godot programmers: :ref:`Node.get_node() <class_Node_get_node>`. "
"This function uses paths to fetch nodes anywhere in the scene, relative to "
"the node that owns the script."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:228
msgid ""
"For the sake of convenience, delete everything underneath ``extends Panel``. "
"You will fill out the rest of the script manually."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:231
msgid ""
"Because the Button and Label are siblings under the Panel where the script "
"is attached, you can fetch the Button by typing the following underneath the "
"``_ready()`` function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:248
msgid "Next, write a function which will be called when the button is pressed:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:264
msgid ""
"Finally, connect the button's \"pressed\" signal to ``_ready()`` by using :"
"ref:`Object.connect() <class_Object_connect>`."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:280
msgid "The final script should look like this:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:314
msgid ""
"Run the scene and press the button. You should get the following result:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:318
msgid "Why, hello there! Congratulations on scripting your first scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:322
msgid ""
"A common misunderstanding regarding this tutorial is how ``get_node(path)`` "
"works. For a given node, ``get_node(path)`` searches its immediate children. "
"In the above code, this means that Button must be a child of Panel. If "
"Button were instead a child of Label, the code to obtain it would be:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:340
msgid "Also, remember that nodes are referenced by name, not by type."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:344
msgid ""
"The right-hand panel of the connect dialogue is for binding specific values "
"to the connected function's parameters. You can add and remove values of "
"different types."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:348
msgid ""
"The code approach also enables this with a 4th ``Array`` parameter that is "
"empty by default. Feel free to read up on the ``Object.connect`` method for "
"more information."
msgstr ""
