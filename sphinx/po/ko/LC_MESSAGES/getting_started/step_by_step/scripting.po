# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-30 19:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting.rst:4
msgid "Scripting"
msgstr "스크립팅(Scripting)"

#: ../../docs/getting_started/step_by_step/scripting.rst:7
msgid "Introduction"
msgstr "소개"

#: ../../docs/getting_started/step_by_step/scripting.rst:9
msgid ""
"Before Godot 3.0, the only choice for scripting a game was to use :ref:"
"`GDScript<doc_gdscript>`. Nowadays, Godot has four (yes, four!) official "
"languages and the ability to add extra scripting languages dynamically!"
msgstr ""
"Godot 3.0 이전까지는 스크립트하는 방법이 :ref:`GDScript<doc_gdscript>`\\ 밖"
"에 없었습니다. 현재 Godot는 4개를 (그래요, 4개!) 공식 언어로 갖고 있고 별개"
"로 스크립트 언어를 추가하는 기능도 있습니다!"

#: ../../docs/getting_started/step_by_step/scripting.rst:13
msgid ""
"This is great, mostly due to the large amount of flexibility provided, but "
"it also makes our work supporting languages more difficult."
msgstr ""
"이것은 대단합니다. 왜냐하면 큰 유연성을 제공해주기 때문입니다. 하지만 우리가 "
"여러가지 언어를 지원하는 것을 더 어렵게 만들기도 합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:16
msgid ""
"The \"main\" languages in Godot, though, are GDScript and VisualScript. The "
"main reason to choose them is their level of integration with Godot, as this "
"makes the experience smoother; both have slick editor integration, while C# "
"and C++ need to be edited in a separate IDE. If you are a big fan of "
"statically typed languages, go with C# and C++ instead."
msgstr ""
"Godot에서 \"메인\" 언어는 GDScript와 VisualScript입니다. 이들이 선택된 주된 "
"이유는 Godot와 결합 능력이 좋기 때문입니다. 둘 다 기본 편집기에서 매끄럽게 사"
"용할 수 있습니다. 반면 C#과 C++는 별도의 IDE에서 편집해야 합니다. 당신이 정"
"적 타입 언어를 좋아한다면 C#과 C++을 선택하세요."

#: ../../docs/getting_started/step_by_step/scripting.rst:22
msgid "GDScript"
msgstr "GDScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:24
msgid ""
":ref:`GDScript<doc_gdscript>` is, as mentioned above, the main language used "
"in Godot. Using it has some positive points compared to other languages due "
"to its high integration with Godot:"
msgstr ""
":ref:`GDScript<doc_gdscript>`\\ 는 앞에서 말하듯이, Godot에서 사용되는 메인 "
"언어입니다. 이 언어는 다른 언어들에 비해 Godot와 높은 결합으로 얻는 장점이 있"
"습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:28
msgid ""
"It's simple, elegant, and designed to be familiar for users of other "
"languages such as Lua, Python, Squirrel, etc."
msgstr ""
"간단합니다. 우아합니다. 그리고 디자인 면에서도 Lua, Python, Squirrel 등과 같"
"은 다른 언어들과 비슷합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:29
msgid "Loads and compiles blazingly fast."
msgstr "매우 빠르게 불러오고 컴파일합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:30
msgid ""
"The editor integration is a pleasure to work with, with code completion for "
"nodes, signals, and many other items pertaining to the scene being edited."
msgstr ""
"편집기 결합 능력은 노드, 시그널, 그리고 많은 편집 중인 씬과 관련된 항목을 위"
"한 코드 완성으로 인해 즐거움을 줍니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:31
msgid ""
"Has vector types built-in (such as Vectors, transforms, etc.), making it "
"efficient for heavy use of linear algebra."
msgstr ""
"(Vectors, transforms 등과 같은) 많은 벡터 유형을 지니고 있어서, 선형 대수를 "
"많이 사용하는데 효율적입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:32
msgid ""
"Supports multiple threads as efficiently as statically typed languages - one "
"of the limitations that made us avoid VMs such as Lua, Squirrel, etc."
msgstr ""
"정적 타입 언어처럼 효율적인 여러 스레드를 지원합니다 - 이것이 Lua, Squirrel "
"등의 가상 머신을 피하게 만든 제한 중 하나 입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:33
msgid ""
"Uses no garbage collector, so it trades a small bit of automation (most "
"objects are reference counted anyway), by determinism."
msgstr ""
"쓰레기 수집을 쓰지 않습니다. 때문에 결정론적으로 인한 약간의 자동화를 교환합"
"니다 (어쨌든 대부분의 오브젝트들은 참조 카운트됩니다)."

#: ../../docs/getting_started/step_by_step/scripting.rst:34
msgid ""
"Its dynamic nature makes it easy to optimize sections of code in C++ (via "
"GDNative) if more performance is required, all without recompiling the "
"engine."
msgstr ""
"더 많은 성능이 필요하다면 (GDNative를 통해) C++의 코드 섹션을 쉽게 최적화할 "
"수 있습니다. 엔진을 전부 다시 컴파일 하지 않아도 됩니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:36
msgid ""
"If you're undecided and have experience with programming, especially "
"dynamically typed languages, go for GDScript!"
msgstr ""
"아직 프로그래밍에 경험이 없고 특히 동적 타입 언어를 정하지 않았다면 GDScript"
"로 시작해보세요!"

#: ../../docs/getting_started/step_by_step/scripting.rst:40
msgid "VisualScript"
msgstr "VisualScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:42
msgid ""
"Beginning with 3.0, Godot offers :ref:`Visual "
"Scripting<doc_what_is_visual_script>`. This is a typical implementation of a "
"\"blocks and connections\" language, but adapted to how Godot works."
msgstr ""
"3.0을 시작하면서, Godot는 :ref:`Visual Scripting<doc_what_is_visual_script>`"
"\\ 을 제공합니다. \"블록과 연결\" 언어의 전형적인 구현 방식이지만 Godot의 작"
"동 방식에 적용되었습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:46
msgid ""
"Visual scripting is a great tool for non-programmers, or even for "
"experienced developers who want to make parts of the code more accessible to "
"others, like game designers or artists."
msgstr ""
"Visual scripting은 비 프로그래머 뿐만 아니라 경험 있는 프로그래머도 게임 디자"
"이너나 아티스트와 같은 사람들이 코드 일부분을 보기 쉽게 만들어 주는 멋진 도구"
"입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:50
msgid ""
"It can also be used by programmers to build state machines or custom visual "
"node workflows - for example, a dialogue system."
msgstr ""
"프로그래머는 이것으로 상태 시스템이나 맞춤 시각 노드 워크플로를 만들 수도 있"
"습니다 - 예를 들면 대화 시스템이죠."

#: ../../docs/getting_started/step_by_step/scripting.rst:55
msgid ".NET / C#"
msgstr ".NET / C#"

#: ../../docs/getting_started/step_by_step/scripting.rst:57
msgid ""
"As Microsoft's C# is a favorite amongst game developers, we have added "
"official support for it. C# is a mature language with tons of code written "
"for it, and support was added thanks to a generous donation from Microsoft."
msgstr ""
"Microsoft의 C#은 게임 개발자들 사이에서 사랑받는 언어입니다. 그래서 이것을 공"
"식으로 지원합니다. C#은 많은 코드로 작성된 완전한 언어로, Microsoft의 자비로"
"운 기여 덕분에 지원할 수 있게 되었습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:62
msgid ""
"It has an excellent tradeoff between performance and ease of use, although "
"one must be aware of its garbage collector."
msgstr ""
"비록 쓰레기 수집에 대해 알아야 하지만 이것은 퍼포먼스와 사용의 용이성 두가지"
"를 절충하고 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:65
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory any third-party .NET library or framework can be used for scripting "
"in Godot, as well as any Common Language Infrastructure-compliant "
"programming language, such as F#, Boo or ClojureCLR. In practice however, C# "
"is the only officially supported .NET option."
msgstr ""
"Godot가 `Mono <https://mono-project.com>`_ .NET 런타임을 사용하기 때문에, 이"
"론적으로 모든 제 3자 .NET 라이브러리나 프레임워크를 Godot의 스크립트로 사용"
"할 수 있습니다. F#, Boo, ClojureCLR와 같은 공용 언어 인프라 호환 프로그래밍 "
"언어 또한 가능합니다. 하지만 실제로는 C#만 공식으로 지원하는 .NET 옵션입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:71
msgid "GDNative / C++"
msgstr "GDNative / C++"

#: ../../docs/getting_started/step_by_step/scripting.rst:73
msgid ""
"Finally, one of our brightest additions for the 3.0 release: GDNative allows "
"scripting in C++ without needing to recompile (or even restart) Godot."
msgstr ""
"마지막으로 3.0 출시에 가장 빛나는 추가 요소입니다: GDNative는 Godot를 다시 컴"
"파일 하지 않아도 (심지어 재시작을 하지 않아도) C++에서 스크립트할 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/scripting.rst:77
msgid ""
"Any C++ version can be used, and mixing compiler brands and versions for the "
"generated shared libraries works perfectly, thanks to our use of an internal "
"C API Bridge."
msgstr ""
"모든 C++버전을 사용할 수 있고, 내부 C API Bridge를 사용해서 생성한 공유 라이"
"브러리의 컴파일러 브랜드와 버전을 완벽하게 혼합할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:81
#, fuzzy
msgid ""
"This language is the best choice for performance and does not need to be "
"used throughout an entire game, as other parts can be written in GDScript or "
"Visual Script. However, the API is clear and easy to use as it resembles, "
"mostly, Godot's actual C++ API."
msgstr ""
"이 언어는 성능 분야에는 최고이지만 게임 전체에 사용할 필요는 없습니다. 다른 "
"부분은 GDScript나 VisualScript을 통해 다른 부분을 작성할 수 있기 때문이죠. 그"
"러나 이 API는 명확하고 사용하기 쉽습니다. 이 API의 대부분은 Godot의 실제 C++ "
"API와 유사합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:86
msgid ""
"More languages can be made available through the GDNative interface, but "
"keep in mind we don't have official support for them."
msgstr ""
"더 많은 언어는 GDNative 인터페이스를 통해 사용할 수 있지만 이 인터페이스에 대"
"한 공식적인 지원은 없습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:90
msgid "Scripting a scene"
msgstr "씬 스크립트하기"

#: ../../docs/getting_started/step_by_step/scripting.rst:92
msgid ""
"For the rest of this tutorial we'll set up a GUI scene consisting of a "
"button and a label, where pressing the button will update the label. This "
"will demonstrate:"
msgstr ""
"본 튜토리얼의 나머지 부분에서는 Button과 Label로 이루어진 GUI 씬을 설정합니"
"다. 여기서 Button을 누르면 Label이 업데이트됩니다. 이를 통해 다음을 설명합니"
"다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:96
msgid "Writing a script and attaching it to a node."
msgstr "스크립트를 작성하여 노드에 붙이기."

#: ../../docs/getting_started/step_by_step/scripting.rst:97
msgid "Hooking up UI elements via signals."
msgstr "시그널을 통해 UI 요소들을 연결하기."

#: ../../docs/getting_started/step_by_step/scripting.rst:98
msgid "Writing a script that can access other nodes in the scene."
msgstr "씬의 다른 노드에 접근할 수 있는 스크립트를 작성하기."

#: ../../docs/getting_started/step_by_step/scripting.rst:100
msgid ""
"Before continuing, please make sure to read the :ref:"
"`GDScript<doc_gdscript>` reference. It's a language designed to be simple, "
"and the reference is short, so it will not take more than a few minutes to "
"get an overview of the concepts."
msgstr ""
"계속하기 전에 :ref:`GDScript<doc_gdscript>` 참조를 반드시 읽어 보기 바랍니"
"다. 이 언어는 간단하게 설계되었고, 참조가 짧기 때문에 개념을 파악하는 데 몇 "
"분 정도 밖에 걸리지 않습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:105
msgid "Scene setup"
msgstr "씬 설정"

#: ../../docs/getting_started/step_by_step/scripting.rst:107
#, fuzzy
msgid ""
"Use the \"Add Child Node\" dialogue accessed from the Scene tab (or by "
"pressing :kbd:`Ctrl + A`) to create a hierarchy with the following nodes:"
msgstr ""
"씬 탭에서 \"자식 노드 추가하기(Add Child Node)\" 대화 상자를 사용해서 (혹은 "
"``Ctrl+A`` 키로) 다음 노드로 이루어진 계층 구조를 만듭니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:110
msgid "Panel"
msgstr "Panel"

#: ../../docs/getting_started/step_by_step/scripting.rst:112
msgid "Label"
msgstr "Label"

#: ../../docs/getting_started/step_by_step/scripting.rst:113
msgid "Button"
msgstr "버튼"

#: ../../docs/getting_started/step_by_step/scripting.rst:115
msgid "The scene tree should look like this:"
msgstr "씬 트리는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:119
msgid ""
"Use the 2D editor to position and resize the Button and Label so that they "
"look like the image below. You can set the text from the Inspector tab."
msgstr ""
"2D 편집기로 Button과 Label을 아래 이미지와 같이 배치하고 크기를 조정합니다. "
"인스펙터(Inspecter) 탭에서 문자를 설정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:124
msgid "Finally, save the scene with a name such as ``sayhello.tscn``."
msgstr "마지막으로 ``sayhello.tscn``\\ 와 같은 이름으로 씬을 저장합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:129
msgid "Adding a script"
msgstr "스크립트 추가하기"

#: ../../docs/getting_started/step_by_step/scripting.rst:131
msgid ""
"Right click on the Panel node, then select \"Attach Script\" from the "
"context menu:"
msgstr ""
"Panel 노드에서 우클릭합니다. 우클릭 메뉴에서 \"스크립트 붙이기(Attach "
"Script)\"를 선택합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:136
msgid ""
"The script creation dialog will pop up. This dialog allows you to set the "
"script's language, class name, and other relevant options."
msgstr ""
"스크립트 생성 대화 상자가 나타납니다. 여기서 스크립트 언어, 클래스 이름 및 기"
"타 관련 옵션을 설정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:139
msgid ""
"In GDScript, the file itself represents the class, so the class name field "
"is not editable."
msgstr ""
"GDScript에서 파일 자체는 클래스를 나타냅니다. 따라서 클래스 이름(Class Name) "
"칸은 수정할 수 없습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:142
msgid ""
"The node we're attaching the script to is a panel, so the Inherits field "
"will automatically be filled in with \"Panel\". This is what we want, as the "
"script's goal is to extend the functionality of our panel node."
msgstr ""
"스크립트를 붙이는 노드는 Panel입니다. 따라서 상속(Inherits) 칸은 자동으로 "
"\"Panel\"로 채워집니다. 이것이 우리의 목표입니다. 스크립트의 목적은 Panel 노"
"드의 기능을 확장하는 것이죠."

#: ../../docs/getting_started/step_by_step/scripting.rst:146
msgid "Finally, enter a path name for the script and select Create:"
msgstr ""
"마지막으로 스크립트 경로(Path) 이름을 입력하고 만들기(Create)를 선택합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:150
msgid ""
"The script will then be created and added to the node. You can see this as "
"an \"Open script\" icon next to the node in the Scene tab, as well as in the "
"script property under Inspector:"
msgstr ""
"이제 스크립트가 만들어지고 노드에 추가됩니다. 스크립트가 추가된 것은 노드 옆"
"의 \"스크립트 열기(Open script)\" 아이콘으로 확인할 수 있습니다. 인스펙터"
"(Inspector) 아래의 Script 속성에서도 확인할 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:156
msgid ""
"To edit the script, select either of these buttons, both of which are "
"highlighted in the above image. This will bring you to the script editor, "
"where a default template will be included:"
msgstr ""
"스크립트를 편집하려면 위 이미지에 강조 표시된 두 버튼 중 하나를 선택합니다. "
"그러면 기본 템플릿으로 된 스크립트 편집기로 이동합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:161
msgid ""
"There's not much there. The ``_ready()`` function is called when the node, "
"and all its children, enters the active scene. **Note:** ``_ready()`` is not "
"the constructor; the constructor is instead ``_init()``."
msgstr ""
"안에 많은 내용이 있지는 않습니다. ``_ready()`` 함수는 노드와 노드의 모든 자식"
"이 활성 씬으로 들어갈 때 호출됩니다. **참고:** ``_ready()`` 는 생성자가 아닙"
"니다. 생성자는 ``_init()``\\ 입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:166
msgid "The role of the script"
msgstr "스크립트의 역할"

#: ../../docs/getting_started/step_by_step/scripting.rst:168
msgid ""
"A script adds behavior to a node. It is used to control how the node "
"functions as well as how it interacts with other nodes: children, parent, "
"siblings, and so on. The local scope of the script is the node. In other "
"words, the script inherits the functions provided by that node."
msgstr ""
"스크립트는 노드에 행위를 추가합니다. 스크립트는 노드가 작동하는 방식 말고도, "
"자식, 부모, 형제 등과 같은 다른 노드와 상호 작용하는 방식을 제어합니다. 스크"
"립트의 지역 범위는 노드입니다. 다시 말해, 스크립트는 노드가 제공하는 함수에 "
"속합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:179
msgid "Handling a signal"
msgstr "시그널(Signal) 다루기"

#: ../../docs/getting_started/step_by_step/scripting.rst:181
msgid ""
"Signals are \"emitted\" when some specific kind of action happens, and they "
"can be connected to any function of any script instance. Signals are used "
"mostly in GUI nodes, although other nodes have them too, and you can even "
"define custom signals in your own scripts."
msgstr ""
"시그널(Signal)은 특정 행동을 할 때 \"방출(emit)\"합니다. 그리고 시그널은 스크"
"립트 인스턴스의 모든 함수에 연결될 수 있습니다. 시그널은 대부분 GUI 노드에서 "
"사용됩니다. 하지만 다른 노드에도 시그널이 있고, 스크립트에서 맞춤 시그널을 정"
"의할 수도 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:186
msgid ""
"In this step, we'll connect the \"pressed\" signal to a custom function. "
"Forming connections is the first part and defining the custom function is "
"the second part. For the first part, Godot provides two ways to create "
"connections: through a visual interface the editor provides or through code."
msgstr ""
"이 단계에서, \"pressed\" 시그널을 맞춤 함수에 연결할 것입니다. 먼저 연결을 형"
"성하고, 그런 다음 맞춤 함수를 정의합니다. Godot에서는 연결을 만드는 두 가지 "
"방법을 제공합니다: 편집기의 시각적 인터페이스를 통해 연결하거나, 코드를 통해 "
"연결합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:191
msgid ""
"While we will use the code method for the remainder of this tutorial series, "
"let's cover how the editor interface works for future reference."
msgstr ""
"이 튜토리얼 시리즈의 나머지에서는 코드 메서드를 사용하겠습니다. 그러나 나중"
"에 이것을 보고 참조할 수 있도록 어떻게 편집기 인터페이스가 작동하는지 알아봅"
"시다."

#: ../../docs/getting_started/step_by_step/scripting.rst:194
msgid ""
"Select the Button node in the scene tree and then select the \"Node\" tab. "
"Next, make sure that you have \"Signals\" selected."
msgstr ""
"씬 트리에서 Button 노드를 고르고 \"노드(Node)\" 탭을 선택하세요. 그런 다음 "
"\"시그널(Signals)\"이 선택되어 있는지 확인하세요."

#: ../../docs/getting_started/step_by_step/scripting.rst:199
msgid ""
"If you then select \"pressed()\" under \"BaseButton\" and click the "
"\"Connect...\" button in the bottom right, you'll open up the connection "
"creation dialogue."
msgstr ""
"\"BaseButton\" 아래에 있는 \"pressed()\"를 고르고 오른쪽 아래 \"연결하기..."
"(Connect...)\" 버튼을 누릅니다. 연결 만들기 대화 상자가 열립니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:204
msgid ""
"The top of the dialogue displays a list of your scene's nodes with the "
"emitting node's name highlighted in blue. Select the \"Panel\" node here."
msgstr ""
"대화 상자 상단에서 당신의 씬에 있는 노드 목록을 보여줍니다. 그 중 방출하는 노"
"드의 이름은 파란색으로 강조되어 있습니다. 여기서 \"Panel\" 노드를 선택하세요."

#: ../../docs/getting_started/step_by_step/scripting.rst:207
msgid ""
"The bottom of the dialogue shows the name of the method that will be "
"created. By default, the method name will contain the emitting node's name "
"(\"Button\" in this case), resulting in ``_on_[EmitterNode]_[signal_name]``."
msgstr ""
"대화 상자 하단에서 만들 메서드 이름을 보여줍니다. 기본적으로 메서드 이름은 방"
"출하는 노드의 이름 (지금의 경우는 \"Button\")을 포함하고 있습니다. 즉, "
"``_on_[방출하는노드]_[시그널이름]``\\ 입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:211
msgid ""
"And that concludes the guide on how to use the visual interface. However, "
"this is a scripting tutorial, so for the sake of learning, let's dive into "
"the manual process!"
msgstr ""
"그럼 이것으로 시각적 인터페이스를 사용하는 법에 관한 강좌를 마칩니다. 하지만 "
"이것은 스크립팅 튜토리얼입니다. 학습을 위해 수작업 과정을 알아봅시다!"

#: ../../docs/getting_started/step_by_step/scripting.rst:215
msgid ""
"To accomplish this, we will introduce a function that is probably the most "
"used by Godot programmers: :ref:`Node.get_node() "
"<class_Node_method_get_node>`. This function uses paths to fetch nodes "
"anywhere in the scene, relative to the node that owns the script."
msgstr ""
"이 튜토리얼을 달성하기 위해, 우리는 Godot 프로그래머들이 가장 잘 사용하는 함"
"수를 소개하겠습니다: :ref:`Node.get_node() <class_Node_method_get_node>`. 이 "
"함수는 스크립트가 있는 노드 기준 상대적인 경로를 사용해서 씬에 있는 노드를 가"
"져옵니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:220
msgid ""
"For the sake of convenience, delete everything underneath ``extends Panel``. "
"You will fill out the rest of the script manually."
msgstr ""
"편의상 ``extend Panel`` 아래에 있는 모든 것을 지우세요. 나머지는 수동으로 채"
"울 것입니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:223
msgid ""
"Because the Button and Label are siblings under the Panel where the script "
"is attached, you can fetch the Button by typing the following underneath the "
"``_ready()`` function:"
msgstr ""
"스크립트를 붙일 때 Button과 Label은 Panel 아래에 나란히 있습니다. 따라서 "
"``_ready()`` 함수 아래에 다음과 같이 입력해서 Button을 가져올 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:240
msgid "Next, write a function which will be called when the button is pressed:"
msgstr "다음으로 버튼이 눌릴 때 호출하는 함수를 작성합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:255
#, fuzzy
msgid ""
"Finally, connect the button's \"pressed\" signal to ``_on_Button_pressed()`` "
"by using :ref:`Object.connect() <class_Object_method_connect>`."
msgstr ""
"마지막으로 버튼의 \"pressed\" 시그널을 ``_ready()``\\ 에 연결하도록 :ref:"
"`Object.connect() <class_Object_method_connect>`\\ 를 사용합니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:271
msgid "The final script should look like this:"
msgstr "최종 스크립트는 다음과 같아야 합니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:304
msgid ""
"Run the scene and press the button. You should get the following result:"
msgstr "씬을 실행하고 버튼을 누르면 다음과 같은 결과를 얻을 수 있습니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:308
msgid "Why, hello there! Congratulations on scripting your first scene."
msgstr "어머, 안녕하세요! 첫번째 씬 스크립팅을 축하해요."

#: ../../docs/getting_started/step_by_step/scripting.rst:312
msgid ""
"A common misunderstanding regarding this tutorial is how ``get_node(path)`` "
"works. For a given node, ``get_node(path)`` searches its immediate children. "
"In the above code, this means that Button must be a child of Panel. If "
"Button were instead a child of Label, the code to obtain it would be:"
msgstr ""
"이 튜토리얼에 관한 일반적인 오해로 ``get_node(path)``\\ 가 작동하는 방식이 있"
"습니다. 주어진 노드는 ``get_node(path)``\\ 가 바로 아래의 자식을 찾습니다. "
"위 코드에서 Button은 Panel의 자식이라는 것이죠. 만일 버튼이 Panel이 아니라 "
"Label의 자식이었다면, 나오는 코드는 다음과 같을 것입니다:"

#: ../../docs/getting_started/step_by_step/scripting.rst:330
msgid "Also, remember that nodes are referenced by name, not by type."
msgstr "또한 노드는 이름으로 참조됩니다. 유형이 아닙니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:334
#, fuzzy
msgid ""
"The 'advanced' panel of the connect dialogue is for binding specific values "
"to the connected function's parameters. You can add and remove values of "
"different types."
msgstr ""
"연결 대화 상자의 오른쪽 패널은 특정 값을 연결된 함수의 매개변수에 묶기 위한 "
"것입니다. 다른 유형의 값을 추가하거나 제거할 수 있습니다."

#: ../../docs/getting_started/step_by_step/scripting.rst:338
msgid ""
"The code approach also enables this with a 4th ``Array`` parameter that is "
"empty by default. Feel free to read up on the ``Object.connect`` method for "
"more information."
msgstr ""
"코드에서도 기본적으로 비어 있는 4번째 ``배열(Array)`` 매개변수를 사용하면 가"
"능합니다. 더 많은 정보를 원한다면 언제든지 ``Object.connect`` 메서드를 읽어보"
"세요."
