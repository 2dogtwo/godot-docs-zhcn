# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-06 14:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:4
msgid "Design a title screen"
msgstr "타이틀 화면 만들기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:6
msgid ""
"In the next two tutorials, you will build two responsive UI (user interface) "
"scenes step-by-step using the engine's UI system:"
msgstr ""
"이 다음 두 개의 튜토리얼에서, 당신은 엔진의 UI 시스템을 사용해서 두 개의 반"
"응 형 UI (사용자 인터페이스) 씬을 단계별로 만들게 될 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:9
msgid "A main menu."
msgstr "메인 메뉴."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:10
msgid "A game UI with a health bar, energy bar, bomb and money counters."
msgstr "체력 막대, 에너지 막대, 폭탄과 돈 개수 카운터가 있는 게임 UI."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:12
msgid ""
"You will learn how to design game UIs efficiently, and how to use Godot's "
"Control nodes. This page focuses on the visual part: everything you do from "
"the editor. To learn how to code a life bar, read :doc:`ui_code_a_life_bar`."
msgstr ""
"게임 UI를 효율적으로 설계하는 법과 Godot의 Control 노드를 사용하는 방법에 대"
"해 배울 것입니다. 이 페이지에서는 시각적인 부분에 중점을 두겠습니다: 편집기에"
"서 모두 작업할 수 있습니다. 체력 막대를 코딩하는 법에 대해 알고 싶다면 :doc:"
"`ui_code_a_life_bar`\\ 를 읽어주세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:20
msgid "The GUI you're going to create."
msgstr "앞으로 만들게 될 GUI."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:22
msgid ""
"Download the project files: :download:`ui_main_menu_design.zip <files/"
"ui_main_menu_design.zip>` and extract the archive. Import the ``start/`` "
"project in Godot to follow this tutorial. The ``end/`` folder contains the "
"final result. You'll find all the sprites in the ``start/assets/main_menu`` "
"folder."
msgstr ""
"프로젝트 파일을 내려받으세요: :download:`ui_main_menu_design.zip <files/"
"ui_main_menu_design.zip>` 그리고 압축을 푸세요. 이 튜토리얼을 따라오려면 "
"Godot에 ``start/`` 프로젝트를 가져오세요. ``end/`` 폴더는 결과물이 들어있습니"
"다. 모든 스프라이트는 ``start/assets/main_menu`` 폴더에서 찾으실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:30
#, fuzzy
msgid ""
"Read the :doc:`ui_introduction_to_the_ui_system` first to learn how Godot's "
"UI system works."
msgstr ""
"godot의 UI 시스템이 어떻게 작동하는지 알아보려면 :"
"doc:'ui_introduction_to_the_ui_system'를 먼저 읽어보세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:34
msgid "How to design your game UI"
msgstr "게임 UI를 디자인하는 방법"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:36
msgid ""
"To design a good UI, you want to come up with a rough mockup first: a plain "
"drawing version that focuses on the placement of your UI components, their "
"size, and user interaction. Pen and paper is all you need. You shouldn't use "
"fancy and final graphics at this stage. Then, you only need simple "
"placeholder sprites and you're good to jump into Godot. You want to make "
"sure the players can find their way around the interface using those "
"placeholders."
msgstr ""
"좋은 UI를 디자인하기 위해, 당신은 대략적인 모형을 먼저 생각해내고 싶습니다: "
"UI 구성 요소들의 위치 및 크기, 사용자 상호작용에 초점을 둔 평범한 그림으로 말"
"입니다. 펜과 종이로 할 수 있습니다. 이 부분에서는 화려한 최종 그래픽을 사용하"
"지 않는 것이 좋습니다. 그러므로, 당신은 간단한 자리 표시 스프라이트만 가지고 "
"Godot로 뛰어드는 겁니다. 이것을 사용하여 플레이어가 인터페이스 주변에서 자신"
"의 길을 찾을 수 있도록 확인하려고 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:46
msgid "The UI's rough plan or mockup"
msgstr "UI의 대략적인 계획이나 모형"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:48
msgid ""
"Placeholder doesn't have to mean ugly, but you should keep the graphics "
"simple and clean. Avoid special effects, animation, and detailed "
"illustration before you have players playtest your UI. Otherwise:"
msgstr ""
"자리 표시자가 꼭 지저분할 필요는 없지만, 그래픽을 간단하고 깨끗하게 유지해야 "
"합니다. 당신이 UI를 실행 및 테스트 하기 전까진 특수 효과나, 애니메이션, 그리"
"고 구체적인 삽화는 피하세요. 그렇지 않으면:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:52
msgid ""
"The graphics might skew the players' perception of the experience and you'll "
"miss out on valuable feedback."
msgstr ""
"그래픽이 플레이어의 경험에 대한 인식을 왜곡하여, 소중한 피드백을 놓치게 될 것"
"입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:54
msgid "If the User Experience doesn't work, you'll have to redo some sprites."
msgstr ""
"사용자 경험이 잘 이루어지지 못하면, 일부 스프라이트는 다시 작업해야 할 것입니"
"다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:58
msgid ""
"Always try to make the interface work with simple text and boxes first. It's "
"easy to replace the textures later. Professional UX designers often work "
"with plain outlines and boxes in greyscale. When you take colors and fancy "
"visuals away, it's a lot easier to size and place UI elements properly. It "
"helps you refine the design foundation you'll build upon."
msgstr ""
"항상 먼저 간단한 문자와 상자로 인터페이스 작업을 해보세요. 나중에 텍스처를 쉽"
"게 교체할 수 있습니다. 전문적인 UX 디자이너들은 작업을 흑백으로 된 선과 상자"
"만으로 작업하기도 합니다. 당신이 색깔이나 멋진 비주얼을 멀리할 때, UI 요소들"
"을 적절하게 배치하고 크기를 조정하기가 훨씬 쉬워집니다. 이를 기초로 하여 디자"
"인 기반을 수정할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:65
msgid "There are two ways to design your UI in Godot. You can:"
msgstr "Godot에는 UI를 디자인하는 두 가지 방법이 있습니다. 먼저 당신은:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:67
msgid ""
"Build it all in a single scene, and eventually save some branches as "
"reusable scenes."
msgstr ""
"하나의 씬에서 전부 만들어 버리고, 다시 사용할 수 있는 씬으로 분기로 만들어 저"
"장할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:69
msgid ""
"Build template scenes for reusable components and create specific components "
"that inherit from your base scenes."
msgstr ""
"다시 사용할 수 있는 구성 요소를 위한 템플릿 씬을 만들고, 기본 씬에서 상속되"
"는 특정 구성 요소를 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:72
#, fuzzy
msgid ""
"We will use the first approach, because the first version of your UI may not "
"work as well as you'd like. You're likely to throw parts away and redesign "
"components as you go. When you're sure everything works, it's easy to make "
"some parts reusable, as you'll see below."
msgstr ""
"우리는 첫 번째 접근 법을 사용할 것입니다, 왜냐하면 처음으로 만든 UI는 당신이 "
"원하는 대로 잘 작동하지 않을 수 있기 때문입니다. 아마 당신은 일부분을 버리고 "
"구성 요소를 다시 디자인할 것입니다. 모든 것이 작동된다고 확신할 때, 아래에 보"
"시는 바와 같이 일부분을 재사용 가능하게 만들기는 쉽습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:79
msgid ""
"The files you'll find in Godot. The graphics look cleaner than on the rough "
"design, but they're still placeholders."
msgstr ""
"Godot에서 찾을 수 있는 파일. 그래픽은 대략적인 디자인보다 더 깔끔해 보이지"
"만, 여전히 자리 표시자입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:83
msgid "Design the main menu"
msgstr "메인 메뉴 디자인하기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:85
msgid ""
"Before we jump into the editor, we want to plan how we'll nest containers "
"based on our mockup image."
msgstr ""
"편집기로 가기 전에, 우리는 모형 이미지를 통해 어떻게 컨테이너를 중첩할 지 계"
"획을 세워야 됩니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:89
#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:282
msgid "Break down the UI mockup"
msgstr "UI 모형 파헤치기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:91
msgid "Here are my three rules of thumb to find the right containers:"
msgstr "적당한 컨테이너를 찾는 저의 세 가지 규칙이 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:93
msgid ""
"Break down the UI into nested boxes, from the largest that contains "
"everything, to the smallest ones, that encompass one widget, like a bar with "
"its label, a panel or a button."
msgstr ""
"UI를 중첩된 상자로 분류해봅시다. 모두를 포괄하는 가장 큰 상자에서, 가장 작은 "
"상자까지 말이죠. 라벨이 있는 막대, 패널, 버튼과 같은, 하나의 위젯도 이 상자"
"에 포함됩니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:96
msgid "If there's some padding around an area, use a ``MarginContainer``."
msgstr "영역 주변에 여백을 만들려면, ``MarginContainer``\\ 를 사용하세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:97
msgid ""
"If the elements are arranged in rows or columns, use an ``HBoxContainer`` or "
"``VBoxContainer``."
msgstr ""
"요소를 행 또는 열로 배열한다면, ``HBoxContainer`` 또는 ``VBoxContainer``\\ "
"를 사용하세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:100
msgid ""
"These rules are enough to get us started, and work well for simple "
"interfaces."
msgstr ""
"이 규칙들로 충분히 우리는 시작할 수 있고, 간단한 인터페이스 설계도 잘 할 수 "
"있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:103
msgid ""
"For the main menu, the largest box is the entire game window. There's "
"padding between the edges of the window and the first components: this "
"should be a ``MarginContainer``. Then, the screen is split into two columns, "
"so we'll use an ``HBoxContainer``. In the left column, we'll manage the rows "
"with a ``VBoxContainer``. And in the right column, we'll center the "
"illustration with a ``CenterContainer``."
msgstr ""
"메인 메뉴에서, 가장 큰 상자는 전체 게임 창입니다. 창의 모서리와 첫 번째 구성 "
"요소 사이에는 여백이 있습니다: 이들은 ``MarginContainer`` 가 되야합니다. 그 "
"후, 화면은 두 열로 나뉘기에, ``HBoxContainer`` 를 사용합니다. 왼쪽 열에서는, "
"우리는 ``VBoxContainer`` 로 그 행을 관리할 것입니다. 그리고 오른쪽 열에서, "
"``CenterContainer`` 로 그림을 중앙에 위치하게 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:112
msgid "Interface building blocks, broken down using the three rules of thumb."
msgstr "블록으로 만든 인터페이스. 세 가지 규칙을 사용하여 분류했습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:116
msgid ""
"Containers adapt to the window's resolution and width-to-height ratio. "
"Although we could place UI elements by hand, containers are faster, more "
"precise, and **responsive**."
msgstr ""
"컨테이너는 창의 해상도와 가로-세로 비율에 맞춰 조정됩니다. 비록 우리가 UI 요"
"소들을 손으로 놓을 순 있지만, 컨테이너는 더 빠르고 더 정확하며, **반응이 빠릅"
"니다**."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:121
msgid "Prepare the Main Menu scene"
msgstr "메인 메뉴 씬 준비하기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:123
msgid ""
"Let's create the main menu. We'll build it in a single scene. To create an "
"empty scene, click on **Scene > New Scene**."
msgstr ""
"메인 메뉴를 만들어봅시다. 하나의 씬에 메뉴를 만들 것입니다. 비어있는 씬을 만"
"들려면, **씬(Scene) > 새 씬(New Scene)**\\ 을 클릭하세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:126
#, fuzzy
msgid ""
"We have to add a root node before we can save the scene. Your UI's root "
"should be the outermost container or element. In this case it's a "
"``MarginContainer``. ``MarginContainer`` is a good starting point for most "
"interfaces, as you often need padding around the UI. Press :kbd:`Ctrl + S` (:"
"kbd:`Cmd + S` on macOS) to save the scene to the disk. Name it *MainMenu*."
msgstr ""
"씬을 저장하기 전에 루트 노드를 추가해야 합니다. UI의 루트 노드는 가장 바깥쪽"
"의 컨테이너나 요소가 되어야 합니다. 이 경우에는 ``MarginContainer`` 가 되어야"
"겠군요. ``MarginContainer`` 는 대부분의 인터페이스에 있어 좋은 출발점이 되는 "
"것이, UI 주변에 여백을 메꾸어야 하기 때문입니다. ``Control+S`` 를 눌러 씬을 "
"저장합니다. *MainMenu* 로 이름을 짓습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:132
msgid ""
"Select the ``MarginContainer`` again, and head to the inspector to define "
"the margins' size. Scroll down the ``Control`` class, to the ``Custom "
"Constants`` section. Unfold it. Set the margins as such:"
msgstr ""
"``MarginContainer`` 를 다시 선택하고, 인스펙터(Inspecter)로 가서 마진의 크기"
"를 정의하세요. ``Control`` 클래스에서, ``Custom Constants`` 섹션으로 창을 내"
"려보세요. 그것을 펼치세요. 다음과 같이 마진을 설정하세요:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:136
msgid "Margin Right: *120*"
msgstr "Margin Right: *120*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:137
msgid "Margin Top: *80*"
msgstr "Margin Top: *80*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:138
msgid "Margin Left: *120*"
msgstr "Margin Left: *120*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:139
msgid "Margin Bottom: *80*"
msgstr "Margin Bottom: *80*"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:141
msgid ""
"We want the container to fit the window. In the toolbar above the Viewport, "
"open the **Layout** menu and select the last option, **Full Rect**."
msgstr ""
"컨테이너가 창에 맞도록 하고 싶습니다. 뷰포트 위의 툴바에서, **레이아웃"
"(Layout)** 메뉴를 열고, 마지막 설정을 선택하세요, **사각형 전체(Full Rect)**."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:145
msgid "Add the UI sprites"
msgstr "UI 스프라이트 추가하기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:147
msgid ""
"Select the ``MarginContainer``, and create the UI elements as "
"``TextureRect`` nodes. We need:"
msgstr ""
"``MarginContainer`` 를 선택하고, ``TextureRect`` 노드와 같은 UI 요소들을 만드"
"세요. 우리는 이것들이 필요합니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:150
msgid "the title or logo,"
msgstr "타이틀이나 로고,"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:151
msgid "the three text options as individual nodes,"
msgstr "세 개의 텍스트 설정. 개별의 노드로 됨,"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:152
msgid "the version note,"
msgstr "버전 노트,"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:153
#, fuzzy
msgid "and the main menu's illustration."
msgstr "그리고 메인 메뉴의 삽화."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:155
#, fuzzy
msgid ""
"Click the **Add Node** button or press :kbd:`Ctrl + A` (:kbd:`Cmd + A` on "
"macOS) on your keyboard. Start to type ``TextureRect`` to find the "
"corresponding node and press enter. With the new node selected, press :kbd:"
"`Ctrl + D` (:kbd:`Cmd + D` on macOS) five times to create five extra "
"``TextureRect`` instances."
msgstr ""
"**노드 추가(Add Node)** 버튼을 누르거나 키보드의 ``Meta+A``\\ 를 누르세요. "
"``TextureRect``\\ 를 검색하고 일치하는 노드를 찾아서 엔터 키를 누르세요. 새로"
"운 노드를 선택하고, ``Meta+D``\\ 를 5 번 눌러 다섯 개의 ``TextureRect`` 인스"
"턴스를 만드세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:160
msgid ""
"Click each of the nodes to select it. In the inspector, find the **Texture** "
"property and click **[empty] > Load**. A file browser opens and lets you "
"pick a sprite to load into the texture slot."
msgstr ""
"각 노드를 선택하세요. 인스펙터(Inspecter)에서 ``Texture`` 속성을 찾고, ``[비"
"었음]([empty])`` -> ``불러오기(Load)``\\ 를 클릭하세요. 파일 브라우저가 열리"
"면 텍스처 슬롯 안에 있는 스프라이트를 불러올 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:166
msgid "The file browser lets you find and load textures."
msgstr "파일 브라우저에서 불러올 텍스처를 찾을 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:168
msgid ""
"Repeat the operation for all ``TextureRect`` nodes. You should have the "
"logo, the illustration, the three menu options and the version note, each as "
"a separate node. Then, double click on each of the nodes in the Scene tab to "
"rename them. Nothing has been placed in containers yet so this should look "
"messy."
msgstr ""
"이 작업을 나머지 ``TextureRect`` 노드에서 반복하세요. 그러고 나면 각 노드마"
"다 로고, 삽화, 세 개의 메뉴 설정 그리고 버전 노트를 갖고 있을 것입니다. 그 "
"후, 씬 탭에서 각 노드를 더블 클릭하고 이름을 바꾸세요. 컨테이너에 아직 아무 "
"노드도 놓지 않아서 지금은 분명히 노드가 어질러져 있을 것입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:176
msgid "The six nodes with textures loaded."
msgstr "텍스처를 불러온 6 개의 노드."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:180
msgid ""
"If you want to support localization in your game, use ``Labels`` for menu "
"options instead of ``TextureRect``."
msgstr ""
"게임에 현지화를 지원하고 싶다면, 메뉴 설정에 ``TextureRect`` 대신에 "
"``Labels`` 을 사용하세요."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:184
msgid "Add containers to place UI elements automatically"
msgstr "컨테이너를 추가하여 UI 요소들을 자동으로 놓기"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:186
#, fuzzy
msgid ""
"Our main menu has some margin around the edges of the screen. It is split in "
"two parts: on the left, you have the logo and the menu options. On the "
"right, you have the characters. We can use one of two containers to achieve "
"this: ``HSplitContainer`` or ``HBoxContainer``. Split containers split the "
"area into two: a left and a right side or a top and a bottom side. They also "
"allow the user to resize the left and right areas using an interactive bar. "
"On the other hand, ``HBoxContainer`` just splits itself into as many columns "
"as it has children. Although you can deactivate the split container's resize "
"behavior, I recommend to favor box containers."
msgstr ""
"우리의 메인 메뉴는 화면의 가장자리에 여백을 가지고 있습니다. 메뉴는 두 부분으"
"로 나뉩니다: 왼쪽은, 로고와 메뉴 설정이 있습니다. 오른쪽에는, 캐릭터들이 있습"
"니다. 이 작업을 위해 두 개의 컨테이너 중 하나를 사용할 수 있습니다: "
"``HSplitContainer`` 아니면 ``HBoxContainer`` 입니다. 분할 컨테이너는 영역을 "
"두 개로 나눕니다: 왼쪽과 오른쪽 아니면 위쪽과 아래쪽으로 말입니다. 또한 조절 "
"막대를 사용하여 왼쪽과 오른쪽 영역의 크기를 조절할 수 있습니다. 반면에, "
"``HBoxContainer`` 는 단지 스스로를 자식의 수 만큼으로 자신을 나눕니다. 비록 "
"분할 컨테이너가 크기 조절 행동을 비활성화 할 순 있지만, 저는 박스 컨테이너를 "
"추천합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:197
msgid ""
"Select the ``MarginContainer`` and add an ``HBoxContainer``. Then, we need "
"two containers as children of our ``HBoxContainer``: a ``VBoxContainer`` for "
"the menu options on the left, and a ``CenterContainer`` for the illustration "
"on the right."
msgstr ""
"``MarginContainer`` 를 선택하고 ``HBoxContainer`` 를 추가합니다. 그런 다음, "
"우리는 ``HBoxContainer`` 의 자식으로 두 개의 컨테이너가 필요합니다: 메뉴 설정"
"에 쓸 ``VBoxContainer`` 왼쪽에, 그리고 삽화를 넣을 ``CenterContainer`` 가 오"
"른쪽에 있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:204
msgid ""
"You should have four nested containers and the TextureRect nodes sitting "
"aside from it."
msgstr ""
"4 개의 중첩된 컨테이너가 있고, TextureRect 노드가 컨테이너 옆에 있어야 합니"
"다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:207
msgid ""
"In the node tree, select all the ``TextureRect`` nodes that should go on the "
"left side: the logo, the menu options (Continue, NewGame, Options), and the "
"version note. Drag and drop them into the ``VBoxContainer``. The nodes "
"should position automatically."
msgstr ""
"노드 트리에서, 왼쪽 측면에 있어야 할 모든 ``TextureRect`` 노드를 선택하세요: "
"로고, 메뉴 설정 (Continue, NewGame, Options), 그리고 버전 노트. "
"``VBoxContainer``\\ 로 드래그 앤 드롭하세요. 노드는 자동으로 위치가 맞춰질 것"
"입다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:214
msgid "Containers automatically place and resize textures"
msgstr "컨테이너가 자동으로 텍스처를 위치시키고 크기를 조정합니다"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:216
msgid "We're left with two problems to solve:"
msgstr "우리는 해결해야 할 두 가지 문제가 남았습니다:"

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:218
msgid "The characters on the right aren't centered."
msgstr "오른쪽의 Characters가 중앙이 아닙니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:219
msgid "There's no space between the logo and the other UI elements."
msgstr "로고와 다른 UI 요소들 사이에 공간이 없습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:221
msgid ""
"To center the characters on the right, first select the ``CenterContainer``. "
"Then in the Inspector, scroll down to the **Size Flags** category and click "
"on the field to the right of the **Vertical** property, and check **Expand** "
"in addition to **Fill**. Do the same for the **Horizontal** property. This "
"makes the ``CenterContainer`` expand into all available space while "
"respecting its neighbour ``VBoxContainer``. Finally, drag and drop the "
"Characters node into the ``CenterContainer``. The Characters element will "
"center automatically."
msgstr ""
"오른쪽에 캐릭터가 중앙에 오게 하려면, 먼저 ``CenterContainer``\\ 를 선택하세"
"요. 그 후 인스펙터(Inspecter)에서, **Size Flags** 카테고리로 내려가서 "
"**Vertical** 속성의 오른쪽에 있는 영역을 클릭하세요. 거기에서 **Expand**\\ "
"와 **Fill**\\ 을 체크하세요. **Horizontal** 속성에도 똑같이 적용하세요. 이렇"
"게 하면 ``CenterContainer``\\ 는 ``VBoxContainer``\\ 의 영역 안에서 사용 가능"
"한 영역 전체로 펼쳐집니다. 마지막으로 Characters 노드를 ``CenterContainer``"
"\\ 에 드래그 앤 드롭 하세요. Characters의 요소는 자동으로 중앙에 자리 잡을 것"
"입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:232
msgid ""
"The character node centers inside the right half of the screen as soon as "
"you place it inside the CenterContainer."
msgstr ""
"Characers 노드는 CenterContainer에 배치하자마자 화면의 우측 중앙에 위치하게 "
"됩니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:235
#, fuzzy
msgid ""
"To space out the menu options and the logo on the left, we'll use one final "
"container and its size flags. Select the ``VBoxContainer`` and press :kbd:"
"`Ctrl + A` (:kbd:`Cmd + A` on macOS) to add a new node inside it. Add a "
"second ``VBoxContainer`` and name it *MenuOptions*. Select all three menu "
"options, ``Continue``, ``NewGame`` and ``Options``, and drag and drop them "
"inside the new ``VBoxContainer``. The UI's layout should barely change, if "
"at all."
msgstr ""
"왼쪽에 있는 메뉴 설정과 로고에 공간을 내려면, 마지막 컨테이너와 그것의 Size "
"Flags를 사용해야 합니다. ``VBoxContainer``\\ 를 선택하고, ``Meta+A``\\ 를 눌"
"러 컨테이너 안에 새 노드를 추가하세요. 두 번째 ``VBoxContainer``\\ 가 추가되"
"면 \"MenuOptions\"이라고 이름을 짓습니다. 모든 세 개의 메뉴 설정, "
"``Continue``, ``NewGame`` 그리고 ``Options``\\ 을 선택하고, 이 노드들을 새로 "
"만든 ``VBoxContainer`` 안에 드래그 앤 드롭합니다. UI의 레이아웃은 거의 변경되"
"지 않아야 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:245
msgid ""
"Place the new container between the other two nodes to retain the UI's "
"layout."
msgstr ""
"UI의 레이아웃은 유지하기 위해 두 개의 노드 사이에 새 컨테이너를 놓습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:248
msgid ""
"Now we grouped the menu options together, we can tell their container to "
"expand to take as much vertical space as possible. Select the "
"``MenuOptions`` node. In the Inspector, scroll down to the **Size Flags** "
"category. Click on the field to the right of the **Vertical** property, and "
"check **Expand** in addition to **Fill**. The container expands to take all "
"the available vertical space while respecting its neighbors, the ``Logo`` "
"and ``Version`` elements."
msgstr ""
"이제 메뉴 설정들을 묶었으므로, 메뉴 설정의 컨테이너의 수직 영역을 가능한 많"
"이 펼쳐야 합니다. ``MenuOptions`` 노드를 선택하세요. 인스펙터(Inspecter)에서 "
"``Size Flags`` 카테고리로 내리세요. ``Vertical`` 속성의 오른쪽 영역을 클릭하"
"고, **Expand**\\ 와 추가로 **Fill**\\ 을 체크하세요. 컨테이너는 사용 가능한 "
"수직 공간 전체를 차지하도록 펼쳐집니다. 하지만 주변 노드, ``Logo``\\ 와 "
"``Version`` 요소들은 차지하지 않습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:256
msgid ""
"To center the nodes in the ``VBoxContainer``, scroll to the top of the "
"Inspector and change the **Alignment** property to **Center**."
msgstr ""
"``VBoxContainer``\\ 에서 노드가 중앙에 있게 하려면, 인스펙터(Inspecter)의 맨 "
"위로 가서 **Alignment** 속성을 **Center**\\ 로 바꿉니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:261
msgid "The menu options should center vertically in the UI's left column."
msgstr "메뉴 설정은 UI의 왼쪽 열에서 중앙에 수직으로 있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:263
msgid ""
"To wrap things up, let's add some separation between the menu options. "
"Expand the **Custom Constants** category below **Size Flags**, and click the "
"field next to the **Separation** parameter. Set it to 30. Once you press "
"enter, the **Separation** property becomes active and Godot adds 30 pixels "
"between menu options."
msgstr ""
"마지막으로, 메뉴 설정 사이에 분리 영역을 추가합시다. **Size Flags** 아래의 "
"**Custom Constants**\\ 를 펼치고, **Separation** 변수 옆에 있는 영역을 클릭하"
"세요. 값은 30으로 설정하세요. 엔터 키를 누르면, **Separation** 속성이 켜지고 "
"Godot는 메뉴 설정 사이에 30 픽셀을 추가합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:271
msgid "The final interface."
msgstr "최종 인터페이스."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:273
msgid ""
"Without a single line of code, we have a precise and responsive main menu."
msgstr ""
"코드 한 줄도 안 쓰고, 우리는 정확하고 반응하는 메인 메뉴를 갖게 되었습니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:276
msgid ""
"Congratulations for getting there! You can download the final menu :download:"
"`ui_main_menu_design.zip <files/ui_main_menu_design.zip>` to compare with "
"your own. In the next tutorial, you'll create a Game User Interface with "
"bars and item counters."
msgstr ""
"여기까지 오신 것에 축하합니다! 당신의 것과 비교하기 위한 :download:"
"`ui_main_menu_design.zip <files/ui_main_menu_design.zip>`\\ 을 내려받으실 수 "
"있습니다. 다음 튜토리얼에서는, 당신은 막대와 아이템 수 카운터가 있는 게임 사"
"용자 인터페이스를 만들 것입니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:284
msgid ""
"A responsive User Interface is all about making sure our UIs scale well on "
"all screen types. TV screens and computer displays have different sizes and "
"ratios. In Godot, we use containers to control the position and the size of "
"UI elements."
msgstr ""
"반응 형 사용자 인터페이스는 UI가 모든 화면 유형에 크기를 맞게 조정하도록 만드"
"는 것을 의미합니다.TV 화면과 컴퓨터는 다른 크기와 비율을 갖습니다. Godot에"
"서, 우리는 컨테이너를 사용하여 UI 요소들의 크기와 위치를 제어합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:289
#, fuzzy
msgid ""
"The order in which you nest matters. To see if your UI adapts nicely to "
"different screen ratios, select the root node, press :kbd:`Q` to activate "
"the Select Mode, select the container and click and drag on one of the "
"container's corners to resize it. The UI components should flow inside of it."
msgstr ""
"중첩한 순서가 중요합니다. UI가 다른 화면 비율에 휼륭하게 적응하는지 보기 위"
"해, 루트 노드를 선택하고, Q키를 눌러 선택 모드를 활성화 한 뒤, 컨테이너를 선"
"택하고 컨테이너의 모서리를 클릭하고 드래그 하여 크기를 바꿔보세요. UI 구성 요"
"소들이 내부에 있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:295
msgid ""
"You'll notice that although containers move sprites around, they don't scale "
"them. This is normal. We want the UI system to handle different screen "
"ratios, but we also need the entire game to adapt to different screen "
"resolutions. To do this, Godot scales the entire window up and down."
msgstr ""
"당신은 비록 컨테이너가 스프라이트를 움직이게 하지만, 크기를 조절하지 않는 것"
"을 봤을 것입니다. 이것은 정상입니다. 우리는 UI 시스템이 다른 화면 비율을 처리"
"하기를 원하지만, 또한 게임 전체가 다른 화면 해상도에 적응해야 합니다. 이를 위"
"해, Godot는 창 전체를 위 아래로 크기를 조절합니다."

#: ../../docs/getting_started/step_by_step/ui_main_menu.rst:301
msgid ""
"You can change the scale mode in the project settings: click **Project > "
"Project Settings** in the top menu. In the window's left column, look for "
"the **Display** category. Click on the **Window** sub-category. On the right "
"side of the window, you'll find a **Stretch** section. The three settings, "
"**Mode**, **Aspect**, and **Shrink**, control the screen size. For more "
"information, see :ref:`doc_multiple_resolutions`."
msgstr ""
"프로젝트 설정에서 크기 조절 모드를 바꿀 수 있습니다: 상단 메뉴에서 **프로젝트"
"(Project) > 프로젝트 설정(Project Settings)**\\ 을 클릭하세요. 창의 왼쪽 열에"
"서 **Display** 카테고리를 보세요. **Window** 하위 카테고리를 클릭하세요. 창"
"의 오른쪽에서, **Stretch** 섹션을 확인할 수 있습니다. 화면 크기를 조절하는 "
"세 가지 설정으로, **Mode**, **Aspect**, 그리고 **Shrink**\\ 가 있습니다. 더 "
"자세한 정보는 :ref:`doc_multiple_resolutions`\\ 을 참고해주세요."
