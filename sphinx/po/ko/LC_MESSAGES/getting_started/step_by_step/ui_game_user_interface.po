# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-23 11:04+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:4
msgid "Design the GUI"
msgstr "GUI 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:6
msgid ""
"Now that you've nailed the basics, we're going to see how to build a Game "
"User Interface (GUI) with reusable UI components: a life bar, an energy bar, "
"and bomb and rupee counters. By the end of this tutorial, you'll have a game "
"GUI, ready to control with GDscript or VisualScript:"
msgstr ""
"이제 기초를 갖췄으니, 재 사용 가능한 UI 구성 요소를 가지고 어떻게 게임 사용"
"자 인터페이스 (GUI) 를 만드는지 알아보겠습니다: UI 구성 요소는 체력 막대, 에"
"너지 막대, 그리고 폭탄과 루피 카운터입니다. 이 튜토리얼이 끝나면, GDscript와 "
"VisualScript를 가지고 제어할 수 있는 게임 GUI를 가지게 될 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:13
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:616
msgid "The final result"
msgstr "최종 결과물"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:15
msgid "You'll also learn to:"
msgstr "또한 배울 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:17
msgid "Create flexible UI components"
msgstr "유연한 UI 구성 요소 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:18
msgid "Use scene inheritance"
msgstr "씬 상속 사용하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:19
msgid "Build a complex UI"
msgstr "복잡한 UI 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:21
msgid ""
"Download the project files: :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` and extract the archive. Import the `start/` project in "
"Godot to follow this tutorial. The `end/` folder contains the final result."
msgstr ""
"프로젝트 파일을 다운로드하세요:  :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` 그리고 압축을 푸세요. 이 튜토리얼을 따라오시려면 `start/"
"` 프로젝트를 고도로 가져오세요. `end/` 폴더는 최종 결과물을 가지고 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:25
msgid ""
"You can watch this tutorial as a `video on Youtube <https://www.youtube.com/"
"watch?v=y1E_y9AIqow>`_."
msgstr ""
"이 튜토리얼을 `유튜브에서 <https://www.youtube.com/watch?v=y1E_y9AIqow>`_ 보"
"실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:28
msgid "Breaking down the UI"
msgstr "UI 파헤치기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:30
msgid ""
"Let's break down the final UI and plan the containers we'll use. As in the :"
"doc:`ui_main_menu`, it starts with a ``MarginContainer``. Then, we can see "
"up to three columns:"
msgstr ""
"최종 UI를 분해하고 우리가 사용할 컨테이너를 설계해봅시다. :doc:"
"`ui_main_menu` 에서 하던 것처럼, ``MarginContainer`` 로 시작합니다. 그런 뒤, "
"세 개의 열을 보실 수 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:34
msgid "The life and energy counters on the left"
msgstr "왼쪽에서 체력과 에너지 카운터"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:35
msgid "The life and energy bars"
msgstr "체력과 에너지 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:36
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:42
msgid "The bomb and rupee counters on the right"
msgstr "오른쪽에서 폭탄과 루피 카운터"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:38
msgid ""
"But the bar's label and the gauge are two parts of the same UI element. If "
"we think of them this way, we're left with two columns:"
msgstr ""
"하지만 막대의 라벨과 게이지는 같은 UI 요소입니다. 이렇게 생각한다면, 우리는 "
"두 개의 열만 남습니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:41
msgid "The life and energy bars on the left"
msgstr "왼쪽에 체력과 에너지 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:44
msgid ""
"This makes it easier to nest containers: we have some margins around the "
"border of the screen using a ``MarginContainer``, followed by an "
"``HBoxContainer`` to manage our two columns. The two bars stack on top of "
"one another inside a ``VBoxContainer``. And we'll need a last "
"``HBoxContainer`` in the right column to place the bomb and rupee counters "
"side-by-side."
msgstr ""
"이것은 컨테이너를 중첩시키기 더 쉽게 만듭니다: 우리는 ``MarginContainer`` 로 "
"화면 가장자리에 여백을 갖습니다, 그런 뒤 ``HBoxContainer`` 로 두 개의 열을 만"
"드는 것입니다. 두 개의 막대는 ``VBoxContainer`` 안에 이 층으로 쌓여있습니다. "
"그리고 오른쪽 열에 마지막 ``HBoxContainer`` 로 폭탄과 루피 카운터를 나란히 위"
"치시킵니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:53
msgid "We get a clean UI layout with only 4 containers"
msgstr "4개의 컨테이너로 말끔한 UI 레이아웃을 얻었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:55
msgid ""
"We will need extra containers inside the individual UI components, but this "
"gives us the main GUI scene's structure. With this plan in place, we can "
"jump into Godot and create our GUI."
msgstr ""
"아직 각 UI 구성 요소 안에 추가 컨테이너가 필요하지만, 이걸로 우리에게 주요 "
"GUI 씬의 구조를 제공합니다. 계획은 여기 두고, 고도로 들어가서 우리의 GUI를 만"
"듭시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:60
msgid "Create the base GUI"
msgstr "기초 GUI 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:62
msgid ""
"There are two possible approaches to the GUI: we can design elements in "
"separate scenes and put them together, or prototype everything in a single "
"scene and break it down later. I recommend working with a single scene as "
"you can play with your UI's placement and proportions faster this way. Once "
"it looks good, you can save entire sections of the node tree as reusable sub-"
"scenes. We'll do that in a moment."
msgstr ""
"GUI에 두 가지 가능한 접근 방법이 있습니다: 우리는 각기 다른 씬들로 요소들을 "
"만든 후 그들을 하나로 뭉치는 것입니다, 아니면 하나의 씬에 원본 모든 것을 넣"
"고 나중에 분해하는 것입니다. 저는 하나의 씬에서 작업하길 추천하는데 이 방법으"
"로 당신은 UI 배치와 크기를 더 빠르게 할 수 있기 때문입니다. 일단 보기 좋다"
"면, 당신은 노드 트리를 재 사용 가능한 하위 씬으로 저장할 수 있습니다. 그건 나"
"중에 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:69
msgid "For now, let's start with a few containers."
msgstr "일단 지금은, 몇 개의 컨테이너로 시작합시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:71
msgid ""
"Create a new scene and add a ``MarginContainer``. Select the node and name "
"it ``GUI``. Then save the scene as ``GUI.tscn``. It will contain the entire "
"GUI."
msgstr ""
"새 씬을 만들고 ``MarginContainer`` 를 추가하세요. 노드의 이름을 ``GUI`` 로 지"
"으세요. 그러고 ``GUI.tscn`` 로 씬을 저장하세요. 그것은 전체 GUI를 포함합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:75
msgid ""
"With the ``MarginContainer`` selected, head to the inspector and scroll down "
"to the custom constants section. Unfold it and click the field next to each "
"of the ``Margin`` properties. Set them all to ``20`` pixels. Next, add an "
"``HBoxContainer`` node. This one will contain our two bars on the left and "
"separate them from the two counters on the right."
msgstr ""
"``MarginContainer`` 가 선택된 채로, 인스펙터에서 custom constants 섹션으로 창"
"을 내립니다. 창을 펼치고 각 ``Margin``  속성 옆에 빈 공간을 클릭합니다.  이"
"들 모두를 ``20`` 으로 설정합니다. 다음으로, ``HBoxContainer`` 노드를 추가합니"
"다. 이것은 왼쪽에 두 개의 막대와 오른쪽에 두 개의 카운터를 분리할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:81
msgid ""
"We want to stack the bars vertically inside the ``HBoxContainer``. To do "
"this, let's add a ``VBoxContainer``. Name it ``Bars``. Select the parent "
"``HBoxContainer`` again and this time, add another ``HBoxContainer``. This "
"one will hold the counters, so call it ``Counters``. With these four "
"containers, we have the base for our GUI scene."
msgstr ""
"``HBoxContainer`` 안에 막대를 세로로 쌓을 겁니다. 그러기 위해, "
"``VBoxContainer`` 를 추가합니다. ``Bars`` 라고 이름 짓습니다. 부모 "
"``HBoxContainer`` 를 다시 선택하고 이번엔 다른 ``HBoxContainer`` 를 추가합니"
"다. 이번 것은 카운터를 잡아 줄 것이기 때문에 ``Counters`` 라고 이름 짓겠습니"
"다. 이 네 개의 컨테이너로 우리는 GUI 씬의 기초를 만들었습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:89
msgid "You should have 4 containers that look like this"
msgstr "4개의 컨테이너가 이렇게 있어야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:93
msgid ""
"We can work this way because we first broke down our UI design and took a "
"few moments to think about the containers we'd use. When you follow a "
"tutorial like this, it may seem weird. But once you're working on real "
"games, you'll see it's an efficient workflow."
msgstr ""
"먼저 UI 디자인을 부수고 사용할 컨테이너를 생각했기 때문에 이 방법이 가능한 것"
"입니다. 당신이 튜토리얼을 그대로 따라간다면, 이것이 이상하게 보일 것입니다. "
"하지만 실제 게임에서 이것이 효과적인 작업 흐름임을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:99
msgid "Create the bars' base"
msgstr "막대의 기초 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:101
msgid ""
"Each bar is split into two sub-elements that align horizontally: the label "
"with the health count on the left, and the gauge on the right. Once again, "
"the ``HBoxContainer`` is the perfect tool for the job. Select the ``Bars`` "
"node and add a new ``HBoxContainer`` inside of it. Name it ``Bar``."
msgstr ""
"각 막대는 수평으로 정렬된 두 개의 세부 요소로 나뉩니다: 왼쪽에는 체력을 표시"
"하는 라벨, 그리고 오른쪽에서 게이지를 표시합니다. 앞서 말했듯이, "
"``HBoxContainer`` 는 이 작업에 적합합니다. ``Bars`` 노드를 선택하고 그 안에 "
"``HBoxContainer`` 를 추가하세요. 이름을 ``Bar`` 로 짓습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:107
msgid ""
"The label itself requires at least three nodes: a ``NinePatchRect`` for the "
"background, on top of which we'll add a texture on the left, either ``HP`` "
"or ``EP``, and a ``Label`` on the right for the value. We can nest "
"``Control`` nodes however we want. We could use the ``NinePatchRect`` as a "
"parent for the two other elements, as it encompasses them. In general, you "
"want to use containers instead, as their role is to help organize UI "
"components. We'll need a ``MarginContainer`` later anyway to add some space "
"between the life count and the gauge. Select the ``Bar`` and add a "
"``MarginContainer``. Name it ``Count``. Inside of it, add three nodes:"
msgstr ""
"라벨에는 적어도 세 개의 노드가 더 필요합니다: 배경에 쓸 ``NinePatchRect``, "
"그 배경에서 왼쪽에는 ``HP`` 나 ``EP`` 를 쓸 텍스쳐, 그리고 값을 나타내는 "
"``Label``  입니다. 우리는 원하는 대로  ``Control`` 노드를 중첩시킬 수 있습니"
"다. 즉, ``NinePatchRect`` 를 다른 두 개의 요소를 포괄하는 부모로 사용할 수 있"
"다는 것입니다. 일반적으로, 우리는 컨테이너를 사용합니다, 그것이 그들의 역할이"
"니까요. 라이프 카운터와 게이지 사이에 공간이 필요하니 나중에 "
"`MarginContainer`` 가 필요할 것입니다. ``Bar`` 를 선택하고 "
"``MarginContainer`` 를 추가하세요. ``Count`` 라고 이름짓습니다. 그 안에는, 다"
"음의 노드들을 추가하세요:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:118
msgid "A ``NinePatchRect`` named ``Background``"
msgstr "``NinePatchRect``, 이름은 ``Background``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:119
msgid "A ``TextureRect`` named ``Title``"
msgstr "``TextureRect``, 이름은 ``Title``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:120
msgid "And a ``Label`` named ``Number``"
msgstr "``Label``, 이름은 ``Number``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:122
msgid "To add the nodes as siblings, always select the ``Count`` node first."
msgstr ""
"노드들을 형제로 만들기 위해, 항상 ``Count`` 노드를 먼저 선택해야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:126
msgid ""
"Your scene tree should look like this. We're ready to throw in some textures"
msgstr ""
"당신의 씬 트리는 이렇게 되야 합니다. 이제 텍스쳐를 넣을 준비가 끝났습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:129
msgid ""
"Our scene is still empty. It's time to throw in some textures. To load the "
"textures, head to the FileSystem dock to the left of the viewport. Browse "
"down to the res://assets/GUI folder."
msgstr ""
"씬은 아직 텅 빈 상태입니다. 이제 텍스쳐를 추가해 봅시다. 텍스쳐를 불러오기 위"
"해선, 뷰포트의 왼쪽에 있는 파일 시스템 독으로 가세요. 경로를 res://assets/"
"GUI 로 하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:135
msgid "You should see a list of textures that we'll use to skin our interface."
msgstr "우리가 인터페이스에 쓸 텍스쳐의 목록이 이렇게 나와야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:138
msgid ""
"Select the ``Background`` in the Scene dock. In the Inspector, you should "
"see a ``Texture`` property. In the FileSystem tab, click and drag "
"``label_HP_bg.png`` onto the ``Texture`` slot. It stays squashed. The parent "
"MarginContainer will force its size down to 0 until we force elements inside "
"the container to have a minimum size. Select the ``Background`` node. In the "
"Inspector, scroll down to the Rect section. Set ``Min Size`` to (100, 40). "
"You should see the ``Background`` resize along with its parent containers."
msgstr ""
"씬 독에서 ``Background`` 를 선택합니다. 인스펙터에서, ``Texture`` 속성을 보세"
"요. 파일 시스템 탭에서 ``label_HP_bg.png`` 를 ``Texture`` 슬롯으로 드래그 합"
"니다. 찌그러진 채로 있습니다. 텍스쳐가 부모 MarginContainer의 영향을 받기 때"
"문에 그 영향을 최소화 하지 않으면 컨테이너는 텍스쳐의 크기를 0으로 만듭니다. "
"``Background`` 노드를 선택합니다. 인스펙터에서, Rect 섹션으로 갑니다. ``Min "
"Size`` 를 (100, 40)으로 설정합니다. ``Background`` 가 부모 컨테이너에 크기가 "
"조정된 것을 보실 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:147
msgid ""
"Next, select the ``Title`` and drag and drop ``label_HP.png`` into its "
"``Texture`` slot. Select the ``Number`` node, click the field next to the "
"``Text`` property and type ``10``. This way, we can see both nodes in the "
"viewport. They should stack up in the top-left corner of their parent "
"``MarginContainer``."
msgstr ""
"다음으로, ``Title`` 을 선택하고 ``label_HP.png`` 를 ``Texture`` 슬롯으로 드래"
"그 앤 드롭 하세요. ``Number`` 노드를 선택하고, ``Text`` 속성 우측 공간을 클릭"
"하고 ``10`` 을 칩니다. 이걸로, 당신은 두 노드 모두를 뷰포트에서 볼 수 있습니"
"다. 이 둘은 부모 ``MarginContainer`` 의 왼쪽 위에 포개져있어야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:155
msgid "If you select both nodes, you should see something like this"
msgstr "두 노드를 선택하면, 이렇게 보여야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:157
msgid ""
"As they have a container as their direct parent, we cannot move them freely: "
"the ``Count`` node will always reset their anchors, their size and position. "
"Try to move and resize the nodes in the viewport. Then, select any of the "
"three textures and press Ctrl Up or Ctrl Down to reorder them in the Scene "
"dock. They'll snap back to their previous size and position."
msgstr ""
"직계 부모인 컨테이너를 갖게 되었으니, 우리는 이들을 자유롭게 움직일 수 없습니"
"다: ``Count`` 노드는 앵커나 크기, 위치가 항상 원상복귀 됩니다. 뷰포트에서 노"
"드를 움직이거나 크기를 바꾸려고 시도해보시죠. 그 이후에는, 세 개의 텍스쳐 중 "
"하나를 선택하고 Ctrl 위 아니면 Ctrl 아래를 눌러 그들을 씬 독에 다시 맞춰주세"
"요. 텍스쳐들은 이전 크기와 위치로 돌아갈 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:164
msgid ""
"Parent containers control the size, the scale, the margins, and the anchors "
"of their direct children. To modify the nodes, you must nest them inside a "
"regular Control or another UI element. We'll use the ``Background`` as a "
"parent for the ``Title`` and ``Number``. Select both the ``Title`` and "
"``Number``, and drag and drop them onto ``Background``."
msgstr ""
"부모 컨테이너는 크기, 규모, 여백, 그리고 직계 자식의 앵커를 제어합니다. 노드"
"를 수정하기 위해, 그들을 기본 Control 노드나 다른 UI 요소들 안에 중첩시켜야 "
"합니다. 우리는 ``Title`` 과 ``Number`` 의 부모로 ``Background`` 를 사용할 겁"
"니다. ``Title`` 과 ``Number`` 를 선택하고, ``Background`` 에 드래그 앤 드롭 "
"하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:173
msgid ""
"By using the Background node as the two textures' parent, we take control "
"away from the Count MarginContainer"
msgstr ""
"두 텍스쳐의 부모로 Background 노드를 사용해서, 우리는 Count MarginContainer"
"의 통제권을 빼앗아 버립니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:176
msgid ""
"Select the ``Title`` and in the Inspector, change its ``Stretch Mode`` "
"property to ``Keep Centered``. Next find the ``Rect`` category in the "
"Inspector and change the ``Size`` property to (50, 40) so it only takes the "
"left half of the background.  Next, select the ``Number`` node. In the "
"viewport, click the ``Layout`` menu and click ``Full Rect``. The node will "
"resize to fit the ``Background``. Head to the Inspector and change its "
"``Align`` property to ``Right``, and the ``VAlign`` property to ``Center``. "
"The text should snap to the center of the ``Background``'s right edge. "
"Resize the node horizontally so it takes the right half of the "
"``Background`` and there's a bit of padding with the right edge."
msgstr ""
"``Title`` 을 선택하고 인스펙터에서, ``Stretch Mode`` 속성을 ``Keep "
"Centered`` 로 바꿔줍니다. 그런 다음 ``Rect`` 카테고리로 간 후 ``Size`` 속성"
"을 (50, 40) 으로 해서 배경의 왼쪽 절반을 차지하게 합니다. 다음으로, "
"``Number`` 노드를 선택합니다. 뷰포트에서, ``레이아웃`` 메뉴를 클릭하고 "
"``Full Rect`` 를 클릭합니다. 노드의 크기가 ``Background`` 에 맞게 조정될 겁니"
"다. 인스펙터로 가서 ``Align`` 속성을 ``Right`` 로 설정하고, ``VAlign`` 속성"
"을 ``Center`` 로 설정합니다. 텍스트는 ``Background`` 의 오른쪽 부분에서 중앙"
"에 스냅되어야 합니다. 노드의 크기를 가로로 조정하면, 노드는 ``Background`` "
"의 오른쪽 절반을 차지하게 되고 오른쪽에 약간의 공간이 남습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:189
msgid ""
"Here's how the nodes' bounding boxes should look in the viewport. Keep it "
"rough, you don't need to place them too precisely for now."
msgstr ""
"노드의 경계 사각형이 뷰포트에 이렇게 보여야 합니다. 대략적으로만 하세요, 아"
"직 너무 세밀해야 할 필요는 없습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:193
msgid "Replace the Label's font"
msgstr "라벨의 폰트 바꾸기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:195
msgid ""
"The label's font is too small. We need to replace it. Select the ``Number`` "
"node and in the Inspector, scroll down to the ``Control`` class, and find "
"the ``Custom Font`` category. Click the field next to the ``Font`` property "
"and click on ``New Dynamic Font``. Click on the field again and select Edit."
msgstr ""
"라벨의 폰트가 너무 작습니다. 우리는 바꿔야 합니다. ``Number`` 노드를 선택하"
"고 인스펙터에서, ``Control`` 클래스로 가서, ``Custom Font`` 카테고리로 갑니"
"다. ``Font`` 속성 옆의 영역을 클릭하고 ``새 Dynamic Font`` 를 클릭합니다. 다"
"시 그 영역을 클릭하고 편집을 선택합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:201
msgid ""
"You will enter the ``Dynamic Font`` resource. Unfold the ``Font`` category "
"and click the field next to ``Font Data``. Click the ``Load`` button. In the "
"file browser, navigate down to the assets/font folder and double click "
"``Comfortaa-Bold.ttf`` to open it. You should see the font update in the "
"viewport. Unfold the settings category to change the font size. Set the "
"``Size`` property to a higher value, like ``24`` or ``28``."
msgstr ""
"``Dynamic Font`` 리소스로 들어갑니다. ``Font`` 카테고리를 열고 ``Font Data`` "
"옆의 영역을 클릭하세요. ``로드`` 버튼을 클릭하세요. 파일 브라우저에서, "
"assets/font folder 경로를 치시고 ``Comfortaa-Bold.ttf`` 를 클릭해서 여세요. "
"뷰포트가 업데이트 된 것을 보실 수 있습니다. Settings 카테고리를 열고 폰트 사"
"이즈를 변경하세요. ``Size`` 속성을 ``24`` 나 ``28`` 정도로 설정하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:209
msgid ""
"We now need the text's baseline, the number's lower edge, to align with the "
"HP texture on the left. To do so, still in the ``DynamicFont`` resource, you "
"can tweak the ``Bottom`` property under the ``Extra Spacing`` category. It "
"adds some bottom padding to the text. Click the ``Number`` node in the Scene "
"tab to go back to the node's properties and change the ``VAlign`` to "
"``Bottom``. To adjust the text's baseline, click on the font field under the "
"``Custom Font`` category again and tweak the ``Bottom`` property until the "
"text aligns with the ``Title`` node. I used a value of ``2`` pixels."
msgstr ""
"이제 왼쪽의 HP 텍스쳐와 일직선으로 하기 위해, 텍스트의 기준선과 숫자 하단의 "
"가장자리가 필요합니다. 그러기 위해, 다시 ``DynamicFont`` 리소스에서, ``Extra "
"Spacing``  카테고리의 ``Bottom`` 속성을 잡아당길 수 있습니다. 그것은 텍스트"
"에 하단 여백을 추가합니다. 씬 탭에 있는 ``Number`` 노드를 클릭하고 노드 속성"
"으로 돌아가서 ``VAlign`` 을 ``Bottom`` 으로 바꿉니다. 텍스트의 기준선을 적용"
"하기 위해 ``Custom Font`` 카테고리의 폰트 영역을 다시 클릭하고 ``Bottom`` 속"
"성을 ``Title`` 노드와 일직선이 될 때까지 잡아당깁니다. 저는 ``2`` 픽셀 값을 "
"사용했습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:221
msgid "With a Bottom value of 2 pixels, the Number aligns with the Title"
msgstr "Bottom 에 2픽셀 값으로, Number는 Title과 일직선이 됨"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:223
msgid ""
"With this, we finished the hardest part of the GUI. Congratulations! Let's "
"move on to the simpler nodes."
msgstr ""
"이걸로, 우리는 GUI의 가장 어려운 부분을 마쳤습니다. 축하합니다! 더 단순한 노"
"드로 넘어갑시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:227
msgid "Add the progress bar"
msgstr "경과 막대를 추가하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:229
msgid ""
"We need one last element to complete our life bar: the gauge itself. Godot "
"ships with a ``TextureProgress`` node that has everything we need."
msgstr ""
"우리는 체력 막대를 완성하기 위해 마지막 요소가 필요합니다: 게이지 그 자체이"
"죠. 우리가 필요한 모든 것은 ``TextureProgress`` 노드에 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:232
msgid ""
"Select the Bar node and add a ``TextureProgress`` inside of it. Name it "
"``Gauge``. In the inspector unfold the ``Textures`` section. Head to the "
"FileSystem dock and drag and drop the ``lifebar_bg.png`` texture onto the "
"``Under`` slot. Do the same with the ``lifebar_fill.png`` image and drop it "
"onto the ``Progress`` slot. Under the ``Range`` class in the inspector, "
"change the ``Value`` property to ``50`` to see the gauge fill up."
msgstr ""
"Bar 노드를 선택하고 안에 ``TextureProgress`` 를 추가합니다. ``Gauge`` 라고 이"
"름을 짓습니다. 인스펙터에서 ``Textures`` 섹션을 엽니다. 파일 시스템 독에서 "
"``lifebar_bg.png`` 텍스쳐를 ``Under`` 슬롯에 드래그 앤 드롭 합니다.  "
"``lifebar_fill.png`` 이미지도 ``Progress`` 슬롯에 넣어줍니다. 인스펙터에서 "
"``Range`` 클래스 하단에, ``Value`` 속성을 ``50`` 으로 설정하면 게이지가 찬 모"
"습을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:240
msgid "With only five ``Control`` nodes, our first bar is ready to use."
msgstr "오직 다섯 ``Control`` 노드로, 우리의 첫 막대가 준비되었습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:244
msgid ""
"That's it, our life bar is ready. This last part was quick, wasn't it? "
"That's thanks to our robust container setup."
msgstr ""
"이겁니다, 우리의 막대는 준비가 되었습니다. 마지막 부분은 빨리 끝났네요, 그렇"
"지 않나요? 강력한 컨테이너 설정 덕분입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:248
msgid "Design the bomb and rupee counters"
msgstr "폭탄과 루피 카운터를 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:250
msgid ""
"The bomb and rupee counters are like the bar's ``Count`` node. So we'll "
"duplicate it and use it as a template."
msgstr ""
"폭탄과 루피 카운터는 바의 ``Count`` 노드와 비슷합니다. 따라서 복사해서 템플릿"
"으로 사용해서 만들어 보도록 하죠."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:253
msgid ""
"Under the ``Bar`` node, select ``Count`` and press Ctrl D to duplicate it. "
"Drag and drop the new node under the ``Counters`` ``HBoxContainer`` at the "
"bottom of the scene tree. You should see it resize automatically. Don't "
"worry about this for now, we'll fix the size soon."
msgstr ""
"``Bar`` 노드 아래에 있는 ``Count`` 를 선택한뒤, Ctrl D 를 눌러 노드를 복사합"
"니다. 그리고 새로 만들어진 노드를 드래그-앤-드롭 으로 씬트리 가장 아래에 있"
"는 ``Counter`` ``HBoxContainer`` 에 넣어 줍니다. 사이즈가 자동으로 변경되는것"
"을 볼 수 있을겁니다. 걱정하지 마시고 조금 뒤에 수정하기로 하고 다음으로 넘어"
"가가로 하죠."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:258
msgid ""
"Rename the ``Count2`` node to ``Counter``. Unlike the bars, we want the "
"number to be on the left, and an icon to sit on the right. The setup is the "
"same: we need background, a ``NinePatchFrame``, the title, and the number "
"nodes. The ``Title`` node is a ``TextureRect``, so it's what we need to "
"display the icon. In the scene tree, select the ``Title`` node, and rename "
"it to ``Icon``."
msgstr ""
"``Count2`` 노드의 이름을 ``Counter``로 변경합니다. 바와는 다르게 숫자는 왼"
"쪽, 아이콘은 오른쪽에 오도록 작업할 겁니다. 구성은 동일합니다: "
"``NinePatchFrame``, 배경, 타이틀, 그리고 숫자 노드가 들어갑니다. ``Title`` "
"은 ``TextureRect`` 노드이므로, 아이콘을 표시하는 노드입니다. 씬트리에서 "
"``Title`` 노드를 선택하고 이름을 ``Icon`` 으로 변경합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:267
#, fuzzy
msgid "Here's how your node tree should look so far"
msgstr "현재까지 작업한 노드 트리의 모습"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:269
msgid ""
"With the ``Icon`` node selected, in the inspector, scroll to the top to see "
"the ``Texture`` slot. Head to the FileSystem dock on the left and select the "
"``bombs_icon.png``. Drag and drop it onto the ``Texture`` slot. In the Scene "
"Tab select both the ``Icon`` and the ``Number`` nodes. Click the Layout menu "
"in the toolbar at the top of the viewport and select ``Full Rect``. Both "
"nodes will update to fit the size of the ``Background``."
msgstr ""
"``Icon`` 노드를 선택하고 인스펙터를 스크롤하여 ``Texture`` 슬롯을 찾습니다. "
"파일 시스템 독에서 ``bombs_icon.png`` 를 드래그하여 ``Texture`` 슬롯에 놓습니"
"다. 씬 탭에서 ``Icon`` 과 ``Number`` 노드를 선택 하고 뷰포트 상단에 도구 모음"
"에서 레이아웃 메뉴를 클릭하고 ``Full Rect`` 를 선택 합니다. 두 노드 모두 "
"``Background`` 의 크기에 맞게 업데이트될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:279
msgid "The nodes anchor to the entire Background, but their position is off"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:281
msgid ""
"Let's change the ``Number``'s align properties to move it to the left and "
"center of the ``Background``. Select the ``Number`` node, change its "
"``Align`` property to left and the ``VAlign`` property to centre. Then "
"resize its left edge a little bit to add some padding between the left edge "
"of the ``Background`` and the text."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:289
msgid "The Number node aligned to the left and centre"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:291
msgid ""
"To overlap the Icon and the background, we need a few tweaks. First, our "
"background is a bit too tall. It's because it's inside a margin container "
"that is controlled by the top-most GUI node. Select the GUI node at the top "
"of the scene tree and downsize it vertically so that it's as thin as "
"possible. You'll see the gauge prevents you from making it too small. A "
"container cannot be smaller than the minimal size of its children. The "
"container's margins also weigh in."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:299
msgid ""
"Select the Icon, click the Layout menu, and select ``Full Rect`` to re-"
"center it. We need it to anchor to the ``Background``'s right edge. Open the "
"Layout menu again and select ``Center Right``. Move the icon up so it is "
"centered vertically with the ``Background``."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:307
#, fuzzy
msgid ""
"The bomb icon anchors to the Background's right edge. Resize the Counter "
"container to see the Icon node stick to its right side"
msgstr ""
"폭탄 아이콘의 앵커는 백그라운드의 오른쪽 가장자리로 설정하고, 카운터 컨테이너"
"의 크기를 변경하여 앵커가 잘 설정 되었는지 확인합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:310
msgid ""
"Because we duplicated the ``Counter`` from the bar's ``Count``, the "
"``Number`` node's font is off. Select the ``Number`` node again, head to the "
"``Font`` property, and click it to access the ``DynamicFont`` resource. In "
"the ``Extra Spacing`` section, change the ``Bottom`` value to ``0`` to reset "
"the font's baseline. Our counter now works as expected."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:317
msgid ""
"While we are at it, let's make it so the ``Counters`` snap to the right edge "
"of the viewport. To achieve this we will set the ``Bars`` container to "
"expand and take all the horizontal space. Select the ``Bars`` node and "
"scroll down to the ``Size Flags`` category. In the ``Horizontal`` category, "
"check the ``Expand`` value. The ``Bars`` node should resize and push the "
"counter to the rightmost of the screen."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:326
msgid ""
"An expanding container eats all the space it can from its parent, pushing "
"everything else along the way"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:330
msgid "Turn the bar and counter into reusable UI components"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:332
msgid ""
"We have one bar and one counter widget. But we need two of each. We may need "
"to change the bars' design or their functionality later on. It'd be great if "
"we could have a single scene to store a UI element's template, and child "
"scenes to work on variations. Godot lets us do this with Inherited Scenes."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:338
msgid ""
"Let's save both the ``Counter`` and the ``Bar`` branches as separate scenes "
"that we'll reduce to create the ``LifeBar``, the ``EnergyBar``, the "
"``BombCounter``, and the ``RupeeCounter``. Select the ``Bar`` HBoxContainer. "
"Right click on it and click on ``Save Branch as Scene``. Save the scene as "
"``Bar.tscn``. You should see the node branch turn it to a single ``Bar`` "
"node."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:347
msgid ""
"A scene is a tree of nodes. The topmost node is the tree's **root**, and the "
"children at the bottom of the hierarchy are **leaves**. Any node other than "
"the root along with one more children is a **branch**. We can encapsulate "
"node branches into separate scenes, or load and merge them from other scenes "
"into the active one. Right click on any node in the Scene dock and select "
"``Save Branch as Scene`` or ``Merge from Scene``."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:355
msgid ""
"Then, select the ``Counter`` node and do the same. Right click, ``Save "
"Branch as Scene``, and save it as ``Counter.tscn``. A new edit scene icon "
"appears to the right of the nodes in the scene tree. Click on the one next "
"to ``Bar`` to open the corresponding scene. Resize the ``Bar`` node so that "
"its bounding box fits its content. The way we named and place the Control "
"nodes, we're ready to inherit this template and create the life bar. It's "
"the same for the ``Counter``."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:365
msgid "With no extra changes, our Bar is ready to use"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:368
msgid "Use Scene Inheritance to create the remaining elements"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:370
msgid ""
"We need two bars that work the same way: they should feature a label on the "
"left, with some value, and a horizontal gauge on the right. The only "
"difference is that one has the HP label and is green, while the other is "
"called EP and is yellow. Godot gives us a powerful tool to create a common "
"base to reuse for all bars in the game: **inherited scenes**."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:378
msgid ""
"Inherited scenes help us keep the GUI scene clean. In the end, we will only "
"have containers and one node for each UI component."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:381
msgid ""
"On an inherited scene, you can change any property of every node in the "
"inspector, aside from its name. If you modify and save the parent scene, all "
"the inherited scenes update to reflect the changes. If you change a value in "
"the inherited scene, it will always overrides the parent's property. It's "
"useful for UIs as they often require variations of the same elements. In "
"general, in UI design, buttons, panels etc. share a common base style and "
"interactions. We don't want to copy it over to all variations manually."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:390
msgid ""
"A reload icon will appear next to the properties you override. Click it to "
"reset the value to the parent scene's default."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:395
msgid ""
"Think of scene inheritance like the node tree, or the ``extends`` keyword in "
"GDScript. An inherited scene does everything like its parent, but you can "
"override properties, resources and add extra nodes and scripts to extend its "
"functionality."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:401
msgid "Inherit the Bar Scene to build the LifeBar"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:403
msgid ""
"Go to ``Scene -> New Inherited Scene`` to create a new type of ``Bar``. "
"Select the Bar scene and open it. You should see a new [unsaved] tab, that's "
"like your ``Bar``, but with all nodes except the root in grey. Press ``Meta"
"+S`` to save the new inherited scene and name it ``LifeBar``."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:411
msgid "You can't rename grey nodes. This tells you they have a parent scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:413
msgid ""
"First, rename the root or top level node to ``LifeBar``. We always want the "
"root to describe exactly what this UI component is. The name differentiates "
"this bar from the ``EnergyBar`` we'll create next. The other nodes inside "
"the scene should describe the component's structure with broad terms, so it "
"works with all inherited scenes. Like our ``TextureProgress`` and ``Number`` "
"nodes."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:422
msgid ""
"If you've ever done web design, it's the same spirit as working with CSS: "
"you create a base class, and add variations with modifier classes. From a "
"base button class, you'll have button-green and button-red variations for "
"the user to accept and refuse prompts. The new class contains the name of "
"the parent element and an extra keyword to explain how it modifies it. When "
"we create an inherited scene and change the name of the top level node, "
"we're doing the same thing."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:431
msgid "Design the EnergyBar"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:433
msgid ""
"We already setup the ``LifeBar``'s design with the main ``Bar`` scene. Now "
"we need the ``EnergyBar``."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:436
msgid ""
"Let's create a new inherited scene, and once again select the ``Bar.tscn`` "
"scene and open it. Double-click on the ``Bar`` root node and rename it to "
"``EnergyBar``. Save the new scene as ``EnergyBar.tscn``. We need to replace "
"the HP texture with EP one, and to change the textures on the gauge."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:442
msgid ""
"Head to the FileSystem dock on the left, select the ``Title`` node in the "
"Scene tree and drag and drop the ``label_EP.png`` file onto the texture "
"slot. Select the ``Number`` node and change the ``Text`` property to a "
"different value like ``14``."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:447
msgid ""
"You'll notice the EP texture is smaller than the HP one. We should update "
"the ``Number``'s font size to better fit it. A font is a resource. All the "
"nodes in the entire project that use this resource will be affected by any "
"property we change. You can try to change the size to a huge value like "
"``40`` and switch back to the ``LifeBar`` or the ``Bar`` scenes. You will "
"see the text increased in size."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:456
msgid "If we change the font resource, all the nodes that use it are affected"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:459
msgid ""
"To change the font size on this node only, we must create a copy of the font "
"resource. Select the ``Number`` node again and click on the wrench and "
"screwdriver icon on the top right of the inspector. In the drop-down menu, "
"select the ``Make Sub-Resources Unique`` option. Godot will find all the "
"resources this node uses and create unique copies for us."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:467
msgid "Use this option to create unique copies of the resources for one node"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:471
msgid ""
"When you duplicate a node from the Scene tree, with ``Meta+D``, it shares "
"its resources with the original node. You need to use ``Make Sub-Resources "
"Unique`` before you can tweak the resources without affecting the source "
"node."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:476
msgid ""
"Scroll down to the ``Custom Font`` section and open ``Font``. Lower the "
"``Size`` to a smaller value like ``20`` or ``22``. You may also need to "
"adjust the ``Bottom`` spacing value to align the text's baseline with the EP "
"label on the left."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:483
msgid "The EP Count widget, with a smaller font than its HP counterpart"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:485
msgid ""
"Now, select the ``TextureProgress`` node. Drag the ``energy_bar_bg.png`` "
"file onto the ``Under`` slot and do the same for ``energy_bar_fill.png`` and "
"drop it onto the ``Progress`` texture slot."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:489
msgid ""
"You can resize the node vertically so that its bounding rectangle fits the "
"gauge. Do the same with the ``Count`` node until its size aligns with that "
"of the bar. Because the minimal size of ``TextureProgress`` is set based on "
"its textures, you won't be able to downsize the ``Count`` node below that. "
"That is also the size the ``Bar`` container will have. You may downscale "
"this one as well."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:496
msgid ""
"Last but not least, the ``Background`` container has a minimum size that "
"makes it a bit large. Select it and in the ``Rect`` section, change the "
"``Min Size`` property down to ``80`` pixels. It should resize automatically "
"and the ``Title`` and ``Number`` nodes should reposition as well."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:504
msgid "The Count looks better now it's a bit smaller"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:508
msgid ""
"The Count node's size affects the position of the TextureProgress. As we'll "
"align our bars vertically in a moment, we're better off using the Counter's "
"left margin to resize our EP label. This way both the EnergyBar's Count and "
"the LifeBar's Count nodes are one hundred pixels wide, so both gauges will "
"align perfectly."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:515
msgid "Prepare the bomb and rupee counters"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:517
msgid ""
"Let us now take care of the counters. Go to ``Scene -> New Inherited Scene`` "
"and select the ``Counter.tscn`` as a base. Rename the root node as "
"``BombCounter`` too. Save the new scene as ``BombCounter.tscn``. That's all "
"for this scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:524
msgid "The bomb counter is the same as the original Counter scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:526
msgid ""
"Go to ``Scene -> New Inherited Scene`` again and select ``Counter.tscn`` "
"once more. Rename the root node ``RupeeCounter`` and save the scene as "
"``RupeeCounter.tscn``. For this one, we mainly need to replace the bomb icon "
"with the rupee icon. In the FileSystem tab, drag the ``rupees_icon.png`` "
"onto the ``Icon`` node's ``Texture`` slot. ``Icon`` already anchors to the "
"right edge of the ``Background`` node so we can change its position and it "
"will scale and reposition with the ``RupeeCounter`` container. Shift the "
"rupee icon a little bit to the right and down. Use the Arrow Keys on the "
"keyboard to nudge its position. Save, and we're done with all the UI "
"elements."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:539
msgid "The rupee counter should look about like this"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:542
msgid "Add the UI components to the final GUI"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:544
msgid ""
"Time to add all the UI elements to the main GUI scene. Open the ``GUI.tscn`` "
"scene again, and delete the ``Bar`` and ``Counter`` nodes. In the FileSystem "
"dock, find the ``LifeBar.tscn`` and drag and drop it onto the ``Bars`` "
"container in the scene tree. Do the same for the ``EnergyBar``. You should "
"see them align vertically."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:552
msgid "The LifeBar and the EnergyBar align automatically"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:554
msgid ""
"Now, drag and drop the ``BombCounter.tscn`` and ``RupeeCounter.tscn`` scenes "
"onto the ``Counters`` node. They'll resize automatically."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:559
msgid "The nodes resize to take all the available vertical space"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:561
msgid ""
"To let the ``RupeeCounter`` and ``BombCounter`` use the size we defined in "
"``Counter.tscn``, we need to change the ``Size Flags`` on the ``Counters`` "
"container. Select the ``Counters`` node and unfold the ``Size Flags`` "
"section in the Inspector. Uncheck the ``Fill`` tag for the ``Vertical`` "
"property, and check ``Shrink Center`` so the container centers inside the "
"``HBoxContainer``."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:570
msgid "Now both counters have a decent size"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:574
msgid ""
"Change the ``Min Size`` property of the ``Counters`` container to control "
"the height of the counters' background."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:577
msgid ""
"We have one small issue left with the EP label on the EnergyBar: the 2 bars "
"should align vertically. Click the icon next to the ``EnergyBar`` node to "
"open its scene. Select the ``Count`` node and scroll down to the ``Custom "
"Constant`` section. Add a ``Margin Left`` of ``20``. In the ``Rect`` section "
"set the node's ``Min Size`` back to 100, the same value as on the LifeBar. "
"The ``Count`` should now have some margin on the left. If you save and go "
"back to the GUI scene, it will be aligned vertically with the ``LifeBar``."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:588
msgid "The 2 bars align perfectly"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:592
msgid ""
"We could have setup the ``EnergyBar`` this way a few moments ago. But this "
"shows you that you can go back to any scene anytime, tweak it, and see the "
"changes propagate through the project!"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:597
msgid "Place the GUI onto the game's mockup"
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:599
msgid ""
"To wrap up the tutorial we're going to insert the GUI onto the game's mockup "
"scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:602
msgid "Head to the FileSystem dock and open ``LevelMockup.tscn``."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:604
msgid ""
"Drag-and-drop the ``GUI.tscn`` scene right below the ``bg`` node and above "
"the ``Characters``. The GUI will scale to fit the entire viewport. Head to "
"the Layout menu and select the ``Center Top`` option so it anchors to the "
"top edge of the game window. Then resize the GUI to make it as small as "
"possible vertically. Now you can see how the interface looks in the context "
"of the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:611
msgid ""
"Congratulations for getting to the end of this long tutorial. You can find "
"final project `here <#>`__."
msgstr ""

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:620
msgid ""
"**A final note about Responsive Design**. If you resize the GUI, you'll see "
"the nodes move, but the textures and text won't scale. The GUI also has a "
"minimum size, based on the textures inside of it. In games, we don’t need "
"the interface to be as flexible as that of a website. You almost never want "
"to support both landscape and portrait screen orientations. It’s one or the "
"other. In landscape orientation, the most common ratios range from 4:3 to "
"16:9. They are close to one another. That's why it’s enough for the GUI "
"elements to only move horizontally when we change the window size."
msgstr ""
