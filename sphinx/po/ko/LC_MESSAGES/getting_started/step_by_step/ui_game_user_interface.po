# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 11:09+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:4
msgid "Design the GUI"
msgstr "GUI 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:6
msgid ""
"Now that you've nailed the basics, we're going to see how to build a game "
"Graphical User Interface (GUI) with reusable UI components: a life bar, an "
"energy bar, and bomb and emerald counters. By the end of this tutorial, "
"you'll have a game GUI, ready to control with GDscript or VisualScript:"
msgstr ""
"이제 기초를 이해했으니 재사용 가능한 UI 구성 요소(체력 바, 에너지 바, 폭탄 "
"및 에메랄드 카운터)를 사용해 게임 GUI(그래픽 사용자 인터페이스)를 구축하는 방"
"법을 살펴보겠습니다. 이 튜토리얼이 끝나면 GDscript 또는 VisualScript로 제어"
"할 준비가 된 게임 GUI가 만들어집니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:13
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:621
msgid "The final result"
msgstr "최종 결과물"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:15
msgid "You'll also learn to:"
msgstr "이번에 배울 내용입니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:17
msgid "Create flexible UI components"
msgstr "유연한 UI 구성 요소 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:18
msgid "Use scene inheritance"
msgstr "씬 상속 사용하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:19
msgid "Build a complex UI"
msgstr "복잡한 UI 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:21
msgid ""
"Download the project files: :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` and extract the archive. Import the `start/` project in "
"Godot to follow this tutorial. The `end/` folder contains the final result."
msgstr ""
"프로젝트 파일을 다운로드하고 :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` 압축을 푸세요. 이 튜토리얼을 따라오려면 Godot로 `start/` "
"프로젝트를 가져오세요. `end/` 폴더에는 완성본이 들어 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:25
msgid ""
"You can watch this tutorial as a `video on YouTube <https://www.youtube.com/"
"watch?v=y1E_y9AIqow>`_."
msgstr ""
"이 튜토리얼은 `Youtube 영상 <https://www.youtube.com/watch?v=y1E_y9AIqow>`_"
"\\ 으로도 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:28
msgid "Breaking down the UI"
msgstr "UI 파헤치기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:30
msgid ""
"Let's break down the final UI and plan the containers we'll use. As in the :"
"doc:`ui_main_menu`, it starts with a ``MarginContainer``. Then, we can see "
"up to three columns:"
msgstr ""
"최종 UI를 분석하고 사용할 컨테이너를 계획해 보겠습니다. :doc:`ui_main_menu`"
"\\ 에서와 같이 ``MarginContainer``\\ 로 시작합니다. 그런 다음 3개의 열로 나눕"
"니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:34
msgid "The life and energy counters on the left"
msgstr "왼쪽의 체력과 에너지 카운터"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:35
msgid "The life and energy bars"
msgstr "체력 바와 에너지 바"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:36
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:42
msgid "The bomb and emerald counters on the right"
msgstr "오른쪽의 폭탄과 에메랄드 카운터"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:38
msgid ""
"But the bar's label and the gauge are two parts of the same UI element. If "
"we think of them this way, we're left with two columns:"
msgstr ""
"그러나 막대의 label과 게이지는 동일한 UI 요소의 두 부분입니다. 이를 고려하면 "
"두 개의 열이 남습니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:41
msgid "The life and energy bars on the left"
msgstr "왼쪽의 체력 바와 에너지 바"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:44
msgid ""
"This makes it easier to nest containers: we have some margins around the "
"border of the screen using a ``MarginContainer``, followed by an "
"``HBoxContainer`` to manage our two columns. The two bars stack on top of "
"one another inside a ``VBoxContainer``. And we'll need a last "
"``HBoxContainer`` in the right column to place the bomb and emerald counters "
"side-by-side."
msgstr ""
"이렇게 하면 컨테이너를 더 쉽게 중첩할 수 있습니다. 두 개의 열을 관리하기 위"
"해 ``MarginContainer`` 다음에 ``HBoxContainer``\\ 를 사용하면 화면 테두리 주"
"위에 약간의 마진이 생깁니다. 두 개의 바는 ``VBoxContainer`` 내부에서 서로 포"
"개집니다. 그리고 폭탄과 에메랄드 카운터를 나란히 배치하려면 오른쪽 열에 마지"
"막 ``HBoxContainer``\\ 가 필요합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:53
msgid "We get a clean UI layout with only 4 containers"
msgstr "4 개의 컨테이너로 말끔한 UI 레이아웃을 만들었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:55
msgid ""
"We will need extra containers inside the individual UI components, but this "
"gives us the main GUI scene's structure. With this plan in place, we can "
"jump into Godot and create our GUI."
msgstr ""
"개별 UI 구성 요소 안에는 추가 컨테이너가 필요하지만 이는 기본 GUI 씬 구조를 "
"보여줍니다. 이 계획을 통해 Godot로 뛰어들어 GUI를 만들 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:60
msgid "Create the base GUI"
msgstr "기초 GUI 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:62
msgid ""
"There are two possible approaches to the GUI: we can design elements in "
"separate scenes and put them together, or prototype everything in a single "
"scene and break it down later. I recommend working with a single scene as "
"you can play with your UI's placement and proportions faster this way. Once "
"it looks good, you can save entire sections of the node tree as reusable sub-"
"scenes. We'll do that in a moment."
msgstr ""
"GUI에 대해 가능한 두 가지 접근 방식이 있습니다. 별도의 씬에서 요소를 디자인하"
"고 하나로 묶거나, 하나의 씬에서 모든 것을 프로토타이핑하고 나중에 분해할 수 "
"있습니다. 이렇게 하면 UI의 배치와 비율을 더 빠르게 사용할 수 있으므로 단일 씬"
"으로 작업하는 것이 좋습니다. UI가 보기 좋아지면 노드 트리의 전체 섹션을 재사"
"용 가능한 하위 씬으로 저장할 수 있습니다. 잠시 후에 해보겠습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:69
msgid "For now, let's start with a few containers."
msgstr "일단 몇 가지 컨테이너로부터 시작하겠습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:71
msgid ""
"Create a new scene and add a ``MarginContainer``. Select the node and name "
"it ``GUI``."
msgstr ""
"새 씬을 만들고 ``MarginContainer``\\ 를 추가하세요. 노드를 선택하고 ``GUI``"
"\\ 라고 이름 지으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:74
msgid ""
"We want our interface to anchor to the top of the screen. Select the ``GUI`` "
"node and click the Layout button at the top of the viewport. Select the "
"``Top Wide`` option. The ``GUI`` node will anchor to the top edge of its "
"parent, the viewport by default. It will resize automatically on the "
"vertical axis to make space for its child UI components."
msgstr ""
"우리는 인터페이스가 화면 위쪽에 고정되기를 원합니다. ``GUI`` 노드를 선택하고 "
"뷰포트 위쪽에 있는 레이아웃(Layout) 버튼을 클릭하세요. ``위쪽 넓게(Top "
"Wide)`` 옵션을 선택하세요. ``GUI`` 노드는 기본적으로 뷰포트인 부모의 위쪽 모"
"서리에 고정됩니다. 수직 축에서 자동으로 크기가 조절되어 자식 UI 구성 요소가 "
"들어갈 공간을 만듭니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:80
msgid "Save the scene as ``GUI.tscn``. We will put the entire GUI in it."
msgstr "씬을 ``GUI.tscn``\\ 으로 저장하세요. 여기에 GUI를 전부 넣을 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:82
msgid ""
"With the ``MarginContainer`` selected, head to the inspector and scroll down "
"to the custom constants section. Unfold it and click the field next to each "
"of the ``Margin`` properties. Set them all to ``20`` pixels. Next, add an "
"``HBoxContainer`` node. This one will contain our two bars on the left and "
"separate them from the two counters on the right."
msgstr ""
"``MarginContainer``\\ 를 선택한 상태에서 인스펙터(Inspector)로 이동해 커스텀 "
"상수 섹션으로 스크롤을 내리세요. 섹션을 펼치고 각 ``Margin`` 속성 옆에 있는 "
"필드를 클릭하세요. 모든 필드를 ``20`` 픽셀로 설정하세요. 다음으로 "
"``HBoxContainer`` 노드를 추가하세요. 이 노드는 왼쪽에 있는 두 개의 바를 포함"
"하고 오른쪽에 있는 두 개의 카운터와 분리합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:88
msgid ""
"We want to stack the bars vertically inside the ``HBoxContainer``. Add a "
"``VBoxContainer`` as a child of ``HBoxContainer`` and name it ``Bars``. "
"Select the parent ``HBoxContainer`` again and this time, add another "
"``HBoxContainer`` as a child of it. Call it ``Counters``. With these four "
"containers, we have the base for our GUI scene."
msgstr ""
"우리는 바를 ``HBoxContainer`` 안에 수직으로 쌓고 싶습니다. ``VBoxContainer``"
"\\ 를 ``HBoxContainer``\\ 의 자식으로 추가하고 이름을 ``Bars``\\ 로 지으세"
"요. 부모 ``HBoxContainer`` \\를 다시 선택하고 이번에는 다른 ``HBoxContainer``"
"\\ 를 자식으로 추가하세요. 이름은 ``Counters``\\ 로 지으세요. 이 4개의 컨테이"
"너를 사용해 GUI 장면의 기초를 만들었습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:95
msgid "You should have 4 containers that look like this"
msgstr "4 개의 컨테이너가 이렇게 있어야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:99
msgid ""
"We can work this way because we first broke down our UI design and took a "
"few moments to think about the containers we'd use. When you follow a "
"tutorial like this, it may seem weird. But once you're working on real "
"games, you'll see it's an efficient workflow."
msgstr ""
"이 방법이 가능한 이유는, 먼저 UI 설계를 파헤치고 사용할 컨테이너에 대해 생각"
"할 시간을 가졌기 때문입니다. 이 튜토리얼을 따라갈 때 이상하다고 느꼈을 지도 "
"모릅니다. 하지만 실제 게임을 작업해본다면 이게 효율적인 워크플로라는 것을 깨"
"닫게 될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:105
msgid "Create the bars' base"
msgstr "바 기초 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:107
msgid ""
"Each bar is split into two sub-elements that align horizontally: the label "
"with the health count on the left, and the gauge on the right. Once again, "
"the ``HBoxContainer`` is the perfect tool for the job. Select the ``Bars`` "
"node and add a new ``HBoxContainer`` inside of it. Name it ``Bar``."
msgstr ""
"각 바는 수평으로 배열된 두 개의 하위 요소로 나뉘는데, 왼쪽에는 체력이 표시된 "
"레이블, 오른쪽에는 게이지가 있습니다. 다시 말하지만, ``HBoxContainer``\\ 는 "
"작업을 위한 완벽한 툴입니다. ``Bars`` 노드를 선택하고 그 안에 새로운 "
"``HBoxContainer``\\ 를 추가하세요. 이름은 ``Bar``\\ 로 지으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:113
msgid ""
"The label itself requires at least three nodes: a ``NinePatchRect`` for the "
"background, on top of which we'll add a texture on the left, either ``HP`` "
"or ``EP``, and a ``Label`` on the right for the value. We can nest "
"``Control`` nodes however we want. We could use the ``NinePatchRect`` as a "
"parent for the two other elements, as it encompasses them. In general, you "
"want to use containers instead, as their role is to help organize UI "
"components. We'll need a ``MarginContainer`` later anyway to add some space "
"between the life count and the gauge. Select the ``Bar`` and add a "
"``MarginContainer``. Name it ``Count``. Inside of it, add three nodes:"
msgstr ""
"레이블 자체에는 적어도 배경으로 사용할 ``NinePatchRect``\\ 와 그 위에 왼쪽에"
"는 각각 ``HP``\\ 나 ``EP`` 텍스처, 오른쪽에는 값을 표시하는 ``Label``\\ 의 3"
"개의 노드가 필요합니다. ``Control`` 노드를 원하는 만큼 중첩할 수 있습니다. "
"``NinePatchRect``\\ 노드를 다른 두 요소의 부모로 사용할 수 있습니다. 일반적으"
"로 컨테이너는 UI 구성 요소를 구성하는 데 도움을 주는 역할을 하므로 컨테이너"
"를 사용하려고 합니다. 어쨌든 체력 카운터와 게이지 사이에 약간의 공간을 추가하"
"려면 나중에 ``MarginContainer``\\ 가 필요합니다. ``Bar``\\ 를 선택하고 "
"``MarginContainer``\\ 를 추가하세요. 이름은 ``Count``로 지으세요. 그 안에 세 "
"개의 노드를 추가하세요:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:124
msgid "A ``NinePatchRect`` named ``Background``"
msgstr "``NinePatchRect``, 이름은 ``Background``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:125
msgid "A ``TextureRect`` named ``Title``"
msgstr "``TextureRect``, 이름은 ``Title``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:126
msgid "And a ``Label`` named ``Number``"
msgstr "``Label``, 이름은 ``Number``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:128
msgid "To add the nodes as siblings, always select the ``Count`` node first."
msgstr "형제 노드를 추가하려면 항상 먼저 ``Count`` 노드를 선택하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:132
msgid ""
"Your scene tree should look like this. We're ready to throw in some textures"
msgstr "씬 트리는 위와 같아야 합니다. 이제 텍스처를 적용할 준비가 되었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:135
msgid ""
"Our scene is still empty. It's time to throw in some textures. To load the "
"textures, head to the FileSystem dock to the left of the viewport. Browse "
"down to the res://assets/GUI folder."
msgstr ""
"씬은 아직 텅텅 비어 있습니다. 텍스처를 적용할 시간입니다. 텍스처를 불러오려"
"면 뷰포트 왼쪽에 있는 파일 시스템(FileSystem) 독으로 가세요. res://assets/"
"GUI 폴더로 들어가세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:141
msgid "You should see a list of textures that we'll use to skin our interface."
msgstr "인터페이스에 스킨을 적용하는 데 사용할 텍스처 목록이 표시됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:144
msgid ""
"Select the ``Background`` in the Scene dock. In the Inspector, you should "
"see a ``Texture`` property. In the FileSystem tab, click and drag "
"``label_HP_bg.png`` onto the ``Texture`` slot. It stays squashed. The parent "
"MarginContainer will force its size down to 0 until we force elements inside "
"the container to have a minimum size. Select the ``Background`` node. In the "
"Inspector, scroll down to the Rect section. Set ``Min Size`` to (100, 40). "
"You should see the ``Background`` resize along with its parent containers."
msgstr ""
"씬(Scene) 독에서 ``Background``\\ 를 선택하세요. 인스펙터(Inspector)에서 "
"``Texture`` 속성을 볼 수 있습니다. 파일시스템(FileSystem) 탭에서 "
"``label_HP_bg.png``\\ 를 ``Texture`` 슬롯으로 드래그하세요. 찌그러진 채로 들"
"어갑니다. 우리가 컨테이너 안의 요소에 최소 크기를 설정하지 않으면 부모 "
"MarginContainer가 텍스처 크기를 0으로 만듭니다. ``Background`` 노드를 선택하"
"세요. 인스펙터(Inspector)에서 Rect 섹션까지 아래로 스크롤하세요. ``Min Size``"
"\\ 를 (100, 40)으로 설정하세요. ``Background`` 크기가 부모 컨테이너에 따라 조"
"절된 것을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:153
msgid ""
"Next, select the ``Title`` and drag and drop ``label_HP.png`` into its "
"``Texture`` slot. Select the ``Number`` node, click the field next to the "
"``Text`` property and type ``10``. This way, we can see both nodes in the "
"viewport. They should stack up in the top-left corner of their parent "
"``MarginContainer``."
msgstr ""
"다음으로 ``Title``\\ 을 선택하고 ``label_HP.png``\\ 를 ``Texture`` 슬롯으로 "
"끌어다 놓으세요. ``Number`` 노드를 선택하고 ``Text`` 속성 옆에 있는 필드를 클"
"릭한 뒤 ``10``\\ 을 입력하세요. 이렇게 하면 뷰포트에서 두 노드를 모두 볼 수 "
"있습니다. 두 노드가 부모 ``MarginContainer``\\ 의 왼쪽 위 구석에 포개져 있어"
"야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:161
msgid "If you select both nodes, you should see something like this"
msgstr "두 노드를 모두 선택하면 위와 같이 보여야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:163
msgid ""
"As they have a container as their direct parent, we cannot move them freely: "
"the ``Count`` node will always reset their anchors, their size and position. "
"Try to move and resize the nodes in the viewport. Then, select any of the "
"three textures and press :kbd:`Ctrl + Up` or :kbd:`Ctrl + Down` to reorder "
"them in the Scene dock. They'll snap back to their previous size and "
"position."
msgstr ""
"두 노드의 부모가 컨테이너인 ``Count`` 노드이므로 컨테이너가 항상 두 노드의 앵"
"커, 크기, 위치를 재설정해 두 노드를 자유롭게 이동할 수 없습니다. 뷰포트에서 "
"두 노드를 이동하고 크기를 조정해보세요. 그런 다음 세 가지 텍스처 중 하나를 선"
"택하고 :kbd:`Ctrl + Up` 또는 :kbd:`Ctrl + Down`\\ 을 눌러 씬(Scene) 독에서 다"
"시 정렬해보세요. 이전 크기와 위치로 다시 돌아갑니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:170
msgid ""
"Parent containers control the size, the scale, the margins, and the anchors "
"of their direct children. To modify the nodes, you must nest them inside a "
"regular Control or another UI element. We'll use the ``Background`` as a "
"parent for the ``Title`` and ``Number``. Select both the ``Title`` and "
"``Number``, and drag and drop them onto ``Background``."
msgstr ""
"부모 컨테이너는 바로 아래 자식의 크기, 배율, 마진, 앵커를 제어합니다. 노드를 "
"수정하려면 일반 Control 또는 다른 UI 요소 내에 노드를 중첩해야 합니다. "
"``Title``\\ 과 ``Number``\\ 노드의 부모 노드로 ``Background``\\ 를 사용할 것"
"입니다. ``Title``\\ 과 ``Number``\\ 를 모두 선택하고 ``Background``\\ 로 끌어"
"다 놓으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:179
msgid ""
"By using the Background node as the two textures' parent, we take control "
"away from the Count MarginContainer"
msgstr ""
"Background 노드를 두 텍스처의 부모로 사용했기 때문에, Count MarginContainer"
"로 부터 자유로워졌습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:182
msgid ""
"Select the ``Title`` and in the Inspector, change its ``Stretch Mode`` "
"property to ``Keep Centered``. Next find the ``Rect`` category in the "
"Inspector and change the ``Size`` property to (50, 40) so it only takes the "
"left half of the background.  Next, select the ``Number`` node. In the "
"viewport, click the ``Layout`` menu and click ``Full Rect``. The node will "
"resize to fit the ``Background``. Head to the Inspector and change its "
"``Align`` property to ``Right``, and the ``Valign`` property to ``Center``. "
"The text should snap to the center of the ``Background``'s right edge. "
"Resize the node horizontally, so it takes the right half of the "
"``Background`` and there's a bit of padding with the right edge."
msgstr ""
"``Title``\\ 을 선택하고 인스펙터(Inspector)에서 ``Stretch Mode`` 속성을 "
"``Keep Centered``\\ 로 변경하세요. 다음으로 인스펙터(Inspector)에서 ``Rect`` "
"카테고리를 찾아 ``Size`` 속성을 (50, 40)으로 변경해서 배경의 왼쪽 절반만 차지"
"하도록 설정하세요. 다음으로 ``Number`` 노드를 선택하세요. 뷰포트에서 "
"``Layout`` 메뉴를 클릭하고 ``Full Rect``\\ 를 클릭하세요. 노드는 "
"``Background`` 에 맞게 크기가 조절됩니다. 인스펙터(Inspector)로 이동해 "
"``Align`` 속성을 ``Right``\\ 로, ``Valign`` 속성을 ``Center``\\ 로 변경하세"
"요. 텍스트는 ``Background``\\ 의 오른쪽 모서리 중앙에 고정됩니다. 텍스트 노드"
"의 크기를 가로로 조정해서 노드가 ``Background``\\ 의 오른쪽 절반을 차지하고 "
"오른쪽 가장자리에 약간의 여백이 있도록 만드세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:195
msgid ""
"Here's how the nodes' bounding boxes should look in the viewport. Keep it "
"rough, you don't need to place them too precisely for now."
msgstr ""
"뷰포트에서 노드의 경계 사각형이 위와 같이 보여야 합니다. 지금은 너무 정확하"
"게 하지 않고 적당히 해도 됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:199
msgid "Replace the Label's font"
msgstr "Label의 폰트 교체하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:201
msgid ""
"The label's font is too small. We need to replace it. Select the ``Number`` "
"node and in the Inspector, scroll down to the ``Control`` class, and find "
"the ``Custom Font`` category. Click the field next to the ``Font`` property "
"and click on ``New Dynamic Font``. Click on the field again and select Edit."
msgstr ""
"Label의 폰트는 너무 작습니다. 폰트를 교체해야 합니다. ``Number`` 노드를 선택"
"하고 인스펙터(Inspector)에서, ``Control`` 클래스로 스크롤을 내린 뒤, "
"``Custom Font`` 카테고리를 찾으세요. ``Font`` 속성 옆의 영역을 클릭한 다음, "
"``새 Dynamic Font(New Dynamic Font)``\\ 를 클릭하세요. 영역을 다시 클릭한 다"
"음 편집(Edit)을 선택하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:207
msgid ""
"You will enter the ``Dynamic Font`` resource. Unfold the ``Font`` category "
"and click the field next to ``Font Data``. Click the ``Load`` button. In the "
"file browser, navigate down to the assets/font folder and double click "
"``Comfortaa-Bold.ttf`` to open it. You should see the font update in the "
"viewport. Unfold the settings category to change the font size. Set the "
"``Size`` property to a higher value, like ``24`` or ``28``."
msgstr ""
"여러분은 ``DynamicFont`` 리소스 안에 들어오게 됩니다. ``Font`` 카테고리를 펼"
"치고, ``Font Data`` 옆의 영역을 클릭하세요. ``불러오기(Load)`` 버튼을 클릭하"
"세요. 파일 브라우저에서 assets/font 폴더로 간 다음, ``Comfortaa-Bold.ttf``\\ "
"를 더블클릭해서 여세요. 뷰포트에서 폰트가 업데이트된 것을 볼 수 있습니다. "
"Settings 카테고리를 펼치고 Font Size를 바꾸세요. ``Size`` 속성을 ``24``\\ 나 "
"``28``\\ 같이 더 높은 숫자로 설정하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:215
msgid ""
"We now need the text's baseline, the number's lower edge, to align with the "
"HP texture on the left. To do so, still in the ``DynamicFont`` resource, you "
"can tweak the ``Bottom`` property under the ``Extra Spacing`` category. It "
"adds some bottom padding to the text. Click the ``Number`` node in the Scene "
"tab to go back to the node's properties and change the ``Valign`` to "
"``Bottom``. To adjust the text's baseline, click on the font field under the "
"``Custom Font`` category again and tweak the ``Bottom`` property until the "
"text aligns with the ``Title`` node. I used a value of ``2`` pixels."
msgstr ""
"이제 왼쪽의 HP 텍스처에 따라 정렬하기 위해서 텍스트의 기준선, 숫자의 아래쪽 "
"모서리가 필요합니다. 그렇게 하려면 ``DynamicFont`` 리소스에서 ``Extra "
"Spacing`` 카테고리 아래의 ``Bottom`` 속성을 조정할 수 있습니다. 이 속성은 텍"
"스트 아래에 여백을 추가해줍니다. 씬(Scene) 탭에서 ``Number`` 노드를 클릭해 노"
"드의 속성으로 돌아가서 ``Valign``\\ 을 ``Bottom``\\ 으로 변경하세요. 텍스트"
"의 기준선을 조정하려면 ``Custom Font`` 카테고리 아래의 Font 필드를 다시 클릭"
"하고 텍스트가 ``Title`` 노드에 따라 정렬될 때까지 ``Bottom`` 속성을 조절하세"
"요. 저는 ``2`` 픽셀 값을 사용했습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:227
msgid "With a Bottom value of 2 pixels, the Number aligns with the Title"
msgstr "Bottom 에 2픽셀 값으로, Number는 Title에 따라 정렬되었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:229
msgid ""
"With this, we finished the hardest part of the GUI. Congratulations! Let's "
"move on to the simpler nodes."
msgstr ""
"이것으로 GUI의 가장 어려운 부분을 완성했습니다. 축하합니다! 더 간단한 노드로 "
"넘어 갑시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:233
msgid "Add the progress bar"
msgstr "프로그레스 바 추가하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:235
msgid ""
"We need one last element to complete our life bar: the gauge itself. Godot "
"ships with a ``TextureProgress`` node that has everything we need."
msgstr ""
"체력 바를 완성하려면 마지막 요소인 게이지가 필요합니다. Godot는 "
"``TextureProgress`` 노드로 우리가 필요로 하는 모든 것을 제공합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:238
msgid ""
"Select the Bar node and add a ``TextureProgress`` inside of it. Name it "
"``Gauge``. In the inspector unfold the ``Textures`` section. Head to the "
"FileSystem dock and drag and drop the ``lifebar_bg.png`` texture onto the "
"``Under`` slot. Do the same with the ``lifebar_fill.png`` image and drop it "
"onto the ``Progress`` slot. Under the ``Range`` class in the inspector, "
"change the ``Value`` property to ``50`` to see the gauge fill up."
msgstr ""
"Bar 노드를 선택하고, 안에 ``TextureProgress``\\ 를 추가하세요. 이름은 "
"``Gauge``\\ 라고 지으세요. 인스펙터(Inspector)에서 ``Textures`` 섹션을 펼치세"
"요. 파일시스템(FileSystem) 독으로 가서 ``lifebar_bg.png`` 텍스처를 ``Under`` "
"슬롯으로 끌어다 놓으세요. 마찬가지로 ``lifebar_fill.png`` 이미지는 "
"``Progress`` 슬롯에 끌어다 놓으세요. 인스펙터(Inspector)의 ``Range`` 클래스 "
"아래에서, ``Value`` 속성을 ``50``\\ 으로 바꾸면 게이지가 차오릅니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:246
msgid "With only five ``Control`` nodes, our first bar is ready to use."
msgstr "5개의 ``Control`` 노드만으로, 첫 번째 바를 사용할 수 있게 되었습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:250
msgid ""
"That's it, our life bar is ready. This last part was quick, wasn't it? "
"That's thanks to our robust container setup."
msgstr ""
"체력 바가 준비됐습니다. 마지막 부분은 빨리 끝났어요.. 그렇지 않나요? 강력한 "
"컨테이너 설정 덕분입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:254
msgid "Design the bomb and emerald counters"
msgstr "폭탄과 에메랄드 카운터 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:256
msgid ""
"The bomb and emerald counters are like the bar's ``Count`` node. So we'll "
"duplicate it and use it as a template."
msgstr ""
"폭탄과 에메랄드 카운터는 Bar의 ``Count`` 노드와 비슷합니다. 따라서 ``Count`` "
"노드를 복제해서 템플릿으로 사용할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:259
msgid ""
"Under the ``Bar`` node, select ``Count`` and press :kbd:`Ctrl + D` to "
"duplicate it. Drag and drop the new node under the ``Counters`` "
"``HBoxContainer`` at the bottom of the scene tree. You should see it resize "
"automatically. Don't worry about this for now, we'll fix the size soon."
msgstr ""
"``Bar`` 노드 아래에 있는 ``Count``\\ 를 선택한 다음, :kbd:`Ctrl + D`\\ 를 눌"
"러서 복제하세요. 복제한 노드를 씬 트리의 가장 아래에 있는 ``HBoxContainer`` "
"안의 ``Counters`` 아래에 끌어다 놓으세요. 자동으로 노드의 크기가 조절됩니다. "
"나중에 크기를 고칠테니 지금은 걱정하지 맙시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:264
msgid ""
"Rename the ``Count2`` node to ``Counter``. Unlike the bars, we want the "
"number to be on the left, and an icon to sit on the right. The setup is the "
"same: we need a background (a ``NinePatchRect``), the title, and the number "
"nodes. The ``Title`` node is a ``TextureRect``, so it's what we need to "
"display the icon. In the scene tree, select the ``Title`` node, and rename "
"it to ``Icon``."
msgstr ""
"``Count`` 노드의 이름을 ``Counter``\\ 로 변경하세요. Bars와 달리, 왼쪽에 숫자"
"가 있고 오른쪽에 아이콘이 있어야 합니다. 설정은 동일합니다. 배경"
"(``NinePatchRect``), 제목, 숫자 노드가 필요합니다. ``Title`` 노드는 아이콘을 "
"표시해야 하므로 ``TextureRect``\\ 가 됩니다. 씬 트리에서 ``Title`` 노드를 선"
"택하고 이름을 ``Icon``\\ 으로 변경하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:273
msgid "Here's how your node tree should look so far"
msgstr "현재까지 작업한 노드 트리의 모습입니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:275
msgid ""
"With the ``Icon`` node selected, in the inspector, scroll to the top to see "
"the ``Texture`` slot. Head to the FileSystem dock on the left and select the "
"``bombs_icon.png``. Drag and drop it onto the ``Texture`` slot. In the Scene "
"Tab select both the ``Icon`` and the ``Number`` nodes. Click the Layout menu "
"in the toolbar at the top of the viewport and select ``Full Rect``. Both "
"nodes will update to fit the size of the ``Background``."
msgstr ""
"``Icon`` 노드를 선택한 상태에서 인스펙터(Inspector)에서 ``Texture`` 슬롯이 보"
"일 때까지 위로 스크롤하세요. 왼쪽의 파일시스템(FileSystem) 독으로 가서 "
"``bombs_icon.png``\\ 를 선택하세요. ``Texture`` 슬롯에 끌어다 놓으세요. 씬"
"(Scene) 탭에서 ``Icon``\\ 과 ``Number`` 노드를 모두 선택하세요. 뷰포트 위쪽 "
"툴바의 레이아웃(Layout) 메뉴에서 ``사각형 전체(Full Rect)``\\ 를 선택하세요. "
"두 노드 모두 ``Background``\\ 의 크기에 맞게 업데이트됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:285
msgid "The nodes anchor to the entire Background, but their position is off"
msgstr "노드는 전체 Background에 고정됐지만, 위치가 어긋납니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:287
msgid ""
"Let's change the ``Number``'s align properties to move it to the left and "
"center of the ``Background``. Select the ``Number`` node, change its "
"``Align`` property to left and the ``Valign`` property to center. Then "
"resize its left edge a bit to add some padding between the left edge of the "
"``Background`` and the text."
msgstr ""
"``Number``\\ 의 Align 속성을 변경해서 ``Background``\\ 의 왼쪽 중앙으로 이동"
"해 보겠습니다. ``Number`` 노드를 선택하고 ``Align`` 속성을 Left로, "
"``Valign`` 속성을 Center로 변경하세요. 그리고 왼쪽 모서리를 살짝 움직여서 "
"``Background``\\ 의 왼쪽 가장자리과 텍스트 사이에 여백을 추가하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:295
msgid "The Number node aligned to the left and center"
msgstr "왼쪽 중앙에 정렬된 Number 노드"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:297
msgid ""
"To overlap the Icon and the background, we need a few tweaks. First, our "
"background is a bit too tall. It's because it's inside a margin container "
"that is controlled by the top-most GUI node. Select the GUI node at the top "
"of the scene tree and downsize it vertically so that it's as thin as "
"possible. You'll see the gauge prevents you from making it too small. A "
"container cannot be smaller than the minimal size of its children. The "
"container's margins also weigh in."
msgstr ""
"Icon과 Background를 겹치려면, 몇 가지 조정이 필요합니다. 먼저 Background가 예"
"상보다 약간 큽니다. 이는 Background가 최상위 GUI 노드에서 제어되는 "
"MarginContainer에 속해있기 때문입니다. 씬 트리 맨 위에 있는 GUI 노드를 선택하"
"고 최대한 가늘게 세로로 크기를 줄여보세요. 게이지가 너무 작아지는 것을 방지하"
"는 것을 볼 수 있습니다. 컨테이너는 자식을 자식의 최소 크기보다 더 작게 만들 "
"수 없습니다. 컨테이너의 마진도 마찬가지입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:305
msgid ""
"Select the Icon, click the Layout menu, and select ``Full Rect`` to re-"
"center it. We need it to anchor to the ``Background``'s right edge. Open the "
"Layout menu again and select ``Center Right``. Move the icon up so it is "
"centered vertically with the ``Background``."
msgstr ""
"Icon을 선택하고 레이아웃(Layout) 메뉴를 클릭한 다음 ``사각형 전체(Full "
"Rect)``\\ 를 선택해서 다시 중앙에 배치하세요. 다시 레이아웃(Layout) 메뉴를 열"
"고 ``오른쪽 중앙(Center Right)``\\ 을 선택하세요. Icon을 위로 움직여서 수직 "
"기준으로 ``Background``\\ 의 중앙에 배치하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:313
msgid ""
"The bomb icon anchors to the Background's right edge. Resize the Counter "
"container to see the Icon node stick to its right side"
msgstr ""
"폭탄 아이콘은 Background의 오른쪽 모서리에 고정됩니다. Counter 컨테이너의 크"
"기를 조절해 Icon 노드가 오른쪽 모서리에 고정된 것을 확인해보세요"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:316
msgid ""
"Because we duplicated the ``Counter`` from the bar's ``Count``, the "
"``Number`` node's font is off. Select the ``Number`` node again, head to the "
"``Font`` property, and click it to access the ``DynamicFont`` resource. In "
"the ``Extra Spacing`` section, change the ``Bottom`` value to ``0`` to reset "
"the font's baseline. Our counter now works as expected."
msgstr ""
"Bar의 ``Count``\\ 에서 ``Counter``\\ 를 복제했기 때문에, ``Number`` 노드의 폰"
"트가 꺼져 있습니다. ``Number`` 노드를 다시 선택하고 ``Font`` 속성을 클릭해서 "
"``DynamicFont`` 리소스에 접근하세요. ``Extra Spacing`` 섹션에서 ``Bottom`` 값"
"을 ``0``\\ 으로 바꿔서 폰트의 기준선을 초기화하세요. Counter는 이제 생각대로 "
"작동합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:323
msgid ""
"Let's make the ``Counters`` anchor to the right edge of the viewport. To do "
"so, we need to set the ``Bars`` container take all the available horizontal "
"space it can. Select the ``Bars`` node and scroll down to the ``Size Flags`` "
"category. In the ``Horizontal`` category, check the ``Expand`` value. The "
"``Bars`` node should resize and push the counter to the right side of the "
"screen."
msgstr ""
"``Counters`` 노드를 뷰토프의 오른쪽 가장자리에 고정해봅시다. 그렇게 하려면 "
"``Bars`` 컨테이너가 가능한 전체 수평 공간을 차지하도록 설정해야 합니다. "
"``Bars`` 노드를 선택하고 ``Size Flags`` 카테고리까지 아래로 스크롤하세요. "
"``Horizontal`` 카테고리에서 ``Expand`` 값을 체크하세요. ``Bars`` 노드의 크기"
"가 조절되면서 Counter 노드를 화면의 오른쪽 모서리로 밀어냅니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:331
msgid ""
"An expanding container eats all the space it can from its parent, pushing "
"everything else along the way"
msgstr ""
"확장하는 컨테이너가 부모가 정한 영역 전체를 차지하면서, 나머지를 저 멀리로 밀"
"어냅니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:335
msgid "Turn the bar and counter into reusable UI components"
msgstr "Bar와 Counter를 다시 사용할 수 있는 UI 구성 요소로 바꾸기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:337
msgid ""
"We have one bar and one counter widget. But we need two of each. We may need "
"to change the bars' design or their functionality later on. It'd be great if "
"we could have a single scene to store a UI element's template, and child "
"scenes to work on variations. Godot lets us do this with Inherited Scenes."
msgstr ""
"우리에게는 Bar 위젯 하나와 Counter 위젯 하나가 있습니다. 하지만 각각 2개씩 필"
"요합니다. 나중에는 Bar의 디자인이나 기능을 변경해야 할 수도 있습니다. UI 요소"
"의 템플릿을 저장할 수 있는 단일 씬과 변형 작업을 위한 자식 씬이 있으면 좋을 "
"것 같습니다. Godot에서는 이를 상속 씬(Inherited Scene)으로 제공합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:343
msgid ""
"Let's save both the ``Counter`` and the ``Bar`` branches as separate scenes "
"that we'll reduce to create the ``LifeBar``, the ``EnergyBar``, the "
"``BombCounter``, and the ``EmeraldCounter``. Select the ``Bar`` "
"HBoxContainer. Right click on it and click on ``Save Branch as Scene``. Save "
"the scene as ``Bar.tscn``. You should see the node branch turn it to a "
"single ``Bar`` node."
msgstr ""
"``Counter``\\ 와 ``Bar`` 가지를 각각 ``LifeBar``\\ 와 ``EnergyBar``, "
"``BombCounter``\\ 와 ``EmeraldCounter``\\ 로 만들기 위해서 개별 씬으로 저장합"
"시다. ``Bar`` HBoxContainer를 선택하세요. 컨테이너를 우클릭해서 ``가지를 씬으"
"로 저장(Save Branch as Scene)``\\ 을 클릭하세요. 씬을 ``Bar.tscn``\\ 으로 저"
"장하세요. 노드 가지가 하나의 ``Bar`` 노드로 바뀐 것을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:352
msgid ""
"A scene is a tree of nodes. The topmost node is the tree's **root**, and the "
"children at the bottom of the hierarchy are **leaves**. Any node other than "
"the root along with one or more children is a **branch**. We can encapsulate "
"node branches into separate scenes, or load and merge them from other scenes "
"into the active one. Right click on any node in the Scene dock and select "
"``Save Branch as Scene`` or ``Merge from Scene``."
msgstr ""
"씬은 노드로 이루어진 트리입니다. 최상위 노드는 트리의 **루트(Root)**\\ 이고, "
"계층 구조의 맨 아래 자식들은 **잎(leaves)**\\ 입니다. 루트 노드를 제외하고 하"
"나 이상의 자식을 갖는 노드는 **분기(Branch)**\\ 입니다. 노드 분기를 개별 씬으"
"로 캡슐화하거나 다른 씬에서 활성 씬으로 불러와서 병합할 수 있습니다. 씬"
"(Scene) 독에서 아무 노드나 우클릭하고 ``가지를 씬으로 저장하기(Save Branch "
"as Scene)``\\ 나 ``다른 씬에서 병합하기(Merge from Scene)``\\ 를 선택하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:360
msgid ""
"Then, select the ``Counter`` node and do the same. Right click, ``Save "
"Branch as Scene``, and save it as ``Counter.tscn``. A new edit scene icon "
"appears to the right of the nodes in the scene tree. Click on the one next "
"to ``Bar`` to open the corresponding scene. Resize the ``Bar`` node so that "
"its bounding box fits its content. The way we named and placed the Control "
"nodes, we're ready to inherit this template and create the life bar. It's "
"the same for the ``Counter``."
msgstr ""
"그런 다음 ``Counter`` 노드를 선택하고 같은 작업을 반복하세요. 오른쪽 버튼을 "
"클릭하고 ``분기를 씬으로 저장하기(Save Branch as Scene)``\\ 를 누른 다음 "
"``Counter.tscn``\\ 으로 저장하세요. 씬 트리 노드의 오른쪽에 새로운 편집 씬 아"
"이콘이 나타납니다. ``Bar`` 옆에 있는 것을 클릭해서 씬을 여세요. ``Bar``\\ 의 "
"경계 사각형 크기를 조절해서 내용물에 맞추세요. Control 노드의 이름을 짓고 배"
"치한 방식으로 이 템플릿을 상속받아 체력 바를 만들 준비가 되었습니다. "
"``Counter``\\ 의 경우도 마찬가지입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:370
msgid "With no extra changes, our Bar is ready to use"
msgstr "추가 변경 사항 없이 Bar를 사용할 수 있습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:373
msgid "Use scene inheritance to create the remaining elements"
msgstr "씬 상속을 사용해서 나머지 요소 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:375
msgid ""
"We need two bars that work the same way: they should feature a label on the "
"left, with some value, and a horizontal gauge on the right. The only "
"difference is that one has the HP label and is green, while the other is "
"called EP and is yellow. Godot gives us a powerful tool to create a common "
"base to reuse for all bars in the game: **inherited scenes**."
msgstr ""
"왼쪽은 값이 있는 레이블, 오른쪽은 수평 게이지로 구성된 동일한 방식으로 작동하"
"는 두 개의 바가 필요합니다. 유일한 차이점은 하나는 HP 레이블이 있는 녹색 바이"
"고 다른 하나는 EP 레이블이 있는 노란색 바인 점입니다. Godot는 우리가 게임의 "
"모든 바에 재사용할 수 있는 공통 기반을 만드는 강력한 툴인 **상속 씬**\\ 을 제"
"공합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:383
msgid ""
"Inherited scenes help us keep the GUI scene clean. In the end, we will only "
"have containers and one node for each UI component."
msgstr ""
"상속 씬은 GUI 씬을 깔끔하게 유지하도록 도와줍니다. 결과적으로 각 UI 요소들이 "
"컨테이너와 노드 하나만으로 구성됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:386
msgid ""
"On an inherited scene, you can change any property of every node in the "
"inspector, aside from its name. If you modify and save the parent scene, all "
"the inherited scenes update to reflect the changes. If you change a value in "
"the inherited scene, it will always override the parent's property. It's "
"useful for UIs, as they often require variations of the same elements. In "
"general, in UI design, buttons, panels etc. share a common base style and "
"interactions. We don't want to copy it over to all variations manually."
msgstr ""
"상속 씬에서는 이름을 제외하고 인스펙터(Inspector)에 있는 모든 노드의 속성을 "
"변경할 수 있습니다. 부모 씬을 수정하고 저장하면 모든 상속 씬이 업데이트되어 "
"변경 사항을 반영합니다. 상속 씬에서 값을 변경하면 항상 부모 속성을 재정의합니"
"다. 동일한 요소에 대해 변형이 필요한 경우가 많기 때문에 UI에 유용합니다. 일반"
"적으로 UI 디자인에서 버튼, 패널 등은 공통 기본 스타일과 상호 작용을 공유합니"
"다. 우리는 같은 종류의 모든 변형 작업물에 수동으로 변경 사항을 복사하고 싶지 "
"않습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:395
msgid ""
"A reload icon will appear next to the properties you override. Click it to "
"reset the value to the parent scene's default."
msgstr ""
"재정의한 속성 옆에 다시 불러오기 아이콘이 나타납니다. 값을 부모 씬의 기본값으"
"로 재설정하려면 클릭하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:400
msgid ""
"Think of scene inheritance like the node tree, or the ``extends`` keyword in "
"GDScript. An inherited scene does everything like its parent, but you can "
"override properties, resources and add extra nodes and scripts to extend its "
"functionality."
msgstr ""
"노드 트리와 같은 씬 상속 또는 GDScript의 ``extends`` 키워드를 떠올려 보세요. "
"상속 씬은 부모와 똑같은 모든 작업을 수행하지만 속성, 리소스를 재정의하고 추"
"가 노드 및 스크립트를 추가해 기능을 확장할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:406
msgid "Inherit the Bar Scene to build the LifeBar"
msgstr "LifeBar를 만들기 위해 Bar 씬 상속받기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:408
msgid ""
"Go to ``Scene -> New Inherited Scene`` to create a new type of ``Bar``. "
"Select the Bar scene and open it. You should see a new [unsaved] tab, that's "
"like your ``Bar``, but with all nodes except the root in grey. Press :kbd:"
"`Ctrl + S` (:kbd:`Cmd + S` on macOS) to save the new inherited scene and "
"name it ``LifeBar``."
msgstr ""
"``씬(Scene) -> 새 상속 씬(New Inherited Scene)``\\ 으로 가서 새 타입의 "
"``Bar``\\ 를 만드세요. Bar 씬을 선택하고 여세요. ``Bar``\\ 와 비슷하지만 루트"
"를 제외한 모든 노드가 회색으로 표시된 새 [저장되지 않은]([unsaved]) 탭이 표시"
"되어야 합니다. :kbd:`Ctrl + S` (macOS는 :kbd:`Cmd + S`)를 눌러 새 상속 씬을 "
"저장하고 이름을 ``LifeBar``\\ 로 지으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:416
msgid "You can't rename grey nodes. This tells you they have a parent scene"
msgstr ""
"회색 노드의 이름은 변경할 수 없습니다. 이는 부모 씬이 존재함을 알려줍니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:418
msgid ""
"First, rename the root or top level node to ``LifeBar``. We always want the "
"root to describe exactly what this UI component is. The name differentiates "
"this bar from the ``EnergyBar`` we'll create next. The other nodes inside "
"the scene should describe the component's structure with broad terms, so it "
"works with all inherited scenes. Like our ``TextureProgress`` and ``Number`` "
"nodes."
msgstr ""
"먼저 루트 혹은 최상위 계층 노드의 이름을 ``LifeBar``\\ 로 변경하세요. 우리는 "
"루트가 항상 이 UI 구성 요소가 정확히 어떤 것인지를 설명하기를 원합니다. 이 이"
"름이 바와 나중에 만들 ``EnergyBar``\\ 를 구별합니다. 씬의 다른 노드는 구성 요"
"소의 구조를 광범위하게 설명해야 하므로 모든 상속 씬에서도 설명되어야 합니다. "
"마치 ``TextureProgress``\\ 나 ``Number``\\ 노드처럼요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:427
msgid ""
"If you've ever done web design, it's the same spirit as working with CSS: "
"you create a base class, and add variations with modifier classes. From a "
"base button class, you'll have button-green and button-red variations for "
"the user to accept and refuse prompts. The new class contains the name of "
"the parent element and an extra keyword to explain how it modifies it. When "
"we create an inherited scene and change the name of the top level node, "
"we're doing the same thing."
msgstr ""
"웹 디자인을 해본 적이 있다면 CSS로 작업하는 것과 같다고 할 수 있습니다. 기본 "
"클래스를 만들고 수정자(modifier) 클래스로 변화를 추가하는 것이죠. 기본 버튼 "
"클래스에는 사용자가 프롬프트를 수락하거나 거부할 수 있는 녹색 및 변형인 빨간"
"색 버튼이 있습니다. 새 클래스에는 부모 요소의 이름과 이를 수정하는 방법을 설"
"명하는 추가 키워드가 포함됩니다. 상속 씬을 만들고 최상위 노드의 이름을 변경"
"할 때 같은 작업을 수행합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:436
msgid "Design the EnergyBar"
msgstr "EnergyBar 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:438
msgid ""
"We already setup the ``LifeBar``'s design with the main ``Bar`` scene. Now "
"we need the ``EnergyBar``."
msgstr ""
"이미 메인 ``Bar`` 씬으로 ``LifeBar``\\ 의 디자인을 마쳤습니다. 이제 필요한 것"
"은 ``EnergyBar``\\ 입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:441
msgid ""
"Let's create a new inherited scene, and once again select the ``Bar.tscn`` "
"scene and open it. Double-click on the ``Bar`` root node and rename it to "
"``EnergyBar``. Save the new scene as ``EnergyBar.tscn``. We need to replace "
"the HP texture with EP one, and to change the textures on the gauge."
msgstr ""
"새 상속 씬을 만들고 다시 한 번 ``Bar.tscn`` 씬을 선택하고 열어보세요. "
"``Bar`` 루트 노드를 두 번 클릭하고 이름을 ``EnergyBar``\\ 로 변경하세요. 새 "
"씬을 ``EnergyBar.tscn``\\ 으로 저장하세요. HP 텍스처를 EP로 교체하고 게이지"
"의 텍스처를 변경해야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:447
msgid ""
"Head to the FileSystem dock on the left, select the ``Title`` node in the "
"Scene tree and drag and drop the ``label_EP.png`` file onto the texture "
"slot. Select the ``Number`` node and change the ``Text`` property to a "
"different value like ``14``."
msgstr ""
"왼쪽의 파일시스템(FileSystem) 독으로 가서 씬 트리의 ``Title`` 노드를 선택하"
"고 ``laber_EP.png`` 파일을 Texture 슬롯으로 끌어다 놓으세요. ``Number`` 노드"
"를 선택하고 ``Text`` 속성을 ``14``\\ 처럼 다른 값으로 변경하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:452
msgid ""
"You'll notice the EP texture is smaller than the HP one. We should update "
"the ``Number``'s font size to better fit it. A font is a resource. All the "
"nodes in the entire project that use this resource will be affected by any "
"property we change. You can try to change the size to a huge value like "
"``40`` and switch back to the ``LifeBar`` or the ``Bar`` scenes. You will "
"see the text increased in size."
msgstr ""
"EP 텍스처가 HP 텍스처보다 더 작은 것 같습니다. 텍스처 크기에 알맞도록 "
"``Number``의 폰트 크기를 업데이트해야 합니다. 폰트는 리소스입니다. 이 리소스"
"를 사용하는 전체 프로젝트의 모든 노드는 변경된 속성에 영향을 받습니다. 크기"
"를 ``40``\\ 같이 큰 값으로 변경하고 ``LifeBar`` 또는 ``Bar`` 장면으로 다시 전"
"환할 수 있습니다. 텍스트의 크기가 커진 것을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:461
msgid "If we change the font resource, all the nodes that use it are affected"
msgstr ""
"폰트 리소스를 변경하게 되면, 이 리소스를 사용하는 모든 노드가 영향을 받습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:464
msgid ""
"To change the font size on this node only, we must create a copy of the font "
"resource. Select the ``Number`` node again and click on the wrench and "
"screwdriver icon on the top right of the inspector. In the drop-down menu, "
"select the ``Make Sub-Resources Unique`` option. Godot will find all the "
"resources this node uses and create unique copies for us."
msgstr ""
"이 노드에서만 폰트 크기를 변경하려면 폰트 리소스의 복사본을 만들어야 합니다. "
"``Number`` 노드를 다시 선택하고, 인스펙터(Inspector)의 오른쪽 상단에 있는 렌"
"치와 스크류 드라이버 아이콘을 클릭하세요. 드롭다운 메뉴에서 ``하위 리소스를 "
"유일하게 만들기(Make Sub-Resources Unique)``\\ 옵션을 선택하세요. Godot는 이 "
"노드에서 사용하는 모든 리소스를 찾아서 유일한 복사본을 만들어 줍니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:472
msgid "Use this option to create unique copies of the resources for one node"
msgstr ""
"이 설정을 사용해서 하나의 노드에 대해 유일한 리소스 사본을 만들었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:476
msgid ""
"When you duplicate a node from the Scene tree, with :kbd:`Ctrl + D` (:kbd:"
"`Cmd + D` on macOS), it shares its resources with the original node. You "
"need to use ``Make Sub-Resources Unique`` before you can tweak the resources "
"without affecting the source node."
msgstr ""
"씬 트리에서 :kbd:`Ctrl + D`(macOS의 경우 :kbd:`Cmd + D`)로 노드를 복제하면 원"
"본 노드와 리소스를 공유합니다. 원래의 노드에 영향을 주지 않고 리소스를 수정하"
"려면 ``하위 리소스를 유일하게 만들기(Make Sub-Resources Unique)``\\ 를 사용해"
"야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:481
msgid ""
"Scroll down to the ``Custom Font`` section and open ``Font``. Lower the "
"``Size`` to a smaller value like ``20`` or ``22``. You may also need to "
"adjust the ``Bottom`` spacing value to align the text's baseline with the EP "
"label on the left."
msgstr ""
"``Custom Font`` 섹션까지 아래로 스크롤해 ``Font``\\ 를 여세요. ``Size``\\ 를 "
"``20``\\ 이나 ``22``\\ 처럼 더 작은 값으로 낮추세요. 텍스트의 기준선을 왼쪽"
"의 EP 레이블에 정렬하기 위해 ``Bottom`` 영역 값을 조정해야 할 수도 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:488
msgid "The EP Count widget, with a smaller font than its HP counterpart"
msgstr "HP보다 더 작은 폰트로 된 EP의 Count 위젯"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:490
msgid ""
"Now, select the ``TextureProgress`` node. Drag the ``energy_bar_bg.png`` "
"file onto the ``Under`` slot and do the same for ``energy_bar_fill.png`` and "
"drop it onto the ``Progress`` texture slot."
msgstr ""
"이제 ``TextureProgress`` 노드를 선택하세요. ``energy_bar_bg.png`` 파일을 "
"``Under`` 슬롯으로 끌어다 놓고 ``energy_bar_fill.png``\\ 도 ``Progress`` "
"Texture 슬롯에 끌어다 놓으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:494
msgid ""
"You can resize the node vertically so that its bounding rectangle fits the "
"gauge. Do the same with the ``Count`` node until its size aligns with that "
"of the bar. Because the minimal size of ``TextureProgress`` is set based on "
"its textures, you won't be able to downsize the ``Count`` node below that. "
"That is also the size the ``Bar`` container will have. You may downscale "
"this one as well."
msgstr ""
"경계 사각형이 게이지에 맞도록 노드의 크기를 수직으로 조절할 수 있습니다. 노드"
"의 크기가 바 크기와 일치할 때까지 ``Count`` 노드도 똑같이 조절해주세요. "
"``TextureProgress``\\ 의 최소 크기는 텍스처를 기반으로 설정되기 때문에 "
"``Count`` 노드의 크기보다 작게 줄일 수 없습니다. 이는 ``Bar`` 컨테이너가 조절"
"될 크기이기도 합니다. 이것도 똑같이 크기를 줄이세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:501
msgid ""
"Last but not least, the ``Background`` container has a minimum size that "
"makes it a bit large. Select it and in the ``Rect`` section, change the "
"``Min Size`` property down to ``80`` pixels. It should resize automatically "
"and the ``Title`` and ``Number`` nodes should reposition as well."
msgstr ""
"마지막으로, 중요한 점은 ``Background`` 컨테이너가 최소 크기(minimum size) 속"
"성을 가지기 때문에 원래보다 조금 더 커졌습니다. 컨테이너를 선택하고 ``Rect`` "
"섹션에서 ``Min Size`` 속성을 ``80`` 픽셀로 줄이세요. 자동으로 크기가 조절되"
"며 ``Title`` 및 ``Number`` 노드가 재배치됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:509
msgid "The Count looks better now it's a bit smaller"
msgstr "Count는 더 작아져서 보기 좋아졌습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:513
msgid ""
"The Count node's size affects the position of the TextureProgress. As we'll "
"align our bars vertically in a moment, we're better off using the Counter's "
"left margin to resize our EP label. This way both the EnergyBar's Count and "
"the LifeBar's Count nodes are one hundred pixels wide, so both gauges will "
"align perfectly."
msgstr ""
"Count 노드의 크기는 TextureProgress의 위치에 영향을 줍니다. 우리는 바를 수직"
"으로 배열할 것이기 때문에 Counter의 왼쪽 마진을 사용해 EP 레이블의 크기를 조"
"정하는 것이 좋습니다. 이렇게 하면 EnergyBar의 Count와 LifeBar의 Count 노드 모"
"두 너비가 100픽셀이므로 두 게이지가 완벽하게 배열됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:520
msgid "Prepare the bomb and emerald counters"
msgstr "폭탄과 에메랄드 카운터 준비하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:522
msgid ""
"Let us now take care of the counters. Go to ``Scene -> New Inherited Scene`` "
"and select the ``Counter.tscn`` as a base. Rename the root node as "
"``BombCounter`` too. Save the new scene as ``BombCounter.tscn``. That's all "
"for this scene."
msgstr ""
"이제 카운터를 다루어봅시다. ``씬(Scene) -> 새 상속 씬(New Inherited Scene)``"
"\\ 으로 가서, ``Counter.tscn``\\ 을 기본 씬으로 선택하세요. 루트 노드의 이름"
"도 ``BombCounter``\\ 로 변경하세요. 새 씬을 ``BombCounter.tscn``\\ 으로 저장"
"하세요. 이게 전부입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:529
msgid "The bomb counter is the same as the original Counter scene"
msgstr "폭탄 카운터는 원래 Counter 씬과 같습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:531
msgid ""
"Go to ``Scene -> New Inherited Scene`` again and select ``Counter.tscn`` "
"once more. Rename the root node ``EmeraldCounter`` and save the scene as "
"``EmeraldCounter.tscn``. For this one, we mainly need to replace the bomb "
"icon with the emerald icon. In the FileSystem tab, drag the ``emeralds_icon."
"png`` onto the ``Icon`` node's ``Texture`` slot. ``Icon`` already anchors to "
"the right edge of the ``Background`` node so we can change its position and "
"it will scale and reposition with the ``EmeraldCounter`` container. Shift "
"the emerald icon a bit to the right and down. Use the Arrow Keys on the "
"keyboard to nudge its position. Save, and we're done with all the UI "
"elements."
msgstr ""
"다시 ``씬(Scene) -> 새 상속 씬(New Inherited Scene)``\\ 으로 가서, 다시 "
"``Counter.tscn``\\ 을 선택하세요. 루트 노드의 이름을 ``EmeraldCounter``\\ 로 "
"변경하고, 씬을 ``EmeraldCounter.tscn``\\ 으로 저장하세요. 이 씬에서는 폭탄 아"
"이콘을 에메랄드 아이콘으로 변경해야 합니다. 파일시스템(FileSystem) 탭에서 "
"``emeralds_icon.png``\\ 를 ``Icon`` 노드의 ``Texture`` 슬롯으로 끌어다 놓으세"
"요. ``Icon``\\ 은 이미 ``Background`` 노드의 오른쪽 모서리에 고정되어 있으므"
"로 노드의 위치를 변경하면 ``EmeraldCounter`` 컨테이너에 따라 크기와 위치가 조"
"정됩니다. 에메랄드 아이콘을 오른쪽 아래로 약간 움직이세요. 키보드의 화살표 키"
"로 위치를 미세하게 조정하세요. 저장하면 모든 UI 요소가 완성됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:544
msgid "The emerald counter should look something like this"
msgstr "에메랄드 카운터는 위와 같이 보여야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:547
msgid "Add the UI components to the final GUI"
msgstr "최종 GUI에 UI 구성 요소들 추가하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:549
msgid ""
"Time to add all the UI elements to the main GUI scene. Open the ``GUI.tscn`` "
"scene again, and delete the ``Bar`` and ``Counter`` nodes. In the FileSystem "
"dock, find the ``LifeBar.tscn`` and drag and drop it onto the ``Bars`` "
"container in the scene tree. Do the same for the ``EnergyBar``. You should "
"see them align vertically."
msgstr ""
"메인 GUI 씬에 모든 UI 요소를 추가할 시간입니다. 다시 ``GUI.tscn`` 씬을 열고, "
"``Bar``\\ 와 ``Counter`` 노드를 삭제하세요. 파일 시스템(FileSystem) 독에서 "
"``LifeBar.tscn``\\ 을 찾아 씬 트리의 ``Bars`` 컨테이너에 끌어다 놓으세요. "
"``EnergyBar``\\ 에도 똑같이 하세요. 두 노드는 수직으로 정렬됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:557
msgid "The LifeBar and the EnergyBar align automatically"
msgstr "LifeBar와 EnergyBar가 자동으로 정렬됩니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:559
msgid ""
"Now, drag and drop the ``BombCounter.tscn`` and ``EmeraldCounter.tscn`` "
"scenes onto the ``Counters`` node. They'll resize automatically."
msgstr ""
"이제 ``BombCounter.tscn``\\ 와 ``EmeraldCounter.tscn`` 씬을 ``Counters`` 노드"
"에 끌어다 놓으세요. 자동으로 크기가 조절됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:564
msgid "The nodes resize to take all the available vertical space"
msgstr "노드는 가능한 모든 수직 공간을 차지하도록 크기를 조절합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:566
msgid ""
"To let the ``EmeraldCounter`` and ``BombCounter`` use the size we defined in "
"``Counter.tscn``, we need to change the ``Size Flags`` on the ``Counters`` "
"container. Select the ``Counters`` node and unfold the ``Size Flags`` "
"section in the Inspector. Uncheck the ``Fill`` tag for the ``Vertical`` "
"property, and check ``Shrink Center`` so the container centers inside the "
"``HBoxContainer``."
msgstr ""
"``EmeraldCounter``\\ 와 ``BombCounter``\\ 가 ``Counter.tscn``\\ 에서 정의한 "
"크기를 사용하도록 하려면, ``Counters`` 컨테이너의 ``Size Flags``\\ 를 변경해"
"야 합니다. ``Counters`` 노드를 선택하고 인스펙터(Inspector)에서 ``Size "
"Flags`` 섹션을 펼치세요. ``Vertical`` 속성에 있는 ``Fill`` 태그의 체크를 풀"
"고, ``Shrink Center``\\ 를 체크하면 컨테이너가 ``HBoxContainer`` 내부의 중앙"
"에 옵니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:575
msgid "Now both counters have a decent size"
msgstr "이제 카운터들의 크기가 모두 적당합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:579
msgid ""
"Change the ``Min Size`` property of the ``Counters`` container to control "
"the height of the counters' background."
msgstr ""
"Counters의 배경 높이를 조정하려면 ``Counters`` 컨테이너의 ``Min Size`` 속성"
"을 변경하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:582
msgid ""
"We have one small issue left with the EP label on the EnergyBar: the 2 bars "
"should align vertically. Click the icon next to the ``EnergyBar`` node to "
"open its scene. Select the ``Count`` node and scroll down to the ``Custom "
"Constants`` section. Add a ``Margin Left`` of ``20``. In the ``Rect`` "
"section set the node's ``Min Size`` back to 100, the same value as on the "
"LifeBar. The ``Count`` should now have some margin on the left. If you save "
"and go back to the GUI scene, it will be aligned vertically with the "
"``LifeBar``."
msgstr ""
"EnergyBar의 EP 레이블에 한 가지 작은 문제가 남아 있습니다. 두 바가 수직으로 "
"정렬되어야 합니다. ``EnergyBar`` 노드 옆의 아이콘을 클릭해서 노드의 씬을 여세"
"요. ``Count`` 노드를 선택하고 ``Custom Constants(Theme Overrides)`` 섹션까지 "
"아래로 스크롤하세요. ``Margin Left``\\ 를 ``20``\\ 으로 설정하세요. ``Rect`` "
"섹션에서 노드의 ``Min Size``\\ 값을 LifeBar와 동일하게 100으로 돌려놓으세요. "
"``Count``\\ 의 왼쪽에 이제 약간의 여백이 생깁니다. 저장하고 다시 GUI 씬으로 "
"돌아가면 ``Count``\\ 가 ``LifeBar``\\ 와 수직으로 정렬됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:593
msgid "The 2 bars align perfectly"
msgstr "완벽하게 정렬된 두 바"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:597
msgid ""
"We could have set up the ``EnergyBar`` this way a few moments ago. But this "
"shows you that you can go back to any scene anytime, tweak it, and see the "
"changes propagate through the project!"
msgstr ""
"우리는 몇 분 전에 이런 식으로 ``EnergyBar``\\ 를 설정할 수 있었습니다. 하지"
"만 위에서 설명한 일련의 작업들이 언제든지 어떤 씬으로든 돌아가서 속성을 조정"
"할 수 있고 변경 사항이 프로젝트를 통해 전파된다는 것을 보여줍니다!"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:602
msgid "Place the GUI onto the game's mockup"
msgstr "게임 모형에 GUI 배치하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:604
msgid ""
"To wrap up the tutorial we're going to insert the GUI onto the game's mockup "
"scene."
msgstr "튜토리얼을 마무리하기 위해, 게임 목업 씬에 GUI를 삽입할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:607
msgid "Head to the FileSystem dock and open ``LevelMockup.tscn``."
msgstr "파일시스템(FileSystem) 독으로 가서 ``LevelMockup.tscn``\\ 을 여세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:609
msgid ""
"Drag-and-drop the ``GUI.tscn`` scene right below the ``bg`` node and above "
"the ``Characters``. The GUI will scale to fit the entire viewport. Head to "
"the Layout menu and select the ``Center Top`` option so it anchors to the "
"top edge of the game window. Then resize the GUI to make it as small as "
"possible vertically. Now you can see how the interface looks in the context "
"of the game."
msgstr ""
"``bg`` 노드 아래와 ``Characters`` 노드 위에 ``GUI.tscn`` 씬을 끌어다 놓으세"
"요. GUI는 전체 뷰포트에 맞게 크기가 조절됩니다. 레이아웃(Layout) 메뉴로 가서 "
"``위쪽 중앙(Center Top)`` 설정을 선택해서 GUI가 게임 창의 위쪽 모서리에 고정"
"되도록 하세요. 그런 다음 GUI의 크기를 조정해서 수직 방향으로 가능한 작게 만드"
"세요. 이제 게임 맥락에서 인터페이스가 어떻게 보이는지 확인할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:616
msgid ""
"Congratulations for getting to the end of this long tutorial. You can find "
"the final project here: :download:`ui_gui_design.zip <files/ui_gui_design."
"zip>`."
msgstr ""
"이 긴 튜토리얼을 마친 것을 축하합니다. 여기서 최종 프로젝트를 찾아보세요: :"
"download:`ui_gui_design.zip <files/ui_gui_design.zip>`."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:625
msgid ""
"**A final note about Responsive Design**. If you resize the GUI, you'll see "
"the nodes move, but the textures and text won't scale. The GUI also has a "
"minimum size, based on the textures inside of it. In games, we don't need "
"the interface to be as flexible as that of a website. You almost never want "
"to support both landscape and portrait screen orientations. It's one or the "
"other. In landscape orientation, the most common ratios range from 4:3 to "
"16:9. They are close to one another. That's why it's enough for the GUI "
"elements to only move horizontally when we change the window size."
msgstr ""
"**반응형 디자인에 대한 마지막 주석**. GUI의 크기를 조정하면 노드가 움직이지"
"만, 텍스처와 텍스트의 크기는 조정되지 않습니다. 또한 GUI는 들어있는 텍스처에 "
"따른 최소 크기(minimum size) 속성이 있습니다. 게임의 인터페이스가 웹사이트처"
"럼 유연할 필요는 없습니다. 여러분은 가로 및 세로 화면 방향을 전혀 지원하고 싶"
"지 않습니다. 둘 중 하나만 지원하겠죠. 가로 화면 방향의 가장 일반적인 비율은 "
"4:3에서 16:9 사이입니다. 이들은 서로 비슷합니다. 이것이 창 크기를 바꿀 때 "
"GUI 요소가 수평으로만 이동하는 것이 충분한 이유입니다."
