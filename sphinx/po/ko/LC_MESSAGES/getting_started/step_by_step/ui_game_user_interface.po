# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:4
msgid "Design the GUI"
msgstr "GUI 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:6
msgid ""
"Now that you've nailed the basics, we're going to see how to build a game "
"Graphical User Interface (GUI) with reusable UI components: a life bar, an "
"energy bar, and bomb and emerald counters. By the end of this tutorial, "
"you'll have a game GUI, ready to control with GDscript or VisualScript:"
msgstr ""
"이제 기초를 갖춘 모양이니, 어떻게 게임 그래픽 유저 인터페이스 (GUI)를 만드는 "
"지, 다시 사용할 수 있는 UI 구성 요소와 함께 알아봅시다: 체력 막대, 에너지 막"
"대, 그리고 폭탄과 에메랄드 카운터. 이 튜토리얼을 마치면, 바로 GDScript나 "
"VisualScript로 제어할 수 있는 게임 GUI를 갖게될 것입니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:13
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:621
msgid "The final result"
msgstr "최종 결과물"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:15
msgid "You'll also learn to:"
msgstr "이번에 배울 내용입니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:17
msgid "Create flexible UI components"
msgstr "유연한 UI 구성 요소 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:18
msgid "Use scene inheritance"
msgstr "씬 상속 사용하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:19
msgid "Build a complex UI"
msgstr "복잡한 UI 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:21
msgid ""
"Download the project files: :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` and extract the archive. Import the `start/` project in "
"Godot to follow this tutorial. The `end/` folder contains the final result."
msgstr ""
"프로젝트 파일을 다운로드하세요: :download:`ui_gui_design.zip <files/"
"ui_gui_design.zip>` 그리고 압축을 푸세요. 이 튜토리얼을 따라오려면 Godot로 "
"`start/` 프로젝트를 불러오세요. `end/` 폴더에는 완성본이 들어 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:25
msgid ""
"You can watch this tutorial as a `video on YouTube <https://www.youtube.com/"
"watch?v=y1E_y9AIqow>`_."
msgstr ""
"이 튜토리얼은 `Youtube 영상<https://www.youtube.com/watch?v=y1E_y9AIqow>`_ 으"
"로 볼 수도 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:28
msgid "Breaking down the UI"
msgstr "UI 파헤치기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:30
msgid ""
"Let's break down the final UI and plan the containers we'll use. As in the :"
"doc:`ui_main_menu`, it starts with a ``MarginContainer``. Then, we can see "
"up to three columns:"
msgstr ""
"최종 UI를 분석하고 사용할 컨테이너를 계획해 보겠습니다. : doc : "
"ʻui_main_menu`에서와 같이``MarginContainer``로 시작합니다. 그러면 세 개의 열"
"로 나누어 볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:34
msgid "The life and energy counters on the left"
msgstr "왼쪽의 체력과 에너지값을 의미하는 숫자"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:35
msgid "The life and energy bars"
msgstr "체력과 에너지 잔량을 표시하는 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:36
#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:42
msgid "The bomb and emerald counters on the right"
msgstr "오른쪽의 폭탄과 에메랄드의 값을 나타내는 숫자"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:38
msgid ""
"But the bar's label and the gauge are two parts of the same UI element. If "
"we think of them this way, we're left with two columns:"
msgstr ""
"하지만 막대의 라벨과 게이지는 동일한 UI 요소의 두 부분입니다. 이런 식으로 생"
"각하면 두 개의 열만 남습니다:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:41
msgid "The life and energy bars on the left"
msgstr "왼쪽의 체력과 에너지 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:44
msgid ""
"This makes it easier to nest containers: we have some margins around the "
"border of the screen using a ``MarginContainer``, followed by an "
"``HBoxContainer`` to manage our two columns. The two bars stack on top of "
"one another inside a ``VBoxContainer``. And we'll need a last "
"``HBoxContainer`` in the right column to place the bomb and emerald counters "
"side-by-side."
msgstr ""
"이렇게 하면 컨테이너를 더 쉽게 중첩할 수 있습니다: ``MarginContainer``를 사용"
"하여 화면 테두리 주위에 약간의 여백을 두고 두 열을 관리하기 위해"
"``HBoxContainer``를 사용합니다. 두 개의 막대는``VBoxContainer `` 내부에 쌓습"
"니다. 그리고 마지막으로 폭탄과 에메랄드 카운터를 나란히 배치하려면 오른쪽 열"
"에 ``HBoxContainer ``가 필요합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:53
msgid "We get a clean UI layout with only 4 containers"
msgstr "4 개의 컨테이너로 말끔한 UI 레이아웃을 얻었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:55
msgid ""
"We will need extra containers inside the individual UI components, but this "
"gives us the main GUI scene's structure. With this plan in place, we can "
"jump into Godot and create our GUI."
msgstr ""
"각 UI 구성 요소에는 추가적인 컨테이너가 필요할 것입니다. 하지만 이것으로 메"
"인 GUI 씬의 구조를 만들었습니다. 이 계획에 따라, Godot로 들어가 GUI를 만들 "
"수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:60
msgid "Create the base GUI"
msgstr "기초 GUI 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:62
msgid ""
"There are two possible approaches to the GUI: we can design elements in "
"separate scenes and put them together, or prototype everything in a single "
"scene and break it down later. I recommend working with a single scene as "
"you can play with your UI's placement and proportions faster this way. Once "
"it looks good, you can save entire sections of the node tree as reusable sub-"
"scenes. We'll do that in a moment."
msgstr ""
"GUI에는 할 수 있는 두 가지 접근법이 있습니다: 별개의 씬에서 요소를 설계한 후 "
"그 요소들을 함께 넣을 수 있습니다. 혹은 하나의 씬에서 모든 것을 기초 작업한 "
"후 나중에 세부적으로 접근합니다. 저는 하나의 씬에서 작업하는 것을 추천합니"
"다. UI의 배치 및 크기 조정을 더 빨리 할 수 있기 때문이죠. 일단 보기 좋게 만"
"든 후, 노드 트리의 전체 섹션을 다시 사용할 수 있는 하위 씬으로 저장할 수 있습"
"니다. 잠시 후 그렇게 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:69
msgid "For now, let's start with a few containers."
msgstr "일단 적은 수의 컨테이너로 시작합시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:71
msgid ""
"Create a new scene and add a ``MarginContainer``. Select the node and name "
"it ``GUI``."
msgstr ""
"새 씬을 만들고 ``MarginContainer``\\ 를 추가하세요. 노드를 선택하고 ``GUI`` "
"\\ 라고 이름 지으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:74
msgid ""
"We want our interface to anchor to the top of the screen. Select the ``GUI`` "
"node and click the Layout button at the top of the viewport. Select the "
"``Top Wide`` option. The ``GUI`` node will anchor to the top edge of its "
"parent, the viewport by default. It will resize automatically on the "
"vertical axis to make space for its child UI components."
msgstr ""
"인터페이스가 화면에 위에 고정되어 있어야 합니다. ``GUI`` 노드를 선택하고, 뷰"
"포트 상단에 있는 레이아웃(Layout) 버튼을 클릭하세요. ``위쪽 넓게(Top Wide)`` "
"를 선택해 설정합니다. ``GUI`` 노드는 부모(기본값은 뷰포트)의 위쪽 모서리에 고"
"정될 것입니다. 세로축은 자동으로 크기가 조절되어서 자손 UI 구성 요소가 들어"
"갈 자리가 마련될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:80
msgid "Save the scene as ``GUI.tscn``. We will put the entire GUI in it."
msgstr "``GUI.tscn``\\ 으로 씬을 저장하세요. 이 씬에 GUI 전체를 넣을 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:82
msgid ""
"With the ``MarginContainer`` selected, head to the inspector and scroll down "
"to the custom constants section. Unfold it and click the field next to each "
"of the ``Margin`` properties. Set them all to ``20`` pixels. Next, add an "
"``HBoxContainer`` node. This one will contain our two bars on the left and "
"separate them from the two counters on the right."
msgstr ""
"``MarginContainer``\\ 를 선택한 채로, 인스펙터(Inspector)로 가서 Custon "
"Constants 섹션으로 내려가세요. 접힌 상태를 펼쳐주고, 각 ``Margin`` 속성의 옆"
"에 있는 영역을 클릭하세요. 모두 ``20`` 픽셀로 설정하세요. 다음으로, "
"``HBoxContainer`` 노드를 추가하세요. 이 컨테이너에는 왼쪽에 있으면서 두 개의 "
"막대가 들어갈 것입니다. 그러면서 오른쪽에 있는 두 개의 카운터와 분리할 것입니"
"다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:88
msgid ""
"We want to stack the bars vertically inside the ``HBoxContainer``. Add a "
"``VBoxContainer`` as a child of ``HBoxContainer`` and name it ``Bars``. "
"Select the parent ``HBoxContainer`` again and this time, add another "
"``HBoxContainer`` as a child of it. Call it ``Counters``. With these four "
"containers, we have the base for our GUI scene."
msgstr ""
"``HBoxContainer`` 안에 막대를 수직으로 쌓아야 합니다. ``VBoxContainer``\\ 를 "
"``HBoxContainer``\\ 의 자손으로 추가하세요. 그리고 이름은 ``Bars``\\ 라고 지"
"으세요. 부모 ``HBoxContainer``\\ 를 다시 선택하고, 이번에는 다른 "
"``HBoxContainer``\\ 를 자손으로 추가하세요. 이것의 이름은 ``Counters``\\ 라"
"고 지으세요. 네 개의 컨테이너로, GUI 씬의 기초를 만들었습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:95
msgid "You should have 4 containers that look like this"
msgstr "4 개의 컨테이너가 이렇게 있어야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:99
msgid ""
"We can work this way because we first broke down our UI design and took a "
"few moments to think about the containers we'd use. When you follow a "
"tutorial like this, it may seem weird. But once you're working on real "
"games, you'll see it's an efficient workflow."
msgstr ""
"이 방법이 가능한 이유는, 먼저 UI 설계를 파헤치고 사용할 컨테이너에 대해 생각"
"할 시간을 가졌기 때문입니다. 이 튜토리얼을 따라갈 때, 이상하다고 느꼈을 지도 "
"모릅니다. 하지만 실제 게임을 작업해본다면, 이것이 효율적인 워크플로라는 것을 "
"보게될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:105
msgid "Create the bars' base"
msgstr "Bars의 기초 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:107
msgid ""
"Each bar is split into two sub-elements that align horizontally: the label "
"with the health count on the left, and the gauge on the right. Once again, "
"the ``HBoxContainer`` is the perfect tool for the job. Select the ``Bars`` "
"node and add a new ``HBoxContainer`` inside of it. Name it ``Bar``."
msgstr ""
"각 막대는 나란히 놓인 두 개의 하위 요소로 나뉩니다: 체력을 세는 라벨이 왼쪽, "
"그리고 게이지가 오른쪽에 있습니다. 다시 말하지만, ``HBoxContainer``\\ 는 이 "
"일에 최적한 도구입니다. ``Bars`` 노드를 선택하고, 새 ``HBoxContainer``\\ 를 "
"안에 추가하세요. 이름은 ``Bar``\\ 라고 지으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:113
msgid ""
"The label itself requires at least three nodes: a ``NinePatchRect`` for the "
"background, on top of which we'll add a texture on the left, either ``HP`` "
"or ``EP``, and a ``Label`` on the right for the value. We can nest "
"``Control`` nodes however we want. We could use the ``NinePatchRect`` as a "
"parent for the two other elements, as it encompasses them. In general, you "
"want to use containers instead, as their role is to help organize UI "
"components. We'll need a ``MarginContainer`` later anyway to add some space "
"between the life count and the gauge. Select the ``Bar`` and add a "
"``MarginContainer``. Name it ``Count``. Inside of it, add three nodes:"
msgstr ""
"라벨에는 적어도 세 개의 노드가 더 필요합니다: 배경에 쓸 ``NinePatchRect``, "
"그 배경에서 왼쪽에 ``HP`` 또는 ``EP``\\ 라고 적힌 텍스처, 그리고 오른쪽에 값"
"을 표시하기 위한 ``Label``. ``Control`` 노드는 원하는 만큼 중첩할 수 있습니"
"다. 그리고 ``NinePatchRect``\\ 를 다른 두 요소의 부모로 사용할 수 있습니다. "
"기본적으로, 컨테이너를 UI 구성 요소를 조직하도록 도움이 되는 역할로 사용할 "
"수 있습니다. 나중에 체력 카운터와 게이지 사이에 영역을 추가하기 위해서, "
"``MarginContainer``\\ 가 필요할 것입니다. ``Bar``\\ 를 선택하고 "
"``MarginContainer``\\ 를 추가하세요. 이름은 ``Count``\\ 라고 지으세요. 이 컨"
"테이너 안에 세 개의 노드를 추가하세요:"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:124
msgid "A ``NinePatchRect`` named ``Background``"
msgstr "``NinePatchRect``, 이름은 ``Background``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:125
msgid "A ``TextureRect`` named ``Title``"
msgstr "``TextureRect``, 이름은 ``Title``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:126
msgid "And a ``Label`` named ``Number``"
msgstr "``Label``, 이름은 ``Number``"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:128
msgid "To add the nodes as siblings, always select the ``Count`` node first."
msgstr "노드를 동기로 추가하려면, 항상 먼저 ``Count`` 노드를 선택하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:132
msgid ""
"Your scene tree should look like this. We're ready to throw in some textures"
msgstr "씬 트리는 다음과 같아야 합니다. 이제 텍스처를 줄 준비가 되었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:135
msgid ""
"Our scene is still empty. It's time to throw in some textures. To load the "
"textures, head to the FileSystem dock to the left of the viewport. Browse "
"down to the res://assets/GUI folder."
msgstr ""
"씬은 아직 텅텅 비어 있습니다. 텍스처를 줄 시간입니다. 텍스처를 불러오려면, 뷰"
"포트 왼쪽에 있는 파일 시스템(FileSystem) 독으로 가세요. res://assets/GUI 폴더"
"로 들어가세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:141
msgid "You should see a list of textures that we'll use to skin our interface."
msgstr "인터페이스를 장식할 텍스처 목록은 다음과 같아야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:144
msgid ""
"Select the ``Background`` in the Scene dock. In the Inspector, you should "
"see a ``Texture`` property. In the FileSystem tab, click and drag "
"``label_HP_bg.png`` onto the ``Texture`` slot. It stays squashed. The parent "
"MarginContainer will force its size down to 0 until we force elements inside "
"the container to have a minimum size. Select the ``Background`` node. In the "
"Inspector, scroll down to the Rect section. Set ``Min Size`` to (100, 40). "
"You should see the ``Background`` resize along with its parent containers."
msgstr ""
"씬(Scene) 독에서 ``Background``\\ 를 선택하세요. 인스펙터(Inspector)에서 "
"``Texture`` 속성을 볼 수 있습니다. 파일 시스템(FileSystem) 탭으로 가서, "
"``label_HP_bg.png``\\ 를 ``Texture`` 슬롯으로 드래그하세요. 찌그러진 채로 들"
"어갑니다. 컨테이너 안의 요소에게 최소 크기를 주지 않으면, 부모 "
"MarginContainer가 텍스처 크기를 0 으로 만듭니다. ``Background`` 노드를 선택하"
"세요. 인스펙터(Inspector) Rect 섹션으로 내려가세요. ``Min Size``\\ 를 (100, "
"40)으로 설정하세요. ``Background``\\ 가 부모 컨테이너에 따라 크기가 조절된 것"
"을 볼 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:153
msgid ""
"Next, select the ``Title`` and drag and drop ``label_HP.png`` into its "
"``Texture`` slot. Select the ``Number`` node, click the field next to the "
"``Text`` property and type ``10``. This way, we can see both nodes in the "
"viewport. They should stack up in the top-left corner of their parent "
"``MarginContainer``."
msgstr ""
"다음으로 ``Title``\\ 을 선택하고, ``label_HP.png``\\ 를 ``Texture`` 슬롯으로 "
"드래그 앤 드롭하세요. ``Number`` 노드를 선택하고, ``Text`` 속성 옆의 영역을 "
"클릭한 뒤 ``10``\\ 을 입력하세요. 이제 두 노드 모두 뷰포트에서 볼 수 있습니"
"다. 두 노드는 부모 ``MarginContainer``\\ 의 왼쪽 위 모서리에 포개져 있어야 합"
"니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:161
msgid "If you select both nodes, you should see something like this"
msgstr "두 노드를 선택하면 이렇게 보여야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:163
msgid ""
"As they have a container as their direct parent, we cannot move them freely: "
"the ``Count`` node will always reset their anchors, their size and position. "
"Try to move and resize the nodes in the viewport. Then, select any of the "
"three textures and press :kbd:`Ctrl + Up` or :kbd:`Ctrl + Down` to reorder "
"them in the Scene dock. They'll snap back to their previous size and "
"position."
msgstr ""
"컨테이너를 직접 부모로 가지고 있으므로 자유롭게 이동할 수 없습니다. "
"``Count`` 노드는 항상 자손 노드의 앵커(Anchor), 크기, 위치를 초기화할 것입니"
"다. 이 노드들을 뷰포트에서 움직이거나 크기를 조절해보세요. 그런 다음 이 세 개"
"의 텍스처 중 하나를 선택하고, 씬(Scene) 독에서 :kbd:`Ctrl + Up` or :kbd:"
"`Ctrl + Down`를 눌러서 노드의 순서를 다시 정렬해보세요. 노드들은 이전의 크기"
"와 위치로 돌아갈 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:170
msgid ""
"Parent containers control the size, the scale, the margins, and the anchors "
"of their direct children. To modify the nodes, you must nest them inside a "
"regular Control or another UI element. We'll use the ``Background`` as a "
"parent for the ``Title`` and ``Number``. Select both the ``Title`` and "
"``Number``, and drag and drop them onto ``Background``."
msgstr ""
"부모 컨테이너는 바로 아래 자손의 크기, 스케일, 여백, 그리고 앵커를 제어합니"
"다. 노드를 수정하려면, 일반적인 Control이나 다른 UI 요소안에 노드를 중첩해야 "
"합니다. ``Background``\\ 를 ``Title``\\ 과 ``Number``\\ 의 부모로 사용할 것입"
"니다. ``Title``\\ 과 ``Number``\\ 를 둘 다 선택하세요. 그리고 ``Background``"
"\\ 로 드래그 앤 드롭하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:179
msgid ""
"By using the Background node as the two textures' parent, we take control "
"away from the Count MarginContainer"
msgstr ""
"Background 노드를 두 텍스처의 부모로 사용했기 때문에, Count MarginContainer"
"로 부터 자유로워졌습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:182
msgid ""
"Select the ``Title`` and in the Inspector, change its ``Stretch Mode`` "
"property to ``Keep Centered``. Next find the ``Rect`` category in the "
"Inspector and change the ``Size`` property to (50, 40) so it only takes the "
"left half of the background.  Next, select the ``Number`` node. In the "
"viewport, click the ``Layout`` menu and click ``Full Rect``. The node will "
"resize to fit the ``Background``. Head to the Inspector and change its "
"``Align`` property to ``Right``, and the ``Valign`` property to ``Center``. "
"The text should snap to the center of the ``Background``'s right edge. "
"Resize the node horizontally, so it takes the right half of the "
"``Background`` and there's a bit of padding with the right edge."
msgstr ""
"인스펙터(Inspecter)에서 ``Title``\\ 을 선택하고, ``Stretch Mode`` 속성을 "
"``Keep Centered``\\ 로 바꾸세요. 다음으로, 인스펙터(Inspecter)에서 ``Rect`` "
"카테고리로 가서 ``Size`` 속성을 (50, 40)으로 바꾸세요. Background의 왼쪽 절반"
"만 차지하게 될 것입니다. 다음은 ``Number`` 노드를 선택하세요. 뷰포트에서 ``레"
"이아웃(Layout)`` 메뉴를 클릭하고 ``사각형 전체(Full Rect)``\\ 을 클릭하세요. "
"노드는 ``Background``\\ 에 맞게 크기가 조절됩니다. 인스펙터(Inspecter)로 가"
"서 ``Align`` 속성을 ``Right``\\ 로 바꾸세요. 그리고 ``Valign`` 속성은 "
"``Center`` 로 바꾸세요. 글자는 ``Background``\\ 의 오른쪽 모서리의 중심에 고"
"정될 것입니다. 노드 크기를 수평으로 조절하세요. 그러면 이제 ``Background``\\ "
"의 오른쪽 절반을 차지하면서, 오른쪽 모서리에는 약간의 여백을 갖게 됩니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:195
msgid ""
"Here's how the nodes' bounding boxes should look in the viewport. Keep it "
"rough, you don't need to place them too precisely for now."
msgstr ""
"노드의 경계 사각형이 뷰포트에서 이렇게 보여야 합니다. 지금은 정확하게 놓지 않"
"아도 됩니다. 적당하게 하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:199
msgid "Replace the Label's font"
msgstr "Label의 폰트 교체하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:201
msgid ""
"The label's font is too small. We need to replace it. Select the ``Number`` "
"node and in the Inspector, scroll down to the ``Control`` class, and find "
"the ``Custom Font`` category. Click the field next to the ``Font`` property "
"and click on ``New Dynamic Font``. Click on the field again and select Edit."
msgstr ""
"Label의 폰트는 너무 작습니다. 이것을 교체해야 합니다. ``Number`` 노드를 선택"
"하세요. 그리고 인스펙터(Inspector)에서, ``Control`` 클래스로 내려간 뒤, "
"``Custom Font`` 카테고리를 찾으세요. ``Font`` 속성 옆의 영역을 클릭한 다음, "
"``새 Dynamic Font(New Dynamic Font)``\\ 를 클릭하세요. 영역을 다시 클릭한 다"
"음 편집하기(Edit)를 선택하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:207
msgid ""
"You will enter the ``Dynamic Font`` resource. Unfold the ``Font`` category "
"and click the field next to ``Font Data``. Click the ``Load`` button. In the "
"file browser, navigate down to the assets/font folder and double click "
"``Comfortaa-Bold.ttf`` to open it. You should see the font update in the "
"viewport. Unfold the settings category to change the font size. Set the "
"``Size`` property to a higher value, like ``24`` or ``28``."
msgstr ""
"``DynamicFont`` 리소스에 들어가야 합니다. ``Font`` 카테고리를 펼치고, ``Font "
"Data`` 옆의 영역을 클릭하세요. ``불러오기(Load)`` 버튼을 클릭하세요. 파일 브"
"라우저에서 assets/font 폴더로 간 다음, ``Comfortaa-Bold.ttf``\\ 를 더블클릭해"
"서 여세요. 뷰포트에서 폰트가 업데이트된 것을 볼 수 있습니다. Settings 카테고"
"리를 펼치고 Font Size를 바꾸세요. ``Size`` 속성을 더 높은 숫자, ``24``\\ 난 "
"``28``\\ 로 설정하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:215
msgid ""
"We now need the text's baseline, the number's lower edge, to align with the "
"HP texture on the left. To do so, still in the ``DynamicFont`` resource, you "
"can tweak the ``Bottom`` property under the ``Extra Spacing`` category. It "
"adds some bottom padding to the text. Click the ``Number`` node in the Scene "
"tab to go back to the node's properties and change the ``Valign`` to "
"``Bottom``. To adjust the text's baseline, click on the font field under the "
"``Custom Font`` category again and tweak the ``Bottom`` property until the "
"text aligns with the ``Title`` node. I used a value of ``2`` pixels."
msgstr ""
"이제 문자의 기준선이 필요합니다. 왼쪽의 HP 텍스처와 나란히 있는 Number의 아"
"래 모서리 말이죠. 그러러면, 역시나 ``DynamicFont`` 리소스로 가서, ``Extra "
"Spacing`` 카테고리 밑의 ``Bottom`` 속성을 조절하면 됩니다. 이 속성은 문자의 "
"아래에 여백을 추가해줍니다. 씬 탭에서 ``Number`` 노드를 클릭하고 노드의 속성"
"으로 돌아가세요. 그리고 ``Valign``\\ 을 ``Bottom``\\ 으로 바꾸세요. 문자의 기"
"준선을 조절하려면, ``Custom Font`` 카테고리 밑의 Font 영역을 다시 클릭하세"
"요. 그리고 문자가 ``Title`` 노드와 나란히 있을 때까지 ``Bottom`` 속성을 조절"
"하세요. 저는 ``2`` 픽셀의 값을 사용했습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:227
msgid "With a Bottom value of 2 pixels, the Number aligns with the Title"
msgstr "Bottom 에 2픽셀 값으로, Number는 Title과 일직선이 되었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:229
msgid ""
"With this, we finished the hardest part of the GUI. Congratulations! Let's "
"move on to the simpler nodes."
msgstr ""
"이걸로, 우리는 GUI의 가장 어려운 부분을 마쳤습니다. 축하합니다! 더 단순한 노"
"드로 넘어갑시다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:233
msgid "Add the progress bar"
msgstr "경과 막대 추가하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:235
msgid ""
"We need one last element to complete our life bar: the gauge itself. Godot "
"ships with a ``TextureProgress`` node that has everything we need."
msgstr ""
"체력 막대를 완성하기까지 하나의 요소가 남았습니다: 게이지 그 자체죠. Godot에"
"는 지금 우리에게 필요한 ``TextureProgress`` 노드라는 것을 갖고 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:238
msgid ""
"Select the Bar node and add a ``TextureProgress`` inside of it. Name it "
"``Gauge``. In the inspector unfold the ``Textures`` section. Head to the "
"FileSystem dock and drag and drop the ``lifebar_bg.png`` texture onto the "
"``Under`` slot. Do the same with the ``lifebar_fill.png`` image and drop it "
"onto the ``Progress`` slot. Under the ``Range`` class in the inspector, "
"change the ``Value`` property to ``50`` to see the gauge fill up."
msgstr ""
"Bar 노드를 선택하고, 안에 ``TextureProgress``\\ 를 추가하세요. 이름은 "
"``Gauge``\\ 라고 지으세요. 인스펙터(Inspector)에서 ``Textures`` 섹션을 펼치세"
"요. 파일 시스템(FileSystem) 독으로 가서 ``lifebar_bg.png`` 텍스처를 "
"``Under`` 슬롯으로 드래그 앤 드롭하세요. 마찬가지로 ``lifebar_fill.png`` 이미"
"지는 ``Progress`` 슬롯에 드롭하세요. 인스펙터(Inspector)의 ``Range`` 클래스 "
"아래에서, ``Value`` 속성을 ``50``\\ 으로 바꾸고 게이지가 차오른 모습을 확인하"
"세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:246
msgid "With only five ``Control`` nodes, our first bar is ready to use."
msgstr ""
"단지 다섯 개의 ``Control`` 노드만으로, 첫 번째 막대를 사용할 수 있게 되었습니"
"다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:250
msgid ""
"That's it, our life bar is ready. This last part was quick, wasn't it? "
"That's thanks to our robust container setup."
msgstr ""
"됐습니다. 체력 막대는 준비됬습니다. 마지막 부분은 빨리 끝났네요. 그렇지 않나"
"요? 강력한 컨테이너 설정 덕분입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:254
msgid "Design the bomb and emerald counters"
msgstr "폭탄과 에메랄드 카운터 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:256
msgid ""
"The bomb and emerald counters are like the bar's ``Count`` node. So we'll "
"duplicate it and use it as a template."
msgstr ""
"폭탄과 에메랄드 카운터는 Bar의 ``Count`` 노드와 비슷합니다. 따라서 Count 노드"
"를 복제해서 템플릿으로 사용할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:259
msgid ""
"Under the ``Bar`` node, select ``Count`` and press :kbd:`Ctrl + D` to "
"duplicate it. Drag and drop the new node under the ``Counters`` "
"``HBoxContainer`` at the bottom of the scene tree. You should see it resize "
"automatically. Don't worry about this for now, we'll fix the size soon."
msgstr ""
"``Bar`` 노드 아래에 있는 ``Count``\\ 를 선택한 다음, :kbd:`Ctrl + D`를 눌러"
"서 복제하세요. 씬 트리의 가장 아래에 있는 ``HBoxContainer``, 즉 ``Counters``"
"\\ 의 자손으로 복제한 노드를 드래그 앤 드롭하세요. 노드가 자동으로 크기가 조"
"절되는 것을 볼 수 있습니다. 지금은 크게 걱정하지 마세요. 나중에 크기를 고칠 "
"것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:264
msgid ""
"Rename the ``Count2`` node to ``Counter``. Unlike the bars, we want the "
"number to be on the left, and an icon to sit on the right. The setup is the "
"same: we need a background (a ``NinePatchRect``), the title, and the number "
"nodes. The ``Title`` node is a ``TextureRect``, so it's what we need to "
"display the icon. In the scene tree, select the ``Title`` node, and rename "
"it to ``Icon``."
msgstr ""
"``Count2`` 노드의 이름을 ``Counter``\\ 로 바꾸세요. Bars와 달리, 왼쪽에 숫자"
"가 있고 오른쪽에 아이콘이 있어야 합니다. 설정은 전과 같습니다: Background가 "
"필요하고 (``NinePatchRect``), Title, Number 노드가 필요합니다. ``Title`` 노드"
"는 아이콘을 표시해야 하므로 ``TextureRect``\\ 가 됩니다. 씬 트리에서 "
"``Title`` 노드를 선택하세요. 그리고 이름을 ``Icon``\\ 으로 바꾸세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:273
msgid "Here's how your node tree should look so far"
msgstr "이것이 현재까지 작업한 노드 트리의 모습입니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:275
msgid ""
"With the ``Icon`` node selected, in the inspector, scroll to the top to see "
"the ``Texture`` slot. Head to the FileSystem dock on the left and select the "
"``bombs_icon.png``. Drag and drop it onto the ``Texture`` slot. In the Scene "
"Tab select both the ``Icon`` and the ``Number`` nodes. Click the Layout menu "
"in the toolbar at the top of the viewport and select ``Full Rect``. Both "
"nodes will update to fit the size of the ``Background``."
msgstr ""
"``Icon`` 노드를 선택하고, 인스펙터(Inspector)에서 ``Texture`` 슬롯이 보일 때"
"까지 위로 올라가세요. 왼쪽의 파일 시스템(FileSystem) 독으로 가서 "
"``bombs_icon.png``\\ 를 선택하세요. ``Texture`` 슬롯에 드래그 앤 드롭하세요. "
"씬(Scene) 탭에서 ``Icon``\\ 과 ``Number`` 노드 모두 선택하세요. 뷰포트 상단"
"에 있는 툴바의 레이아웃(Layout) 메뉴로 가서 ``사각형 전체(Full Rect)``\\ 를 "
"선택하세요. 두 노드 모두 ``Background``\\ 의 크기에 맞게 업데이트될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:285
msgid "The nodes anchor to the entire Background, but their position is off"
msgstr "노드는 전체 Background에 고정됐지만, 위치가 어긋납니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:287
#, fuzzy
msgid ""
"Let's change the ``Number``'s align properties to move it to the left and "
"center of the ``Background``. Select the ``Number`` node, change its "
"``Align`` property to left and the ``Valign`` property to center. Then "
"resize its left edge a bit to add some padding between the left edge of the "
"``Background`` and the text."
msgstr ""
"``Number``\\ 의 Align 속성을 바꿔서 ``Background``\\ 의 왼쪽 중앙에 있도록 합"
"시다. ``Number`` 노드를 선택하고, ``Align`` 속성을 Left로, ``Valign`` 속성을 "
"Center로 바꾸세요. 그리고 왼쪽 모서리를 살짝 움직여서 ``Background``\\ 와 문"
"자의 왼쪽 가장자리에 여백이 추가되도록 하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:295
#, fuzzy
msgid "The Number node aligned to the left and center"
msgstr "왼쪽과 중앙에 정렬된 Number 노드"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:297
msgid ""
"To overlap the Icon and the background, we need a few tweaks. First, our "
"background is a bit too tall. It's because it's inside a margin container "
"that is controlled by the top-most GUI node. Select the GUI node at the top "
"of the scene tree and downsize it vertically so that it's as thin as "
"possible. You'll see the gauge prevents you from making it too small. A "
"container cannot be smaller than the minimal size of its children. The "
"container's margins also weigh in."
msgstr ""
"Icon과 Background를 겹치려면, 몇 가지 조정이 필요합니다. 먼저 Background가 예"
"상보다 약간 큽니다. 최상위의 GUI 노드에서 제어되는 MarginContainer에 속해있"
"기 때문입니다. 씬 트리의 맨 위에 있는GUI 노드를 선택하고 최대한 가늘게 세로"
"로 크기를 줄여보세요. Gauge는 너무 작아지지 않는 것을 볼 수 있습니다. 컨테이"
"너는 자손을 자손의 최소 크기보다 더 작게 만들 수 없습니다. 컨테이너의 여백도 "
"마찬가지입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:305
msgid ""
"Select the Icon, click the Layout menu, and select ``Full Rect`` to re-"
"center it. We need it to anchor to the ``Background``'s right edge. Open the "
"Layout menu again and select ``Center Right``. Move the icon up so it is "
"centered vertically with the ``Background``."
msgstr ""
"Icon을 선택하고 레이아웃(Layout) 메뉴를 클릭하세요. 그리고 ``사각형 전체"
"(Full Rect)``\\ 를 선택해서 다시 가운데에 있도록 하세요. 다시 레이아웃"
"(Layout) 메뉴를 열고 ``오른쪽 중앙(Center Right)``\\ 을 선택하세요. Icon을 위"
"로 움직여서 ``Background``\\ 와 수직으로 가운데에 있도록 하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:313
msgid ""
"The bomb icon anchors to the Background's right edge. Resize the Counter "
"container to see the Icon node stick to its right side"
msgstr ""
"폭탄 아이콘은 Background의 오른쪽 모서리에 앵커하세요. Counter 컨테이너의 크"
"기를 조절하여 Icon 노드가 오른쪽 모서리에 고정되도록 하세요"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:316
msgid ""
"Because we duplicated the ``Counter`` from the bar's ``Count``, the "
"``Number`` node's font is off. Select the ``Number`` node again, head to the "
"``Font`` property, and click it to access the ``DynamicFont`` resource. In "
"the ``Extra Spacing`` section, change the ``Bottom`` value to ``0`` to reset "
"the font's baseline. Our counter now works as expected."
msgstr ""
"Bar의 ``Count``\\ 에서 ``Counter``\\ 를 복제했기 때문에, ``Number`` 노드의 폰"
"트는 꺼져 있습니다. ``Number`` 노드를 다시 선택하고 ``Font`` 속성으로 가세"
"요. 그리고 속성을 클릭해서 ``DynamicFont`` 리소스에 접근하세요. ``Extra "
"Spacing`` 섹션에서 ``Bottom`` 값을 ``0``\\ 으로 바꿔서 폰트의 기준선을 초기화"
"하세요. Counter는 이제 생각한대로 작동합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:323
msgid ""
"Let's make the ``Counters`` anchor to the right edge of the viewport. To do "
"so, we need to set the ``Bars`` container take all the available horizontal "
"space it can. Select the ``Bars`` node and scroll down to the ``Size Flags`` "
"category. In the ``Horizontal`` category, check the ``Expand`` value. The "
"``Bars`` node should resize and push the counter to the right side of the "
"screen."
msgstr ""
"``Counters`` 앵커가 뷰포트의 오른쪽 모서리에 있도록 만듭시다. 그러러면 먼저 "
"``Bars`` 컨테이너가 가능한 전체 수평 공간을 차지하도록 설정해야 합니다. "
"``Bars`` 노드를 선택하고 ``Size Flags`` 카테고리로 내려가세요. "
"``Horizontal`` 카테고리에서 ``Expand`` 값을 체크하세요. ``Bars`` 노드는 크기"
"가 조절되면서 Counter를 화면의 오른쪽 모서리로 밀어낼 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:331
msgid ""
"An expanding container eats all the space it can from its parent, pushing "
"everything else along the way"
msgstr ""
"펼쳐진 컨테이너가 부모가 정한 영역 전체를 먹어 버리면서, 나머지를 저 멀리로 "
"밀어냅니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:335
msgid "Turn the bar and counter into reusable UI components"
msgstr "Bar와 Counter를 다시 사용할 수 있는 UI 구성 요소로 바꾸기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:337
msgid ""
"We have one bar and one counter widget. But we need two of each. We may need "
"to change the bars' design or their functionality later on. It'd be great if "
"we could have a single scene to store a UI element's template, and child "
"scenes to work on variations. Godot lets us do this with Inherited Scenes."
msgstr ""
"Bar 위젯 하나와 Counter 위젯 하나를 갖고 있습니다. 하지만 각각 두 개가 필요합"
"니다. 나중에는 Bars의 디자인이나 기능을 바꾸게 될 것입니다. 하나의 씬마다 한 "
"UI 요소의 템플릿을 갖도록 만들고, 그것으로 자손 씬을 다양하게 만들 수 있다면 "
"멋질 것입니다. Godot에서는 이를 상속된 씬으로 제공합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:343
msgid ""
"Let's save both the ``Counter`` and the ``Bar`` branches as separate scenes "
"that we'll reduce to create the ``LifeBar``, the ``EnergyBar``, the "
"``BombCounter``, and the ``EmeraldCounter``. Select the ``Bar`` "
"HBoxContainer. Right click on it and click on ``Save Branch as Scene``. Save "
"the scene as ``Bar.tscn``. You should see the node branch turn it to a "
"single ``Bar`` node."
msgstr ""
"``Counter``\\ 와 ``Bar`` 가지 각각을 개별 씬으로 저장합시다. 저장해두면 나중"
"에 ``LifeBar``, ``EnergyBar``, ``BombCounter``, ``EmeraldCounter``\\ 를 만들 "
"시간을 줄일 수 있습니다. ``Bar`` HBoxContainer를 선택하세요. 우클릭하여 ``가"
"지를 씬으로 저장(Save Branch as Scene)``\\ 을 클릭하세요. 씬을 ``Bar.tscn``"
"\\ 으로 저장하세요. 노드 가지가 하나의 ``Bar`` 노드로 바뀐 것을 볼 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:352
msgid ""
"A scene is a tree of nodes. The topmost node is the tree's **root**, and the "
"children at the bottom of the hierarchy are **leaves**. Any node other than "
"the root along with one or more children is a **branch**. We can encapsulate "
"node branches into separate scenes, or load and merge them from other scenes "
"into the active one. Right click on any node in the Scene dock and select "
"``Save Branch as Scene`` or ``Merge from Scene``."
msgstr ""
"한 씬은 하나의 노드 트리입니다. 최상위의 노드는 트리의 **루트(Root)**\\ 이"
"고, 계층 구조의 아래에 해당하는 자손은 **잎**\\ 입니다. 하나 이상의 자손을 갖"
"는 노드의 루트는 **분기(Branch)**\\ 입니다. 노드 분기를 개별 씬으로 캡슐화할 "
"수 있습니다. 아니면 다른 씬에서 활성 씬으로 불러와서 병합할 수 있습니다. 씬"
"(Scene) 독에서 아무 노드나 우클릭하고 ``분기를 씬으로 저장하기(Save Branch "
"as Scene)``\\ 나 ``씬에서 병합하기(Merge from Scene)``\\ 를 선택하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:360
msgid ""
"Then, select the ``Counter`` node and do the same. Right click, ``Save "
"Branch as Scene``, and save it as ``Counter.tscn``. A new edit scene icon "
"appears to the right of the nodes in the scene tree. Click on the one next "
"to ``Bar`` to open the corresponding scene. Resize the ``Bar`` node so that "
"its bounding box fits its content. The way we named and placed the Control "
"nodes, we're ready to inherit this template and create the life bar. It's "
"the same for the ``Counter``."
msgstr ""
"그런 다음 ``Counter`` 노드를 선택하고 같은 작업을 반복하세요. 우클릭, ``분기"
"를 씬으로 저장하기(Save Branch as Scene)``, 그리고 ``Counter.tscn``\\ 으로 저"
"장하세요. 씬 트리에서 노드의 오른쪽에 새로운 편집 씬 아이콘이 나타납니다. "
"``Bar`` 옆에 있는 것을 클릭해서 해당 씬을 여세요. ``Bar``\\ 의 경계 사각형이 "
"내용물에 맞도록 노드의 크기를 조정하세요. Control 노드의 이름을 짓고 배치하"
"는 방법으로, 이 템플릿을 상속하여 체력 막대를 만들 준비가 되었습니다. "
"``Counter``\\ 도 마찬가지입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:370
msgid "With no extra changes, our Bar is ready to use"
msgstr "추가 변경 사항 없이 Bar를 사용할 수 있음"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:373
msgid "Use scene inheritance to create the remaining elements"
msgstr "씬 상속을 사용해서 나머지 요소를 만들기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:375
msgid ""
"We need two bars that work the same way: they should feature a label on the "
"left, with some value, and a horizontal gauge on the right. The only "
"difference is that one has the HP label and is green, while the other is "
"called EP and is yellow. Godot gives us a powerful tool to create a common "
"base to reuse for all bars in the game: **inherited scenes**."
msgstr ""
"똑같이 작동하는 두 막대가 필요합니다: 왼쪽에는 일정 값이 있는 라벨 기능을 맡"
"고, 오른쪽에는 가로로 된 게이지가 있죠. 유일한 차이점은 한 쪽은 HP 라벨이면"
"서 초록 색상인 반면, 다른 쪽은 EP라고 적혀 있고 노랑색인 것입니다. Godot는 일"
"반적인 베이스를 만들어 게임 내 모든 막대에 재사용할 수 있도록 강력한 도구를 "
"제공합니다: **상속된 씬**."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:383
msgid ""
"Inherited scenes help us keep the GUI scene clean. In the end, we will only "
"have containers and one node for each UI component."
msgstr ""
"상속된 씬은 GUI 씬을 깔끔하게 유지하도록 도와줍니다. 끝날 무렵에는, 컨테이너"
"와 각 UI 구성 요소 별 노드 하나만을 갖게될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:386
msgid ""
"On an inherited scene, you can change any property of every node in the "
"inspector, aside from its name. If you modify and save the parent scene, all "
"the inherited scenes update to reflect the changes. If you change a value in "
"the inherited scene, it will always override the parent's property. It's "
"useful for UIs, as they often require variations of the same elements. In "
"general, in UI design, buttons, panels etc. share a common base style and "
"interactions. We don't want to copy it over to all variations manually."
msgstr ""
"상송된 씬이라면, 인스펙터(Inspector)에서 이름을 제외한 모든 속성을 바꿀 수 있"
"습니다. 부모 씬을 수정하고 저장했다면, 모든 상속된 씬은 업데이트되면서 변경 "
"사항이 반영됩니다. 상속된 씬에서 어떤 값을 바꿨다면, 그것을 부모의 속성을 다"
"시 정의한 것이 됩니다. 이 점이 UI에서는 유용합니다. 종종 UI는 같은 요소에서 "
"다양함이 요구되기 때문이죠. 일반적으로 UI 디자인, 버튼, 패널 등은 일반적인 베"
"이스 스타일과 상호 작용을 공유합니다. 이 모든 다양성을 수동으로 복사하고 싶"
"진 않죠."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:395
msgid ""
"A reload icon will appear next to the properties you override. Click it to "
"reset the value to the parent scene's default."
msgstr ""
"다시 정의한 속성 옆에 다시 불러오기 아이콘이 나타날 것입니다. 클릭해서 부모 "
"씬의 기본 값으로 값을 초기화하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:400
msgid ""
"Think of scene inheritance like the node tree, or the ``extends`` keyword in "
"GDScript. An inherited scene does everything like its parent, but you can "
"override properties, resources and add extra nodes and scripts to extend its "
"functionality."
msgstr ""
"씬 상속의 개념은 노드 트리, 혹은 GDScript에서의 ``extends`` 키워드와 비슷합니"
"다. 상속된 씬은 부모가 하는 모든 것을 합니다. 하지만 속성, 리소스를 다시 정의"
"할 수 있고, 기능을 확장하기 위해 노드나 스크립트를 추가할 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:406
msgid "Inherit the Bar Scene to build the LifeBar"
msgstr "LifeBar를 만들기 위해 Bar 씬을 상속하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:408
msgid ""
"Go to ``Scene -> New Inherited Scene`` to create a new type of ``Bar``. "
"Select the Bar scene and open it. You should see a new [unsaved] tab, that's "
"like your ``Bar``, but with all nodes except the root in grey. Press :kbd:"
"`Ctrl + S` (:kbd:`Cmd + S` on macOS) to save the new inherited scene and "
"name it ``LifeBar``."
msgstr ""
"``씬(Scene) -> 새 상속 씬(New Inherited Scene)``\\ 으로 가서 ``Bar``\\ 의 새 "
"유형을 만드세요. Bar 씬을 선택하고 여세요. 새로운 [저장되지 않음(unsaved)] 탭"
"을 볼 수 있습니다. 이 탭에는 ``Bar``\\ 와 비슷하지만, 루트를 제외한 모든 노드"
"가 회색으로 되어 있습니다. :kbd:`Ctrl + S` (macOS는 :kbd:`Cmd + S`) 를 눌러 "
"새 상속 씬을 저장하고 이름을 ``LifeBar``로 지으세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:416
msgid "You can't rename grey nodes. This tells you they have a parent scene"
msgstr ""
"회색 노드를 이름을 바꿀 수 없습니다. 이것은 부모 씬을 갖고 있음을 뜻합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:418
msgid ""
"First, rename the root or top level node to ``LifeBar``. We always want the "
"root to describe exactly what this UI component is. The name differentiates "
"this bar from the ``EnergyBar`` we'll create next. The other nodes inside "
"the scene should describe the component's structure with broad terms, so it "
"works with all inherited scenes. Like our ``TextureProgress`` and ``Number`` "
"nodes."
msgstr ""
"먼저 루트나 상위 계층의 노드의 이름을 ``LifeBar``\\ 로 바꾸세요. 항상 루트는 "
"UI 구성 요소가 정확히 어떤 것인지를 설명해야 합니다. 이 이름이 막대와 나중에 "
"만들 ``EnergyBar``\\ 를 구별하게 만듭니다. 씬에 있는 다른 노드는 구성 요소의 "
"구조를 넓은 범위에서 설명해야 합니다. 따라서 모든 상속된 씬에서도 설명이 돼"
"야 하죠. 마치 ``TextureProgress``\\ 나 ``Number``\\ 노드처럼 말입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:427
msgid ""
"If you've ever done web design, it's the same spirit as working with CSS: "
"you create a base class, and add variations with modifier classes. From a "
"base button class, you'll have button-green and button-red variations for "
"the user to accept and refuse prompts. The new class contains the name of "
"the parent element and an extra keyword to explain how it modifies it. When "
"we create an inherited scene and change the name of the top level node, "
"we're doing the same thing."
msgstr ""
"이제까지 웹 디자인을 해본 적이 있다면, 이 작업은 CSS를 가지고 작업하는 것과 "
"상동할 것입니다: 기초 클래스를 만들고, 수정자 클래스로 변화를 추가하는 것이"
"죠. 기초 버튼 클래스부터, 사용자가 프롬프트를 수락하고 거절하도록 만드는 초"
"록 버튼과 빨강 버튼이라는 변화를 주듯이 말입니다. 새 클래스에는 부모 요소의 "
"이름과 어떻게 수정하는 지에 관한 추가 키워드가 있습니다. 상속된 씬을 만들고, "
"최상위의 노드의 이름을 바꿀 때, 같은 작업을 하고 있는 셈이죠."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:436
msgid "Design the EnergyBar"
msgstr "EnergyBar 설계하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:438
msgid ""
"We already setup the ``LifeBar``'s design with the main ``Bar`` scene. Now "
"we need the ``EnergyBar``."
msgstr ""
"이미 메인 ``Bar`` 씬으로 ``LifeBar``\\ 의 설계를 마쳤습니다. 이제 필요한 것"
"은 ``EnergyBar``\\ 입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:441
msgid ""
"Let's create a new inherited scene, and once again select the ``Bar.tscn`` "
"scene and open it. Double-click on the ``Bar`` root node and rename it to "
"``EnergyBar``. Save the new scene as ``EnergyBar.tscn``. We need to replace "
"the HP texture with EP one, and to change the textures on the gauge."
msgstr ""
"새 상속 씬을 만듭시다. 그리고 다시 한번, ``Bar.tscn`` 씬을 선택하고 여세요. "
"``Bar`` 루트 노드를 더블클릭하고, 이름을 ``EnergyBar``\\ 로 바꾸세요. 새 씬"
"을 ``EnergyBar.tscn``\\ 으로 저장하세요. HP 텍스처를 EP로 교체해야 하고, 게이"
"지의 텍스처를 바꿔야 합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:447
msgid ""
"Head to the FileSystem dock on the left, select the ``Title`` node in the "
"Scene tree and drag and drop the ``label_EP.png`` file onto the texture "
"slot. Select the ``Number`` node and change the ``Text`` property to a "
"different value like ``14``."
msgstr ""
"왼쪽의 파일 시스템(FileSystem) 독으로 가세요. 씬 트리에서 ``Title`` 노드를 선"
"택하고 텍스처 슬롯으로 ``laber_EP.png`` 파일을 드래그 앤 드롭하세요. "
"``Number`` 노드를 선택하고 ``Text`` 속성을 ``14``\\ 로, 혹은 그 외 기존과 다"
"른 값으로 바꾸세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:452
msgid ""
"You'll notice the EP texture is smaller than the HP one. We should update "
"the ``Number``'s font size to better fit it. A font is a resource. All the "
"nodes in the entire project that use this resource will be affected by any "
"property we change. You can try to change the size to a huge value like "
"``40`` and switch back to the ``LifeBar`` or the ``Bar`` scenes. You will "
"see the text increased in size."
msgstr ""
"EP 텍스처가 HP보다 더 작은 것을 눈치챘을 것입니다. 텍스처에 맞도록 ``Number``"
"\\ 의 폰트 크기를 업데이트해야 합니다. 폰트는 리소스입니다. 전체 프로젝트에 "
"있는 노드 중 이 리소스를 사용하고 있는 노드는 이 리소스의 속성을 바꾼 것에 영"
"향을 받게 될 것입니다. 한번 Size를 ``40``\\ 과 같은 큰 값으로 바꾸고 "
"``LifeBar``\\ 나 ``Bar`` 씬으로 돌아가보세요. 문자 크기가 커진 것을 볼 수 있"
"습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:461
msgid "If we change the font resource, all the nodes that use it are affected"
msgstr ""
"폰트 리소스를 바꾸게 되면, 이 리소스를 사용하는 모든 노드가 영향을 받습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:464
msgid ""
"To change the font size on this node only, we must create a copy of the font "
"resource. Select the ``Number`` node again and click on the wrench and "
"screwdriver icon on the top right of the inspector. In the drop-down menu, "
"select the ``Make Sub-Resources Unique`` option. Godot will find all the "
"resources this node uses and create unique copies for us."
msgstr ""
"이 노드에서만 폰트 크기를 바꾸도록 하려면, 폰트 리소스의 사본을 만들어야 합니"
"다. ``Number`` 노드를 다시 선택하고, 인스펙터(Inspector)의 오른쪽 상단에 있"
"는 렌치와 스크루드라이버 아이콘을 클릭하세요. 드롭다운 메뉴에서 ``하위 리소스"
"를 유일하게 만들기(Make Sub-Resources Unique)``\\ 를 선택하세요. Godot는 이 "
"노드에서 사용하는 모든 리소스를 찾아서 유일한 사본을 만들어 줄 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:472
msgid "Use this option to create unique copies of the resources for one node"
msgstr "이 설정을 사용해서 한 노드를 위한 유일한 리소스 사본을 만들었습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:476
msgid ""
"When you duplicate a node from the Scene tree, with :kbd:`Ctrl + D` (:kbd:"
"`Cmd + D` on macOS), it shares its resources with the original node. You "
"need to use ``Make Sub-Resources Unique`` before you can tweak the resources "
"without affecting the source node."
msgstr ""
"씬 트리에서 한 노드를 :kbd:`Ctrl + D` (macOS는 :kbd:`Cmd + D` ) 로 복제하면, "
"원래 노드의 리소스를 공유합니다. 리소스를 수정하기 전에 ``하위 리소스를 유일"
"하게 만들기(Make Sub-Resources Unique)``\\ 를 사용해야 원본 노드에게 영향을 "
"주지 않습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:481
msgid ""
"Scroll down to the ``Custom Font`` section and open ``Font``. Lower the "
"``Size`` to a smaller value like ``20`` or ``22``. You may also need to "
"adjust the ``Bottom`` spacing value to align the text's baseline with the EP "
"label on the left."
msgstr ""
"``Custom Font`` 섹션으로 내려가서``Font``\\ 를 여세요. ``Size``\\ 를 ``20``"
"\\ 이나 ``22``\\ 처럼 더 작은 값으로 낮추세요. 그리고 ``Bottom`` 영역 값을 조"
"정해서 문자의 기준선이 왼쪽의 EP 라벨과 나란하도록 해야합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:488
msgid "The EP Count widget, with a smaller font than its HP counterpart"
msgstr "EP Count 위젯은 HP보다 더 작은 폰트로 되어 있습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:490
msgid ""
"Now, select the ``TextureProgress`` node. Drag the ``energy_bar_bg.png`` "
"file onto the ``Under`` slot and do the same for ``energy_bar_fill.png`` and "
"drop it onto the ``Progress`` texture slot."
msgstr ""
"이제 ``TextureProgress`` 노드를 선택하세요. ``Under 슬롯에 ``energy_bar_bg."
"png`` 파일을 드래그하고, ``Progress`` 텍스처 슬롯에도 마찬가지로 "
"``energy_bar_fill.png``\\ 를 드래그하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:494
msgid ""
"You can resize the node vertically so that its bounding rectangle fits the "
"gauge. Do the same with the ``Count`` node until its size aligns with that "
"of the bar. Because the minimal size of ``TextureProgress`` is set based on "
"its textures, you won't be able to downsize the ``Count`` node below that. "
"That is also the size the ``Bar`` container will have. You may downscale "
"this one as well."
msgstr ""
"노드의 경계 사각형이 게이지에 맞도록 노드를 수직으로 크기를 조절할 수 있습니"
"다. 크기가 막대와 나란해질 때까지 ``Count`` 노드에도 똑같이 적용하세요. "
"``TextureProgress``\\ 의 최소 크기가 텍스처로 설정되어 있기 때문에, "
"``Count`` 노드를 그보다 더 작게 줄일 수는 없습니다. ``Bar`` 컨테이너에도 마찬"
"가지입니다. ``TextureProgress``\\ 도 같이 크기를 줄여야 할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:501
msgid ""
"Last but not least, the ``Background`` container has a minimum size that "
"makes it a bit large. Select it and in the ``Rect`` section, change the "
"``Min Size`` property down to ``80`` pixels. It should resize automatically "
"and the ``Title`` and ``Number`` nodes should reposition as well."
msgstr ""
"마지막으로 ``Background`` 컨테이너가 최소 크기를 가져서 원래보다 조금 더 커졌"
"습니다. 컨테이너를 선택하고, ``Rect`` 섹션에서 ``Min Size`` 속성을 ``80`` 픽"
"셀로 바꾸세요. 자동으로 크기가 조절되면서 ``Title``\\ 과 ``Number`` 노드의 위"
"치도 다시 조정될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:509
msgid "The Count looks better now it's a bit smaller"
msgstr "Count는 더 작아져서 보기 좋아졌습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:513
msgid ""
"The Count node's size affects the position of the TextureProgress. As we'll "
"align our bars vertically in a moment, we're better off using the Counter's "
"left margin to resize our EP label. This way both the EnergyBar's Count and "
"the LifeBar's Count nodes are one hundred pixels wide, so both gauges will "
"align perfectly."
msgstr ""
"Count 노드의 크기는 TextureProgress의 위치에 영향을 받습니다. Bar를 수직으로 "
"나열하기 때문에, EP 라벨의 크기를 조절하기 위해 Counter의 왼쪽 여백을 사용하"
"는 것이 좋습니다. EnergyBar의 Count와 LifeBar의 Count 노드 둘다 100 픽셀 너비"
"이기 때문에, 이 방법으로 두 게이지가 완벽하게 나란히 있을 수 있는 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:520
msgid "Prepare the bomb and emerald counters"
msgstr "폭탄과 에메랄드 카운터 준비하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:522
msgid ""
"Let us now take care of the counters. Go to ``Scene -> New Inherited Scene`` "
"and select the ``Counter.tscn`` as a base. Rename the root node as "
"``BombCounter`` too. Save the new scene as ``BombCounter.tscn``. That's all "
"for this scene."
msgstr ""
"카운터를 다루어봅시다. ``씬(Scene) -> 새 상속 씬(New Inherited Scene)``\\ 으"
"로 가서, ``Counter.tscn``\\ 을 기본 씬으로 선택하세요. 루트 노드의 이름도 "
"``BombCounter``\\ 로 바꾸세요. 새 씬을 ``BombCounter.tscn``\\ 으로 저장하세"
"요. 이것이 이 씬의 전부입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:529
msgid "The bomb counter is the same as the original Counter scene"
msgstr "폭탄 카운터는 원래 Counter 씬과 같습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:531
#, fuzzy
msgid ""
"Go to ``Scene -> New Inherited Scene`` again and select ``Counter.tscn`` "
"once more. Rename the root node ``EmeraldCounter`` and save the scene as "
"``EmeraldCounter.tscn``. For this one, we mainly need to replace the bomb "
"icon with the emerald icon. In the FileSystem tab, drag the ``emeralds_icon."
"png`` onto the ``Icon`` node's ``Texture`` slot. ``Icon`` already anchors to "
"the right edge of the ``Background`` node so we can change its position and "
"it will scale and reposition with the ``EmeraldCounter`` container. Shift "
"the emerald icon a bit to the right and down. Use the Arrow Keys on the "
"keyboard to nudge its position. Save, and we're done with all the UI "
"elements."
msgstr ""
"다시 ``씬(Scene) -> 새 상속 씬(New Inherited Scene)``\\ 으로 가서, 다시 "
"``Counter.tscn``\\ 을 선택합니다. 루트 노드의 이름을 ``EmeraldCounter``\\ 로 "
"바꾸고, 씬을 ``EmeraldCounter.tscn``\\ 으로 저장하세요. 이 씬에게는 폭탄 아이"
"콘 대신 에메랄드 아이콘으로 바꿔야 합니다. 파일 시스템(FileSystem) 탭에서 "
"``emeralds_icon.png``\\ 를 ``Icon`` 노드의 ``Texture`` 슬롯으로 드래그하세"
"요. ``Icon``\\ 은 이미 ``Background`` 노드의 오른쪽 모서리에 앵커되어 있습니"
"다. 따라서 노드의 위치를 바꿀 수 있고, ``EmeraldCounter`` 컨테이너로 크기와 "
"위치를 조정할 수 있습니다. 에메랄드 아이콘을 오른쪽 아래로 약간 움직이세요. "
"키보드의 화살표 키로 위치를 미세하게 조정하세요. 저장하고, 모든 UI 요소가 완"
"성되었습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:544
msgid "The emerald counter should look something like this"
msgstr "에메랄드 카운터는 이와 같이 보여야 합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:547
msgid "Add the UI components to the final GUI"
msgstr "최종 GUI에 UI 구성 요소들을 추가하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:549
msgid ""
"Time to add all the UI elements to the main GUI scene. Open the ``GUI.tscn`` "
"scene again, and delete the ``Bar`` and ``Counter`` nodes. In the FileSystem "
"dock, find the ``LifeBar.tscn`` and drag and drop it onto the ``Bars`` "
"container in the scene tree. Do the same for the ``EnergyBar``. You should "
"see them align vertically."
msgstr ""
"메인 GUI 씬에 모든 UI 요소를 추가할 시간입니다. 다시 ``GUI.tscn`` 씬을 열고, "
"``Bar``\\ 와 ``Counter`` 노드를 삭제하세요. 파일 시스템(FileSystem) 독에서 "
"``LifeBar.tscn``\\ 을 찾고, 씬 트리에서 ``Bars`` 컨테이너에 드래그 앤 드롭하"
"세요. ``EnergyBar``\\ 에도 마찬가지로 하세요. 수직으로 나란히 있는 것을 볼 "
"수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:557
msgid "The LifeBar and the EnergyBar align automatically"
msgstr "LifeBar와 EnergyBar가 자동으로 정렬됩니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:559
msgid ""
"Now, drag and drop the ``BombCounter.tscn`` and ``EmeraldCounter.tscn`` "
"scenes onto the ``Counters`` node. They'll resize automatically."
msgstr ""
"이제 ``BombCounter.tscn``\\ 와 ``EmeraldCounter.tscn`` 씬을 ``Counters`` 노드"
"에 드래그 앤 드롭하세요. 자동으로 크기가 조절될 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:564
msgid "The nodes resize to take all the available vertical space"
msgstr "노드는 가능한 모든 수직 공간을 차지하도록 크기를 조절합니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:566
msgid ""
"To let the ``EmeraldCounter`` and ``BombCounter`` use the size we defined in "
"``Counter.tscn``, we need to change the ``Size Flags`` on the ``Counters`` "
"container. Select the ``Counters`` node and unfold the ``Size Flags`` "
"section in the Inspector. Uncheck the ``Fill`` tag for the ``Vertical`` "
"property, and check ``Shrink Center`` so the container centers inside the "
"``HBoxContainer``."
msgstr ""
"``EmeraldCounter``\\ 와 ``BombCounter``\\ 가 ``Counter.tscn``\\ 에서 정의한 "
"크기를 사용하도록 하려면, ``Counters`` 컨테이너의 ``Size Flags``\\ 를 바꿔야 "
"합니다. ``Counters`` 노드를 선택하고 인스펙터(Inspector)에서 ``Size Flags`` "
"섹션을 펼치세요. ``Vertical`` 속성에 있는 ``Fill`` 태그의 체크 상태를 풀고, "
"``Shrink Center``\\ 를 체크하면 컨테이너는 ``HBoxContainer`` 안에서 중앙에 위"
"치합니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:575
msgid "Now both counters have a decent size"
msgstr "이제 카운터 모두 적당한 크기를 가졌습니다"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:579
msgid ""
"Change the ``Min Size`` property of the ``Counters`` container to control "
"the height of the counters' background."
msgstr ""
"``Counters`` 컨테이너의 ``Min Size`` 속성을 바꿔서 Counters의 배경의 높이를 "
"조정하세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:582
msgid ""
"We have one small issue left with the EP label on the EnergyBar: the 2 bars "
"should align vertically. Click the icon next to the ``EnergyBar`` node to "
"open its scene. Select the ``Count`` node and scroll down to the ``Custom "
"Constants`` section. Add a ``Margin Left`` of ``20``. In the ``Rect`` "
"section set the node's ``Min Size`` back to 100, the same value as on the "
"LifeBar. The ``Count`` should now have some margin on the left. If you save "
"and go back to the GUI scene, it will be aligned vertically with the "
"``LifeBar``."
msgstr ""
"EnergyBar의 EP 라벨에 한 가지 문제가 남았습니다: 두 막대는 수직으로 나란히 있"
"어야 합니다. ``EnergyBar`` 노드 옆의 아이콘을 클릭해서 노드의 씬을 여세요. "
"``Count`` 노드를 선택하고 ``Custom Constants`` 섹션으로 가세요. ``Margin "
"Left``\\ 를 ``20``\\ 으로 추가하세요. ``Rect`` 섹션에서 노드의 ``Min Size``"
"\\ 를 다시 100으로 돌려놓으세요. 이 값은 LifeBar에 설정된 값과 같습니다. "
"``Count``\\ 는 왼쪽에 이제 여백이 생길 것입니다. 저장하고 다시 GUI 씬으로 돌"
"아간다면, ``LifeBar``\\ 와 수직으로 나란히 있을 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:593
msgid "The 2 bars align perfectly"
msgstr "완벽하게 정렬된 두 막대"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:597
msgid ""
"We could have set up the ``EnergyBar`` this way a few moments ago. But this "
"shows you that you can go back to any scene anytime, tweak it, and see the "
"changes propagate through the project!"
msgstr ""
"방금 전, 이 방법으로 ``EnergyBar``\\ 를 설정할 수 있었습니다. 하지만 이는 언"
"제든지 돌아가서 값을 조정하고, 그 변경 사항이 프로젝트를 통해 전파되는 것을 "
"볼 수 있다는 것을 보여줍니다!"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:602
msgid "Place the GUI onto the game's mockup"
msgstr "게임 모형에 GUI를 배치하기"

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:604
msgid ""
"To wrap up the tutorial we're going to insert the GUI onto the game's mockup "
"scene."
msgstr "튜토리얼을 마무리하기 위해, 게임 모형 씬에 GUI를 삽입할 것입니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:607
msgid "Head to the FileSystem dock and open ``LevelMockup.tscn``."
msgstr "파일 시스템(FileSystem) 독으로 가서 ``LevelMockup.tscn``\\ 을 여세요."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:609
msgid ""
"Drag-and-drop the ``GUI.tscn`` scene right below the ``bg`` node and above "
"the ``Characters``. The GUI will scale to fit the entire viewport. Head to "
"the Layout menu and select the ``Center Top`` option so it anchors to the "
"top edge of the game window. Then resize the GUI to make it as small as "
"possible vertically. Now you can see how the interface looks in the context "
"of the game."
msgstr ""
"``bg`` 노드 아래와 ``Characters`` 노드 위에 ``GUI.tscn`` 씬을 드래그 앤 드롭"
"하세요. GUI는 전체 뷰포트에 맞게 크기가 조절될 것입니다. 레이아웃(Layout) 메"
"뉴로 가서 ``위쪽 중앙(Center Top)`` 설정을 선택하세요. GUI는 게임 창의 위쪽 "
"모서리에 앵커될 것입니다. 그런 다음 GUI를 수직으로 가능한 작게 크기를 조절하"
"세요. 이제 게임의 맥락에서 인터페이스가 어떻게 보이는 지 알 수 있습니다."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:616
msgid ""
"Congratulations for getting to the end of this long tutorial. You can find "
"the final project here: :download:`ui_gui_design.zip <files/ui_gui_design."
"zip>`."
msgstr ""
"이 긴 튜토리얼을 마친 것을 축하합니다. 여기서 최종 프로젝트를 찾아가세요: :"
"download:`ui_gui_design.zip <files/ui_gui_design.zip>`."

#: ../../docs/getting_started/step_by_step/ui_game_user_interface.rst:625
msgid ""
"**A final note about Responsive Design**. If you resize the GUI, you'll see "
"the nodes move, but the textures and text won't scale. The GUI also has a "
"minimum size, based on the textures inside of it. In games, we don't need "
"the interface to be as flexible as that of a website. You almost never want "
"to support both landscape and portrait screen orientations. It's one or the "
"other. In landscape orientation, the most common ratios range from 4:3 to "
"16:9. They are close to one another. That's why it's enough for the GUI "
"elements to only move horizontally when we change the window size."
msgstr ""
"**반응형 디자인의 마지막 주석**. GUI의 크기를 조정하면 노드가 움직이는 것을 "
"볼 수 있지만, 텍스처와 문자는 크기가 조절되지 않습니다. 또한 GUI는 들어있는 "
"텍스처에 따라 최소 크기가 있습니다. 게임이 웹페이지처럼 유연한 인터페이스를 "
"가질 필요는 없습니다. 보통 가로 화면과 세로 화면 모두를 지원하고 싶지는 않을 "
"것입니다. 둘 중 하나만 지원하겠죠. 가로 화면이라면 가장 일반적인 비율은 4:3에"
"서 16:9 사이입니다. 이들은 서로 비슷합니다. 이것이 창 크기를 바꿀 때 GUI 요소"
"가 수평으로만 이동하는 것이 충분한 이유입니다."
