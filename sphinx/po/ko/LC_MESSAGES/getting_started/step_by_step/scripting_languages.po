# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2022, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-24 15:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Scripting languages"
msgstr "씬 스크립팅하기"

msgid ""
"This lesson will give you an overview of the available scripting languages "
"in Godot. You will learn the pros and cons of each option. In the next part, "
"you will write your first script using GDScript."
msgstr ""

msgid ""
"**Scripts attach to a node and extend its behavior**. This means that "
"scripts inherit all functions and properties of the node they attach to."
msgstr ""

msgid ""
"For example, take a game where a Camera2D node follows a ship. The Camera2D "
"node follows its parent by default. Imagine you want it to shake when the "
"player takes damage. As this feature is not built-into Godot, you would "
"attach a script to it and code the camera shake."
msgstr ""

#, fuzzy
msgid "Available scripting languages"
msgstr "다른 스크립팅 언어와 소통하기"

msgid ""
"Godot offers **five gameplay programming languages**: GDScript, C#, "
"VisualScript, and C++ and C via its GDNative technology. There are more :ref:"
"`community-supported languages <doc_what_is_gdnative_third_party_bindings>`, "
"but these are the official ones."
msgstr ""

msgid ""
"You can use multiple languages in a single project. For instance, in a team, "
"you could code gameplay logic in GDScript as it's fast to write, let level "
"designers script quests in the graphical language VisualScript, and use C# "
"or C++ to implement complex algorithms and maximize their performance. Or "
"you can write everything in GDScript or C#. It's your call."
msgstr ""

msgid ""
"We provide this flexibility to answer the needs of different game projects "
"and developers."
msgstr ""

#, fuzzy
msgid "Which language should I use?"
msgstr "어떤 이동 메서드를 사용해야 할까요?"

msgid ""
"If you're a beginner, we recommend to **start with GDScript**. We made this "
"language specifically for Godot and the needs of game developers. It has a "
"lightweight and straightforward syntax and provides the tightest integration "
"with Godot."
msgstr ""

msgid ""
"For C#, you will need an external code editor like `VSCode <https://code."
"visualstudio.com/>`_ or Visual Studio. While C# support is now mature, you "
"will also find fewer learning resources for it compared to GDScript. That's "
"why we recommend C# mainly to users who already have experience with the "
"language."
msgstr ""

msgid "Let's look at each language's features, as well as its pros and cons."
msgstr ""

msgid "GDScript"
msgstr "GDScript"

msgid ""
":ref:`GDScript<doc_gdscript>` is an `object-oriented <https://en.wikipedia."
"org/wiki/Object-oriented_programming>`_ and `imperative <https://en."
"wikipedia.org/wiki/Imperative_programming>`_ programming language built for "
"Godot. It's made by and for game developers to save you time coding games. "
"Its features include:"
msgstr ""

msgid "A simple syntax that leads to short files."
msgstr ""

msgid "Blazing fast compilation and loading times."
msgstr ""

#, fuzzy
msgid ""
"Tight editor integration, with code completion for nodes, signals, and more "
"information from the scene it's attached to."
msgstr ""
"에디터 통합은 노드, 시그널, 그리고 많은 편집 중인 씬과 관련된 항목을 위한 코"
"드 완성으로 우리를 즐겁게 합니다."

#, fuzzy
msgid ""
"Built-in vector and transform types, making it efficient for heavy use of "
"linear algebra, a must for games."
msgstr ""
"(Vectors, transforms 등과 같은) 많은 벡터 유형을 지니고 있어서, 선형 대수를 "
"많이 사용하는데 효율적입니다."

#, fuzzy
msgid ""
"Supports multiple threads as efficiently as statically typed languages. This "
"is one of the features we couldn't provide easily with a third-party "
"language like Lua or Python."
msgstr ""
"정적 타입 언어처럼 효율적인 여러 스레드를 지원합니다 - 이것이 Lua, Squirrel "
"등의 가상 머신을 피하게 만든 제한 중 하나 입니다."

msgid ""
"No `garbage collection <https://en.wikipedia.org/wiki/"
"Garbage_collection_(computer_science)>`_, as this feature eventually gets in "
"the way when creating games. The engine counts references and manages the "
"memory for you in most cases by default, but you can also control memory if "
"you need to."
msgstr ""

msgid ""
"`Gradual typing <https://en.wikipedia.org/wiki/Gradual_typing>`_. Variables "
"have dynamic types by default, but you also can use type hints for strong "
"type checks."
msgstr ""

msgid ""
"GDScript looks like Python as you structure your code blocks using "
"indentations, but it doesn't work the same way in practice. It's inspired by "
"multiple languages, including Squirrel, Lua, and Python."
msgstr ""

msgid "Why don't we use Python or Lua directly?"
msgstr ""

msgid ""
"Years ago, Godot used Python, then Lua. Both languages' integration took a "
"lot of work and had severe limitations. For example, threading support was a "
"big challenge with Python."
msgstr ""

msgid ""
"Developing a dedicated language doesn't take us more work and we can tailor "
"it to game developers' needs. We're now working on performance optimizations "
"and features that would've been difficult to offer with third-party "
"languages."
msgstr ""

msgid ".NET / C#"
msgstr ".NET / C#"

#, fuzzy
msgid ""
"As Microsoft's `C# <https://en.wikipedia.org/wiki/"
"C_Sharp_(programming_language)>`_ is a favorite amongst game developers, we "
"officially support it. C# is a mature and flexible language with tons of "
"libraries written for it. We could add support for it thanks to a generous "
"donation from Microsoft."
msgstr ""
"Microsoft의 C#은 게임 개발자들 사이에서 사랑받는 언어입니다. 그래서 이 언어"
"를 공식적으로 지원합니다. C#은 많은 코드로 작성된 완전한 언어로, Microsoft의 "
"자비로운 기여 덕분에 지원할 수 있게 되었습니다."

#, fuzzy
msgid ""
"C# offers a good tradeoff between performance and ease of use, although you "
"should be aware of its garbage collector."
msgstr ""
"비록 가비지 컬렉터에 대해 알아야 하지만 이 언어는 성능과 사용 용이성 두 가지"
"를 절충하고 있습니다."

msgid ""
"You must use the Mono edition of the Godot editor to script in C#. You can "
"download it on the Godot website's `download <https://godotengine.org/"
"download/>`_ page."
msgstr ""

#, fuzzy
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory, you can use any third-party .NET library or framework in Godot, as "
"well as any Common Language Infrastructure-compliant programming language, "
"such as F#, Boo, or ClojureCLR. However, C# is the only officially "
"supported .NET option."
msgstr ""
"Godot가 `Mono <https://mono-project.com>`_ .NET 런타임을 사용하기 때문에, 이"
"론적으로 F#, Boo, ClojureCLR와 같은 공통 언어 기반 호환 프로그래밍 언어를 포"
"함한 모든 제 3자 .NET 라이브러리나 프레임워크를 Godot의 스크립트로 사용할 수 "
"있습니다. 하지만 실제로는 C#만 공식으로 지원하는 .NET 옵션입니다."

msgid ""
"GDScript code itself doesn't execute as fast as compiled C# or C++. However, "
"most script code calls functions written with fast algorithms in C++ code "
"inside the engine. In many cases, writing gameplay logic in GDScript, C#, or "
"C++ won't have a significant impact on performance."
msgstr ""

msgid "VisualScript"
msgstr "비주얼스크립트(VisualScript)"

msgid ""
":ref:`Visual Scripting<doc_what_is_visual_script>` is a graph-based visual "
"programming language where you connect blocks. It can be a great tool for "
"non-programmers like game designers and artists."
msgstr ""

msgid ""
"You can use other languages to create custom blocks that are specific to "
"your game. For example, to script AIs, quests, or dialogues. That's where "
"the strength of VisualScript lies."
msgstr ""

msgid ""
"While it provides all the basic building blocks you need to code complete "
"games, we do not recommend to use VisualScript this way. Programming "
"everything with it is slow compared to using other programming languages."
msgstr ""

msgid ""
"For more information, see :ref:`Getting started with VisualScript "
"<doc_getting_started_visual_script>`."
msgstr ""

msgid "C and C++ via GDNative"
msgstr ""

#, fuzzy
msgid ""
"GDNative allows you to write game code in C or C++ without needing to "
"recompile or even restart Godot."
msgstr ""
"마지막으로 3.0 출시에서 가장 빛나는 추가 요소입니다: GDNative는 Godot를 다시 "
"컴파일하지 않아도 (심지어 재시작하지 않아도) C++로 스크립팅할 수 있게 해줍니"
"다."

#, fuzzy
msgid ""
"You can use any version of the language or mix compiler brands and versions "
"for the generated shared libraries, thanks to our use of an internal C API "
"Bridge."
msgstr ""
"내부 C API Bridge를 사용한 덕분에 모든 C++버전을 사용할 수 있고, 생성된 공유 "
"라이브러리의 컴파일러 브랜드와 버전을 완벽하게 혼합할 수 있습니다."

#, fuzzy
msgid ""
"This language is the best choice for performance. You don't need to use it "
"throughout an entire game, as you can write other parts in GDScript, C#, or "
"VisualScript."
msgstr ""
"이 언어는 성능에 있어서는 최고이지만 게임 전체에 사용할 필요는 없습니다. "
"GDScript나 VisualScript을 통해 다른 부분을 작성할 수 있기 때문이죠. 그러나 "
"GDNative의 API는 Godot의 실제 C++ API와 유사하기 때문에 명확하고 사용하기 쉽"
"습니다."

msgid ""
"When working with GDNative, the available types, functions, and properties "
"closely resemble Godot's actual C++ API."
msgstr ""

msgid "Summary"
msgstr "요약"

msgid ""
"Scripts are files containing code that you attach to a node to extend its "
"functionality."
msgstr ""

msgid ""
"Godot supports five official scripting languages, offering you flexibility "
"between performance and ease of use."
msgstr ""

msgid ""
"You can mix languages, for instance, to implement demanding algorithms with "
"C or C++ and write most of the game logic with GDScript or C#."
msgstr ""

#, fuzzy
msgid "Translation status"
msgstr "번역 형식"
