# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-30 19:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/filesystem.rst:4
msgid "File system"
msgstr "파일 시스템(File system)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:7
msgid "Introduction"
msgstr "소개"

#: ../../docs/getting_started/step_by_step/filesystem.rst:9
msgid ""
"A file system manages how assets are stored and how they are accessed. A "
"well-designed file system also allows multiple developers to edit the same "
"source files and assets while collaborating. Godot stores all assets as "
"files in its file system."
msgstr ""
"파일 시스템은 애셋을 저장하고 접근하는 방법을 관리합니다. 잘 설계된 파일 시스"
"템은 여러 개발자가 협업하며 같은 소스 파일과 애셋을 편집할 수 있습니다. Godot"
"는 모든 애셋을 파일 시스템에 파일의 형태로 저장합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:15
msgid "Implementation"
msgstr "구현"

#: ../../docs/getting_started/step_by_step/filesystem.rst:17
msgid ""
"The file system stores resources on disk. Anything, from a script, to a "
"scene or a PNG image is a resource to the engine. If a resource contains "
"properties that reference other resources on disk, the paths to those "
"resources are also included. If a resource has sub-resources that are built-"
"in, the resource is saved in a single file together with all the bundled sub-"
"resources. For example, a font resource is often bundled together with the "
"font textures."
msgstr ""
"파일 시스템은 리소스를 디스크에 저장합니다. 스크립트에서 씬이나 PNG 이미지까"
"지 어떤 것이든, 엔진에게는 리소스 입니다. 리소스가 디스크 내 다른 리소스의 참"
"조를 속성으로 갖고 있다면, 그 리소스로 가는 경로 또한 포함됩니다. 리소스가 내"
"장 하위 리소스를 갖는다면, 그 리소스는 모든 묶인 하위 리소스들과 함께 단일 파"
"일로 저장됩니다. 예를 들어, 폰트 리소스는 종종 폰트 텍스처와 묶여집니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:24
msgid ""
"The Godot file system avoids using metadata files. Existing asset managers "
"and VCSs are better than anything we can implement, so Godot tries its best "
"to play along with SVN, Git, Mercurial, Perforce, etc."
msgstr ""
"Godot 파일 시스템은 메타데이터 파일 사용을 피합니다. 기존 애셋 관리자와 버전 "
"관리 시스템(VCS)은 우리가 구현할 수 있는 것보다 훨씬 더 뛰어나기 때문에, "
"Godot는 SVN, Git, Mercurial, Perforce 등과 작업하도록 최선을 다합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:28
msgid "Example of file system contents:"
msgstr "파일 시스템 내용물 예시:"

#: ../../docs/getting_started/step_by_step/filesystem.rst:39
msgid "project.godot"
msgstr "project.godot"

#: ../../docs/getting_started/step_by_step/filesystem.rst:41
#, fuzzy
msgid ""
"The ``project.godot`` file is the project description file, and it is always "
"found at the root of the project. In fact, its location defines where the "
"root is. This is the first file that Godot looks for when opening a project."
msgstr ""
"project.godot 파일은 프로젝트 설명 파일이고, 항상 프로젝트의 루트에서 찾으실 "
"수 있습니다. 사실 파일 위치가 루트의 위치를 정의합니다. 이 파일은 프로젝트를 "
"열 때 Godot가 제일 먼저 찾는 파일입니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:45
#, fuzzy
msgid ""
"This file contains the project configuration in plain text, using the win."
"ini format. Even an empty ``project.godot`` can function as a basic "
"definition of a blank project."
msgstr ""
"이 파일은 프로젝트 설정을 win.ini 형식을 사용해, 일반 텍스트로 갖습니다. 심지"
"어 비어있는 project.godot도 비어있는 프로젝트의 기본 정의 기능을 할 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:50
msgid "Path delimiter"
msgstr "경로 구분 기호"

#: ../../docs/getting_started/step_by_step/filesystem.rst:52
#, fuzzy
msgid ""
"Godot only supports ``/`` as a path delimiter. This is done for portability "
"reasons. All operating systems support this, even Windows, so a path such as "
"``C:\\project\\project.godot`` needs to be typed as ``C:/project/project."
"godot``."
msgstr ""
"Godot는 오직 ``/``\\ 만을 경로 구분 기호로 지원합니다. 그 이유는 이식 능력 입"
"니다. Windows를 포함한 모든 운영체제가 이 기호를 지원하기 때문에, ``c:"
"\\project\\project.godot``\\ 같은 경로는 ``c:/project/project.godot``\\ 로 적"
"어야 합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:58
msgid "Resource path"
msgstr "리소스 경로(Resource path)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:60
msgid ""
"When accessing resources, using the host OS file system layout can be "
"cumbersome and non-portable. To solve this problem, the special path ``res://"
"`` was created."
msgstr ""
"리소스를 접근할 때, 호스트 OS 파일 시스템 레이아웃을 사용하는 것은 성가시고 "
"휴대성이 떨어질 수 있습니다. 이 문제를 해결하기 위해, ``res://`` 라는 특수 경"
"로가 만들어졌습니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:64
#, fuzzy
msgid ""
"The path ``res://`` will always point at the project root (where ``project."
"godot`` is located, so ``res://project.godot`` is always valid)."
msgstr ""
"``res://`` 경로는 항상 프로젝트 루트를 향합니다 (거기에는 project.godot이 있"
"고, 그래서 ``res://project.godot`` 경로는 항상 존재합니다)."

#: ../../docs/getting_started/step_by_step/filesystem.rst:68
msgid ""
"This file system is read-write only when running the project locally from "
"the editor. When exported or when running on different devices (such as "
"phones or consoles, or running from DVD), the file system will become read-"
"only and writing will no longer be permitted."
msgstr ""
"파일 시스템은 편집기에서 프로젝트를 지역으로 실행 중일 때만 읽고 씁니다. 내보"
"내질 때나 아니면 다른 기기에서 실행 중일 때 (휴대전화나 콘솔, 혹은 DVD로 실"
"행), 파일 시스템은 읽기만 하고 더 이상 쓰기가 용납되지 않습니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:74
msgid "User path"
msgstr "사용자 경로(User path)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:76
#, fuzzy
msgid ""
"Writing to disk is still needed for tasks such as saving game state or "
"downloading content packs. To this end, the engine ensures that there is a "
"special path ``user://`` that is always writable. This path resolves "
"differently depending on the OS the project is running on. Local path "
"resolution is further explained in :ref:`doc_data_paths`."
msgstr ""
"디스크 쓰기는 게임 상태를 저장하거나 콘텐츠 팩을 다운로드하는 등의 작업에 여"
"전히 필요합니다. 이를 위해, 엔진은 언제나 작성 가능한 ``user://`` 라는 특수 "
"경로를 보장합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:83
msgid "Host file system"
msgstr "호스트 파일 시스템(Host file system)"

#: ../../docs/getting_started/step_by_step/filesystem.rst:85
msgid ""
"Alternatively host file system paths can also be used, but this is not "
"recommended for a released product as these paths are not guaranteed to work "
"on all platforms. However, using host file system paths can be useful when "
"writing development tools in Godot."
msgstr ""
"또는 호스트 파일 시스템 경로도 사용될 수 있습니다, 하지만 이것이 모든 플랫폼"
"에서 작동된다는 보장은 없으니 출시된 제품에 이 경로를 쓰는 것을 추천하지는 않"
"습니다. 하지만, 호스트 파일 시스템 경로는 Godot에서 개발 도구를 만들 때 유용"
"할 수 있습니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:91
msgid "Drawbacks"
msgstr "단점"

#: ../../docs/getting_started/step_by_step/filesystem.rst:93
msgid ""
"There are some drawbacks to this simple file system design. The first issue "
"is that moving assets around (renaming them or moving them from one path to "
"another inside the project) will break existing references to these assets. "
"These references will have to be re-defined to point at the new asset "
"location."
msgstr ""
"이 간단한 파일 시스템 설계에는 몇 가지 단점이 있습니다. 첫 번째 문제는 애셋"
"의 이동으로 (프로젝트 내에서 이름을 바꾸거나 한 경로를 다른 곳으로 옮기는 "
"등) 이 애셋에 관해 존재하는 참조를 깨버릴 것입니다. 이 참조는 새 애셋 위치를 "
"향하도록 다시 정의해야만 합니다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:98
msgid ""
"To avoid this, do all your move, delete and rename operations from within "
"Godot, on the FileSystem dock. Never move assets from outside Godot, or "
"dependencies will have to be fixed manually (Godot detects this and helps "
"you fix them anyway, but why go the hard route?)."
msgstr ""
"이를 피하기 위해, Godot에서, 파일 시스템 독 내에서, 위치를 바꾸거나 이름을 바"
"꾸거나 삭제하는 등의 모든 작업을 해야만 합니다. Godot 밖에서 애셋을 움직이지 "
"마세요, 그렇지 않으면 종속 여부를 수동으로 설정해야만 합니다 (Godot는 이를 감"
"지하고 당신이 고치는 것을 어쨌든 도울 것이지만, 왜 어려운 길로 가시나요?)."

#: ../../docs/getting_started/step_by_step/filesystem.rst:103
#, fuzzy
msgid ""
"The second is that, under Windows and macOS, file and path names are case "
"insensitive. If a developer working in a case insensitive host file system "
"saves an asset as ``myfile.PNG``, but then references it as ``myfile.png``, "
"it will work fine on their platform, but not on other platforms, such as "
"Linux, Android, etc. This may also apply to exported binaries, which use a "
"compressed package to store all files."
msgstr ""
"두 번째로 Windows와 macOS에서는 파일과 경로 이름을 대소문자를 구별하지 않는 "
"것입니다. 대소문자를 구분하지 않는 호스트 파일 시스템이 애셋을 \"myfile.PNG"
"\"라고 저장하지만, \"myfile.png\" 로 참조됩니다, 그 플랫폼 내에서는 작동이 "
"잘 될 것입니다, 하지만 Linux, Android 등의 플랫폼에서는 작동하지 않습니다. 이"
"는 압축된 패키지로 모든 파일을 저장하는 내보낸 바이너리에도 적용될 수 있습니"
"다."

#: ../../docs/getting_started/step_by_step/filesystem.rst:109
msgid ""
"It is recommended that your team clearly define a naming convention for "
"files when working with Godot. One simple fool-proof convention is to only "
"allow lowercase file and path names."
msgstr ""
"Godot로 작업할 때 팀이 명명 규칙을 분명하게 정의하는 것을 추천합니다. 간단한 "
"바보 같은 규칙으로는 파일과 경로 이름을 소문자로만 허락하는 것이 있습니다."
