# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-08 22:29+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:4
msgid "Instancing (continued)"
msgstr "인스턴스하기 (이어서)"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:7
msgid "Recap"
msgstr "복습"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:9
msgid "Instancing has many handy uses. At a glance, with instancing you have:"
msgstr ""
"인스턴스하는 것은 다양한 용도가 있습니다. 인스턴스를 통해 무엇을 할 수 있는"
"지 간단히 살펴봅시다:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:11
msgid "The ability to subdivide scenes and make them easier to manage."
msgstr "씬을 여러 하위 객체로 나누어 관리하기 쉽게 하는 기능."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:12
msgid "A tool to manage and edit multiple node instances at once."
msgstr "한번에 여러 노드 인스턴스를 관리하고 편집할 수 있는 도구."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:13
msgid ""
"A way to organize and embed complex game flows or even UIs (in Godot, UI "
"Elements are nodes, too)."
msgstr ""
"복잡한 게임 흐름이나 심지어 UI마저도 묶고 조직할 수 있는 방법 (Godot에서는 "
"UI 요소도 노드입니다)."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:17
msgid "Design language"
msgstr "디자인 언어"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:19
msgid ""
"But the greatest strength that comes with instancing scenes is that it works "
"as an excellent design language. This distinguishes Godot from all the other "
"engines out there. Godot was designed from the ground up around this concept."
msgstr ""
"하지만 씬을 인스턴스하는 것의 가장 강력한 점은 인스턴스가 우수한 디자인 언어"
"로써 작동하는 점입니다. 이것이 Godot와 다른 알려진 엔진들을 구분되는 특징입니"
"다. Godot는 애초에 바닥부터 이러한 컨셉으로 설계되었습니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:24
msgid ""
"When making games with Godot, the recommended approach is to dismiss most "
"common design patterns, such as MVC or Entity-Relationship diagrams, and "
"instead think about your scenes in a more natural way. Start by imagining "
"the visible elements in your game, the ones that can be named not just by a "
"programmer, but by anyone."
msgstr ""
"Godot로 게임을 만들 때는, MVC나 개체-관계 다이어그램과 같이 일반적으로 쓰이"
"는 디자인 패턴을 버리고, 씬을 좀 더 자연스럽게 바라보기를 권장합니다. 게임에"
"서 보이는 요소를 상상하는 것으로 시작하세요. 그 요소가 프로그래머가 이야기 하"
"는 요소가 아니라 누구나 부르는 것 말이죠."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:30
msgid "For example, here's how a simple shooter game could be imagined:"
msgstr "예를 들어 간단한 슈팅 게임을 다음과 같이 상상해 볼 수 있습니다:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:34
msgid ""
"You can come up with a diagram like this for almost any kind of game. Write "
"down the parts of the game that you can visualize, and then add arrows to "
"represent ownership of one component by another."
msgstr ""
"거의 모든 종류의 게임에서 이런 다이어그램을 상상해 볼 수 있습니다. 게임에서 "
"시각화할 수 있는 부분을 쭉 적어보고, 각 구성 요소 간 소유권을 나타내기 위한 "
"화살표를 추가합니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:38
msgid ""
"Once you have a diagram like this, the recommended process for making a game "
"is to create a scene for each element listed in the diagram. You'll use "
"instancing (either by code or directly in the editor) for the ownership "
"relationships."
msgstr ""
"이렇게 다이어그램이 만들고 나서, 추천하는 게임 제작 과정은 다이어그램에 각 요"
"소로 이루어진 씬을 만드는 것입니다.(코드 또는 편집기에서 직접) 인스턴스를 사"
"용해서 소유권 관계를 만들게 됩니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:42
msgid ""
"A lot of time spent in programming games (or software in general) is on "
"designing an architecture and fitting game components to that architecture. "
"Designing based on scenes replaces that approach and makes development much "
"faster and more straightforward, allowing you to concentrate on the game "
"logic itself. Because most game components map directly to a scene, using a "
"design based on scene instantiation means little other architectural code is "
"needed."
msgstr ""
"게임을 (혹은 일반적으로 소프트웨어를) 프로그래밍할 때 가장 오래 걸리는 부분"
"은 구조를 설계하고 게임의 구성 요소를 그 구조에 알맞게 끼워 넣는 것입니다. "
"이 방법을 대체하기 위해 씬을 기반으로 설계하면 게임의 논리 자체에 집중하게 되"
"어서, 개발을 좀 더 빠르고 직관적으로 만듭니다. 대부분의 게임 구성 요소가 그대"
"로 씬이 되기 때문에, 씬 인스턴스를 기반으로 한 설계를 사용하는 것은 다른 구조"
"적 코드가 필요하지 않기 때문입니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:48
msgid ""
"Let's take a look at one more, somewhat more complex, example of an open-"
"world type game with lots of assets and nested elements:"
msgstr ""
"더 복잡하게 한 번 더 살펴보겠습니다. 많은 애셋과 중첩된 요소들로 이루어진 오"
"픈월드 게임을 보죠:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:53
msgid ""
"Take a look at the room element. Let's say we started there. We could make a "
"couple of different room scenes, with different arrangements of furniture "
"(also scenes) in them. Later, we could make a house scene, connecting rooms "
"to make up its interior."
msgstr ""
"방 요소를 살펴보세요. 우리가 시작하는 부분에 대해 말해봅시다. (역시 씬으로 이"
"루어진) 가구 배치를 달리하여 서로 다른 두 가지의 방 씬을 만들 수 있습니다. 나"
"중에는 집 내부를 방들을 연결해서 집 씬을 만들 수도 있습니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:58
msgid ""
"Then, we could make a citadel scene, which is made out of many instanced "
"houses. Then, we could start working on the world map terrain, adding the "
"citadel onto it."
msgstr ""
"그런 다음 많은 인스턴스된 집들로 이루어진 성 씬을 만들 수 있습니다. 그리고 월"
"드맵 지형에 성을 추가하는 작업을 할 수 있습니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:62
msgid ""
"Later, we could create scenes that represent guards (and other NPCs) and add "
"them to the citadel as well. As a result, they would be indirectly added to "
"the overall game world."
msgstr ""
"나중에는 경호원 (그리고 다른 NPC)의 씬을 만들고 마찬가지로 성에 추가할 수 있"
"습니다. 그 결과, 씬들은 게임 세상 전체에 간접적으로 추가됩니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:66
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instance more scenes. Furthermore, the editor UI is "
"designed to be user friendly for programmers and non-programmers alike. A "
"typical team development process can involve 2D or 3D artists, level "
"designers, game designers, and animators, all working with the editor "
"interface."
msgstr ""
"Godot라면 한 번 만든 씬을 더 많은 씬으로 인스턴스하는 방식으로 작업을 쉽게 반"
"복할 수 있습니다. 게다가 편집기 UI는 프로그래머나 비 프로그래머나 친근하게 설"
"계되었습니다. 일반적인 팀 개발 과정에는 2D나 3D 아티스트, 레벨 디자이너, 게"
"임 디자이너, 애니메이터가 있지만, 모두 편집기 인터페이스에서 작업합니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:73
msgid "Information overload!"
msgstr "정보가 너무 많아요!"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:75
msgid ""
"This has been a lot of high level information dropped on you all at once. "
"However, the important part of this tutorial was to create an awareness of "
"how scenes and instancing are used in real projects."
msgstr ""
"여기서 많은 고급 정보를 한 번에 제공했습니다. 하지만 이 튜토리얼의 가장 중요"
"한 부분은 실제 프로젝트에서 씬을 어떻게 인스턴스하는 지에 대한 인식을 만드는 "
"것입니다."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:79
msgid ""
"Everything discussed here will become second nature to you once you start "
"making games and putting these concepts into practice. For now, don't worry "
"about it too much, and go on to the next tutorial!"
msgstr ""
"여기에서 다루는 모든 내용은 게임을 처음 만들고 개념을 적용해가면서 자연스럽"
"게 익히게 될 것입니다. 그러니 지금은 너무 걱정하지 말고 다음 튜토리얼로 넘어"
"가세요!"
