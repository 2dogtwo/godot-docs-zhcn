# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-21 17:14+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Creating instances"
msgstr "인스턴스 편집하기"

msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""

msgid ""
"You can create as many scenes as you'd like and save them to the disk with "
"the ``.tscn`` extension, which stands for \"text scene\". The ``Label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""

msgid ""
"Here's the example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite <class_Sprite>` node, and a :ref:"
"`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""

msgid ""
"Once you saved a scene, it works as a blueprint: you can reproduce it in "
"other scenes as many times as you'd like. Replicating an object from a "
"template like so is called **instancing**."
msgstr ""

msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""

msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``Ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""

#, fuzzy
msgid "In practice"
msgstr "모범 사례"

#, fuzzy
msgid ""
"Let's use instancing in practice to see how it works exactly in Godot. We "
"invite you to download the ball's sample project we prepared for you: :"
"download:`instancing.zip <files/instancing.zip>`."
msgstr ""
"어떻게 인스턴스화가 작동하는지 배우기 위해, 먼저 샘플 프로젝트를 다운로드합시"
"다: :download:`instancing.zip <files/instancing.zip>`."

#, fuzzy
msgid ""
"Extract the archive on your computer. Then, open Godot, and in the project "
"manager, click the Import button to import the project."
msgstr ""
"원하는 위치에 압축을 푸세요. 그런 다음 Godot를 켜고, 프로젝트 매니저에서 '가"
"져오기(Import)' 버튼으로 이 프로젝트를 추가하세요:"

msgid ""
"In the pop-up that appears, click the browse button and navigate to the "
"folder you extracted."
msgstr ""

msgid "Double-click the ``project.godot`` file to open it."
msgstr ""

msgid "Finally, click the Import & Edit button."
msgstr ""

msgid ""
"The project contains two packed scenes: ``Main.tscn``, containing walls "
"against which the ball collides, and ``Ball.tscn``. The Main scene should "
"open automatically."
msgstr ""

msgid ""
"Let's add a ball as a child of the Main node. In the Scene dock, select the "
"Main node. Then, click the link icon at the top of the scene dock. This "
"button allows you to add an instance of a scene as a child of the currently "
"selected node."
msgstr ""

msgid "Double-click the ball scene to instance it."
msgstr ""

#, fuzzy
msgid "The ball appears in the top-left corner of the viewport."
msgstr "로고는 화면 위쪽에서 나타납니다."

msgid "Click on it and drag it towards the center of the view."
msgstr ""

msgid "Play the game by pressing F5. You should see it fall."
msgstr ""

msgid ""
"Now, we want to create more instances of the Ball node. With the ball still "
"selected, press :kbd:`Ctrl-D` (:kbd:`Cmd-D` on macOS) to call the duplicate "
"command. Click and drag to move the new ball to a different location."
msgstr ""

#, fuzzy
msgid "You can repeat this process until you have several in the scene."
msgstr ""
"회색 노드의 이름은 변경할 수 없습니다. 이는 부모 씬이 존재함을 알려줍니다"

msgid ""
"Play the game again. You should now see every ball fall independently from "
"one another. This is what instances do. Each is an independent reproduction "
"of a template scene."
msgstr ""

#, fuzzy
msgid "Editing scenes and instances"
msgstr "인스턴스 편집하기"

msgid "There is more to instances. With this feature, you can:"
msgstr ""

#, fuzzy
msgid ""
"Change the properties of one ball without affecting the others using the "
"Inspector."
msgstr ""
"이러한 속성은 코드를 통해, 혹은 인스펙터(Inspecter)에서 편집하여 구성할 수 있"
"습니다."

msgid ""
"Change the default properties of every Ball by opening ``Ball.tscn`` scene "
"and making a change to the Ball node there. Upon saving, all instances of "
"the Ball in the project will see their values update."
msgstr ""

msgid ""
"Changing a property on an instance always overrides values from the "
"corresponding packed scene."
msgstr ""

msgid ""
"Let's try this. Open ``Ball.tscn`` and select the Ball node. In the "
"Inspector on the right, click on the PhysicsMaterial property to expand it."
msgstr ""

msgid ""
"Set its Bounce property to ``2`` by clicking on the number field, typing "
"``2``, and pressing :kbd:`Enter`."
msgstr ""

msgid ""
"Play the game by pressing :kbd:`F5` and notice how all balls now bounce a "
"lot more. As the Ball scene is a template for all instances, modifying it "
"and saving causes all instances to update accordingly."
msgstr ""

msgid ""
"Let's now adjust an individual instance. Head back to the Main scene by "
"clicking on the corresponding tab above the viewport."
msgstr ""

msgid ""
"Select one of the instanced Ball nodes and, in the Inspector, set its "
"Gravity Scale value to ``10``."
msgstr ""

msgid "A grey \"revert\" button appears next to the adjusted property."
msgstr ""

#, fuzzy
msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""
"조정한 속성 옆에 회색 \"되돌리기(Revert)\" 버튼이 나타났습니다. 이 버튼이 있"
"다는 것은 여러분이 저장된 씬의 값을 덮어씌우기 위해 인스턴스화된 씬의 속성을 "
"수정했다는 것을 의미합니다. 원본 씬에서 속성을 수정하더라도 사용자 지정 값은 "
"유지됩니다. 되돌리기 버튼을 누르면 저장된 씬의 값으로 속성을 복원할 수 있습니"
"다."

msgid ""
"Rerun the game and notice how this ball now falls much faster than the "
"others."
msgstr ""

msgid ""
"If you change a value on the ``PhysicsMaterial`` of one instance, it will "
"affect all the others. This is because ``PhysicsMaterial`` is a resource, "
"and resources are shared between instances. To make a resource unique for "
"one instance, right-click on it in the Inspector and click Make Unique in "
"the contextual menu."
msgstr ""

msgid ""
"Resources are another essential building block of Godot games we will cover "
"in a later lesson."
msgstr ""

msgid "Scene instances as a design language"
msgstr ""

msgid ""
"Instances and scenes in Godot offer an excellent design language, setting "
"the engine apart from others out there. We designed Godot around this "
"concept from the ground up."
msgstr ""

msgid ""
"We recommend dismissing architectural code patterns when making games with "
"Godot, such as Model-View-Controller (MVC) or Entity-Relationship diagrams. "
"Instead, you can start by imagining the elements players will see in your "
"game and structure your code around them."
msgstr ""

#, fuzzy
msgid "For example, you could break down a shooter game like so:"
msgstr "예를 들어 간단한 슈팅 게임을 다음과 같이 상상해 볼 수 있습니다:"

#, fuzzy
msgid ""
"You can come up with a diagram like this for almost any type of game. Each "
"rectangle represents an entity that's visible in the game from the player's "
"perspective. The arrows tell you which scene owns which."
msgstr ""
"거의 모든 종류의 게임에서 이런 다이어그램을 상상해 볼 수 있습니다. 게임에서 "
"시각화할 수 있는 부분을 쭉 적어보고, 각 구성 요소 간 소유권을 나타내기 위한 "
"화살표를 추가합니다."

#, fuzzy
msgid ""
"Once you have a diagram, we recommended creating a scene for each element "
"listed in it to develop your game. You'll use instancing, either by code or "
"directly in the editor, to build your tree of scenes."
msgstr ""
"이렇게 다이어그램을 만들고 나서, 추천하는 게임 제작 과정은 다이어그램의 각 요"
"소로 이루어진 씬을 만드는 것입니다. (코드 또는 에디터에서 직접) 인스턴스화를 "
"사용해서 소유권 관계를 만들게 됩니다."

#, fuzzy
msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""
"게임을 (혹은 일반적으로 소프트웨어를) 프로그래밍할 때 가장 오래 걸리는 부분"
"은 구조를 설계하고 게임의 구성 요소를 그 구조에 알맞게 끼워 넣는 것입니다. "
"이 방법을 대체하기 위해 씬을 기반으로 설계하면 게임의 논리 자체에 집중하게 되"
"어서, 개발을 좀 더 빠르고 직관적으로 만듭니다. 대부분의 게임 구성 요소가 그대"
"로 씬이 되기 때문에, 씬 인스턴스화를 기반으로 한 설계를 사용하는 것은 다른 구"
"조적 코드가 필요하지 않게 되기 때문입니다."

#, fuzzy
msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""
"많은 애셋과 중첩된 요소들로 이루어진 오픈월드 게임의 복잡한 예를 하나 더 살펴"
"보겠습니다:"

msgid ""
"Imagine we started by creating the room. We could make a couple of different "
"room scenes, with unique arrangements of furniture in them. Later, we could "
"make a house scene that uses multiple room instances for the interior. We "
"would create a citadel out of many instanced houses and a large terrain on "
"which we would place the citadel. Each of these would be a scene instancing "
"one or more sub-scenes."
msgstr ""

#, fuzzy
msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""
"나중에는 경호원 (그리고 다른 NPC)의 씬을 만들고 마찬가지로 성에 추가할 수 있"
"습니다. 그 결과, 씬들은 게임 세상 전체에 간접적으로 추가됩니다."

#, fuzzy
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""
"Godot에서는 한 번 만든 씬을 더 많은 씬으로 인스턴스하는 방식으로 작업을 쉽게 "
"반복할 수 있습니다. 게다가 에디터 UI는 프로그래머에게도 비 프로그래머에게도 "
"친근하게 설계되었습니다. 일반적인 팀 개발 과정에는 2D나 3D 아티스트, 레벨 디"
"자이너, 게임 디자이너, 애니메이터가 있지만, 모두 에디터 인터페이스에서 작업합"
"니다."

msgid "Summary"
msgstr "요약"

msgid ""
"Instancing, the process of producing an object from a blueprint has many "
"handy uses. With scenes, it gives you:"
msgstr ""

#, fuzzy
msgid "The ability to divide your game into reusable components."
msgstr "Bar와 Counter를 다시 사용할 수 있는 UI 구성 요소로 바꾸기"

msgid "A tool to structure and encapsulate complex systems."
msgstr ""

msgid ""
"A language to think about your game project's structure in a natural way."
msgstr ""
