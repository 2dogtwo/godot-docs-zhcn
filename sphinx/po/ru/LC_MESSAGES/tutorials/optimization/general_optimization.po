# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-11 13:45+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/optimization/general_optimization.rst:4
#, fuzzy
msgid "General optimization tips"
msgstr "Анимация"

#: ../../docs/tutorials/optimization/general_optimization.rst:7
msgid "Introduction"
msgstr "Введение"

#: ../../docs/tutorials/optimization/general_optimization.rst:9
msgid ""
"In an ideal world, computers would run at infinite speed, and the only limit "
"to what we could achieve would be our imagination. In the real world, "
"however, it is all too easy to produce software that will bring even the "
"fastest computer to its knees."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:14
msgid ""
"Designing games and other software is thus a compromise between what we "
"would like to be possible, and what we can realistically achieve while "
"maintaining good performance."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:18
msgid ""
"To achieve the best results, we have two approaches: * Work faster * Work "
"smarter"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:22
msgid "And preferably, we will use a blend of the two."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:25
#, fuzzy
msgid "Smoke and Mirrors"
msgstr "Узлы и Ресурсы"

#: ../../docs/tutorials/optimization/general_optimization.rst:27
msgid ""
"Part of working smarter is recognizing that, especially in games, we can "
"often get the player to believe they are in a world that is far more "
"complex, interactive, and graphically exciting than it really is. A good "
"programmer is a magician, and should strive to learn the tricks of the "
"trade, and try to invent new ones."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:34
msgid "The nature of slowness"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:36
msgid ""
"To the outside observer, performance problems are often lumped together. But "
"in reality, there are several different kinds of performance problem:"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:39
msgid ""
"A slow process that occurs every frame, leading to a continuously low frame "
"rate"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:41
msgid ""
"An intermittent process that causes 'spikes' of slowness, leading to stalls"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:43
msgid ""
"A slow process that occurs outside of normal gameplay, for instance, on "
"level load"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:46
msgid "Each of these are annoying to the user, but in different ways."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:49
#, fuzzy
msgid "Measuring performance"
msgstr "Производительность"

#: ../../docs/tutorials/optimization/general_optimization.rst:51
msgid ""
"Probably the most important tool for optimization is the ability to measure "
"performance - to identify where bottlenecks are, and to measure the success "
"of our attempts to speed them up."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:55
msgid "There are several methods of measuring performance, including:"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:57
msgid "Putting a start / stop timer around code of interest"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:58
#, fuzzy
msgid "Using the Godot profiler"
msgstr "Использование модуля"

#: ../../docs/tutorials/optimization/general_optimization.rst:59
#, fuzzy
msgid "Using external third party profilers"
msgstr "Внешние ресурсы"

#: ../../docs/tutorials/optimization/general_optimization.rst:60
msgid "Using GPU profilers / debuggers"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:61
msgid "Checking the frame rate (with vsync disabled)"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:63
msgid ""
"Be very aware that the relative performance of different areas can vary on "
"different hardware. Often it is a good idea to make timings on more than one "
"device, especially including mobile as well as desktop, if you are targeting "
"mobile."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:69
msgid "Limitations"
msgstr "Ограничения"

#: ../../docs/tutorials/optimization/general_optimization.rst:71
msgid ""
"CPU Profilers are often the 'go to' method for measuring performance, "
"however they don't always tell the whole story."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:74
msgid ""
"Bottlenecks are often on the GPU, `as a result` of instructions given by the "
"CPU"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:76
msgid ""
"Spikes can occur in the Operating System processes (outside of Godot) `as a "
"result` of instructions used in Godot (for example dynamic memory allocation)"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:78
msgid "You may not be able to profile e.g. a mobile phone"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:79
msgid ""
"You may have to solve performance problems that occur on hardware you don't "
"have access to"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:82
msgid ""
"As a result of these limitations, you often need to use detective work to "
"find out where bottlenecks are."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:86
msgid "Detective work"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:88
msgid ""
"Detective work is a crucial skill for developers (both in terms of "
"performance, and also in terms of bug fixing). This can include hypothesis "
"testing, and binary search."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:93
#, fuzzy
msgid "Hypothesis testing"
msgstr "Тестируемые"

#: ../../docs/tutorials/optimization/general_optimization.rst:95
msgid ""
"Say for example you believe that sprites are slowing down your game. You can "
"test this hypothesis for example by:"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:98
msgid "Measuring the performance when you add more sprites, or take some away."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:100
msgid ""
"This may lead to a further hypothesis - does the size of the sprite "
"determine the performance drop?"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:103
msgid ""
"You can test this by keeping everything the same, but changing the sprite "
"size, and measuring performance"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:107
msgid "Binary search"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:109
msgid ""
"Say you know that frames are taking much longer than they should, but you "
"are not sure where the bottleneck lies. You could begin by commenting out "
"approximately half the routines that occur on a normal frame. Has the "
"performance improved more or less than expected?"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:114
msgid ""
"Once you know which of the two halves contains the bottleneck, you can then "
"repeat this process, until you have pinned down the problematic area."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:118
#, fuzzy
msgid "Profilers"
msgstr "Профайлер"

#: ../../docs/tutorials/optimization/general_optimization.rst:120
msgid ""
"Profilers allow you to time your program while running it. Profilers then "
"provide results telling you what percentage of time was spent in different "
"functions and areas, and how often functions were called."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:124
msgid ""
"This can be very useful both to identify bottlenecks and to measure the "
"results of your improvements. Sometimes attempts to improve performance can "
"backfire and lead to slower performance, so always use profiling and timing "
"to guide your efforts."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:129
#, fuzzy
msgid ""
"For more info about using the profiler within Godot see :ref:"
"`doc_debugger_panel`."
msgstr ""
"Для получения дополнительной информации о самих событиях ввода посмотрите "
"руководство :ref:`Input Event Tutorial<doc_inputevent>`."

#: ../../docs/tutorials/optimization/general_optimization.rst:133
msgid "Principles"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:135
msgid "Donald Knuth:"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:137
msgid ""
"*Programmers waste enormous amounts of time thinking about, or worrying "
"about, the speed of noncritical parts of their programs, and these attempts "
"at efficiency actually have a strong negative impact when debugging and "
"maintenance are considered. We should forget about small efficiencies, say "
"about 97% of the time: premature optimization is the root of all evil. Yet "
"we should not pass up our opportunities in that critical 3%.*"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:144
msgid "The messages are very important:"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:146
msgid ""
"Programmer / Developer time is limited. Instead of blindly trying to speed "
"up all aspects of a program we should concentrate our efforts on the aspects "
"that really matter."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:149
msgid ""
"Efforts at optimization often end up with code that is harder to read and "
"debug than non-optimized code. It is in our interests to limit this to areas "
"that will really benefit."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:153
msgid ""
"Just because we `can` optimize a particular bit of code, it doesn't "
"necessarily mean that we should. Knowing when, and when not to optimize is a "
"great skill to develop."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:157
msgid ""
"One misleading aspect of the quote is that people tend to focus on the "
"subquote \"premature optimization is the root of all evil\". While "
"`premature` optimization is (by definition) undesirable, performant software "
"is the result of performant design."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:163
#, fuzzy
msgid "Performant design"
msgstr "Производительность"

#: ../../docs/tutorials/optimization/general_optimization.rst:165
msgid ""
"The danger with encouraging people to ignore optimization until necessary, "
"is that it conveniently ignores that the most important time to consider "
"performance is at the design stage, before a key has even hit a keyboard. If "
"the design / algorithms of a program are inefficient, then no amount of "
"polishing the details later will make it run fast. It may run `faster`, but "
"it will never run as fast as a program designed for performance."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:172
msgid ""
"This tends to be far more important in game / graphics programming than in "
"general programming. A performant design, even without low level "
"optimization, will often run many times faster than a mediocre design with "
"low level optimization."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:178
msgid "Incremental design"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:180
msgid ""
"Of course, in practice, unless you have prior knowledge, you are unlikely to "
"come up with the best design first time. So you will often make a series of "
"versions of a particular area of code, each taking a different approach to "
"the problem, until you come to a satisfactory solution. It is important not "
"to spend too much time on the details at this stage until you have finalized "
"the overall design, otherwise much of your work will be thrown out."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:187
msgid ""
"It is difficult to give general guidelines for performant design because "
"this is so dependent on the problem. One point worth mentioning though, on "
"the CPU side, is that modern CPUs are nearly always limited by memory "
"bandwidth. This has led to a resurgence in data orientated design, which "
"involves designing data structures and algorithms for locality of data and "
"linear access, rather than jumping around in memory."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:195
#, fuzzy
msgid "The optimization process"
msgstr "Анимация"

#: ../../docs/tutorials/optimization/general_optimization.rst:197
msgid ""
"Assuming we have a reasonable design, and taking our lessons from Knuth, our "
"first step in optimization should be to identify the biggest bottlenecks - "
"the slowest functions, the low hanging fruit."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:201
msgid ""
"Once we have successfully improved the speed of the slowest area, it may no "
"longer be the bottleneck. So we should test / profile again, and find the "
"next bottleneck on which to focus."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:205
msgid "The process is thus:"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:207
msgid "Profile / Identify bottleneck"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:208
msgid "Optimize bottleneck"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:209
#, fuzzy
msgid "Return to step 1"
msgstr "Возвращение"

#: ../../docs/tutorials/optimization/general_optimization.rst:212
msgid "Optimizing bottlenecks"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:214
msgid ""
"Some profilers will even tell you which part of a function (which data "
"accesses, calculations) are slowing things down."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:217
msgid ""
"As with design you should concentrate your efforts first on making sure the "
"algorithms and data structures are the best they can be. Data access should "
"be local (to make best use of CPU cache), and it can often be better to use "
"compact storage of data (again, always profile to test results). Often you "
"precalculate heavy computations ahead of time (e.g. at level load, or "
"loading precalculated data files)."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:224
msgid ""
"Once algorithms and data are good, you can often make small changes in "
"routines which improve performance, things like moving calculations outside "
"of loops."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:227
msgid ""
"Always retest your timing / bottlenecks after making each change. Some "
"changes will increase speed, others may have a negative effect. Sometimes a "
"small positive effect will be outweighed by the negatives of more complex "
"code, and you may choose to leave out that optimization."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:233
msgid "Appendix"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:236
msgid "Bottleneck math"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:238
msgid ""
"The proverb \"a chain is only as strong as its weakest link\" applies "
"directly to performance optimization. If your project is spending 90% of the "
"time in function 'A', then optimizing A can have a massive effect on "
"performance."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:254
msgid ""
"So in this example improving this bottleneck A by a factor of 9x, decreases "
"overall frame time by 5x, and increases frames per second by 5x."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:257
msgid ""
"If however, something else is running slowly and also bottlenecking your "
"project, then the same improvement can lead to less dramatic gains:"
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:272
msgid ""
"So in this example, even though we have hugely optimized functionality A, "
"the actual gain in terms of frame rate is quite small."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:275
msgid ""
"In games, things become even more complicated because the CPU and GPU run "
"independently of one another. Your total frame time is determined by the "
"slower of the two."
msgstr ""

#: ../../docs/tutorials/optimization/general_optimization.rst:291
msgid ""
"In this example, we optimized the CPU hugely again, but the frame time did "
"not improve, because we are GPU-bottlenecked."
msgstr ""
