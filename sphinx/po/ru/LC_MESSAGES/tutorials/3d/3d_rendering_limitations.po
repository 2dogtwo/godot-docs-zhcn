# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:4
msgid "3D rendering limitations"
msgstr "Ограничения 3D-рендеринга"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:7
msgid "Introduction"
msgstr "Введение"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:9
msgid ""
"Due to their focus on performance, real-time rendering engines have many "
"limitations. Godot's renderer is no exception. To work effectively with "
"those limitations, you need to understand them."
msgstr ""
"Из-за ориентированности на производительность движки рендеринга в реальном "
"времени имеют множество ограничений. Визуализатор Godot - не исключение. "
"Чтобы эффективно работать с этими ограничениями, вам необходимо их понимать."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:14
msgid "Texture size limits"
msgstr "Ограничения размера текстуры"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:16
msgid ""
"On desktops and laptops, textures larger than 8192×8192 may not be supported "
"on older devices. You can check your target GPU's limitations on `GPUinfo."
"org <https://www.gpuinfo.org/>`__."
msgstr ""
"На настольных компьютерах и ноутбуках текстуры размером более 8192 × 8192 "
"могут не поддерживаться старыми устройствами. Вы можете узнать ограничения "
"вашего целевого графического процессора на `GPUinfo.org <https://www.gpuinfo."
"org/>`__."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:20
msgid ""
"Mobile GPUs are typically limited to 4096×4096 textures. Also, some mobile "
"GPUs don't support repeating non-power-of-two-sized textures. Therefore, if "
"you want your texture to display correctly on all platforms, you should "
"avoid using textures larger than 4096×4096 and use a power of two size if "
"the texture needs to repeat."
msgstr ""
"Мобильные графические процессоры обычно ограничены текстурами 4096×4096. "
"Кроме того, некоторые мобильные графические процессоры не поддерживают "
"повторение текстур, размер которых не равен степени двойки. Поэтому, если вы "
"хотите, чтобы ваша текстура отображалась правильно на всех платформах, вам "
"следует избегать использования текстур размером более 4096 × 4096 и "
"использовать текстуры размерностью в степень двойки, если текстура должна "
"повторяться."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:27
msgid "Color banding"
msgstr "Цветовая полоса"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:29
msgid ""
"When using the GLES3 or Vulkan renderers, Godot's 3D engine renders "
"internally in HDR. However, the rendering output will be tonemapped to a low "
"dynamic range so it can be displayed on the screen. This can result in "
"visible banding, especially when using untextured materials. This can also "
"be seen in 2D projects when using smooth gradient textures."
msgstr ""
"При использовании визуализаторов GLES3 или Vulkan, 3D-движок Godot выполняет "
"внутреннюю визуализацию в HDR. Однако, результат рендеринга будет иметь "
"тональную карту с низким динамическим диапазоном, чтобы его можно было "
"отобразить на экране. Это может привести к появлению видимых полос, особенно "
"при использовании нетекстурированных материалов. Это также можно увидеть в "
"2D-проектах при использовании плавных градиентных текстур."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:35
msgid "There are several ways to alleviate banding. Here are a few examples:"
msgstr ""
"Есть несколько способов уменьшить видимость полос. Вот несколько примеров:"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:37
msgid ""
"Bake some noise into your textures. This is mainly effective in 2D, e.g. for "
"vignetting effects."
msgstr ""
"Добавьте немного шума в свои текстуры. Это эффективно для 2D, например, при "
"использовании эффектов виньетирования."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:39
msgid ""
"Implement a debanding shader as a :ref:`screen-reading shader <doc_screen-"
"reading_shaders>`. Godot currently doesn't provide a built-in debanding "
"shader, but this may be added in a future release."
msgstr ""
"Реализуйте шейдер уменьшения видимости полос как :ref:`screen-reading shader "
"<doc_screen-reading_shaders>`. В настоящее время Godot не предоставляет "
"такого встроенного шейдера, но он может быть добавлен в будущем выпуске."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:45
msgid ""
"See `Banding in Games: A Noisy Rant <http://loopit.dk/banding_in_games."
"pdf>`__ for more details about banding and ways to combat it."
msgstr ""
"См. `Banding in Games: A Noisy Rant <http://loopit.dk/banding_in_games."
"pdf>`__ для получения более подробной информации о цветовых полосах и "
"способах борьбы с ним."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:49
msgid "Depth buffer precision"
msgstr "Точность буфера глубины"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:51
msgid ""
"To sort objects in 3D space, rendering engines rely on a *depth buffer* "
"(also called *Z-buffer*). This buffer has a finite precision: 24-bit on "
"desktop platforms, sometimes 16-bit on mobile platforms (for performance "
"reasons). If two different objects end up on the same buffer value, then Z-"
"fighting will occur. This will materialize as textures flickering back and "
"forth as the camera moves or rotates."
msgstr ""
"Для сортировки объектов в трёхмерном пространстве движки рендеринга "
"используют *буфер глубины* (также называемый *Z-буфером*). Этот буфер имеет "
"конечную точность: 24 разряда на настольных платформах, и иногда до 16 "
"разрядов на мобильных платформах (по соображениям производительности). Если "
"два разных объекта имеют одно и то же значение буфера, произойдет борьба за "
"внимание зрителя. Это будет выглядеть как мерцающие текстуры, когда камера "
"движется или вращается."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:58
msgid ""
"To make the depth buffer more precise over the rendered area, you should "
"*increase* the Camera node's **Near** property. However, be careful: if you "
"set it too high, players will be able to see through nearby geometry. You "
"should also *decrease* the Camera node's **Far** property to the lowest "
"permissible value for your use case, though keep in mind it won't impact "
"precision as much as the **Near** property."
msgstr ""
"Чтобы сделать буфер глубины более точным по визуализируемой области, вы "
"должны *увеличить* свойство **Near** узла Camera. Однако будьте осторожны: "
"если вы установите его слишком высоко, игроки смогут видеть сквозь "
"близлежащую геометрию. Вам также следует *уменьшить* свойство **Far** узла "
"Camera до минимально допустимого значения для вашего варианта использования, "
"но имейте в виду, что это не повлияет на точность так сильно, как свойство "
"**Near**."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:65
msgid ""
"If you only need high precision when the player can see far away, you could "
"change it dynamically based on the game conditions. For instance, if the "
"player enters an airplane, the **Near** property can be temporarily "
"increased to avoid Z-fighting in the distance. It can then be decreased once "
"the player leaves the airplane."
msgstr ""
"Если вам нужна высокая точность только тогда, когда игрок смотрит вдаль, вы "
"можете динамически изменять её в зависимости от условий игры. Например, если "
"игрок садится в самолёт, свойство **Near** может быть временно увеличено, "
"чтобы избежать мерцания текстур на расстоянии. Затем его можно уменьшить, "
"когда игрок покинет самолёт."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:71
msgid ""
"Depending on the scene and viewing conditions, you may also be able to move "
"the Z-fighting objects further apart without the difference being visible to "
"the player."
msgstr ""
"В зависимости от сцены и условий просмотра, вы также можете перемещать "
"конкурирующие объекты дальше друг от друга, чтобы игрок не видел разницы."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:76
msgid "Transparency sorting"
msgstr "Сортировка прозрачности"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:78
msgid ""
"In Godot, transparent materials are drawn after opaque materials. "
"Transparent objects are sorted back to front before being drawn based on the "
"Node3D's position, not the vertex position in world space. Due to this, "
"overlapping objects may often be sorted out of order. To fix improperly "
"sorted objects, tweak the material's :ref:`Render Priority "
"<class_Material_property_render_priority>` property. This will force "
"specific materials to appear in front or behind of other transparent "
"materials. Even then, this may not always be sufficient."
msgstr ""
"В Godot прозрачные материалы отрисовываются после непрозрачных. Прозрачные "
"объекты сортируются задом наперёд перед отрисовкой на основе положения "
"Node3D, а не положения вершины в мировом пространстве. Из-за этого "
"перекрывающиеся объекты часто могут быть отсортированы не по порядку. Чтобы "
"исправить неправильно отсортированные объекты, настройте свойство материала :"
"ref:`Render Priority <class_Material_property_render_priority>`. Это "
"заставит определенные материалы появляться впереди или позади других "
"прозрачных материалов. Но и этого не всегда может быть достаточно."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:86
msgid ""
"Some rendering engines feature *order-independent transparency* techniques "
"to alleviate this, but this is costly on the GPU. Godot currently doesn't "
"provide this feature. There are still several ways to avoid this problem:"
msgstr ""
"Некоторые механизмы рендеринга используют методы *независимой от порядка "
"прозрачности*, но это дорого обходится для GPU-производительности. Godot в "
"настоящее время не предоставляет эту функцию. Есть ещё несколько способов "
"избежать эту проблему:"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:90
msgid ""
"Only make materials transparent if you actually need it. If a material only "
"has a small transparent part, consider splitting it into a separate "
"material. This will allow the opaque part to cast shadows and may also "
"improve performance."
msgstr ""
"Делайте материалы прозрачными только в том случае, если это действительно "
"необходимо. Если у материала есть только небольшая прозрачная часть, "
"рассмотрите возможность разделения её на отдельные материалы. Это позволит "
"непрозрачной части отбрасывать тени и может улучшить производительность."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:95
msgid ""
"If you want a material to fade with distance, use the SpatialMaterial "
"distance fade mode **Pixel Dither** or **Object Dither** instead of "
"**PixelAlpha**. This will make the material opaque. This way, it can also "
"cast shadows."
msgstr ""
"Если вы хотите, чтобы материал исчезал с увеличением расстояния, используйте "
"режим затухания расстояния SpatialMaterial **Pixel Dither** или **Object "
"Dither** вместо **PixelAlpha**, что сделает материал непрозрачным. Он также "
"сможет отбрасывать тени."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:101
msgid "Multi-sample antialiasing"
msgstr "Множественная выборка сглаживания (MSAA)"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:103
msgid ""
"Multi-sample antialiasing (MSAA) takes multiple *coverage* samples at the "
"edges of polygons when rendering objects. It does not increase the number of "
"*color* samples used to render a scene. Here's what this means in practice:"
msgstr ""
"MSAA принимает несколько выборок *покрытия* на краях полигонов при "
"визуализации объектов. Он не увеличивает количество образцов *цвета*, "
"используемых для рендеринга сцены. Вот что это означает на практике:"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:107
msgid ""
"Edges of meshes will be smoothed out nicely (as well as supersampling would)."
msgstr "Края сеток будут хорошо сглажены (как и при суперсэмплинге)."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:108
msgid ""
"Transparent materials that use *alpha testing* (1-bit transparency) won't be "
"smoothed out."
msgstr ""
"Прозрачные материалы, использующие *альфа-тестирование* (1-битная "
"прозрачность), не будут сглажены."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:109
msgid ""
"Specular aliasing (\"sparkles\" that appear on reflective surfaces) won't be "
"reduced."
msgstr ""
"Зеркальное наложение (\"искры\", появляющиеся на отражающих поверхностях) не "
"будет уменьшено."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:111
msgid ""
"There are several ways to work around this limitation depending on your "
"performance budget:"
msgstr ""
"Есть несколько способов обойти это ограничение в зависимости от вашего "
"бюджета производительности:"

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:113
msgid ""
"To make specular aliasing less noticeable, open the Project Settings and "
"enable **Rendering > Quality > Screen Space Filters > Screen Space Roughness "
"Limiter**. This filter has a moderate cost on performance. It should be "
"enabled only if you actually need it."
msgstr ""
"Чтобы сделать зеркальное наложение менее заметным, откройте Настройки "
"проекта и включите **Рендеринг > Качество > Фильтры экранного пространства > "
"Ограничитель шероховатости экранного пространства (Rendering > Quality > "
"Screen Space Filters > Screen Space Roughness Limiter)**. Этот фильтр имеет "
"умеренную производительность. Его следует включать только в том случае, если "
"он вам действительно нужен."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:118
msgid ""
"Enable FXAA in addition to (or instead of) MSAA. Since FXAA is a screen-"
"space antialiasing method, it will smooth out anything. As a downside, it "
"will also make the scene appear blurrier, especially at resolutions below "
"1440p."
msgstr ""
"Включите FXAA в дополнение к (или вместо) MSAA. Поскольку FXAA - это метод "
"сглаживания экранного пространства, он сгладит что угодно. Как недостаток, "
"это также сделает сцену более размытой, особенно при разрешении ниже 1440p."

#: ../../docs/tutorials/3d/3d_rendering_limitations.rst:122
msgid ""
"Render the scene at a higher resolution, then display it in a "
"ViewportTexture that matches the window size. Make sure to enable **Filter** "
"on the ViewportTexture flags. This technique is called *supersampling* and "
"is very slow. Its use is generally only recommended for offline rendering."
msgstr ""
"Визуализируйте сцену с более высоким разрешением, а затем отобразите её в "
"ViewportTexture, соответствующей размеру окна. Обязательно включите "
"**Фильтр** на флагах ViewportTexture. Этот метод называется суперсэмплингом "
"и он очень медленный. Его использование обычно рекомендуется только для "
"оффлайнового рендеринга."
