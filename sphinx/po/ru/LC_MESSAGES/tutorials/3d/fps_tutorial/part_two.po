# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-26 22:13+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:4
msgid "Part 2"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:7
#, fuzzy
msgid "Part overview"
msgstr "Обзор"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:9
msgid "In this part we will be giving our player weapons to play with."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:13
msgid ""
"By the end of this part, you will have a player that can fire a pistol, "
"rifle, and attack using a knife. The player will also now have animations "
"with transitions, and the weapons will interact with objects in the "
"environment."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:17
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_one` before "
"moving on to this part of the tutorial. The finished project from :ref:"
"`doc_fps_tutorial_part_one` will be the starting project for part 2"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:20
msgid "Let's get started!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:23
msgid "Making a system to handle animations"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:25
msgid ""
"First we need a way to handle changing animations. Open up ``Player.tscn`` "
"and select the :ref:`AnimationPlayer <class_AnimationPlayer>` Node "
"(``Player`` -> ``Rotation_Helper`` -> ``Model`` -> ``Animation_Player``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:28
msgid ""
"Create a new script called ``AnimationPlayer_Manager.gd`` and attach that to "
"the :ref:`AnimationPlayer <class_AnimationPlayer>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:30
msgid "Add the following code to ``AnimationPlayer_Manager.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:152
msgid "Lets go over what this script is doing:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:156
msgid "Lets start with this script's class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:158
msgid ""
"``states``: A dictionary for holding our animation states. (Further "
"explanation below)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:159
msgid ""
"``animation_speeds``: A dictionary for holding all the speeds at which we "
"want to play our animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:160
msgid ""
"``current_state``: A variable for holding the name of the animation state we "
"are currently in."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:161
msgid ""
"``callback_function``: A variable for holding the callback function. "
"(Further explanation below)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:163
msgid ""
"If you are familiar with state machines, then you may have noticed that "
"``states`` is structured like a basic state machine. Here is roughly how "
"``states`` is set up:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:166
msgid ""
"``states`` is a dictionary with the key being the name of the current state, "
"and the value being an array holding all the animations (states) we can "
"transition to. For example, if we are currently in the ``Idle_unarmed`` "
"state, we can only transition to ``Knife_equip``, ``Pistol_equip``, "
"``Rifle_equip``, and ``Idle_unarmed``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:171
msgid ""
"If we try to transition to a state that is not included in the possible "
"transitions states for the state we are in, then we get a warning message "
"and the animation does not change. We can also automatically transition from "
"some states into others, as will be explained further below in "
"``animation_ended``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:175
msgid ""
"For the sake of keeping this tutorial simple, we are not using a 'proper' "
"state machine. If you are interested to know more about state machines, see "
"the following articles:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:179
msgid ""
"(Python example) https://dev.to/karn/building-a-simple-state-machine-in-"
"python"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:180
msgid ""
"(C# example) https://www.codeproject.com/Articles/489136/"
"UnderstandingplusandplusImplementingplusStateplusP"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:181
msgid "(Wiki article) https://en.wikipedia.org/wiki/Finite-state_machine"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:183
msgid ""
"``animation_speeds`` is how fast each animation will play. Some of the "
"animations are a little slow and in an effort to make everything look "
"smooth, we need to play them at faster speeds."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:186
msgid ""
"Notice that all of the firing animations are faster than their normal speed. "
"Remember this for later!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:188
msgid ""
"``current_state`` will hold the name of the animation state we are currently "
"in."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:190
msgid ""
"Finally, ``callback_function`` will be a :ref:`FuncRef <class_FuncRef>` "
"passed in by the player for spawning bullets at the proper frame of "
"animation. A :ref:`FuncRef <class_FuncRef>` allows us to pass in a function "
"as an argument, effectively allowing us to call a function from another "
"script, which is how we will use it later."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:196
msgid "Now let's look at ``_ready``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:198
msgid ""
"First we are setting our animation to ``Idle_unarmed`` using the "
"``set_animation`` function, so we for sure start in that animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:201
msgid ""
"Next we connect the ``animation_finished`` signal to this script and assign "
"it to call ``animation_ended``. This means whenever an animation is "
"finished, ``animation_ended`` will be called."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:206
msgid "Lets look at ``set_animation`` next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:208
msgid ""
"``set_animation`` changes the animation to the animation named "
"``animation_name`` *if* we can transition to it. In other words, if the "
"animation state we are currently in has the passed in animation state name "
"in ``states``, then we will change to that animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:212
msgid ""
"Firstly, we check if the passed in animation name is the same name as the "
"animation currently playing. If they are the same, then we write a warning "
"to the console and return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:215
msgid ""
"Secondly, we see if :ref:`AnimationPlayer <class_AnimationPlayer>` has the "
"animation with the name ``animation_name`` using ``has_animation``. If it "
"does not, we return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:218
msgid ""
"Thirdly, we check whether ``current_state`` is set. If ``current_state`` is "
"*not* currently set, then we set ``current_state`` to the passed in "
"animation name and tell :ref:`AnimationPlayer <class_AnimationPlayer>` to "
"start playing the animation with a blend time of ``-1`` at the speed set in "
"``animation_speeds`` and then we return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:222
msgid "Blend time is how long to blend/mix the two animations together."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:224
msgid ""
"By putting in a value of ``-1``, the new animation instantly plays, "
"overriding whatever animation is already playing."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:226
msgid ""
"If you put in a value of ``1``, for one second the new animation will play "
"with increasing strength, blending the two animations together for one "
"second before playing only the new animation. This leads to a smooth "
"transition between animations, which looks great when you are changing from "
"a walking animation to a running animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:230
msgid ""
"We set the blend time to ``-1`` because we want to instantly change "
"animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:232
msgid ""
"If we have a state in ``current_state``, then we get all the possible states "
"we can transition to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:234
msgid ""
"If the animation name is in the list of possible transitions, we set "
"``current_state`` to the passed in animation (``animation_name``), tell :ref:"
"`AnimationPlayer <class_AnimationPlayer>` to play the animation with a blend "
"time of ``-1`` at the speed set in ``animation_speeds`` and return ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:240
msgid "Now lets look at ``animation_ended``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:242
msgid ""
"``animation_ended`` is the function that will be called by :ref:"
"`AnimationPlayer <class_AnimationPlayer>` when it's done playing an "
"animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:245
msgid ""
"For certain animation states, we may need to transition into another state "
"when it's finished. To handle this, we check for every possible animation "
"state. If we need to, we will transition into another state."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:248
msgid ""
"If you are using your own animated models, make sure that none of the "
"animations are set to loop. Looping animations do not send the "
"``animation_finished`` signal when they reach the end of the animation and "
"are about to loop again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:252
msgid ""
"The transitions in ``animation_ended`` would ideally be part of the data in "
"``states``, but in an effort to make the tutorial easier to understand, "
"we'll hard code each state transition in ``animation_ended``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:258
msgid ""
"Finally, there is ``animation_callback``. This function will be called by a "
"function track in our animations. If we have a :ref:`FuncRef "
"<class_FuncRef>` assigned to ``callback_function``, then we call that passed "
"in function. If we do not have a :ref:`FuncRef <class_FuncRef>` assigned to "
"``callback_function``, we print out a warning to the console."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:262
msgid ""
"Try running ``Testing_Area.tscn`` to make sure there are no runtime issues. "
"If the game runs but nothing seems to have changed, then everything is "
"working correctly."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:266
msgid "Getting the animations ready"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:268
msgid ""
"Now that we have a working animation manager, we need to call it from our "
"player script. Before that, though, we need to set some animation callback "
"tracks in our firing animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:271
msgid ""
"Open up ``Player.tscn`` if you don't have it open and navigate to the :ref:"
"`AnimationPlayer <class_AnimationPlayer>` node (``Player`` -> "
"``Rotation_Helper`` -> ``Model`` -> ``Animation_Player``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:274
msgid ""
"We need to attach a function track to three of our animations: The firing "
"animation for the pistol, rifle, and knife. Let's start with the pistol. "
"Click the animation drop down list and select \"Pistol_fire\"."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:277
msgid ""
"Now scroll down to the bottom of the list of animation tracks. The final "
"item in the list should read ``Armature/Skeleton:Left_UpperPointer``. Now at "
"the bottom of the list, click the plus icon on the bottom bar of animation "
"window, right next to the loop button and the up arrow."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:283
msgid ""
"This will bring up a window with three choices. We want to add a function "
"callback track, so click the option that reads \"Add Call Func Track\". This "
"will open a window showing the entire node tree. Navigate to the :ref:"
"`AnimationPlayer <class_AnimationPlayer>` node, select it, and press OK."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:289
msgid ""
"Now at the bottom of list of animation tracks you will have a green track "
"that reads \"AnimationPlayer\". Now we need to add the point where we want "
"to call our callback function. Scrub the timeline until you reach the point "
"where the muzzle starts to flash."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:293
msgid ""
"The timeline is the window where all the points in our animation are stored. "
"Each of the little points represents a point of animation data."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:296
msgid ""
"Scrubbing the timeline means moving ourselves through the animation. So when "
"we say \"scrub the timeline until you reach a point\", what we mean is move "
"through the animation window until you reach the point on the timeline."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:300
msgid ""
"Also, the muzzle of a gun is the end point where the bullet comes out. The "
"muzzle flash is the flash of light that escapes the muzzle when a bullet is "
"fired. The muzzle is also sometimes referred to as the barrel of the gun."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:304
msgid ""
"For finer control when scrubbing the timeline, press ``control`` and scroll "
"forward with the mouse wheel to zoom in. Scrolling backwards will zoom out."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:307
msgid ""
"You can also change how the timeline scrubbing snaps by changing the value "
"in ``Step (s)`` to a lower/higher value."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:309
msgid ""
"Once you get to a point you like, press the little green plus symbol on the "
"far right side of the ``AnimationPlayer`` track. This will place a little "
"green point at the position you are currently at in the animation on your "
"``AnimationPlayer`` track."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:315
msgid ""
"Now we have one more step before we are done with the pistol. Select the "
"\"enable editing of individual keys\" button on the far right corner of the "
"animation window. It looks like a pencil with a little point beside it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:320
msgid ""
"Once you've clicked that, a new window will open on the right side. Now "
"click the green point on the ``AnimationPlayer`` track. This will bring up "
"the information associated with that point in the timeline. In the empty "
"name field, enter ``animation_callback`` and press ``enter``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:324
msgid ""
"Now when we are playing this animation the callback function will be "
"triggered at that specific point of the animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:326
msgid ""
"Be sure to press the \"enable editing of individual keys\" button again to "
"turn off the ability to edit individual keys so you cannot change one of the "
"transform tracks by accident!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:331
msgid "Let's repeat the process for the rifle and knife firing animations!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:333
msgid ""
"Because the process is exactly the same as the pistol, the process is going "
"to explained in a little less depth. Follow the steps from above if you get "
"lost! It is exactly the same, just on a different animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:336
msgid ""
"Go to the \"Rifle_fire\" animation from the animation drop down. Add the "
"function callback track once you reach the bottom of the animation track "
"list by clicking the little plus icon at the bottom of the screen. Find the "
"point where the muzzle starts to flash and click the little green plus "
"symbol to add a function callback point at that position on the track."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:340
msgid ""
"Next, click the \"enable editing of individual keys\" button. Select the "
"newly created function callback point, put \"animation_callback\" into the "
"name field and press ``enter``. Click the \"enable editing of individual keys"
"\" button again to turn off individual key editing. so we cannot change one "
"of the transform tracks by accident."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:345
msgid ""
"Now we need to apply the callback function track to the knife animation. "
"Select the \"Knife_fire\" animation and scroll to the bottom of the "
"animation tracks. Click the plus symbol at the bottom of the animation "
"window and add a function callback track. Next find a point around the first "
"third of the animation to place the animation callback function point at."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:349
msgid ""
"We will not actually be firing the knife, and the animation is a stabbing "
"animation rather than a firing one. For this tutorial we are reusing the gun "
"firing logic for our knife, so the animation has been named in a style that "
"is consistent with the other animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:353
msgid ""
"From there click the little green plus to add a function callback point at "
"the current position. Then click the \"enable editing of individual keys\" "
"button, the button with a plus at the bottom right side of the animation "
"window. Select the newly created function callback point, put "
"\"animation_callback\" into the name field and press ``enter``. Click the "
"\"enable editing of individual keys\" button again to turn off individual "
"key editing, so we cannot change one of the transform tracks by accident."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:359
msgid "Be sure to save your work!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:361
msgid ""
"With that done, we are almost ready to start adding the ability to fire to "
"our player script! We need to set up one last scene: The scene for our "
"bullet object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:365
msgid "Creating the bullet scene"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:367
msgid ""
"There are several ways to handle a gun's bullets in video games. In this "
"tutorial series, we will be exploring two of the more common ways: Objects, "
"and raycasts."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:372
msgid ""
"One of the two ways is using a bullet object. This will be an object that "
"travels through the world and handles its own collision code. In this method "
"we create/spawn a bullet object in the direction our gun is facing, and then "
"it travels forward."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:376
msgid ""
"There are several advantages to this method. The first being we do not have "
"to store the bullets in our player. We can simply create the bullet and then "
"move on, and the bullet itself with handle checking for collisions, sending "
"the proper signal(s) to the object it collides with, and destroying itself."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:379
msgid ""
"Another advantage is we can have more complex bullet movement. If we want to "
"make the bullet fall ever so slightly as time goes on, we can make the "
"bullet controlling script slowly push the bullet towards the ground. Using "
"an object also makes the bullet take time to reach its target, it doesn't "
"instantly hit whatever it's pointed at. This feels more realistic because "
"nothing in real life moves instantly from one point to another."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:383
msgid ""
"One of the huge disadvantages is performance. While having each bullet "
"calculate their own paths and handle their own collision allows for a lot of "
"flexibility, it comes at the cost of performance. With this method we are "
"calculating every bullet's movement every step, and while this may not be a "
"problem for a few dozen bullets, it can become a huge problem when you "
"potentially have several hundred bullets."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:387
msgid ""
"Despite the performance hit, many first person shooters include some form of "
"object bullets. Rocket launchers are a prime example because in many first "
"person shooters, rockets do not just instantly explode at their target "
"position. You can also find bullets as objects many times with grenades "
"because they generally bounce around the world before exploding."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:391
msgid ""
"While I cannot say for sure this is the case, these games *probably* use "
"bullet objects in some form or another: (These are entirely from my "
"observations. **They may be entirely wrong**. I have never worked on **any** "
"of the following games)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:394
msgid ""
"Halo (Rocket launchers, fragmentation grenades, sniper rifles, brute shot, "
"and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:395
msgid ""
"Destiny (Rocket launchers, grenades, fusion rifles, sniper rifles, super "
"moves, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:396
msgid ""
"Call of Duty (Rocket launchers, grenades, ballistic knives, crossbows, and "
"more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:397
msgid "Battlefield (Rocket launchers, grenades, claymores, mortars, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:399
msgid ""
"Another disadvantage with bullet objects is networking. Bullet objects have "
"to sync the positions (at least) with all the clients that are connected to "
"the server."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:402
msgid ""
"While we are not implementing any form of networking (as that would be in "
"its own entire tutorial series), it is a consideration to keep in mind when "
"creating your first person shooter, especially if you plan on adding some "
"form of networking in the future."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:407
msgid ""
"The other way of handling bullet collisions we will be looking at is "
"raycasting."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:409
msgid ""
"This method is extremely common in guns that have fast moving bullets that "
"rarely change trajectory over time."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:411
msgid ""
"Instead of creating a bullet object and sending it through space, we instead "
"send a ray starting from the barrel/muzzle of the gun forwards. We set the "
"raycast's origin to the starting position of the bullet, and based on the "
"length we can adjust how far the bullet 'travels' through space."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:414
msgid ""
"While I cannot say for sure this is the case, these games *probably* use "
"raycasts in some form or another: (These are entirely from my observations. "
"**They may be entirely wrong**. I have never worked on **any** of the "
"following games)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:417
msgid ""
"Halo (Assault rifles, DMRs, battle rifles, covenant carbine, spartan laser, "
"and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:418
msgid ""
"Destiny (Auto rifles, pulse rifles, scout rifles, hand cannons, machine "
"guns, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:419
msgid ""
"Call of Duty (Assault rifles, light machine guns, sub machine guns, pistols, "
"and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:420
msgid "Battlefield (Assault rifles, SMGs, carbines, pistols, and more)"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:422
msgid ""
"One huge advantage of this method is that it's light on performance. Sending "
"a couple hundred rays through space is *much* easier for the computer to "
"calculate than sending a couple hundred bullet objects."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:426
msgid ""
"Another advantage is we can instantly know if we've hit something or not "
"exactly when we call for it. For networking this is important because we do "
"not need to sync the bullet movements over the Internet, we only need to "
"send whether or not the raycast hit."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:429
msgid ""
"Raycasting does have some disadvantages, though. One major disadvantage is "
"we cannot easily cast a ray in anything but a linear line. This means we can "
"only fire in a straight line for however long our ray length is. You can "
"create the illusion of bullet movement by casting multiple rays at different "
"positions, but not only is this hard to implement in code, it is also "
"heavier on performance."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:433
msgid ""
"Another disadvantage is we cannot see the bullet. With bullet objects we can "
"actually see the bullet travel through space if we attach a mesh to it, but "
"because raycasts happen instantly, we do not have a decent way of showing "
"the bullets. You could draw a line from the origin of the raycast to the "
"point where the raycast collided, and that is one popular way of showing "
"raycasts. Another way is simply not drawing the raycast at all, because "
"theoretically the bullets move so fast our eyes could not see it anyway."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:440
msgid ""
"Let's get the bullet object set up. This is what our pistol will create when "
"the \"Pistol_fire\" animation callback function is called."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:443
msgid ""
"Open up ``Bullet_Scene.tscn``. The scene contains :ref:`Spatial "
"<class_Spatial>` node called bullet, with a :ref:`MeshInstance "
"<class_MeshInstance>` and an :ref:`Area <class_Area>` with a :ref:"
"`CollisionShape <class_CollisionShape>` children to it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:447
msgid ""
"Create a new script called ``Bullet_script.gd`` and attach it to the "
"``Bullet`` :ref:`Spatial <class_Spatial>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:449
msgid ""
"We are going to move the entire bullet object at the root (``Bullet``). We "
"will be using the :ref:`Area <class_Area>` to check whether or not we've "
"collided with something"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:451
msgid ""
"Why are we using an :ref:`Area <class_Area>` and not a :ref:`RigidBody "
"<class_RigidBody>`? The main reason we're not using a :ref:`RigidBody "
"<class_RigidBody>` is because we do not want the bullet to interact with "
"other :ref:`RigidBody <class_RigidBody>` nodes. By using an :ref:`Area "
"<class_Area>` we are ensuring that none of the other :ref:`RigidBody "
"<class_RigidBody>` nodes, including other bullets, will be effected."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:455
msgid ""
"Another reason is simply because it is easier to detect collisions with an :"
"ref:`Area <class_Area>`!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:457
msgid "Here's the script that will control our bullet:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:493
#, fuzzy
msgid "Let's go through the script:"
msgstr "Роль сценария"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:497
msgid "First we define a few class variables:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:499
msgid "``BULLET_SPEED``: The speed at which the bullet travels."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:500
msgid ""
"``BULLET_DAMAGE``: The damage the bullet will cause to anything with which "
"it collides."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:501
msgid "``KILL_TIMER``: How long the bullet can last without hitting anything."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:502
msgid "``timer``: A float for tracking how long the bullet has been alive."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:503
msgid ""
"``hit_something``: A boolean for tracking whether or not we've hit something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:505
msgid ""
"With the exception of ``timer`` and ``hit_something``, all of these "
"variables change how the bullet interacts with the world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:508
msgid ""
"The reason we are using a kill timer is so we do not have a case where we "
"get a bullet travelling forever. By using a kill timer, we can ensure that "
"no bullets will travel forever and consume resources."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:512
msgid ""
"As in :ref:`doc_fps_tutorial_part_one`, we have a couple all uppercase class "
"variables. The reason behind this is the same as the reason given in :ref:"
"`doc_fps_tutorial_part_one`: We want to treat these variables like "
"constants, but we want to be able to change them. In this case we will later "
"need to change the damage and speed of these bullets, so we need them to be "
"variables and not constants."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:519
msgid ""
"In ``_ready`` we set the area's ``body_entered`` signal to ourself so that "
"it calls the ``collided`` function when a body enters the area."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:524
msgid ""
"``_physics_process`` gets the bullet's local ``Z`` axis. If you look at the "
"scene in local mode, you will find that the bullet faces the positive local "
"``Z`` axis."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:527
msgid ""
"Next we translate the entire bullet by that forward direction, multiplying "
"in our speed and delta time."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:529
msgid ""
"After that we add delta time to our timer and check whether the timer has "
"reached a value as big or greater than our ``KILL_TIME`` constant. If it "
"has, we use ``queue_free`` to free the bullet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:534
msgid "In ``collided`` we check whether we've hit something yet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:536
msgid ""
"Remember that ``collided`` is only called when a body has entered the :ref:"
"`Area <class_Area>` node. If the bullet has not already collided with "
"something, we then proceed to check if the body the bullet has collided with "
"has a function/method called ``bullet_hit``. If it does, we call it and pass "
"in the bullet's damage and the bullet's global transform so we can get the "
"bullet's rotation and position."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:541
msgid ""
"in ``collided``, the passed in body can be a :ref:`StaticBody "
"<class_StaticBody>`, :ref:`RigidBody <class_RigidBody>`, or :ref:"
"`KinematicBody <class_KinematicBody>`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:544
msgid ""
"We set the Bullet's ``hit_something`` variable to ``true`` because "
"regardless of whether or not the body that the bullet collided with has the "
"``bullet_hit`` function/method, it has hit something and so we need to make "
"sure the bullet does not hit anything else."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:547
msgid "Then we free the bullet using ``queue_free``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:549
msgid ""
"You may be wondering why we even have a ``hit_something`` variable if we "
"free the bullet using ``queue_free`` as soon as it hits something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:552
msgid ""
"The reason we need to track whether we've hit something or not is because "
"``queue_free`` does not immediately free the node, so the bullet could "
"collide with another body before Godot has a chance to free it. By tracking "
"whether the bullet has hit something, we can make sure that the bullet will "
"only hit one object."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:560
msgid ""
"Before we start programming the player again, let's take a quick look at "
"``Player.tscn``. Open up ``Player.tscn`` again."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:563
msgid ""
"Expand ``Rotation_Helper`` and notice how it has two nodes: "
"``Gun_Fire_Points`` and ``Gun_Aim_Point``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:566
msgid ""
"``Gun_aim_point`` is the point that the bullets will be aiming at. Notice "
"how it is lined up with the center of the screen and pulled a distance "
"forward on the Z axis. ``Gun_aim_point`` will serve as the point where the "
"bullets will for sure collide with as it goes along."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:571
msgid ""
"There is a invisible mesh instance for debugging purposes. The mesh is a "
"small sphere that visually shows at which target the bullets will be aiming."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:574
msgid ""
"Open up ``Gun_Fire_Points`` and you'll find three more :ref:`Spatial "
"<class_Spatial>` nodes, one for each weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:577
msgid ""
"Open up ``Rifle_Point`` and you'll find a :ref:`Raycast <class_Raycast>` "
"node. This is where we will be sending the raycasts for our rifle's bullets. "
"The length of the raycast will dictate how far our bullets will travel."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:581
msgid ""
"We are using a :ref:`Raycast <class_Raycast>` node to handle the rifle's "
"bullet because we want to fire lots of bullets quickly. If we use bullet "
"objects, it is quite possible we could run into performance issues on older "
"machines."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:585
msgid ""
"If you are wondering from where the positions of the points came, they are "
"the rough positions of the ends of each weapon. You can see this by going to "
"``AnimationPlayer``, selecting one of the firing animations and scrubbing "
"through the timeline. The point for each weapon should mostly line up with "
"the end of each weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:591
msgid ""
"Open up ``Knife_Point`` and you'll find an :ref:`Area <class_Area>` node. We "
"are using an :ref:`Area <class_Area>` for the knife because we only care for "
"all the bodies close to us, and because our knife does not fire into space. "
"If we were making a throwing knife, we would likely spawn a bullet object "
"that looks like a knife."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:596
msgid ""
"Finally, we have ``Pistol_Point``. This is the point where we will be "
"creating/instancing our bullet objects. We do not need any additional nodes "
"here, as the bullet handles all of its own collision detection."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:600
msgid ""
"Now that we've seen how we will handle our other weapons, and where we will "
"spawn the bullets, let's start working on making them work."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:603
msgid ""
"You can also look at the HUD nodes if you want. There is nothing fancy there "
"and other than using a single :ref:`Label <class_Label>`, we will not be "
"touching any of those nodes. Check :ref:"
"`doc_design_interfaces_with_the_control_nodes` for a tutorial on using GUI "
"nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:609
msgid "Creating the first weapon"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:611
msgid "Lets write the code for each of our weapons, starting with the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:613
msgid ""
"Select ``Pistol_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Pistol_Point``) and create a new script called "
"``Weapon_Pistol.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:615
msgid "Add the following code to ``Weapon_Pistol.gd``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:666
msgid "Let's go over how the script works."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:670
msgid "First we define some class variables we'll need in the script:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:672
msgid "``DAMAGE``: The amount of damage a single bullet does."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:673
msgid "``IDLE_ANIM_NAME``: The name of the pistol's idle animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:674
msgid "``FIRE_ANIM_NAME``: The name of the pistol's fire animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:675
msgid ""
"``is_weapon_enabled``: A variable for checking whether this weapon is in use/"
"enabled."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:676
msgid "``bullet_scene``: The bullet scene we worked on earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:677
msgid "``player_node``: A variable to hold ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:679
msgid ""
"The reason we define most of these variables is so we can use them in "
"``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:681
msgid ""
"Each of the weapons we'll make will have all these variables (minus "
"``bullet_scene``) so we have a consistent interface to interact with in "
"``Player.gd``. By using the same variables/functions in each weapon, we can "
"interact with them without having to know which weapon we are using, which "
"makes our code much more modular because we can add weapons without having "
"to change much of the code in ``Player.gd`` and it will just work."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:686
msgid ""
"We could write all the code in ``Player.gd``, but then ``Player.gd`` will "
"get increasingly harder to manage as we add weapons. By using a modular "
"design with a consistent interface, we can keep ``Player.gd`` nice and neat, "
"while also making it easier to add/remove/modify weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:691
msgid "In ``_ready`` we simply pass over it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:693
msgid ""
"There is one thing of note though, an assumption that we'll fill in ``Player."
"gd`` at some point."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:695
msgid ""
"We are going to assume that ``Player.gd`` will pass themselves in before "
"calling any of the functions in ``Weapon_Pistol.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:697
msgid ""
"While this can lead to situations where the player does not pass themselves "
"in (because we forget), we would have to have a long string of "
"``get_parent`` calls to traverse up the scene tree to retrieve the player. "
"This does not look pretty (``get_parent().get_parent().get_parent()`` and so "
"on) and it is relatively safe to assume we will remember to pass ourselves "
"to each weapon in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:703
msgid "Next let's look at ``fire_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:705
msgid "The first thing we do is instance the bullet scene we made earlier."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:707
msgid ""
"By instancing the scene, we are creating a new node holding all the node(s) "
"in the scene we instanced, effectively cloning that scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:709
msgid ""
"Then we add a ``clone`` to the first child node of the root of the scene we "
"are currently in. By doing this, we're making it a child of the root node of "
"the currently loaded scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:711
msgid ""
"In other words, we are adding a ``clone`` as a child of the first node "
"(whatever is at the top of the scene tree) in the currently loaded/opened "
"scene. If the currently loaded/open scene is ``Testing_Area.tscn``, we'd be "
"adding our ``clone`` as a child of ``Testing_Area``, the root node in that "
"scene."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:714
msgid ""
"As mentioned later below in the section on adding sounds, this method makes "
"an assumption. This will be explained later in the section on adding sounds "
"in :ref:`doc_fps_tutorial_part_three`"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:717
msgid ""
"Next we set the global transform of the clone to the ``Pistol_Aim_Point``'s "
"global transform. The reason we do this is so the bullet is spawned at the "
"end of the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:719
msgid ""
"You can see that ``Pistol_Aim_Point`` is positioned right at the end of the "
"pistol by clicking the :ref:`AnimationPlayer <class_AnimationPlayer>` and "
"scrolling through ``Pistol_fire``. You'll find the position is more or less "
"at the end of the pistol when it fires."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:722
msgid ""
"Next we scale it up by a factor of ``4`` because the bullet scene is a "
"little too small by default."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:724
msgid ""
"Then we set the bullet's damage (``BULLET_DAMAGE``) to the amount of damage "
"a single pistol bullet does (``DAMAGE``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:728
msgid "Now let's look at ``equip_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:730
msgid ""
"The first thing we do is check to see whether the animation manager is in "
"the pistol's idle animation. If we are in the pistol's idle animation, we "
"set ``is_weapon_enabled`` to ``true`` and return ``true`` because the pistol "
"has successfully been equipped."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:734
msgid ""
"Because we know our pistol's ``equip`` animation automatically transitions "
"to the pistol's idle animation, if we are in the pistol's idle animation the "
"pistol must have finished playing the equip animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:737
msgid ""
"We know these animations will transition because we wrote the code to make "
"them transition in ``Animation_Manager.gd``"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:739
msgid ""
"Next we check to see if the player is in the ``Idle_unarmed`` animation "
"state. Because all unequipping animations go to this state, and because any "
"weapon can be equipped from this state, we change animations to "
"``Pistol_equip`` if the player is in the ``Idle_unarmed`` state."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:742
msgid ""
"Since we know ``Pistol_equip`` will transition to ``Pistol_idle``, we do not "
"need to do any more additional processing for equipping weapons, but since "
"we were not able to equip the pistol yet, we return ``false``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:747
msgid "Finally, let's look at ``unequip_weapon``:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:749
msgid ""
"``unequip_weapon`` is similar to ``equip_weapon``, but instead we're "
"checking things in reverse."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:751
msgid ""
"First we check to see whether the player is in the idle animation state. "
"Then we check to make sure the player is not in the ``Pistol_unequip`` "
"animation. If the player is not in the ``Pistol_unequip`` animation, we want "
"to play the ``pistol_unequip`` animation."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:754
msgid ""
"You may be wondering why we are checking to see whether the player is in the "
"pistol's idle animation, and then making sure the player is not unequipping "
"right after. The reason behind the additional check is because we could (in "
"rare cases) call ``unequip_weapon`` twice before we've had a chance to "
"process ``set_animation``, so we add this additional check to make sure the "
"unequip animation plays."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:758
msgid ""
"Next we check to see whether the player is in ``Idle_unarmed``, which is the "
"animation state we will transition into from ``Pistol_unequip``. If the "
"player is in ``Idle_unarmed``, then we set ``is_weapon_enabled`` to "
"``false`` since we are no longer using this weapon, and return ``true`` "
"because we have successfully unequipped the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:761
msgid ""
"If the player is not in ``Idle_unarmed``, we return ``false`` because we "
"have not yet successfully unequipped the pistol."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:764
msgid "Creating the other two weapons"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:766
msgid ""
"Now that we have all the code we'll need for the pistol, let's add the code "
"for the rifle and knife next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:768
msgid ""
"Select ``Rifle_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Rifle_Point``) and create a new script called "
"``Weapon_Rifle.gd``, then add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:821
msgid ""
"Most of this is exactly the same as ``Weapon_Pistol.gd``, so we're only "
"going to look at what's changed: ``fire_weapon``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:823
msgid ""
"The first thing we do is get the :ref:`Raycast <class_Raycast>` node, which "
"is a child of ``Rifle_Point``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:825
msgid ""
"Next we force the :ref:`Raycast <class_Raycast>` to update using "
"``force_raycast_update``. This will force the :ref:`Raycast <class_Raycast>` "
"to detect collisions when we call it, meaning we get a frame perfect "
"collision check with the 3D physics world."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:828
msgid ""
"Then we check to see if the :ref:`Raycast <class_Raycast>` collided with "
"something."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:830
msgid ""
"If the :ref:`Raycast <class_Raycast>` has collided with something, we first "
"get the collision body it collided with. This can be a :ref:`StaticBody "
"<class_StaticBody>`, :ref:`RigidBody <class_RigidBody>`, or a :ref:"
"`KinematicBody <class_KinematicBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:833
msgid ""
"Next we want to make sure the body we've collided with is not the player, "
"since we (probably) do not want to give the player the ability to shoot "
"themselves in the foot."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:835
msgid ""
"If the body is not the player, we then check to see if it has a function/"
"method called ``bullet_hit``. If it does, we call it and pass in the amount "
"of damage this bullet does (``DAMAGE``), and the global transform of the :"
"ref:`Raycast <class_Raycast>` so we can tell from which direction the bullet "
"came."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:840
msgid "Now all we need to do is write the code for the knife."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:842
msgid ""
"Select ``Knife_Point`` (``Player`` -> ``Rotation_Helper`` -> "
"``Gun_Fire_Points`` -> ``Knife_Point``) and create a new script called "
"``Weapon_Knife.gd``, then add the following:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:893
msgid ""
"As with ``Weapon_Rifle.gd``, the only differences are in ``fire_weapon``, so "
"let's look at that:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:895
msgid ""
"The first thing we do is get the :ref:`Area <class_Area>` child node of "
"``Knife_Point``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:897
msgid ""
"Next we want to get all the collision bodies inside the :ref:`Area "
"<class_Area>` using ``get_overlapping_bodies``. This will return a list of "
"every body that touches the :ref:`Area <class_Area>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:900
msgid "We next want to go through each of those bodies."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:902
msgid ""
"First we check to make sure the body is not the player, because we do not "
"want to let the player be able to stab themselves. If the body is the "
"player, we use ``continue`` so we jump and look at the next body in "
"``bodies``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:905
msgid ""
"If we have not jumped to the next body, we then check to see if the body has "
"the ``bullet_hit`` function/method. If it does, we call it, passing in the "
"amount of damage a single knife swipe does (``DAMAGE``) and the global "
"transform of the :ref:`Area <class_Area>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:908
msgid ""
"While we could attempt to calculate a rough location for where the knife hit "
"exactly, we are not going to because using the :ref:`Area <class_Area>`'s "
"position works well enough and the extra time needed to calculate a rough "
"position for each body is not worth the effort."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:913
msgid "Making the weapons work"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:915
msgid "Let's start making the weapons work in ``Player.gd``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:917
msgid ""
"First let's start by adding some class variables we'll need for the weapons:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:935
msgid "Let's go over what these new variables will do:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:937
msgid ""
"``animation_manager``: This will hold the :ref:`AnimationPlayer "
"<class_AnimationPlayer>` node and its script, which we wrote previously."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:938
msgid ""
"``current_weapon_name``: The name of the weapon we are currently using. It "
"has four possible values: ``UNARMED``, ``KNIFE``, ``PISTOL``, and ``RIFLE``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:939
msgid "``weapons``: A dictionary that will hold all the weapon nodes."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:940
msgid ""
"``WEAPON_NUMBER_TO_NAME``: A dictionary allowing us to convert from a "
"weapon's number to its name. We'll use this for changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:941
msgid ""
"``WEAPON_NAME_TO_NUMBER``: A dictionary allowing us to convert from a "
"weapon's name to its number. We'll use this for changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:942
msgid ""
"``changing_weapon``: A boolean to track whether or not we are changing guns/"
"weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:943
msgid "``changing_weapon_name``: The name of the weapon we want to change to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:944
msgid ""
"``health``: How much health our player has. In this part of the tutorial we "
"will not be using it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:945
msgid ""
"``UI_status_label``: A label to show how much health we have, and how much "
"ammo we have both in our gun and in reserve."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:949
msgid ""
"Next we need to add a few things in ``_ready``. Here's the new ``_ready`` "
"function:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:981
msgid "Let's go over what's changed."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:983
msgid ""
"First we get the :ref:`AnimationPlayer <class_AnimationPlayer>` node and "
"assign it to the ``animation_manager`` variable. Then we set the callback "
"function to a :ref:`FuncRef <class_FuncRef>` that will call the player's "
"``fire_bullet`` function. Right now we haven't written the ``fire_bullet`` "
"function, but we'll get there soon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:987
msgid ""
"Next we get all the weapon nodes and assign them to ``weapons``. This will "
"allow us to access the weapon nodes only with their name (``KNIFE``, "
"``PISTOL``, or ``RIFLE``)."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:990
msgid ""
"We then get ``Gun_Aim_Point``'s global position so we can rotate the "
"player's weapons to aim at it."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:992
msgid "Then we go through each weapon in ``weapons``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:994
msgid ""
"We first get the weapon node. If the weapon node is not ``null``, we then "
"set its ``player_node`` variable to this script (``Player.gd``). Then we "
"have it look at ``gun_aim_point_pos`` using the ``look_at`` function, and "
"then rotate it by ``180`` degrees on the ``Y`` axis."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:997
msgid ""
"We rotate all of those weapon points by ``180`` degrees on their ``Y`` axis "
"because our camera is pointing backwards. If we did not rotate all of these "
"weapon points by ``180`` degrees, all of the weapons would fire backwards."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1000
msgid ""
"Then we set ``current_weapon_name`` and ``changing_weapon_name`` to "
"``UNARMED``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1002
msgid "Finally, we get the UI :ref:`Label <class_Label>` from our HUD."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1006
msgid ""
"Let's add a new function call to ``_physics_process`` so we can change "
"weapons. Here's the new code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1016
msgid "Now we will call ``process_changing_weapons``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1020
msgid ""
"Now let's add all the player input code for the weapons in "
"``process_input``. Add the following code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1060
msgid "Let's go over the additions, starting with how we're changing weapons."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1062
msgid ""
"First we get the current weapon's number and assign it to "
"``weapon_change_number``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1064
msgid ""
"Then we check to see if any of the number keys (keys 1-4) are pressed. If "
"they are, we set ``weapon_change_number`` to the value mapped at that key."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1067
msgid ""
"The reason key 1 is mapped to ``0`` is because the first element in a list "
"is mapped to zero, not one. Most list/array accessors in most programming "
"languages start at ``0`` instead of ``1``. See https://en.wikipedia.org/wiki/"
"Zero-based_numbering for more information."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1070
msgid ""
"Next we check to see if ``shift_weapon_positive`` or "
"``shift_weapon_negative`` is pressed. If one of them is, we add/subtract "
"``1`` from ``weapon_change_number``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1073
msgid ""
"Because the player may have shifted ``weapon_change_number`` outside of the "
"number of weapons the player has, we clamp it so it cannot exceed the "
"maximum number of weapons the player has and it ensures "
"``weapon_change_number`` is ``0`` or more."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1076
msgid ""
"Then we check to make sure the player is not already changing weapons. If "
"the player is not, we then check to see if the weapon the player wants to "
"change to is a new weapon and not the weapon the player is currently using. "
"If the weapon the player is wanting to change to is a new weapon, we then "
"set ``changing_weapon_name`` to the weapon at ``weapon_change_number`` and "
"set ``changing_weapon`` to true."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1080
msgid ""
"For firing the weapon we first check to see if the ``fire`` action is "
"pressed. Then we check to make sure the player is not changing weapons. Next "
"we get the weapon node for the current weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1084
msgid ""
"If the current weapon node does not equal null, and the player is in its "
"``IDLE_ANIM_NAME`` state, we set the player's animation to the current "
"weapon's ``FIRE_ANIM_NAME``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1089
msgid "Let's add ``process_changing_weapons`` next."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1091
msgid "Add the following code:"
msgstr "Добавьте следующий код:"

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1127
msgid "Let's go over what's happening here:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1129
msgid ""
"The first thing we do is make sure we've received input to change weapons. "
"We do this by making sure ``changing_weapons`` is ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1131
msgid ""
"Next we define a variable (``weapon_unequipped``) so we can check whether "
"the current weapon has been successfully unequipped or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1133
msgid "Then we get the current weapon from ``weapons``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1135
msgid ""
"If the current weapon is not ``null``, then we need to check whether the "
"weapon is enabled. If the weapon is enabled, we call its ``unequip_weapon`` "
"function so it will start the unequip animation. If the weapon is not "
"enabled, we set ``weapon_unequipped`` to ``true`` because the weapon has "
"successfully been unequipped."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1138
msgid ""
"If the current weapon is ``null``, then we can simply set "
"``weapon_unequipped`` to ``true``. The reason we do this check is because "
"there is no weapon script/node for ``UNARMED``, but there is also no "
"animations for ``UNARMED``, so we can just start equipping the weapon the "
"player wants to change to."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1141
msgid ""
"If the player has successfully unequipped the current weapon "
"(``weapon_unequipped == true``), we need to equip the new weapon."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1143
msgid ""
"First we define a new variable (``weapon_equipped``) for tracking whether "
"the player has successfully equipped the new weapon or not."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1145
msgid ""
"Then we get the weapon the player wants to change to. If the weapon the "
"player wants to change to is not ``null``, we then check to see whether it's "
"enabled or not. If it is not enabled, we call its ``equip_weapon`` function "
"so it starts to equip the weapon. If the weapon is enabled, we set "
"``weapon_equipped`` to ``true``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1148
msgid ""
"If the weapon the player wants to change to is ``null``, we simply set "
"``weapon_equipped`` to ``true`` because we do not have any node/script for "
"``UNARMED``, nor do we have any animations."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1151
msgid ""
"Finally, we check to see whether the player has successfully equipped the "
"new weapon. If (s)he has done so, we set ``changing_weapon`` to ``false`` "
"because the player is no longer changing weapons. We also set "
"``current_weapon_name`` to ``changing_weapon_name`` since the current weapon "
"has changed, and then we set ``changing_weapon_name`` to an empty string."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1157
msgid ""
"Now, we need to add one more function to the player, and then the player is "
"ready to start firing the weapons!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1159
msgid ""
"We need to add ``fire_bullet``, which will be called by the :ref:"
"`AnimationPlayer <class_AnimationPlayer>` at those points we set earlier in "
"the :ref:`AnimationPlayer <class_AnimationPlayer>` function track:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1171
msgid "Let's go over what this function does:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1173
msgid ""
"First we check to see whether the player is changing weapons. If the player "
"is changing weapons, we do not want shoot, so we ``return``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1175
msgid ""
"Calling ``return`` stops the rest of the function from being called. In this "
"case, we are not returning a variable because we are only interested in not "
"running the rest of the code, and because we are not looking for a returned "
"variable either when we call this function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1179
msgid ""
"Then we tell the current weapon the player is using to fire by calling its "
"``fire_weapon`` function."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1181
msgid ""
"Remember how we mentioned the speed of the animations for firing was faster "
"than the other animations? By changing the firing animation speeds, you can "
"change how fast the weapon fires bullets!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1187
msgid ""
"Before we are ready to test our new weapons, we still have a little bit of "
"work to do."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1190
msgid "Creating some test subjects"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1192
msgid ""
"Create a new script by going to the scripting window, clicking \"file\", and "
"selecting new. Name this script ``RigidBody_hit_test`` and make sure it "
"extends :ref:`RigidBody <class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1195
msgid "Now we need to add this code:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1212
msgid "Let's go over how ``bullet_hit`` works:"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1215
msgid ""
"First we get the bullet's forward directional vector. This is so we can tell "
"from which direction the bullet will hit the :ref:`RigidBody "
"<class_RigidBody>`. We will use this to push the :ref:`RigidBody "
"<class_RigidBody>` in the same direction as the bullet."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1218
msgid ""
"We need to boost the directional vector by ``BASE_BULLET_BOOST`` so the "
"bullets pack a bit more of a punch and move the :ref:`RigidBody "
"<class_RigidBody>` nodes in a visible way. You can just set "
"``BASE_BULLET_BOOST`` to lower or higher values if you want less or more of "
"a reaction when the bullets collide with the :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1222
msgid "Then we apply an impulse using ``apply_impulse``."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1224
msgid ""
"First, we need to calculate the position for the impulse. Because "
"``apply_impulse`` takes a vector relative to the :ref:`RigidBody "
"<class_RigidBody>`, we need to calculate the distance from the :ref:"
"`RigidBody <class_RigidBody>` to the bullet. We do this by subtracting the :"
"ref:`RigidBody <class_RigidBody>`'s global origin/position from the bullet's "
"global origin/position. This gets us the distance from the :ref:`RigidBody "
"<class_RigidBody>` to the bullet. We normalize this vector so the size of "
"the collider does not effect how much the bullets move the :ref:`RigidBody "
"<class_RigidBody>`."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1230
msgid ""
"Finally, we need to calculate the force for the impulse. For this, we use "
"the direction the bullet is facing and multiply it by the bullet's damage. "
"This gives a nice result and for stronger bullets, we get a stronger result."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1235
msgid ""
"Now we need to attach this script to all of the :ref:`RigidBody "
"<class_RigidBody>` nodes we want to affect."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1237
msgid ""
"Open up ``Testing_Area.tscn`` and select all the cubes parented to the "
"``Cubes`` node."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1239
msgid ""
"If you select the top cube, and then hold down ``shift`` and select the last "
"cube, Godot will select all the cubes in-between!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1242
msgid ""
"Once you have all the cubes selected, scroll down in the inspector until you "
"get to the \"scripts\" section. Click the drop down and select \"Load\". "
"Open your newly created ``RigidBody_hit_test.gd`` script."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1246
msgid "Final notes"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1250
msgid ""
"That was a lot of code! But now, with all that done, you can go and give "
"your weapons a test!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1252
msgid ""
"You should now be able to fire as many bullets as you want at the cubes and "
"they will move in response to the bullets colliding with them."
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1255
msgid ""
"In :ref:`doc_fps_tutorial_part_three`, we will add ammo to the weapons, as "
"well as some sounds!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1257
msgid "If you ever get lost, be sure to read over the code again!"
msgstr ""

#: ../../docs/tutorials/3d/fps_tutorial/part_two.rst:1259
msgid ""
"You can download the finished project for this part here: :download:"
"`Godot_FPS_Part_2.zip <files/Godot_FPS_Part_2.zip>`"
msgstr ""
