# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-04 16:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:4
msgid "Procedural geometry"
msgstr "Процедурная геометрия"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:6
msgid ""
"There are many ways to procedurally generate geometry in Godot. In this "
"tutorial series we will explore a few of them. Each technique has its own "
"benefits and drawbacks, so it is best to understand each one and how it can "
"be useful in a given situation."
msgstr ""
"Существует множество способов процедурно генерировать геометрию в Godot. В "
"этой серии уроков мы рассмотрим несколько из них. У каждой техники есть свои "
"преимущества и недостатки, поэтому лучше всего понимать каждую из них и то, "
"как она может быть полезна в той или иной ситуации."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:20
msgid "What is geometry?"
msgstr "Что такое геометрия?"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:22
msgid ""
"Geometry is a fancy way of saying shape. In computer graphics, geometry is "
"typically represented by an array of positions called \"vertices\". In "
"Godot, geometry is represented by Meshes."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:26
msgid "What is a Mesh?"
msgstr "Что такое меш?"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:28
msgid ""
"Many things in Godot have mesh in their name: the :ref:`Mesh <class_Mesh>`, "
"the :ref:`ArrayMesh <class_ArrayMesh>`, the :ref:`MeshInstance "
"<class_MeshInstance>`, the :ref:`MultiMesh <class_MultiMesh>`, and the :ref:"
"`MultiMeshInstance <class_MultiMeshInstance>`. While they are all related, "
"they have slightly different uses."
msgstr ""
"Многие вещи в Godot имеют название mesh: :ref:`Mesh <class_Mesh>`, :ref:"
"`ArrayMesh <class_ArrayMesh>`, :ref:`MeshInstance <class_MeshInstance>`, :"
"ref:`MultiMesh <class_MultiMesh>`, и :ref:`MultiMeshInstance "
"<class_MultiMeshInstance>`. Хотя все они связаны между собой, их "
"использование несколько отличается."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:32
msgid ""
"Meshes and ArrayMeshes are resources that are drawn using a MeshInstance "
"node. Resources like Meshes and ArrayMeshes cannot be added to the scene "
"directly. A MeshInstance represents one instance of a mesh in your scene. "
"You can reuse a single mesh in multiple MeshInstances to draw it in "
"different parts of your scene with different materials or transformations "
"(scale, rotation, position etc.)."
msgstr ""
"Meshes и ArrayMeshes - это ресурсы, которые рисуются с помощью узла "
"MeshInstance. Такие ресурсы, как Meshes и ArrayMeshes, не могут быть "
"добавлены в сцену напрямую. MeshInstance представляет один экземпляр сетки в "
"вашей сцене. Вы можете повторно использовать одну сетку в нескольких "
"MeshInstance, чтобы рисовать ее в разных частях сцены с разными материалами "
"или преобразованиями (масштаб, поворот, положение и т.д.)."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:38
msgid ""
"If you are going to draw the same object many times, it can be helpful to "
"use a MultiMesh with a MultiMeshInstance. The MultiMeshInstance draws meshes "
"thousands of times very cheaply. It takes advantage of hardware instancing "
"in order to do so. The drawback with using a MultiMeshInstance is that you "
"are limited to one material for all instances. It uses an instance array to "
"store different colors and transformations for each instance, but all the "
"instances use the same material."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:46
#, fuzzy
msgid "What a Mesh is"
msgstr "Типы Шейдеров"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:48
msgid ""
"A Mesh is composed of one or more surfaces. A surface is an array composed "
"of multiple sub-arrays containing vertices, normals, UVs, etc. Normally the "
"process of constructing surfaces and meshes is hidden from the user in the :"
"ref:`VisualServer <class_VisualServer>`, but with ArrayMeshes, the user can "
"construct a Mesh manually by passing in an array containing the surface "
"information."
msgstr ""
"Сетка состоит из одной или нескольких поверхностей. Поверхность - это "
"массив, состоящий из нескольких подмассивов, содержащих вершины, нормали, UV "
"и т.д. Обычно процесс построения поверхностей и сеток скрыт от пользователя "
"в :ref:`VisualServer <class_VisualServer>`, но с помощью ArrayMeshes "
"пользователь может построить сетку вручную, передав массив, содержащий "
"информацию о поверхности."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:54
msgid "Surfaces"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:56
msgid ""
"Each surface has its own material. Alternatively, you can override the "
"material for all surfaces in the Mesh when you use a MeshInstance using "
"``MeshInstance.override_material``."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:60
msgid "Surface array"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:62
msgid ""
"The surface array is an array of length ``ArrayMesh.ARRAY_MAX``. Each "
"position in the array is filled with a sub-array containing per-vertex "
"information. For example, the array located at ``ArrayMesh.ARRAY_NORMAL`` is "
"a :ref:`PoolVector3Array <class_PoolVector3Array>` of vertex normals."
msgstr ""
"Массив поверхности представляет собой массив длиной ``ArrayMesh.ARRAY_MAX``. "
"Каждая позиция в массиве заполняется подмассивом, содержащим информацию о "
"каждой вершине. Например, массив, расположенный по адресу ``ArrayMesh."
"ARRAY_NORMAL``, представляет собой :ref:`PoolVector3Array "
"<class_PoolVector3Array>` нормалей вершин."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:66
msgid ""
"The surface array can be indexed or non-indexed. Creating a non-indexed "
"array is as easy as not assigning an array at the index ``ArrayMesh."
"ARRAY_INDEX``. A non-indexed array stores unique vertex information for "
"every triangle, meaning that when two triangle share a vertex, the vertex is "
"duplicated in the array. An indexed surface array only stores vertex "
"information for each unique vertex and then also stores an array of indices "
"which maps out how to construct the triangles from the vertex array. In "
"general, using an indexed array is faster, but it means you have to share "
"vertex data between triangles, which is not always desired (e.g. when you "
"want per-face normals)."
msgstr ""
"Массив поверхности может быть индексированным или неиндексированным. Создать "
"неиндексированный массив так же просто, как не присваивать массиву индекс "
"``ArrayMesh.ARRAY_INDEX``. Неиндексированный массив хранит уникальную "
"информацию о вершинах для каждого треугольника, что означает, что когда два "
"треугольника имеют общую вершину, она дублируется в массиве. Индексированный "
"массив поверхностей хранит информацию о вершинах только для каждой "
"уникальной вершины, а затем также хранит массив индексов, которые указывают, "
"как построить треугольники из массива вершин. В целом, использование "
"индексированного массива быстрее, но это означает, что вам придется "
"разделять вершинные данные между треугольниками, что не всегда желательно "
"(например, когда вам нужны нормали для каждой грани)."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:75
msgid "Tools"
msgstr "Инструменты"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:77
msgid ""
"Godot provides different ways of accessing and working with geometry. More "
"information on each will be provided in the following tutorials."
msgstr ""
"Godot предоставляет различные способы доступа к геометрии и работы с ней. "
"Более подробная информация по каждому из них будет предоставлена в следующих "
"уроках."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:81
msgid "ArrayMesh"
msgstr "ArrayMesh"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:83
msgid ""
"The ArrayMesh resource extends Mesh to add a few different quality of life "
"functions, and most importantly, the ability to construct a Mesh surface "
"through scripting."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:86
#, fuzzy
msgid ""
"For more information about the ArrayMesh, please see the :ref:`ArrayMesh "
"tutorial <doc_arraymesh>`."
msgstr ""
"Для получения дополнительной информации о самих событиях ввода посмотрите "
"руководство :ref:`Input Event Tutorial<doc_inputevent>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:89
msgid "MeshDataTool"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:91
msgid ""
"The MeshDataTool is a resource that converts Mesh data into arrays of "
"vertices, faces, and edges that can be modified at runtime."
msgstr ""
"MeshDataTool - это ресурс, преобразующий данные Mesh в массивы вершин, "
"граней и ребер, которые могут быть изменены во время выполнения."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:94
#, fuzzy
msgid ""
"For more information about the MeshDataTool, please see the :ref:"
"`MeshDataTool tutorial <doc_meshdatatool>`."
msgstr ""
"Для получения дополнительной информации о самих событиях ввода посмотрите "
"руководство :ref:`Input Event Tutorial<doc_inputevent>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:97
msgid "SurfaceTool"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:99
msgid ""
"The SurfaceTool allows the creation of Meshes using an OpenGL 1.x immediate "
"mode style interface."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:101
#, fuzzy
msgid ""
"For more information about the SurfaceTool, please see the :ref:`SurfaceTool "
"tutorial <doc_surfacetool>`."
msgstr ""
"Для получения дополнительной информации о самих событиях ввода посмотрите "
"руководство :ref:`Input Event Tutorial<doc_inputevent>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:104
msgid "ImmediateGeometry"
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:106
msgid ""
"ImmediateGeometry is a node that uses an immediate mode style interface "
"(like SurfaceTool) to draw objects. The difference between ImmediateGeometry "
"and the SurfaceTool is that ImmediateGeometry is a node itself that can be "
"added to the scene tree and is drawn directly from the code. The SurfaceTool "
"generates a Mesh that needs to be added a MeshInstance to be seen."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:111
msgid ""
"ImmediateGeometry is useful for prototyping because of the straightforward "
"API, but it is slow because the geometry is rebuilt every frame. It is most "
"useful for quickly adding simple geometry to debug visually (e.g. by drawing "
"lines to visualize physics raycasts etc.)."
msgstr ""

#: ../../docs/tutorials/content/procedural_geometry/index.rst:115
#, fuzzy
msgid ""
"For more information about ImmediateGeometry, please see the :ref:"
"`ImmediateGeometry tutorial <doc_immediategeometry>`."
msgstr ""
"Для получения дополнительной информации о самих событиях ввода посмотрите "
"руководство :ref:`Input Event Tutorial<doc_inputevent>`."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:118
msgid "Which one should I use?"
msgstr "Какой из них мне следует использовать?"

#: ../../docs/tutorials/content/procedural_geometry/index.rst:120
msgid ""
"Which method you use depends on what you are trying to do and what kind of "
"procedure you are comfortable with."
msgstr ""
"Какой метод вы используете, зависит от того, чего вы хотите добиться и какой "
"вид процедуры вам удобен."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:122
msgid ""
"Both SurfaceTool and ArrayMesh are excellent for generating static geometry "
"(meshes) that don't change over time."
msgstr ""
"И SurfaceTool, и ArrayMesh отлично подходят для создания статической "
"геометрии (сетки), которая не меняется со временем."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:124
#, fuzzy
msgid ""
"Using an ArrayMesh is slightly faster than using a SurfaceTool, but the API "
"is a little more challenging. Additionally, SurfaceTool has a few quality of "
"life methods such as ``generate_normals()`` and ``index()``."
msgstr ""
"Использование ArrayMesh немного быстрее, чем использование SurfaceTool, но "
"API немного сложнее. Кроме того, у SurfaceTool есть несколько методов, таких "
"как ``generate_normals()`` и ``index()``."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:127
#, fuzzy
msgid ""
"ImmediateGeometry regenerates the mesh every frame, so it is much slower "
"than ArrayMesh or SurfaceTool. However, if you need the geometry to change "
"every frame anyway, it provides a much easier interface that may even be a "
"little faster than generating an ArrayMesh every frame."
msgstr ""
"ImmediateGeometry регенерирует сетку каждый кадр, поэтому он намного "
"медленнее, чем ArrayMesh или SurfaceTool. Однако, если вам нужно, чтобы "
"геометрия менялась каждый кадр в любом случае, этот инструмент предоставляет "
"гораздо более простой интерфейс, который может быть даже немного быстрее, "
"чем генерация ArrayMesh каждый кадр."

#: ../../docs/tutorials/content/procedural_geometry/index.rst:131
#, fuzzy
msgid ""
"The MeshDataTool is not fast, but it gives you access to all kinds of "
"properties of the mesh that you don't get with the others (edges, faces, "
"etc.). It is incredibly useful when you need that sort of data to transform "
"the mesh, but it is not a good idea to use it if that information is not "
"needed. The MeshDataTool is best used if you are going to be using an "
"algorithm that requires access to the face or edge array."
msgstr ""
"MeshDataTool не является быстрым, но он дает вам доступ ко всем видам "
"свойств сетки, которые вы не можете получить с помощью других инструментов "
"(края, грани и т.д.). Он невероятно полезен, когда вам нужны такие данные "
"для преобразования сетки, но его не стоит использовать, если эта информация "
"не нужна. MeshDataTool лучше использовать, если вы собираетесь использовать "
"алгоритм, требующий доступа к массиву граней или ребер."
