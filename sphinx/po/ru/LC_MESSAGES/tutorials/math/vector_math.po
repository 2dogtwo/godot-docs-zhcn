# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 13:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/math/vector_math.rst:4
msgid "Vector math"
msgstr "Векторная алгебра"

#: ../../docs/tutorials/math/vector_math.rst:7
msgid "Introduction"
msgstr "Введение"

#: ../../docs/tutorials/math/vector_math.rst:9
msgid ""
"This tutorial is a short and practical introduction to linear algebra as it "
"applies to game development. Linear algebra is the study of vectors and "
"their uses. Vectors have many applications in both 2D and 3D development and "
"Godot uses them extensively. Developing a good understanding of vector math "
"is essential to becoming a strong game developer."
msgstr ""
"Этот урок - короткое и практичное введение в линейную алгебру, применяемую в "
"разработке игр. Линейная алгебра изучает векторы и их использование. Векторы "
"могут применяться в 2D и 3D разработке и Godot использует их интенсивно. "
"Разработчику игр требуется хорошее понимание векторной алгебры чтобы стать "
"сильным в этой области."

#: ../../docs/tutorials/math/vector_math.rst:15
msgid ""
"This tutorial is **not** a formal textbook on linear algebra. We will only "
"be looking at how it is applied to game development. For a broader look at "
"the mathematics, see https://www.khanacademy.org/math/linear-algebra"
msgstr ""
"Этот урок **не** обычная книга по линейной алгебре. Мы рассмотрим только то "
"что применяется в разработке игр. Для более широкого взгляда на математику, "
"смотрите https://www.khanacademy.org/math/linear-algebra"

#: ../../docs/tutorials/math/vector_math.rst:21
msgid "Coordinate systems (2D)"
msgstr "Системы координат (2D)"

#: ../../docs/tutorials/math/vector_math.rst:23
msgid ""
"In 2D space, coordinates are defined using a horizontal axis (``x``) and a "
"vertical axis (``y``). A particular position in 2D space is written as a "
"pair of values such as ``(4, 3)``."
msgstr ""
"В 2D пространстве, координаты определены использованием горизонтальной оси "
"(``x``) и вертикальной оси (``y``). Определённая позиция в 2D пространстве "
"записывается как пара значений, таких как ``(4, 3)``."

#: ../../docs/tutorials/math/vector_math.rst:29
msgid ""
"If you're new to computer graphics, it might seem odd that the positive "
"``y`` axis points **downwards** instead of upwards, as you probably learned "
"in math class. However, this is common in most computer graphics "
"applications."
msgstr ""
"Если вы новичок в компьютерной графике, вам может показаться странным, что "
"положительная ось ``y`` указывает **вниз**, а не вверх, как вас учили в "
"школе. Тем не менее, в приложениях компьютерной графики это встречается "
"повсеместно."

#: ../../docs/tutorials/math/vector_math.rst:34
msgid ""
"Any position in the 2D plane can be identified by a pair of numbers in this "
"way. However, we can also think of the position ``(4, 3)`` as an **offset** "
"from the ``(0, 0)`` point, or **origin**. Draw an arrow pointing from the "
"origin to the point:"
msgstr ""
"Любая точка на 2D плоскости может быть таким образом определена парой чисел. "
"Вы также можете рассматривать ``(4, 3)`` как **смещение** от точки ``(0, "
"0)``, или точки **начала** координат. Нарисуем стрелку от начала координат "
"до заданной точки:"

#: ../../docs/tutorials/math/vector_math.rst:41
msgid ""
"This is a **vector**. A vector represents a lot of useful information. As "
"well as telling us that the point is at ``(4, 3)``, we can also think of it "
"as an angle ``θ`` and a length (or magnitude) ``m``. In this case, the arrow "
"is a **position vector** - it denotes a position in space, relative to the "
"origin."
msgstr ""
"Это **вектор**. Вектор предоставляет множество полезной информации. Помимо "
"сообщения нам, что точка расположена в ``(4, 3)``, мы можем также "
"представить это в виде угла ``θ`` и длины (величины, модуля) ``m``. В данном "
"примере стрелка — это **вектор позиции** — он обозначает позицию в "
"пространстве относительно начала координат."

#: ../../docs/tutorials/math/vector_math.rst:47
msgid ""
"A very important point to consider about vectors is that they only represent "
"**relative** direction and magnitude. There is no concept of a vector's "
"position. The following two vectors are identical:"
msgstr ""
"При рассмотрении векторов крайне важно иметь в виду, что они представляют "
"только **относительные** направление и величину (модуль). Вектору нельзя "
"приписать определённой позиции. Два следующих вектора идентичны:"

#: ../../docs/tutorials/math/vector_math.rst:53
msgid ""
"Both vectors represent a point 4 units to the right and 3 units below some "
"starting point. It does not matter where on the plane you draw the vector, "
"it always represents a relative direction and magnitude."
msgstr ""
"Оба вектора представляют точку 4 единицами правее и 3 единицами ниже "
"стартовой точки. Неважно, где на плоскости вы нарисуете вектор, он всегда "
"представляет относительное направление и величину."

#: ../../docs/tutorials/math/vector_math.rst:58
msgid "Vector operations"
msgstr "Операции над векторами"

#: ../../docs/tutorials/math/vector_math.rst:60
msgid ""
"You can use either method (x and y coordinates or angle and magnitude) to "
"refer to a vector, but for convenience, programmers typically use the "
"coordinate notation. For example, in Godot, the origin is the top-left "
"corner of the screen, so to place a 2D node named ``Node2D`` 400 pixels to "
"the right and 300 pixels down, use the following code:"
msgstr ""
"Вы можете применять любой из методов (задание координат x и y или угла с "
"длиной) для определения вектора, но обычно программисты используют "
"координаты. Для примера, в Godot начало координат — это верхний-левый угол "
"экрана, так что для перемещения 2D ноды с именем ``Node2D`` на 400 пикселей "
"вправо и 300 вниз используйте следующий код:"

#: ../../docs/tutorials/math/vector_math.rst:76
msgid ""
"Godot supports both :ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>` for 2D and 3D usage, respectively. The same mathematical "
"rules discussed in this article apply to both types."
msgstr ""
"Godot поддерживает типы :ref:`Vector2 <class_Vector2>` и :ref:`Vector3 "
"<class_Vector3>` для 2D и 3D соответственно. Математические правила, "
"рассказанные в этой статье, применяются к обоим типам."

#: ../../docs/tutorials/math/vector_math.rst:81
msgid "Member access"
msgstr "Доступ к полям"

#: ../../docs/tutorials/math/vector_math.rst:83
msgid ""
"The individual components of the vector can be accessed directly by name."
msgstr ""
"К отдельным компонентам вектора можно обращаться непосредственно по имени."

#: ../../docs/tutorials/math/vector_math.rst:105
msgid "Adding vectors"
msgstr "Сложение векторов"

#: ../../docs/tutorials/math/vector_math.rst:107
msgid ""
"When adding or subtracting two vectors, the corresponding components are "
"added:"
msgstr ""
"Когда два вектора складываются или вычитаются, складываются соответствующие "
"компоненты :"

#: ../../docs/tutorials/math/vector_math.rst:118
msgid ""
"We can also see this visually by adding the second vector at the end of the "
"first:"
msgstr ""
"Мы также можем посмотреть визуально на добавление второго вектора к концу "
"первого:"

#: ../../docs/tutorials/math/vector_math.rst:123
msgid "Note that adding ``a + b`` gives the same result as ``b + a``."
msgstr ""
"Отметьте что сложение ``a + b`` даёт такой же результат что и ``b + a``."

#: ../../docs/tutorials/math/vector_math.rst:126
msgid "Scalar multiplication"
msgstr "Скалярное перемножение"

#: ../../docs/tutorials/math/vector_math.rst:128
msgid ""
"Vectors represent both direction and magnitude. A value representing only "
"magnitude is called a **scalar**."
msgstr ""
"Векторы представляют направление и длину(магнитуду). Значение представленное "
"только длиной называется **скаляром**."

#: ../../docs/tutorials/math/vector_math.rst:131
msgid "A vector can be multiplied by a **scalar**:"
msgstr "Вектор может быть умножен на **скаляр**:"

#: ../../docs/tutorials/math/vector_math.rst:146
msgid ""
"Multiplying a vector by a scalar does not change its direction, only its "
"magnitude. This is how you **scale** a vector."
msgstr ""
"Умножение вектора на скаляр не меняет направление, только длину. Это как бы "
"**увеличение** вектора."

#: ../../docs/tutorials/math/vector_math.rst:150
msgid "Practical applications"
msgstr "Практические применения"

#: ../../docs/tutorials/math/vector_math.rst:152
msgid "Let's look at two common uses for vector addition and subtraction."
msgstr ""
"Давайте посмотрим на два обычных приёма использования для векторного "
"сложения и вычитания."

#: ../../docs/tutorials/math/vector_math.rst:155
msgid "Movement"
msgstr "Движение"

#: ../../docs/tutorials/math/vector_math.rst:157
msgid ""
"A vector can represent **any** quantity with a magnitude and direction. "
"Typical examples are: position, velocity, acceleration, and force. In this "
"image, the spaceship at step 1 has a position vector of ``(1,3)`` and a "
"velocity vector of ``(2,1)``. The velocity vector represents how far the "
"ship moves each step. We can find the position for step 2 by adding the "
"velocity to the current position."
msgstr ""
"Вектор может представлять **любую** длину и направление. Обычные примеры "
"это: позиция, скорость, ускорение, и сила. На этом изображении, космический "
"корабль на шаге 1 имеет вектор позиции ``(1,3)`` а вектор скорости "
"``(2,1)``. Вектор скорости представляет как далеко пойдёт корабль на каждом "
"шаге. Вы можете найти его позицию на шаге 2 добавляя скорость к текущей "
"позиции."

#: ../../docs/tutorials/math/vector_math.rst:165
msgid ""
"Velocity measures the **change** in position per unit of time. The new "
"position is found by adding velocity to the previous position."
msgstr ""
"Скорость вычисляет **изменение** позиции за единицу времени. Новая позиция "
"находится добавление скорости к предыдущей позиции."

#: ../../docs/tutorials/math/vector_math.rst:169
msgid "Pointing toward a target"
msgstr "Направление в сторону цели"

#: ../../docs/tutorials/math/vector_math.rst:171
msgid ""
"In this scenario, you have a tank that wishes to point its turret at a "
"robot. Subtracting the tank's position from the robot's position gives the "
"vector pointing from the tank to the robot."
msgstr ""
"В этом примере, вы, управляя танком, хотите направить дуло на робота. "
"Вычитание позиции танка из позиции робота, даёт вектор направленный от танка "
"на робота."

#: ../../docs/tutorials/math/vector_math.rst:177
msgid "To find a vector pointing from ``A`` to ``B`` use ``B - A``."
msgstr ""
"Для нахождения вектора направления от ``A`` до ``B`` используйте ``B - A``."

#: ../../docs/tutorials/math/vector_math.rst:180
msgid "Unit vectors"
msgstr "Единичные векторы"

#: ../../docs/tutorials/math/vector_math.rst:182
msgid ""
"A vector with **magnitude** of ``1`` is called a **unit vector**. They are "
"also sometimes referred to as **direction vectors** or **normals**. Unit "
"vectors are helpful when you need to keep track of a direction."
msgstr ""
"Вектор с **длиной** равной 1, называется **единичным вектором**. Они также "
"иногда называются **векторами направления** или **нормалями**. Единичные "
"векторы полезны когда вам нужно сохранить трэк направления."

#: ../../docs/tutorials/math/vector_math.rst:187
msgid "Normalization"
msgstr "Нормализация"

#: ../../docs/tutorials/math/vector_math.rst:189
msgid ""
"**Normalizing** a vector means reducing its length to ``1`` while preserving "
"its direction. This is done by dividing each of its components by its "
"magnitude. Because this is such a common operation, ``Vector2`` and "
"``Vector3`` provide a method for normalizing:"
msgstr ""
"**Нормализация** вектора означает приведение его длины к ``1`` с сохранением "
"его направления. Это делается путем деления каждого из его компонентов на "
"длину. Поскольку это такая распространенная операция, ``Vector2`` и "
"``Vector3`` предоставляют метод нормализации:"

#: ../../docs/tutorials/math/vector_math.rst:204
msgid ""
"Because normalization involves dividing by the vector's length, you cannot "
"normalize a vector of length ``0``. Attempting to do so will result in an "
"error."
msgstr ""
"Поскольку нормализация подразумевает деление на длину вектора, вы не можете "
"нормализовать вектор с длиной равной ``0``. Попытка сделать это закончится "
"ошибкой."

#: ../../docs/tutorials/math/vector_math.rst:209
msgid "Reflection"
msgstr "Отражение"

#: ../../docs/tutorials/math/vector_math.rst:211
msgid ""
"A common use of unit vectors is to indicate **normals**. Normal vectors are "
"unit vectors aligned perpendicularly to a surface, defining its direction. "
"They are commonly used for lighting, collisions, and other operations "
"involving surfaces."
msgstr ""
"Обычный пример использования единичных векторов это определение "
"**нормалей**. Векторы нормалей - это единичные векторы направленные "
"перпендикулярно поверхности, определяющей их направление. Они обычно "
"используются в обработке света, коллизий, и других операциях с поверхностями."

#: ../../docs/tutorials/math/vector_math.rst:216
msgid ""
"For example, imagine we have a moving ball that we want to bounce off a wall "
"or other object:"
msgstr ""
"Например, представьте что вы движете шар, который вы хотите отражать от стен "
"или других объектов:"

#: ../../docs/tutorials/math/vector_math.rst:221
msgid ""
"The surface normal has a value of ``(0, -1)`` because this is a horizontal "
"surface. When the ball collides, we take its remaining motion (the amount "
"left over when it hits the surface) and reflect it using the normal. In "
"Godot, the :ref:`Vector2 <class_Vector2>` class has a ``bounce()`` method to "
"handle this. Here is a GDScript example of the diagram above using a :ref:"
"`KinematicBody2D <class_KinematicBody2D>`:"
msgstr ""
"Нормаль поверхности имеет значение ``(0, -1)``, потому что это "
"горизонтальная поверхность. Когда шар сталкивается, мы берём его оставшееся "
"движение (количество, оставшееся, когда он касается поверхности) и отражаем "
"его, используя нормаль. В Godot класс :ref:`Vector2 <class_Vector2>` имеет "
"метод ``bounce()`` для обработки этого. Вот пример GDScript приведённой выше "
"диаграммы с использованием :ref:`KinematicBody2D <class_KinematicBody2D>`:"

#: ../../docs/tutorials/math/vector_math.rst:251
msgid "Dot product"
msgstr "Скалярное произведение"

#: ../../docs/tutorials/math/vector_math.rst:253
msgid ""
"The **dot product** is one of the most important concepts in vector math, "
"but is often misunderstood. Dot product is an operation on two vectors that "
"returns a **scalar**. Unlike a vector, which contains both magnitude and "
"direction, a scalar value has only magnitude."
msgstr ""
"Результат **скалярного произведения** очень важный аспект в векторной "
"алгебре, но его также часто плохо понимают. Скалярное произведение это "
"операция над двумя векторами которая возвращает **скаляр**. В отличии от "
"вектора, который содержит длину и направление, скаляр содержит только длину."

#: ../../docs/tutorials/math/vector_math.rst:258
msgid "The formula for dot product takes two common forms:"
msgstr "Формула скалярного произведения имеет две распространённых формы:"

#: ../../docs/tutorials/math/vector_math.rst:262
msgid "and"
msgstr "и"

#: ../../docs/tutorials/math/vector_math.rst:266
msgid ""
"However, in most cases it is easiest to use the built-in method. Note that "
"the order of the two vectors does not matter:"
msgstr ""
"Также, в большинстве случаев лучше использовать встроенный метод. Обратите "
"внимание, что порядок двух векторов не имеет значения:"

#: ../../docs/tutorials/math/vector_math.rst:280
msgid ""
"The dot product is most useful when used with unit vectors, making the first "
"formula reduce to just ``cosθ``. This means we can use the dot product to "
"tell us something about the angle between two vectors:"
msgstr ""
"Скалярное произведение очень полезно в использовании с единичными векторами, "
"сокращая первую формулу до ``cosθ``. Это означает что мы можем использовать "
"скалярное произведение чтобы получить угол между двумя векторами:"

#: ../../docs/tutorials/math/vector_math.rst:286
msgid ""
"When using unit vectors, the result will always be between ``-1`` (180°) and "
"``1`` (0°)."
msgstr ""
"Когда используются единичные вектора, результат будет всегда между ``-1`` "
"(180°) и``1`` (0°)."

#: ../../docs/tutorials/math/vector_math.rst:290
msgid "Facing"
msgstr "Направление взгляда"

#: ../../docs/tutorials/math/vector_math.rst:292
msgid ""
"We can use this fact to detect whether an object is facing toward another "
"object. In the diagram below, the player ``P`` is trying to avoid the "
"zombies ``A`` and ``B``. Assuming a zombie's field of view is **180°**, can "
"they see the player?"
msgstr ""
"Мы можем использовать этот факт для обнаружения, что объект смотрит в "
"направлении другого объекта. На диаграмме ниже, игрок ``P`` пытается "
"избежать взгляда зомби ``A`` и ``B``. Могут ли зомби его увидеть если их "
"угол обзора равен **180°** ?"

#: ../../docs/tutorials/math/vector_math.rst:298
msgid ""
"The green arrows ``fA`` and ``fB`` are **unit vectors** representing the "
"zombies' facing directions and the blue semicircle represents its field of "
"view. For zombie ``A``, we find the direction vector ``AP`` pointing to the "
"player using ``P - A`` and normalize it, however, Godot has a helper method "
"to do this called ``direction_to``. If the angle between this vector and the "
"facing vector is less than 90°, then the zombie can see the player."
msgstr ""
"Зелёные стрелки ``fA`` и ``fB`` это **единичные векторы** представляющие "
"направление взгляда зомби, а синий полукруг представляет их поле обзора. Для "
"зомби ``A``, мы находим направление вектора ``AP`` указывающего на игрока с "
"помошью ``P - A`` и нормализуем его, однако, Godot имеет вспомогательный "
"метод для этого, называемый ``direction_to``. Если угол между этим вектором "
"и вектором взгляда меньше 90°, то зомби может увидеть игрока."

#: ../../docs/tutorials/math/vector_math.rst:306
msgid "In code it would look like this:"
msgstr "В коде это бы выглядело как:"

#: ../../docs/tutorials/math/vector_math.rst:324
msgid "Cross product"
msgstr "Векторное произведение"

#: ../../docs/tutorials/math/vector_math.rst:326
msgid ""
"Like the dot product, the **cross product** is an operation on two vectors. "
"However, the result of the cross product is a vector with a direction that "
"is perpendicular to both. Its magnitude depends on their relative angle. If "
"two vectors are parallel, the result of their cross product will be a null "
"vector."
msgstr ""
"Также как и скалярное произведение, **векторное произведение** это операция "
"над двумя векторами. Но в результате векторного произведения вы получаете "
"вектор с направлением перпендикулярным обоим исходным векторам. Его длина "
"зависит от их относительного угла. Если два вектора параллельны, в "
"результате вы получите нулевой вектор."

#: ../../docs/tutorials/math/vector_math.rst:335
msgid "The cross product is calculated like this:"
msgstr "Векторное произведение вычисляется так:"

#: ../../docs/tutorials/math/vector_math.rst:354
msgid "With Godot, you can use the built-in method:"
msgstr "В Godot, вы можете использовать встроенный метод:"

#: ../../docs/tutorials/math/vector_math.rst:365
msgid ""
"In the cross product, order matters. ``a.cross(b)`` does not give the same "
"result as ``b.cross(a)``. The resulting vectors point in **opposite** "
"directions."
msgstr ""
"В векторном произведении, порядок аргументов важен. ``a.cross(b)`` не даёт "
"такого же результата что и ``b.cross(a)``. Получаемые векторы имеют "
"**противоположные** направления."

#: ../../docs/tutorials/math/vector_math.rst:370
msgid "Calculating normals"
msgstr "Расчитывание нормалей"

#: ../../docs/tutorials/math/vector_math.rst:372
msgid ""
"One common use of cross products is to find the surface normal of a plane or "
"surface in 3D space. If we have the triangle ``ABC`` we can use vector "
"subtraction to find two edges ``AB`` and ``AC``. Using the cross product, "
"``AB x AC`` produces a vector perpendicular to both: the surface normal."
msgstr ""
"Одно из применений для векторного произведения - это нахождение нормалей "
"плоскости или поверхности в 3D пространстве. Если мы имеем треугольник "
"``ABC`` мы можем использовать векторное вычитание для нахождения граней "
"``AB`` и ``AC``. Используя векторное произведение, ``AB x AC`` возвращает "
"вектор перпендикулярный обоим векторам: нормаль поверхности."

#: ../../docs/tutorials/math/vector_math.rst:377
msgid "Here is a function to calculate a triangle's normal:"
msgstr "Здесь показана функция для вычисления нормали треугольника:"

#: ../../docs/tutorials/math/vector_math.rst:401
msgid "Pointing to a target"
msgstr "Направление на цель"

#: ../../docs/tutorials/math/vector_math.rst:403
msgid ""
"In the dot product section above, we saw how it could be used to find the "
"angle between two vectors. However, in 3D, this is not enough information. "
"We also need to know what axis to rotate around. We can find that by "
"calculating the cross product of the current facing direction and the target "
"direction. The resulting perpendicular vector is the axis of rotation."
msgstr ""
"В скалярном произведении выше, мы видели как оно может использоваться для "
"нахождения угла между двумя векторами. Однако для 3D этого недостаточно. Мы "
"также должны знать вокруг какой оси нужно осуществлять вращение. Мы можем "
"найти её выполняя векторное произведение текущего направления взгляда и "
"направлением цели. В результате мы получим перпендикулярный вектор оси "
"вращения."

#: ../../docs/tutorials/math/vector_math.rst:411
msgid "More information"
msgstr "Дополнительная информация"

#: ../../docs/tutorials/math/vector_math.rst:413
msgid ""
"For more information on using vector math in Godot, see the following "
"articles:"
msgstr ""
"Для большей информации об использовании векторной алгебры в Godot, смотрите "
"следующие статьи:"

#: ../../docs/tutorials/math/vector_math.rst:415
msgid ":ref:`doc_vectors_advanced`"
msgstr ":ref:`doc_vectors_advanced`"

#: ../../docs/tutorials/math/vector_math.rst:416
msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"
