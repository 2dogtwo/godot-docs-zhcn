# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-13 17:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:4
msgid "Exporting packs, patches, and mods"
msgstr "Экспортирование пакетов, патчей и модов"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:7
#, fuzzy
msgid "Use cases"
msgstr "Используйте прошедшее время:"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:9
#, fuzzy
msgid ""
"Oftentimes one would like to add functionality to one's game after it has "
"been deployed."
msgstr ""
"Часто хотелось бы добавить функциональность в свою игру после того, как она "
"была развернута."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:12
msgid "Examples of this include..."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:14
msgid ""
"Downloadable Content: the ability to add features and content to one's game."
msgstr ""
"Загружаемый контент: возможность добавлять функции и контент в свою игру."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:15
#, fuzzy
msgid "Patches: the ability to fix a bug that is present in a shipped product."
msgstr ""
"Патчи: возможность исправить ошибку, которая присутствует в отправленном "
"продукте."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:16
msgid "Mods: grant other people the ability to create content for one's game."
msgstr ""
"Моды: предоставить другим людям возможность создавать контент для своей игры."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:18
msgid ""
"These tools help developers to extend their development beyond the initial "
"release."
msgstr ""
"Эти инструменты помогают разработчикам расширить свою разработку за пределы "
"первоначального выпуска."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:22
msgid "Overview of PCK files"
msgstr "Обзор файлов PCK"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:24
msgid ""
"Godot enables this via a feature called **resource packs** (PCK files, with "
"extension ``.pck``)."
msgstr ""
"Godot позволяет это с помощью функции, называемой «пакеты ресурсов» (файлы "
"PCK, с расширением '.pck')."

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:27
msgid "**Advantages:**"
msgstr "**Преимущества:**"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:29
msgid "incremental updates/patches"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:30
msgid "offer DLCs"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:31
msgid "offer mod support"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:32
msgid "no source code disclosure needed for mods"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:33
msgid "more modular project structure"
msgstr "более модульная структура проекта"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:34
msgid "users don’t have to replace the entire game"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:36
msgid ""
"The first part of using them involves exporting and delivering the project "
"to players. Then, when one wants to add functionality or content later on, "
"they just deliver the updates via PCK files to the users."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:40
msgid "PCK files usually contain, but are not limited to:"
msgstr "Файлы PCK обычно содержат, но не ограничиваются:"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:42
#, fuzzy
msgid "scripts"
msgstr "Главный скрипт"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:43
#, fuzzy
msgid "scenes"
msgstr "Сцены"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:44
#, fuzzy
msgid "shaders"
msgstr "Типы Шейдеров"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:45
msgid "models"
msgstr "модели"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:46
#, fuzzy
msgid "textures"
msgstr "Особенности"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:47
#, fuzzy
msgid "sound effects"
msgstr "Звуковые эффекты"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:48
msgid "music"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:49
msgid "any other asset suitable for import into the game"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:51
msgid ""
"The PCK files can even be an entirely different Godot project, which the "
"original game loads in at runtime."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:55
msgid "Generating PCK files"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:57
msgid ""
"In order to pack all resources of a project into a PCK file open the project "
"and go to Project/Export and click on “Export PCK/Zip”. Also make sure to "
"have an export template selected while doing so."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:63
msgid ""
"Another method would be to :ref:`export from the command line "
"<doc_command_line_tutorial_exporting>`. If the output file ends with a PCK "
"or ZIP file extension, then the export process will build that type of file "
"for the chosen platform."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:69
msgid ""
"If one wishes to support mods for their game, they will need their users to "
"create similarly exported files. Assuming the original game expects a "
"certain structure for the PCK's resources and/or a certain interface for its "
"scripts, then either..."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:74
msgid ""
"The developer must publicize documentation of these expected structures/ "
"interfaces, expect modders to install Godot Engine, and then also expect "
"those modders to conform to the documentation's defined API when building "
"mod content for the game (so that it will work). Users would then use "
"Godot's built in exporting tools to create a PCK file, as detailed above."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:80
msgid ""
"The developer uses Godot to build a GUI tool for adding their exact API "
"content to a project. This Godot tool must either run on a tools-enabled "
"build of the engine or have access to one (distributed alongside or perhaps "
"in the original game's files). The tool can then use the Godot executable to "
"export a PCK file from the command line with :ref:`OS.execute() "
"<class_OS_method_execute>`. It makes the most sense for the game to not use "
"a tool-build though (for security) and for the modding tools to *do* use a "
"tool-enabled engine build."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:90
msgid "Opening PCK files at runtime"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:92
msgid ""
"To import a PCK file, one uses a one-liner. Keep in mind, there is no error "
"or exception if the import fails. Instead, one might have to create some "
"validation code as a layer on top. The following example expects a “mod.pck” "
"file in the directory of the games executable. The PCK file contains a "
"“mod_scene.tscn” test scene in its root."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:117
msgid ""
"If you import a file with the same file path/name as one you already have in "
"your project, the imported one will replace it. This is something to watch "
"out for when creating DLC or mods (solved easily with a tool isolating mods "
"to a specific mods subfolder). However, it is also a way of creating patches "
"for one's own game. A PCK file of this kind can fix the content of a "
"previously loaded PCK."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:124
msgid ""
"For a C# project, you need to build the DLL and place it in the project "
"directory first. Then, before loading the resource pack, you need to load "
"its DLL as follows: ``Assembly.LoadFile(\"mod.dll\")``"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:129
msgid "Summary"
msgstr "Подведение итогов"

#: ../../docs/getting_started/workflow/export/exporting_pcks.rst:131
msgid ""
"This tutorial should illustrate how easy adding mods, patches or DLC to a "
"game is. The most important thing is to identify how one plans to distribute "
"future content for their game and develop a workflow that is customized for "
"that purpose. Godot should make that process smooth regardless of which "
"route a developer pursues."
msgstr ""
