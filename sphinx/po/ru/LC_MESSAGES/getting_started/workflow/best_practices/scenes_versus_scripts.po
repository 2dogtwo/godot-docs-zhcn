# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 14:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:4
msgid "When to use scenes versus scripts"
msgstr "Когда использовать сцены по сравнению со скриптами"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:6
msgid ""
"We've already covered how scenes and scripts are different. Scripts define "
"an engine class extension with imperative code, scenes with declarative code."
msgstr ""
"Мы уже рассмотрели, чем отличаются сцены и скрипты. Скрипты определяют "
"расширение класса движка с императивным кодом, сцены - с декларативным кодом."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:10
msgid ""
"Each system's capabilities are different as a result. Scenes can define how "
"an extended class initializes, but not what its behavior actually is. Scenes "
"are often used in conjunction with a script so that the scene acts as an "
"extension of the scripts declarative code."
msgstr ""
"В результате возможности каждой системы различны. Сцены могут определять, "
"как инициализируется расширенный класс, но не его поведение на самом деле. "
"Сцены часто используются вместе со скриптами, поэтому сцена действует как "
"расширение декларативного кода скрипта."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:16
msgid "Anonymous types"
msgstr "Анонимные типы"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:18
msgid ""
"It *is* possible to completely define a scenes' contents using a script "
"alone. This is, in essence, what the Godot Editor does, only in the C++ "
"constructor of its objects."
msgstr ""
"*Возможно* полностью определить содержимое сцены, используя только скрипт. "
"Это, по сути, то, что делает редактор Godot, только в конструкторе C++ своих "
"объектов."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:22
msgid ""
"But, choosing which one to use can be a dilemma. Creating script instances "
"is identical to creating in-engine classes whereas handling scenes requires "
"a change in API:"
msgstr ""
"Но выбор того, какой из них использовать, может оказаться дилеммой. Создание "
"экземпляров скрипта идентично созданию классов в движке, тогда как обработка "
"сцен требует изменения в API:"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:59
msgid ""
"Also, scripts will operate a little slower than scenes due to the speed "
"differences between engine and script code. The larger and more complex the "
"node, the more reason there is to build it as a scene."
msgstr ""
"Кроме того, скрипты будут работать немного медленнее, чем сцены, из-за "
"разницы в скорости между движком и кодом скрипта. Чем больше и сложнее узел, "
"тем больше причин строить его как сцену."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:64
#, fuzzy
msgid "Named types"
msgstr "Типы Шейдеров"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:66
msgid ""
"In some cases, a user can register a script as a new type within the editor "
"itself. This displays it as a new type in the node or resource creation "
"dialog with an optional icon. In these cases, the user's ability to use the "
"script is much more streamlined. Rather than having to..."
msgstr ""
"В некоторых случаях пользователь может зарегистрировать скрипт как новый тип "
"в самом редакторе. Это отобразит его как новый тип в диалоговом окне "
"создания узла или ресурса с дополнительным значком. В этих случаях "
"возможности пользователя по использованию сценария значительно упрощаются. "
"Вместо того, чтобы..."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:71
msgid "Know the base type of the script they would like to use."
msgstr "Знать базовый тип скрипта, который они хотели бы использовать."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:73
msgid "Create an instance of that base type."
msgstr "Создайте экземпляр этого базового типа."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:75
msgid "Add the script to the node."
msgstr "Добавьте скрипт в узел."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:77
msgid "(Drag-n-drop method)"
msgstr "(Метод Drag-n-drop)"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:79
#, fuzzy
msgid "Find the script in the FileSystem dock."
msgstr "Выполняет скрипт в редакторе."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:81
#, fuzzy
msgid "Drag and drop the script onto the node in the Scene dock."
msgstr ""
"Написание сценария, который может получать доступ к другим узлам в сцене."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:83
msgid "(Property method)"
msgstr "(Метод свойства)"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:85
msgid ""
"Scroll down to the bottom of the Inspector to find the ``script`` property "
"and select it."
msgstr ""
"Прокрутите вниз до нижней части инспектора, найдите свойство ``script`` и "
"выберите его."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:87
msgid "Select \"Load\" from the dropdown."
msgstr "В раскрывающемся списке выберите \"Load\" (Загрузить)."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:89
#, fuzzy
msgid "Select the script from the file dialog."
msgstr "Выполняет скрипт в редакторе."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:91
msgid ""
"With a registered script, the scripted type instead becomes a creation "
"option like the other nodes and resources in the system. One need not do any "
"of the above work. The creation dialog even has a search bar to look up the "
"type by name."
msgstr ""
"При наличии зарегистрированного скрипта, тип сценария вместо этого "
"становится вариантом создания, как и другие узлы и ресурсы в системе. Ничего "
"из вышеперечисленного делать не нужно. В диалоговом окне создания даже есть "
"строка поиска для поиска типа по имени."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:96
msgid "There are two systems for registering types..."
msgstr "Существует две системы регистрации типов..."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:98
#, fuzzy
msgid ":ref:`Custom Types <doc_making_plugins>`"
msgstr ":ref:`Легко написать Шейдеры <doc_shading_language>`"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:100
msgid "Editor-only. Typenames are not accessible at runtime."
msgstr ""
"Editor-only (Только редактор). Имена типов недоступны во время выполнения."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:102
msgid "Does not support inherited custom types."
msgstr "Не поддерживает унаследованные пользовательские типы."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:104
msgid "An initializer tool. Creates the node with the script. Nothing more."
msgstr "Инструмент инициализации. Создает узел со скриптом. Ничего более."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:106
msgid ""
"Editor has no type-awareness of the script or its relationship to other "
"engine types or scripts."
msgstr ""
"Редактор не имеет никакого представления о типе скрипта или его связи с "
"другими типами движков или скриптов."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:109
#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:127
msgid "Allows users to define an icon."
msgstr "Позволяет пользователям определять значок."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:111
msgid ""
"Works for all scripting languages because it deals with Script resources in "
"abstract."
msgstr ""
"Работает для всех скриптовых языков, потому что работает со скриптовыми "
"ресурсами абстрактно."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:113
msgid ""
"Set up using :ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>`."
msgstr ""
"Настройка с помощью :ref:`EditorPlugin.add_custom_type "
"<class_EditorPlugin_method_add_custom_type>`."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:115
msgid ":ref:`Script Classes <doc_scripting_continued_class_name>`"
msgstr ":ref:`Классы скриптов <doc_scripting_continued_class_name>`"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:117
msgid "Editor and runtime accessible."
msgstr "Доступны редактор и среда выполнения."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:119
#, fuzzy
msgid "Displays inheritance relationships in full."
msgstr "Множественное наследование невозможно."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:121
msgid ""
"Creates the node with the script, but can also change types or extend the "
"type from the editor."
msgstr ""
"Создаёт узел со скриптом, но также может изменять типы или расширять тип из "
"редактора."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:124
msgid ""
"Editor is aware of inheritance relationships between scripts, script "
"classes, and engine C++ classes."
msgstr ""
"Редактор знает об отношениях наследования между скриптами, классами скриптов "
"и классами C++ движка."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:129
msgid ""
"Engine developers must add support for languages manually (both name "
"exposure and runtime accessibility)."
msgstr ""
"Разработчики движка должны добавлять поддержку языков вручную (как для "
"отображения имени, так и для доступности во время выполнения)."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:132
msgid "Godot 3.1+ only."
msgstr "Только Godot версии 3.1 и выше."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:134
msgid ""
"The Editor scans project folders and registers any exposed names for all "
"scripting languages. Each scripting language must implement its own support "
"for exposing this information."
msgstr ""
"Редактор сканирует папки проекта и регистрирует любые открытые имена для "
"всех языков скриптов. Каждый язык скриптов должен реализовывать свою "
"собственную поддержку для раскрытия этой информации."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:138
msgid ""
"Both methodologies add names to the creation dialog, but script classes, in "
"particular, also allow for users to access the typename without loading the "
"script resource. Creating instances and accessing constants or static "
"methods is viable from anywhere."
msgstr ""
"Обе методологии добавляют имена в диалог создания, но классы скриптов, в "
"частности, также позволяют пользователям получить доступ к названию типа без "
"загрузки ресурса скрипта. Создание экземпляров и доступ к константам или "
"статическим методам является жизнеспособным из любого места."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:143
msgid ""
"With features like these, one may wish their type to be a script without a "
"scene due to the ease of use it grants users. Those developing plugins or "
"creating in-house tools for designers to use will find an easier time of "
"things this way."
msgstr ""
"С такими функциями можно пожелать, чтобы их тип был скриптом без сцены из-за "
"простоты использования, которую он предоставляет пользователям. Тем, кто "
"разрабатывает плагины или создает собственные инструменты для дизайнеров, "
"таким образом будет легче."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:148
msgid ""
"On the downside, it also means having to use largely imperative programming."
msgstr ""
"С другой стороны, это также означает необходимость использования в "
"значительной степени императивного программирования."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:151
msgid "Performance of Script vs PackedScene"
msgstr "Производительность сценариев и PackedScene"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:153
msgid ""
"One last aspect to consider when choosing scenes and scripts is execution "
"speed."
msgstr ""
"Последний аспект, который следует учитывать при выборе сцен и скриптов, - "
"это скорость выполнения."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:155
msgid ""
"As the size of objects increases, the scripts' necessary size to create and "
"initialize them grows much larger. Creating node hierarchies demonstrates "
"this. Each Node's logic could be several hundred lines of code in length."
msgstr ""
"По мере увеличения размера объектов необходимый размер скриптов для их "
"создания становится намного больше. Создание иерархии узлов демонстрирует "
"это. Логика каждого отдельного узла может состоять из нескольких сотен строк "
"кода."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:159
msgid ""
"The code example below creates a new ``Node``, changes its name, assigns a "
"script to it, sets its future parent as its owner so it gets saved to disk "
"along with it, and finally adds it as a child of the ``Main`` node:"
msgstr ""
"Приведенный ниже код создаёт новый узел ``Node``, меняет его имя, назначает "
"ему сценарий, устанавливает его будущего родителя в качестве его владельца, "
"чтобы он сохранялся на диске вместе с ним, и, наконец, добавляет его в "
"качестве дочернего элемента главного узла ``Main``:"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:195
msgid ""
"Script code like this is much slower than engine-side C++ code. Each "
"instruction makes a call to the scripting API which leads to many \"lookups"
"\" on the back-end to find the logic to execute."
msgstr ""
"Такой код сценария намного медленнее, чем код C++ на стороне движка. Каждое "
"изменение вызывает отдельный вызов API сценариев, что приводит к множеству "
"\"поисков\" в серверной части, чтобы найти логику для выполнения."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:199
msgid ""
"Scenes help to avoid this performance issue. :ref:`PackedScene "
"<class_PackedScene>`, the base type that scenes inherit from, defines "
"resources that use serialized data to create objects. The engine can process "
"scenes in batches on the back-end and provide much better performance than "
"scripts."
msgstr ""
"Сцены помогают избежать этой проблемы с производительностью. :ref:"
"`PackedScene <class_PackedScene>`, базовый тип, от которого наследуются "
"сцены, - это ресурсы, использующие сериализованные данные для создания "
"объектов. Движок может обрабатывать сцены в пакетном режиме на сервере и "
"обеспечивать гораздо лучшую производительность, чем скрипты."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:205
msgid "Conclusion"
msgstr "Вывод"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:207
msgid "In the end, the best approach is to consider the following:"
msgstr ""
"В конце концов, лучший подход заключается в том, чтобы рассмотреть следующее:"

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:209
msgid ""
"If one wishes to create a basic tool that is going to be re-used in several "
"different projects and which people of all skill levels will likely use "
"(including those who don't label themselves as \"programmers\"), then "
"chances are that it should probably be a script, likely one with a custom "
"name/icon."
msgstr ""
"Если кто-то хочет создать базовый инструмент, который будет повторно "
"использоваться в нескольких различных проектах, и который, скорее всего, "
"будут использовать люди всех уровней квалификации (включая тех, кто не "
"называет себя \"программистами\"), то, скорее всего, это должен быть скрипт, "
"скорее всего, с пользовательским именем/значком."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:214
msgid ""
"If one wishes to create a concept that is particular to their game, then it "
"should always be a scene. Scenes are easier to track/edit and provide more "
"security than scripts."
msgstr ""
"Если кто-то хочет создать концепцию, характерную для его игры, то это всегда "
"должна быть сцена. Сцены легче отслеживать/редактировать и обеспечивают "
"большую безопасность, чем скрипты."

#: ../../docs/getting_started/workflow/best_practices/scenes_versus_scripts.rst:218
msgid ""
"If one would like to give a name to a scene, then they can still sort of do "
"this in 3.1 by declaring a script class and giving it a scene as a constant. "
"The script becomes, in effect, a namespace:"
msgstr ""
"Если кто-то хочет дать сцене имя, то он все равно может сделать это в 3.1, "
"объявив класс скрипта и дав ему сцену в качестве константы. Скрипт "
"становится, по сути, пространством имён:"
