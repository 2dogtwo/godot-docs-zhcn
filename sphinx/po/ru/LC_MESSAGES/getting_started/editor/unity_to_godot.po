# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-20 10:29+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/editor/unity_to_godot.rst:8
msgid "From Unity to Godot Engine"
msgstr "Из Unity в Godot"

#: ../../docs/getting_started/editor/unity_to_godot.rst:10
msgid ""
"This guide provides an overview of Godot Engine from the viewpoint of a "
"Unity user, and aims to help you migrate your existing Unity experience into "
"the world of Godot."
msgstr ""
"Данное руководство содержит обзор движка Godot Engine с точки зрения "
"пользователя Unity и направлено на то, чтобы помочь вам перенести ваш "
"существующий опыт Unity в мир Godot."

#: ../../docs/getting_started/editor/unity_to_godot.rst:14
msgid "Differences"
msgstr "Различия"

#: ../../docs/getting_started/editor/unity_to_godot.rst:17
msgid "Unity"
msgstr "Unity"

#: ../../docs/getting_started/editor/unity_to_godot.rst:17
msgid "Godot"
msgstr "Godot"

#: ../../docs/getting_started/editor/unity_to_godot.rst:19
msgid "License"
msgstr "Лицензия"

#: ../../docs/getting_started/editor/unity_to_godot.rst:19
msgid ""
"Proprietary, closed, free license with revenue caps and usage restrictions"
msgstr ""
"Собственная, закрытая, бесплатная лицензия с лимитом доходов и ограничениями "
"на использование"

#: ../../docs/getting_started/editor/unity_to_godot.rst:19
msgid "MIT license, free and fully open source without any restriction"
msgstr ""
"Лицензия MIT, свободная и с полным открытым исходным кодом без каких-либо "
"ограничений"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "OS (editor)"
msgstr "ОС (редактор)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "Windows, macOS, Linux (unofficial and unsupported)"
msgstr "Windows, MacOS, Linux (неофициальные и неподдерживаемые)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:21
msgid "Windows, macOS, X11 (Linux, \\*BSD)"
msgstr "Windows, macOS, X11 (Linux, \\*BSD)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "OS (export)"
msgstr "ОС (экспорт)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "**Desktop:** Windows, macOS, Linux"
msgstr "**ПК:** Windows, MacOS, Linux"

#: ../../docs/getting_started/editor/unity_to_godot.rst:24
msgid "**Mobile:** Android, iOS, Windows Phone, Tizen"
msgstr "**Мобильный:** Android, iOS, Windows Phone, Tizen"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "**Web:** WebAssembly or asm.js"
msgstr "**Веб:** WebAssembly или asm.js"

#: ../../docs/getting_started/editor/unity_to_godot.rst:26
msgid "**Consoles:** PS4, PS Vita, Xbox One, Xbox 360, Wii U, Nintendo 3DS"
msgstr "*Консоли:** PS4, PS Vita, Xbox One, Xbox 360, Wii U, Nintendo 3DS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
#, fuzzy
msgid ""
"**VR:** Oculus Rift, SteamVR, Google Cardboard, Playstation VR, Gear VR, "
"HoloLens"
msgstr ""
"**VR:** Oculus Rift, SteamVR, Google Cardboard, Playstation VR, Gear VR, "
"HoloLens"

#: ../../docs/getting_started/editor/unity_to_godot.rst:28
msgid "**TV:** Android TV, Samsung SMART TV, tvOS"
msgstr "**ТВ:** Android TV, Samsung SMART TV, tvOS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:23
msgid "**Desktop:** Windows, macOS, X11"
msgstr "**ПК:** Windows, MacOS, X11"

#: ../../docs/getting_started/editor/unity_to_godot.rst:24
msgid "**Mobile:** Android, iOS"
msgstr "**Мобильный:** Android, iOS"

#: ../../docs/getting_started/editor/unity_to_godot.rst:25
msgid "**Web:** WebAssembly"
msgstr "**Веб:** WebAssembly"

#: ../../docs/getting_started/editor/unity_to_godot.rst:26
msgid "**Console:** See :ref:`doc_consoles`"
msgstr "*Консоли* См. :ref:`doc_consoles`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:27
#, fuzzy
msgid "**VR:** Oculus Rift, SteamVR"
msgstr "**VR:** Oculus Rift, SteamVR"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid "Scene system"
msgstr "Система сцен"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
#, fuzzy
msgid "Component/Scene (GameObject > Component)"
msgstr "Компонент/Сцена (GameObject > Component)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:31
msgid "Prefabs"
msgstr "Префабы"

#: ../../docs/getting_started/editor/unity_to_godot.rst:30
msgid ""
":ref:`Scene tree and nodes <doc_scenes_and_nodes>`, allowing scenes to be "
"nested and/or inherit other scenes"
msgstr ""
":ref:`Древо сцен и узлы <doc_scenes_and_nodes>`, позволяющие сценам быть "
"вложенными и/или наследовать другие сцены"

#: ../../docs/getting_started/editor/unity_to_godot.rst:33
msgid "Third-party tools"
msgstr "Сторонние инструменты"

#: ../../docs/getting_started/editor/unity_to_godot.rst:33
msgid "Visual Studio or VS Code"
msgstr "Visual Studio или VS Code"

#: ../../docs/getting_started/editor/unity_to_godot.rst:33
msgid ":ref:`External editors are possible <doc_external_editor>`"
msgstr ":ref:`Можно использовать внешние редакторы <doc_external_editor>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:34
msgid ":ref:`Android SDK for Android export <doc_exporting_for_android>`"
msgstr ""
":ref:`Android SDK для экспорта под Android <doc_exporting_for_android>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:36
#, fuzzy
msgid "Killer features"
msgstr "Важные особенности"

#: ../../docs/getting_started/editor/unity_to_godot.rst:36
msgid "Huge community"
msgstr "Огромное сообщество"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
msgid "Large assets store"
msgstr "Большой магазин ассетов"

#: ../../docs/getting_started/editor/unity_to_godot.rst:36
msgid "Scene System"
msgstr "Система Сцен"

#: ../../docs/getting_started/editor/unity_to_godot.rst:37
#, fuzzy
msgid ":ref:`Animation Pipeline <doc_animations>`"
msgstr ":ref:`Анимационный Пайплайн <doc_animations>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:38
msgid ":ref:`Easy to write Shaders <doc_shading_language>`"
msgstr ":ref:`Легко написать Шейдеры <doc_shading_language>`"

#: ../../docs/getting_started/editor/unity_to_godot.rst:39
msgid "Debug on Device"
msgstr "Отладка на устройстве"

#: ../../docs/getting_started/editor/unity_to_godot.rst:46
msgid "The editor"
msgstr "Редактор"

#: ../../docs/getting_started/editor/unity_to_godot.rst:48
msgid ""
"Godot Engine provides a rich-featured editor that allows you to build your "
"games. The pictures below display both editors with colored blocks to "
"indicate common functionalities."
msgstr ""
"Godot Engine предоставляет многофункциональный редактор, который позволяет "
"вам создавать игры. На рисунках ниже показаны оба редактора с цветными "
"блоками для обозначения общих функций."

#: ../../docs/getting_started/editor/unity_to_godot.rst:55
msgid ""
"Note that Godot editor allows you to dock each panel at the side of the "
"scene editor you wish."
msgstr ""
"Обратите внимание, что редактор Godot позволяет вам закрепить любую панель к "
"нужной стороне редактора."

#: ../../docs/getting_started/editor/unity_to_godot.rst:57
msgid ""
"While both editors may seem similar, there are many differences below the "
"surface. Both let you organize the project using the filesystem, but Godot's "
"approach is simpler with a single configuration file, minimalist text "
"format, and no metadata. All this contributes to Godot being much friendlier "
"to VCS systems, such as Git, Subversion, or Mercurial."
msgstr ""
"Хотя оба редактора могут показаться похожими на первый взгляд, но существует "
"много различий. Оба варианта позволяют организовать проект с использованием "
"файловой системы, но подход Godot проще: один конфигурационный файл, "
"минималистский текстовый формат и отсутствие метаданных. Все это "
"способствует тому, что Godot гораздо дружелюбнее относится к системам VCS, "
"таким как Git, Subversion или Mercurial."

#: ../../docs/getting_started/editor/unity_to_godot.rst:62
msgid ""
"Godot's Scene panel is similar to Unity's Hierarchy panel but, as each node "
"has a specific function, the approach used by Godot is more visually "
"descriptive. In other words, it's easier to understand what a specific scene "
"does at a glance."
msgstr ""
"Панель \"Сцена\" Godot аналогична панели \"Иерархия\" в Unity, но, поскольку "
"каждый узел имеет свою специфическую функцию, подход, используемый Godot , "
"более наглядно описывает его. Другими словами, легче понять, что делает та "
"или иная сцена с первого взгляда."

#: ../../docs/getting_started/editor/unity_to_godot.rst:66
msgid ""
"The Inspector in Godot is more minimalist and designed to only show "
"properties. Thanks to this, objects can export a much larger amount of "
"useful parameters to the user without having to hide functionality in "
"language APIs. As a plus, Godot allows animating any of those properties "
"visually, so changing colors, textures, enumerations, or even links to "
"resources in real-time is possible without involving code."
msgstr ""
"Инспектор в Godot более минималистский и спроектирован так, чтобы показывать "
"только свойства. Благодаря этому объекты могут экспортировать пользователю "
"гораздо большее количество полезных параметров без необходимости скрывать "
"функциональность в языковых API. К тому же, Godot позволяет визуально "
"анимировать любое из этих свойств, поэтому изменение цвета, текстур, "
"перечислений и даже ссылок на ресурсы в режиме реального времени возможно "
"без использования кода."

#: ../../docs/getting_started/editor/unity_to_godot.rst:71
msgid ""
"Finally, the Toolbar at the top of the screen is similar in the sense that "
"it allows controlling the project playback, but projects in Godot run in a "
"separate window, as they don't execute inside the editor (but the tree and "
"objects can still be explored in the debugger window)."
msgstr ""
"Наконец, панель инструментов в верхней части экрана похожа лишь тем, что "
"позволяет управлять запуском проекта, но проекты в Godot запускаются в "
"отдельном окне, они не выполняются внутри редактора (но дерево и объекты все "
"еще могут быть исследованы в окне отладчика)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:75
#, fuzzy
msgid ""
"This approach has the disadvantage that the running game can't be explored "
"from different angles (though this may be supported in the future and "
"displaying collision gizmos in the running game is already possible), but in "
"exchange has several advantages:"
msgstr ""
"Недостатком такого подхода является то, что запущенную игру нельзя "
"исследовать с разных ракурсов (хотя это может быть поддержано в будущем, а "
"уже возможно отображение столкновений предметов в запущенной игре), но в "
"обмен это имеет ряд преимуществ:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:79
msgid ""
"Running the project and closing it is fast (Unity has to save, run the "
"project, close the project, and then reload the previous state)."
msgstr ""
"Запуск и закрытие проекта происходит быстро (Unity же сохраняет, запускает "
"проект, закрывает его, а затем перезагружает предыдущее состояние проекта)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:80
msgid ""
"Live editing is a lot more useful because changes done to the editor take "
"effect immediately in the game and are not lost (nor have to be synced) when "
"the game is closed. This allows fantastic workflows, like creating levels "
"while you play them."
msgstr ""
"Редактирование в реальном времени гораздо более полезно, поскольку "
"изменения, внесенные в редактор, вступают в силу немедленно в самой игре и "
"не сбрасываются (и не требуют синхронизации), после закрытия. Это позволяет "
"создавать невероятные вещи, такие как создание уровней во время игры."

#: ../../docs/getting_started/editor/unity_to_godot.rst:81
msgid "The editor is more stable because the game runs in a separate process."
msgstr ""
"Редактор более стабилен, потому что игра запущена в отдельном процессе."

#: ../../docs/getting_started/editor/unity_to_godot.rst:83
msgid ""
"Finally, the top toolbar includes a menu for remote debugging. These options "
"make it simple to deploy to a device (connected phone, tablet, or browser "
"via HTML5), and debug/live edit on it after the game was exported."
msgstr ""
"Наконец, верхняя панель инструментов содержит меню для удаленной отладки. "
"Эти опции упрощают развертывание на устройстве (подключенном телефоне, "
"планшете или браузере через HTML5), а также отладку/редактирование в "
"реальном времени после экспорта игры."

#: ../../docs/getting_started/editor/unity_to_godot.rst:88
msgid "The scene system"
msgstr "Система сцен"

#: ../../docs/getting_started/editor/unity_to_godot.rst:90
msgid ""
"This is the most important difference between Unity and Godot and, actually, "
"the favourite feature of most Godot users."
msgstr ""
"Это самое важное различие между Unity и Godot и, на пожалуй самая любимая "
"особенность для большинства пользователей Godot."

#: ../../docs/getting_started/editor/unity_to_godot.rst:92
msgid ""
"Unity's scene system consists of embedding all the required assets in a "
"scene and linking them together by setting components and scripts to them."
msgstr ""
"Система сцен Unity состоит из встраивания всех необходимых ресурсов в сцену "
"и связывания их вместе путем установки компонентов и скриптов."

#: ../../docs/getting_started/editor/unity_to_godot.rst:95
msgid ""
"Godot's scene system is different: it actually consists of a tree made of "
"nodes. Each node serves a purpose: Sprite, Mesh, Light, etc. Basically, this "
"is similar to the Unity scene system. However, each node can have multiple "
"children, which makes each a subscene of the main scene. This means you can "
"compose a whole scene with different scenes stored in different files."
msgstr ""
"Система сцен Godot отличается тем, что на самом деле состоит из древа сцен, "
"состоящего из узлов. Каждый узел имеет свое назначение: Спрайт, Сетка, Свет "
"и т.д. По сути, это похоже на сценическую систему Unity. Однако каждый узел "
"может иметь несколько дочерних узлов, что делает каждый из них наследником "
"главной сцены. Это означает, что вы можете составить целую сцену с разными "
"сценами, сохраненными в разных файлах."

#: ../../docs/getting_started/editor/unity_to_godot.rst:100
msgid ""
"For example, think of a platformer level. You would compose it with multiple "
"elements:"
msgstr ""
"Например, подумайте об уровне в каком-нибудь платформере. Вы бы составили "
"его такими элементами:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:102
msgid "Bricks"
msgstr "Кирпичи"

#: ../../docs/getting_started/editor/unity_to_godot.rst:103
msgid "Coins"
msgstr "Монеты"

#: ../../docs/getting_started/editor/unity_to_godot.rst:104
msgid "The player"
msgstr "Игрок"

#: ../../docs/getting_started/editor/unity_to_godot.rst:105
msgid "The enemies"
msgstr "Враги"

#: ../../docs/getting_started/editor/unity_to_godot.rst:108
msgid ""
"In Unity, you would put all the GameObjects in the scene: the player, "
"multiple instances of enemies, bricks everywhere to form the ground of the "
"level and then multiple instances of coins all over the level. You would "
"then add various components to each element to link them and add logic in "
"the level: For example, you'd add a BoxCollider2D to all the elements of the "
"scene so that they can collide. This principle is different in Godot."
msgstr ""
"В Unity вы бы поставили на сцену все GameObjects (Игровые Объекты): игрока, "
"несколько экземпляров врагов, кирпичи повсюду, чтобы сформировать основу "
"уровня, а затем несколько экземпляров монет по всему уровню. Затем вы "
"добавляете различные компоненты к каждому элементу, чтобы связать их и "
"логику на уровне: Например, вы бы добавили BoxCollider2D ко всем элементам "
"сцены, для столкновений. Этот принцип отличается в Godot."

#: ../../docs/getting_started/editor/unity_to_godot.rst:113
msgid ""
"In Godot, you would split your whole scene into 3 separate, smaller scenes, "
"which you would then instance in the main scene."
msgstr ""
"В Godot вы бы разделили всю сцену на 3 отдельные, небольшие сцены, которые "
"затем были бы приведены в качестве экземпляра в основной сцене."

#: ../../docs/getting_started/editor/unity_to_godot.rst:115
msgid "**First, a scene for the Player alone.**"
msgstr "**Сначала сцена для Игрока.**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:117
msgid ""
"Consider the player as a reusable element in other levels. It is composed of "
"one node in particular: an AnimatedSprite node, which contains the sprite "
"textures to form various animations (for example, walking animation)"
msgstr ""
"Рассматривайте игрока как многоразовый элемент на других уровнях. Он "
"состоит, в частности, из одного узла: узла AnimatedSprite, который содержит "
"текстуры спрайта для формирования различных анимаций (например, анимация "
"ходьбы)"

#: ../../docs/getting_started/editor/unity_to_godot.rst:120
msgid "**Second, a scene for the Enemy.**"
msgstr "*Вторая сцена для Врага.*"

#: ../../docs/getting_started/editor/unity_to_godot.rst:122
msgid ""
"There again, an enemy is a reusable element in other levels. It is almost "
"the same as the Player node - the only differences are the script (that "
"manages AI, mostly) and sprite textures used by the AnimatedSprite."
msgstr ""
"Опять же, враг является многоразовым элементом на других уровнях. Это почти "
"то же самое, что и с узлом Player - единственное отличие заключается в "
"скрипте (который, в основном, управляет ИИ) и текстурах, используемых "
"AnimatedSprite."

#: ../../docs/getting_started/editor/unity_to_godot.rst:126
msgid "**Lastly, the Level scene.**"
msgstr "**Последняя это сцена самого уровня.**"

#: ../../docs/getting_started/editor/unity_to_godot.rst:128
msgid ""
"It is composed of Bricks (for platforms), Coins (for the player to grab) and "
"a certain number of instances of the previous Enemy scene. These will be "
"different, separate enemies, whose behaviour and appearance will be the same "
"as defined in the Enemy scene. Each instance is then considered as a node in "
"the Level scene tree. Of course, you can set different properties for each "
"Enemy node (to change its color, for example)."
msgstr ""
"Она состоит из кирпичей (для платформ), монет (которые должен ловить игрок) "
"и определенного количества экземпляров сцены врага. Это будут разные, "
"отдельные враги, чье поведение и внешний вид будут такими же, как определено "
"на сцене врага. Каждый экземпляр затем рассматривается как узел в дереве "
"сцены уровня. Конечно, вы можете установить различные свойства для каждого "
"узла с Врагом (например, изменить его цвет)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:134
msgid ""
"Finally, the main scene would then be composed of one root node with 2 "
"children: a Player instance node, and a Level instance node. The root node "
"can be anything, generally a \"root\" type such as \"Node\" which is the "
"most global type, or \"Node2D\" (root type of all 2D-related nodes), "
"\"Spatial\" (root type of all 3D-related nodes) or \"Control\" (root type of "
"all GUI-related nodes)."
msgstr ""
"Наконец, основная сцена будет состоять из одного корневого узла с 2 "
"дочерними: экземпляр узла Игрок и узла Уровень. Корневым узлом может быть "
"что угодно, обычно \"корневой\" тип, например, \"самый глобальный тип узла\" "
"или \"Node2D\" (корневой тип всех 2D-узлов), \"Spatial\" (корневой тип всех "
"3D-узлов) или \"Control\" (корневой тип всех GUI-узлов)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:140
msgid ""
"As you can see, every scene is organized as a tree. The same goes for nodes' "
"properties: you don't *add* a collision component to a node to make it "
"collidable like Unity does. Instead, you make this node a *child* of a new "
"specific node that has collision properties. Godot features various "
"collision types nodes, depending on the usage (see the :ref:`Physics "
"introduction <doc_physics_introduction>`)."
msgstr ""
"Как видите, каждая сцена организована в виде дерева. То же самое можно "
"сказать и о свойствах самих узлов: вы не добавляете к узлу *коллизию*, чтобы "
"дать ему возможность сталкиваться, как это делает Unity. Вместо этого, вы "
"делаете этот узел *ребенком* нового узла, который имеет свойство "
"столкновения. Godot имеет различные типы узлов столкновений, в зависимости "
"от использования (см. :ref:`Введение в физику <doc_physics_introduction>`)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:145
msgid ""
"Question: What are the advantages of this system? Wouldn't this system "
"potentially increase the depth of the scene tree? Besides, Unity allows "
"organizing GameObjects by putting them in empty GameObjects."
msgstr ""
"Вопрос: Каковы преимущества этой системы? Разве эта система не увеличит "
"сложность древа сцены? Кроме того, Unity позволяет организовывать "
"GameObjects, помещая их в пустые GameObjects."

#: ../../docs/getting_started/editor/unity_to_godot.rst:147
msgid ""
"First, this system is closer to the well-known object-oriented paradigm: "
"Godot provides a number of nodes which are not clearly \"Game Objects\", but "
"they provide their children with their own capabilities: this is inheritance."
msgstr ""
"Во-первых, эта система ближе к известной объектно-ориентированной парадигме: "
"Godot предоставляет ряд узлов, которые не являются однозначно \"игровыми "
"объектами\", но они предоставляют своим детям собственные возможности: это "
"наследование."

#: ../../docs/getting_started/editor/unity_to_godot.rst:148
msgid ""
"Second, it allows the extraction of a subtree of the scene to make it a "
"scene of its own, which answers the second and third questions: even if a "
"scene tree gets too deep, it can be split into smaller subtrees. This also "
"allows a better solution for reusability, as you can include any subtree as "
"a child of any node. Putting multiple nodes in an empty GameObject in Unity "
"does not provide the same possibility, apart from a visual organization."
msgstr ""
"Во-вторых, выделение поддерева сцены позволяет сделать из него собственную "
"сцену, что отвечает на второй и третий вопросы: даже если древо сцены "
"становится слишком глубоким, его можно разделить на более мелкие. Это также "
"позволяет найти лучшее решение для многократного использования, поскольку вы "
"можете включить любое поддерево в качестве дочернего узла любого другого "
"узла. Размещение нескольких узлов в пустом GameObject в Unity не дает "
"одинаковых возможностей, за исключением визуальной организации."

#: ../../docs/getting_started/editor/unity_to_godot.rst:151
msgid ""
"These are the most important concepts you need to remember: \"node\", "
"\"parent node\", and \"child node\"."
msgstr ""
"Это наиболее важные понятия, которые вы должны запомнить: \"узел\", "
"\"родительский узел\" и \"дочерний узел\"."

#: ../../docs/getting_started/editor/unity_to_godot.rst:155
msgid "Project organization"
msgstr "Организация проекта"

#: ../../docs/getting_started/editor/unity_to_godot.rst:159
msgid ""
"We previously observed that there is no perfect solution to set a project "
"architecture. Any solution will work for Unity and Godot, so this point has "
"a lesser importance."
msgstr ""
"Ранее мы уже отмечали, что не существует идеального решения для создания "
"структуры проекта. Любое решение будет работать на Unity и Godot, поэтому "
"этот момент не имеет большого значения."

#: ../../docs/getting_started/editor/unity_to_godot.rst:162
msgid ""
"However, we often observe a common architecture for Unity projects, which "
"consists of having one Assets folder in the root directory that contains "
"various folders, one per type of asset: Audio, Graphics, Models, Materials, "
"Scripts, Scenes, etc."
msgstr ""
"Однако мы часто наблюдаем общую архитектуру для проектов Unity, состоящая из "
"одной папки Assets в корневом каталоге, которая содержит различные папки, по "
"одной на каждый тип ресурса: аудио, графика, модели, материалы, скрипты, "
"сцены и т. д."

#: ../../docs/getting_started/editor/unity_to_godot.rst:165
msgid ""
"As described before, the Godot scene system allows splitting scenes into "
"smaller scenes. Since each scene and subscene is actually one scene file in "
"the project, we recommend organizing your project a bit differently. This "
"wiki provides a page for this: :ref:`doc_project_organization`."
msgstr ""
"Как было сказано ранее, система сцен Godot позволяет разбивать сцены на "
"сцены поменьше. Поскольку каждая сцена и под-сцена в действительности "
"представляют собой один файл сцены в проекте, мы рекомендуем организовать "
"ваш проект немного по-другому. Вот страница вики: :ref:"
"`doc_project_organization`."

#: ../../docs/getting_started/editor/unity_to_godot.rst:171
msgid "Where are my prefabs?"
msgstr "Где мои префабы?"

#: ../../docs/getting_started/editor/unity_to_godot.rst:173
msgid ""
"The concept of prefabs as provided by Unity is a 'template' element of the "
"scene. It is reusable, and each instance of the prefab that exists in the "
"scene has an existence of its own, but all of them have the same properties "
"as defined by the prefab."
msgstr ""
"Концепция префабов, предложенная Unity, является \"шаблонным\" элементом "
"сцены. Он многоразовый, и каждый экземпляр префаба, который существует в "
"сцене, имеет свои особенности, но все они имеют те же самые свойства, что "
"определены префабом."

#: ../../docs/getting_started/editor/unity_to_godot.rst:177
msgid ""
"Godot does not provide prefabs as such, but this functionality is here, "
"again, filled thanks to its scene system: As we saw, the scene system is "
"organized as a tree. Godot allows you to save a subtree of a scene as its "
"own scene, thus saved into its own file. This new scene can then be "
"instanced as many times as you want. Any change you make to this new, "
"separate scene will be applied to its instances. However, any change you "
"make to the instance will not have any impact on the 'template' scene."
msgstr ""
"Godot не предоставляет префабов как таковых, но их функциональность может "
"быть заменена благодаря системе сцен: Как мы видели, система сцен "
"организована как дерево. Godot позволяет сохранить поддерево сцены в "
"качестве собственной сцены и сохранить его в отдельный файл. Эта новая сцена "
"может повторяться столько раз, сколько вы захотите. Любые изменения, "
"внесенные в эту новую, отдельную сцену, будут применены к ее экземплярам. "
"Однако любые изменения, которые вы внесете в экземпляр, не будут иметь "
"никакого влияния на шаблон этой сцены."

#: ../../docs/getting_started/editor/unity_to_godot.rst:185
msgid ""
"To be precise, you can modify the parameters of the instance in the "
"Inspector panel. However, the nodes that compose this instance are locked "
"although you can unlock them if you need to by right-clicking the instance "
"in the Scene tree and selecting \"Editable children\" in the menu. You don't "
"need to do this to add new children nodes to this node, but it is possible. "
"Remember that these new children will belong to the instance, not the "
"'template' scene. If you want to add new children to all the instances of "
"your 'template' scene, then you need to add them in the 'template' scene."
msgstr ""
"Если быть точным, вы можете изменить параметры экземпляра в Инспекторе. "
"Однако узлы, составляющие этот экземпляр, заблокированы, хотя вы можете "
"разблокировать их, если вам нужно, щелкнув правой кнопкой мыши на экземпляре "
"в дереве сцены и выбрав \"Editable children\" в меню. Вам не нужно делать "
"этого, чтобы добавлять новые дочерние узлы в этот узел, но это возможно. "
"Помните, что эти новые дети будут принадлежать экземпляру, а не \"шаблонной"
"\" сцене. Если вы хотите добавить новых детей во все экземпляры вашей сцены "
"'шаблона', то вам нужно добавить их в сцену 'шаблона'."

#: ../../docs/getting_started/editor/unity_to_godot.rst:195
#, fuzzy
msgid "Glossary correspondence"
msgstr "Перепись глоссария"

#: ../../docs/getting_started/editor/unity_to_godot.rst:197
msgid "GameObject -> Node"
msgstr "GameObject -> Node"

#: ../../docs/getting_started/editor/unity_to_godot.rst:198
msgid "Add a component -> Inheriting"
msgstr "Добавление компонента -> Наследование"

#: ../../docs/getting_started/editor/unity_to_godot.rst:199
msgid "Prefab -> Externalized branch"
msgstr "Prefab -> Внешняя ветвь"

#: ../../docs/getting_started/editor/unity_to_godot.rst:203
msgid "Scripting: GDScript, C# and Visual Script"
msgstr "Скриптинг: GDScript, C# и Visual Script"

#: ../../docs/getting_started/editor/unity_to_godot.rst:206
msgid "Design"
msgstr "Разработка"

#: ../../docs/getting_started/editor/unity_to_godot.rst:208
msgid ""
"As you may know already, Unity supports C#. C# benefits from its integration "
"with Visual Studio and other features, such as static typing."
msgstr ""
"Как вы уже знаете, Unity поддерживает C#. C# выгодный из-за интеграции с "
"Visual Studio и других возможностей, таких как статическая типизация."

#: ../../docs/getting_started/editor/unity_to_godot.rst:210
msgid ""
"Godot provides its own scripting language, :ref:`GDScript <doc_scripting>` "
"as well as support for :ref:`Visual Script <toc-learn-scripting-"
"visual_script>` and :ref:`C# <doc_c_sharp>`. GDScript borrows its syntax "
"from Python, but is not related to it. If you wonder about the reasoning for "
"a custom scripting language, please read the :ref:`doc_gdscript` and :ref:"
"`doc_faq` pages. GDScript is strongly attached to the Godot API and is "
"really easy to learn: Between one evening for an experienced programmer and "
"a week for a complete beginner."
msgstr ""
"Godot предоставляет собственный скриптовый язык, :ref:`GDScript "
"<doc_scripting>`, а также поддержку :ref:`Visual Script <toc-learn-"
"scripting- Visual_script>` и :ref:`C# <doc_c_sharp>`. GDScript берет свой "
"синтаксис из Python, но не связан с ним. Если вы задаетесь вопросом о "
"причинах создания своего скриптового языка, прочитайте, пожалуйста, "
"страницы :ref:`doc_gdscript` и :ref:`doc_faq`. GDScript тесно связан с API "
"Godot и его очень легко освоить: Один вечер для опытного программиста и "
"неделя для новичка."

#: ../../docs/getting_started/editor/unity_to_godot.rst:216
msgid ""
"Unity allows you to attach as many scripts as you want to a GameObject. Each "
"script adds a behaviour to the GameObject: For example, you can attach a "
"script so that it reacts to the player's controls, and another that controls "
"its specific game logic."
msgstr ""
"Unity позволяет вам прикреплять к GameObject столько скриптов, сколько вы "
"хотите. Каждый скрипт добавляет что-то в GameObject: Например, вы можете "
"прикрепить скрипт так, чтобы он реагировал на действия игрока, а другой "
"скрипт управлял его игровой логикой."

#: ../../docs/getting_started/editor/unity_to_godot.rst:220
msgid ""
"In Godot, you can only attach one script per node. You can use either an "
"external GDScript file or include the script directly in the node. If you "
"need to attach more scripts to one node, then you may consider two "
"solutions, depending on your scene and on what you want to achieve:"
msgstr ""
"В Godot, вы можете прикрепить только один скрипт на каждый узел. Вы можете "
"использовать либо внешний файл GDScript, либо встроить скрипт "
"непосредственно в узел. Если вам нужно прикрепить несколько скриптов к "
"одному узлу, то вы можете рассмотреть два решения, в зависимости от вашей "
"сцены и от того, чего вы хотите достичь:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:224
msgid ""
"either add a new node between your target node and its current parent, then "
"add a script to this new node."
msgstr ""
"либо добавить новый узел между вашим выбранным узлом и его текущим "
"родителем, а затем добавить скрипт к этому новому узлу."

#: ../../docs/getting_started/editor/unity_to_godot.rst:225
msgid ""
"or, you can split your target node into multiple children and attach one "
"script to each of them."
msgstr ""
"или, вы можете разделить ваш узел на несколько дочерних узлов и прикрепить "
"по одному скрипту на каждый из них."

#: ../../docs/getting_started/editor/unity_to_godot.rst:227
msgid ""
"As you can see, it can be easy to turn a scene tree to a mess. This is why "
"it is important to have a real reflection and consider splitting a "
"complicated scene into multiple, smaller branches."
msgstr ""
"Как видите, древо сцены легко захламить. Вот почему важно обдумать "
"возможность разделения сложной сцены на несколько, более мелких ветвей."

#: ../../docs/getting_started/editor/unity_to_godot.rst:231
msgid "Connections: groups and signals"
msgstr "Связи: группы и сигналы"

#: ../../docs/getting_started/editor/unity_to_godot.rst:233
#, fuzzy
msgid ""
"You can control nodes by accessing them using a script and calling functions "
"(built-in or user-defined) on them. But there's more: You can also place "
"them in a group and call a function on all nodes contained in this group! "
"This is explained in the :ref:`scripting documentation "
"<doc_scripting_continued>`."
msgstr ""
"Вы можете управлять узлами, обращаясь к ним с помощью скрипта и вызывая в "
"них функции (встроенные или определяемые пользователем). Но есть еще кое-"
"что: Вы также можете поместить их в группу и вызвать функцию на всех узлах, "
"входящих в эту группу! Это объясняется на :ref:`этой странице "
"<doc_scripting_continued>`."

#: ../../docs/getting_started/editor/unity_to_godot.rst:237
#, fuzzy
msgid ""
"But there's more! Certain nodes throw signals when certain actions happen. "
"You can connect these signals to call a specific function when they happen. "
"Note that you can define your own signals and send them whenever you want. "
"See the :ref:`signals documentation <doc_gdscript_signals>` for details."
msgstr ""
"Но есть еще кое-что! Некоторые узлы посылают сигналы при выполнении "
"определенных действий. Вы можете подключить эти сигналы для вызова "
"определенной функции при их появлении. Обратите внимание, что вы можете "
"определить свои собственные сигналы и использовать их, когда захотите. Эта "
"особенность описана в этом `документе <.../scripting/gdscript/"
"gdscript_basics.html#signals>`_."

#: ../../docs/getting_started/editor/unity_to_godot.rst:243
#, fuzzy
msgid "Script serialization"
msgstr "Сериализация Скрипта"

#: ../../docs/getting_started/editor/unity_to_godot.rst:245
msgid "Unity can handle script serialization in two ways:"
msgstr "Unity может работать с сериализацией скриптов двумя способами:"

#: ../../docs/getting_started/editor/unity_to_godot.rst:247
msgid ""
"Implicit: All public fields in a class are automatically serialized if the "
"type is a serializable type (``Dictionary`` is not serializable)."
msgstr ""
"Неявно: Все публичные поля в классе автоматически сериализуются, если тип "
"является сериализуемым (``Dictionary``не сериализуемый)."

#: ../../docs/getting_started/editor/unity_to_godot.rst:248
msgid ""
"Explicit: Non-public fields can be serialized using the ``[SerializeField]`` "
"attribute."
msgstr ""
"Явно: Непубличные поля могут быть сериализованы с помощью атрибута "
"``[SerializeField]``."

#: ../../docs/getting_started/editor/unity_to_godot.rst:250
#, fuzzy
msgid ""
"Godot also has a built-in script serialization system, but it works only "
"explicitly. You can serialize any serializable type (:ref:`built-in and "
"various engine types <doc_binary_serialization_api>`, including :ref:"
"`class_Array` and :ref:`class_Dictionary`) using the ``export`` keyword. See "
"the :ref:`exports documentation <doc_gdscript_exports>` for details."
msgstr ""
"Godot также имеет встроенную систему сериализации скриптов, но она работает "
"только явно. можно Вы можете сериализовать любой сериализуемый тип используя "
"(:ref:`встроенный и различные типы движка <doc_binary_serialization_api>`, в "
"том числе :ref:`class_Array` и :ref:`class_Dictionary`) ключевое слово "
"``export``. Этот процесс объясняется `здесь <.../scripting/gdscript/"
"gdscript_basics.html#exports>`_."

#: ../../docs/getting_started/editor/unity_to_godot.rst:255
msgid ""
"Unity also has a data type called ``ScriptableObject`` used to serialize "
"custom asset objects. Its equivalent in Godot is the base class for all "
"resources: :ref:`class_Resource`. Creating a script that inherits :ref:"
"`class_Resource` will allow you to create custom serializable objects. More "
"information about resources can be found :ref:`here <doc_resources>`."
msgstr ""
"Unity также имеет тип данных под названием ``ScriptableObject``, "
"используемый для сериализации пользовательских ресурсных объектов. Его "
"эквивалент в Godot является базовым классом для всех ресурсов: :ref:"
"`class_Resource`. Создание скрипта, который наследует :ref:`class_Resource`, "
"позволит вам создавать собственные сериализуемые объекты. Более подробную "
"информацию о ресурсах можно найти :ref:`здесь <doc_resources>`."

#: ../../docs/getting_started/editor/unity_to_godot.rst:260
msgid "Using Godot in C++"
msgstr "Использование C++ в Godot"

#: ../../docs/getting_started/editor/unity_to_godot.rst:262
msgid ""
"For your information, Godot also allows you to develop your project directly "
"in C++ by using its API, which is not possible with Unity at the moment. As "
"an example, you can consider Godot Engine's editor as a \"game\" written in C"
"++ using Godot API."
msgstr ""
"К вашему сведению, Godot также позволяет вам разрабатывать ваш проект "
"непосредственно на языке C++, используя API, что в данный момент невозможно "
"в Unity. В качестве примера можно рассматривать редактор Godot Engine как "
"\"игру\", написанную на языке C++ с использованием API Godot."

#: ../../docs/getting_started/editor/unity_to_godot.rst:264
msgid ""
"If you are interested in using Godot in C++, you may want to start reading "
"the :ref:`Developing in C++ <doc_introduction_to_godot_development>` page."
msgstr ""
"Если вы заинтересованы в использовании языка C++ в Godot, вы можете "
"прочитать страницу :ref:`Разработка на С++ <doc_introduction_to_godot_ "
"Development>`."
