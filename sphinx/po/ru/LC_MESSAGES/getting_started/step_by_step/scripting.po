# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-29 12:54+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting.rst:4
msgid "Scripting"
msgstr "Написание скриптов"

#: ../../docs/getting_started/step_by_step/scripting.rst:7
msgid "Introduction"
msgstr "Введение"

#: ../../docs/getting_started/step_by_step/scripting.rst:9
msgid ""
"Before Godot 3.0, the only choice for scripting a game was to use :ref:"
"`GDScript<doc_gdscript>`. Nowadays, Godot has four (yes, four!) official "
"languages and the ability to add extra scripting languages dynamically!"
msgstr ""
"До Godot 3.0, единственным выбором для написания скриптов игры был :ref:"
"`GDScript<doc_gdscript>`. В настоящее время Godot официально поддерживает "
"четыре (да, четыре!) языка и имеет возможность динамически добавлять "
"дополнительные скриптовые языки!"

#: ../../docs/getting_started/step_by_step/scripting.rst:13
msgid ""
"This is great, mostly due to the large amount of flexibility provided, but "
"it also makes our work supporting languages more difficult."
msgstr ""
"Это здорово, в основном из-за большой гибкости, но это также затрудняет нашу "
"работу по поддержке языков."

#: ../../docs/getting_started/step_by_step/scripting.rst:16
msgid ""
"The \"main\" languages in Godot, though, are GDScript and VisualScript. The "
"main reason to choose them is their level of integration with Godot, as this "
"makes the experience smoother; both have slick editor integration, while C# "
"and C++ need to be edited in a separate IDE. If you are a big fan of "
"statically typed languages, go with C# and C++ instead."
msgstr ""
"\"Основные\" языки в Godot - это GDScript и VisualScript. Основной причиной "
"такого выбора является их уровень интеграции с Godot. Это делает процесс "
"овладения Godot более плавным; они оба имеют полную интеграцию с редактором, "
"в то время как для С# и С++ необходимо использовать отдельную IDE. Если вы "
"большой поклонник статически типизированных языков, то используйте C# и С++."

#: ../../docs/getting_started/step_by_step/scripting.rst:22
msgid "GDScript"
msgstr "GDScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:24
msgid ""
":ref:`GDScript<doc_gdscript>` is, as mentioned above, the main language used "
"in Godot. Using it has some positive points compared to other languages due "
"to its high integration with Godot:"
msgstr ""
":ref:`GDScript<doc_gdscript>`, как упоминалось выше, является основным "
"языком, используемым в Godot. Его использование имеет некоторые "
"положительные моменты по сравнению с другими языками из-за его высокой "
"интеграции с Godot:"

#: ../../docs/getting_started/step_by_step/scripting.rst:28
msgid ""
"It's simple, elegant, and designed to be familiar for users of other "
"languages such as Lua, Python, Squirrel, etc."
msgstr ""
"Он прост, элегантен и разработан, чтобы быть понятным для пользователей, "
"знающих другие языки программирования, таких как Lua, Python, Squirrel и т. "
"д."

#: ../../docs/getting_started/step_by_step/scripting.rst:29
msgid "Loads and compiles blazingly fast."
msgstr "Загружает и компилирует невероятно быстро."

#: ../../docs/getting_started/step_by_step/scripting.rst:30
msgid ""
"The editor integration is a pleasure to work with, with code completion for "
"nodes, signals, and many other items pertaining to the scene being edited."
msgstr ""
"Интеграция с редактором позволяет с удовольствием работать, с написанием "
"кода для узлов, сигналов и многих других элементов, относящихся к "
"редактируемой сцене."

#: ../../docs/getting_started/step_by_step/scripting.rst:31
msgid ""
"Has vector types built-in (such as Vectors, transforms, etc.), making it "
"efficient for heavy use of linear algebra."
msgstr ""
"Имеет встроенные векторные типы (например,  Vectors, transforms и т. д.), "
"что делает использование линейной алгебры эффективным."

#: ../../docs/getting_started/step_by_step/scripting.rst:32
msgid ""
"Supports multiple threads as efficiently as statically typed languages - one "
"of the limitations that made us avoid VMs such as Lua, Squirrel, etc."
msgstr ""
"Поддерживает несколько потоков так же эффективно, как статически "
"типизированные языки - это одно из ограничений, которое заставило нас "
"избегать виртуальных машин, таких как Lua, Squirrel и т. д."

#: ../../docs/getting_started/step_by_step/scripting.rst:33
msgid ""
"Uses no garbage collector, so it trades a small bit of automation (most "
"objects are reference counted anyway), by determinism."
msgstr ""
"Не использует сборщик мусора, поэтому он располагает небольшой "
"автоматизацией (в любом случае большинство объектов подсчитываются "
"ссылками), детерминизмом."

#: ../../docs/getting_started/step_by_step/scripting.rst:34
msgid ""
"Its dynamic nature makes it easy to optimize sections of code in C++ (via "
"GDNative) if more performance is required, all without recompiling the "
"engine."
msgstr ""
"Его динамическая природа упрощает оптимизацию разделов кода на C++ (через "
"GDNative), если требуется большая производительность, без перекомпиляции "
"движка."

#: ../../docs/getting_started/step_by_step/scripting.rst:36
msgid ""
"If you're undecided and have experience with programming, especially "
"dynamically typed languages, go for GDScript!"
msgstr ""
"Если вы не определились с выбором языка, но имеете опыт программирования, "
"особенно на динамически типизированных языках, попробуйте GDScript!"

#: ../../docs/getting_started/step_by_step/scripting.rst:40
msgid "VisualScript"
msgstr "Визуальный Скриптинг"

#: ../../docs/getting_started/step_by_step/scripting.rst:42
msgid ""
"Beginning with 3.0, Godot offers :ref:`Visual "
"Scripting<doc_what_is_visual_script>`. This is a typical implementation of a "
"\"blocks and connections\" language, but adapted to how Godot works."
msgstr ""
"Начиная с версии 3.0, Godot предлагает :ref:`Визуальный "
"Скриптинг<doc_what_is_visual_script>`. Это типичная реализация языка "
"\"блоков и соединений\", но адаптированная к тому, как работает Godot."

#: ../../docs/getting_started/step_by_step/scripting.rst:46
msgid ""
"Visual scripting is a great tool for non-programmers, or even for "
"experienced developers who want to make parts of the code more accessible to "
"others, like game designers or artists."
msgstr ""
"Визуальный скриптинг - это отличный инструмент для непрограммистов или для "
"опытных разработчиков, которые хотят сделать части кода более доступными для "
"других, например, дизайнеров игр или художников."

#: ../../docs/getting_started/step_by_step/scripting.rst:50
msgid ""
"It can also be used by programmers to build state machines or custom visual "
"node workflows - for example, a dialogue system."
msgstr ""
"Он также может использоваться программистами для создания машин состояний "
"или пользовательских визуальных узлов рабочих процессов - например, "
"диалоговой системы."

#: ../../docs/getting_started/step_by_step/scripting.rst:55
msgid ".NET / C#"
msgstr ".NET / C#"

#: ../../docs/getting_started/step_by_step/scripting.rst:57
msgid ""
"As Microsoft's C# is a favorite amongst game developers, we have added "
"official support for it. C# is a mature language with tons of code written "
"for it, and support was added thanks to a generous donation from Microsoft."
msgstr ""
"Поскольку Microsoft C# является любимцем среди разработчиков игр, мы "
"добавили официальную поддержку для него. C# - зрелый язык с тоннами кода, "
"написанных для него, и его поддержка была добавлена благодаря щедрому "
"пожертвованию от Microsoft."

#: ../../docs/getting_started/step_by_step/scripting.rst:62
msgid ""
"It has an excellent tradeoff between performance and ease of use, although "
"one must be aware of its garbage collector."
msgstr ""
"У него есть превосходный компромисс между производительностью и простотой "
"использования, но нужно знать о его сборщике мусора."

#: ../../docs/getting_started/step_by_step/scripting.rst:65
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory any third-party .NET library or framework can be used for scripting "
"in Godot, as well as any Common Language Infrastructure-compliant "
"programming language, such as F#, Boo or ClojureCLR. In practice however, C# "
"is the only officially supported .NET option."
msgstr ""
"Поскольку Godot использует среду выполнения `Mono <https://mono-project."
"com>`_.NET, теоретически любая сторонняя библиотека .NET или программная "
"платформа может использоваться для написания скриптов в Godot, так же как "
"любой CLR-совместимый язык программирования, такой как F#, Boo или "
"ClojureCLR. Однако, на практике C# является единственным официально "
"поддерживаемым .NET вариантом."

#: ../../docs/getting_started/step_by_step/scripting.rst:71
msgid "GDNative / C++"
msgstr "GDNative / C++"

#: ../../docs/getting_started/step_by_step/scripting.rst:73
msgid ""
"Finally, one of our brightest additions for the 3.0 release: GDNative allows "
"scripting in C++ without needing to recompile (or even restart) Godot."
msgstr ""
"Наконец, одно из наших самых ярких дополнений для версии 3.0: GDNative "
"позволяет создавать скрипты на C++ без необходимости перекомпилировать (или "
"даже перезапускать) Godot."

#: ../../docs/getting_started/step_by_step/scripting.rst:77
msgid ""
"Any C++ version can be used, and mixing compiler brands and versions for the "
"generated shared libraries works perfectly, thanks to our use of an internal "
"C API Bridge."
msgstr ""
"Любая версия C++ может быть использована, а смешение брендов и версий "
"компиляторов для сгенерированных общих библиотек прекрасно работает "
"благодаря нашему использованию внутреннего C API Моста."

#: ../../docs/getting_started/step_by_step/scripting.rst:81
msgid ""
"This language is the best choice for performance and does not need to be "
"used throughout an entire game, as other parts can be written in GDScript or "
"Visual Script. However the API is clear and easy to use as it resembles, "
"mostly, Godot's actual C++ API."
msgstr ""
"Этот язык является лучшим выбором для производительности и не должен "
"использоваться во всей игре, так как другие части могут быть написаны в "
"GDScript или Visual Script. Однако API ясен и прост в использовании, так как "
"по большей части он похож на C++ API Godot."

#: ../../docs/getting_started/step_by_step/scripting.rst:86
msgid ""
"More languages can be made available through the GDNative interface, but "
"keep in mind we don't have official support for them."
msgstr ""
"Больше языков могут быть доступны через интерфейс GDNative, но имейте в "
"виду, что у нас нет официальной поддержки для них."

#: ../../docs/getting_started/step_by_step/scripting.rst:90
msgid "Scripting a scene"
msgstr "Создание сценариев сцены"

#: ../../docs/getting_started/step_by_step/scripting.rst:92
msgid ""
"For the rest of this tutorial we'll set up a GUI scene consisting of a "
"button and a label, where pressing the button will update the label. This "
"will demonstrate:"
msgstr ""
"В оставшейся части этого урока мы настроим сцену с графическим интерфейсом, "
"состоящую из кнопки и ярлыка, где нажатие кнопки будет обновлять ярлык. "
"Продемонстрируем это:"

#: ../../docs/getting_started/step_by_step/scripting.rst:96
msgid "Writing a script and attaching it to a node."
msgstr "Написание сценария и его привязку к узлу."

#: ../../docs/getting_started/step_by_step/scripting.rst:97
msgid "Hooking up UI elements via signals."
msgstr "Подключение элементов пользовательского интерфейса через сигналы."

#: ../../docs/getting_started/step_by_step/scripting.rst:98
msgid "Writing a script that can access other nodes in the scene."
msgstr ""
"Написание сценария, который может получать доступ к другим узлам в сцене."

#: ../../docs/getting_started/step_by_step/scripting.rst:100
msgid ""
"Before continuing, please make sure to read the :ref:"
"`GDScript<doc_gdscript>` reference. It's a language designed to be simple, "
"and the reference is short, so it will not take more than a few minutes to "
"get an overview of the concepts."
msgstr ""
"Прежде чем продолжить, обязательно прочитайте ссылку :ref:"
"`GDScript<doc_gdscript>`. Это язык, разработанный для того, чтобы быть "
"простым а справочник краткий , поэтому для ознакомления с основными "
"понятиями потребуется не более нескольких минут."

#: ../../docs/getting_started/step_by_step/scripting.rst:105
msgid "Scene setup"
msgstr "Настройка сцены"

#: ../../docs/getting_started/step_by_step/scripting.rst:107
msgid ""
"Use the \"Add Child Node\" dialogue accessed from the Scene tab (or by "
"pressing ``Ctrl+A``) to create a hierarchy with the following nodes:"
msgstr ""
"Используйте диалог \"Добавить дочерний узел\", доступ к которому "
"осуществляется из вкладки \"Сцена\" (или нажатием ``Ctrl+A``), чтобы создать "
"иерархию со следующими узлами:"

#: ../../docs/getting_started/step_by_step/scripting.rst:110
msgid "Panel"
msgstr "Панель"

#: ../../docs/getting_started/step_by_step/scripting.rst:112
msgid "Label"
msgstr "Ярлык"

#: ../../docs/getting_started/step_by_step/scripting.rst:113
msgid "Button"
msgstr "Кнопка"

#: ../../docs/getting_started/step_by_step/scripting.rst:115
msgid "The scene tree should look like this:"
msgstr "Дерево сцены должно выглядеть так:"

#: ../../docs/getting_started/step_by_step/scripting.rst:119
msgid ""
"Use the 2D editor to position and resize the Button and Label so that they "
"look like the image below. You can set the text from the Inspector tab."
msgstr ""
"Используйте 2D-редактор для позиционирования и изменения размера Кнопки и "
"Ярлыка, чтобы они выглядели как на изображении ниже. Вы можете набрать текст "
"во вкладке \"Инспектор\"."

#: ../../docs/getting_started/step_by_step/scripting.rst:124
msgid "Finally, save the scene with a name such as ``sayhello.tscn``."
msgstr "Наконец, сохраните сцену с именем ``sayhello.tscn``."

#: ../../docs/getting_started/step_by_step/scripting.rst:129
msgid "Adding a script"
msgstr "Добавление сценария"

#: ../../docs/getting_started/step_by_step/scripting.rst:131
msgid ""
"Right click on the Panel node, then select \"Attach Script\" from the "
"context menu:"
msgstr ""
"Щелкните правой кнопкой мыши на узел Panel и выберите \"Прикрепить скрипт\" "
"в контекстном меню:"

#: ../../docs/getting_started/step_by_step/scripting.rst:136
msgid ""
"The script creation dialog will pop up. This dialog allows you to set the "
"script's language, class name, and other relevant options."
msgstr ""
"Откроется диалоговое окно создания сценария. В этом диалоговом окне вы "
"можете указать язык сценария, имя класса и другие параметры."

#: ../../docs/getting_started/step_by_step/scripting.rst:139
msgid ""
"In GDScript, the file itself represents the class, so the class name field "
"is not editable."
msgstr ""
"В GDScript файл представляет собой класс, поэтому поле имени класса не "
"редактируется."

#: ../../docs/getting_started/step_by_step/scripting.rst:142
msgid ""
"The node we're attaching the script to is a panel, so the Inherits field "
"will automatically be filled in with \"Panel\". This is what we want, as the "
"script's goal is to extend the functionality of our panel node."
msgstr ""
"Узел, к которому мы прикрепляем скрипт, представляет собой панель, поэтому в "
"поле \"Наследование\" будет автоматически вписано \"Panel\". Это то, что нам "
"нужно, поскольку цель сценария заключается в расширении функциональности "
"нашего узла панели."

#: ../../docs/getting_started/step_by_step/scripting.rst:146
msgid "Finally, enter a path name for the script and select Create:"
msgstr "Наконец, введите путь к сценарию и нажмите кнопку \"Создать\":"

#: ../../docs/getting_started/step_by_step/scripting.rst:150
msgid ""
"The script will then be created and added to the node. You can see this as "
"an \"Open script\" icon next to the node in the Scene tab, as well as in the "
"script property under Inspector:"
msgstr ""
"После этого скрипт будет создан и добавлен к узлу. Вы можете понять это по "
"значку \"Открыть скрипт\" рядом с узлом на вкладке \"Сцена\", а также в "
"свойстве Script в \"Инспекторе\":"

#: ../../docs/getting_started/step_by_step/scripting.rst:156
msgid ""
"To edit the script, select either of these buttons, both of which are "
"highlighted in the above image. This will bring you to the script editor, "
"where a default template will be included:"
msgstr ""
"Чтобы отредактировать скрипт, нажмите одну из кнопок, которые отмечены в "
"приведенном выше изображении. Появится редактор скриптов в котором будет "
"отображен шаблон скрипта по умолчанию:"

#: ../../docs/getting_started/step_by_step/scripting.rst:161
msgid ""
"There's not much there. The ``_ready()`` function is called when the node, "
"and all its children, enters the active scene. **Note:** ``_ready()`` is not "
"the constructor; the constructor is instead ``_init()``."
msgstr ""
"Там не так много. Функция ``_ready()`` вызывается, когда узел и все его "
"дочерние элементы входят в активную сцену. **Примечание:** ``_ready()`` не "
"является конструктором; конструктором является ``_init()``."

#: ../../docs/getting_started/step_by_step/scripting.rst:166
msgid "The role of the script"
msgstr "Роль сценария"

#: ../../docs/getting_started/step_by_step/scripting.rst:168
msgid ""
"A script adds behavior to a node. It is used to control how the node "
"functions as well as how it interacts with other nodes: children, parent, "
"siblings, and so on. The local scope of the script is the node. In other "
"words, the script inherits the functions provided by that node."
msgstr ""
"Скрипт добавляет узлу поведение. Он используется для управления "
"функционированием узла, а также его взаимодействия с другими узлами: "
"дочерними, родительскими, родственными и т.д. Локальная область скрипта - "
"это узел. Другими словами, скрипт наследует функции, предоставляемые этим "
"узлом."

#: ../../docs/getting_started/step_by_step/scripting.rst:179
msgid "Handling a signal"
msgstr "Обработка сигнала"

#: ../../docs/getting_started/step_by_step/scripting.rst:181
msgid ""
"Signals are \"emitted\" when some specific kind of action happens, and they "
"can be connected to any function of any script instance. Signals are used "
"mostly in GUI nodes, although other nodes have them too, and you can even "
"define custom signals in your own scripts."
msgstr ""
"Сигналы \"излучаются\", когда происходит определенный вид действий, и они "
"могут быть подключены к любой функции любого экземпляра сценария. Сигналы "
"используются в основном в GUI-узлах, хотя они также есть и в других узлах, и "
"вы даже можете определить пользовательские сигналы в своих собственных "
"сценариях."

#: ../../docs/getting_started/step_by_step/scripting.rst:186
msgid ""
"In this step, we'll connect the \"pressed\" signal to a custom function. "
"Forming connections is the first part and defining the custom function is "
"the second part. For the first part, Godot provides two ways to create "
"connections: through a visual interface the editor provides or through code."
msgstr ""
"На этом этапе мы подключим сигнал \"pressed\" (\"нажато\") к "
"пользовательской функции. Формирование соединений - это первая часть, а "
"определение пользовательской функции - вторая. Для первой части Godot "
"предоставляет два способа создания соединений: через визуальный интерфейс, "
"который редактор предоставляет, или через код."

#: ../../docs/getting_started/step_by_step/scripting.rst:191
msgid ""
"While we will use the code method for the remainder of this tutorial series, "
"let's cover how the editor interface works for future reference."
msgstr ""
"Хоть мы и будем использовать метод написания кода для оставшейся части этой "
"серии уроков, давайте рассмотрим как работает интерфейс редактора, для "
"дальнейшего использования."

#: ../../docs/getting_started/step_by_step/scripting.rst:194
msgid ""
"Select the Button node in the scene tree and then select the \"Node\" tab. "
"Next, make sure that you have \"Signals\" selected."
msgstr ""
"Выберите узел Кнопка (Button) в дереве сцен и затем выберите вкладку \"Узел"
"\". Далее, убедитесь, что вы выбрали \"Сигналы\"."

#: ../../docs/getting_started/step_by_step/scripting.rst:199
msgid ""
"If you then select \"pressed()\" under \"BaseButton\" and click the "
"\"Connect...\" button in the bottom right, you'll open up the connection "
"creation dialogue."
msgstr ""
"Затем, если выберете \"pressed()\" в разделе \"BaseButton\" и нажмете кнопку "
"\"Подключить...\" в правом нижнем углу, откроется диалог создания соединения."

#: ../../docs/getting_started/step_by_step/scripting.rst:204
msgid ""
"In the bottom-left are the key things you need to create a connection: a "
"node which implements the method you want to trigger (represented here as a "
"NodePath) and the name of the method to trigger."
msgstr ""
"В левом нижнем углу находятся ключевые поля, необходимые для создания "
"соединения: узел, реализующий метод, который вы хотите вызвать (представлен "
"здесь как NodePath), и имя метода для запуска."

#: ../../docs/getting_started/step_by_step/scripting.rst:208
msgid ""
"The top-left section displays a list of your scene's nodes with the emitting "
"node's name highlighted in red. Select the \"Panel\" node here. When you "
"select a node, the NodePath at the bottom will automatically update to point "
"to a relative path from the emitting node to the selected node."
msgstr ""
"В левом верхнем разделе отображается список узлов вашей сцены, где имя узла "
"вызывающего событие выделено красным цветом. Выберите узел \"Panel\". Когда "
"вы выбираете узел, путь внизу будет автоматически обновляться, указывая "
"относительный путь от узла вызывающего событие к выбранному узлу."

#: ../../docs/getting_started/step_by_step/scripting.rst:213
#, fuzzy
msgid ""
"By default, the method name will contain the emitting node's name (\"Button"
"\" in this case), resulting in ``_on_[EmitterNode]_[signal_name]``. If you "
"do have the \"Make Function\" check button checked, then the editor will "
"generate the function for you before setting up the connection."
msgstr ""
"По умолчанию имя метода будет содержать имя излучающего узла (\"Кнопка\" в "
"данном случае), в результате чего получится "
"``_on_[EmitterNode]_[signal_name]``. Если кнопка-галочка \"Make Function\" "
"установлена, то перед настройкой соединения редактор сгенерирует для вас "
"функцию."

#: ../../docs/getting_started/step_by_step/scripting.rst:218
msgid ""
"And that concludes the guide on how to use the visual interface. However, "
"this is a scripting tutorial, so for the sake of learning, let's dive into "
"the manual process!"
msgstr ""
"На этом завершим наше обучение по использованию визуального интерфейса. Все-"
"таки это урок по написанию скриптов. Поэтому, ради лучшего понимания, "
"давайте писать код самостоятельно!"

#: ../../docs/getting_started/step_by_step/scripting.rst:222
msgid ""
"To accomplish this, we will introduce a function that is probably the most "
"used by Godot programmers: :ref:`Node.get_node() "
"<class_Node_method_get_node>`. This function uses paths to fetch nodes "
"anywhere in the scene, relative to the node that owns the script."
msgstr ""
"Для этого мы познакомимся с функцией, которая, вероятно, наиболее часто "
"используется программистами Godot: :ref:`Node.get_node() "
"<class_Node_method_get_node>`. Эта функция использует пути для извлечения "
"узлов из любого места сцены, относительно узла, которому принадлежит скрипт."

#: ../../docs/getting_started/step_by_step/scripting.rst:227
msgid ""
"For the sake of convenience, delete everything underneath ``extends Panel``. "
"You will fill out the rest of the script manually."
msgstr ""
"Для удобства удалите все под ``extends Panel``. Вы заполните остальную часть "
"сценария вручную."

#: ../../docs/getting_started/step_by_step/scripting.rst:230
msgid ""
"Because the Button and Label are siblings under the Panel where the script "
"is attached, you can fetch the Button by typing the following underneath the "
"``_ready()`` function:"
msgstr ""
"Поскольку Button и Label являются детьми по отношению к Panel, к которой "
"прикреплен скрипт, вы можете выбрать Button, написав следующее в функции "
"``_ready()``:"

#: ../../docs/getting_started/step_by_step/scripting.rst:247
msgid "Next, write a function which will be called when the button is pressed:"
msgstr "Затем напишите функцию, которая будет вызываться при нажатии кнопки:"

#: ../../docs/getting_started/step_by_step/scripting.rst:262
msgid ""
"Finally, connect the button's \"pressed\" signal to ``_ready()`` by using :"
"ref:`Object.connect() <class_Object_method_connect>`."
msgstr ""
"И наконец, подключите сигнал \"pressed\" от кнопок к функции ``_ready()``, "
"используя :ref:`Object.connect() <class_Object_method_connect>`."

#: ../../docs/getting_started/step_by_step/scripting.rst:278
msgid "The final script should look like this:"
msgstr "В итоге скрипт должен выглядеть так:"

#: ../../docs/getting_started/step_by_step/scripting.rst:311
msgid ""
"Run the scene and press the button. You should get the following result:"
msgstr ""
"Запустите сцену и нажмите кнопку. Вы должны получить следующий результат:"

#: ../../docs/getting_started/step_by_step/scripting.rst:315
msgid "Why, hello there! Congratulations on scripting your first scene."
msgstr "Поздравляем с написанием сценария к вашей первой сцене."

#: ../../docs/getting_started/step_by_step/scripting.rst:319
msgid ""
"A common misunderstanding regarding this tutorial is how ``get_node(path)`` "
"works. For a given node, ``get_node(path)`` searches its immediate children. "
"In the above code, this means that Button must be a child of Panel. If "
"Button were instead a child of Label, the code to obtain it would be:"
msgstr ""
"Общим недопониманием в отношении этого урока является то, как работает "
"``get_node(path)``. Для данного узла ``get_node(path)`` ищет своих "
"непосредственных детей. В приведенном выше коде это означает, что Button "
"должен быть дочерним элементом Panel. Если бы Button был дочерним элементом "
"Label, код для его получения выглядел бы так:"

#: ../../docs/getting_started/step_by_step/scripting.rst:337
msgid "Also, remember that nodes are referenced by name, not by type."
msgstr "Кроме того, помните, что узлы ссылаются по имени, а не по типу."

#: ../../docs/getting_started/step_by_step/scripting.rst:341
msgid ""
"The right-hand panel of the connect dialogue is for binding specific values "
"to the connected function's parameters. You can add and remove values of "
"different types."
msgstr ""
"Правая панель диалога подключения предназначена для привязки определенных "
"значений к параметрам подключенной функции. Вы можете добавлять и удалять "
"значения разных типов."

#: ../../docs/getting_started/step_by_step/scripting.rst:345
msgid ""
"The code approach also enables this with a 4th ``Array`` parameter that is "
"empty by default. Feel free to read up on the ``Object.connect`` method for "
"more information."
msgstr ""
"Если реализовывать это в коде, то можно работать с 4-м параметром ``Array``, "
"который по умолчанию пуст. Для получения дополнительной информации не "
"забудьте ознакомиться с методом ``Object.connect``."
