# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:4
msgid "Control the game's UI with code"
msgstr "Управление игровым интерфейсом из кода"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:7
msgid "Intro"
msgstr "Введение"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:9
msgid ""
"In this tutorial, you will connect a character to a life bar and animate the "
"health loss."
msgstr ""
"В этом уроке вы присоедините персонажа к шкале жизни и анимируете потерю "
"здоровья."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:14
msgid ""
"Here's what you'll create: the bar and the counter animate when the "
"character takes a hit. They fade when it dies."
msgstr ""
"Вот что вы создадите: анимацию шкалы и счетчика, когда персонаж получает "
"урон. Они исчезают, когда он умирает."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:18
msgid "You will learn:"
msgstr "Вы узнаете:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:20
msgid "How to **connect** a character to a GUI with signals"
msgstr "Как **подключить** персонажа к интерфейсу с помощью сигналов"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:21
msgid "How to **control** a GUI with GDscript"
msgstr "Как **управлять** интерфейсом с помощью GDscript"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:22
msgid "How to **animate** a life bar with the :ref:`Tween <class_Tween>` node"
msgstr ""
"Как **анимировать** шкалу здоровья с помощью узла :ref:`Tween <class_Tween>`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:25
msgid ""
"If you want to learn how to set up the interface instead, check out the step-"
"by-step UI tutorials:"
msgstr ""
"Если вместо этого вы хотите узнать, как собственно настроить интерфейс, "
"ознакомьтесь с уроками по UI:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:28
msgid ":doc:`ui_main_menu`"
msgstr ":doc:`ui_main_menu`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:29
msgid ":doc:`ui_game_user_interface`"
msgstr ":doc:`ui_game_user_interface`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:32
msgid ""
"When you code a game, you want to build the core gameplay first: the main "
"mechanics, player input, win and loss conditions. The UI comes a bit later. "
"You want to keep all the elements that make up your project separate if "
"possible. Each character should be in its own scene, with its own scripts, "
"and so should the UI elements. This prevents bugs, keeps your project "
"manageable, and allows different team members to work on different parts of "
"the game."
msgstr ""
"Когда вы программируете игру, в первую очередь вы должны сделать: основные "
"механики, ввод игрока, условия победы и поражения. UI делается немного "
"позднее. Вам необходимо держать все элементы, которые составляют ваш проект, "
"отдельно, если это возможно. Каждый элемент должен иметь свою сцену, со "
"своими собственными скриптами. Это предотвращает ошибки, обеспечивает "
"управляемость проектом и позволяет разным участникам команды работать с "
"разными частями игры."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:40
msgid ""
"Once the core gameplay and the UI are ready, you'll need to connect them "
"somehow. In our example, we have the Enemy who attacks the Player at "
"constant time intervals. We want the life bar to update when the Player "
"takes damage."
msgstr ""
"После того, как основа игры и UI готовы, вам нужно будет соединить их как-"
"то. В нашем примере у нас есть враг, который атакует игрока с постоянными "
"временными интервалами. Мы хотим, чтобы шкала жизни обновлялась когда игрок "
"получает повреждения."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:45
msgid "To do this, we will use **signals**."
msgstr "Для этого мы будем использовать **сигналы**."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:49
msgid ""
"Signals are Godot's version of the Observer pattern. They allow us to send "
"out some message. Other nodes can connect to the object that **emits** the "
"signal and receive the information. It's a powerful tool we use a lot for "
"User Interface and achievement systems. You don't want to use them "
"everywhere, though. Connecting two nodes adds some coupling between them. "
"When there's a lot of connections, they become hard to manage. For more "
"information, check out the `signals video tutorial <https://youtu.be/"
"l0BkQxF7X3E>`_ on GDquest."
msgstr ""
"Сигналы — это своя версия шаблона Observer в Godot. Они позволяют нам "
"отправить некоторый сигнал. Другие узлы могут подключаться к объекту, "
"который **излучает** сигнал и получать информацию об этом. Это мощный "
"инструмент, который мы часто используем для пользовательского интерфейса "
"(UI) и систем достижений. Вы не обязаны использовать их повсюду. Соединение "
"двух узлов добавляет некоторую связь между ними. Когда есть много связей, "
"ими становятся трудно управлять. Для получения дополнительной информации "
"посмотрите `signals video tutorial <https://youtu.be/l0BkQxF7X3E>`_ on "
"GDquest."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:53
msgid "Download and explore the start project"
msgstr "Скачайте и изучите стартовый проект"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:55
msgid ""
"Download the Godot project: :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. It contains all the assets and scripts you need to "
"get started. Extract the .zip archive to get two folders: `start` and `end`."
msgstr ""
"Скачать проект Godot : :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. Он содержит все ресурсы и скрипты, необходимые для "
"начала работы. Извлеките ZIP-архив, чтобы получить две папки: `start` и "
"`end`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:58
msgid ""
"Load the ``start`` project in Godot. In the ``FileSystem`` dock, double "
"click on LevelMockup.tscn to open it. It's an RPG game's mockup where 2 "
"characters face each other. The pink enemy attacks and damages the green "
"square at regular time intervals, until its death. Feel free to try out the "
"game: the basic combat mechanics already work. But as the character isn't "
"connected to the life bar, the ``GUI`` doesn't do anything."
msgstr ""
"Загрузите проект ``start`` в Godot. В ``Файловой системе`` дважды щелкните "
"на LevelMockup.tscn, чтобы открыть её. Это макет RPG игры, где 2 персонажа "
"сталкиваются друг с другом. Розовый враг атакует и наносит урон зелёному "
"квадрату через регулярные промежутки времени, вплоть до его смерти. Вы "
"можете опробовать игру: основная боевая механика уже работает. Но так как "
"персонаж не подключен к шкале жизни ``GUI`` никак не изменяется."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:68
msgid ""
"This is typical of how you'd code a game: you implement the core gameplay "
"first, handle the player's death, and only then you'll add the interface. "
"That's because the UI listens to what's happening in the game. So it can't "
"work if other systems aren't in place yet. If you design the UI before you "
"prototype and test the gameplay, chances are it won't work well and you'll "
"have to re-create it from scratch."
msgstr ""
"Это типично для программирования игры: сначала вы реализуете основной "
"геймплей, обрабатываете смерть игрока, и только после вы добавите интерфейс. "
"Это потому, что UI \"слушает\", что происходит в игре. Поэтому он не может "
"работать, если другие системы еще не готовы. Если вы разработали интерфейс "
"перед созданием прототипа и последующего тестирования игры, скорее всего, он "
"не будет работать хорошо, и вам придется заново создавать его с нуля."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:71
msgid "The scene contains a background sprite, a GUI, and two characters."
msgstr ""
"Сцена содержит спрайт с фоном игры, графический интерфейс и два персонажа."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:75
msgid "The scene tree, with the GUI scene set to display its children"
msgstr "Дерево сцены, с GUI которая отображает своих детей"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:77
msgid ""
"The GUI scene encapsulates all of the game's Graphical User Interface. It "
"comes with a barebones script where we get the path to nodes that exist "
"inside the scene:"
msgstr ""
"Сцена GUI инкапсулирует весь интерфейс игры. Он идет с каркасом скрипта, где "
"мы получаем путь к узлам, которые существуют внутри сцены:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:105
msgid ""
"``number_label`` displays a life count as a number. It's a ``Label`` node"
msgstr ""
"``number_label`` отображает количество здоровья в числовом виде. Это узел "
"``Label``"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:107
msgid "``bar`` is the life bar itself. It's a ``TextureProgress`` node"
msgstr "``bar`` - сама шкала здоровья. Это узел ``TextureProgress``"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:108
msgid ""
"``tween`` is a component-style node that can animate and control any value "
"or method from any other node"
msgstr ""
"``tween`` - это узел компонентного стиля, который может анимировать и "
"контролировать любое значение или метод из любого другого узла"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:113
msgid ""
"The project uses a simple organization that works for game jams and tiny "
"games."
msgstr ""
"Проект использует простую организацию, которая работает для игровых джемов и "
"крошечных игр."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:115
msgid ""
"At the root of the project, in the `res://` folder, you will find the "
"`LevelMockup`. That's the main game scene and the one we will work with. All "
"the components that make up the game are in the `scenes/` folder. The "
"`assets/` folder contains the game sprites and the font for the HP counter. "
"In the `scripts/` folder you will find the enemy, the player, and the GUI "
"controller scripts."
msgstr ""
"В корне проекта, в папке `res://` вы найдете `LevelMockup`. Это основная "
"игровая сцена с которой мы будем работать. Все компоненты, составляющие "
"игру, находятся в папке `scenes/`. Папка `assets/` содержит игровые спрайты "
"и шрифт для счетчика HP. В папке `scripts/` вы найдете скрипты для врага, "
"игрока и GUI-контроллера."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:117
msgid ""
"Click the edit scene icon to the right of the node in the scene tree to open "
"the scene in the editor. You'll see the LifeBar and EnergyBar are sub-scenes "
"themselves."
msgstr ""
"Щелкните на значок редактирования сцены справа от узла в дереве сцены, чтобы "
"открыть сцену в редакторе. Вы увидите, LifeBar и EnergyBar которые являются "
"под-сценами."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:121
msgid "The scene tree, with the Player scene set to display its children"
msgstr "Дерево сцены с Player и его детьми"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:124
msgid "Set up the Lifebar with the Player's max\\_health"
msgstr ""
"Установка параметра Player max\\_health (Максимальное здоровье) для LifeBar'a"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:126
msgid ""
"We have to tell the GUI somehow what the player's current health is, to "
"update the lifebar's texture, and to display the remaining health in the HP "
"counter in the top left corner of the screen. To do this we send the "
"player's health to the GUI every time they take damage. The GUI will then "
"update the ``Lifebar`` and ``Number`` nodes with this value."
msgstr ""
"Мы должны передать в GUI текущее здоровье игрока, чтобы обновить текстуру "
"LifeBar'a, и для отображения оставшегося здоровья в счетчике HP, который "
"находиться в левом верхнем углу экрана. Для этого мы отправляем здоровье "
"игрока в GUI каждый раз, когда они получают урон. GUI будет обновлять узлы "
"``Lifebar`` и ``Number`` с учетом этого значения."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:132
msgid ""
"We could stop here to display the number, but we need to initialize the "
"bar's ``max_value`` for it to update in the right proportions. The first "
"step is thus to tell the ``GUI`` what the green character's ``max_health`` "
"is."
msgstr ""
"Мы могли бы закончить здесь с отображением числа, но нам нужно "
"инициализировать шкалу ``max_value`` для того, чтобы обновлять с правильными "
"пропорциями. Таким образом, первый шаг состоит в том, чтобы сообщить "
"``GUI``, каково значение ``max_health`` зеленого персонажа."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:139
msgid ""
"The bar, a `TextureProgress`, has a `max_value` of `100` by default. If you "
"don't need to display the character's health with a number, you don't need "
"to change its `max_value` property. You send a percentage from the `Player` "
"to the `GUI` instead:  `health / max_health * 100`."
msgstr ""
"Шкала `TextureProgress` имеет значение `max_value` в `100` по-умолчанию. "
"Если вам не нужно отображать здоровье персонажа с числом, вам не нужно "
"менять его свойство `max_value`. Вместо этого Вы отправляете процент от "
"`Player` в `GUI`: `health / max_health * 100`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:143
msgid ""
"Click the script icon to the right of the ``GUI`` in the Scene dock to open "
"its script. In the ``_ready`` function, we're going to store the "
"``Player``'s ``max_health`` in a new variable and use it to set the "
"``bar``'s ``max_value``:"
msgstr ""
"Нажмите на значок скрипта справа от ``GUI`` в панели сцен, чтобы открыть его "
"скрипт. В функции ``_ready`` мы собираемся хранить параметр ``max_health`` "
"узла ``Player`` в новой переменной и использовать его для установки значения "
"``max_value`` узла ``bar``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:164
msgid ""
"Let's break it down. ``$\"../Characters/Player\"`` is a shorthand that goes "
"one node up in the scene tree, and retrieves the ``Characters/Player`` node "
"from there. It gives us access to the node. The second part of the "
"statement, ``.max_health``, accesses the ``max_health`` on the Player node."
msgstr ""
"Давайте рассмотрим его. ``$\"../Characters/Player\"`` является сокращением, "
"которое поднимается на один узел вверх в дереве сцен, и извлекает "
"``Characters/Player`` оттуда. Это дает нам доступ к узлу. Вторая часть "
"заявления, ``.max_health``, обращается к параметру ``max_health`` узла "
"Player."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:170
msgid ""
"The second line assigns this value to ``bar.max_value``. You could combine "
"the two lines into one, but we'll need to use ``player_max_health`` again "
"later in the tutorial."
msgstr ""
"Вторая строка присваивает это значение к ``bar.max_value``. Вы могли бы "
"объединить две строки в одну, но мы должны будем использовать "
"``player_max_health`` снова позже в этом уроке."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:174
msgid ""
"``Player.gd`` sets the ``health`` to ``max_health`` at the start of the "
"game, so we could work with this. Why do we still use ``max_health``? There "
"are two reasons:"
msgstr ""
"``Player.gd`` устанавливает ``health`` в ``max_health`` в начале игры, "
"поэтому мы могли бы работать с ним. Почему мы по-прежнему используем "
"``max_health``? Есть две причины:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:178
msgid ""
"We don't have the guarantee that ``health`` will always equal "
"``max_health``: a future version of the game may load a level where the "
"player already lost some health."
msgstr ""
"Вы не можете быть уверены, что ``health`` всегда будет равен ``max_health``: "
"будущая версия игры может загрузить уровень, где игрок уже потерял некоторое "
"количество здоровья."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:184
msgid ""
"When you open a scene in the game, Godot creates nodes one by one, following "
"the order in your Scene dock, from top to bottom. `GUI` and `Player` are not "
"part of the same node branch. To make sure they both exist when we access "
"each other, we have to use the `_ready` function. Godot calls `_ready` right "
"after it loaded all nodes, before the game starts. It's the perfect function "
"to set everything up and prepare the game session. Learn more about _ready: :"
"doc:`scripting_continued`"
msgstr ""
"Когда вы открываете сцену в игре, Godot создает узлы один за одним, следуя "
"заказу в вашей панели сцен, сверху вниз. `GUI` и `Player` не являются частью "
"той же ветви узла. Чтобы убедиться, что они оба существуют, когда мы "
"получаем доступ к ним, мы должны использовать функцию `_ready`. Godot "
"вызывает `_ready` сразу после того, как он загрузил все узлы, до начала "
"игры. Это идеальная функция, чтобы установить все и подготовить сессию игры. "
"Узнайте больше о _ready: :doc:`scripting_continued`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:188
msgid "Update health with a signal when the player takes a hit"
msgstr "Обновление здоровья с помощью сигнала при получении урона"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:190
msgid ""
"Our GUI is ready to receive the ``health`` value updates from the "
"``Player``. To achieve this we're going to use **signals**."
msgstr ""
"Наш GUI готов к получению обновляемых значений ``health`` из ``Player``. Для "
"этого мы собираемся использовать **сигналы**."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:195
msgid ""
"There are many useful built-in signals like `enter_tree` and `exit_tree`, "
"that all nodes emit when they are respectively created and destroyed. You "
"can also create your own using the `signal` keyword. On the `Player` node, "
"you'll find two signals we created for you: `died` and `health_changed`."
msgstr ""
"Есть много полезных встроенных сигналов, таких как `enter_tree` и "
"`exit_tree`, они вызываются, когда узлы соответственно создаются и "
"уничтожаются. Вы также можете создать свой собственный сигнал с помощью "
"ключевого слова `signal`. На узле `Player` вы найдете два сигнала, которые "
"мы создали для вас: `died` и `health_changed`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:197
msgid ""
"Why don't we directly get the ``Player`` node in the ``_process`` function "
"and look at the health value? Accessing nodes this way creates tight "
"coupling between them. If you did it sparingly it may work. As your game "
"grows bigger, you may have many more connections. If you get nodes this way "
"it gets complex quickly. Not only that: you need to listen to the state "
"change constantly in the ``_process`` function. This check happens 60 times "
"a second and you'll likely break the game because of the order in which the "
"code runs."
msgstr ""
"Почему бы нам напрямую не получить узел ``Player`` в функции ``_process`` и "
"посмотреть на значение health? Такой доступ к узлам создает между ними "
"тесную связь. Если вы сделали это экономно, это может сработать. По мере "
"того, как ваша игра становится больше, у вас может быть гораздо больше "
"связей. Если вы получаете узлы таким образом, он быстро усложняется. Мало "
"того: вам нужно постоянно слушать изменения состояния в функции "
"``_process``. Эта проверка происходит 60 раз в секунду, и вы, вероятно, "
"сломаете игру из-за порядка, в котором выполняется код."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:206
msgid ""
"On a given frame you may look at another node's property *before* it was "
"updated: you get a value from the last frame. This leads to obscure bugs "
"that are hard to fix. On the other hand, a signal is emitted right after a "
"change happened. It **guarantees** you're getting a fresh piece of "
"information. And you will update the state of your connected node *right "
"after* the change happened."
msgstr ""
"На заданном кадре вы можете увидеть свойство другого узла *до* того, как он "
"был обновлен: вы получаете значение из последнего кадра. Это приводит к "
"неясным ошибкам, которые трудно исправить. С другой стороны, сигнал "
"излучается сразу после того, как произошло изменение. Это **гарантирует** вы "
"получаете свежие данные. И вы обновите состояние вашего подключенного узла "
"*сразу после* изменений."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:215
msgid ""
"The Observer pattern, that signals derive from, still adds a bit of coupling "
"between node branches. But it's generally lighter and more secure than "
"accessing nodes directly to communicate between two separate classes. It can "
"be okay for a parent node to get values from its children. But you'll want "
"to favor signals if you're working with two separate branches. Read Game "
"Programming Patterns for more information on the `Observer pattern <https://"
"gameprogrammingpatterns.com/observer.html>`_. The `full book <https://"
"gameprogrammingpatterns.com/contents.html>`_ is available online for free."
msgstr ""
"Шаблон Observer, из которого исходят эти сигналы, по-прежнему добавляет "
"немного связей между ветвями узла. Но это, как правило, легче и безопаснее, "
"чем доступ к узлам напрямую для связи между двумя отдельными классами. Для "
"родительского узла может быть нормальным получать значения от его дочерних "
"узлов. Но вы захотите отдать предпочтение сигналам, если работаете с двумя "
"отдельными ветвями. Прочитайте шаблоны программирования игр для получения "
"дополнительной информации о `Observer шаблоне <https://"
"gameprogrammingpatterns.com/observer.html>`_. `Полная версия книги <https://"
"gameprogrammingpatterns.com/contents.html>`_ доступна для скачивания "
"бесплатно."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:219
msgid ""
"With this in mind, let's connect the ``GUI`` to the ``Player``. Click on the "
"``Player`` node in the scene dock to select it. Head down to the Inspector "
"and click on the Node tab. This is the place to connect nodes to listen to "
"the one you selected."
msgstr ""
"С учетом этого давайте подключим ``GUI`` к ``Player``. Щелкните на узле "
"``Player`` в панели сцен, чтобы выбрать его. Направляйтесь а инспектор и "
"нажмите на вкладку Узел. Здесь подключаются узлы для прослушивания."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:224
msgid "The first section lists custom signals defined in ``Player.gd``:"
msgstr ""
"В первом разделе перечислены пользовательские сигналы, определенные в "
"``Player.gd``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:226
msgid ""
"``died`` is emitted when the character died. We will use it in a moment to "
"hide the UI."
msgstr ""
"``died`` излучает сигнал, когда персонаж умер. Мы будем использовать его для "
"скрытия интерфейса."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:228
msgid "``health_changed`` is emitted when the character got hit."
msgstr "``health_changed`` излучает, когда персонаж получил урон."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:232
msgid "We're connecting to the health\\_changed signal"
msgstr "Мы соединимся с сигналом health\\_changed"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:234
msgid ""
"Select ``health_changed`` and click on the Connect button in the bottom "
"right corner to open the Connect Signal window. On the left side you can "
"pick the node that will listen to this signal. Select the ``GUI`` node. The "
"right side of the screen lets you pack optional values with the signal. We "
"already took care of it in ``Player.gd``. In general I recommend not to add "
"too many arguments using this window as they're less convenient than doing "
"it from the code."
msgstr ""
"Выберите ``health_changed`` и кликните на кнопку \"Присоединить\" в правом "
"нижнем углу, чтобы открыть окно Соединения Сигнала. На левой стороне вы "
"можете выбрать узел, который будет слушать этот сигнал. Выберите узел "
"``GUI``. Правая сторона экрана позволит вам добавить дополнительные значения "
"к сигналу. Мы уже позаботились об этом в ``Player.gd``. В целом, я "
"рекомендую не добавлять слишком много аргументов, используя это окно, так "
"как делать это в нем менее удобно, чем в коде."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:244
msgid "The Connect Signal window with the GUI node selected"
msgstr "Окно подключения сигнала с выбранным узлом GUI"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:248
msgid ""
"You can optionally connect nodes from the code. However doing it from the "
"editor has two advantages:"
msgstr ""
"При необходимости можно подключить узлы из кода. Однако подключение из "
"редактора имеет два преимущества:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:250
msgid "Godot can write new callback functions for you in the connected script"
msgstr ""
"Godot может написать новые функции обратного вызова для вас в подключенном "
"скрипте"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:251
msgid ""
"An emitter icon appears next to the node that emits the signal in the Scene "
"dock"
msgstr ""
"Рядом с узлом, который излучает сигнал в панели сцен, появился значок "
"эмиттера"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:253
msgid ""
"At the bottom of the window you will find the path to the node you selected. "
"We're interested in the second row called \"Method in Node\". This is the "
"method on the ``GUI`` node that gets called when the signal is emitted. This "
"method receives the values sent with the signal and lets you process them. "
"If you look to the right, there is a \"Make Function\" radio button that is "
"on by default. Click the connect button at the bottom of the window. Godot "
"creates the method inside the ``GUI`` node. The script editor opens with the "
"cursor inside a new ``_on_Player_health_changed`` function."
msgstr ""
"В нижней части окна вы найдете путь к выбранному узлу. Мы заинтересованы во "
"втором поле под названием \"Method in Node\". Это метод на узле ``GUI``, "
"который вызывается при излучении сигнала. Этот метод получает значения, "
"отправленные с сигналом и позволяет обработать их. Если вы посмотрите "
"правее, там есть переключатель \"сделать функцию\", который включен по "
"умолчанию. Нажмите на кнопку подключения в нижней части окна. Godot создает "
"метод внутри узла ``GUI``. Откроется редактор скриптов с курсором внутри "
"новой функции ``_on_Player_health_changed``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:265
msgid ""
"When you connect nodes from the editor, Godot generates a method name with "
"the following pattern: ``_on_EmitterName_signal_name``. If you wrote the "
"method already, the \"Make Function\" option will keep it. You may replace "
"the name with anything you'd like."
msgstr ""
"При подключении узлов из редактора Godot создает имя метода по шаблону: "
"``_on_EmitterName_signal_name``. Если вы уже написали этот метод, опция "
"\"Сделать функцию\" будет сохранять его. Вы можете заменить имя на другое."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:272
msgid "Godot writes the callback method for you and takes you to it"
msgstr "Godot напишет метод обратного вызова для вас и доставит вас к нему"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:274
msgid ""
"Inside the parentheses after the function name, add a ``player_health`` "
"argument. When the player emits the ``health_changed`` signal, it will send "
"its current ``health`` alongside it. Your code should look like:"
msgstr ""
"В скобках после имени функции добавьте аргумент ``player_health``. Когда "
"игрок излучает сигнал ``health_changed``, он посылает его текущее ``health`` "
"вместе с ним. Код должен выглядеть так:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:292
msgid ""
"The engine does not convert PascalCase to snake_case, for C# examples we'll "
"be using PascalCase for method names & camelCase for method parameters, "
"which follows the official `C# naming conventions. <https://docs.microsoft."
"com/en-us/dotnet/standard/design-guidelines/capitalization-conventions>`_"
msgstr ""
"Обработчик не преобразует PascalCase в snake_case, для примеров C# мы будем "
"использовать PascalCase для имен методов и camelCase для параметров метода, "
"которые следуют за официальными `C# naming conventions. <https://docs."
"microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-"
"conventions>`_"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:299
msgid ""
"In Player.gd, when the Player emits the health\\_changed signal, it also "
"sends its health value"
msgstr ""
"В Player.gd, когда Player посылает сигнал health\\_changed, он также "
"посылает значение своего здоровья"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:302
msgid ""
"Inside ``_on_Player_health_changed``, let's call a second function called "
"``update_health`` and pass it the ``player_health`` variable."
msgstr ""
"Внутри ``_on_Player_health_changed`` давайте вызовем вторую функцию под "
"названием ``update_health`` и передадим ей переменную ``player_health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:307
msgid ""
"We could directly update the health value on `LifeBar` and `Number`. There "
"are two reasons to use this method instead:"
msgstr ""
"Мы можем напрямую изменить значение здоровья на `LifeBar` и `Number`. Есть "
"две причины использовать этот метод:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:309
msgid ""
"The name makes it clear for our future selves and teammates that when the "
"player took damage, we update the health count on the GUI"
msgstr ""
"Название дает понять, для нашего будущего себя и напарников, что когда игрок "
"получил урон, мы обновляем счетчик здоровья на GUI"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:310
msgid "We will reuse this method a bit later"
msgstr "Мы будем использовать этот метод чуть позже"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:312
msgid ""
"Create a new ``update_health`` method below ``_on_Player_health_changed``. "
"It takes a new\\_value as its only argument:"
msgstr ""
"Создать новый метод ``update_health`` ниже ``_on_Player_health_changed``. В "
"качестве единственного аргумента требуется new\\_value:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:327
msgid "This method needs to:"
msgstr "Этот метод должен:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:329
msgid ""
"set the ``Number`` node's ``text`` to ``new_value`` converted to a string"
msgstr ""
"задать свойству ``text`` узла ``Number`` значение ``new_value``, приведенное "
"к строковому типу"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:331
msgid "set the ``TextureProgress``'s ``value`` to ``new_value``"
msgstr ""
"задать свойству ``value`` узла ``TextureProgress`` значение ``new_value``"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:350
msgid ""
"``str`` is a built-in function that converts about any value to text. "
"``Number``'s ``text`` property requires a string, so we can't assign it to "
"``new_value`` directly"
msgstr ""
"``str`` – это встроенная функция, которая преобразует значение в текст. "
"Свойство ``text`` узла ``Number`` требует строку, поэтому мы не можем "
"назначить его в ``new_value`` напрямую"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:354
msgid ""
"Also call ``update_health`` at the end of the ``_ready`` function to "
"initialize the ``Number`` node's ``text`` with the right value at the start "
"of the game. Press :kbd:`F5` to test the game: the life bar updates with "
"every attack!"
msgstr ""
"Также вызов ``update_health`` в конце функции ``_ready`` инициализировать "
"``text`` узла ``Number`` с правильным значением в начале игры. Нажмите "
"клавишу :kbd:`F5`, чтобы протестировать игру: жизни обновляются при каждой "
"атаке!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:361
msgid ""
"Both the Number node and the TextureProgress update when the Player takes a "
"hit"
msgstr ""
"Оба узла Number и TextureProgress обновляются когда игрок принимает удар"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:365
msgid "Animate the loss of life with the Tween node"
msgstr "Анимировать смерть с помощью узла Tween"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:367
msgid ""
"Our interface is functional, but it could use some animation. That's a good "
"opportunity to introduce the ``Tween`` node, an essential tool to animate "
"properties. ``Tween`` animates anything you'd like from a start to an end "
"state over a certain duration. For example, it can animate the health on the "
"``TextureProgress`` from its current level to the ``Player``'s new "
"``health`` when the character takes damage."
msgstr ""
"Интерфейс нашей игры уже вполне рабочий, однако не помешает добавить немного "
"анимаций. В этом нам поможет узел ``Tween`` — незаменимый инструмент для "
"создания анимаций. ``Tween`` может плавно менять значение любого свойства, "
"которого вы только пожелаете. Например, когда игрок ``Player`` получает "
"урон, полоска здоровья ``TextureProgress`` уменьшается до текущего уровня "
"здоровья ``health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:374
msgid ""
"The ``GUI`` scene already contains a ``Tween`` child node stored in the "
"``tween`` variable. Let's now use it. We have to make some changes to "
"``update_health``."
msgstr ""
"Сцена ``GUI`` уже содержит дочерний узел ``Tween``, хрянящийся в переменной "
"``tween``. Давайте используем их. Но сначала мы должны произвести некоторые "
"изменения в ``update_health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:378
msgid ""
"We will use the ``Tween`` node's ``interpolate_property`` method. It takes "
"seven arguments:"
msgstr ""
"Мы будем использовать метод узла ``Tween``, который "
"называется ``interpolate_property`` и принимает семь аргументов:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:381
msgid "A reference to the node who owns the property to animate"
msgstr "Ссылка на узел, свойство которого мы будем анимировать"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:382
msgid "The property's identifier as a string"
msgstr "Идентификатор свойства в виде строки"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:383
msgid "The starting value"
msgstr "Начальное значение"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:384
msgid "The end value"
msgstr "Конечное значение"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:385
msgid "The animation's duration in seconds"
msgstr "Продолжительность анимации в секундах"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:386
msgid "The type of the transition"
msgstr "Тип перехода"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:387
msgid "The easing to use in combination with the equation."
msgstr "Легкость использования в сочетании с уравнением."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:389
msgid ""
"The last two arguments combined correspond to an easing equation. This "
"controls how the value evolves from the start to the end point."
msgstr ""
"Два последних аргумента в совокупности соответствуют `уравнению плавности "
"<#>`__. Этот параметр определяет, как изменяется значение от начала до конца."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:393
msgid ""
"Click the script icon next to the ``GUI`` node to open it again. The "
"``Number`` node needs text to update itself, and the ``Bar`` needs a float "
"or an integer. We can use ``interpolate_property`` to animate a number, but "
"not to animate text directly. We're going to use it to animate a new ``GUI`` "
"variable named ``animated_health``."
msgstr ""
"Нажмите на иконку скрипта рядом с узлом ``GUI``, чтобы открыть его снова. "
"Узлу ``Number`` нужен текст для обновления, а узлу ``Bar`` - дробное или "
"целое число. Мы можем использовать ``interpolate_property`` для анимирования "
"числа, но не для текста напрямую. Мы собираемся использовать его для "
"анимирования новой переменной ``GUI`` под названием ``animated_health``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:399
msgid ""
"At the top of the script, define a new variable, name it "
"``animated_health``, and set its value to 0. Navigate back to the "
"``update_health`` method and clear its content. Let's animate the "
"``animated_health`` value. Call the ``Tween`` node's "
"``interpolate_property`` method:"
msgstr ""
"В верхней части скрипта определите новую переменную, назовите ее "
"``animated_health`` и установите ее значение на 0. Вернитесь к методу "
"``update_health`` и очистите его содержимое. Давайте анимируем "
"``animated_health``. Вызываем метод узла ``Tween`` ``interpolate_property``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:421
msgid "Let's break down the call:"
msgstr "Давайте разберем этот вызов поподробнее:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:427
msgid ""
"We target ``animated_health`` on ``self``, that is to say the ``GUI`` node. "
"``Tween``'s interpolate\\_property takes the property's name as a string. "
"That's why we write it as ``\"animated_health\"``."
msgstr ""
"Мы нацеливаем ``animated_health`` на ``self``, то есть на узел ``GUI``. "
"Второе свойство interpolate\\_property узла ``Tween`` принимается в виде "
"строки. Вот почему мы пишем это как ``\"animated_health\"``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:435
msgid ""
"The starting point is the current value the bar's at. We still have to code "
"this part, but it's going to be ``animated_health``. The end point of the "
"animation is the ``Player``'s ``health`` after the ``health_changed``: "
"that's ``new_value``. And ``0.6`` is the animation's duration in seconds."
msgstr ""
"Отправной точкой является текущее значение шкалы. Мы все еще должны "
"закодировать эту часть, но это будет ``animated_health``. Конечной точкой "
"анимации является ``health`` игрока после ``health_changed``: это "
"``new_value``. А ``0.6`` - это длительность анимации в секундах."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:441
msgid ""
"The animation will not play until we activated the ``Tween`` node with "
"``tween.start()``. We only have to do this once if the node is not active. "
"Add this code after the last line:"
msgstr ""
"Анимация не будет воспроизводиться, пока мы не запустим узел ``Tween`` с "
"помощью функции `tween.start()``. Это нужно сделать только один раз, если "
"узел не активен. Добавьте этот код после последней строки:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:460
msgid ""
"Although we could animate the `health` property on the `Player`, we "
"shouldn't. Characters should lose life instantly when they get hit. It makes "
"it a lot easier to manage their state, like to know when one died. You "
"always want to store animations in a separate data container or node. The "
"`tween` node is perfect for code-controlled animations. For hand-made "
"animations, check out `AnimationPlayer`."
msgstr ""
"Хотя мы могли бы анимировать свойство `health` на `Player'e`, но не будем. "
"Персонажи должны терять жизнь мгновенно, когда они попадают под удар. Это "
"значительно облегчает управление их состоянием, например, знать, когда "
"человек умер. Вы всегда должны хранить анимацию в отдельном контейнере или "
"узле данных. Узел `tween` идеально подходит для анимации с кодовым "
"управлением. Анимацию ручной работы можно посмотреть в разделе "
"\"Анимационный проигрыватель\"."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:463
msgid "Assign the animated\\_health to the LifeBar"
msgstr "Присоединение animated\\_health к шкале здоровья"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:465
msgid ""
"Now the ``animated_health`` variable animates but we don't update the actual "
"``Bar`` and ``Number`` nodes anymore. Let's fix this."
msgstr ""
"Теперь переменная ``animated_health`` анимирована, но мы больше не обновляем "
"``Bar`` и ``Number`` узлы. Давай исправим это."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:468
msgid "So far, the update\\_health method looks like this:"
msgstr "Пока метод update\\_health выглядит следующим образом:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:492
msgid ""
"In this specific case, because ``number_label`` takes text, we need to use "
"the ``_process`` method to animate it. Let's now update the ``Number`` and "
"``TextureProgress`` nodes like before, inside of ``_process``:"
msgstr ""
"В данном конкретном случае, поскольку ``number_label`` принимает текст, нам "
"нужно использовать метод ``_process`` для его анимирования. Теперь обновим "
"узлы ``Number`` и ``TextureProgress`` как и до этого, внутри метода "
"``_process``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:514
msgid ""
"`number_label` and `bar` are variables that store references to the `Number` "
"and `TextureProgress` nodes."
msgstr ""
"Переменные `number_label` и `bar` хранят ссылки на узлы `Number` и "
"`TextureProgress`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:516
msgid ""
"Play the game to see the bar animate smoothly. But the text displays decimal "
"number and looks like a mess. And considering the style of the game, it'd be "
"nice for the life bar to animate in a choppier fashion."
msgstr ""
"Запустите игру, чтобы увидеть плавную анимацию шкалы. Но текст отображает "
"дробное число и выглядит не очень. А учитывая стиль игры, было бы неплохо, "
"если бы шкала здоровья анимировалась вертолётной манере."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:522
msgid "The animation is smooth, but the number is broken"
msgstr "Анимация гладкая, но число отображается криво"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:524
msgid ""
"We can fix both problems by rounding out ``animated_health``. Use a local "
"variable named ``round_value`` to store the rounded ``animated_health``. "
"Then assign it to ``number_label.text`` and ``bar.value``:"
msgstr ""
"Мы можем решить обе проблемы, округлив ``animated_health``. Используйте "
"локальную переменную под названием ``round_value`` для хранения округленной "
"``animated_health``. Затем присваиваются значения ``number_label.text`` и "
"``bar.value``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:546
msgid "Try the game again to see a nice blocky animation."
msgstr "Запустите игру еще раз, чтобы увидеть хорошую блочную анимацию."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:550
msgid "By rounding out animated\\_health, we kill two birds with one stone"
msgstr "Округляя animated\\_health, мы убиваем двух зайцев одним выстрелом"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:554
msgid ""
"Every time the player takes a hit, the ``GUI`` calls "
"``_on_Player_health_changed``, which in turn calls ``update_health``. This "
"updates the animation and the ``number_label`` and ``bar`` follow in "
"``_process``. The animated life bar that shows the health going down "
"gradually is a trick. It makes the GUI feel alive. If the ``Player`` takes 3 "
"damage, it happens in an instant."
msgstr ""
"Каждый раз, когда игрок получает удар, ``GUI`` вызывает "
"``_on_Player_health_changed``, который в свою очередь вызывает "
"``update_health``. Это обновляет анимацию и ``number_label`` и ``bar`` "
"направляются в ``_process``. Анимированная шкала здоровья, показывающий "
"постепенное снижение здоровья. Это делает GUI более оживленным. Если "
"``Player`` получит 3 удара, это произойдет в одно мгновение."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:562
msgid "Fade the bar when the Player dies"
msgstr "Исчезновение шкал, когда игрок умирает"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:564
msgid ""
"When the green character dies, it plays a death animation and fades out. At "
"this point, we shouldn't show the interface anymore. Let's fade the bar as "
"well when the character died. We will reuse the same ``Tween`` node as it "
"manages multiple animations in parallel for us."
msgstr ""
"Когда зеленый персонаж умирает, то проигрывается анимация смерти и он "
"пропадает. На данный момент, мы не должны больше показывать интерфейс. "
"Давайте когда персонаж погибает будет скрывать шкалы. Мы будем повторно "
"использовать один и тот же узел ``Tween``, поскольку он управляет "
"несколькими анимациями параллельно для нас."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:569
msgid ""
"First, the ``GUI`` needs to connect to the ``Player``'s ``died`` signal to "
"know when it died. Press :kbd:`Ctrl + F1` to jump back to the 2D Workspace. "
"Select the ``Player`` node in the Scene dock and click on the Node tab next "
"to the Inspector."
msgstr ""
"Во-первых, ``GUI`` необходимо подключиться к сигналу ``died`` у ``Player``, "
"чтобы узнать, когда тот умер. Нажмите :kbd:`Ctrl + F1` для возврата в 2D-"
"среду. Выберите узел ``Player`` в панели Сцен и щелкните на вкладку Узел "
"рядом с Инспектором."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:574
msgid "Find the ``died`` signal, select it, and click the Connect button."
msgstr ""
"Найдите сигнал ``died``, выберите его и нажмите кнопку Connect (Подключить)."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:578
msgid "The signal should already have the Enemy connected to it"
msgstr "Сигнал уже должен быть подключен к Enemy"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:580
msgid ""
"In the Connecting Signal window, connect to the ``GUI`` node again. The Path "
"to Node should be ``../../GUI`` and the Method in Node should show "
"``_on_Player_died``. Leave the Make Function option on and click Connect at "
"the bottom of the window. This will take you to the ``GUI.gd`` file in the "
"Script Workspace."
msgstr ""
"В окне Connecting Signal (Подключение сигнала) снова подключитесь к узлу "
"``GUI``. Путь к узлу должен быть ``../../GUI``, а метод в узле должен "
"показывать ``_on_Player_died``. Оставьте опцию Сделать Функцию включенной и "
"нажмите Подключить в нижней части окна. После этого вы перейдете в ``GUI."
"gd`` во вкладке Script."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:588
msgid "You should get these values in the Connecting Signal window"
msgstr ""
"Вы должны получить эти значения в окне Connecting Signal (Подключение "
"сигнала)"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:592
msgid ""
"You should see a pattern by now: every time the GUI needs a new piece of "
"information, we emit a new signal. Use them wisely: the more connections you "
"add, the harder they are to track."
msgstr ""
"Теперь вы должны увидеть закономерность: каждый раз, когда графическому "
"интерфейсу нужна новая информация, мы посылаем новый сигнал. Используйте их "
"разумно: чем больше связей вы добавляете, тем сложнее их отслеживать."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:594
msgid ""
"To animate a fade on a UI element, we have to use its ``modulate`` property. "
"``modulate`` is a ``Color`` that multiplies the colors of our textures."
msgstr ""
"Чтобы анимировать исчезновение на элементе UI, мы должны использовать его "
"свойство ``modulate``. Свойство ``modulate`` - это ``Color``, который "
"умножает цвета наших текстур."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:600
msgid ""
"`modulate` comes from the `CanvasItem` class, All 2D and UI nodes inherit "
"from it. It lets you toggle the visibility of the node, assign a shader to "
"it, and modify it using a color with `modulate`."
msgstr ""
"`modulate` наследуется из класса `CanvasItem`, от него наследуются все 2D и "
"UI узлы. Он позволяет переключать видимость узла, назначать ему шейдер и "
"изменять его цвет с помощью `modulate`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:602
msgid ""
"``modulate`` takes a ``Color`` value with 4 channels: red, green, blue and "
"alpha. If we darken any of the first three channels it darkens the "
"interface. If we lower the alpha channel, our interface fades out."
msgstr ""
"``modulate`` принимает значение ``Color`` с 4 каналами: красный, зеленый, "
"синий и альфа-канал. Если мы сделаем темнее любой из первых трех каналов, то "
"интерфейс будет темнее. Если мы снизим альфа-канал, наш интерфейс станет "
"прозрачным."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:606
msgid ""
"We're going to tween between two color values: from a white with an alpha of "
"``1``, that is to say at full opacity, to a pure white with an alpha value "
"of ``0``, completely transparent. Let's add two variables at the top of the "
"``_on_Player_died`` method and name them ``start_color`` and ``end_color``. "
"Use the ``Color()`` constructor to build two ``Color`` values."
msgstr ""
"Давайте анимировать переход от белого цвета с альфа-каналом ``1``, то есть "
"при полной непрозрачности, к чисто белому со значением альфа ``0``, то есть "
"полностью прозрачному. Добавим две переменные вверху метода "
"``_on_on_Player_died`` и назовем их ``start_color`` и ``end_color``. "
"Используйте конструктор ``Color()`` для построения двух ``Color`` значений."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:628
msgid ""
"``Color(1.0, 1.0, 1.0)`` corresponds to white. The fourth argument, "
"respectively ``1.0`` and ``0.0`` in ``start_color`` and ``end_color``, is "
"the alpha channel."
msgstr ""
"``Color(1.0, 1.0, 1.0, 1.0)`` соответствует белому цвету. Четвертый "
"аргумент, соответственно ``1.0`` и ``0.0`` в ``start_color`` и "
"``end_color``, - это альфа-канал."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:632
msgid ""
"We then have to call the ``interpolate_property`` method of the ``Tween`` "
"node again:"
msgstr "Затем снова вызываем метод ``interpolate_property`` узла ``Tween``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:645
msgid ""
"This time, we change the ``modulate`` property and have it animate from "
"``start_color`` to the ``end_color``. The duration is of one second, with a "
"linear transition. Here's the complete ``_on_Player_died`` method:"
msgstr ""
"На этот раз мы меняем свойство ``modulate`` и анимируем его от "
"``start_color`` к ``end_color``. Продолжительность составляет одну секунду, "
"с линейным переходом. Вот полный метод ``_on_on_Player_died``:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:669
msgid "And that is it. You may now play the game to see the final result!"
msgstr ""
"И все. Теперь вы можете запустить игру, чтобы увидеть конечный результат!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:673
msgid "The final result. Congratulations for getting there!"
msgstr "Конечный результат. Поздравляю, что добрались сюда!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:677
msgid ""
"Using the exact same techniques, you can change the color of the bar when "
"the Player gets poisoned, turn the bar red when its health drops low, shake "
"the UI when they take a critical hit... the principle is the same: emit a "
"signal to forward the information from the `Player` to the `GUI` and let the "
"`GUI` process it."
msgstr ""
"Используя те же методы, вы можете изменить цвет бара, когда игрока "
"отравляют, сделать бар красным, когда его здоровье падает, потрясти "
"пользовательский интерфейс, когда он получает критический удар... принцип "
"тот же самый: подать сигнал для передачи данных из `Player'a` в `GUI` и дать "
"`GUI` обработать их."
