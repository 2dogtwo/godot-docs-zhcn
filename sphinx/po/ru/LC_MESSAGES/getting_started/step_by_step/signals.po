# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 13:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:1
msgid "Signal"
msgstr "Сигнал"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Signals"
msgstr "Сигналы"

#: ../../docs/getting_started/step_by_step/signals.rst:10
msgid "Introduction"
msgstr "Введение"

#: ../../docs/getting_started/step_by_step/signals.rst:12
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"Сигналы в Godot являются реализацией программного шаблона *наблюдатель*. Они "
"позволяют узлу отправлять сообщения, которые другие узлы могут прослушивать "
"и на которые могут отвечать. Например, вместо того, чтобы постоянно "
"проверять, не нажата ли кнопка, можно просто выдать сигнал при нажатии."

#: ../../docs/getting_started/step_by_step/signals.rst:17
msgid ""
"You can read more about the observer pattern here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Вы можете прочитать больше о шаблоне наблюдателя здесь: http://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:19
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"Сигналы - это способ *разъединения* ваших игровых объектов, что делает код "
"более упорядоченным и управляемым. Вместо того чтобы принуждать игровые "
"объекты постоянно зависеть от существования других объектов, они могут "
"посылать сигналы, на которые все заинтересованные объекты могут реагировать."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"Ниже вы можете увидеть некоторые примеры того, как вы можете использовать "
"сигналы в ваших собственных проектах."

#: ../../docs/getting_started/step_by_step/signals.rst:27
msgid "Timer example"
msgstr "Пример таймера"

#: ../../docs/getting_started/step_by_step/signals.rst:29
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"Чтобы увидеть, как работают сигналы, давайте попробуем использовать узел :"
"ref:`Timer <class_Timer>. Создайте новую сцену с узлом Node2D и двумя "
"дочерними узлами: Timer и :ref:`Sprite <class_Sprite>`. На панели Сцена "
"переименуйте Node2D в TimerExample."

#: ../../docs/getting_started/step_by_step/signals.rst:33
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Для текстуры Спрайта вы можете использовать иконку Godot или любое другое "
"желаемое изображение. Сделайте это выбрав ``Загрузить`` в выпадающем меню "
"атрибута Texture узла Sprite. Прикрепите скрипт к корневому узлу, но пока не "
"добавляйте никакого кода."

#: ../../docs/getting_started/step_by_step/signals.rst:37
msgid "Your scene tree should look like this:"
msgstr "Дерево сцены должно выглядеть так:"

#: ../../docs/getting_started/step_by_step/signals.rst:41
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"В свойствах узла Timer установите флажок \"Вкл\" рядом с полем *Autostart*. "
"Это приведет к автоматическому запуску таймера при запуске сцены. Вы можете "
"оставить *Wait Time* в 1 секунду."

#: ../../docs/getting_started/step_by_step/signals.rst:45
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"Рядом с вкладкой \"Инспектор\" находится вкладка \"Узел\". Нажмите на эту "
"вкладку, и вы увидите все сигналы, которые выбранный узел может посылать. В "
"случае с узлом Timer всё, что нас интересует, это \"timeout\". Этот сигнал "
"отправляется каждый раз, когда таймер достигает ``0``."

#: ../../docs/getting_started/step_by_step/signals.rst:52
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"Нажмите на сигнал «timeout()» и нажмите «Присоединить...» в нижней части "
"панели сигналов. Вы увидите следующее окно, где вы можете определить, как вы "
"хотите подключить сигнал:"

#: ../../docs/getting_started/step_by_step/signals.rst:58
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"На левой стороне вы увидите узлы в вашей сцене и можете выбрать узел, "
"который вы хотите использовать для \"прослушки\" сигнала. Обратите внимание, "
"что узел Timer является синим - это визуальный признак того, что это узел, "
"который передает сигнал. Выберите корневой узел."

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"На выбранный узел *должен* быть прикреплен скрипт, иначе вы получите "
"сообщение об ошибке."

#: ../../docs/getting_started/step_by_step/signals.rst:66
msgid ""
"If you toggle the Advanced menu, you'll see on the right side that you can "
"bind an arbitrary number of arguments of (possibly) different types. This "
"can be useful when you have more than one signal connected to the same "
"method, as each signal propagation will result in different values for those "
"extra call arguments."
msgstr ""
"Если вы развернете дополнительное меню, то с правой стороны вы можете "
"связать произвольное количество аргументов (возможно) разных типов. Это "
"может быть полезно, когда к одному и тому же методу подключено более одного "
"сигнала, поскольку каждое распространение сигнала приведет к различным "
"значениям для этих дополнительных аргументов вызова."

#: ../../docs/getting_started/step_by_step/signals.rst:70
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"В нижней части окна находится поле с надписью \"Метод-приёмник\". Это имя "
"функции в скрипте целевого узла, который вы хотите использовать. По "
"умолчанию Godot создаст эту функцию, используя соглашение об именовании "
"``_on_<node_name>_<signal_name>``, но вы можете изменить его по своему "
"усмотрению."

#: ../../docs/getting_started/step_by_step/signals.rst:75
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"Нажмите кнопку \"Присоединить\", и вы увидите, что функция была создана в "
"скрипте:"

#: ../../docs/getting_started/step_by_step/signals.rst:96
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"Теперь мы можем заменить изначальный код на любой код, который мы хотим "
"запустить при получении сигнала. Давайте заставим спрайт мигать:"

#: ../../docs/getting_started/step_by_step/signals.rst:121
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"Запустите сцену, и вы увидите что спрайт мигает и пропадает каждую секунду. "
"Можно изменить свойство таймера *Wait Time*, чтобы изменить частоту мигания."

#: ../../docs/getting_started/step_by_step/signals.rst:125
msgid "Connecting signals in code"
msgstr "Подключение сигналов в коде"

#: ../../docs/getting_started/step_by_step/signals.rst:127
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"Вы также можете присоединить сигнал в коде, а не в редакторе. Это обычно "
"необходимо при создании экземпляров узлов с помощью кода и поэтому "
"невозможно использовать редактор для подключения."

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"Во-первых, отключите сигнал, выбрав подключенный сигнал таймера на вкладке "
"\"Узел\" и нажав \"Отсоединить\"."

#: ../../docs/getting_started/step_by_step/signals.rst:136
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"Чтобы присоединить сигнал в коде, мы можем использовать функцию ``connect``. "
"Мы поставим его в ``_ready()`` так, что соединение будет сделано сразу при "
"запуске сцены. Синтаксис функции ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Вот код для подключения нашего "
"таймера:"

#: ../../docs/getting_started/step_by_step/signals.rst:171
msgid "Custom signals"
msgstr "Пользовательские сигналы"

#: ../../docs/getting_started/step_by_step/signals.rst:173
msgid "You can also declare your own custom signals in Godot:"
msgstr ""
"Вы также можете объявить свои собственные пользовательские сигналы в Godot:"

#: ../../docs/getting_started/step_by_step/signals.rst:192
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"После объявления ваши пользовательские сигналы будут появляться в инспекторе "
"и могут быть соединены так же, как и встроенные сигналы узла."

#: ../../docs/getting_started/step_by_step/signals.rst:195
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr "Чтобы отправить сигнал через код, используйте функцию ``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:222
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""
"Сигнал также может опционально объявлять один или несколько аргументов. "
"Укажите имена аргументов в круглых скобках:"

#: ../../docs/getting_started/step_by_step/signals.rst:243
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Эти аргументы показываются в док-узлах редактора, и Godot может использовать "
"их, чтобы производить для вас функции обратного вызова. Однако, вы всё ещё "
"можете отправлять любое число аргументов при отправке сигналов; отправка "
"правильных значений зависит от вас."

#: ../../docs/getting_started/step_by_step/signals.rst:248
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr ""
"Чтобы передать значения, добавьте их в качестве второго аргумента в функцию "
"``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:276
msgid "Conclusion"
msgstr "Вывод"

#: ../../docs/getting_started/step_by_step/signals.rst:278
#, fuzzy
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Многие встроенные в Godot типы узлов предоставляют сигналы, которые можно "
"использовать для обнаружения событий. Например, объект :ref:`Area2D "
"<class_Area2D>`, представленный в виде монетки, посылает сигнал "
"``body_entered``(тело_вошло) всякий раз, когда физическое тело игрока входит "
"в ее форму столкновения (коллизии), давая вам знать, когда игрок её собрал."

#: ../../docs/getting_started/step_by_step/signals.rst:283
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"В следующем разделе :ref:`doc_your_first_game`, вы будете делать готовую "
"игру, с использованием некоторых видов сигналов для подключения различных "
"игровых компонентов."
