# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2022, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-24 15:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Signal"
msgstr "Сигнал"

#, fuzzy
msgid "Using Signals"
msgstr "Привязка сигналов"

msgid ""
"In this lesson, we will look at signals. They are messages that nodes emit "
"when something specific happens to them, like a button being pressed. Other "
"nodes can connect to that signal and call a function when the event occurs."
msgstr ""

msgid ""
"It is a delegation mechanism built into Godot that allows one game object to "
"react to a change in another without them referencing one another. Using "
"signals limits `coupling <https://en.wikipedia.org/wiki/"
"Coupling_(computer_programming)>`_ and keeps your code flexible."
msgstr ""

msgid ""
"For example, you might have a life bar on the screen that represents the "
"player’s health. When the player takes damage or uses a healing potion, you "
"want the bar to reflect the change. To do so, in Godot, you would use "
"signals."
msgstr ""

#, fuzzy
msgid ""
"As mentioned in the introduction, signals are Godot's version of the "
"observer pattern. You can learn more about it here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Подробнее о шаблоне наблюдателя можно прочитать здесь: https://"
"gameprogrammingpatterns.com/observer.html"

msgid ""
"We will now use a signal to make our Godot icon from last part move and stop "
"by pressing a button."
msgstr ""

msgid "Scene setup"
msgstr "Настройка сцены"

msgid "Create a new scene by going to the menu Scene -> New Scene."
msgstr ""

msgid ""
"In the Scene dock, click the 2D Scene button. This will add a Node2D as our "
"root."
msgstr ""

msgid ""
"In the FileSystem dock, click and drag the ``Sprite.tscn`` file you saved "
"previously onto the Node2D to instantiate it."
msgstr ""

msgid ""
"We want to add another node as a sibling of the Sprite. To do so, right-"
"click on Node2D and select Add Child Node."
msgstr ""

msgid "Search for the Button node type and add it."
msgstr ""

msgid ""
"The node is small by default. Click and drag on the bottom-right handle of "
"the Button in the viewport to resize it."
msgstr ""

#, fuzzy
msgid ""
"If you don't see the handles, ensure the select tool is active in the "
"toolbar."
msgstr ""
"Если вы не увидели изменений, перезагрузите сцену (закройте и откройте "
"снова)."

msgid "Click and drag on the button itself to move it closer to the sprite."
msgstr ""

msgid ""
"You can also write a label on the Button by editing its Text property in the "
"Inspector."
msgstr ""

#, fuzzy
msgid "Your scene tree and viewport should look like this."
msgstr "Дерево сцены должно выглядеть так:"

#, fuzzy
msgid "Connecting a signal in the editor"
msgstr "Подключение сигналов в коде"

msgid ""
"Here, we want to connect the Button's \"pressed\" signal to our Sprite, and "
"we want to call a new function that will toggle its motion on and off. We "
"need to have a script attached to the Sprite node, which we do from the "
"previous lesson."
msgstr ""

msgid ""
"You can connect signals in the Node dock. Select the Button node and, on the "
"right side of the editor, click on the tab named \"Node\" next to the "
"Inspector."
msgstr ""

msgid "The dock displays a list of signals available on the selected node."
msgstr ""

msgid "Double-click the \"pressed\" signal to open the node connection window."
msgstr ""

msgid ""
"There, you can connect the signal to the Sprite node. The node needs a "
"receiver method, a function that Godot will call when the Button emits the "
"signal. The editor generates one for you. By convention, we name these "
"callback methods \"_on_NodeName_signal_name\". Here, it'll be "
"\"_on_Button_pressed\"."
msgstr ""

msgid ""
"When connecting signals via the editor's Node dock, you can use two modes. "
"The simple one only allows you to connect to nodes that have a script "
"attached to them and creates a new callback function on them."
msgstr ""

msgid ""
"The advanced view lets you connect to any node and any built-in function, "
"add arguments to the callback, and set options. You can toggle the mode in "
"the window's bottom-right by clicking the radio button."
msgstr ""

msgid ""
"Click the connect button to complete the signal connection and jump to the "
"Script workspace. You should see the new method with a connection icon in "
"the left margin."
msgstr ""

msgid ""
"If you click the icon, a window pops up and displays information about the "
"connection. This feature is only available when connecting nodes in the "
"editor."
msgstr ""

msgid ""
"Let's replace the line with the ``pass`` keyword with code that'll toggle "
"the node's motion."
msgstr ""

msgid ""
"Our Sprite moves thanks to code in the ``_process()`` function. Godot "
"provides a method to toggle processing on and off: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Another method of the Node class, "
"``is_processing()``, returns ``true`` if idle processing is active. We can "
"use the ``not`` keyword to invert the value."
msgstr ""

msgid ""
"This function will toggle processing and, in turn, the icon's motion on and "
"off upon pressing the button."
msgstr ""

msgid ""
"Before trying the game, we need to simplify our ``_process()`` function to "
"move the node automatically and not wait for user input. Replace it with the "
"following code, which we saw two lessons ago:"
msgstr ""

#, fuzzy
msgid "Your complete ``Sprite.gd`` code should look like the following."
msgstr "Дерево сцены должно выглядеть так:"

#, fuzzy
msgid ""
"Run the scene now and click the button to see the sprite start and stop."
msgstr ""
"Запустите сцену и нажмите кнопку. Вы должны получить следующий результат:"

#, fuzzy
msgid "Connecting a signal via code"
msgstr "Подключение сигналов в коде"

msgid ""
"You can connect signals via code instead of using the editor. This is "
"necessary when you create nodes or instantiate scenes inside of a script."
msgstr ""

msgid ""
"Let's use a different node here. Godot has a :ref:`Timer <class_Timer>` node "
"that's useful to implement skill cooldown times, weapon reloading, and more."
msgstr ""

#, fuzzy
msgid ""
"Head back to the 2D workspace. You can either click the \"2D\" text at the "
"top of the window or press :kbd:`Ctrl + F1` (:kbd:`Alt + 1` on macOS)."
msgstr ""
"В **3D рабочем пространстве** вы можете работать с сетками (mesh), "
"освещением и проектированием уровней для 3D-игр. Нажмите :kbd:`Ctrl + F2` "
"(или :kbd:`Alt + 2` на macOS) для доступа к нему."

msgid ""
"In the Scene dock, right-click on the Sprite node and add a new node. Search "
"for Timer and add the corresponding node. Your scene should now look like "
"this."
msgstr ""

msgid ""
"With the Timer node selected, go to the Inspector and check the "
"**Autostart** property."
msgstr ""

msgid ""
"Click the script icon next to Sprite to jump back to the scripting workspace."
msgstr ""

msgid "We need to do two operations to connect the nodes via code:"
msgstr ""

#, fuzzy
msgid "Get a reference to the Timer from the Sprite."
msgstr "Ссылка на узел, свойство которого мы будем анимировать"

msgid "Call the Timer's ``connect()`` method."
msgstr ""

msgid ""
"To connect to a signal via code, you need to call the ``connect()`` method "
"of the node you want to listen to. In this case, we want to listen to the "
"Timer's \"timeout\" signal."
msgstr ""

msgid ""
"To get a reference to a node relative to the current one, we use the method :"
"ref:`Node.get_node() <class_Node_method_get_node>`. We can store the "
"reference in a variable."
msgstr ""

msgid ""
"The function ``get_node()`` looks at the Sprite's children and gets nodes by "
"their name. For example, if you renamed the Timer node to \"BlinkingTimer\" "
"in the editor, you would have to change the call to "
"``get_node(\"BlinkingTimer\")``."
msgstr ""

msgid ""
"We can now connect the Timer to the Sprite in the ``_ready()`` function."
msgstr ""

msgid ""
"The line reads like so: we connect the Timer's \"timeout\" signal to the "
"node to which the script is attached (``self``). When the Timer emits "
"\"timeout\", we want to call the function \"_on_Timer_timeout\", that we "
"need to define. Let's add it at the bottom of our script and use it to "
"toggle our sprite's visibility."
msgstr ""

msgid ""
"The ``visible`` property is a boolean that controls the visibility of our "
"node. The line ``visible = not visible`` toggles the value. If ``visible`` "
"is ``true``, it becomes ``false``, and vice-versa."
msgstr ""

msgid "Custom signals"
msgstr "Пользовательские сигналы"

msgid ""
"You can define custom signals in a script. Say, for example, that you want "
"to show a game over screen when the player's health reaches zero. To do so, "
"you could define a signal named \"died\" or \"health_depleted\" when their "
"health reaches 0."
msgstr ""

msgid ""
"As signals represent events that just occurred, we generally use an action "
"verb in the past tense in their names."
msgstr ""

msgid ""
"Your signals work the same way as built-in ones: they appear in the Node tab "
"and you can connect to them like any other."
msgstr ""

#, fuzzy
msgid "To emit a signal in your scripts, call ``emit_signal()``."
msgstr "Чтобы отправить сигнал через код, используйте функцию ``emit_signal``:"

#, fuzzy
msgid ""
"A signal can optionally declare one or more arguments. Specify the argument "
"names between parentheses:"
msgstr ""
"Сигнал также может опционально объявлять один или несколько аргументов. "
"Укажите имена аргументов в круглых скобках:"

msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Эти аргументы показываются в док-узлах редактора, и Godot может использовать "
"их, чтобы производить для вас функции обратного вызова. Однако, вы всё ещё "
"можете отправлять любое число аргументов при отправке сигналов; отправка "
"правильных значений зависит от вас."

#, fuzzy
msgid ""
"To emit values along with the signal, add them as extra arguments to the "
"``emit_signal()`` function:"
msgstr ""
"Чтобы передать значения, добавьте их в качестве второго аргумента в функцию "
"``emit_signal``:"

msgid "Summary"
msgstr "Подведение итогов"

msgid ""
"Any node in Godot emits signals when something specific happens to them, "
"like a button being pressed. Other nodes can connect to individual signals "
"and react to selected events."
msgstr ""

msgid ""
"Signals have many uses. With them, you can react to a node entering or "
"exiting the game world, to a collision, to a character entering or leaving "
"an area, to an element of the interface changing size, and much more."
msgstr ""

#, fuzzy
msgid ""
"For example, an :ref:`Area2D <class_Area2D>` representing a coin emits a "
"``body_entered`` signal whenever the player's physics body enters its "
"collision shape, allowing you to know when the player collected it."
msgstr ""
"Многие встроенные в Godot узлы предоставляют сигналы, которые можно "
"использовать для обнаружения событий. Например, объект :ref:`Area2D "
"<class_Area2D>`, представленный в виде монетки, посылает сигнал "
"``body_entered`` (тело_вошло) всякий раз, когда физическое тело игрока "
"входит в ее форму столкновения (коллизии), давая вам знать, когда игрок её "
"собрал."

#, fuzzy
msgid ""
"In the next section, :ref:`doc_your_first_2d_game`, you'll create a complete "
"2D game and put everything you learned so far into practice."
msgstr ""
"В следующем разделе :ref:`doc_your_first_game`, вы будете делать готовую "
"игру, с использованием некоторых видов сигналов для подключения различных "
"игровых компонентов."

#, fuzzy
msgid "Translation status"
msgstr "Translation format (формат перевода)"
