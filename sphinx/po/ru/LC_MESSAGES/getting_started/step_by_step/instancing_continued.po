# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-01 14:18+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:4
msgid "Instancing (continued)"
msgstr "Создание экземпляра (продолжение)"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:7
msgid "Recap"
msgstr "Резюме"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:9
msgid "Instancing has many handy uses. At a glance, with instancing you have:"
msgstr ""
"У экземпляров есть много полезных применений. С помощью экземпляров вы "
"можете:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:11
msgid "The ability to subdivide scenes and make them easier to manage."
msgstr "Возможность разделить сцены и сделать управление ими проще."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:12
msgid "A tool to manage and edit multiple node instances at once."
msgstr ""
"Инструмент для управления и редактирования нескольких экземпляров узлов "
"одновременно."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:13
msgid ""
"A way to organize and embed complex game flows or even UIs (in Godot, UI "
"Elements are nodes, too)."
msgstr ""
"Способ организации и внедрения сложных игровых потоков или даже "
"пользовательского интерфейса (в Godot элементы пользовательского интерфейса "
"тоже являются узлами)."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:17
msgid "Design language"
msgstr "Дизайн"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:19
msgid ""
"But the greatest strength that comes with instancing scenes is that it works "
"as an excellent design language. This is pretty much what distinguishes "
"Godot from all the other engines out there. Godot was designed from the "
"ground up around this concept."
msgstr ""
"Но самое большое достоинство, которое получаем при создании экземпляра сцены "
"заключается в том, что это работает как отличный дизайн. Это в значительной "
"степени отличает Godot от всех других движков. Godot  был разработан с нуля "
"вокруг этой концепции."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:24
msgid ""
"When making games with Godot, the recommended approach is to dismiss most "
"common design patterns, such as MVC or Entity-Relationship diagrams, and "
"instead think about your scenes in a more natural way. Start by imagining "
"the visible elements in your game, the ones that can be named not just by a "
"programmer, but by anyone."
msgstr ""
"При создании игр с помощью Godot рекомендуется отклонить наиболее "
"распространенные шаблоны проектирования, такие как MVC или диаграммы "
"отношений сущностей, и вместо этого думать о своих сценах более естественным "
"образом. Начните с воображения видимых элементов в вашей игре, тех, которые "
"может назвать не только программист, но и кто угодно."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:30
msgid "For example, here's how a simple shooter game could be imagined:"
msgstr "Например, вот как можно представить себе простую игру-шутер:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:34
msgid ""
"You can come up with a diagram like this for almost any kind of game. Write "
"down the parts of the game that you can visualize, and then add arrows to "
"represent ownership of one component by another."
msgstr ""
"Вы можете придумать такую схему практически для любой игры. Запишите части "
"игры, которые вы можете визуализировать, а затем добавьте стрелки, чтобы "
"показать принадлежность одних компонентов другим."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:38
msgid ""
"Once you have a diagram like this, the recommended process for making a game "
"is to create a scene for each element listed in the diagram. You'll use "
"instancing (either by code or directly in the editor) for the ownership "
"relationships."
msgstr ""
"Как только вы получите такую схему, рекомендуем вам создать сцены для "
"каждого элемента игры, указанного на схеме, так же используйте создание "
"экземпляров (либо в коде, либо непосредственно в редакторе) для задания "
"принадлежности одних компонентов к другим."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:42
msgid ""
"A lot of time spent in programming games (or software in general) is on "
"designing an architecture and fitting game components to that architecture. "
"Designing based on scenes replaces that approach and makes development much "
"faster and more straightforward, allowing you to concentrate on the game "
"logic itself. Because most game components map directly to a scene, using a "
"design based on scene instantiation means little other architectural code is "
"needed."
msgstr ""
"В программировании игр (и в разработке вообще) много времени тратится на "
"проектирование архитектуры самой игры и взаимосвязей между ее компонентами в "
"рамках созданной архитектуры. Проектирование на основе сцен заменяет этот "
"подход и делает разработку намного быстрее и более простой, позволяя вам "
"сосредоточиться на самой логике игры. Поскольку большинство игровых "
"компонентов отображаются непосредственно в сцене, то использование дизайна "
"основанного на создании экземпляра сцены означает, что требуется немного "
"другой подход для ее построения."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:48
msgid ""
"Let's take a look at one more, somewhat more complex, example of an open-"
"world type game with lots of assets and nested elements:"
msgstr ""
"Рассмотрим еще один, несколько более сложный пример игры открытого типа с "
"большим количеством ресурсов и вложенных элементов:"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:53
msgid ""
"Take a look at the room element. Let's say we started there. We could make a "
"couple of different room scenes, with different arrangements of furniture "
"(also scenes) in them. Later, we could make a house scene, connecting rooms "
"to make up its interior."
msgstr ""
"Взгляните на такой элемент как комната. Допустим, мы начнем от туда. Мы "
"могли бы сделать несколько различных сцен комнат, с различными "
"расположениями мебели (также сцены) в них. Позже мы могли бы сделать сцену "
"дома, соединяя комнаты, чтобы создать его интерьер."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:58
msgid ""
"Then, we could make a citadel scene, which is made out of many instanced "
"houses. Then, we could start working on the world map terrain, adding the "
"citadel onto it."
msgstr ""
"Затем мы могли бы сделать сцену крепости, которая сделана из многих "
"экземпляров домов. Затем мы могли бы начать работать над рельефом карты "
"мира, добавив на нее нашу крепость."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:62
msgid ""
"Later, we could create scenes that represent guards (and other NPCs) and add "
"them to the citadel as well. As a result, they would be indirectly added to "
"the overall game world."
msgstr ""
"Позже мы можем создать сцены, которые представляют собой охранников (и "
"других NPC) и добавить их в нашу крепость. В результате, они будут косвенно "
"добавлены в общий игровой мир."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:66
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instance more scenes. Furthermore, the editor UI is "
"designed to be user friendly for programmers and non-programmers alike. A "
"typical team development process can involve 2D or 3D artists, level "
"designers, game designers, and animators, all working with the editor "
"interface."
msgstr ""
"С Godot, это легко повторить и в вашей игре,  все что вам нужно сделать, это "
"создать больше экземпляров  сцен. Кроме того, пользовательский интерфейс "
"редактора разработан, чтобы быть удобным как для программистов так и не "
"программистов. Типичный состав команды разработчиков может включать в себя "
"2D или 3D художников, дизайнеров уровней, гейм-дизайнеров и аниматоров, и "
"все работают с одним интерфейсом редактора."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:73
msgid "Information overload!"
msgstr "Информационная перегрузка!"

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:75
msgid ""
"This has been a lot of high level information dropped on you all at once. "
"However, the important part of this tutorial was to create an awareness of "
"how scenes and instancing are used in real projects."
msgstr ""
"Было много информации, что навалилась на вас сразу. Тем не менее, важной "
"частью этого урока было освещение вопроса о том, как сцены и создание их "
"экземпляров используются в реальных проектах."

#: ../../docs/getting_started/step_by_step/instancing_continued.rst:79
msgid ""
"Everything discussed here will become second nature to you once you start "
"making games and putting these concepts into practice. For now, don't worry "
"about it too much, and go on to the next tutorial!"
msgstr ""
"Все, что здесь оговаривалось, станет для вас второй натурой, как только вы "
"начнете делать игры и применять эти знания на практике. На данный момент, не "
"беспокойтесь об этом слишком много, и переходите к следующему уроку!"
