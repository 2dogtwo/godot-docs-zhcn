# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-04 09:58+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:4
msgid "Static typing in GDScript"
msgstr "Статична типізація в GDScript"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:6
msgid "In this guide, you will learn:"
msgstr "У цьому посібнику ви дізнаєтесь:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:8
msgid "**How to use types in GDScript**"
msgstr "**Як використовувати типи в GDScript**"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:9
msgid "That **static types can help you avoid bugs**"
msgstr "Що **статичні типи можуть допомогти вам уникнути помилок**"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:11
msgid ""
"Where and how you use this new language feature is entirely up to you: you "
"can use it only in some sensitive GDScript files, use it everywhere, or "
"write code like you always did!"
msgstr ""
"Де і як ви користуєтеся цією новою мовною функцією, залежить тільки від вас: "
"ви можете використовувати її лише в деяких чутливих файлах GDScript, "
"користуватися скрізь або писати код, як раніше!"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:15
msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Статичні типи можна використовувати для змінних, констант, функцій, "
"параметрів та типів повернення."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:20
msgid "Typed GDScript is available since Godot 3.1."
msgstr "Типізований GDScript доступний з Godot 3.1."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:23
msgid "A brief look at static typing"
msgstr "Короткий огляд статичної типізації"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:25
#, fuzzy
msgid ""
"With typed GDScript, Godot can detect even more errors as you write code! It "
"gives you and your teammates more information as you're working, as the "
"arguments' types show up when you call a method."
msgstr ""
"За допомогою типізованого GDScript, Godot може виявити ще більше помилок під "
"час написання коду! Це дає вам та вашим товаришам по команді більше "
"інформації під час роботи, оскільки типи аргументів з’являються під час "
"виклику методу."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:29
#, fuzzy
msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` node, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add`` "
"method. With types, you can enforce this:"
msgstr ""
"Уявіть, що ви програмуєте систему інвентаризації. Ви кодуєте вузол ``Item``, "
"а потім ``Inventory``. Щоб додати елементи в інвентар, люди, які працюють з "
"вашим кодом, повинні завжди передавати ``Item`` до методу ``Inventory.add``. "
"За допомогою типів ви можете застосувати це:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:49
msgid ""
"Another significant advantage of typed GDScript is the new **warning "
"system**. From version 3.1, Godot gives you warnings about your code as you "
"write it: the engine identifies sections of your code that may lead to "
"issues at runtime, but lets you decide whether or not you want to leave the "
"code as it is. More on that in a moment."
msgstr ""
"Ще одна істотна перевага типізованого GDScript - нова **система "
"попередження**. З версії 3.1 Godot дає вам попередження про ваш код під час "
"його написання: движок визначає розділи вашого коду, які можуть призвести до "
"проблем під час виконання, але дозволяє вирішити, чи хочете ви залишити код "
"таким, яким він є. Більше про це за мить."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:55
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options "
"for a class called ``PlayerController``."
msgstr ""
"Статичні типи також дають кращі варіанти заповнення коду. Нижче ви можете "
"побачити різницю між динамічною та статичною типізацією варіантів завершення "
"для класу, який називається ``PlayerController``."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:59
#, fuzzy
msgid ""
"You've probably stored a node in a variable before, and typed a dot to be "
"left with no autocomplete suggestions:"
msgstr ""
"Ви, ймовірно, раніше зберігали вузол у змінній і набирали крапку, щоб не "
"залишалося пропозицій щодо автозаповнення:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:65
#, fuzzy
msgid ""
"This is due to dynamic code. Godot cannot know what node or value type "
"you're passing to the function. If you write the type explicitly however, "
"you will get all public methods and variables from the node:"
msgstr ""
"Це пов'язано з динамічним кодом. Godot не може знати, який вузол, або тип "
"значення, ви передаєте до функції. Якщо ви явно напишете тип, ви отримаєте "
"всі відкриті методи та змінні з вузла:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:72
msgid ""
"In the future, typed GDScript will also increase code performance: Just-In-"
"Time compilation and other compiler improvements are already on the roadmap!"
msgstr ""
"В майбутньому типізований GDScript також збільшить продуктивність коду: "
"компіляція Just-In-Time та інші вдосконалення компілятора вже є у планах!"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:76
#, fuzzy
msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"Загалом, типізоване програмування дає вам більш структурований досвід. Воно "
"допомагає запобігти помилкам і покращує само-документування аспектів ваших "
"скриптів. Це особливо корисно, коли ви працюєте в команді, або над "
"довготривалим проектом: дослідження показали, що розробники проводять більшу "
"частину свого часу за читанням кодів інших людей, або скриптів, які вони "
"писали раніше і про які вже забули. Чим чіткіший і структурований код, тим "
"легше його зрозуміти, і тим швидше ви зможете рухатися далі."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:85
msgid "How to use static typing"
msgstr "Як використовувати статичну типізацію"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:87
#, fuzzy
msgid ""
"To define the type of a variable or a constant, write a colon after the "
"variable's name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same:"
msgstr ""
"Щоб визначити тип змінної, або константи, напишіть двокрапку після імені "
"змінної, а потім її тип. Наприклад ``var health: int``. Це змушує тип "
"змінної завжди залишатися незмінним:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:96
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type:"
msgstr ""
"Godot спробує визначити тип самостійно, якщо ви напишете двокрапку, але не "
"вкажете тип:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:105
msgid "Currently you can use three types of… types:"
msgstr "Наразі ви можете використовувати три варіанти… типів:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:107
msgid ":ref:`Built-in <doc_gdscript_builtin_types>`"
msgstr ":ref:`Вбудовані <doc_gdscript_builtin_types>`"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:108
msgid ""
"Core classes and nodes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)"
msgstr ""
"Основні класи і вузли (``Object``, ``Node``, ``Area2D``, ``Camera2D``, і так "
"далі)"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:110
msgid ""
"Your own, custom classes. Look at the new :ref:`class_name "
"<doc_scripting_continued_class_name>` feature to register types in the "
"editor."
msgstr ""
"Ваші власні, власні класи. Подивіться на нову функцію :ref:`class_name "
"<doc_scripting_continued_class_name>` для реєстрації типів у редакторі."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:115
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer."
msgstr ""
"Не потрібно писати підказки типу для констант, оскільки Godot встановлює їх "
"автоматично з призначеного значення. Але ви все одно можете зробити це, якщо "
"хочете прояснити зміст вашого коду."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:118
msgid "Custom variable types"
msgstr "Власні типи змінних"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:120
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant:"
msgstr ""
"Ви можете використовувати будь-який клас, включаючи власні класи, як типи. "
"Існує два способи їх використання в скриптах. Перший спосіб - це попередньо "
"завантажити скрипт, який ви хочете використовувати як тип, у константі:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:129
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your Rifle.gd would look like this:"
msgstr ""
"Другий спосіб - використовувати при створенні ключове слово ``class_name``. "
"У наведеному вище прикладі ваш Rifle.gd виглядатиме так:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:137
msgid ""
"If you use ``class_name``, Godot registers the Rifle type globally in the "
"editor, and you can use it anywhere, without having to preload it into a "
"constant:"
msgstr ""
"Якщо ви використовуєте ``class_name``, Godot реєструє тип Rifle глобально в "
"редакторі, і ви можете ним користуватися будь-де, не потребуючи попереднього "
"завантаження в константу:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:146
#, fuzzy
msgid "Variable casting"
msgstr "Змінні"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:148
msgid ""
"Type casting is a key concept in typed languages. Casting is the conversion "
"of a value from one type to another."
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:151
#, fuzzy
msgid ""
"Imagine an Enemy in your game, that ``extends Area2D``. You want it to "
"collide with the Player, a ``KinematicBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``on_body_entered`` signal "
"to detect the collision. With typed code, the body you detect is going to be "
"a generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Уявіть у своїй грі Ворога, ``extends Area2D``. Ви хочете, щоб він стикався з "
"гравцем, ``KinematicBody2D`` зі скриптом, який називається "
"``PlayerController``. Ви використовуєте сигнал ``on_body_entered`` для "
"виявлення зіткнень. З типізованим кодом, виявлене тіло, буде загальним "
"``PhysicsBody2D``, а не вашим ``PlayerController`` при зворотному виклику "
"``_on_body_entered``."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:158
#, fuzzy
msgid ""
"You can check if this ``PhysicsBody2D`` is your Player with the ``as`` "
"casting keyword, and using the colon ``:`` again to force the variable to "
"use this type. This forces the variable to stick to the ``PlayerController`` "
"type:"
msgstr ""
"Ви можете перевірити, чи цей ``PhysicsBody2D`` ваш гравець із ключовим "
"словом ``as``, і знову використовувати двокрапку ``:``, щоб змусити змінну "
"використовувати цей тип. Це змушує змінну дотримуватися типу "
"``PlayerController``:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:172
#, fuzzy
msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player``\\ variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Оскільки ми маємо справу з власним типом, якщо ``body`` не розширення "
"``PlayerController``, змінна ``player`` буде встановлена на ``null``. Ми "
"можемо використати це, щоб перевірити, чи є тіло гравцем, чи ні. Ми також "
"отримаємо повне автодоповнення змінної гравця завдяки цьому касту."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:179
#, fuzzy
msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Якщо ви спробуєте виконати каст за допомогою вбудованого типу, і це не "
"вдасться, Godot видасть помилку."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:182
msgid "Safe lines"
msgstr "Безпечні рядки"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:184
#, fuzzy
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a new tool in "
"Godot 3.1 to tell you when ambiguous lines of code are type-safe. As you can "
"mix and match typed and dynamic code, at times, Godot doesn't have enough "
"information to know if an instruction will trigger an error or not at "
"runtime."
msgstr ""
"Ви також можете використовувати кастинг, щоб забезпечити безпечні рядки. "
"Безпечні рядки - це новий інструмент в Godot 3.1, який дозволяє вам "
"повідомити, коли двозначні рядки коду є безпечного типу. Оскільки ви можете "
"змішувати та зіставляти типізований та динамічний код, часом у Godot не "
"вистачає інформації, щоб знати, чи буде інструкція викликати помилку, чи ні, "
"під час виконання."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:190
#, fuzzy
msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Це відбувається, коли ви отримуєте дочірній вузол. Візьмемо для прикладу "
"таймер: за допомогою динамічного коду ви можете отримати вузол з допомогою``"
"$Timer``. GDScript підтримує `качину типізацію<https://stackoverflow.com/"
"a/4205163/8125343>`__, тому навіть якщо ваш таймер типу ``Timer``, він також "
"є ``Node`` і ``Object``, два класи він розширює. За допомогою динамічного "
"GDScript ви також не піклуєтесь про тип вузла, якщо він має методи, "
"необхідні для виклику."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:198
#, fuzzy
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Ви можете використовувати кастинг, щоб повідомити Godot про тип, який ви "
"очікуєте, коли ви отримаєте вузол: ``($Timer as Timer)``, ``($Player as "
"KinematicBody2D)`` і так далі. Godot забезпечить роботу типа і, якщо все "
"гаразд, число рядка стане зеленим в редакторі скриптів."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:206
msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:210
msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Ви можете вимкнути безпечні рядки, або змінити їх колір у налаштуваннях "
"редактора."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:213
msgid "Define the return type of a function with the arrow ->"
msgstr "Визначте тип повернення функції за допомогою стрілки ->"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:215
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type:"
msgstr ""
"Щоб визначити тип повернення функції, наберіть стрілочку ``->`` після її "
"оголошення, а потім - тип повернення:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:223
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables:"
msgstr ""
"Тип ``void`` означає, що функція нічого не повертає. Ви можете "
"використовувати будь-який тип, як і для змінних:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:232
msgid "You can also use your own nodes as return types:"
msgstr "Ви також можете використовувати власні вузли як типи повернення:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:248
msgid "Typed or dynamic: stick to one style"
msgstr "Типізований, або динамічний: дотримуйтеся одного стилю"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:250
#, fuzzy
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But I "
"recommended to stick to either style for consistency in your codebase, and "
"for your peers. It's easier for everyone to work together if you follow the "
"same guidelines, and faster to read and understand other people's code."
msgstr ""
"Типізований GDScript та динамічний GDScript можуть співіснувати в одному "
"проекті. Але я рекомендую дотримуватися якогось одного стилю в кодуванні вам "
"і вашим колегам. Всім буде простіше працювати разом, якщо дотримуватися "
"одних і тих же вказівок і швидше читати та розуміти код інших людей."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:256
#, fuzzy
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style:"
msgstr ""
"Типізований код потребує трохи більше писанини, але ви отримуєте переваги, "
"про які ми говорили вище. Ось приклад одного й того ж порожнього скрипту в "
"динамічному стилі:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:272
msgid "And with static typing:"
msgstr "І в статичному стилі:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:286
#, fuzzy
msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style:"
msgstr ""
"Як бачите, ви також можете використовувати типи з віртуальними методами "
"движка. Зворотні сигнали, як і будь-які методи, також можуть використовувати "
"типи. Ось сигнал ``body_entered`` у динамічному стилі:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:295
msgid "And the same callback, with type hints:"
msgstr "І він же в типізованому стилі:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:302
#, fuzzy
msgid ""
"You're free to replace, e.g. the ``CollisionObject2D``, with your own type, "
"to cast parameters automatically:"
msgstr ""
"Ви можете замінити, наприклад ``CollisionObject2D``, на свій власний тип, "
"щоб автоматично задавати параметри:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:313
#, fuzzy
msgid ""
"The ``bullet`` variable could hold any ``CollisionObject2D`` here, but we "
"make sure it is our ``Bullet``, a node we created for our project. If it's "
"anything else, like an ``Area2D``, or any node that doesn't extend "
"``Bullet``, the ``bullet`` variable will be ``null``."
msgstr ""
"Змінна ``bullet`` може займати тут будь - який ``CollisionObject2D``, але ми "
"впевнені , що це наша ``Bullet``, вузол ми створили для нашого проекту. Якщо "
"це щось інше, наприклад ``Area2D``, або будь-який вузол, який не поширює "
"``Bullet``, змінна ``bullet`` буде ``null``."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:319
msgid "Warning system"
msgstr "Система попередження"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:321
#, fuzzy
msgid ""
"The warning system complements typed GDScript. It's here to help you avoid "
"mistakes that are hard to spot during development, and that may lead to "
"runtime errors."
msgstr ""
"Система попередження доповнює типізований GDScript. Вона допоможе вам "
"допомогти уникнути помилок, які важко помітити під час розробки, і це може "
"призвести до помилок при виконанні."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:325
msgid ""
"You can configure warnings in the Project Settings under a new section "
"called ``GDScript``:"
msgstr ""
"Ви можете налаштувати попередження в Параметрах проекту в новому розділі під "
"назвою ``GDScript``:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:331
msgid "warning system project settings"
msgstr "Система попередження в Параметрах проекту"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:333
#, fuzzy
msgid ""
"You can find a list of warnings for the active GDScript file in the script "
"editor's status bar. The example below has 3 warnings:"
msgstr ""
"Список попереджень для активного файлу GDScript можна знайти в рядку стану "
"редактора скриптів. У наведеному нижче прикладі є 3 попередження:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:339
msgid "warning system example"
msgstr "Приклад системи попередження"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:341
#, fuzzy
msgid ""
"To ignore specific warnings in one file, insert a special comment of the "
"form ``# warning-ignore:warning-id``, or click on the ignore link to the "
"right of the warning's description. Godot will add a comment above the "
"corresponding line and the code won't trigger the corresponding warning "
"anymore:"
msgstr ""
"Щоб ігнорувати конкретні попередження в одному файлі, вставте спеціальний "
"коментар до форми ``# warning-ignore:warning-id``, або натисніть на "
"посилання ігнорування праворуч від опису попередження. Godot додасть "
"коментар вище відповідного рядка, і код більше не викликатиме відповідне "
"попередження:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:350
msgid "warning system ignore example"
msgstr "Приклад ігнорування системи попередження"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:352
msgid ""
"You can also choose to ignore not just one but all warnings of a certain "
"type in this file with ``# warning-ignore-all:warning-id``. To ignore all "
"warnings of all types in a file add the comment ``# warnings-disable`` to it."
msgstr ""
"Ви також можете ігнорувати не одне, а всі попередження певного типу у цьому "
"файлі з допомогою ``# warning-ignore-all:warning-id``. Щоб ігнорувати всі "
"попередження усіх типів у файлі, додайте до нього коментар ``# warnings-"
"disable``."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:356
#, fuzzy
msgid ""
"Warnings won't prevent the game from running, but you can turn them into "
"errors if you'd like. This way your game won't compile unless you fix all "
"warnings. Head to the ``GDScript`` section of the Project Settings to turn "
"on this option. Here's the same file as the previous example with warnings "
"as errors turned on:"
msgstr ""
"Попередження не завадять запустити гру, але ви можете перетворити їх на "
"помилки, якщо хочете. Таким чином ваша гра не складеться, якщо ви не "
"зафіксуєте всі попередження. Перейдіть в розділ ``GDScript`` в Параметрах "
"проекту, щоб включити цю опцію. Ось такий самий файл, що і в попередньому "
"прикладі, із попередженнями, які повернуті як помилки:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:365
msgid "warnings as errors"
msgstr "Попередження, як помилки"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:368
#, fuzzy
msgid "Cases where you can't specify types"
msgstr "Випадки, коли ви не можете вказати типи"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:370
#, fuzzy
msgid ""
"To wrap up this introduction, let's cover a few cases where you can't use "
"type hints. All the examples below **will trigger errors**."
msgstr ""
"Щоб закінчити цей вступ, давайте розглянемо кілька випадків, коли ви не "
"можете використовувати підказки типу. Усі наведені нижче приклади "
"**спричинять помилки**."

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:373
#, fuzzy
msgid "You can't use Enums as types:"
msgstr "Ви не можете використовувати перерахунки, як типи:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:380
#, fuzzy
msgid ""
"You can't specify the type of individual members in an array. This will give "
"you an error:"
msgstr ""
"Ви не можете вказати тип окремих членів у масиві. Це призведе до помилки:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:387
#, fuzzy
msgid ""
"You can't force the assignment of types in a ``for`` loop, as each element "
"the ``for`` keyword loops over already has a different type. So you "
"**cannot** write:"
msgstr ""
"Ви не можете примусово присвоювати типи в циклі ``for``, оскільки кожен "
"елемент ``for`` вже має інший тип. Тому ви не можете писати:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:397
#, fuzzy
msgid "Two scripts can't depend on each other in a cyclic fashion:"
msgstr "Два скрипти не можуть залежати один від одного циклічно:"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:420
msgid "Summary"
msgstr "Підсумок"

#: ../../docs/getting_started/scripting/gdscript/static_typing.rst:422
msgid ""
"Typed GDScript is a powerful tool. Available as of version 3.1 of Godot, it "
"helps you write more structured code, avoid common errors, and create "
"scalable systems. In the future, static types will also bring you a nice "
"performance boost thanks to upcoming compiler optimizations."
msgstr ""
"Типізований GDScript - це потужний інструмент. Доступний з версії 3.1 Godot, "
"він допомагає писати більш структурований код, уникати поширених помилок та "
"створювати масштабовані системи. В майбутньому статичні типи також принесуть "
"вам приємне підвищення продуктивності завдяки майбутнім оптимізаціям "
"компілятора."
