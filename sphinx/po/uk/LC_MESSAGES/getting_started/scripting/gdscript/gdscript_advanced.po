# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-30 19:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:4
msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript: Вступ до мов динамічного типу"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:7
msgid "About"
msgstr "Про"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:9
msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"Цей підручник має стати короткою довідкою з ефективнішого використання "
"GDScript. Він зосереджений, в основному, на випадках, характерних для цієї "
"мови, але також охоплює багато інформації про динамічні мови в загальному."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:13
msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""
"Ця довідка може бути особливо корисною для програмістів, у яких мало, або "
"нема взагалі, досвіду роботи з динамічними мовами."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:17
msgid "Dynamic nature"
msgstr "Динамічна природа"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:20
msgid "Pros & cons of dynamic typing"
msgstr "Плюси і мінуси динамічного типу"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:22
msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr "GDScript - це мова динамічного типу. Основними її перевагами є:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:25
msgid "The language is simple and easy to learn."
msgstr "Мова проста і легка для вивчення."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:26
msgid "Most code can be written and changed quickly and without hassle."
msgstr "Більшість коду можна записати і змінити швидко та без клопоту."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:27
msgid "Less code written means less errors & mistakes to fix."
msgstr "Менше коду означає менше помилок."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:28
msgid "Easier to read the code (less clutter)."
msgstr "Простіше читати код (менше безладдя)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:29
msgid "No compilation is required to test."
msgstr "Не потрібна компіляція для тестування."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:30
msgid "Runtime is tiny."
msgstr "Час виконання крихітний."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:31
msgid "Duck-typing and polymorphism by nature."
msgstr "Качина типізація і поліморфізм від природи."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:33
msgid "While the main disadvantages are:"
msgstr "Хоча основними недоліками є:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:35
msgid "Less performance than statically typed languages."
msgstr "Менша продуктивність, ніж у статичних мов."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:36
msgid "More difficult to refactor (symbols can't be traced)"
msgstr "Складніше переробляти (символи не простежуються)"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:37
msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"Деякі помилки, які, як правило, виявляються під час компіляції в статично "
"набраних мовах, з’являються лише під час виконання коду (оскільки "
"синтаксичний аналіз виразів є більш суворим)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:40
msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr ""
"Менша гнучкість для заповнення коду (деякі типи змінних стають відомі лише "
"під час виконання)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:43
msgid ""
"This, translated to reality, means that Godot+GDScript are a combination "
"designed to create games quickly and efficiently. For games that are very "
"computationally intensive and can't benefit from the engine built-in tools "
"(such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""
"Це, в перекладі на реальність, означає, що Godot + GDScript - це комбінація, "
"призначена для швидкого та ефективного створення ігор. Для ігор, які "
"потребують інтенсивних обчислень і не можуть отримати користь від вбудованих "
"в движок інструментів (таких як векторні типи, фізичний движок, бібліотека "
"математики тощо), також є можливість використання C++. Це дозволяє все-таки "
"створювати більшу частину гри в GDScript і додавати невеликі шматочки C++ у "
"тих областях, які потребують підвищення продуктивності."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:52
msgid "Variables & assignment"
msgstr "Змінні та призначення"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:54
msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"Усі змінні в динамічних мовах мають \"невизначений\" тип. Це означає, що їх "
"тип не є фіксованим, а змінюється в момент призначення. Приклад:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:58
#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:80
msgid "Static:"
msgstr "Статичний:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:66
#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:94
msgid "Dynamic:"
msgstr "Динамічний:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:75
msgid "As function arguments:"
msgstr "Як аргументи функції:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:77
msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr ""
"Функції теж мають динамічний характер, а це означає, що їх можна викликати з "
"різними аргументами, наприклад:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:107
msgid "Pointers & referencing:"
msgstr "Вказівники та посилання:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:109
msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""
"У статичних мовах, таких як C, або C ++ (і певною мірою Java та C#), існує "
"різниця між змінною та вказівником/посиланням на змінну. Останнє дозволяє "
"змінювати об'єкт іншими функціями, передаючи посилання на оригінал."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:114
msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""
"У C#, або Java, все, що не є вбудованим типом (int, float, іноді String), "
"завжди є вказівником, або посиланням. Посилання також збираються сміттям "
"автоматично, що означає, що вони видаляються, коли більше не "
"використовуються. Динамічно набрані мови, як правило, використовують і цю "
"модель пам'яті. Деякі приклади:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:120
msgid "C++:"
msgstr "C++:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:136
msgid "Java:"
msgstr "Java:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:154
msgid "GDScript:"
msgstr "GDScript:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:166
msgid ""
"In GDScript, only base types (int, float, string and the vector types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"arrays, dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_Reference` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""
"У GDScript лише базові типи (int, float, string та векторні типи) "
"передаються функціям, як значення (значення копіюється). Все інше "
"(екземпляри, масиви, словники тощо) передається як посилання. Класи, які "
"успадковують :ref:`class_Reference` (за замовчуванням, якщо нічого не "
"вказано), будуть звільнені, коли вони не використовуються, але можливе також "
"керування пам'яттю вручну, якщо успадковувати вручну від :ref:`class_Object`."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:174
msgid "Arrays"
msgstr "Масиви"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:176
msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""
"Масиви в динамічних мовах можуть містити багато різних змішаних типів даних "
"всередині і завжди динамічні (їх можна змінити в будь-який час). Порівняйте, "
"наприклад, масиви в статичних мовах:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:203
msgid "And in GDScript:"
msgstr "І в GDScript:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:212
msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:222
msgid "Or unordered sets:"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:231
msgid "Dictionaries"
msgstr "Словники"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:233
msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""
"Словники - це потужний інструмент у динамічних мовах. Більшість "
"програмістів, які зі статистичних мов (наприклад C++, або C#), ігнорують їх "
"існування та ускладнюють собі життя. Цей тип даних, як правило, відсутній в "
"таких мовах (або існує в обмеженій формі)."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:239
msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"Словники можуть зіставляти будь-яке значення з будь-яким іншим значенням з "
"повним ігноруванням типу даних, який використовується як ключ, або значення. "
"Всупереч поширеній думці, вони ефективні, оскільки їх можна реалізувати за "
"допомогою хеш-таблиць. Насправді вони настільки ефективні, що деякі мови "
"реалізують масиви, як словники."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:245
msgid "Example of Dictionary:"
msgstr "Приклад словника:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:252
msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr ""
"Словники також динамічні, ключі можна додавати, або видаляти, в будь-якій "
"точці з малими затратами:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:261
msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a simple battleship game example:"
msgstr ""
"У більшості випадків двовимірні масиви часто можна легше реалізувати за "
"допомогою словників. Ось простий приклад гри морський бій:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:294
msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""
"Словники також можуть використовуватися як розмітка даних, або швидкі "
"структури. Хоча словники GDScript нагадують словники python, вони також "
"підтримують синтаксис та індексацію стилю Lua, що робить їх корисними для "
"написання початкових станів та швидких структур:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:319
msgid "For & while"
msgstr "For та while"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:321
msgid "Iterating in some statically typed languages can be quite complex:"
msgstr "Ітерація в деяких мовах статичного типу може бути досить складною:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:341
msgid "This is usually greatly simplified in dynamically typed languages:"
msgstr "В динамічно набраних мовах вона зазвичай значно спрощена:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:348
msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr ""
"Контейнерні типи даних (масиви та словники) піддаються ітерації. Словники "
"дозволяють перебирати ключі:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:356
msgid "Iterating with indices is also possible:"
msgstr "Можлива ітерація з індексами:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:363
msgid "The range() function can take 3 arguments:"
msgstr "Функція range() може приймати 3 аргументи:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:371
msgid "Some statically typed programming language examples:"
msgstr "Деякі приклади зі статистичних мов:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:381
msgid "Translate to:"
msgstr "Переведені в динамічні:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:394
msgid "And backwards looping is done through a negative counter:"
msgstr "А зворотній цикл здійснюється за допомогою негативного лічильника:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:400
msgid "Becomes:"
msgstr "Стає:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:408
msgid "While"
msgstr "While"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:410
msgid "while() loops are the same everywhere:"
msgstr "while() цикли всюди однакові:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:421
msgid "Custom iterators"
msgstr "Власні ітератори"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:422
msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"Ви можете створювати власні ітератори, якщо стандартні не відповідають всім "
"вашим потребам, перевизначивши функції ``_iter_init``, ``_iter_next``, і "
"``_iter_get``класу Variant в вашому скрипті. Приклад реалізації ітератора:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:454
msgid "And it can be used like any other iterator:"
msgstr "І його можна використовувати, як і будь-який інший ітератор:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:462
msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"Переконайтеся, що скинули стан ітератора ``_iter_init``, інакше вкладені for-"
"цикли, які використовують спеціальні ітератори, не працюватимуть як "
"очікувалося."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:466
msgid "Duck typing"
msgstr "Качина типізація"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:468
msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"Однією з найскладніших для розуміння концепцій при переході від статичної "
"мови до динамічної, є качина типізація. Качина типізація робить загальний "
"дизайн коду набагато простішим у написанні, але її робота не очевидна."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:473
msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"Як приклад, уявіть ситуацію, коли великий камінь котиться по тунелю, "
"розбиваючи все на своєму шляху. Код для каменя, в статичній мові, був би "
"таким:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:484
msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""
"Таким чином, все, що може бути розтрощене каменем, повинно було б "
"успадкувати Smashable. Якщо персонаж, ворог, предмет інтер'єру, маленький "
"камінь можуть бути зруйновані, їм потрібно успадкувати від клас Smashable, "
"можливо, вимагаючи багаторазове успадкування. Якщо багаторазове успадкування "
"небажане, вони повинні успадкувати такий клас, як Entity. Однак додавати "
"віртуальний метод ``smash()`` до Entity було б не дуже елегантно, якщо "
"тільки декілька з них можна розбити."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:492
msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""
"З динамічно набраними мовами це не проблема. Качина типізація гарантує, що "
"вам потрібно визначити функцію smash() лише там, де це потрібно, і все. Не "
"потрібно враховувати спадщину, базові класи тощо."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:501
msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""
"І це все. Якщо об'єкт, який потрапив під великий камінь, має метод smash(), "
"він буде викликаний. Немає потреби у спадщині, чи поліморфізмі. Динамічні "
"мови, дбають лише про те, щоб екземпляр мав потрібний метод, або член, а не "
"про те, що він успадковує, або про тип класу. Визначення Качина Типізація "
"має зробити зрозумілішим наступне:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:507
msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""
"*\"Коли я бачу птицю, яка ходить, як качка, плаває, як качка, і крякає, як "
"качка, я називаю цю птицю качкою\"*"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:510
msgid "In this case, it translates to:"
msgstr "У цьому випадку це означає:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:512
msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr ""

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:514
msgid "Yes, we should call it Hulk typing instead."
msgstr "Так, можливо нам слід було назвати це типізацією Халка."

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:516
msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist (like Objective C), but GDScript is stricter, so checking if the "
"function exists is desirable:"
msgstr ""
"Можливо, що об'єкт, який отримав удар, не має функції smash(). Деякі "
"динамічно набрані мови просто ігнорують виклик методу, коли його не існує "
"(наприклад, Objective C), але GDScript є більш суворим, тому бажано "
"перевірити, чи функція існує:"

#: ../../docs/getting_started/scripting/gdscript/gdscript_advanced.rst:527
msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""
"Потім просто визначте цей метод і все, до чого торкатиметься камінь, може "
"бути розбито."
