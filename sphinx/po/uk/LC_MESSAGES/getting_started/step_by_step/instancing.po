# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 15:51+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Creating instances"
msgstr "Редагування екземплярів"

msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""

msgid ""
"You can create as many scenes as you'd like and save them to the disk with "
"the ``.tscn`` extension, which stands for \"text scene\". The ``Label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""

msgid ""
"Here's the example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite2D <class_Sprite>` node, and a :ref:"
"`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""

msgid ""
"Once you saved a scene, it works as a blueprint: you can reproduce it in "
"other scenes as many times as you'd like. Replicating an object from a "
"template like so is called **instancing**."
msgstr ""

msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""

msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``Ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""

#, fuzzy
msgid "In practice"
msgstr "Кращі практики"

#, fuzzy
msgid ""
"Let's use instancing in practice to see how it works exactly in Godot. We "
"invite you to download the ball's sample project we prepared for you: :"
"download:`instancing.zip <files/instancing.zip>`."
msgstr ""
"Щоб краще зрозуміти, як створювати екземпляр (instancing), давайте "
"завантажимо зразок проєкту: :download:`instancing.zip <files/instancing."
"zip>`."

#, fuzzy
msgid ""
"Extract the archive on your computer. Then, open Godot, and in the project "
"manager, click the Import button to import the project."
msgstr ""
"Розпакуйте цей проєкт куди завгодно. Потім відкрийте Godot і додайте цей "
"проєкт до керівника проєктів за допомогою кнопки 'Імпортувати':"

msgid ""
"In the pop-up that appears, click the browse button and navigate to the "
"folder you extracted."
msgstr ""

msgid "Double-click the ``project.godot`` file to open it."
msgstr ""

msgid "Finally, click the Import & Edit button."
msgstr ""

msgid ""
"The project contains two packed scenes: ``Main.tscn``, containing walls "
"against which the ball collides, and ``Ball.tscn``. The Main scene should "
"open automatically."
msgstr ""

msgid ""
"Let's add a ball as a child of the Main node. In the Scene dock, select the "
"Main node. Then, click the link icon at the top of the scene dock. This "
"button allows you to add an instance of a scene as a child of the currently "
"selected node."
msgstr ""

msgid "Double-click the ball scene to instance it."
msgstr ""

#, fuzzy
msgid "The ball appears in the top-left corner of the viewport."
msgstr "Логотип буде з'являтися у верхній частині екрана."

#, fuzzy
msgid "Click on it and drag it towards the center of the view."
msgstr "Клацніть **Новий атлас** і виділіть увесь аркуш плиток."

msgid "Play the game by pressing F5. You should see it fall."
msgstr ""

msgid ""
"Now, we want to create more instances of the Ball node. With the ball still "
"selected, press :kbd:`Ctrl-D` (:kbd:`Cmd-D` on macOS) to call the duplicate "
"command. Click and drag to move the new ball to a different location."
msgstr ""

#, fuzzy
msgid "You can repeat this process until you have several in the scene."
msgstr ""
"Ви не можете перейменувати сірі вузли. Це говорить вам, що у них є "
"батьківська сцена"

msgid ""
"Play the game again. You should now see every ball fall independently from "
"one another. This is what instances do. Each is an independent reproduction "
"of a template scene."
msgstr ""

#, fuzzy
msgid "Editing scenes and instances"
msgstr "Редагування екземплярів"

msgid "There is more to instances. With this feature, you can:"
msgstr ""

msgid ""
"Change the properties of one ball without affecting the others using the "
"Inspector."
msgstr ""

msgid ""
"Change the default properties of every Ball by opening ``Ball.tscn`` scene "
"and making a change to the Ball node there. Upon saving, all instances of "
"the Ball in the project will see their values update."
msgstr ""

msgid ""
"Changing a property on an instance always overrides values from the "
"corresponding packed scene."
msgstr ""

msgid ""
"Let's try this. Open ``Ball.tscn`` and select the Ball node. In the "
"Inspector on the right, click on the PhysicsMaterial property to expand it."
msgstr ""

msgid ""
"Set its Bounce property to ``2`` by clicking on the number field, typing "
"``2``, and pressing :kbd:`Enter`."
msgstr ""

msgid ""
"Play the game by pressing :kbd:`F5` and notice how all balls now bounce a "
"lot more. As the Ball scene is a template for all instances, modifying it "
"and saving causes all instances to update accordingly."
msgstr ""

msgid ""
"Let's now adjust an individual instance. Head back to the Main scene by "
"clicking on the corresponding tab above the viewport."
msgstr ""

msgid ""
"Select one of the instanced Ball nodes and, in the Inspector, set its "
"Gravity Scale value to ``10``."
msgstr ""

msgid "A grey \"revert\" button appears next to the adjusted property."
msgstr ""

#, fuzzy
msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""
"Зауважте, що поруч із налаштованою властивістю з’являється сіра кнопка "
"«повернутися». Якщо ця кнопка присутня, це означає, що ви змінили "
"властивість у вставленій сцені. Тепер навіть якщо ви зміните цю властивість "
"в початковій збереженій сцені, спеціальне значення залишиться незмінним. "
"Натискання кнопки повернення поверне властивість до значення збереженої "
"сцени."

msgid ""
"Rerun the game and notice how this ball now falls much faster than the "
"others."
msgstr ""

msgid ""
"If you change a value on the ``PhysicsMaterial`` of one instance, it will "
"affect all the others. This is because ``PhysicsMaterial`` is a resource, "
"and resources are shared between instances. To make a resource unique for "
"one instance, right-click on it in the Inspector and click Make Unique in "
"the contextual menu."
msgstr ""

msgid ""
"Resources are another essential building block of Godot games we will cover "
"in a later lesson."
msgstr ""

msgid "Scene instances as a design language"
msgstr ""

msgid ""
"Instances and scenes in Godot offer an excellent design language, setting "
"the engine apart from others out there. We designed Godot around this "
"concept from the ground up."
msgstr ""

msgid ""
"We recommend dismissing architectural code patterns when making games with "
"Godot, such as Model-View-Controller (MVC) or Entity-Relationship diagrams. "
"Instead, you can start by imagining the elements players will see in your "
"game and structure your code around them."
msgstr ""

#, fuzzy
msgid "For example, you could break down a shooter game like so:"
msgstr "Наприклад, ось як можна уявити просту гру стрілялки:"

#, fuzzy
msgid ""
"You can come up with a diagram like this for almost any type of game. Each "
"rectangle represents an entity that's visible in the game from the player's "
"perspective. The arrows tell you which scene owns which."
msgstr ""
"Ви можете створити подібну схему майже для будь-якої гри. Запишіть частини "
"гри, які ви можете візуалізувати, а потім протягніть стрілки, щоб зрозуміти "
"які компоненти, яким будуть належати."

#, fuzzy
msgid ""
"Once you have a diagram, we recommended creating a scene for each element "
"listed in it to develop your game. You'll use instancing, either by code or "
"directly in the editor, to build your tree of scenes."
msgstr ""
"Після того як ви намалюєте таку діаграму, рекомендований процес створення "
"гри - це створення сцени для кожного елемента, перерахованого на діаграмі. "
"Ви будете використовувати створення екземплярів (чи в коді, чи безпосередньо "
"в редакторі) для побудови ієрархії відносин."

#, fuzzy
msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""
"Багато часу в програмуванні ігор (та і взагалі в розробці програм) "
"витрачається на проєктування архітектури та підлагодження ігрових "
"компонентів до цієї архітектури. Проєктування на основі сцен замінює такий "
"підхід і робить розробку набагато швидшою і простішою, дозволяючи "
"сконцентруватися на логіці гри. Оскільки більшість ігрових компонентів "
"відображаються безпосередньо на сцені, проєктування на основі інстансування "
"сцен, означає, що інший архітектурний код не потрібен."

#, fuzzy
msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""
"Давайте розглянемо ще один, дещо складніший, приклад гри відкритого типу з "
"великою кількістю ресурсів та вкладених елементів:"

msgid ""
"Imagine we started by creating the room. We could make a couple of different "
"room scenes, with unique arrangements of furniture in them. Later, we could "
"make a house scene that uses multiple room instances for the interior. We "
"would create a citadel out of many instanced houses and a large terrain on "
"which we would place the citadel. Each of these would be a scene instancing "
"one or more sub-scenes."
msgstr ""

#, fuzzy
msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""
"Пізніше ми могли б створити сцени, які представляють охоронців (та інших "
"NPC) і додати їх до цитаделі. Як результат, вони будуть опосередковано "
"додані до загального ігрового світу."

#, fuzzy
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""
"З Godot легко відтворити гру, схожу на цю, адже все, що вам потрібно "
"зробити, це створити та інстансувати більше сцен. Крім того, інтерфейс "
"редактора побудований так, щоб ним було зручно користуватися, як "
"програмістам, так і не програмістам. Типовий склад команди розробки може "
"залучати 2D, або 3D, художників, дизайнерів рівнів, дизайнерів ігор та "
"аніматорів, які працюють з інтерфейсом редактора."

msgid "Summary"
msgstr "Підсумок"

msgid ""
"Instancing, the process of producing an object from a blueprint has many "
"handy uses. With scenes, it gives you:"
msgstr ""

#, fuzzy
msgid "The ability to divide your game into reusable components."
msgstr "Перетворення шкали та лічильника на багаторазові елементи інтерфейсу"

msgid "A tool to structure and encapsulate complex systems."
msgstr ""

msgid ""
"A language to think about your game project's structure in a natural way."
msgstr ""
