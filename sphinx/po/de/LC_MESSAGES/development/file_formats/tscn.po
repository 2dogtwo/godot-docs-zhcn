# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-10 11:47+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/development/file_formats/tscn.rst:2
msgid "TSCN file format"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:4
msgid ""
"A :code:`.tscn` File format is the \"Text SCeNe\" file format and represents "
"a single scene-tree inside Godot. TSCN files have the advantage of being "
"nearly human-readable and easy for version control systems to manage. During "
"import the TSCN files are compiled into binary :code:`.scn` files stored "
"inside the .import folder. This reduces the data size and speed up loading."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:10
msgid ""
"The :code:`.escn` file format is identical to the TSCN file format, but is "
"used to indicate to Godot that the file has been exported from another "
"program and should not be edited by the user from within Godot."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:14
msgid ""
"For those looking for a complete description, the parsing is handled in the "
"file `scene_format_text.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/resources/scene_format_text.cpp>`_ in the class :code:"
"`ResourceFormatLoaderText`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:19
msgid "File structure"
msgstr "Dateistruktur"

#: ../../docs/development/file_formats/tscn.rst:21
msgid "There are five main sections inside the TSCN File:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:23
msgid "File Descriptor"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:24
#: ../../docs/development/file_formats/tscn.rst:266
msgid "External resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:25
#: ../../docs/development/file_formats/tscn.rst:287
msgid "Internal resources"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:26
msgid "Nodes"
msgstr "Nodes (\"Knoten\")"

#: ../../docs/development/file_formats/tscn.rst:27
msgid "Connections"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:29
msgid ""
"The file descriptor looks like :code:`[gd_scene load_steps=1 format=2]` And "
"should be the first entry in the file. The load_steps parameter should (in "
"theory) be the number of resources within the file, though in practice its "
"value seems not to matter."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:34
msgid ""
"These sections should appear in order, but it can be hard to distinguish "
"them. The only difference between them is the first element in the heading "
"for all of the items in the section. For example, the heading of all "
"external resources should start with :code:`[ext_resource .....]`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:41
msgid "Entries inside the file"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:43
msgid ""
"A heading looks like: :code:`[<resource_type> key=value key=value "
"key=value ...]` Where resource_type is one of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:47
msgid "ext_resource"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:48
msgid "sub_resource"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:49
msgid "node"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:50
msgid "connection"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:52
msgid ""
"Underneath every heading comes zero or more :code:`key = value` pairs. The "
"values can be complex datatypes such as arrays, transformations, colors, and "
"so on. For example, a spatial node looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:62
msgid "The scene tree"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:64
msgid ""
"The scene tree is made up of... nodes! The heading of each node consists of "
"its name, parent and (most of the time) a type. For example :code:`[node "
"type=\"Camera\" name=\"PlayerCamera\" parent=\"Player/Head\"]`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:68
msgid "Other valid keywords include:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:70
msgid "instance"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:71
msgid "instance_placeholder"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:72
msgid "owner"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:73
msgid "index (if two nodes have the same name)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:74
msgid "groups"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:76
msgid ""
"The first node in the file should not have the :code:`parent=Path/To/Node` "
"entry in it's heading, and it is the scene root. All scene files should have "
"exactly one scene root. It it does not, Godot will fail to import the file. "
"The parent path of other nodes should be absolute, but without the scene "
"root's name. If it is a direct child of the scene root, it should be :code:`"
"\".\"`. Here is an example scene tree (but without any node content)."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:90
msgid ""
"Similar to the internal resource, the document for each node is currently "
"incomplete. Fortunately it is easy to find out because you can simply save a "
"file with that node in it. Some example nodes are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:128
msgid "NodePath"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:130
msgid ""
"A tree structure is not enough to represent the whole scene, Godot use a :"
"code:`NodePath(Path/To/Node)` structure to refer to another node or "
"attribute of the node anywhere in the scene tree. Some typical usages of "
"NodePath like mesh node use :code:`NodePath()` to point to its skeleton, "
"animation track use :code:`NodePath()` points to animated attribute in node."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:153
msgid "Skeleton"
msgstr "Skelett"

#: ../../docs/development/file_formats/tscn.rst:155
msgid ""
"Skeleton node inherits Spatial node, besides that it may have a list of "
"bones described in key, value pair in the format :code:`bones/Id/"
"Attribute=Value`, attributes of bone consists of"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:159
msgid "name"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:160
msgid "parent"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:161
msgid "rest"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:162
msgid "pose"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:163
#: ../../docs/development/file_formats/tscn.rst:385
msgid "enabled"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:164
msgid "bound_children"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:166
msgid ":code:`name` must put as the first attribute of each bone"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:168
msgid ""
":code:`parent` is the index of parent bone in the bone list, with parent "
"index, the bone list is built to a bone tree"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:171
msgid ":code:`rest` is the transform matrix of bone in rest position"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:173
msgid ":code:`pose` is the pose matrix use :code:`rest` as basis"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:175
msgid ""
":code:`bound_children` is a list of NodePath() points to BoneAttachments "
"belong to this bone"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:178
msgid "An example of a skeleton node with two bones:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:198
msgid "BoneAttachment"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:200
msgid ""
"BoneAttachment node is an intermediate node to describe some node being "
"parented to a single bone in Skeleton node. The BoneAttachment has a :code:"
"`bone_name=NameOfBone`, and the corresponding bone being the parent has the "
"BoneAttachment node in its :code:`bound_children` list."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:205
msgid "An example of one MeshInstance parented to a bone in Skeleton:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:229
msgid "AnimationPlayer"
msgstr "AnimationPlayer"

#: ../../docs/development/file_formats/tscn.rst:231
msgid ""
"AnimationPlayer works as an animation lib. it has animations listed in the "
"format :code:`anim/Name=SubResource(ResourceId)`, each refers to a Animation "
"internal resource. All the animation resources use the root node of "
"AnimationPlayer. The root node is stored as :code:`root_node=NodePath(Path/"
"To/Node)`."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:249
msgid "Resources"
msgstr "Ressourcen"

#: ../../docs/development/file_formats/tscn.rst:251
msgid ""
"Resources are components that make up the nodes. For example, a MeshInstance "
"node will have an accompanying ArrayMesh resource. The ArrayMesh resource "
"may be either internal or external to the TSCN file."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:255
msgid ""
"References to the resources are handled by id numbers in the resources "
"heading. External resources and internal resource are referred to with :code:"
"`ExtResource(id)` and :code:`SubResource(id)`. Because there have different "
"methods to refer to internal and external resource, you can have the same ID "
"for both an internal and external resource."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:261
msgid ""
"For example, to refer to the resource :code:`[ext_resource id=3 type="
"\"PackedScene\" path=....]` you would use :code:`ExtResource(3)`"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:268
msgid ""
"External resources are links to resources not contained within the TSCN file "
"itself. An external resource consists of:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:271
msgid "A path"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:272
msgid "A type"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:273
msgid "An ID"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:275
msgid ""
"Godot always generates absolute paths relative to the resource directory and "
"thus prefixed with :code:`res://`, but paths relative to the TSCN file's "
"location are also valid."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:279
msgid "Some example external resources are:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:289
msgid ""
"A TSCN file can contain meshes, materials and other data, and these are "
"contained in the internal resources section of the file. The heading for an "
"internal resource looks similar to those of external resources, but does not "
"have a path. Internal resources also have :code:`key=value` pairs under each "
"heading. For example, a capsule collision shape looks like:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:302
msgid ""
"Some internal resource contain links to other internal resources (such as a "
"mesh having a material). In this case, the referring resource must appear "
"before the reference to it. Thus, in the internal resources section of the "
"file, order does matter."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:307
msgid ""
"Unfortunately, documentation on the formats for these subresources is not "
"complete, and while some can be found through inspecting resources of saved "
"files, others can only be found by looking through Godot's source."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:312
msgid "ArrayMesh"
msgstr "ArrayMesh"

#: ../../docs/development/file_formats/tscn.rst:314
msgid ""
"ArrayMesh consists of several surfaces, each in the format :code:`surface"
"\\Index={}`, each surface is a set of vertex and a material."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:317
msgid "TSCN support two format of surface,"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:319
msgid "for the old format, each surface has three essential keys:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:321
msgid "primitive"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:322
msgid "arrays"
msgstr "Arrays"

#: ../../docs/development/file_formats/tscn.rst:323
msgid "morph_arrays"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:325
msgid ""
":code:`primitive` is an enumerate variable, :code:`primitive=4` which is "
"PRIMITIVE_TRIANGLES is frequently used."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:328
msgid ":code:`arrays` as the name suggests is an array of array, it contains:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:330
msgid "An array of vertex position"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:331
msgid "Tangents array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:332
msgid "Vertex color array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:333
msgid "UV array 1"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:334
msgid "UV array 2"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:335
msgid "Bone index array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:336
msgid "Bone weight array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:337
msgid "Vertex index array"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:339
msgid ""
":code:`morph_arrays` is an array of morph, each morph is exactly an :code:"
"`arrays` without vertex index array."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:342
msgid "An example of ArrayMesh:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:365
msgid "Animation"
msgstr "Animation"

#: ../../docs/development/file_formats/tscn.rst:367
msgid ""
"An animation resource consists of tracks. Besides, it has 'length', 'loop' "
"and 'step' applied to all the tracks."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:370
msgid "length"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:371
msgid "loop"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:372
msgid "step"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:374
msgid ":code:`length` and :code:`step` are both time in seconds"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:376
msgid ""
"Each track is described by a list of (key, value) pairs in the format :code:"
"`tracks/Id/Attribute`, it includes:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:379
msgid "type"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:380
msgid "path"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:381
msgid "interp"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:382
msgid "keys"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:383
msgid "loop_wrap"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:384
msgid "imported"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:387
msgid ""
"The :code:`type` must be put as the first attribute of each track. The value "
"of :code:`type` can be:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:390
#, fuzzy
msgid "'transform'"
msgstr "Transformation"

#: ../../docs/development/file_formats/tscn.rst:391
#, fuzzy
msgid "'value'"
msgstr "Wert"

#: ../../docs/development/file_formats/tscn.rst:392
msgid "'method'"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:394
msgid ""
"The :code:`path` has the format :code:`NodePath(Path/To/Node:Attribute)`. It "
"is the path from animation root node (property of AnimationPlayer) to the "
"animated node or attribute."
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:398
msgid ""
"The :code:`interp` is the method to interpolate frames from the keyframes. "
"it is a enum variable and can has value:"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:401
msgid "0 (constant)"
msgstr "0 (konstant)"

#: ../../docs/development/file_formats/tscn.rst:402
msgid "1 (linear)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:403
msgid "2 (cubic)"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:405
msgid ""
"The :code:`keys` is the keyframes, it appears as a PoolRealArray() but have "
"different structure for track with different type"
msgstr ""

#: ../../docs/development/file_formats/tscn.rst:408
msgid ""
"A transform track use every 12 real number in the :code:`keys` to describte "
"a keyframe. The first number is the timestamp, the second number is the "
"transition (default 1.0 in transform track), followed by a three number "
"translation vector, followed by four number rotation quaternion (x,y,z,w) "
"and finally a three number scale vector."
msgstr ""
