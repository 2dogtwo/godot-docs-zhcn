# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-27 08:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:4
msgid "Introduction"
msgstr "Einführung"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:6
msgid ""
"C# support is a new feature available since Godot 3.0. As such, you may "
"still run into some issues, or find spots where the documentation could be "
"improved. Please report issues with C# in Godot on the `engine GitHub page "
"<https://github.com/godotengine/godot/issues>`_, and any documentation "
"issues on the `documentation GitHub page <https://github.com/godotengine/"
"godot-docs/issues>`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:14
msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>` and (re)visit "
"the :ref:`Scripting section <doc_scripting>` of the step-by-step tutorial."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:21
msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with the Mono 6.x .NET framework, including full support for "
"C# 8.0. Mono is an open source implementation of Microsoft's .NET Framework "
"based on the ECMA standards for C# and the Common Language Runtime. A good "
"starting point for checking its capabilities is the `Compatibility <http://"
"www.mono-project.com/docs/about-mono/compatibility/>`_ page in the Mono "
"documentation."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:29
msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:36
msgid "Setting up C# for Godot"
msgstr "C# für Godot einrichten"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:39
msgid "Windows"
msgstr "Windows"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:41
msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`_ (*not* Visual Studio Code), which "
"contains utilities required to use C# in Godot. If you don't plan on using "
"the Visual Studio IDE, you can download just the `Visual Studio Build Tools "
"<https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?"
"sku=BuildTools&rel=15>`_ instead. Make sure you at least have the .NET "
"Framework 4.5 targeting pack installed, you can get it using any of the "
"installers mentioned above inside the \"Individual components\" tab."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:51
msgid "macOS and Linux"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:53
msgid ""
"Download and install the latest version of the `Mono SDK <http://www.mono-"
"project.com/download/>`_. As of Godot 3.1 beta 3, the version number doesn't "
"matter since Godot bundles its own Mono 5.18 installation. We only need the "
"Mono installation for NuGet and MSBuild which are required to use C# in "
"Godot."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:59
msgid ""
"To download Mono on macOS, use the \"Stable Channel\" link from the `Mono "
"Downloads Page <http://www.mono-project.com/download/>`_. The Visual Studio "
"channel is an earlier version of Mono and will not work."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:65
msgid "Additional notes"
msgstr "Zusätzliche Nodes"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:67
msgid ""
"Your Godot version must have Mono support enabled, so make sure to download "
"the **Mono version** of Godot. If you are building Godot from source, make "
"sure to follow the steps to enable Mono support in your build as outlined in "
"the :ref:`doc_compiling_with_mono` page."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:73
msgid ""
"In summary, you must have installed Visual Studio or Mono (depending on your "
"operating system) **and** the Mono-enabled version of Godot."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:77
msgid "Configuring an external editor"
msgstr "Einen externen Editor konfigurieren"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:79
msgid ""
"C# support in Godot's script editor is minimal. Consider using an external "
"IDE or editor, such as  `Visual Studio Code <https://code.visualstudio.com/"
">`_ or MonoDevelop. These provide autocompletion, debugging, and other "
"useful features for C#. To select an external editor in Godot, click on "
"**Editor → Editor Settings** and scroll down to **Mono**. Under **Mono**, "
"click on **Editor**, and select your external editor of choice. Godot "
"currently supports the following external editors:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:88
msgid "Visual Studio 2019"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:89
msgid "Visual Studio Code"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:90
#, fuzzy
msgid "MonoDevelop"
msgstr "K-Develop"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:91
msgid "Visual Studio for Mac"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:92
msgid "JetBrains Rider"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:94
msgid ""
"If you are using Visual Studio Code, ensure you download and install the `C# "
"extension <https://marketplace.visualstudio.com/items?itemName=ms-vscode."
"csharp>`_ to enable features like syntax highlighting and IntelliSense."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:99
msgid ""
"If you are using Visual Studio 2019, you must follow the instructions found "
"in the \"Configure VS2019 for Debugging\" section below."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:103
msgid "Creating a C# script"
msgstr "Erstellen eines C# Skripts"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:105
msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting ``Attach script`` in the context menu of a node in "
"your scene:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:110
msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some places in the "
"documentation still lack C# examples, most concepts can be transferred "
"easily from GDScript."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:117
msgid "Project setup and workflow"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:119
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.mono`` and ``Properties/AssemblyInfo.cs``). All of these but ``.mono`` "
"are important and should be committed to your version control system. ``."
"mono`` can be safely added to the ignore list of your VCS. When "
"troubleshooting, it can sometimes help to delete the ``.mono`` folder and "
"let it regenerate."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:128
msgid ""
"Note that currently, there are some issues where Godot and the C# project "
"don't stay in sync; if you delete, rename or move a C# script, the change "
"may not be reflected in the C# project file. In cases like this, you will "
"have to edit the C# project file manually."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:133
msgid ""
"For example, if you created a script (e.g. ``Test.cs``) and delete it in "
"Godot, compilation will fail because the missing file is still expected to "
"be there by the C# project file. For now, you can simply open up the ``."
"csproj`` file and look for the ``ItemGroup``, there should be a line "
"included like the following:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:147
msgid ""
"Simply remove that line and your project should build correctly again. Same "
"for renaming and moving things, simply rename and move them in the project "
"file if needed."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:152
msgid "Example"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:154
msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:181
msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` class which is part of the "
"``Godot`` namespace. For a list of methods in the ``GD`` class, see the "
"class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:188
msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error "
"and won't be able to run the scene: *\"Cannot find class XXX for script "
"res://XXX.cs\"*"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:194
msgid "General differences between C# and GDScript"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:196
msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:200
msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr ""
"Für mehr Informationen über Events, siehe die Seite :ref:`doc_inputevent`."

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:203
msgid "Current gotchas and known issues"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:205
msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for Mono issues <https://github.com/"
"godotengine/godot/labels/topic%3Amono>`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:211
msgid ""
"As explained above, the C# project isn't always kept in sync automatically "
"when things are deleted, renamed or moved in Godot (`#12917 <https://github."
"com/godotengine/godot/issues/12917>`_)."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:214
msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:215
msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:217
msgid ""
"Exporting Mono projects is only supported for desktop platforms (Linux, "
"Windows and macOS). Android, iOS, HTML5 and UWP are not currently supported "
"(`#20267 <https://github.com/godotengine/godot/issues/20267>`_, `#20268 "
"<https://github.com/godotengine/godot/issues/20268>`_ `#20270 <https://"
"github.com/godotengine/godot/issues/20270>`_ `#20271 <https://github.com/"
"godotengine/godot/issues/20271>`_)."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:223
msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:225
msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:233
msgid "Performance of C# in Godot"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:235
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads. C# is faster, but requires some expensive marshalling "
"when talking to Godot."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:243
msgid "Using NuGet packages in Godot"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:245
msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:260
msgid ""
"Whenever packages are added or modified, run ``nuget restore`` in the root "
"of the project directory. To ensure that NuGet packages will be available "
"for msbuild to use, run:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:269
msgid "Profiling your C# code"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:271
msgid ""
"`Mono log profiler <https://www.mono-project.com/docs/debug+profile/profile/"
"profiler/>`_ is available via `this PR <https://github.com/godotengine/godot/"
"pull/26513>`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:272
msgid ""
"External Mono profiler like `JetBrains dotTrace <https://www.jetbrains.com/"
"profiler/>`_ can be used as described `here <https://github.com/godotengine/"
"godot/pull/34382>`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:275
msgid "Configuring VS 2019 for debugging"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:279
msgid ""
"Godot has built-in support for workflows involving several popular C# IDEs. "
"Built-in support for Visual Studio will be including in future versions, but "
"in the meantime, the steps below can let you configure VS 2019 for use with "
"Godot C# projects."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:284
msgid ""
"Install VS 2019 with ``.NET desktop development`` and ``Desktop development "
"with C++`` workloads selected."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:285
msgid ""
"**Ensure that you do not have Xamarin installed.** Do not choose the "
"``Mobile development with .NET`` workload. Xamarin changes the DLLs used by "
"MonoDebugger, which breaks debugging."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:286
msgid ""
"Install the `VSMonoDebugger extension <https://marketplace.visualstudio.com/"
"items?itemName=GordianDotNet.VSMonoDebugger0d62>`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:287
msgid "In VS 2019 --> Extensions --> Mono --> Settings:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:289
msgid "Select ``Debug/Deploy to local Windows``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:290
msgid "Leave ``Local Deploy Path`` blank."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:291
msgid ""
"Set the ``Mono Debug Port`` to the port in Godot --> Project --> Project "
"Settings --> Mono --> Debugger Agent."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:292
msgid ""
"Also select ``Wait for Debugger`` in the Godot Mono options. `This Godot "
"Addon <https://godotengine.org/asset-library/asset/435>`_ may be helpful."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:294
msgid ""
"Run the game in Godot. It should hang at the Godot splash screen while it "
"waits for your debugger to attach."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_basics.rst:295
msgid ""
"In VS 2019, open your project and choose Extensions --> Mono --> Attach to "
"Mono Debugger."
msgstr ""
