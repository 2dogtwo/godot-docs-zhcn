# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 13:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:1
msgid "Signal"
msgstr "Signal"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Signals"
msgstr "Signale"

#: ../../docs/getting_started/step_by_step/signals.rst:10
msgid "Introduction"
msgstr "Einführung"

#: ../../docs/getting_started/step_by_step/signals.rst:12
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"Signale sind Godots Version des *Beobachtungsmusters*. Sie ermöglichen es "
"einem Node, eine Nachricht zu senden, Nachrichten anderer Nodes zu empfangen "
"und auf diese zu antworten. Anstatt beispielsweise ständig zu überprüfen, ob "
"eine Taste gedrückt wird, kann die Taste bei Betätigung ein Signal senden."

#: ../../docs/getting_started/step_by_step/signals.rst:17
msgid ""
"You can read more about the observer pattern here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Weitere Informationen zum Beobachter-Muster findet man hier: http://"
"gameprogrammingpatterns.com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:19
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"Signale sind eine Möglichkeit, deine Spielobjekte von anderen Objekten *zu "
"lösen*, was zu besser organisiertem und überschaubarem Code führt. Anstatt, "
"dass Spielobjekte erwarten, dass andere Objekte immer vorhanden sind, können "
"sie stattdessen Signale aussenden, sodass jedes andere verknüpfte Objekt "
"darauf antworten kann."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"Nachfolgend findest Du einige Beispiele, wie Du Signale in Deinen eigenen "
"Projekten verwenden kannst."

#: ../../docs/getting_started/step_by_step/signals.rst:27
msgid "Timer example"
msgstr "Timer Beispiel"

#: ../../docs/getting_started/step_by_step/signals.rst:29
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"Um zu sehen, wie Signale funktionieren, benutzen wir einen :ref:`Timer "
"<class_Timer>` Node. Erstelle eine neue Szene mit einem Node und zwei "
"Unterelementen: einem \"Timer\" und einem :ref:`Sprite <class_Sprite>`. "
"Benenne Node2D im Szenendock zu TimerExample um."

#: ../../docs/getting_started/step_by_step/signals.rst:33
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Als Textur für die Sprite kannst du das Godot Icon, oder ein anderen Bild "
"das dir gefällt, verwenden. Das kannst du tun, in dem du im Textur Attribut "
"des Sprites den Punkt ``Load`` im Aufklappmenü auswählst. Füge der "
"Wurzelnode ein leeres Skript hinzu."

#: ../../docs/getting_started/step_by_step/signals.rst:37
msgid "Your scene tree should look like this:"
msgstr "Der Szenenbaum sollte so aussehen:"

#: ../../docs/getting_started/step_by_step/signals.rst:41
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"Aktiviere in den Eigenschaften des Timer-Nodes das Kontrollkästchen \"An\" "
"neben *Autostart*. Dadurch wird der Timer automatisch gestartet, wenn Du die "
"Szene startest. Du kannst die *Wartezeit* auf 1 Sekunde belassen."

#: ../../docs/getting_started/step_by_step/signals.rst:45
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"Neben der Registerkarte \"Inspektor\" befindet sich eine Registerkarte mit "
"der Bezeichnung \"Node\". Klicke auf diese Registerkarte, um alle Signale "
"anzuzeigen, die der ausgewählte Node ausgeben kann. Im Falle des Timer-Nodes "
"handelt es sich um den \"Timeout\". Dieses Signal wird immer dann "
"ausgegeben, wenn der Timer \"0\" erreicht."

#: ../../docs/getting_started/step_by_step/signals.rst:52
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"Klicke auf das Signal \"timeout()\" und klicke danach unten im Signalpanel "
"auf \"Verbinden...\". Im folgenden Fenster kann definiert werden, wie das "
"Signal verbunden werden soll:"

#: ../../docs/getting_started/step_by_step/signals.rst:58
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"Auf der linken Seite sind die Nodes in Deiner Szene. Dort kannst du den Node "
"auswählen, auf den das Signal \"hören\" soll. Beachte, dass der Timer-Node "
"blau ist. Dies ist ein visueller Hinweis darauf, dass der Node das Signal "
"aussendet. Wähle den Wurzel-Node aus."

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"Der Ziel-Node *muss* mit einem Skript verbunden sein oder es wird eine "
"Fehlermeldung angezeigt."

#: ../../docs/getting_started/step_by_step/signals.rst:66
msgid ""
"If you toggle the Advanced menu, you'll see on the right side that you can "
"bind an arbitrary number of arguments of (possibly) different types. This "
"can be useful when you have more than one signal connected to the same "
"method, as each signal propagation will result in different values for those "
"extra call arguments."
msgstr ""
"Wenn Sie das Fortgeschrittene-Menü anzeigen, werden Sie auf der rechten "
"Seite sehen, dass man eine einfache Nummer von Argumenten von (möglichen) "
"unterschiedlichen Typen anbinden kann. Das kann nützlich sein, wenn man mehr "
"als ein Signal mit der selben Methode verbunden hat, da jede Signal-"
"Verwendung in unterschiedlichen Werten für diese extra Aufruf-Argumente "
"resultieren werden."

#: ../../docs/getting_started/step_by_step/signals.rst:70
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"Am unteren Rand des Fensters befindet sich ein Feld mit der Bezeichnung "
"\"Methode im Node\". Dies ist der Name der Funktion im Skript des Ziel-"
"Nodes, die verwendt werden soll. Standardmäßig erstellt Godot diese Funktion "
"mit der Namenskonvention ``_on_<node_name>_<signal_name>``, aber Du kannst "
"sie ändern, wenn Du möchtest."

#: ../../docs/getting_started/step_by_step/signals.rst:75
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"Klicke auf \"Verbinden\" und Du siehst, dass die Funktion im Skript erstellt "
"wurde:"

#: ../../docs/getting_started/step_by_step/signals.rst:96
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"Jetzt können wir den Platzhaltercode durch den Code ersetzen, den wir "
"ausführen möchten, wenn das Signal empfangen wird. Lassen wir das Sprite "
"blinken:"

#: ../../docs/getting_started/step_by_step/signals.rst:121
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"Starte die Szene und beobachte, wie das Sprite im Sekundentakt ein- und "
"ausgeschaltet wird. Du kannst die *Wait Time* -Eigenschaft des Timers "
"verändern, um die Blinkfrequenz zu ändern."

#: ../../docs/getting_started/step_by_step/signals.rst:125
msgid "Connecting signals in code"
msgstr "Signale im Code verbinden"

#: ../../docs/getting_started/step_by_step/signals.rst:127
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"Du kannst die Signalverbindung auch im Code und nicht mit dem Editor "
"herstellen. Dies ist normalerweise erforderlich, wenn Du Nodes über Code "
"instanziierst. Daher kannst Du den Editor nicht zum Herstellen der "
"Verbindung verwenden."

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"Trenne zunächst das Signal, indem Du die Verbindung in der Registerkarte "
"\"Node\" des Timers auswählst und dort auf Trennen klickst."

#: ../../docs/getting_started/step_by_step/signals.rst:136
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"Um die Verbindung im Code herzustellen, können wir die Funktion ``connect`` "
"verwenden. Wir legen die Verbindung in ``_ready()``an, sodass sie direkt "
"beim Ausführen erstellt wird. Die Syntax der Funktion ist ``<source_node>."
"connect(<signal_name>, <target_node>, <target_function_name>)``. Hier ist "
"der Code für unsere Timer-Verbindung:"

#: ../../docs/getting_started/step_by_step/signals.rst:171
msgid "Custom signals"
msgstr "Benutzerdefinierte Signale"

#: ../../docs/getting_started/step_by_step/signals.rst:173
msgid "You can also declare your own custom signals in Godot:"
msgstr "Du kannst auch Deine eigenen Signale in Godot deklarieren:"

#: ../../docs/getting_started/step_by_step/signals.rst:192
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"Nach der Deklaration erscheinen Deine benutzerdefinierten Signale im "
"Inspektor und können wie die eingebauten Signale eines Nodes verbunden "
"werden."

#: ../../docs/getting_started/step_by_step/signals.rst:195
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr ""
"Um ein Signal per Code auszusenden, verwende die Funktion ``emit_signal``:"

#: ../../docs/getting_started/step_by_step/signals.rst:222
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""
"Ein Signal kann optional ein oder mehrere Argumente deklarieren. "
"Spezifiziere die Argumentnamen zwischen den Klammern:"

#: ../../docs/getting_started/step_by_step/signals.rst:243
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Die Signal-Argumente werden oben im Bearbeitungs-Node-Dock auftauchen, und "
"Godot kann diese nutzen, um Aufruf-Funktionen für Sie zu generieren. "
"Allerdings kann man immer noch jede beliebige Anzahl von Argumenten "
"aufrufen, wenn man Signale aufruft. Es ist also in der Hand der Person, "
"diese richtigen Werte aufzurufen."

#: ../../docs/getting_started/step_by_step/signals.rst:248
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr ""
"Um Werte zu übergeben, füge sie als zweites Argument zur Funktion "
"``emit_signal`` hinzu:"

#: ../../docs/getting_started/step_by_step/signals.rst:276
msgid "Conclusion"
msgstr "Fazit"

#: ../../docs/getting_started/step_by_step/signals.rst:278
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Viele von Godots eingebauten Node-Typen verfügen über Signale, mit denen Du "
"Ereignissen kannst. Zum Beispiel ein :ref:`Area2D <class_Area2D>` würde eine "
"Münze repräsentieren, die immer das Signal ``body_entered`` sendet, sobald "
"die Spielerfigur die Kollisions-Form der Münze berührt. Damit weißt Du, das "
"der Spieler die Münze erreicht hat und einsammeln kann."

#: ../../docs/getting_started/step_by_step/signals.rst:283
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"Im nächsten Abschnitt, :ref:`doc_your_first_game`, wirst du ein komplettes "
"Spiel erstellen, inklusive der Nutzung von Signalen, um die verschiedenen "
"Spielkomponenten miteinander zu verbinden."
