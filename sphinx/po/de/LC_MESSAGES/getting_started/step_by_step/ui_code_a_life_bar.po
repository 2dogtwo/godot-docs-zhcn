# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-28 16:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:4
msgid "Control the game's UI with code"
msgstr "Kontrolle der Spiel-Benutzeroberfläche mittels Code"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:7
msgid "Intro"
msgstr "Einführung"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:9
msgid ""
"In this tutorial, you will connect a character to a life bar and animate the "
"health loss."
msgstr ""
"In dieser Anleitung werden wir einen Charakter mit einer Lebensleiste "
"verbinden und den Gesundheitsverlust animieren."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:14
msgid ""
"Here's what you'll create: the bar and the counter animate when the "
"character takes a hit. They fade when it dies."
msgstr ""
"Hier ist, was Sie erschaffen werden: eine Bar und einen Zähler werden Sie "
"animieren, wenn der Charakter Schaden nimmt. Sie verblassen, wenn er stirbt."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:18
msgid "You will learn:"
msgstr "Sie lernen hier:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:20
msgid "How to **connect** a character to a GUI with signals"
msgstr ""
"Wie man einen Charakter mit einer GUI **verbindet**, indem man Signale "
"benutzt"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:21
msgid "How to **control** a GUI with GDscript"
msgstr "Wie man eine GUI mit GDScript **kontrolliert**"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:22
msgid "How to **animate** a life bar with the :ref:`Tween <class_Tween>` node"
msgstr ""
"Wie man eine Lebensbar mit einer :ref:`Tween <class_Tween>`-Node animiert"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:25
msgid ""
"If you want to learn how to set up the interface instead, check out the step-"
"by-step UI tutorials:"
msgstr ""
"Wenn Sie stattdessen lernen möchten, wie man ein Interface konfiguriert, "
"werfen Sie einen Blick auf die Schritt-für-Schritt UI-Anleitung:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:28
msgid ":doc:`ui_main_menu`"
msgstr ":doc:`ui_main_menu`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:29
msgid ":doc:`ui_game_user_interface`"
msgstr ":doc:`ui_game_user_interface`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:32
msgid ""
"When you code a game, you want to build the core gameplay first: the main "
"mechanics, player input, win and loss conditions. The UI comes a bit later. "
"You want to keep all the elements that make up your project separate if "
"possible. Each character should be in its own scene, with its own scripts, "
"and so should the UI elements. This prevents bugs, keeps your project "
"manageable, and allows different team members to work on different parts of "
"the game."
msgstr ""
"Wenn Sie mit der Entwicklung beginnen, kümmern Sie sich zunächst um die "
"Kernaspekte des Spiels: die Grundmechaniken, Eingabesteuerung, Sieg- und "
"Verlustbedingungen. Die UI kommt etwas später nach. Halten Sie sämtliche "
"Elemente des Projekts soweit es geht modular. Jeder Charakter sollte in "
"einer eigenen Szene mit dazugehörigen Skripten untergebracht werden. "
"Gleiches gilt für UI-Elemente. Dies beugt potenziellen Bugs vor und hält das "
"Projekt überschaubar und erlaubt es Teammitgliedern, gemeinsam an "
"unterschiedlichen Teilen des Spiels zu arbeiten."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:40
msgid ""
"Once the core gameplay and the UI are ready, you'll need to connect them "
"somehow. In our example, we have the Enemy who attacks the Player at "
"constant time intervals. We want the life bar to update when the Player "
"takes damage."
msgstr ""
"Sobald das Kern-Gameplay und die Benutzeroberfläche fertig sind, müssen Sie "
"sie irgendwie verbinden. In unserem Beispiel haben wir den Feind, der den "
"Spieler in konstanten Zeitintervallen angreift. Wir möchten, dass die "
"Lebensleiste aktualisiert wird, wenn der Spieler Schaden nimmt."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:45
msgid "To do this, we will use **signals**."
msgstr "Dafür benutzt man **Signale**."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:49
msgid ""
"Signals are Godot's version of the Observer pattern. They allow us to send "
"out some message. Other nodes can connect to the object that **emits** the "
"signal and receive the information. It's a powerful tool we use a lot for "
"User Interface and achievement systems. You don't want to use them "
"everywhere, though. Connecting two nodes adds some coupling between them. "
"When there's a lot of connections, they become hard to manage. For more "
"information, check out the `signals video tutorial <https://youtu.be/"
"l0BkQxF7X3E>`_ on GDquest."
msgstr ""
"Signale sind die Implementierung des Beobachter-Entwurfsmusters (Observer) "
"in Godot. Sie erlauben das Absenden von Nachrichten, die von einem anderen "
"Objekt empfangen werden kann. Dazu wird ein Node mit dem Objekt verbunden, "
"welches das Signal **emittiert** und erhält so die Informationen des "
"Signals. Ein mächtiges Werkzeug, vor allem bei der Umsetzung von "
"Benutzeroberflächen und Errungenschaften. Da das Verbinden zweier Nodes "
"gleichzeitig eine gewisse Abhängigkeit voneinander erzeugt, sollten sie "
"allerdings stets mit Bedacht verwendet werden, bei zu vielen Verbindungen "
"kann es schwierig werden, den Überblick zu behalten. Für mehr Informationen, "
"schauen Sie sich das `signals video tutorial <https://youtu.be/"
"l0BkQxF7X3E>`_ von GDquest an."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:53
msgid "Download and explore the start project"
msgstr "Laden und sehen Sie sich das Startprojekt an"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:55
msgid ""
"Download the Godot project: :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. It contains all the assets and scripts you need to "
"get started. Extract the .zip archive to get two folders: `start` and `end`."
msgstr ""
"Laden Sie das Godot-Projekt herunter: :download:`ui_code_life_bar.zip <files/"
"ui_code_life_bar.zip>`. Es enthält sämtliche Nutzerinhalte und Skripte die "
"Sie zum Start benötigen. Entpacken Sie das Zip-Archiv, um diese beiden "
"Ordner zu erhalten: `start` und `end`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:58
msgid ""
"Load the ``start`` project in Godot. In the ``FileSystem`` dock, double "
"click on LevelMockup.tscn to open it. It's an RPG game's mockup where 2 "
"characters face each other. The pink enemy attacks and damages the green "
"square at regular time intervals, until its death. Feel free to try out the "
"game: the basic combat mechanics already work. But as the character isn't "
"connected to the life bar, the ``GUI`` doesn't do anything."
msgstr ""
"Laden Sie das ``start``-Projekt in Godot. Im ``Dateisystem``-Fenster, "
"doppelklicken auf LevelMockup.tscn, um es zu öffnen. Es ist ein RPG-Mock-up "
"in dem sich zwei Charaktere gegenüberstehen. Der rosafarbene Gegner greift "
"das grüne Viereck an und fügt ihm regelmäßig Schaden zu, bis es stirbt. "
"Probieren Sie das Spiel aus: eine grundlegende Kampfmechnik ist bereits "
"enthalten. Allerdings funktioniert die ``GUI`` noch nicht, da der Spieler "
"bisher nicht mit der Lebensanzeige verbunden ist."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:68
msgid ""
"This is typical of how you'd code a game: you implement the core gameplay "
"first, handle the player's death, and only then you'll add the interface. "
"That's because the UI listens to what's happening in the game. So it can't "
"work if other systems aren't in place yet. If you design the UI before you "
"prototype and test the gameplay, chances are it won't work well and you'll "
"have to re-create it from scratch."
msgstr ""
"Das ist typisch für jedes Spiel: Als Erstes implementieren Sie die Mechanik, "
"die mit der GUI interagiert, in diesem Fall den Lebensverlust des Spielers, "
"und erst dann fügen Sie die Benutzeroberfläche hinzu. Das liegt daran, dass "
"die UI darauf reagiert was im Spiel geschieht. Somit kann sie nicht korrekt "
"funktionieren, solange der Spielablauf nicht integriert ist und muss unter "
"Umständen von neuem erstellt werden."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:71
msgid "The scene contains a background sprite, a GUI, and two characters."
msgstr ""
"Die Szene enthält einen Hintergrund-Sprite, eine GUI sowie zwei Charaktere."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:75
msgid "The scene tree, with the GUI scene set to display its children"
msgstr ""
"Der Szenenbaum mit der GUI Szene ist so gesetzt, dass die Kinder angezeigt "
"werden"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:77
msgid ""
"The GUI scene encapsulates all of the game's Graphical User Interface. It "
"comes with a barebones script where we get the path to nodes that exist "
"inside the scene:"
msgstr ""
"Die GUI-Szene kapselt die gesamte grafische Benutzeroberfläche des Spiels "
"ein. Es wird mit einem Barebones-Skript geliefert, in dem der Pfad zu den "
"Nodes in der Szene angegeben wird:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:105
msgid ""
"``number_label`` displays a life count as a number. It's a ``Label`` node"
msgstr ""
"``number_label```zeigt einen Lebenszähler als eine Nummer. Es ist eine "
"``Label``-Node"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:107
msgid "``bar`` is the life bar itself. It's a ``TextureProgress`` node"
msgstr "``bar`` ist die Lebensanzeige, ein ``TextureProgress``-Node"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:108
msgid ""
"``tween`` is a component-style node that can animate and control any value "
"or method from any other node"
msgstr ""
"``tween`` ist eine Node im Komponentenstil, die man animieren und ihr "
"verschiedene Werte oder Methoden von anderen Nodes zuweisen kann"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:113
msgid ""
"The project uses a simple organization that works for game jams and tiny "
"games."
msgstr ""
"Das Projekt ist organisatorisch einfach gestaltet, geeignet für Game Jams "
"und kleinere Spiele."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:115
msgid ""
"At the root of the project, in the `res://` folder, you will find the "
"`LevelMockup`. That's the main game scene and the one we will work with. All "
"the components that make up the game are in the `scenes/` folder. The "
"`assets/` folder contains the game sprites and the font for the HP counter. "
"In the `scripts/` folder you will find the enemy, the player, and the GUI "
"controller scripts."
msgstr ""
"Auf der Wurzelebene des Projekts, im `res://`-Verzeichnis, finden Sie "
"`LevelMockup`. Das ist die Hauptszene des Spiels, mit der wir auch arbeiten "
"werden. Sämtliche Komponenten, aus denen das Spiel besteht, befinden sich im "
"`scenes/`-Ordner. Der `assets/`-Ordner enthält alle Sprites und die "
"Schriftart (Font) für die HP-Anzeige. Unter `scripts/` finden Sie die "
"Objekte für Spieler und Gegner sowie die Controller-Skripte der GUI."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:117
msgid ""
"Click the edit scene icon to the right of the node in the scene tree to open "
"the scene in the editor. You'll see the LifeBar and EnergyBar are sub-scenes "
"themselves."
msgstr ""
"Klicken Sie auf das Szene-Bearbeiten Symbol auf der rechten Seite des Node "
"in dem Szenenbaum um die Szene im Editor zu öffnen. Sie werden eine LifeBar "
"und EnergieBar sehen, die selbst Unter-Szenen sind."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:121
msgid "The scene tree, with the Player scene set to display its children"
msgstr ""
"Der Szenenbaum, mit der ausgewählten Spielerszene und den untergeordneten "
"Elementen"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:124
msgid "Set up the Lifebar with the Player's max\\_health"
msgstr "Richte den Lebensbalken mit der maximalen Gesundheit des Spielers ein"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:126
msgid ""
"We have to tell the GUI somehow what the player's current health is, to "
"update the lifebar's texture, and to display the remaining health in the HP "
"counter in the top left corner of the screen. To do this we send the "
"player's health to the GUI every time they take damage. The GUI will then "
"update the ``Lifebar`` and ``Number`` nodes with this value."
msgstr ""
"Wir müssen der GUI irgendwie mitteilen, wie der aktuelle Gesundheitszustand "
"des Players ist, die Textur des Lebensbalkens aktualisieren und den "
"verbleibenden Gesundheitszustand im HP-Zähler in der oberen linken Ecke des "
"Bildschirms anzeigen. Dazu senden wir die Gesundheit des Spielers bei jedem "
"Schaden an die GUI. Die GUI aktualisiert dann die Nodes ``Lifebar`` und "
"``Number`` mit diesem Wert."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:132
msgid ""
"We could stop here to display the number, but we need to initialize the "
"bar's ``max_value`` for it to update in the right proportions. The first "
"step is thus to tell the ``GUI`` what the green character's ``max_health`` "
"is."
msgstr ""
"Wir könnten hier anhalten, um die Zahl anzuzeigen, aber wir müssen den "
"``max_value`` des Balkens initialisieren, damit er in den richtigen "
"Proportionen aktualisiert wird. Der erste Schritt besteht also darin, der "
"``GUI`` zu sagen, was das ``max_health`` des grünen Zeichens ist."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:139
msgid ""
"The bar, a `TextureProgress`, has a `max_value` of `100` by default. If you "
"don't need to display the character's health with a number, you don't need "
"to change its `max_value` property. You send a percentage from the `Player` "
"to the `GUI` instead:  `health / max_health * 100`."
msgstr ""
"Die Leiste, eine `TextureProgress`, hat standardmäßig einen `Maximalwert` "
"von `100`. Wenn Sie nicht die Gesundheit des Charakters mit einer Number "
"anzeigen wollen, brauchen Sie nicht ihre `Maximalwert` Eigenschaft ändern. "
"Sie senden einen Prozentsatz von dem `Spieler` stattdessen zur `GUI`:.."
"`health/max_health * 100`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:143
msgid ""
"Click the script icon to the right of the ``GUI`` in the Scene dock to open "
"its script. In the ``_ready`` function, we're going to store the "
"``Player``'s ``max_health`` in a new variable and use it to set the "
"``bar``'s ``max_value``:"
msgstr ""
"Klicken Sie das Skript Icon rechts neben ``GUI`` im Szenen Reiter um sein "
"Skript zu öffnen. In der ``_ready`` Funktion werden wir eine neue Variable "
"namens ``max_health`` (maximales leben) für den ``Player`` (Spieler) "
"speichern und ihr den Wert von ``bar``s (Balken) ``max_value`` (maximaler "
"Wert) geben:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:164
msgid ""
"Let's break it down. ``$\"../Characters/Player\"`` is a shorthand that goes "
"one node up in the scene tree, and retrieves the ``Characters/Player`` node "
"from there. It gives us access to the node. The second part of the "
"statement, ``.max_health``, accesses the ``max_health`` on the Player node."
msgstr ""
"Schauen wir uns das mal genauer an. ``$\"../Characters/Player\"``` ist eine "
"Abkürzung, die im Szenenbaum einen Node nach oben geht und von dort aus den "
"Node ``Characters/Player`` abruft. Das gibt uns Zugang zum Node. Der zweite "
"Teil der Anweisung, ``.max_health``, greift auf die ``max_health``-Variable "
"auf dem Player-Node zu."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:170
msgid ""
"The second line assigns this value to ``bar.max_value``. You could combine "
"the two lines into one, but we'll need to use ``player_max_health`` again "
"later in the tutorial."
msgstr ""
"Die zweite Zeile weist den Wert ``bar.max_value`` zu. Die zwei Zeilen "
"könnten auch zu einer Kombiniert werden, doch ``player_max_health`` wird "
"später in der Anleitung noch gebraucht werden."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:174
msgid ""
"``Player.gd`` sets the ``health`` to ``max_health`` at the start of the "
"game, so we could work with this. Why do we still use ``max_health``? There "
"are two reasons:"
msgstr ""
"Am Anfang des Spieles wird ``health`` auf ``max_health`` gesetzt, damit wir "
"es gebrauchen können. Warum brauchen wir ``max_health`` immer noch? Es gibt "
"zwei Gründe:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:178
msgid ""
"We don't have the guarantee that ``health`` will always equal "
"``max_health``: a future version of the game may load a level where the "
"player already lost some health."
msgstr ""
"Wir können nicht davon ausgehen, dass ``health`` in jedem Fall "
"``max_health`` entspricht: Eine spätere Version des Spiels könnte "
"beispielsweise einen Level laden, in welchem der Spieler bereits etwas "
"Gesundheit verloren hat."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:184
msgid ""
"When you open a scene in the game, Godot creates nodes one by one, following "
"the order in your Scene dock, from top to bottom. `GUI` and `Player` are not "
"part of the same node branch. To make sure they both exist when we access "
"each other, we have to use the `_ready` function. Godot calls `_ready` right "
"after it loaded all nodes, before the game starts. It's the perfect function "
"to set everything up and prepare the game session. Learn more about _ready: :"
"doc:`scripting_continued`"
msgstr ""
"Wenn Sie eine Szene im Spiel öffnen, kreiert Godot Nodes einen nach dem "
"anderen, in der Reihenfolge des Szenen Reiters, von oben nach unten. `GUI` "
"und `Player` sind nicht teil des selben Node-Zweiges. Um sicherzustellen, "
"dass beide existieren wenn wir auf sie zugreifen, benutzen wir die `_ready` "
"Funktion. Godot führt `_ready` genau dann aus, wenn es alle Nodes geladen "
"hat, bevor das Spiel startet. Es ist die perfekte Funktion um alles "
"einzustellen und die Spiel Sitzung vorzubereiten. Mehr zu _ready: :doc:"
"`scripting_continued`"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:188
msgid "Update health with a signal when the player takes a hit"
msgstr ""
"Aktualisieren Sie die Gesundheit mit einem Signal, wenn der Spieler einen "
"Treffer erhält."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:190
msgid ""
"Our GUI is ready to receive the ``health`` value updates from the "
"``Player``. To achieve this we're going to use **signals**."
msgstr ""
"Unsere GUI ist bereit um Aktualisierungen der ``health`` Werte vom "
"``Player`` zu bekommen."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:195
msgid ""
"There are many useful built-in signals like `enter_tree` and `exit_tree`, "
"that all nodes emit when they are respectively created and destroyed. You "
"can also create your own using the `signal` keyword. On the `Player` node, "
"you'll find two signals we created for you: `died` and `health_changed`."
msgstr ""
"Es gibt viele nützliche eingebaute Signale wie `enter_tree` und `exit_tree`, "
"die alle Nodes aussenden, wenn sie jeweils erzeugt und zerstört werden. Sie "
"können auch Ihre eigenen mit dem Schlüsselwort `signal` erstellen. Auf dem "
"Node `Player` finden Sie zwei Signale, die wir erstellt haben: `died` und "
"`health_changed`."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:197
msgid ""
"Why don't we directly get the ``Player`` node in the ``_process`` function "
"and look at the health value? Accessing nodes this way creates tight "
"coupling between them. If you did it sparingly it may work. As your game "
"grows bigger, you may have many more connections. If you get nodes this way "
"it gets complex quickly. Not only that: you need to listen to the state "
"change constantly in the ``_process`` function. This check happens 60 times "
"a second and you'll likely break the game because of the order in which the "
"code runs."
msgstr ""
"Warum holen wir nicht direkt den ``Player`` Node in der ``_process`` "
"Funktion und betrachten den Health-Wert? Wenn wir auf diese Weise auf Nodes "
"zugreifen, entsteht eine enge Kopplung zwischen ihnen. Wenn Sie es sparsam "
"machen, kann es funktionieren. Wenn das Spiel größer wird, haben Sie "
"möglicherweise viel mehr Verbindungen. Wenn Sie auf diese Weise Nodes "
"erhalten, wird es schnell komplex. Nicht nur das: Sie müssen in der Funktion "
"``_process``` ständig auf die Zustandsänderung achten. Diese Überprüfung "
"findet 60 Mal pro Sekunde statt und kann das Spiel verlangsamen, wenn es in "
"einem großen Spiel mit zu vielen Verbindungen passiert."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:206
msgid ""
"On a given frame you may look at another node's property *before* it was "
"updated: you get a value from the last frame. This leads to obscure bugs "
"that are hard to fix. On the other hand, a signal is emitted right after a "
"change happened. It **guarantees** you're getting a fresh piece of "
"information. And you will update the state of your connected node *right "
"after* the change happened."
msgstr ""
"Auf einem bestimmten Frame können Sie sich die Eigenschaft eines anderen "
"Nodes ansehen, *vor dessen Aktualisierung*: Sie erhalten einen Wert aus dem "
"letzten Frame. Dies führt zu obskuren Bugs, die schwer zu beheben sind. Mit "
"Signalen kann man das verhindern: Ein Signal wird garantiert direkt nach der "
"Änderung mit dem neuen Wert aufgerufen und verhindert damit diese Fehler."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:215
msgid ""
"The Observer pattern, that signals derive from, still adds a bit of coupling "
"between node branches. But it's generally lighter and more secure than "
"accessing nodes directly to communicate between two separate classes. It can "
"be okay for a parent node to get values from its children. But you'll want "
"to favor signals if you're working with two separate branches. Read Game "
"Programming Patterns for more information on the `Observer pattern <https://"
"gameprogrammingpatterns.com/observer.html>`_. The `full book <https://"
"gameprogrammingpatterns.com/contents.html>`_ is available online for free."
msgstr ""
"Das Observer-Pattern, von dem die Signals abgeleitet sind, fügt den "
"einzelnen Nodes trotzdem eine kleine Menge an Kopplung hinzu. Aber es "
"erzeugt im Allgemeinen nicht so viel Kopplung und ist sicherer als der "
"direkte Zugriff auf Funktionen anderer Klassen bzw. Nodes. Es kann in "
"Ordnung sein, dass Elternknoten Werte von den Kindknoten erhalten, aber bei "
"der Kommunikation von Knoten in unterschiedlichen Verzweigungen sollten "
"Signals bevorzugt werden. Im kostenlosen Online verfügbaren Buch \"Game "
"Programming Patterns\", ist das Observer Pattern noch detaillierter "
"beschrieben: <http://gameprogrammingpatterns.com/observer.html>."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:219
msgid ""
"With this in mind, let's connect the ``GUI`` to the ``Player``. Click on the "
"``Player`` node in the scene dock to select it. Head down to the Inspector "
"and click on the Node tab. This is the place to connect nodes to listen to "
"the one you selected."
msgstr ""
"In diesem Sinne verbinden wir das ``GUI`` mit dem ``Player``. Klicke auf den "
"Node ``Player`` im Szene-Fenster, um ihn auszuwählen. Gehen Sie zum "
"Inspektor und klicken Sie auf das Fenster \"Node\". Dies ist der Ort, an dem "
"man Nodes verbinden kann, um den von Ihnen ausgewählten Node anzuhören."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:224
msgid "The first section lists custom signals defined in ``Player.gd``:"
msgstr ""
"Der erste Abschnitt listet benutzerdefinierteSignale in ``Player.gd`` auf:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:226
msgid ""
"``died`` is emitted when the character died. We will use it in a moment to "
"hide the UI."
msgstr ""
"``died`` wird angezeigt wenn der Charakter stirbt. Wir werden dies in einem "
"Moment verwenden um die UI zu verbergen."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:228
msgid "``health_changed`` is emitted when the character got hit."
msgstr "``health_changed`` wird angezeigt wenn der Charakter getroffen wird."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:232
msgid "We're connecting to the health\\_changed signal"
msgstr "Wir verbinden das health_changed Signal"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:234
msgid ""
"Select ``health_changed`` and click on the Connect button in the bottom "
"right corner to open the Connect Signal window. On the left side you can "
"pick the node that will listen to this signal. Select the ``GUI`` node. The "
"right side of the screen lets you pack optional values with the signal. We "
"already took care of it in ``Player.gd``. In general I recommend not to add "
"too many arguments using this window as they're less convenient than doing "
"it from the code."
msgstr ""
"Wählen Sie ``health_changed`` aus und klicken auf \"Connect\" unten rechts "
"im Fenster um das \"Signal Verbinden\"-Fenster zu öffnen. Links können Sie "
"den Node auswählen, der auf das Signal reagieren soll. Wählen Sie hier den "
"``GUI``-Node aus. Rechts können Sie zusätzliche Werte auswählen, die mit dem "
"Signal gesendet werden sollen. Wir haben uns allerdings bereits in ``Player."
"gd`` darum gekümmert. Ich empfehle Ihnen, vor allem bei mehreren Argumenten, "
"die Argumente lieber im Code als in diesem Fenster zu definieren, da es im "
"Code einfacher ist."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:244
msgid "The Connect Signal window with the GUI node selected"
msgstr "Das \"Connect Signal\"-Fenster mit der ausgewählten GUI Node"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:248
msgid ""
"You can optionally connect nodes from the code. However doing it from the "
"editor has two advantages:"
msgstr ""
"Man kann Signale auch im Code verbinden. Im Editor hat man aber 2 Vorteile:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:250
msgid "Godot can write new callback functions for you in the connected script"
msgstr ""
"Godot kann automatisch Funktionen in dem Script erstellen, mit dem es "
"verbunden ist"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:251
msgid ""
"An emitter icon appears next to the node that emits the signal in the Scene "
"dock"
msgstr "Ein \"Emitter\"-Icon erscheint neben der Node im Szenen-Fenster"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:253
msgid ""
"At the bottom of the window you will find the path to the node you selected. "
"We're interested in the second row called \"Method in Node\". This is the "
"method on the ``GUI`` node that gets called when the signal is emitted. This "
"method receives the values sent with the signal and lets you process them. "
"If you look to the right, there is a \"Make Function\" radio button that is "
"on by default. Click the connect button at the bottom of the window. Godot "
"creates the method inside the ``GUI`` node. The script editor opens with the "
"cursor inside a new ``_on_Player_health_changed`` function."
msgstr ""
"Am unteren Rand des Fensters finden Sie den Pfad zu dem von Ihnen "
"ausgewählten Nodes. Wir sind an der zweiten Zeile \"Methode im Knoten\" "
"interessiert. Dies ist die Methode auf dem ``GUI```-Node, die aufgerufen "
"wird, wenn das Signal ausgegeben wird. Dieses Verfahren empfängt die mit dem "
"Signal gesendeten Werte und ermöglicht deren Verarbeitung. Rechts gibt es "
"einen Button \"Make Function\", der standardmäßig eingeschaltet ist. Klicken "
"Sie auf den Button Verbinden am unteren Rand des Fensters. Godot erstellt "
"die Methode innerhalb des ``GUI`` Nodes. Der Skripteditor öffnet sich mit "
"dem Cursor innerhalb einer neuen ``_on_Player_health_changed`` Funktion."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:265
msgid ""
"When you connect nodes from the editor, Godot generates a method name with "
"the following pattern: ``_on_EmitterName_signal_name``. If you wrote the "
"method already, the \"Make Function\" option will keep it. You may replace "
"the name with anything you'd like."
msgstr ""
"Wenn eine Node im Editor verbunden wird, generiert Godot eine Methode nach "
"dem folgenden Musster: ``_on_EmitterName_signal_name``. Falls die Methode "
"bereits existiert, bleibt die \"Erstelle Funktion\". Der Name kann nach "
"belieben verändert werden."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:272
msgid "Godot writes the callback method for you and takes you to it"
msgstr "Godot erstellt die Callback Methode für Sie und führt Sie dorthin"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:274
msgid ""
"Inside the parentheses after the function name, add a ``player_health`` "
"argument. When the player emits the ``health_changed`` signal, it will send "
"its current ``health`` alongside it. Your code should look like:"
msgstr ""
"Fügen Sie innerhalb der Klammern nach dem Funktionsnamen ein "
"``Player_Health`` Argument hinzu. Wenn der Spieler das Signal "
"``health_changed`` aussendet, sendet er seine aktuelle ``health`` mit. Ihr "
"Code sollte so aussehen:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:292
msgid ""
"The engine does not convert PascalCase to snake_case, for C# examples we'll "
"be using PascalCase for method names & camelCase for method parameters, "
"which follows the official `C# naming conventions. <https://docs.microsoft."
"com/en-us/dotnet/standard/design-guidelines/capitalization-conventions>`_"
msgstr ""
"Die Engine konvertiert PascalCase nicht in snake_case, für C#-Beispiele "
"werden wir PascalCase für Methodennamen und camelCase für Methodenparameter "
"verwenden, was den offiziellen `C#-Namenskonventionen folgt. <https://docs."
"microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-"
"conventions>``_"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:299
msgid ""
"In Player.gd, when the Player emits the health\\_changed signal, it also "
"sends its health value"
msgstr ""
"Wenn der Spieler in Player.gd das Signal \"health\\_changed signal\" "
"ausgibt, sendet er auch seinen Gesundheitswert"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:302
msgid ""
"Inside ``_on_Player_health_changed``, let's call a second function called "
"``update_health`` and pass it the ``player_health`` variable."
msgstr ""
"Innerhalb von ``_on_Player_health_changed``, rufen wir eine zweite Funktion "
"namens ``update_health`` auf und übergeben ihr die ``Player_health`` "
"Variable."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:307
msgid ""
"We could directly update the health value on `LifeBar` and `Number`. There "
"are two reasons to use this method instead:"
msgstr ""
"Wir könnten den Gesundheitswert auf `LifeBar` und `Number` direkt "
"aktualisieren. Es gibt zwei Gründe, diese Methode stattdessen zu verwenden:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:309
msgid ""
"The name makes it clear for our future selves and teammates that when the "
"player took damage, we update the health count on the GUI"
msgstr ""
"Der Name macht deutlich, dass wir, wenn der Spieler Schaden genommen hat, "
"die Gesundheitszählung auf der Benutzeroberfläche ( GUI ) aktualisieren"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:310
msgid "We will reuse this method a bit later"
msgstr "Wir werden diese Methode etwas später wiederverwenden"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:312
msgid ""
"Create a new ``update_health`` method below ``_on_Player_health_changed``. "
"It takes a new\\_value as its only argument:"
msgstr ""
"Erstellen eine neue ``update_health`` Methode unter "
"``_on_Player_health_changed```. Sie nimmt einen neuen\\_Wert als einziges "
"Argument:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:327
msgid "This method needs to:"
msgstr "Diese Methode soll es sein:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:329
msgid ""
"set the ``Number`` node's ``text`` to ``new_value`` converted to a string"
msgstr ""
"Setzen Sie``Number`` node's ``text`` auf``new_value`` , der in eine "
"Zeichenkette umgewandelt wird"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:331
msgid "set the ``TextureProgress``'s ``value`` to ``new_value``"
msgstr "setzen Sie den ``TextureProgress````value``auf ``new_value``"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:350
msgid ""
"``str`` is a built-in function that converts about any value to text. "
"``Number``'s ``text`` property requires a string, so we can't assign it to "
"``new_value`` directly"
msgstr ""
"``str`` ist eine eingebaute Funktion, die etwa jeden Wert in Text umwandelt. "
"Die ``Nummer`` ``Text``-Eigenschaft erfordert eine Zeichenkette, so dass wir "
"sie nicht direkt ``new_value`` zuweisen können"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:354
msgid ""
"Also call ``update_health`` at the end of the ``_ready`` function to "
"initialize the ``Number`` node's ``text`` with the right value at the start "
"of the game. Press :kbd:`F5` to test the game: the life bar updates with "
"every attack!"
msgstr ""
"Rufen Sie auch ``update_health`` am Ende der Funktion ``_ready`` auf, um den "
"``Nummer``-Node ``Text`` mit dem richtigen Wert zu Beginn des Spiels zu "
"initialisieren. Drücken Sie :kbd:`F5`, um das Spiel zu testen: die "
"Rettungsleiste wird bei jedem Angriff aktualisiert!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:361
msgid ""
"Both the Number node and the TextureProgress update when the Player takes a "
"hit"
msgstr ""
"Sowohl der Nummer-Node als auch der TextureProgress werden aktualisiert, "
"wenn der Spieler einen Treffer erhält"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:365
msgid "Animate the loss of life with the Tween node"
msgstr "Animieren Sie den Verlust von Leben mit dem Tween-Node"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:367
msgid ""
"Our interface is functional, but it could use some animation. That's a good "
"opportunity to introduce the ``Tween`` node, an essential tool to animate "
"properties. ``Tween`` animates anything you'd like from a start to an end "
"state over a certain duration. For example, it can animate the health on the "
"``TextureProgress`` from its current level to the ``Player``'s new "
"``health`` when the character takes damage."
msgstr ""
"Unsere Schnittstelle ist funktional, aber sie könnte eine Animation "
"gebrauchen. Das ist eine gute Gelegenheit, den ``Tween``-Node einzuführen, "
"ein wesentliches Werkzeug zur Animation von Eigenschaften. ``Tween`` "
"animiert alles, was Sie von einem Anfangs- bis zu einem Endzustand über eine "
"bestimmte Dauer haben möchten. Zum Beispiel kann es die Gesundheit auf dem "
"``TextureProgress`` von seinem aktuellen Level bis zur neuen ``health`` des "
"Spielers animieren, wenn der Charakter Schaden nimmt."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:374
msgid ""
"The ``GUI`` scene already contains a ``Tween`` child node stored in the "
"``tween`` variable. Let's now use it. We have to make some changes to "
"``update_health``."
msgstr ""
"Die ``GUI``` Szene enthält bereits einen ``Tween`` Kind-Node, der in der "
"``Tween``` Variable gespeichert ist. Lassen Sie uns diese nun verwenden. Wir "
"müssen einige Änderungen an ``update_health`` vornehmen."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:378
msgid ""
"We will use the ``Tween`` node's ``interpolate_property`` method. It takes "
"seven arguments:"
msgstr ""
"Wir werden die ``Tween```Nodes ``Interpolate_property`` Methode verwenden. "
"diese benötigt sieben Argumente:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:381
msgid "A reference to the node who owns the property to animate"
msgstr "Ein Verweis auf den Node, dem die zu animierende Eigenschaft gehört"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:382
msgid "The property's identifier as a string"
msgstr "Der Bezeichner der Eigenschaft als Zeichenkette"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:383
msgid "The starting value"
msgstr "Der Start Wert"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:384
msgid "The end value"
msgstr "Der End-Wert"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:385
msgid "The animation's duration in seconds"
msgstr "Die Animationsdauer in Sekunden"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:386
msgid "The type of the transition"
msgstr "Der Typ des Übergangs"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:387
msgid "The easing to use in combination with the equation."
msgstr "Die einfache Handhabung in Kombination mit der Gleichung."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:389
msgid ""
"The last two arguments combined correspond to an easing equation. This "
"controls how the value evolves from the start to the end point."
msgstr ""
"Die letzten beiden kombinierten Argumente entsprechen einer "
"Lockerungsgleichung. Das steuert, wie sich der Wert vom Anfang bis zum Ende "
"entwickelt."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:393
msgid ""
"Click the script icon next to the ``GUI`` node to open it again. The "
"``Number`` node needs text to update itself, and the ``Bar`` needs a float "
"or an integer. We can use ``interpolate_property`` to animate a number, but "
"not to animate text directly. We're going to use it to animate a new ``GUI`` "
"variable named ``animated_health``."
msgstr ""
"Klicken Sie auf das Skript-Symbol neben dem ``GUI`` Node, um es wieder zu "
"öffnen. Der ``Number``-Node benötigt Text, damit er sich selbst aktualisiert "
"und die ``Bar`` benötigt eine Float- oder Integer-Variable. Wir können "
"``interpolate_property`` benutzen, um eine Nummer zu animieren, aber nicht "
"direkt den Text. Wir verwenden es stattdessen, um eine neue ``GUI``-Variable "
"namens ``animated_health`` zu animieren."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:399
msgid ""
"At the top of the script, define a new variable, name it "
"``animated_health``, and set its value to 0. Navigate back to the "
"``update_health`` method and clear its content. Let's animate the "
"``animated_health`` value. Call the ``Tween`` node's "
"``interpolate_property`` method:"
msgstr ""
"Definieren Sie oben im Skript eine neue Variable, benennen Sie sie "
"``animated_health``, und setzen Sie ihren Wert auf 0. Navigieren Sie zurück "
"zur Methode ``update_health`` und löschen Sie ihren Inhalt. Lassen Sie uns "
"den Wert von ``animated_health`` animieren. Rufen Sie die Methode "
"``interpolate_property`` des ``Tween``-Nodes auf:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:421
msgid "Let's break down the call:"
msgstr "Lassen Sie uns den Aufruf aufschlüsseln:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:427
msgid ""
"We target ``animated_health`` on ``self``, that is to say the ``GUI`` node. "
"``Tween``'s interpolate\\_property takes the property's name as a string. "
"That's why we write it as ``\"animated_health\"``."
msgstr ""
"Wir zielen auf die ``animated_health`` auf ``self``, das heißt auf den "
"``GUI```-Node. Die interpolierende ``Tween``-Eigenschaft nimmt den Namen der "
"Eigenschaft als Zeichenkette an. Deshalb schreiben wir es als ``"
"\"animated_health\"``."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:435
msgid ""
"The starting point is the current value the bar's at. We still have to code "
"this part, but it's going to be ``animated_health``. The end point of the "
"animation is the ``Player``'s ``health`` after the ``health_changed``: "
"that's ``new_value``. And ``0.6`` is the animation's duration in seconds."
msgstr ""
"Der Ausgangspunkt ist der aktuelle Wert der Lebensleiste. Wir müssen diesen "
"Teil noch programmieren, aber in unserem Fall verwenden wir "
"``animated_health``. Der Endpunkt der Animation ist die Gesundheit "
"(``health``) des ``Player`` nach der Änderung (``health_changed``): das ist "
"der neue Wert (``new_value``). Und ``0.6`` ist die Dauer der Animation in "
"Sekunden."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:441
msgid ""
"The animation will not play until we activated the ``Tween`` node with "
"``tween.start()``. We only have to do this once if the node is not active. "
"Add this code after the last line:"
msgstr ""
"Die Animation wird erst abgespielt, wenn wir den ``Tween``-Node mit ``tween."
"start()`` aktiviert haben. Wir müssen dies nur einmal tun, wenn der Node "
"nicht aktiv ist. Fügen Sie diesen Code nach der letzten Zeile ein:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:460
msgid ""
"Although we could animate the `health` property on the `Player`, we "
"shouldn't. Characters should lose life instantly when they get hit. It makes "
"it a lot easier to manage their state, like to know when one died. You "
"always want to store animations in a separate data container or node. The "
"`tween` node is perfect for code-controlled animations. For hand-made "
"animations, check out `AnimationPlayer`."
msgstr ""
"Obwohl wir die Eigenschaft `health` auf dem `Player` animieren könnten, "
"sollten wir es nicht tun. Charaktere sollten sofort Leben verlieren, wenn "
"sie getroffen werden. Das macht es viel einfacher, ihren Zustand zu managen, "
"z.B. zu wissen, wann man gestorben ist. Man möchte Animationen immer in "
"einem separaten Datencontainer oder Node speichern. Der `Tween`-Node ist "
"perfekt für codegesteuerte Animationen. Für handgemachte Animationen sehen "
"Sie sich den `AnimationPlayer` an."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:463
msgid "Assign the animated\\_health to the LifeBar"
msgstr "Weisen Sie der LifeBar die animierte _health zu"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:465
msgid ""
"Now the ``animated_health`` variable animates but we don't update the actual "
"``Bar`` and ``Number`` nodes anymore. Let's fix this."
msgstr ""
"Jetzt wird die ``animated_health`` Variable animiert, aber wir aktualisieren "
"die eigentlichen ``Bar`` und ``Number``-Node nicht mehr. Lasst uns das in "
"Ordnung bringen."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:468
msgid "So far, the update\\_health method looks like this:"
msgstr "Bisher sieht die Update-_health-Methode wie folgt aus:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:492
msgid ""
"In this specific case, because ``number_label`` takes text, we need to use "
"the ``_process`` method to animate it. Let's now update the ``Number`` and "
"``TextureProgress`` nodes like before, inside of ``_process``:"
msgstr ""
"In diesem speziellen Fall, weil das ``number_label`` Text erwartet, müssen "
"wir die ``_process``-Methode verwenden, um es zu animieren. Lass uns nun, "
"wie schon zuvor, die ``Number`` und ``TextureProgress``-Node innerhalb von "
"``_process`` aktualisieren:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:514
msgid ""
"`number_label` and `bar` are variables that store references to the `Number` "
"and `TextureProgress` nodes."
msgstr ""
"`number_label` und `bar`sind Variablen, die Referenzen auf die Nodes "
"`Number`und `TextureProgress` speichern."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:516
msgid ""
"Play the game to see the bar animate smoothly. But the text displays decimal "
"number and looks like a mess. And considering the style of the game, it'd be "
"nice for the life bar to animate in a choppier fashion."
msgstr ""
"Spiele das Spiel, um die flüssig animierte Lebensleiste anzuschauen. "
"Allerdings zeigt der Text Dezimalzahlen an und wirkt unaufgeräumt. Und "
"angesichts des Spielstils, wäre es hübsch, die Lebensleiste auf eine "
"abgehacktere Weise zu animieren."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:522
msgid "The animation is smooth, but the number is broken"
msgstr "Die Animation ist flüssig, aber die Zahlenanzeige kaputt"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:524
msgid ""
"We can fix both problems by rounding out ``animated_health``. Use a local "
"variable named ``round_value`` to store the rounded ``animated_health``. "
"Then assign it to ``number_label.text`` and ``bar.value``:"
msgstr ""
"Wir können beide Probleme beheben, indem wir ``animated_health`` runden. "
"Benutze eine lokale Variable namens ``round_value``, um die gerundete "
"``animated_health`` zu speichern. Dann ordne sie ``number_label.txt`` und "
"``bar.value`` zu:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:546
msgid "Try the game again to see a nice blocky animation."
msgstr ""
"Spiele das Spiel erneut, um eine hübsche, klotzige Animation zu betrachten."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:550
msgid "By rounding out animated\\_health, we kill two birds with one stone"
msgstr ""
"Indem wir animated\\_health runden, schlagen wir zwei Fliegen mit einer "
"Klappe"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:554
msgid ""
"Every time the player takes a hit, the ``GUI`` calls "
"``_on_Player_health_changed``, which in turn calls ``update_health``. This "
"updates the animation and the ``number_label`` and ``bar`` follow in "
"``_process``. The animated life bar that shows the health going down "
"gradually is a trick. It makes the GUI feel alive. If the ``Player`` takes 3 "
"damage, it happens in an instant."
msgstr ""
"Jedes Mal, wenn der Spieler einen Treffer erhält, ruft die ``GUI`` "
"``_auf_Spielgesundheit_geändert`` auf, was wiederum ``Update_Gesundheit`` "
"nennt. Dadurch wird die Animation aktualisiert, und die ``Zahlen-Label`` und "
"``Balken`` folgen in ``_Prozess``. Der animierte Lebensbalken, der zeigt, "
"wie die Gesundheit allmählich abnimmt, ist ein Trick. Sie gibt dem GUI ein "
"lebendiges Gefühl. Wenn der ``Spieler`` 3 Schaden nimmt, geschieht dies in "
"einem Augenblick."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:562
msgid "Fade the bar when the Player dies"
msgstr "Blenden den Balken aus, wenn der Spieler stirbt"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:564
msgid ""
"When the green character dies, it plays a death animation and fades out. At "
"this point, we shouldn't show the interface anymore. Let's fade the bar as "
"well when the character died. We will reuse the same ``Tween`` node as it "
"manages multiple animations in parallel for us."
msgstr ""
"Wenn die grüne Figur stirbt, spielt sie eine Todesanimation ab und wird "
"ausgeblendet. An diesem Punkt sollten wir das Interface nicht mehr zeigen. "
"Lassen wir auch den Balken ausblenden, wenn der Charakter stirbt. Wir werden "
"denselben ``Tween``-Node wieder verwenden, da er für uns mehrere Animationen "
"parallel verwaltet."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:569
msgid ""
"First, the ``GUI`` needs to connect to the ``Player``'s ``died`` signal to "
"know when it died. Press :kbd:`F1` to jump back to the 2D Workspace. Select "
"the ``Player`` node in the Scene dock and click on the Node tab next to the "
"Inspector."
msgstr ""
"Zunächst muss die ``GUI``` mit dem ``Player`````died''-Signal verbunden "
"werden, um zu wissen, wann er gestorben ist. Drücken Sie :kbd:``F1`, um "
"zurück in den 2D-Arbeitsbereich zu springen. Wählen Sie den Node ``Player`` "
"im Szenen-Dock und klicken Sie auf die Registerkarte \"Knoten\" neben dem "
"Inspektor."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:574
msgid "Find the ``died`` signal, select it, and click the Connect button."
msgstr ""
"Suchen das ''died''-Signal, wählen es aus, und klicken Sie auf die "
"Schaltfläche Verbinden."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:578
msgid "The signal should already have the Enemy connected to it"
msgstr "Der Feind sollte bereits mit dem Signal verbunden sein"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:580
msgid ""
"In the Connecting Signal window, connect to the ``GUI`` node again. The Path "
"to Node should be ``../../GUI`` and the Method in Node should show "
"``_on_Player_died``. Leave the Make Function option on and click Connect at "
"the bottom of the window. This will take you to the ``GUI.gd`` file in the "
"Script Workspace."
msgstr ""
"Stellen Sie im Fenster \"Verbindungssignal\" wieder eine Verbindung zum Node "
"``GUI`` her. Der Pfad zum Node sollte ```../../GUI`` sein und die Methode im "
"Node sollte ``_on_Player_died`` anzeigen. Lassen Sie die Option Make "
"Function eingeschaltet und klicken Sie unten im Fenster auf Connect. Dies "
"führt Sie zu der Datei ``GUI.gd`` im Skript-Arbeitsbereich."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:588
msgid "You should get these values in the Connecting Signal window"
msgstr "Sie sollten diese Werte im Fenster Verbindungssignal erhalten"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:592
msgid ""
"You should see a pattern by now: every time the GUI needs a new piece of "
"information, we emit a new signal. Use them wisely: the more connections you "
"add, the harder they are to track."
msgstr ""
"Sie sollten jetzt ein Muster sehen: Jedes Mal, wenn die GUI eine neue "
"Information benötigt, geben wir ein neues Signal aus. Verwenden Sie sie mit "
"Bedacht: Je mehr Verbindungen Sie hinzufügen, desto schwieriger sind sie zu "
"verfolgen."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:594
msgid ""
"To animate a fade on a UI element, we have to use its ``modulate`` property. "
"``modulate`` is a ``Color`` that multiplies the colors of our textures."
msgstr ""
"Um ein Fade auf einem UI-Element zu animieren, müssen wir seine Eigenschaft "
"``modulate`` property. ``modulate`` ist eine ``Color``, die unserer Texturen "
"Farben vervielfacht."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:600
msgid ""
"`modulate` comes from the `CanvasItem` class, All 2D and UI nodes inherit "
"from it. It lets you toggle the visibility of the node, assign a shader to "
"it, and modify it using a color with `modulate`."
msgstr ""
"`modulate` kommt von der `CanvasItem` Klasse, alle 2D und UI Nodes erben von "
"dieser. Es lässt einen die Sichtbarkeit der Node umschalten, einen Shader "
"hinzufügen, und es zu modifizieren, indem eine Farbe für `modulate` "
"verwendet wird."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:602
msgid ""
"``modulate`` takes a ``Color`` value with 4 channels: red, green, blue and "
"alpha. If we darken any of the first three channels it darkens the "
"interface. If we lower the alpha channel, our interface fades out."
msgstr ""
"``Modulieren`` nimmt einen ``Farbe`` Wert mit 4 Kanälen an: Rot, Grün, Blau "
"und Alpha. Wenn wir einen der ersten drei Kanäle verdunkeln, verdunkelt das "
"die Schnittstelle. Wenn wir den Alphakanal absenken, wird unser Interface "
"ausgeblendet."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:606
msgid ""
"We're going to tween between two color values: from a white with an alpha of "
"``1``, that is to say at full opacity, to a pure white with an alpha value "
"of ``0``, completely transparent. Let's add two variables at the top of the "
"``_on_Player_died`` method and name them ``start_color`` and ``end_color``. "
"Use the ``Color()`` constructor to build two ``Color`` values."
msgstr ""
"Wir bewegen uns zwischen zwei Farbwerten: von einem Weiß mit einem Alpha-"
"Wert von ``1``, d.h. bei voller Deckkraft, zu einem reinen Weiß mit einem "
"Alpha-Wert von ``0``, vollständig transparent. Fügen wir zwei Variablen am "
"Anfang der ``_on_Player_died`` Methode hinzu und nennen sie ``start_color`` "
"und ``end_color``. Benutzen Sie den ``Color()`` Konstruktor, um zwei "
"``Color`` Werte zu erzeugen."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:628
msgid ""
"``Color(1.0, 1.0, 1.0)`` corresponds to white. The fourth argument, "
"respectively ``1.0`` and ``0.0`` in ``start_color`` and ``end_color``, is "
"the alpha channel."
msgstr ""
"``Color(1.0, 1.0, 1.0)`` entspricht hier Weiß. Das vierte Argument, "
"entsprechend ``1.0`` and ``0.0`` in ``start_color`` and ``end_color``, ist "
"der Alphakanal."

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:632
msgid ""
"We then have to call the ``interpolate_property`` method of the ``Tween`` "
"node again:"
msgstr ""
"Danach müssen wir die Methode ``interpolate_property`` des ``Tween``-Nodes "
"erneut aufrufen:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:645
msgid ""
"This time, we change the ``modulate`` property and have it animate from "
"``start_color`` to the ``end_color``. The duration is of one second, with a "
"linear transition. Here's the complete ``_on_Player_died`` method:"
msgstr ""
"Dieses Mal ändern wir die Eigenschaft ``Modulieren`` und lassen sie von "
"``start_color`` auf die ``end_color`` animieren. Die Dauer beträgt eine "
"Sekunde, mit einem linearen Übergang. Hier ist die komplette "
"``_on_Player_died`` Methode:"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:669
msgid "And that is it. You may now play the game to see the final result!"
msgstr ""
"Und das war's. Sie mögen nun das Spiel spielen, um das fertige Ergebnis zu "
"sehen!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:673
msgid "The final result. Congratulations for getting there!"
msgstr "Das fertige Ergebnis. Herzlichen Glückwunsch, dort hinzukommen!"

#: ../../docs/getting_started/step_by_step/ui_code_a_life_bar.rst:677
msgid ""
"Using the exact same techniques, you can change the color of the bar when "
"the Player gets poisoned, turn the bar red when its health drops low, shake "
"the UI when they take a critical hit... the principle is the same: emit a "
"signal to forward the information from the `Player` to the `GUI` and let the "
"`GUI` process it."
msgstr ""
"Mit genau denselben Techniken können Sie die Farbe des Balkens ändern, wenn "
"der Spieler vergiftet wird, den Balken rot färben, wenn seine Gesundheit "
"sinkt, die UI schütteln, wenn er einen kritischen Treffer erhält... das "
"Prinzip ist das gleiche: Sie senden ein Signal aus, um die Informationen vom "
"`Spieler` an die `GUI` weiterzuleiten und lassen sie von der `GUI` "
"verarbeiten."
