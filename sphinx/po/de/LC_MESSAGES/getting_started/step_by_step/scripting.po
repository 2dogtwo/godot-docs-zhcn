# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-17 12:01+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting.rst:4
msgid "Scripting"
msgstr "Scripting"

#: ../../docs/getting_started/step_by_step/scripting.rst:7
msgid "Introduction"
msgstr "Einführung"

#: ../../docs/getting_started/step_by_step/scripting.rst:9
msgid ""
"Before Godot 3.0, the only choice for scripting a game was to use :ref:"
"`GDScript<doc_gdscript>`. Nowadays, Godot has four (yes, four!) official "
"languages and the ability to add extra scripting languages dynamically!"
msgstr ""
"Vor Godot 3.0 war für das Programmieren eines Spiels nur eine Sprache "
"verfügbar, nämlich :ref:`doc_gdscript`. Heutzutage unterstützt Godot vier "
"(ja, vier!) offizielle Programmiersprachen und bietet die Möglichkeit, "
"zusätzliche Sprachen dynamisch hinzuzufügen!"

#: ../../docs/getting_started/step_by_step/scripting.rst:13
msgid ""
"This is great, mostly due to the large amount of flexibility provided, but "
"it also makes our work supporting languages more difficult."
msgstr ""
"Das ist großartig, vor allem aufgrund der großen Flexibilität, die aber auch "
"die Unterstützung von Sprachen erschwert."

#: ../../docs/getting_started/step_by_step/scripting.rst:16
msgid ""
"The \"main\" languages in Godot, though, are GDScript and VisualScript. The "
"main reason to choose them is their level of integration with Godot, as this "
"makes the experience smoother; both have slick editor integration, while C# "
"and C++ need to be edited in a separate IDE. If you are a big fan of "
"statically typed languages, go with C# and C++ instead."
msgstr ""
"Die \"Hauptsprachen\" in Godot sind jedoch GDScript und VisualScript. Der "
"Hauptgrund dessen Auswahl, ist die starke Vernetzung mit Godot, die eine "
"reibungslose Bedienung ermöglicht. Beide verfügen über eine sehr gute "
"Editorintegration, während C# und C++ in einer separaten IDE bearbeitet "
"werden müssen. Wenn Sie ein großer Fan von statisch geschriebenen Sprachen "
"bist, solltest Du stattdessen C# und C++ verwenden."

#: ../../docs/getting_started/step_by_step/scripting.rst:22
msgid "GDScript"
msgstr "GDScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:24
msgid ""
":ref:`GDScript<doc_gdscript>` is, as mentioned above, the main language used "
"in Godot. Using it has some positive points compared to other languages due "
"to its high integration with Godot:"
msgstr ""
":ref:`doc_gdscript` ist, wie oben erwähnt, die Hauptsprache in Godot. Sie zu "
"verwenden hat ein paar Vorteile gegenüber anderen Sprachen, da sie gut in "
"Godot integriert ist:"

#: ../../docs/getting_started/step_by_step/scripting.rst:28
msgid ""
"It's simple, elegant, and designed to be familiar for users of other "
"languages such as Lua, Python, Squirrel, etc."
msgstr ""
"Sie ist simpel, elegant und ähnelt Sprachen wie Lua, Python, Squirrel, etc."

#: ../../docs/getting_started/step_by_step/scripting.rst:29
msgid "Loads and compiles blazingly fast."
msgstr "Lädt und kompiliert unheimlich schnell."

#: ../../docs/getting_started/step_by_step/scripting.rst:30
msgid ""
"The editor integration is a pleasure to work with, with code completion for "
"nodes, signals, and many other items pertaining to the scene being edited."
msgstr ""
"Durch die Integration im Editor, der Codevervollständigung für Nodes, "
"Signale und andere Elemente innerhalb einer Szene ist es eine Freude mit der "
"Sprache zu arbeiten."

#: ../../docs/getting_started/step_by_step/scripting.rst:31
msgid ""
"Has vector types built-in (such as Vectors, transforms, etc.), making it "
"efficient for heavy use of linear algebra."
msgstr ""
"Hat integrierte Vektortypen (z. B. Vektoren, Transformationen usw.), die "
"eine effiziente Nutzung der linearen Algebra ermöglichen."

#: ../../docs/getting_started/step_by_step/scripting.rst:32
msgid ""
"Supports multiple threads as efficiently as statically typed languages - one "
"of the limitations that made us avoid VMs such as Lua, Squirrel, etc."
msgstr ""
"Unterstützt mehrere Threads genauso effizient wie statisch typisierte "
"Sprachen - eine der Einschränkungen, die dazu geführt haben, dass VMs wie "
"Lua, Squirrel usw. vermieden werden."

#: ../../docs/getting_started/step_by_step/scripting.rst:33
msgid ""
"Uses no garbage collector, so it trades a small bit of automation (most "
"objects are reference counted anyway), by determinism."
msgstr ""
"Verwendet kein automatisches Speichermanagement (Garbage Collector), tauscht "
"also ein kleines Stück Automatisierung (die meisten Objekte werden ohnehin "
"per Referenzzählung erfasst) gegen Kontrolle."

#: ../../docs/getting_started/step_by_step/scripting.rst:34
msgid ""
"Its dynamic nature makes it easy to optimize sections of code in C++ (via "
"GDNative) if more performance is required, all without recompiling the "
"engine."
msgstr ""
"Ihre dynamische Natur macht es einfach, Bereiche des Codes in C++ zu "
"optimieren (via GDNative), falls mehr Leistung nötig ist. Und das alles ohne "
"die Engine neu zu kompilieren."

#: ../../docs/getting_started/step_by_step/scripting.rst:36
msgid ""
"If you're undecided and have experience with programming, especially "
"dynamically typed languages, go for GDScript!"
msgstr ""
"Falls Du unentschlossen bist und Erfahrung mit dem Programmieren hast, vor "
"allem mit dynamisch typisierten Programmiersprachen, verwende GDScript!"

#: ../../docs/getting_started/step_by_step/scripting.rst:40
msgid "VisualScript"
msgstr "VisualScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:42
msgid ""
"Beginning with 3.0, Godot offers :ref:`Visual "
"Scripting<doc_what_is_visual_script>`. This is a typical implementation of a "
"\"blocks and connections\" language, but adapted to how Godot works."
msgstr ""
"Seit Version 3.0 unterstüzt Godot :ref:`Visual "
"Scripting<doc_what_is_visual_script>`.  Dies ist eine typische "
"Implementierung einer \"Blöcke und Verbindungen\" Sprache, die an die "
"funktionsweise von Godot angepasst wurde."

#: ../../docs/getting_started/step_by_step/scripting.rst:46
msgid ""
"Visual scripting is a great tool for non-programmers, or even for "
"experienced developers who want to make parts of the code more accessible to "
"others, like game designers or artists."
msgstr ""
"Visual Scripting ist ein hervorragendes Werkzeug für Nicht-Programmierer "
"oder auch für erfahrene Entwickler, die Teile des Codes für andere "
"zugänglich machen möchten, wie zum Beispiel für Spieledesigner oder Künstler."

#: ../../docs/getting_started/step_by_step/scripting.rst:50
msgid ""
"It can also be used by programmers to build state machines or custom visual "
"node workflows - for example, a dialogue system."
msgstr ""
"Es kann auch von Programmierern verwendet werden, um Zustandsmaschinen oder "
"benutzerdefinierte Workflows für visuelle Nodes zu erstellen - "
"beispielsweise ein Dialogsystem."

#: ../../docs/getting_started/step_by_step/scripting.rst:55
msgid ".NET / C#"
msgstr ".NET / C#"

#: ../../docs/getting_started/step_by_step/scripting.rst:57
msgid ""
"As Microsoft's C# is a favorite amongst game developers, we have added "
"official support for it. C# is a mature language with tons of code written "
"for it, and support was added thanks to a generous donation from Microsoft."
msgstr ""
"Da Microsofts C# eine beliebte Programmiersprache bei Spieleentwicklern ist, "
"unterstützen wir sie nun offiziell. C# ist eine ausgereifte "
"Programmiersprache, für die tonnenweise Code geschrieben wurden. Dank einer "
"großzügigen Spende von Microsoft konnte die Integration ermöglicht werden."

#: ../../docs/getting_started/step_by_step/scripting.rst:62
msgid ""
"It has an excellent tradeoff between performance and ease of use, although "
"one must be aware of its garbage collector."
msgstr ""
"C# besitzt einen hervorragenden Kompromiss zwischen Leistung und "
"Benutzerfreundlichkeit, obwohl man sich seines Müllsammlers bewusst sein "
"muss."

#: ../../docs/getting_started/step_by_step/scripting.rst:65
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory any third-party .NET library or framework can be used for scripting "
"in Godot, as well as any Common Language Infrastructure-compliant "
"programming language, such as F#, Boo or ClojureCLR. In practice however, C# "
"is the only officially supported .NET option."
msgstr ""
"Da Godot `Mono <https://mono-project.com>`_ als .NET runtime verwendet, "
"können viele .NET Bibliotheken und Frameworks von Drittanbietern, sowie "
"Common Language Infrastructure-kompatible Programmiersprachen, wie zum "
"Beispiel F#, Boo oder ClojureCLR, in Scripts verwendet werden.\n"
"C# ist aber die einzige offiziell unterstützte .NET-Option."

#: ../../docs/getting_started/step_by_step/scripting.rst:71
msgid "GDNative / C++"
msgstr "GDNative / C++"

#: ../../docs/getting_started/step_by_step/scripting.rst:73
msgid ""
"Finally, one of our brightest additions for the 3.0 release: GDNative allows "
"scripting in C++ without needing to recompile (or even restart) Godot."
msgstr ""
"Und schlussendlich eine der größten Ergänzungen in Release 3.0: GDNative "
"unterstützt Skripten mit C++, ohne dass Godot neu kompiliert (oder "
"gestartet) werden muss."

#: ../../docs/getting_started/step_by_step/scripting.rst:77
msgid ""
"Any C++ version can be used, and mixing compiler brands and versions for the "
"generated shared libraries works perfectly, thanks to our use of an internal "
"C API Bridge."
msgstr ""
"Durch die interne C API-Brücke kann jede Version von C++ verwendet und "
"beliebige Compiler verwendet werden, um Shared Libraries zu erzeugen."

#: ../../docs/getting_started/step_by_step/scripting.rst:81
msgid ""
"This language is the best choice for performance and does not need to be "
"used throughout an entire game, as other parts can be written in GDScript or "
"Visual Script. However the API is clear and easy to use as it resembles, "
"mostly, Godot's actual C++ API."
msgstr ""
"Diese Sprache ist die beste Wahl für Leistung und muss nicht alleine für ein "
"Spiel verwendet werden, da andere Teil auch in GDScript or Visual Script "
"geschrieben sein können. Die API ist klar und einfach zu benutzen, da sie in "
"den meisten Teilen der eigentlichen C++ API Godots sehr änhlich ist."

#: ../../docs/getting_started/step_by_step/scripting.rst:86
msgid ""
"More languages can be made available through the GDNative interface, but "
"keep in mind we don't have official support for them."
msgstr ""
"Weitere Programmiersprachen können mittels der GDNative Schnittstelle "
"verfügbar gemacht werden, diese werden allerdings nicht offiziell von uns "
"unterstützt."

#: ../../docs/getting_started/step_by_step/scripting.rst:90
msgid "Scripting a scene"
msgstr "Eine Szene skripten"

#: ../../docs/getting_started/step_by_step/scripting.rst:92
msgid ""
"For the rest of this tutorial we'll set up a GUI scene consisting of a "
"button and a label, where pressing the button will update the label. This "
"will demonstrate:"
msgstr ""
"Für den Rest dieser Einleitung werden wir eine GUI Szene, bestehend aus "
"einem Text und einer Schaltfläche, die bei Betätigung den Text aktualisiert, "
"erstellen. Dies umfasst:"

#: ../../docs/getting_started/step_by_step/scripting.rst:96
msgid "Writing a script and attaching it to a node."
msgstr "Das Schreiben eines Skriptes und das Hinzufügen in einem Node."

#: ../../docs/getting_started/step_by_step/scripting.rst:97
msgid "Hooking up UI elements via signals."
msgstr "UI Elemente mit Signalen verknüpfen."

#: ../../docs/getting_started/step_by_step/scripting.rst:98
msgid "Writing a script that can access other nodes in the scene."
msgstr ""
"Das Schreiben eines Skripts, welches auf andere Nodes in der Szene zugreifen "
"kann."

#: ../../docs/getting_started/step_by_step/scripting.rst:100
msgid ""
"Before continuing, please make sure to read the :ref:"
"`GDScript<doc_gdscript>` reference. It's a language designed to be simple, "
"and the reference is short, so it will not take more than a few minutes to "
"get an overview of the concepts."
msgstr ""
"Bitte lies die :ref:`doc_gdscript`-Referenz, bevor du fortfährst. GDScript "
"wurde so entworfen, dass die Sprache einfach zu verstehen und ihre Referenz "
"kurz ist. Daher dauert es nicht mehr als ein paar Minuten, um sich einen "
"Überblick über ihre Konzepte zu verschaffen."

#: ../../docs/getting_started/step_by_step/scripting.rst:105
msgid "Scene setup"
msgstr "Eine Szene einrichten"

#: ../../docs/getting_started/step_by_step/scripting.rst:107
msgid ""
"Use the \"Add Child Node\" dialogue accessed from the Scene tab (or by "
"pressing ``Ctrl+A``) to create a hierarchy with the following nodes:"
msgstr ""
"Verwende den Dialog \"Node hier anhängen\", auf den über die Registerkarte "
"\"Szene\" (oder durch Drücken von ``Strg + A``) zugreifen werden kann, um "
"eine Hierarchie mit den folgenden Nodes zu erstellen:"

#: ../../docs/getting_started/step_by_step/scripting.rst:110
msgid "Panel"
msgstr "Panel"

#: ../../docs/getting_started/step_by_step/scripting.rst:112
msgid "Label"
msgstr "Label"

#: ../../docs/getting_started/step_by_step/scripting.rst:113
msgid "Button"
msgstr "Knopf"

#: ../../docs/getting_started/step_by_step/scripting.rst:115
msgid "The scene tree should look like this:"
msgstr "Der Szenenbaum sollte so aussehen:"

#: ../../docs/getting_started/step_by_step/scripting.rst:119
msgid ""
"Use the 2D editor to position and resize the Button and Label so that they "
"look like the image below. You can set the text from the Inspector tab."
msgstr ""
"Verwende den 2D-Editor, um die Schaltfläche (Button) und das Label so zu "
"positionieren, wie im folgenden Bild dargestellt. Du kannst den Text in der "
"der Registerkarte \"Inspektor\" festlegen."

#: ../../docs/getting_started/step_by_step/scripting.rst:124
msgid "Finally, save the scene with a name such as ``sayhello.tscn``."
msgstr "Anschließend speichere die Szene unter dem Namen ``sayhello.tscn``."

#: ../../docs/getting_started/step_by_step/scripting.rst:129
msgid "Adding a script"
msgstr "Ein Skript hinzufügen"

#: ../../docs/getting_started/step_by_step/scripting.rst:131
msgid ""
"Right click on the Panel node, then select \"Attach Script\" from the "
"context menu:"
msgstr ""
"Rechtsklicke auf den „Panel“-Node und wähle \"Skript hinzufügen\" im "
"Kontextmenü aus:"

#: ../../docs/getting_started/step_by_step/scripting.rst:136
msgid ""
"The script creation dialog will pop up. This dialog allows you to set the "
"script's language, class name, and other relevant options."
msgstr ""
"Der Dialog zur Skripterstellung wird angezeigt. In diesem Dialogfeld kannst "
"Du die Sprache, den Klassennamen und andere relevante Optionen des Skripts "
"einstellen."

#: ../../docs/getting_started/step_by_step/scripting.rst:139
msgid ""
"In GDScript, the file itself represents the class, so the class name field "
"is not editable."
msgstr ""
"In GDScript stellt die Datei selbst die Klasse dar. Das Klassennamensfeld "
"kann daher nicht bearbeitet werden."

#: ../../docs/getting_started/step_by_step/scripting.rst:142
msgid ""
"The node we're attaching the script to is a panel, so the Inherits field "
"will automatically be filled in with \"Panel\". This is what we want, as the "
"script's goal is to extend the functionality of our panel node."
msgstr ""
"Der Node, an den das Skript angehängt wird, ist ein Panel. Das Feld \"Erbt\" "
"wird deshalb automatisch mit \"Panel\" ausgefüllt. In diesem Fall ist dies "
"erwünscht, da das Skript die Funktionalität unseres „Panel“-Nodes erweitern "
"soll."

#: ../../docs/getting_started/step_by_step/scripting.rst:146
msgid "Finally, enter a path name for the script and select Create:"
msgstr ""
"Wähle einen Dateinamen für das Skript aus und klicke auf \"Erstellen\":"

#: ../../docs/getting_started/step_by_step/scripting.rst:150
msgid ""
"The script will then be created and added to the node. You can see this as "
"an \"Open script\" icon next to the node in the Scene tab, as well as in the "
"script property under Inspector:"
msgstr ""
"Das Skript wird dann erstellt und dem Node hinzugefügt. Dies ist erkennbar "
"an dem \"Skript öffnen\"-Symbol neben dem Node in der Registerkarte \"Szene"
"\" sowie in der Skripteigenschaft im Inspektor:"

#: ../../docs/getting_started/step_by_step/scripting.rst:156
msgid ""
"To edit the script, select either of these buttons, both of which are "
"highlighted in the above image. This will bring you to the script editor, "
"where a default template will be included:"
msgstr ""
"Um das Skript zu bearbeiten, wähle eine dieser Schaltflächen aus, welche im "
"obigen Bild hervorgehoben sind. Dadurch wird der Skripteditor geöffnet, in "
"dem eine Standardvorlage angezeigt wird:"

#: ../../docs/getting_started/step_by_step/scripting.rst:161
msgid ""
"There's not much there. The ``_ready()`` function is called when the node, "
"and all its children, enters the active scene. **Note:** ``_ready()`` is not "
"the constructor; the constructor is instead ``_init()``."
msgstr ""
"Die Standardvorlage enthält recht wenig. Die ``_ready()``-Funktion wir "
"aufgerufen, wenn der Node und alle seine Unterobjekt die aktive Szene "
"betreten. **Beachte:** ``_ready()`` ist kein Konstruktor, der Konstruktor "
"ist ``_init()``."

#: ../../docs/getting_started/step_by_step/scripting.rst:166
msgid "The role of the script"
msgstr "Die Rolle des Skriptes"

#: ../../docs/getting_started/step_by_step/scripting.rst:168
msgid ""
"A script adds behavior to a node. It is used to control how the node "
"functions as well as how it interacts with other nodes: children, parent, "
"siblings, and so on. The local scope of the script is the node. In other "
"words, the script inherits the functions provided by that node."
msgstr ""
"Ein Skript fügt einem Node ein Verhalten hinzu. Es wird verwendet, um zu "
"steuern, wie der Node funktioniert und wie er mit anderen Nodes interagiert: "
"untergeordnete, übergeordnete, gleichwertige Nodes usw. Der lokale Bereich "
"des Skripts ist der Node. Mit anderen Worten, das Skript erbt die von diesem "
"Node bereitgestellten Funktionen."

#: ../../docs/getting_started/step_by_step/scripting.rst:179
msgid "Handling a signal"
msgstr "Mit einem Signal umgehen"

#: ../../docs/getting_started/step_by_step/scripting.rst:181
msgid ""
"Signals are \"emitted\" when some specific kind of action happens, and they "
"can be connected to any function of any script instance. Signals are used "
"mostly in GUI nodes, although other nodes have them too, and you can even "
"define custom signals in your own scripts."
msgstr ""
"Signale werden \"ausgesendet\", wenn eine bestimmte Art von Aktion "
"stattfindet, und sie können mit jeder Funktion einer Skriptinstanz verbunden "
"werden. Signale werden hauptsächlich in Nodes für grafische "
"Benutzeroberflächen verwendet, obwohl andere Nodes diese auch besitzen "
"können. Du kannst sogar eigene Signale in Deinen eigenen Skripten definieren."

#: ../../docs/getting_started/step_by_step/scripting.rst:186
msgid ""
"In this step, we'll connect the \"pressed\" signal to a custom function. "
"Forming connections is the first part and defining the custom function is "
"the second part. For the first part, Godot provides two ways to create "
"connections: through a visual interface the editor provides or through code."
msgstr ""
"In diesem Schritt verbinden wir das \"pressed()\"-Signal mit einer eigenen "
"Funktion. Das Herstellen von Verbindungen ist der erste Teil und die "
"Definition der eigenen Funktion der zweite Teil. Für den ersten Teil bietet "
"Godot zwei Möglichkeiten, Verbindungen herzustellen: über eine grafische "
"Benutzeroberfläche, die der Editor bereitstellt, oder über Code."

#: ../../docs/getting_started/step_by_step/scripting.rst:191
msgid ""
"While we will use the code method for the remainder of this tutorial series, "
"let's cover how the editor interface works for future reference."
msgstr ""
"Während wir die Programmiermethode für den Rest dieser Anleitungsreihe "
"verwenden, gehen wir kurz auf die Funktionsweise der Editor-Oberfläche als "
"Referenz für die Zukunft ein."

#: ../../docs/getting_started/step_by_step/scripting.rst:194
msgid ""
"Select the Button node in the scene tree and then select the \"Node\" tab. "
"Next, make sure that you have \"Signals\" selected."
msgstr ""
"Wähle den „Button“-Node im Szenenbaum aus und klicke dann auf die \"Node\"-"
"Registerkarte. Als nächstes, stelle sicher, dass \"Signale\" ausgewählt ist."

#: ../../docs/getting_started/step_by_step/scripting.rst:199
msgid ""
"If you then select \"pressed()\" under \"BaseButton\" and click the "
"\"Connect...\" button in the bottom right, you'll open up the connection "
"creation dialogue."
msgstr ""
"Wenn Du dann unter \"BaseButton\" die Option \"pressed()\" auswählst und "
"unten rechts auf die Schaltfläche \"Verbinden ...\" klickst, wird der "
"Verbindungserstellungsdialog geöffnet."

#: ../../docs/getting_started/step_by_step/scripting.rst:204
msgid ""
"The top of the dialogue displays a list of your scene's nodes with the "
"emitting node's name highlighted in blue. Select the \"Panel\" node here."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:207
msgid ""
"The bottom of the dialogue shows the name of the method that will be "
"created. By default, the method name will contain the emitting node's name "
"(\"Button\" in this case), resulting in ``_on_[EmitterNode]_[signal_name]``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting.rst:211
msgid ""
"And that concludes the guide on how to use the visual interface. However, "
"this is a scripting tutorial, so for the sake of learning, let's dive into "
"the manual process!"
msgstr ""
"Damit ist die Anleitung zum Verwenden der grafischen Benutzeroberfläche "
"abgeschlossen. Da dies jedoch eine Skripting-Anleitung ist, tauchen wir nun "
"in den manuellen Prozess ein!"

#: ../../docs/getting_started/step_by_step/scripting.rst:215
msgid ""
"To accomplish this, we will introduce a function that is probably the most "
"used by Godot programmers: :ref:`Node.get_node() "
"<class_Node_method_get_node>`. This function uses paths to fetch nodes "
"anywhere in the scene, relative to the node that owns the script."
msgstr ""
"Um dies zu erreichen, werden wir eine Funktion verwenden, die wahrscheinlich "
"von Godot-Programmierern am häufigsten verwendet wird: :ref:`Node.get_node "
"() <class_Node_method_get_node>`. Diese Funktion verwendet Pfade zum Abrufen "
"von Nodes an einer beliebigen Stelle in der Szene, relativ zu dem Node, dem "
"das Skript gehört."

#: ../../docs/getting_started/step_by_step/scripting.rst:220
msgid ""
"For the sake of convenience, delete everything underneath ``extends Panel``. "
"You will fill out the rest of the script manually."
msgstr ""
"Einfachheitshalber lösche alles unterhalb von ``extends Panel``. Wir werden "
"den Rest des Skriptes manuell ausfüllen."

#: ../../docs/getting_started/step_by_step/scripting.rst:223
msgid ""
"Because the Button and Label are siblings under the Panel where the script "
"is attached, you can fetch the Button by typing the following underneath the "
"``_ready()`` function:"
msgstr ""
"Da \"Button\" und \"Label\" Unterelemente von \"Panel\" sind, an welches "
"dieses Skript angefügt ist, ist es möglich den \"Button\" zu finden indem "
"folgendes unter die ``_ready()``-Funktion hinzugefügt wird:"

#: ../../docs/getting_started/step_by_step/scripting.rst:240
msgid "Next, write a function which will be called when the button is pressed:"
msgstr ""
"Als nächstes schreibe eine Funktion welche aufgerufen wird, wenn auf die "
"Schaltfläche von \"Button\" geklickt wird:"

#: ../../docs/getting_started/step_by_step/scripting.rst:255
msgid ""
"Finally, connect the button's \"pressed\" signal to ``_ready()`` by using :"
"ref:`Object.connect() <class_Object_method_connect>`."
msgstr ""
"Abschließend verbinde das \"pressed\" -Signal der Schaltfläche mit ``_ready "
"() ``, indem Du :ref:`Object.connect () <class_Object_method_connect>` "
"verwendest."

#: ../../docs/getting_started/step_by_step/scripting.rst:271
msgid "The final script should look like this:"
msgstr "Das endgültige Skript sollte wie folgt aussehen:"

#: ../../docs/getting_started/step_by_step/scripting.rst:304
msgid ""
"Run the scene and press the button. You should get the following result:"
msgstr ""
"Starte die Szene und klick auf die Schaltfläche. Dies sollte zu folgenden "
"Ergebnis führen:"

#: ../../docs/getting_started/step_by_step/scripting.rst:308
msgid "Why, hello there! Congratulations on scripting your first scene."
msgstr "Oh, immer noch hier? Glückwunsch zum Skripten der ersten Szene."

#: ../../docs/getting_started/step_by_step/scripting.rst:312
msgid ""
"A common misunderstanding regarding this tutorial is how ``get_node(path)`` "
"works. For a given node, ``get_node(path)`` searches its immediate children. "
"In the above code, this means that Button must be a child of Panel. If "
"Button were instead a child of Label, the code to obtain it would be:"
msgstr ""
"Ein häufiges Missverständnis bezüglich dieser Anleitung ist, wie ``get_node "
"(path) `` funktioniert. Für einen bestimmten Node sucht ``get_node (path)`` "
"seine unmittelbar untergeordneten Elemente. Im obigen Code bedeutet dies, "
"dass \"Button\" ein untergeordnetes Element von \"Panel\" sein muss. Wenn "
"\"Button\" stattdessen ein untergeordnetes Element von \"Label\" wäre, dann "
"müsste der Funktionsaufruf folgendermaßen abgeändert werden:"

#: ../../docs/getting_started/step_by_step/scripting.rst:330
msgid "Also, remember that nodes are referenced by name, not by type."
msgstr ""
"Des Weiteren beachte, das Nodes über den Namen referenziert werden und nicht "
"über den Typ."

#: ../../docs/getting_started/step_by_step/scripting.rst:334
msgid ""
"The right-hand panel of the connect dialogue is for binding specific values "
"to the connected function's parameters. You can add and remove values of "
"different types."
msgstr ""
"Im rechten Bereich des Verbindungsdialogs werden bestimmte Werte an die "
"Parameter der verbundenen Funktion gebunden. Du kannst Werte verschiedener "
"Typen hinzufügen und entfernen."

#: ../../docs/getting_started/step_by_step/scripting.rst:338
msgid ""
"The code approach also enables this with a 4th ``Array`` parameter that is "
"empty by default. Feel free to read up on the ``Object.connect`` method for "
"more information."
msgstr ""
"Die Programmiermethode erlaubt die selbe Funktionalität mit dem vierten "
"Parameter im Funktionsaufruf, welcher Standardmäßig leer ist. Mehr "
"Information dazu kann unter der ``Object.connect``-Funktion nachgelesen "
"werden."
