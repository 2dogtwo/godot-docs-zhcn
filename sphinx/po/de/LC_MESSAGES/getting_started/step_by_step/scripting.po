# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-09 12:15+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting.rst:4
msgid "Scripting"
msgstr "Scripting"

#: ../../docs/getting_started/step_by_step/scripting.rst:7
msgid "Introduction"
msgstr "Einführung"

#: ../../docs/getting_started/step_by_step/scripting.rst:9
msgid ""
"Before Godot 3.0, the only choice for scripting a game was to use :ref:"
"`doc_gdscript`. Nowadays, Godot has four (yes, four!) official languages and "
"the ability to add extra scripting languages dynamically!"
msgstr ""
"Vor Godot 3.0 gab es zum Programmieren von Spielen nur eine "
"Programmiersprache zur Auswahl, nämlich :ref:`doc_gdscript`. Heutzutage "
"unterstütz Godot vier (ja, vier!) offizielle Programmiersprachen und bietet "
"die Möglichkeit zusätzliche Sprachen dynamisch hinzuzufügen!"

#: ../../docs/getting_started/step_by_step/scripting.rst:13
msgid ""
"This is great, mostly due the large amount of flexibility provided, but it "
"also makes our work supporting languages more difficult."
msgstr ""
"Das ist großartig, da die große Anzahl Sprachen mehr Flexibiliät bieten, "
"aber es macht unsere Arbeit, diese zu unterstützen, auch schwerer."

#: ../../docs/getting_started/step_by_step/scripting.rst:16
msgid ""
"The \"Main\" languages in Godot, though, are GDScript and VisualScript. The "
"main reason to choose them is their level of integration with Godot, as this "
"makes the experience smoother; both have slick editor integration, while C# "
"and C++ need to be edited in a separate IDE. If you are a big fan of "
"statically typed languages, go with C# and C++ instead."
msgstr ""
"Die \"Haupt-\" Sprachen in Godot, sind GDScript und VisualScript. Der "
"Hauptgrund diese beiden zu wählen ist, die tiefe Integration mit Godot, da "
"das die Erfahrung reibungsloser macht; beide sind im Editor integriert, wo "
"hingegen C# und C++ in einer seperaten IDE bearbeitet werden müssen. Falls "
"du ein großer Fan von statisch typisierten Sprachen bist, wähle stattdessen "
"C# und C++."

#: ../../docs/getting_started/step_by_step/scripting.rst:22
msgid "GDScript"
msgstr "GDScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:24
msgid ""
":ref:`doc_gdscript` is, as mentioned above, the main language used in Godot. "
"Using it has some positive points compared to other languages due to its "
"high integration with Godot:"
msgstr ""
":ref:`doc_gdscript` ist, wie oben erwähnt, die Hauptsprache in Godot. Diese "
"zu verwenden hat ein paar Vorteile gegenüber anderer Sprachen in Godot, da "
"sie gut in Godot integriert ist:"

#: ../../docs/getting_started/step_by_step/scripting.rst:28
msgid ""
"It's simple, elegant, and designed to be familiar for users of other "
"languages such as Lua, Python, Squirrel, etc."
msgstr ""
"Sie ist simpel, elegant und ähnelt Sprachen wie Lua, Python, Squirrel, etc."

#: ../../docs/getting_started/step_by_step/scripting.rst:29
msgid "Loads and compiles blazingly fast."
msgstr "Läd und kompiliert unheimlich schnell."

#: ../../docs/getting_started/step_by_step/scripting.rst:30
msgid ""
"The editor integration is a pleasure to work with, with code completion for "
"nodes, signals, and many other items pertaining to the scene being edited."
msgstr ""
"Durch die Integration im Editor, der Codevervollständigung für Nodes, "
"Signale und andere Elemente innerhalb einer Szene ist es eine Freude mit der "
"Sprache zu arbeiten."

#: ../../docs/getting_started/step_by_step/scripting.rst:31
msgid ""
"Has vector types built-in (such as Vectors, transforms, etc.), making it "
"efficient for heavy use of linear algebra."
msgstr ""
"Hat eingebaute Vektortypen ( wie Vectors, transforms, etc.), was sie "
"effizient für die Arbeit mit linearer Algebra macht."

#: ../../docs/getting_started/step_by_step/scripting.rst:32
msgid ""
"Supports multiple threads as efficiently as statically typed languages - one "
"of the limitations that made us avoid VMs such as Lua, Squirrel, etc."
msgstr ""
"Unterstützt mehrere Threads, so effizient wie statisch typifizierter "
"Sprachen - was der Grund ist warum wir andere  VM's wie Lua, Squirrel, etc "
"mieden."

#: ../../docs/getting_started/step_by_step/scripting.rst:33
msgid ""
"Uses no garbage collector, so it trades a small bit of automation (most "
"objects are reference counted anyway), by determinism."
msgstr ""
"Nutzt keinen Garbage Collector, also handelt es sich um ein kleines Stück "
"Automatisierung (die meisten Objekte werden sowieso gezählt), durch "
"Determinismus."

#: ../../docs/getting_started/step_by_step/scripting.rst:34
msgid ""
"Its dynamic nature makes it easy to optimize sections of code in C++ (via "
"GDNative) if more performance is required, all without recompiling the "
"engine."
msgstr ""
"Ihre dynamische Natur macht es einfach, Bereiche des Codes in C++ zu "
"optimieren (via GDNative), falls mehr Leistung nötig ist. Und das alles ohne "
"die Engine neu zu kompilieren."

#: ../../docs/getting_started/step_by_step/scripting.rst:36
msgid ""
"If you're undecided and have experience with programming, especially "
"dynamically typed languages, go for GDScript!"
msgstr ""
"Falls du unentschlossen bist und Erfahrung mit dem Programmieren, besonders "
"mit dynamischen Programiersprachen besizt, verwende GDScript!"

#: ../../docs/getting_started/step_by_step/scripting.rst:40
msgid "VisualScript"
msgstr "VisualScript"

#: ../../docs/getting_started/step_by_step/scripting.rst:42
msgid ""
"Beginning with 3.0, Godot offers :ref:`Visual "
"Scripting<doc_what_is_visual_script>`. This is a typical implementation of a "
"\"blocks and connections\" language, but adapted to how Godot works."
msgstr ""
"Seit Version 3.0 unterstüzt Godot :ref:`Visual "
"Scripting<doc_what_is_visual_script>`.  Dies ist eine typische "
"Implementierung einer \"blocks and connections\" Sprache, die aber an die "
"funktionsweise von Godot angepasst wurde."

#: ../../docs/getting_started/step_by_step/scripting.rst:46
msgid ""
"Visual scripting is a great tool for non-programmers, or even for "
"experienced developers who want to make parts of the code more accessible to "
"others, like game designers or artists."
msgstr ""
"Visual Scripting ist ein großartiges Werkzeug für Menschen ohne "
"Programmierkenntnisse, aber auch für erfahrene Prorammierer, die Teile ihres "
"Codes für andere, beispielsweise Designer oder Künstler, verständlicher "
"machen wollen."

#: ../../docs/getting_started/step_by_step/scripting.rst:50
msgid ""
"It can also be used by programmers to build state machines or custom visual "
"node workflows - for example, a dialogue system."
msgstr ""
"Es kann auch von Programmieren verwendet werden, um Zustandsautomaten oder "
"eigene grafische Werkzeuge zu entwerfen - zum Beispiel ein Dialog System."

#: ../../docs/getting_started/step_by_step/scripting.rst:55
#, fuzzy
msgid ".NET / C#"
msgstr ".NET / C#"

#: ../../docs/getting_started/step_by_step/scripting.rst:57
msgid ""
"As Microsoft's C# is a favorite amongst game developers, we have added "
"official support for it. C# is a mature language with tons of code written "
"for it, and support was added thanks to a generous donation from Microsoft."
msgstr ""
"Da Microsofts C# eine beliebte Sprache bei Spielentwicklern ist, "
"unterstützen wir sie nun offiziell. C# ist ein ausgewachsene "
"Programmiersprache in der bereits große Mengen Code geschrieben wurden. Die "
"Unterstützung wurde dank einer großzügigen Spende von Microsoft eingefügt."

#: ../../docs/getting_started/step_by_step/scripting.rst:62
msgid ""
"It has an excellent tradeoff between performance and ease of use, although "
"one must be aware of its garbage collector."
msgstr ""
"C# hat eine exzellente Gewichtung zwischen Leistung und "
"Nutzerfreundlichkeit. Man sollte sich allerdings seines 'Garbage Collectors' "
"bewusst sein."

#: ../../docs/getting_started/step_by_step/scripting.rst:65
msgid ""
"C# is usually the best choice for companies. The large amount of programmers "
"familiar with it means less time can be spent learning Godot and more time "
"can be spent programming with it."
msgstr ""
"Für Unternehmen ist üblicherweise C# die beste Wahl, da viele Programmierer "
"bereits Kenntnisse der Sprache haben. So muss weniger Zeit darauf verwendet "
"werden, Godot kennenzulernen und mehr Zeit kann schneller in die aktive "
"Entwicklung fließen."

#: ../../docs/getting_started/step_by_step/scripting.rst:69
msgid ""
"Since Godot uses the `Mono <https://mono-project.com>`_ .NET runtime, in "
"theory any third-party .NET library or framework can be used for scripting "
"in Godot, as well as any Common Language Infrastructure-compliant "
"programming language, such as F#, Boo or ClojureCLR. In practice however, C# "
"is the only officially supported .NET option."
msgstr ""
"Da Godot `Mono <https://mono-project.com>`_ als .NET runtime verwendet, "
"können viele .NET Bibliotheken und Frameworks von Drittanbietern, sowie "
"Common Language Infrastructure-kompatible Programmiersprachen, wie zum "
"Beispiel F#, Boo oder ClojureCLR, in Scripts verwendet werden.\n"
"C# ist aber die einzige offiziell unterstützte .NET-Option."

#: ../../docs/getting_started/step_by_step/scripting.rst:75
msgid "GDNative / C++"
msgstr "GDNative / C++"

#: ../../docs/getting_started/step_by_step/scripting.rst:77
msgid ""
"Finally, one of our brightest additions for the 3.0 release: GDNative allows "
"scripting in C++ without needing to recompile (or even restart) Godot."
msgstr ""
"Zu guter Letzt eine unserer cleversten Neuerungen in Version 3.0: GDNative "
"ermöglicht es, Skripte in C++ zu schreiben, ohne Godot zu rekompilieren oder "
"neuzustarten."

#: ../../docs/getting_started/step_by_step/scripting.rst:81
msgid ""
"Any C++ version can be used, and mixing compiler brands and versions for the "
"generated shared libraries works perfectly, thanks to our use of an internal "
"C API Bridge."
msgstr ""
"Jede C++ Version kann benutzt werden, und dank unserer internen C API Brücke "
"ist das Mischen verschiedener Compiler und Compiler-Versionen zum Generieren "
"der Programmbibliotheken kein Problem."

#: ../../docs/getting_started/step_by_step/scripting.rst:85
msgid ""
"This language is the best choice for performance and does not need to be "
"used throughout an entire game, as other parts can be written in GDScript or "
"Visual Script. However the API is clear and easy to use as it resembles, "
"mostly, Godot's actual C++ API."
msgstr ""
"Diese Sprache ist die beste Wahl, wenn die Leistung im Vordergrund steht, "
"und muss nicht für die gesamte Entwicklung verwendet werden, da andere Teile "
"in GDScript oder Visual Script realisiert werden können. Allerdings ist die "
"API klar und einfach zu benutzen, denn sie ähnelt Godot's tatsächlicher C++ "
"API stark."

#: ../../docs/getting_started/step_by_step/scripting.rst:90
msgid ""
"More languages can be made available through the GDNative interface, but "
"keep in mind we don't have official support for them."
msgstr ""
"Weitere Programmiersprachen können mittels der GDNative Schnittstelle "
"verfügbar gemacht werden, diese werden allerdings nicht offiziell von uns "
"unterstützt."

#: ../../docs/getting_started/step_by_step/scripting.rst:94
msgid "Scripting a scene"
msgstr "Eine Szene skripten"

#: ../../docs/getting_started/step_by_step/scripting.rst:96
msgid ""
"For the rest of this tutorial we'll set up a GUI scene consisting of a "
"button and a label, where pressing the button will update the label. This "
"will demonstrate:"
msgstr ""
"Für den Rest dieser Einleitung werden wir eine GUI Szene, bestehend aus "
"einem Text und einem Knopf, der bei Betätigung den Text aktualisiert, "
"erstellen. Dies wird demonstrieren:"

#: ../../docs/getting_started/step_by_step/scripting.rst:100
msgid "Writing a script and attaching it to a node."
msgstr "Ein Skript schreiben und es einem Node hinzufügen."

#: ../../docs/getting_started/step_by_step/scripting.rst:101
msgid "Hooking up UI elements via signals."
msgstr "UI Elemente mit Signalen verknüpfen."

#: ../../docs/getting_started/step_by_step/scripting.rst:102
msgid "Writing a script that can access other nodes in the scene."
msgstr ""
"Ein Skript schreiben welches Zugriff auf andere Nodes in der Szene hat."

#: ../../docs/getting_started/step_by_step/scripting.rst:104
msgid ""
"Before continuing, please make sure to read the :ref:`doc_gdscript` "
"reference. It's a language designed to be simple, and the reference is "
"short, so it will not take more than a few minutes to get an overview of the "
"concepts."
msgstr ""
"Bitte lesen Sie die :ref:`doc_gdscript` Referenz bevor sie fortfahren. Die "
"Sprache ist konzipiert um einfach zu sein, und die Referenz ist kurz, es "
"wird also höchstens einige Minuten dauern einen Überblick über die Konzepte "
"zu erlangen."

#: ../../docs/getting_started/step_by_step/scripting.rst:109
msgid "Scene setup"
msgstr "Eine Szene aufsetzen"

#: ../../docs/getting_started/step_by_step/scripting.rst:111
msgid ""
"Use the \"Add Child Node\" dialogue accessed from the Scene tab (or by "
"pressing ``Ctrl+A``) to create a hierarchy with the following nodes:"
msgstr ""
"Benutze den \"Node hier anhängen\" Dialog, zugänglich über den Szenentab "
"(oder mit der Tastaturkombination ``Strg+A``), um eine Hierarchie mit den "
"folgenden Nodes zu erstellen:"

#: ../../docs/getting_started/step_by_step/scripting.rst:114
msgid "Panel"
msgstr "Panel"

#: ../../docs/getting_started/step_by_step/scripting.rst:116
msgid "Label"
msgstr "Label"

#: ../../docs/getting_started/step_by_step/scripting.rst:117
msgid "Button"
msgstr "Schaltfläche"

#: ../../docs/getting_started/step_by_step/scripting.rst:119
msgid "The scene tree should look like this:"
msgstr "Der Szenenbaum sollte so aussehen:"

#: ../../docs/getting_started/step_by_step/scripting.rst:123
msgid ""
"Use the 2D editor to position and resize the Button and Label so that they "
"look like the image below. You can set the text from the Inspector tab."
msgstr ""
"Verwende den 2D-Editor um den Button und das Label so zu positionieren, wie "
"im folgenden Bild dargestellt. Der Text kann im Inspektortab eingefügt "
"werden."

#: ../../docs/getting_started/step_by_step/scripting.rst:128
msgid "Finally, save the scene with a name such as ``sayhello.tscn``."
msgstr "Anschließend speichere die Szene unter den namen ``sayhello.tscn``."

#: ../../docs/getting_started/step_by_step/scripting.rst:133
msgid "Adding a script"
msgstr "Ein Skript hinzufügen"

#: ../../docs/getting_started/step_by_step/scripting.rst:135
msgid ""
"Right click on the Panel node, then select \"Attach Script\" from the "
"context menu:"
msgstr ""
"Rechtsklicke auf das Panel Node und wähle \"Skript hinzufügen\" von dem "
"Kontextmenü:"

#: ../../docs/getting_started/step_by_step/scripting.rst:140
msgid ""
"The script creation dialog will pop up. This dialog allows you to set the "
"script's language, class name, and other relevant options."
msgstr ""
"Es erscheint ein Dialogfenster um Skripte zu erstellen. Dieser Dialog "
"erlaubt die Auswahl der Skriptsprache, Klassenname und weitere relevante "
"Optionen."

#: ../../docs/getting_started/step_by_step/scripting.rst:143
msgid ""
"In GDScript the file itself represents the class, so the class name field is "
"not editable."
msgstr ""
"In GDScript bestimmt der Dateiname die Klasse, daher ist der Klassenname "
"nicht editierbar."

#: ../../docs/getting_started/step_by_step/scripting.rst:146
msgid ""
"The node we're attaching the script to is a panel, so the Inherits field "
"will automatically be filled in with \"Panel\". This is what we want, as the "
"script's goal is to extend the functionality of our panel node."
msgstr ""
"Wir fügen das Skript zu dem Node Panel hinzu, weshalb das Vererbungsfeld "
"\"Erbt\" automatisch mit \"Panel\" gefüllt wurde. In diesem Fall ist dies "
"erwünscht, da unser Skript eine funktionale Erweiterung von Panel ist."

#: ../../docs/getting_started/step_by_step/scripting.rst:150
msgid "Finally, enter a path name for the script and select Create:"
msgstr "Wähle einen Dateinamen für das Skript und klicke auf \"Erstellen\":"

#: ../../docs/getting_started/step_by_step/scripting.rst:154
msgid ""
"The script will then be created and added to the node. You can see this as "
"an \"Open script\" icon next to the node in the Scene tab, as well as in the "
"script property under Inspector:"
msgstr ""
"Damit wird das Skript erstellt und zu dem Node Panel hinzugefügt. Dies ist "
"ersichtlich an dem \"Skript öffnen\"-Symbol rechts von Panel im Szenenbaum "
"und als Skripteigenschaft im Inspektortab:"

#: ../../docs/getting_started/step_by_step/scripting.rst:160
msgid ""
"To edit the script, select either of these buttons, both of which are "
"highlighted in the above image. This will bring you to the script editor "
"where a default template will be included:"
msgstr ""
"Um das Skript zu bearbeiten, wähle eine der erwähnten Schlatflächen, welche "
"im obigen Bild hervorgehoben wurden. Dies wird den Skripteditor mit einer "
"Standardvorlage anzeigen:"

#: ../../docs/getting_started/step_by_step/scripting.rst:165
msgid ""
"There's not much there. The ``_ready()`` function is called when the node, "
"and all its children, enters the active scene. **Note:** ``_ready()`` is not "
"the constructor; the constructor is instead ``_init()``."
msgstr ""
"Die Standardvorlage enthält recht wenig. Die ``_ready()``-Funktion wir "
"aufgerufen, wen das Node und alle seine Unterobjekt in die aktive Szene "
"eintreten. **Beachte:** ``_ready()`` ist kein Konstruktor, der Konstruktor "
"ist ``_init()``."

#: ../../docs/getting_started/step_by_step/scripting.rst:170
msgid "The role of the script"
msgstr "Die Rolle des Skriptes"

#: ../../docs/getting_started/step_by_step/scripting.rst:172
msgid ""
"A script adds behavior to a node. It is used to control how the node "
"functions as well as how it interacts with other nodes: children, parent, "
"siblings, and so on. The local scope of the script is the node. In other "
"words, the script inherits the functions provided by that node."
msgstr ""
"Das Skript fügt Verhalten zu dem Node hinzu. Es wird dazu verwendet, um die "
"Funktion des Nodes als auch Interaktion mit anderen Objekten, wie Ober-, "
"Unter- oder Nebennodes, zu steuern. Der lokale Aufgabenbereich des Skripts "
"ist das Node. Anders ausgedrückt, das Skript erbt die Funktionen welche das "
"Node zur Verfügung stellt."

#: ../../docs/getting_started/step_by_step/scripting.rst:180
msgid "Handling a signal"
msgstr "Signalbehandlung"

#: ../../docs/getting_started/step_by_step/scripting.rst:182
msgid ""
"Signals are \"emitted\" when some specific kind of action happens, and they "
"can be connected to any function of any script instance. Signals are used "
"mostly in GUI nodes, although other nodes have them too, and you can even "
"define custom signals in your own scripts."
msgstr ""
"Signale werden \"ausgesendet\", wenn eine bestimmte Arten von Aktion "
"stattfindet, welche mit beliebigen Funktionen in jeglicher Skriptinstanz "
"verbunden sein können. Signale werden hauptsächlich in Nodes für grafische "
"Benutzeroberflächen verwendet, obgleich andere Nodes diese auch besitzen "
"können und es sogar möglich ist eigene Signale in Skripten zu definieren."

#: ../../docs/getting_started/step_by_step/scripting.rst:187
msgid ""
"In this step, we'll connect the \"pressed\" signal to a custom function. "
"Forming connections is the first part and defining the custom function is "
"the second part. For the first part, Godot provides two ways to create "
"connections: through a visual interface the editor provides or through code."
msgstr ""
"In diesem Schritt werden wir das \"pressed()\"-Signal mit einer eigenen "
"Funktion verbinden. Erstellen der Verbindung ist der erste Schritt und "
"definieren der neuen Funktion der zweite. Für den ersten Schritt stellt "
"Godot zwei mögliche Wege zur Verfügung: durch ein grafisches Interface oder "
"programmiertechnisch."

#: ../../docs/getting_started/step_by_step/scripting.rst:192
msgid ""
"While we will use the code method for the remainder of this tutorial series, "
"let's cover how the editor interface works for future reference."
msgstr ""
"Während wir die Programmiermethode für den Rest dieser Anleitung verwenden, "
"lass uns das grafisch Interface für zukünftige Verweise abdecken."

#: ../../docs/getting_started/step_by_step/scripting.rst:195
msgid ""
"Select the Button node in the scene tree and then select the \"Node\" tab. "
"Next, make sure that you have \"Signals\" selected."
msgstr ""
"Wähle das Button Node im Szenenbaum und dann klicke auf das \"Node\"-Tab. "
"Als nächstes, stelle sicher, dass \"Signale\" ausgewählt ist."

#: ../../docs/getting_started/step_by_step/scripting.rst:200
msgid ""
"If you then select \"pressed()\" under \"BaseButton\" and click the "
"\"Connect...\" button in the bottom right, you'll open up the connection "
"creation dialogue."
msgstr ""
"Wenn dann \"pressed()\" unter \"BaseButton\" ausgewählt und auf die "
"\"Verbinden...\"-Schaltfläche im unteren rechten Bereich geklickt wird, "
"erscheint eine Dialog, mit dem Signalverbindungen erstellt werden können."

#: ../../docs/getting_started/step_by_step/scripting.rst:205
msgid ""
"In the bottom-left are the key things you need to create a connection: a "
"node which implements the method you want to trigger (represented here as a "
"NodePath) and the name of the method to trigger."
msgstr ""
"Im unteren linken Bereich sind die Schlüsselstellen für das Erstellen einer "
"Verbindung zu finden: ein Node, welches den Funktionsaufruf implementiert "
"der ausgelöst wird (dargestellt als \"Pfad zur Node\") und der Name des "
"Funktionsaufrufes."

#: ../../docs/getting_started/step_by_step/scripting.rst:209
msgid ""
"The top-left section displays a list of your scene's nodes with the emitting "
"node's name highlighted in red. Select the \"Panel\" node here. When you "
"select a node, the NodePath at the bottom will automatically update to point "
"a relative path from the emitting node to the selected node."
msgstr ""
"Der obere linke Bereich zeigt eine Liste mit den Nodes in der Szene, mit der "
"Signalquelle hervorgehoben in Rot. Wähle hier das Panel Node aus. Nach der "
"Auswahl des Nodes wird der \"Pfad zur Node\" automatisch auf den relativen "
"Pfad von der Signalquelle zum ausgewählten Node aktualisiert."

#: ../../docs/getting_started/step_by_step/scripting.rst:214
msgid ""
"By default, the method name will contain the emitting node's name (\"Button"
"\" in this case), resulting in \"_on_[EmitterNode]_[signal_name]\". If you "
"do have the \"Make Function\" check button checked, then the editor will "
"generate the function for you before setting up the connection."
msgstr ""
"Als Standard enthält der Funktionsaufruf den Namen des Nodes von welchem das "
"Signal ausgeht (in diesem Fall \"Button\"), was in "
"\"_on_[SignalNode]_[SignalName]\" resultiert. Wenn \"Funktion erstellen\" "
"ausgewählt ist, dann wird automatisch ein Funktion generiert bevor die "
"Signalverbindung hergestellt wird."

#: ../../docs/getting_started/step_by_step/scripting.rst:219
msgid ""
"And that concludes the guide on how to use the visual interface. However, "
"this is a scripting tutorial, so for the sake of learning, let's dive in to "
"the manual process!"
msgstr ""
"Und damit schließt der Leitfaden für das grafische Interface ab. Da dies "
"eine Skriptanleitung ist, lass uns nun die Programmiermethode abdecken!"

#: ../../docs/getting_started/step_by_step/scripting.rst:223
msgid ""
"To accomplish this, we will introduce a function that is probably the most "
"used by Godot programmers: :ref:`Node.get_node() <class_Node_get_node>`. "
"This function uses paths to fetch nodes anywhere in the scene, relative to "
"the node that owns the script."
msgstr ""
"Um dies zu erreichen werden wir eine Funktion benutzen, welche "
"wahrscheinlich eine der meist genutzten Funktionen bei Godot Programmierern "
"ist: :ref:`Node.get_node() <class_Node_get_node>`. Diese Funktion benutzt "
"Pfade um Nodes überall in der Szene, relative zu dem Node mit dem "
"aufrufendem Skript zu finden."

#: ../../docs/getting_started/step_by_step/scripting.rst:228
msgid ""
"For the sake of convenience, delete everything underneath ``extends Panel``. "
"You will fill out the rest of the script manually."
msgstr ""
"Einfachheitshalber lösche alles unterhalb von ``extends Panel``. Wir werden "
"den Rest des Skriptes manuell ausfüllen."

#: ../../docs/getting_started/step_by_step/scripting.rst:231
msgid ""
"Because the Button and Label are siblings under the Panel where the script "
"is attached, you can fetch the Button by typing the following underneath the "
"``_ready()`` function:"
msgstr ""
"Da Button und Label Unternodes unter Panel sind, an welches dieses Skript "
"angefügt ist, ist es möglich Button zu finden indem folgendes unter die "
"``_ready()``-Funktion hinzugefügt wird:"

#: ../../docs/getting_started/step_by_step/scripting.rst:248
msgid "Next, write a function which will be called when the button is pressed:"
msgstr ""
"Als nächstes schreibe eine Funktion welche aufgerufen wird, wenn auf die "
"Schaltfläche von \"Button\" geklickt wird:"

#: ../../docs/getting_started/step_by_step/scripting.rst:264
msgid ""
"Finally, connect the button's \"pressed\" signal to ``_ready()`` by using :"
"ref:`Object.connect() <class_Object_connect>`."
msgstr ""
"Abschließend verbinde das \"pressed\"-Signal in der ``_ready()``-Funktion "
"mit dem Funktionsaufruf :ref:`Object.connect() <class_Object_connect>`."

#: ../../docs/getting_started/step_by_step/scripting.rst:280
msgid "The final script should look like this:"
msgstr "Des endgültige Skript sollte wie folgt aussehen:"

#: ../../docs/getting_started/step_by_step/scripting.rst:314
msgid ""
"Run the scene and press the button. You should get the following result:"
msgstr ""
"Starte die Szene und klick auf die Schaltfläche. Dies sollte zu folgenden "
"Ergebnis führen:"

#: ../../docs/getting_started/step_by_step/scripting.rst:318
msgid "Why, hello there! Congratulations on scripting your first scene."
msgstr "Oh, immer noch hier? Glückwunsch zum Skripten der ersten Szene."

#: ../../docs/getting_started/step_by_step/scripting.rst:322
msgid ""
"A common misunderstanding regarding this tutorial is how ``get_node(path)`` "
"works. For a given node, ``get_node(path)`` searches its immediate children. "
"In the above code, this means that Button must be a child of Panel. If "
"Button were instead a child of Label, the code to obtain it would be:"
msgstr ""
"Ein verbreitetes Missverständnis bezüglich dieser Anleitung ist die "
"Funktionsweise der ``get_node(path)``-Funktion. Für ein gegebenes Node, "
"``get_node(path)`` sucht die unmittelbaren Unternodes. In dem Programmcode "
"oberhalb bedeutet das, dass Button unterhalb von Panel angehängt sein muss. "
"Wäre Button stattdessen unterhalb von Label angesiedelt, dann müsste der "
"Funktionsaufruf folgendermaßen abgeändert werden:"

#: ../../docs/getting_started/step_by_step/scripting.rst:340
msgid "Also, remember that nodes are referenced by name, not by type."
msgstr ""
"Des Weiteren beachte, das Nodes über den Namen referenziert werden und nicht "
"über den Typ."

#: ../../docs/getting_started/step_by_step/scripting.rst:344
msgid ""
"The right-hand panel of the connect dialogue is for binding specific values "
"to the connected function's parameters. You can add and remove values of "
"different types."
msgstr ""
"Die rechtsseitige Ansicht im \"Signal verbinden\"-Dialogfenster ist für die "
"Übergabe spezifischer Werte an den verbundenen Funktionsaufruf. Hier können "
"Werte verschiedener Typen hinzugefügt oder entfernt werden."

#: ../../docs/getting_started/step_by_step/scripting.rst:348
msgid ""
"The code approach also enables this with a 4th ``Array`` parameter that is "
"empty by default. Feel free to read up on the ``Object.connect`` method for "
"more information."
msgstr ""
"Die Programmiermethode erlaubt die selbe Funktionalität mit dem vierten "
"Parameter im Funktionsaufruf, welcher Standardmäßig leer ist. Mehr "
"Information dazu kann unter der ``Object.connect``-Funktion nachgelesen "
"werden."
