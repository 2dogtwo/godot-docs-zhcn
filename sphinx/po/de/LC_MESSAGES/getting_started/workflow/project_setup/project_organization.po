# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-20 12:09+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:4
msgid "Project organization"
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:7
msgid "Introduction"
msgstr "Einf√ºhrung"

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:9
msgid ""
"This tutorial aims to propose a simple workflow on how to organize projects. "
"Since Godot allows the programmer to use the file-system as they please, "
"figuring out a way to organize projects when starting to use the engine can "
"be a little challenging. Because of this, the tutorial describes simple "
"workflow which should work as a starting point regardless of whether it is "
"used."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:16
msgid ""
"Additionally, using version control can be challenging, so this proposition "
"will include that too."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:20
msgid "Organization"
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:22
msgid ""
"Godot is scene-based in nature, and uses the filesystem as-is, without "
"metadata or an asset database."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:25
msgid ""
"Unlike other engines, a lot of resources are contained within the scene "
"itself, so the amount of files in the filesystem is considerably lower."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:28
msgid ""
"Considering that, the most common approach is to group assets as close to "
"scenes as possible; when a project grows, it makes it more maintainable."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:32
msgid ""
"As an example, one can usually place into a single folder their basic assets "
"such as sprite images, 3D model meshes, materials, and music, etc. They can "
"then use a separate folder to store built levels that use them."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:53
msgid "Importing"
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:55
msgid ""
"Godot versions prior to 3.0 did the import process from files outside the "
"project. While this can be useful in large projects, it resulted in an "
"organization hassle for most developers."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:59
msgid ""
"Because of this, assets are now transparently imported from within the "
"project folder."
msgstr ""

#: ../../docs/getting_started/workflow/project_setup/project_organization.rst:62
msgid ""
"If a folder shouldn't be imported into Godot, an exception can be made with "
"a .gdignore file."
msgstr ""
