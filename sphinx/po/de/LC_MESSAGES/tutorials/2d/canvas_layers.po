# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/canvas_layers.rst:4
msgid "Canvas layers"
msgstr "Canvas-Ebenen"

#: ../../docs/tutorials/2d/canvas_layers.rst:7
msgid "Viewport and Canvas items"
msgstr "Ansichtsfenster und Canvas-Elemente"

#: ../../docs/tutorials/2d/canvas_layers.rst:9
msgid ""
"Regular 2D nodes, such as :ref:`Node2D <class_Node2D>` or :ref:`Control "
"<class_Control>` both inherit from :ref:`CanvasItem <class_CanvasItem>`, "
"which is the base for all 2D nodes. CanvasItems can be arranged in trees. "
"Each item will inherit its parent's transform. This means that when the "
"parent is moved, the children will move too."
msgstr ""
"Reguläre 2D-Nodes wie :ref:`Node2D <class_Node2D>` und :ref:`Control "
"<class_Control>` sind abgeleitet von :ref:`CanvasItem <class_CanvasItem>` "
"auf dem auch sämtliche andere 2D-Nodes basieren. CanvasItems können in einer "
"Baumhierarchie strukturiert werden und kopieren ihre Transformation von der "
"übergeordneten Node. Das heißt, wird ein übergeordneter Node bewegt, bewegen "
"sich alle untergeordneten Nodes in gleicher Weise."

#: ../../docs/tutorials/2d/canvas_layers.rst:16
msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, and will be displayed "
"through it."
msgstr ""
"Diese Nodes in der Hierarchie sind stets direkte oder indirekte Unterobjekte "
"einer :ref:`Viewport <class_Viewport>`-Instanz und werden über diese "
"dargestellt."

#: ../../docs/tutorials/2d/canvas_layers.rst:19
msgid ""
"A Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, which allows applying a custom :"
"ref:`Transform2D <class_Transform2D>` transform to the CanvasItem hierarchy "
"it contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""
"Ein Viewport enthält die Eigenschaft :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, die es erlaubt, die gesamte "
"CanvasItem-Hierarchie durch ein benutzerdefiniertes :ref:`Transform2D "
"<class_Transform2D>` zu beeinflussen. Bestehende Nodes wie :ref:`Camera2D "
"<class_Camera2D>` passen auf diese Weise ihre Sicht an."

#: ../../docs/tutorials/2d/canvas_layers.rst:25
msgid ""
"Effects like scrolling are best achieved by manipulating the canvas "
"transform property. This approach is more efficient than moving the root "
"canvas item (and hence the whole scene)."
msgstr ""
"Effekte wie das Scrollen lassen sich am besten durch Bearbeiten der Canvas-"
"Transformationseigenschaft erzielen. Dieser Ansatz ist effizienter als das "
"Verschieben des Wurzel-Canvas-Elements (und damit der gesamten Szene)."

#: ../../docs/tutorials/2d/canvas_layers.rst:28
msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. Examples of this are:"
msgstr ""
"Normalerweise wollen wir nicht, dass *alles* im Spiel durch Canvas Transform "
"beeinflusst werden soll. Dazu zählen beispielsweise:"

#: ../../docs/tutorials/2d/canvas_layers.rst:31
msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr ""
"**Parallaxe Hintergründe**: Sich langsamer bewegende Hintergründe im "
"Gegensatz zum Rest des Geschehens."

#: ../../docs/tutorials/2d/canvas_layers.rst:33
msgid ""
"**UI**: Think of a user interface (UI) or Heads-up display (HUD) "
"superimposed on our view of the game world. We want a life counter, score "
"display and other elements to retain their screen positions even when our "
"view of the game world is changing."
msgstr ""
"**UI**: Stellen Sie sich eine Benutzeroberfläche (UI) oder ein Heads-up-"
"Display (HUD) vor, die unsere Sicht auf die Spielwelt überlagert. Wir "
"möchten, dass ein Lebenszähler, eine Punkteanzeige und andere Elemente ihre "
"Bildschirmpositionen beibehalten, auch wenn sich unsere Sicht auf die "
"Spielwelt ändert."

#: ../../docs/tutorials/2d/canvas_layers.rst:34
msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""
"**Übergänge**: Übergangseffekte (Ein-/Ausblendungen, Bildüberlagerungen) "
"bleiben üblicherweise ebenso auf einer festen Position."

#: ../../docs/tutorials/2d/canvas_layers.rst:36
msgid "How can these problems be solved in a single scene tree?"
msgstr ""
"Wie können diese Umstände innerhalb eines einzelnen Szenenbaums "
"berücksichtigt werden?"

#: ../../docs/tutorials/2d/canvas_layers.rst:39
msgid "CanvasLayers"
msgstr "CanvasLayers"

#: ../../docs/tutorials/2d/canvas_layers.rst:41
msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""
"Die Antwort ist :ref:`CanvasLayer <class_CanvasLayer>`, ein Node, der eine "
"separate 2D-Ebene zum Zeichnen seiner untergeordneten Nodes bietet. Nodes "
"unter dem (Haupt-)Viewport werden grundsätzlich auf Ebene \"0\" gezeichnet, "
"wohingegen ein CanvasLayer auf jeder beliebigen Ebene sein kann. Ebenen mit "
"einer höheren Nummer liegen über jenen mit einer kleineren. CanvasLayers "
"besitzen jeweils eigene Transformationsanpassungen und sind nicht von denen "
"der anderen Ebenen abhängig. Dies erlaubt es, UI-Elemente auf einer "
"bestimmten Stelle zu fixieren während sich die Umgebung verändert."

#: ../../docs/tutorials/2d/canvas_layers.rst:50
msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""
"Ein Beispiel dazu ist ein Parallax-Hintergrund. So kann dieser in einem "
"CanvasLayer auf Ebene \"-1\" dargestellt werden. Die Ansicht mit "
"Punktestand, Lebensanzeige und der Schaltfläche zum Pausieren dagegen werden "
"auf Ebene \"1\" angelegt."

#: ../../docs/tutorials/2d/canvas_layers.rst:54
msgid "Here's a diagram of how it looks:"
msgstr "Zur Veranschaulichung, hier ein Diagramm:"

#: ../../docs/tutorials/2d/canvas_layers.rst:58
msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"CanvasLayers funktionieren unabhängig von der Anordnung der Baumhierarchie, "
"sie hängen einzig von der Ebenennummer ab, die für die Instanzierung "
"benötigt wird."

#: ../../docs/tutorials/2d/canvas_layers.rst:61
msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is  correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2d nodes also have a property for "
"controlling their drawing order (see :ref:`Node2D.z_index "
"<class_Node2D_property_z_index>`)."
msgstr ""
"CanvasLayers sind nicht erforderlich, um die Zeichenreihenfolge von Nodes zu "
"steuern. Die Standardmethode um sicherzustellen, dass ein Node korrekt 'vor' "
"oder 'hinter' anderen gezeichnet wird besteht darin, die Reihenfolge der "
"Nodes im Szenenfenster zu ändern. Möglicherweise werden die obersten Nodes "
"im Szenenfenster *hinter* den unteren Nodes im Ansichtsfenster gezeichnet "
"und nicht wie intuitiv angenommen andersherum. 2D-Nodes haben auch eine "
"Eigenschaft zum Steuern ihrer Zeichnungsreihenfolge (siehe :ref:`Node2D."
"z_index <class_Node2D_property_z_index>`)."
