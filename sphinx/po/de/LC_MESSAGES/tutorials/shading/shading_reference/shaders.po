# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 15:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:4
msgid "Shaders"
msgstr "Shader (Schattierer)"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:7
msgid "Introduction"
msgstr "Einführung"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:9
msgid ""
"Shaders are unique programs that run on the GPU. They are used to specify "
"how to take mesh data (vertex positions, colors, normals, etc.) and draw "
"them to the screen. Shaders do not process information the same way a normal "
"program does because they are optimized for running on the GPU. One "
"consequence of this is that shaders do not retain their data after they run; "
"they output a final color to the screen and then move on. Accordingly, there "
"is no way of accessing the color output from the last run of the shader."
msgstr ""
"Shader (Schattierer) sind eigenständige Programme die auf der GPU laufen. "
"Sie werden genutzt um die Mesh-Daten (Vertex Positionen, Farben, Normals, "
"usw.) auszuwerten und auf dem Bildschirm zu zeichnen. Shader verarbeiten "
"Daten nicht auf die gleiche Weise wie ein normales Programm, da sie auf der "
"GPU laufen und dafür optimiert wurden. Ein Konsequenz daraus ist, dass "
"Shader ihre Daten nach dem Durchlauf verlieren; sie geben eine Farbe auf dem "
"Bildschirm aus und fahren fort. Demzufolge gibt es keinen Weg auf diese "
"Farbausgabe vom letzten Shaderdurchlauf zuzugreifen."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:16
msgid ""
"Godot uses a shader language very similar to GLSL, but with added "
"functionality and slightly less flexibility. The reason for doing this is "
"that Godot integrates built-in functionality to make writing complex shaders "
"substantially easier. Godot wraps the user-written shader code in code of "
"its own. That way, Godot handles a lot of the low-level stuff that the user "
"doesn't need to worry about, and it is able to parse your shader code and "
"use it to affect the rendering pipeline. For more advanced shaders, you can "
"turn this functionality off using a render_mode."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:23
msgid ""
"This document provides you with some information about shaders, specific to "
"Godot. For a detailed reference of the shading language in Godot see the :"
"ref:`Godot shading language doc<doc_shading_language>`."
msgstr ""
"Dieses Dokument bietet Ihnen einige Information über Shader, speziell in "
"Godot. Für eine detaillierte Referenz der Shader-Sprache in Godot siehe :ref:"
"`Godot Shader-Sprache<doc_shading_language>`."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:27
msgid "Shader types"
msgstr "Shader-Typen"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:29
msgid ""
"Instead of supplying a general purpose configuration for all uses (2D, 3D, "
"particles), Godot shaders must specify what they are intended for. Different "
"types support different render modes, built-in variables, and processing "
"functions."
msgstr ""
"Anstatt eine Universalkonfiguration für alle Verwendungszwecke (2D, 3D, "
"Partikel) bereitzustellen, müssen Godot-Shader angeben wofür sie bestimmt "
"sind. Verschiedene Typen unterstützen verschiedene Rendermodi, integrierte "
"Variablen und Verarbeitungsfunktionen."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:33
msgid ""
"All shaders need to specify their type in the first line, in the following "
"format:"
msgstr ""
"Alle Shader müssen ihren Typ in der ersten Zeile spezifizieren, im folgenden "
"Format:"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:39
msgid "Valid types are:"
msgstr "gültige Typen sind:"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:41
msgid ":ref:`spatial <doc_spatial_shader>`: For 3D rendering."
msgstr ":ref:`Spatial-Shader <doc_spatial_shader>`: für 3D Rendering."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:42
msgid ":ref:`canvas_item <doc_canvas_item_shader>`: For 2D rendering."
msgstr ":ref:`canvas_item <doc_canvas_item_shader>`: für 2D Rendering."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:43
msgid ":ref:`particles <doc_particle_shader>`: For particle systems."
msgstr ":ref:`particles <doc_particle_shader>`: für Partikelsysteme."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:45
msgid ""
"For detailed information on each shading type, see the corresponding "
"reference document."
msgstr ""
"Für detaillierte Informationen über jeden Shader Typ, siehe in das "
"zugehörige Referenzdokument."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:48
msgid "Render modes"
msgstr "Render-Modi"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:50
msgid ""
"Different shader types support different render modes. They are optional "
"and, if specified, must be after the *shader_type*. Render modes are used to "
"alter the way built-in functionality is handled. For example, it is common "
"to use the render mode ``unshaded`` to skip the built-in light processor "
"function."
msgstr ""
"Verschiedene Shader-Typen unterstützen unterschiedliche Render-Modi. Sie "
"sind optional und müssen, falls angegeben, nach dem *shader_type* stehen. "
"Render-Modi werden verwendet, um die Art und Weise zu ändern, wie "
"integrierte Funktionen behandelt werden. Beispielsweise ist es üblich, den "
"Rendermodus`` zu verwenden, um die integrierte Lichtprozessorfunktion zu "
"überspringen."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:55
msgid "Render modes are specified underneath the shader type:"
msgstr "Rendermodi werden nach dem Shader-Typ angegeben:"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:62
msgid ""
"Each shader type has a different list of render modes available. See the "
"document for each shader type for a complete list of render modes."
msgstr ""
"Für jeden Shader-Typ steht eine andere Liste von Rendermodi zur Verfügung. "
"Eine vollständige Liste der Rendermodi finden Sie im Dokument für jeden "
"Shader-Typ."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:66
msgid "Processor functions"
msgstr "Prozessor-Funktionen"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:68
msgid ""
"Depending on the shader type, different processor functions may be "
"optionally overridden. For \"spatial\" and \"canvas_item\", it is possible "
"to override ``vertex``, ``fragment``, and ``light``. For \"particles\", only "
"``vertex`` can be overridden."
msgstr ""
"Je nach Shader-Typ können optional verschiedene Prozessorfunktionen "
"überschrieben werden. Für \"spatial\" und \"canvas_item\" ist es möglich, "
"``vertex``, ``fragment``, und ``light`` zu überschreiben. Für \"Partikel\" "
"kann nur ``vertex`` überschrieben werden."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:73
msgid "Vertex processor"
msgstr "Vertex-Prozessor"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:75
msgid ""
"The ``vertex`` processing function is called once for every vertex in "
"\"spatial\" and \"canvas_item\" shaders. For \"particles\" shaders, it is "
"called once for every particle."
msgstr ""
"Die ``vertex`` Verarbeitungsfunktion wird einmal für jeden Vertex in den "
"Shadern \"spatial\" und \"canvas_item\" aufgerufen. Für \"Partikel\" -Shader "
"wird es für jedes Partikel einmal aufgerufen."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:78
msgid ""
"The ``vertex`` function is used to modify per-vertex information that will "
"be passed on to the fragment function. It can also be used to establish "
"variables that will be sent to the fragment function by using varyings(see "
"other doc)."
msgstr ""
"Die Funktion ``vertex`` wird verwendet um Informationen pro Vertex zu "
"ändern, die an die Fragmentfunktion weitergegeben werden. Es kann auch "
"verwendet werden um Variablen festzulegen, die mithilfe von Variationen an "
"die Fragmentfunktion gesendet werden (siehe anderes Dokument)."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:82
msgid ""
"By default, Godot will take your vertex information and transform it "
"accordingly to be drawn. If this is undesirable, you can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example of this."
msgstr ""
"Standardmäßig nimmt Godot Ihre Vertex-Informationen und transformiert sie "
"entsprechend um sie zu zeichnen. Wenn dies unerwünscht ist, können Sie die "
"Daten mithilfe von Rendermodi selbst transformieren. Ein Beispiel hierfür "
"finden Sie im :ref:`Spatial Shader Dokument <doc_spatial_shader>."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:87
msgid "Fragment processor"
msgstr "Fragment-Prozessor oder Pixel-Prozessor"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:89
msgid ""
"The ``fragment`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in \"spatial\" and \"canvas_item\" "
"shaders."
msgstr ""
"Die ``fragment`` Verarbeitungsfunktion wird verwendet um die Godot-"
"Materialparameter pro Pixel einzurichten. Dieser Code wird auf jedem "
"sichtbaren Pixel ausgeführt, das das Objekt oder Grundelement zeichnet. Es "
"ist nur in den Shadern \"spatial\" und \"canvas_item\" verfügbar."

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:93
msgid ""
"The standard use of the fragment function is to set up material properties "
"that will be used to calculate lighting. For example, you would set values "
"for ``ROUGHNESS``, ``RIM``, or ``TRANSMISSION`` which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on effects that you do not use."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:103
msgid "Light processor"
msgstr "Beleuchtungs-Prozessor"

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:105
msgid ""
"The ``light`` processor runs per pixel too, but also runs for every light "
"that affects the object (and does not run if no lights affect the object). "
"It exists as a function called inside the ``fragment`` processor and "
"typically operates on the material properties setup inside the ``fragment`` "
"function."
msgstr ""

#: ../../docs/tutorials/shading/shading_reference/shaders.rst:110
msgid ""
"The ``light`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` and :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectively."
msgstr ""
