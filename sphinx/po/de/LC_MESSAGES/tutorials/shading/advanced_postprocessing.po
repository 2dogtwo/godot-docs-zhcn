# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-19 11:09+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:4
msgid "Advanced post-processing"
msgstr "Fortgeschrittene Nachbearbeitung"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:7
msgid "Introduction"
msgstr "Einführung"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:9
msgid ""
"This tutorial describes an advanced method for post-processing in Godot. In "
"particular, it will explain how to write a post-processing shader that uses "
"the depth buffer. You should already be familiar with post-processing "
"generally and, in particular, with the methods outlined in the :ref:`custom "
"post-processing tutorial <doc_custom_postprocessing>`."
msgstr ""
"Diese Anleitung beschreibt eine fortschrittliche Methode zur Nachbearbeitung "
"in Godot. Insbesondere wird erläutert, wie ein Nachbearbeitungs-Shader "
"geschrieben wird, der den Tiefenpuffer verwendet. Sie sollten bereits mit "
"der Nachbearbeitung im Allgemeinen und insbesondere mit den Methoden "
"vertraut sein, die in der folgenden Anleitung beschrieben sind :ref:"
"`Anleitung zur benutzerdefinierten Nachbearbeitung "
"<doc_custom_postprocessing>`."

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:14
msgid ""
"In the previous post-processing tutorial, we rendered the scene to a :ref:"
"`Viewport <class_Viewport>` and then rendered the Viewport in a :ref:"
"`ViewportContainer <class_ViewportContainer>` to the main scene. One "
"limitation of this method is that we could not access the depth buffer "
"because the depth buffer is only available in spatial shaders and Viewports "
"do not maintain depth information."
msgstr ""
"In der vorherigen Anleitung zur Nachbearbeitung haben wir die Szene in "
"einem :ref:`Viewport <Klassenfenster> und dann das Ansichtsfenster in einem :"
"ref: ViewportContainer <KlassenportContainer> in die Hauptszene gerendert. "
"Eine Einschränkung dieser Methode besteht darin, dass wir nicht auf den "
"Tiefenpuffer zugreifen konnten, da der Tiefenpuffer nur in räumlichen "
"Shadern verfügbar ist und in Ansichtsfenstern keine Tiefeninformationen "
"verwaltet werden."

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:21
msgid "Full screen quad"
msgstr "Vollbild Quadrat"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:23
msgid ""
"In the :ref:`custom post-processing tutorial <doc_custom_postprocessing>`, "
"we covered how to use a Viewport to make custom post-processing effects. "
"There are two main drawbacks of using a Viewport:"
msgstr ""
"In der Anleitung :ref:`Benutzerdefinierte Nachbearbeitung "
"<doc_custom_postprocessing>` wurde erläutert, wie Sie mit einem "
"Ansichtsfenster benutzerdefinierte Nachbearbeitungseffekte erzielen. Die "
"Verwendung eines Ansichtsfensters hat zwei Hauptnachteile:"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:27
msgid "The depth buffer cannot be accessed"
msgstr "Auf den Tiefenpuffer kann nicht zugegriffen werden"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:28
msgid "The effect of the post-processing shader is not visible in the editor"
msgstr "Der Effekt des Nachbearbeitungs-Shaders ist im Editor nicht sichtbar"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:30
msgid ""
"To get around the limitation on using the depth buffer, use a :ref:"
"`MeshInstance <class_MeshInstance>` with a :ref:`QuadMesh <class_QuadMesh>` "
"primitive. This allows us to use a spatial shader and to access the depth "
"texture of the scene. Next, use a vertex shader to make the quad cover the "
"screen at all times so that the post-processing effect will be applied at "
"all times, including in the editor."
msgstr ""
"Um die Einschränkung bei der Verwendung des Tiefenpuffers zu umgehen, "
"verwenden Sie eine :ref:`MeshInstance <class_MeshInstance>` mit einem :ref:"
"`QuadMesh <class_QuadMesh>` Primitiv. Dies ermöglicht es uns einen "
"räumlichen Shader zu verwenden und auf die Tiefenstruktur der Szene "
"zuzugreifen. Verwenden Sie als Nächstes einen Vertex-Shader, damit das "
"Quadrat den Bildschirm jederzeit abdeckt, sodass der Nachbearbeitungseffekt "
"jederzeit angewendet wird, auch im Editor."

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:36
msgid ""
"First, create a new MeshInstance and set its mesh to a QuadMesh. This "
"creates a quad centered at position ``(0, 0, 0)`` with a width and height of "
"``1``. Set the width and height to ``2``. Right now, the quad occupies a "
"position in world space at the origin; however, we want it to move with the "
"camera so that it always covers the entire screen. To do this, we will "
"bypass the coordinate transforms that translate the vertex positions through "
"the difference coordinate spaces and treat the vertices as if they were "
"already in clip space."
msgstr ""
"Erstellen Sie zunächst eine neue MeshInstance und setzen Sie das Mesh auf "
"ein QuadMesh. Dies erzeugt ein Quadrat, das an der Position ``(0, 0, 0)`` "
"mit einer Breite und Höhe von ``1`` zentriert ist. Stellen Sie die Breite "
"und Höhe auf ``2`` ein. Im Moment nimmt das Quadrat am Ursprung eine "
"Position im Raum ein; Wir möchten jedoch, dass es sich mit der Kamera so "
"bewegt, dass es immer den gesamten Bildschirm abdeckt. Dazu umgehen wir die "
"Koordinatentransformationen, die die Vertex-Positionen durch die die "
"unterschiedlichen Koordinatenräume verschieben und behandeln die Eckpunkte "
"so, als wären sie bereits im abgegrenzten Raum."

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:44
msgid ""
"The vertex shader expects coordinates to be output in clip space, which are "
"coordinates ranging from ``-1`` at the left and bottom of the screen to "
"``1`` at the top and right of the screen. This is why the QuadMesh needs to "
"have height and width of ``2``. Godot handles the transform from model to "
"view space to clip space behind the scenes, so we need to nullify the "
"effects of Godot's transformations. We do this by setting the ``POSITION`` "
"built-in to our desired position. ``POSITION`` bypasses the built-in "
"transformations and sets the vertex position directly."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:60
msgid ""
"Even with this vertex shader, the quad keeps disappearing. This is due to "
"frustum culling, which is done on the CPU. Frustum culling uses the camera "
"matrix and the AABBs of Meshes to determine if the Mesh will be visible "
"*before* passing it to the GPU. The CPU has no knowledge of what we are "
"doing with the vertices, so it assumes the coordinates specified refer to "
"world positions, not clip space positions, which results in Godot culling "
"the quad when we turn away from the center of the scene. In order to keep "
"the quad from being culled, there are a few options:"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:68
msgid ""
"Add the QuadMesh as a child to the camera, so the camera is always pointed "
"at it"
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:69
msgid ""
"Set the Geometry property ``extra_cull_margin`` as large as possible in the "
"QuadMesh"
msgstr ""
"Setzen Sie die Geometrie-Eigenschaft ``extra_cull_margin`` so groß wie "
"möglich im QuadMesh"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:71
msgid ""
"The second option ensures that the quad is visible in the editor, while the "
"first option guarantees that it will still be visible even if the camera "
"moves outside the cull margin. You can also use both options."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:76
msgid "Depth texture"
msgstr "Tiefentextur"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:78
msgid ""
"To read from the depth texture, perform a texture lookup using ``texture()`` "
"and the uniform variable ``DEPTH_TEXTURE``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:85
msgid ""
"Similar to accessing the screen texture, accessing the depth texture is only "
"possible when reading from the current viewport. The depth texture cannot be "
"accessed from another viewport to which you have rendered."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:89
msgid ""
"The values returned by ``DEPTH_TEXTURE`` are between ``0`` and ``1`` and are "
"nonlinear. When displaying depth directly from the ``DEPTH_TEXTURE``, "
"everything will look almost white unless it is very close. This is because "
"the depth buffer stores objects closer to the camera using more bits than "
"those further, so most of the detail in depth buffer is found close to the "
"camera. In order to make the depth value align with world or model "
"coordinates, we need to linearize the value. When we apply the projection "
"matrix to the vertex position, the z value is made nonlinear, so to "
"linearize it, we multiply it by the inverse of the projection matrix, which "
"in Godot, is accessible with the variable ``INV_PROJECTION_MATRIX``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:99
msgid ""
"Firstly, take the screen space coordinates and transform them into "
"normalized device coordinates (NDC). NDC run from ``-1`` to ``1``, similar "
"to clip space coordinates. Reconstruct the NDC using ``SCREEN_UV`` for the "
"``x`` and ``y`` axis, and the depth value for ``z``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:111
msgid ""
"Convert NDC to view space by multiplying the NDC by "
"``INV_PROJECTION_MATRIX``. Recall that view space gives positions relative "
"to the camera, so the ``z`` value will give us the distance to the point."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:124
msgid ""
"Because the camera is facing the negative ``z`` direction, the position will "
"have a negative ``z`` value. In order to get a usable depth value, we have "
"to negate ``view.z``."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:127
msgid ""
"The world position can be constructed from the depth buffer using the "
"following code. Note that the ``CAMERA_MATRIX`` is needed to transform the "
"position from view space into world space, so it needs to be passed to the "
"fragment shader with a varying."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:146
msgid "An optimization"
msgstr "Eine Optimierung"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:148
msgid ""
"You can benefit from using a single large triangle rather than using a full "
"screen quad. The reason for this is explained `here <https://michaldrobot."
"com/2014/04/01/gcn-execution-patterns-in-full-screen-passes>`_. However, the "
"benefit is quite small and only beneficial when running especially complex "
"fragment shaders."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:153
msgid ""
"Set the Mesh in the MeshInstance to an :ref:`ArrayMesh <class_ArrayMesh>`. "
"An ArrayMesh is a tool that allows you to easily construct a Mesh from "
"Arrays for vertices, normals, colors, etc."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:157
msgid "Now, attach a script to the MeshInstance and use the following code:"
msgstr ""
"Fügen Sie nun ein Skript an die MeshInstance an und verwenden Sie den "
"folgenden Code:"

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:179
msgid ""
"The triangle is specified in normalized device coordinates. Recall, NDC run "
"from ``-1`` to ``1`` in both the ``x`` and ``y`` directions. This makes the "
"screen ``2`` units wide and ``2`` units tall. In order to cover the entire "
"screen with a single triangle, use a triangle that is ``4`` units wide and "
"``4`` units tall, double its height and width."
msgstr ""

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:185
msgid ""
"Assign the same vertex shader from above and everything should look exactly "
"the same."
msgstr ""
"Weisen Sie den gleichen Vertex-Shader von oben zu, und alles sollte genau "
"gleich aussehen."

#: ../../docs/tutorials/shading/advanced_postprocessing.rst:187
msgid ""
"The one drawback to using an ArrayMesh over using a QuadMesh is that the "
"ArrayMesh is not visible in the editor because the triangle is not "
"constructed until the scene is run. To get around that, construct a single "
"triangle Mesh in a modelling program and use that in the MeshInstance "
"instead."
msgstr ""
