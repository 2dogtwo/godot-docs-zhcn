# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-21 12:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Statische Typisierung in GDScript"

msgid "In this guide, you will learn:"
msgstr "In dieser Anleitung geht es um:"

#, fuzzy
msgid "how to use static typing in GDScript;"
msgstr "Statische Typisierung in GDScript"

#, fuzzy
msgid "that static types can help you avoid bugs;"
msgstr "Diese **statische Typen helfen Fehler zu vermeiden**"

msgid "that static typing improves your experience with the editor."
msgstr ""

#, fuzzy
msgid ""
"Where and how you use this language feature is entirely up to you: you can "
"use it only in some sensitive GDScript files, use it everywhere, or don't "
"use it at all."
msgstr ""
"Wo und wie Sie diese neue Sprachfunktion verwenden, liegt ganz bei Ihnen: "
"Sie können sie nur in einigen vertraulichen GDScript-Dateien verwenden, "
"überall verwenden oder Code schreiben, wie Sie es immer getan haben!"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Statische Typen können für Variablen, Konstanten, Funktionen, Parameter und "
"Rückgabetypen verwendet werden."

msgid "A brief look at static typing"
msgstr "Ein kurzer Überblick über statische Typisierung"

#, fuzzy
msgid ""
"With static typing, GDScript can detect more errors without even running the "
"code. Also type hints give you and your teammates more information as you're "
"working, as the arguments' types show up when you call a method. Static "
"typing improves editor autocompletion and :ref:`documentation "
"<doc_gdscript_documentation_comments>` of your scripts."
msgstr ""
"Mit typisiertem GDScript kann Godot noch mehr Fehler erkennen, während Sie "
"den Code schreiben! Sie und Ihre Teamkollegen erhalten während der Arbeit "
"mehr Informationen, da die Argumenttypen beim Aufrufen einer Methode "
"angezeigt werden."

#, fuzzy
msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` class, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add()`` "
"method. With types, you can enforce this::"
msgstr ""
"Stellen Sie sich vor, Sie programmieren ein Inventarsystem. Sie codieren "
"einen \"Item\" -Node und dann ein \"Inventar\". Um Artikel zum Inventar "
"hinzuzufügen, sollten die Personen, die mit Ihrem Code arbeiten, immer einen "
"Artikel an die Methode \"Inventory.add\" übergeben. Mit Typen können Sie "
"Folgendes erzwingen:"

#, fuzzy
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options."
msgstr ""
"Statische Typen bieten Ihnen auch bessere Optionen für die Code-"
"Vervollständigung. Unten sehen Sie den Unterschied zwischen einer "
"dynamischen und einer statisch typisierten Abschlussoption für eine Klasse "
"namens \"PlayerController\"."

msgid ""
"You've probably encountered a lack of autocomplete suggestions after a dot:"
msgstr ""

#, fuzzy
msgid "Completion options for dynamic typed code."
msgstr "Beendigung erzwingen (optional)"

#, fuzzy
msgid ""
"This is due to dynamic code. Godot cannot know what value type you're "
"passing to the function. If you write the type explicitly however, you will "
"get all methods, properties, constants, etc. from the value:"
msgstr ""
"Dies ist auf dynamischen Code zurückzuführen. Godot kann nicht wissen, "
"welchen Node oder Werttyp Sie an die Funktion übergeben. Wenn Sie den Typ "
"jedoch explizit schreiben, erhalten Sie alle öffentlichen Methoden und "
"Variablen vom Node:"

#, fuzzy
msgid "Completion options for static typed code."
msgstr "Beendigung erzwingen (optional)"

msgid ""
"If you prefer static typing, we recommend enabling the **Text Editor > "
"Completion > Add Type Hints** editor setting. Also consider enabling `some "
"warnings <Warning system_>`_ that are disabled by default."
msgstr ""

msgid ""
"Also, typed GDScript improves performance by using optimized opcodes when "
"operand/argument types are known at compile time. More GDScript "
"optimizations are planned in the future, such as JIT/AOT compilation."
msgstr ""

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"Insgesamt bietet die typisierte Programmierung eine strukturiertere "
"Erfahrung. Es hilft, Fehler zu vermeiden und verbessert den "
"selbstdokumentierenden Aspekt Ihrer Skripte. Dies ist besonders hilfreich, "
"wenn Sie in einem Team oder an einem langfristigen Projekt arbeiten: Studien "
"haben gezeigt, dass Entwickler die meiste Zeit damit verbringen, den Code "
"anderer Leute oder Skripte zu lesen, die sie in der Vergangenheit "
"geschrieben und vergessen haben. Je klarer und strukturierter der Code ist, "
"desto schneller ist er zu verstehen, desto schneller können Sie vorankommen."

msgid "How to use static typing"
msgstr "Wie statische Typisierung genutzt wird"

#, fuzzy
msgid ""
"To define the type of a variable, parameter, or constant, write a colon "
"after the name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same::"
msgstr ""
"Um den Typ einer Variablen oder einer Konstante zu definieren, schreiben Sie "
"einen Doppelpunkt nach dem Namen der Variablen, gefolgt von ihrem Typ. Z.B. "
"``var health: int``. Dies zwingt den Variablentyp dazu, immer gleich zu "
"bleiben:"

#, fuzzy
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type::"
msgstr ""
"Godot wird versuchen, Typen abzuleiten, wenn Sie einen Doppelpunkt "
"schreiben, aber Sie lassen den Typ weg:"

#, fuzzy
msgid "There is no difference between ``=`` and ``:=`` for constants."
msgstr ""
"Beim Export gibt es keinen Unterschied zwischen Bufferschatten und "
"Strahlenschatten."

#, fuzzy
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer. Also, this is useful for typed arrays (like "
"``const A: Array[int] = [1, 2, 3]``), since untyped arrays are used by "
"default."
msgstr ""
"Sie müssen keine Typhinweise für Konstanten schreiben, da Godot diese "
"automatisch anhand des zugewiesenen Werts festlegt. Sie können dies dennoch "
"tun, um die Absicht Ihres Codes klarer zu machen."

#, fuzzy
msgid "What can be a type hint"
msgstr "Was kann die Engine?"

#, fuzzy
msgid "Here is a complete list of what can be used as a type hint:"
msgstr ""
"Hier ist ein vollständiges Shader-Beispiel, das auf diesen Richtlinien "
"basiert:"

msgid ""
"``Variant``. Any type. In most cases this is not much different from an "
"untyped declaration, but increases readability. As a return type, forces the "
"function to explicitly return some value."
msgstr ""

msgid ""
"*(Only return type)* ``void``. Indicates that the function does not return "
"any value."
msgstr ""

#, fuzzy
msgid ":ref:`Built-in types <doc_gdscript_builtin_types>`."
msgstr ":ref:`Built-in <doc_gdscript_builtin_types>`"

#, fuzzy
msgid "Native classes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)."
msgstr ""
"Kernklassen und Nodes (``Objekt``, ``Node``, ``Area2D``, ``Camera2D`` usw.)"

#, fuzzy
msgid ":ref:`Global classes <doc_gdscript_basics_class_name>`."
msgstr ":ref:`Skript-Klassen <doc_gdscript_basics_class_name>`"

#, fuzzy
msgid ":ref:`Inner classes <doc_gdscript_basics_inner_classes>`."
msgstr ":ref:`Skript-Klassen <doc_gdscript_basics_class_name>`"

msgid ""
"Global, native and custom named enums. Note that an enum type is just an "
"``int``, there is no guarantee that the value belongs to the set of enum "
"values."
msgstr ""

msgid ""
"Constants (including local ones) if they contain a preloaded class or enum."
msgstr ""

#, fuzzy
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant::"
msgstr ""
"Sie können jede Klasse, einschließlich Ihrer benutzerdefinierten Klassen, "
"als Typen verwenden. Es gibt zwei Möglichkeiten sie in Skripten zu "
"verwenden. Die erste Methode besteht darin, das Skript, das Sie als Typ in "
"eine Konstante verwenden möchten, vorzuladen:"

#, fuzzy
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your ``rifle.gd`` would look like this::"
msgstr ""
"Die zweite Methode besteht darin, beim Erstellen das Schlüsselwort "
"``class_name`` zu verwenden. Für das obige Beispiel würde Ihr Rifle.gd "
"folgendermaßen aussehen:"

#, fuzzy
msgid ""
"If you use ``class_name``, Godot registers the ``Rifle`` type globally in "
"the editor, and you can use it anywhere, without having to preload it into a "
"constant::"
msgstr ""
"Wenn Sie ``class_name`` verwenden, registriert Godot den Rifle-Typ global im "
"Editor und Sie können ihn überall verwenden, ohne ihn in eine Konstante "
"vorladen zu müssen:"

#, fuzzy
msgid "Specify the return type of a function with the arrow ``->``"
msgstr "Definieren Sie den Rückgabetyp einer Funktion mit dem Pfeil ->"

#, fuzzy
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type::"
msgstr ""
"Um den Rückgabetyp einer Funktion zu definieren, schreiben Sie nach ihrer "
"Deklaration einen Bindestrich und eine rechtwinklige Klammer ``->``, gefolgt "
"vom Rückgabetyp:"

#, fuzzy
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables::"
msgstr ""
"Der Typ ``void`` bedeutet, dass die Funktion nichts zurückgibt. Sie können "
"wie bei Variablen einen beliebigen Typ verwenden:"

#, fuzzy
msgid "You can also use your own classes as return types::"
msgstr "Sie können auch Ihre eigenen Nodes als Rückgabetypen verwenden:"

msgid "Covariance and contravariance"
msgstr ""

msgid ""
"When inheriting base class methods, you should follow the `Liskov "
"substitution principle <https://en.wikipedia.org/wiki/"
"Liskov_substitution_principle>`__."
msgstr ""

msgid ""
"**Covariance:** When you inherit a method, you can specify a return type "
"that is more specific (**subtype**) than the parent method."
msgstr ""

msgid ""
"**Contravariance:** When you inherit a method, you can specify a parameter "
"type that is less specific (**supertype**) than the parent method."
msgstr ""

#, fuzzy
msgid "Example::"
msgstr "Beispiel:"

#, fuzzy
msgid "Specify the element type of an ``Array``"
msgstr "Definieren Sie den Rückgabetyp einer Funktion mit dem Pfeil ->"

msgid "To define the type of an ``Array``, enclose the type name in ``[]``."
msgstr ""

msgid ""
"An array's type applies to ``for`` loop variables, as well as some operators "
"like ``[]``, ``[]=``, and ``+``. Array methods (such as ``push_back``) and "
"other operators (such as ``==``) are still untyped. Built-in types, native "
"and custom classes, and enums may be used as element types. Nested array "
"types are not supported."
msgstr ""

msgid ""
"Since Godot 4.2, you can also specify a type for the loop variable in a "
"``for`` loop. For instance, you can write::"
msgstr ""

msgid ""
"The array will remain untyped, but the ``name`` variable within the ``for`` "
"loop will always be of ``String`` type."
msgstr ""

#, fuzzy
msgid "Type casting"
msgstr "Typumwandlung"

#, fuzzy
msgid ""
"Type casting is an important concept in typed languages. Casting is the "
"conversion of a value from one type to another."
msgstr ""
"Typumwandlung ist ein Schlüsselkonzept in typisierten Sprachen. Casting ist "
"die Konvertierung eines Werts von einem Typ in einen anderen."

#, fuzzy
msgid ""
"Imagine an ``Enemy`` in your game, that ``extends Area2D``. You want it to "
"collide with the ``Player``, a ``CharacterBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``body_entered`` signal to "
"detect the collision. With typed code, the body you detect is going to be a "
"generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Stellen Sie sich einen Feind in Ihrem Spiel vor, der Area2D erweitert. Sie "
"möchten, dass es mit dem Player kollidiert, einem ``KinematicBody2D`` mit "
"einem Skript namens ``PlayerController``. Sie verwenden das Signal "
"``on_body_entered``, um die Kollision zu erkennen. Mit eingegebenem Code "
"wird der Körper, den Sie erkennen, ein generischer ``PhysicsBody2D`` sein "
"und nicht Ihr ``PlayerController`` beim ``_on_body_entered`` Rückruf."

#, fuzzy
msgid ""
"You can check if this ``PhysicsBody2D`` is your ``Player`` with the ``as`` "
"keyword, and using the colon ``:`` again to force the variable to use this "
"type. This forces the variable to stick to the ``PlayerController`` type::"
msgstr ""
"Sie können überprüfen, ob dieses ``PhysicsBody2D`` Ihr Player mit dem "
"Casting-Schlüsselwort ``as`` ist, und den Doppelpunkt ``:`` erneut "
"verwenden, um die Variable zur Verwendung dieses Typs zu zwingen. Dies "
"zwingt die Variable, sich an den Typ ``PlayerController`` zu halten:"

#, fuzzy
msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player`` variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Da wir mit einem benutzerdefinierten Typ zu tun haben, falls ``body`` den "
"``PlayerController`` nicht erweitert, wird die Variable ``player`` auf "
"``null`` gesetzt. Wir können dies verwenden um zu überprüfen, ob der Körper "
"der Spieler ist oder nicht. Dank des cast erhalten wir auch eine komplette "
"automatische Vervollständigung der Spielervariablen."

msgid ""
"The ``as`` keyword silently casts the variable to ``null`` in case of a type "
"mismatch at runtime, without an error/warning. While this may be convenient "
"in some cases, it can also lead to bugs. Use the ``as`` keyword only if this "
"behavior is intended. A safer alternative is to use the ``is`` keyword::"
msgstr ""

msgid "or ``assert()`` statement::"
msgstr ""

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Wenn Sie versuchen mit einem integrierten Typ zu casten und dies "
"fehlschlägt, gibt Godot einen Fehler aus."

msgid "Safe lines"
msgstr "Sichere Zeilen"

#, fuzzy
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a tool to tell "
"you when ambiguous lines of code are type-safe. As you can mix and match "
"typed and dynamic code, at times, Godot doesn't have enough information to "
"know if an instruction will trigger an error or not at runtime."
msgstr ""
"Sie können auch casting verwenden, um sichere Zeilen zu gewährleisten. "
"Sichere Zeilen sind ein neues Tool in Godot 3.1, mit dem Sie feststellen "
"können, wann mehrdeutige Codezeilen typsicher sind. Da Sie typisierten und "
"dynamischen Code mischen und abgleichen können, verfügt Godot manchmal nicht "
"über genügend Informationen um zu wissen, ob eine Anweisung zur Laufzeit "
"einen Fehler auslöst oder nicht."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Dies geschieht, wenn Sie einen untergeordneten Node erhalten. Nehmen wir zum "
"Beispiel einen Timer: Mit dynamischem Code können Sie den Node mit "
"``$Timer`` erhalten. GDScript unterstützt `Duck-Typing <https://"
"stackoverflow.com/a/4205163/8125343>`__, so das selbst wenn Ihr Timer vom "
"Typ ``Timer`` ist, so ist er auch ein ``Node`` und ein ``Object``, er "
"erweitert zwei Klassen. Mit dynamischem GDScript kann Ihnen auch der Node-"
"typ egal sein, solange er über die Methoden verfügt, die Sie aufrufen müssen."

#, fuzzy
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as CharacterBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Sie können Casting verwenden um Godot den zu erwartenden Typ mitzuteilen, "
"wenn Sie einen Node erhalten: ``($Timer als Timer)``, ``($Player als "
"KinematicBody2D)`` usw. Godot stellt die Funktionalität des Typs sicher, und "
"wenn ja wird die Zeilennummer links im Skripteditor grün."

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr ""
"Unsichere Zeile (Zeile 7) im Vergleich zu sicheren Zeilen (Zeile 6 und 8)"

msgid ""
"Safe lines do not always mean better or more reliable code. See the note "
"above about the ``as`` keyword. For example::"
msgstr ""

msgid ""
"Even though ``node_2`` declaration is marked as an unsafe line, it is more "
"reliable than ``node_1`` declaration. Because if you change the node type in "
"the scene and accidentally forget to change it in the script, the error will "
"be detected immediately when the scene is loaded. Unlike ``node_1``, which "
"will be silently cast to ``null`` and the error will be detected later."
msgstr ""

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Sie können sichere Zeilen deaktivieren oder ihre Farbe in den "
"Editoreinstellungen ändern."

msgid "Typed or dynamic: stick to one style"
msgstr "Typisiert oder dynamisch: Halten Sie sich an einen Stil"

#, fuzzy
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"Typisiertes GDScript und dynamisches GDScript können im selben Projekt "
"koexistieren. Ich empfehle jedoch sich aus Gründen der Konsistenz in Ihrer "
"Codebasis und für Ihre Kollegen an beide Stile zu halten. Es ist für alle "
"einfacher zusammenzuarbeiten, wenn Sie dieselben Richtlinien befolgen und "
"den Code anderer schneller lesen und verstehen können."

#, fuzzy
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style::"
msgstr ""
"Typisierter Code erfordert etwas mehr Schreibaufwand, aber Sie erhalten die "
"oben beschriebenen Vorteile. Hier ist ein Beispiel für dasselbe leere Skript "
"in einem dynamischen Stil:"

#, fuzzy
msgid "And with static typing::"
msgstr "Und mit statischer Typisierung:"

#, fuzzy
msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style::"
msgstr ""
"Wie Sie sehen, können Sie auch Typen mit den virtuellen Methoden der Engine "
"verwenden. Signalrückrufe können wie alle Methoden auch Typen verwenden. "
"Hier ist ein ``body_entered`` Signal im dynamischen Stil:"

#, fuzzy
msgid "And the same callback, with type hints::"
msgstr "Und der gleiche Aufruf mit Typhinweisen:"

msgid "Warning system"
msgstr "Warnsystem"

#, fuzzy
msgid ""
"Detailed documentation about the GDScript warning system has been moved to :"
"ref:`doc_gdscript_warning_system`."
msgstr ""
"Die Dokumentation zum GDScript-Warnsystem wurde verschoben nach :ref:"
"`doc_gdscript_warning_system`."

#, fuzzy
msgid ""
"From version 3.1, Godot gives you warnings about your code as you write it: "
"the engine identifies sections of your code that may lead to issues at "
"runtime, but lets you decide whether or not you want to leave the code as it "
"is."
msgstr ""
"Ein weiterer wesentlicher Vorteil von typisiertem GDScript ist das neue "
"**Warnsystem**. Ab Version 3.1 gibt Godot beim Schreiben Warnungen zu Ihrem "
"Code aus: Die Engine identifiziert Abschnitte Ihres Codes, die zur Laufzeit "
"zu Problemen führen können. Sie können jedoch entscheiden, ob Sie den Code "
"unverändert lassen möchten oder nicht. Mehr dazu gleich."

msgid ""
"We have a number of warnings aimed specifically at users of typed GDScript. "
"By default, these warnings are disabled, you can enable them in Project "
"Settings (**Debug > GDScript**, make sure **Advanced Settings** is enabled)."
msgstr ""

msgid ""
"You can enable the ``UNTYPED_DECLARATION`` warning if you want to always use "
"static types. Additionally, you can enable the ``INFERRED_DECLARATION`` "
"warning if you prefer a more readable and reliable, but more verbose syntax."
msgstr ""

msgid ""
"``UNSAFE_*`` warnings make unsafe operations more noticeable, than unsafe "
"lines. Currently, ``UNSAFE_*`` warnings do not cover all cases that unsafe "
"lines cover."
msgstr ""

#, fuzzy
msgid "Cases where you can't specify types"
msgstr "Fälle in denen man keine Typen spezifizieren kann"

#, fuzzy
msgid ""
"To wrap up this introduction, let's mention cases where you can't use type "
"hints. This will trigger a **syntax error**."
msgstr ""
"Lassen Sie uns zum Abschluss dieser Einführung einige Fälle behandeln, in "
"denen Sie keine Typhinweise verwenden können. Alle folgenden Beispiele "
"**lösen Fehler aus**."

#, fuzzy
msgid ""
"You can't specify the type of individual elements in an array or a "
"dictionary::"
msgstr ""
"Sie können den Typ einzelner Mitglieder in einem Array nicht angeben. Dies "
"erzeugt einen Fehler:"

#, fuzzy
msgid "Nested types are not currently supported::"
msgstr "**Mobile Browser werden derzeit nicht unterstützt.**"

#, fuzzy
msgid "Typed dictionaries are not currently supported::"
msgstr "Validierungsebenen werden unter iOS derzeit **nicht** unterstützt."

msgid "Summary"
msgstr "Zusammenfassung"

#, fuzzy
msgid ""
"Typed GDScript is a powerful tool. It helps you write more structured code, "
"avoid common errors, and create scalable and reliable systems. Static types "
"improve GDScript performance and more optimizations are planned for the "
"future."
msgstr ""
"Typisiertes GDScript ist ein leistungsstarkes Tool. Ab Version 3.1 von Godot "
"verfügbar, können Sie strukturierteren Code schreiben, häufige Fehler "
"vermeiden und skalierbare Systeme erstellen. In Zukunft werden statische "
"Typen dank anstehender Compiler-Optimierungen auch einen schönen "
"Leistungsschub bringen."

msgid "Translation status"
msgstr "Übersetzungsstatus"
