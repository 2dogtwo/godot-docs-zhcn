# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-21 12:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# signals"
msgstr "C# Signale"

#, fuzzy
msgid ""
"For a detailed explanation of signals in general, see the :ref:`doc_signals` "
"section in the step by step tutorial."
msgstr ""
"Ein vollständiges C# Beispiel finden Sie im Abschnitt **Behandeln eines "
"Signals** in der Schritt-für-Schritt-Anleitung :ref:`doc_scripting`."

msgid ""
"While it is still possible to use signals through the ``Connect``/"
"``Disconnect`` API, C# gives us a more idiomatic way to implement the :ref:"
"`observer pattern<doc_key_concepts_signals>`."
msgstr ""

#, fuzzy
msgid "Signals as C# events"
msgstr "Signale und Eigenschaften"

msgid ""
"To provide more type-safety, Godot signals are also all available through "
"`events <https://learn.microsoft.com/en-us/dotnet/csharp/events-overview>`_. "
"You can handle these events, as any other event, with the ``+=`` and ``-=`` "
"operators."
msgstr ""

msgid ""
"In addition, you can always access signal names associated with a node type "
"through its nested ``SignalName`` class. This is useful when, for example, "
"you want to await on a signal (see :ref:`doc_c_sharp_differences_await`)."
msgstr ""

msgid ""
"Godot will take care of disconnecting all the signals you connected through "
"events when your nodes are freed. Meaning that: as you don't need to call "
"``Disconnect`` on all signals you used ``Connect`` on, you don't need to ``-"
"=`` all the signals you used ``+=`` on."
msgstr ""

#, fuzzy
msgid "Custom signals as C# events"
msgstr "Benutzerdefinierte Signale"

msgid ""
"To declare a custom event in your C# script, use the ``[Signal]`` attribute "
"on a public delegate type. Note that the name of this delegate needs to end "
"with ``EventHandler``."
msgstr ""

msgid ""
"Once this is done, Godot will create the appropriate events automatically "
"behind the scenes. You can then use said events as you'd do for any other "
"Godot signal. Note that events are named using your delegate's name minus "
"the final ``EventHandler`` part."
msgstr ""

msgid ""
"If you want to connect to these signals in the editor, you will need to "
"(re)build the project to see them appear."
msgstr ""

msgid ""
"You can click the **Build** button in the upper-right corner of the editor "
"to do so."
msgstr ""
"Klicken Sie dazu auf die Schaltfläche **Build** in der oberen rechten Ecke "
"des Editors."

#, fuzzy
msgid "Signal emission"
msgstr "Signale"

msgid ""
"To emit signals, use the ``EmitSignal`` method. Note that, as for signals "
"defined by the engine, your custom signal names are listed under the nested "
"``SignalName`` class."
msgstr ""

msgid ""
"In contrast with other C# events, you cannot use ``Invoke`` to raise events "
"tied to Godot signals."
msgstr ""

msgid ""
"Signals support arguments of any :ref:`Variant-compatible "
"<doc_c_sharp_variant>` type."
msgstr ""

msgid ""
"Consequently, any ``Node`` or ``Reference`` will be compatible "
"automatically, but custom data objects will need to inherit from "
"``GodotObject`` or one of its subclasses."
msgstr ""

#, fuzzy
msgid "Bound values"
msgstr "Aufzählungswert"

msgid ""
"Sometimes you'll want to bind values to a signal when the connection is "
"established, rather than (or in addition to) when the signal is emitted. To "
"do so, you can use an anonymous function like in the following example."
msgstr ""

msgid ""
"Here, the :ref:`Button.Pressed <class_BaseButton_signal_pressed>` signal do "
"not take any argument. But we want to use the same ``ModifyValue`` for both "
"the \"plus\" and \"minus\" buttons. So we bind the modifier value at the "
"time we're connecting the signals."
msgstr ""

msgid "Signal creation at runtime"
msgstr ""

msgid ""
"Finally, you can create custom signals directly while your game is running. "
"Use the ``AddUserSignal`` method for that. Be aware that it should be "
"executed before any use of said signals (either connecting to them or "
"emitting them). Also, note that signals created this way won't be visible "
"through the ``SignalName`` nested class."
msgstr ""

msgid "Translation status"
msgstr "Übersetzungsstatus"
