# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-28 16:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:4
msgid "Making plugins"
msgstr "Erweiterungen (Plugins) erstellen"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:7
msgid "About plugins"
msgstr "Was sind Erweiterungen"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:9
msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be "
"made entirely with GDScript and standard scenes, without even reloading the "
"editor. Unlike modules, you don't need to create C++ code nor recompile the "
"engine. While this makes plugins less powerful, there are still many things "
"you can do with them. Note that a plugin is similar to any scene you can "
"already make, except it is created using a script to add editor "
"functionality."
msgstr ""
"Eine Erweiterung ist eine Möglichkeit dem Editor weitere nützliche Werkzeuge "
"hinzuzufügen. Dies kann nur durch GDScript und Standard Szenen erfolgen, "
"ohne überhaupt den Editor neu starten zu müssen. Im Gegensatz zu Modulen "
"muss kein C++ Programm geschrieben, oder der Editor neu compiliert werden. "
"Dies macht Plugins zwar weniger Leistungsfähig, man kann aber noch immer "
"viel damit anfangen. Solch eine Erweiterung ist ähnlich wie eine Szene die "
"man erzeugen kann, mit der Ausnahme, daß es mittels eines Scripts den "
"Editfunktionalität erweitert."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:16
msgid ""
"This tutorial will guide you through the creation of two simple plugins so "
"you can understand how they work and be able to develop your own. The first "
"will be a custom node that you can add to any scene in the project and the "
"other will be a custom dock added to the editor."
msgstr ""
"Um zu zeigen wie diese Erweiterungen aufgebaut sind und funktionieren werden "
"in dieser Anleitung zwei einfache Plugins erstellt. Das erste ist ein "
"benutzerdefiniertes Node, das jeder Szene im Projekt hinzugefügt werden kann "
"und das andere wird ein benutzerdefiniertes Dock, das dem Editor hinzugefügt "
"wird."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:22
msgid "Creating a plugin"
msgstr "Eine Erweiterung erstellen"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:24
msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as a base to develop and test the plugins."
msgstr ""
"Bevor es losgeht, erstellen Sie ein neues leeres Projekt wo Sie möchten. "
"Dies wird der Grundstein zum entwickeln und testen des Plugins."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:27
msgid ""
"The first thing you need for the editor to identify a new plugin is to "
"create two files: a ``plugin.cfg`` for configuration and a tool script with "
"the functionality. Plugins have a standard path like ``addons/plugin_name`` "
"inside the project folder. Godot provides a dialog for generating those "
"files and placing them where they need to be."
msgstr ""
"Damit der Editor das neue Plugin erkennt, müssen zwei Dateien erstellt "
"werden: ein ``plugin.cfg`` zur Konfiguration und ein Skript mit der "
"Funktionalität. Plugins haben einen Standard Pfad wie ``addons/plugin_name`` "
"innerhalb des Projekt Verzeichnisses. Godot stellt einen Dialog zur "
"Verfügung um diese Dateien zu erzeugen und sie an der richtigen Stelle zu "
"speichern."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:33
msgid ""
"In the main toolbar, click the ``Project`` dropdown. Then click ``Project "
"Settings...``. Go to the ``Plugins`` tab and then click on the ``Create`` "
"button in the top-right."
msgstr ""
"Im Hauptmenü gehen Sie zu Projekt -> Projekt Einstellungen und dort auf die "
"Registerkarte ``Erweiterungen``, dann drücken Sie ``Erstellen`` oben rechts."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:37
msgid "You will see the dialog appear, like so:"
msgstr "Der Dialog wird erscheinen:"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:41
msgid ""
"The placeholder text in each field describes how it affects the plugin's "
"creation of the files and the config file's values."
msgstr ""
"Die Platzhalter in jedem Textfeld beschreiben wie die Erstellung der Dateien "
"und der Konfiguration-Werte des Plugins beeinflusst werden."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:44
msgid "To continue with the example, use the following values::"
msgstr "Um mit dem Beispiel fortzufahren nutze die folgenden Werte:"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:55
msgid "You should end up with a directory structure like this:"
msgstr "Die Verzeichnisstruktur sollte am Ende so aussehen:"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:59
msgid ""
"``plugin.cfg`` is a simple INI file with metadata about your plugin. The "
"name and description help people understand what it does. Your name helps "
"you get properly credited for your work. The version number helps others "
"know if they have an outdated version; if you are unsure on how to come up "
"with the version number, check out `Semantic Versioning <https://semver.org/"
">`_. The main script file will instruct Godot what your plugin does in the "
"editor once it is active."
msgstr ""
"``plugin.cfg`` ist eine einfache INI-Datei mit Metadaten zu Ihrem Plugin. "
"Der Name und die Beschreibung helfen die Funktionsweise zu verstehen. Ihr "
"Name zeigt allen wem wir die Bemühungen zu verdanken haben. Die "
"Versionsnummer hilft anderen zu erkennen, ob sie eine veraltete Version "
"haben. Wenn Sie sich nicht sicher sind, wie Sie die Versionsnummer finden "
"sollen, lesen Sie `Semantic Versioning <https://semver.org/>`_. Die "
"Hauptskriptdatei weist Godot an, was Ihr Plugin im Editor tut, sobald es "
"aktiv ist."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:68
msgid "The script file"
msgstr "Die Skript Datei"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:70
msgid ""
"Upon creation of the plugin, the dialog will automatically open the "
"EditorPlugin script for you. The script has two requirements that you cannot "
"change: it must be a ``tool`` script, or else it will not load properly in "
"the editor, and it must inherit from :ref:`class_EditorPlugin`."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:76
msgid ""
"In addition to the EditorPlugin script, any other GDScript that your plugin "
"uses must *also* be a tool.  Any GDScript without ``tool`` imported into the "
"editor will act like an empty file!"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:80
msgid ""
"It's important to deal with initialization and clean-up of resources. A good "
"practice is to use the virtual function :ref:`_enter_tree() "
"<class_Node_method__enter_tree>` to initialize your plugin and :ref:"
"`_exit_tree() <class_Node_method__exit_tree>` to clean it up. Thankfully, "
"the dialog generates these callbacks for you. Your script should look "
"something like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:125
msgid "This is a good template to use when creating new plugins."
msgstr "Dies ist eine gute Vorlage um neue Plugins zu erstellen."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:128
msgid "A custom node"
msgstr "Ein benutzerdefinierter Node"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:130
msgid ""
"Sometimes you want a certain behavior in many nodes, such as a custom scene "
"or control that can be reused. Instancing is helpful in a lot of cases, but "
"sometimes it can be cumbersome, especially if you're using it in many "
"projects. A good solution to this is to make a plugin that adds a node with "
"a custom behavior."
msgstr ""
"Manchmal möchten Sie ein bestimmtes Verhalten in vielen Nodes, z.B. in einer "
"benutzerdefinierten Szene oder einem Steuerelement, das wiederverwendet "
"werden kann. Die Instanzierung ist in vielen Fällen hilfreich, kann jedoch "
"manchmal umständlich sein, insbesondere wenn Sie sie in vielen Projekten "
"verwenden. Eine gute Lösung hierfür besteht darin, ein Plugin zu erstellen, "
"das einen Node mit einem benutzerdefinierten Verhalten hinzufügt."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:138
msgid ""
"Nodes added via an EditorPlugin are \"CustomType\" nodes. While they work "
"with any scripting language, they have fewer features than :ref:`the Script "
"Class system <doc_scripting_continued_class_name>`. If you are writing "
"GDScript or NativeScript, we recommend using Script Classes instead."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:143
msgid ""
"To create a new node type, you can use the function :ref:`add_custom_type() "
"<class_EditorPlugin_method_add_custom_type>` from the :ref:"
"`class_EditorPlugin` class. This function can add new types to the editor "
"(nodes or resources). However, before you can create the type, you need a "
"script that will act as the logic for the type. While that script doesn't "
"have to use the ``tool`` keyword, it can be added so the script runs in the "
"editor."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:150
msgid ""
"For this tutorial, we'll create a simple button that prints a message when "
"clicked. For that, we'll need a simple script that extends from :ref:"
"`class_Button`. It could also extend :ref:`class_BaseButton` if you prefer:"
msgstr ""
"In dieser Anleitung erstellen wir eine einfache Schaltfläche, die beim "
"Klicken eine Nachricht ausgibt. Dafür benötigen wir ein einfaches Skript, "
"das :ref:`class_Button` oder :ref:`class_BaseButton` erweitert, je nachdem "
"was Sie bevorzugen:"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:188
msgid ""
"That's it for our basic button. You can save this as ``my_button.gd`` inside "
"the plugin folder. You'll also need a 16×16 icon to show in the scene tree. "
"If you don't have one, you can grab the default one from the engine and save "
"it in your `addons/my_custom_node` folder as `icon.png`, or use the default "
"Godot logo (`preload(\"res://icon.png\")`). You can also use SVG icons if "
"desired."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:196
msgid ""
"Now, we need to add it as a custom type so it shows on the **Create New "
"Node** dialog. For that, change the ``custom_node.gd`` script to the "
"following:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:244
msgid ""
"With that done, the plugin should already be available in the plugin list in "
"the **Project Settings**, so activate it as explained in `Checking the "
"results`_."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:247
msgid "Then try it out by adding your new node:"
msgstr "Probieren Sie es dann aus, indem Sie Ihren neuen Node hinzufügen:"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:251
msgid ""
"When you add the node, you can see that it already has the script you "
"created attached to it. Set a text to the button, save and run the scene. "
"When you click the button, you can see some text in the console:"
msgstr ""
"Wenn Sie den Node hinzufügen, können Sie sehen, dass ihm bereits das von "
"Ihnen erstellte Skript angehängt ist. Setzen Sie einen Text auf die "
"Schaltfläche, speichern Sie die Szene und führen Sie sie aus. Wenn Sie auf "
"die Schaltfläche klicken, wird in der Konsole ein Text angezeigt:"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:258
msgid "A custom dock"
msgstr "Ein benutzerdefiniertes Dock"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:260
msgid ""
"Sometimes, you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks "
"are just scenes based on Control, so they are created in a way similar to "
"usual GUI scenes."
msgstr ""
"Manchmal müssen Sie den Editor erweitern und Tools hinzufügen, die immer "
"verfügbar sind. Eine einfache Möglichkeit besteht darin, ein neues Dock mit "
"einem Plugin hinzuzufügen. Docks sind nur Szenen, die auf Control basieren. "
"Sie werden also ähnlich wie normale GUI-Szenen erstellt."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:264
msgid ""
"Creating a custom dock is done just like a custom node. Create a new "
"``plugin.cfg`` file in the ``addons/my_custom_dock`` folder, then add the "
"following content to it:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:289
msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill it with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` to "
"get a good start."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:293
msgid ""
"Since we're trying to add a new custom dock, we need to create the contents "
"of the dock. This is nothing more than a standard Godot scene: just create a "
"new scene in the editor then edit it."
msgstr ""
"Da wir versuchen ein neues benutzerdefiniertes Dock hinzuzufügen, müssen wir "
"den Inhalt des Docks erstellen. Dies ist nichts weiter als eine Standard-"
"Godot-Szene: Erstellen Sie einfach eine neue Szene im Editor und bearbeiten "
"diese."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:297
msgid ""
"For an editor dock, the root node **must** be a :ref:`Control "
"<class_Control>` or one of its child classes. For this tutorial, you can "
"create a single button. The name of the root node will also be the name that "
"appears on the dock tab, so be sure to give it a short and descriptive name. "
"Also, don't forget to add some text to your button."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:305
msgid ""
"Save this scene as ``my_dock.tscn``. Now, we need to grab the scene we "
"created then add it as a dock in the editor. For this, you can rely on the "
"function :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` from the :ref:`EditorPlugin "
"<class_EditorPlugin>` class."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:310
msgid ""
"You need to select a dock position and define the control to add (which is "
"the scene you just created). Don't forget to **remove the dock** when the "
"plugin is deactivated. The script could look like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:371
msgid ""
"Note that, while the dock will initially appear at its specified position, "
"the user can freely change its position and save the resulting layout."
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:375
msgid "Checking the results"
msgstr "Ergebnisse überprüfen"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:377
msgid ""
"It's now time to check the results of your work. Open the **Project "
"Settings** and click on the **Plugins** tab. Your plugin should be the only "
"one on the list. If it is not showing, click on the **Update** button in the "
"top-right corner."
msgstr ""
"Nun können wir das Resultat unserer Arbeit prüfen. Öffnen Sie die "
"**Projekteinstellungen** und klicken auf den **Plugins** tab. Das Plugin "
"sollte nun das einzige in der Liste sein. Falls es nicht angezeigt wird, "
"klicken Sie auf den **Update** Button in der oberen rechten Ecke."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:384
msgid ""
"You can see the plugin is inactive on the **Status** column; click on the "
"status to select **Active**. The dock should become visible before you even "
"close the settings window. You should now have a custom dock:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:391
msgid "Going beyond"
msgstr "Darüber hinausgehen"

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:393
msgid ""
"Now that you've learned how to make basic plugins, you can extend the editor "
"in several ways. Lots of functionality can be added to the editor with "
"GDScript; it is a powerful way to create specialized editors without having "
"to delve into C++ modules."
msgstr ""
"Nachdem Sie nun gelernt haben, wie Sie grundlegende Plugins erstellen, "
"können Sie den Editor auf verschiedene Arten erweitern. Mit GDScript können "
"dem Editor viele Funktionen hinzugefügt werden. Es ist eine leistungsstarke "
"Möglichkeit, spezialisierte Editoren zu erstellen, ohne sich mit C++ Modulen "
"befassen zu müssen."

#: ../../docs/tutorials/plugins/editor/making_plugins.rst:398
msgid ""
"You can make your own plugins to help yourself and share them in the `Asset "
"Library <https://godotengine.org/asset-library/>`_ so that people can "
"benefit from your work."
msgstr ""
"Sie können Ihre eigenen Plugins erstellen, um sich selbst zu helfen, und "
"diese in der Bestandsbibliothek <https://godotengine.org/asset-library/> "
"freigeben, damit die Benutzer von Ihrer Arbeit profitieren können."
