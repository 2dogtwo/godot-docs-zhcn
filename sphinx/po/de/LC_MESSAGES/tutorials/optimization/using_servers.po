# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-07 14:35+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/optimization/using_servers.rst:4
msgid "Optimization using Servers"
msgstr "Optimierung mit Servern"

#: ../../docs/tutorials/optimization/using_servers.rst:6
msgid ""
"Engines like Godot provide increased ease of use thanks to their high level "
"constructs and features. Most of them are accessed and used via the :ref:"
"`Scene System<doc_scene_tree>`. Using nodes and resources simplifies project "
"organization and asset management in complex games."
msgstr ""
"Engines wie Godot bieten dank ihrer hochwertigen Konstruktionen und "
"Funktionen eine höhere Benutzerfreundlichkeit. Auf die meisten von ihnen "
"wird über das :ref:`Szenensystem <doc_scene_tree>` zugegriffen, bzw. "
"verwendet . Die Verwendung von Nodes und Ressourcen vereinfacht die "
"Projektorganisation und das Asset Management in komplexen Spielen."

#: ../../docs/tutorials/optimization/using_servers.rst:10
msgid "There are, of course, always drawbacks:"
msgstr "Es gibt natürlich immer Nachteile:"

#: ../../docs/tutorials/optimization/using_servers.rst:12
msgid "There is an extra layer of complexity"
msgstr "Es gibt eine zusätzliche Komplexitätsebene"

#: ../../docs/tutorials/optimization/using_servers.rst:13
msgid "Performance is lower than using simple APIs directly"
msgstr ""
"Die Leistung ist geringer als bei der direkten Verwendung einfacher APIs"

#: ../../docs/tutorials/optimization/using_servers.rst:14
msgid "It is not possible to use multiple threads to control them"
msgstr "Es ist nicht möglich, mehrere Threads zu verwenden, um sie zu steuern"

#: ../../docs/tutorials/optimization/using_servers.rst:15
msgid "More memory is needed."
msgstr "Mehr Speicher wird benötigt."

#: ../../docs/tutorials/optimization/using_servers.rst:17
msgid ""
"In many cases, this is not really a problem (Godot is very optimized, and "
"most operations are handled with signals, so no polling is required). Still, "
"sometimes it can be. For example, dealing with tens of thousands of "
"instances for something that needs to be processed every frame can be a "
"bottleneck."
msgstr ""
"In vielen Fällen ist dies kein wirkliches Problem (Godot ist sehr optimiert "
"und die meisten Vorgänge werden mit Signalen behandelt, sodass keine Abfrage "
"erforderlich ist). Trotzdem kann es manchmal dazu kommen: Der Umgang mit "
"Zehntausenden von Instanzen für etwas, das in jedem Frame verarbeitet werden "
"muss, kann beispielsweise einen Engpass darstellen."

#: ../../docs/tutorials/optimization/using_servers.rst:21
msgid ""
"This type of situation makes programmers regret they are using a game engine "
"and wish they could go back to a more handcrafted, low level implementation "
"of game code."
msgstr ""
"In solche Situationen bereuen Programmierer, dass sie eine Spiel-Engine "
"verwenden und wünschten sich, sie könnten zu einer handwerklicheren "
"Implementierung von Spielcode auf niedriger Ebene zurückkehren."

#: ../../docs/tutorials/optimization/using_servers.rst:24
msgid "Still, Godot is designed to work around this problem."
msgstr "Dennoch ist Godot darauf ausgelegt, dieses Problem zu umgehen."

#: ../../docs/tutorials/optimization/using_servers.rst:27
msgid "Servers"
msgstr "Server"

#: ../../docs/tutorials/optimization/using_servers.rst:29
msgid ""
"One of the most interesting design decisions for Godot, is the fact that the "
"whole scene system is *optional*. While it is not currently possible to "
"compile it out, it can be completely bypassed."
msgstr ""
"Eine der interessantesten Designentscheidungen für Godot ist die Tatsache, "
"dass das gesamte Szenensystem *optional* ist. Während es derzeit nicht "
"möglich ist es heraus zu kompilieren, kann es vollständig umgangen werden."

#: ../../docs/tutorials/optimization/using_servers.rst:32
msgid ""
"At the core, Godot uses the concept of Servers. They are very low level APIs "
"to control rendering, physics, sound, etc. The scene system is built on top "
"of them and uses them directly. The most common servers are:"
msgstr ""
"Im Kern verwendet Godot das Konzept der Server. Es handelt sich um APIs auf "
"sehr niedriger Ebene zur Steuerung von Rendering, Physik, Sound usw. Das "
"Szenensystem ist darauf aufgebaut und verwendet sie direkt. Die häufigsten "
"Server sind:"

#: ../../docs/tutorials/optimization/using_servers.rst:36
msgid ""
":ref:`VisualServer <class_VisualServer>`: handles everything related to "
"graphics."
msgstr ""
":ref:`VisualServer <class_VisualServer>`: kümmert sich um alles, was mit "
"Grafiken zu tun hat."

#: ../../docs/tutorials/optimization/using_servers.rst:37
msgid ""
":ref:`PhysicsServer <class_PhysicsServer>`: handles everything related to 3D "
"physics."
msgstr ""
":ref:`PhysicsServer <class_PhysicsServer>`: kümmert sich um alles rund um "
"die 3D-Physik."

#: ../../docs/tutorials/optimization/using_servers.rst:38
msgid ""
":ref:`Physics2DServer <class_Physics2DServer>`: handles everything related "
"to 2D physics."
msgstr ""
":ref:`Physics2DServer <class_Physics2DServer>`: kümmert sich um alles, was "
"mit 2D-Physik zu tun hat."

#: ../../docs/tutorials/optimization/using_servers.rst:39
msgid ""
":ref:`AudioServer <class_AudioServer>`: handles everything related to audio."
msgstr ""
":ref:`AudioServer <class_AudioServer>`: kümmert sich um alles, was mit Audio "
"zu tun hat."

#: ../../docs/tutorials/optimization/using_servers.rst:41
msgid ""
"Just explore their APIs and you will realize that the all functions provided "
"are low-level implementations of everything Godot allows you to do."
msgstr ""
"Wenn Sie nur die APIs untersuchen werden Sie feststellen, dass alle "
"bereitgestellten Funktionen einfache Implementierungen von allem sind, was "
"Godot Ihnen ermöglicht."

#: ../../docs/tutorials/optimization/using_servers.rst:45
msgid "RIDs"
msgstr "RIDs"

#: ../../docs/tutorials/optimization/using_servers.rst:47
msgid ""
"The key to using servers is understanding Resource ID (:ref:`RID "
"<class_RID>`) objects. These are opaque handles to the server "
"implementation. They are allocated and freed manually. Almost every function "
"in the servers requires RIDs to access the actual resource."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:51
msgid ""
"Most Godot nodes and resources contain these RIDs from the servers "
"internally, and they can be obtained with different functions. In fact, "
"anything that inherits :ref:`Resource <class_Resource>` can be directly "
"casted to an RID (not all resources contain an RID, though, in such cases "
"the RID will be empty). In fact, resources can be passed to server APIs as "
"RIDs. Just make sure to keep references to the resources outside the server, "
"because if the resource is erased, the internal RID is erased too."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:58
msgid "For nodes, there are many functions available:"
msgstr "Für Nodes stehen viele Funktionen zur Verfügung:"

#: ../../docs/tutorials/optimization/using_servers.rst:60
msgid ""
"For CanvasItem, the :ref:`CanvasItem.get_canvas_item() "
"<class_CanvasItem_method_get_canvas_item>` method will return the canvas "
"item RID in the server."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:62
msgid ""
"For CanvasLayer, the :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` method will return the canvas RID in "
"the server."
msgstr ""
"Für CanvasLayer gibt die Methode :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` die Canvas-RID auf dem Server zurück."

#: ../../docs/tutorials/optimization/using_servers.rst:64
msgid ""
"For Viewport, the :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` method will return the viewport "
"RID in the server."
msgstr ""
"Bei Ansichtsfenstern gibt die Methode :ref:'Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>' die RID des Ansichtsfensters auf "
"dem Server zurück."

#: ../../docs/tutorials/optimization/using_servers.rst:66
msgid ""
"For 3D, the :ref:`World <class_World>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`Spatial <class_Spatial>` nodes) "
"contains functions to get the *VisualServer Scenario*, and the "
"*PhysicsServer Space*. This allows creating 3D objects directly with the "
"server API and using them."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:70
msgid ""
"For 2D, the :ref:`World2D <class_World2D>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`CanvasItem <class_CanvasItem>` nodes) "
"contains functions to get the *VisualServer Canvas*, and the "
"*Physics2DServer Space*. This allows creating 2D objects directly with the "
"server API and using them."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:74
msgid ""
"The :ref:`VisualInstance<class_VisualInstance>` class, allows getting the "
"scenario *instance* and *instance base* via the :ref:`VisualInstance."
"get_instance() <class_VisualInstance_method_get_instance>` and :ref:"
"`VisualInstance.get_base() <class_VisualInstance_method_get_base>` "
"respectively."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:78
msgid ""
"Just explore the nodes and resources you are familiar with and find the "
"functions to obtain the server *RIDs*."
msgstr ""
"Erkunden Sie einfach die Nodes und Ressourcen mit denen Sie vertraut sind "
"und finden Sie die Funktionen zum Abrufen der Server *RIDs*."

#: ../../docs/tutorials/optimization/using_servers.rst:80
msgid ""
"It is not advised to control RIDs from objects that already have a node "
"associated. Instead, server functions should always be used for creating and "
"controlling new ones and interacting with the existing ones."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:84
msgid "Creating a sprite"
msgstr "Ein Sprite erstellen"

#: ../../docs/tutorials/optimization/using_servers.rst:86
msgid ""
"This is a simple example of how to create a sprite from code and move it "
"using the low-level :ref:`CanvasItem <class_CanvasItem>` API."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:113
msgid ""
"The Canvas Item API in the server allows you to add draw primitives to it. "
"Once added, they can't be modified. The Item needs to be cleared and the "
"primitives re-added (this is not the case for setting the transform, which "
"can be done as many times as desired)."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:117
msgid "Primitives are cleared this way:"
msgstr "Primitive werden folgendermaßen gelöscht:"

#: ../../docs/tutorials/optimization/using_servers.rst:126
msgid "Instantiating a Mesh into 3D space"
msgstr "Instanziieren eines Mesh in den 3D-Raum"

#: ../../docs/tutorials/optimization/using_servers.rst:128
msgid ""
"The 3D APIs are different from the 2D ones, so the instantiation API must be "
"used."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:156
msgid "Creating a 2D RigidBody and moving a sprite with it"
msgstr "Erstellen eines 2D-RigidBody und Verschieben eines Sprites damit"

#: ../../docs/tutorials/optimization/using_servers.rst:158
msgid ""
"This creates a :ref:`RigidBody2D <class_RigidBody2D>` using the :ref:"
"`Physics2DServer <class_Physics2DServer>` API, and moves a :ref:`CanvasItem "
"<class_CanvasItem>` when the body moves."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:192
msgid ""
"The 3D version should be very similar, as 2D and 3D physics servers are "
"identical (using :ref:`RigidBody <class_RigidBody>` and :ref:`PhysicsServer "
"<class_PhysicsServer>` respectively)."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:196
msgid "Getting data from the servers"
msgstr "Daten bekommen von den Servern"

#: ../../docs/tutorials/optimization/using_servers.rst:198
msgid ""
"Try to **never** request any information from ``VisualServer``, "
"``PhysicsServer`` or ``Physics2DServer`` by calling functions unless you "
"know what you are doing. These servers will often run asynchronously for "
"performance and calling any function that returns a value will stall them "
"and force them to process anything pending until the function is actually "
"called. This will severely decrease performance if you call them every frame "
"(and it won't be obvious why)."
msgstr ""

#: ../../docs/tutorials/optimization/using_servers.rst:204
msgid ""
"Because of this, most APIs in such servers are designed so it's not even "
"possible to request information back, until it's actual data that can be "
"saved."
msgstr ""
"Aus diesem Grund sind die meisten APIs in solchen Servern so konzipiert, "
"dass es nicht einmal möglich ist, Informationen zurückzufordern, bis die "
"tatsächlichen Daten gespeichert werden können."
