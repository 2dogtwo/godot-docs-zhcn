# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 14:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/misc/state_design_pattern.rst:4
#, fuzzy
msgid "State design pattern"
msgstr "Sidontakuvio"

#: ../../docs/tutorials/misc/state_design_pattern.rst:7
msgid "Introduction"
msgstr "Johdanto"

#: ../../docs/tutorials/misc/state_design_pattern.rst:9
msgid ""
"Scripting a game can be difficult when there are many states that need to "
"handled, but only one script can be attached to a node at a time. Instead of "
"creating a state machine within the player's control script, it would make "
"development simpler if the states were separated out into different classes."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:14
msgid ""
"There are many ways to implement a state machine with Godot, and some other "
"methods are below:"
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:16
msgid ""
"The player can have a child node for each state, which are called when "
"utilized."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:17
msgid "Enums can be used in conjunction with a match statement."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:18
msgid ""
"The state scripts themselves could be swapped out from a node dynamically at "
"run-time."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:20
msgid ""
"This tutorial will focus only on adding and removing nodes which have a "
"state script attached. Each state script will be an implementation of a "
"different state."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:24
#, fuzzy
msgid ""
"There is a great resource explaining the concept of the state design pattern "
"here: https://gameprogrammingpatterns.com/state.html"
msgstr ""
"Voit lukea lisää tarkkailijamallista täällä: http://gameprogrammingpatterns."
"com/observer.html"

#: ../../docs/tutorials/misc/state_design_pattern.rst:28
#, fuzzy
msgid "Script setup"
msgstr "GDScript tyyppi"

#: ../../docs/tutorials/misc/state_design_pattern.rst:30
msgid ""
"The feature of inheritance is useful for getting started with this design "
"principle. A class should be created that describes the base features of the "
"player. For now, a player will be limited to two actions: **move left**, "
"**move right**. This means there will be two states: **idle** and **run**."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:35
msgid "Below is the generic state, from which all other states will inherit."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:66
msgid ""
"A few notes on the above script. First, this implementation uses a "
"``setup(change_state, animated_sprite, persistent_state)`` method to assign "
"references. These references will be instantiated in the parent of this "
"state. This helps with something in programming known as *cohesion*. The "
"state of the player does not want the responsibility of creating these "
"variables, but does want to be able to use them. However, this does make the "
"state *coupled* to the state's parent. This means that the state is highly "
"reliant on whether it has a parent which contains these variables. So, "
"remember that *coupling* and *cohesion* are important concepts when it comes "
"to code management."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:75
msgid ""
"See the following page for more details on cohesion and coupling: https://"
"courses.cs.washington.edu/courses/cse403/96sp/coupling-cohesion.html"
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:78
msgid ""
"Second, there are some methods in the script for moving, but no "
"implementation. The state script just uses ``pass`` to show that it will not "
"execute any instructions when the methods are called. This is important."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:81
msgid ""
"Third, the ``_physics_process(delta)`` method is actually implemented here. "
"This allows the states to have a default ``_physics_process(delta)`` "
"implementation where ``velocity`` is used to move the player. The way that "
"the states can modify the movement of the player is to use the ``velocity`` "
"variable defined in their base class."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:85
msgid ""
"Finally, this script is actually being designated as a class named "
"``State``. This makes refactoring the code easier, since the file path from "
"using the ``load()`` and ``preload()`` functions in Godot will not be needed."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:88
msgid ""
"So, now that there is a base state, the two states discussed earlier can be "
"implemented."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:154
msgid ""
"Since the ``Run`` and ``Idle`` states extend from ``State`` which extends "
"``Node2D``, the function ``_physics_process(delta)`` is called from the "
"**bottom-up** meaning ``Run`` and ``Idle`` will call their implementation of "
"``_physics_process(delta)``, then ``State`` will call its implementation, "
"then ``Node2D`` will call its own implementation and so on. This may seem "
"strange, but it is only relevant for predefined functions such as "
"``_ready()``, ``_process(delta)``, etc. Custom functions use the normal "
"inheritance rules of overriding the base implementation."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:161
msgid ""
"There is a roundabout method for obtaining a state instance. A state factory "
"can be used."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:184
msgid ""
"This will look for states in a dictionary and return the state if found."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:186
msgid ""
"Now that all the states are defined with their own scripts, it is time to "
"figure out how those references that passed to them will be instantiated. "
"Since these references will not change it makes sense to call this new "
"script ``persistent_state.gd``."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:230
msgid ""
"The ``persistent_state.gd`` script contains code for detecting input. This "
"was to make the tutorial simple, but it is not usually best practice to do "
"this."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:234
msgid "Project setup"
msgstr "Projektin järjestely"

#: ../../docs/tutorials/misc/state_design_pattern.rst:236
msgid ""
"This tutorial made an assumption that the node it would be attached to "
"contained a child node which is an :ref:`AnimatedSprite "
"<class_AnimatedSprite>`. There is also the assumption that this :ref:"
"`AnimatedSprite <class_AnimatedSprite>` has at least two animations, the "
"idle and run animations. Also, the top-level node is assumed to be a :ref:"
"`KinematicBody2D <class_KinematicBody2D>`."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:243
msgid ""
"The zip file of the llama used in this tutorial is :download:`here <files/"
"llama.zip>`. The source was from `piskel_llama <https://www.piskelapp.com/p/"
"agxzfnBpc2tlbC1hcHByEwsSBlBpc2tlbBiAgICfx5ygCQw/edit>`_, but I couldn't find "
"the original creator information on that page... There is also a good "
"tutorial for sprite animation already. See :ref:`2D Sprite Animation "
"<doc_2d_sprite_animation>`."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:248
msgid ""
"So, the only script that must be attached is ``persistent_state.gd``, which  "
"should be attached to the top node of the player, which is a :ref:"
"`KinematicBody2D <class_KinematicBody2D>`."
msgstr ""

#: ../../docs/tutorials/misc/state_design_pattern.rst:255
msgid ""
"Now the player has utilized the state design pattern to implement its two "
"different states. The nice part of this pattern is that if one wanted to add "
"another state, then it would involve creating another class that need only "
"focus on itself and how it changes to another state. Each state is "
"functionally separated and instantiated dynamically."
msgstr ""
