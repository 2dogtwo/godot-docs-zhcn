# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-22 14:46+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/signals.rst:1
msgid "Signal"
msgstr "Signaali"

#: ../../docs/getting_started/step_by_step/signals.rst:7
msgid "Signals"
msgstr "Signaalit"

#: ../../docs/getting_started/step_by_step/signals.rst:10
msgid "Introduction"
msgstr "Johdanto"

#: ../../docs/getting_started/step_by_step/signals.rst:12
msgid ""
"Signals are Godot's version of the *observer* pattern. They allow a node to "
"send out a message that other nodes can listen for and respond to. For "
"example, rather than continuously checking a button to see if it's being "
"pressed, the button can emit a signal when it's pressed."
msgstr ""
"Signaalit ovat Godotin versio *tarkkailija*-mallista. Ne antavat solmun "
"lähettää viestejä, joita muut solmut voivat kuunnella ja joihin ne voivat "
"vastata. Esimerkiksi sen sijaan, että tarkistaisi jatkuvasti onko painiketta "
"painettu, painike voi lähettää signaalin kun sitä on painettu."

#: ../../docs/getting_started/step_by_step/signals.rst:17
#, fuzzy
msgid ""
"You can read more about the observer pattern here: https://"
"gameprogrammingpatterns.com/observer.html"
msgstr ""
"Voit lukea lisää tarkkailijamallista täällä: http://gameprogrammingpatterns."
"com/observer.html"

#: ../../docs/getting_started/step_by_step/signals.rst:19
msgid ""
"Signals are a way to *decouple* your game objects, which leads to better "
"organized and more manageable code. Instead of forcing game objects to "
"expect other objects to always be present, they can instead emit signals "
"that all interested objects can subscribe to and respond to."
msgstr ""
"Signaalien avulla pelin objektit voidaan *erottaa* toisistaan, mikä johtaa "
"paremmin järjestettyyn ja hallittavampaan koodiin. Sen sijaan, että "
"objektien on pakko olettaa, että muut objektit ovat aina läsnä, ne voivat "
"lähettää signaaleja, joita kaikki kiinnostuneet objektit voivat kirjautua "
"kuuntelemaan ja vastaamaan."

#: ../../docs/getting_started/step_by_step/signals.rst:24
msgid ""
"Below you can see some examples of how you can use signals in your own "
"projects."
msgstr ""
"Alla muutamia esimerkkejä siitä, miten voit käyttää signaaleja omissa "
"projekteissasi."

#: ../../docs/getting_started/step_by_step/signals.rst:27
msgid "Timer example"
msgstr "Ajastin-esimerkki"

#: ../../docs/getting_started/step_by_step/signals.rst:29
#, fuzzy
msgid ""
"To see how signals work, let's try using a :ref:`Timer <class_Timer>` node. "
"Create a new scene with a Node2D and two children: a Timer and a :ref:"
"`Sprite <class_Sprite>`. In the Scene dock, rename Node2D to TimerExample."
msgstr ""
"Nähdäksemme kuinka signaalit toimivat, kokeilkaamme :ref:`Timer "
"<class_Timer>` solmua. Luo uusi skene Node solmulla ja lisää sille kaksi "
"alisolmua: Timer ja :ref:`Sprite <class_Sprite>`. Nimeä solmu Skene-"
"telakalla TimerExample-nimiseksi."

#: ../../docs/getting_started/step_by_step/signals.rst:33
msgid ""
"For the Sprite's texture, you can use the Godot icon, or any other image you "
"like. Do so by selecting ``Load`` in the Sprite's Texture attribute drop-"
"down menu. Attach a script to the root node, but don't add any code to it "
"yet."
msgstr ""
"Spriten tekstuurille voit käyttää Godotin ikonia, tai mitä tahansa muuta "
"kuvatiedostoa. Tee niin valitsemalla ``Load`` spriten tekstuuri attribuutin "
"pudotusvalikosta. Lisää skripti root solmuun, mutta älä lisää siihen vielä "
"mitään koodia."

#: ../../docs/getting_started/step_by_step/signals.rst:37
msgid "Your scene tree should look like this:"
msgstr "Skenepuusi pitäisi näyttää tältä:"

#: ../../docs/getting_started/step_by_step/signals.rst:41
msgid ""
"In the Timer node's properties, check the \"On\" box next to *Autostart*. "
"This will cause the timer to start automatically when you run the scene. You "
"can leave the *Wait Time* at 1 second."
msgstr ""
"Avaa Timer-solmun ominaisuudet ja napsauta *Autostart*-tekstin viereistä "
"valintaruutua. Tämä käynnistää ajastimen automaattisesti, kun skene ajetaan. "
"*Wait Time*-ominaisuus voi pysyä 1 sekunnissa."

#: ../../docs/getting_started/step_by_step/signals.rst:45
msgid ""
"Next to the \"Inspector\" tab is a tab labeled \"Node\". Click on this tab "
"and you'll see all of the signals that the selected node can emit. In the "
"case of the Timer node, the one we're concerned with is \"timeout\". This "
"signal is emitted whenever the Timer reaches ``0``."
msgstr ""
"Napsauta ”Inspector”-välilehden vieressä olevaa välilehteä ”Node”. Tältä "
"välilehdeltä löytyvät kaikki signaalit, joita valittu solmu voi lähettää. "
"Timer-solmun tapauksessa meitä kiinnostaa ”timeout”. Tämä signaali "
"lähetetään, kun ajastin osoittaa ``0``."

#: ../../docs/getting_started/step_by_step/signals.rst:52
#, fuzzy
msgid ""
"Click on the \"timeout()\" signal and click \"Connect...\" at the bottom of "
"the signals panel. You'll see the following window, where you can define how "
"you want to connect the signal:"
msgstr ""
"Napsauta ”timeout()”-signaalia ja paina ”Connect...”-painiketta. Tämä avaa "
"alla olevan ikkunan, jossa voit määritellä, miten haluat yhdistää signaalin:"

#: ../../docs/getting_started/step_by_step/signals.rst:58
#, fuzzy
msgid ""
"On the left side, you'll see the nodes in your scene and can select the node "
"that you want to \"listen\" for the signal. Note that the Timer node is "
"blue, this is a visual indication that it's the node that is emitting the "
"signal. Select the root node."
msgstr ""
"Vasemmalla puolella näet skenesi solmut ja voit valita ne solmut, joiden "
"haluat ”kuuntelevan” signaalia. Huomaa että Timer-solmu on punainen - tämä "
"*ei* ole virhe, vaan visuaalinen osoitin siitä, että signaalin lähettää "
"kyseinen solmu. Valitse juurisolmu."

#: ../../docs/getting_started/step_by_step/signals.rst:63
msgid ""
"The target node *must* have a script attached or you'll receive an error "
"message."
msgstr ""
"Kohdesolmuun *täytyy* olla liitettynä skripti, muutoin saat virheilmoituksen."

#: ../../docs/getting_started/step_by_step/signals.rst:66
msgid ""
"If you toggle the Advanced menu, you'll see on the right side that you can "
"bind an arbitrary number of arguments of (possibly) different types. This "
"can be useful when you have more than one signal connected to the same "
"method, as each signal propagation will result in different values for those "
"extra call arguments."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:70
#, fuzzy
msgid ""
"On the bottom of the window is a field labeled \"Receiver Method\". This is "
"the name of the function in the target node's script that you want to use. "
"By default, Godot will create this function using the naming convention "
"``_on_<node_name>_<signal_name>`` but you can change it if you wish."
msgstr ""
"Ikkunan alalaidassa on kenttä nimeltä \"Method In Node\".  Tämä on "
"kohdesolmun skriptissä sen funktion nimi, jota haluat käyttää. Godot'n "
"oletusarvoinen nimeämiskäytäntö tätä funktiota luodessa on "
"``_on_<solmun_nimi>_<signaalin_nimi>``, mutta voit halutessasi muuttaa nimen."

#: ../../docs/getting_started/step_by_step/signals.rst:75
msgid ""
"Click \"Connect\" and you'll see that the function has been created in the "
"script:"
msgstr ""
"Napsauta \"Connect\"-painiketta ja voit nähdä, että skriptiin on luotu "
"funktio:"

#: ../../docs/getting_started/step_by_step/signals.rst:96
msgid ""
"Now we can replace the placeholder code with whatever code we want to run "
"when the signal is received. Let's make the Sprite blink:"
msgstr ""
"Nyt oletuskoodi voidaan korvata millä tahansa koodilla, jonka haluamme "
"signaalia vastaanottaessa suorittaa. Laitetaan kuvake välkkymään:"

#: ../../docs/getting_started/step_by_step/signals.rst:121
msgid ""
"Run the scene and you'll see the Sprite blinking on and off every second. "
"You can change the Timer's *Wait Time* property to alter this."
msgstr ""
"Aja skene ja näet, että kuvake välkkyy sekunnin välein. Ajoitusta voi "
"muuttaa Timer-solmun *Wait Time*-ominaisuudella."

#: ../../docs/getting_started/step_by_step/signals.rst:125
msgid "Connecting signals in code"
msgstr "Signaalien yhdistäminen koodin kautta"

#: ../../docs/getting_started/step_by_step/signals.rst:127
msgid ""
"You can also make the signal connection in code rather than with the editor. "
"This is usually necessary when you're instancing nodes via code and so you "
"can't use the editor to make the connection."
msgstr ""
"Signaaleja voi yhdistää koodilla editorin sijaan. Tämä on usein tarpeen, kun "
"solmuille luodaan ilmentymiä koodin kautta, eikä yhteyksiä voida luoda "
"editorin avulla."

#: ../../docs/getting_started/step_by_step/signals.rst:131
msgid ""
"First, disconnect the signal by selecting the connection in the Timer's "
"\"Node\" tab and clicking disconnect."
msgstr ""
"Irrota ensin signaali valitsemalla yhteys Timer-solmun \"Node\"-välilehdessä "
"ja napsauttamalla \"Disconnect\"-painiketta."

#: ../../docs/getting_started/step_by_step/signals.rst:136
msgid ""
"To make the connection in code, we can use the ``connect`` function. We'll "
"put it in ``_ready()`` so that the connection will be made on run. The "
"syntax of the function is ``<source_node>.connect(<signal_name>, "
"<target_node>, <target_function_name>)``. Here is the code for our Timer "
"connection:"
msgstr ""
"Yhteyden muodostaminen koodilla onnistuu ``connect``-funktion avulla. "
"Laitetaan se ``_ready()``-funktioon, jotta yhteys muodostetaan ajon aikana. "
"Funktion syntaksi on muodossa ``<lähdesolmu>.connect(<signaalin_nimi>, "
"<kohdesolmu>, <kohdefunktion_nimi>)``. Timer-solmun yhteyden koodi näyttää "
"tältä:"

#: ../../docs/getting_started/step_by_step/signals.rst:171
msgid "Custom signals"
msgstr "Mukautetut signaalit"

#: ../../docs/getting_started/step_by_step/signals.rst:173
msgid "You can also declare your own custom signals in Godot:"
msgstr "Voit määritellä myös omia mukautettuja signaaleja Godotissa:"

#: ../../docs/getting_started/step_by_step/signals.rst:192
msgid ""
"Once declared, your custom signals will appear in the Inspector and can be "
"connected in the same way as a node's built-in signals."
msgstr ""
"Kun mukautetut signaalit on määritelty, ilmestyvät ne myös Inspector-"
"välilehteen ja niitä voidaan yhdistää solmun sisäänrakennettujen signaalien "
"tavoin."

#: ../../docs/getting_started/step_by_step/signals.rst:195
msgid "To emit a signal via code, use the ``emit_signal`` function:"
msgstr "Signaalin lähettämiseksi koodin kautta, käytä ``emit``-funktiota:"

#: ../../docs/getting_started/step_by_step/signals.rst:222
msgid ""
"A signal can also optionally declare one or more arguments. Specify the "
"argument names between parentheses:"
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:243
msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""

#: ../../docs/getting_started/step_by_step/signals.rst:248
#, fuzzy
msgid ""
"To pass values, add them as the second argument to the ``emit_signal`` "
"function:"
msgstr "Signaalin lähettämiseksi koodin kautta, käytä ``emit``-funktiota:"

#: ../../docs/getting_started/step_by_step/signals.rst:276
msgid "Conclusion"
msgstr "Lopputulos"

#: ../../docs/getting_started/step_by_step/signals.rst:278
msgid ""
"Many of Godot's built-in node types provide signals you can use to detect "
"events. For example, an :ref:`Area2D <class_Area2D>` representing a coin "
"emits a ``body_entered`` signal whenever the player's physics body enters "
"its collision shape, allowing you to know when the player collected it."
msgstr ""
"Monista Godotin valmiista solmutyypeistä löytyy signaaleja tapahtumien "
"havaitsemiseen. Esimerkiksi kolikkoa ilmentävä :ref:`Area2D <class_Area2D>`-"
"solmu lähettää ``body_entered`-signaalin kun pelihahmon fysiikkakappale "
"siirtyy sen törmäysmuodon sisään. Tämän avulla saadaan selville milloin "
"pelaaja on kerännyt kolikon."

#: ../../docs/getting_started/step_by_step/signals.rst:283
msgid ""
"In the next section, :ref:`doc_your_first_game`, you'll build a complete "
"game including several uses of signals to connect different game components."
msgstr ""
"Seuraavassa osiossa, :ref:`doc_your_first_game`, rakennamme kokonaisen "
"pelin, jossa signaaleja käytetään monin eri tavoin yhdistämään pelin eri "
"komponentteja."
