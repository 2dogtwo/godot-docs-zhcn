# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-04 16:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:4
msgid "Scripting (continued)"
msgstr "Skriptaus (jatkuu)"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:7
msgid "Processing"
msgstr "Prosessointi"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:9
msgid ""
"Several actions in Godot are triggered by callbacks or virtual functions, so "
"there is no need to write code that runs all the time."
msgstr ""
"Useat toiminnot Godotissa suoritetaan takaisinkutsuina (callback) tai "
"virtuaalifunktioina, joten jatkuvasti suoritettavaa koodia ei ole tarvetta "
"kirjoittaa."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:12
msgid ""
"However, it is still common to need a script to be processed on every frame. "
"There are two types of processing: idle processing and physics processing."
msgstr ""
"On silti tavallista, että skripti täytyy prosessoida jokaisella "
"ruudunpäivityksellä. Prosessointia on kahdentyyppistä: joutoprosessointia ja "
"fysiikkaprosessointia."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:16
msgid ""
"Idle processing is activated when the method :ref:`Node._process() "
"<class_Node_method__process>` is found in a script. It can be turned off and "
"on with the :ref:`Node.set_process() <class_Node_method_set_process>` "
"function."
msgstr ""
"Joutoprosessointi aktivoituu, kun skriptistä löytyy :ref:`Node._process() "
"<class_Node_method__process>` metodi. Se voidaan kytkeä päälle ja pois :ref:"
"`Node.set_process() <class_Node_method_set_process>` funktiolla."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:20
msgid "This method will be called every time a frame is drawn:"
msgstr "Tätä metodia kutsutaan jokaisella ruudun piirtokerralla:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:36
msgid ""
"It's important to bear in mind that the frequency with which ``_process()`` "
"will be called depends on how many frames per second (FPS) your application "
"is running at. This rate can vary over time and devices."
msgstr ""
"On hyvä pitää mielessä, että taajuus jolla ``_process()`` metodia kutsutaan "
"riippuu siitä kuinka monta ruutua per sekunti (FPS) sovelluksesi kykenee "
"käsittelemään. Tämä nopeus voi vaihdella eri hetkillä ja laitteilla."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:40
#, fuzzy
msgid ""
"To help manage this variability, the ``delta`` parameter contains the time "
"elapsed in seconds as a floating-point number since the previous call to "
"``_process()``."
msgstr ""
"Tämän vaihtelevuuden hallitsemiseksi ``delta`` parametri sisältää "
"liukulukuna kuluneen ajan sekunneissa siitä, kun ``_process()`` funktiota "
"edellisen kerran kutsuttiin."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:43
msgid ""
"This parameter can be used to make sure things always take the same amount "
"of time, regardless of the game's FPS."
msgstr ""
"Parametria käyttämällä voidaan pitää huoli siitä, että asiat vievät aina "
"saman verran aikaa, riippumatta pelin FPS-nopeudesta."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:46
#, fuzzy
msgid ""
"For example, movement is often multiplied with a time delta to make movement "
"speed both constant and independent of the frame rate."
msgstr ""
"Esimerkiksi liike kerrotaan usein delta-ajalla, jotta liikenopeus pysyy "
"vakiona ja riippumattomana ruudunpäivityksen nopeudesta."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:49
msgid ""
"Physics processing with ``_physics_process()`` is similar, but it should be "
"used for processes that must happen before each physics step, such as "
"controlling a character. It always runs before a physics step and it is "
"called at fixed time intervals: 60 times per second by default. You can "
"change the interval from the Project Settings, under Physics -> Common -> "
"Physics Fps."
msgstr ""
"Fysiikkaprosessointi ``_physics_process()`` funktiolla on samanlaista, mutta "
"sitä tulisi käyttää sellaiseen käsittelyyn, jonka täytyy tapahtua jokaisen "
"fysiikkapäivityksen yhteydessä, kuten hahmon ohjaaminen. Se suoritetaan aina "
"ennen fysiikkavaihetta ja sitä kutsutaan tasaisin väliajoin: "
"oletusarvoisesti 60 kertaa sekunnissa. Voit muuttaa aikaväliä projektin "
"asetuksista, kohdasta Physics -> Common -> Physics Fps."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:55
msgid ""
"The function ``_process()``, however, is not synced with physics. Its frame "
"rate is not constant and is dependent on hardware and game optimization. Its "
"execution is done after the physics step on single-threaded games."
msgstr ""
"``_process()`` funktio ei kuitenkaan ole synkronoitu fysiikan kanssa. Sen "
"päivitysnopeus ei ole vakio ja riippuu laitteistosta ja pelin "
"optimoinneista. Yksisäikeisissä peleissä sen suoritus tehdään "
"fysiikkavaiheen jälkeen."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:58
msgid ""
"A simple way to see the ``_process()`` function at work is to create a scene "
"with a single Label node, with the following script:"
msgstr ""
"Yksinkertainen tapa nähdä ``_process()`` funktio toiminnassa, on luoda "
"skene, jossa on yksittäinen Label solmu seuraavalla skriptillä varustettuna:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:85
msgid "Which will show a counter increasing each frame."
msgstr "Se näyttää kunkin ruudunpäivityksen yhteydessä kasvavan laskurin."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:88
msgid "Groups"
msgstr "Ryhmät"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:90
msgid ""
"Groups in Godot work like tags you might have come across in other software. "
"A node can be added to as many groups as desired. This is a useful feature "
"for organizing large scenes. There are two ways to add nodes to groups. The "
"first is from the UI, using the Groups button under the Node panel:"
msgstr ""
"Ryhmät Godotissa toimivat kuin tägit joihin olet voinut törmätä muissa "
"ohjelmistoissa. Solmu voidaan lisätä niin moneen ryhmään kuin halutaan. Tämä "
"on hyödyllinen ominaisuus laajojen skenejen järjestelemiseksi. On kaksi "
"tapaa lisätä solmu ryhmään. Ensimmäinen on käyttöliittymästä, Ryhmät-"
"painikkeesta Solmu-paneelilla:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:97
msgid ""
"And the second way is from code. The following script would add the current "
"node to the ``enemies`` group as soon as it appeared in the scene tree."
msgstr ""
"Toinen tapa on koodista käsin. Seuraava skripti lisää nykyisen solmun "
"``enemies`` ryhmään heti kun se ilmestyy skenepuuhun."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:115
msgid ""
"This way, if the player is discovered sneaking into a secret base, all "
"enemies can be notified about its alarm sounding by using :ref:`SceneTree."
"call_group() <class_SceneTree_method_call_group>`:"
msgstr ""
"Tällä tapaa, jos pelaaja jää kiinni hiipiessään salaiseen tukikohtaan, "
"kaikille vihollisille voidaan antaa tieto hälytyksen soimisesta käyttämällä :"
"ref:`SceneTree.call_group() <class_SceneTree_method_call_group>` funktiota:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:132
msgid ""
"The above code calls the function ``player_was_discovered`` on every member "
"of the group ``enemies``."
msgstr ""
"Yllä oleva koodi kutsuu ``player_was_discovered`` funktiota ``enemies`` "
"ryhmän jokaiselle jäsenelle."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:135
msgid ""
"It is also possible to get the full list of ``enemies`` nodes by calling :"
"ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_method_get_nodes_in_group>`:"
msgstr ""
"On myös mahdollista saada kokonainen lista ``enemies`` solmuista kutsumalla :"
"ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_method_get_nodes_in_group>` funktiota:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:148
msgid ""
"The :ref:`SceneTree <class_SceneTree>` class provides many useful methods, "
"like interacting with scenes, their node hierarchy and groups of nodes. It "
"allows you to easily switch scenes or reload them, to quit the game or pause "
"and unpause it. It even comes with interesting signals. So check it out if "
"you have some time!"
msgstr ""
":ref:`SceneTree <class_SceneTree>` luokka tarjoaa monia hyödyllisiä "
"metodeja, kuten skenejen, niiden solmuhierarkian ja solmuryhmien käsittelyä. "
"Se sallii sinun vaihtaa tai uudelleenladata skenejä helposti, ja lopettaa, "
"keskeyttää tai palauttaa pelin ajamisen. Sen mukana tulee myös "
"mielenkiintoisia signaaleja. Joten vilkaise sitä, jos sinulla on aikaa!"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:156
msgid "Notifications"
msgstr "Ilmoitukset (notifications)"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:158
msgid ""
"Godot has a system of notifications. These are usually not needed for "
"scripting, as it's too low-level and virtual functions are provided for most "
"of them. It's just good to know they exist. For example, you may add an :ref:"
"`Object._notification() <class_Object_method__notification>` function in "
"your script:"
msgstr ""
"Godotissa on järjestelmä ilmoituksille. Niitä ei yleensä tarvita "
"skriptauksessa, koska ne ovat liian alhaisen tason koodia ja useimmille on "
"tarjolla vastaava virtuaalifunktio. On silti hyvä olla tietoinen niiden "
"olemassaolosta. Voit esimerkiksi lisätä :ref:`Object._notification() "
"<class_Object_method__notification>` funktion skriptiisi:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:193
#, fuzzy
msgid ""
"The documentation of each class in the :ref:`Class Reference <toc-class-"
"ref>` shows the notifications it can receive. However, in most cases "
"GDScript provides simpler overridable functions."
msgstr ""
"Kunkin luokan dokumentaatio näyttää :ref:`Class Reference <toc-class-ref>` "
"osiossa ilmoitukset, jotka luokka voi vastaanottaa. Kuitenkin, useimmissa "
"tapauksissa GDScript tarjoaa yksinkertaisemmat ylikirjoitettavat funktiot."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:198
#, fuzzy
msgid "Overridable functions"
msgstr "Ylikirjoitettavat funktiot"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:200
#, fuzzy
msgid ""
"Such overridable functions, which are described as follows, can be applied "
"to nodes:"
msgstr "Solmuilla voidaan käyttää seuraavia ylikirjoitettavia funktioita:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:272
msgid ""
"As mentioned before, it's better to use these functions instead of the "
"notification system."
msgstr ""
"Kuten mainittu aikaisemmin, on parempi käyttää näitä funktioita "
"ilmoitusjärjestelmän sijaan."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:276
msgid "Creating nodes"
msgstr "Solmujen luonti"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:278
msgid ""
"To create a node from code, call the ``.new()`` method, like for any other "
"class-based datatype. For example:"
msgstr ""
"Luodaksesi uuden solmun koodissa, kutsu ``.new()`` metodia, kuten minkä "
"tahansa luokkapohjaisen tietotyypin tapauksessa. Esimerkiksi:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:302
msgid ""
"To delete a node, be it inside or outside the scene, ``free()`` must be used:"
msgstr ""
"Solmun tuhoamiseksi, oli se sitten skenen sisällä tai ulkopuolella, on "
"käytettävä ``free()`` metodia:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:318
msgid ""
"When a node is freed, it also frees all its child nodes. Because of this, "
"manually deleting nodes is much simpler than it appears. Free the base node "
"and everything else in the subtree goes away with it."
msgstr ""
"Kun solmu vapautetaan, myös kaikki sen alisolmut vapautetaan. Tästä johtuen "
"solmujen manuaalinen tuhoaminen on paljon helpompaa kuin miltä se vaikuttaa. "
"Vapauta pohjasolmu ja kaikki muu alipuussa menee sen mukana."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:322
msgid ""
"A situation might occur where we want to delete a node that is currently "
"\"blocked\", because it is emitting a signal or calling a function. This "
"will crash the game. Running Godot with the debugger will often catch this "
"case and warn you about it."
msgstr ""
"Sellainen tilanne voi sattua, että haluamme poistaa solmun, joka on "
"parhaillaan \"estetty\", koska se on lähettämässä signaalia tai kutsumassa "
"funktiota. Tämä kaataa pelin. Godotin ajaminen debuggerissa pyydystää usein "
"tämäntyyppisen tapauksen ja varoittaa sinua siitä."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:327
msgid ""
"The safest way to delete a node is by using :ref:`Node.queue_free() "
"<class_Node_method_queue_free>`. This erases the node safely during idle."
msgstr ""
"Turvallisin tapa solmun tuhoamiseksi on käyttää :ref:`Node.queue_free() "
"<class_Node_method_queue_free>` metodia. Tämä poistaa solmun turvallisesti "
"toimettomalla hetkellä."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:345
msgid "Instancing scenes"
msgstr "Skenejen instantiointi"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:347
msgid ""
"Instancing a scene from code is done in two steps. The first one is to load "
"the scene from your hard drive:"
msgstr ""
"Skenejen instantiointi koodissa tehdään kahdessa vaiheessa. Ensiksi skene "
"ladataan kiintolevyltä:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:360
msgid ""
"Preloading it can be more convenient, as it happens at parse time (GDScript "
"only):"
msgstr ""
"Sen esilataaminen saattaa olla sopivampaa, koska se tapahtuu skriptin "
"jäsennysaikana (vain GDScript):"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:368
msgid ""
"But ``scene`` is not yet a node. It's packed in a special resource called :"
"ref:`PackedScene <class_PackedScene>`. To create the actual node, the "
"function :ref:`PackedScene.instance() <class_PackedScene_method_instance>` "
"must be called. This will return the tree of nodes that can be added to the "
"active scene:"
msgstr ""
"Mutta ``scene`` ei ole vielä solmu. Se on pakattu erityiseen :ref:"
"`PackedScene <class_PackedScene>` nimiseen resurssiin. Varsinaisen solmun "
"luomiseksi täytyy kutsua :ref:`PackedScene.instance() "
"<class_PackedScene_method_instance>` funktiota. Tämä palauttaa solmupuun, "
"joka voidaan lisätä aktiiviseen skeneen:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:386
msgid ""
"The advantage of this two-step process is that a packed scene may be kept "
"loaded and ready to use so that you can create as many instances as desired. "
"This is especially useful to quickly instance several enemies, bullets, and "
"other entities in the active scene."
msgstr ""
"Tämän kaksivaiheisen prosessin etu on, että pakattu skene voidaan pitää "
"ladattuna ja käyttövalmiina, niin että siitä voidaan luoda niin monta "
"ilmentymää kuin on tarpeen. Se on käytännöllistä varsinkin useiden "
"vihollisten, ammusten ja muiden yksiköiden luomisessa aktiiviseen skeneen."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:394
msgid "Register scripts as classes"
msgstr "Skriptien rekisteröinti luokiksi"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:396
msgid ""
"Godot has a \"Script Class\" feature to register individual scripts with the "
"Editor. By default, you can only access unnamed scripts by loading the file "
"directly."
msgstr ""
"Godotissa on \"skriptiluokka\"-ominaisuus yksittäisten skriptien "
"rekisteröintiin editorissa. Lähtökohtaisesti pääset käsiksi nimeämättömiin "
"skripteihin vain lataamalla tiedoston suoraan."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:400
#, fuzzy
msgid ""
"You can name a script and register it as a type in the editor with the "
"``class_name`` keyword followed by the class's name. You may add a comma and "
"an optional path to a PNG or SVG image to use as an icon (16×16 minimum, "
"32×32 recommended). You will then find your new type in the Node or Resource "
"creation dialog. Note that the icon will only appear after restarting the "
"editor."
msgstr ""
"Voit nimetä skriptin ja rekisteröidä sen tyypiksi editorissa ``class_name`` "
"avainsanalla, jota seuraa luokan nimi. Voit lisätä pilkun ja valinnaisen "
"polun ikonina käytettävään kuvaan. Löydät tämän jälkeen uuden tyyppisi "
"Solmu- tai Resurssinluontidialogista."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:423
msgid "In Godot 3.1:"
msgstr "Godot 3.1 versiossa:"

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:425
msgid ""
"Only GDScript and NativeScript, i.e., C++ and other GDNative-powered "
"languages, can register scripts."
msgstr ""
"Vain GDScript ja NativeScript, eli C++ ja muut GDNative-käyttöiset kielet, "
"voivat rekisteröidä skriptejä."

#: ../../docs/getting_started/step_by_step/scripting_continued.rst:426
msgid "Only GDScript creates global variables for each named script."
msgstr "Vain GDScript luo globaaleja muuttujia kullekin nimetylle skriptille."
