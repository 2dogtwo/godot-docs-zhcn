# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-10 13:55+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:4
msgid "Exporting projects"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:9
msgid "Why export?"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:11
msgid "Originally, Godot did not have any means to export projects. The developers would compile the proper binaries and build the packages for each platform manually."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:15
msgid "When more developers (and even non-programmers) started using it, and when our company started taking more projects at the same time, it became evident that this was a bottleneck."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:20
msgid "On PC"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:22
msgid "Distributing a game project on PC with Godot is rather easy. Drop the Godot binary in the same directory as the ``project.godot`` file, then compress the project directory and you are done."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:26
msgid "It sounds simple, but there are probably a few reasons why the developer may not want to do this. The first one is that it may not be desirable to distribute loads of files. Some developers may not like curious users peeking at how the game was made, others may find it inelegant, and so on. Another reason is that the developer might prefer a specially-compiled binary, which is smaller in size, more optimized and does not include tools like the editor and debugger."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:34
msgid "Finally, Godot has a simple but efficient system for creating DLCs as extra package files."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:38
msgid "On mobile"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:40
msgid "The same scenario on mobile platforms is a little worse. To distribute a project on those devices, a binary for each of those platforms is built, then added to a native project together with the game data."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:45
msgid "This can be troublesome because it means that the developer must be familiarized with the SDK of each platform before even being able to export. While learning each SDK is always encouraged, it can be frustrating to be forced to do it at an undesired time."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:50
msgid "There is also another problem with this approach: different devices prefer some data in different formats to run. The main example of this is texture compression. All PC hardware uses S3TC (BC) compression and that has been standardized for more than a decade, but mobile devices use different formats for texture compression, such as PVRTC (iOS) or ETC (Android)."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:58
msgid "Export menu"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:60
msgid "After many attempts at different export workflows, the current one has proven to work the best. At the time of this writing, not all platforms are supported yet, but the supported platforms continue to grow."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:64
msgid "To open the export menu, click the **Export** button:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:68
msgid "The export menu will open. However, it will be completely empty. This is because we need to add an export preset."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:73
msgid "To create an export preset, click the **Addâ€¦** button at the top of the export menu. This will open a drop-down list of platforms to choose from for an export preset."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:79
msgid "The default options are often enough to export, so tweaking them is usually not necessary. However, many platforms require additional tools (SDKs) to be installed to be able to export. Additionally, Godot needs export templates installed to create packages. The export menu will complain when something is missing and will not allow the user to export for that platform until they resolve it:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:88
msgid "At that time, the user is expected to come back to the documentation and follow instructions on how to properly set up that platform."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:92
msgid "Export templates"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:94
msgid "Apart from setting up the platform, the export templates must be installed to be able to export projects. They can be obtained as a TPZ file (which is a renamed ZIP archive) from the `download page of the website <https://www.godotengine.org/download>`_."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:99
msgid "Once downloaded, they can be installed using the **Install Export Templates** option in the editor:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:105
msgid "Export mode"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:107
msgid "When exporting, Godot makes a list of all the files to export and then creates the package. There are 3 different modes for exporting:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:110
msgid "Export every single file in the project"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:111
msgid "Export only resources (+ custom filter), this is the default."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:112
msgid "Export only selected resources (+ custom filter)"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:116
msgid "**Export every single file** - This mode exports every single file in the project. This is good to test if something is being forgotten, but developers often have a lot of unrelated stuff around in the project directory, which makes it a bad idea."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:121
msgid "**Export only resources** - Only resources are exported. For most projects, this is enough. However many developers like to use custom datafiles in their games. To compensate for this, filters can be added for extra extensions (for instance, ``*.txt,*.csv``)."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:126
msgid "**Export only selected resources** - Only select resources from a list are exported. This is probably overkill for most projects, but in some cases it is justified (usually huge projects). This mode offers total control of what is exported. Individual resources can be selected and dependency detection is performed to ensure that everything needed is added."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:136
msgid "Exporting from the command line"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:138
msgid "In production, it is useful to automate builds, and Godot supports this with the ``--export`` and ``--export-debug`` command line parameters. Exporting from the command line still requires an export preset to define the export parameters. A basic invocation of the command would be:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:147
msgid "This will export to ``some_name.exe``, assuming there is a preset called \"Windows Desktop\" and the template can be found. The output path is relative to the project path or absolute; it does not respect the directory the command was invoked from."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:152
msgid "You can also configure it to export only the PCK or ZIP file (allowing a single export to be used with multiple Godot executables). This takes place if:"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:156
msgid "the export preset is not marked as runnable,"
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:157
msgid "the target name ends with ``.pck`` or ``.zip``."
msgstr ""

#: ../../docs/getting_started/workflow/export/exporting_projects.rst:159
msgid "It is often useful to combine the ``--export`` flag with the ``--path`` flag, and to create a dedicated export preset for automated export:"
msgstr ""

