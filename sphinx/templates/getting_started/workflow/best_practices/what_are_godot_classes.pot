# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-27 08:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:4
msgid "Godot scenes and scripts are classes"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:6
msgid "In Godot, scripts and scenes can both be the equivalent of classes in an Object-Oriented programming language. The main difference is that scenes are `declarative code <https://en.wikipedia.org/wiki/Declarative_programming>`_, while scripts can contain `imperative code <https://en.wikipedia.org/wiki/Imperative_programming>`_."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:12
msgid "As a result, many best practices in Godot boil down to applying Object-Oriented design principles to the scenes, nodes, or script that make up your game."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:15
msgid "This guide explains how scripts and scenes work in the engine's core, to help you get a sense of how Godot works under the hood, and to help you better understand where some of this series' best practices come from."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:20
msgid "Making sense of classes in Godot"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:22
msgid "Godot Engine provides built-in classes like :ref:`Node <class_Node>`. User-created types are not technically classes. Instead, they are resources that tell the engine a sequence of initializations to perform on one of the engine's built-in classes."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:27
msgid "Godot's internal classes have methods that register a class's data with a :ref:`ClassDB <class_ClassDB>`. This database provides runtime access to class information. ``ClassDB`` contains information about classes like:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:31
msgid "properties"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:32
msgid "methods"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:33
msgid "constants"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:34
msgid "signals"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:36
msgid "This ``ClassDB`` is what Objects check against when performing an operation like accessing a property or calling a method. ``ClassDB`` checks the database's records and the records of the Object's base types to see if the Object supports the operation."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:41
msgid "On the engine's side, every class defines a static ``_bind_methods()`` function that describes what C++ content it registers to the database and how. When you use the engine, you can extend the methods, properties, and signals available from the ``ClassDB`` by attaching a :ref:`Script <class_Script>` to your node."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:46
msgid "Objects check their attached script before the database. This is why scripts can override built-in methods. If a script defines a ``_get_property_list()`` method, Godot appends that data to the list of properties the Object fetches from the ClassDB. The same is true for other declarative code."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:51
msgid "Even scripts that don't inherit from a built-in type, i.e. scripts that don't start with the ``extends`` keyword, implicitly inherit from the engine's base :ref:`Reference <class_Reference>` class. This allows the Object to defer to the script's content where the engine logic deems appropriate."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:58
msgid "As a result, you can instance scripts without the ``extends`` keyword from code, but you cannot attach them to a :ref:`Node <class_Node>`"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:63
msgid "Scripting performances and PackedScene"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:65
msgid "As the size of Objects increases, the scripts' necessary size to create them grows much, much larger. Creating node hierarchies demonstrates this. Each individual Node's logic could be several hundred lines of code in length."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:69
msgid "Let's see a simple example of creating a single ``Node`` as a child. The code below creates a new ``Node``, changes its name, assigns a script to it, sets its future parent as its owner so it gets saved to disk along with it, and finally adds it as a child of the ``Main`` node:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:109
msgid "Script code like this is much slower than engine-side C++ code. Each change makes a separate call to the scripting API which leads to many \"look-ups\" on the back-end to find the logic to execute."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:113
msgid "Scenes help to avoid this performance issue. :ref:`PackedScene <class_PackedScene>`, the base type that scenes inherit from, are resources that use serialized data to create objects. The engine can process scenes in batches on the back-end and provide much better performance than scripts."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:119
msgid "Scenes and scripts are objects"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:121
msgid "Why is any of this important to scene organization? Because scenes *are* objects. One often pairs a scene with a scripted root node that makes use of the sub-nodes. This means that the scene is often an extension of the script's declarative code."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:126
msgid "The content of a scene helps to define:"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:128
msgid "What nodes are available to the script"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:129
msgid "How they are organized"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:130
msgid "How are they initialized"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:131
msgid "What signal connections they have with each other"
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:133
msgid "Many Object-Oriented principles which apply to written code *also* apply to scenes."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:136
msgid "The scene is *always an extension of the script attached to its root node*. You can see all the nodes it contains as part of a single class."
msgstr ""

#: ../../docs/getting_started/workflow/best_practices/what_are_godot_classes.rst:139
msgid "Most of the tips and techniques explained in this series will build on this."
msgstr ""

