# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-13 14:08+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:4
msgid "Features"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:6
msgid "This page provides an overview over the commonly used features of both C# and Godot and how they are used together."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:10
msgid "Type Conversion and Casting"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:12
msgid "C# is a statically typed language. Therefore you can't do the following:"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:19
msgid "The method ``GetNode()`` returns a ``Node`` instance. You must explicitly convert it to the desired derived type, ``Sprite`` in this case."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:22
msgid "For this, you have various options in C#."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:24
msgid "**Casting and Type Checking**"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:26
msgid "Throws ``InvalidCastException`` if the returned node cannot be casted to Sprite. You would use it instead of the ``as`` operator if you are pretty sure it won't fail."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:34
msgid "**Using the AS operator**"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:36
msgid "The ``as`` operator returns null if the node cannot be casted to Sprite, and for this reason it cannot be used with value types."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:45
msgid "**Type checking using the IS operator**"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:47
msgid "To check if the node can be casted to Sprite, you can use the ``is`` operator. The ``is`` operator returns false if the node cannot be casted to Sprite, otherwise it returns true."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:58
msgid "For more advanced type checking, you can look into `Pattern Matching <https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching>`_."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:63
msgid "C# Signals"
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:65
msgid "For a complete C# example, see the **Handling a signal** section in the step by step :ref:`doc_scripting` tutorial."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:67
msgid "Declaring a signal in C# is done with the ``[Signal]`` attribute on a delegate."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:77
msgid "These signals can then be connected either in the editor or from code with ``Connect``."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:97
msgid "Emitting signals is done with the ``EmitSignal`` method."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:107
msgid "Notice that you can always reference a signal name with the ``nameof`` keyword (applied on the delegate itself)."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:109
msgid "It is possible to bind values when establishing a connection by passing an object array."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:129
msgid "Signals support parameters and bound values of all the `built-in types <https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/built-in-types-table>`_ and Classes derived from :ref:`Godot.Object <class_Object>`. Consequently any ``Node`` or ``Reference`` will be compatible automatically but custom data objects will need to extend from `Godot.Object` or one of its subclasses."
msgstr ""

#: ../../docs/getting_started/scripting/c_sharp/c_sharp_features.rst:141
msgid "Finally, signals can be created by calling ``AddUserSignal``, but be aware that it should be executed before any use of said signals (with ``Connect`` or ``EmitSignal``)."
msgstr ""

