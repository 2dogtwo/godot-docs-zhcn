# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2021, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 15:51+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:4
msgid "Coding the player"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:6
msgid "In this lesson, we'll add player movement, animation, and set it up to detect collisions."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:9
msgid "To do so, we need to add some functionality that we can't get from a built-in node, so we'll add a script. Click the ``Player`` node and click the \"Attach Script\" button:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:15
msgid "In the script settings window, you can leave the default settings alone. Just click \"Create\":"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:18
msgid "If you're creating a C# script or other languages, select the language from the `language` drop down menu before hitting create."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:23
msgid "If this is your first time encountering GDScript, please read :ref:`doc_scripting` before continuing."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:26
msgid "Start by declaring the member variables this object will need:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:86
msgid "Using the ``export`` keyword on the first variable ``speed`` allows us to set its value in the Inspector. This can be handy for values that you want to be able to adjust just like a node's built-in properties. Click on the ``Player`` node and you'll see the property now appears in the \"Script Variables\" section of the Inspector. Remember, if you change the value here, it will override the value written in the script."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:93
msgid "If you're using C#, you need to (re)build the project assemblies whenever you want to see new export variables or signals. This build can be manually triggered by clicking the word \"Mono\" at the bottom of the editor window to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:101
msgid "The ``_ready()`` function is called when a node enters the scene tree, which is a good time to find the size of the game window:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:129
msgid "Now we can use the ``_process()`` function to define what the player will do. ``_process()`` is called every frame, so we'll use it to update elements of our game, which we expect will change often. For the player, we need to do the following:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:134
msgid "Check for input."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:135
msgid "Move in the given direction."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:136
msgid "Play the appropriate animation."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:138
msgid "First, we need to check for input - is the player pressing a key? For this game, we have 4 direction inputs to check. Input actions are defined in the Project Settings under \"Input Map\". Here, you can define custom events and assign different keys, mouse events, or other inputs to them. For this game, we will just use the default events called \"ui_right\" etc that are assigned to the arrow keys on the keyboard."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:145
msgid "You can detect whether a key is pressed using ``Input.is_action_pressed()``, which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:224
msgid "We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player should not be moving. Then we check each input and add/subtract from the ``velocity`` to obtain a total direction. For example, if you hold ``right`` and ``down`` at the same time, the resulting ``velocity`` vector will be ``(1, 1)``. In this case, since we're adding a horizontal and a vertical movement, the player would move *faster* diagonally than if it just moved horizontally."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:231
msgid "We can prevent that if we *normalize* the velocity, which means we set its *length* to ``1``, then multiply by the desired speed. This means no more fast diagonal movement."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:235
msgid "If you've never used vector math before, or need a refresher, you can see an explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to know but won't be necessary for the rest of this tutorial."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:239
msgid "We also check whether the player is moving so we can call ``play()`` or ``stop()`` on the AnimatedSprite2D."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:242
msgid "``$`` is shorthand for ``get_node()``. So in the code above, ``$AnimatedSprite2D.play()`` is the same as ``get_node(\"AnimatedSprite2D\").play()``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:246
msgid "In GDScript, ``$`` returns the node at the relative path from the current node, or returns ``null`` if the node is not found. Since AnimatedSprite2D is a child of the current node, we can use ``$AnimatedSprite2D``."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:251
msgid "Now that we have a movement direction, we can update the player's position. We can also use ``clamp()`` to prevent it from leaving the screen. *Clamping* a value means restricting it to a given range. Add the following to the bottom of the ``_process`` function (make sure it's not indented under the `else`):"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:279
msgid "The `delta` parameter in the `_process()` function refers to the *frame length* - the amount of time that the previous frame took to complete. Using this value ensures that your movement will remain consistent even if the frame rate changes."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:284
msgid "Click \"Play Scene\" (:kbd:`F6`, :kbd:`Cmd + R` on macOS) and confirm you can move the player around the screen in all directions."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:287
msgid "If you get an error in the \"Debugger\" panel that says"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:289
msgid "``Attempt to call function 'play' in base 'null instance' on a null instance``"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:292
msgid "this likely means you spelled the name of the AnimatedSprite2D node wrong. Node names are case-sensitive and ``$NodeName`` must match the name you see in the scene tree."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:297
msgid "Choosing animations"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:299
msgid "Now that the player can move, we need to change which animation the AnimatedSprite2D is playing based on its direction. We have the \"walk\" animation, which shows the player walking to the right. This animation should be flipped horizontally using the ``flip_h`` property for left movement. We also have the \"up\" animation, which should be flipped vertically with ``flip_v`` for downward movement. Let's place this code at the end of the ``_process()`` function:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:345
msgid "The boolean assignments in the code above are a common shorthand for programmers. Since we're doing a comparison test (boolean) and also *assigning* a boolean value, we can do both at the same time. Consider this code versus the one-line boolean assignment above:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:369
msgid "Play the scene again and check that the animations are correct in each of the directions."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:372
msgid "A common mistake here is to type the names of the animations wrong. The animation names in the SpriteFrames panel must match what you type in the code. If you named the animation ``\"Walk\"``, you must also use a capital \"W\" in the code."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:377
msgid "When you're sure the movement is working correctly, add this line to ``_ready()``, so the player will be hidden when the game starts:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:394
msgid "Preparing for collisions"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:396
msgid "We want ``Player`` to detect when it's hit by an enemy, but we haven't made any enemies yet! That's OK, because we're going to use Godot's *signal* functionality to make it work."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:400
msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:429
msgid "This defines a custom signal called \"hit\" that we will have our player emit (send out) when it collides with an enemy. We will use ``Area2D`` to detect the collision. Select the ``Player`` node and click the \"Node\" tab next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:436
msgid "Notice our custom \"hit\" signal is there as well! Since our enemies are going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` signal. This signal will be emitted when a body contacts the player. Click \"Connect..\" and the \"Connect a Signal\" window appears. We don't need to change any of these settings so click \"Connect\" again. Godot will automatically create a function in your player's script."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:445
msgid "Note the green icon indicating that a signal is connected to this function. Add this code to the function:"
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:477
msgid "Each time an enemy hits the player, the signal is going to be emitted. We need to disable the player's collision so that we don't trigger the ``hit`` signal more than once."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:481
msgid "Disabling the area's collision shape can cause an error if it happens in the middle of the engine's collision processing. Using ``set_deferred()`` tells Godot to wait to disable the shape until it's safe to do so."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:486
msgid "The last piece is to add a function we can call to reset the player when starting a new game."
msgstr ""

#: ../../docs/getting_started/first_2d_game/03.coding_the_player.rst:515
msgid "With the player working, we'll work on the enemy in the next lesson."
msgstr ""
