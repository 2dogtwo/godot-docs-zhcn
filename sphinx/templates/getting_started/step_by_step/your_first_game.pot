# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, Juan Linietsky, Ariel Manzur and the Godot community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-30 19:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/your_first_game.rst:4
msgid "Your first game"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:7
msgid "Overview"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:9
msgid "This tutorial will guide you through making your first Godot project. You will learn how the Godot editor works, how to structure a project, and how to build a 2D game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:13
msgid "This project is an introduction to the Godot engine. It assumes that you have some programming experience already. If you're new to programming entirely, you should start here: :ref:`doc_scripting`."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:18
msgid "The game is called \"Dodge the Creeps!\". Your character must move and avoid the enemies for as long as possible. Here is a preview of the final result:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:24
msgid "**Why 2D?** 3D games are much more complex than 2D ones. You should stick to 2D until you have a good understanding of the game development process and how to use Godot."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:29
msgid "Project setup"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:31
msgid "Launch Godot and create a new project. Then, download :download:`dodge_assets.zip <files/dodge_assets.zip>`. This contains the images and sounds you'll be using to make the game. Unzip these files in your project folder."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:36
msgid "For this tutorial, we will assume you are familiar with the Godot editor. If you haven't read :ref:`doc_scenes_and_nodes`, do so now for an explanation of setting up a project and using the editor."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:40
msgid "This game is designed for portrait mode, so we need to adjust the size of the game window. Click on Project -> Project Settings -> Display -> Window and set \"Width\" to ``480`` and \"Height\" to ``720``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:44
msgid "Also in this section, under the \"Stretch\" options, set ``Mode`` to \"2d\" and ``Aspect`` to \"keep\". This ensures that the game scales consistently on different sized screens."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:49
msgid "Organizing the project"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:51
msgid "In this project, we will make 3 independent scenes: ``Player``, ``Mob``, and ``HUD``, which we will combine into the game's ``Main`` scene. In a larger project, it might be useful to create folders to hold the various scenes and their scripts, but for this relatively small game, you can save your scenes and scripts in the project's root folder, identified by ``res://``.  You can see your project folders in the FileSystem Dock in the lower left corner:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:62
msgid "Player scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:64
msgid "The first scene we will make defines the ``Player`` object. One of the benefits of creating a separate Player scene is that we can test it separately, even before we've created other parts of the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:69
msgid "Node structure"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:71
msgid "To begin, we need to choose a root node for the player object. As a general rule, a scene's root node should reflect the object's desired functionality - what the object *is*. Click the \"Other Node\" button and add an :ref:`Area2D <class_Area2D>` node to the scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:78
msgid "Godot will display a warning icon next to the node in the scene tree. You can ignore it for now. We will address it later."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:81
msgid "With ``Area2D`` we can detect objects that overlap or run into the player. Change the node's name to ``Player`` by double-clicking on it. Now that we've set the scene's root node, we can add additional nodes to give it more functionality."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:86
msgid "Before we add any children to the ``Player`` node, we want to make sure we don't accidentally move or resize them by clicking on them. Select the node and click the icon to the right of the lock; its tooltip says \"Makes sure the object's children are not selectable.\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:93
msgid "Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/Linux or :kbd:`Cmd + S` on macOS."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:95
msgid "For this project, we will be following the Godot naming conventions."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:97
msgid "**GDScript**: Classes (nodes) use PascalCase, variables and functions use snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:101
msgid "**C#**: Classes, export variables and methods use PascalCase, private fields use _camelCase, local variables and parameters use camelCase (See :ref:`doc_c_sharp_styleguide`).  Be careful to type the method names precisely when connecting signals."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:108
msgid "Sprite animation"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:110
msgid "Click on the ``Player`` node and add an :ref:`AnimatedSprite <class_AnimatedSprite>` node as a child. The ``AnimatedSprite`` will handle the appearance and animations for our player. Notice that there is a warning symbol next to the node. An ``AnimatedSprite`` requires a :ref:`SpriteFrames <class_SpriteFrames>` resource, which is a list of the animations it can display. To create one, find the ``Frames`` property in the Inspector and click \"[empty]\" -> \"New SpriteFrames\". Click again to open the \"SpriteFrames\" panel:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:121
msgid "On the left is a list of animations. Click the \"default\" one and rename it to \"walk\". Then click the \"New Animation\" button to create a second animation named \"up\". Find the player images in the \"FileSystem\" tab - they're in the ``art`` folder you unzipped earlier. Drag the two images for each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, into the \"Animation Frames\" side of the panel for the corresponding animation:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:130
msgid "The player images are a bit too large for the game window, so we need to scale them down. Click on the ``AnimatedSprite`` node and set the ``Scale`` property to ``(0.5, 0.5)``. You can find it in the Inspector under the ``Node2D`` heading."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:137
msgid "Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child of ``Player``. This will determine the player's \"hitbox\", or the bounds of its collision area. For this character, a ``CapsuleShape2D`` node gives the best fit, so next to \"Shape\" in the Inspector, click \"[empty]\"\" -> \"New CapsuleShape2D\".  Using the two size handles, resize the shape to cover the sprite:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:146
msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:150
msgid "Make sure to save the scene again after these changes."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:153
msgid "Moving the player"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:155
msgid "Now we need to add some functionality that we can't get from a built-in node, so we'll add a script. Click the ``Player`` node and click the \"Attach Script\" button:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:161
msgid "In the script settings window, you can leave the default settings alone. Just click \"Create\":"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:164
msgid "If you're creating a C# script or other languages, select the language from the `language` drop down menu before hitting create."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:169
msgid "If this is your first time encountering GDScript, please read :ref:`doc_scripting` before continuing."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:172
msgid "Start by declaring the member variables this object will need:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:193
msgid "Using the ``export`` keyword on the first variable ``speed`` allows us to set its value in the Inspector. This can be handy for values that you want to be able to adjust just like a node's built-in properties. Click on the ``Player`` node and you'll see the property now appears in the \"Script Variables\" section of the Inspector. Remember, if you change the value here, it will override the value written in the script."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:200
msgid "If you're using C#, you need to (re)build the project assemblies whenever you want to see new export variables or signals. This build can be manually triggered by clicking the word \"Mono\" at the bottom of the editor window to reveal the Mono Panel, then clicking the \"Build Project\" button."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:208
msgid "The ``_ready()`` function is called when a node enters the scene tree, which is a good time to find the size of the game window:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:224
msgid "Now we can use the ``_process()`` function to define what the player will do. ``_process()`` is called every frame, so we'll use it to update elements of our game, which we expect will change often. For the player, we need to do the following:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:229
msgid "Check for input."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:230
msgid "Move in the given direction."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:231
msgid "Play the appropriate animation."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:233
msgid "First, we need to check for input - is the player pressing a key? For this game, we have 4 direction inputs to check. Input actions are defined in the Project Settings under \"Input Map\". Here, you can define custom events and assign different keys, mouse events, or other inputs to them. For this demo, we will use the default events that are assigned to the arrow keys on the keyboard."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:240
msgid "You can detect whether a key is pressed using ``Input.is_action_pressed()``, which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:302
msgid "We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player should not be moving. Then we check each input and add/subtract from the ``velocity`` to obtain a total direction. For example, if you hold ``right`` and ``down`` at the same time, the resulting ``velocity`` vector will be ``(1, 1)``. In this case, since we're adding a horizontal and a vertical movement, the player would move *faster* diagonally than if it just moved horizontally."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:309
msgid "We can prevent that if we *normalize* the velocity, which means we set its *length* to ``1``, then multiply by the desired speed. This means no more fast diagonal movement."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:313
msgid "If you've never used vector math before, or need a refresher, you can see an explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to know but won't be necessary for the rest of this tutorial."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:317
msgid "We also check whether the player is moving so we can call ``play()`` or ``stop()`` on the AnimatedSprite."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:320
msgid "``$`` is shorthand for ``get_node()``. So in the code above, ``$AnimatedSprite.play()`` is the same as ``get_node(\"AnimatedSprite\").play()``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:323
msgid "In GDScript, ``$`` returns the node at the relative path from the current node, or returns ``null`` if the node is not found. Since AnimatedSprite is a child of the current node, we can use ``$AnimatedSprite``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:326
msgid "Now that we have a movement direction, we can update the player's position. We can also use ``clamp()`` to prevent it from leaving the screen. *Clamping* a value means restricting it to a given range. Add the following to the bottom of the ``_process`` function (make sure it's not indented under the `else`):"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:347
msgid "The `delta` parameter in the `_process()` function refers to the *frame length* - the amount of time that the previous frame took to complete. Using this value ensures that your movement will remain consistent even if the frame rate changes."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:352
msgid "Click \"Play Scene\" (``F6``) and confirm you can move the player around the screen in all directions."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:355
msgid "If you get an error in the \"Debugger\" panel that says"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:357
msgid "``Attempt to call function 'play' in base 'null instance' on a null instance``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:359
msgid "this likely means you spelled the name of the AnimatedSprite node wrong. Node names are case-sensitive and ``$NodeName`` must match the name you see in the scene tree."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:364
msgid "Choosing animations"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:366
msgid "Now that the player can move, we need to change which animation the AnimatedSprite is playing based on its direction. We have the \"walk\" animation, which shows the player walking to the right. This animation should be flipped horizontally using the ``flip_h`` property for left movement. We also have the \"up\" animation, which should be flipped vertically with ``flip_v`` for downward movement. Let's place this code at the end of the ``_process()`` function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:401
msgid "The boolean assignments in the code above are a common shorthand for programmers. Since we're doing a comparison test (boolean) and also *assigning* a boolean value, we can do both at the same time. Consider this code versus the one-line boolean assignment above:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:425
msgid "Play the scene again and check that the animations are correct in each of the directions."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:428
msgid "A common mistake here is to type the names of the animations wrong. The animation names in the SpriteFrames panel must match what you type in the code. If you named the animation ``\"Walk\"``, you must also use a capital \"W\" in the code."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:433
msgid "When you're sure the movement is working correctly, add this line to ``_ready()``, so the player will be hidden when the game starts:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:446
msgid "Preparing for collisions"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:448
msgid "We want ``Player`` to detect when it's hit by an enemy, but we haven't made any enemies yet! That's OK, because we're going to use Godot's *signal* functionality to make it work."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:452
msgid "Add the following at the top of the script, after ``extends Area2D``:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:466
msgid "This defines a custom signal called \"hit\" that we will have our player emit (send out) when it collides with an enemy. We will use ``Area2D`` to detect the collision. Select the ``Player`` node and click the \"Node\" tab next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:473
msgid "Notice our custom \"hit\" signal is there as well! Since our enemies are going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: Node)`` signal. This signal will be emitted when a body contacts the player. Click \"Connect..\" and the \"Connect a Signal\" window appears. We don't need to change any of these settings so click \"Connect\" again. Godot will automatically create a function in your player's script."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:482
msgid "Note the green icon indicating that a signal is connected to this function. Add this code to the function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:502
msgid "Each time an enemy hits the player, the signal is going to be emitted. We need to disable the player's collision so that we don't trigger the ``hit`` signal more than once."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:506
msgid "Disabling the area's collision shape can cause an error if it happens in the middle of the engine's collision processing. Using ``set_deferred()`` tells Godot to wait to disable the shape until it's safe to do so."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:510
msgid "The last piece is to add a function we can call to reset the player when starting a new game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:531
msgid "Enemy scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:533
msgid "Now it's time to make the enemies our player will have to dodge. Their behavior will not be very complex: mobs will spawn randomly at the edges of the screen, choose a random direction, and move in a straight line."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:537
msgid "We'll create a ``Mob`` scene, which we can then *instance* to create any number of independent mobs in the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:540
msgid "See :ref:`doc_instancing` to learn more about instancing."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:543
msgid "Node setup"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:545
msgid "Click Scene -> New Scene and add the following nodes:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:547
msgid ":ref:`RigidBody2D <class_RigidBody2D>` (named ``Mob``)"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:549
msgid ":ref:`AnimatedSprite <class_AnimatedSprite>`"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:550
msgid ":ref:`CollisionShape2D <class_CollisionShape2D>`"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:551
msgid ":ref:`VisibilityNotifier2D <class_VisibilityNotifier2D>`"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:553
msgid "Don't forget to set the children so they can't be selected, like you did with the Player scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:556
msgid "In the :ref:`RigidBody2D <class_RigidBody2D>` properties, set ``Gravity Scale`` to ``0``, so the mob will not fall downward. In addition, under the ``PhysicsBody2D`` section, click the ``Mask`` property and uncheck the first box. This will ensure the mobs do not collide with each other."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:563
msgid "Set up the :ref:`AnimatedSprite <class_AnimatedSprite>` like you did for the player. This time, we have 3 animations: ``fly``, ``swim``, and ``walk``. There are two images for each animation in the art folder."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:567
msgid "Adjust the \"Speed (FPS)\" to ``3`` for all animations."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:571
msgid "Set the ``Playing`` property in the Inspector to “On”."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:573
msgid "We'll select one of these animations randomly so that the mobs will have some variety."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:575
msgid "Like the player images, these mob images need to be scaled down. Set the ``AnimatedSprite``'s ``Scale`` property to ``(0.75, 0.75)``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:578
msgid "As in the ``Player`` scene, add a ``CapsuleShape2D`` for the collision. To align the shape with the image, you'll need to set the ``Rotation Degrees`` property to ``90`` (under \"Transform\" in the Inspector)."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:582
msgid "Save the scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:585
msgid "Enemy script"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:587
msgid "Add a script to the ``Mob`` and add the following member variables:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:611
msgid "When we spawn a mob, we'll pick a random value between ``min_speed`` and ``max_speed`` for how fast each mob will move (it would be boring if they were all moving at the same speed)."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:615
msgid "Now let's look at the rest of the script. In ``_ready()`` we randomly choose one of the three animation types:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:637
msgid "First, we get the list of animation names from the AnimatedSprite's ``frames`` property. This returns an Array containing all three animation names: ``[\"walk\", \"swim\", \"fly\"]``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:641
msgid "We then need to pick a random number between ``0`` and ``2`` to select one of these names from the list (array indices start at ``0``). ``randi() % n`` selects a random integer between ``0`` and ``n-1``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:645
msgid "You must use ``randomize()`` if you want your sequence of \"random\" numbers to be different every time you run the scene. We're going to use ``randomize()`` in our ``Main`` scene, so we won't need it here."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:649
msgid "The last piece is to make the mobs delete themselves when they leave the screen. Connect the ``screen_exited()`` signal of the ``VisibilityNotifier2D`` node and add this code:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:666
msgid "This completes the `Mob` scene."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:669
msgid "Main scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:671
msgid "Now it's time to bring it all together. Create a new scene and add a :ref:`Node <class_Node>` named ``Main``. Click the \"Instance\" button and select your saved ``Player.tscn``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:677
msgid "Now, add the following nodes as children of ``Main``, and name them as shown (values are in seconds):"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:680
msgid ":ref:`Timer <class_Timer>` (named ``MobTimer``) - to control how often mobs spawn"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:681
msgid ":ref:`Timer <class_Timer>` (named ``ScoreTimer``) - to increment the score every second"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:682
msgid ":ref:`Timer <class_Timer>` (named ``StartTimer``) - to give a delay before starting"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:683
msgid ":ref:`Position2D <class_Position2D>` (named ``StartPosition``) - to indicate the player's start position"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:685
msgid "Set the ``Wait Time`` property of each of the ``Timer`` nodes as follows:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:688
msgid "``MobTimer``: ``0.5``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:689
msgid "``ScoreTimer``: ``1``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:690
msgid "``StartTimer``: ``2``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:692
msgid "In addition, set the ``One Shot`` property of ``StartTimer`` to \"On\" and set ``Position`` of the ``StartPosition`` node to ``(240, 450)``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:696
msgid "Spawning mobs"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:698
msgid "The Main node will be spawning new mobs, and we want them to appear at a random location on the edge of the screen. Add a :ref:`Path2D <class_Path2D>` node named ``MobPath`` as a child of ``Main``. When you select ``Path2D``, you will see some new buttons at the top of the editor:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:705
msgid "Select the middle one (\"Add Point\") and draw the path by clicking to add the points at the corners shown. To have the points snap to the grid, make sure \"Use Grid Snap\" is selected. This option can be found to the left of the \"Lock\" button, appearing as a magnet next to some intersecting lines."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:712
msgid "Draw the path in *clockwise* order, or your mobs will spawn pointing *outwards* instead of *inwards*!"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:717
msgid "After placing point ``4`` in the image, click the \"Close Curve\" button and your curve will be complete."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:720
msgid "Now that the path is defined, add a :ref:`PathFollow2D <class_PathFollow2D>` node as a child of ``MobPath`` and name it ``MobSpawnLocation``. This node will automatically rotate and follow the path as it moves, so we can use it to select a random position and direction along the path."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:725
msgid "Your scene should look like this:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:730
msgid "Main script"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:732
msgid "Add a script to ``Main``. At the top of the script, we use ``export (PackedScene)`` to allow us to choose the Mob scene we want to instance."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:772
msgid "Click the ``Main`` node and you will see the ``Mob`` property in the Inspector under \"Script Variables\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:775
msgid "You can assign this property's value in two ways:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:777
msgid "Drag ``Mob.tscn`` from the \"FileSystem\" panel and drop it in the ``Mob`` property ."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:779
msgid "Click the down arrow next to \"[empty]\" and choose \"Load\". Select ``Mob.tscn``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:782
msgid "Next, select the ``Player`` node in the Scene dock, and access the Node dock on the sidebar. Make sure to have the Signals tab selected in the Node dock."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:785
msgid "You should see a list of the signals for the ``Player`` node. Find and double-click the ``hit`` signal in the list (or right-click it and select \"Connect...\"). This will open the signal connection dialog. We want to make a new function named ``game_over``, which will handle what needs to happen when a game ends. Type \"game_over\" in the \"Receiver Method\" box at the bottom of the signal connection dialog and click \"Connect\". Add the following code to the new function, as well as a ``new_game`` function that will set everything up for a new game:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:826
msgid "Now connect the ``timeout()`` signal of each of the Timer nodes (``StartTimer``, ``ScoreTimer`` , and ``MobTimer``) to the main script. ``StartTimer`` will start the other two timers. ``ScoreTimer`` will increment the score by 1."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:853
msgid "In ``_on_MobTimer_timeout()``, we will create a mob instance, pick a random starting location along the ``Path2D``, and set the mob in motion. The ``PathFollow2D`` node will automatically rotate as it follows the path, so we will use that to select the mob's direction as well as its position."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:859
msgid "Note that a new instance must be added to the scene using ``add_child()``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:907
msgid "Why ``PI``? In functions requiring angles, GDScript uses *radians*, not degrees. If you're more comfortable working with degrees, you'll need to use the ``deg2rad()`` and ``rad2deg()`` functions to convert between the two."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:913
msgid "Testing the scene"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:915
msgid "Let's test the scene to make sure everything is working. Add this to ``_ready()``:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:932
msgid "Let's also assign ``Main`` as our \"Main Scene\" - the one that runs automatically when the game launches. Press the \"Play\" button and select ``Main.tscn`` when prompted."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:936
msgid "You should be able to move the player around, see mobs spawning, and see the player disappear when hit by a mob."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:939
msgid "When you're sure everything is working, remove the call to ``new_game()`` from ``_ready()``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:943
msgid "HUD"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:945
msgid "The final piece our game needs is a UI: an interface to display things like score, a \"game over\" message, and a restart button. Create a new scene, and add a :ref:`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" stands for \"heads-up display\", an informational display that appears as an overlay on top of the game view."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:951
msgid "The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements on a layer above the rest of the game, so that the information it displays isn't covered up by any game elements like the player or mobs."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:955
msgid "The HUD needs to display the following information:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:957
msgid "Score, changed by ``ScoreTimer``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:958
msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:959
msgid "A \"Start\" button to begin the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:961
msgid "The basic node for UI elements is :ref:`Control <class_Control>`. To create our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:965
msgid "Create the following as children of the ``HUD`` node:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:967
msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:968
msgid ":ref:`Label <class_Label>` named ``Message``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:969
msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:970
msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:972
msgid "Click on the ``ScoreLabel`` and type a number into the ``Text`` field in the Inspector. The default font for ``Control`` nodes is small and doesn't scale well. There is a font file included in the game assets called \"Xolonium-Regular.ttf\". To use this font, do the following:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:977
msgid "Under \"Custom Fonts\", choose \"New DynamicFont\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:981
msgid "Click on the \"DynamicFont\" you added, and under \"Font/Font Data\", choose \"Load\" and select the \"Xolonium-Regular.ttf\" file. You must also set the font's ``Size``. A setting of ``64`` works well."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:987
msgid "Once you've done this on the ``ScoreLabel``, you can click the down arrow next to the DynamicFont property and choose \"Copy\", then \"Paste\" it in the same place on the other two Control nodes."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:991
msgid "**Anchors and Margins:** ``Control`` nodes have a position and size, but they also have anchors and margins. Anchors define the origin - the reference point for the edges of the node. Margins update automatically when you move or resize a control node. They represent the distance from the control node's edges to its anchor. See :ref:`doc_design_interfaces_with_the_control_nodes` for more details."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:998
msgid "Arrange the nodes as shown below. Click the \"Layout\" button to set a Control node's layout:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1003
msgid "You can drag the nodes to place them manually, or for more precise placement, use the following settings:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1007
msgid "ScoreLabel"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1009
msgid "*Layout* : \"Top Wide\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1010
msgid "*Text* : ``0``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1011
#: ../../docs/getting_started/step_by_step/your_first_game.rst:1018
msgid "*Align* : \"Center\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1014
msgid "Message"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1016
msgid "*Layout* : \"HCenter Wide\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1017
msgid "*Text* : ``Dodge the Creeps!``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1019
msgid "*Autowrap* : \"On\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1022
msgid "StartButton"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1024
msgid "*Text* : ``Start``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1025
msgid "*Layout* : \"Center Bottom\""
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1026
msgid "*Margin* :"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1028
msgid "Top: ``-200``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1029
msgid "Bottom: ``-100``"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1031
msgid "On the ``MessageTimer``, set the ``Wait Time`` to ``2`` and set the ``One Shot`` property to \"On\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1034
msgid "Now add this script to ``HUD``:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1053
msgid "The ``start_game`` signal tells the ``Main`` node that the button has been pressed."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1075
msgid "This function is called when we want to display a message temporarily, such as \"Get Ready\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1109
msgid "This function is called when the player loses. It will show \"Game Over\" for 2 seconds, then return to the title screen and, after a brief pause, show the \"Start\" button."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1113
msgid "When you need to pause for a brief time, an alternative to using a Timer node is to use the SceneTree's ``create_timer()`` function. This can be very useful to add delays such as in the above code, where we want to wait some time before showing the \"Start\" button."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1131
msgid "This function is called by ``Main`` whenever the score changes."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1133
msgid "Connect the ``timeout()`` signal of ``MessageTimer`` and the ``pressed()`` signal of ``StartButton`` and add the following code to the new functions:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1161
msgid "Connecting HUD to Main"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1163
msgid "Now that we're done creating the ``HUD`` scene, go back to ``Main``. Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` scene. The scene tree should look like this, so make sure you didn't miss anything:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1169
msgid "Now we need to connect the ``HUD`` functionality to our ``Main`` script. This requires a few additions to the ``Main`` scene:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1172
msgid "In the Node tab, connect the HUD's ``start_game`` signal to the ``new_game()`` function of the Main node by typing \"new_game\" in the \"Receiver Method\" in the \"Connect a Signal\" window. Verify that the green connection icon now appears next to ``func new_game()`` in the script."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1177
msgid "In ``new_game()``, update the score display and show the \"Get Ready\" message:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1192
msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1203
msgid "Finally, add this to ``_on_ScoreTimer_timeout()`` to keep the display in sync with the changing score:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1215
msgid "Now you're ready to play! Click the \"Play the Project\" button. You will be asked to select a main scene, so choose ``Main.tscn``."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1219
msgid "Removing old creeps"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1221
msgid "If you play until \"Game Over\" and then start a new game right away, the creeps from the previous game may still be on the screen. It would be better if they all disappeared at the start of a new game. We just need a way to tell *all* the mobs to remove themselves. We can do this with the \"group\" feature."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1226
msgid "In the ``Mob`` scene, select the root node and click the \"Node\" tab next to the Inspector (the same place where you find the node's signals). Next to \"Signals\", click \"Groups\" and you can type a new group name and click \"Add\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1232
msgid "Now all mobs will be in the \"mobs\" group. We can then add the following line to the ``game_over()`` function in ``Main``:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1245
msgid "The ``call_group()`` function calls the named function on every node in a group - in this case we are telling every mob to delete itself."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1249
msgid "Finishing up"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1251
msgid "We have now completed all the functionality for our game. Below are some remaining steps to add a bit more \"juice\" to improve the game experience. Feel free to expand the gameplay with your own ideas."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1256
msgid "Background"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1258
msgid "The default gray background is not very appealing, so let's change its color. One way to do this is to use a :ref:`ColorRect <class_ColorRect>` node. Make it the first node under ``Main`` so that it will be drawn behind the other nodes. ``ColorRect`` only has one property: ``Color``. Choose a color you like and select \"Layout\" -> \"Full Rect\" so that it covers the screen."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1264
msgid "You could also add a background image, if you have one, by using a ``TextureRect`` node instead."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1268
msgid "Sound effects"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1270
msgid "Sound and music can be the single most effective way to add appeal to the game experience. In your game assets folder, you have two sound files: \"House In a Forest Loop.ogg\" for background music, and \"gameover.wav\" for when the player loses."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1275
msgid "Add two :ref:`AudioStreamPlayer <class_AudioStreamPlayer>` nodes as children of ``Main``. Name one of them ``Music`` and the other ``DeathSound``. On each one, click on the ``Stream`` property, select \"Load\", and choose the corresponding audio file."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1280
msgid "To play the music, add ``$Music.play()`` in the ``new_game()`` function and ``$Music.stop()`` in the ``game_over()`` function."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1283
msgid "Finally, add ``$DeathSound.play()`` in the ``game_over()`` function."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1286
msgid "Keyboard shortcut"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1288
msgid "Since the game is played with keyboard controls, it would be convenient if we could also start the game by pressing a key on the keyboard. We can do this with the \"Shortcut\" property of the ``Button`` node."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1292
msgid "In the ``HUD`` scene, select the ``StartButton`` and find its *Shortcut* property in the Inspector. Select \"New Shortcut\" and click on the \"Shortcut\" item. A second *Shortcut* property will appear. Select \"New InputEventAction\" and click the new \"InputEventAction\". Finally, in the *Action* property, type the name ``ui_select``. This is the default input event associated with the spacebar."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1300
msgid "Now when the start button appears, you can either click it or press :kbd:`Space` to start the game."
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1304
msgid "Project files"
msgstr ""

#: ../../docs/<generated>:1
msgid "You can find a completed version of this project at these locations:"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1307
msgid "https://github.com/kidscancode/Godot3_dodge/releases"
msgstr ""

#: ../../docs/getting_started/step_by_step/your_first_game.rst:1308
msgid "https://github.com/godotengine/godot-demo-projects"
msgstr ""

