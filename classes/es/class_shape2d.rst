:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Shape2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Shape2D:

Shape2D
=======

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`CapsuleShape2D<class_CapsuleShape2D>`, :ref:`CircleShape2D<class_CircleShape2D>`, :ref:`ConcavePolygonShape2D<class_ConcavePolygonShape2D>`, :ref:`ConvexPolygonShape2D<class_ConvexPolygonShape2D>`, :ref:`LineShape2D<class_LineShape2D>`, :ref:`RayShape2D<class_RayShape2D>`, :ref:`RectangleShape2D<class_RectangleShape2D>`, :ref:`SegmentShape2D<class_SegmentShape2D>`

Clase base para todas las formas 2D.

Descripción
----------------------

Clase base para todas las formas 2D. Todos los tipos de formas 2D heredan de esto.

Tutoriales
--------------------

- :doc:`../tutorials/physics/physics_introduction`

Propiedades
----------------------

+---------------------------+----------------------------------------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`custom_solver_bias<class_Shape2D_property_custom_solver_bias>` | ``0.0`` |
+---------------------------+----------------------------------------------------------------------+---------+

Métodos
--------------

+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`collide<class_Shape2D_method_collide>` **(** :ref:`Transform2D<class_Transform2D>` local_xform, :ref:`Shape2D<class_Shape2D>` with_shape, :ref:`Transform2D<class_Transform2D>` shape_xform **)**                                                                                                                                                   |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`collide_and_get_contacts<class_Shape2D_method_collide_and_get_contacts>` **(** :ref:`Transform2D<class_Transform2D>` local_xform, :ref:`Shape2D<class_Shape2D>` with_shape, :ref:`Transform2D<class_Transform2D>` shape_xform **)**                                                                                                                 |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`collide_with_motion<class_Shape2D_method_collide_with_motion>` **(** :ref:`Transform2D<class_Transform2D>` local_xform, :ref:`Vector2<class_Vector2>` local_motion, :ref:`Shape2D<class_Shape2D>` with_shape, :ref:`Transform2D<class_Transform2D>` shape_xform, :ref:`Vector2<class_Vector2>` shape_motion **)**                                   |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`collide_with_motion_and_get_contacts<class_Shape2D_method_collide_with_motion_and_get_contacts>` **(** :ref:`Transform2D<class_Transform2D>` local_xform, :ref:`Vector2<class_Vector2>` local_motion, :ref:`Shape2D<class_Shape2D>` with_shape, :ref:`Transform2D<class_Transform2D>` shape_xform, :ref:`Vector2<class_Vector2>` shape_motion **)** |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`draw<class_Shape2D_method_draw>` **(** :ref:`RID<class_RID>` canvas_item, :ref:`Color<class_Color>` color **)**                                                                                                                                                                                                                                     |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Shape2D_property_custom_solver_bias:

- :ref:`float<class_float>` **custom_solver_bias**

+-----------+-------------------------------+
| *Default* | ``0.0``                       |
+-----------+-------------------------------+
| *Setter*  | set_custom_solver_bias(value) |
+-----------+-------------------------------+
| *Getter*  | get_custom_solver_bias()      |
+-----------+-------------------------------+

La forma personalizada es un solucionador personalizado.

Descripciones de Métodos
------------------------------------------------

.. _class_Shape2D_method_collide:

- :ref:`bool<class_bool>` **collide** **(** :ref:`Transform2D<class_Transform2D>` local_xform, :ref:`Shape2D<class_Shape2D>` with_shape, :ref:`Transform2D<class_Transform2D>` shape_xform **)**

Devuelve ``true`` si esta forma está colisionando con otra.

Este método necesita la matriz de transformación de esta forma (``local_xform``), la forma para comprobar las colisiones con (``with_shape``), y la matriz de transformación de esa forma (``shape_xform``).

----

.. _class_Shape2D_method_collide_and_get_contacts:

- :ref:`Array<class_Array>` **collide_and_get_contacts** **(** :ref:`Transform2D<class_Transform2D>` local_xform, :ref:`Shape2D<class_Shape2D>` with_shape, :ref:`Transform2D<class_Transform2D>` shape_xform **)**

Devuelve una lista de los puntos donde esta forma toca a otra. Si no hay colisiones la lista está vacía.

Este método necesita la matriz de transformación de esta forma (``local_xform``), la forma para comprobar las colisiones con (``with_shape``), y la matriz de transformación de esa forma (``shape_xform``).

----

.. _class_Shape2D_method_collide_with_motion:

- :ref:`bool<class_bool>` **collide_with_motion** **(** :ref:`Transform2D<class_Transform2D>` local_xform, :ref:`Vector2<class_Vector2>` local_motion, :ref:`Shape2D<class_Shape2D>` with_shape, :ref:`Transform2D<class_Transform2D>` shape_xform, :ref:`Vector2<class_Vector2>` shape_motion **)**

Devuelve si esta forma chocaría con otra, si se aplicara un movimiento determinado.

Este método necesita la matriz de transformación de esta forma (``local_xform``), el movimiento a probar en esta forma (``local_motion``), la forma para comprobar las colisiones con (``with_shape``), la matriz de transformación de esa forma (``shape_xform``), y el movimiento a probar en el otro objeto (``shape_motion``).

----

.. _class_Shape2D_method_collide_with_motion_and_get_contacts:

- :ref:`Array<class_Array>` **collide_with_motion_and_get_contacts** **(** :ref:`Transform2D<class_Transform2D>` local_xform, :ref:`Vector2<class_Vector2>` local_motion, :ref:`Shape2D<class_Shape2D>` with_shape, :ref:`Transform2D<class_Transform2D>` shape_xform, :ref:`Vector2<class_Vector2>` shape_motion **)**

Devuelve una lista de los puntos en los que esta forma tocaría a otra, si se aplicara un movimiento determinado. Si no hay colisiones la lista está vacía.

Este método necesita la matriz de transformación de esta forma (``local_xform``), el movimiento a probar en esta forma (``local_motion``), la forma para comprobar las colisiones con (``with_shape``), la matriz de transformación de esa forma (``shape_xform``), y el movimiento a probar en el otro objeto (``shape_motion``).

----

.. _class_Shape2D_method_draw:

- void **draw** **(** :ref:`RID<class_RID>` canvas_item, :ref:`Color<class_Color>` color **)**

Dibuja una forma sólida en un :ref:`CanvasItem<class_CanvasItem>` con la API :ref:`VisualServer<class_VisualServer>` rellenada con el ``color`` especificado. El método exacto de dibujo es específico para cada forma y no puede ser configurado.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
