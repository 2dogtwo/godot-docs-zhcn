:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Object.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Object:

Object
======

**Inherited By:** :ref:`ARVRServer<class_ARVRServer>`, :ref:`AudioServer<class_AudioServer>`, :ref:`CameraServer<class_CameraServer>`, :ref:`ClassDB<class_ClassDB>`, :ref:`EditorFileSystemDirectory<class_EditorFileSystemDirectory>`, :ref:`EditorNavigationMeshGenerator<class_EditorNavigationMeshGenerator>`, :ref:`EditorSelection<class_EditorSelection>`, :ref:`EditorVCSInterface<class_EditorVCSInterface>`, :ref:`Engine<class_Engine>`, :ref:`Geometry<class_Geometry>`, :ref:`GodotSharp<class_GodotSharp>`, :ref:`IP<class_IP>`, :ref:`Input<class_Input>`, :ref:`InputMap<class_InputMap>`, :ref:`JNISingleton<class_JNISingleton>`, :ref:`JSON<class_JSON>`, :ref:`JSONRPC<class_JSONRPC>`, :ref:`JavaClassWrapper<class_JavaClassWrapper>`, :ref:`JavaScript<class_JavaScript>`, :ref:`MainLoop<class_MainLoop>`, :ref:`Marshalls<class_Marshalls>`, :ref:`Node<class_Node>`, :ref:`OS<class_OS>`, :ref:`Performance<class_Performance>`, :ref:`Physics2DDirectBodyState<class_Physics2DDirectBodyState>`, :ref:`Physics2DDirectSpaceState<class_Physics2DDirectSpaceState>`, :ref:`Physics2DServer<class_Physics2DServer>`, :ref:`PhysicsDirectBodyState<class_PhysicsDirectBodyState>`, :ref:`PhysicsDirectSpaceState<class_PhysicsDirectSpaceState>`, :ref:`PhysicsServer<class_PhysicsServer>`, :ref:`ProjectSettings<class_ProjectSettings>`, :ref:`Reference<class_Reference>`, :ref:`ResourceLoader<class_ResourceLoader>`, :ref:`ResourceSaver<class_ResourceSaver>`, :ref:`Time<class_Time>`, :ref:`TranslationServer<class_TranslationServer>`, :ref:`TreeItem<class_TreeItem>`, :ref:`UndoRedo<class_UndoRedo>`, :ref:`VisualScriptEditor<class_VisualScriptEditor>`, :ref:`VisualServer<class_VisualServer>`

Base class for all non-built-in types.

Descripción
----------------------

Every class which is not a built-in type inherits from this class.

You can construct Objects from scripting languages, using ``Object.new()`` in GDScript, ``new Object`` in C#, or the "Construct Object" node in VisualScript.

Objects do not manage memory. If a class inherits from Object, you will have to delete instances of it manually. To do so, call the :ref:`free<class_Object_method_free>` method from your script or delete the instance from C++.

Some classes that extend Object add memory management. This is the case of :ref:`Reference<class_Reference>`, which counts references and deletes itself automatically when no longer referenced. :ref:`Node<class_Node>`, another fundamental type, deletes all its children when freed from memory.

Objects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in :ref:`_get_property_list<class_Object_method__get_property_list>` and handled in :ref:`_get<class_Object_method__get>` and :ref:`_set<class_Object_method__set>`. However, scripting languages and C++ have simpler means to export them.

Property membership can be tested directly in GDScript using ``in``:

::

    var n = Node2D.new()
    print("position" in n) # Prints "True".
    print("other_property" in n) # Prints "False".

The ``in`` operator will evaluate to ``true`` as long as the key exists, even if the value is ``null``.

Objects also receive notifications. Notifications are a simple way to notify the object about different events, so they can all be handled together. See :ref:`_notification<class_Object_method__notification>`.

\ **Note:** Unlike references to a :ref:`Reference<class_Reference>`, references to an Object stored in a variable can become invalid without warning. Therefore, it's recommended to use :ref:`Reference<class_Reference>` for data classes instead of ``Object``.

\ **Note:** Due to a bug, you can't create a "plain" Object using ``Object.new()``. Instead, use ``ClassDB.instance("Object")``. This bug only applies to Object itself, not any of its descendents like :ref:`Reference<class_Reference>`.

Tutoriales
--------------------

- :doc:`When and how to avoid using nodes for everything <../tutorials/best_practices/node_alternatives>`

- `Advanced exports using _get_property_list() <../tutorials/scripting/gdscript/gdscript_exports.html#advanced-exports>`__

Métodos
--------------

+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                 | :ref:`_get<class_Object_method__get>` **(** :ref:`String<class_String>` property **)** |virtual|                                                                                                                                        |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                     | :ref:`_get_property_list<class_Object_method__get_property_list>` **(** **)** |virtual|                                                                                                                                                 |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`_init<class_Object_method__init>` **(** **)** |virtual|                                                                                                                                                                           |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`_notification<class_Object_method__notification>` **(** :ref:`int<class_int>` what **)** |virtual|                                                                                                                                |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`_set<class_Object_method__set>` **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)** |virtual|                                                                                                   |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                   | :ref:`_to_string<class_Object_method__to_string>` **(** **)** |virtual|                                                                                                                                                                 |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`add_user_signal<class_Object_method_add_user_signal>` **(** :ref:`String<class_String>` signal, :ref:`Array<class_Array>` arguments=[  ] **)**                                                                                    |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                 | :ref:`call<class_Object_method_call>` **(** :ref:`String<class_String>` method, ... **)** |vararg|                                                                                                                                      |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`call_deferred<class_Object_method_call_deferred>` **(** :ref:`String<class_String>` method, ... **)** |vararg|                                                                                                                    |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                 | :ref:`callv<class_Object_method_callv>` **(** :ref:`String<class_String>` method, :ref:`Array<class_Array>` arg_array **)**                                                                                                             |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`can_translate_messages<class_Object_method_can_translate_messages>` **(** **)** |const|                                                                                                                                           |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`         | :ref:`connect<class_Object_method_connect>` **(** :ref:`String<class_String>` signal, :ref:`Object<class_Object>` target, :ref:`String<class_String>` method, :ref:`Array<class_Array>` binds=[  ], :ref:`int<class_int>` flags=0 **)** |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`disconnect<class_Object_method_disconnect>` **(** :ref:`String<class_String>` signal, :ref:`Object<class_Object>` target, :ref:`String<class_String>` method **)**                                                                |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`emit_signal<class_Object_method_emit_signal>` **(** :ref:`String<class_String>` signal, ... **)** |vararg|                                                                                                                        |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`free<class_Object_method_free>` **(** **)**                                                                                                                                                                                       |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                 | :ref:`get<class_Object_method_get>` **(** :ref:`String<class_String>` property **)** |const|                                                                                                                                            |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                   | :ref:`get_class<class_Object_method_get_class>` **(** **)** |const|                                                                                                                                                                     |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                     | :ref:`get_incoming_connections<class_Object_method_get_incoming_connections>` **(** **)** |const|                                                                                                                                       |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                 | :ref:`get_indexed<class_Object_method_get_indexed>` **(** :ref:`NodePath<class_NodePath>` property **)** |const|                                                                                                                        |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`get_instance_id<class_Object_method_get_instance_id>` **(** **)** |const|                                                                                                                                                         |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                 | :ref:`get_meta<class_Object_method_get_meta>` **(** :ref:`String<class_String>` name **)** |const|                                                                                                                                      |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolStringArray<class_PoolStringArray>` | :ref:`get_meta_list<class_Object_method_get_meta_list>` **(** **)** |const|                                                                                                                                                             |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                     | :ref:`get_method_list<class_Object_method_get_method_list>` **(** **)** |const|                                                                                                                                                         |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                     | :ref:`get_property_list<class_Object_method_get_property_list>` **(** **)** |const|                                                                                                                                                     |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Reference<class_Reference>`             | :ref:`get_script<class_Object_method_get_script>` **(** **)** |const|                                                                                                                                                                   |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                     | :ref:`get_signal_connection_list<class_Object_method_get_signal_connection_list>` **(** :ref:`String<class_String>` signal **)** |const|                                                                                                |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                     | :ref:`get_signal_list<class_Object_method_get_signal_list>` **(** **)** |const|                                                                                                                                                         |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`has_meta<class_Object_method_has_meta>` **(** :ref:`String<class_String>` name **)** |const|                                                                                                                                      |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`has_method<class_Object_method_has_method>` **(** :ref:`String<class_String>` method **)** |const|                                                                                                                                |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`has_signal<class_Object_method_has_signal>` **(** :ref:`String<class_String>` signal **)** |const|                                                                                                                                |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`has_user_signal<class_Object_method_has_user_signal>` **(** :ref:`String<class_String>` signal **)** |const|                                                                                                                      |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`is_blocking_signals<class_Object_method_is_blocking_signals>` **(** **)** |const|                                                                                                                                                 |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`is_class<class_Object_method_is_class>` **(** :ref:`String<class_String>` class **)** |const|                                                                                                                                     |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`is_connected<class_Object_method_is_connected>` **(** :ref:`String<class_String>` signal, :ref:`Object<class_Object>` target, :ref:`String<class_String>` method **)** |const|                                                    |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`is_queued_for_deletion<class_Object_method_is_queued_for_deletion>` **(** **)** |const|                                                                                                                                           |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`notification<class_Object_method_notification>` **(** :ref:`int<class_int>` what, :ref:`bool<class_bool>` reversed=false **)**                                                                                                    |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`property_list_changed_notify<class_Object_method_property_list_changed_notify>` **(** **)**                                                                                                                                       |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`remove_meta<class_Object_method_remove_meta>` **(** :ref:`String<class_String>` name **)**                                                                                                                                        |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`set<class_Object_method_set>` **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                                                                                               |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`set_block_signals<class_Object_method_set_block_signals>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                              |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`set_deferred<class_Object_method_set_deferred>` **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                                                                             |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`set_indexed<class_Object_method_set_indexed>` **(** :ref:`NodePath<class_NodePath>` property, :ref:`Variant<class_Variant>` value **)**                                                                                           |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`set_message_translation<class_Object_method_set_message_translation>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                  |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`set_meta<class_Object_method_set_meta>` **(** :ref:`String<class_String>` name, :ref:`Variant<class_Variant>` value **)**                                                                                                         |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`set_script<class_Object_method_set_script>` **(** :ref:`Reference<class_Reference>` script **)**                                                                                                                                  |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                   | :ref:`to_string<class_Object_method_to_string>` **(** **)**                                                                                                                                                                             |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                   | :ref:`tr<class_Object_method_tr>` **(** :ref:`String<class_String>` message **)** |const|                                                                                                                                               |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_Object_signal_script_changed:

- **script_changed** **(** **)**

Emitido cada vez que se cambia el script del objeto.

Enumeraciones
--------------------------

.. _enum_Object_ConnectFlags:

.. _class_Object_constant_CONNECT_DEFERRED:

.. _class_Object_constant_CONNECT_PERSIST:

.. _class_Object_constant_CONNECT_ONESHOT:

.. _class_Object_constant_CONNECT_REFERENCE_COUNTED:

enum **ConnectFlags**:

- **CONNECT_DEFERRED** = **1** --- Conecta una señal en modo diferido. De esta manera, las emisiones de la señal se almacenan en una cola, y luego se ajustan al tiempo de inactividad.

- **CONNECT_PERSIST** = **2** --- Las conexiones persistentes se guardan cuando el objeto se serializa en un archivo.

- **CONNECT_ONESHOT** = **4** --- Las conexiones de one-shot se desconectan después de la emisión.

- **CONNECT_REFERENCE_COUNTED** = **8** --- Conecta una señal como contador de referencias. Esto significa que una señal dada puede conectarse varias veces al mismo objetivo, y sólo se desconectará completamente cuando no queden referencias en el contador.

Constantes
--------------------

.. _class_Object_constant_NOTIFICATION_POSTINITIALIZE:

.. _class_Object_constant_NOTIFICATION_PREDELETE:

- **NOTIFICATION_POSTINITIALIZE** = **0** --- Se llama así cuando el objeto se inicializa. No está disponible en el script.

- **NOTIFICATION_PREDELETE** = **1** --- Llamado antes de que el objeto esté a punto de ser eliminado.

Descripciones de Métodos
------------------------------------------------

.. _class_Object_method__get:

- :ref:`Variant<class_Variant>` **_get** **(** :ref:`String<class_String>` property **)** |virtual|

Método virtual que puede ser anulado para personalizar el valor de retorno de :ref:`get<class_Object_method_get>`.

Devuelve la propiedad dada. Devuelve ``null`` si la ``property`` no existe.

----

.. _class_Object_method__get_property_list:

- :ref:`Array<class_Array>` **_get_property_list** **(** **)** |virtual|

Método virtual que puede ser anulado para personalizar el valor de retorno de :ref:`get_property_list<class_Object_method_get_property_list>`.

Devuelve la lista de propiedades del objeto como un :ref:`Array<class_Array>` de diccionarios.

El :ref:`Dictionary<class_Dictionary>` de cada propiedad debe contener al menos entradas de ``name: String`` y ``type: int`` (ver :ref:`Variant.Type<enum_@GlobalScope_Variant.Type>`). Opcionalmente, también puede incluir ``hint: int`` (ver :ref:`PropertyHint<enum_@GlobalScope_PropertyHint>`), ``hint_string: String``, y ``usage: int`` (ver :ref:`PropertyUsageFlags<enum_@GlobalScope_PropertyUsageFlags>`).

----

.. _class_Object_method__init:

- void **_init** **(** **)** |virtual|

Se llama cuando el objeto se inicializa.

----

.. _class_Object_method__notification:

- void **_notification** **(** :ref:`int<class_int>` what **)** |virtual|

Llamado cada vez que el objeto recibe una notificación, que se identifica en ``what`` por una constante. La base ``Object`` tiene dos constantes :ref:`NOTIFICATION_POSTINITIALIZE<class_Object_constant_NOTIFICATION_POSTINITIALIZE>` y :ref:`NOTIFICATION_PREDELETE<class_Object_constant_NOTIFICATION_PREDELETE>`, pero subclases como :ref:`Node<class_Node>` definen muchas más notificaciones que también se reciben por este método.

----

.. _class_Object_method__set:

- :ref:`bool<class_bool>` **_set** **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)** |virtual|

Método virtual que puede ser anulado para personalizar el valor de retorno de :ref:`set<class_Object_method_set>`.

Establece una propiedad. Devuelve ``true`` si existe la ``property``.

----

.. _class_Object_method__to_string:

- :ref:`String<class_String>` **_to_string** **(** **)** |virtual|

Método virtual que puede ser anulado para personalizar el valor de retorno de :ref:`to_string<class_Object_method_to_string>`, y por lo tanto la representación del objeto donde se convierte en una cadena, por ejemplo con ``print(obj)``.

Devuelve una :ref:`String<class_String>` que representa el objeto. Si no se anula, por defecto es ``"[ClassName:RID]"``.

----

.. _class_Object_method_add_user_signal:

- void **add_user_signal** **(** :ref:`String<class_String>` signal, :ref:`Array<class_Array>` arguments=[  ] **)**

Añade una ``signal`` definida por el usuario. Los argumentos son opcionales, pero pueden añadirse como una :ref:`Array<class_Array>` de diccionarios, cada uno de los cuales contiene entradas de ``name: String`` y ``type: int`` (véase :ref:`Variant.Type<enum_@GlobalScope_Variant.Type>`).

----

.. _class_Object_method_call:

- :ref:`Variant<class_Variant>` **call** **(** :ref:`String<class_String>` method, ... **)** |vararg|

Llama al ``method`` en el objeto y devuelve el resultado. Este método soporta un número variable de argumentos, por lo que los parámetros se pasan como una lista separada por comas. Ejemplo:

::

    call("set", "position", Vector2(42.0, 0.0))

\ **Nota:** En C#, el nombre del método debe especificarse como snake_case si está definido por un nodo Godot incorporado. Esto no se aplica a los métodos definidos por el usuario, en los que se debe utilizar la misma convención que en el código fuente de C# (típicamente PascalCase).

----

.. _class_Object_method_call_deferred:

- void **call_deferred** **(** :ref:`String<class_String>` method, ... **)** |vararg|

Llama al ``method`` en el objeto durante el tiempo de inactividad. Este método soporta un número variable de argumentos, por lo que los parámetros se pasan como una lista separada por comas. Ejemplo:

::

    call_deferred("set", "position", Vector2(42.0, 0.0))

\ **Nota:** En C#, el nombre del método debe especificarse como snake_case si está definido por un nodo Godot incorporado. Esto no se aplica a los métodos definidos por el usuario, en los que se debe utilizar la misma convención que en el código fuente de C# (típicamente PascalCase).

----

.. _class_Object_method_callv:

- :ref:`Variant<class_Variant>` **callv** **(** :ref:`String<class_String>` method, :ref:`Array<class_Array>` arg_array **)**

Llama al ``method`` en el objeto y devuelve el resultado. A diferencia de :ref:`call<class_Object_method_call>`, este método no soporta un número variable de argumentos, sino que espera que todos los parámetros sean a través de un único :ref:`Array<class_Array>`.

::

    callv("set", [ "position", Vector2(42.0, 0.0) ])

----

.. _class_Object_method_can_translate_messages:

- :ref:`bool<class_bool>` **can_translate_messages** **(** **)** |const|

Devuelve ``true`` si el objeto puede traducir cadenas. Ver :ref:`set_message_translation<class_Object_method_set_message_translation>` y :ref:`tr<class_Object_method_tr>`.

----

.. _class_Object_method_connect:

- :ref:`Error<enum_@GlobalScope_Error>` **connect** **(** :ref:`String<class_String>` signal, :ref:`Object<class_Object>` target, :ref:`String<class_String>` method, :ref:`Array<class_Array>` binds=[  ], :ref:`int<class_int>` flags=0 **)**

Connects a ``signal`` to a ``method`` on a ``target`` object. Pass optional ``binds`` to the call as an :ref:`Array<class_Array>` of parameters. These parameters will be passed to the method after any parameter used in the call to :ref:`emit_signal<class_Object_method_emit_signal>`. Use ``flags`` to set deferred or one-shot connections. See :ref:`ConnectFlags<enum_Object_ConnectFlags>` constants.

A ``signal`` can only be connected once to a ``method``. It will throw an error if already connected, unless the signal was connected with :ref:`CONNECT_REFERENCE_COUNTED<class_Object_constant_CONNECT_REFERENCE_COUNTED>`. To avoid this, first, use :ref:`is_connected<class_Object_method_is_connected>` to check for existing connections.

If the ``target`` is destroyed in the game's lifecycle, the connection will be lost.

Examples:

::

    connect("pressed", self, "_on_Button_pressed") # BaseButton signal
    connect("text_entered", self, "_on_LineEdit_text_entered") # LineEdit signal
    connect("hit", self, "_on_Player_hit", [ weapon_type, damage ]) # User-defined signal

An example of the relationship between ``binds`` passed to :ref:`connect<class_Object_method_connect>` and parameters used when calling :ref:`emit_signal<class_Object_method_emit_signal>`:

::

    connect("hit", self, "_on_Player_hit", [ weapon_type, damage ]) # weapon_type and damage are passed last
    emit_signal("hit", "Dark lord", 5) # "Dark lord" and 5 are passed first
    func _on_Player_hit(hit_by, level, weapon_type, damage):
        print("Hit by %s (lvl %d) with weapon %s for %d damage" % [hit_by, level, weapon_type, damage])

----

.. _class_Object_method_disconnect:

- void **disconnect** **(** :ref:`String<class_String>` signal, :ref:`Object<class_Object>` target, :ref:`String<class_String>` method **)**

Disconnects a ``signal`` from a ``method`` on the given ``target``.

If you try to disconnect a connection that does not exist, the method will throw an error. Use :ref:`is_connected<class_Object_method_is_connected>` to ensure that the connection exists.

----

.. _class_Object_method_emit_signal:

- void **emit_signal** **(** :ref:`String<class_String>` signal, ... **)** |vararg|

Emite la ``signal``. La señal debe existir, por lo que debe ser una señal incorporada de esta clase o de una de sus clases superiores, o una señal definida por el usuario. Este método admite un número variable de argumentos, por lo que los parámetros se pasan como una lista separada por comas. Ejemplo:

::

    emit_signal("golpe", tipo_arma, daño)
    emit_signal("Juego_Terminado")

----

.. _class_Object_method_free:

- void **free** **(** **)**

Deletes the object from memory immediately. For :ref:`Node<class_Node>`\ s, you may want to use :ref:`Node.queue_free<class_Node_method_queue_free>` to queue the node for safe deletion at the end of the current frame.

\ **Important:** If you have a variable pointing to an object, it will *not* be assigned to ``null`` once the object is freed. Instead, it will point to a *previously freed instance* and you should validate it with :ref:`@GDScript.is_instance_valid<class_@GDScript_method_is_instance_valid>` before attempting to call its methods or access its properties.

----

.. _class_Object_method_get:

- :ref:`Variant<class_Variant>` **get** **(** :ref:`String<class_String>` property **)** |const|

Devuelve el valor de la :ref:`Variant<class_Variant>` de la ``property``. Si la ``property`` no existe, esto devolverá ``null``.

\ **Nota:** En C#, el nombre de la propiedad debe especificarse como snake_case si está definida por un nodo Godot incorporado. Esto no se aplica a las propiedades definidas por el usuario, en las que se debe utilizar la misma convención que en el código fuente de C# (típicamente PascalCase).

----

.. _class_Object_method_get_class:

- :ref:`String<class_String>` **get_class** **(** **)** |const|

Returns the object's class as a :ref:`String<class_String>`. See also :ref:`is_class<class_Object_method_is_class>`.

\ **Note:** :ref:`get_class<class_Object_method_get_class>` does not take ``class_name`` declarations into account. If the object has a ``class_name`` defined, the base class name will be returned instead.

----

.. _class_Object_method_get_incoming_connections:

- :ref:`Array<class_Array>` **get_incoming_connections** **(** **)** |const|

Devuelve un :ref:`Array<class_Array>` de diccionarios con información sobre las señales que están conectadas al objeto.

Cada :ref:`Dictionary<class_Dictionary>` contiene tres entradas String:

- ``source`` es una referencia al emisor de la señal.

- ``signal_name`` es el nombre de la señal conectada.

- ``method_name`` es el nombre del método al que está conectada la señal.

----

.. _class_Object_method_get_indexed:

- :ref:`Variant<class_Variant>` **get_indexed** **(** :ref:`NodePath<class_NodePath>` property **)** |const|

Gets the object's property indexed by the given :ref:`NodePath<class_NodePath>`. The node path should be relative to the current object and can use the colon character (``:``) to access nested properties. Examples: ``"position:x"`` or ``"material:next_pass:blend_mode"``.

\ **Note:** Even though the method takes :ref:`NodePath<class_NodePath>` argument, it doesn't support actual paths to :ref:`Node<class_Node>`\ s in the scene tree, only colon-separated sub-property paths. For the purpose of nodes, use :ref:`Node.get_node_and_resource<class_Node_method_get_node_and_resource>` instead.

----

.. _class_Object_method_get_instance_id:

- :ref:`int<class_int>` **get_instance_id** **(** **)** |const|

Devuelve la identificación de instancia única del objeto.

Este ID puede guardarse en :ref:`EncodedObjectAsID<class_EncodedObjectAsID>`, y puede utilizarse para recuperar la instancia del objeto con :ref:`@GDScript.instance_from_id<class_@GDScript_method_instance_from_id>`.

----

.. _class_Object_method_get_meta:

- :ref:`Variant<class_Variant>` **get_meta** **(** :ref:`String<class_String>` name **)** |const|

Devuelve la entrada de metadatos del objeto para el ``name`` dado.

----

.. _class_Object_method_get_meta_list:

- :ref:`PoolStringArray<class_PoolStringArray>` **get_meta_list** **(** **)** |const|

Returns the object's metadata as a :ref:`PoolStringArray<class_PoolStringArray>`.

----

.. _class_Object_method_get_method_list:

- :ref:`Array<class_Array>` **get_method_list** **(** **)** |const|

Devuelve los métodos del objeto y sus firmas como un :ref:`Array<class_Array>`.

----

.. _class_Object_method_get_property_list:

- :ref:`Array<class_Array>` **get_property_list** **(** **)** |const|

Devuelve la lista de propiedades del objeto como una :ref:`Array<class_Array>` de diccionarios.

El :ref:`Dictionary<class_Dictionary>` de cada propiedad contiene al menos entradas de ``name: String`` y ``type: int`` (véase :ref:`Variant.Type<enum_@GlobalScope_Variant.Type>`). Opcionalmente, también puede incluir ``hint: int`` (ver :ref:`PropertyHint<enum_@GlobalScope_PropertyHint>`), ``hint_string: String``, y ``usage: int`` (ver :ref:`PropertyUsageFlags<enum_@GlobalScope_PropertyUsageFlags>`).

----

.. _class_Object_method_get_script:

- :ref:`Reference<class_Reference>` **get_script** **(** **)** |const|

Devuelve la instancia de :ref:`Script<class_Script>` del objeto, o ``null`` si no hay ninguna asignada.

----

.. _class_Object_method_get_signal_connection_list:

- :ref:`Array<class_Array>` **get_signal_connection_list** **(** :ref:`String<class_String>` signal **)** |const|

Devuelve un :ref:`Array<class_Array>` de conexiones para la ``signal`` dada.

----

.. _class_Object_method_get_signal_list:

- :ref:`Array<class_Array>` **get_signal_list** **(** **)** |const|

Devuelve la lista de señales como un :ref:`Array<class_Array>` de diccionarios.

----

.. _class_Object_method_has_meta:

- :ref:`bool<class_bool>` **has_meta** **(** :ref:`String<class_String>` name **)** |const|

Devuelve ``true`` si se encuentra una entrada de metadatos con el ``name`` dado.

----

.. _class_Object_method_has_method:

- :ref:`bool<class_bool>` **has_method** **(** :ref:`String<class_String>` method **)** |const|

Devuelve ``true`` si el objeto contiene el ``method`` dado.

----

.. _class_Object_method_has_signal:

- :ref:`bool<class_bool>` **has_signal** **(** :ref:`String<class_String>` signal **)** |const|

Devuelve ``true`` si existe la ``signal`` dada.

----

.. _class_Object_method_has_user_signal:

- :ref:`bool<class_bool>` **has_user_signal** **(** :ref:`String<class_String>` signal **)** |const|

Devuelve ``true`` si existe la ``signal`` definida por el usuario. Sólo se tienen en cuenta las señales añadidas mediante :ref:`add_user_signal<class_Object_method_add_user_signal>`.

----

.. _class_Object_method_is_blocking_signals:

- :ref:`bool<class_bool>` **is_blocking_signals** **(** **)** |const|

Devuelve ``true`` si el bloqueo de la emisión de la señal está activado.

----

.. _class_Object_method_is_class:

- :ref:`bool<class_bool>` **is_class** **(** :ref:`String<class_String>` class **)** |const|

Returns ``true`` if the object inherits from the given ``class``. See also :ref:`get_class<class_Object_method_get_class>`.

\ **Note:** :ref:`is_class<class_Object_method_is_class>` does not take ``class_name`` declarations into account. If the object has a ``class_name`` defined, :ref:`is_class<class_Object_method_is_class>` will return ``false`` for that name.

----

.. _class_Object_method_is_connected:

- :ref:`bool<class_bool>` **is_connected** **(** :ref:`String<class_String>` signal, :ref:`Object<class_Object>` target, :ref:`String<class_String>` method **)** |const|

Returns ``true`` if a connection exists for a given ``signal``, ``target``, and ``method``.

----

.. _class_Object_method_is_queued_for_deletion:

- :ref:`bool<class_bool>` **is_queued_for_deletion** **(** **)** |const|

Devuelve ``true`` si el método :ref:`Node.queue_free<class_Node_method_queue_free>` fue llamado para el objeto.

----

.. _class_Object_method_notification:

- void **notification** **(** :ref:`int<class_int>` what, :ref:`bool<class_bool>` reversed=false **)**

Envíe una notificación determinada al objeto, que también activará una llamada al método :ref:`_notification<class_Object_method__notification>` de todas las clases de las que hereda el objeto.

Si ``reversed`` es ``true``, :ref:`_notification<class_Object_method__notification>` es llamado primero a la clase propia del objeto, y luego hasta sus sucesivas clases parentales. Si ``reversed`` es ``false``, :ref:`_notification<class_Object_method__notification>` es llamado primero en el ancestro más alto (``Object`` itself), y luego hasta sus sucesivas clases hereditarias.

----

.. _class_Object_method_property_list_changed_notify:

- void **property_list_changed_notify** **(** **)**

Notifica al editor que la lista de propiedades ha cambiado, para que los plugins del editor puedan tener en cuenta los nuevos valores. No hace nada en las construcciones de exportación.

----

.. _class_Object_method_remove_meta:

- void **remove_meta** **(** :ref:`String<class_String>` name **)**

Removes a given entry from the object's metadata. See also :ref:`set_meta<class_Object_method_set_meta>`.

----

.. _class_Object_method_set:

- void **set** **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

Asigna un nuevo valor a la propiedad dada. Si la ``property`` no existe, no pasará nada.

\ **Nota:** En C#, el nombre de la propiedad debe especificarse como snake_case si está definida por un nodo Godot incorporado. Esto no se aplica a las propiedades definidas por el usuario, donde se debe usar la misma convención que en el código fuente de C# (típicamente PascalCase).

----

.. _class_Object_method_set_block_signals:

- void **set_block_signals** **(** :ref:`bool<class_bool>` enable **)**

Si se ajusta a ``true``, la emisión de la señal se bloquea.

----

.. _class_Object_method_set_deferred:

- void **set_deferred** **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

Asigna un nuevo valor a la propiedad dada, después del paso de la física del marco actual. Esto equivale a llamar a :ref:`set<class_Object_method_set>` mediante :ref:`call_deferred<class_Object_method_call_deferred>`, es decir, ``call_deferred("set", property, value)``.

\ **Nota:** En C#, el nombre de la propiedad debe especificarse como snake_case si está definido por un nodo Godot incorporado. Esto no se aplica a las propiedades definidas por el usuario, en las que se debe utilizar la misma convención que en el código fuente de C# (típicamente PascalCase).

----

.. _class_Object_method_set_indexed:

- void **set_indexed** **(** :ref:`NodePath<class_NodePath>` property, :ref:`Variant<class_Variant>` value **)**

Asigna un nuevo valor a la propiedad identificada por el :ref:`NodePath<class_NodePath>`. La ruta del nodo debe ser relativa al objeto actual y puede utilizar el carácter de dos puntos (``:``) para acceder a las propiedades anidadas. 

::

    set_indexed("position", Vector2(42, 0))
    set_indexed("position:y", -10)
    print(position) # (42, -10)

----

.. _class_Object_method_set_message_translation:

- void **set_message_translation** **(** :ref:`bool<class_bool>` enable **)**

Define si el objeto puede traducir strings (con llamadas a :ref:`tr<class_Object_method_tr>`). Habilitado por defecto.

----

.. _class_Object_method_set_meta:

- void **set_meta** **(** :ref:`String<class_String>` name, :ref:`Variant<class_Variant>` value **)**

Adds, changes or removes a given entry in the object's metadata. Metadata are serialized and can take any :ref:`Variant<class_Variant>` value.

To remove a given entry from the object's metadata, use :ref:`remove_meta<class_Object_method_remove_meta>`. Metadata is also removed if its value is set to ``null``. This means you can also use ``set_meta("name", null)`` to remove metadata for ``"name"``.

----

.. _class_Object_method_set_script:

- void **set_script** **(** :ref:`Reference<class_Reference>` script **)**

Asigna un script al objeto. Cada objeto puede tener asignado un único script, que se utiliza para ampliar su funcionalidad.

Si el objeto ya tenía un script, la instancia anterior del script se liberará y sus variables y estado se perderán. Se llamará al método :ref:`_init<class_Object_method__init>` del nuevo script.

----

.. _class_Object_method_to_string:

- :ref:`String<class_String>` **to_string** **(** **)**

Devuelve una :ref:`String<class_String>` que representa el objeto. Si no está anulado, por defecto es ``"[ClassName:RID]"``.

Anula el método :ref:`_to_string<class_Object_method__to_string>` para personalizar la representación de :ref:`String<class_String>`.

----

.. _class_Object_method_tr:

- :ref:`String<class_String>` **tr** **(** :ref:`String<class_String>` message **)** |const|

Traduce un mensaje usando los catálogos de traducción configurados en la Configuración del proyecto.

Sólo funciona si la traducción del mensaje está activada (lo cual esta por defecto), de lo contrario devuelve el ``message`` sin cambios. Ver :ref:`set_message_translation<class_Object_method_set_message_translation>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
