:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Transform.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Transform:

Transform
=========

Transformación 3D (matriz 3×4).

Descripción
----------------------

Matriz de 3×4 (3 filas, 4 columnas) usada para transformaciones lineales 3D. Puede representar transformaciones como la traslación, la rotación o el escalado. Consta de una :ref:`basis<class_Transform_property_basis>` (3 primeras columnas) y un :ref:`Vector3<class_Vector3>` para el :ref:`origin<class_Transform_property_origin>` (última columna).

Para más información, lea el artículo de documentación "Matrices y transformaciones".

Tutoriales
--------------------

- :doc:`Math tutorial index <../tutorials/math/index>`

- :doc:`Matrices and transforms <../tutorials/math/matrices_and_transforms>`

- :doc:`Using 3D transforms <../tutorials/3d/using_transforms>`

- `Matrix Transform Demo <https://godotengine.org/asset-library/asset/584>`__

- `3D Platformer Demo <https://godotengine.org/asset-library/asset/125>`__

- `2.5D Demo <https://godotengine.org/asset-library/asset/583>`__

Propiedades
----------------------

+-------------------------------+------------------------------------------------+----------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`basis<class_Transform_property_basis>`   | ``Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )`` |
+-------------------------------+------------------------------------------------+----------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`origin<class_Transform_property_origin>` | ``Vector3( 0, 0, 0 )``                 |
+-------------------------------+------------------------------------------------+----------------------------------------+

Métodos
--------------

+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`Transform<class_Transform_method_Transform>` **(** :ref:`Vector3<class_Vector3>` x_axis, :ref:`Vector3<class_Vector3>` y_axis, :ref:`Vector3<class_Vector3>` z_axis, :ref:`Vector3<class_Vector3>` origin **)** |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`Transform<class_Transform_method_Transform>` **(** :ref:`Basis<class_Basis>` basis, :ref:`Vector3<class_Vector3>` origin **)**                                                                                  |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`Transform<class_Transform_method_Transform>` **(** :ref:`Transform2D<class_Transform2D>` from **)**                                                                                                             |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`Transform<class_Transform_method_Transform>` **(** :ref:`Quat<class_Quat>` from **)**                                                                                                                           |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`Transform<class_Transform_method_Transform>` **(** :ref:`Basis<class_Basis>` from **)**                                                                                                                         |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`affine_inverse<class_Transform_method_affine_inverse>` **(** **)**                                                                                                                                              |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`interpolate_with<class_Transform_method_interpolate_with>` **(** :ref:`Transform<class_Transform>` transform, :ref:`float<class_float>` weight **)**                                                            |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`inverse<class_Transform_method_inverse>` **(** **)**                                                                                                                                                            |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_equal_approx<class_Transform_method_is_equal_approx>` **(** :ref:`Transform<class_Transform>` transform **)**                                                                                                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`looking_at<class_Transform_method_looking_at>` **(** :ref:`Vector3<class_Vector3>` target, :ref:`Vector3<class_Vector3>` up **)**                                                                               |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`orthonormalized<class_Transform_method_orthonormalized>` **(** **)**                                                                                                                                            |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`rotated<class_Transform_method_rotated>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` phi **)**                                                                                          |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`scaled<class_Transform_method_scaled>` **(** :ref:`Vector3<class_Vector3>` scale **)**                                                                                                                          |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`translated<class_Transform_method_translated>` **(** :ref:`Vector3<class_Vector3>` offset **)**                                                                                                                 |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`xform<class_Transform_method_xform>` **(** :ref:`Variant<class_Variant>` v **)**                                                                                                                                |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`xform_inv<class_Transform_method_xform_inv>` **(** :ref:`Variant<class_Variant>` v **)**                                                                                                                        |
+-----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Constantes
--------------------

.. _class_Transform_constant_IDENTITY:

.. _class_Transform_constant_FLIP_X:

.. _class_Transform_constant_FLIP_Y:

.. _class_Transform_constant_FLIP_Z:

- **IDENTITY** = **Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )** --- ``Transform`` sin aplicar traslación, rotación o escalamiento. Cuando se aplica a otras estructuras de datos, :ref:`IDENTITY<class_Transform_constant_IDENTITY>` no realiza ninguna transformación.

- **FLIP_X** = **Transform( -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )** --- ``Transform`` con el espejo aplicado perpendicularmente al plano YZ.

- **FLIP_Y** = **Transform( 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0 )** --- ``Transform`` con el espejo aplicado perpendicularmente al plano XZ.

- **FLIP_Z** = **Transform( 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0 )** --- ``Transform`` con el espejo aplicado perpendicularmente al plano XY.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Transform_property_basis:

- :ref:`Basis<class_Basis>` **basis**

+-----------+----------------------------------------+
| *Default* | ``Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )`` |
+-----------+----------------------------------------+

La base es una matriz que contiene 3 :ref:`Vector3<class_Vector3>` como sus columnas: Eje X, eje Y y eje Z. Estos vectores pueden ser interpretados como los vectores base del sistema de coordenadas locales que viajan con el objeto.

----

.. _class_Transform_property_origin:

- :ref:`Vector3<class_Vector3>` **origin**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 0, 0 )`` |
+-----------+------------------------+

El desplazamiento de la translación en la transformada (columna 3, la cuarta columna). Equivalente al índice del array ``3``.

Descripciones de Métodos
------------------------------------------------

.. _class_Transform_method_Transform:

- :ref:`Transform<class_Transform>` **Transform** **(** :ref:`Vector3<class_Vector3>` x_axis, :ref:`Vector3<class_Vector3>` y_axis, :ref:`Vector3<class_Vector3>` z_axis, :ref:`Vector3<class_Vector3>` origin **)**

Construye una Transformada a partir de cuatro valores :ref:`Vector3<class_Vector3>` (columnas de la matriz). Cada eje corresponde a vectores de base local (algunos de los cuales pueden ser escalados).

----

- :ref:`Transform<class_Transform>` **Transform** **(** :ref:`Basis<class_Basis>` basis, :ref:`Vector3<class_Vector3>` origin **)**

Construye una transformada a partir de un :ref:`Basis<class_Basis>` y un :ref:`Vector3<class_Vector3>`.

----

- :ref:`Transform<class_Transform>` **Transform** **(** :ref:`Transform2D<class_Transform2D>` from **)**

Construye una Transformada a partir de un :ref:`Transform2D<class_Transform2D>`.

----

- :ref:`Transform<class_Transform>` **Transform** **(** :ref:`Quat<class_Quat>` from **)**

Construye una Transformada a partir de un :ref:`Quat<class_Quat>`. El origen será ``Vector3(0, 0, 0)``.

----

- :ref:`Transform<class_Transform>` **Transform** **(** :ref:`Basis<class_Basis>` from **)**

Construye la Transformada desde un :ref:`Basis<class_Basis>`. El origen será el Vector3(0, 0, 0).

----

.. _class_Transform_method_affine_inverse:

- :ref:`Transform<class_Transform>` **affine_inverse** **(** **)**

Devuelve el inverso de la transformada, bajo el supuesto de que la transformación se compone de rotación, escalado y traslación.

----

.. _class_Transform_method_interpolate_with:

- :ref:`Transform<class_Transform>` **interpolate_with** **(** :ref:`Transform<class_Transform>` transform, :ref:`float<class_float>` weight **)**

Interpola la transformada a otra Transformación por cantidad de pesos (en el rango de 0.0 a 1.0).

----

.. _class_Transform_method_inverse:

- :ref:`Transform<class_Transform>` **inverse** **(** **)**

Devuelve el inverso de la transformada, bajo el supuesto de que la transformación se compone de rotación y traslación (sin escalamiento, use affine_inverse para las transformadas con escalamiento).

----

.. _class_Transform_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Transform<class_Transform>` transform **)**

Devuelve ``true`` si esta transformada y ``transform`` son aproximadamente iguales, llamando a ``is_equal_approx`` en cada componente.

----

.. _class_Transform_method_looking_at:

- :ref:`Transform<class_Transform>` **looking_at** **(** :ref:`Vector3<class_Vector3>` target, :ref:`Vector3<class_Vector3>` up **)**

Devuelve una copia de la transformación girada de tal manera que su eje -Z apunta hacia la posición ``target``.

La transformación se girará primero alrededor del vector ``up`` dado, y luego se alineará completamente con el objetivo mediante una nueva rotación alrededor de un eje perpendicular tanto al vector ``target`` como al ``up``.

Las operaciones tienen lugar en el espacio global.

----

.. _class_Transform_method_orthonormalized:

- :ref:`Transform<class_Transform>` **orthonormalized** **(** **)**

Devuelve la transformada con la base ortogonal (90 grados), y los vectores del eje normalizado.

----

.. _class_Transform_method_rotated:

- :ref:`Transform<class_Transform>` **rotated** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` phi **)**

Gira la transformación alrededor del eje dado por el ángulo dado (en radianes), usando la multiplicación de la matriz. El eje debe ser un vector normalizado.

----

.. _class_Transform_method_scaled:

- :ref:`Transform<class_Transform>` **scaled** **(** :ref:`Vector3<class_Vector3>` scale **)**

Base de escala y origen de la transformación por el factor de escala dado, utilizando la multiplicación de la matriz.

----

.. _class_Transform_method_translated:

- :ref:`Transform<class_Transform>` **translated** **(** :ref:`Vector3<class_Vector3>` offset **)**

Traduce la transformación por el desplazamiento dado, relativo a los vectores base de la transformación.

A diferencia de :ref:`rotated<class_Transform_method_rotated>` y :ref:`scaled<class_Transform_method_scaled>`, éste no utiliza la multiplicación de la matriz.

----

.. _class_Transform_method_xform:

- :ref:`Variant<class_Variant>` **xform** **(** :ref:`Variant<class_Variant>` v **)**

Transforms the given :ref:`Vector3<class_Vector3>`, :ref:`Plane<class_Plane>`, :ref:`AABB<class_AABB>`, or :ref:`PoolVector3Array<class_PoolVector3Array>` by this transform.

----

.. _class_Transform_method_xform_inv:

- :ref:`Variant<class_Variant>` **xform_inv** **(** :ref:`Variant<class_Variant>` v **)**

Inverse-transforms the given :ref:`Vector3<class_Vector3>`, :ref:`Plane<class_Plane>`, :ref:`AABB<class_AABB>`, or :ref:`PoolVector3Array<class_PoolVector3Array>` by this transform, under the assumption that the transformation is composed of rotation and translation (no scaling). Equivalent to calling ``inverse().xform(v)`` on this transform. For affine transformations (e.g. with scaling) see :ref:`affine_inverse<class_Transform_method_affine_inverse>` method.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
