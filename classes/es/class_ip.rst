:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the IP.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_IP:

IP
==

**Inherits:** :ref:`Object<class_Object>`

Funciones de soporte del protocolo de Internet (IP) como la resolución del DNS.

Descripción
----------------------

IP contiene funciones de apoyo al Protocolo de Internet (IP). El soporte de TCP/IP está en diferentes clases (ver :ref:`StreamPeerTCP<class_StreamPeerTCP>` y :ref:`TCP_Server<class_TCP_Server>`). IP proporciona soporte para la resolución de nombres de host DNS, tanto de bloques como en hilos.

Métodos
--------------

+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`clear_cache<class_IP_method_clear_cache>` **(** :ref:`String<class_String>` hostname="" **)**                                                               |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`erase_resolve_item<class_IP_method_erase_resolve_item>` **(** :ref:`int<class_int>` id **)**                                                                |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                     | :ref:`get_local_addresses<class_IP_method_get_local_addresses>` **(** **)** |const|                                                                               |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                     | :ref:`get_local_interfaces<class_IP_method_get_local_interfaces>` **(** **)** |const|                                                                             |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                   | :ref:`get_resolve_item_address<class_IP_method_get_resolve_item_address>` **(** :ref:`int<class_int>` id **)** |const|                                            |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                     | :ref:`get_resolve_item_addresses<class_IP_method_get_resolve_item_addresses>` **(** :ref:`int<class_int>` id **)** |const|                                        |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ResolverStatus<enum_IP_ResolverStatus>` | :ref:`get_resolve_item_status<class_IP_method_get_resolve_item_status>` **(** :ref:`int<class_int>` id **)** |const|                                              |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                   | :ref:`resolve_hostname<class_IP_method_resolve_hostname>` **(** :ref:`String<class_String>` host, :ref:`Type<enum_IP_Type>` ip_type=3 **)**                       |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                     | :ref:`resolve_hostname_addresses<class_IP_method_resolve_hostname_addresses>` **(** :ref:`String<class_String>` host, :ref:`Type<enum_IP_Type>` ip_type=3 **)**   |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`resolve_hostname_queue_item<class_IP_method_resolve_hostname_queue_item>` **(** :ref:`String<class_String>` host, :ref:`Type<enum_IP_Type>` ip_type=3 **)** |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_IP_ResolverStatus:

.. _class_IP_constant_RESOLVER_STATUS_NONE:

.. _class_IP_constant_RESOLVER_STATUS_WAITING:

.. _class_IP_constant_RESOLVER_STATUS_DONE:

.. _class_IP_constant_RESOLVER_STATUS_ERROR:

enum **ResolverStatus**:

- **RESOLVER_STATUS_NONE** = **0** --- Estado de la resolución del nombre de host del DNS: No hay estado.

- **RESOLVER_STATUS_WAITING** = **1** --- Estado de la resolución del nombre de host del DNS: Esperando.

- **RESOLVER_STATUS_DONE** = **2** --- Estado de la resolución del nombre de host del DNS: Hecho.

- **RESOLVER_STATUS_ERROR** = **3** --- Estado de la resolución del nombre de host del DNS: Error.

----

.. _enum_IP_Type:

.. _class_IP_constant_TYPE_NONE:

.. _class_IP_constant_TYPE_IPV4:

.. _class_IP_constant_TYPE_IPV6:

.. _class_IP_constant_TYPE_ANY:

enum **Type**:

- **TYPE_NONE** = **0** --- Tipo de dirección: Ninguna.

- **TYPE_IPV4** = **1** --- Tipo de dirección: Protocolo de Internet versión 4 (IPv4).

- **TYPE_IPV6** = **2** --- Tipo de dirección: Protocolo de Internet versión 6 (IPv6).

- **TYPE_ANY** = **3** --- Tipo de dirección: Cualquiera.

Constantes
--------------------

.. _class_IP_constant_RESOLVER_MAX_QUERIES:

.. _class_IP_constant_RESOLVER_INVALID_ID:

- **RESOLVER_MAX_QUERIES** = **32** --- El máximo número de consultas de resolución DNS concurrentes permitidas, :ref:`RESOLVER_INVALID_ID<class_IP_constant_RESOLVER_INVALID_ID>` se devuelve si se excede.

- **RESOLVER_INVALID_ID** = **-1** --- Constante de identificación inválida. Devuelta si se supera la constant :ref:`RESOLVER_MAX_QUERIES<class_IP_constant_RESOLVER_MAX_QUERIES>`.

Descripciones de Métodos
------------------------------------------------

.. _class_IP_method_clear_cache:

- void **clear_cache** **(** :ref:`String<class_String>` hostname="" **)**

Elimina todas las referencias de un ``hostname`` en la caché. Si no se da un ``hostname``, se eliminan todas las direcciones IP en caché.

----

.. _class_IP_method_erase_resolve_item:

- void **erase_resolve_item** **(** :ref:`int<class_int>` id **)**

Elimina un determinado elemento ``id`` de la cola. Esto debería usarse para liberar una cola después de que se haya completado para permitir que ocurran más consultas.

----

.. _class_IP_method_get_local_addresses:

- :ref:`Array<class_Array>` **get_local_addresses** **(** **)** |const|

Returns all the user's current IPv4 and IPv6 addresses as an array.

----

.. _class_IP_method_get_local_interfaces:

- :ref:`Array<class_Array>` **get_local_interfaces** **(** **)** |const|

Devuelve todos los adaptadores de red como un array.

Cada adaptador es un diccionario de la forma:

::

    {
        "index": "1", # indice interfaz.
        "name": "eth0", # nombre interfaz.
        "friendly": "Ethernet One", # Un nombre amigable (puede ser vacio).
        "addresses": ["192.168.1.101"], # Un array de direcciones IP asociadas a esta interfaz.
    }

----

.. _class_IP_method_get_resolve_item_address:

- :ref:`String<class_String>` **get_resolve_item_address** **(** :ref:`int<class_int>` id **)** |const|

Devuelve una elemento encolado de una direccion IP de un hostname, dada su cola ``id``. Devuelve una string vacía en caso de error o si la resolución no se ha producido todavía (ver :ref:`get_resolve_item_status<class_IP_method_get_resolve_item_status>`).

----

.. _class_IP_method_get_resolve_item_addresses:

- :ref:`Array<class_Array>` **get_resolve_item_addresses** **(** :ref:`int<class_int>` id **)** |const|

Return resolved addresses, or an empty array if an error happened or resolution didn't happen yet (see :ref:`get_resolve_item_status<class_IP_method_get_resolve_item_status>`).

----

.. _class_IP_method_get_resolve_item_status:

- :ref:`ResolverStatus<enum_IP_ResolverStatus>` **get_resolve_item_status** **(** :ref:`int<class_int>` id **)** |const|

Devuelve el estado de un encolado de hostname como una constante de :ref:`ResolverStatus<enum_IP_ResolverStatus>`, dada su cola ``id``.

----

.. _class_IP_method_resolve_hostname:

- :ref:`String<class_String>` **resolve_hostname** **(** :ref:`String<class_String>` host, :ref:`Type<enum_IP_Type>` ip_type=3 **)**

Devuelve la dirección IPv4 o IPv6 de un determinado nombre de host cuando se resuelve (método de bloqueo). El tipo de dirección devuelto depende de la constante :ref:`Type<enum_IP_Type>` dada como ``ip_type``.

----

.. _class_IP_method_resolve_hostname_addresses:

- :ref:`Array<class_Array>` **resolve_hostname_addresses** **(** :ref:`String<class_String>` host, :ref:`Type<enum_IP_Type>` ip_type=3 **)**

Resolves a given hostname in a blocking way. Addresses are returned as an :ref:`Array<class_Array>` of IPv4 or IPv6 depending on ``ip_type``.

----

.. _class_IP_method_resolve_hostname_queue_item:

- :ref:`int<class_int>` **resolve_hostname_queue_item** **(** :ref:`String<class_String>` host, :ref:`Type<enum_IP_Type>` ip_type=3 **)**

Crea un elemento de cola para resolver un nombre de host a una dirección IPv4 o IPv6 dependiendo de la constante :ref:`Type<enum_IP_Type>` dada como ``ip_type``. Devuelve el ID de la cola si tiene éxito, o la constante :ref:`RESOLVER_INVALID_ID<class_IP_constant_RESOLVER_INVALID_ID>` en caso de error.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
