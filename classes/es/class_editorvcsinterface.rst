:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the EditorVCSInterface.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_EditorVCSInterface:

EditorVCSInterface
==================

**Inherits:** :ref:`Object<class_Object>`

Interfaz del Sistema de Control de Versiones (VCS) que lee y escribe en el VCS local en uso.

Descripción
----------------------

Usado por el editor para mostrar la información extraída del VCS en el editor. La implementación de esta API está incluida en los addons de VCS, que son esencialmente plugins GDNative que deben ser puestos en la carpeta del proyecto. Estos addons VCS son scripts que se adjuntan (bajo demanda) a la instancia de objeto de ``EditorVCSInterface``. Todas las funciones enumeradas a continuación, en lugar de realizar la tarea por sí mismas, llaman a las funciones definidas internamente en los addons VCS para proporcionar una experiencia de plug-n-play.

Métodos
--------------

+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`commit<class_EditorVCSInterface_method_commit>` **(** :ref:`String<class_String>` msg **)**                       |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`get_file_diff<class_EditorVCSInterface_method_get_file_diff>` **(** :ref:`String<class_String>` file_path **)**   |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`get_modified_files_data<class_EditorVCSInterface_method_get_modified_files_data>` **(** **)**                     |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`         | :ref:`get_project_name<class_EditorVCSInterface_method_get_project_name>` **(** **)**                                   |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`         | :ref:`get_vcs_name<class_EditorVCSInterface_method_get_vcs_name>` **(** **)**                                           |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`initialize<class_EditorVCSInterface_method_initialize>` **(** :ref:`String<class_String>` project_root_path **)** |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`is_addon_ready<class_EditorVCSInterface_method_is_addon_ready>` **(** **)**                                       |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`is_vcs_initialized<class_EditorVCSInterface_method_is_vcs_initialized>` **(** **)**                               |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`shut_down<class_EditorVCSInterface_method_shut_down>` **(** **)**                                                 |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`stage_file<class_EditorVCSInterface_method_stage_file>` **(** :ref:`String<class_String>` file_path **)**         |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`unstage_file<class_EditorVCSInterface_method_unstage_file>` **(** :ref:`String<class_String>` file_path **)**     |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------+

Descripciones de Métodos
------------------------------------------------

.. _class_EditorVCSInterface_method_commit:

- void **commit** **(** :ref:`String<class_String>` msg **)**

Crea un commit de versión si el addon se inicializa, si no, regresa sin hacer nada. Utiliza los archivos que han sido preparados previamente, con el mensaje de confirmación establecido en un valor como el proporcionado en el argumento.

----

.. _class_EditorVCSInterface_method_get_file_diff:

- :ref:`Array<class_Array>` **get_file_diff** **(** :ref:`String<class_String>` file_path **)**

Devuelve una :ref:`Array<class_Array>` de objetos del :ref:`Dictionary<class_Dictionary>` que contiene la diferencia desdel el VCS en uso, si se inicializa un addon VCS, si no, devuelve un objeto :ref:`Array<class_Array>` vacio. El contenido de la diferencia también consiste en algunas líneas contextuales que proporcionan contexto al cambio de línea observado en el archivo.

Cada objeto :ref:`Dictionary<class_Dictionary>` tiene el contenido de la línea diferencia bajo las claves:

- ``"content"`` para almacenar una :ref:`String<class_String>` que contiene el contenido de la línea

- ``"status"`` para almacenar una :ref:`String<class_String>` que contiene ``"+"`` en caso de que el contenido sea una adición de línea pero almacena un ``"-"`` en caso de eliminación y una cadena vacía en caso de que el contenido de la línea no sea ni una adición ni una eliminación.

- ``"new_line_number"`` para almacenar un número entero que contenga el nuevo número de línea del contenido de la línea.

- ``"line_count"`` para almacenar un entero que contenga el número de líneas del contenido de la línea.

- ``"old_line_number"`` para almacenar un entero que contiene el número de línea antiguo del contenido de la línea.

- ``"offset"`` para almacenar el offset del cambio de línea desde el primer contenido de línea contextual.

----

.. _class_EditorVCSInterface_method_get_modified_files_data:

- :ref:`Dictionary<class_Dictionary>` **get_modified_files_data** **(** **)**

Returns a :ref:`Dictionary<class_Dictionary>` containing the path of the detected file change mapped to an integer signifying what kind of change the corresponding file has experienced.

The following integer values are being used to signify that the detected file is:

- ``0``: New to the VCS working directory

- ``1``: Modified

- ``2``: Renamed

- ``3``: Deleted

- ``4``: Typechanged

----

.. _class_EditorVCSInterface_method_get_project_name:

- :ref:`String<class_String>` **get_project_name** **(** **)**

Devuelve el nombre del proyecto del directorio de trabajo del VCS.

----

.. _class_EditorVCSInterface_method_get_vcs_name:

- :ref:`String<class_String>` **get_vcs_name** **(** **)**

Devuelve el nombre del VCS si el VCS ha sido inicializado, si no, devuelve una cadena vacía.

----

.. _class_EditorVCSInterface_method_initialize:

- :ref:`bool<class_bool>` **initialize** **(** :ref:`String<class_String>` project_root_path **)**

Inicializa el addon VCS si no lo ha hecho ya. Usa el valor del argumento como la ruta al directorio de trabajo del proyecto. Crea el commit inicial si es necesario. Devuelve ``true`` si no se produce ningún fallo, si no, devuelve ``false``.

----

.. _class_EditorVCSInterface_method_is_addon_ready:

- :ref:`bool<class_bool>` **is_addon_ready** **(** **)**

Devuelve ``true`` si el addon está listo para responder a las llamadas de la función, si no, devuelve ``false``.

----

.. _class_EditorVCSInterface_method_is_vcs_initialized:

- :ref:`bool<class_bool>` **is_vcs_initialized** **(** **)**

Devuelve ``true`` si el addon VCS ha sido inicializado, si no, devuelve ``false``.

----

.. _class_EditorVCSInterface_method_shut_down:

- :ref:`bool<class_bool>` **shut_down** **(** **)**

Apaga el complemento del VCS para permitir que el código de limpieza se ejecute cuando sea necesario. Devuelve ``true`` si no se produce ningún fallo, si no devuelve ``false``.

----

.. _class_EditorVCSInterface_method_stage_file:

- void **stage_file** **(** :ref:`String<class_String>` file_path **)**

Establece el archivo que debe ser confirmado cuando se llama al :ref:`commit<class_EditorVCSInterface_method_commit>`. El argumento debería contener la ruta absoluta.

----

.. _class_EditorVCSInterface_method_unstage_file:

- void **unstage_file** **(** :ref:`String<class_String>` file_path **)**

Devuelve al estado sin añadir el archivo que se preparó previamente para ser confirmado, de modo que ya no se confirma cuando se llama al :ref:`commit<class_EditorVCSInterface_method_commit>`. El argumento debe contener la ruta absoluta.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
