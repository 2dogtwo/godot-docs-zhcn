:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the AABB.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_AABB:

AABB
====

Caja bordeada alineada con el eje.

Descripción
----------------------

``AABB`` consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.

It uses floating-point coordinates. The 2D counterpart to ``AABB`` is :ref:`Rect2<class_Rect2>`.

Negative values for :ref:`size<class_AABB_property_size>` are not supported and will not work for most methods. Use :ref:`abs<class_AABB_method_abs>` to get an AABB with a positive size.

\ **Note:** Unlike :ref:`Rect2<class_Rect2>`, ``AABB`` does not have a variant that uses integer coordinates.

Tutoriales
--------------------

- :doc:`Math tutorial index <../tutorials/math/index>`

- :doc:`Vector math <../tutorials/math/vector_math>`

- :doc:`Advanced vector math <../tutorials/math/vectors_advanced>`

Propiedades
----------------------

+-------------------------------+-----------------------------------------------+------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`end<class_AABB_property_end>`           | ``Vector3( 0, 0, 0 )`` |
+-------------------------------+-----------------------------------------------+------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`position<class_AABB_property_position>` | ``Vector3( 0, 0, 0 )`` |
+-------------------------------+-----------------------------------------------+------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`size<class_AABB_property_size>`         | ``Vector3( 0, 0, 0 )`` |
+-------------------------------+-----------------------------------------------+------------------------+

Métodos
--------------

+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AABB<class_AABB>`       | :ref:`AABB<class_AABB_method_AABB>` **(** :ref:`Vector3<class_Vector3>` position, :ref:`Vector3<class_Vector3>` size **)**                       |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AABB<class_AABB>`       | :ref:`abs<class_AABB_method_abs>` **(** **)**                                                                                                    |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`encloses<class_AABB_method_encloses>` **(** :ref:`AABB<class_AABB>` with **)**                                                             |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AABB<class_AABB>`       | :ref:`expand<class_AABB_method_expand>` **(** :ref:`Vector3<class_Vector3>` to_point **)**                                                       |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`get_area<class_AABB_method_get_area>` **(** **)**                                                                                          |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_center<class_AABB_method_get_center>` **(** **)**                                                                                      |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_endpoint<class_AABB_method_get_endpoint>` **(** :ref:`int<class_int>` idx **)**                                                        |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_longest_axis<class_AABB_method_get_longest_axis>` **(** **)**                                                                          |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`         | :ref:`get_longest_axis_index<class_AABB_method_get_longest_axis_index>` **(** **)**                                                              |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`get_longest_axis_size<class_AABB_method_get_longest_axis_size>` **(** **)**                                                                |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_shortest_axis<class_AABB_method_get_shortest_axis>` **(** **)**                                                                        |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`         | :ref:`get_shortest_axis_index<class_AABB_method_get_shortest_axis_index>` **(** **)**                                                            |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`get_shortest_axis_size<class_AABB_method_get_shortest_axis_size>` **(** **)**                                                              |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_support<class_AABB_method_get_support>` **(** :ref:`Vector3<class_Vector3>` dir **)**                                                  |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AABB<class_AABB>`       | :ref:`grow<class_AABB_method_grow>` **(** :ref:`float<class_float>` by **)**                                                                     |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`has_no_area<class_AABB_method_has_no_area>` **(** **)**                                                                                    |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`has_no_surface<class_AABB_method_has_no_surface>` **(** **)**                                                                              |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`has_point<class_AABB_method_has_point>` **(** :ref:`Vector3<class_Vector3>` point **)**                                                    |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AABB<class_AABB>`       | :ref:`intersection<class_AABB_method_intersection>` **(** :ref:`AABB<class_AABB>` with **)**                                                     |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`intersects<class_AABB_method_intersects>` **(** :ref:`AABB<class_AABB>` with **)**                                                         |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`intersects_plane<class_AABB_method_intersects_plane>` **(** :ref:`Plane<class_Plane>` plane **)**                                          |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`intersects_segment<class_AABB_method_intersects_segment>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to **)** |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_equal_approx<class_AABB_method_is_equal_approx>` **(** :ref:`AABB<class_AABB>` aabb **)**                                               |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AABB<class_AABB>`       | :ref:`merge<class_AABB_method_merge>` **(** :ref:`AABB<class_AABB>` with **)**                                                                   |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+

Descripciones de Propiedades
--------------------------------------------------------

.. _class_AABB_property_end:

- :ref:`Vector3<class_Vector3>` **end**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 0, 0 )`` |
+-----------+------------------------+

Esquina final. Esto se calcula como ``position + size``. Cambiar esta propiedad cambia el tamaño.

----

.. _class_AABB_property_position:

- :ref:`Vector3<class_Vector3>` **position**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 0, 0 )`` |
+-----------+------------------------+

Esquina de inicio. Normalmente tiene valores inferiores a :ref:`end<class_AABB_property_end>`.

----

.. _class_AABB_property_size:

- :ref:`Vector3<class_Vector3>` **size**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 0, 0 )`` |
+-----------+------------------------+

Size from :ref:`position<class_AABB_property_position>` to :ref:`end<class_AABB_property_end>`. Typically, all components are positive.

If the size is negative, you can use :ref:`abs<class_AABB_method_abs>` to fix it.

Descripciones de Métodos
------------------------------------------------

.. _class_AABB_method_AABB:

- :ref:`AABB<class_AABB>` **AABB** **(** :ref:`Vector3<class_Vector3>` position, :ref:`Vector3<class_Vector3>` size **)**

Construye un ``AABB`` a partir de una posición y un tamaño.

----

.. _class_AABB_method_abs:

- :ref:`AABB<class_AABB>` **abs** **(** **)**

Devuelve un AABB con posición y tamaño equivalentes, modificado para que la esquina más negativa sea el origen y el tamaño sea positivo.

----

.. _class_AABB_method_encloses:

- :ref:`bool<class_bool>` **encloses** **(** :ref:`AABB<class_AABB>` with **)**

Devuelve ``true`` si este ``AABB`` contiene completamente a otro.

----

.. _class_AABB_method_expand:

- :ref:`AABB<class_AABB>` **expand** **(** :ref:`Vector3<class_Vector3>` to_point **)**

Returns a copy of this ``AABB`` expanded to include a given point.

\ **Example:**\ 

::

    # position (-3, 2, 0), size (1, 1, 1)
    var box = AABB(Vector3(-3, 2, 0), Vector3(1, 1, 1))
    # position (-3, -1, 0), size (3, 4, 2), so we fit both the original AABB and Vector3(0, -1, 2)
    var box2 = box.expand(Vector3(0, -1, 2))

----

.. _class_AABB_method_get_area:

- :ref:`float<class_float>` **get_area** **(** **)**

Devuelve el volumen del ``AABB``.

----

.. _class_AABB_method_get_center:

- :ref:`Vector3<class_Vector3>` **get_center** **(** **)**

Returns the center of the ``AABB``, which is equal to :ref:`position<class_AABB_property_position>` + (:ref:`size<class_AABB_property_size>` / 2).

----

.. _class_AABB_method_get_endpoint:

- :ref:`Vector3<class_Vector3>` **get_endpoint** **(** :ref:`int<class_int>` idx **)**

Obtiene la posición de los 8 puntos finales del ``AABB`` en el espacio.

----

.. _class_AABB_method_get_longest_axis:

- :ref:`Vector3<class_Vector3>` **get_longest_axis** **(** **)**

Devuelve el eje más largo normalizado del ``AABB``.

----

.. _class_AABB_method_get_longest_axis_index:

- :ref:`int<class_int>` **get_longest_axis_index** **(** **)**

Devuelve el indice del eje mas grande de ``AABB`` (segun la constante :ref:`Vector3<class_Vector3>` ``AXIS_*``).

----

.. _class_AABB_method_get_longest_axis_size:

- :ref:`float<class_float>` **get_longest_axis_size** **(** **)**

Devuelve la longitud escalar del eje más largo del ``AABB``.

----

.. _class_AABB_method_get_shortest_axis:

- :ref:`Vector3<class_Vector3>` **get_shortest_axis** **(** **)**

Devuelve el eje más corto normalizado de la ``AABB``.

----

.. _class_AABB_method_get_shortest_axis_index:

- :ref:`int<class_int>` **get_shortest_axis_index** **(** **)**

Devuelve el índice del eje más corto del ``AABB`` (según el enumerado :ref:`Vector3<class_Vector3>`::AXIS\* ).

----

.. _class_AABB_method_get_shortest_axis_size:

- :ref:`float<class_float>` **get_shortest_axis_size** **(** **)**

Devuelve la longitud escalar del eje más corto del ``AABB``.

----

.. _class_AABB_method_get_support:

- :ref:`Vector3<class_Vector3>` **get_support** **(** :ref:`Vector3<class_Vector3>` dir **)**

Devuelve el punto de apoyo en una dirección determinada. Esto es útil para los algoritmos de detección de colisiones.

----

.. _class_AABB_method_grow:

- :ref:`AABB<class_AABB>` **grow** **(** :ref:`float<class_float>` by **)**

Devuelve una copia de la ``AABB`` crecida una cantidad dada de unidades hacia todos los lados.

----

.. _class_AABB_method_has_no_area:

- :ref:`bool<class_bool>` **has_no_area** **(** **)**

Devuelve ``true`` si el ``AABB`` es plano o vacío.

----

.. _class_AABB_method_has_no_surface:

- :ref:`bool<class_bool>` **has_no_surface** **(** **)**

Devuelve ``true`` si el ``AABB`` está vacío.

----

.. _class_AABB_method_has_point:

- :ref:`bool<class_bool>` **has_point** **(** :ref:`Vector3<class_Vector3>` point **)**

Devuelve ``true`` si el ``AABB`` contiene un punto.

----

.. _class_AABB_method_intersection:

- :ref:`AABB<class_AABB>` **intersection** **(** :ref:`AABB<class_AABB>` with **)**

Devuelve la intersección entre dos ``AABB``. Un AABB vacío (tamaño 0,0,0) se devuelve al fallar.

----

.. _class_AABB_method_intersects:

- :ref:`bool<class_bool>` **intersects** **(** :ref:`AABB<class_AABB>` with **)**

Devuelve ``true`` si el ``AABB`` se solapa con otro.

----

.. _class_AABB_method_intersects_plane:

- :ref:`bool<class_bool>` **intersects_plane** **(** :ref:`Plane<class_Plane>` plane **)**

Devuelve ``true`` si el ``AABB`` está a ambos lados de un plano.

----

.. _class_AABB_method_intersects_segment:

- :ref:`bool<class_bool>` **intersects_segment** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to **)**

Devuelve ``true`` si el ``AABB`` intersecta el segmento de línea entre ``from`` y ``to``.

----

.. _class_AABB_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`AABB<class_AABB>` aabb **)**

Devuelve ``true`` si este ``AABB`` y ``aabb`` son aproximadamente iguales, llamando al :ref:`@GDScript.is_equal_approx<class_@GDScript_method_is_equal_approx>` en cada componente.

----

.. _class_AABB_method_merge:

- :ref:`AABB<class_AABB>` **merge** **(** :ref:`AABB<class_AABB>` with **)**

Devuelve un ``AABB`` más grande que contiene tanto este ``AABB`` como el ``with``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
