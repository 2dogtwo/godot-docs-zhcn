:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the WebSocketClient.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_WebSocketClient:

WebSocketClient
===============

**Inherits:** :ref:`WebSocketMultiplayerPeer<class_WebSocketMultiplayerPeer>` **<** :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>` **<** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Una implementación del cliente WebSocket.

Descripción
----------------------

Esta clase implementa un cliente WebSocket compatible con cualquier servidor WebSocket compatible con RFC 6455.

Este cliente puede ser usado opcionalmente como un par de red para la :ref:`MultiplayerAPI<class_MultiplayerAPI>`.

Después de iniciar el cliente (:ref:`connect_to_url<class_WebSocketClient_method_connect_to_url>`), necesitarás :ref:`NetworkedMultiplayerPeer.poll<class_NetworkedMultiplayerPeer_method_poll>` a intervalos regulares (por ejemplo, dentro de :ref:`Node._process<class_Node_method__process>`).

Recibirá las señales apropiadas cuando se conecte, desconecte o cuando haya nuevos datos disponibles.

Propiedades
----------------------

+-----------------------------------------------+----------------------------------------------------------------------------------------+
| :ref:`X509Certificate<class_X509Certificate>` | :ref:`trusted_ssl_certificate<class_WebSocketClient_property_trusted_ssl_certificate>` |
+-----------------------------------------------+----------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`verify_ssl<class_WebSocketClient_property_verify_ssl>`                           |
+-----------------------------------------------+----------------------------------------------------------------------------------------+

Métodos
--------------

+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`connect_to_url<class_WebSocketClient_method_connect_to_url>` **(** :ref:`String<class_String>` url, :ref:`PoolStringArray<class_PoolStringArray>` protocols=PoolStringArray(  ), :ref:`bool<class_bool>` gd_mp_api=false, :ref:`PoolStringArray<class_PoolStringArray>` custom_headers=PoolStringArray(  ) **)** |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`disconnect_from_host<class_WebSocketClient_method_disconnect_from_host>` **(** :ref:`int<class_int>` code=1000, :ref:`String<class_String>` reason="" **)**                                                                                                                                                      |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_connected_host<class_WebSocketClient_method_get_connected_host>` **(** **)** |const|                                                                                                                                                                                                                         |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_connected_port<class_WebSocketClient_method_get_connected_port>` **(** **)** |const|                                                                                                                                                                                                                         |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_WebSocketClient_signal_connection_closed:

- **connection_closed** **(** :ref:`bool<class_bool>` was_clean_close **)**

Emitido cuando la conexión con el servidor se cierra. ``was_clean_close`` será ``true`` si la conexión se cerró limpiamente.

----

.. _class_WebSocketClient_signal_connection_error:

- **connection_error** **(** **)**

Emitido cuando la conexión con el servidor falla.

----

.. _class_WebSocketClient_signal_connection_established:

- **connection_established** **(** :ref:`String<class_String>` protocol **)**

Emitido cuando se establece una conexión con el servidor, el ``protocol`` contendrá el subprotocolo acordado con el servidor.

----

.. _class_WebSocketClient_signal_data_received:

- **data_received** **(** **)**

Emitido cuando se recibe un mensaje de WebSocket.

\ **Nota:** Esta señal es *no* emitida cuando se usa como par multijugador de alto nivel.

----

.. _class_WebSocketClient_signal_server_close_request:

- **server_close_request** **(** :ref:`int<class_int>` code, :ref:`String<class_String>` reason **)**

Emitido cuando el servidor solicita un cierre limpio. Debes seguir preguntando hasta que recibas una señal :ref:`connection_closed<class_WebSocketClient_signal_connection_closed>` para lograr el cierre limpio. Consulta el :ref:`WebSocketPeer.close<class_WebSocketPeer_method_close>` para más detalles.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_WebSocketClient_property_trusted_ssl_certificate:

- :ref:`X509Certificate<class_X509Certificate>` **trusted_ssl_certificate**

+----------+------------------------------------+
| *Setter* | set_trusted_ssl_certificate(value) |
+----------+------------------------------------+
| *Getter* | get_trusted_ssl_certificate()      |
+----------+------------------------------------+

Si se especifica, este :ref:`X509Certificate<class_X509Certificate>` será el único aceptado cuando se conecte a un host SSL. Cualquier otro certificado proporcionado por el servidor se considerará inválido.

\ **Nota:** La especificación de un certificado personalizado ``trusted_ssl_certificate`` no es compatible con las exportaciones en HTML5 debido a las restricciones de los navegadores.

----

.. _class_WebSocketClient_property_verify_ssl:

- :ref:`bool<class_bool>` **verify_ssl**

+----------+-------------------------------+
| *Setter* | set_verify_ssl_enabled(value) |
+----------+-------------------------------+
| *Getter* | is_verify_ssl_enabled()       |
+----------+-------------------------------+

Si ``true``, la verificación del certificado SSL está activada.

\ **Nota:** Debe especificar los certificados que se utilizarán en la Configuración del proyecto para que funcione cuando se exporte.

Descripciones de Métodos
------------------------------------------------

.. _class_WebSocketClient_method_connect_to_url:

- :ref:`Error<enum_@GlobalScope_Error>` **connect_to_url** **(** :ref:`String<class_String>` url, :ref:`PoolStringArray<class_PoolStringArray>` protocols=PoolStringArray(  ), :ref:`bool<class_bool>` gd_mp_api=false, :ref:`PoolStringArray<class_PoolStringArray>` custom_headers=PoolStringArray(  ) **)**

Connects to the given URL requesting one of the given ``protocols`` as sub-protocol. If the list empty (default), no sub-protocol will be requested.

If ``true`` is passed as ``gd_mp_api``, the client will behave like a network peer for the :ref:`MultiplayerAPI<class_MultiplayerAPI>`, connections to non-Godot servers will not work, and :ref:`data_received<class_WebSocketClient_signal_data_received>` will not be emitted.

If ``false`` is passed instead (default), you must call :ref:`PacketPeer<class_PacketPeer>` functions (``put_packet``, ``get_packet``, etc.) on the :ref:`WebSocketPeer<class_WebSocketPeer>` returned via ``get_peer(1)`` and not on this object directly (e.g. ``get_peer(1).put_packet(data)``).

You can optionally pass a list of ``custom_headers`` to be added to the handshake HTTP request.

\ **Note:** To avoid mixed content warnings or errors in HTML5, you may have to use a ``url`` that starts with ``wss://`` (secure) instead of ``ws://``. When doing so, make sure to use the fully qualified domain name that matches the one defined in the server's SSL certificate. Do not connect directly via the IP address for ``wss://`` connections, as it won't match with the SSL certificate.

\ **Note:** Specifying ``custom_headers`` is not supported in HTML5 exports due to browsers restrictions.

----

.. _class_WebSocketClient_method_disconnect_from_host:

- void **disconnect_from_host** **(** :ref:`int<class_int>` code=1000, :ref:`String<class_String>` reason="" **)**

Desconecta este cliente del host conectado. Ver :ref:`WebSocketPeer.close<class_WebSocketPeer_method_close>` para más información.

----

.. _class_WebSocketClient_method_get_connected_host:

- :ref:`String<class_String>` **get_connected_host** **(** **)** |const|

Devuelve la dirección IP del host conectado actualmente.

----

.. _class_WebSocketClient_method_get_connected_port:

- :ref:`int<class_int>` **get_connected_port** **(** **)** |const|

Devuelve el puerto IP del host conectado actualmente.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
