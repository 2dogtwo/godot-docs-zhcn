:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Basis.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Basis:

Basis
=====

Tipo de datos de matriz 3×3.

Descripción
----------------------

Matriz de 3×3 usada para la rotación y la escala 3D. Casi siempre se usa como base ortogonal para una Transformación.

Contiene 3 campos vectoriales X, Y y Z como sus columnas, que son típicamente interpretados como los vectores base locales de una transformación. Para tal uso, se compone de una matriz de escalamiento y rotación, en ese orden (M = R.S).

También se puede acceder a ella como matriz de vectores tridimensionales. Estos vectores son normalmente ortogonales entre sí, pero no están necesariamente normalizados (debido a la escala).

Para más información, lea el artículo de documentación "Matrices y transformaciones".

Tutoriales
--------------------

- :doc:`Math tutorial index <../tutorials/math/index>`

- :doc:`Matrices and transforms <../tutorials/math/matrices_and_transforms>`

- :doc:`Using 3D transforms <../tutorials/3d/using_transforms>`

- `Matrix Transform Demo <https://godotengine.org/asset-library/asset/584>`__

- `3D Platformer Demo <https://godotengine.org/asset-library/asset/125>`__

- `3D Voxel Demo <https://godotengine.org/asset-library/asset/676>`__

- `2.5D Demo <https://godotengine.org/asset-library/asset/583>`__

Propiedades
----------------------

+-------------------------------+----------------------------------+------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`x<class_Basis_property_x>` | ``Vector3( 1, 0, 0 )`` |
+-------------------------------+----------------------------------+------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`y<class_Basis_property_y>` | ``Vector3( 0, 1, 0 )`` |
+-------------------------------+----------------------------------+------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`z<class_Basis_property_z>` | ``Vector3( 0, 0, 1 )`` |
+-------------------------------+----------------------------------+------------------------+

Métodos
--------------

+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`Basis<class_Basis_method_Basis>` **(** :ref:`Quat<class_Quat>` from **)**                                                                                     |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`Basis<class_Basis_method_Basis>` **(** :ref:`Vector3<class_Vector3>` from **)**                                                                               |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`Basis<class_Basis_method_Basis>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` phi **)**                                                |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`Basis<class_Basis_method_Basis>` **(** :ref:`Vector3<class_Vector3>` x_axis, :ref:`Vector3<class_Vector3>` y_axis, :ref:`Vector3<class_Vector3>` z_axis **)** |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`determinant<class_Basis_method_determinant>` **(** **)**                                                                                                      |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_euler<class_Basis_method_get_euler>` **(** **)**                                                                                                          |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`         | :ref:`get_orthogonal_index<class_Basis_method_get_orthogonal_index>` **(** **)**                                                                                    |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quat<class_Quat>`       | :ref:`get_rotation_quat<class_Basis_method_get_rotation_quat>` **(** **)**                                                                                          |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_scale<class_Basis_method_get_scale>` **(** **)**                                                                                                          |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`inverse<class_Basis_method_inverse>` **(** **)**                                                                                                              |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_equal_approx<class_Basis_method_is_equal_approx>` **(** :ref:`Basis<class_Basis>` b, :ref:`float<class_float>` epsilon=1e-05 **)**                         |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`orthonormalized<class_Basis_method_orthonormalized>` **(** **)**                                                                                              |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`rotated<class_Basis_method_rotated>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` phi **)**                                            |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`scaled<class_Basis_method_scaled>` **(** :ref:`Vector3<class_Vector3>` scale **)**                                                                            |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`slerp<class_Basis_method_slerp>` **(** :ref:`Basis<class_Basis>` to, :ref:`float<class_float>` weight **)**                                                   |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`tdotx<class_Basis_method_tdotx>` **(** :ref:`Vector3<class_Vector3>` with **)**                                                                               |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`tdoty<class_Basis_method_tdoty>` **(** :ref:`Vector3<class_Vector3>` with **)**                                                                               |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`tdotz<class_Basis_method_tdotz>` **(** :ref:`Vector3<class_Vector3>` with **)**                                                                               |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`transposed<class_Basis_method_transposed>` **(** **)**                                                                                                        |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`xform<class_Basis_method_xform>` **(** :ref:`Vector3<class_Vector3>` v **)**                                                                                  |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`xform_inv<class_Basis_method_xform_inv>` **(** :ref:`Vector3<class_Vector3>` v **)**                                                                          |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Constantes
--------------------

.. _class_Basis_constant_IDENTITY:

.. _class_Basis_constant_FLIP_X:

.. _class_Basis_constant_FLIP_Y:

.. _class_Basis_constant_FLIP_Z:

- **IDENTITY** = **Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )** --- La base de la identidad, sin rotación ni escalonamiento aplicado.

Esto es idéntico a llamar a ``Basis()`` sin ningún parámetro. Esta constante puede ser usada para hacer su código más claro, y para la consistencia con C#.

- **FLIP_X** = **Basis( -1, 0, 0, 0, 1, 0, 0, 0, 1 )** --- La base que volteará algo a lo largo del eje X cuando se use en una transformación.

- **FLIP_Y** = **Basis( 1, 0, 0, 0, -1, 0, 0, 0, 1 )** --- La base que volteará algo a lo largo del eje Y cuando se use en una transformación.

- **FLIP_Z** = **Basis( 1, 0, 0, 0, 1, 0, 0, 0, -1 )** --- La base que volteará algo a lo largo del eje Z cuando se use en una transformación.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Basis_property_x:

- :ref:`Vector3<class_Vector3>` **x**

+-----------+------------------------+
| *Default* | ``Vector3( 1, 0, 0 )`` |
+-----------+------------------------+

El vector X de la matriz base (columna 0). Equivalente al índice de la matriz ``0``.

----

.. _class_Basis_property_y:

- :ref:`Vector3<class_Vector3>` **y**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 1, 0 )`` |
+-----------+------------------------+

El vector Y de la matriz base (columna 1). Equivalente al índice de la matriz ``1``.

----

.. _class_Basis_property_z:

- :ref:`Vector3<class_Vector3>` **z**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 0, 1 )`` |
+-----------+------------------------+

El vector Z de la matriz base (columna 2). Equivalente al índice de la matriz ``2``.

Descripciones de Métodos
------------------------------------------------

.. _class_Basis_method_Basis:

- :ref:`Basis<class_Basis>` **Basis** **(** :ref:`Quat<class_Quat>` from **)**

Construye una matriz de base de rotación pura a partir del cuaternario dado.

----

- :ref:`Basis<class_Basis>` **Basis** **(** :ref:`Vector3<class_Vector3>` from **)**

Construye una matriz de base de rotación pura a partir de los ángulos de Euler dados (en la convención YXZ: al \*componer\*, primero Y, luego X y Z en último lugar), dados en el formato vectorial como (ángulo X, ángulo Y, ángulo Z).

Considere el uso del constructor :ref:`Quat<class_Quat>` en su lugar, que utiliza un cuaternio en lugar de los ángulos de Euler.

----

- :ref:`Basis<class_Basis>` **Basis** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` phi **)**

Construye una matriz de base de rotación pura, rotada alrededor del ``axis`` dado por el ``phi``, en radianes. El eje debe ser un vector normalizado.

----

- :ref:`Basis<class_Basis>` **Basis** **(** :ref:`Vector3<class_Vector3>` x_axis, :ref:`Vector3<class_Vector3>` y_axis, :ref:`Vector3<class_Vector3>` z_axis **)**

Construye una matriz base a partir de vectores de 3 ejes (columnas de la matriz).

----

.. _class_Basis_method_determinant:

- :ref:`float<class_float>` **determinant** **(** **)**

Devuelve el determinante de la matriz base. Si la base está uniformemente escalada, su determinante es el cuadrado de la escala.

Un determinante negativo significa que la base tiene una escala negativa. Un determinante cero significa que la base no es invertible, y normalmente se considera inválida.

----

.. _class_Basis_method_get_euler:

- :ref:`Vector3<class_Vector3>` **get_euler** **(** **)**

Devuelve la rotación de la base en forma de ángulos de Euler (en la convención YXZ: al descomponerse, primero Z, luego X, y por último Y). El vector devuelto contiene los ángulos de rotación en el formato (ángulo X, ángulo Y, ángulo Z).

Considera usar el método :ref:`get_rotation_quat<class_Basis_method_get_rotation_quat>` en su lugar, que devuelve una cuaternión :ref:`Quat<class_Quat>` en lugar de ángulos Euler.

----

.. _class_Basis_method_get_orthogonal_index:

- :ref:`int<class_int>` **get_orthogonal_index** **(** **)**

Esta función considera una discretización de las rotaciones en 24 puntos de la unidad de la esfera, situados a lo largo de los vectores (x,y,z), siendo cada componente -1, 0, o 1, y devuelve el índice del punto que mejor representa la orientación del objeto. Es utilizado principalmente por el editor :ref:`GridMap<class_GridMap>`. Para más detalles, consulte el código fuente de Godot.

----

.. _class_Basis_method_get_rotation_quat:

- :ref:`Quat<class_Quat>` **get_rotation_quat** **(** **)**

Devuelve la rotación de la base en forma de cuaternario. Véase :ref:`get_euler<class_Basis_method_get_euler>` si necesita ángulos de Euler, pero tenga en cuenta que las cuaterniones generalmente deben ser preferidas a los ángulos de Euler.

----

.. _class_Basis_method_get_scale:

- :ref:`Vector3<class_Vector3>` **get_scale** **(** **)**

Asumiendo que la matriz es la combinación de una rotación y un escalado, devuelve el valor absoluto de los factores de escala a lo largo de cada eje.

----

.. _class_Basis_method_inverse:

- :ref:`Basis<class_Basis>` **inverse** **(** **)**

Devuelve el inverso de la matriz.

----

.. _class_Basis_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Basis<class_Basis>` b, :ref:`float<class_float>` epsilon=1e-05 **)**

Returns ``true`` if this basis and ``b`` are approximately equal, by calling ``is_equal_approx`` on each component.

\ **Note:** For complicated reasons, the epsilon argument is always discarded. Don't use the epsilon argument, it does nothing.

----

.. _class_Basis_method_orthonormalized:

- :ref:`Basis<class_Basis>` **orthonormalized** **(** **)**

Devuelve la versión ortonormalizada de la matriz (útil para llamar de vez en cuando para evitar el error de redondeo de las matrices ortogonales). Realiza una ortonormalización de Gram-Schmidt sobre la base de la matriz.

----

.. _class_Basis_method_rotated:

- :ref:`Basis<class_Basis>` **rotated** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` phi **)**

Introducir una rotación adicional alrededor del eje dado por phi (radianes). El eje debe ser un vector normalizado.

----

.. _class_Basis_method_scaled:

- :ref:`Basis<class_Basis>` **scaled** **(** :ref:`Vector3<class_Vector3>` scale **)**

Introducir una escalado adicional especificada por el factor de escala 3D dado.

----

.. _class_Basis_method_slerp:

- :ref:`Basis<class_Basis>` **slerp** **(** :ref:`Basis<class_Basis>` to, :ref:`float<class_float>` weight **)**

Asumiendo que la matriz es una matriz de rotación adecuada, slerp realiza una interpolación esférica-lineal con otra matriz de rotación.

----

.. _class_Basis_method_tdotx:

- :ref:`float<class_float>` **tdotx** **(** :ref:`Vector3<class_Vector3>` with **)**

Producto vectorial transpuesto con el eje X de la matriz.

----

.. _class_Basis_method_tdoty:

- :ref:`float<class_float>` **tdoty** **(** :ref:`Vector3<class_Vector3>` with **)**

Producto vectorial transpuesto con el eje Y de la matriz.

----

.. _class_Basis_method_tdotz:

- :ref:`float<class_float>` **tdotz** **(** :ref:`Vector3<class_Vector3>` with **)**

Producto vectorial transpuesto con el eje Z de la matriz.

----

.. _class_Basis_method_transposed:

- :ref:`Basis<class_Basis>` **transposed** **(** **)**

Devuelve la versión transpuesta de la matriz.

----

.. _class_Basis_method_xform:

- :ref:`Vector3<class_Vector3>` **xform** **(** :ref:`Vector3<class_Vector3>` v **)**

Devuelve un vector transformado (multiplicado) por la matriz.

----

.. _class_Basis_method_xform_inv:

- :ref:`Vector3<class_Vector3>` **xform_inv** **(** :ref:`Vector3<class_Vector3>` v **)**

Devuelve un vector transformado (multiplicado) por la matriz base transpuesta.

\ **Nota:** Esto da como resultado una multiplicación por el inverso de la matriz sólo si representa una rotación-reflexión.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
