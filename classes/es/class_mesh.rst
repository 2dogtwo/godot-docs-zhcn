:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Mesh.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Mesh:

Mesh
====

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`ArrayMesh<class_ArrayMesh>`, :ref:`PrimitiveMesh<class_PrimitiveMesh>`

Un :ref:`Resource<class_Resource>` que contiene un array de vértices de una geometría.

Descripción
----------------------

La malla es un tipo de :ref:`Resource<class_Resource>` que contiene una geometría basada en un array de vértices, dividida en *superficies*. Cada superficie contiene un array completamente separado y un material utilizado para dibujarlo. En cuanto al diseño, se prefiere una malla con múltiples superficies a una sola superficie, porque los objetos creados en un software de edición 3D suelen contener múltiples materiales.

Tutoriales
--------------------

- `3D Material Testers Demo <https://godotengine.org/asset-library/asset/123>`__

- `3D Kinematic Character Demo <https://godotengine.org/asset-library/asset/126>`__

- `3D Platformer Demo <https://godotengine.org/asset-library/asset/125>`__

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

Propiedades
----------------------

+-------------------------------+-------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`lightmap_size_hint<class_Mesh_property_lightmap_size_hint>` | ``Vector2( 0, 0 )`` |
+-------------------------------+-------------------------------------------------------------------+---------------------+

Métodos
--------------

+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Shape<class_Shape>`                       | :ref:`create_convex_shape<class_Mesh_method_create_convex_shape>` **(** :ref:`bool<class_bool>` clean=true, :ref:`bool<class_bool>` simplify=false **)** |const| |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Mesh<class_Mesh>`                         | :ref:`create_outline<class_Mesh_method_create_outline>` **(** :ref:`float<class_float>` margin **)** |const|                                                     |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Shape<class_Shape>`                       | :ref:`create_trimesh_shape<class_Mesh_method_create_trimesh_shape>` **(** **)** |const|                                                                          |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`TriangleMesh<class_TriangleMesh>`         | :ref:`generate_triangle_mesh<class_Mesh_method_generate_triangle_mesh>` **(** **)** |const|                                                                      |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AABB<class_AABB>`                         | :ref:`get_aabb<class_Mesh_method_get_aabb>` **(** **)** |const|                                                                                                  |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector3Array<class_PoolVector3Array>` | :ref:`get_faces<class_Mesh_method_get_faces>` **(** **)** |const|                                                                                                |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                           | :ref:`get_surface_count<class_Mesh_method_get_surface_count>` **(** **)** |const|                                                                                |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`surface_get_arrays<class_Mesh_method_surface_get_arrays>` **(** :ref:`int<class_int>` surf_idx **)** |const|                                               |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`surface_get_blend_shape_arrays<class_Mesh_method_surface_get_blend_shape_arrays>` **(** :ref:`int<class_int>` surf_idx **)** |const|                       |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Material<class_Material>`                 | :ref:`surface_get_material<class_Mesh_method_surface_get_material>` **(** :ref:`int<class_int>` surf_idx **)** |const|                                           |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                            | :ref:`surface_set_material<class_Mesh_method_surface_set_material>` **(** :ref:`int<class_int>` surf_idx, :ref:`Material<class_Material>` material **)**         |
+-------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_Mesh_PrimitiveType:

.. _class_Mesh_constant_PRIMITIVE_POINTS:

.. _class_Mesh_constant_PRIMITIVE_LINES:

.. _class_Mesh_constant_PRIMITIVE_LINE_STRIP:

.. _class_Mesh_constant_PRIMITIVE_LINE_LOOP:

.. _class_Mesh_constant_PRIMITIVE_TRIANGLES:

.. _class_Mesh_constant_PRIMITIVE_TRIANGLE_STRIP:

.. _class_Mesh_constant_PRIMITIVE_TRIANGLE_FAN:

enum **PrimitiveType**:

- **PRIMITIVE_POINTS** = **0** --- Renderizar un array como puntos (un vértice es igual a un punto).

- **PRIMITIVE_LINES** = **1** --- Renderiza el array como líneas (cada dos vértices se crea una línea).

- **PRIMITIVE_LINE_STRIP** = **2** --- Renderiza un array como una tira de líneas.

- **PRIMITIVE_LINE_LOOP** = **3** --- Render array as line loop (like line strip, but closed).

- **PRIMITIVE_TRIANGLES** = **4** --- Renderizar la matriz como triángulos (cada tres vértices se crea un triángulo).

- **PRIMITIVE_TRIANGLE_STRIP** = **5** --- Renderizar un array como tiras de triángulo.

- **PRIMITIVE_TRIANGLE_FAN** = **6** --- Render array as triangle fans.

----

.. _enum_Mesh_BlendShapeMode:

.. _class_Mesh_constant_BLEND_SHAPE_MODE_NORMALIZED:

.. _class_Mesh_constant_BLEND_SHAPE_MODE_RELATIVE:

enum **BlendShapeMode**:

- **BLEND_SHAPE_MODE_NORMALIZED** = **0** --- Las formas de la mezcla se normalizan.

- **BLEND_SHAPE_MODE_RELATIVE** = **1** --- Las formas de la mezcla son relativas al peso base.

----

.. _enum_Mesh_ArrayFormat:

.. _class_Mesh_constant_ARRAY_FORMAT_VERTEX:

.. _class_Mesh_constant_ARRAY_FORMAT_NORMAL:

.. _class_Mesh_constant_ARRAY_FORMAT_TANGENT:

.. _class_Mesh_constant_ARRAY_FORMAT_COLOR:

.. _class_Mesh_constant_ARRAY_FORMAT_TEX_UV:

.. _class_Mesh_constant_ARRAY_FORMAT_TEX_UV2:

.. _class_Mesh_constant_ARRAY_FORMAT_BONES:

.. _class_Mesh_constant_ARRAY_FORMAT_WEIGHTS:

.. _class_Mesh_constant_ARRAY_FORMAT_INDEX:

.. _class_Mesh_constant_ARRAY_COMPRESS_BASE:

.. _class_Mesh_constant_ARRAY_COMPRESS_VERTEX:

.. _class_Mesh_constant_ARRAY_COMPRESS_NORMAL:

.. _class_Mesh_constant_ARRAY_COMPRESS_TANGENT:

.. _class_Mesh_constant_ARRAY_COMPRESS_COLOR:

.. _class_Mesh_constant_ARRAY_COMPRESS_TEX_UV:

.. _class_Mesh_constant_ARRAY_COMPRESS_TEX_UV2:

.. _class_Mesh_constant_ARRAY_COMPRESS_BONES:

.. _class_Mesh_constant_ARRAY_COMPRESS_WEIGHTS:

.. _class_Mesh_constant_ARRAY_COMPRESS_INDEX:

.. _class_Mesh_constant_ARRAY_FLAG_USE_2D_VERTICES:

.. _class_Mesh_constant_ARRAY_FLAG_USE_16_BIT_BONES:

.. _class_Mesh_constant_ARRAY_FLAG_USE_OCTAHEDRAL_COMPRESSION:

.. _class_Mesh_constant_ARRAY_COMPRESS_DEFAULT:

enum **ArrayFormat**:

- **ARRAY_FORMAT_VERTEX** = **1** --- El array de malla contiene vértices. Todas las mallas requieren un array de vértices, así que esto siempre debe estar presente.

- **ARRAY_FORMAT_NORMAL** = **2** --- El array de malla contiene normales.

- **ARRAY_FORMAT_TANGENT** = **4** --- El array de malla contiene tangentes.

- **ARRAY_FORMAT_COLOR** = **8** --- El array de malla contiene colores.

- **ARRAY_FORMAT_TEX_UV** = **16** --- El array de malla contiene UVs.

- **ARRAY_FORMAT_TEX_UV2** = **32** --- El array de malla contiene un segundo UV.

- **ARRAY_FORMAT_BONES** = **64** --- El array de malla contiene huesos.

- **ARRAY_FORMAT_WEIGHTS** = **128** --- El array de malla contiene pesos de huesos.

- **ARRAY_FORMAT_INDEX** = **256** --- El array de malla usa índices.

- **ARRAY_COMPRESS_BASE** = **9** --- Used internally to calculate other ``ARRAY_COMPRESS_*`` enum values. Do not use.

- **ARRAY_COMPRESS_VERTEX** = **512** --- Flag used to mark a compressed (half float) vertex array.

- **ARRAY_COMPRESS_NORMAL** = **1024** --- Flag utilizada para marcar un array normal comprimido (real).

- **ARRAY_COMPRESS_TANGENT** = **2048** --- Flag utilizada para marcar un array tangencial comprimido (real).

- **ARRAY_COMPRESS_COLOR** = **4096** --- Flag usada para marcar una array de colores comprimida (real).

- **ARRAY_COMPRESS_TEX_UV** = **8192** --- Flag usada para marcar un array de coordenadas UV comprimidas (real).

- **ARRAY_COMPRESS_TEX_UV2** = **16384** --- Flag usada para marcar un array de coordenadas UV comprimidas (real) para las segundas coordenadas UV.

- **ARRAY_COMPRESS_BONES** = **32768** --- Flag used to mark a compressed bone array.

- **ARRAY_COMPRESS_WEIGHTS** = **65536** --- Flag used to mark a compressed (half float) weight array.

- **ARRAY_COMPRESS_INDEX** = **131072** --- Flag usada para marcar un array de índices comprimida.

- **ARRAY_FLAG_USE_2D_VERTICES** = **262144** --- Flag usada para marcar que el array contiene vértices 2D.

- **ARRAY_FLAG_USE_16_BIT_BONES** = **524288** --- Flag used to mark that the array uses 16-bit bones instead of 8-bit.

- **ARRAY_FLAG_USE_OCTAHEDRAL_COMPRESSION** = **2097152** --- Flag used to mark that the array uses an octahedral representation of normal and tangent vectors rather than cartesian.

- **ARRAY_COMPRESS_DEFAULT** = **2194432** --- Used to set flags :ref:`ARRAY_COMPRESS_VERTEX<class_Mesh_constant_ARRAY_COMPRESS_VERTEX>`, :ref:`ARRAY_COMPRESS_NORMAL<class_Mesh_constant_ARRAY_COMPRESS_NORMAL>`, :ref:`ARRAY_COMPRESS_TANGENT<class_Mesh_constant_ARRAY_COMPRESS_TANGENT>`, :ref:`ARRAY_COMPRESS_COLOR<class_Mesh_constant_ARRAY_COMPRESS_COLOR>`, :ref:`ARRAY_COMPRESS_TEX_UV<class_Mesh_constant_ARRAY_COMPRESS_TEX_UV>`, :ref:`ARRAY_COMPRESS_TEX_UV2<class_Mesh_constant_ARRAY_COMPRESS_TEX_UV2>`, :ref:`ARRAY_COMPRESS_WEIGHTS<class_Mesh_constant_ARRAY_COMPRESS_WEIGHTS>`, and :ref:`ARRAY_FLAG_USE_OCTAHEDRAL_COMPRESSION<class_Mesh_constant_ARRAY_FLAG_USE_OCTAHEDRAL_COMPRESSION>` quickly.

----

.. _enum_Mesh_ArrayType:

.. _class_Mesh_constant_ARRAY_VERTEX:

.. _class_Mesh_constant_ARRAY_NORMAL:

.. _class_Mesh_constant_ARRAY_TANGENT:

.. _class_Mesh_constant_ARRAY_COLOR:

.. _class_Mesh_constant_ARRAY_TEX_UV:

.. _class_Mesh_constant_ARRAY_TEX_UV2:

.. _class_Mesh_constant_ARRAY_BONES:

.. _class_Mesh_constant_ARRAY_WEIGHTS:

.. _class_Mesh_constant_ARRAY_INDEX:

.. _class_Mesh_constant_ARRAY_MAX:

enum **ArrayType**:

- **ARRAY_VERTEX** = **0** --- Array de vértices.

- **ARRAY_NORMAL** = **1** --- Array de normales.

- **ARRAY_TANGENT** = **2** --- Array de tangentes como un array de reales, 4 reales por tangente.

- **ARRAY_COLOR** = **3** --- Array de colores.

- **ARRAY_TEX_UV** = **4** --- Array de coordenadas UV.

- **ARRAY_TEX_UV2** = **5** --- Array de un segundo conjunto de coordenadas UV.

- **ARRAY_BONES** = **6** --- Array de datos de los huesos.

- **ARRAY_WEIGHTS** = **7** --- Array de pesos.

- **ARRAY_INDEX** = **8** --- Array de índices.

- **ARRAY_MAX** = **9** --- Representa el tamaño del enum :ref:`ArrayType<enum_Mesh_ArrayType>`.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Mesh_property_lightmap_size_hint:

- :ref:`Vector2<class_Vector2>` **lightmap_size_hint**

+-----------+-------------------------------+
| *Default* | ``Vector2( 0, 0 )``           |
+-----------+-------------------------------+
| *Setter*  | set_lightmap_size_hint(value) |
+-----------+-------------------------------+
| *Getter*  | get_lightmap_size_hint()      |
+-----------+-------------------------------+

Sets a hint to be used for lightmap resolution in :ref:`BakedLightmap<class_BakedLightmap>`. Overrides :ref:`BakedLightmap.default_texels_per_unit<class_BakedLightmap_property_default_texels_per_unit>`.

Descripciones de Métodos
------------------------------------------------

.. _class_Mesh_method_create_convex_shape:

- :ref:`Shape<class_Shape>` **create_convex_shape** **(** :ref:`bool<class_bool>` clean=true, :ref:`bool<class_bool>` simplify=false **)** |const|

Calculate a :ref:`ConvexPolygonShape<class_ConvexPolygonShape>` from the mesh.

If ``clean`` is ``true`` (default), duplicate and interior vertices are removed automatically. You can set it to ``false`` to make the process faster if not needed.

If ``simplify`` is ``true``, the geometry can be further simplified to reduce the amount of vertices. Disabled by default.

----

.. _class_Mesh_method_create_outline:

- :ref:`Mesh<class_Mesh>` **create_outline** **(** :ref:`float<class_float>` margin **)** |const|

Calcular una malla de contorno en un desplazamiento definido (margen) de la malla original.

\ **Nota:** Este método típicamente devuelve los vértices en orden inverso (por ejemplo, de derecha a izquierda).

----

.. _class_Mesh_method_create_trimesh_shape:

- :ref:`Shape<class_Shape>` **create_trimesh_shape** **(** **)** |const|

Calculate a :ref:`ConcavePolygonShape<class_ConcavePolygonShape>` from the mesh.

----

.. _class_Mesh_method_generate_triangle_mesh:

- :ref:`TriangleMesh<class_TriangleMesh>` **generate_triangle_mesh** **(** **)** |const|

Genera un :ref:`TriangleMesh<class_TriangleMesh>` desde la malla.

----

.. _class_Mesh_method_get_aabb:

- :ref:`AABB<class_AABB>` **get_aabb** **(** **)** |const|

Returns the smallest :ref:`AABB<class_AABB>` enclosing this mesh in local space. Not affected by ``custom_aabb``. See also :ref:`VisualInstance.get_transformed_aabb<class_VisualInstance_method_get_transformed_aabb>`.

\ **Note:** This is only implemented for :ref:`ArrayMesh<class_ArrayMesh>` and :ref:`PrimitiveMesh<class_PrimitiveMesh>`.

----

.. _class_Mesh_method_get_faces:

- :ref:`PoolVector3Array<class_PoolVector3Array>` **get_faces** **(** **)** |const|

Devuelve todos los vértices que forman las caras de la malla. Cada tres vértices representan un triángulo.

----

.. _class_Mesh_method_get_surface_count:

- :ref:`int<class_int>` **get_surface_count** **(** **)** |const|

Devuelve la cantidad de superficies que la ``Mesh`` sostiene.

----

.. _class_Mesh_method_surface_get_arrays:

- :ref:`Array<class_Array>` **surface_get_arrays** **(** :ref:`int<class_int>` surf_idx **)** |const|

Devuelve los arrays para los vértices, normales, uvs, etc. que conforman la superficie solicitada (ver :ref:`ArrayMesh.add_surface_from_arrays<class_ArrayMesh_method_add_surface_from_arrays>`).

----

.. _class_Mesh_method_surface_get_blend_shape_arrays:

- :ref:`Array<class_Array>` **surface_get_blend_shape_arrays** **(** :ref:`int<class_int>` surf_idx **)** |const|

Devuelve los arrays de formas de mezcla para la superficie solicitada.

----

.. _class_Mesh_method_surface_get_material:

- :ref:`Material<class_Material>` **surface_get_material** **(** :ref:`int<class_int>` surf_idx **)** |const|

Devuelve un :ref:`Material<class_Material>` en una superficie determinada. La superficie se renderiza usando este material.

----

.. _class_Mesh_method_surface_set_material:

- void **surface_set_material** **(** :ref:`int<class_int>` surf_idx, :ref:`Material<class_Material>` material **)**

Establece un :ref:`Material<class_Material>` para una superficie determinada. La superficie se renderizará usando este material.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
