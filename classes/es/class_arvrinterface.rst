:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the ARVRInterface.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ARVRInterface:

ARVRInterface
=============

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`ARVRInterfaceGDNative<class_ARVRInterfaceGDNative>`, :ref:`MobileVRInterface<class_MobileVRInterface>`, :ref:`WebXRInterface<class_WebXRInterface>`

Clase base para la implementación de una interfaz AR/VR.

Descripción
----------------------

This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDNative modules (note that for GDNative the subclass ARVRScriptInterface should be used). Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.

Interfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through :ref:`ARVRServer<class_ARVRServer>`.

Tutoriales
--------------------

- :doc:`../tutorials/vr/index`

Propiedades
----------------------

+-------------------------+----------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`ar_is_anchor_detection_enabled<class_ARVRInterface_property_ar_is_anchor_detection_enabled>` | ``false`` |
+-------------------------+----------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`interface_is_initialized<class_ARVRInterface_property_interface_is_initialized>`             | ``false`` |
+-------------------------+----------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>` | :ref:`interface_is_primary<class_ARVRInterface_property_interface_is_primary>`                     | ``false`` |
+-------------------------+----------------------------------------------------------------------------------------------------+-----------+

Métodos
--------------

+------------------------------------------------------------+------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                      | :ref:`get_camera_feed_id<class_ARVRInterface_method_get_camera_feed_id>` **(** **)**           |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                      | :ref:`get_capabilities<class_ARVRInterface_method_get_capabilities>` **(** **)** |const|       |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                                | :ref:`get_name<class_ARVRInterface_method_get_name>` **(** **)** |const|                       |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                              | :ref:`get_render_targetsize<class_ARVRInterface_method_get_render_targetsize>` **(** **)**     |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+
| :ref:`Tracking_status<enum_ARVRInterface_Tracking_status>` | :ref:`get_tracking_status<class_ARVRInterface_method_get_tracking_status>` **(** **)** |const| |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                    | :ref:`initialize<class_ARVRInterface_method_initialize>` **(** **)**                           |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                    | :ref:`is_stereo<class_ARVRInterface_method_is_stereo>` **(** **)**                             |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+
| void                                                       | :ref:`uninitialize<class_ARVRInterface_method_uninitialize>` **(** **)**                       |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_ARVRInterface_Capabilities:

.. _class_ARVRInterface_constant_ARVR_NONE:

.. _class_ARVRInterface_constant_ARVR_MONO:

.. _class_ARVRInterface_constant_ARVR_STEREO:

.. _class_ARVRInterface_constant_ARVR_AR:

.. _class_ARVRInterface_constant_ARVR_EXTERNAL:

enum **Capabilities**:

- **ARVR_NONE** = **0** --- No ARVR capabilities.

- **ARVR_MONO** = **1** --- Esta interfaz puede funcionar con una salida de renderizado normal (AR no basada en HMD).

- **ARVR_STEREO** = **2** --- Esta interfaz soporta la renderización estereoscópica.

- **ARVR_AR** = **4** --- Esta interfaz soporta AR (video de fondo y seguimiento en el mundo real).

- **ARVR_EXTERNAL** = **8** --- Esta interfaz da salida a un dispositivo externo. Si se utiliza la vista principal, la salida en pantalla es un búfer sin modificar del ojo izquierdo o derecho (se estira si el tamaño de la vista no se cambia a la misma relación de aspecto de :ref:`get_render_targetsize<class_ARVRInterface_method_get_render_targetsize>`). El uso de un nodo de vista separado libera la vista principal para otros propósitos.

----

.. _enum_ARVRInterface_Eyes:

.. _class_ARVRInterface_constant_EYE_MONO:

.. _class_ARVRInterface_constant_EYE_LEFT:

.. _class_ARVRInterface_constant_EYE_RIGHT:

enum **Eyes**:

- **EYE_MONO** = **0** --- Salida mono, se utiliza principalmente de forma interna cuando se recupera la información de posicionamiento para nuestro nodo de cámara o cuando la representación estereoscópica no es compatible.

- **EYE_LEFT** = **1** --- Salida del ojo izquierdo, se utiliza principalmente de forma interna al renderizar la imagen para el ojo izquierdo y obtener información de posicionamiento y proyección.

- **EYE_RIGHT** = **2** --- Salida del ojo derecho, se utiliza principalmente de forma interna al renderizar la imagen para el ojo derecho y obtener información de posicionamiento y proyección.

----

.. _enum_ARVRInterface_Tracking_status:

.. _class_ARVRInterface_constant_ARVR_NORMAL_TRACKING:

.. _class_ARVRInterface_constant_ARVR_EXCESSIVE_MOTION:

.. _class_ARVRInterface_constant_ARVR_INSUFFICIENT_FEATURES:

.. _class_ARVRInterface_constant_ARVR_UNKNOWN_TRACKING:

.. _class_ARVRInterface_constant_ARVR_NOT_TRACKING:

enum **Tracking_status**:

- **ARVR_NORMAL_TRACKING** = **0** --- El rastreo se está comportando como se esperaba.

- **ARVR_EXCESSIVE_MOTION** = **1** --- El rastreo se ve obstaculizado por un movimiento excesivo (el jugador se mueve más rápido de lo que el rastreo puede mantener).

- **ARVR_INSUFFICIENT_FEATURES** = **2** --- El rastreo se ve obstaculizado por características insuficientes, está demasiado oscuro (para el rastreo basado en la cámara), el reproductor está bloqueado, etc.

- **ARVR_UNKNOWN_TRACKING** = **3** --- No conocemos el estado del rastreo o esta interfaz no proporciona información.

- **ARVR_NOT_TRACKING** = **4** --- El rastreo no funciona (cámara no enchufada u oscurecida, faros apagados, etc.).

Descripciones de Propiedades
--------------------------------------------------------

.. _class_ARVRInterface_property_ar_is_anchor_detection_enabled:

- :ref:`bool<class_bool>` **ar_is_anchor_detection_enabled**

+-----------+----------------------------------------+
| *Default* | ``false``                              |
+-----------+----------------------------------------+
| *Setter*  | set_anchor_detection_is_enabled(value) |
+-----------+----------------------------------------+
| *Getter*  | get_anchor_detection_is_enabled()      |
+-----------+----------------------------------------+

En una interfaz AR, ``true`` si la detección de anclas está activada.

----

.. _class_ARVRInterface_property_interface_is_initialized:

- :ref:`bool<class_bool>` **interface_is_initialized**

+-----------+---------------------------+
| *Default* | ``false``                 |
+-----------+---------------------------+
| *Setter*  | set_is_initialized(value) |
+-----------+---------------------------+
| *Getter*  | is_initialized()          |
+-----------+---------------------------+

``true`` si esta interfaz ha sido inicializada.

----

.. _class_ARVRInterface_property_interface_is_primary:

- :ref:`bool<class_bool>` **interface_is_primary**

+-----------+-----------------------+
| *Default* | ``false``             |
+-----------+-----------------------+
| *Setter*  | set_is_primary(value) |
+-----------+-----------------------+
| *Getter*  | is_primary()          |
+-----------+-----------------------+

``true`` si esta es la interfaz primaria.

Descripciones de Métodos
------------------------------------------------

.. _class_ARVRInterface_method_get_camera_feed_id:

- :ref:`int<class_int>` **get_camera_feed_id** **(** **)**

Si se trata de una interfaz AR que requiere mostrar una alimentación de la cámara como fondo, este método devuelve el ID de la alimentación en el :ref:`CameraServer<class_CameraServer>` para esta interfaz.

----

.. _class_ARVRInterface_method_get_capabilities:

- :ref:`int<class_int>` **get_capabilities** **(** **)** |const|

Devuelve una combinación de flags :ref:`Capabilities<enum_ARVRInterface_Capabilities>` que proporcionan información sobre las capacidades de esta interfaz.

----

.. _class_ARVRInterface_method_get_name:

- :ref:`String<class_String>` **get_name** **(** **)** |const|

Devuelve el nombre de esta interfaz (OpenVR, OpenHMD, ARKit, etc.).

----

.. _class_ARVRInterface_method_get_render_targetsize:

- :ref:`Vector2<class_Vector2>` **get_render_targetsize** **(** **)**

Devuelve la resolución a la que deberíamos renderizar nuestros resultados intermedios antes de que cosas como la distorsión de la lente sean aplicadas por la plataforma VR.

----

.. _class_ARVRInterface_method_get_tracking_status:

- :ref:`Tracking_status<enum_ARVRInterface_Tracking_status>` **get_tracking_status** **(** **)** |const|

Si se apoya, devuelve el estado de nuestro rastreo. Esto le permitirá proporcionar información al usuario sobre si hay problemas con el rastreo posicional.

----

.. _class_ARVRInterface_method_initialize:

- :ref:`bool<class_bool>` **initialize** **(** **)**

Llama a esto para inicializar esta interfaz. La primera interfaz que se inicializa se identifica como la interfaz principal y se utilizará para la prestación de servicios.

Después de inicializar la interfaz que quieres usar, necesitas habilitar el modo AR/VR de una ventana y la renderización debe comenzar.

\ **Nota:** Debes habilitar el modo AR/VR en la vista principal para cualquier dispositivo que utilice la salida principal de Godot, como por ejemplo para la RV móvil.

Si lo haces para una plataforma que maneja su propia salida (como OpenVR), Godot mostrará un solo ojo sin distorsión en la pantalla. Alternativamente, puedes añadir un nodo de puerto de visión separado a tu escena y habilitar la AR/VR en ese puerto de visión. Se utilizará para la salida al HMD, dejándote libre para hacer lo que quieras en la ventana principal, como usar una cámara separada como cámara de espectador o renderizar algo completamente diferente.

Mientras que actualmente no se utiliza, puede activar interfaces adicionales. Puede que quieras hacer esto si quieres rastrear los controladores de otras plataformas. Sin embargo, en este momento sólo una interfaz puede renderizar a un HMD.

----

.. _class_ARVRInterface_method_is_stereo:

- :ref:`bool<class_bool>` **is_stereo** **(** **)**

Devuelve ``true`` si la salida actual de esta interfaz está en estéreo.

----

.. _class_ARVRInterface_method_uninitialize:

- void **uninitialize** **(** **)**

Apaga la interfaz.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
