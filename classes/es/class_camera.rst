:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Camera.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Camera:

Camera
======

**Inherits:** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`ARVRCamera<class_ARVRCamera>`, :ref:`ClippedCamera<class_ClippedCamera>`, :ref:`InterpolatedCamera<class_InterpolatedCamera>`

Nodo de cámara, muestra desde un punto de vista.

Descripción
----------------------

Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest :ref:`Viewport<class_Viewport>` node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport. In other words, a camera just provides 3D display capabilities to a :ref:`Viewport<class_Viewport>`, and, without one, a scene registered in that :ref:`Viewport<class_Viewport>` (or higher viewports) can't be displayed.

Tutoriales
--------------------

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

Propiedades
----------------------

+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                               | :ref:`cull_mask<class_Camera_property_cull_mask>`               | ``1048575``         |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                             | :ref:`current<class_Camera_property_current>`                   | ``false``           |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`DopplerTracking<enum_Camera_DopplerTracking>` | :ref:`doppler_tracking<class_Camera_property_doppler_tracking>` | ``0``               |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`Environment<class_Environment>`               | :ref:`environment<class_Camera_property_environment>`           |                     |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`far<class_Camera_property_far>`                           | ``100.0``           |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`fov<class_Camera_property_fov>`                           | ``70.0``            |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                       | :ref:`frustum_offset<class_Camera_property_frustum_offset>`     | ``Vector2( 0, 0 )`` |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`h_offset<class_Camera_property_h_offset>`                 | ``0.0``             |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`KeepAspect<enum_Camera_KeepAspect>`           | :ref:`keep_aspect<class_Camera_property_keep_aspect>`           | ``1``               |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`near<class_Camera_property_near>`                         | ``0.05``            |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`Projection<enum_Camera_Projection>`           | :ref:`projection<class_Camera_property_projection>`             | ``0``               |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`size<class_Camera_property_size>`                         | ``1.0``             |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                           | :ref:`v_offset<class_Camera_property_v_offset>`                 | ``0.0``             |
+-----------------------------------------------------+-----------------------------------------------------------------+---------------------+

Métodos
--------------

+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`clear_current<class_Camera_method_clear_current>` **(** :ref:`bool<class_bool>` enable_next=true **)**                                                                                            |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`RID<class_RID>`             | :ref:`get_camera_rid<class_Camera_method_get_camera_rid>` **(** **)** |const|                                                                                                                           |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>` | :ref:`get_camera_transform<class_Camera_method_get_camera_transform>` **(** **)** |const|                                                                                                               |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`get_cull_mask_bit<class_Camera_method_get_cull_mask_bit>` **(** :ref:`int<class_int>` layer **)** |const|                                                                                         |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`         | :ref:`get_frustum<class_Camera_method_get_frustum>` **(** **)** |const|                                                                                                                                 |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_position_behind<class_Camera_method_is_position_behind>` **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|                                                                         |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`make_current<class_Camera_method_make_current>` **(** **)**                                                                                                                                       |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`     | :ref:`project_local_ray_normal<class_Camera_method_project_local_ray_normal>` **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|                                                            |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`     | :ref:`project_position<class_Camera_method_project_position>` **(** :ref:`Vector2<class_Vector2>` screen_point, :ref:`float<class_float>` z_depth **)** |const|                                         |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`     | :ref:`project_ray_normal<class_Camera_method_project_ray_normal>` **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|                                                                        |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`     | :ref:`project_ray_origin<class_Camera_method_project_ray_origin>` **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|                                                                        |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_cull_mask_bit<class_Camera_method_set_cull_mask_bit>` **(** :ref:`int<class_int>` layer, :ref:`bool<class_bool>` enable **)**                                                                 |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_frustum<class_Camera_method_set_frustum>` **(** :ref:`float<class_float>` size, :ref:`Vector2<class_Vector2>` offset, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)** |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_orthogonal<class_Camera_method_set_orthogonal>` **(** :ref:`float<class_float>` size, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**                                 |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_perspective<class_Camera_method_set_perspective>` **(** :ref:`float<class_float>` fov, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**                                |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`     | :ref:`unproject_position<class_Camera_method_unproject_position>` **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|                                                                         |
+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_Camera_Projection:

.. _class_Camera_constant_PROJECTION_PERSPECTIVE:

.. _class_Camera_constant_PROJECTION_ORTHOGONAL:

.. _class_Camera_constant_PROJECTION_FRUSTUM:

enum **Projection**:

- **PROJECTION_PERSPECTIVE** = **0** --- Proyección de la perspectiva. Los objetos en la pantalla se hacen más pequeños cuando están lejos.

- **PROJECTION_ORTHOGONAL** = **1** --- Proyección ortogonal, también conocida como proyección ortográfica. Los objetos permanecen del mismo tamaño en la pantalla sin importar lo lejos que estén.

- **PROJECTION_FRUSTUM** = **2** --- Proyección de Frustum. Este modo permite ajustar :ref:`frustum_offset<class_Camera_property_frustum_offset>` para crear efectos de "frustum inclinado".

----

.. _enum_Camera_KeepAspect:

.. _class_Camera_constant_KEEP_WIDTH:

.. _class_Camera_constant_KEEP_HEIGHT:

enum **KeepAspect**:

- **KEEP_WIDTH** = **0** --- Preserva la relación de aspecto horizontal; también conocida como escala de Vert-. Esta suele ser la mejor opción para los proyectos que se ejecutan en modo de retrato, ya que las proporciones de aspecto más altas se beneficiarán de un mayor FOV vertical.

- **KEEP_HEIGHT** = **1** --- Preserva la relación de aspecto vertical; también conocida como escala Hor+. Esta suele ser la mejor opción para los proyectos que se ejecutan en modo paisaje, ya que las relaciones de aspecto más amplias se beneficiarán automáticamente de un FOV horizontal más amplio.

----

.. _enum_Camera_DopplerTracking:

.. _class_Camera_constant_DOPPLER_TRACKING_DISABLED:

.. _class_Camera_constant_DOPPLER_TRACKING_IDLE_STEP:

.. _class_Camera_constant_DOPPLER_TRACKING_PHYSICS_STEP:

enum **DopplerTracking**:

- **DOPPLER_TRACKING_DISABLED** = **0** --- Desactiva la simulación del `efecto Doppler <https://en.wikipedia.org/wiki/Doppler_effect>`__ (por defecto).

- **DOPPLER_TRACKING_IDLE_STEP** = **1** --- Simulate `Doppler effect <https://en.wikipedia.org/wiki/Doppler_effect>`__ by tracking positions of objects that are changed in ``_process``. Changes in the relative velocity of this camera compared to those objects affect how audio is perceived (changing the audio's :ref:`AudioStreamPlayer3D.pitch_scale<class_AudioStreamPlayer3D_property_pitch_scale>`).

- **DOPPLER_TRACKING_PHYSICS_STEP** = **2** --- Simulate `Doppler effect <https://en.wikipedia.org/wiki/Doppler_effect>`__ by tracking positions of objects that are changed in ``_physics_process``. Changes in the relative velocity of this camera compared to those objects affect how audio is perceived (changing the audio's :ref:`AudioStreamPlayer3D.pitch_scale<class_AudioStreamPlayer3D_property_pitch_scale>`).

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Camera_property_cull_mask:

- :ref:`int<class_int>` **cull_mask**

+-----------+----------------------+
| *Default* | ``1048575``          |
+-----------+----------------------+
| *Setter*  | set_cull_mask(value) |
+-----------+----------------------+
| *Getter*  | get_cull_mask()      |
+-----------+----------------------+

La máscara de selección que describe qué capas de renderizado 3D son renderizadas por esta cámara.

----

.. _class_Camera_property_current:

- :ref:`bool<class_bool>` **current**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_current(value) |
+-----------+--------------------+
| *Getter*  | is_current()       |
+-----------+--------------------+

Si ``true``, el ancestro :ref:`Viewport<class_Viewport>` está actualmente usando esta cámara.

----

.. _class_Camera_property_doppler_tracking:

- :ref:`DopplerTracking<enum_Camera_DopplerTracking>` **doppler_tracking**

+-----------+-----------------------------+
| *Default* | ``0``                       |
+-----------+-----------------------------+
| *Setter*  | set_doppler_tracking(value) |
+-----------+-----------------------------+
| *Getter*  | get_doppler_tracking()      |
+-----------+-----------------------------+

If not :ref:`DOPPLER_TRACKING_DISABLED<class_Camera_constant_DOPPLER_TRACKING_DISABLED>`, this camera will simulate the `Doppler effect <https://en.wikipedia.org/wiki/Doppler_effect>`__ for objects changed in particular ``_process`` methods. The Doppler effect is only simulated for :ref:`AudioStreamPlayer3D<class_AudioStreamPlayer3D>` nodes that have :ref:`AudioStreamPlayer3D.doppler_tracking<class_AudioStreamPlayer3D_property_doppler_tracking>` set to a value other than :ref:`AudioStreamPlayer3D.DOPPLER_TRACKING_DISABLED<class_AudioStreamPlayer3D_constant_DOPPLER_TRACKING_DISABLED>`.

\ **Note:** To toggle the Doppler effect preview in the editor, use the Perspective menu in the top-left corner of the 3D viewport and toggle **Enable Doppler**.

----

.. _class_Camera_property_environment:

- :ref:`Environment<class_Environment>` **environment**

+----------+------------------------+
| *Setter* | set_environment(value) |
+----------+------------------------+
| *Getter* | get_environment()      |
+----------+------------------------+

El :ref:`Environment<class_Environment>` a utilizar para esta cámara.

----

.. _class_Camera_property_far:

- :ref:`float<class_float>` **far**

+-----------+-----------------+
| *Default* | ``100.0``       |
+-----------+-----------------+
| *Setter*  | set_zfar(value) |
+-----------+-----------------+
| *Getter*  | get_zfar()      |
+-----------+-----------------+

La distancia al límite lejano de selección de esta cámara en relación con su eje Z local.

----

.. _class_Camera_property_fov:

- :ref:`float<class_float>` **fov**

+-----------+----------------+
| *Default* | ``70.0``       |
+-----------+----------------+
| *Setter*  | set_fov(value) |
+-----------+----------------+
| *Getter*  | get_fov()      |
+-----------+----------------+

The camera's field of view angle (in degrees). Only applicable in perspective mode. Since :ref:`keep_aspect<class_Camera_property_keep_aspect>` locks one axis, ``fov`` sets the other axis' field of view angle.

For reference, the default vertical field of view value (``70.0``) is equivalent to a horizontal FOV of:

- ~86.07 degrees in a 4:3 viewport

- ~96.50 degrees in a 16:10 viewport

- ~102.45 degrees in a 16:9 viewport

- ~117.06 degrees in a 21:9 viewport

----

.. _class_Camera_property_frustum_offset:

- :ref:`Vector2<class_Vector2>` **frustum_offset**

+-----------+---------------------------+
| *Default* | ``Vector2( 0, 0 )``       |
+-----------+---------------------------+
| *Setter*  | set_frustum_offset(value) |
+-----------+---------------------------+
| *Getter*  | get_frustum_offset()      |
+-----------+---------------------------+

El desplazamiento de la cámara de frustum. Se puede cambiar desde el valor predeterminado para crear efectos de "frustum inclinado" como `Y-shearing <https://zdoom.org/wiki/Y-shearing>`__.

----

.. _class_Camera_property_h_offset:

- :ref:`float<class_float>` **h_offset**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_h_offset(value) |
+-----------+---------------------+
| *Getter*  | get_h_offset()      |
+-----------+---------------------+

El desplazamiento horizontal (X) de la vista de la cámara.

----

.. _class_Camera_property_keep_aspect:

- :ref:`KeepAspect<enum_Camera_KeepAspect>` **keep_aspect**

+-----------+-----------------------------+
| *Default* | ``1``                       |
+-----------+-----------------------------+
| *Setter*  | set_keep_aspect_mode(value) |
+-----------+-----------------------------+
| *Getter*  | get_keep_aspect_mode()      |
+-----------+-----------------------------+

El eje a bloquear durante los ajustes de :ref:`fov<class_Camera_property_fov>`/:ref:`size<class_Camera_property_size>`. Puede ser :ref:`KEEP_WIDTH<class_Camera_constant_KEEP_WIDTH>` o :ref:`KEEP_HEIGHT<class_Camera_constant_KEEP_HEIGHT>`.

----

.. _class_Camera_property_near:

- :ref:`float<class_float>` **near**

+-----------+------------------+
| *Default* | ``0.05``         |
+-----------+------------------+
| *Setter*  | set_znear(value) |
+-----------+------------------+
| *Getter*  | get_znear()      |
+-----------+------------------+

La distancia al límite cercano de selección de esta cámara en relación con su eje Z local.

----

.. _class_Camera_property_projection:

- :ref:`Projection<enum_Camera_Projection>` **projection**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_projection(value) |
+-----------+-----------------------+
| *Getter*  | get_projection()      |
+-----------+-----------------------+

El modo de proyección de la cámara. En el modo :ref:`PROJECTION_PERSPECTIVE<class_Camera_constant_PROJECTION_PERSPECTIVE>`, la distancia Z de los objetos al espacio local de la cámara escala su tamaño percibido.

----

.. _class_Camera_property_size:

- :ref:`float<class_float>` **size**

+-----------+-----------------+
| *Default* | ``1.0``         |
+-----------+-----------------+
| *Setter*  | set_size(value) |
+-----------+-----------------+
| *Getter*  | get_size()      |
+-----------+-----------------+

El tamaño de la cámara se mide como la mitad de la anchura o la altura. Sólo aplicable en modo ortogonal. Dado que :ref:`keep_aspect<class_Camera_property_keep_aspect>` se bloquea en el eje, ``size`` establece la longitud del tamaño del otro eje.

----

.. _class_Camera_property_v_offset:

- :ref:`float<class_float>` **v_offset**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_v_offset(value) |
+-----------+---------------------+
| *Getter*  | get_v_offset()      |
+-----------+---------------------+

El desplazamiento vertical (Y) del viewport de la cámara.

Descripciones de Métodos
------------------------------------------------

.. _class_Camera_method_clear_current:

- void **clear_current** **(** :ref:`bool<class_bool>` enable_next=true **)**

Si esta es la cámara actual, quítala de ser la actul. Si ``enable_next`` es ``true``, pide que se actualice la siguiente cámara, si la hay.

----

.. _class_Camera_method_get_camera_rid:

- :ref:`RID<class_RID>` **get_camera_rid** **(** **)** |const|

Returns the camera's RID from the :ref:`VisualServer<class_VisualServer>`.

----

.. _class_Camera_method_get_camera_transform:

- :ref:`Transform<class_Transform>` **get_camera_transform** **(** **)** |const|

Returns the transform of the camera plus the vertical (:ref:`v_offset<class_Camera_property_v_offset>`) and horizontal (:ref:`h_offset<class_Camera_property_h_offset>`) offsets; and any other adjustments made to the position and orientation of the camera by subclassed cameras such as :ref:`ClippedCamera<class_ClippedCamera>`, :ref:`InterpolatedCamera<class_InterpolatedCamera>` and :ref:`ARVRCamera<class_ARVRCamera>`.

----

.. _class_Camera_method_get_cull_mask_bit:

- :ref:`bool<class_bool>` **get_cull_mask_bit** **(** :ref:`int<class_int>` layer **)** |const|

Devuelve ``true`` si el ``layer`` dado en el :ref:`cull_mask<class_Camera_property_cull_mask>` está activado, ``false`` en caso contrario.

----

.. _class_Camera_method_get_frustum:

- :ref:`Array<class_Array>` **get_frustum** **(** **)** |const|

Returns the camera's frustum planes in world space units as an array of :ref:`Plane<class_Plane>`\ s in the following order: near, far, left, top, right, bottom. Not to be confused with :ref:`frustum_offset<class_Camera_property_frustum_offset>`.

----

.. _class_Camera_method_is_position_behind:

- :ref:`bool<class_bool>` **is_position_behind** **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|

Devuelve ``true`` si la posición dada está detrás de la cámara.

\ **Nota:** Una posición que devuelva ``false`` puede seguir estando fuera del campo de visión de la camara.

----

.. _class_Camera_method_make_current:

- void **make_current** **(** **)**

Hace que esta cámara sea la cámara actual para el :ref:`Viewport<class_Viewport>` (ver descripción de la clase). Si el nodo de la cámara está fuera del árbol de la escena, intentará convertirse en actual una vez que se añada.

----

.. _class_Camera_method_project_local_ray_normal:

- :ref:`Vector3<class_Vector3>` **project_local_ray_normal** **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|

Devuelve un vector normal de la ubicación del punto de la pantalla dirigido a lo largo de la cámara. Las cámaras ortogonales están normalizadas. Las cámaras de perspectiva tienen en cuenta la perspectiva, la anchura y la altura de la pantalla, etc.

----

.. _class_Camera_method_project_position:

- :ref:`Vector3<class_Vector3>` **project_position** **(** :ref:`Vector2<class_Vector2>` screen_point, :ref:`float<class_float>` z_depth **)** |const|

Returns the 3D point in world space that maps to the given 2D coordinate in the :ref:`Viewport<class_Viewport>` rectangle on a plane that is the given ``z_depth`` distance into the scene away from the camera.

----

.. _class_Camera_method_project_ray_normal:

- :ref:`Vector3<class_Vector3>` **project_ray_normal** **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|

Returns a normal vector in world space, that is the result of projecting a point on the :ref:`Viewport<class_Viewport>` rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.

----

.. _class_Camera_method_project_ray_origin:

- :ref:`Vector3<class_Vector3>` **project_ray_origin** **(** :ref:`Vector2<class_Vector2>` screen_point **)** |const|

Returns a 3D position in world space, that is the result of projecting a point on the :ref:`Viewport<class_Viewport>` rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.

----

.. _class_Camera_method_set_cull_mask_bit:

- void **set_cull_mask_bit** **(** :ref:`int<class_int>` layer, :ref:`bool<class_bool>` enable **)**

Habilita o deshabilita la ``layer`` dada en el :ref:`cull_mask<class_Camera_property_cull_mask>`.

----

.. _class_Camera_method_set_frustum:

- void **set_frustum** **(** :ref:`float<class_float>` size, :ref:`Vector2<class_Vector2>` offset, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**

Sets the camera projection to frustum mode (see :ref:`PROJECTION_FRUSTUM<class_Camera_constant_PROJECTION_FRUSTUM>`), by specifying a ``size``, an ``offset``, and the ``z_near`` and ``z_far`` clip planes in world space units.

----

.. _class_Camera_method_set_orthogonal:

- void **set_orthogonal** **(** :ref:`float<class_float>` size, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**

Sets the camera projection to orthogonal mode (see :ref:`PROJECTION_ORTHOGONAL<class_Camera_constant_PROJECTION_ORTHOGONAL>`), by specifying a ``size``, and the ``z_near`` and ``z_far`` clip planes in world space units. (As a hint, 2D games often use this projection, with values specified in pixels.)

----

.. _class_Camera_method_set_perspective:

- void **set_perspective** **(** :ref:`float<class_float>` fov, :ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**

Sets the camera projection to perspective mode (see :ref:`PROJECTION_PERSPECTIVE<class_Camera_constant_PROJECTION_PERSPECTIVE>`), by specifying a ``fov`` (field of view) angle in degrees, and the ``z_near`` and ``z_far`` clip planes in world space units.

----

.. _class_Camera_method_unproject_position:

- :ref:`Vector2<class_Vector2>` **unproject_position** **(** :ref:`Vector3<class_Vector3>` world_point **)** |const|

Returns the 2D coordinate in the :ref:`Viewport<class_Viewport>` rectangle that maps to the given 3D point in world space.

\ **Note:** When using this to position GUI elements over a 3D viewport, use :ref:`is_position_behind<class_Camera_method_is_position_behind>` to prevent them from appearing if the 3D point is behind the camera:

::

    # This code block is part of a script that inherits from Spatial.
    # `control` is a reference to a node inheriting from Control.
    control.visible = not get_viewport().get_camera().is_position_behind(global_transform.origin)
    control.rect_position = get_viewport().get_camera().unproject_position(global_transform.origin)

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
