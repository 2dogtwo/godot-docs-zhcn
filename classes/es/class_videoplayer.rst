:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the VideoPlayer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_VideoPlayer:

VideoPlayer
===========

**Inherits:** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Control para la reproducción de streams de vídeo.

Descripción
----------------------

Control node for playing video streams using :ref:`VideoStream<class_VideoStream>` resources.

Supported video formats are `WebM <https://www.webmproject.org/>`__ (``.webm``, :ref:`VideoStreamWebm<class_VideoStreamWebm>`), `Ogg Theora <https://www.theora.org/>`__ (``.ogv``, :ref:`VideoStreamTheora<class_VideoStreamTheora>`), and any format exposed via a GDNative plugin using :ref:`VideoStreamGDNative<class_VideoStreamGDNative>`.

\ **Note:** Due to a bug, VideoPlayer does not support localization remapping yet.

\ **Warning:** On HTML5, video playback *will* perform poorly due to missing architecture-specific assembly optimizations, especially for VP8/VP9.

Propiedades
----------------------

+---------------------------------------+--------------------------------------------------------------------+--------------+
| :ref:`int<class_int>`                 | :ref:`audio_track<class_VideoPlayer_property_audio_track>`         | ``0``        |
+---------------------------------------+--------------------------------------------------------------------+--------------+
| :ref:`bool<class_bool>`               | :ref:`autoplay<class_VideoPlayer_property_autoplay>`               | ``false``    |
+---------------------------------------+--------------------------------------------------------------------+--------------+
| :ref:`int<class_int>`                 | :ref:`buffering_msec<class_VideoPlayer_property_buffering_msec>`   | ``500``      |
+---------------------------------------+--------------------------------------------------------------------+--------------+
| :ref:`String<class_String>`           | :ref:`bus<class_VideoPlayer_property_bus>`                         | ``"Master"`` |
+---------------------------------------+--------------------------------------------------------------------+--------------+
| :ref:`bool<class_bool>`               | :ref:`expand<class_VideoPlayer_property_expand>`                   | ``true``     |
+---------------------------------------+--------------------------------------------------------------------+--------------+
| :ref:`bool<class_bool>`               | :ref:`paused<class_VideoPlayer_property_paused>`                   | ``false``    |
+---------------------------------------+--------------------------------------------------------------------+--------------+
| :ref:`VideoStream<class_VideoStream>` | :ref:`stream<class_VideoPlayer_property_stream>`                   |              |
+---------------------------------------+--------------------------------------------------------------------+--------------+
| :ref:`float<class_float>`             | :ref:`stream_position<class_VideoPlayer_property_stream_position>` |              |
+---------------------------------------+--------------------------------------------------------------------+--------------+
| :ref:`float<class_float>`             | :ref:`volume<class_VideoPlayer_property_volume>`                   |              |
+---------------------------------------+--------------------------------------------------------------------+--------------+
| :ref:`float<class_float>`             | :ref:`volume_db<class_VideoPlayer_property_volume_db>`             | ``0.0``      |
+---------------------------------------+--------------------------------------------------------------------+--------------+

Métodos
--------------

+-------------------------------+------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`   | :ref:`get_stream_name<class_VideoPlayer_method_get_stream_name>` **(** **)** |const|     |
+-------------------------------+------------------------------------------------------------------------------------------+
| :ref:`Texture<class_Texture>` | :ref:`get_video_texture<class_VideoPlayer_method_get_video_texture>` **(** **)** |const| |
+-------------------------------+------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_playing<class_VideoPlayer_method_is_playing>` **(** **)** |const|               |
+-------------------------------+------------------------------------------------------------------------------------------+
| void                          | :ref:`play<class_VideoPlayer_method_play>` **(** **)**                                   |
+-------------------------------+------------------------------------------------------------------------------------------+
| void                          | :ref:`stop<class_VideoPlayer_method_stop>` **(** **)**                                   |
+-------------------------------+------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_VideoPlayer_signal_finished:

- **finished** **(** **)**

Se emite cuando termina la reproducción.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_VideoPlayer_property_audio_track:

- :ref:`int<class_int>` **audio_track**

+-----------+------------------------+
| *Default* | ``0``                  |
+-----------+------------------------+
| *Setter*  | set_audio_track(value) |
+-----------+------------------------+
| *Getter*  | get_audio_track()      |
+-----------+------------------------+

La pista de audio incrustada para reproducir.

----

.. _class_VideoPlayer_property_autoplay:

- :ref:`bool<class_bool>` **autoplay**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_autoplay(value) |
+-----------+---------------------+
| *Getter*  | has_autoplay()      |
+-----------+---------------------+

Si ``true``, la reproducción comienza cuando la escena se carga.

----

.. _class_VideoPlayer_property_buffering_msec:

- :ref:`int<class_int>` **buffering_msec**

+-----------+---------------------------+
| *Default* | ``500``                   |
+-----------+---------------------------+
| *Setter*  | set_buffering_msec(value) |
+-----------+---------------------------+
| *Getter*  | get_buffering_msec()      |
+-----------+---------------------------+

Cantidad de tiempo en milisegundos para almacenar en el buffer mientras se juega.

----

.. _class_VideoPlayer_property_bus:

- :ref:`String<class_String>` **bus**

+-----------+----------------+
| *Default* | ``"Master"``   |
+-----------+----------------+
| *Setter*  | set_bus(value) |
+-----------+----------------+
| *Getter*  | get_bus()      |
+-----------+----------------+

Bus de audio para usar para la reproducción de sonido.

----

.. _class_VideoPlayer_property_expand:

- :ref:`bool<class_bool>` **expand**

+-----------+-------------------+
| *Default* | ``true``          |
+-----------+-------------------+
| *Setter*  | set_expand(value) |
+-----------+-------------------+
| *Getter*  | has_expand()      |
+-----------+-------------------+

Si ``true``, el video se escala al tamaño de control. En caso contrario, el tamaño mínimo de control se ajustará automáticamente para que coincida con las dimensiones del stream de vídeo.

----

.. _class_VideoPlayer_property_paused:

- :ref:`bool<class_bool>` **paused**

+-----------+-------------------+
| *Default* | ``false``         |
+-----------+-------------------+
| *Setter*  | set_paused(value) |
+-----------+-------------------+
| *Getter*  | is_paused()       |
+-----------+-------------------+

Si ``true``, el video se pausa.

----

.. _class_VideoPlayer_property_stream:

- :ref:`VideoStream<class_VideoStream>` **stream**

+----------+-------------------+
| *Setter* | set_stream(value) |
+----------+-------------------+
| *Getter* | get_stream()      |
+----------+-------------------+

El stream de video asignado. Véase la descripción de los formatos soportados.

----

.. _class_VideoPlayer_property_stream_position:

- :ref:`float<class_float>` **stream_position**

+----------+----------------------------+
| *Setter* | set_stream_position(value) |
+----------+----------------------------+
| *Getter* | get_stream_position()      |
+----------+----------------------------+

The current position of the stream, in seconds.

\ **Note:** Changing this value won't have any effect as seeking is not implemented yet, except in video formats implemented by a GDNative add-on.

----

.. _class_VideoPlayer_property_volume:

- :ref:`float<class_float>` **volume**

+----------+-------------------+
| *Setter* | set_volume(value) |
+----------+-------------------+
| *Getter* | get_volume()      |
+----------+-------------------+

El volumen del audio como un valor lineal.

----

.. _class_VideoPlayer_property_volume_db:

- :ref:`float<class_float>` **volume_db**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_volume_db(value) |
+-----------+----------------------+
| *Getter*  | get_volume_db()      |
+-----------+----------------------+

Volumen de audio en dB.

Descripciones de Métodos
------------------------------------------------

.. _class_VideoPlayer_method_get_stream_name:

- :ref:`String<class_String>` **get_stream_name** **(** **)** |const|

Devuelve el nombre del stream de video, o ``"<No Stream>"`` si no hay stream de video asignado.

----

.. _class_VideoPlayer_method_get_video_texture:

- :ref:`Texture<class_Texture>` **get_video_texture** **(** **)** |const|

Returns the current frame as a :ref:`Texture<class_Texture>`.

----

.. _class_VideoPlayer_method_is_playing:

- :ref:`bool<class_bool>` **is_playing** **(** **)** |const|

Devuelve ``true`` si el video se está reproduciendo.

\ **Nota:** El vídeo sigue considerándose en reproducción si se interrumpe durante la reproducción.

----

.. _class_VideoPlayer_method_play:

- void **play** **(** **)**

Inicia la reproducción del video desde el principio. Si el vídeo está en pausa, esto no la desactivará.

----

.. _class_VideoPlayer_method_stop:

- void **stop** **(** **)**

Detiene la reproducción del video y establece la posición del streaming en 0.

\ **Nota:** Aunque la posición del stream se establezca en 0, el primer fotograma del stream de vídeo no se convertirá en el fotograma actual.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
