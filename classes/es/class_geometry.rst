:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Geometry.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Geometry:

Geometry
========

**Inherits:** :ref:`Object<class_Object>`

Helper node to calculate generic geometry operations.

Descripción
----------------------

Geometry provides users with a set of helper functions to create geometric shapes, compute intersections between shapes, and process various other geometric operations.

Métodos
--------------

+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`build_box_planes<class_Geometry_method_build_box_planes>` **(** :ref:`Vector3<class_Vector3>` extents **)**                                                                                                                                                                                |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`build_capsule_planes<class_Geometry_method_build_capsule_planes>` **(** :ref:`float<class_float>` radius, :ref:`float<class_float>` height, :ref:`int<class_int>` sides, :ref:`int<class_int>` lats, Vector3.Axis axis=2 **)**                                                             |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`build_cylinder_planes<class_Geometry_method_build_cylinder_planes>` **(** :ref:`float<class_float>` radius, :ref:`float<class_float>` height, :ref:`int<class_int>` sides, Vector3.Axis axis=2 **)**                                                                                       |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector3Array<class_PoolVector3Array>` | :ref:`clip_polygon<class_Geometry_method_clip_polygon>` **(** :ref:`PoolVector3Array<class_PoolVector3Array>` points, :ref:`Plane<class_Plane>` plane **)**                                                                                                                                      |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`clip_polygons_2d<class_Geometry_method_clip_polygons_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**                                                                                                 |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`clip_polyline_with_polygon_2d<class_Geometry_method_clip_polyline_with_polygon_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**                                                                          |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector2Array<class_PoolVector2Array>` | :ref:`convex_hull_2d<class_Geometry_method_convex_hull_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` points **)**                                                                                                                                                                   |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`exclude_polygons_2d<class_Geometry_method_exclude_polygons_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**                                                                                           |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`                   | :ref:`get_closest_point_to_segment<class_Geometry_method_get_closest_point_to_segment>` **(** :ref:`Vector3<class_Vector3>` point, :ref:`Vector3<class_Vector3>` s1, :ref:`Vector3<class_Vector3>` s2 **)**                                                                                      |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                   | :ref:`get_closest_point_to_segment_2d<class_Geometry_method_get_closest_point_to_segment_2d>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` s1, :ref:`Vector2<class_Vector2>` s2 **)**                                                                                |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`                   | :ref:`get_closest_point_to_segment_uncapped<class_Geometry_method_get_closest_point_to_segment_uncapped>` **(** :ref:`Vector3<class_Vector3>` point, :ref:`Vector3<class_Vector3>` s1, :ref:`Vector3<class_Vector3>` s2 **)**                                                                    |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                   | :ref:`get_closest_point_to_segment_uncapped_2d<class_Geometry_method_get_closest_point_to_segment_uncapped_2d>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` s1, :ref:`Vector2<class_Vector2>` s2 **)**                                                              |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector3Array<class_PoolVector3Array>` | :ref:`get_closest_points_between_segments<class_Geometry_method_get_closest_points_between_segments>` **(** :ref:`Vector3<class_Vector3>` p1, :ref:`Vector3<class_Vector3>` p2, :ref:`Vector3<class_Vector3>` q1, :ref:`Vector3<class_Vector3>` q2 **)**                                         |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector2Array<class_PoolVector2Array>` | :ref:`get_closest_points_between_segments_2d<class_Geometry_method_get_closest_points_between_segments_2d>` **(** :ref:`Vector2<class_Vector2>` p1, :ref:`Vector2<class_Vector2>` q1, :ref:`Vector2<class_Vector2>` p2, :ref:`Vector2<class_Vector2>` q2 **)**                                   |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                           | :ref:`get_uv84_normal_bit<class_Geometry_method_get_uv84_normal_bit>` **(** :ref:`Vector3<class_Vector3>` normal **)**                                                                                                                                                                           |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`intersect_polygons_2d<class_Geometry_method_intersect_polygons_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**                                                                                       |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`intersect_polyline_with_polygon_2d<class_Geometry_method_intersect_polyline_with_polygon_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**                                                                |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`is_point_in_circle<class_Geometry_method_is_point_in_circle>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` circle_position, :ref:`float<class_float>` circle_radius **)**                                                                                      |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`is_point_in_polygon<class_Geometry_method_is_point_in_polygon>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**                                                                                                                   |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**                                                                                                                                                      |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                   | :ref:`line_intersects_line_2d<class_Geometry_method_line_intersects_line_2d>` **(** :ref:`Vector2<class_Vector2>` from_a, :ref:`Vector2<class_Vector2>` dir_a, :ref:`Vector2<class_Vector2>` from_b, :ref:`Vector2<class_Vector2>` dir_b **)**                                                   |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`             | :ref:`make_atlas<class_Geometry_method_make_atlas>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` sizes **)**                                                                                                                                                                            |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`merge_polygons_2d<class_Geometry_method_merge_polygons_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**                                                                                               |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`offset_polygon_2d<class_Geometry_method_offset_polygon_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon, :ref:`float<class_float>` delta, :ref:`PolyJoinType<enum_Geometry_PolyJoinType>` join_type=0 **)**                                                              |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                       | :ref:`offset_polyline_2d<class_Geometry_method_offset_polyline_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`float<class_float>` delta, :ref:`PolyJoinType<enum_Geometry_PolyJoinType>` join_type=0, :ref:`PolyEndType<enum_Geometry_PolyEndType>` end_type=3 **)** |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                         | :ref:`point_is_inside_triangle<class_Geometry_method_point_is_inside_triangle>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` a, :ref:`Vector2<class_Vector2>` b, :ref:`Vector2<class_Vector2>` c **)** |const|                                                       |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                   | :ref:`ray_intersects_triangle<class_Geometry_method_ray_intersects_triangle>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` dir, :ref:`Vector3<class_Vector3>` a, :ref:`Vector3<class_Vector3>` b, :ref:`Vector3<class_Vector3>` c **)**                               |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                       | :ref:`segment_intersects_circle<class_Geometry_method_segment_intersects_circle>` **(** :ref:`Vector2<class_Vector2>` segment_from, :ref:`Vector2<class_Vector2>` segment_to, :ref:`Vector2<class_Vector2>` circle_position, :ref:`float<class_float>` circle_radius **)**                       |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector3Array<class_PoolVector3Array>` | :ref:`segment_intersects_convex<class_Geometry_method_segment_intersects_convex>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Array<class_Array>` planes **)**                                                                                             |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector3Array<class_PoolVector3Array>` | :ref:`segment_intersects_cylinder<class_Geometry_method_segment_intersects_cylinder>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`float<class_float>` height, :ref:`float<class_float>` radius **)**                                                       |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                   | :ref:`segment_intersects_segment_2d<class_Geometry_method_segment_intersects_segment_2d>` **(** :ref:`Vector2<class_Vector2>` from_a, :ref:`Vector2<class_Vector2>` to_a, :ref:`Vector2<class_Vector2>` from_b, :ref:`Vector2<class_Vector2>` to_b **)**                                         |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector3Array<class_PoolVector3Array>` | :ref:`segment_intersects_sphere<class_Geometry_method_segment_intersects_sphere>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Vector3<class_Vector3>` sphere_position, :ref:`float<class_float>` sphere_radius **)**                                       |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                   | :ref:`segment_intersects_triangle<class_Geometry_method_segment_intersects_triangle>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Vector3<class_Vector3>` a, :ref:`Vector3<class_Vector3>` b, :ref:`Vector3<class_Vector3>` c **)**                        |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolIntArray<class_PoolIntArray>`         | :ref:`triangulate_delaunay_2d<class_Geometry_method_triangulate_delaunay_2d>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` points **)**                                                                                                                                                 |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolIntArray<class_PoolIntArray>`         | :ref:`triangulate_polygon<class_Geometry_method_triangulate_polygon>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**                                                                                                                                                        |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_Geometry_PolyBooleanOperation:

.. _class_Geometry_constant_OPERATION_UNION:

.. _class_Geometry_constant_OPERATION_DIFFERENCE:

.. _class_Geometry_constant_OPERATION_INTERSECTION:

.. _class_Geometry_constant_OPERATION_XOR:

enum **PolyBooleanOperation**:

- **OPERATION_UNION** = **0** --- Crear regiones en las que se llenen los polígonos del sujeto o del recorte (o ambos).

- **OPERATION_DIFFERENCE** = **1** --- Crea regiones en las que se rellenen los polígonos del sujeto, excepto cuando se rellenen los polígonos de clips.

- **OPERATION_INTERSECTION** = **2** --- Crea regiones en las que se llenen tanto los polígonos del sujeto como los del recorte.

- **OPERATION_XOR** = **3** --- Crea regiones en las que se llenen los polígonos del sujeto o del recorte pero no en las que se llenen ambos.

----

.. _enum_Geometry_PolyJoinType:

.. _class_Geometry_constant_JOIN_SQUARE:

.. _class_Geometry_constant_JOIN_ROUND:

.. _class_Geometry_constant_JOIN_MITER:

enum **PolyJoinType**:

- **JOIN_SQUARE** = **0** --- La cuadratura se aplica uniformemente en todas las uniones de bordes convexos en ``1 * delta``.

- **JOIN_ROUND** = **1** --- Mientras que los caminos aplanados nunca pueden trazar perfectamente un arco, son aproximados por una serie de acordes de arco.

- **JOIN_MITER** = **2** --- Hay un límite necesario para las uniones a inglete, ya que los bordes desplazados que se unen en ángulos muy agudos producirán "picos" excesivamente largos y estrechos. Para cualquier unión de borde, cuando la compensación de inglete exceda esa distancia máxima, se aplica la unión "cuadrada".

----

.. _enum_Geometry_PolyEndType:

.. _class_Geometry_constant_END_POLYGON:

.. _class_Geometry_constant_END_JOINED:

.. _class_Geometry_constant_END_BUTT:

.. _class_Geometry_constant_END_SQUARE:

.. _class_Geometry_constant_END_ROUND:

enum **PolyEndType**:

- **END_POLYGON** = **0** --- Los puntos finales se unen usando el valor :ref:`PolyJoinType<enum_Geometry_PolyJoinType>` y el camino llenado como un polígono.

- **END_JOINED** = **1** --- Los puntos finales se unen usando el valor :ref:`PolyJoinType<enum_Geometry_PolyJoinType>` y el camino llenado como una polilínea.

- **END_BUTT** = **2** --- Los puntos finales son cuadrados sin extensión.

- **END_SQUARE** = **3** --- Los puntos finales se cuadran y se amplían con unidades ``delta``.

- **END_ROUND** = **4** --- Los puntos finales se redondean y se amplían con unidades ``delta``.

Descripciones de Métodos
------------------------------------------------

.. _class_Geometry_method_build_box_planes:

- :ref:`Array<class_Array>` **build_box_planes** **(** :ref:`Vector3<class_Vector3>` extents **)**

Devuelve un array con 6 :ref:`Plane<class_Plane>`\ s que describen los lados de una caja centrada en el origen. El tamaño de la caja está definido por ``extents``, que representa una esquina (positiva) de la caja (es decir, la mitad de su tamaño real).

----

.. _class_Geometry_method_build_capsule_planes:

- :ref:`Array<class_Array>` **build_capsule_planes** **(** :ref:`float<class_float>` radius, :ref:`float<class_float>` height, :ref:`int<class_int>` sides, :ref:`int<class_int>` lats, Vector3.Axis axis=2 **)**

Devuelve un conjunto de :ref:`Plane<class_Plane>`\ s que delimita estrechamente una cápsula con caras centrada en el origen con radio ``radio`` y altura ``height``. El parámetro ``sides`` define cuántos planos se generarán para la parte lateral de la cápsula, mientras que ``lats`` da el número de pasos latitudinales en la parte inferior y superior de la cápsula. El parámetro ``axis`` describe el eje a lo largo del cual se orienta la cápsula (0 para X, 1 para Y, 2 para Z).

----

.. _class_Geometry_method_build_cylinder_planes:

- :ref:`Array<class_Array>` **build_cylinder_planes** **(** :ref:`float<class_float>` radius, :ref:`float<class_float>` height, :ref:`int<class_int>` sides, Vector3.Axis axis=2 **)**

Devuelve un conjunto de :ref:`Plane<class_Plane>`\ s que delimita estrechamente un cilindro facetado centrado en el origen con radio ``radius`` y altura ``height``. El parámetro ``sides`` define cuántos planos se generarán para la parte redonda del cilindro. El parámetro ``axis`` describe el eje a lo largo del cual se orienta el cilindro (0 para X, 1 para Y, 2 para Z).

----

.. _class_Geometry_method_clip_polygon:

- :ref:`PoolVector3Array<class_PoolVector3Array>` **clip_polygon** **(** :ref:`PoolVector3Array<class_PoolVector3Array>` points, :ref:`Plane<class_Plane>` plane **)**

Recorta el polígono definido por los puntos en ``points`` contra el ``plane`` y devuelve los puntos del polígono recortado.

----

.. _class_Geometry_method_clip_polygons_2d:

- :ref:`Array<class_Array>` **clip_polygons_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**

Recorta el ``polygon_a`` contra ``polygon_b`` y devuelve un array de polígonos recortados. Esto realiza :ref:`OPERATION_DIFFERENCE<class_Geometry_constant_OPERATION_DIFFERENCE>` entre los polígonos. Devuelve un array vacío si ``polygon_b`` se superpone completamente a ``polygon_a``.

Si ``polygon_b`` está encerrado por ``polygon_a``, devuelve un polígono exterior (límite) y un polígono interior (agujero) que se pueden distinguir llamando a :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`.

----

.. _class_Geometry_method_clip_polyline_with_polygon_2d:

- :ref:`Array<class_Array>` **clip_polyline_with_polygon_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**

Recorta ``polyline`` contra ``polygon`` y devuelve un conjunto de polilíneas recortadas. Esto realiza :ref:`OPERATION_DIFFERENCE<class_Geometry_constant_OPERATION_DIFFERENCE>` entre la polilínea y el polígono. Esta operación puede ser pensada como el corte de una línea con una forma cerrada.

----

.. _class_Geometry_method_convex_hull_2d:

- :ref:`PoolVector2Array<class_PoolVector2Array>` **convex_hull_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` points **)**

Dado un conjunto de :ref:`Vector2<class_Vector2>`, devuelve el casco convexo como una lista de puntos en orden antihorario. El último punto es el mismo que el primero.

----

.. _class_Geometry_method_exclude_polygons_2d:

- :ref:`Array<class_Array>` **exclude_polygons_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**

Mutually excludes common area defined by intersection of ``polygon_a`` and ``polygon_b`` (see :ref:`intersect_polygons_2d<class_Geometry_method_intersect_polygons_2d>`) and returns an array of excluded polygons. This performs :ref:`OPERATION_XOR<class_Geometry_constant_OPERATION_XOR>` between polygons. In other words, returns all but common area between polygons.

The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`.

----

.. _class_Geometry_method_get_closest_point_to_segment:

- :ref:`Vector3<class_Vector3>` **get_closest_point_to_segment** **(** :ref:`Vector3<class_Vector3>` point, :ref:`Vector3<class_Vector3>` s1, :ref:`Vector3<class_Vector3>` s2 **)**

Devuelve el punto 3D en el segmento 3D (``s1``, ``s2``) que está más cerca del ``point``. El punto devuelto siempre estará dentro del segmento especificado.

----

.. _class_Geometry_method_get_closest_point_to_segment_2d:

- :ref:`Vector2<class_Vector2>` **get_closest_point_to_segment_2d** **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` s1, :ref:`Vector2<class_Vector2>` s2 **)**

Devuelve el punto 2D en el segmento 2D (``s1``, ``s2``) que está más cerca del ``point``. El punto devuelto siempre estará dentro del segmento especificado.

----

.. _class_Geometry_method_get_closest_point_to_segment_uncapped:

- :ref:`Vector3<class_Vector3>` **get_closest_point_to_segment_uncapped** **(** :ref:`Vector3<class_Vector3>` point, :ref:`Vector3<class_Vector3>` s1, :ref:`Vector3<class_Vector3>` s2 **)**

Devuelve el punto 3D en la línea 3D definida por (``s1``, ``s2``) que está más cerca de ``point``. El punto devuelto puede estar dentro del segmento (``s1``, ``s2``) o fuera de él, es decir, en algún lugar de la línea que se extiende desde el segmento.

----

.. _class_Geometry_method_get_closest_point_to_segment_uncapped_2d:

- :ref:`Vector2<class_Vector2>` **get_closest_point_to_segment_uncapped_2d** **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` s1, :ref:`Vector2<class_Vector2>` s2 **)**

Devuelve el punto 2D en la línea 2D definida por (``s1``, ``s2``) que está más cerca del ``point``. El punto devuelto puede estar dentro del segmento (``s1``, ``s2``) o fuera de él, es decir, en algún lugar de la línea que se extiende desde el segmento.

----

.. _class_Geometry_method_get_closest_points_between_segments:

- :ref:`PoolVector3Array<class_PoolVector3Array>` **get_closest_points_between_segments** **(** :ref:`Vector3<class_Vector3>` p1, :ref:`Vector3<class_Vector3>` p2, :ref:`Vector3<class_Vector3>` q1, :ref:`Vector3<class_Vector3>` q2 **)**

Given the two 3D segments (``p1``, ``p2``) and (``q1``, ``q2``), finds those two points on the two segments that are closest to each other. Returns a :ref:`PoolVector3Array<class_PoolVector3Array>` that contains this point on (``p1``, ``p2``) as well the accompanying point on (``q1``, ``q2``).

----

.. _class_Geometry_method_get_closest_points_between_segments_2d:

- :ref:`PoolVector2Array<class_PoolVector2Array>` **get_closest_points_between_segments_2d** **(** :ref:`Vector2<class_Vector2>` p1, :ref:`Vector2<class_Vector2>` q1, :ref:`Vector2<class_Vector2>` p2, :ref:`Vector2<class_Vector2>` q2 **)**

Given the two 2D segments (``p1``, ``q1``) and (``p2``, ``q2``), finds those two points on the two segments that are closest to each other. Returns a :ref:`PoolVector2Array<class_PoolVector2Array>` that contains this point on (``p1``, ``q1``) as well the accompanying point on (``p2``, ``q2``).

----

.. _class_Geometry_method_get_uv84_normal_bit:

- :ref:`int<class_int>` **get_uv84_normal_bit** **(** :ref:`Vector3<class_Vector3>` normal **)**

Usado internamente por el motor.

----

.. _class_Geometry_method_intersect_polygons_2d:

- :ref:`Array<class_Array>` **intersect_polygons_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**

Intersecta ``polygon_a`` con ``polygon_b`` y devuelve una matriz de polígonos intersectados. Esto realiza :ref:`OPERATION_INTERSECTION<class_Geometry_constant_OPERATION_INTERSECTION>` entre los polígonos. En otras palabras, devuelve el área común compartida por los polígonos. Devuelve una matriz vacía si no se produce ninguna intersección.

La operación puede dar como resultado un polígono exterior (límite) y un polígono interior (agujero) producidos que se podrían distinguir llamando a :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`.

----

.. _class_Geometry_method_intersect_polyline_with_polygon_2d:

- :ref:`Array<class_Array>` **intersect_polyline_with_polygon_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**

Intersecta ``polyline`` con ``polygon`` y devuelve un conjunto de polilíneas intersectadas. Esto realiza :ref:`OPERATION_INTERSECTION<class_Geometry_constant_OPERATION_INTERSECTION>` entre la polilínea y el polígono. Esta operación puede ser pensada como cortar una línea con una forma cerrada.

----

.. _class_Geometry_method_is_point_in_circle:

- :ref:`bool<class_bool>` **is_point_in_circle** **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` circle_position, :ref:`float<class_float>` circle_radius **)**

Devuelve ``true`` si ``point`` está dentro del círculo o si está situado exactamente *on* el límite del círculo, de lo contrario devuelve ``false``.

----

.. _class_Geometry_method_is_point_in_polygon:

- :ref:`bool<class_bool>` **is_point_in_polygon** **(** :ref:`Vector2<class_Vector2>` point, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**

Devuelve ``true`` si ``point`` está dentro de ``polygon`` o si se encuentra exactamente *en* el límite del polígono, de lo contrario devuelve ``false``.

----

.. _class_Geometry_method_is_polygon_clockwise:

- :ref:`bool<class_bool>` **is_polygon_clockwise** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**

Devuelve ``true`` si los vértices de ``polygon`` están ordenados en el sentido de las agujas del reloj, de lo contrario devuelve ``false``.

----

.. _class_Geometry_method_line_intersects_line_2d:

- :ref:`Variant<class_Variant>` **line_intersects_line_2d** **(** :ref:`Vector2<class_Vector2>` from_a, :ref:`Vector2<class_Vector2>` dir_a, :ref:`Vector2<class_Vector2>` from_b, :ref:`Vector2<class_Vector2>` dir_b **)**

Comprueba si las dos líneas (``from_a``, ``dir_a``) y (``from_b``, ``dir_b``) se cruzan. Si es así, devuelve el punto de intersección como :ref:`Vector2<class_Vector2>`. Si no hay intersección, devuelve un :ref:`Variant<class_Variant>` vacío.

\ **Nota:** Las rectas se especifican usando vectores de dirección, no puntos finales.

----

.. _class_Geometry_method_make_atlas:

- :ref:`Dictionary<class_Dictionary>` **make_atlas** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` sizes **)**

Dada una serie de :ref:`Vector2<class_Vector2>`\ s que representan piezas que construye un atlas. El diccionario devuelto tiene dos claves: ``points`` es un vector de :ref:`Vector2<class_Vector2>` que especifica las posiciones de cada pieza, ``size`` contiene el tamaño global de todo el atlas como :ref:`Vector2<class_Vector2>`.

----

.. _class_Geometry_method_merge_polygons_2d:

- :ref:`Array<class_Array>` **merge_polygons_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_a, :ref:`PoolVector2Array<class_PoolVector2Array>` polygon_b **)**

Merges (combines) ``polygon_a`` and ``polygon_b`` and returns an array of merged polygons. This performs :ref:`OPERATION_UNION<class_Geometry_constant_OPERATION_UNION>` between polygons.

The operation may result in an outer polygon (boundary) and multiple inner polygons (holes) produced which could be distinguished by calling :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`.

----

.. _class_Geometry_method_offset_polygon_2d:

- :ref:`Array<class_Array>` **offset_polygon_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon, :ref:`float<class_float>` delta, :ref:`PolyJoinType<enum_Geometry_PolyJoinType>` join_type=0 **)**

Inflates or deflates ``polygon`` by ``delta`` units (pixels). If ``delta`` is positive, makes the polygon grow outward. If ``delta`` is negative, shrinks the polygon inward. Returns an array of polygons because inflating/deflating may result in multiple discrete polygons. Returns an empty array if ``delta`` is negative and the absolute value of it approximately exceeds the minimum bounding rectangle dimensions of the polygon.

Each polygon's vertices will be rounded as determined by ``join_type``, see :ref:`PolyJoinType<enum_Geometry_PolyJoinType>`.

The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`.

\ **Note:** To translate the polygon's vertices specifically, use the :ref:`Transform2D.xform<class_Transform2D_method_xform>` method:

::

    var polygon = PoolVector2Array([Vector2(0, 0), Vector2(100, 0), Vector2(100, 100), Vector2(0, 100)])
    var offset = Vector2(50, 50)
    polygon = Transform2D(0, offset).xform(polygon)
    print(polygon) # prints [Vector2(50, 50), Vector2(150, 50), Vector2(150, 150), Vector2(50, 150)]

----

.. _class_Geometry_method_offset_polyline_2d:

- :ref:`Array<class_Array>` **offset_polyline_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`float<class_float>` delta, :ref:`PolyJoinType<enum_Geometry_PolyJoinType>` join_type=0, :ref:`PolyEndType<enum_Geometry_PolyEndType>` end_type=3 **)**

Infla o desinfla la ``polyline`` por unidades ``delta`` (píxeles), produciendo polígonos. Si ``delta`` es positivo, hace que la polilínea crezca hacia afuera. Devuelve un conjunto de polígonos porque inflarse/desinflarse puede resultar en múltiples polígonos discretos. Si ``delta`` es negativo, devuelve una matriz vacía.

Los vértices de cada polígono se redondearán según lo determinado por ``join_type``, ver :ref:`PolyJoinType<enum_Geometry_PolyJoinType>`.

Los vértices de cada polígono se redondearán según lo determinado por ``end_type``, ver :ref:`PolyEndType<enum_Geometry_PolyEndType>`.

La operación puede dar como resultado un polígono exterior (límite) y un polígono interior (agujero) producidos que pueden distinguirse llamando a :ref:`is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`.

----

.. _class_Geometry_method_point_is_inside_triangle:

- :ref:`bool<class_bool>` **point_is_inside_triangle** **(** :ref:`Vector2<class_Vector2>` point, :ref:`Vector2<class_Vector2>` a, :ref:`Vector2<class_Vector2>` b, :ref:`Vector2<class_Vector2>` c **)** |const|

Regresa si ``point`` está dentro del triángulo especificado por ``a``, ``b`` y ``c``.

----

.. _class_Geometry_method_ray_intersects_triangle:

- :ref:`Variant<class_Variant>` **ray_intersects_triangle** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` dir, :ref:`Vector3<class_Vector3>` a, :ref:`Vector3<class_Vector3>` b, :ref:`Vector3<class_Vector3>` c **)**

Comprueba si el rayo 3D que comienza en ``from`` con la dirección de ``dir`` intersecta el triángulo especificado por ``a``, ``b`` y ``c``. Si es así, devuelve el punto de intersección como :ref:`Vector3<class_Vector3>`. Si no hay intersección, se devuelve una :ref:`Variant<class_Variant>` vacía.

----

.. _class_Geometry_method_segment_intersects_circle:

- :ref:`float<class_float>` **segment_intersects_circle** **(** :ref:`Vector2<class_Vector2>` segment_from, :ref:`Vector2<class_Vector2>` segment_to, :ref:`Vector2<class_Vector2>` circle_position, :ref:`float<class_float>` circle_radius **)**

Given the 2D segment (``segment_from``, ``segment_to``), returns the position on the segment (as a number between 0 and 1) at which the segment hits the circle that is located at position ``circle_position`` and has radius ``circle_radius``. If the segment does not intersect the circle, -1 is returned (this is also the case if the line extending the segment would intersect the circle, but the segment does not).

----

.. _class_Geometry_method_segment_intersects_convex:

- :ref:`PoolVector3Array<class_PoolVector3Array>` **segment_intersects_convex** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Array<class_Array>` planes **)**

Given a convex hull defined though the :ref:`Plane<class_Plane>`\ s in the array ``planes``, tests if the segment (``from``, ``to``) intersects with that hull. If an intersection is found, returns a :ref:`PoolVector3Array<class_PoolVector3Array>` containing the point the intersection and the hull's normal. If no intersecion is found, an the returned array is empty.

----

.. _class_Geometry_method_segment_intersects_cylinder:

- :ref:`PoolVector3Array<class_PoolVector3Array>` **segment_intersects_cylinder** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`float<class_float>` height, :ref:`float<class_float>` radius **)**

Checks if the segment (``from``, ``to``) intersects the cylinder with height ``height`` that is centered at the origin and has radius ``radius``. If no, returns an empty :ref:`PoolVector3Array<class_PoolVector3Array>`. If an intersection takes place, the returned array contains the point of intersection and the cylinder's normal at the point of intersection.

----

.. _class_Geometry_method_segment_intersects_segment_2d:

- :ref:`Variant<class_Variant>` **segment_intersects_segment_2d** **(** :ref:`Vector2<class_Vector2>` from_a, :ref:`Vector2<class_Vector2>` to_a, :ref:`Vector2<class_Vector2>` from_b, :ref:`Vector2<class_Vector2>` to_b **)**

Comprueba si los dos segmentos (``from_a``, ``to_a``) y (``from_b``, ``to_b``) se cruzan. Si es así, devuelve el punto de intersección como :ref:`Vector2<class_Vector2>`. Si no hay intersección, devuelve un :ref:`Variant<class_Variant>` vacío.

----

.. _class_Geometry_method_segment_intersects_sphere:

- :ref:`PoolVector3Array<class_PoolVector3Array>` **segment_intersects_sphere** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Vector3<class_Vector3>` sphere_position, :ref:`float<class_float>` sphere_radius **)**

Checks if the segment (``from``, ``to``) intersects the sphere that is located at ``sphere_position`` and has radius ``sphere_radius``. If no, returns an empty :ref:`PoolVector3Array<class_PoolVector3Array>`. If yes, returns a :ref:`PoolVector3Array<class_PoolVector3Array>` containing the point of intersection and the sphere's normal at the point of intersection.

----

.. _class_Geometry_method_segment_intersects_triangle:

- :ref:`Variant<class_Variant>` **segment_intersects_triangle** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` to, :ref:`Vector3<class_Vector3>` a, :ref:`Vector3<class_Vector3>` b, :ref:`Vector3<class_Vector3>` c **)**

Comprueba si el segmento (``de``, ``a``) intersecta el triángulo ``a``, ``b``, ``c``. Si es así, devuelve el punto de intersección como :ref:`Vector3<class_Vector3>`. Si no hay intersección, se devuelve una :ref:`Variant<class_Variant>` vacía.

----

.. _class_Geometry_method_triangulate_delaunay_2d:

- :ref:`PoolIntArray<class_PoolIntArray>` **triangulate_delaunay_2d** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` points **)**

Triangulates the area specified by discrete set of ``points`` such that no point is inside the circumcircle of any resulting triangle. Returns a :ref:`PoolIntArray<class_PoolIntArray>` where each triangle consists of three consecutive point indices into ``points`` (i.e. the returned array will have ``n * 3`` elements, with ``n`` being the number of found triangles). If the triangulation did not succeed, an empty :ref:`PoolIntArray<class_PoolIntArray>` is returned.

----

.. _class_Geometry_method_triangulate_polygon:

- :ref:`PoolIntArray<class_PoolIntArray>` **triangulate_polygon** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon **)**

Triangulates the polygon specified by the points in ``polygon``. Returns a :ref:`PoolIntArray<class_PoolIntArray>` where each triangle consists of three consecutive point indices into ``polygon`` (i.e. the returned array will have ``n * 3`` elements, with ``n`` being the number of found triangles). If the triangulation did not succeed, an empty :ref:`PoolIntArray<class_PoolIntArray>` is returned.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
