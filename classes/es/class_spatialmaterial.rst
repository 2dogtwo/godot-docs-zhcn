:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the SpatialMaterial.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_SpatialMaterial:

SpatialMaterial
===============

**Inherits:** :ref:`Material<class_Material>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Material de renderizado 3D por defecto.

Descripción
----------------------

Esto proporciona un material por defecto con una amplia variedad de características y propiedades de renderizado sin necesidad de escribir codigo shader. Consulte el siguiente tutorial para obtener más detalles.

Tutoriales
--------------------

- :doc:`../tutorials/3d/spatial_material`

Propiedades
----------------------

+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Color<class_Color>`                                      | :ref:`albedo_color<class_SpatialMaterial_property_albedo_color>`                                     | ``Color( 1, 1, 1, 1 )`` |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`albedo_texture<class_SpatialMaterial_property_albedo_texture>`                                 |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`anisotropy<class_SpatialMaterial_property_anisotropy>`                                         |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`anisotropy_enabled<class_SpatialMaterial_property_anisotropy_enabled>`                         | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`anisotropy_flowmap<class_SpatialMaterial_property_anisotropy_flowmap>`                         |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`ao_enabled<class_SpatialMaterial_property_ao_enabled>`                                         | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`ao_light_affect<class_SpatialMaterial_property_ao_light_affect>`                               |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`ao_on_uv2<class_SpatialMaterial_property_ao_on_uv2>`                                           |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`ao_texture<class_SpatialMaterial_property_ao_texture>`                                         |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`TextureChannel<enum_SpatialMaterial_TextureChannel>`     | :ref:`ao_texture_channel<class_SpatialMaterial_property_ao_texture_channel>`                         |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`AsyncMode<enum_SpatialMaterial_AsyncMode>`               | :ref:`async_mode<class_SpatialMaterial_property_async_mode>`                                         | ``0``                   |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`clearcoat<class_SpatialMaterial_property_clearcoat>`                                           |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`clearcoat_enabled<class_SpatialMaterial_property_clearcoat_enabled>`                           | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`clearcoat_gloss<class_SpatialMaterial_property_clearcoat_gloss>`                               |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`clearcoat_texture<class_SpatialMaterial_property_clearcoat_texture>`                           |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`depth_deep_parallax<class_SpatialMaterial_property_depth_deep_parallax>`                       |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`depth_enabled<class_SpatialMaterial_property_depth_enabled>`                                   | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`depth_flip_binormal<class_SpatialMaterial_property_depth_flip_binormal>`                       |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`depth_flip_tangent<class_SpatialMaterial_property_depth_flip_tangent>`                         |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`int<class_int>`                                          | :ref:`depth_max_layers<class_SpatialMaterial_property_depth_max_layers>`                             |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`int<class_int>`                                          | :ref:`depth_min_layers<class_SpatialMaterial_property_depth_min_layers>`                             |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`depth_scale<class_SpatialMaterial_property_depth_scale>`                                       |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`depth_texture<class_SpatialMaterial_property_depth_texture>`                                   |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`detail_albedo<class_SpatialMaterial_property_detail_albedo>`                                   |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`BlendMode<enum_SpatialMaterial_BlendMode>`               | :ref:`detail_blend_mode<class_SpatialMaterial_property_detail_blend_mode>`                           |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`detail_enabled<class_SpatialMaterial_property_detail_enabled>`                                 | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`detail_mask<class_SpatialMaterial_property_detail_mask>`                                       |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`detail_normal<class_SpatialMaterial_property_detail_normal>`                                   |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`DetailUV<enum_SpatialMaterial_DetailUV>`                 | :ref:`detail_uv_layer<class_SpatialMaterial_property_detail_uv_layer>`                               |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`distance_fade_max_distance<class_SpatialMaterial_property_distance_fade_max_distance>`         |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`distance_fade_min_distance<class_SpatialMaterial_property_distance_fade_min_distance>`         |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`DistanceFadeMode<enum_SpatialMaterial_DistanceFadeMode>` | :ref:`distance_fade_mode<class_SpatialMaterial_property_distance_fade_mode>`                         | ``0``                   |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Color<class_Color>`                                      | :ref:`emission<class_SpatialMaterial_property_emission>`                                             |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`emission_enabled<class_SpatialMaterial_property_emission_enabled>`                             | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`emission_energy<class_SpatialMaterial_property_emission_energy>`                               |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`emission_on_uv2<class_SpatialMaterial_property_emission_on_uv2>`                               |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`EmissionOperator<enum_SpatialMaterial_EmissionOperator>` | :ref:`emission_operator<class_SpatialMaterial_property_emission_operator>`                           |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`emission_texture<class_SpatialMaterial_property_emission_texture>`                             |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_albedo_tex_force_srgb<class_SpatialMaterial_property_flags_albedo_tex_force_srgb>`       | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_disable_ambient_light<class_SpatialMaterial_property_flags_disable_ambient_light>`       | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_do_not_receive_shadows<class_SpatialMaterial_property_flags_do_not_receive_shadows>`     | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_ensure_correct_normals<class_SpatialMaterial_property_flags_ensure_correct_normals>`     | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_fixed_size<class_SpatialMaterial_property_flags_fixed_size>`                             | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_no_depth_test<class_SpatialMaterial_property_flags_no_depth_test>`                       | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_transparent<class_SpatialMaterial_property_flags_transparent>`                           | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_unshaded<class_SpatialMaterial_property_flags_unshaded>`                                 | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_use_point_size<class_SpatialMaterial_property_flags_use_point_size>`                     | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_use_shadow_to_opacity<class_SpatialMaterial_property_flags_use_shadow_to_opacity>`       | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_vertex_lighting<class_SpatialMaterial_property_flags_vertex_lighting>`                   | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`flags_world_triplanar<class_SpatialMaterial_property_flags_world_triplanar>`                   | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`metallic<class_SpatialMaterial_property_metallic>`                                             | ``0.0``                 |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`metallic_specular<class_SpatialMaterial_property_metallic_specular>`                           | ``0.5``                 |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`metallic_texture<class_SpatialMaterial_property_metallic_texture>`                             |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`TextureChannel<enum_SpatialMaterial_TextureChannel>`     | :ref:`metallic_texture_channel<class_SpatialMaterial_property_metallic_texture_channel>`             | ``0``                   |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`normal_enabled<class_SpatialMaterial_property_normal_enabled>`                                 | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`normal_scale<class_SpatialMaterial_property_normal_scale>`                                     |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`normal_texture<class_SpatialMaterial_property_normal_texture>`                                 |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`params_alpha_scissor_threshold<class_SpatialMaterial_property_params_alpha_scissor_threshold>` |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`params_billboard_keep_scale<class_SpatialMaterial_property_params_billboard_keep_scale>`       | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`BillboardMode<enum_SpatialMaterial_BillboardMode>`       | :ref:`params_billboard_mode<class_SpatialMaterial_property_params_billboard_mode>`                   | ``0``                   |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`BlendMode<enum_SpatialMaterial_BlendMode>`               | :ref:`params_blend_mode<class_SpatialMaterial_property_params_blend_mode>`                           | ``0``                   |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`CullMode<enum_SpatialMaterial_CullMode>`                 | :ref:`params_cull_mode<class_SpatialMaterial_property_params_cull_mode>`                             | ``0``                   |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`DepthDrawMode<enum_SpatialMaterial_DepthDrawMode>`       | :ref:`params_depth_draw_mode<class_SpatialMaterial_property_params_depth_draw_mode>`                 | ``0``                   |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`DiffuseMode<enum_SpatialMaterial_DiffuseMode>`           | :ref:`params_diffuse_mode<class_SpatialMaterial_property_params_diffuse_mode>`                       | ``0``                   |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`params_grow<class_SpatialMaterial_property_params_grow>`                                       | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`params_grow_amount<class_SpatialMaterial_property_params_grow_amount>`                         |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`params_line_width<class_SpatialMaterial_property_params_line_width>`                           | ``1.0``                 |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`params_point_size<class_SpatialMaterial_property_params_point_size>`                           | ``1.0``                 |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`SpecularMode<enum_SpatialMaterial_SpecularMode>`         | :ref:`params_specular_mode<class_SpatialMaterial_property_params_specular_mode>`                     | ``0``                   |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`params_use_alpha_scissor<class_SpatialMaterial_property_params_use_alpha_scissor>`             | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`int<class_int>`                                          | :ref:`particles_anim_h_frames<class_SpatialMaterial_property_particles_anim_h_frames>`               |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`particles_anim_loop<class_SpatialMaterial_property_particles_anim_loop>`                       |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`int<class_int>`                                          | :ref:`particles_anim_v_frames<class_SpatialMaterial_property_particles_anim_v_frames>`               |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`proximity_fade_distance<class_SpatialMaterial_property_proximity_fade_distance>`               |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`proximity_fade_enable<class_SpatialMaterial_property_proximity_fade_enable>`                   | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`refraction_enabled<class_SpatialMaterial_property_refraction_enabled>`                         | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`refraction_scale<class_SpatialMaterial_property_refraction_scale>`                             |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`refraction_texture<class_SpatialMaterial_property_refraction_texture>`                         |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`TextureChannel<enum_SpatialMaterial_TextureChannel>`     | :ref:`refraction_texture_channel<class_SpatialMaterial_property_refraction_texture_channel>`         |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`rim<class_SpatialMaterial_property_rim>`                                                       |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`rim_enabled<class_SpatialMaterial_property_rim_enabled>`                                       | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`rim_texture<class_SpatialMaterial_property_rim_texture>`                                       |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`rim_tint<class_SpatialMaterial_property_rim_tint>`                                             |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`roughness<class_SpatialMaterial_property_roughness>`                                           | ``1.0``                 |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`roughness_texture<class_SpatialMaterial_property_roughness_texture>`                           |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`TextureChannel<enum_SpatialMaterial_TextureChannel>`     | :ref:`roughness_texture_channel<class_SpatialMaterial_property_roughness_texture_channel>`           | ``0``                   |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`subsurf_scatter_enabled<class_SpatialMaterial_property_subsurf_scatter_enabled>`               | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`subsurf_scatter_strength<class_SpatialMaterial_property_subsurf_scatter_strength>`             |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`subsurf_scatter_texture<class_SpatialMaterial_property_subsurf_scatter_texture>`               |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Color<class_Color>`                                      | :ref:`transmission<class_SpatialMaterial_property_transmission>`                                     |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`transmission_enabled<class_SpatialMaterial_property_transmission_enabled>`                     | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Texture<class_Texture>`                                  | :ref:`transmission_texture<class_SpatialMaterial_property_transmission_texture>`                     |                         |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Vector3<class_Vector3>`                                  | :ref:`uv1_offset<class_SpatialMaterial_property_uv1_offset>`                                         | ``Vector3( 0, 0, 0 )``  |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Vector3<class_Vector3>`                                  | :ref:`uv1_scale<class_SpatialMaterial_property_uv1_scale>`                                           | ``Vector3( 1, 1, 1 )``  |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`uv1_triplanar<class_SpatialMaterial_property_uv1_triplanar>`                                   | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`uv1_triplanar_sharpness<class_SpatialMaterial_property_uv1_triplanar_sharpness>`               | ``1.0``                 |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Vector3<class_Vector3>`                                  | :ref:`uv2_offset<class_SpatialMaterial_property_uv2_offset>`                                         | ``Vector3( 0, 0, 0 )``  |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`Vector3<class_Vector3>`                                  | :ref:`uv2_scale<class_SpatialMaterial_property_uv2_scale>`                                           | ``Vector3( 1, 1, 1 )``  |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`uv2_triplanar<class_SpatialMaterial_property_uv2_triplanar>`                                   | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`float<class_float>`                                      | :ref:`uv2_triplanar_sharpness<class_SpatialMaterial_property_uv2_triplanar_sharpness>`               | ``1.0``                 |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`vertex_color_is_srgb<class_SpatialMaterial_property_vertex_color_is_srgb>`                     | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`                                        | :ref:`vertex_color_use_as_albedo<class_SpatialMaterial_property_vertex_color_use_as_albedo>`         | ``false``               |
+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+-------------------------+

Métodos
--------------

+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`get_feature<class_SpatialMaterial_method_get_feature>` **(** :ref:`Feature<enum_SpatialMaterial_Feature>` feature **)** |const|                                        |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`get_flag<class_SpatialMaterial_method_get_flag>` **(** :ref:`Flags<enum_SpatialMaterial_Flags>` flag **)** |const|                                                     |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Texture<class_Texture>` | :ref:`get_texture<class_SpatialMaterial_method_get_texture>` **(** :ref:`TextureParam<enum_SpatialMaterial_TextureParam>` param **)** |const|                                |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_feature<class_SpatialMaterial_method_set_feature>` **(** :ref:`Feature<enum_SpatialMaterial_Feature>` feature, :ref:`bool<class_bool>` enable **)**                |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_flag<class_SpatialMaterial_method_set_flag>` **(** :ref:`Flags<enum_SpatialMaterial_Flags>` flag, :ref:`bool<class_bool>` enable **)**                             |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_texture<class_SpatialMaterial_method_set_texture>` **(** :ref:`TextureParam<enum_SpatialMaterial_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)** |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_SpatialMaterial_TextureParam:

.. _class_SpatialMaterial_constant_TEXTURE_ALBEDO:

.. _class_SpatialMaterial_constant_TEXTURE_METALLIC:

.. _class_SpatialMaterial_constant_TEXTURE_ROUGHNESS:

.. _class_SpatialMaterial_constant_TEXTURE_EMISSION:

.. _class_SpatialMaterial_constant_TEXTURE_NORMAL:

.. _class_SpatialMaterial_constant_TEXTURE_RIM:

.. _class_SpatialMaterial_constant_TEXTURE_CLEARCOAT:

.. _class_SpatialMaterial_constant_TEXTURE_FLOWMAP:

.. _class_SpatialMaterial_constant_TEXTURE_AMBIENT_OCCLUSION:

.. _class_SpatialMaterial_constant_TEXTURE_DEPTH:

.. _class_SpatialMaterial_constant_TEXTURE_SUBSURFACE_SCATTERING:

.. _class_SpatialMaterial_constant_TEXTURE_TRANSMISSION:

.. _class_SpatialMaterial_constant_TEXTURE_REFRACTION:

.. _class_SpatialMaterial_constant_TEXTURE_DETAIL_MASK:

.. _class_SpatialMaterial_constant_TEXTURE_DETAIL_ALBEDO:

.. _class_SpatialMaterial_constant_TEXTURE_DETAIL_NORMAL:

.. _class_SpatialMaterial_constant_TEXTURE_MAX:

enum **TextureParam**:

- **TEXTURE_ALBEDO** = **0** --- Textura que especifica el color por píxel.

- **TEXTURE_METALLIC** = **1** --- Textura que especifica el valor metálico por píxel.

- **TEXTURE_ROUGHNESS** = **2** --- Textura que especifica el valor de rugosidad por píxel.

- **TEXTURE_EMISSION** = **3** --- Textura que especifica el color de emisión por píxel.

- **TEXTURE_NORMAL** = **4** --- Textura que especifica el vector normal por píxel.

- **TEXTURE_RIM** = **5** --- Textura que especifica el valor del borde por píxel.

- **TEXTURE_CLEARCOAT** = **6** --- Textura que especifica el valor del barniz por píxel.

- **TEXTURE_FLOWMAP** = **7** --- Textura que especifica la dirección del mapa de flujo por píxel para su uso con :ref:`anisotropy<class_SpatialMaterial_property_anisotropy>`.

- **TEXTURE_AMBIENT_OCCLUSION** = **8** --- Textura que especifica el valor de oclusión ambiental por píxel.

- **TEXTURE_DEPTH** = **9** --- Texture specifying per-pixel depth.

- **TEXTURE_SUBSURFACE_SCATTERING** = **10** --- Textura que especifica la subsurface scattering por pixel.

- **TEXTURE_TRANSMISSION** = **11** --- Texture specifying per-pixel transmission color.

- **TEXTURE_REFRACTION** = **12** --- Textura que especifica la fuerza de refracción por píxel.

- **TEXTURE_DETAIL_MASK** = **13** --- Textura que especifica el valor de mezcla de la máscara de detalles por píxel.

- **TEXTURE_DETAIL_ALBEDO** = **14** --- Textura que especifica el color de detalle por píxel.

- **TEXTURE_DETAIL_NORMAL** = **15** --- La textura que especifica el detalle de la normal por píxel.

- **TEXTURE_MAX** = **16** --- Representa el tamaño del enum :ref:`TextureParam<enum_SpatialMaterial_TextureParam>`.

----

.. _enum_SpatialMaterial_DetailUV:

.. _class_SpatialMaterial_constant_DETAIL_UV_1:

.. _class_SpatialMaterial_constant_DETAIL_UV_2:

enum **DetailUV**:

- **DETAIL_UV_1** = **0** --- Usa ``UV`` con la textura de detalle.

- **DETAIL_UV_2** = **1** --- Usa ``UV2`` con la textura de detalle.

----

.. _enum_SpatialMaterial_Feature:

.. _class_SpatialMaterial_constant_FEATURE_TRANSPARENT:

.. _class_SpatialMaterial_constant_FEATURE_EMISSION:

.. _class_SpatialMaterial_constant_FEATURE_NORMAL_MAPPING:

.. _class_SpatialMaterial_constant_FEATURE_RIM:

.. _class_SpatialMaterial_constant_FEATURE_CLEARCOAT:

.. _class_SpatialMaterial_constant_FEATURE_ANISOTROPY:

.. _class_SpatialMaterial_constant_FEATURE_AMBIENT_OCCLUSION:

.. _class_SpatialMaterial_constant_FEATURE_DEPTH_MAPPING:

.. _class_SpatialMaterial_constant_FEATURE_SUBSURACE_SCATTERING:

.. _class_SpatialMaterial_constant_FEATURE_TRANSMISSION:

.. _class_SpatialMaterial_constant_FEATURE_REFRACTION:

.. _class_SpatialMaterial_constant_FEATURE_DETAIL:

.. _class_SpatialMaterial_constant_FEATURE_MAX:

enum **Feature**:

- **FEATURE_TRANSPARENT** = **0** --- Constant for setting :ref:`flags_transparent<class_SpatialMaterial_property_flags_transparent>`.

- **FEATURE_EMISSION** = **1** --- Constante para establecer :ref:`emission_enabled<class_SpatialMaterial_property_emission_enabled>`.

- **FEATURE_NORMAL_MAPPING** = **2** --- Constante para configuración :ref:`normal_enabled<class_SpatialMaterial_property_normal_enabled>`.

- **FEATURE_RIM** = **3** --- Constante para configuración :ref:`rim_enabled<class_SpatialMaterial_property_rim_enabled>`.

- **FEATURE_CLEARCOAT** = **4** --- Constante para configuración :ref:`clearcoat_enabled<class_SpatialMaterial_property_clearcoat_enabled>`.

- **FEATURE_ANISOTROPY** = **5** --- Constante para configuración :ref:`anisotropy_enabled<class_SpatialMaterial_property_anisotropy_enabled>`.

- **FEATURE_AMBIENT_OCCLUSION** = **6** --- Constante para configuración :ref:`ao_enabled<class_SpatialMaterial_property_ao_enabled>`.

- **FEATURE_DEPTH_MAPPING** = **7** --- Constant for setting :ref:`depth_enabled<class_SpatialMaterial_property_depth_enabled>`.

- **FEATURE_SUBSURACE_SCATTERING** = **8** --- Constante para configuración :ref:`subsurf_scatter_enabled<class_SpatialMaterial_property_subsurf_scatter_enabled>`.

- **FEATURE_TRANSMISSION** = **9** --- Constant for setting :ref:`transmission_enabled<class_SpatialMaterial_property_transmission_enabled>`.

- **FEATURE_REFRACTION** = **10** --- Constante para configuración :ref:`refraction_enabled<class_SpatialMaterial_property_refraction_enabled>`.

- **FEATURE_DETAIL** = **11** --- Constante para configuración :ref:`detail_enabled<class_SpatialMaterial_property_detail_enabled>`.

- **FEATURE_MAX** = **12** --- Representa el tamaño del enum :ref:`Feature<enum_SpatialMaterial_Feature>`.

----

.. _enum_SpatialMaterial_BlendMode:

.. _class_SpatialMaterial_constant_BLEND_MODE_MIX:

.. _class_SpatialMaterial_constant_BLEND_MODE_ADD:

.. _class_SpatialMaterial_constant_BLEND_MODE_SUB:

.. _class_SpatialMaterial_constant_BLEND_MODE_MUL:

enum **BlendMode**:

- **BLEND_MODE_MIX** = **0** --- Modo de mezcla por defecto. El color del objeto se mezcla sobre el fondo en base al valor alfa del objeto.

- **BLEND_MODE_ADD** = **1** --- El color del objeto se añade al fondo.

- **BLEND_MODE_SUB** = **2** --- El color del objeto se resta del fondo.

- **BLEND_MODE_MUL** = **3** --- El color del objeto se multiplica por el fondo.

----

.. _enum_SpatialMaterial_DepthDrawMode:

.. _class_SpatialMaterial_constant_DEPTH_DRAW_OPAQUE_ONLY:

.. _class_SpatialMaterial_constant_DEPTH_DRAW_ALWAYS:

.. _class_SpatialMaterial_constant_DEPTH_DRAW_DISABLED:

.. _class_SpatialMaterial_constant_DEPTH_DRAW_ALPHA_OPAQUE_PREPASS:

enum **DepthDrawMode**:

- **DEPTH_DRAW_OPAQUE_ONLY** = **0** --- Modo de dibujo de profundidad predeterminado. La profundidad se dibuja sólo para los objetos opacos.

- **DEPTH_DRAW_ALWAYS** = **1** --- El dibujo de profundidad se calcula tanto para objetos opacos como transparentes.

- **DEPTH_DRAW_DISABLED** = **2** --- No hay dibujo de profundidad.

- **DEPTH_DRAW_ALPHA_OPAQUE_PREPASS** = **3** --- For transparent objects, an opaque pass is made first with the opaque parts, then transparency is drawn.

----

.. _enum_SpatialMaterial_CullMode:

.. _class_SpatialMaterial_constant_CULL_BACK:

.. _class_SpatialMaterial_constant_CULL_FRONT:

.. _class_SpatialMaterial_constant_CULL_DISABLED:

enum **CullMode**:

- **CULL_BACK** = **0** --- Modo descarte por defecto. La parte trasera del objeto es descartada(no se dibuja) cuando no está visible.

- **CULL_FRONT** = **1** --- La parte delantera del objeto es descartada cuando no está visible.

- **CULL_DISABLED** = **2** --- No se realiza ningún descarte.

----

.. _enum_SpatialMaterial_Flags:

.. _class_SpatialMaterial_constant_FLAG_UNSHADED:

.. _class_SpatialMaterial_constant_FLAG_USE_VERTEX_LIGHTING:

.. _class_SpatialMaterial_constant_FLAG_DISABLE_DEPTH_TEST:

.. _class_SpatialMaterial_constant_FLAG_ALBEDO_FROM_VERTEX_COLOR:

.. _class_SpatialMaterial_constant_FLAG_SRGB_VERTEX_COLOR:

.. _class_SpatialMaterial_constant_FLAG_USE_POINT_SIZE:

.. _class_SpatialMaterial_constant_FLAG_FIXED_SIZE:

.. _class_SpatialMaterial_constant_FLAG_BILLBOARD_KEEP_SCALE:

.. _class_SpatialMaterial_constant_FLAG_UV1_USE_TRIPLANAR:

.. _class_SpatialMaterial_constant_FLAG_UV2_USE_TRIPLANAR:

.. _class_SpatialMaterial_constant_FLAG_AO_ON_UV2:

.. _class_SpatialMaterial_constant_FLAG_EMISSION_ON_UV2:

.. _class_SpatialMaterial_constant_FLAG_USE_ALPHA_SCISSOR:

.. _class_SpatialMaterial_constant_FLAG_TRIPLANAR_USE_WORLD:

.. _class_SpatialMaterial_constant_FLAG_ALBEDO_TEXTURE_FORCE_SRGB:

.. _class_SpatialMaterial_constant_FLAG_DONT_RECEIVE_SHADOWS:

.. _class_SpatialMaterial_constant_FLAG_DISABLE_AMBIENT_LIGHT:

.. _class_SpatialMaterial_constant_FLAG_ENSURE_CORRECT_NORMALS:

.. _class_SpatialMaterial_constant_FLAG_USE_SHADOW_TO_OPACITY:

.. _class_SpatialMaterial_constant_FLAG_MAX:

enum **Flags**:

- **FLAG_UNSHADED** = **0** --- No lighting is used on the object. Color comes directly from ``ALBEDO``.

- **FLAG_USE_VERTEX_LIGHTING** = **1** --- Lighting is calculated per-vertex rather than per-pixel. This can be used to increase the speed of the shader at the cost of quality.

- **FLAG_DISABLE_DEPTH_TEST** = **2** --- Desactiva la prueba de profundidad, así que este objeto se dibuja encima de todos los demás. Sin embargo, los objetos dibujados después de él en el orden de dibujo pueden cubrirlo.

- **FLAG_ALBEDO_FROM_VERTEX_COLOR** = **3** --- Ponga ``ALBEDO`` en el color por vértice especificado en la malla.

- **FLAG_SRGB_VERTEX_COLOR** = **4** --- Vertex color is in sRGB space and needs to be converted to linear. Only applies in the GLES3 renderer.

- **FLAG_USE_POINT_SIZE** = **5** --- Utiliza el tamaño de los puntos para alterar el tamaño de los puntos primitivos. También cambia la búsqueda de la textura del albedo para usar ``POINT_COORD`` en lugar de ``UV``.

- **FLAG_FIXED_SIZE** = **6** --- El objeto se escala según la profundidad para que siempre aparezca del mismo tamaño en la pantalla.

- **FLAG_BILLBOARD_KEEP_SCALE** = **7** --- Shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when :ref:`params_billboard_mode<class_SpatialMaterial_property_params_billboard_mode>` is :ref:`BILLBOARD_ENABLED<class_SpatialMaterial_constant_BILLBOARD_ENABLED>`.

- **FLAG_UV1_USE_TRIPLANAR** = **8** --- Use la búsqueda de texturas triplanares para todas las búsquedas de texturas que normalmente usarían ``UV``.

- **FLAG_UV2_USE_TRIPLANAR** = **9** --- Use la búsqueda de texturas triplanares para todas las búsquedas de texturas que normalmente usarían ``UV2``.

- **FLAG_AO_ON_UV2** = **11** --- Use las coordenadas ``UV2`` para mirar hacia arriba desde el :ref:`ao_texture<class_SpatialMaterial_property_ao_texture>`.

- **FLAG_EMISSION_ON_UV2** = **12** --- Utilice las coordenadas ``UV2`` para mirar hacia arriba desde la :ref:`emission_texture<class_SpatialMaterial_property_emission_texture>`.

- **FLAG_USE_ALPHA_SCISSOR** = **13** --- Use alpha scissor. Set by :ref:`params_use_alpha_scissor<class_SpatialMaterial_property_params_use_alpha_scissor>`.

- **FLAG_TRIPLANAR_USE_WORLD** = **10** --- Use world coordinates in the triplanar texture lookup instead of local coordinates.

- **FLAG_ALBEDO_TEXTURE_FORCE_SRGB** = **14** --- Obliga al shader a convertir el albedo del espacio sRGB al espacio lineal.

- **FLAG_DONT_RECEIVE_SHADOWS** = **15** --- Desactiva la recepción de sombras de otros objetos.

- **FLAG_DISABLE_AMBIENT_LIGHT** = **17** --- Desactiva la recepción de luz ambiental.

- **FLAG_ENSURE_CORRECT_NORMALS** = **16** --- Ensures that normals appear correct, even with non-uniform scaling.

- **FLAG_USE_SHADOW_TO_OPACITY** = **18** --- Habilita la característica de opacidad de la sombra.

- **FLAG_MAX** = **19** --- Representa el tamaño del enum :ref:`Flags<enum_SpatialMaterial_Flags>`.

----

.. _enum_SpatialMaterial_DiffuseMode:

.. _class_SpatialMaterial_constant_DIFFUSE_BURLEY:

.. _class_SpatialMaterial_constant_DIFFUSE_LAMBERT:

.. _class_SpatialMaterial_constant_DIFFUSE_LAMBERT_WRAP:

.. _class_SpatialMaterial_constant_DIFFUSE_OREN_NAYAR:

.. _class_SpatialMaterial_constant_DIFFUSE_TOON:

enum **DiffuseMode**:

- **DIFFUSE_BURLEY** = **0** --- Algoritmo de dispersión difusa por defecto.

- **DIFFUSE_LAMBERT** = **1** --- La dispersión difusa ignora las rugosidades.

- **DIFFUSE_LAMBERT_WRAP** = **2** --- Extiende a Lambert para cubrir más de 90 grados cuando la rugosidad aumenta.

- **DIFFUSE_OREN_NAYAR** = **3** --- Intenta usar la rugosidad para emular la micro superficie.

- **DIFFUSE_TOON** = **4** --- Utiliza un corte duro para la iluminación, con el alisado afectado por la aspereza.

----

.. _enum_SpatialMaterial_SpecularMode:

.. _class_SpatialMaterial_constant_SPECULAR_SCHLICK_GGX:

.. _class_SpatialMaterial_constant_SPECULAR_BLINN:

.. _class_SpatialMaterial_constant_SPECULAR_PHONG:

.. _class_SpatialMaterial_constant_SPECULAR_TOON:

.. _class_SpatialMaterial_constant_SPECULAR_DISABLED:

enum **SpecularMode**:

- **SPECULAR_SCHLICK_GGX** = **0** --- Bola especular por defecto.

- **SPECULAR_BLINN** = **1** --- Algoritmo especular más antiguo, incluido por compatibilidad.

- **SPECULAR_PHONG** = **2** --- Algoritmo especular más antiguo, incluido por compatibilidad.

- **SPECULAR_TOON** = **3** --- La mancha de un dibujo que cambia de tamaño en función de la rugosidad.

- **SPECULAR_DISABLED** = **4** --- No hay manchas especulares.

----

.. _enum_SpatialMaterial_BillboardMode:

.. _class_SpatialMaterial_constant_BILLBOARD_DISABLED:

.. _class_SpatialMaterial_constant_BILLBOARD_ENABLED:

.. _class_SpatialMaterial_constant_BILLBOARD_FIXED_Y:

.. _class_SpatialMaterial_constant_BILLBOARD_PARTICLES:

enum **BillboardMode**:

- **BILLBOARD_DISABLED** = **0** --- Modo Billboard esta desactivado.

- **BILLBOARD_ENABLED** = **1** --- El eje Z del objeto siempre estará de cara a la cámara.

- **BILLBOARD_FIXED_Y** = **2** --- El eje X del objeto siempre estará de cara a la cámara.

- **BILLBOARD_PARTICLES** = **3** --- Used for particle systems when assigned to :ref:`Particles<class_Particles>` and :ref:`CPUParticles<class_CPUParticles>` nodes. Enables ``particles_anim_*`` properties.

The :ref:`ParticlesMaterial.anim_speed<class_ParticlesMaterial_property_anim_speed>` or :ref:`CPUParticles.anim_speed<class_CPUParticles_property_anim_speed>` should also be set to a positive value for the animation to play.

----

.. _enum_SpatialMaterial_TextureChannel:

.. _class_SpatialMaterial_constant_TEXTURE_CHANNEL_RED:

.. _class_SpatialMaterial_constant_TEXTURE_CHANNEL_GREEN:

.. _class_SpatialMaterial_constant_TEXTURE_CHANNEL_BLUE:

.. _class_SpatialMaterial_constant_TEXTURE_CHANNEL_ALPHA:

.. _class_SpatialMaterial_constant_TEXTURE_CHANNEL_GRAYSCALE:

enum **TextureChannel**:

- **TEXTURE_CHANNEL_RED** = **0** --- Se usa para leer del canal rojo de una textura.

- **TEXTURE_CHANNEL_GREEN** = **1** --- Se usa para leer del canal verde de una textura.

- **TEXTURE_CHANNEL_BLUE** = **2** --- Se usa para leer del canal azul de una textura.

- **TEXTURE_CHANNEL_ALPHA** = **3** --- Se usa para leer del canal azul de una textura.

- **TEXTURE_CHANNEL_GRAYSCALE** = **4** --- Actualmente sin uso.

----

.. _enum_SpatialMaterial_EmissionOperator:

.. _class_SpatialMaterial_constant_EMISSION_OP_ADD:

.. _class_SpatialMaterial_constant_EMISSION_OP_MULTIPLY:

enum **EmissionOperator**:

- **EMISSION_OP_ADD** = **0** --- Añade el color de la emisión al color de la textura de la emisión.

- **EMISSION_OP_MULTIPLY** = **1** --- Multiplica el color de la emisión por el color de la textura de la emisión.

----

.. _enum_SpatialMaterial_DistanceFadeMode:

.. _class_SpatialMaterial_constant_DISTANCE_FADE_DISABLED:

.. _class_SpatialMaterial_constant_DISTANCE_FADE_PIXEL_ALPHA:

.. _class_SpatialMaterial_constant_DISTANCE_FADE_PIXEL_DITHER:

.. _class_SpatialMaterial_constant_DISTANCE_FADE_OBJECT_DITHER:

enum **DistanceFadeMode**:

- **DISTANCE_FADE_DISABLED** = **0** --- No utilice el desvanecimiento de la distancia.

- **DISTANCE_FADE_PIXEL_ALPHA** = **1** --- Suavemente se desvanece el objeto en base a la distancia de cada píxel de la cámara usando el canal alfa.

- **DISTANCE_FADE_PIXEL_DITHER** = **2** --- Suavemente desvanece el objeto en base a la distancia de cada píxel de la cámara usando un enfoque de titubeo. Los píxeles descartados siguen un patrón establecido para desvanecerse suavemente sin permitir la transparencia. En cierto hardware esto puede ser más rápido que :ref:`DISTANCE_FADE_PIXEL_ALPHA<class_SpatialMaterial_constant_DISTANCE_FADE_PIXEL_ALPHA>`.

- **DISTANCE_FADE_OBJECT_DITHER** = **3** --- Suavemente desvanece el objeto en base a la distancia de cada píxel de la cámara usando un enfoque de titubeo. Los píxeles descartados siguen un patrón establecido para desvanecerse suavemente sin permitir la transparencia. En cierto hardware esto puede ser más rápido que :ref:`DISTANCE_FADE_PIXEL_ALPHA<class_SpatialMaterial_constant_DISTANCE_FADE_PIXEL_ALPHA>`.

----

.. _enum_SpatialMaterial_AsyncMode:

.. _class_SpatialMaterial_constant_ASYNC_MODE_VISIBLE:

.. _class_SpatialMaterial_constant_ASYNC_MODE_HIDDEN:

enum **AsyncMode**:

- **ASYNC_MODE_VISIBLE** = **0** --- The real conditioned shader needed on each situation will be sent for background compilation. In the meantime, a very complex shader that adapts to every situation will be used ("ubershader"). This ubershader is much slower to render, but will keep the game running without stalling to compile. Once shader compilation is done, the ubershader is replaced by the traditional optimized shader.

- **ASYNC_MODE_HIDDEN** = **1** --- Anything with this material applied won't be rendered while this material's shader is being compiled.

This is useful for optimization, in cases where the visuals won't suffer from having certain non-essential elements missing during the short time their shaders are being compiled.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_SpatialMaterial_property_albedo_color:

- :ref:`Color<class_Color>` **albedo_color**

+-----------+-------------------------+
| *Default* | ``Color( 1, 1, 1, 1 )`` |
+-----------+-------------------------+
| *Setter*  | set_albedo(value)       |
+-----------+-------------------------+
| *Getter*  | get_albedo()            |
+-----------+-------------------------+

El color base del material.

----

.. _class_SpatialMaterial_property_albedo_texture:

- :ref:`Texture<class_Texture>` **albedo_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

La textura se multiplica por :ref:`albedo_color<class_SpatialMaterial_property_albedo_color>`. Se utiliza para la textura básica de los objetos.

----

.. _class_SpatialMaterial_property_anisotropy:

- :ref:`float<class_float>` **anisotropy**

+----------+-----------------------+
| *Setter* | set_anisotropy(value) |
+----------+-----------------------+
| *Getter* | get_anisotropy()      |
+----------+-----------------------+

La fuerza del efecto de anisotropía.

----

.. _class_SpatialMaterial_property_anisotropy_enabled:

- :ref:`bool<class_bool>` **anisotropy_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

Si ``true``, la anisotropía está activada. Cambia la forma de la mancha especular y la alinea con el espacio tangente. Las tangentes de malla son necesarias para que esto funcione. Si la malla no contiene tangentes el efecto de anisotropía aparecerá roto.

----

.. _class_SpatialMaterial_property_anisotropy_flowmap:

- :ref:`Texture<class_Texture>` **anisotropy_flowmap**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Textura que desplaza el mapa de la tangente para los cálculos de anisotropía.

----

.. _class_SpatialMaterial_property_ao_enabled:

- :ref:`bool<class_bool>` **ao_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

Si ``true``, se activa la oclusión ambiental. La oclusión ambiental oscurece las áreas basadas en el :ref:`ao_texture<class_SpatialMaterial_property_ao_texture>`.

----

.. _class_SpatialMaterial_property_ao_light_affect:

- :ref:`float<class_float>` **ao_light_affect**

+----------+----------------------------+
| *Setter* | set_ao_light_affect(value) |
+----------+----------------------------+
| *Getter* | get_ao_light_affect()      |
+----------+----------------------------+

La cantidad que la oclusión ambiental afecta a la iluminación de las luces. Si ``0``, la oclusión ambiental sólo afecta a la luz ambiental. Si ``1``, la oclusión ambiental afecta a las luces tanto como a la luz ambiental. Esto puede utilizarse para influir en la intensidad del efecto de la oclusión ambiental, pero normalmente tiene un aspecto poco realista.

----

.. _class_SpatialMaterial_property_ao_on_uv2:

- :ref:`bool<class_bool>` **ao_on_uv2**

+----------+-----------------+
| *Setter* | set_flag(value) |
+----------+-----------------+
| *Getter* | get_flag()      |
+----------+-----------------+

Si ``true``, usa las coordenadas ``UV2`` para mirar hacia arriba desde el :ref:`ao_texture<class_SpatialMaterial_property_ao_texture>`.

----

.. _class_SpatialMaterial_property_ao_texture:

- :ref:`Texture<class_Texture>` **ao_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Textura que define la cantidad de oclusión ambiental para un punto determinado del objeto.

----

.. _class_SpatialMaterial_property_ao_texture_channel:

- :ref:`TextureChannel<enum_SpatialMaterial_TextureChannel>` **ao_texture_channel**

+----------+-------------------------------+
| *Setter* | set_ao_texture_channel(value) |
+----------+-------------------------------+
| *Getter* | get_ao_texture_channel()      |
+----------+-------------------------------+

Especifica el canal del :ref:`ao_texture<class_SpatialMaterial_property_ao_texture>` en el que se almacena la información de oclusión ambiental. Esto es útil cuando se almacena la información de múltiples efectos en una sola textura. Por ejemplo, si almacena metálico en el canal rojo, rugosidad en el azul y oclusión ambiental en el verde podría reducir el número de texturas que utiliza.

----

.. _class_SpatialMaterial_property_async_mode:

- :ref:`AsyncMode<enum_SpatialMaterial_AsyncMode>` **async_mode**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_async_mode(value) |
+-----------+-----------------------+
| *Getter*  | get_async_mode()      |
+-----------+-----------------------+

If :ref:`ProjectSettings.rendering/gles3/shaders/shader_compilation_mode<class_ProjectSettings_property_rendering/gles3/shaders/shader_compilation_mode>` is ``Synchronous`` (with or without cache), this determines how this material must behave in regards to asynchronous shader compilation.

\ :ref:`ASYNC_MODE_VISIBLE<class_SpatialMaterial_constant_ASYNC_MODE_VISIBLE>` is the default and the best for most cases.

----

.. _class_SpatialMaterial_property_clearcoat:

- :ref:`float<class_float>` **clearcoat**

+----------+----------------------+
| *Setter* | set_clearcoat(value) |
+----------+----------------------+
| *Getter* | get_clearcoat()      |
+----------+----------------------+

Establece la fuerza del efecto del barniz. Ajustar a ``0`` se ve igual que desactivar el efecto de barniz.

----

.. _class_SpatialMaterial_property_clearcoat_enabled:

- :ref:`bool<class_bool>` **clearcoat_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

If ``true``, clearcoat rendering is enabled. Adds a secondary transparent pass to the lighting calculation resulting in an added specular blob. This makes materials appear as if they have a clear layer on them that can be either glossy or rough.

\ **Note:** Clearcoat rendering is not visible if the material has :ref:`flags_unshaded<class_SpatialMaterial_property_flags_unshaded>` set to ``true``.

----

.. _class_SpatialMaterial_property_clearcoat_gloss:

- :ref:`float<class_float>` **clearcoat_gloss**

+----------+----------------------------+
| *Setter* | set_clearcoat_gloss(value) |
+----------+----------------------------+
| *Getter* | get_clearcoat_gloss()      |
+----------+----------------------------+

Establece la rugosidad del paso del barniz. Un valor más alto resulta en un barniz más suave mientras que un valor más bajo resulta en un barniz más áspero.

----

.. _class_SpatialMaterial_property_clearcoat_texture:

- :ref:`Texture<class_Texture>` **clearcoat_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Textura que define la fuerza del efecto del barniz y el brillo del barniz. La fuerza se especifica en el canal rojo mientras que el brillo se especifica en el canal verde.

----

.. _class_SpatialMaterial_property_depth_deep_parallax:

- :ref:`bool<class_bool>` **depth_deep_parallax**

+----------+----------------------------------+
| *Setter* | set_depth_deep_parallax(value)   |
+----------+----------------------------------+
| *Getter* | is_depth_deep_parallax_enabled() |
+----------+----------------------------------+

If ``true``, the shader will read depth texture at multiple points along the view ray to determine occlusion and parrallax. This can be very performance demanding, but results in more realistic looking depth mapping.

----

.. _class_SpatialMaterial_property_depth_enabled:

- :ref:`bool<class_bool>` **depth_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

If ``true``, depth mapping is enabled (also called "parallax mapping" or "height mapping"). See also :ref:`normal_enabled<class_SpatialMaterial_property_normal_enabled>`.

\ **Note:** Depth mapping is not supported if triplanar mapping is used on the same material. The value of :ref:`depth_enabled<class_SpatialMaterial_property_depth_enabled>` will be ignored if :ref:`uv1_triplanar<class_SpatialMaterial_property_uv1_triplanar>` is enabled.

----

.. _class_SpatialMaterial_property_depth_flip_binormal:

- :ref:`bool<class_bool>` **depth_flip_binormal**

+----------+----------------------------------------------+
| *Setter* | set_depth_deep_parallax_flip_binormal(value) |
+----------+----------------------------------------------+
| *Getter* | get_depth_deep_parallax_flip_binormal()      |
+----------+----------------------------------------------+

If ``true``, direction of the binormal is flipped before using in the depth effect. This may be necessary if you have encoded your binormals in a way that is conflicting with the depth effect.

----

.. _class_SpatialMaterial_property_depth_flip_tangent:

- :ref:`bool<class_bool>` **depth_flip_tangent**

+----------+---------------------------------------------+
| *Setter* | set_depth_deep_parallax_flip_tangent(value) |
+----------+---------------------------------------------+
| *Getter* | get_depth_deep_parallax_flip_tangent()      |
+----------+---------------------------------------------+

If ``true``, direction of the tangent is flipped before using in the depth effect. This may be necessary if you have encoded your tangents in a way that is conflicting with the depth effect.

----

.. _class_SpatialMaterial_property_depth_max_layers:

- :ref:`int<class_int>` **depth_max_layers**

+----------+-------------------------------------------+
| *Setter* | set_depth_deep_parallax_max_layers(value) |
+----------+-------------------------------------------+
| *Getter* | get_depth_deep_parallax_max_layers()      |
+----------+-------------------------------------------+

Number of layers to use when using :ref:`depth_deep_parallax<class_SpatialMaterial_property_depth_deep_parallax>` and the view direction is perpendicular to the surface of the object. A higher number will be more performance demanding while a lower number may not look as crisp.

----

.. _class_SpatialMaterial_property_depth_min_layers:

- :ref:`int<class_int>` **depth_min_layers**

+----------+-------------------------------------------+
| *Setter* | set_depth_deep_parallax_min_layers(value) |
+----------+-------------------------------------------+
| *Getter* | get_depth_deep_parallax_min_layers()      |
+----------+-------------------------------------------+

Number of layers to use when using :ref:`depth_deep_parallax<class_SpatialMaterial_property_depth_deep_parallax>` and the view direction is parallel to the surface of the object. A higher number will be more performance demanding while a lower number may not look as crisp.

----

.. _class_SpatialMaterial_property_depth_scale:

- :ref:`float<class_float>` **depth_scale**

+----------+------------------------+
| *Setter* | set_depth_scale(value) |
+----------+------------------------+
| *Getter* | get_depth_scale()      |
+----------+------------------------+

Scales the depth offset effect. A higher number will create a larger depth.

----

.. _class_SpatialMaterial_property_depth_texture:

- :ref:`Texture<class_Texture>` **depth_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Texture used to determine depth at a given pixel. Depth is always stored in the red channel.

----

.. _class_SpatialMaterial_property_detail_albedo:

- :ref:`Texture<class_Texture>` **detail_albedo**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Textura que especifica el color de la superposición de los detalles.

----

.. _class_SpatialMaterial_property_detail_blend_mode:

- :ref:`BlendMode<enum_SpatialMaterial_BlendMode>` **detail_blend_mode**

+----------+------------------------------+
| *Setter* | set_detail_blend_mode(value) |
+----------+------------------------------+
| *Getter* | get_detail_blend_mode()      |
+----------+------------------------------+

Especifica cómo el :ref:`detail_albedo<class_SpatialMaterial_property_detail_albedo>` debe mezclarse con el actual ``ALBEDO``. Ver :ref:`BlendMode<enum_SpatialMaterial_BlendMode>` para las opciones.

----

.. _class_SpatialMaterial_property_detail_enabled:

- :ref:`bool<class_bool>` **detail_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

Si ``true``, permite la superposición de detalles. El detalle es una segunda textura que se mezcla sobre la superficie del objeto basada en :ref:`detail_mask<class_SpatialMaterial_property_detail_mask>`. Esto puede ser usado para añadir variación a los objetos, o para mezclar entre dos diferentes texturas de albedo/normal.

----

.. _class_SpatialMaterial_property_detail_mask:

- :ref:`Texture<class_Texture>` **detail_mask**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

La textura usada para especificar cómo las texturas de detalle se mezclan con las texturas de base.

----

.. _class_SpatialMaterial_property_detail_normal:

- :ref:`Texture<class_Texture>` **detail_normal**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Textura que especifica la normalidad por píxel de la superposición de detalles.

\ **Nota:** Godot espera que el mapa de normales utilice las coordenadas X+, Y-, y Z+. Ver `esta página <http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates>`__ para una comparación de las coordenadas del mapa normal esperadas por los motores populares.

----

.. _class_SpatialMaterial_property_detail_uv_layer:

- :ref:`DetailUV<enum_SpatialMaterial_DetailUV>` **detail_uv_layer**

+----------+----------------------+
| *Setter* | set_detail_uv(value) |
+----------+----------------------+
| *Getter* | get_detail_uv()      |
+----------+----------------------+

Especifica si se utiliza ``UV`` o ``UV2`` para la capa de detalle. Ver :ref:`DetailUV<enum_SpatialMaterial_DetailUV>` para las opciones.

----

.. _class_SpatialMaterial_property_distance_fade_max_distance:

- :ref:`float<class_float>` **distance_fade_max_distance**

+----------+---------------------------------------+
| *Setter* | set_distance_fade_max_distance(value) |
+----------+---------------------------------------+
| *Getter* | get_distance_fade_max_distance()      |
+----------+---------------------------------------+

Distance at which the object appears fully opaque.

\ **Note:** If ``distance_fade_max_distance`` is less than ``distance_fade_min_distance``, the behavior will be reversed. The object will start to fade away at ``distance_fade_max_distance`` and will fully disappear once it reaches ``distance_fade_min_distance``.

----

.. _class_SpatialMaterial_property_distance_fade_min_distance:

- :ref:`float<class_float>` **distance_fade_min_distance**

+----------+---------------------------------------+
| *Setter* | set_distance_fade_min_distance(value) |
+----------+---------------------------------------+
| *Getter* | get_distance_fade_min_distance()      |
+----------+---------------------------------------+

Distance at which the object starts to become visible. If the object is less than this distance away, it will be invisible.

\ **Note:** If ``distance_fade_min_distance`` is greater than ``distance_fade_max_distance``, the behavior will be reversed. The object will start to fade away at ``distance_fade_max_distance`` and will fully disappear once it reaches ``distance_fade_min_distance``.

----

.. _class_SpatialMaterial_property_distance_fade_mode:

- :ref:`DistanceFadeMode<enum_SpatialMaterial_DistanceFadeMode>` **distance_fade_mode**

+-----------+--------------------------+
| *Default* | ``0``                    |
+-----------+--------------------------+
| *Setter*  | set_distance_fade(value) |
+-----------+--------------------------+
| *Getter*  | get_distance_fade()      |
+-----------+--------------------------+

Especifica el tipo de desvanecimiento a utilizar. Puede ser cualquiera de los :ref:`DistanceFadeMode<enum_SpatialMaterial_DistanceFadeMode>`\ s.

----

.. _class_SpatialMaterial_property_emission:

- :ref:`Color<class_Color>` **emission**

+----------+---------------------+
| *Setter* | set_emission(value) |
+----------+---------------------+
| *Getter* | get_emission()      |
+----------+---------------------+

El color de la luz emitida. Ver :ref:`emission_enabled<class_SpatialMaterial_property_emission_enabled>`.

----

.. _class_SpatialMaterial_property_emission_enabled:

- :ref:`bool<class_bool>` **emission_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

If ``true``, the body emits light. Emitting light makes the object appear brighter. The object can also cast light on other objects if a :ref:`GIProbe<class_GIProbe>` or :ref:`BakedLightmap<class_BakedLightmap>` is used and this object is used in baked lighting.

----

.. _class_SpatialMaterial_property_emission_energy:

- :ref:`float<class_float>` **emission_energy**

+----------+----------------------------+
| *Setter* | set_emission_energy(value) |
+----------+----------------------------+
| *Getter* | get_emission_energy()      |
+----------+----------------------------+

La fuerza de la luz emitida. Ver :ref:`emission_enabled<class_SpatialMaterial_property_emission_enabled>`.

----

.. _class_SpatialMaterial_property_emission_on_uv2:

- :ref:`bool<class_bool>` **emission_on_uv2**

+----------+-----------------+
| *Setter* | set_flag(value) |
+----------+-----------------+
| *Getter* | get_flag()      |
+----------+-----------------+

Utilice ``UV2`` para leer de la :ref:`emission_texture<class_SpatialMaterial_property_emission_texture>`.

----

.. _class_SpatialMaterial_property_emission_operator:

- :ref:`EmissionOperator<enum_SpatialMaterial_EmissionOperator>` **emission_operator**

+----------+------------------------------+
| *Setter* | set_emission_operator(value) |
+----------+------------------------------+
| *Getter* | get_emission_operator()      |
+----------+------------------------------+

Establece cómo interactúa :ref:`emission<class_SpatialMaterial_property_emission>` con :ref:`emission_texture<class_SpatialMaterial_property_emission_texture>`. Puede sumar o multiplicar. Ver :ref:`EmissionOperator<enum_SpatialMaterial_EmissionOperator>` para las opciones.

----

.. _class_SpatialMaterial_property_emission_texture:

- :ref:`Texture<class_Texture>` **emission_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Textura que especifica cuánta superficie emite luz en un punto determinado.

----

.. _class_SpatialMaterial_property_flags_albedo_tex_force_srgb:

- :ref:`bool<class_bool>` **flags_albedo_tex_force_srgb**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

Fuerza una conversión del :ref:`albedo_texture<class_SpatialMaterial_property_albedo_texture>` del espacio sRGB al espacio lineal.

----

.. _class_SpatialMaterial_property_flags_disable_ambient_light:

- :ref:`bool<class_bool>` **flags_disable_ambient_light**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

Si ``true``, el objeto no recibe luz ambiental.

----

.. _class_SpatialMaterial_property_flags_do_not_receive_shadows:

- :ref:`bool<class_bool>` **flags_do_not_receive_shadows**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

Si ``true``, el objeto no recibe ninguna sombra que de otra manera sería arrojada sobre él.

----

.. _class_SpatialMaterial_property_flags_ensure_correct_normals:

- :ref:`bool<class_bool>` **flags_ensure_correct_normals**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the shader will compute extra operations to make sure the normal stays correct when using a non-uniform scale. Only enable if using non-uniform scaling.

----

.. _class_SpatialMaterial_property_flags_fixed_size:

- :ref:`bool<class_bool>` **flags_fixed_size**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

Si ``true``, el objeto se renderiza con el mismo tamaño independientemente de la distancia.

----

.. _class_SpatialMaterial_property_flags_no_depth_test:

- :ref:`bool<class_bool>` **flags_no_depth_test**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

Si ``true``, la prueba de profundidad está desactivada y el objeto se dibujará en orden de renderización.

----

.. _class_SpatialMaterial_property_flags_transparent:

- :ref:`bool<class_bool>` **flags_transparent**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

If ``true``, transparency is enabled on the body. See also :ref:`params_blend_mode<class_SpatialMaterial_property_params_blend_mode>`.

----

.. _class_SpatialMaterial_property_flags_unshaded:

- :ref:`bool<class_bool>` **flags_unshaded**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the object is unaffected by lighting.

----

.. _class_SpatialMaterial_property_flags_use_point_size:

- :ref:`bool<class_bool>` **flags_use_point_size**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, render point size can be changed.

\ **Note:** This is only effective for objects whose geometry is point-based rather than triangle-based. See also :ref:`params_point_size<class_SpatialMaterial_property_params_point_size>`.

----

.. _class_SpatialMaterial_property_flags_use_shadow_to_opacity:

- :ref:`bool<class_bool>` **flags_use_shadow_to_opacity**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

Si ``true``, habilita el modo de representación "sombra a opacidad" en el que la iluminación modifica el alfa de modo que las áreas sombreadas son opacas y las áreas no sombreadas son transparentes. Es útil para superponer sombras en una cámara de alimentación en AR.

----

.. _class_SpatialMaterial_property_flags_vertex_lighting:

- :ref:`bool<class_bool>` **flags_vertex_lighting**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, lighting is calculated per vertex rather than per pixel. This may increase performance on low-end devices.

----

.. _class_SpatialMaterial_property_flags_world_triplanar:

- :ref:`bool<class_bool>` **flags_world_triplanar**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, triplanar mapping is calculated in world space rather than object local space. See also :ref:`uv1_triplanar<class_SpatialMaterial_property_uv1_triplanar>`.

----

.. _class_SpatialMaterial_property_metallic:

- :ref:`float<class_float>` **metallic**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_metallic(value) |
+-----------+---------------------+
| *Getter*  | get_metallic()      |
+-----------+---------------------+

Un valor alto hace que el material parezca más como un metal. Los no metálicos usan su albedo como color difuso y añaden difusión a la reflexión especular. Con los no metálicos, la reflexión aparece sobre el color del albedo. Los metales usan su albedo como multiplicador de la reflexión especular y ponen el color difuso en negro, lo que resulta en una reflexión teñida. Los materiales funcionan mejor cuando son totalmente metálicos o totalmente no metálicos, los valores entre ``0`` y ``1`` sólo deben utilizarse para la mezcla entre secciones metálicas y no metálicas. Para alterar la cantidad de reflexión utilice :ref:`roughness<class_SpatialMaterial_property_roughness>`.

----

.. _class_SpatialMaterial_property_metallic_specular:

- :ref:`float<class_float>` **metallic_specular**

+-----------+---------------------+
| *Default* | ``0.5``             |
+-----------+---------------------+
| *Setter*  | set_specular(value) |
+-----------+---------------------+
| *Getter*  | get_specular()      |
+-----------+---------------------+

Sets the size of the specular lobe. The specular lobe is the bright spot that is reflected from light sources.

\ **Note:** Unlike :ref:`metallic<class_SpatialMaterial_property_metallic>`, this is not energy-conserving, so it should be left at ``0.5`` in most cases. See also :ref:`roughness<class_SpatialMaterial_property_roughness>`.

----

.. _class_SpatialMaterial_property_metallic_texture:

- :ref:`Texture<class_Texture>` **metallic_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Textura utilizada para especificar el metal de un objeto. Se multiplica por :ref:`metallic<class_SpatialMaterial_property_metallic>`.

----

.. _class_SpatialMaterial_property_metallic_texture_channel:

- :ref:`TextureChannel<enum_SpatialMaterial_TextureChannel>` **metallic_texture_channel**

+-----------+-------------------------------------+
| *Default* | ``0``                               |
+-----------+-------------------------------------+
| *Setter*  | set_metallic_texture_channel(value) |
+-----------+-------------------------------------+
| *Getter*  | get_metallic_texture_channel()      |
+-----------+-------------------------------------+

Especifica el canal de la :ref:`metallic_texture<class_SpatialMaterial_property_metallic_texture>` en el que se almacena la información metálica. Esto es útil cuando se almacena la información para múltiples efectos en una sola textura. Por ejemplo, si almacenas metálicos en el canal rojo, rugosidad en el azul y oclusión ambiental en el verde, podrías reducir el número de texturas que utilizas.

----

.. _class_SpatialMaterial_property_normal_enabled:

- :ref:`bool<class_bool>` **normal_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

Si ``true``, se habilita el mapeado normal.

----

.. _class_SpatialMaterial_property_normal_scale:

- :ref:`float<class_float>` **normal_scale**

+----------+-------------------------+
| *Setter* | set_normal_scale(value) |
+----------+-------------------------+
| *Getter* | get_normal_scale()      |
+----------+-------------------------+

La fuerza del efecto del mapa normal.

----

.. _class_SpatialMaterial_property_normal_texture:

- :ref:`Texture<class_Texture>` **normal_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Texture used to specify the normal at a given pixel. The ``normal_texture`` only uses the red and green channels; the blue and alpha channels are ignored. The normal read from ``normal_texture`` is oriented around the surface normal provided by the :ref:`Mesh<class_Mesh>`.

\ **Note:** The mesh must have both normals and tangents defined in its vertex data. Otherwise, the normal map won't render correctly and will only appear to darken the whole surface. If creating geometry with :ref:`SurfaceTool<class_SurfaceTool>`, you can use :ref:`SurfaceTool.generate_normals<class_SurfaceTool_method_generate_normals>` and :ref:`SurfaceTool.generate_tangents<class_SurfaceTool_method_generate_tangents>` to automatically generate normals and tangents respectively.

\ **Note:** Godot expects the normal map to use X+, Y-, and Z+ coordinates. See `this page <http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates>`__ for a comparison of normal map coordinates expected by popular engines.

----

.. _class_SpatialMaterial_property_params_alpha_scissor_threshold:

- :ref:`float<class_float>` **params_alpha_scissor_threshold**

+----------+------------------------------------+
| *Setter* | set_alpha_scissor_threshold(value) |
+----------+------------------------------------+
| *Getter* | get_alpha_scissor_threshold()      |
+----------+------------------------------------+

Umbral en el que el alpha scissor descartará los valores.

----

.. _class_SpatialMaterial_property_params_billboard_keep_scale:

- :ref:`bool<class_bool>` **params_billboard_keep_scale**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when :ref:`params_billboard_mode<class_SpatialMaterial_property_params_billboard_mode>` is :ref:`BILLBOARD_ENABLED<class_SpatialMaterial_constant_BILLBOARD_ENABLED>`.

----

.. _class_SpatialMaterial_property_params_billboard_mode:

- :ref:`BillboardMode<enum_SpatialMaterial_BillboardMode>` **params_billboard_mode**

+-----------+---------------------------+
| *Default* | ``0``                     |
+-----------+---------------------------+
| *Setter*  | set_billboard_mode(value) |
+-----------+---------------------------+
| *Getter*  | get_billboard_mode()      |
+-----------+---------------------------+

Controls how the object faces the camera. See :ref:`BillboardMode<enum_SpatialMaterial_BillboardMode>`.

\ **Note:** Billboard mode is not suitable for VR because the left-right vector of the camera is not horizontal when the screen is attached to your head instead of on the table. See `GitHub issue #41567 <https://github.com/godotengine/godot/issues/41567>`__ for details.

----

.. _class_SpatialMaterial_property_params_blend_mode:

- :ref:`BlendMode<enum_SpatialMaterial_BlendMode>` **params_blend_mode**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_blend_mode(value) |
+-----------+-----------------------+
| *Getter*  | get_blend_mode()      |
+-----------+-----------------------+

El modo de mezcla del material.

\ **Nota:** Los valores distintos a ``Mix`` obligan al objeto a entrar en el pipeline transparente. Ver :ref:`BlendMode<enum_SpatialMaterial_BlendMode>`.

----

.. _class_SpatialMaterial_property_params_cull_mode:

- :ref:`CullMode<enum_SpatialMaterial_CullMode>` **params_cull_mode**

+-----------+----------------------+
| *Default* | ``0``                |
+-----------+----------------------+
| *Setter*  | set_cull_mode(value) |
+-----------+----------------------+
| *Getter*  | get_cull_mode()      |
+-----------+----------------------+

Cual lado del objeto no se dibuja cuando se renderizan las caras traseras. Ver :ref:`CullMode<enum_SpatialMaterial_CullMode>`.

----

.. _class_SpatialMaterial_property_params_depth_draw_mode:

- :ref:`DepthDrawMode<enum_SpatialMaterial_DepthDrawMode>` **params_depth_draw_mode**

+-----------+----------------------------+
| *Default* | ``0``                      |
+-----------+----------------------------+
| *Setter*  | set_depth_draw_mode(value) |
+-----------+----------------------------+
| *Getter*  | get_depth_draw_mode()      |
+-----------+----------------------------+

Determines when depth rendering takes place. See :ref:`DepthDrawMode<enum_SpatialMaterial_DepthDrawMode>`. See also :ref:`flags_transparent<class_SpatialMaterial_property_flags_transparent>`.

----

.. _class_SpatialMaterial_property_params_diffuse_mode:

- :ref:`DiffuseMode<enum_SpatialMaterial_DiffuseMode>` **params_diffuse_mode**

+-----------+-------------------------+
| *Default* | ``0``                   |
+-----------+-------------------------+
| *Setter*  | set_diffuse_mode(value) |
+-----------+-------------------------+
| *Getter*  | get_diffuse_mode()      |
+-----------+-------------------------+

El algoritmo utilizado para la dispersión de la luz difusa. Véase :ref:`DiffuseMode<enum_SpatialMaterial_DiffuseMode>`.

----

.. _class_SpatialMaterial_property_params_grow:

- :ref:`bool<class_bool>` **params_grow**

+-----------+-------------------------+
| *Default* | ``false``               |
+-----------+-------------------------+
| *Setter*  | set_grow_enabled(value) |
+-----------+-------------------------+
| *Getter*  | is_grow_enabled()       |
+-----------+-------------------------+

If ``true``, enables the vertex grow setting. See :ref:`params_grow_amount<class_SpatialMaterial_property_params_grow_amount>`.

----

.. _class_SpatialMaterial_property_params_grow_amount:

- :ref:`float<class_float>` **params_grow_amount**

+----------+-----------------+
| *Setter* | set_grow(value) |
+----------+-----------------+
| *Getter* | get_grow()      |
+----------+-----------------+

Crecen los vértices de los objetos en la dirección de sus normales.

----

.. _class_SpatialMaterial_property_params_line_width:

- :ref:`float<class_float>` **params_line_width**

+-----------+-----------------------+
| *Default* | ``1.0``               |
+-----------+-----------------------+
| *Setter*  | set_line_width(value) |
+-----------+-----------------------+
| *Getter*  | get_line_width()      |
+-----------+-----------------------+

Currently unimplemented in Godot.

----

.. _class_SpatialMaterial_property_params_point_size:

- :ref:`float<class_float>` **params_point_size**

+-----------+-----------------------+
| *Default* | ``1.0``               |
+-----------+-----------------------+
| *Setter*  | set_point_size(value) |
+-----------+-----------------------+
| *Getter*  | get_point_size()      |
+-----------+-----------------------+

The point size in pixels. See :ref:`flags_use_point_size<class_SpatialMaterial_property_flags_use_point_size>`.

----

.. _class_SpatialMaterial_property_params_specular_mode:

- :ref:`SpecularMode<enum_SpatialMaterial_SpecularMode>` **params_specular_mode**

+-----------+--------------------------+
| *Default* | ``0``                    |
+-----------+--------------------------+
| *Setter*  | set_specular_mode(value) |
+-----------+--------------------------+
| *Getter*  | get_specular_mode()      |
+-----------+--------------------------+

El método para renderizar la mancha especular. Ver :ref:`SpecularMode<enum_SpatialMaterial_SpecularMode>`.

----

.. _class_SpatialMaterial_property_params_use_alpha_scissor:

- :ref:`bool<class_bool>` **params_use_alpha_scissor**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the shader will discard all pixels that have an alpha value less than :ref:`params_alpha_scissor_threshold<class_SpatialMaterial_property_params_alpha_scissor_threshold>`.

----

.. _class_SpatialMaterial_property_particles_anim_h_frames:

- :ref:`int<class_int>` **particles_anim_h_frames**

+----------+------------------------------------+
| *Setter* | set_particles_anim_h_frames(value) |
+----------+------------------------------------+
| *Getter* | get_particles_anim_h_frames()      |
+----------+------------------------------------+

The number of horizontal frames in the particle sprite sheet. Only enabled when using :ref:`BILLBOARD_PARTICLES<class_SpatialMaterial_constant_BILLBOARD_PARTICLES>`. See :ref:`params_billboard_mode<class_SpatialMaterial_property_params_billboard_mode>`.

----

.. _class_SpatialMaterial_property_particles_anim_loop:

- :ref:`bool<class_bool>` **particles_anim_loop**

+----------+--------------------------------+
| *Setter* | set_particles_anim_loop(value) |
+----------+--------------------------------+
| *Getter* | get_particles_anim_loop()      |
+----------+--------------------------------+

If ``true``, particle animations are looped. Only enabled when using :ref:`BILLBOARD_PARTICLES<class_SpatialMaterial_constant_BILLBOARD_PARTICLES>`. See :ref:`params_billboard_mode<class_SpatialMaterial_property_params_billboard_mode>`.

----

.. _class_SpatialMaterial_property_particles_anim_v_frames:

- :ref:`int<class_int>` **particles_anim_v_frames**

+----------+------------------------------------+
| *Setter* | set_particles_anim_v_frames(value) |
+----------+------------------------------------+
| *Getter* | get_particles_anim_v_frames()      |
+----------+------------------------------------+

The number of vertical frames in the particle sprite sheet. Only enabled when using :ref:`BILLBOARD_PARTICLES<class_SpatialMaterial_constant_BILLBOARD_PARTICLES>`. See :ref:`params_billboard_mode<class_SpatialMaterial_property_params_billboard_mode>`.

----

.. _class_SpatialMaterial_property_proximity_fade_distance:

- :ref:`float<class_float>` **proximity_fade_distance**

+----------+------------------------------------+
| *Setter* | set_proximity_fade_distance(value) |
+----------+------------------------------------+
| *Getter* | get_proximity_fade_distance()      |
+----------+------------------------------------+

Distancia a la que se produce el efecto de desvanecimiento. Cuanto mayor es la distancia, más tiempo tarda un objeto en desvanecerse.

----

.. _class_SpatialMaterial_property_proximity_fade_enable:

- :ref:`bool<class_bool>` **proximity_fade_enable**

+-----------+-----------------------------+
| *Default* | ``false``                   |
+-----------+-----------------------------+
| *Setter*  | set_proximity_fade(value)   |
+-----------+-----------------------------+
| *Getter*  | is_proximity_fade_enabled() |
+-----------+-----------------------------+

Si ``true``, se activa el efecto de desvanecimiento por proximidad. El efecto de desvanecimiento por proximidad se desvanece cada píxel basado en su distancia a otro objeto.

----

.. _class_SpatialMaterial_property_refraction_enabled:

- :ref:`bool<class_bool>` **refraction_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

If ``true``, the refraction effect is enabled. Refraction distorts transparency based on light from behind the object. When using the GLES3 backend, the material's roughness value will affect the blurriness of the refraction. Higher roughness values will make the refraction look blurrier.

----

.. _class_SpatialMaterial_property_refraction_scale:

- :ref:`float<class_float>` **refraction_scale**

+----------+-----------------------+
| *Setter* | set_refraction(value) |
+----------+-----------------------+
| *Getter* | get_refraction()      |
+----------+-----------------------+

The strength of the refraction effect. Higher values result in a more distorted appearance for the refraction.

----

.. _class_SpatialMaterial_property_refraction_texture:

- :ref:`Texture<class_Texture>` **refraction_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Textura que controla la fuerza de la refracción por píxel. Multiplicado por :ref:`refraction_scale<class_SpatialMaterial_property_refraction_scale>`.

----

.. _class_SpatialMaterial_property_refraction_texture_channel:

- :ref:`TextureChannel<enum_SpatialMaterial_TextureChannel>` **refraction_texture_channel**

+----------+---------------------------------------+
| *Setter* | set_refraction_texture_channel(value) |
+----------+---------------------------------------+
| *Getter* | get_refraction_texture_channel()      |
+----------+---------------------------------------+

Specifies the channel of the :ref:`refraction_texture<class_SpatialMaterial_property_refraction_texture>` in which the refraction information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.

----

.. _class_SpatialMaterial_property_rim:

- :ref:`float<class_float>` **rim**

+----------+----------------+
| *Setter* | set_rim(value) |
+----------+----------------+
| *Getter* | get_rim()      |
+----------+----------------+

Establece la fuerza del efecto de iluminación del borde.

----

.. _class_SpatialMaterial_property_rim_enabled:

- :ref:`bool<class_bool>` **rim_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

If ``true``, rim effect is enabled. Rim lighting increases the brightness at glancing angles on an object.

\ **Note:** Rim lighting is not visible if the material has :ref:`flags_unshaded<class_SpatialMaterial_property_flags_unshaded>` set to ``true``.

----

.. _class_SpatialMaterial_property_rim_texture:

- :ref:`Texture<class_Texture>` **rim_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

La textura utilizada para establecer la fuerza del efecto de iluminación del borde por píxel. Multiplicado por el :ref:`rim<class_SpatialMaterial_property_rim>`.

----

.. _class_SpatialMaterial_property_rim_tint:

- :ref:`float<class_float>` **rim_tint**

+----------+---------------------+
| *Setter* | set_rim_tint(value) |
+----------+---------------------+
| *Getter* | get_rim_tint()      |
+----------+---------------------+

La cantidad de luz de mezclia y el color del albedo cuando se renderiza el efecto de borde. Si se utiliza ``0`` el color de la luz, mientras que ``1`` significa que se utiliza el color del albedo. Un valor intermedio generalmente funciona mejor.

----

.. _class_SpatialMaterial_property_roughness:

- :ref:`float<class_float>` **roughness**

+-----------+----------------------+
| *Default* | ``1.0``              |
+-----------+----------------------+
| *Setter*  | set_roughness(value) |
+-----------+----------------------+
| *Getter*  | get_roughness()      |
+-----------+----------------------+

Reflexión de la superficie. Un valor de ``0`` representa un espejo perfecto mientras que un valor de ``1`` difumina completamente el reflejo. Véase también :ref:`metallic<class_SpatialMaterial_property_metallic>`.

----

.. _class_SpatialMaterial_property_roughness_texture:

- :ref:`Texture<class_Texture>` **roughness_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

La textura utilizada para controlar la rugosidad por píxel. Multiplicado por :ref:`roughness<class_SpatialMaterial_property_roughness>`.

----

.. _class_SpatialMaterial_property_roughness_texture_channel:

- :ref:`TextureChannel<enum_SpatialMaterial_TextureChannel>` **roughness_texture_channel**

+-----------+--------------------------------------+
| *Default* | ``0``                                |
+-----------+--------------------------------------+
| *Setter*  | set_roughness_texture_channel(value) |
+-----------+--------------------------------------+
| *Getter*  | get_roughness_texture_channel()      |
+-----------+--------------------------------------+

Especifica el canal del :ref:`ao_texture<class_SpatialMaterial_property_ao_texture>` en el que se almacena la información de oclusión ambiental. Esto es útil cuando se almacena la información de múltiples efectos en una sola textura. Por ejemplo, si almacena metálico en el canal rojo, rugosidad en el azul y oclusión ambiental en el verde podría reducir el número de texturas que utiliza.

----

.. _class_SpatialMaterial_property_subsurf_scatter_enabled:

- :ref:`bool<class_bool>` **subsurf_scatter_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

Si ``true``, se activa la dispersión subterránea. Emula la luz que penetra en la superficie de un objeto, se dispersa y luego emerge.

----

.. _class_SpatialMaterial_property_subsurf_scatter_strength:

- :ref:`float<class_float>` **subsurf_scatter_strength**

+----------+-------------------------------------------+
| *Setter* | set_subsurface_scattering_strength(value) |
+----------+-------------------------------------------+
| *Getter* | get_subsurface_scattering_strength()      |
+----------+-------------------------------------------+

La fuerza del efecto de dispersión del subsuelo.

----

.. _class_SpatialMaterial_property_subsurf_scatter_texture:

- :ref:`Texture<class_Texture>` **subsurf_scatter_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

La textura utilizada para controlar la fuerza del subsurface scattering. Se almacena en el canal rojo de la textura. Multiplicado por :ref:`subsurf_scatter_strength<class_SpatialMaterial_property_subsurf_scatter_strength>`.

----

.. _class_SpatialMaterial_property_transmission:

- :ref:`Color<class_Color>` **transmission**

+----------+-------------------------+
| *Setter* | set_transmission(value) |
+----------+-------------------------+
| *Getter* | get_transmission()      |
+----------+-------------------------+

The color used by the transmission effect. Represents the light passing through an object.

----

.. _class_SpatialMaterial_property_transmission_enabled:

- :ref:`bool<class_bool>` **transmission_enabled**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_feature(value) |
+-----------+--------------------+
| *Getter*  | get_feature()      |
+-----------+--------------------+

If ``true``, the transmission effect is enabled.

----

.. _class_SpatialMaterial_property_transmission_texture:

- :ref:`Texture<class_Texture>` **transmission_texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

Texture used to control the transmission effect per-pixel. Added to :ref:`transmission<class_SpatialMaterial_property_transmission>`.

----

.. _class_SpatialMaterial_property_uv1_offset:

- :ref:`Vector3<class_Vector3>` **uv1_offset**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 0, 0 )`` |
+-----------+------------------------+
| *Setter*  | set_uv1_offset(value)  |
+-----------+------------------------+
| *Getter*  | get_uv1_offset()       |
+-----------+------------------------+

Cuánto desplazar las coordenadas ``UV``. Esta cantidad se añadirá a ``UV`` en la función de vértice. Esto puede ser usado para desplazar una textura.

----

.. _class_SpatialMaterial_property_uv1_scale:

- :ref:`Vector3<class_Vector3>` **uv1_scale**

+-----------+------------------------+
| *Default* | ``Vector3( 1, 1, 1 )`` |
+-----------+------------------------+
| *Setter*  | set_uv1_scale(value)   |
+-----------+------------------------+
| *Getter*  | get_uv1_scale()        |
+-----------+------------------------+

Cuánto escalar las coordenadas ``UV``. Esto se multiplica por ``UV`` en la función de vértice.

----

.. _class_SpatialMaterial_property_uv1_triplanar:

- :ref:`bool<class_bool>` **uv1_triplanar**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

Si ``true``, en lugar de usar ``UV`` las texturas usarán una búsqueda de texturas triplanares para determinar cómo aplicarlas. Triplanar usa la orientación de la superficie del objeto para mezclar entre las coordenadas de la textura. Lee de la textura fuente 3 veces, una para cada eje y luego se mezcla entre los resultados en base a cuán cerca se alinea el píxel con cada eje. Esto se utiliza a menudo para las características naturales para obtener una mezcla realista de los materiales. Debido a que la textura triplanar requiere muchas más lecturas de textura por píxel, es mucho más lenta que la textura UV normal. Además, debido a que está mezclando la textura entre los tres ejes, es inadecuado cuando se trata de lograr una textura nítida.

----

.. _class_SpatialMaterial_property_uv1_triplanar_sharpness:

- :ref:`float<class_float>` **uv1_triplanar_sharpness**

+-----------+------------------------------------------+
| *Default* | ``1.0``                                  |
+-----------+------------------------------------------+
| *Setter*  | set_uv1_triplanar_blend_sharpness(value) |
+-----------+------------------------------------------+
| *Getter*  | get_uv1_triplanar_blend_sharpness()      |
+-----------+------------------------------------------+

Un número más bajo mezcla la textura más suavemente mientras que un número más alto mezcla la textura más bruscamente.

----

.. _class_SpatialMaterial_property_uv2_offset:

- :ref:`Vector3<class_Vector3>` **uv2_offset**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 0, 0 )`` |
+-----------+------------------------+
| *Setter*  | set_uv2_offset(value)  |
+-----------+------------------------+
| *Getter*  | get_uv2_offset()       |
+-----------+------------------------+

Cuánto desplazar las coordenadas ``UV2``. Esta cantidad se añadirá a ``UV2`` en la función de vértice. Esto puede ser usado para compensar una textura.

----

.. _class_SpatialMaterial_property_uv2_scale:

- :ref:`Vector3<class_Vector3>` **uv2_scale**

+-----------+------------------------+
| *Default* | ``Vector3( 1, 1, 1 )`` |
+-----------+------------------------+
| *Setter*  | set_uv2_scale(value)   |
+-----------+------------------------+
| *Getter*  | get_uv2_scale()        |
+-----------+------------------------+

Cuánto escalar las coordenadas de ``UV2``. Esto se multiplica por ``UV2`` en la función de vértice.

----

.. _class_SpatialMaterial_property_uv2_triplanar:

- :ref:`bool<class_bool>` **uv2_triplanar**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

Si ``true``, en lugar de usar ``UV2`` las texturas usarán una búsqueda de texturas triplanares para determinar cómo aplicarlas. Triplanar usa la orientación de la superficie del objeto para mezclar entre las coordenadas de la textura. Lee de la textura fuente 3 veces, una para cada eje y luego se mezcla entre los resultados en base a cuán cerca se alinea el píxel con cada eje. Esto se utiliza a menudo para las características naturales para obtener una mezcla realista de los materiales. Debido a que la textura triplanar requiere muchas más lecturas de textura por píxel, es mucho más lenta que la textura UV normal. Además, debido a que está mezclando la textura entre los tres ejes, es inadecuado cuando se trata de lograr una textura nítida.

----

.. _class_SpatialMaterial_property_uv2_triplanar_sharpness:

- :ref:`float<class_float>` **uv2_triplanar_sharpness**

+-----------+------------------------------------------+
| *Default* | ``1.0``                                  |
+-----------+------------------------------------------+
| *Setter*  | set_uv2_triplanar_blend_sharpness(value) |
+-----------+------------------------------------------+
| *Getter*  | get_uv2_triplanar_blend_sharpness()      |
+-----------+------------------------------------------+

Un número más bajo mezcla la textura más suavemente mientras que un número más alto mezcla la textura más bruscamente.

----

.. _class_SpatialMaterial_property_vertex_color_is_srgb:

- :ref:`bool<class_bool>` **vertex_color_is_srgb**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

Si ``true``, los colores de los vértices del modelo se procesan como modo sRGB.

----

.. _class_SpatialMaterial_property_vertex_color_use_as_albedo:

- :ref:`bool<class_bool>` **vertex_color_use_as_albedo**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

Si ``true``, el color del vértice se utiliza como color del albedo.

Descripciones de Métodos
------------------------------------------------

.. _class_SpatialMaterial_method_get_feature:

- :ref:`bool<class_bool>` **get_feature** **(** :ref:`Feature<enum_SpatialMaterial_Feature>` feature **)** |const|

Devuelve ``true``, si el :ref:`Feature<enum_SpatialMaterial_Feature>` especificado está activado.

----

.. _class_SpatialMaterial_method_get_flag:

- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_SpatialMaterial_Flags>` flag **)** |const|

Devuelve ``true``, si el flag especificado está activado. Ver el enumerador :ref:`Flags<enum_SpatialMaterial_Flags>` para las opciones.

----

.. _class_SpatialMaterial_method_get_texture:

- :ref:`Texture<class_Texture>` **get_texture** **(** :ref:`TextureParam<enum_SpatialMaterial_TextureParam>` param **)** |const|

Devuelve la :ref:`Texture<class_Texture>` asociada a la :ref:`TextureParam<enum_SpatialMaterial_TextureParam>` especificada.

----

.. _class_SpatialMaterial_method_set_feature:

- void **set_feature** **(** :ref:`Feature<enum_SpatialMaterial_Feature>` feature, :ref:`bool<class_bool>` enable **)**

If ``true``, enables the specified :ref:`Feature<enum_SpatialMaterial_Feature>`. Many features that are available in ``SpatialMaterial``\ s need to be enabled before use. This way the cost for using the feature is only incurred when specified. Features can also be enabled by setting the corresponding member to ``true``.

----

.. _class_SpatialMaterial_method_set_flag:

- void **set_flag** **(** :ref:`Flags<enum_SpatialMaterial_Flags>` flag, :ref:`bool<class_bool>` enable **)**

If ``true``, enables the specified flag. Flags are optional behaviour that can be turned on and off. Only one flag can be enabled at a time with this function, the flag enumerators cannot be bit-masked together to enable or disable multiple flags at once. Flags can also be enabled by setting the corresponding member to ``true``. See :ref:`Flags<enum_SpatialMaterial_Flags>` enumerator for options.

----

.. _class_SpatialMaterial_method_set_texture:

- void **set_texture** **(** :ref:`TextureParam<enum_SpatialMaterial_TextureParam>` param, :ref:`Texture<class_Texture>` texture **)**

Sets the :ref:`Texture<class_Texture>` to be used by the specified :ref:`TextureParam<enum_SpatialMaterial_TextureParam>`. This function is called when setting members ending in ``*_texture``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
