:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the UDPServer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_UDPServer:

UDPServer
=========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Clase de ayudante para implementar un servidor UDP.

Descripción
----------------------

Un simple servidor que abre un socket UDP y devuelve conectado :ref:`PacketPeerUDP<class_PacketPeerUDP>` al recibir nuevos paquetes. Véase también :ref:`PacketPeerUDP.connect_to_host<class_PacketPeerUDP_method_connect_to_host>`.

Después de iniciar el servidor (:ref:`listen<class_UDPServer_method_listen>`), necesitará :ref:`poll<class_UDPServer_method_poll>` a intervalos regulares (por ejemplo, dentro de :ref:`Node._process<class_Node_method__process>`) para que procese nuevos paquetes, entregándolos al :ref:`PacketPeerUDP<class_PacketPeerUDP>` apropiado, y tomando nuevas conexiones.

A continuación se muestra un pequeño ejemplo de cómo puede utilizarse:

::

    # Servidor.gd
    extends Node
    
    var server := UDPServer.new()
    var peers = []
    
    func _ready():
        server.listen(4242)
    
    func _process(delta):
        server.poll() # ¡Important!
        if server.is_connection_available():
            var peer : PacketPeerUDP = server.take_connection()
            var pkt = peer.get_packet()
            print("Accepted peer: %s:%s" % [peer.get_packet_ip(), peer.get_packet_port()])
            print("Received data: %s" % [pkt.get_string_from_utf8()])
            # Responde para que sepa que hemos recibido el mensaje.
            peer.put_packet(pkt)
            # Mantén una referencia para que podamos seguir contactando con el par remoto.
            peers.append(peer)
    
        for i in range(0, peers.size()):
            pass # Haz algo con los pares conectados.
    

::

    # cliente.gd
    extends Node
    
    var udp := PacketPeerUDP.new()
    var connected = false
    
    func _ready():
        udp.connect_to_host("127.0.0.1", 4242)
    
    func _process(delta):
        if  !connected:
            # Intenta contactar con el servidor
            udp.put_packet("La respuesta es... 42!".to_utf8())
        if udp.get_available_packet_count() > 0:
            print("Connected: %s" % udp.get_packet().get_string_from_utf8())
            connected = true

Propiedades
----------------------

+-----------------------+----------------------------------------------------------------------------------+--------+
| :ref:`int<class_int>` | :ref:`max_pending_connections<class_UDPServer_property_max_pending_connections>` | ``16`` |
+-----------------------+----------------------------------------------------------------------------------+--------+

Métodos
--------------

+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_connection_available<class_UDPServer_method_is_connection_available>` **(** **)** |const|                                |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_listening<class_UDPServer_method_is_listening>` **(** **)** |const|                                                      |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`listen<class_UDPServer_method_listen>` **(** :ref:`int<class_int>` port, :ref:`String<class_String>` bind_address="*" **)** |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`poll<class_UDPServer_method_poll>` **(** **)**                                                                              |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`stop<class_UDPServer_method_stop>` **(** **)**                                                                              |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PacketPeerUDP<class_PacketPeerUDP>` | :ref:`take_connection<class_UDPServer_method_take_connection>` **(** **)**                                                        |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+

Descripciones de Propiedades
--------------------------------------------------------

.. _class_UDPServer_property_max_pending_connections:

- :ref:`int<class_int>` **max_pending_connections**

+-----------+------------------------------------+
| *Default* | ``16``                             |
+-----------+------------------------------------+
| *Setter*  | set_max_pending_connections(value) |
+-----------+------------------------------------+
| *Getter*  | get_max_pending_connections()      |
+-----------+------------------------------------+

Definir el número máximo de conexiones pendientes, durante el :ref:`poll<class_UDPServer_method_poll>`, cualquier nueva conexión pendiente que supere ese valor será automáticamente eliminada. Ajustar este valor a ``0`` impide efectivamente que se acepte cualquier nueva conexión pendiente (por ejemplo, cuando todos tus jugadores se han conectado).

Descripciones de Métodos
------------------------------------------------

.. _class_UDPServer_method_is_connection_available:

- :ref:`bool<class_bool>` **is_connection_available** **(** **)** |const|

Devuelve ``true`` si un paquete con una nueva combinación de dirección/puerto fue recibido en el socket.

----

.. _class_UDPServer_method_is_listening:

- :ref:`bool<class_bool>` **is_listening** **(** **)** |const|

Devuelve ``true`` si el socket está abierto y escuchando en un puerto.

----

.. _class_UDPServer_method_listen:

- :ref:`Error<enum_@GlobalScope_Error>` **listen** **(** :ref:`int<class_int>` port, :ref:`String<class_String>` bind_address="*" **)**

Inicia el servidor abriendo un socket UDP que escucha en el puerto dado. Opcionalmente puede especificar un ``bind_address`` para que sólo escuche los paquetes enviados a esa dirección. Véase también :ref:`PacketPeerUDP.listen<class_PacketPeerUDP_method_listen>`.

----

.. _class_UDPServer_method_poll:

- :ref:`Error<enum_@GlobalScope_Error>` **poll** **(** **)**

Llame a este método a intervalos regulares (por ejemplo, dentro de :ref:`Node._process<class_Node_method__process>`) para procesar nuevos paquetes. Y el paquete del par dirección/puerto conocido será entregado al :ref:`PacketPeerUDP<class_PacketPeerUDP>` apropiado, cualquier paquete recibido de un par dirección/puerto desconocido será añadido como una conexión pendiente (ver :ref:`is_connection_available<class_UDPServer_method_is_connection_available>`, :ref:`take_connection<class_UDPServer_method_take_connection>`). El número máximo de conexiones pendientes se define mediante :ref:`max_pending_connections<class_UDPServer_property_max_pending_connections>`.

----

.. _class_UDPServer_method_stop:

- void **stop** **(** **)**

Detiene el servidor, cerrando el enchufe UDP si está abierto. Cerrará todos los :ref:`PacketPeerUDP<class_PacketPeerUDP>` conectados aceptados a través del :ref:`take_connection<class_UDPServer_method_take_connection>` (los compañeros remotos no serán notificados).

----

.. _class_UDPServer_method_take_connection:

- :ref:`PacketPeerUDP<class_PacketPeerUDP>` **take_connection** **(** **)**

Devuelve la primera conexión pendiente (conectada a la dirección/puerto apropiado). Devolverá ``null`` si no hay una nueva conexión disponible. Ver también :ref:`is_connection_available<class_UDPServer_method_is_connection_available>`, :ref:`PacketPeerUDP.connect_to_host<class_PacketPeerUDP_method_connect_to_host>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
