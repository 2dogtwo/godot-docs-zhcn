:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the RandomNumberGenerator.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_RandomNumberGenerator:

RandomNumberGenerator
=====================

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Una clase para generar números pseudo-aleatorios.

Descripción
----------------------

RandomNumberGenerator is a class for generating pseudo-random numbers. It currently uses `PCG32 <http://www.pcg-random.org/>`__.

\ **Note:** The underlying algorithm is an implementation detail. As a result, it should not be depended upon for reproducible random streams across Godot versions.

To generate a random float number (within a given range) based on a time-dependant seed:

::

    var rng = RandomNumberGenerator.new()
    func _ready():
        rng.randomize()
        var my_random_number = rng.randf_range(-10.0, 10.0)

\ **Note:** The default values of :ref:`seed<class_RandomNumberGenerator_property_seed>` and :ref:`state<class_RandomNumberGenerator_property_state>` properties are pseudo-random, and changes when calling :ref:`randomize<class_RandomNumberGenerator_method_randomize>`. The ``0`` value documented here is a placeholder, and not the actual default seed.

Tutoriales
--------------------

- :doc:`Random number generation <../tutorials/math/random_number_generation>`

Propiedades
----------------------

+-----------------------+----------------------------------------------------------+-------+
| :ref:`int<class_int>` | :ref:`seed<class_RandomNumberGenerator_property_seed>`   | ``0`` |
+-----------------------+----------------------------------------------------------+-------+
| :ref:`int<class_int>` | :ref:`state<class_RandomNumberGenerator_property_state>` | ``0`` |
+-----------------------+----------------------------------------------------------+-------+

Métodos
--------------

+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>` | :ref:`randf<class_RandomNumberGenerator_method_randf>` **(** **)**                                                                               |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>` | :ref:`randf_range<class_RandomNumberGenerator_method_randf_range>` **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to **)**      |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>` | :ref:`randfn<class_RandomNumberGenerator_method_randfn>` **(** :ref:`float<class_float>` mean=0.0, :ref:`float<class_float>` deviation=1.0 **)** |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`     | :ref:`randi<class_RandomNumberGenerator_method_randi>` **(** **)**                                                                               |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`     | :ref:`randi_range<class_RandomNumberGenerator_method_randi_range>` **(** :ref:`int<class_int>` from, :ref:`int<class_int>` to **)**              |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`randomize<class_RandomNumberGenerator_method_randomize>` **(** **)**                                                                       |
+---------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+

Descripciones de Propiedades
--------------------------------------------------------

.. _class_RandomNumberGenerator_property_seed:

- :ref:`int<class_int>` **seed**

+-----------+-----------------+
| *Default* | ``0``           |
+-----------+-----------------+
| *Setter*  | set_seed(value) |
+-----------+-----------------+
| *Getter*  | get_seed()      |
+-----------+-----------------+

Initializes the random number generator state based on the given seed value. A given seed will give a reproducible sequence of pseudo-random numbers.

\ **Note:** The RNG does not have an avalanche effect, and can output similar random streams given similar seeds. Consider using a hash function to improve your seed quality if they're sourced externally.

\ **Note:** Setting this property produces a side effect of changing the internal :ref:`state<class_RandomNumberGenerator_property_state>`, so make sure to initialize the seed *before* modifying the :ref:`state<class_RandomNumberGenerator_property_state>`:

::

    var rng = RandomNumberGenerator.new()
    rng.seed = hash("Godot")
    rng.state = 100 # Restore to some previously saved state.

\ **Warning:** the getter of this property returns the previous :ref:`state<class_RandomNumberGenerator_property_state>`, and not the initial seed value, which is going to be fixed in Godot 4.0.

----

.. _class_RandomNumberGenerator_property_state:

- :ref:`int<class_int>` **state**

+-----------+------------------+
| *Default* | ``0``            |
+-----------+------------------+
| *Setter*  | set_state(value) |
+-----------+------------------+
| *Getter*  | get_state()      |
+-----------+------------------+

The current state of the random number generator. Save and restore this property to restore the generator to a previous state:

::

    var rng = RandomNumberGenerator.new()
    print(rng.randf())
    var saved_state = rng.state # Store current state.
    print(rng.randf()) # Advance internal state.
    rng.state = saved_state # Restore the state.
    print(rng.randf()) # Prints the same value as in previous.

\ **Note:** Do not set state to arbitrary values, since the random number generator requires the state to have certain qualities to behave properly. It should only be set to values that came from the state property itself. To initialize the random number generator with arbitrary input, use :ref:`seed<class_RandomNumberGenerator_property_seed>` instead.

Descripciones de Métodos
------------------------------------------------

.. _class_RandomNumberGenerator_method_randf:

- :ref:`float<class_float>` **randf** **(** **)**

Genera un número float pseuodo-aleatorio entre ``0.0`` y ``1.0`` (ambos incluídos).

----

.. _class_RandomNumberGenerator_method_randf_range:

- :ref:`float<class_float>` **randf_range** **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to **)**

Genera un número float pseudo-aleatorio entre ``from`` y ``to`` (ambos incluidos).

----

.. _class_RandomNumberGenerator_method_randfn:

- :ref:`float<class_float>` **randfn** **(** :ref:`float<class_float>` mean=0.0, :ref:`float<class_float>` deviation=1.0 **)**

Genera un número pseudoaleatorio `distribuido normalmente <https://en.wikipedia.org/wiki/Normal_distribution>`__, utilizando la transformación Box-Muller con el ``mean`` especificado y una ``desviación`` estándar. Esto también se denomina distribución Gaussiana.

----

.. _class_RandomNumberGenerator_method_randi:

- :ref:`int<class_int>` **randi** **(** **)**

Genera un número entero seudoaleatorio de 32 bits sin signo entre ``0`` y ``4294967295`` (inclusive).

----

.. _class_RandomNumberGenerator_method_randi_range:

- :ref:`int<class_int>` **randi_range** **(** :ref:`int<class_int>` from, :ref:`int<class_int>` to **)**

Genera un entero seudoaleatorio de 32 bits firmado entre ``de`` y ``a`` (inclusive).

----

.. _class_RandomNumberGenerator_method_randomize:

- void **randomize** **(** **)**

Configura una semilla basada en el tiempo para el generador.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
