:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the WebSocketServer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_WebSocketServer:

WebSocketServer
===============

**Inherits:** :ref:`WebSocketMultiplayerPeer<class_WebSocketMultiplayerPeer>` **<** :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>` **<** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Una implementación de un servidor WebSocket.

Descripción
----------------------

Esta clase implementa un servidor WebSocket que también puede soportar la API multijugador de alto nivel.

Después de iniciar el servidor (:ref:`listen<class_WebSocketServer_method_listen>`), necesitarás :ref:`NetworkedMultiplayerPeer.poll<class_NetworkedMultiplayerPeer_method_poll>` a intervalos regulares (por ejemplo, dentro de :ref:`Node._process<class_Node_method__process>`). Cuando los clientes se conecten, desconecten o envíen datos, recibirá la señal apropiada.

\ **Nota:** No disponible en las exportaciones en HTML5.

Propiedades
----------------------

+-----------------------------------------------+----------------------------------------------------------------------------+---------+
| :ref:`String<class_String>`                   | :ref:`bind_ip<class_WebSocketServer_property_bind_ip>`                     | ``"*"`` |
+-----------------------------------------------+----------------------------------------------------------------------------+---------+
| :ref:`X509Certificate<class_X509Certificate>` | :ref:`ca_chain<class_WebSocketServer_property_ca_chain>`                   |         |
+-----------------------------------------------+----------------------------------------------------------------------------+---------+
| :ref:`float<class_float>`                     | :ref:`handshake_timeout<class_WebSocketServer_property_handshake_timeout>` | ``3.0`` |
+-----------------------------------------------+----------------------------------------------------------------------------+---------+
| :ref:`CryptoKey<class_CryptoKey>`             | :ref:`private_key<class_WebSocketServer_property_private_key>`             |         |
+-----------------------------------------------+----------------------------------------------------------------------------+---------+
| :ref:`X509Certificate<class_X509Certificate>` | :ref:`ssl_certificate<class_WebSocketServer_property_ssl_certificate>`     |         |
+-----------------------------------------------+----------------------------------------------------------------------------+---------+

Métodos
--------------

+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`disconnect_peer<class_WebSocketServer_method_disconnect_peer>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` code=1000, :ref:`String<class_String>` reason="" **)**                               |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_peer_address<class_WebSocketServer_method_get_peer_address>` **(** :ref:`int<class_int>` id **)** |const|                                                                                             |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_peer_port<class_WebSocketServer_method_get_peer_port>` **(** :ref:`int<class_int>` id **)** |const|                                                                                                   |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`has_peer<class_WebSocketServer_method_has_peer>` **(** :ref:`int<class_int>` id **)** |const|                                                                                                             |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_listening<class_WebSocketServer_method_is_listening>` **(** **)** |const|                                                                                                                              |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`listen<class_WebSocketServer_method_listen>` **(** :ref:`int<class_int>` port, :ref:`PoolStringArray<class_PoolStringArray>` protocols=PoolStringArray(  ), :ref:`bool<class_bool>` gd_mp_api=false **)** |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`stop<class_WebSocketServer_method_stop>` **(** **)**                                                                                                                                                      |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_WebSocketServer_signal_client_close_request:

- **client_close_request** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` code, :ref:`String<class_String>` reason **)**

Emitido cuando un cliente solicita un cierre limpio. Debes seguir encuestando hasta que obtengas una señal :ref:`client_disconnected<class_WebSocketServer_signal_client_disconnected>` con el mismo ``id`` para lograr el cierre limpio. Ver :ref:`WebSocketPeer.close<class_WebSocketPeer_method_close>` para más detalles.

----

.. _class_WebSocketServer_signal_client_connected:

- **client_connected** **(** :ref:`int<class_int>` id, :ref:`String<class_String>` protocol **)**

Emitido cuando un nuevo cliente se conecta. "Protocolo" será el sub-protocolo acordado con el cliente.

----

.. _class_WebSocketServer_signal_client_disconnected:

- **client_disconnected** **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` was_clean_close **)**

Emitido cuando un cliente se desconecta. ``was_clean_close`` será ``true`` si la conexión se ha cerrado limpiamente.

----

.. _class_WebSocketServer_signal_data_received:

- **data_received** **(** :ref:`int<class_int>` id **)**

Emitido cuando se recibe un nuevo mensaje.

\ **Nota:** Esta señal es *no* emitida cuando se usa como par multijugador de alto nivel.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_WebSocketServer_property_bind_ip:

- :ref:`String<class_String>` **bind_ip**

+-----------+--------------------+
| *Default* | ``"*"``            |
+-----------+--------------------+
| *Setter*  | set_bind_ip(value) |
+-----------+--------------------+
| *Getter*  | get_bind_ip()      |
+-----------+--------------------+

Si no se establece en ``*`` se restringirán las conexiones entrantes a la dirección IP especificada. Si se establece ``bind_ip`` en ``127.0.0.1``, el servidor sólo escuchará al host local.

----

.. _class_WebSocketServer_property_ca_chain:

- :ref:`X509Certificate<class_X509Certificate>` **ca_chain**

+----------+---------------------+
| *Setter* | set_ca_chain(value) |
+----------+---------------------+
| *Getter* | get_ca_chain()      |
+----------+---------------------+

Cuando utilice SSL (consulte :ref:`private_key<class_WebSocketServer_property_private_key>` y :ref:`ssl_certificate<class_WebSocketServer_property_ssl_certificate>`), puede configurarlo como un :ref:`X509Certificate<class_X509Certificate>` válido que se proporcionará como información adicional de la cadena de CA durante el apretón de manos SSL.

----

.. _class_WebSocketServer_property_handshake_timeout:

- :ref:`float<class_float>` **handshake_timeout**

+-----------+------------------------------+
| *Default* | ``3.0``                      |
+-----------+------------------------------+
| *Setter*  | set_handshake_timeout(value) |
+-----------+------------------------------+
| *Getter*  | get_handshake_timeout()      |
+-----------+------------------------------+

The time in seconds before a pending client (i.e. a client that has not yet finished the HTTP handshake) is considered stale and forcefully disconnected.

----

.. _class_WebSocketServer_property_private_key:

- :ref:`CryptoKey<class_CryptoKey>` **private_key**

+----------+------------------------+
| *Setter* | set_private_key(value) |
+----------+------------------------+
| *Getter* | get_private_key()      |
+----------+------------------------+

Cuando se configura en una :ref:`CryptoKey<class_CryptoKey>` válida (junto con :ref:`ssl_certificate<class_WebSocketServer_property_ssl_certificate>`) hará que el servidor requiera SSL en lugar del TCP normal (es decir, el protocolo ``wss://``).

----

.. _class_WebSocketServer_property_ssl_certificate:

- :ref:`X509Certificate<class_X509Certificate>` **ssl_certificate**

+----------+----------------------------+
| *Setter* | set_ssl_certificate(value) |
+----------+----------------------------+
| *Getter* | get_ssl_certificate()      |
+----------+----------------------------+

Cuando se establece en un :ref:`X509Certificate<class_X509Certificate>` válido (junto con :ref:`private_key<class_WebSocketServer_property_private_key>`) hará que el servidor requiera SSL en lugar del TCP normal (es decir, el protocolo ``wss://``).

Descripciones de Métodos
------------------------------------------------

.. _class_WebSocketServer_method_disconnect_peer:

- void **disconnect_peer** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` code=1000, :ref:`String<class_String>` reason="" **)**

Desconecta el par identificado por ``id`` del servidor. Ver :ref:`WebSocketPeer.close<class_WebSocketPeer_method_close>` para más información.

----

.. _class_WebSocketServer_method_get_peer_address:

- :ref:`String<class_String>` **get_peer_address** **(** :ref:`int<class_int>` id **)** |const|

Devuelve la dirección IP del par dado.

----

.. _class_WebSocketServer_method_get_peer_port:

- :ref:`int<class_int>` **get_peer_port** **(** :ref:`int<class_int>` id **)** |const|

Devuelve el puerto remoto del par dado.

----

.. _class_WebSocketServer_method_has_peer:

- :ref:`bool<class_bool>` **has_peer** **(** :ref:`int<class_int>` id **)** |const|

Devuelve ``true`` si un par con el ID dado está conectado.

----

.. _class_WebSocketServer_method_is_listening:

- :ref:`bool<class_bool>` **is_listening** **(** **)** |const|

Devuelve ``true`` si el servidor está escuchando activamente en un puerto.

----

.. _class_WebSocketServer_method_listen:

- :ref:`Error<enum_@GlobalScope_Error>` **listen** **(** :ref:`int<class_int>` port, :ref:`PoolStringArray<class_PoolStringArray>` protocols=PoolStringArray(  ), :ref:`bool<class_bool>` gd_mp_api=false **)**

Empieza a escuchar en el puerto dado.

Puede especificar los subprotocolos deseados a través del array de "protocolos". Si la lista está vacía (por defecto), no se solicitará ningún subprotocolo.

Si se pasa ``true`` como ``gd_mp_api``, el servidor se comportará como un par de red para la :ref:`MultiplayerAPI<class_MultiplayerAPI>`, las conexiones de los clientes que no sean Godot no funcionarán y no se emitirá :ref:`data_received<class_WebSocketServer_signal_data_received>`.

Si en su lugar se pasa ``false`` (por defecto), debe llamar a las funciones :ref:`PacketPeer<class_PacketPeer>` (``put_packet``, ``get_packet``, etc. ), en el :ref:`WebSocketPeer<class_WebSocketPeer>` devuelto a través de ``get_peer(id)`` para comunicarse con el par con el ``id`` dado (por ejemplo, ``get_peer(id).get_available_packet_count``).

----

.. _class_WebSocketServer_method_stop:

- void **stop** **(** **)**

Detiene el servidor y limpia su estado.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
