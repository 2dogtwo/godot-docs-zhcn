:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Camera2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Camera2D:

Camera2D
========

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Nodo de cámara para escenas 2D.

Descripción
----------------------

Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of :ref:`CanvasItem<class_CanvasItem>`-based nodes.

This node is intended to be a simple helper to get things going quickly, but more functionality may be desired to change how the camera works. To make your own custom camera node, inherit it from :ref:`Node2D<class_Node2D>` and change the transform of the canvas by setting :ref:`Viewport.canvas_transform<class_Viewport_property_canvas_transform>` in :ref:`Viewport<class_Viewport>` (you can obtain the current :ref:`Viewport<class_Viewport>` by using :ref:`Node.get_viewport<class_Node_method_get_viewport>`).

Note that the ``Camera2D`` node's ``position`` doesn't represent the actual position of the screen, which may differ due to applied smoothing or limits. You can use :ref:`get_camera_screen_center<class_Camera2D_method_get_camera_screen_center>` to get the real position.

Tutoriales
--------------------

- `2D Platformer Demo <https://godotengine.org/asset-library/asset/120>`__

- `2D Isometric Demo <https://godotengine.org/asset-library/asset/112>`__

- `2D HDR Demo <https://godotengine.org/asset-library/asset/110>`__

Propiedades
----------------------

+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`AnchorMode<enum_Camera2D_AnchorMode>`                   | :ref:`anchor_mode<class_Camera2D_property_anchor_mode>`                         | ``1``               |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                       | :ref:`current<class_Camera2D_property_current>`                                 | ``false``           |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`Node<class_Node>`                                       | :ref:`custom_viewport<class_Camera2D_property_custom_viewport>`                 |                     |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                                     | :ref:`drag_margin_bottom<class_Camera2D_property_drag_margin_bottom>`           | ``0.2``             |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                       | :ref:`drag_margin_h_enabled<class_Camera2D_property_drag_margin_h_enabled>`     | ``false``           |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                                     | :ref:`drag_margin_left<class_Camera2D_property_drag_margin_left>`               | ``0.2``             |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                                     | :ref:`drag_margin_right<class_Camera2D_property_drag_margin_right>`             | ``0.2``             |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                                     | :ref:`drag_margin_top<class_Camera2D_property_drag_margin_top>`                 | ``0.2``             |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                       | :ref:`drag_margin_v_enabled<class_Camera2D_property_drag_margin_v_enabled>`     | ``false``           |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                       | :ref:`editor_draw_drag_margin<class_Camera2D_property_editor_draw_drag_margin>` | ``false``           |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                       | :ref:`editor_draw_limits<class_Camera2D_property_editor_draw_limits>`           | ``false``           |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                       | :ref:`editor_draw_screen<class_Camera2D_property_editor_draw_screen>`           | ``true``            |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                                         | :ref:`limit_bottom<class_Camera2D_property_limit_bottom>`                       | ``10000000``        |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                                         | :ref:`limit_left<class_Camera2D_property_limit_left>`                           | ``-10000000``       |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                                         | :ref:`limit_right<class_Camera2D_property_limit_right>`                         | ``10000000``        |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                       | :ref:`limit_smoothed<class_Camera2D_property_limit_smoothed>`                   | ``false``           |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                                         | :ref:`limit_top<class_Camera2D_property_limit_top>`                             | ``-10000000``       |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                                 | :ref:`offset<class_Camera2D_property_offset>`                                   | ``Vector2( 0, 0 )`` |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                                     | :ref:`offset_h<class_Camera2D_property_offset_h>`                               | ``0.0``             |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                                     | :ref:`offset_v<class_Camera2D_property_offset_v>`                               | ``0.0``             |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`Camera2DProcessMode<enum_Camera2D_Camera2DProcessMode>` | :ref:`process_mode<class_Camera2D_property_process_mode>`                       | ``1``               |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                       | :ref:`rotating<class_Camera2D_property_rotating>`                               | ``false``           |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                       | :ref:`smoothing_enabled<class_Camera2D_property_smoothing_enabled>`             | ``false``           |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                                     | :ref:`smoothing_speed<class_Camera2D_property_smoothing_speed>`                 | ``5.0``             |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                                 | :ref:`zoom<class_Camera2D_property_zoom>`                                       | ``Vector2( 1, 1 )`` |
+---------------------------------------------------------------+---------------------------------------------------------------------------------+---------------------+

Métodos
--------------

+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`align<class_Camera2D_method_align>` **(** **)**                                                                                                           |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`clear_current<class_Camera2D_method_clear_current>` **(** **)**                                                                                           |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`force_update_scroll<class_Camera2D_method_force_update_scroll>` **(** **)**                                                                               |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`get_camera_position<class_Camera2D_method_get_camera_position>` **(** **)** |const|                                                                       |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`get_camera_screen_center<class_Camera2D_method_get_camera_screen_center>` **(** **)** |const|                                                             |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`get_drag_margin<class_Camera2D_method_get_drag_margin>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|                                |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`         | :ref:`get_limit<class_Camera2D_method_get_limit>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|                                            |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`make_current<class_Camera2D_method_make_current>` **(** **)**                                                                                             |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`reset_smoothing<class_Camera2D_method_reset_smoothing>` **(** **)**                                                                                       |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_drag_margin<class_Camera2D_method_set_drag_margin>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`float<class_float>` drag_margin **)** |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_limit<class_Camera2D_method_set_limit>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`int<class_int>` limit **)**                       |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_Camera2D_AnchorMode:

.. _class_Camera2D_constant_ANCHOR_MODE_FIXED_TOP_LEFT:

.. _class_Camera2D_constant_ANCHOR_MODE_DRAG_CENTER:

enum **AnchorMode**:

- **ANCHOR_MODE_FIXED_TOP_LEFT** = **0** --- La posición de la cámara está fijada de tal manera que la esquina superior izquierda está siempre en el origen.

- **ANCHOR_MODE_DRAG_CENTER** = **1** --- La posición de la cámara tiene en cuenta los desplazamientos verticales/horizontales y el tamaño de la pantalla.

----

.. _enum_Camera2D_Camera2DProcessMode:

.. _class_Camera2D_constant_CAMERA2D_PROCESS_PHYSICS:

.. _class_Camera2D_constant_CAMERA2D_PROCESS_IDLE:

enum **Camera2DProcessMode**:

- **CAMERA2D_PROCESS_PHYSICS** = **0** --- La cámara se actualiza con la llamada ``_physics_process``.

- **CAMERA2D_PROCESS_IDLE** = **1** --- La cámara se actualiza con la llamada de ``_process``.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Camera2D_property_anchor_mode:

- :ref:`AnchorMode<enum_Camera2D_AnchorMode>` **anchor_mode**

+-----------+------------------------+
| *Default* | ``1``                  |
+-----------+------------------------+
| *Setter*  | set_anchor_mode(value) |
+-----------+------------------------+
| *Getter*  | get_anchor_mode()      |
+-----------+------------------------+

El punto de anclaje de Camera2D. Ver las constantes de :ref:`AnchorMode<enum_Camera2D_AnchorMode>`.

----

.. _class_Camera2D_property_current:

- :ref:`bool<class_bool>` **current**

+-----------+--------------+
| *Default* | ``false``    |
+-----------+--------------+
| *Getter*  | is_current() |
+-----------+--------------+

Si ``true``, la cámara es la cámara activa para la escena actual. Sólo una cámara puede ser actual, por lo que configurar una cámara diferente ``current`` deshabilitará ésta.

----

.. _class_Camera2D_property_custom_viewport:

- :ref:`Node<class_Node>` **custom_viewport**

+----------+----------------------------+
| *Setter* | set_custom_viewport(value) |
+----------+----------------------------+
| *Getter* | get_custom_viewport()      |
+----------+----------------------------+

El nodo personalizado de :ref:`Viewport<class_Viewport>` unido a ``Camera2D``. Si ``null`` o no es un :ref:`Viewport<class_Viewport>`, usa el viewport por defecto en su lugar.

----

.. _class_Camera2D_property_drag_margin_bottom:

- :ref:`float<class_float>` **drag_margin_bottom**

+-----------+------------------------+
| *Default* | ``0.2``                |
+-----------+------------------------+
| *Setter*  | set_drag_margin(value) |
+-----------+------------------------+
| *Getter*  | get_drag_margin()      |
+-----------+------------------------+

El margen inferior se necesita para arrastrar la cámara. Un valor de ``1`` hace que la cámara se mueva sólo cuando llega al borde de la pantalla.

----

.. _class_Camera2D_property_drag_margin_h_enabled:

- :ref:`bool<class_bool>` **drag_margin_h_enabled**

+-----------+---------------------------+
| *Default* | ``false``                 |
+-----------+---------------------------+
| *Setter*  | set_h_drag_enabled(value) |
+-----------+---------------------------+
| *Getter*  | is_h_drag_enabled()       |
+-----------+---------------------------+

Si ``true``, la cámara sólo se mueve cuando alcanza los márgenes de arrastre horizontal. Si ``false``, la cámara se mueve horizontalmente independientemente de los márgenes.

----

.. _class_Camera2D_property_drag_margin_left:

- :ref:`float<class_float>` **drag_margin_left**

+-----------+------------------------+
| *Default* | ``0.2``                |
+-----------+------------------------+
| *Setter*  | set_drag_margin(value) |
+-----------+------------------------+
| *Getter*  | get_drag_margin()      |
+-----------+------------------------+

El margen izquierdo se necesita para arrastrar la cámara. Un valor de ``1`` hace que la cámara se mueva sólo cuando llega al borde de la pantalla.

----

.. _class_Camera2D_property_drag_margin_right:

- :ref:`float<class_float>` **drag_margin_right**

+-----------+------------------------+
| *Default* | ``0.2``                |
+-----------+------------------------+
| *Setter*  | set_drag_margin(value) |
+-----------+------------------------+
| *Getter*  | get_drag_margin()      |
+-----------+------------------------+

Se necesita un margen derecho para arrastrar la cámara. Un valor de ``1`` hace que la cámara se mueva sólo cuando llega al borde de la pantalla.

----

.. _class_Camera2D_property_drag_margin_top:

- :ref:`float<class_float>` **drag_margin_top**

+-----------+------------------------+
| *Default* | ``0.2``                |
+-----------+------------------------+
| *Setter*  | set_drag_margin(value) |
+-----------+------------------------+
| *Getter*  | get_drag_margin()      |
+-----------+------------------------+

Se necesita un margen superior para arrastrar la cámara. Un valor de ``1`` hace que la cámara se mueva sólo cuando llega al borde de la pantalla.

----

.. _class_Camera2D_property_drag_margin_v_enabled:

- :ref:`bool<class_bool>` **drag_margin_v_enabled**

+-----------+---------------------------+
| *Default* | ``false``                 |
+-----------+---------------------------+
| *Setter*  | set_v_drag_enabled(value) |
+-----------+---------------------------+
| *Getter*  | is_v_drag_enabled()       |
+-----------+---------------------------+

Si ``true``, la cámara sólo se mueve cuando alcanza los márgenes de arrastre vertical. Si ``false``, la cámara se mueve verticalmente sin importar los márgenes.

----

.. _class_Camera2D_property_editor_draw_drag_margin:

- :ref:`bool<class_bool>` **editor_draw_drag_margin**

+-----------+-----------------------------------+
| *Default* | ``false``                         |
+-----------+-----------------------------------+
| *Setter*  | set_margin_drawing_enabled(value) |
+-----------+-----------------------------------+
| *Getter*  | is_margin_drawing_enabled()       |
+-----------+-----------------------------------+

Si ``true``, dibuja el rectángulo de margen de arrastre de la cámara en el editor.

----

.. _class_Camera2D_property_editor_draw_limits:

- :ref:`bool<class_bool>` **editor_draw_limits**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_limit_drawing_enabled(value) |
+-----------+----------------------------------+
| *Getter*  | is_limit_drawing_enabled()       |
+-----------+----------------------------------+

Si ``true``, dibuja el rectángulo de límites de la cámara en el editor.

----

.. _class_Camera2D_property_editor_draw_screen:

- :ref:`bool<class_bool>` **editor_draw_screen**

+-----------+-----------------------------------+
| *Default* | ``true``                          |
+-----------+-----------------------------------+
| *Setter*  | set_screen_drawing_enabled(value) |
+-----------+-----------------------------------+
| *Getter*  | is_screen_drawing_enabled()       |
+-----------+-----------------------------------+

Si ``true``, dibuja el rectángulo de la pantalla de la cámara en el editor.

----

.. _class_Camera2D_property_limit_bottom:

- :ref:`int<class_int>` **limit_bottom**

+-----------+------------------+
| *Default* | ``10000000``     |
+-----------+------------------+
| *Setter*  | set_limit(value) |
+-----------+------------------+
| *Getter*  | get_limit()      |
+-----------+------------------+

Límite inferior de desplazamiento en píxeles. La cámara deja de moverse cuando alcanza este valor.

----

.. _class_Camera2D_property_limit_left:

- :ref:`int<class_int>` **limit_left**

+-----------+------------------+
| *Default* | ``-10000000``    |
+-----------+------------------+
| *Setter*  | set_limit(value) |
+-----------+------------------+
| *Getter*  | get_limit()      |
+-----------+------------------+

Límite de scroll izquierdo en píxeles. La cámara deja de moverse cuando alcanza este valor.

----

.. _class_Camera2D_property_limit_right:

- :ref:`int<class_int>` **limit_right**

+-----------+------------------+
| *Default* | ``10000000``     |
+-----------+------------------+
| *Setter*  | set_limit(value) |
+-----------+------------------+
| *Getter*  | get_limit()      |
+-----------+------------------+

Límite de scroll derecho en píxeles. La cámara deja de moverse cuando alcanza este valor.

----

.. _class_Camera2D_property_limit_smoothed:

- :ref:`bool<class_bool>` **limit_smoothed**

+-----------+------------------------------------+
| *Default* | ``false``                          |
+-----------+------------------------------------+
| *Setter*  | set_limit_smoothing_enabled(value) |
+-----------+------------------------------------+
| *Getter*  | is_limit_smoothing_enabled()       |
+-----------+------------------------------------+

If ``true``, the camera smoothly stops when reaches its limits.

This property has no effect if :ref:`smoothing_enabled<class_Camera2D_property_smoothing_enabled>` is ``false``.

\ **Note:** To immediately update the camera's position to be within limits without smoothing, even with this setting enabled, invoke :ref:`reset_smoothing<class_Camera2D_method_reset_smoothing>`.

----

.. _class_Camera2D_property_limit_top:

- :ref:`int<class_int>` **limit_top**

+-----------+------------------+
| *Default* | ``-10000000``    |
+-----------+------------------+
| *Setter*  | set_limit(value) |
+-----------+------------------+
| *Getter*  | get_limit()      |
+-----------+------------------+

Límite superior de scroll en píxeles. La cámara deja de moverse cuando alcanza este valor.

----

.. _class_Camera2D_property_offset:

- :ref:`Vector2<class_Vector2>` **offset**

+-----------+---------------------+
| *Default* | ``Vector2( 0, 0 )`` |
+-----------+---------------------+
| *Setter*  | set_offset(value)   |
+-----------+---------------------+
| *Getter*  | get_offset()        |
+-----------+---------------------+

El desplazamiento de la camara, útil para mirar alrededor o para las animaciones de agitación de la camara.

----

.. _class_Camera2D_property_offset_h:

- :ref:`float<class_float>` **offset_h**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_h_offset(value) |
+-----------+---------------------+
| *Getter*  | get_h_offset()      |
+-----------+---------------------+

El desplazamiento horizontal de la cámara, relativo a los márgenes de arrastre.

\ **Nota:** El desplazamiento H se utiliza sólo para forzar el desplazamiento relativo a los márgenes. No se actualiza de ninguna manera si los márgenes de arrastre están activados y puede utilizarse para establecer el desplazamiento inicial.

----

.. _class_Camera2D_property_offset_v:

- :ref:`float<class_float>` **offset_v**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_v_offset(value) |
+-----------+---------------------+
| *Getter*  | get_v_offset()      |
+-----------+---------------------+

El desplazamiento vertical de la cámara, relativo a los márgenes de arrastre.

\ **Nota:** Se utiliza igual que :ref:`offset_h<class_Camera2D_property_offset_h>`.

----

.. _class_Camera2D_property_process_mode:

- :ref:`Camera2DProcessMode<enum_Camera2D_Camera2DProcessMode>` **process_mode**

+-----------+-------------------------+
| *Default* | ``1``                   |
+-----------+-------------------------+
| *Setter*  | set_process_mode(value) |
+-----------+-------------------------+
| *Getter*  | get_process_mode()      |
+-----------+-------------------------+

La llamada al proceso de la cámara. Ver :ref:`Camera2DProcessMode<enum_Camera2D_Camera2DProcessMode>`.

----

.. _class_Camera2D_property_rotating:

- :ref:`bool<class_bool>` **rotating**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_rotating(value) |
+-----------+---------------------+
| *Getter*  | is_rotating()       |
+-----------+---------------------+

If ``true``, the camera view rotates with the target.

----

.. _class_Camera2D_property_smoothing_enabled:

- :ref:`bool<class_bool>` **smoothing_enabled**

+-----------+------------------------------------+
| *Default* | ``false``                          |
+-----------+------------------------------------+
| *Setter*  | set_enable_follow_smoothing(value) |
+-----------+------------------------------------+
| *Getter*  | is_follow_smoothing_enabled()      |
+-----------+------------------------------------+

Si ``true``, la cámara se mueve suavemente hacia el objetivo a :ref:`smoothing_speed<class_Camera2D_property_smoothing_speed>`.

----

.. _class_Camera2D_property_smoothing_speed:

- :ref:`float<class_float>` **smoothing_speed**

+-----------+-----------------------------+
| *Default* | ``5.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_follow_smoothing(value) |
+-----------+-----------------------------+
| *Getter*  | get_follow_smoothing()      |
+-----------+-----------------------------+

Velocidad en píxeles por segundo del efecto de suavizado de la cámara cuando :ref:`smoothing_enabled<class_Camera2D_property_smoothing_enabled>` es ``true``.

----

.. _class_Camera2D_property_zoom:

- :ref:`Vector2<class_Vector2>` **zoom**

+-----------+---------------------+
| *Default* | ``Vector2( 1, 1 )`` |
+-----------+---------------------+
| *Setter*  | set_zoom(value)     |
+-----------+---------------------+
| *Getter*  | get_zoom()          |
+-----------+---------------------+

El zoom de la cámara en relación con el punto de vista. Los valores mayores que ``Vector2(1, 1)`` se alejan y los valores menores se acercan. Para un ejemplo, use ``Vector2(0,5, 0,5)`` para un zoom invertido de 2×, y ``Vector2(4, 4)`` para un zoom de 4×.

Descripciones de Métodos
------------------------------------------------

.. _class_Camera2D_method_align:

- void **align** **(** **)**

Alinea la cámara con el nodo de seguimiento.

----

.. _class_Camera2D_method_clear_current:

- void **clear_current** **(** **)**

Quita cualquier ``Camera2D`` de la cámara interna del antepasado :ref:`Viewport<class_Viewport>` actualmente asignada.

----

.. _class_Camera2D_method_force_update_scroll:

- void **force_update_scroll** **(** **)**

Obliga a la cámara a actualizar el scroll inmediatamente.

----

.. _class_Camera2D_method_get_camera_position:

- :ref:`Vector2<class_Vector2>` **get_camera_position** **(** **)** |const|

Returns the camera's ``position`` (the tracked point the camera attempts to follow), relative to the origin.

\ **Note:** The returned value is not the same as :ref:`Node2D.position<class_Node2D_property_position>` or :ref:`Node2D.global_position<class_Node2D_property_global_position>`, as it is affected by the ``drag`` properties.

----

.. _class_Camera2D_method_get_camera_screen_center:

- :ref:`Vector2<class_Vector2>` **get_camera_screen_center** **(** **)** |const|

Returns the location of the ``Camera2D``'s screen-center, relative to the origin.

\ **Note:** The real ``position`` of the camera may be different, see :ref:`get_camera_position<class_Camera2D_method_get_camera_position>`.

----

.. _class_Camera2D_method_get_drag_margin:

- :ref:`float<class_float>` **get_drag_margin** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|

Devuelve el margen especificado. Véase también :ref:`drag_margin_bottom<class_Camera2D_property_drag_margin_bottom>`, :ref:`drag_margin_top<class_Camera2D_property_drag_margin_top>`, :ref:`drag_margin_left<class_Camera2D_property_drag_margin_left>`, y :ref:`drag_margin_right<class_Camera2D_property_drag_margin_right>`.

----

.. _class_Camera2D_method_get_limit:

- :ref:`int<class_int>` **get_limit** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|

Devuelve el límite de cámara especificado. Consulte también :ref:`limit_bottom<class_Camera2D_property_limit_bottom>`, :ref:`limit_top<class_Camera2D_property_limit_top>`, :ref:`limit_left<class_Camera2D_property_limit_left>` y :ref:`limit_right<class_Camera2D_property_limit_right>`.

----

.. _class_Camera2D_method_make_current:

- void **make_current** **(** **)**

Haz que esta sea la cámara 2D actual para la escena (viewport y layer), en caso de que haya muchas cámaras en la escena.

----

.. _class_Camera2D_method_reset_smoothing:

- void **reset_smoothing** **(** **)**

Sets the camera's position immediately to its current smoothing destination.

This method has no effect if :ref:`smoothing_enabled<class_Camera2D_property_smoothing_enabled>` is ``false``.

----

.. _class_Camera2D_method_set_drag_margin:

- void **set_drag_margin** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`float<class_float>` drag_margin **)**

Establece el margen especificado. Véase también :ref:`drag_margin_bottom<class_Camera2D_property_drag_margin_bottom>`, :ref:`drag_margin_top<class_Camera2D_property_drag_margin_top>`, :ref:`drag_margin_left<class_Camera2D_property_drag_margin_left>`, y :ref:`drag_margin_right<class_Camera2D_property_drag_margin_right>`.

----

.. _class_Camera2D_method_set_limit:

- void **set_limit** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`int<class_int>` limit **)**

Establece el límite de cámara especificado. Consulte también :ref:`limit_bottom<class_Camera2D_property_limit_bottom>`, :ref:`limit_top<class_Camera2D_property_limit_top>`, :ref:`limit_left<class_Camera2D_property_limit_left>` y :ref:`limit_right<class_Camera2D_property_limit_right>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
