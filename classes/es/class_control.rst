:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Control.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Control:

Control
=======

**Inherits:** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`BaseButton<class_BaseButton>`, :ref:`ColorRect<class_ColorRect>`, :ref:`Container<class_Container>`, :ref:`GraphEdit<class_GraphEdit>`, :ref:`ItemList<class_ItemList>`, :ref:`Label<class_Label>`, :ref:`LineEdit<class_LineEdit>`, :ref:`NinePatchRect<class_NinePatchRect>`, :ref:`Panel<class_Panel>`, :ref:`Popup<class_Popup>`, :ref:`Range<class_Range>`, :ref:`ReferenceRect<class_ReferenceRect>`, :ref:`RichTextLabel<class_RichTextLabel>`, :ref:`Separator<class_Separator>`, :ref:`Tabs<class_Tabs>`, :ref:`TextEdit<class_TextEdit>`, :ref:`TextureRect<class_TextureRect>`, :ref:`Tree<class_Tree>`, :ref:`VideoPlayer<class_VideoPlayer>`

Todos los nodos de la interfaz de usuario heredan de Control. Los anclajes y márgenes de un control adaptan su posición y tamaño en relación con su padre..

Descripción
----------------------

Base class for all UI-related nodes. ``Control`` features a bounding rectangle that defines its extents, an anchor position relative to its parent control or the current viewport, and margins that represent an offset to the anchor. The margins update automatically when the node, any of its parents, or the screen size change.

For more information on Godot's UI system, anchors, margins, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from ``Control`` and :ref:`Container<class_Container>` nodes.

\ **User Interface nodes and input**\ 

Godot sends input events to the scene's root node first, by calling :ref:`Node._input<class_Node_method__input>`. :ref:`Node._input<class_Node_method__input>` forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls :ref:`MainLoop._input_event<class_MainLoop_method__input_event>`. Call :ref:`accept_event<class_Control_method_accept_event>` so no other node receives the event. Once you accept an input, it becomes handled so :ref:`Node._unhandled_input<class_Node_method__unhandled_input>` will not process it.

Only one ``Control`` node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the focus, call :ref:`grab_focus<class_Control_method_grab_focus>`. ``Control`` nodes lose focus when another node grabs it, or if you hide the node in focus.

Sets :ref:`mouse_filter<class_Control_property_mouse_filter>` to :ref:`MOUSE_FILTER_IGNORE<class_Control_constant_MOUSE_FILTER_IGNORE>` to tell a ``Control`` node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.

\ :ref:`Theme<class_Theme>` resources change the Control's appearance. If you change the :ref:`Theme<class_Theme>` on a ``Control`` node, it affects all of its children. To override some of the theme's parameters, call one of the ``add_*_override`` methods, like :ref:`add_font_override<class_Control_method_add_font_override>`. You can override the theme with the inspector.

\ **Note:** Theme items are *not* :ref:`Object<class_Object>` properties. This means you can't access their values using :ref:`Object.get<class_Object_method_get>` and :ref:`Object.set<class_Object_method_set>`. Instead, use :ref:`get_color<class_Control_method_get_color>`, :ref:`get_constant<class_Control_method_get_constant>`, :ref:`get_font<class_Control_method_get_font>`, :ref:`get_icon<class_Control_method_get_icon>`, :ref:`get_stylebox<class_Control_method_get_stylebox>`, and the ``add_*_override`` methods provided by this class.

Tutoriales
--------------------

- :doc:`GUI tutorial index <../tutorials/ui/index>`

- :doc:`Custom drawing in 2D <../tutorials/2d/custom_drawing_in_2d>`

- :doc:`Control node gallery <../tutorials/ui/control_node_gallery>`

- `All GUI Demos <https://github.com/godotengine/godot-demo-projects/tree/master/gui>`__

Propiedades
----------------------

+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                        | :ref:`anchor_bottom<class_Control_property_anchor_bottom>`                                     | ``0.0``             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                        | :ref:`anchor_left<class_Control_property_anchor_left>`                                         | ``0.0``             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                        | :ref:`anchor_right<class_Control_property_anchor_right>`                                       | ``0.0``             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                        | :ref:`anchor_top<class_Control_property_anchor_top>`                                           | ``0.0``             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`FocusMode<enum_Control_FocusMode>`         | :ref:`focus_mode<class_Control_property_focus_mode>`                                           | ``0``               |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`NodePath<class_NodePath>`                  | :ref:`focus_neighbour_bottom<class_Control_property_focus_neighbour_bottom>`                   | ``NodePath("")``    |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`NodePath<class_NodePath>`                  | :ref:`focus_neighbour_left<class_Control_property_focus_neighbour_left>`                       | ``NodePath("")``    |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`NodePath<class_NodePath>`                  | :ref:`focus_neighbour_right<class_Control_property_focus_neighbour_right>`                     | ``NodePath("")``    |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`NodePath<class_NodePath>`                  | :ref:`focus_neighbour_top<class_Control_property_focus_neighbour_top>`                         | ``NodePath("")``    |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`NodePath<class_NodePath>`                  | :ref:`focus_next<class_Control_property_focus_next>`                                           | ``NodePath("")``    |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`NodePath<class_NodePath>`                  | :ref:`focus_previous<class_Control_property_focus_previous>`                                   | ``NodePath("")``    |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`GrowDirection<enum_Control_GrowDirection>` | :ref:`grow_horizontal<class_Control_property_grow_horizontal>`                                 | ``1``               |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`GrowDirection<enum_Control_GrowDirection>` | :ref:`grow_vertical<class_Control_property_grow_vertical>`                                     | ``1``               |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`String<class_String>`                      | :ref:`hint_tooltip<class_Control_property_hint_tooltip>`                                       | ``""``              |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                          | :ref:`input_pass_on_modal_close_click<class_Control_property_input_pass_on_modal_close_click>` | ``true``            |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                        | :ref:`margin_bottom<class_Control_property_margin_bottom>`                                     | ``0.0``             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                        | :ref:`margin_left<class_Control_property_margin_left>`                                         | ``0.0``             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                        | :ref:`margin_right<class_Control_property_margin_right>`                                       | ``0.0``             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                        | :ref:`margin_top<class_Control_property_margin_top>`                                           | ``0.0``             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`CursorShape<enum_Control_CursorShape>`     | :ref:`mouse_default_cursor_shape<class_Control_property_mouse_default_cursor_shape>`           | ``0``               |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`MouseFilter<enum_Control_MouseFilter>`     | :ref:`mouse_filter<class_Control_property_mouse_filter>`                                       | ``0``               |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                          | :ref:`rect_clip_content<class_Control_property_rect_clip_content>`                             | ``false``           |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                    | :ref:`rect_global_position<class_Control_property_rect_global_position>`                       |                     |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                    | :ref:`rect_min_size<class_Control_property_rect_min_size>`                                     | ``Vector2( 0, 0 )`` |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                    | :ref:`rect_pivot_offset<class_Control_property_rect_pivot_offset>`                             | ``Vector2( 0, 0 )`` |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                    | :ref:`rect_position<class_Control_property_rect_position>`                                     | ``Vector2( 0, 0 )`` |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                        | :ref:`rect_rotation<class_Control_property_rect_rotation>`                                     | ``0.0``             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                    | :ref:`rect_scale<class_Control_property_rect_scale>`                                           | ``Vector2( 1, 1 )`` |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                    | :ref:`rect_size<class_Control_property_rect_size>`                                             | ``Vector2( 0, 0 )`` |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                            | :ref:`size_flags_horizontal<class_Control_property_size_flags_horizontal>`                     | ``1``               |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                        | :ref:`size_flags_stretch_ratio<class_Control_property_size_flags_stretch_ratio>`               | ``1.0``             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                            | :ref:`size_flags_vertical<class_Control_property_size_flags_vertical>`                         | ``1``               |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+
| :ref:`Theme<class_Theme>`                        | :ref:`theme<class_Control_property_theme>`                                                     |                     |
+--------------------------------------------------+------------------------------------------------------------------------------------------------+---------------------+

Métodos
--------------

+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`_clips_input<class_Control_method__clips_input>` **(** **)** |virtual|                                                                                                                                                                                       |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                | :ref:`_get_minimum_size<class_Control_method__get_minimum_size>` **(** **)** |virtual|                                                                                                                                                                             |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`_gui_input<class_Control_method__gui_input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                                                                                                 |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Control<class_Control>`                | :ref:`_make_custom_tooltip<class_Control_method__make_custom_tooltip>` **(** :ref:`String<class_String>` for_text **)** |virtual|                                                                                                                                  |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`accept_event<class_Control_method_accept_event>` **(** **)**                                                                                                                                                                                                 |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`add_color_override<class_Control_method_add_color_override>` **(** :ref:`String<class_String>` name, :ref:`Color<class_Color>` color **)**                                                                                                                   |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`add_constant_override<class_Control_method_add_constant_override>` **(** :ref:`String<class_String>` name, :ref:`int<class_int>` constant **)**                                                                                                              |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`add_font_override<class_Control_method_add_font_override>` **(** :ref:`String<class_String>` name, :ref:`Font<class_Font>` font **)**                                                                                                                        |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`add_icon_override<class_Control_method_add_icon_override>` **(** :ref:`String<class_String>` name, :ref:`Texture<class_Texture>` texture **)**                                                                                                               |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`add_shader_override<class_Control_method_add_shader_override>` **(** :ref:`String<class_String>` name, :ref:`Shader<class_Shader>` shader **)**                                                                                                              |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`add_stylebox_override<class_Control_method_add_stylebox_override>` **(** :ref:`String<class_String>` name, :ref:`StyleBox<class_StyleBox>` stylebox **)**                                                                                                    |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`can_drop_data<class_Control_method_can_drop_data>` **(** :ref:`Vector2<class_Vector2>` position, :ref:`Variant<class_Variant>` data **)** |virtual|                                                                                                          |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`drop_data<class_Control_method_drop_data>` **(** :ref:`Vector2<class_Vector2>` position, :ref:`Variant<class_Variant>` data **)** |virtual|                                                                                                                  |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Control<class_Control>`                | :ref:`find_next_valid_focus<class_Control_method_find_next_valid_focus>` **(** **)** |const|                                                                                                                                                                       |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Control<class_Control>`                | :ref:`find_prev_valid_focus<class_Control_method_find_prev_valid_focus>` **(** **)** |const|                                                                                                                                                                       |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`force_drag<class_Control_method_force_drag>` **(** :ref:`Variant<class_Variant>` data, :ref:`Control<class_Control>` preview **)**                                                                                                                           |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                    | :ref:`get_anchor<class_Control_method_get_anchor>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|                                                                                                                                              |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                | :ref:`get_begin<class_Control_method_get_begin>` **(** **)** |const|                                                                                                                                                                                               |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`                    | :ref:`get_color<class_Control_method_get_color>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|                                                                                                                   |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                | :ref:`get_combined_minimum_size<class_Control_method_get_combined_minimum_size>` **(** **)** |const|                                                                                                                                                               |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                        | :ref:`get_constant<class_Control_method_get_constant>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|                                                                                                             |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`CursorShape<enum_Control_CursorShape>` | :ref:`get_cursor_shape<class_Control_method_get_cursor_shape>` **(** :ref:`Vector2<class_Vector2>` position=Vector2( 0, 0 ) **)** |const|                                                                                                                          |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                | :ref:`get_drag_data<class_Control_method_get_drag_data>` **(** :ref:`Vector2<class_Vector2>` position **)** |virtual|                                                                                                                                              |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                | :ref:`get_end<class_Control_method_get_end>` **(** **)** |const|                                                                                                                                                                                                   |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`NodePath<class_NodePath>`              | :ref:`get_focus_neighbour<class_Control_method_get_focus_neighbour>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|                                                                                                                            |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Control<class_Control>`                | :ref:`get_focus_owner<class_Control_method_get_focus_owner>` **(** **)** |const|                                                                                                                                                                                   |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Font<class_Font>`                      | :ref:`get_font<class_Control_method_get_font>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|                                                                                                                     |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Rect2<class_Rect2>`                    | :ref:`get_global_rect<class_Control_method_get_global_rect>` **(** **)** |const|                                                                                                                                                                                   |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Texture<class_Texture>`                | :ref:`get_icon<class_Control_method_get_icon>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|                                                                                                                     |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                    | :ref:`get_margin<class_Control_method_get_margin>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|                                                                                                                                              |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                | :ref:`get_minimum_size<class_Control_method_get_minimum_size>` **(** **)** |const|                                                                                                                                                                                 |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                | :ref:`get_parent_area_size<class_Control_method_get_parent_area_size>` **(** **)** |const|                                                                                                                                                                         |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Control<class_Control>`                | :ref:`get_parent_control<class_Control_method_get_parent_control>` **(** **)** |const|                                                                                                                                                                             |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Rect2<class_Rect2>`                    | :ref:`get_rect<class_Control_method_get_rect>` **(** **)** |const|                                                                                                                                                                                                 |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                    | :ref:`get_rotation<class_Control_method_get_rotation>` **(** **)** |const|                                                                                                                                                                                         |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`StyleBox<class_StyleBox>`              | :ref:`get_stylebox<class_Control_method_get_stylebox>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|                                                                                                             |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Font<class_Font>`                      | :ref:`get_theme_default_font<class_Control_method_get_theme_default_font>` **(** **)** |const|                                                                                                                                                                     |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                  | :ref:`get_tooltip<class_Control_method_get_tooltip>` **(** :ref:`Vector2<class_Vector2>` at_position=Vector2( 0, 0 ) **)** |const|                                                                                                                                 |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`grab_click_focus<class_Control_method_grab_click_focus>` **(** **)**                                                                                                                                                                                         |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`grab_focus<class_Control_method_grab_focus>` **(** **)**                                                                                                                                                                                                     |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_color<class_Control_method_has_color>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|                                                                                                                   |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_color_override<class_Control_method_has_color_override>` **(** :ref:`String<class_String>` name **)** |const|                                                                                                                                            |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_constant<class_Control_method_has_constant>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|                                                                                                             |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_constant_override<class_Control_method_has_constant_override>` **(** :ref:`String<class_String>` name **)** |const|                                                                                                                                      |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_focus<class_Control_method_has_focus>` **(** **)** |const|                                                                                                                                                                                               |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_font<class_Control_method_has_font>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|                                                                                                                     |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_font_override<class_Control_method_has_font_override>` **(** :ref:`String<class_String>` name **)** |const|                                                                                                                                              |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_icon<class_Control_method_has_icon>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|                                                                                                                     |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_icon_override<class_Control_method_has_icon_override>` **(** :ref:`String<class_String>` name **)** |const|                                                                                                                                              |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_point<class_Control_method_has_point>` **(** :ref:`Vector2<class_Vector2>` point **)** |virtual|                                                                                                                                                         |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_shader_override<class_Control_method_has_shader_override>` **(** :ref:`String<class_String>` name **)** |const|                                                                                                                                          |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_stylebox<class_Control_method_has_stylebox>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|                                                                                                             |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                      | :ref:`has_stylebox_override<class_Control_method_has_stylebox_override>` **(** :ref:`String<class_String>` name **)** |const|                                                                                                                                      |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`minimum_size_changed<class_Control_method_minimum_size_changed>` **(** **)**                                                                                                                                                                                 |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`release_focus<class_Control_method_release_focus>` **(** **)**                                                                                                                                                                                               |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_anchor<class_Control_method_set_anchor>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`float<class_float>` anchor, :ref:`bool<class_bool>` keep_margin=false, :ref:`bool<class_bool>` push_opposite_anchor=true **)**                      |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_anchor_and_margin<class_Control_method_set_anchor_and_margin>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`float<class_float>` anchor, :ref:`float<class_float>` offset, :ref:`bool<class_bool>` push_opposite_anchor=false **)**        |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_anchors_and_margins_preset<class_Control_method_set_anchors_and_margins_preset>` **(** :ref:`LayoutPreset<enum_Control_LayoutPreset>` preset, :ref:`LayoutPresetMode<enum_Control_LayoutPresetMode>` resize_mode=0, :ref:`int<class_int>` margin=0 **)** |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>` **(** :ref:`LayoutPreset<enum_Control_LayoutPreset>` preset, :ref:`bool<class_bool>` keep_margins=false **)**                                                                                   |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_begin<class_Control_method_set_begin>` **(** :ref:`Vector2<class_Vector2>` position **)**                                                                                                                                                                |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_drag_forwarding<class_Control_method_set_drag_forwarding>` **(** :ref:`Control<class_Control>` target **)**                                                                                                                                              |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_drag_preview<class_Control_method_set_drag_preview>` **(** :ref:`Control<class_Control>` control **)**                                                                                                                                                   |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_end<class_Control_method_set_end>` **(** :ref:`Vector2<class_Vector2>` position **)**                                                                                                                                                                    |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_focus_neighbour<class_Control_method_set_focus_neighbour>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`NodePath<class_NodePath>` neighbour **)**                                                                                         |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_global_position<class_Control_method_set_global_position>` **(** :ref:`Vector2<class_Vector2>` position, :ref:`bool<class_bool>` keep_margins=false **)**                                                                                                |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_margin<class_Control_method_set_margin>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`float<class_float>` offset **)**                                                                                                                    |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_margins_preset<class_Control_method_set_margins_preset>` **(** :ref:`LayoutPreset<enum_Control_LayoutPreset>` preset, :ref:`LayoutPresetMode<enum_Control_LayoutPresetMode>` resize_mode=0, :ref:`int<class_int>` margin=0 **)**                         |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_position<class_Control_method_set_position>` **(** :ref:`Vector2<class_Vector2>` position, :ref:`bool<class_bool>` keep_margins=false **)**                                                                                                              |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_rotation<class_Control_method_set_rotation>` **(** :ref:`float<class_float>` radians **)**                                                                                                                                                               |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`set_size<class_Control_method_set_size>` **(** :ref:`Vector2<class_Vector2>` size, :ref:`bool<class_bool>` keep_margins=false **)**                                                                                                                          |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`show_modal<class_Control_method_show_modal>` **(** :ref:`bool<class_bool>` exclusive=false **)**                                                                                                                                                             |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                         | :ref:`warp_mouse<class_Control_method_warp_mouse>` **(** :ref:`Vector2<class_Vector2>` to_position **)**                                                                                                                                                           |
+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_Control_signal_focus_entered:

- **focus_entered** **(** **)**

Se emite cuando el nodo obtiene el foco del teclado.

----

.. _class_Control_signal_focus_exited:

- **focus_exited** **(** **)**

Emitido cuando el nodo pierde el foco del teclado.

----

.. _class_Control_signal_gui_input:

- **gui_input** **(** :ref:`InputEvent<class_InputEvent>` event **)**

Emitido cuando el nodo recibe un :ref:`InputEvent<class_InputEvent>`.

----

.. _class_Control_signal_minimum_size_changed:

- **minimum_size_changed** **(** **)**

Emitido cuando el tamaño mínimo del nodo cambia.

----

.. _class_Control_signal_modal_closed:

- **modal_closed** **(** **)**

Emitted when a modal ``Control`` is closed. See :ref:`show_modal<class_Control_method_show_modal>`.

----

.. _class_Control_signal_mouse_entered:

- **mouse_entered** **(** **)**

Emitted when the mouse enters the control's ``Rect`` area, provided its :ref:`mouse_filter<class_Control_property_mouse_filter>` lets the event reach it.

\ **Note:** :ref:`mouse_entered<class_Control_signal_mouse_entered>` will not be emitted if the mouse enters a child ``Control`` node before entering the parent's ``Rect`` area, at least until the mouse is moved to reach the parent's ``Rect`` area.

----

.. _class_Control_signal_mouse_exited:

- **mouse_exited** **(** **)**

Emitted when the mouse leaves the control's ``Rect`` area, provided its :ref:`mouse_filter<class_Control_property_mouse_filter>` lets the event reach it.

\ **Note:** :ref:`mouse_exited<class_Control_signal_mouse_exited>` will be emitted if the mouse enters a child ``Control`` node, even if the mouse cursor is still inside the parent's ``Rect`` area.

----

.. _class_Control_signal_resized:

- **resized** **(** **)**

Emitido cuando el control cambia de tamaño.

----

.. _class_Control_signal_size_flags_changed:

- **size_flags_changed** **(** **)**

Emitido cuando una de las flags de tamaño cambia. Ver :ref:`size_flags_horizontal<class_Control_property_size_flags_horizontal>` y :ref:`size_flags_vertical<class_Control_property_size_flags_vertical>`.

Enumeraciones
--------------------------

.. _enum_Control_FocusMode:

.. _class_Control_constant_FOCUS_NONE:

.. _class_Control_constant_FOCUS_CLICK:

.. _class_Control_constant_FOCUS_ALL:

enum **FocusMode**:

- **FOCUS_NONE** = **0** --- El nodo no puede captar el foco. Usar con :ref:`focus_mode<class_Control_property_focus_mode>`.

- **FOCUS_CLICK** = **1** --- El nodo sólo puede captar el foco en los clics del ratón. Usar con :ref:`focus_mode<class_Control_property_focus_mode>`.

- **FOCUS_ALL** = **2** --- El nodo sólo puede captar el foco en los clics del ratón. Usar con :ref:`focus_mode<class_Control_property_focus_mode>`.

----

.. _enum_Control_CursorShape:

.. _class_Control_constant_CURSOR_ARROW:

.. _class_Control_constant_CURSOR_IBEAM:

.. _class_Control_constant_CURSOR_POINTING_HAND:

.. _class_Control_constant_CURSOR_CROSS:

.. _class_Control_constant_CURSOR_WAIT:

.. _class_Control_constant_CURSOR_BUSY:

.. _class_Control_constant_CURSOR_DRAG:

.. _class_Control_constant_CURSOR_CAN_DROP:

.. _class_Control_constant_CURSOR_FORBIDDEN:

.. _class_Control_constant_CURSOR_VSIZE:

.. _class_Control_constant_CURSOR_HSIZE:

.. _class_Control_constant_CURSOR_BDIAGSIZE:

.. _class_Control_constant_CURSOR_FDIAGSIZE:

.. _class_Control_constant_CURSOR_MOVE:

.. _class_Control_constant_CURSOR_VSPLIT:

.. _class_Control_constant_CURSOR_HSPLIT:

.. _class_Control_constant_CURSOR_HELP:

enum **CursorShape**:

- **CURSOR_ARROW** = **0** --- Mostrar el cursor del ratón de la flecha del sistema cuando el usuario pasa por encima del nodo. Usar con :ref:`mouse_default_cursor_shape<class_Control_property_mouse_default_cursor_shape>`.

- **CURSOR_IBEAM** = **1** --- Muestra el cursor del ratón del sistema I-beam cuando el usuario pasa por encima del nodo. El puntero del I-beam tiene una forma similar a la de la "I". Le dice al usuario que puede resaltar o insertar texto.

- **CURSOR_POINTING_HAND** = **2** --- Muestra el cursor del ratón de la mano del sistema cuando el usuario pasa por encima del nodo.

- **CURSOR_CROSS** = **3** --- Muestra el cursor cruzado del ratón del sistema cuando el usuario pasa por encima del nodo.

- **CURSOR_WAIT** = **4** --- Muestra el cursor del ratón de espera del sistema, a menudo un reloj de arena, cuando el usuario pasa por encima del nodo.

- **CURSOR_BUSY** = **5** --- Muestra el cursor del ratón ocupado del sistema cuando el usuario pasa por encima del nodo. A menudo un reloj de arena.

- **CURSOR_DRAG** = **6** --- Muestra el cursor del ratón de arrastre del sistema, a menudo un puño cerrado o un símbolo de cruz, cuando el usuario pasa por encima del nodo. Le dice al usuario que está arrastrando un elemento, como un nodo en el Dock de la escena.

- **CURSOR_CAN_DROP** = **7** --- Muestra el cursor del ratón del sistema cuando el usuario pasa por encima del nodo. Puede ser una mano abierta. Le dice al usuario que puede soltar un elemento que está agarrando, como un nodo en el Dock de la escena.

- **CURSOR_FORBIDDEN** = **8** --- Muestra el cursor del ratón prohibido del sistema cuando el usuario pasa por encima del nodo. A menudo un círculo cruzado.

- **CURSOR_VSIZE** = **9** --- Muestra el cursor del ratón de tamaño vertical del sistema cuando el usuario pasa por encima del nodo. Una flecha vertical de doble punta. Le dice al usuario que puede cambiar el tamaño de la ventana o del panel verticalmente.

- **CURSOR_HSIZE** = **10** --- Muestra el cursor del ratón de tamaño horizontal del sistema cuando el usuario pasa por encima del nodo. Una flecha horizontal de doble punta. Le dice al usuario que puede cambiar el tamaño de la ventana o del panel horizontalmente.

- **CURSOR_BDIAGSIZE** = **11** --- Muestra el cursor de cambio de tamaño de la ventana del sistema del ratón cuando el usuario pasa por encima del nodo. El cursor es una flecha de doble punta que va de abajo a la izquierda a arriba a la derecha. Le dice al usuario que puede cambiar el tamaño de la ventana o del panel tanto horizontal como verticalmente.

- **CURSOR_FDIAGSIZE** = **12** --- Muestra el cursor del cambio de tamaño de la ventana del sistema cuando el usuario pasa por encima del nodo. El cursor es una flecha de doble punta que va de arriba a la izquierda a abajo a la derecha, lo opuesto a :ref:`CURSOR_BDIAGSIZE<class_Control_constant_CURSOR_BDIAGSIZE>`. Le dice al usuario que puede cambiar el tamaño de la ventana o del panel tanto horizontal como verticalmente.

- **CURSOR_MOVE** = **13** --- Muestra el cursor del ratón del sistema cuando el usuario pasa por encima del nodo. Muestra 2 flechas de doble cabeza en un ángulo de 90 grados. Le dice al usuario que puede mover libremente un elemento de la interfaz de usuario.

- **CURSOR_VSPLIT** = **14** --- Muestra el cursor del ratón dividido verticalmente del sistema cuando el usuario pasa por encima del nodo. En Windows, es lo mismo que :ref:`CURSOR_VSIZE<class_Control_constant_CURSOR_VSIZE>`.

- **CURSOR_HSPLIT** = **15** --- Muestra el cursor del ratón dividido horizontalmente del sistema cuando el usuario pasa por encima del nodo. En Windows, es lo mismo que :ref:`CURSOR_HSIZE<class_Control_constant_CURSOR_HSIZE>`.

- **CURSOR_HELP** = **16** --- Mostrar el cursor del ratón de ayuda del sistema cuando el usuario pasa por encima del nodo, un signo de interrogación.

----

.. _enum_Control_LayoutPreset:

.. _class_Control_constant_PRESET_TOP_LEFT:

.. _class_Control_constant_PRESET_TOP_RIGHT:

.. _class_Control_constant_PRESET_BOTTOM_LEFT:

.. _class_Control_constant_PRESET_BOTTOM_RIGHT:

.. _class_Control_constant_PRESET_CENTER_LEFT:

.. _class_Control_constant_PRESET_CENTER_TOP:

.. _class_Control_constant_PRESET_CENTER_RIGHT:

.. _class_Control_constant_PRESET_CENTER_BOTTOM:

.. _class_Control_constant_PRESET_CENTER:

.. _class_Control_constant_PRESET_LEFT_WIDE:

.. _class_Control_constant_PRESET_TOP_WIDE:

.. _class_Control_constant_PRESET_RIGHT_WIDE:

.. _class_Control_constant_PRESET_BOTTOM_WIDE:

.. _class_Control_constant_PRESET_VCENTER_WIDE:

.. _class_Control_constant_PRESET_HCENTER_WIDE:

.. _class_Control_constant_PRESET_WIDE:

enum **LayoutPreset**:

- **PRESET_TOP_LEFT** = **0** --- Pone las cuatro anclas en la parte superior izquierda de los límites del control parental. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_TOP_RIGHT** = **1** --- Pone las cuatro anclas en la parte superior derecha de los límites del control parental. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_BOTTOM_LEFT** = **2** --- Pone las cuatro anclas en la parte inferior izquierda de los límites del control parental. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_BOTTOM_RIGHT** = **3** --- Pone las cuatro anclas en la parte inferior derecha de los límites del control parental. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_CENTER_LEFT** = **4** --- Pone las 4 anclas en el centro del borde izquierdo de los límites del control parental. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_CENTER_TOP** = **5** --- Pone las 4 anclas en el centro del borde superior de los límites del control parental. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_CENTER_RIGHT** = **6** --- Pone las 4 anclas en el centro del borde derecho de los límites del control parental. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_CENTER_BOTTOM** = **7** --- Pone las 4 anclas en el centro del borde inferior de los límites del control parental. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_CENTER** = **8** --- Pone las cuatro anclas en el centro de los límites del control parental. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_LEFT_WIDE** = **9** --- Pone las 4 anclas en el borde izquierdo del control parental. El margen izquierdo se convierte en relativo al borde izquierdo y el margen superior en relativo a la esquina superior izquierda del nodo padre. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_TOP_WIDE** = **10** --- Pone las 4 anclas en el borde superior del control parental. El margen izquierdo se convierte en relativo a la esquina superior izquierda, el margen superior relativo al borde superior, y el margen derecho relativo a la esquina superior derecha del nodo padre. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_RIGHT_WIDE** = **11** --- Pone las 4 anclas en el borde derecho del control parental. El margen derecho se convierte en relativo al borde derecho y el margen superior en relativo a la esquina superior derecha del nodo padre. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_BOTTOM_WIDE** = **12** --- Pone las 4 anclas en el borde inferior del control parental. El margen izquierdo se convierte en relativo a la esquina inferior izquierda, el margen inferior relativo al borde inferior, y el margen derecho relativo a la esquina inferior derecha del nodo padre. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_VCENTER_WIDE** = **13** --- Pone las 4 anclas en una línea vertical que corta el control parental por la mitad. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_HCENTER_WIDE** = **14** --- Pone las 4 anclas en una línea horizontal que corta el control parental por la mitad. Usar con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **PRESET_WIDE** = **15** --- Pone las 4 anclas en las respectivas esquinas del control parental. Ponga los 4 márgenes a 0 después de aplicar este preajuste y el ``Control`` se ajustará a su control de padres. Esto equivale a la opción de diseño "Full Rect" del editor. Utilícela con :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

----

.. _enum_Control_LayoutPresetMode:

.. _class_Control_constant_PRESET_MODE_MINSIZE:

.. _class_Control_constant_PRESET_MODE_KEEP_WIDTH:

.. _class_Control_constant_PRESET_MODE_KEEP_HEIGHT:

.. _class_Control_constant_PRESET_MODE_KEEP_SIZE:

enum **LayoutPresetMode**:

- **PRESET_MODE_MINSIZE** = **0** --- El control será redimensionado a su tamaño mínimo.

- **PRESET_MODE_KEEP_WIDTH** = **1** --- El ancho del control no cambiará.

- **PRESET_MODE_KEEP_HEIGHT** = **2** --- La altura del control no cambiará.

- **PRESET_MODE_KEEP_SIZE** = **3** --- El tamaño del control no cambiará.

----

.. _enum_Control_SizeFlags:

.. _class_Control_constant_SIZE_FILL:

.. _class_Control_constant_SIZE_EXPAND:

.. _class_Control_constant_SIZE_EXPAND_FILL:

.. _class_Control_constant_SIZE_SHRINK_CENTER:

.. _class_Control_constant_SIZE_SHRINK_END:

enum **SizeFlags**:

- **SIZE_FILL** = **1** --- Le dice al padre :ref:`Container<class_Container>` que expanda los límites de este nodo para llenar todo el espacio disponible sin empujar ningún otro nodo. Usar con :ref:`size_flags_horizontal<class_Control_property_size_flags_horizontal>` y :ref:`size_flags_vertical<class_Control_property_size_flags_vertical>`.

- **SIZE_EXPAND** = **2** --- Le dice al padre :ref:`Container<class_Container>` que deje que este nodo tome todo el espacio disponible en el eje que marque. Si varios nodos vecinos están configurados para expandirse, compartirán el espacio basado en su relación de estiramiento. Ver :ref:`size_flags_stretch_ratio<class_Control_property_size_flags_stretch_ratio>`. Utilízalo con :ref:`size_flags_horizontal<class_Control_property_size_flags_horizontal>` y :ref:`size_flags_vertical<class_Control_property_size_flags_vertical>`.

- **SIZE_EXPAND_FILL** = **3** --- Establece las flags de tamaño del nodo para que se llenen y se expandan. Vea las 2 constantes anteriores para más información.

- **SIZE_SHRINK_CENTER** = **4** --- Le dice al padre :ref:`Container<class_Container>` que centre el nodo en sí mismo. Centra el control basado en su caja delimitadora, por lo que no funciona con las flags de tamaño de relleno o expansión. Úsalo con :ref:`size_flags_horizontal<class_Control_property_size_flags_horizontal>` y :ref:`size_flags_vertical<class_Control_property_size_flags_vertical>`.

- **SIZE_SHRINK_END** = **8** --- Le dice al padre :ref:`Container<class_Container>` que alinee el nodo con su extremo, ya sea el inferior o el derecho. No funciona con las flags de tamaño de relleno o expansión. Úsalo con :ref:`size_flags_horizontal<class_Control_property_size_flags_horizontal>` y :ref:`size_flags_vertical<class_Control_property_size_flags_vertical>`.

----

.. _enum_Control_MouseFilter:

.. _class_Control_constant_MOUSE_FILTER_STOP:

.. _class_Control_constant_MOUSE_FILTER_PASS:

.. _class_Control_constant_MOUSE_FILTER_IGNORE:

enum **MouseFilter**:

- **MOUSE_FILTER_STOP** = **0** --- El control recibirá los eventos de entrada del botón del ratón a través del :ref:`_gui_input<class_Control_method__gui_input>` si se hace clic en él. Y el control recibirá las señales :ref:`mouse_entered<class_Control_signal_mouse_entered>` y :ref:`mouse_exited<class_Control_signal_mouse_exited>`. Estos eventos se marcan automáticamente como manejados, y no se propagarán más a otros controles. Esto también resulta en el bloqueo de señales en otros controles.

- **MOUSE_FILTER_PASS** = **1** --- El control recibirá los eventos de entrada del botón del ratón a través del :ref:`_gui_input<class_Control_method__gui_input>` si se hace clic en él. Y el control recibirá las señales :ref:`mouse_entered<class_Control_signal_mouse_entered>` y :ref:`mouse_exited<class_Control_signal_mouse_exited>`. Si este control no maneja el evento, se considerará el control padre (si lo hay), y así sucesivamente hasta que no haya más control padre para manejarlo potencialmente. Esto también permite que las señales se disparen en otros controles. Incluso si ningún control lo maneja, el evento será manejado automáticamente, por lo que las entradas no manejadas no se dispararán.

- **MOUSE_FILTER_IGNORE** = **2** --- El control no recibirá eventos de entrada del botón del ratón a través del :ref:`_gui_input<class_Control_method__gui_input>`. El control tampoco recibirá las señales :ref:`mouse_entered<class_Control_signal_mouse_entered>` ni :ref:`mouse_exited<class_Control_signal_mouse_exited>`. Esto no bloqueará a otros controles para que no reciban estos eventos o para que no disparen las señales. Los eventos ignorados no se manejarán automáticamente.

----

.. _enum_Control_GrowDirection:

.. _class_Control_constant_GROW_DIRECTION_BEGIN:

.. _class_Control_constant_GROW_DIRECTION_END:

.. _class_Control_constant_GROW_DIRECTION_BOTH:

enum **GrowDirection**:

- **GROW_DIRECTION_BEGIN** = **0** --- El control crecerá hacia la izquierda o hacia arriba para compensar si su tamaño mínimo se cambia para que sea mayor que su tamaño actual en el eje respectivo.

- **GROW_DIRECTION_END** = **1** --- El control crecerá hacia la derecha o hacia abajo para compensar si su tamaño mínimo se cambia para que sea mayor que su tamaño actual en el eje respectivo.

- **GROW_DIRECTION_BOTH** = **2** --- El control crecerá en ambas direcciones por igual para compensar si su tamaño mínimo se cambia para que sea mayor que su tamaño actual.

----

.. _enum_Control_Anchor:

.. _class_Control_constant_ANCHOR_BEGIN:

.. _class_Control_constant_ANCHOR_END:

enum **Anchor**:

- **ANCHOR_BEGIN** = **0** --- Encaja uno de los 4 lados del ancla en el origen del nodo ``Rect``, en la parte superior izquierda. Úsalo con una de las variables miembro ``anchor_*``, como :ref:`anchor_left<class_Control_property_anchor_left>`. Para cambiar las 4 anclas a la vez, usa :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

- **ANCHOR_END** = **1** --- Pone uno de los 4 lados del ancla al final del nodo ``Rect``, en la parte inferior derecha. Úsalo con una de las variables miembros ``anchor_*``, como :ref:`anchor_left<class_Control_property_anchor_left>`. Para cambiar las 4 anclas a la vez, usa :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>`.

Constantes
--------------------

.. _class_Control_constant_NOTIFICATION_RESIZED:

.. _class_Control_constant_NOTIFICATION_MOUSE_ENTER:

.. _class_Control_constant_NOTIFICATION_MOUSE_EXIT:

.. _class_Control_constant_NOTIFICATION_FOCUS_ENTER:

.. _class_Control_constant_NOTIFICATION_FOCUS_EXIT:

.. _class_Control_constant_NOTIFICATION_THEME_CHANGED:

.. _class_Control_constant_NOTIFICATION_MODAL_CLOSE:

.. _class_Control_constant_NOTIFICATION_SCROLL_BEGIN:

.. _class_Control_constant_NOTIFICATION_SCROLL_END:

- **NOTIFICATION_RESIZED** = **40** --- Enviado cuando el nodo cambia de tamaño. Usa :ref:`rect_size<class_Control_property_rect_size>` para obtener el nuevo tamaño.

- **NOTIFICATION_MOUSE_ENTER** = **41** --- Se envía cuando el puntero del ratón entra en el nodo.

- **NOTIFICATION_MOUSE_EXIT** = **42** --- Se envía cuando el puntero del ratón sale del nodo.

- **NOTIFICATION_FOCUS_ENTER** = **43** --- Enviado cuando el nodo agarra el foco.

- **NOTIFICATION_FOCUS_EXIT** = **44** --- Enviado cuando el nodo pierde el enfoque.

- **NOTIFICATION_THEME_CHANGED** = **45** --- Sent when the node's :ref:`theme<class_Control_property_theme>` changes, right before Godot redraws the control. Happens when you call one of the ``add_*_override`` methods.

- **NOTIFICATION_MODAL_CLOSE** = **46** --- Sent when an open modal dialog closes. See :ref:`show_modal<class_Control_method_show_modal>`.

- **NOTIFICATION_SCROLL_BEGIN** = **47** --- Enviado cuando este nodo está dentro de un :ref:`ScrollContainer<class_ScrollContainer>` que ha comenzado a ser desplazado.

- **NOTIFICATION_SCROLL_END** = **48** --- Enviado cuando este nodo está dentro de un :ref:`ScrollContainer<class_ScrollContainer>` que ha dejado de ser desplazado.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Control_property_anchor_bottom:

- :ref:`float<class_float>` **anchor_bottom**

+-----------+--------------+
| *Default* | ``0.0``      |
+-----------+--------------+
| *Getter*  | get_anchor() |
+-----------+--------------+

Ancla el borde inferior del nodo al origen, el centro o el final de su control parental. Cambia la forma en que el margen inferior se actualiza cuando el nodo se mueve o cambia de tamaño. Puedes usar una de las constantes :ref:`Anchor<enum_Control_Anchor>` por conveniencia.

----

.. _class_Control_property_anchor_left:

- :ref:`float<class_float>` **anchor_left**

+-----------+--------------+
| *Default* | ``0.0``      |
+-----------+--------------+
| *Getter*  | get_anchor() |
+-----------+--------------+

Ancla el borde izquierdo del nodo al origen, el centro o el final de su control parental. Cambia la forma en que el margen izquierdo se actualiza cuando el nodo se mueve o cambia de tamaño. Puedes usar una de las constantes :ref:`Anchor<enum_Control_Anchor>` por conveniencia.

----

.. _class_Control_property_anchor_right:

- :ref:`float<class_float>` **anchor_right**

+-----------+--------------+
| *Default* | ``0.0``      |
+-----------+--------------+
| *Getter*  | get_anchor() |
+-----------+--------------+

Ancla el borde derecho del nodo al origen, el centro o el final de su control parental. Cambia la forma en que el margen derecho se actualiza cuando el nodo se mueve o cambia de tamaño. Puedes usar una de las constantes :ref:`Anchor<enum_Control_Anchor>` por conveniencia.

----

.. _class_Control_property_anchor_top:

- :ref:`float<class_float>` **anchor_top**

+-----------+--------------+
| *Default* | ``0.0``      |
+-----------+--------------+
| *Getter*  | get_anchor() |
+-----------+--------------+

Anchors the top edge of the node to the origin, the center or the end of its parent control. It changes how the top margin updates when the node moves or changes size. You can use one of the :ref:`Anchor<enum_Control_Anchor>` constants for convenience.

----

.. _class_Control_property_focus_mode:

- :ref:`FocusMode<enum_Control_FocusMode>` **focus_mode**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_focus_mode(value) |
+-----------+-----------------------+
| *Getter*  | get_focus_mode()      |
+-----------+-----------------------+

El modo de acceso de enfoque para el control (Ninguno, Clic o Todos). Sólo un Control puede ser enfocado al mismo tiempo, y recibirá señales del teclado.

----

.. _class_Control_property_focus_neighbour_bottom:

- :ref:`NodePath<class_NodePath>` **focus_neighbour_bottom**

+-----------+----------------------------+
| *Default* | ``NodePath("")``           |
+-----------+----------------------------+
| *Setter*  | set_focus_neighbour(value) |
+-----------+----------------------------+
| *Getter*  | get_focus_neighbour()      |
+-----------+----------------------------+

Le dice a Godot a qué nodo debe darle enfoque de teclado si el usuario presiona la flecha hacia abajo en el teclado o hacia abajo en un gamepad por defecto. Puede cambiar la tecla editando la acción de entrada ``ui_down``. El nodo debe ser un ``Control``. Si no se establece esta propiedad, Godot dará el foco al ``Control`` más cercano a la parte inferior de éste.

----

.. _class_Control_property_focus_neighbour_left:

- :ref:`NodePath<class_NodePath>` **focus_neighbour_left**

+-----------+----------------------------+
| *Default* | ``NodePath("")``           |
+-----------+----------------------------+
| *Setter*  | set_focus_neighbour(value) |
+-----------+----------------------------+
| *Getter*  | get_focus_neighbour()      |
+-----------+----------------------------+

Le dice a Godot a qué nodo debe dar enfoque de teclado si el usuario presiona la flecha izquierda en el teclado o la izquierda en un gamepad por defecto. Puede cambiar la tecla editando la acción de entrada ``ui_left``. El nodo debe ser un ``Control``. Si no se establece esta propiedad, Godot dará el foco al ``Control`` más cercano a la izquierda de éste.

----

.. _class_Control_property_focus_neighbour_right:

- :ref:`NodePath<class_NodePath>` **focus_neighbour_right**

+-----------+----------------------------+
| *Default* | ``NodePath("")``           |
+-----------+----------------------------+
| *Setter*  | set_focus_neighbour(value) |
+-----------+----------------------------+
| *Getter*  | get_focus_neighbour()      |
+-----------+----------------------------+

Tells Godot which node it should give keyboard focus to if the user presses the right arrow on the keyboard or right on a gamepad by default. You can change the key by editing the ``ui_right`` input action. The node must be a ``Control``. If this property is not set, Godot will give focus to the closest ``Control`` to the bottom of this one.

----

.. _class_Control_property_focus_neighbour_top:

- :ref:`NodePath<class_NodePath>` **focus_neighbour_top**

+-----------+----------------------------+
| *Default* | ``NodePath("")``           |
+-----------+----------------------------+
| *Setter*  | set_focus_neighbour(value) |
+-----------+----------------------------+
| *Getter*  | get_focus_neighbour()      |
+-----------+----------------------------+

Le dice a Godot a qué nodo debe darle enfoque de teclado si el usuario presiona la flecha superior del teclado o el arriba de un gamepad por defecto. Puede cambiar la tecla editando la acción de entrada ``ui_top``. El nodo debe ser un ``Control``. Si no se establece esta propiedad, Godot dará el foco al ``Control`` más cercano a la parte inferior de éste.

----

.. _class_Control_property_focus_next:

- :ref:`NodePath<class_NodePath>` **focus_next**

+-----------+-----------------------+
| *Default* | ``NodePath("")``      |
+-----------+-----------------------+
| *Setter*  | set_focus_next(value) |
+-----------+-----------------------+
| *Getter*  | get_focus_next()      |
+-----------+-----------------------+

Tells Godot which node it should give keyboard focus to if the user presses Tab on a keyboard by default. You can change the key by editing the ``ui_focus_next`` input action.

If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree.

----

.. _class_Control_property_focus_previous:

- :ref:`NodePath<class_NodePath>` **focus_previous**

+-----------+---------------------------+
| *Default* | ``NodePath("")``          |
+-----------+---------------------------+
| *Setter*  | set_focus_previous(value) |
+-----------+---------------------------+
| *Getter*  | get_focus_previous()      |
+-----------+---------------------------+

Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab on a keyboard by default. You can change the key by editing the ``ui_focus_prev`` input action.

If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree.

----

.. _class_Control_property_grow_horizontal:

- :ref:`GrowDirection<enum_Control_GrowDirection>` **grow_horizontal**

+-----------+-----------------------------+
| *Default* | ``1``                       |
+-----------+-----------------------------+
| *Setter*  | set_h_grow_direction(value) |
+-----------+-----------------------------+
| *Getter*  | get_h_grow_direction()      |
+-----------+-----------------------------+

Controla la dirección en el eje horizontal en la que el control debe crecer si su tamaño mínimo horizontal se cambia para que sea mayor que su tamaño actual, ya que el control siempre tiene que ser al menos del tamaño mínimo.

----

.. _class_Control_property_grow_vertical:

- :ref:`GrowDirection<enum_Control_GrowDirection>` **grow_vertical**

+-----------+-----------------------------+
| *Default* | ``1``                       |
+-----------+-----------------------------+
| *Setter*  | set_v_grow_direction(value) |
+-----------+-----------------------------+
| *Getter*  | get_v_grow_direction()      |
+-----------+-----------------------------+

Controla la dirección en el eje vertical en la que el control debe crecer si su tamaño mínimo vertical se cambia para que sea mayor que su tamaño actual, ya que el control siempre tiene que ser al menos del tamaño mínimo.

----

.. _class_Control_property_hint_tooltip:

- :ref:`String<class_String>` **hint_tooltip**

+-----------+--------------------+
| *Default* | ``""``             |
+-----------+--------------------+
| *Setter*  | set_tooltip(value) |
+-----------+--------------------+

Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments, provided that the :ref:`mouse_filter<class_Control_property_mouse_filter>` property is not :ref:`MOUSE_FILTER_IGNORE<class_Control_constant_MOUSE_FILTER_IGNORE>`. You can change the time required for the tooltip to appear with ``gui/timers/tooltip_delay_sec`` option in Project Settings.

The tooltip popup will use either a default implementation, or a custom one that you can provide by overriding :ref:`_make_custom_tooltip<class_Control_method__make_custom_tooltip>`. The default tooltip includes a :ref:`PopupPanel<class_PopupPanel>` and :ref:`Label<class_Label>` whose theme properties can be customized using :ref:`Theme<class_Theme>` methods with the ``"TooltipPanel"`` and ``"TooltipLabel"`` respectively. For example:

::

    var style_box = StyleBoxFlat.new()
    style_box.set_bg_color(Color(1, 1, 0))
    style_box.set_border_width_all(2)
    # We assume here that the `theme` property has been assigned a custom Theme beforehand.
    theme.set_stylebox("panel", "TooltipPanel", style_box)
    theme.set_color("font_color", "TooltipLabel", Color(0, 1, 1))

----

.. _class_Control_property_input_pass_on_modal_close_click:

- :ref:`bool<class_bool>` **input_pass_on_modal_close_click**

+-----------+--------------------------------------+
| *Default* | ``true``                             |
+-----------+--------------------------------------+
| *Setter*  | set_pass_on_modal_close_click(value) |
+-----------+--------------------------------------+
| *Getter*  | get_pass_on_modal_close_click()      |
+-----------+--------------------------------------+

Enables whether input should propagate when you close the control as modal.

If ``false``, stops event handling at the viewport input event handling. The viewport first hides the modal and after marks the input as handled.

----

.. _class_Control_property_margin_bottom:

- :ref:`float<class_float>` **margin_bottom**

+-----------+-------------------+
| *Default* | ``0.0``           |
+-----------+-------------------+
| *Setter*  | set_margin(value) |
+-----------+-------------------+
| *Getter*  | get_margin()      |
+-----------+-------------------+

Distancia entre el borde inferior del nodo y su control padre, basado en :ref:`anchor_bottom<class_Control_property_anchor_bottom>`.

Los márgenes suelen estar controlados por uno o varios nodos padre :ref:`Container<class_Container>`, por lo que no debe modificarlos manualmente si su nodo es hijo directo de un :ref:`Container<class_Container>`. Los márgenes se actualizan automáticamente cuando mueve o cambia el tamaño del nodo.

----

.. _class_Control_property_margin_left:

- :ref:`float<class_float>` **margin_left**

+-----------+-------------------+
| *Default* | ``0.0``           |
+-----------+-------------------+
| *Setter*  | set_margin(value) |
+-----------+-------------------+
| *Getter*  | get_margin()      |
+-----------+-------------------+

Distancia entre el borde izquierdo del nodo y su control padre, basado en :ref:`anchor_left<class_Control_property_anchor_left>`.

Los márgenes suelen estar controlados por uno o varios nodos padre :ref:`Container<class_Container>`, por lo que no debe modificarlos manualmente si su nodo es hijo directo de un :ref:`Container<class_Container>`. Los márgenes se actualizan automáticamente cuando mueve o cambia el tamaño del nodo.

----

.. _class_Control_property_margin_right:

- :ref:`float<class_float>` **margin_right**

+-----------+-------------------+
| *Default* | ``0.0``           |
+-----------+-------------------+
| *Setter*  | set_margin(value) |
+-----------+-------------------+
| *Getter*  | get_margin()      |
+-----------+-------------------+

Distancia entre el borde derecho del nodo y su control padre, basado en :ref:`anchor_right<class_Control_property_anchor_right>`.

Los márgenes suelen estar controlados por uno o varios nodos padre :ref:`Container<class_Container>`, por lo que no debe modificarlos manualmente si su nodo es hijo directo de un :ref:`Container<class_Container>`. Los márgenes se actualizan automáticamente cuando mueve o cambia el tamaño del nodo.

----

.. _class_Control_property_margin_top:

- :ref:`float<class_float>` **margin_top**

+-----------+-------------------+
| *Default* | ``0.0``           |
+-----------+-------------------+
| *Setter*  | set_margin(value) |
+-----------+-------------------+
| *Getter*  | get_margin()      |
+-----------+-------------------+

Distancia entre el borde superior del nodo y su control padre, basado en :ref:`anchor_top<class_Control_property_anchor_top>`.

Los márgenes suelen estar controlados por uno o varios nodos padre :ref:`Container<class_Container>`, por lo que no debe modificarlos manualmente si su nodo es hijo directo de un :ref:`Container<class_Container>`. Los márgenes se actualizan automáticamente cuando mueve o cambia el tamaño del nodo.

----

.. _class_Control_property_mouse_default_cursor_shape:

- :ref:`CursorShape<enum_Control_CursorShape>` **mouse_default_cursor_shape**

+-----------+---------------------------------+
| *Default* | ``0``                           |
+-----------+---------------------------------+
| *Setter*  | set_default_cursor_shape(value) |
+-----------+---------------------------------+
| *Getter*  | get_default_cursor_shape()      |
+-----------+---------------------------------+

La forma del cursor por defecto para este control. Útil para los plugins de Godot y las aplicaciones o juegos que utilizan los cursores del ratón del sistema.

\ **Nota:** En Linux, las formas pueden variar dependiendo del tema del cursor del sistema.

----

.. _class_Control_property_mouse_filter:

- :ref:`MouseFilter<enum_Control_MouseFilter>` **mouse_filter**

+-----------+-------------------------+
| *Default* | ``0``                   |
+-----------+-------------------------+
| *Setter*  | set_mouse_filter(value) |
+-----------+-------------------------+
| *Getter*  | get_mouse_filter()      |
+-----------+-------------------------+

Controla si el control será capaz de recibir eventos de entrada del botón del ratón a través del :ref:`_gui_input<class_Control_method__gui_input>` y cómo estos eventos deben ser manejados. También controla si el control puede recibir las señales :ref:`mouse_entered<class_Control_signal_mouse_entered>`, y :ref:`mouse_exited<class_Control_signal_mouse_exited>`. Mira las constantes para aprender lo que hace cada una.

----

.. _class_Control_property_rect_clip_content:

- :ref:`bool<class_bool>` **rect_clip_content**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_clip_contents(value) |
+-----------+--------------------------+
| *Getter*  | is_clipping_contents()   |
+-----------+--------------------------+

Permite si la representación de los hijos basados en :ref:`CanvasItem<class_CanvasItem>` debe ser recortada al rectángulo de este control. Si ``true``, no se renderizarán las partes de un hijo que estarían visiblemente fuera del rectángulo de este control.

----

.. _class_Control_property_rect_global_position:

- :ref:`Vector2<class_Vector2>` **rect_global_position**

+----------+-----------------------+
| *Getter* | get_global_position() |
+----------+-----------------------+

La posición global del nodo, en relación con el mundo (normalmente en la esquina superior izquierda de la ventana).

----

.. _class_Control_property_rect_min_size:

- :ref:`Vector2<class_Vector2>` **rect_min_size**

+-----------+--------------------------------+
| *Default* | ``Vector2( 0, 0 )``            |
+-----------+--------------------------------+
| *Setter*  | set_custom_minimum_size(value) |
+-----------+--------------------------------+
| *Getter*  | get_custom_minimum_size()      |
+-----------+--------------------------------+

El tamaño mínimo del rectángulo delimitador del nodo. Si lo fijas en un valor mayor que (0, 0), el rectángulo delimitador del nodo siempre tendrá al menos este tamaño, aunque su contenido sea menor. Si se establece en (0, 0), el nodo se dimensiona automáticamente para ajustarse a su contenido, ya sea una textura o un nodo hijo.

----

.. _class_Control_property_rect_pivot_offset:

- :ref:`Vector2<class_Vector2>` **rect_pivot_offset**

+-----------+-------------------------+
| *Default* | ``Vector2( 0, 0 )``     |
+-----------+-------------------------+
| *Setter*  | set_pivot_offset(value) |
+-----------+-------------------------+
| *Getter*  | get_pivot_offset()      |
+-----------+-------------------------+

Por defecto, el pivote del nodo es su esquina superior izquierda. Cuando cambias su :ref:`rect_scale<class_Control_property_rect_scale>`, se escalará alrededor de este pivote. Establezca esta propiedad en :ref:`rect_size<class_Control_property_rect_size>` / 2 para centrar el pivote en el rectángulo del nodo.

----

.. _class_Control_property_rect_position:

- :ref:`Vector2<class_Vector2>` **rect_position**

+-----------+---------------------+
| *Default* | ``Vector2( 0, 0 )`` |
+-----------+---------------------+
| *Getter*  | get_position()      |
+-----------+---------------------+

La posición del nodo, en relación con su padre. Corresponde a la esquina superior izquierda del rectángulo. La propiedad no se ve afectada por :ref:`rect_pivot_offset<class_Control_property_rect_pivot_offset>`.

----

.. _class_Control_property_rect_rotation:

- :ref:`float<class_float>` **rect_rotation**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_rotation_degrees(value) |
+-----------+-----------------------------+
| *Getter*  | get_rotation_degrees()      |
+-----------+-----------------------------+

La rotación del nodo alrededor de su pivote, en grados. Ver :ref:`rect_pivot_offset<class_Control_property_rect_pivot_offset>` para cambiar la posición del pivote.

----

.. _class_Control_property_rect_scale:

- :ref:`Vector2<class_Vector2>` **rect_scale**

+-----------+---------------------+
| *Default* | ``Vector2( 1, 1 )`` |
+-----------+---------------------+
| *Setter*  | set_scale(value)    |
+-----------+---------------------+
| *Getter*  | get_scale()         |
+-----------+---------------------+

The node's scale, relative to its :ref:`rect_size<class_Control_property_rect_size>`. Change this property to scale the node around its :ref:`rect_pivot_offset<class_Control_property_rect_pivot_offset>`. The Control's :ref:`hint_tooltip<class_Control_property_hint_tooltip>` will also scale according to this value.

\ **Note:** This property is mainly intended to be used for animation purposes. Text inside the Control will look pixelated or blurry when the Control is scaled. To support multiple resolutions in your project, use an appropriate viewport stretch mode as described in the :doc:`documentation <../tutorials/rendering/multiple_resolutions>` instead of scaling Controls individually.

\ **Note:** If the Control node is a child of a :ref:`Container<class_Container>` node, the scale will be reset to ``Vector2(1, 1)`` when the scene is instanced. To set the Control's scale when it's instanced, wait for one frame using ``yield(get_tree(), "idle_frame")`` then set its :ref:`rect_scale<class_Control_property_rect_scale>` property.

----

.. _class_Control_property_rect_size:

- :ref:`Vector2<class_Vector2>` **rect_size**

+-----------+---------------------+
| *Default* | ``Vector2( 0, 0 )`` |
+-----------+---------------------+
| *Getter*  | get_size()          |
+-----------+---------------------+

El tamaño del rectángulo delimitador del nodo, en píxeles. Los nodos :ref:`Container<class_Container>` actualizan esta propiedad automáticamente.

----

.. _class_Control_property_size_flags_horizontal:

- :ref:`int<class_int>` **size_flags_horizontal**

+-----------+-------------------------+
| *Default* | ``1``                   |
+-----------+-------------------------+
| *Setter*  | set_h_size_flags(value) |
+-----------+-------------------------+
| *Getter*  | get_h_size_flags()      |
+-----------+-------------------------+

Le dice a los nodos padre :ref:`Container<class_Container>` cómo deben cambiar de tamaño y colocar el nodo en el eje X. Usa una de las constantes :ref:`SizeFlags<enum_Control_SizeFlags>` para cambiar los flags. Vea las constantes para aprender lo que hace cada una.

----

.. _class_Control_property_size_flags_stretch_ratio:

- :ref:`float<class_float>` **size_flags_stretch_ratio**

+-----------+--------------------------+
| *Default* | ``1.0``                  |
+-----------+--------------------------+
| *Setter*  | set_stretch_ratio(value) |
+-----------+--------------------------+
| *Getter*  | get_stretch_ratio()      |
+-----------+--------------------------+

Si el nodo y al menos uno de sus vecinos utiliza el flag de tamaño :ref:`SIZE_EXPAND<class_Control_constant_SIZE_EXPAND>`, el padre :ref:`Container<class_Container>` le dejará ocupar más o menos espacio dependiendo de esta propiedad. Si este nodo tiene un ratio de estiramiento de 2 y su vecino un ratio de 1, este nodo tomará dos tercios del espacio disponible.

----

.. _class_Control_property_size_flags_vertical:

- :ref:`int<class_int>` **size_flags_vertical**

+-----------+-------------------------+
| *Default* | ``1``                   |
+-----------+-------------------------+
| *Setter*  | set_v_size_flags(value) |
+-----------+-------------------------+
| *Getter*  | get_v_size_flags()      |
+-----------+-------------------------+

Le dice a los nodos padres :ref:`Container<class_Container>` cómo deben cambiar de tamaño y colocar el nodo en el eje Y. Usa una de las constantes :ref:`SizeFlags<enum_Control_SizeFlags>` para cambiar los flags. Vea las constantes para aprender lo que hace cada una.

----

.. _class_Control_property_theme:

- :ref:`Theme<class_Theme>` **theme**

+----------+------------------+
| *Setter* | set_theme(value) |
+----------+------------------+
| *Getter* | get_theme()      |
+----------+------------------+

Cambiar esta propiedad reemplaza el actual recurso :ref:`Theme<class_Theme>` que este nodo y todos sus hijos ``Control`` utilizan.

Descripciones de Métodos
------------------------------------------------

.. _class_Control_method__clips_input:

- :ref:`bool<class_bool>` **_clips_input** **(** **)** |virtual|

Método virtual a ser implementado por el usuario. Devuelve si :ref:`_gui_input<class_Control_method__gui_input>` no debe ser llamado para los controles hijos fuera del rectángulo de este control. La entrada será recortada al rectángulo de este ``Control``. Similar a :ref:`rect_clip_content<class_Control_property_rect_clip_content>`, pero no afecta a la visibilidad.

Si no se anula, el valor por defecto es ``false``.

----

.. _class_Control_method__get_minimum_size:

- :ref:`Vector2<class_Vector2>` **_get_minimum_size** **(** **)** |virtual|

Virtual method to be implemented by the user. Returns the minimum size for this control. Alternative to :ref:`rect_min_size<class_Control_property_rect_min_size>` for controlling minimum size via code. The actual minimum size will be the max value of these two (in each axis separately).

If not overridden, defaults to :ref:`Vector2.ZERO<class_Vector2_constant_ZERO>`.

\ **Note:** This method will not be called when the script is attached to a ``Control`` node that already overrides its minimum size (e.g. :ref:`Label<class_Label>`, :ref:`Button<class_Button>`, :ref:`PanelContainer<class_PanelContainer>` etc.). It can only be used with most basic GUI nodes, like ``Control``, :ref:`Container<class_Container>`, :ref:`Panel<class_Panel>` etc.

----

.. _class_Control_method__gui_input:

- void **_gui_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

Virtual method to be implemented by the user. Use this method to process and accept inputs on UI elements. See :ref:`accept_event<class_Control_method_accept_event>`.

Example: clicking a control.

::

    func _gui_input(event):
        if event is InputEventMouseButton:
            if event.button_index == BUTTON_LEFT and event.pressed:
                print("I've been clicked D:")

The event won't trigger if:

\* clicking outside the control (see :ref:`has_point<class_Control_method_has_point>`);

\* control has :ref:`mouse_filter<class_Control_property_mouse_filter>` set to :ref:`MOUSE_FILTER_IGNORE<class_Control_constant_MOUSE_FILTER_IGNORE>`;

\* control is obstructed by another ``Control`` on top of it, which doesn't have :ref:`mouse_filter<class_Control_property_mouse_filter>` set to :ref:`MOUSE_FILTER_IGNORE<class_Control_constant_MOUSE_FILTER_IGNORE>`;

\* control's parent has :ref:`mouse_filter<class_Control_property_mouse_filter>` set to :ref:`MOUSE_FILTER_STOP<class_Control_constant_MOUSE_FILTER_STOP>` or has accepted the event;

\* it happens outside the parent's rectangle and the parent has either :ref:`rect_clip_content<class_Control_property_rect_clip_content>` or :ref:`_clips_input<class_Control_method__clips_input>` enabled.

\ **Note:** Event position is relative to the control origin.

----

.. _class_Control_method__make_custom_tooltip:

- :ref:`Control<class_Control>` **_make_custom_tooltip** **(** :ref:`String<class_String>` for_text **)** |virtual|

Virtual method to be implemented by the user. Returns a ``Control`` node that should be used as a tooltip instead of the default one. The ``for_text`` includes the contents of the :ref:`hint_tooltip<class_Control_property_hint_tooltip>` property.

The returned node must be of type ``Control`` or Control-derived. It can have child nodes of any type. It is freed when the tooltip disappears, so make sure you always provide a new instance (if you want to use a pre-existing node from your scene tree, you can duplicate it and pass the duplicated instance). When ``null`` or a non-Control node is returned, the default tooltip will be used instead.

The returned node will be added as child to a :ref:`PopupPanel<class_PopupPanel>`, so you should only provide the contents of that panel. That :ref:`PopupPanel<class_PopupPanel>` can be themed using :ref:`Theme.set_stylebox<class_Theme_method_set_stylebox>` for the type ``"TooltipPanel"`` (see :ref:`hint_tooltip<class_Control_property_hint_tooltip>` for an example).

\ **Note:** The tooltip is shrunk to minimal size. If you want to ensure it's fully visible, you might want to set its :ref:`rect_min_size<class_Control_property_rect_min_size>` to some non-zero value.

Example of usage with a custom-constructed node:

::

    func _make_custom_tooltip(for_text):
        var label = Label.new()
        label.text = for_text
        return label

Example of usage with a custom scene instance:

::

    func _make_custom_tooltip(for_text):
        var tooltip = preload("res://SomeTooltipScene.tscn").instance()
        tooltip.get_node("Label").text = for_text
        return tooltip

----

.. _class_Control_method_accept_event:

- void **accept_event** **(** **)**

Marca un evento de entrada como manejado. Una vez que aceptas un evento de entrada, deja de propagarse, incluso a los nodos que escuchan :ref:`Node._unhandled_input<class_Node_method__unhandled_input>` o :ref:`Node._unhandled_key_input<class_Node_method__unhandled_key_input>`.

----

.. _class_Control_method_add_color_override:

- void **add_color_override** **(** :ref:`String<class_String>` name, :ref:`Color<class_Color>` color **)**

Creates a local override for a theme :ref:`Color<class_Color>` with the specified ``name``. Local overrides always take precedence when fetching theme items for the control. An override cannot be removed, but it can be overridden with the corresponding default value.

See also :ref:`get_color<class_Control_method_get_color>`.

\ **Example of overriding a label's color and resetting it later:**\ 

::

    # Given the child Label node "MyLabel", override its font color with a custom value.
    $MyLabel.add_color_override("font_color", Color(1, 0.5, 0))
    # Reset the font color of the child label.
    $MyLabel.add_color_override("font_color", get_color("font_color", "Label"))

----

.. _class_Control_method_add_constant_override:

- void **add_constant_override** **(** :ref:`String<class_String>` name, :ref:`int<class_int>` constant **)**

Creates a local override for a theme constant with the specified ``name``. Local overrides always take precedence when fetching theme items for the control. An override cannot be removed, but it can be overridden with the corresponding default value.

See also :ref:`get_constant<class_Control_method_get_constant>`.

----

.. _class_Control_method_add_font_override:

- void **add_font_override** **(** :ref:`String<class_String>` name, :ref:`Font<class_Font>` font **)**

Creates a local override for a theme :ref:`Font<class_Font>` with the specified ``name``. Local overrides always take precedence when fetching theme items for the control. An override can be removed by assigning it a ``null`` value.

See also :ref:`get_font<class_Control_method_get_font>`.

----

.. _class_Control_method_add_icon_override:

- void **add_icon_override** **(** :ref:`String<class_String>` name, :ref:`Texture<class_Texture>` texture **)**

Creates a local override for a theme icon with the specified ``name``. Local overrides always take precedence when fetching theme items for the control. An override can be removed by assigning it a ``null`` value.

See also :ref:`get_icon<class_Control_method_get_icon>`.

----

.. _class_Control_method_add_shader_override:

- void **add_shader_override** **(** :ref:`String<class_String>` name, :ref:`Shader<class_Shader>` shader **)**

Creates a local override for a theme shader with the specified ``name``. Local overrides always take precedence when fetching theme items for the control. An override can be removed by assigning it a ``null`` value.

----

.. _class_Control_method_add_stylebox_override:

- void **add_stylebox_override** **(** :ref:`String<class_String>` name, :ref:`StyleBox<class_StyleBox>` stylebox **)**

Creates a local override for a theme :ref:`StyleBox<class_StyleBox>` with the specified ``name``. Local overrides always take precedence when fetching theme items for the control. An override can be removed by assigning it a ``null`` value.

See also :ref:`get_stylebox<class_Control_method_get_stylebox>`.

\ **Example of modifying a property in a StyleBox by duplicating it:**\ 

::

    # The snippet below assumes the child node MyButton has a StyleBoxFlat assigned.
    # Resources are shared across instances, so we need to duplicate it
    # to avoid modifying the appearance of all other buttons.
    var new_stylebox_normal = $MyButton.get_stylebox("normal").duplicate()
    new_stylebox_normal.border_width_top = 3
    new_stylebox_normal.border_color = Color(0, 1, 0.5)
    $MyButton.add_stylebox_override("normal", new_stylebox_normal)
    # Remove the stylebox override.
    $MyButton.add_stylebox_override("normal", null)

----

.. _class_Control_method_can_drop_data:

- :ref:`bool<class_bool>` **can_drop_data** **(** :ref:`Vector2<class_Vector2>` position, :ref:`Variant<class_Variant>` data **)** |virtual|

Godot llama a este método para probar si ``data`` de un control :ref:`get_drag_data<class_Control_method_get_drag_data>` puede ser lanzado en ``position``. ``position`` es local a este control.

Este método sólo debe usarse para probar los datos. Procesa los datos en :ref:`drop_data<class_Control_method_drop_data>`.

::

    func can_drop_data(position, data):
        # Cheque la posición is es relevante para ti
        # De otra forma solo chequea los datos
        return typeof(data) == TYPE_DICTIONARY and data.has("esperado")

----

.. _class_Control_method_drop_data:

- void **drop_data** **(** :ref:`Vector2<class_Vector2>` position, :ref:`Variant<class_Variant>` data **)** |virtual|

Godot llama a este método para pasarle el ``data`` del resultado del :ref:`get_drag_data<class_Control_method_get_drag_data>` de un control. Godot primero llama a :ref:`can_drop_data<class_Control_method_can_drop_data>` para probar si ``data`` puede caer en ``position`` donde ``position`` es local a este control.

::

    func can_drop_data(position, data):
        return typeof(data) == TYPE_DICTIONARY and data.has("color")
    
    func drop_data(position, data):
        color = data["color"]

----

.. _class_Control_method_find_next_valid_focus:

- :ref:`Control<class_Control>` **find_next_valid_focus** **(** **)** |const|

Finds the next (below in the tree) ``Control`` that can receive the focus.

----

.. _class_Control_method_find_prev_valid_focus:

- :ref:`Control<class_Control>` **find_prev_valid_focus** **(** **)** |const|

Finds the previous (above in the tree) ``Control`` that can receive the focus.

----

.. _class_Control_method_force_drag:

- void **force_drag** **(** :ref:`Variant<class_Variant>` data, :ref:`Control<class_Control>` preview **)**

Fuerza el arrastre y desvía :ref:`get_drag_data<class_Control_method_get_drag_data>` y :ref:`set_drag_preview<class_Control_method_set_drag_preview>` pasando ``data`` y ``preview``. El arrastre se iniciará incluso si el ratón no está encima ni presionado en este control.

Los métodos :ref:`can_drop_data<class_Control_method_can_drop_data>` y :ref:`drop_data<class_Control_method_drop_data>` deben ser implementados en los controles que quieran recibir datos de arrastre.

----

.. _class_Control_method_get_anchor:

- :ref:`float<class_float>` **get_anchor** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|

Devuelve el ancla identificada por la constante ``margin`` de enum :ref:`Margin<enum_@GlobalScope_Margin>`. Un método de obtención para :ref:`anchor_bottom<class_Control_property_anchor_bottom>`, :ref:`anchor_left<class_Control_property_anchor_left>`, :ref:`anchor_right<class_Control_property_anchor_right>` y :ref:`anchor_top<class_Control_property_anchor_top>`.

----

.. _class_Control_method_get_begin:

- :ref:`Vector2<class_Vector2>` **get_begin** **(** **)** |const|

Devuelve :ref:`margin_left<class_Control_property_margin_left>` y :ref:`margin_top<class_Control_property_margin_top>`. Véase también :ref:`rect_position<class_Control_property_rect_position>`.

----

.. _class_Control_method_get_color:

- :ref:`Color<class_Color>` **get_color** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|

Returns a :ref:`Color<class_Color>` from the first matching :ref:`Theme<class_Theme>` in the tree if that :ref:`Theme<class_Theme>` has a color item with the specified ``name`` and ``theme_type``. If ``theme_type`` is omitted the class name of the current control is used as the type. If the type is a class name its parent classes are also checked, in order of inheritance.

For the current control its local overrides are considered first (see :ref:`add_color_override<class_Control_method_add_color_override>`), then its assigned :ref:`theme<class_Control_property_theme>`. After the current control, each parent control and its assigned :ref:`theme<class_Control_property_theme>` are considered; controls without a :ref:`theme<class_Control_property_theme>` assigned are skipped. If no matching :ref:`Theme<class_Theme>` is found in the tree, a custom project :ref:`Theme<class_Theme>` (see :ref:`ProjectSettings.gui/theme/custom<class_ProjectSettings_property_gui/theme/custom>`) and the default :ref:`Theme<class_Theme>` are used.

::

    func _ready():
        # Get the font color defined for the current Control's class, if it exists.
        modulate = get_color("font_color")
        # Get the font color defined for the Button class.
        modulate = get_color("font_color", "Button")

----

.. _class_Control_method_get_combined_minimum_size:

- :ref:`Vector2<class_Vector2>` **get_combined_minimum_size** **(** **)** |const|

Devuelve el tamaño mínimo combinado de :ref:`rect_min_size<class_Control_property_rect_min_size>` y :ref:`get_minimum_size<class_Control_method_get_minimum_size>`.

----

.. _class_Control_method_get_constant:

- :ref:`int<class_int>` **get_constant** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|

Returns a constant from the first matching :ref:`Theme<class_Theme>` in the tree if that :ref:`Theme<class_Theme>` has a constant item with the specified ``name`` and ``theme_type``.

See :ref:`get_color<class_Control_method_get_color>` for details.

----

.. _class_Control_method_get_cursor_shape:

- :ref:`CursorShape<enum_Control_CursorShape>` **get_cursor_shape** **(** :ref:`Vector2<class_Vector2>` position=Vector2( 0, 0 ) **)** |const|

Devuelve la forma del cursor del ratón que el control muestra al pasar el ratón por encima. Ver :ref:`CursorShape<enum_Control_CursorShape>`.

----

.. _class_Control_method_get_drag_data:

- :ref:`Variant<class_Variant>` **get_drag_data** **(** :ref:`Vector2<class_Vector2>` position **)** |virtual|

Godot llama a este método para obtener datos que pueden ser arrastrados y soltados en los controles que esperan datos de caída. Devuelve ``null`` si no hay datos que arrastrar. Los controles que quieran recibir datos de arrastre deben implementar :ref:`can_drop_data<class_Control_method_can_drop_data>` y :ref:`drop_data<class_Control_method_drop_data>`. ``position`` es local para este control. El arrastre puede ser forzado con :ref:`force_drag<class_Control_method_force_drag>`.

Una vista previa que seguirá al ratón que debe representar los datos se puede fijar con :ref:`set_drag_preview<class_Control_method_set_drag_preview>`. Un buen momento para establecer la vista previa es en este método.

::

    func get_drag_data(position):
        var misdatos = fabricar_datos()
        set_drag_preview(make_preview(mydata))
        return misdatos

----

.. _class_Control_method_get_end:

- :ref:`Vector2<class_Vector2>` **get_end** **(** **)** |const|

Devuelve :ref:`margin_right<class_Control_property_margin_right>` y :ref:`margin_bottom<class_Control_property_margin_bottom>`.

----

.. _class_Control_method_get_focus_neighbour:

- :ref:`NodePath<class_NodePath>` **get_focus_neighbour** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|

Devuelve el vecino de enfocado identificado por la constante ``margin`` del enum :ref:`Margin<enum_@GlobalScope_Margin>`. Un método de obtención para :ref:`focus_neighbour_bottom<class_Control_property_focus_neighbour_bottom>`, :ref:`focus_neighbour_left<class_Control_property_focus_neighbour_left>`, :ref:`focus_neighbour_right<class_Control_property_focus_neighbour_right>` y :ref:`focus_neighbour_top<class_Control_property_focus_neighbour_top>`.

----

.. _class_Control_method_get_focus_owner:

- :ref:`Control<class_Control>` **get_focus_owner** **(** **)** |const|

Devuelve el control que tiene el foco del teclado o ``null`` si no hay ninguno.

----

.. _class_Control_method_get_font:

- :ref:`Font<class_Font>` **get_font** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|

Returns a :ref:`Font<class_Font>` from the first matching :ref:`Theme<class_Theme>` in the tree if that :ref:`Theme<class_Theme>` has a font item with the specified ``name`` and ``theme_type``.

See :ref:`get_color<class_Control_method_get_color>` for details.

----

.. _class_Control_method_get_global_rect:

- :ref:`Rect2<class_Rect2>` **get_global_rect** **(** **)** |const|

Devuelve la posición y el tamaño del control en relación con la esquina superior izquierda de la pantalla. Ver :ref:`rect_position<class_Control_property_rect_position>` y :ref:`rect_size<class_Control_property_rect_size>`.

----

.. _class_Control_method_get_icon:

- :ref:`Texture<class_Texture>` **get_icon** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|

Returns an icon from the first matching :ref:`Theme<class_Theme>` in the tree if that :ref:`Theme<class_Theme>` has an icon item with the specified ``name`` and ``theme_type``.

See :ref:`get_color<class_Control_method_get_color>` for details.

----

.. _class_Control_method_get_margin:

- :ref:`float<class_float>` **get_margin** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|

Devuelve el ancla identificada por la constante ``margin`` del enum :ref:`Margin<enum_@GlobalScope_Margin>`. Un método de obtención para :ref:`margin_bottom<class_Control_property_margin_bottom>`, :ref:`margin_left<class_Control_property_margin_left>`, :ref:`margin_right<class_Control_property_margin_right>` y :ref:`margin_top<class_Control_property_margin_top>`.

----

.. _class_Control_method_get_minimum_size:

- :ref:`Vector2<class_Vector2>` **get_minimum_size** **(** **)** |const|

Devuelve el tamaño mínimo para este control. Ver :ref:`rect_min_size<class_Control_property_rect_min_size>`.

----

.. _class_Control_method_get_parent_area_size:

- :ref:`Vector2<class_Vector2>` **get_parent_area_size** **(** **)** |const|

Devuelve la anchura/altura ocupada en el control parental.

----

.. _class_Control_method_get_parent_control:

- :ref:`Control<class_Control>` **get_parent_control** **(** **)** |const|

Devuelve el nodo de control del padre.

----

.. _class_Control_method_get_rect:

- :ref:`Rect2<class_Rect2>` **get_rect** **(** **)** |const|

Devuelve la posición y el tamaño del control en relación con la esquina superior izquierda del control principal. Ver :ref:`rect_position<class_Control_property_rect_position>` y :ref:`rect_size<class_Control_property_rect_size>`.

----

.. _class_Control_method_get_rotation:

- :ref:`float<class_float>` **get_rotation** **(** **)** |const|

Devuelve la rotación (en radianes).

----

.. _class_Control_method_get_stylebox:

- :ref:`StyleBox<class_StyleBox>` **get_stylebox** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|

Returns a :ref:`StyleBox<class_StyleBox>` from the first matching :ref:`Theme<class_Theme>` in the tree if that :ref:`Theme<class_Theme>` has a stylebox item with the specified ``name`` and ``theme_type``.

See :ref:`get_color<class_Control_method_get_color>` for details.

----

.. _class_Control_method_get_theme_default_font:

- :ref:`Font<class_Font>` **get_theme_default_font** **(** **)** |const|

Returns the default font from the first matching :ref:`Theme<class_Theme>` in the tree if that :ref:`Theme<class_Theme>` has a valid :ref:`Theme.default_font<class_Theme_property_default_font>` value.

See :ref:`get_color<class_Control_method_get_color>` for details.

----

.. _class_Control_method_get_tooltip:

- :ref:`String<class_String>` **get_tooltip** **(** :ref:`Vector2<class_Vector2>` at_position=Vector2( 0, 0 ) **)** |const|

Devuelve la sugerencia, que aparecerá cuando el cursor se apoye sobre este control. Ver :ref:`hint_tooltip<class_Control_property_hint_tooltip>`.

----

.. _class_Control_method_grab_click_focus:

- void **grab_click_focus** **(** **)**

Crea un :ref:`InputEventMouseButton<class_InputEventMouseButton>` que intenta hacer clic en el control. Si se recibe el evento, el control adquiere el enfoque.

::

    func _process(delta):
        grab_click_focus() # cuando se hace click otro nodo control, este nodo sera clickado en vez del previo

----

.. _class_Control_method_grab_focus:

- void **grab_focus** **(** **)**

Roba el foco de otro control y pasa a ser el control enfocado (ver :ref:`focus_mode<class_Control_property_focus_mode>`).

----

.. _class_Control_method_has_color:

- :ref:`bool<class_bool>` **has_color** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|

Returns ``true`` if there is a matching :ref:`Theme<class_Theme>` in the tree that has a color item with the specified ``name`` and ``theme_type``.

See :ref:`get_color<class_Control_method_get_color>` for details.

----

.. _class_Control_method_has_color_override:

- :ref:`bool<class_bool>` **has_color_override** **(** :ref:`String<class_String>` name **)** |const|

Returns ``true`` if there is a local override for a theme :ref:`Color<class_Color>` with the specified ``name`` in this ``Control`` node.

See :ref:`add_color_override<class_Control_method_add_color_override>`.

----

.. _class_Control_method_has_constant:

- :ref:`bool<class_bool>` **has_constant** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|

Returns ``true`` if there is a matching :ref:`Theme<class_Theme>` in the tree that has a constant item with the specified ``name`` and ``theme_type``.

See :ref:`get_color<class_Control_method_get_color>` for details.

----

.. _class_Control_method_has_constant_override:

- :ref:`bool<class_bool>` **has_constant_override** **(** :ref:`String<class_String>` name **)** |const|

Returns ``true`` if there is a local override for a theme constant with the specified ``name`` in this ``Control`` node.

See :ref:`add_constant_override<class_Control_method_add_constant_override>`.

----

.. _class_Control_method_has_focus:

- :ref:`bool<class_bool>` **has_focus** **(** **)** |const|

Devuelve ``true`` si este es el control enfocado actual. Ver :ref:`focus_mode<class_Control_property_focus_mode>`.

----

.. _class_Control_method_has_font:

- :ref:`bool<class_bool>` **has_font** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|

Returns ``true`` if there is a matching :ref:`Theme<class_Theme>` in the tree that has a font item with the specified ``name`` and ``theme_type``.

See :ref:`get_color<class_Control_method_get_color>` for details.

----

.. _class_Control_method_has_font_override:

- :ref:`bool<class_bool>` **has_font_override** **(** :ref:`String<class_String>` name **)** |const|

Returns ``true`` if there is a local override for a theme :ref:`Font<class_Font>` with the specified ``name`` in this ``Control`` node.

See :ref:`add_font_override<class_Control_method_add_font_override>`.

----

.. _class_Control_method_has_icon:

- :ref:`bool<class_bool>` **has_icon** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|

Returns ``true`` if there is a matching :ref:`Theme<class_Theme>` in the tree that has an icon item with the specified ``name`` and ``theme_type``.

See :ref:`get_color<class_Control_method_get_color>` for details.

----

.. _class_Control_method_has_icon_override:

- :ref:`bool<class_bool>` **has_icon_override** **(** :ref:`String<class_String>` name **)** |const|

Returns ``true`` if there is a local override for a theme icon with the specified ``name`` in this ``Control`` node.

See :ref:`add_icon_override<class_Control_method_add_icon_override>`.

----

.. _class_Control_method_has_point:

- :ref:`bool<class_bool>` **has_point** **(** :ref:`Vector2<class_Vector2>` point **)** |virtual|

Método virtual a ser implementado por el usuario. Devuelve si el ``point`` dado está dentro de este control.

Si no está sobreescrito, el comportamiento por defecto es comprobar si el punto está dentro del Rectángulo del control.

\ **Nota:** Si quieres comprobar si un punto está dentro del control, puedes usar ``get_rect().has_point(point)``.

----

.. _class_Control_method_has_shader_override:

- :ref:`bool<class_bool>` **has_shader_override** **(** :ref:`String<class_String>` name **)** |const|

Returns ``true`` if there is a local override for a theme shader with the specified ``name`` in this ``Control`` node.

See :ref:`add_shader_override<class_Control_method_add_shader_override>`.

----

.. _class_Control_method_has_stylebox:

- :ref:`bool<class_bool>` **has_stylebox** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` theme_type="" **)** |const|

Returns ``true`` if there is a matching :ref:`Theme<class_Theme>` in the tree that has a stylebox item with the specified ``name`` and ``theme_type``.

See :ref:`get_color<class_Control_method_get_color>` for details.

----

.. _class_Control_method_has_stylebox_override:

- :ref:`bool<class_bool>` **has_stylebox_override** **(** :ref:`String<class_String>` name **)** |const|

Returns ``true`` if there is a local override for a theme :ref:`StyleBox<class_StyleBox>` with the specified ``name`` in this ``Control`` node.

See :ref:`add_stylebox_override<class_Control_method_add_stylebox_override>`.

----

.. _class_Control_method_minimum_size_changed:

- void **minimum_size_changed** **(** **)**

Invalida el tamaño de la memoria caché en este nodo y en los nodos padres hasta el nivel superior. Está pensado para ser usado con :ref:`get_minimum_size<class_Control_method_get_minimum_size>` cuando se cambia el valor de retorno. Si se establece :ref:`rect_min_size<class_Control_property_rect_min_size>` se llama directamente a este método de forma automática.

----

.. _class_Control_method_release_focus:

- void **release_focus** **(** **)**

Deje el enfoque. Ningún otro control podrá recibir la entrada del teclado.

----

.. _class_Control_method_set_anchor:

- void **set_anchor** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`float<class_float>` anchor, :ref:`bool<class_bool>` keep_margin=false, :ref:`bool<class_bool>` push_opposite_anchor=true **)**

Establece el ancla identificada por la constante ``margin`` del enum :ref:`Margin<enum_@GlobalScope_Margin>` al valor ``anchor``. Un método de fijación para :ref:`anchor_bottom<class_Control_property_anchor_bottom>`, :ref:`anchor_left<class_Control_property_anchor_left>`, :ref:`anchor_right<class_Control_property_anchor_right>` y :ref:`anchor_top<class_Control_property_anchor_top>`.

Si ``keep_margin`` es ``true``, los márgenes no se actualizan después de esta operación.

Si ``push_opposite_anchor`` es ``true`` y el ancla opuesta se superpone a esta ancla, la opuesta tendrá su valor sobreescrito. Por ejemplo, cuando se ajusta el ancla izquierda a 1 y el ancla derecha tiene el valor de 0,5, el ancla derecha también obtendrá el valor de 1. Si ``push_opposite_anchor`` fuera ``false``, el ancla izquierda obtendría el valor 0,5.

----

.. _class_Control_method_set_anchor_and_margin:

- void **set_anchor_and_margin** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`float<class_float>` anchor, :ref:`float<class_float>` offset, :ref:`bool<class_bool>` push_opposite_anchor=false **)**

Funciona igual que :ref:`set_anchor<class_Control_method_set_anchor>`, pero en lugar del argumento ``keep_margin`` y la actualización automática del margen, permite establecer el desplazamiento del margen por sí mismo (ver :ref:`set_margin<class_Control_method_set_margin>`).

----

.. _class_Control_method_set_anchors_and_margins_preset:

- void **set_anchors_and_margins_preset** **(** :ref:`LayoutPreset<enum_Control_LayoutPreset>` preset, :ref:`LayoutPresetMode<enum_Control_LayoutPresetMode>` resize_mode=0, :ref:`int<class_int>` margin=0 **)**

Establece tanto la preselección del ancla como la preselección del margen. Ver :ref:`set_anchors_preset<class_Control_method_set_anchors_preset>` y :ref:`set_margins_preset<class_Control_method_set_margins_preset>`.

----

.. _class_Control_method_set_anchors_preset:

- void **set_anchors_preset** **(** :ref:`LayoutPreset<enum_Control_LayoutPreset>` preset, :ref:`bool<class_bool>` keep_margins=false **)**

Sets the anchors to a ``preset`` from :ref:`LayoutPreset<enum_Control_LayoutPreset>` enum. This is the code equivalent to using the Layout menu in the 2D editor.

If ``keep_margins`` is ``true``, control's position will also be updated.

----

.. _class_Control_method_set_begin:

- void **set_begin** **(** :ref:`Vector2<class_Vector2>` position **)**

Establece :ref:`margin_left<class_Control_property_margin_left>` y :ref:`margin_top<class_Control_property_margin_top>` al mismo tiempo. Equivale a cambiar :ref:`rect_position<class_Control_property_rect_position>`.

----

.. _class_Control_method_set_drag_forwarding:

- void **set_drag_forwarding** **(** :ref:`Control<class_Control>` target **)**

Adelanta el manejo del arrastre y suelta de este control al control de ``target``.

El reenvío puede ser implementado en el control de destino de manera similar a los métodos :ref:`get_drag_data<class_Control_method_get_drag_data>`, :ref:`can_drop_data<class_Control_method_can_drop_data>`, y :ref:`drop_data<class_Control_method_drop_data>` pero con dos diferencias:

1. El nombre de la función debe ser sufijado con **_fw**\ 

2. La función debe tener un argumento extra que es el control que hace el reenvío

::

    # EsteControl.gd
    extends Control
    func _ready():
        set_drag_forwarding(control_objetivo)
    
    # ControlObjetivo.gd
    extends Control
    func puede_arrastrar_datos_fw(posicion, datos, desde_control):
        return true
    
    func arrastra_datos_fw(posicion, datos, desde_control):
        mi_manejo_de_datos(data)
    
    func obtener_datos_arrastrados_fw(posicion, datos, desde_control):
        set_drag_preview(mi_prevista)
        return misdatos()

----

.. _class_Control_method_set_drag_preview:

- void **set_drag_preview** **(** :ref:`Control<class_Control>` control **)**

Shows the given control at the mouse pointer. A good time to call this method is in :ref:`get_drag_data<class_Control_method_get_drag_data>`. The control must not be in the scene tree. You should not free the control, and you should not keep a reference to the control beyond the duration of the drag. It will be deleted automatically after the drag has ended.

::

    export (Color, RGBA) var color = Color(1, 0, 0, 1)
    
    func get_drag_data(position):
        # Use a control that is not in the tree
        var cpb = ColorPickerButton.new()
        cpb.color = color
        cpb.rect_size = Vector2(50, 50)
        set_drag_preview(cpb)
        return color

----

.. _class_Control_method_set_end:

- void **set_end** **(** :ref:`Vector2<class_Vector2>` position **)**

Establece :ref:`margin_right<class_Control_property_margin_right>` y :ref:`margin_bottom<class_Control_property_margin_bottom>` al mismo tiempo.

----

.. _class_Control_method_set_focus_neighbour:

- void **set_focus_neighbour** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`NodePath<class_NodePath>` neighbour **)**

Establece el ancla identificada por la constante ``margin`` desde el :ref:`Margin<enum_@GlobalScope_Margin>` hasta ``Control`` en la ruta del nodo ``neighbour``. Un método de fijación para :ref:`focus_neighbour_bottom<class_Control_property_focus_neighbour_bottom>`, :ref:`focus_neighbour_left<class_Control_property_focus_neighbour_left>`, :ref:`focus_neighbour_right<class_Control_property_focus_neighbour_right>` y :ref:`focus_neighbour_top<class_Control_property_focus_neighbour_top>`.

----

.. _class_Control_method_set_global_position:

- void **set_global_position** **(** :ref:`Vector2<class_Vector2>` position, :ref:`bool<class_bool>` keep_margins=false **)**

Establece el :ref:`rect_global_position<class_Control_property_rect_global_position>` a la ``position`` dada.

Si ``keep_margins`` es ``true``, los anclajes del control se actualizarán en lugar de los márgenes.

----

.. _class_Control_method_set_margin:

- void **set_margin** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`float<class_float>` offset **)**

Establece el margen identificado por ``margin`` constante desde el enum :ref:`Margin<enum_@GlobalScope_Margin>` hasta determinado ``offset``. Un método de fijación para :ref:`margin_bottom<class_Control_property_margin_bottom>`, :ref:`margin_left<class_Control_property_margin_left>`, :ref:`margin_right<class_Control_property_margin_right>` y :ref:`margin_top<class_Control_property_margin_top>`.

----

.. _class_Control_method_set_margins_preset:

- void **set_margins_preset** **(** :ref:`LayoutPreset<enum_Control_LayoutPreset>` preset, :ref:`LayoutPresetMode<enum_Control_LayoutPresetMode>` resize_mode=0, :ref:`int<class_int>` margin=0 **)**

Sets the margins to a ``preset`` from :ref:`LayoutPreset<enum_Control_LayoutPreset>` enum. This is the code equivalent to using the Layout menu in the 2D editor.

Use parameter ``resize_mode`` with constants from :ref:`LayoutPresetMode<enum_Control_LayoutPresetMode>` to better determine the resulting size of the ``Control``. Constant size will be ignored if used with presets that change size, e.g. ``PRESET_LEFT_WIDE``.

Use parameter ``margin`` to determine the gap between the ``Control`` and the edges.

----

.. _class_Control_method_set_position:

- void **set_position** **(** :ref:`Vector2<class_Vector2>` position, :ref:`bool<class_bool>` keep_margins=false **)**

Establece la :ref:`rect_position<class_Control_property_rect_position>` a la ``position`` dada.

Si ``keep_margins`` es ``true``, los anclajes del control se actualizarán en lugar de los márgenes.

----

.. _class_Control_method_set_rotation:

- void **set_rotation** **(** :ref:`float<class_float>` radians **)**

Establece la rotación (en radianes).

----

.. _class_Control_method_set_size:

- void **set_size** **(** :ref:`Vector2<class_Vector2>` size, :ref:`bool<class_bool>` keep_margins=false **)**

Establece el tamaño (ver :ref:`rect_size<class_Control_property_rect_size>`).

Si ``keep_margins`` es ``true``, los anclajes del control se actualizarán en lugar de los márgenes.

----

.. _class_Control_method_show_modal:

- void **show_modal** **(** :ref:`bool<class_bool>` exclusive=false **)**

Displays a control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.

If ``exclusive`` is ``true``, other controls will not receive input and clicking outside this control will not close it.

----

.. _class_Control_method_warp_mouse:

- void **warp_mouse** **(** :ref:`Vector2<class_Vector2>` to_position **)**

Mueve el cursor del ratón a ``to_position``, relativo a la :ref:`rect_position<class_Control_property_rect_position>` de este ``Control``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
