:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Node2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Node2D:

Node2D
======

**Inherits:** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`AnimatedSprite<class_AnimatedSprite>`, :ref:`AudioStreamPlayer2D<class_AudioStreamPlayer2D>`, :ref:`BackBufferCopy<class_BackBufferCopy>`, :ref:`Bone2D<class_Bone2D>`, :ref:`CPUParticles2D<class_CPUParticles2D>`, :ref:`Camera2D<class_Camera2D>`, :ref:`CanvasModulate<class_CanvasModulate>`, :ref:`CollisionObject2D<class_CollisionObject2D>`, :ref:`CollisionPolygon2D<class_CollisionPolygon2D>`, :ref:`CollisionShape2D<class_CollisionShape2D>`, :ref:`Joint2D<class_Joint2D>`, :ref:`Light2D<class_Light2D>`, :ref:`LightOccluder2D<class_LightOccluder2D>`, :ref:`Line2D<class_Line2D>`, :ref:`Listener2D<class_Listener2D>`, :ref:`MeshInstance2D<class_MeshInstance2D>`, :ref:`MultiMeshInstance2D<class_MultiMeshInstance2D>`, :ref:`Navigation2D<class_Navigation2D>`, :ref:`NavigationPolygonInstance<class_NavigationPolygonInstance>`, :ref:`ParallaxLayer<class_ParallaxLayer>`, :ref:`Particles2D<class_Particles2D>`, :ref:`Path2D<class_Path2D>`, :ref:`PathFollow2D<class_PathFollow2D>`, :ref:`Polygon2D<class_Polygon2D>`, :ref:`Position2D<class_Position2D>`, :ref:`RayCast2D<class_RayCast2D>`, :ref:`RemoteTransform2D<class_RemoteTransform2D>`, :ref:`Skeleton2D<class_Skeleton2D>`, :ref:`Sprite<class_Sprite>`, :ref:`TileMap<class_TileMap>`, :ref:`TouchScreenButton<class_TouchScreenButton>`, :ref:`VisibilityNotifier2D<class_VisibilityNotifier2D>`, :ref:`YSort<class_YSort>`

Un objeto de juego en 2D, heredado por todos los nodos relacionados con el 2D. Tiene una posición, rotación, escala e índice Z.

Descripción
----------------------

Un objeto de juego 2D, con una transformada (posición, rotación y escala). Todos los nodos 2D, incluyendo los objetos de física y los sprites, heredan de Node2D. Utiliza Node2D como nodo padre para mover, escalar y rotar a los niños en un proyecto 2D. También da control del orden de renderización del nodo.

Tutoriales
--------------------

- :doc:`Custom drawing in 2D <../tutorials/2d/custom_drawing_in_2d>`

- `All 2D Demos <https://github.com/godotengine/godot-demo-projects/tree/master/2d>`__

Propiedades
----------------------

+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`global_position<class_Node2D_property_global_position>`                 |                     |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`             | :ref:`global_rotation<class_Node2D_property_global_rotation>`                 |                     |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`             | :ref:`global_rotation_degrees<class_Node2D_property_global_rotation_degrees>` |                     |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`global_scale<class_Node2D_property_global_scale>`                       |                     |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`global_transform<class_Node2D_property_global_transform>`               |                     |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`position<class_Node2D_property_position>`                               | ``Vector2( 0, 0 )`` |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`             | :ref:`rotation<class_Node2D_property_rotation>`                               | ``0.0``             |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`             | :ref:`rotation_degrees<class_Node2D_property_rotation_degrees>`               | ``0.0``             |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`scale<class_Node2D_property_scale>`                                     | ``Vector2( 1, 1 )`` |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`transform<class_Node2D_property_transform>`                             |                     |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`               | :ref:`z_as_relative<class_Node2D_property_z_as_relative>`                     | ``true``            |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                 | :ref:`z_index<class_Node2D_property_z_index>`                                 | ``0``               |
+---------------------------------------+-------------------------------------------------------------------------------+---------------------+

Métodos
--------------

+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`apply_scale<class_Node2D_method_apply_scale>` **(** :ref:`Vector2<class_Vector2>` ratio **)**                                              |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`             | :ref:`get_angle_to<class_Node2D_method_get_angle_to>` **(** :ref:`Vector2<class_Vector2>` point **)** |const|                                    |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`get_relative_transform_to_parent<class_Node2D_method_get_relative_transform_to_parent>` **(** :ref:`Node<class_Node>` parent **)** |const| |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`global_translate<class_Node2D_method_global_translate>` **(** :ref:`Vector2<class_Vector2>` offset **)**                                   |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`look_at<class_Node2D_method_look_at>` **(** :ref:`Vector2<class_Vector2>` point **)**                                                      |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`move_local_x<class_Node2D_method_move_local_x>` **(** :ref:`float<class_float>` delta, :ref:`bool<class_bool>` scaled=false **)**          |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`move_local_y<class_Node2D_method_move_local_y>` **(** :ref:`float<class_float>` delta, :ref:`bool<class_bool>` scaled=false **)**          |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`rotate<class_Node2D_method_rotate>` **(** :ref:`float<class_float>` radians **)**                                                          |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`to_global<class_Node2D_method_to_global>` **(** :ref:`Vector2<class_Vector2>` local_point **)** |const|                                    |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`to_local<class_Node2D_method_to_local>` **(** :ref:`Vector2<class_Vector2>` global_point **)** |const|                                     |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`translate<class_Node2D_method_translate>` **(** :ref:`Vector2<class_Vector2>` offset **)**                                                 |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Node2D_property_global_position:

- :ref:`Vector2<class_Vector2>` **global_position**

+----------+----------------------------+
| *Setter* | set_global_position(value) |
+----------+----------------------------+
| *Getter* | get_global_position()      |
+----------+----------------------------+

Posición global.

----

.. _class_Node2D_property_global_rotation:

- :ref:`float<class_float>` **global_rotation**

+----------+----------------------------+
| *Setter* | set_global_rotation(value) |
+----------+----------------------------+
| *Getter* | get_global_rotation()      |
+----------+----------------------------+

Rotación global en radianes.

----

.. _class_Node2D_property_global_rotation_degrees:

- :ref:`float<class_float>` **global_rotation_degrees**

+----------+------------------------------------+
| *Setter* | set_global_rotation_degrees(value) |
+----------+------------------------------------+
| *Getter* | get_global_rotation_degrees()      |
+----------+------------------------------------+

Rotación global en grados.

----

.. _class_Node2D_property_global_scale:

- :ref:`Vector2<class_Vector2>` **global_scale**

+----------+-------------------------+
| *Setter* | set_global_scale(value) |
+----------+-------------------------+
| *Getter* | get_global_scale()      |
+----------+-------------------------+

Escala global.

----

.. _class_Node2D_property_global_transform:

- :ref:`Transform2D<class_Transform2D>` **global_transform**

+----------+-----------------------------+
| *Setter* | set_global_transform(value) |
+----------+-----------------------------+
| *Getter* | get_global_transform()      |
+----------+-----------------------------+

:ref:`Transform2D<class_Transform2D>` Global.

----

.. _class_Node2D_property_position:

- :ref:`Vector2<class_Vector2>` **position**

+-----------+---------------------+
| *Default* | ``Vector2( 0, 0 )`` |
+-----------+---------------------+
| *Setter*  | set_position(value) |
+-----------+---------------------+
| *Getter*  | get_position()      |
+-----------+---------------------+

Posición, relativa al padre del nodo.

----

.. _class_Node2D_property_rotation:

- :ref:`float<class_float>` **rotation**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_rotation(value) |
+-----------+---------------------+
| *Getter*  | get_rotation()      |
+-----------+---------------------+

Rotación en radianes, en relación con el padre del nodo.

----

.. _class_Node2D_property_rotation_degrees:

- :ref:`float<class_float>` **rotation_degrees**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_rotation_degrees(value) |
+-----------+-----------------------------+
| *Getter*  | get_rotation_degrees()      |
+-----------+-----------------------------+

Rotación en grados, en relación con el padre del nodo.

----

.. _class_Node2D_property_scale:

- :ref:`Vector2<class_Vector2>` **scale**

+-----------+---------------------+
| *Default* | ``Vector2( 1, 1 )`` |
+-----------+---------------------+
| *Setter*  | set_scale(value)    |
+-----------+---------------------+
| *Getter*  | get_scale()         |
+-----------+---------------------+

La escala del nodo. Valor no escalado: ``(1, 1)``.

----

.. _class_Node2D_property_transform:

- :ref:`Transform2D<class_Transform2D>` **transform**

+----------+----------------------+
| *Setter* | set_transform(value) |
+----------+----------------------+
| *Getter* | get_transform()      |
+----------+----------------------+

:ref:`Transform2D<class_Transform2D>` Local .

----

.. _class_Node2D_property_z_as_relative:

- :ref:`bool<class_bool>` **z_as_relative**

+-----------+--------------------------+
| *Default* | ``true``                 |
+-----------+--------------------------+
| *Setter*  | set_z_as_relative(value) |
+-----------+--------------------------+
| *Getter*  | is_z_relative()          |
+-----------+--------------------------+

Si ``true``, el índice Z del nodo es relativo al índice Z de su padre. Si el índice Z de este nodo es 2 y el índice Z efectivo de su padre es 3, entonces el índice Z efectivo de este nodo será 2 + 3 = 5.

----

.. _class_Node2D_property_z_index:

- :ref:`int<class_int>` **z_index**

+-----------+--------------------+
| *Default* | ``0``              |
+-----------+--------------------+
| *Setter*  | set_z_index(value) |
+-----------+--------------------+
| *Getter*  | get_z_index()      |
+-----------+--------------------+

Z index. Controls the order in which the nodes render. A node with a higher Z index will display in front of others. Must be between :ref:`VisualServer.CANVAS_ITEM_Z_MIN<class_VisualServer_constant_CANVAS_ITEM_Z_MIN>` and :ref:`VisualServer.CANVAS_ITEM_Z_MAX<class_VisualServer_constant_CANVAS_ITEM_Z_MAX>` (inclusive).

Descripciones de Métodos
------------------------------------------------

.. _class_Node2D_method_apply_scale:

- void **apply_scale** **(** :ref:`Vector2<class_Vector2>` ratio **)**

Multiplica la escala actual por el vector ``ratio``.

----

.. _class_Node2D_method_get_angle_to:

- :ref:`float<class_float>` **get_angle_to** **(** :ref:`Vector2<class_Vector2>` point **)** |const|

Returns the angle between the node and the ``point`` in radians.

\ `Illustration of the returned angle. <https://raw.githubusercontent.com/godotengine/godot-docs/master/img/node2d_get_angle_to.png>`__

----

.. _class_Node2D_method_get_relative_transform_to_parent:

- :ref:`Transform2D<class_Transform2D>` **get_relative_transform_to_parent** **(** :ref:`Node<class_Node>` parent **)** |const|

Devuelve el :ref:`Transform2D<class_Transform2D>` relativo al padre de este nodo.

----

.. _class_Node2D_method_global_translate:

- void **global_translate** **(** :ref:`Vector2<class_Vector2>` offset **)**

Añade el vector ``offset`` a la posición global del nodo.

----

.. _class_Node2D_method_look_at:

- void **look_at** **(** :ref:`Vector2<class_Vector2>` point **)**

Gira el nodo para que apunte hacia el ``punto``, que se espera que utilice coordenadas globales.

----

.. _class_Node2D_method_move_local_x:

- void **move_local_x** **(** :ref:`float<class_float>` delta, :ref:`bool<class_bool>` scaled=false **)**

Aplica una traducción local en el eje X del nodo basada en la ``delta`` del :ref:`Node._process<class_Node_method__process>`. Si ``scaled`` es ``false``, normaliza el movimiento.

----

.. _class_Node2D_method_move_local_y:

- void **move_local_y** **(** :ref:`float<class_float>` delta, :ref:`bool<class_bool>` scaled=false **)**

Aplica una traducción local en el eje Y del nodo basada en el :ref:`Node._process<class_Node_method__process>`'s ``delta``. Si ``scaled`` es ``false``, normaliza el movimiento.

----

.. _class_Node2D_method_rotate:

- void **rotate** **(** :ref:`float<class_float>` radians **)**

Aplica una rotación al nodo, en radianes, a partir de su rotación actual.

----

.. _class_Node2D_method_to_global:

- :ref:`Vector2<class_Vector2>` **to_global** **(** :ref:`Vector2<class_Vector2>` local_point **)** |const|

Transforma la posición local proporcionada en una posición en el espacio de coordenadas globales. Se espera que la entrada sea local en relación con el ``Node2D`` al que se llama. Por ejemplo, aplicar este método a las posiciones de los nodos hijos transformará correctamente sus posiciones en el espacio de coordenadas globales, pero aplicarlo a la propia posición de un nodo dará un resultado incorrecto, ya que incorporará la propia transformación del nodo en su posición global.

----

.. _class_Node2D_method_to_local:

- :ref:`Vector2<class_Vector2>` **to_local** **(** :ref:`Vector2<class_Vector2>` global_point **)** |const|

Transforma la posición global proporcionada en una posición en el espacio de coordenadas locales. La salida será local en relación con el ``Node2D`` al que se llama. Por ejemplo, es apropiado para determinar las posiciones de los nodos hijos, pero no es apropiado para determinar su propia posición en relación con su padre.

----

.. _class_Node2D_method_translate:

- void **translate** **(** :ref:`Vector2<class_Vector2>` offset **)**

Traduce el nodo por el ``offset`` dado en coordenadas locales.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
