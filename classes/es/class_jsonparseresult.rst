:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the JSONParseResult.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_JSONParseResult:

JSONParseResult
===============

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Envoltura de clase de datos para JSON decodificado.

Descripción
----------------------

Devuelto por :ref:`JSON.parse<class_JSON_method_parse>`, ``JSONParseResult`` contiene el JSON decodificado o la información de error si la fuente JSON no fue analizada con éxito. Puedes comprobar si la fuente JSON fue analizada con éxito con ``if json_result.error == OK``.

Propiedades
----------------------

+---------------------------------------+------------------------------------------------------------------+--------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`error<class_JSONParseResult_property_error>`               |        |
+---------------------------------------+------------------------------------------------------------------+--------+
| :ref:`int<class_int>`                 | :ref:`error_line<class_JSONParseResult_property_error_line>`     | ``-1`` |
+---------------------------------------+------------------------------------------------------------------+--------+
| :ref:`String<class_String>`           | :ref:`error_string<class_JSONParseResult_property_error_string>` | ``""`` |
+---------------------------------------+------------------------------------------------------------------+--------+
| :ref:`Variant<class_Variant>`         | :ref:`result<class_JSONParseResult_property_result>`             |        |
+---------------------------------------+------------------------------------------------------------------+--------+

Descripciones de Propiedades
--------------------------------------------------------

.. _class_JSONParseResult_property_error:

- :ref:`Error<enum_@GlobalScope_Error>` **error**

+----------+------------------+
| *Setter* | set_error(value) |
+----------+------------------+
| *Getter* | get_error()      |
+----------+------------------+

El tipo de error si la fuente JSON no fue analizada con éxito. Vea las constantes :ref:`Error<enum_@GlobalScope_Error>`.

----

.. _class_JSONParseResult_property_error_line:

- :ref:`int<class_int>` **error_line**

+-----------+-----------------------+
| *Default* | ``-1``                |
+-----------+-----------------------+
| *Setter*  | set_error_line(value) |
+-----------+-----------------------+
| *Getter*  | get_error_line()      |
+-----------+-----------------------+

El número de línea donde ocurrió el error si la fuente JSON no fue analizada con éxito.

----

.. _class_JSONParseResult_property_error_string:

- :ref:`String<class_String>` **error_string**

+-----------+-------------------------+
| *Default* | ``""``                  |
+-----------+-------------------------+
| *Setter*  | set_error_string(value) |
+-----------+-------------------------+
| *Getter*  | get_error_string()      |
+-----------+-------------------------+

El mensaje de error si la fuente JSON no fue analizada con éxito. Vea las constantes :ref:`Error<enum_@GlobalScope_Error>`.

----

.. _class_JSONParseResult_property_result:

- :ref:`Variant<class_Variant>` **result**

+----------+-------------------+
| *Setter* | set_result(value) |
+----------+-------------------+
| *Getter* | get_result()      |
+----------+-------------------+

Una :ref:`Variant<class_Variant>` que contiene el JSON analizado. Utilice :ref:`@GDScript.typeof<class_@GDScript_method_typeof>` o la palabra clave ``is`` para comprobar si es lo que espera. Por ejemplo, si la fuente de JSON comienza con llaves rizadas (``{}``), se devolverá un :ref:`Dictionary<class_Dictionary>`. Si la fuente de JSON comienza con paréntesis (``[]``), se devolverá un :ref:`Array<class_Array>`.

\ **Nota:** La especificación JSON no define los tipos enteros o reales, sino sólo un tipo *number*. Por lo tanto, el análisis sintáctico de un texto JSON convertirá todos los valores numéricos a tipos :ref:`float<class_float>`.

\ **Nota:** Los objetos JSON no conservan el orden de las claves como los diccionarios Godot, por lo tanto, no se debe confiar en que las claves estén en un cierto orden si se construye un diccionario a partir de JSON. Por el contrario, los conjuntos de JSON conservan el orden de sus elementos:

::

    var p = JSON.parse('["hola", "mundo", "!"]')
    if typeof(p.result) == TYPE_ARRAY:
        print(p.result[0]) # Imprime "hola"
    else:
        push_error("Resultados inesperados.")

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
