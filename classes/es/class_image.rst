:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Image.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Image:

Image
=====

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Tipo de datos de imagen.

Descripción
----------------------

Native image datatype. Contains image data which can be converted to an :ref:`ImageTexture<class_ImageTexture>` and provides commonly used *image processing* methods. The maximum width and height for an ``Image`` are :ref:`MAX_WIDTH<class_Image_constant_MAX_WIDTH>` and :ref:`MAX_HEIGHT<class_Image_constant_MAX_HEIGHT>`.

An ``Image`` cannot be assigned to a ``texture`` property of an object directly (such as :ref:`Sprite<class_Sprite>`), and has to be converted manually to an :ref:`ImageTexture<class_ImageTexture>` first.

\ **Note:** The maximum image size is 16384×16384 pixels due to graphics hardware limitations. Larger images may fail to import.

Tutoriales
--------------------

- :doc:`Importing images <../tutorials/assets_pipeline/importing_images>`

Propiedades
----------------------

+-------------------------------------+----------------------------------------+------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`data<class_Image_property_data>` | ``{"data": PoolByteArray(  ),"format": "Lum8","height": 0,"mipmaps": false,"width": 0}`` |
+-------------------------------------+----------------------------------------+------------------------------------------------------------------------------------------+

Métodos
--------------

+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`blend_rect<class_Image_method_blend_rect>` **(** :ref:`Image<class_Image>` src, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`blend_rect_mask<class_Image_method_blend_rect_mask>` **(** :ref:`Image<class_Image>` src, :ref:`Image<class_Image>` mask, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**                                                      |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`blit_rect<class_Image_method_blit_rect>` **(** :ref:`Image<class_Image>` src, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**                                                                                                  |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`blit_rect_mask<class_Image_method_blit_rect_mask>` **(** :ref:`Image<class_Image>` src, :ref:`Image<class_Image>` mask, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**                                                        |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`bumpmap_to_normalmap<class_Image_method_bumpmap_to_normalmap>` **(** :ref:`float<class_float>` bump_scale=1.0 **)**                                                                                                                                        |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`clear_mipmaps<class_Image_method_clear_mipmaps>` **(** **)**                                                                                                                                                                                               |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`compress<class_Image_method_compress>` **(** :ref:`CompressMode<enum_Image_CompressMode>` mode, :ref:`CompressSource<enum_Image_CompressSource>` source, :ref:`float<class_float>` lossy_quality **)**                                                     |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`convert<class_Image_method_convert>` **(** :ref:`Format<enum_Image_Format>` format **)**                                                                                                                                                                   |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`copy_from<class_Image_method_copy_from>` **(** :ref:`Image<class_Image>` src **)**                                                                                                                                                                         |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`create<class_Image_method_create>` **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`bool<class_bool>` use_mipmaps, :ref:`Format<enum_Image_Format>` format **)**                                                                     |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`create_from_data<class_Image_method_create_from_data>` **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`bool<class_bool>` use_mipmaps, :ref:`Format<enum_Image_Format>` format, :ref:`PoolByteArray<class_PoolByteArray>` data **)** |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`crop<class_Image_method_crop>` **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height **)**                                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`decompress<class_Image_method_decompress>` **(** **)**                                                                                                                                                                                                     |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`AlphaMode<enum_Image_AlphaMode>`    | :ref:`detect_alpha<class_Image_method_detect_alpha>` **(** **)** |const|                                                                                                                                                                                         |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`expand_x2_hq2x<class_Image_method_expand_x2_hq2x>` **(** **)**                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`fill<class_Image_method_fill>` **(** :ref:`Color<class_Color>` color **)**                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`fill_rect<class_Image_method_fill_rect>` **(** :ref:`Rect2<class_Rect2>` rect, :ref:`Color<class_Color>` color **)**                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`fix_alpha_edges<class_Image_method_fix_alpha_edges>` **(** **)**                                                                                                                                                                                           |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`flip_x<class_Image_method_flip_x>` **(** **)**                                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`flip_y<class_Image_method_flip_y>` **(** **)**                                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`generate_mipmaps<class_Image_method_generate_mipmaps>` **(** :ref:`bool<class_bool>` renormalize=false **)**                                                                                                                                               |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>` | :ref:`get_data<class_Image_method_get_data>` **(** **)** |const|                                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Format<enum_Image_Format>`          | :ref:`get_format<class_Image_method_get_format>` **(** **)** |const|                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                     | :ref:`get_height<class_Image_method_get_height>` **(** **)** |const|                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                     | :ref:`get_mipmap_offset<class_Image_method_get_mipmap_offset>` **(** :ref:`int<class_int>` mipmap **)** |const|                                                                                                                                                  |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`                 | :ref:`get_pixel<class_Image_method_get_pixel>` **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y **)** |const|                                                                                                                                              |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`                 | :ref:`get_pixelv<class_Image_method_get_pixelv>` **(** :ref:`Vector2<class_Vector2>` src **)** |const|                                                                                                                                                           |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Image<class_Image>`                 | :ref:`get_rect<class_Image_method_get_rect>` **(** :ref:`Rect2<class_Rect2>` rect **)** |const|                                                                                                                                                                  |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`             | :ref:`get_size<class_Image_method_get_size>` **(** **)** |const|                                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Rect2<class_Rect2>`                 | :ref:`get_used_rect<class_Image_method_get_used_rect>` **(** **)** |const|                                                                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                     | :ref:`get_width<class_Image_method_get_width>` **(** **)** |const|                                                                                                                                                                                               |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`has_mipmaps<class_Image_method_has_mipmaps>` **(** **)** |const|                                                                                                                                                                                           |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_compressed<class_Image_method_is_compressed>` **(** **)** |const|                                                                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_empty<class_Image_method_is_empty>` **(** **)** |const|                                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_invisible<class_Image_method_is_invisible>` **(** **)** |const|                                                                                                                                                                                         |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load<class_Image_method_load>` **(** :ref:`String<class_String>` path **)**                                                                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load_bmp_from_buffer<class_Image_method_load_bmp_from_buffer>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load_jpg_from_buffer<class_Image_method_load_jpg_from_buffer>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load_png_from_buffer<class_Image_method_load_png_from_buffer>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load_tga_from_buffer<class_Image_method_load_tga_from_buffer>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`load_webp_from_buffer<class_Image_method_load_webp_from_buffer>` **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**                                                                                                                              |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`lock<class_Image_method_lock>` **(** **)**                                                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`normalmap_to_xy<class_Image_method_normalmap_to_xy>` **(** **)**                                                                                                                                                                                           |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`premultiply_alpha<class_Image_method_premultiply_alpha>` **(** **)**                                                                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`resize<class_Image_method_resize>` **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`Interpolation<enum_Image_Interpolation>` interpolation=1 **)**                                                                                   |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`resize_to_po2<class_Image_method_resize_to_po2>` **(** :ref:`bool<class_bool>` square=false, :ref:`Interpolation<enum_Image_Interpolation>` interpolation=1 **)**                                                                                          |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Image<class_Image>`                 | :ref:`rgbe_to_srgb<class_Image_method_rgbe_to_srgb>` **(** **)**                                                                                                                                                                                                 |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`save_exr<class_Image_method_save_exr>` **(** :ref:`String<class_String>` path, :ref:`bool<class_bool>` grayscale=false **)** |const|                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`save_png<class_Image_method_save_png>` **(** :ref:`String<class_String>` path **)** |const|                                                                                                                                                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>` | :ref:`save_png_to_buffer<class_Image_method_save_png_to_buffer>` **(** **)** |const|                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`set_pixel<class_Image_method_set_pixel>` **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y, :ref:`Color<class_Color>` color **)**                                                                                                                     |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`set_pixelv<class_Image_method_set_pixelv>` **(** :ref:`Vector2<class_Vector2>` dst, :ref:`Color<class_Color>` color **)**                                                                                                                                  |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`shrink_x2<class_Image_method_shrink_x2>` **(** **)**                                                                                                                                                                                                       |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`srgb_to_linear<class_Image_method_srgb_to_linear>` **(** **)**                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`unlock<class_Image_method_unlock>` **(** **)**                                                                                                                                                                                                             |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_Image_Format:

.. _class_Image_constant_FORMAT_L8:

.. _class_Image_constant_FORMAT_LA8:

.. _class_Image_constant_FORMAT_R8:

.. _class_Image_constant_FORMAT_RG8:

.. _class_Image_constant_FORMAT_RGB8:

.. _class_Image_constant_FORMAT_RGBA8:

.. _class_Image_constant_FORMAT_RGBA4444:

.. _class_Image_constant_FORMAT_RGBA5551:

.. _class_Image_constant_FORMAT_RF:

.. _class_Image_constant_FORMAT_RGF:

.. _class_Image_constant_FORMAT_RGBF:

.. _class_Image_constant_FORMAT_RGBAF:

.. _class_Image_constant_FORMAT_RH:

.. _class_Image_constant_FORMAT_RGH:

.. _class_Image_constant_FORMAT_RGBH:

.. _class_Image_constant_FORMAT_RGBAH:

.. _class_Image_constant_FORMAT_RGBE9995:

.. _class_Image_constant_FORMAT_DXT1:

.. _class_Image_constant_FORMAT_DXT3:

.. _class_Image_constant_FORMAT_DXT5:

.. _class_Image_constant_FORMAT_RGTC_R:

.. _class_Image_constant_FORMAT_RGTC_RG:

.. _class_Image_constant_FORMAT_BPTC_RGBA:

.. _class_Image_constant_FORMAT_BPTC_RGBF:

.. _class_Image_constant_FORMAT_BPTC_RGBFU:

.. _class_Image_constant_FORMAT_PVRTC2:

.. _class_Image_constant_FORMAT_PVRTC2A:

.. _class_Image_constant_FORMAT_PVRTC4:

.. _class_Image_constant_FORMAT_PVRTC4A:

.. _class_Image_constant_FORMAT_ETC:

.. _class_Image_constant_FORMAT_ETC2_R11:

.. _class_Image_constant_FORMAT_ETC2_R11S:

.. _class_Image_constant_FORMAT_ETC2_RG11:

.. _class_Image_constant_FORMAT_ETC2_RG11S:

.. _class_Image_constant_FORMAT_ETC2_RGB8:

.. _class_Image_constant_FORMAT_ETC2_RGBA8:

.. _class_Image_constant_FORMAT_ETC2_RGB8A1:

.. _class_Image_constant_FORMAT_MAX:

enum **Format**:

- **FORMAT_L8** = **0** --- Formato de textura con una única profundidad de 8 bits que representa la luminancia.

- **FORMAT_LA8** = **1** --- Formato de textura OpenGL con dos valores, luminancia y alfa, cada uno almacenado con 8 bits.

- **FORMAT_R8** = **2** --- OpenGL texture format ``RED`` with a single component and a bitdepth of 8.

\ **Note:** When using the GLES2 backend, this uses the alpha channel instead of the red channel for storage.

- **FORMAT_RG8** = **3** --- Formato de textura OpenGL ``RG`` con dos componentes y una profundidad de bits de 8 para cada uno.

- **FORMAT_RGB8** = **4** --- Formato de textura OpenGL ``RGB`` con tres componentes, cada uno con una profundidad de 8 bits.

\ **Nota:** Al crear una :ref:`ImageTexture<class_ImageTexture>`, se realiza una conversión del espacio de color sRGB a lineal.

- **FORMAT_RGBA8** = **5** --- Formato de textura OpenGL ``RGB`` con tres componentes, cada uno con una profundidad de 8 bits.

\ **Nota:** Al crear una :ref:`ImageTexture<class_ImageTexture>`, se realiza una conversión del espacio de color sRGB a lineal.

- **FORMAT_RGBA4444** = **6** --- Formato de textura OpenGL ``RGBA`` con cuatro componentes, cada uno con una profundidad de bits de 4.

- **FORMAT_RGBA5551** = **7** --- OpenGL texture format ``GL_RGB5_A1`` where 5 bits of depth for each component of RGB and one bit for alpha.

- **FORMAT_RF** = **8** --- Formato de textura OpenGL ``GL_R32F`` donde hay un componente, un valor de 32 bits de punto flotante.

- **FORMAT_RGF** = **9** --- Formato de textura OpenGL ``GL_RG32F`` donde hay dos componentes, cada uno con valores de 32 bits de real.

- **FORMAT_RGBF** = **10** --- Formato de textura OpenGL ``GL_RGB32F`` donde hay tres componentes, cada uno con valores de 32 bits real.

- **FORMAT_RGBAF** = **11** --- Formato de textura OpenGL ``GL_RGBA32F`` donde hay cuatro componentes, cada uno con valores de 32 bits real.

- **FORMAT_RH** = **12** --- Formato de textura OpenGL ``GL_R32F`` donde hay un componente, un valor de punto flotante de 16 bits de "media precisión" real.

- **FORMAT_RGH** = **13** --- Formato de textura OpenGL ``GL_RG32F`` donde hay dos componentes, cada uno un valor de 16 bits de "media precisión" real.

- **FORMAT_RGBH** = **14** --- Formato de textura OpenGL ``GL_RGB32F`` donde hay tres componentes, cada uno de ellos un valor de 16 bits de "media precisión" real.

- **FORMAT_RGBAH** = **15** --- Formato de textura OpenGL ``GL_RGBA32F`` donde hay cuatro componentes, cada uno de ellos un valor de 16 bits de "media precisión" real.

- **FORMAT_RGBE9995** = **16** --- Un formato especial de textura OpenGL donde los tres componentes de color tienen 9 bits de precisión y los tres comparten un único exponente de 5 bits.

- **FORMAT_DXT1** = **17** --- El formato de textura `S3TC <https://en.wikipedia.org/wiki/S3_Texture_Compression>`__ que utiliza la Compresión de Bloque 1, y es la variación más pequeña de S3TC, sólo proporciona 1 bit de datos alfa y de color siendo premultiplicado con alfa.

\ **Nota:** Al crear una :ref:`ImageTexture<class_ImageTexture>`, se realiza una conversión del espacio de color sRGB a lineal.

- **FORMAT_DXT3** = **18** --- El formato de textura `S3TC <https://en.wikipedia.org/wiki/S3_Texture_Compression>`__ que utiliza la Compresión de Bloque 2, y los datos de color se interpretan como que no han sido premultiplicados por el alfa. Es muy adecuado para imágenes con transiciones alfa nítidas entre áreas translúcidas y opacas.

\ **Nota:** Al crear una :ref:`ImageTexture<class_ImageTexture>`, se realiza una conversión del espacio de color sRGB a lineal.

- **FORMAT_DXT5** = **19** --- El formato de textura `S3TC <https://en.wikipedia.org/wiki/S3_Texture_Compression>`__ también conocido como Compresión de Bloque 3 o BC3 que contiene 64 bits de datos de canal alfa seguidos de 64 bits de datos de color codificados en DXT1. Los datos de color no son premultiplicados por el alfa, igual que el DXT3. DXT5 generalmente produce resultados superiores para gradientes transparentes en comparación con DXT3.

\ **Nota:** Al crear una :ref:`ImageTexture<class_ImageTexture>`, se realiza una conversión del espacio de color sRGB a lineal.

- **FORMAT_RGTC_R** = **20** --- Formato de textura que utiliza `Compresión de textura rojo-verde <https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression>`__, normalizando los datos del canal rojo utilizando el mismo algoritmo de compresión que DXT5 utiliza para el canal alfa.

- **FORMAT_RGTC_RG** = **21** --- Formato de textura que utiliza `Compresión de textura rojo-verde <https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression>`__, normalizando los datos de los canales rojo y verde utilizando el mismo algoritmo de compresión que DXT5 utiliza para el canal alfa.

- **FORMAT_BPTC_RGBA** = **22** --- Formato de textura que utiliza la compresión `BPTC <https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression>`__ con componentes RGBA normalizados sin signo.

\ **Nota:** Al crear una :ref:`ImageTexture<class_ImageTexture>`, se realiza una conversión del espacio de color sRGB a lineal.

- **FORMAT_BPTC_RGBF** = **23** --- Formato de textura que utiliza la compresión `BPTC <https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression>`__ con componentes RGB reales firmados.

- **FORMAT_BPTC_RGBFU** = **24** --- Formato de textura que utiliza la compresión `BPTC <https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression>`__ con componentes RGB reales sin firmar.

- **FORMAT_PVRTC2** = **25** --- El formato de textura usado en las plataformas móviles soportadas por PowerVR, usa una profundidad de color de 2 bits sin alfa. Más información puede ser encontrada `aquí <https://en.wikipedia.org/wiki/PVRTC>`__.

\ **Nota:** Al crear una :ref:`ImageTexture<class_ImageTexture>`, se realiza una conversión del espacio de color sRGB a lineal.

- **FORMAT_PVRTC2A** = **26** --- Igual que `PVRTC2 <https://en.wikipedia.org/wiki/PVRTC>`__, pero con un componente alfa.

- **FORMAT_PVRTC4** = **27** --- Similar a `PVRTC2 <https://en.wikipedia.org/wiki/PVRTC>`__, pero con una profundidad de color de 4 bits y sin alfa.

- **FORMAT_PVRTC4A** = **28** --- Igual que `PVRTC4 <https://en.wikipedia.org/wiki/PVRTC>`__, pero con un componente alfa.

- **FORMAT_ETC** = **29** --- `Formato de Compresión de Textura Ericsson 1 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1>`__, también conocido como "ETC1", y es parte del estándar de gráficos OpenGL ES. Este formato no puede almacenar un canal alfa.

- **FORMAT_ETC2_R11** = **30** --- `Formato de compresión de textura Ericsson 2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__ (``R11_EAC`` variant), que proporciona un canal de datos sin firmar.

- **FORMAT_ETC2_R11S** = **31** --- `Formato de compresión de textura de Ericsson 2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__ (variante de ``SIGNED_R11_EAC``), que proporciona un canal de datos firmado.

- **FORMAT_ETC2_RG11** = **32** --- `Formato de compresión de textura de Ericsson 2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__ (``RG11_EAC`` variant), que proporciona dos canales de datos sin firmar.

- **FORMAT_ETC2_RG11S** = **33** --- `Formato de compresión de textura de Ericsson 2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__ (variante de ``SIGNED_RG11_EAC``), que proporciona dos canales de datos firmados.

- **FORMAT_ETC2_RGB8** = **34** --- `Formato de compresión de textura de Ericsson 2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__ (``RGB8`` variant), que es una continuación del ETC1 y comprime los datos del RGB888.

\ **Nota:** Al crear una :ref:`ImageTexture<class_ImageTexture>`, se realiza una conversión del espacio de color sRGB a lineal.

- **FORMAT_ETC2_RGBA8** = **35** --- `Formato de compresión de textura de Ericsson 2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__ (``RGBA8``\ variant), que comprime los datos de RGBA8888 con soporte alfa completo.

\ **Nota:** Al crear una :ref:`ImageTexture<class_ImageTexture>`, se realiza una conversión del espacio de color sRGB a lineal.

- **FORMAT_ETC2_RGB8A1** = **36** --- `Formato de compresión de textura de Ericsson 2 <https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC>`__ (``RGB8_PUNCHTHROUGH_ALPHA1`` variant), que comprime los datos de RGBA para hacer el alfa totalmente transparente o totalmente opaco.

\ **Nota:** Al crear una :ref:`ImageTexture<class_ImageTexture>`, se realiza una conversión del espacio de color sRGB a lineal.

- **FORMAT_MAX** = **37** --- Representa el tamaño del enum :ref:`Format<enum_Image_Format>`.

----

.. _enum_Image_Interpolation:

.. _class_Image_constant_INTERPOLATE_NEAREST:

.. _class_Image_constant_INTERPOLATE_BILINEAR:

.. _class_Image_constant_INTERPOLATE_CUBIC:

.. _class_Image_constant_INTERPOLATE_TRILINEAR:

.. _class_Image_constant_INTERPOLATE_LANCZOS:

enum **Interpolation**:

- **INTERPOLATE_NEAREST** = **0** --- Realiza la interpolación del vecino más cercano. Si se cambia el tamaño de la imagen, será pixelada.

- **INTERPOLATE_BILINEAR** = **1** --- Realiza una interpolación bilineal. Si se cambia el tamaño de la imagen, será borrosa. Este modo es más rápido que :ref:`INTERPOLATE_CUBIC<class_Image_constant_INTERPOLATE_CUBIC>`, pero da como resultado una menor calidad.

- **INTERPOLATE_CUBIC** = **2** --- Realiza una interpolación cúbica. Si se cambia el tamaño de la imagen, será borrosa. Este modo a menudo da mejores resultados en comparación con :ref:`INTERPOLATE_BILINEAR<class_Image_constant_INTERPOLATE_BILINEAR>`, a costa de ser más lento.

- **INTERPOLATE_TRILINEAR** = **3** --- Performs bilinear separately on the two most-suited mipmap levels, then linearly interpolates between them.

It's slower than :ref:`INTERPOLATE_BILINEAR<class_Image_constant_INTERPOLATE_BILINEAR>`, but produces higher-quality results with far fewer aliasing artifacts.

If the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image.

\ **Note:** If you intend to scale multiple copies of the original image, it's better to call :ref:`generate_mipmaps<class_Image_method_generate_mipmaps>`] on it in advance, to avoid wasting processing power in generating them again and again.

On the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image.

- **INTERPOLATE_LANCZOS** = **4** --- Realiza la interpolación de Lanczos. Es el modo de redimensionamiento de imágenes más lento, pero suele dar los mejores resultados, especialmente cuando se reducen las imágenes.

----

.. _enum_Image_AlphaMode:

.. _class_Image_constant_ALPHA_NONE:

.. _class_Image_constant_ALPHA_BIT:

.. _class_Image_constant_ALPHA_BLEND:

enum **AlphaMode**:

- **ALPHA_NONE** = **0** --- La imagen no tiene alfa.

- **ALPHA_BIT** = **1** --- La imagen almacena el alfa en un solo bit.

- **ALPHA_BLEND** = **2** --- La imagen usa el alfa.

----

.. _enum_Image_CompressMode:

.. _class_Image_constant_COMPRESS_S3TC:

.. _class_Image_constant_COMPRESS_PVRTC2:

.. _class_Image_constant_COMPRESS_PVRTC4:

.. _class_Image_constant_COMPRESS_ETC:

.. _class_Image_constant_COMPRESS_ETC2:

enum **CompressMode**:

- **COMPRESS_S3TC** = **0** --- Use la compresión S3TC.

- **COMPRESS_PVRTC2** = **1** --- Use la compresión PVRTC2.

- **COMPRESS_PVRTC4** = **2** --- Use la compresión PVRTC4.

- **COMPRESS_ETC** = **3** --- Use la compresión ETC.

- **COMPRESS_ETC2** = **4** --- Use la compresión ETC2.

----

.. _enum_Image_CompressSource:

.. _class_Image_constant_COMPRESS_SOURCE_GENERIC:

.. _class_Image_constant_COMPRESS_SOURCE_SRGB:

.. _class_Image_constant_COMPRESS_SOURCE_NORMAL:

enum **CompressSource**:

- **COMPRESS_SOURCE_GENERIC** = **0** --- La textura de la fuente (antes de la compresión) es una textura regular. Por defecto para todas las texturas.

- **COMPRESS_SOURCE_SRGB** = **1** --- La textura de la fuente (antes de la compresión) está en el espacio sRGB.

- **COMPRESS_SOURCE_NORMAL** = **2** --- La textura de la fuente (antes de la compresión) es una textura normal (por ejemplo, puede ser comprimida en dos canales).

Constantes
--------------------

.. _class_Image_constant_MAX_WIDTH:

.. _class_Image_constant_MAX_HEIGHT:

- **MAX_WIDTH** = **16384** --- El ancho máximo permitido para los recursos ``Image``.

- **MAX_HEIGHT** = **16384** --- La altura máxima permitida para los recursos ``Image``.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Image_property_data:

- :ref:`Dictionary<class_Dictionary>` **data**

+-----------+------------------------------------------------------------------------------------------+
| *Default* | ``{"data": PoolByteArray(  ),"format": "Lum8","height": 0,"mipmaps": false,"width": 0}`` |
+-----------+------------------------------------------------------------------------------------------+

Holds all the image's color data in a given format. See :ref:`Format<enum_Image_Format>` constants.

Descripciones de Métodos
------------------------------------------------

.. _class_Image_method_blend_rect:

- void **blend_rect** **(** :ref:`Image<class_Image>` src, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**

Mezcla usando Alfa ``src_rect`` de la imagen ``src`` a esta imagen en las coordenadas ``dest``.

----

.. _class_Image_method_blend_rect_mask:

- void **blend_rect_mask** **(** :ref:`Image<class_Image>` src, :ref:`Image<class_Image>` mask, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**

Mezcla usando alfa\ ``src_rect`` de la imagen ``src`` a esta imagen usando la imagen ``mask`` en las coordenadas ``dst``. Se requieren canales alfa tanto para ``src`` como para ``mask``. Los píxeles de ``dst`` y los píxeles de ``src`` se mezclarán si el valor alfa del píxel de la máscara correspondiente no es 0. La imagen ``src`` y la imagen ``mask`` ** deben** tener el mismo tamaño (ancho y alto) pero pueden tener formatos diferentes.

----

.. _class_Image_method_blit_rect:

- void **blit_rect** **(** :ref:`Image<class_Image>` src, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**

Copia ``src_rect`` de la imagen ``src`` a esta imagen en las coordenadas ``dst``.

----

.. _class_Image_method_blit_rect_mask:

- void **blit_rect_mask** **(** :ref:`Image<class_Image>` src, :ref:`Image<class_Image>` mask, :ref:`Rect2<class_Rect2>` src_rect, :ref:`Vector2<class_Vector2>` dst **)**

``src_rect`` área de bits de la imagen ``src`` a esta imagen en las coordenadas dadas por ``dst``. El pixel de ``src`` se copia en ``dst`` si el valor alfa del pixel correspondiente de ``mask`` no es 0. La imagen ``src`` y la imagen ``mask`` **deben** tener el mismo tamaño (anchura y altura) pero pueden tener formatos diferentes.

----

.. _class_Image_method_bumpmap_to_normalmap:

- void **bumpmap_to_normalmap** **(** :ref:`float<class_float>` bump_scale=1.0 **)**

Convierte un bumpmap en un mapa normal. Un bumpmap proporciona un desplazamiento de altura por píxel, mientras que un mapa normal proporciona una dirección normal por píxel.

----

.. _class_Image_method_clear_mipmaps:

- void **clear_mipmaps** **(** **)**

Elimina los mipmaps de la imagen.

----

.. _class_Image_method_compress:

- :ref:`Error<enum_@GlobalScope_Error>` **compress** **(** :ref:`CompressMode<enum_Image_CompressMode>` mode, :ref:`CompressSource<enum_Image_CompressSource>` source, :ref:`float<class_float>` lossy_quality **)**

Comprime la imagen para usar menos memoria. No se puede acceder directamente a los datos de los píxeles mientras la imagen está comprimida. Devuelve el error si el modo de compresión elegido no está disponible. Vea las constantes :ref:`CompressMode<enum_Image_CompressMode>` y :ref:`CompressSource<enum_Image_CompressSource>`.

----

.. _class_Image_method_convert:

- void **convert** **(** :ref:`Format<enum_Image_Format>` format **)**

Convierte el formato de la imagen. Ver las constantes :ref:`Format<enum_Image_Format>`.

----

.. _class_Image_method_copy_from:

- void **copy_from** **(** :ref:`Image<class_Image>` src **)**

Copia la imagen ``src`` a esta imagen.

----

.. _class_Image_method_create:

- void **create** **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`bool<class_bool>` use_mipmaps, :ref:`Format<enum_Image_Format>` format **)**

Crea una imagen vacía de un tamaño y formato determinados. Ver las constantes :ref:`Format<enum_Image_Format>`. Si ``use_mipmaps`` es ``true`` entonces genera mipmaps para esta imagen. Ver el :ref:`generate_mipmaps<class_Image_method_generate_mipmaps>`.

----

.. _class_Image_method_create_from_data:

- void **create_from_data** **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`bool<class_bool>` use_mipmaps, :ref:`Format<enum_Image_Format>` format, :ref:`PoolByteArray<class_PoolByteArray>` data **)**

Crea una nueva imagen de un tamaño y formato determinado. Ver las constantes :ref:`Format<enum_Image_Format>`. Llena la imagen con los datos en bruto dados. Si ``use_mipmaps`` es ``true`` entonces carga los mipmaps de esta imagen a partir de ``data``. Ver :ref:`generate_mipmaps<class_Image_method_generate_mipmaps>`.

----

.. _class_Image_method_crop:

- void **crop** **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height **)**

Recorta la imagen al ``width`` y ``alto`` dados. Si el tamaño especificado es mayor que el actual, el área extra se rellena con píxeles negros.

----

.. _class_Image_method_decompress:

- :ref:`Error<enum_@GlobalScope_Error>` **decompress** **(** **)**

Descomprime la imagen si está comprimida. Devuelve un error si la función de descompresión no está disponible.

----

.. _class_Image_method_detect_alpha:

- :ref:`AlphaMode<enum_Image_AlphaMode>` **detect_alpha** **(** **)** |const|

Devuelve :ref:`ALPHA_BLEND<class_Image_constant_ALPHA_BLEND>` si la imagen tiene datos para valores alfa. Devuelve :ref:`ALPHA_BIT<class_Image_constant_ALPHA_BIT>` si todos los valores alfa están almacenados en un solo bit. Devuelve :ref:`ALPHA_NONE<class_Image_constant_ALPHA_NONE>` si no se encuentran datos para valores alfa.

----

.. _class_Image_method_expand_x2_hq2x:

- void **expand_x2_hq2x** **(** **)**

Stretches the image and enlarges it by a factor of 2. No interpolation is done.

----

.. _class_Image_method_fill:

- void **fill** **(** :ref:`Color<class_Color>` color **)**

Fills the image with ``color``.

----

.. _class_Image_method_fill_rect:

- void **fill_rect** **(** :ref:`Rect2<class_Rect2>` rect, :ref:`Color<class_Color>` color **)**

Fills ``rect`` with ``color``.

----

.. _class_Image_method_fix_alpha_edges:

- void **fix_alpha_edges** **(** **)**

Mezcla píxeles con el nivel alfa bajo con píxeles cercanos.

----

.. _class_Image_method_flip_x:

- void **flip_x** **(** **)**

Voltea la imagen horizontalmente.

----

.. _class_Image_method_flip_y:

- void **flip_y** **(** **)**

Voltea la imagen verticalmente.

----

.. _class_Image_method_generate_mipmaps:

- :ref:`Error<enum_@GlobalScope_Error>` **generate_mipmaps** **(** :ref:`bool<class_bool>` renormalize=false **)**

Generates mipmaps for the image. Mipmaps are precalculated lower-resolution copies of the image that are automatically used if the image needs to be scaled down when rendered. They help improve image quality and performance when rendering. This method returns an error if the image is compressed, in a custom format, or if the image's width/height is ``0``.

\ **Note:** Mipmap generation is done on the CPU, is single-threaded and is *always* done on the main thread. This means generating mipmaps will result in noticeable stuttering during gameplay, even if :ref:`generate_mipmaps<class_Image_method_generate_mipmaps>` is called from a :ref:`Thread<class_Thread>`.

----

.. _class_Image_method_get_data:

- :ref:`PoolByteArray<class_PoolByteArray>` **get_data** **(** **)** |const|

Returns a copy of the image's raw data.

----

.. _class_Image_method_get_format:

- :ref:`Format<enum_Image_Format>` **get_format** **(** **)** |const|

Devuelve el formato de la imagen. Ver las constantes :ref:`Format<enum_Image_Format>`.

----

.. _class_Image_method_get_height:

- :ref:`int<class_int>` **get_height** **(** **)** |const|

Devuelve la altura de la imagen.

----

.. _class_Image_method_get_mipmap_offset:

- :ref:`int<class_int>` **get_mipmap_offset** **(** :ref:`int<class_int>` mipmap **)** |const|

Devuelve el desplazamiento donde el mipmap de la imagen con el índice ``mipmap`` se almacena en el diccionario ``data``.

----

.. _class_Image_method_get_pixel:

- :ref:`Color<class_Color>` **get_pixel** **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y **)** |const|

Returns the color of the pixel at ``(x, y)`` if the image is locked. If the image is unlocked, it always returns a :ref:`Color<class_Color>` with the value ``(0, 0, 0, 1.0)``. This is the same as :ref:`get_pixelv<class_Image_method_get_pixelv>`, but two integer arguments instead of a Vector2 argument.

----

.. _class_Image_method_get_pixelv:

- :ref:`Color<class_Color>` **get_pixelv** **(** :ref:`Vector2<class_Vector2>` src **)** |const|

Returns the color of the pixel at ``src`` if the image is locked. If the image is unlocked, it always returns a :ref:`Color<class_Color>` with the value ``(0, 0, 0, 1.0)``. This is the same as :ref:`get_pixel<class_Image_method_get_pixel>`, but with a Vector2 argument instead of two integer arguments.

----

.. _class_Image_method_get_rect:

- :ref:`Image<class_Image>` **get_rect** **(** :ref:`Rect2<class_Rect2>` rect **)** |const|

Devuelve una nueva imagen que es una copia del área de la imagen especificada con ``rect``.

----

.. _class_Image_method_get_size:

- :ref:`Vector2<class_Vector2>` **get_size** **(** **)** |const|

Devuelve el tamaño de la imagen (anchura y altura).

----

.. _class_Image_method_get_used_rect:

- :ref:`Rect2<class_Rect2>` **get_used_rect** **(** **)** |const|

Devuelve un :ref:`Rect2<class_Rect2>` que encierra la porción visible de la imagen, considerando cada píxel con un canal alfa no nulo como visible.

----

.. _class_Image_method_get_width:

- :ref:`int<class_int>` **get_width** **(** **)** |const|

Devuelve el ancho de la imagen.

----

.. _class_Image_method_has_mipmaps:

- :ref:`bool<class_bool>` **has_mipmaps** **(** **)** |const|

Devuelve ``true`` si la imagen ha generado mipmaps.

----

.. _class_Image_method_is_compressed:

- :ref:`bool<class_bool>` **is_compressed** **(** **)** |const|

Devuelve ``true`` si la imagen está comprimida.

----

.. _class_Image_method_is_empty:

- :ref:`bool<class_bool>` **is_empty** **(** **)** |const|

Devuelve ``true`` si la imagen no tiene datos.

----

.. _class_Image_method_is_invisible:

- :ref:`bool<class_bool>` **is_invisible** **(** **)** |const|

Devuelve ``true`` si todos los píxeles de la imagen tienen un valor alfa de 0. Devuelve ``false`` si algún píxel tiene un valor alfa superior a 0.

----

.. _class_Image_method_load:

- :ref:`Error<enum_@GlobalScope_Error>` **load** **(** :ref:`String<class_String>` path **)**

Loads an image from file ``path``. See `Supported image formats <../tutorials/assets_pipeline/importing_images.html#supported-image-formats>`__ for a list of supported image formats and limitations.

\ **Warning:** This method should only be used in the editor or in cases when you need to load external images at run-time, such as images located at the ``user://`` directory, and may not work in exported projects.

See also :ref:`ImageTexture<class_ImageTexture>` description for usage examples.

----

.. _class_Image_method_load_bmp_from_buffer:

- :ref:`Error<enum_@GlobalScope_Error>` **load_bmp_from_buffer** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

Loads an image from the binary contents of a BMP file.

\ **Note:** Godot's BMP module doesn't support 16-bit per pixel images. Only 1-bit, 4-bit, 8-bit, 24-bit, and 32-bit per pixel images are supported.

----

.. _class_Image_method_load_jpg_from_buffer:

- :ref:`Error<enum_@GlobalScope_Error>` **load_jpg_from_buffer** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

Carga una imagen del contenido binario de un archivo JPEG.

----

.. _class_Image_method_load_png_from_buffer:

- :ref:`Error<enum_@GlobalScope_Error>` **load_png_from_buffer** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

Carga una imagen del contenido binario de un archivo PNG.

----

.. _class_Image_method_load_tga_from_buffer:

- :ref:`Error<enum_@GlobalScope_Error>` **load_tga_from_buffer** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

Carga una imagen del contenido binario de un archivo TGA.

----

.. _class_Image_method_load_webp_from_buffer:

- :ref:`Error<enum_@GlobalScope_Error>` **load_webp_from_buffer** **(** :ref:`PoolByteArray<class_PoolByteArray>` buffer **)**

Carga una imagen del contenido binario de un archivo WebP.

----

.. _class_Image_method_lock:

- void **lock** **(** **)**

Locks the data for reading and writing access. Sends an error to the console if the image is not locked when reading or writing a pixel.

----

.. _class_Image_method_normalmap_to_xy:

- void **normalmap_to_xy** **(** **)**

Convierte los datos de la imagen para representar las coordenadas en un plano 3D. Esto se usa cuando la imagen representa un mapa normal. Un mapa normal puede añadir muchos detalles a una superficie tridimensional sin aumentar el número de polígonos.

----

.. _class_Image_method_premultiply_alpha:

- void **premultiply_alpha** **(** **)**

Multiplica los valores de color por los valores alfa. Los valores de color resultantes para un píxel son ``(color * alfa)/256``.

----

.. _class_Image_method_resize:

- void **resize** **(** :ref:`int<class_int>` width, :ref:`int<class_int>` height, :ref:`Interpolation<enum_Image_Interpolation>` interpolation=1 **)**

Resizes the image to the given ``width`` and ``height``. New pixels are calculated using the ``interpolation`` mode defined via :ref:`Interpolation<enum_Image_Interpolation>` constants.

----

.. _class_Image_method_resize_to_po2:

- void **resize_to_po2** **(** :ref:`bool<class_bool>` square=false, :ref:`Interpolation<enum_Image_Interpolation>` interpolation=1 **)**

Resizes the image to the nearest power of 2 for the width and height. If ``square`` is ``true`` then set width and height to be the same. New pixels are calculated using the ``interpolation`` mode defined via :ref:`Interpolation<enum_Image_Interpolation>` constants.

----

.. _class_Image_method_rgbe_to_srgb:

- :ref:`Image<class_Image>` **rgbe_to_srgb** **(** **)**

Convierte una imagen estándar RGBE (Red Green Blue Exponent) en una imagen sRGB.

----

.. _class_Image_method_save_exr:

- :ref:`Error<enum_@GlobalScope_Error>` **save_exr** **(** :ref:`String<class_String>` path, :ref:`bool<class_bool>` grayscale=false **)** |const|

Saves the image as an EXR file to ``path``. If ``grayscale`` is ``true`` and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return :ref:`@GlobalScope.ERR_UNAVAILABLE<class_@GlobalScope_constant_ERR_UNAVAILABLE>` if Godot was compiled without the TinyEXR module.

\ **Note:** The TinyEXR module is disabled in non-editor builds, which means :ref:`save_exr<class_Image_method_save_exr>` will return :ref:`@GlobalScope.ERR_UNAVAILABLE<class_@GlobalScope_constant_ERR_UNAVAILABLE>` when it is called from an exported project.

----

.. _class_Image_method_save_png:

- :ref:`Error<enum_@GlobalScope_Error>` **save_png** **(** :ref:`String<class_String>` path **)** |const|

Guarda la imagen como un archivo PNG en ``path``.

----

.. _class_Image_method_save_png_to_buffer:

- :ref:`PoolByteArray<class_PoolByteArray>` **save_png_to_buffer** **(** **)** |const|

----

.. _class_Image_method_set_pixel:

- void **set_pixel** **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y, :ref:`Color<class_Color>` color **)**

Sets the :ref:`Color<class_Color>` of the pixel at ``(x, y)`` if the image is locked. Example:

::

    var img = Image.new()
    img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
    img.lock()
    img.set_pixel(x, y, color) # Works
    img.unlock()
    img.set_pixel(x, y, color) # Does not have an effect

----

.. _class_Image_method_set_pixelv:

- void **set_pixelv** **(** :ref:`Vector2<class_Vector2>` dst, :ref:`Color<class_Color>` color **)**

Sets the :ref:`Color<class_Color>` of the pixel at ``(dst.x, dst.y)`` if the image is locked. Note that the ``dst`` values must be integers. Example:

::

    var img = Image.new()
    img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
    img.lock()
    img.set_pixelv(Vector2(x, y), color) # Works
    img.unlock()
    img.set_pixelv(Vector2(x, y), color) # Does not have an effect

----

.. _class_Image_method_shrink_x2:

- void **shrink_x2** **(** **)**

Reduce la imagen en un factor de 2.

----

.. _class_Image_method_srgb_to_linear:

- void **srgb_to_linear** **(** **)**

Convierte los datos en bruto del espacio de color sRGB a una escala lineal.

----

.. _class_Image_method_unlock:

- void **unlock** **(** **)**

Unlocks the data and prevents changes.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
