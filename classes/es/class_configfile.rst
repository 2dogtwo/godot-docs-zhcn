:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the ConfigFile.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ConfigFile:

ConfigFile
==========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Clase de ayuda para manejar los archivos de tipo INI.

Descripción
----------------------

This helper class can be used to store :ref:`Variant<class_Variant>` values on the filesystem using INI-style formatting. The stored values are identified by a section and a key:

::

    [section]
    some_key=42
    string_example="Hello World!"
    a_vector=Vector3( 1, 0, 2 )

The stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.

The following example shows how to create a simple ``ConfigFile`` and save it on disk:

::

    # Create new ConfigFile object.
    var config = ConfigFile.new()
    
    # Store some values.
    config.set_value("Player1", "player_name", "Steve")
    config.set_value("Player1", "best_score", 10)
    config.set_value("Player2", "player_name", "V3geta")
    config.set_value("Player2", "best_score", 9001)
    
    # Save it to a file (overwrite if already exists).
    config.save("user://scores.cfg")

This example shows how the above file could be loaded:

::

    var score_data = {}
    var config = ConfigFile.new()
    
    # Load data from a file.
    var err = config.load("user://scores.cfg")
    
    # If the file didn't load, ignore it.
    if err != OK:
        return
    
    # Iterate over all sections.
    for player in config.get_sections():
        # Fetch the data for each section.
        var player_name = config.get_value(player, "player_name")
        var player_score = config.get_value(player, "best_score")
        score_data[player_name] = player_score

Any operation that mutates the ConfigFile such as :ref:`set_value<class_ConfigFile_method_set_value>`, :ref:`clear<class_ConfigFile_method_clear>`, or :ref:`erase_section<class_ConfigFile_method_erase_section>`, only changes what is loaded in memory. If you want to write the change to a file, you have to save the changes with :ref:`save<class_ConfigFile_method_save>`, :ref:`save_encrypted<class_ConfigFile_method_save_encrypted>`, or :ref:`save_encrypted_pass<class_ConfigFile_method_save_encrypted_pass>`.

Keep in mind that section and property names can't contain spaces. Anything after a space will be ignored on save and on load.

ConfigFiles can also contain manually written comment lines starting with a semicolon (``;``). Those lines will be ignored when parsing the file. Note that comments will be lost when saving the ConfigFile. This can still be useful for dedicated server configuration files, which are typically never overwritten without explicit user action.

\ **Note:** The file extension given to a ConfigFile does not have any impact on its formatting or behavior. By convention, the ``.cfg`` extension is used here, but any other extension such as ``.ini`` is also valid. Since neither ``.cfg`` nor ``.ini`` are standardized, Godot's ConfigFile formatting may differ from files written by other programs.

Métodos
--------------

+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`clear<class_ConfigFile_method_clear>` **(** **)**                                                                                                                                  |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`erase_section<class_ConfigFile_method_erase_section>` **(** :ref:`String<class_String>` section **)**                                                                              |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`erase_section_key<class_ConfigFile_method_erase_section_key>` **(** :ref:`String<class_String>` section, :ref:`String<class_String>` key **)**                                     |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolStringArray<class_PoolStringArray>` | :ref:`get_section_keys<class_ConfigFile_method_get_section_keys>` **(** :ref:`String<class_String>` section **)** |const|                                                                |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolStringArray<class_PoolStringArray>` | :ref:`get_sections<class_ConfigFile_method_get_sections>` **(** **)** |const|                                                                                                            |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                 | :ref:`get_value<class_ConfigFile_method_get_value>` **(** :ref:`String<class_String>` section, :ref:`String<class_String>` key, :ref:`Variant<class_Variant>` default=null **)** |const| |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`has_section<class_ConfigFile_method_has_section>` **(** :ref:`String<class_String>` section **)** |const|                                                                          |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`has_section_key<class_ConfigFile_method_has_section_key>` **(** :ref:`String<class_String>` section, :ref:`String<class_String>` key **)** |const|                                 |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`         | :ref:`load<class_ConfigFile_method_load>` **(** :ref:`String<class_String>` path **)**                                                                                                   |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`         | :ref:`load_encrypted<class_ConfigFile_method_load_encrypted>` **(** :ref:`String<class_String>` path, :ref:`PoolByteArray<class_PoolByteArray>` key **)**                                |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`         | :ref:`load_encrypted_pass<class_ConfigFile_method_load_encrypted_pass>` **(** :ref:`String<class_String>` path, :ref:`String<class_String>` password **)**                               |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`         | :ref:`parse<class_ConfigFile_method_parse>` **(** :ref:`String<class_String>` data **)**                                                                                                 |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`         | :ref:`save<class_ConfigFile_method_save>` **(** :ref:`String<class_String>` path **)**                                                                                                   |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`         | :ref:`save_encrypted<class_ConfigFile_method_save_encrypted>` **(** :ref:`String<class_String>` path, :ref:`PoolByteArray<class_PoolByteArray>` key **)**                                |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`         | :ref:`save_encrypted_pass<class_ConfigFile_method_save_encrypted_pass>` **(** :ref:`String<class_String>` path, :ref:`String<class_String>` password **)**                               |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`set_value<class_ConfigFile_method_set_value>` **(** :ref:`String<class_String>` section, :ref:`String<class_String>` key, :ref:`Variant<class_Variant>` value **)**                |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Descripciones de Métodos
------------------------------------------------

.. _class_ConfigFile_method_clear:

- void **clear** **(** **)**

Removes the entire contents of the config.

----

.. _class_ConfigFile_method_erase_section:

- void **erase_section** **(** :ref:`String<class_String>` section **)**

Borra la sección especificada junto con todos los pares clave-valor que hay dentro. Provoca un error si la sección no existe.

----

.. _class_ConfigFile_method_erase_section_key:

- void **erase_section_key** **(** :ref:`String<class_String>` section, :ref:`String<class_String>` key **)**

Borra la clave especificada en una sección. Provoca un error si la sección o la clave no existen.

----

.. _class_ConfigFile_method_get_section_keys:

- :ref:`PoolStringArray<class_PoolStringArray>` **get_section_keys** **(** :ref:`String<class_String>` section **)** |const|

Devuelve un array de todos los identificadores clave definidos en la sección especificada. Levanta un error y devuelve un array vacío si la sección no existe.

----

.. _class_ConfigFile_method_get_sections:

- :ref:`PoolStringArray<class_PoolStringArray>` **get_sections** **(** **)** |const|

Devuelve un array de todos los identificadores de sección definidos.

----

.. _class_ConfigFile_method_get_value:

- :ref:`Variant<class_Variant>` **get_value** **(** :ref:`String<class_String>` section, :ref:`String<class_String>` key, :ref:`Variant<class_Variant>` default=null **)** |const|

Devuelve el valor actual de la sección y la clave especificadas. Si la sección o la clave no existen, el método devuelve el valor de reserva ``default``. Si no se especifica ``default`` o se establece en ``null``, también se produce un error.

----

.. _class_ConfigFile_method_has_section:

- :ref:`bool<class_bool>` **has_section** **(** :ref:`String<class_String>` section **)** |const|

Devuelve ``true`` si existe la sección especificada.

----

.. _class_ConfigFile_method_has_section_key:

- :ref:`bool<class_bool>` **has_section_key** **(** :ref:`String<class_String>` section, :ref:`String<class_String>` key **)** |const|

Devuelve ``true`` si existe el par de claves de lasección especificada.

----

.. _class_ConfigFile_method_load:

- :ref:`Error<enum_@GlobalScope_Error>` **load** **(** :ref:`String<class_String>` path **)**

Carga el archivo de configuración especificado como parámetro. El contenido del archivo es analizado y cargado en el objeto ``ConfigFile`` al que se llamó el método.

Devuelve una de las constantes de código :ref:`Error<enum_@GlobalScope_Error>` (``OK`` en caso de éxito).

----

.. _class_ConfigFile_method_load_encrypted:

- :ref:`Error<enum_@GlobalScope_Error>` **load_encrypted** **(** :ref:`String<class_String>` path, :ref:`PoolByteArray<class_PoolByteArray>` key **)**

Carga el archivo de configuración cifrado especificado como parámetro, utilizando la ``clave`` proporcionada para descifrarlo. El contenido del archivo es analizado y cargado en el objeto ``ConfigFile`` al que el método fue llamado.

Devuelve una de las constantes de código :ref:`Error<enum_@GlobalScope_Error>` (``OK`` en caso de éxito).

----

.. _class_ConfigFile_method_load_encrypted_pass:

- :ref:`Error<enum_@GlobalScope_Error>` **load_encrypted_pass** **(** :ref:`String<class_String>` path, :ref:`String<class_String>` password **)**

Carga el archivo de configuración cifrado especificado como parámetro, utilizando la ``password`` proporcionado para descifrarlo. El contenido del archivo es analizado y cargado en el objeto ``ConfigFile`` al que el método fue llamado.

Devuelve una de las constantes de código :ref:`Error<enum_@GlobalScope_Error>` (``OK`` en caso de éxito).

----

.. _class_ConfigFile_method_parse:

- :ref:`Error<enum_@GlobalScope_Error>` **parse** **(** :ref:`String<class_String>` data **)**

Parses the passed string as the contents of a config file. The string is parsed and loaded in the ConfigFile object which the method was called on.

Returns one of the :ref:`Error<enum_@GlobalScope_Error>` code constants (``OK`` on success).

----

.. _class_ConfigFile_method_save:

- :ref:`Error<enum_@GlobalScope_Error>` **save** **(** :ref:`String<class_String>` path **)**

Guarda el contenido del objeto ``ConfigFile`` en el archivo especificado como parámetro. El archivo de salida utiliza una estructura tipo INI.

Devuelve una de las constantes de código :ref:`Error<enum_@GlobalScope_Error>` (``OK`` en el éxito).

----

.. _class_ConfigFile_method_save_encrypted:

- :ref:`Error<enum_@GlobalScope_Error>` **save_encrypted** **(** :ref:`String<class_String>` path, :ref:`PoolByteArray<class_PoolByteArray>` key **)**

Guarda el contenido del objeto ``ConfigFile`` en el archivo cifrado AES-256 especificado como parámetro, utilizando la ``key`` proporcionada para cifrarlo. El archivo de salida utiliza una estructura tipo INI.

Devuelve una de las constantes de código :ref:`Error<enum_@GlobalScope_Error>` (``OK`` en caso de éxito).

----

.. _class_ConfigFile_method_save_encrypted_pass:

- :ref:`Error<enum_@GlobalScope_Error>` **save_encrypted_pass** **(** :ref:`String<class_String>` path, :ref:`String<class_String>` password **)**

Guarda el contenido del objeto ``ConfigFile`` en el archivo encriptado AES-256 especificado como parámetro, utilizando la ``password`` proporcionada para encriptarlo. El archivo de salida utiliza una estructura de tipo INI.

Devuelve una de las constantes de código :ref:`Error<enum_@GlobalScope_Error>` (``OK`` en caso de éxito).

----

.. _class_ConfigFile_method_set_value:

- void **set_value** **(** :ref:`String<class_String>` section, :ref:`String<class_String>` key, :ref:`Variant<class_Variant>` value **)**

Asigna un valor a la clave especificada de la sección especificada. Si la sección o la clave no existen, se crean. Al pasar un valor ``null`` se borra la clave especificada si existe, y se borra la sección si termina vacía una vez que se ha eliminado la clave.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
