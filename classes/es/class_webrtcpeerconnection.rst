:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the WebRTCPeerConnection.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_WebRTCPeerConnection:

WebRTCPeerConnection
====================

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`WebRTCPeerConnectionGDNative<class_WebRTCPeerConnectionGDNative>`

Interfaz a una conexión de pares WebRTC.

Descripción
----------------------

Una conexión WebRTC entre la computadora local y un par remoto. Proporciona una interfaz para conectar, mantener y monitorear la conexión.

Establecer una conexión WebRTC entre dos pares de ahora en adelante) puede no parecer una tarea trivial, pero puede ser dividida en 3 pasos principales:

- El par que quiere iniciar la conexión (``A`` de ahora en adelante) crea una oferta y la envía al otro par (``B`` de ahora en adelante).

- ``B`` recibe la oferta, la genera y la responde, y la envía a ``A``).

- ``A`` y ``B`` luego generan e intercambian candidatos ICE entre sí.

Después de estos pasos, la conexión debe conectarse. Sigue leyendo o mira el tutorial para más información.

Métodos
--------------

+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`                             | :ref:`add_ice_candidate<class_WebRTCPeerConnection_method_add_ice_candidate>` **(** :ref:`String<class_String>` media, :ref:`int<class_int>` index, :ref:`String<class_String>` name **)** |
+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                              | :ref:`close<class_WebRTCPeerConnection_method_close>` **(** **)**                                                                                                                          |
+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`WebRTCDataChannel<class_WebRTCDataChannel>`                 | :ref:`create_data_channel<class_WebRTCPeerConnection_method_create_data_channel>` **(** :ref:`String<class_String>` label, :ref:`Dictionary<class_Dictionary>` options={ } **)**           |
+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`                             | :ref:`create_offer<class_WebRTCPeerConnection_method_create_offer>` **(** **)**                                                                                                            |
+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ConnectionState<enum_WebRTCPeerConnection_ConnectionState>` | :ref:`get_connection_state<class_WebRTCPeerConnection_method_get_connection_state>` **(** **)** |const|                                                                                    |
+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`                             | :ref:`initialize<class_WebRTCPeerConnection_method_initialize>` **(** :ref:`Dictionary<class_Dictionary>` configuration={ } **)**                                                          |
+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`                             | :ref:`poll<class_WebRTCPeerConnection_method_poll>` **(** **)**                                                                                                                            |
+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`                             | :ref:`set_local_description<class_WebRTCPeerConnection_method_set_local_description>` **(** :ref:`String<class_String>` type, :ref:`String<class_String>` sdp **)**                        |
+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`                             | :ref:`set_remote_description<class_WebRTCPeerConnection_method_set_remote_description>` **(** :ref:`String<class_String>` type, :ref:`String<class_String>` sdp **)**                      |
+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_WebRTCPeerConnection_signal_data_channel_received:

- **data_channel_received** **(** :ref:`Object<class_Object>` channel **)**

Emitido cuando se recibe un nuevo canal en banda, es decir, cuando el canal fue creado con ``negotiated: false`` (por defecto).

El objeto será una instancia de :ref:`WebRTCDataChannel<class_WebRTCDataChannel>`. Debe mantener una referencia de él o se cerrará automáticamente. Ver :ref:`create_data_channel<class_WebRTCPeerConnection_method_create_data_channel>`.

----

.. _class_WebRTCPeerConnection_signal_ice_candidate_created:

- **ice_candidate_created** **(** :ref:`String<class_String>` media, :ref:`int<class_int>` index, :ref:`String<class_String>` name **)**

Emitido cuando se ha creado un nuevo candidato de la ICE. Los tres parámetros deben ser pasados al par remoto a través del servidor de señales.

----

.. _class_WebRTCPeerConnection_signal_session_description_created:

- **session_description_created** **(** :ref:`String<class_String>` type, :ref:`String<class_String>` sdp **)**

Emitido después de una llamada exitosa a :ref:`create_offer<class_WebRTCPeerConnection_method_create_offer>` o :ref:`set_remote_description<class_WebRTCPeerConnection_method_set_remote_description>` (cuando genera una respuesta). Los parámetros deben ser pasados a :ref:`set_local_description<class_WebRTCPeerConnection_method_set_local_description>` en este objeto, y enviados al par remoto a través del servidor de señales.

Enumeraciones
--------------------------

.. _enum_WebRTCPeerConnection_ConnectionState:

.. _class_WebRTCPeerConnection_constant_STATE_NEW:

.. _class_WebRTCPeerConnection_constant_STATE_CONNECTING:

.. _class_WebRTCPeerConnection_constant_STATE_CONNECTED:

.. _class_WebRTCPeerConnection_constant_STATE_DISCONNECTED:

.. _class_WebRTCPeerConnection_constant_STATE_FAILED:

.. _class_WebRTCPeerConnection_constant_STATE_CLOSED:

enum **ConnectionState**:

- **STATE_NEW** = **0** --- La conexión es nueva, se pueden crear canales de datos y una oferta en este estado.

- **STATE_CONNECTING** = **1** --- El par está conectando, el ICE está en marcha, ninguno de los transportes ha fallado.

- **STATE_CONNECTED** = **2** --- El par está conectado, todos los transportes de ICE están conectados.

- **STATE_DISCONNECTED** = **3** --- Al menos un transporte ICE está desconectado.

- **STATE_FAILED** = **4** --- Uno o más de los transportes ICE fallaron.

- **STATE_CLOSED** = **5** --- La conexión entre pares se cierra (después de llamar a :ref:`close<class_WebRTCPeerConnection_method_close>` por ejemplo).

Descripciones de Métodos
------------------------------------------------

.. _class_WebRTCPeerConnection_method_add_ice_candidate:

- :ref:`Error<enum_@GlobalScope_Error>` **add_ice_candidate** **(** :ref:`String<class_String>` media, :ref:`int<class_int>` index, :ref:`String<class_String>` name **)**

Añade un candidato de hielo generado por un par remoto (y recibido a través del servidor de señales). Ver :ref:`ice_candidate_created<class_WebRTCPeerConnection_signal_ice_candidate_created>`.

----

.. _class_WebRTCPeerConnection_method_close:

- void **close** **(** **)**

Close the peer connection and all data channels associated with it.

\ **Note:** You cannot reuse this object for a new connection unless you call :ref:`initialize<class_WebRTCPeerConnection_method_initialize>`.

----

.. _class_WebRTCPeerConnection_method_create_data_channel:

- :ref:`WebRTCDataChannel<class_WebRTCDataChannel>` **create_data_channel** **(** :ref:`String<class_String>` label, :ref:`Dictionary<class_Dictionary>` options={ } **)**

Returns a new :ref:`WebRTCDataChannel<class_WebRTCDataChannel>` (or ``null`` on failure) with given ``label`` and optionally configured via the ``options`` dictionary. This method can only be called when the connection is in state :ref:`STATE_NEW<class_WebRTCPeerConnection_constant_STATE_NEW>`.

There are two ways to create a working data channel: either call :ref:`create_data_channel<class_WebRTCPeerConnection_method_create_data_channel>` on only one of the peer and listen to :ref:`data_channel_received<class_WebRTCPeerConnection_signal_data_channel_received>` on the other, or call :ref:`create_data_channel<class_WebRTCPeerConnection_method_create_data_channel>` on both peers, with the same values, and the ``negotiated`` option set to ``true``.

Valid ``options`` are:

::

    {
        "negotiated": true, # When set to true (default off), means the channel is negotiated out of band. "id" must be set too. "data_channel_received" will not be called.
        "id": 1, # When "negotiated" is true this value must also be set to the same value on both peer.
    
        # Only one of maxRetransmits and maxPacketLifeTime can be specified, not both. They make the channel unreliable (but also better at real time).
        "maxRetransmits": 1, # Specify the maximum number of attempt the peer will make to retransmits packets if they are not acknowledged.
        "maxPacketLifeTime": 100, # Specify the maximum amount of time before giving up retransmitions of unacknowledged packets (in milliseconds).
        "ordered": true, # When in unreliable mode (i.e. either "maxRetransmits" or "maxPacketLifetime" is set), "ordered" (true by default) specify if packet ordering is to be enforced.
    
        "protocol": "my-custom-protocol", # A custom sub-protocol string for this channel.
    }

\ **Note:** You must keep a reference to channels created this way, or it will be closed.

----

.. _class_WebRTCPeerConnection_method_create_offer:

- :ref:`Error<enum_@GlobalScope_Error>` **create_offer** **(** **)**

Crea una nueva oferta SDP para iniciar una conexión WebRTC con un par remoto. Al menos una :ref:`WebRTCDataChannel<class_WebRTCDataChannel>` debe haber sido creada antes de llamar a este método.

Si esta función devuelve :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`, se llamará a :ref:`session_description_created<class_WebRTCPeerConnection_signal_session_description_created>` cuando la sesión esté lista para ser enviada.

----

.. _class_WebRTCPeerConnection_method_get_connection_state:

- :ref:`ConnectionState<enum_WebRTCPeerConnection_ConnectionState>` **get_connection_state** **(** **)** |const|

Devuelve el estado de conexión. Ver :ref:`ConnectionState<enum_WebRTCPeerConnection_ConnectionState>`.

----

.. _class_WebRTCPeerConnection_method_initialize:

- :ref:`Error<enum_@GlobalScope_Error>` **initialize** **(** :ref:`Dictionary<class_Dictionary>` configuration={ } **)**

Re-initialize this peer connection, closing any previously active connection, and going back to state :ref:`STATE_NEW<class_WebRTCPeerConnection_constant_STATE_NEW>`. A dictionary of ``options`` can be passed to configure the peer connection.

Valid ``options`` are:

::

    {
        "iceServers": [
            {
                "urls": [ "stun:stun.example.com:3478" ], # One or more STUN servers.
            },
            {
                "urls": [ "turn:turn.example.com:3478" ], # One or more TURN servers.
                "username": "a_username", # Optional username for the TURN server.
                "credential": "a_password", # Optional password for the TURN server.
            }
        ]
    }

----

.. _class_WebRTCPeerConnection_method_poll:

- :ref:`Error<enum_@GlobalScope_Error>` **poll** **(** **)**

Llama a este método con frecuencia (por ejemplo, en :ref:`Node._process<class_Node_method__process>` o :ref:`Node._physics_process<class_Node_method__physics_process>`) para recibir correctamente las señales.

----

.. _class_WebRTCPeerConnection_method_set_local_description:

- :ref:`Error<enum_@GlobalScope_Error>` **set_local_description** **(** :ref:`String<class_String>` type, :ref:`String<class_String>` sdp **)**

Establece la descripción del SDP del par local. Esto debe ser llamado en respuesta a :ref:`session_description_created<class_WebRTCPeerConnection_signal_session_description_created>`.

Después de llamar a esta función el par empezará a emitir :ref:`ice_candidate_created<class_WebRTCPeerConnection_signal_ice_candidate_created>` (a menos que se devuelva un :ref:`Error<enum_@GlobalScope_Error>` diferente de :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`).

----

.. _class_WebRTCPeerConnection_method_set_remote_description:

- :ref:`Error<enum_@GlobalScope_Error>` **set_remote_description** **(** :ref:`String<class_String>` type, :ref:`String<class_String>` sdp **)**

Establece la descripción SDP del par remoto. Esto debe ser llamado con los valores generados por un par remoto y recibidos por el servidor de señales.

Si ``type`` es ``offer`` el par emitirá :ref:`session_description_created<class_WebRTCPeerConnection_signal_session_description_created>` con la respuesta apropiada.

Si ``type`` es ``answer`` el par empezará a emitir :ref:`ice_candidate_created<class_WebRTCPeerConnection_signal_ice_candidate_created>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
