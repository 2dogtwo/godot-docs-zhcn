:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PacketPeerDTLS.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PacketPeerDTLS:

PacketPeerDTLS
==============

**Inherits:** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Paquete de pares DTLS.

Descripción
----------------------

This class represents a DTLS peer connection. It can be used to connect to a DTLS server, and is returned by :ref:`DTLSServer.take_connection<class_DTLSServer_method_take_connection>`.

\ **Warning:** SSL/TLS certificate revocation and certificate pinning are currently not supported. Revoked certificates are accepted as long as they are otherwise valid. If this is a concern, you may want to use automatically managed certificates with a short validity period.

Métodos
--------------

+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`connect_to_peer<class_PacketPeerDTLS_method_connect_to_peer>` **(** :ref:`PacketPeerUDP<class_PacketPeerUDP>` packet_peer, :ref:`bool<class_bool>` validate_certs=true, :ref:`String<class_String>` for_hostname="", :ref:`X509Certificate<class_X509Certificate>` valid_certificate=null **)** |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`disconnect_from_peer<class_PacketPeerDTLS_method_disconnect_from_peer>` **(** **)**                                                                                                                                                                                                             |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Status<enum_PacketPeerDTLS_Status>` | :ref:`get_status<class_PacketPeerDTLS_method_get_status>` **(** **)** |const|                                                                                                                                                                                                                         |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`poll<class_PacketPeerDTLS_method_poll>` **(** **)**                                                                                                                                                                                                                                             |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_PacketPeerDTLS_Status:

.. _class_PacketPeerDTLS_constant_STATUS_DISCONNECTED:

.. _class_PacketPeerDTLS_constant_STATUS_HANDSHAKING:

.. _class_PacketPeerDTLS_constant_STATUS_CONNECTED:

.. _class_PacketPeerDTLS_constant_STATUS_ERROR:

.. _class_PacketPeerDTLS_constant_STATUS_ERROR_HOSTNAME_MISMATCH:

enum **Status**:

- **STATUS_DISCONNECTED** = **0** --- Un estado que representa un ``PacketPeerDTLS`` que está desconectado.

- **STATUS_HANDSHAKING** = **1** --- Un estado que representa un ``PacketPeerDTLS`` que está actualmente realizando el handshake con un par remoto.

- **STATUS_CONNECTED** = **2** --- Un estado que representa un ``PacketPeerDTLS`` que está conectado a un par remoto.

- **STATUS_ERROR** = **3** --- Un estado que representa un ``PacketPeerDTLS`` en un estado de error genérico.

- **STATUS_ERROR_HOSTNAME_MISMATCH** = **4** --- Un estado de error que muestra una falta de coincidencia en el dominio del certificado DTLS presentado por el host y el dominio solicitado para la validación.

Descripciones de Métodos
------------------------------------------------

.. _class_PacketPeerDTLS_method_connect_to_peer:

- :ref:`Error<enum_@GlobalScope_Error>` **connect_to_peer** **(** :ref:`PacketPeerUDP<class_PacketPeerUDP>` packet_peer, :ref:`bool<class_bool>` validate_certs=true, :ref:`String<class_String>` for_hostname="", :ref:`X509Certificate<class_X509Certificate>` valid_certificate=null **)**

Conecta un ``peer`` comenzando el handshake de DTLS usando el :ref:`PacketPeerUDP<class_PacketPeerUDP>` subyacente que debe ser conectado (ver :ref:`PacketPeerUDP.connect_to_host<class_PacketPeerUDP_method_connect_to_host>`). Si ``validate_certs`` es ``true``, ``PacketPeerDTLS`` validará que el certificado presentado por el par remoto y lo hará coincidir con el argumento ``for_hostname``. Puede especificar un :ref:`X509Certificate<class_X509Certificate>` personalizado para utilizarlo en la validación mediante el argumento ``valid_certificate``.

----

.. _class_PacketPeerDTLS_method_disconnect_from_peer:

- void **disconnect_from_peer** **(** **)**

Desconecta este par, terminando la sesión de DTLS.

----

.. _class_PacketPeerDTLS_method_get_status:

- :ref:`Status<enum_PacketPeerDTLS_Status>` **get_status** **(** **)** |const|

Devuelve el estado de la conexión. Ver :ref:`Status<enum_PacketPeerDTLS_Status>` para los valores.

----

.. _class_PacketPeerDTLS_method_poll:

- void **poll** **(** **)**

Sondea la conexión para comprobar si hay paquetes entrantes. Llama a esto con frecuencia para actualizar el estado y mantener la conexión en funcionamiento.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
