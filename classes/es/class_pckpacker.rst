:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PCKPacker.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PCKPacker:

PCKPacker
=========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Crea paquetes que pueden ser cargados en un proyecto en curso.

Descripción
----------------------

El ``PCKPacker`` se utiliza para crear paquetes que pueden ser cargados en un proyecto en ejecución utilizando el :ref:`ProjectSettings.load_resource_pack<class_ProjectSettings_method_load_resource_pack>`.

::

    var packer = PCKPacker.new()
    packer.pck_start("test.pck")
    packer.add_file("res://texto.txt", "texto.txt")
    packer.flush()

El anterior ``PCKPacker`` crea el paquete ``test.pck``, y luego agrega un archivo llamado ``text.txt`` en la raíz del paquete.

Métodos
--------------

+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`add_file<class_PCKPacker_method_add_file>` **(** :ref:`String<class_String>` pck_path, :ref:`String<class_String>` source_path **)** |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`flush<class_PCKPacker_method_flush>` **(** :ref:`bool<class_bool>` verbose=false **)**                                               |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`pck_start<class_PCKPacker_method_pck_start>` **(** :ref:`String<class_String>` pck_name, :ref:`int<class_int>` alignment=0 **)**     |
+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+

Descripciones de Métodos
------------------------------------------------

.. _class_PCKPacker_method_add_file:

- :ref:`Error<enum_@GlobalScope_Error>` **add_file** **(** :ref:`String<class_String>` pck_path, :ref:`String<class_String>` source_path **)**

Añade el archivo ``source_path`` al paquete PCK actual en la ruta interna ``pck_path`` (debe comenzar con ``res://``).

----

.. _class_PCKPacker_method_flush:

- :ref:`Error<enum_@GlobalScope_Error>` **flush** **(** :ref:`bool<class_bool>` verbose=false **)**

Escribe los archivos especificados usando todas las llamadas a :ref:`add_file<class_PCKPacker_method_add_file>` desde la última descarga. Si ``verbose`` es ``true``, se imprimirá una lista de los archivos añadidos en la consola para facilitar la depuración.

----

.. _class_PCKPacker_method_pck_start:

- :ref:`Error<enum_@GlobalScope_Error>` **pck_start** **(** :ref:`String<class_String>` pck_name, :ref:`int<class_int>` alignment=0 **)**

Crea un nuevo archivo PCK con el nombre ``pck_name``. La extensión del archivo ``.pck`` no se añade automáticamente, por lo que debe formar parte de ``pck_name`` (aunque no es obligatorio).

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
