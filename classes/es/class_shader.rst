:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Shader.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Shader:

Shader
======

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`VisualShader<class_VisualShader>`

Un programa shader personalizado.

Descripción
----------------------

Esta clase permite definir un programa de shader personalizado que puede ser usado por un :ref:`ShaderMaterial<class_ShaderMaterial>`. Los sombreadores le permiten escribir su propio comportamiento personalizado para renderizar objetos o actualizar la información de las partículas. Para una explicación detallada y el uso, por favor vea los tutoriales enlazados a continuación.

Tutoriales
--------------------

- :doc:`../tutorials/shaders/index`

- :doc:`../tutorials/shaders/introduction_to_shaders`

Propiedades
----------------------

+-----------------------------+-------------------------------------------------------------+--------+
| :ref:`String<class_String>` | :ref:`code<class_Shader_property_code>`                     | ``""`` |
+-----------------------------+-------------------------------------------------------------+--------+
| :ref:`String<class_String>` | :ref:`custom_defines<class_Shader_property_custom_defines>` | ``""`` |
+-----------------------------+-------------------------------------------------------------+--------+

Métodos
--------------

+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Texture<class_Texture>` | :ref:`get_default_texture_param<class_Shader_method_get_default_texture_param>` **(** :ref:`String<class_String>` param **)** |const|                                |
+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Mode<enum_Shader_Mode>` | :ref:`get_mode<class_Shader_method_get_mode>` **(** **)** |const|                                                                                                    |
+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`has_param<class_Shader_method_has_param>` **(** :ref:`String<class_String>` name **)** |const|                                                                 |
+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_default_texture_param<class_Shader_method_set_default_texture_param>` **(** :ref:`String<class_String>` param, :ref:`Texture<class_Texture>` texture **)** |
+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_Shader_Mode:

.. _class_Shader_constant_MODE_SPATIAL:

.. _class_Shader_constant_MODE_CANVAS_ITEM:

.. _class_Shader_constant_MODE_PARTICLES:

enum **Mode**:

- **MODE_SPATIAL** = **0** --- Modo utilizado para dibujar todos los objetos 3D.

- **MODE_CANVAS_ITEM** = **1** --- El modo utilizado para dibujar todos los objetos 2D.

- **MODE_PARTICLES** = **2** --- Modo utilizado para calcular la información de las partículas en base a cada una de ellas. No se usa para dibujar.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Shader_property_code:

- :ref:`String<class_String>` **code**

+-----------+-----------------+
| *Default* | ``""``          |
+-----------+-----------------+
| *Setter*  | set_code(value) |
+-----------+-----------------+
| *Getter*  | get_code()      |
+-----------+-----------------+

Devuelve el código del shader tal y como lo ha escrito el usuario, no el código generado completo usado internamente.

----

.. _class_Shader_property_custom_defines:

- :ref:`String<class_String>` **custom_defines**

+-----------+---------------------------+
| *Default* | ``""``                    |
+-----------+---------------------------+
| *Setter*  | set_custom_defines(value) |
+-----------+---------------------------+
| *Getter*  | get_custom_defines()      |
+-----------+---------------------------+

Returns the shader's custom defines. Custom defines can be used in Godot to add GLSL preprocessor directives (e.g: extensions) required for the shader logic.

\ **Note:** Custom defines are not validated by the Godot shader parser, so care should be taken when using them.

Descripciones de Métodos
------------------------------------------------

.. _class_Shader_method_get_default_texture_param:

- :ref:`Texture<class_Texture>` **get_default_texture_param** **(** :ref:`String<class_String>` param **)** |const|

Devuelve la textura que está establecida como predeterminada para el parámetro especificado.

\ **Nota:** ``param`` debe coincidir exactamente con el nombre del uniforme en el código.

----

.. _class_Shader_method_get_mode:

- :ref:`Mode<enum_Shader_Mode>` **get_mode** **(** **)** |const|

Devuelve el modo shader para el shader, ya sea :ref:`MODE_CANVAS_ITEM<class_Shader_constant_MODE_CANVAS_ITEM>`, :ref:`MODE_SPATIAL<class_Shader_constant_MODE_SPATIAL>` o :ref:`MODE_PARTICLES<class_Shader_constant_MODE_PARTICLES>`.

----

.. _class_Shader_method_has_param:

- :ref:`bool<class_bool>` **has_param** **(** :ref:`String<class_String>` name **)** |const|

Devuelve ``true`` si el shader tiene este param definido como uniforme en su código.

\ **Nota: ** ``param`` debe coincidir exactamente con el nombre del uniforme en el código.

----

.. _class_Shader_method_set_default_texture_param:

- void **set_default_texture_param** **(** :ref:`String<class_String>` param, :ref:`Texture<class_Texture>` texture **)**

Establece la textura por defecto que se utilizará con una textura uniforme. El valor por defecto se usa si una textura no está establecida en el :ref:`ShaderMaterial<class_ShaderMaterial>`.

\ **Nota:** ``param`` debe coincidir exactamente con el nombre del uniforme en el código.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
