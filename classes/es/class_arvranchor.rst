:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the ARVRAnchor.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ARVRAnchor:

ARVRAnchor
==========

**Inherits:** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Un punto de anclaje en el espacio AR.

Descripción
----------------------

The ``ARVRAnchor`` point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them.

This node is mapped to one of the anchors through its unique ID. When you receive a signal that a new anchor is available, you should add this node to your scene for that anchor. You can predefine nodes and set the ID; the nodes will simply remain on 0,0,0 until a plane is recognized.

Keep in mind that, as long as plane detection is enabled, the size, placing and orientation of an anchor will be updated as the detection logic learns more about the real world out there especially if only part of the surface is in view.

Propiedades
----------------------

+-----------------------+-------------------------------------------------------+-------+
| :ref:`int<class_int>` | :ref:`anchor_id<class_ARVRAnchor_property_anchor_id>` | ``1`` |
+-----------------------+-------------------------------------------------------+-------+

Métodos
--------------

+-------------------------------+-------------------------------------------------------------------------------------+
| :ref:`String<class_String>`   | :ref:`get_anchor_name<class_ARVRAnchor_method_get_anchor_name>` **(** **)** |const| |
+-------------------------------+-------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`get_is_active<class_ARVRAnchor_method_get_is_active>` **(** **)** |const|     |
+-------------------------------+-------------------------------------------------------------------------------------+
| :ref:`Mesh<class_Mesh>`       | :ref:`get_mesh<class_ARVRAnchor_method_get_mesh>` **(** **)** |const|               |
+-------------------------------+-------------------------------------------------------------------------------------+
| :ref:`Plane<class_Plane>`     | :ref:`get_plane<class_ARVRAnchor_method_get_plane>` **(** **)** |const|             |
+-------------------------------+-------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_size<class_ARVRAnchor_method_get_size>` **(** **)** |const|               |
+-------------------------------+-------------------------------------------------------------------------------------+

Señales
--------------

.. _class_ARVRAnchor_signal_mesh_updated:

- **mesh_updated** **(** :ref:`Mesh<class_Mesh>` mesh **)**

Emitida cuando la malla asociada al ancla cambia o cuando se dispone de ella. Esto es especialmente importante para la topología que está siendo constantemente ``mesh_updated``.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_ARVRAnchor_property_anchor_id:

- :ref:`int<class_int>` **anchor_id**

+-----------+----------------------+
| *Default* | ``1``                |
+-----------+----------------------+
| *Setter*  | set_anchor_id(value) |
+-----------+----------------------+
| *Getter*  | get_anchor_id()      |
+-----------+----------------------+

La identificación del ancla. Puedes establecer esto antes de que el ancla misma exista. El primer ancla obtiene un ID de ``1``, el segundo un ID de ``2``, etc. Cuando se quitan las anclas, el motor puede asignar el ID correspondiente a las nuevas anclas. La situación más común en la que las anclas "desaparecen" es cuando el servidor AR identifica que dos anclas representan partes diferentes del mismo plano y las fusiona.

Descripciones de Métodos
------------------------------------------------

.. _class_ARVRAnchor_method_get_anchor_name:

- :ref:`String<class_String>` **get_anchor_name** **(** **)** |const|

Devuelve el nombre dado a este anclaje.

----

.. _class_ARVRAnchor_method_get_is_active:

- :ref:`bool<class_bool>` **get_is_active** **(** **)** |const|

Devuelve ``true`` si el ancla está siendo rastreada y ``false`` si no se conoce actualmente ninguna ancla con esta identificación.

----

.. _class_ARVRAnchor_method_get_mesh:

- :ref:`Mesh<class_Mesh>` **get_mesh** **(** **)** |const|

If provided by the :ref:`ARVRInterface<class_ARVRInterface>`, this returns a mesh object for the anchor. For an anchor, this can be a shape related to the object being tracked or it can be a mesh that provides topology related to the anchor and can be used to create shadows/reflections on surfaces or for generating collision shapes.

----

.. _class_ARVRAnchor_method_get_plane:

- :ref:`Plane<class_Plane>` **get_plane** **(** **)** |const|

Devuelve un avión alineado con nuestro ancla; útil para pruebas de intersección.

----

.. _class_ARVRAnchor_method_get_size:

- :ref:`Vector3<class_Vector3>` **get_size** **(** **)** |const|

Devuelve el tamaño estimado del avión que fue detectado. Digamos que cuando el ancla se relaciona con una mesa en el mundo real, este es el tamaño estimado de la superficie de esa mesa.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
