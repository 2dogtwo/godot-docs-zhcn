:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Vector3.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Vector3:

Vector3
=======

Vector used for 3D math.

Descripción
----------------------

3-element structure that can be used to represent positions in 3D space or any other pair of numeric values.

\ **Note:** In a boolean context, a Vector3 will evaluate to ``false`` if it's equal to ``Vector3(0, 0, 0)``. Otherwise, a Vector3 will always evaluate to ``true``.

Tutoriales
--------------------

- :doc:`Math tutorial index <../tutorials/math/index>`

- :doc:`Vector math <../tutorials/math/vector_math>`

- :doc:`Advanced vector math <../tutorials/math/vectors_advanced>`

- `3Blue1Brown Essence of Linear Algebra <https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab>`__

- `Matrix Transform Demo <https://godotengine.org/asset-library/asset/584>`__

- `All 3D Demos <https://github.com/godotengine/godot-demo-projects/tree/master/3d>`__

Propiedades
----------------------

+---------------------------+------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`x<class_Vector3_property_x>` | ``0.0`` |
+---------------------------+------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`y<class_Vector3_property_y>` | ``0.0`` |
+---------------------------+------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`z<class_Vector3_property_z>` | ``0.0`` |
+---------------------------+------------------------------------+---------+

Métodos
--------------

+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`Vector3<class_Vector3_method_Vector3>` **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y, :ref:`float<class_float>` z **)**                                                                            |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`abs<class_Vector3_method_abs>` **(** **)**                                                                                                                                                                          |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`angle_to<class_Vector3_method_angle_to>` **(** :ref:`Vector3<class_Vector3>` to **)**                                                                                                                               |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`bounce<class_Vector3_method_bounce>` **(** :ref:`Vector3<class_Vector3>` n **)**                                                                                                                                    |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`ceil<class_Vector3_method_ceil>` **(** **)**                                                                                                                                                                        |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`cross<class_Vector3_method_cross>` **(** :ref:`Vector3<class_Vector3>` b **)**                                                                                                                                      |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`cubic_interpolate<class_Vector3_method_cubic_interpolate>` **(** :ref:`Vector3<class_Vector3>` b, :ref:`Vector3<class_Vector3>` pre_a, :ref:`Vector3<class_Vector3>` post_b, :ref:`float<class_float>` weight **)** |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`direction_to<class_Vector3_method_direction_to>` **(** :ref:`Vector3<class_Vector3>` b **)**                                                                                                                        |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`distance_squared_to<class_Vector3_method_distance_squared_to>` **(** :ref:`Vector3<class_Vector3>` b **)**                                                                                                          |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`distance_to<class_Vector3_method_distance_to>` **(** :ref:`Vector3<class_Vector3>` b **)**                                                                                                                          |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`dot<class_Vector3_method_dot>` **(** :ref:`Vector3<class_Vector3>` b **)**                                                                                                                                          |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`floor<class_Vector3_method_floor>` **(** **)**                                                                                                                                                                      |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`inverse<class_Vector3_method_inverse>` **(** **)**                                                                                                                                                                  |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_equal_approx<class_Vector3_method_is_equal_approx>` **(** :ref:`Vector3<class_Vector3>` v **)**                                                                                                                  |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_normalized<class_Vector3_method_is_normalized>` **(** **)**                                                                                                                                                      |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`length<class_Vector3_method_length>` **(** **)**                                                                                                                                                                    |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`length_squared<class_Vector3_method_length_squared>` **(** **)**                                                                                                                                                    |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`limit_length<class_Vector3_method_limit_length>` **(** :ref:`float<class_float>` length=1.0 **)**                                                                                                                   |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`linear_interpolate<class_Vector3_method_linear_interpolate>` **(** :ref:`Vector3<class_Vector3>` to, :ref:`float<class_float>` weight **)**                                                                         |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`         | :ref:`max_axis<class_Vector3_method_max_axis>` **(** **)**                                                                                                                                                                |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`         | :ref:`min_axis<class_Vector3_method_min_axis>` **(** **)**                                                                                                                                                                |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`move_toward<class_Vector3_method_move_toward>` **(** :ref:`Vector3<class_Vector3>` to, :ref:`float<class_float>` delta **)**                                                                                        |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`normalized<class_Vector3_method_normalized>` **(** **)**                                                                                                                                                            |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`outer<class_Vector3_method_outer>` **(** :ref:`Vector3<class_Vector3>` b **)**                                                                                                                                      |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`posmod<class_Vector3_method_posmod>` **(** :ref:`float<class_float>` mod **)**                                                                                                                                      |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`posmodv<class_Vector3_method_posmodv>` **(** :ref:`Vector3<class_Vector3>` modv **)**                                                                                                                               |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`project<class_Vector3_method_project>` **(** :ref:`Vector3<class_Vector3>` b **)**                                                                                                                                  |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`reflect<class_Vector3_method_reflect>` **(** :ref:`Vector3<class_Vector3>` n **)**                                                                                                                                  |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`rotated<class_Vector3_method_rotated>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` phi **)**                                                                                                |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`round<class_Vector3_method_round>` **(** **)**                                                                                                                                                                      |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`sign<class_Vector3_method_sign>` **(** **)**                                                                                                                                                                        |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`signed_angle_to<class_Vector3_method_signed_angle_to>` **(** :ref:`Vector3<class_Vector3>` to, :ref:`Vector3<class_Vector3>` axis **)**                                                                             |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`slerp<class_Vector3_method_slerp>` **(** :ref:`Vector3<class_Vector3>` to, :ref:`float<class_float>` weight **)**                                                                                                   |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`slide<class_Vector3_method_slide>` **(** :ref:`Vector3<class_Vector3>` n **)**                                                                                                                                      |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`snapped<class_Vector3_method_snapped>` **(** :ref:`Vector3<class_Vector3>` by **)**                                                                                                                                 |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Basis<class_Basis>`     | :ref:`to_diagonal_matrix<class_Vector3_method_to_diagonal_matrix>` **(** **)**                                                                                                                                            |
+-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Constantes
--------------------

.. _class_Vector3_constant_AXIS_X:

.. _class_Vector3_constant_AXIS_Y:

.. _class_Vector3_constant_AXIS_Z:

.. _class_Vector3_constant_ZERO:

.. _class_Vector3_constant_ONE:

.. _class_Vector3_constant_INF:

.. _class_Vector3_constant_LEFT:

.. _class_Vector3_constant_RIGHT:

.. _class_Vector3_constant_UP:

.. _class_Vector3_constant_DOWN:

.. _class_Vector3_constant_FORWARD:

.. _class_Vector3_constant_BACK:

- **AXIS_X** = **0** --- Valor enumerado para el eje X. Devuelto por :ref:`max_axis<class_Vector3_method_max_axis>` y :ref:`min_axis<class_Vector3_method_min_axis>`.

- **AXIS_Y** = **1** --- Valor enumerado para el eje Y. Devuelto por :ref:`max_axis<class_Vector3_method_max_axis>` y :ref:`min_axis<class_Vector3_method_min_axis>`.

- **AXIS_Z** = **2** --- Valor enumerado para el eje Z. Devuelto por :ref:`max_axis<class_Vector3_method_max_axis>` y :ref:`min_axis<class_Vector3_method_min_axis>`.

- **ZERO** = **Vector3( 0, 0, 0 )** --- Vector cero, un vector con todos los componentes ajustados a ``0``.

- **ONE** = **Vector3( 1, 1, 1 )** --- Un vector, un vector con todos los componentes ajustados a ``1``.

- **INF** = **Vector3( inf, inf, inf )** --- Vector infinito, un vector con todos los componentes ajustados a :ref:`@GDScript.INF<class_@GDScript_constant_INF>`.

- **LEFT** = **Vector3( -1, 0, 0 )** --- Vector de la unidad izquierda. Representa la dirección local de la izquierda y la dirección global del oeste.

- **RIGHT** = **Vector3( 1, 0, 0 )** --- Vector de la unidad derecha. Representa la dirección local de la derecha, y la dirección global del este.

- **UP** = **Vector3( 0, 1, 0 )** --- Vector de la unidad superior.

- **DOWN** = **Vector3( 0, -1, 0 )** --- Vector de la unidad inferior.

- **FORWARD** = **Vector3( 0, 0, -1 )** --- Vector de la unidad de adelante. Representa la dirección local de avance, y la dirección global del norte.

- **BACK** = **Vector3( 0, 0, 1 )** --- Vector de la unidad trasera. Representa la dirección local de la espalda, y la dirección global del sur.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Vector3_property_x:

- :ref:`float<class_float>` **x**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

El componente X del vector. También se puede acceder utilizando la posición del índice ``[0]``.

----

.. _class_Vector3_property_y:

- :ref:`float<class_float>` **y**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

El componente Y del vector. También se puede acceder usando la posición del índice ``[1]``.

----

.. _class_Vector3_property_z:

- :ref:`float<class_float>` **z**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

El componente Z del vector. También se puede acceder usando la posición del índice ``[2]``.

Descripciones de Métodos
------------------------------------------------

.. _class_Vector3_method_Vector3:

- :ref:`Vector3<class_Vector3>` **Vector3** **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y, :ref:`float<class_float>` z **)**

Returns a Vector3 with the given components.

----

.. _class_Vector3_method_abs:

- :ref:`Vector3<class_Vector3>` **abs** **(** **)**

Devuelve un nuevo vector con todos los componentes en valores absolutos (es decir, positivos).

----

.. _class_Vector3_method_angle_to:

- :ref:`float<class_float>` **angle_to** **(** :ref:`Vector3<class_Vector3>` to **)**

Returns the unsigned minimum angle to the given vector, in radians.

----

.. _class_Vector3_method_bounce:

- :ref:`Vector3<class_Vector3>` **bounce** **(** :ref:`Vector3<class_Vector3>` n **)**

Devuelve el vector "rebotado" de un plano definido por la normalidad dada.

----

.. _class_Vector3_method_ceil:

- :ref:`Vector3<class_Vector3>` **ceil** **(** **)**

Devuelve un nuevo vector con todos los componentes redondeados hacia arriba (hacia el infinito positivo).

----

.. _class_Vector3_method_cross:

- :ref:`Vector3<class_Vector3>` **cross** **(** :ref:`Vector3<class_Vector3>` b **)**

Devuelve el producto vectorial de este vector y ``b``.

----

.. _class_Vector3_method_cubic_interpolate:

- :ref:`Vector3<class_Vector3>` **cubic_interpolate** **(** :ref:`Vector3<class_Vector3>` b, :ref:`Vector3<class_Vector3>` pre_a, :ref:`Vector3<class_Vector3>` post_b, :ref:`float<class_float>` weight **)**

Performs a cubic interpolation between vectors ``pre_a``, ``a``, ``b``, ``post_b`` (``a`` is current), by the given amount ``weight``. ``weight`` is on the range of 0.0 to 1.0, representing the amount of interpolation.

----

.. _class_Vector3_method_direction_to:

- :ref:`Vector3<class_Vector3>` **direction_to** **(** :ref:`Vector3<class_Vector3>` b **)**

Returns the normalized vector pointing from this vector to ``b``. This is equivalent to using ``(b - a).normalized()``.

----

.. _class_Vector3_method_distance_squared_to:

- :ref:`float<class_float>` **distance_squared_to** **(** :ref:`Vector3<class_Vector3>` b **)**

Devuelve la distancia cuadrada entre este vector y ``b``.

Este método funciona más rápido que el :ref:`distance_to<class_Vector3_method_distance_to>`, por lo que es preferible si necesitas comparar vectores o necesitas la distancia al cuadrado para alguna fórmula.

----

.. _class_Vector3_method_distance_to:

- :ref:`float<class_float>` **distance_to** **(** :ref:`Vector3<class_Vector3>` b **)**

Devuelve la distancia entre este vector y ``b``.

----

.. _class_Vector3_method_dot:

- :ref:`float<class_float>` **dot** **(** :ref:`Vector3<class_Vector3>` b **)**

Devuelve el producto escalar de este vector y ``b``. Esto puede ser usado para comparar el ángulo entre dos vectores. Por ejemplo, puede utilizarse para determinar si un enemigo está enfrentado al jugador.

El producto escalar será ``0`` para un ángulo recto (90 grados), mayor que 0 para ángulos más estrechos que 90 grados y menor que 0 para ángulos más amplios que 90 grados.

Cuando se utilizan vectores unitarios (normalizados), el resultado siempre estará entre ``-1.0`` (ángulo de 180 grados) cuando los vectores estén orientados en direcciones opuestas, y ``1.0`` (ángulo de 0 grados) cuando los vectores estén alineados.

\ **Nota: ** ``a.dot(b)`` es equivalente a ``b.dot(a)``.

----

.. _class_Vector3_method_floor:

- :ref:`Vector3<class_Vector3>` **floor** **(** **)**

Devuelve un nuevo vector con todos los componentes redondeados hacia abajo (hacia el infinito negativo).

----

.. _class_Vector3_method_inverse:

- :ref:`Vector3<class_Vector3>` **inverse** **(** **)**

Devuelve el inverso del vector. Esto es lo mismo que ``Vector3( 1.0 / v.x, 1.0 / v.y, 1.0 / v.z )``.

----

.. _class_Vector3_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Vector3<class_Vector3>` v **)**

Devuelve ``true`` si este vector y ``v`` son aproximadamente iguales, ejecutando :ref:`@GDScript.is_equal_approx<class_@GDScript_method_is_equal_approx>` en cada componente.

----

.. _class_Vector3_method_is_normalized:

- :ref:`bool<class_bool>` **is_normalized** **(** **)**

Returns ``true`` if the vector is normalized, ``false`` otherwise.

----

.. _class_Vector3_method_length:

- :ref:`float<class_float>` **length** **(** **)**

Devuelve la longitud (magnitud) de este vector.

----

.. _class_Vector3_method_length_squared:

- :ref:`float<class_float>` **length_squared** **(** **)**

Devuelve la longitud cuadrada (magnitud cuadrada) de este vector.

Este método funciona más rápido que el :ref:`length<class_Vector3_method_length>`, por lo que es preferible si necesitas comparar vectores o necesitas la distancia al cuadrado para alguna fórmula.

----

.. _class_Vector3_method_limit_length:

- :ref:`Vector3<class_Vector3>` **limit_length** **(** :ref:`float<class_float>` length=1.0 **)**

Devuelve el vector con una longitud máxima limitando su longitud a ``length``.

----

.. _class_Vector3_method_linear_interpolate:

- :ref:`Vector3<class_Vector3>` **linear_interpolate** **(** :ref:`Vector3<class_Vector3>` to, :ref:`float<class_float>` weight **)**

Returns the result of the linear interpolation between this vector and ``to`` by amount ``t``. ``weight`` is on the range of 0.0 to 1.0, representing the amount of interpolation.

----

.. _class_Vector3_method_max_axis:

- :ref:`int<class_int>` **max_axis** **(** **)**

Devuelve el eje del mayor valor del vector. Ver las constantes ``AXIS_*``. Si todos los componentes son iguales, este método devuelve :ref:`AXIS_X<class_Vector3_constant_AXIS_X>`.

----

.. _class_Vector3_method_min_axis:

- :ref:`int<class_int>` **min_axis** **(** **)**

Devuelve el eje del valor más pequeño del vector. Ver las constantes ``AXIS_*``. Si todos los componentes son iguales, este método devuelve :ref:`AXIS_Z<class_Vector3_constant_AXIS_Z>`.

----

.. _class_Vector3_method_move_toward:

- :ref:`Vector3<class_Vector3>` **move_toward** **(** :ref:`Vector3<class_Vector3>` to, :ref:`float<class_float>` delta **)**

Mueve este vector hacia ``to`` por la cantidad fija de ``delta``.

----

.. _class_Vector3_method_normalized:

- :ref:`Vector3<class_Vector3>` **normalized** **(** **)**

Devuelve el vector escalado a la longitud de la unidad. Equivalente a ``v / v.length()``.

----

.. _class_Vector3_method_outer:

- :ref:`Basis<class_Basis>` **outer** **(** :ref:`Vector3<class_Vector3>` b **)**

Devuelve el producto exterior con ``b``.

----

.. _class_Vector3_method_posmod:

- :ref:`Vector3<class_Vector3>` **posmod** **(** :ref:`float<class_float>` mod **)**

Devuelve un vector compuesto por el :ref:`@GDScript.fposmod<class_@GDScript_method_fposmod>` de los componentes de este vector y el ``mod``.

----

.. _class_Vector3_method_posmodv:

- :ref:`Vector3<class_Vector3>` **posmodv** **(** :ref:`Vector3<class_Vector3>` modv **)**

Devuelve un vector compuesto por el :ref:`@GDScript.fposmod<class_@GDScript_method_fposmod>` de los componentes de este vector y los componentes del ``modv``.

----

.. _class_Vector3_method_project:

- :ref:`Vector3<class_Vector3>` **project** **(** :ref:`Vector3<class_Vector3>` b **)**

Devuelve el producto exterior con ``b``.

----

.. _class_Vector3_method_reflect:

- :ref:`Vector3<class_Vector3>` **reflect** **(** :ref:`Vector3<class_Vector3>` n **)**

Devuelve este vector reflejado desde un plano definido por la normalidad dada.

----

.. _class_Vector3_method_rotated:

- :ref:`Vector3<class_Vector3>` **rotated** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` phi **)**

Gira este vector alrededor de un eje dado por ``phi`` radianes. El eje debe ser un vector normalizado.

----

.. _class_Vector3_method_round:

- :ref:`Vector3<class_Vector3>` **round** **(** **)**

Devuelve este vector con todos los componentes redondeados al entero más cercano, con los casos intermedios redondeados desde cero.

----

.. _class_Vector3_method_sign:

- :ref:`Vector3<class_Vector3>` **sign** **(** **)**

Returns a vector with each component set to one or negative one, depending on the signs of this vector's components. If a component is zero, it returns positive one.

----

.. _class_Vector3_method_signed_angle_to:

- :ref:`float<class_float>` **signed_angle_to** **(** :ref:`Vector3<class_Vector3>` to, :ref:`Vector3<class_Vector3>` axis **)**

Returns the signed angle to the given vector, in radians. The sign of the angle is positive in a counter-clockwise direction and negative in a clockwise direction when viewed from the side specified by the ``axis``.

----

.. _class_Vector3_method_slerp:

- :ref:`Vector3<class_Vector3>` **slerp** **(** :ref:`Vector3<class_Vector3>` to, :ref:`float<class_float>` weight **)**

Returns the result of spherical linear interpolation between this vector and ``to``, by amount ``weight``. ``weight`` is on the range of 0.0 to 1.0, representing the amount of interpolation.

\ **Note:** Both vectors must be normalized.

----

.. _class_Vector3_method_slide:

- :ref:`Vector3<class_Vector3>` **slide** **(** :ref:`Vector3<class_Vector3>` n **)**

Devuelve este vector deslizado a lo largo de un plano definido por la normalidad dada.

----

.. _class_Vector3_method_snapped:

- :ref:`Vector3<class_Vector3>` **snapped** **(** :ref:`Vector3<class_Vector3>` by **)**

Devuelve este vector con cada componente ajustado al múltiplo más cercano de ``step``. Esto también puede ser usado para redondear a un número arbitrario de decimales.

----

.. _class_Vector3_method_to_diagonal_matrix:

- :ref:`Basis<class_Basis>` **to_diagonal_matrix** **(** **)**

Devuelve una matriz diagonal con el vector como diagonal principal.

Esto equivale a una Base sin rotación ni shearing y los componentes de este vector fijados como la escala.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
