:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the WebSocketPeer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_WebSocketPeer:

WebSocketPeer
=============

**Inherits:** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Una clase que representa una conexión específica de WebSocket.

Descripción
----------------------

This class represents a specific WebSocket connection, allowing you to do lower level operations with it.

You can choose to write to the socket in binary or text mode, and you can recognize the mode used for writing by the other peer.

Métodos
--------------

+------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| void                                           | :ref:`close<class_WebSocketPeer_method_close>` **(** :ref:`int<class_int>` code=1000, :ref:`String<class_String>` reason="" **)** |
+------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                    | :ref:`get_connected_host<class_WebSocketPeer_method_get_connected_host>` **(** **)** |const|                                      |
+------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                          | :ref:`get_connected_port<class_WebSocketPeer_method_get_connected_port>` **(** **)** |const|                                      |
+------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                          | :ref:`get_current_outbound_buffered_amount<class_WebSocketPeer_method_get_current_outbound_buffered_amount>` **(** **)** |const|  |
+------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`WriteMode<enum_WebSocketPeer_WriteMode>` | :ref:`get_write_mode<class_WebSocketPeer_method_get_write_mode>` **(** **)** |const|                                              |
+------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                        | :ref:`is_connected_to_host<class_WebSocketPeer_method_is_connected_to_host>` **(** **)** |const|                                  |
+------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| void                                           | :ref:`set_no_delay<class_WebSocketPeer_method_set_no_delay>` **(** :ref:`bool<class_bool>` enabled **)**                          |
+------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| void                                           | :ref:`set_write_mode<class_WebSocketPeer_method_set_write_mode>` **(** :ref:`WriteMode<enum_WebSocketPeer_WriteMode>` mode **)**  |
+------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                        | :ref:`was_string_packet<class_WebSocketPeer_method_was_string_packet>` **(** **)** |const|                                        |
+------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+

Enumeraciones
--------------------------

.. _enum_WebSocketPeer_WriteMode:

.. _class_WebSocketPeer_constant_WRITE_MODE_TEXT:

.. _class_WebSocketPeer_constant_WRITE_MODE_BINARY:

enum **WriteMode**:

- **WRITE_MODE_TEXT** = **0** --- Especifica que los mensajes de WebSockets deben ser transferidos como carga de texto (sólo se permite el UTF-8 válido).

- **WRITE_MODE_BINARY** = **1** --- Especifica que los mensajes de WebSockets deben ser transferidos como carga binaria (se permite cualquier combinación de bytes).

Descripciones de Métodos
------------------------------------------------

.. _class_WebSocketPeer_method_close:

- void **close** **(** :ref:`int<class_int>` code=1000, :ref:`String<class_String>` reason="" **)**

Cierra esta conexión WebSocket. ``code`` es el código de estado para el cierre (ver RFC 6455 sección 7.4 para una lista de códigos de estado válidos). ``reason`` es la razón legible por el ser humano para cerrar la conexión (puede ser cualquier cadena UTF-8 que sea menor de 123 bytes).

\ **Nota:** Para lograr un cierre limpio, deberá seguir sondeando hasta que reciba :ref:`WebSocketClient.connection_closed<class_WebSocketClient_signal_connection_closed>` o :ref:`WebSocketServer.client_disconnected<class_WebSocketServer_signal_client_disconnected>`.

\ **Nota:** Es posible que la exportación a HTML5 no admita todos los códigos de estado. Consulte la documentación específica del navegador para obtener más detalles.

----

.. _class_WebSocketPeer_method_get_connected_host:

- :ref:`String<class_String>` **get_connected_host** **(** **)** |const|

Devuelve la dirección IP del par conectado.

\ **Nota:** No disponible en la exportación a HTML5.

----

.. _class_WebSocketPeer_method_get_connected_port:

- :ref:`int<class_int>` **get_connected_port** **(** **)** |const|

Devuelve el puerto remoto del par conectado.

\ **Nota:** No disponible en la exportación a HTML5.

----

.. _class_WebSocketPeer_method_get_current_outbound_buffered_amount:

- :ref:`int<class_int>` **get_current_outbound_buffered_amount** **(** **)** |const|

Returns the current amount of data in the outbound websocket buffer. **Note:** HTML5 exports use WebSocket.bufferedAmount, while other platforms use an internal buffer.

----

.. _class_WebSocketPeer_method_get_write_mode:

- :ref:`WriteMode<enum_WebSocketPeer_WriteMode>` **get_write_mode** **(** **)** |const|

Obtiene el modo de escritura seleccionado actualmente. Véase :ref:`WriteMode<enum_WebSocketPeer_WriteMode>`.

----

.. _class_WebSocketPeer_method_is_connected_to_host:

- :ref:`bool<class_bool>` **is_connected_to_host** **(** **)** |const|

Devuelve ``true`` si este par está actualmente conectado.

----

.. _class_WebSocketPeer_method_set_no_delay:

- void **set_no_delay** **(** :ref:`bool<class_bool>` enabled **)**

Deshabilita el algoritmo de Nagle en el socket TCP subyacente (por defecto). Ver :ref:`StreamPeerTCP.set_no_delay<class_StreamPeerTCP_method_set_no_delay>` para más información.

\ **Nota:** No está disponible en la exportación a HTML5.

----

.. _class_WebSocketPeer_method_set_write_mode:

- void **set_write_mode** **(** :ref:`WriteMode<enum_WebSocketPeer_WriteMode>` mode **)**

Establece el enchufe para usar el :ref:`WriteMode<enum_WebSocketPeer_WriteMode>` dado.

----

.. _class_WebSocketPeer_method_was_string_packet:

- :ref:`bool<class_bool>` **was_string_packet** **(** **)** |const|

Devuelve ``true`` si el último paquete recibido fue enviado como una carga de texto. Ver :ref:`WriteMode<enum_WebSocketPeer_WriteMode>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
