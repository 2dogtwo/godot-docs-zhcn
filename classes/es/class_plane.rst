:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Plane.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Plane:

Plane
=====

Plano en forma hessiana.

Descripción
----------------------

El plano representa una ecuación plana normalizada. Básicamente, "normal" es la normal del plano (a,b,c normalizada), y "d" es la distancia del origen al plano (en la dirección de "normal"). "Sobre" o "Por encima" del plano se considera el lado del plano hacia donde la normal está apuntando.

Tutoriales
--------------------

- :doc:`../tutorials/math/index`

Propiedades
----------------------

+-------------------------------+--------------------------------------------+------------------------+
| :ref:`float<class_float>`     | :ref:`d<class_Plane_property_d>`           | ``0.0``                |
+-------------------------------+--------------------------------------------+------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`normal<class_Plane_property_normal>` | ``Vector3( 0, 0, 0 )`` |
+-------------------------------+--------------------------------------------+------------------------+
| :ref:`float<class_float>`     | :ref:`x<class_Plane_property_x>`           | ``0.0``                |
+-------------------------------+--------------------------------------------+------------------------+
| :ref:`float<class_float>`     | :ref:`y<class_Plane_property_y>`           | ``0.0``                |
+-------------------------------+--------------------------------------------+------------------------+
| :ref:`float<class_float>`     | :ref:`z<class_Plane_property_z>`           | ``0.0``                |
+-------------------------------+--------------------------------------------+------------------------+

Métodos
--------------

+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Plane<class_Plane>`     | :ref:`Plane<class_Plane_method_Plane>` **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b, :ref:`float<class_float>` c, :ref:`float<class_float>` d **)** |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Plane<class_Plane>`     | :ref:`Plane<class_Plane_method_Plane>` **(** :ref:`Vector3<class_Vector3>` v1, :ref:`Vector3<class_Vector3>` v2, :ref:`Vector3<class_Vector3>` v3 **)**               |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Plane<class_Plane>`     | :ref:`Plane<class_Plane_method_Plane>` **(** :ref:`Vector3<class_Vector3>` normal, :ref:`float<class_float>` d **)**                                                  |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`center<class_Plane_method_center>` **(** **)**                                                                                                                  |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`distance_to<class_Plane_method_distance_to>` **(** :ref:`Vector3<class_Vector3>` point **)**                                                                    |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`get_any_point<class_Plane_method_get_any_point>` **(** **)**                                                                                                    |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`has_point<class_Plane_method_has_point>` **(** :ref:`Vector3<class_Vector3>` point, :ref:`float<class_float>` epsilon=1e-05 **)**                               |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`intersect_3<class_Plane_method_intersect_3>` **(** :ref:`Plane<class_Plane>` b, :ref:`Plane<class_Plane>` c **)**                                               |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`intersects_ray<class_Plane_method_intersects_ray>` **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` dir **)**                            |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`intersects_segment<class_Plane_method_intersects_segment>` **(** :ref:`Vector3<class_Vector3>` begin, :ref:`Vector3<class_Vector3>` end **)**                   |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_equal_approx<class_Plane_method_is_equal_approx>` **(** :ref:`Plane<class_Plane>` plane **)**                                                                |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_point_over<class_Plane_method_is_point_over>` **(** :ref:`Vector3<class_Vector3>` point **)**                                                                |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Plane<class_Plane>`     | :ref:`normalized<class_Plane_method_normalized>` **(** **)**                                                                                                          |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>` | :ref:`project<class_Plane_method_project>` **(** :ref:`Vector3<class_Vector3>` point **)**                                                                            |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Constantes
--------------------

.. _class_Plane_constant_PLANE_YZ:

.. _class_Plane_constant_PLANE_XZ:

.. _class_Plane_constant_PLANE_XY:

- **PLANE_YZ** = **Plane( 1, 0, 0, 0 )** --- Un plano que se extiende en los ejes Y y Z (puntos de vector normal +X).

- **PLANE_XZ** = **Plane( 0, 1, 0, 0 )** --- Un plano que se extiende en los ejes X y Z (puntos de vector normal +Y).

- **PLANE_XY** = **Plane( 0, 0, 1, 0 )** --- Un plano que se extiende en los ejes X e Y (puntos de vector normal +Z).

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Plane_property_d:

- :ref:`float<class_float>` **d**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

La distancia desde el origen hasta el plano, en la dirección de :ref:`normal<class_Plane_property_normal>`. Este valor es típicamente no negativo.

En la ecuación escalar del plano ``ax + por + cz = d``, esto es ``d``, mientras que las coordenadas ``(a, b, c)`` están representadas por la propiedad :ref:`normal<class_Plane_property_normal>`.

----

.. _class_Plane_property_normal:

- :ref:`Vector3<class_Vector3>` **normal**

+-----------+------------------------+
| *Default* | ``Vector3( 0, 0, 0 )`` |
+-----------+------------------------+

La normal del plano, que debe ser normalizada.

En la ecuación escalar del plano ``ax + por + cz = d``, este es el vector ``(a, b, c)``, donde ``d`` es la propiedad :ref:`d<class_Plane_property_d>`.

----

.. _class_Plane_property_x:

- :ref:`float<class_float>` **x**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

El componente X del vector :ref:`normal<class_Plane_property_normal>` del plano.

----

.. _class_Plane_property_y:

- :ref:`float<class_float>` **y**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

El componente Y del vector :ref:`normal<class_Plane_property_normal>` del avión.

----

.. _class_Plane_property_z:

- :ref:`float<class_float>` **z**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

El componente Z del vector :ref:`normal<class_Plane_property_normal>` del plano.

Descripciones de Métodos
------------------------------------------------

.. _class_Plane_method_Plane:

- :ref:`Plane<class_Plane>` **Plane** **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b, :ref:`float<class_float>` c, :ref:`float<class_float>` d **)**

Crea un plano a partir de los cuatro parámetros. Los tres componentes del :ref:`normal<class_Plane_property_normal>` del plano resultante son ``a``, ``b`` y ``c``, y el plano tiene una distancia de ``d`` del origen.

----

- :ref:`Plane<class_Plane>` **Plane** **(** :ref:`Vector3<class_Vector3>` v1, :ref:`Vector3<class_Vector3>` v2, :ref:`Vector3<class_Vector3>` v3 **)**

Crea un plano a partir de los tres puntos, dados en el sentido de las agujas del reloj.

----

- :ref:`Plane<class_Plane>` **Plane** **(** :ref:`Vector3<class_Vector3>` normal, :ref:`float<class_float>` d **)**

Crea un plano a partir de la normalidad y la distancia del plano al origen.

----

.. _class_Plane_method_center:

- :ref:`Vector3<class_Vector3>` **center** **(** **)**

Devuelve el centro del avión.

----

.. _class_Plane_method_distance_to:

- :ref:`float<class_float>` **distance_to** **(** :ref:`Vector3<class_Vector3>` point **)**

Devuelve la distancia más corta del plano a la posición ``point``.

----

.. _class_Plane_method_get_any_point:

- :ref:`Vector3<class_Vector3>` **get_any_point** **(** **)**

Returns the center of the plane.

This method is deprecated, please use :ref:`center<class_Plane_method_center>` instead.

----

.. _class_Plane_method_has_point:

- :ref:`bool<class_bool>` **has_point** **(** :ref:`Vector3<class_Vector3>` point, :ref:`float<class_float>` epsilon=1e-05 **)**

Devuelve ``true`` si ``point`` está dentro del plano. La comparación utiliza un umbral mínimo personalizado de ``epsilon``.

----

.. _class_Plane_method_intersect_3:

- :ref:`Vector3<class_Vector3>` **intersect_3** **(** :ref:`Plane<class_Plane>` b, :ref:`Plane<class_Plane>` c **)**

Devuelve el punto de intersección de los tres planos ``b``, ``c`` y este plano. Si no se encuentra ninguna intersección, se devuelve ``null``.

----

.. _class_Plane_method_intersects_ray:

- :ref:`Vector3<class_Vector3>` **intersects_ray** **(** :ref:`Vector3<class_Vector3>` from, :ref:`Vector3<class_Vector3>` dir **)**

Devuelve el punto de intersección de un rayo que consiste en la posición ``de`` y la dirección normal ``dir`` con este plano. Si no se encuentra ninguna intersección, se devuelve ``null``.

----

.. _class_Plane_method_intersects_segment:

- :ref:`Vector3<class_Vector3>` **intersects_segment** **(** :ref:`Vector3<class_Vector3>` begin, :ref:`Vector3<class_Vector3>` end **)**

Devuelve el punto de intersección de un segmento desde la posición ``begin`` hasta la posición ``end`` con este plano. Si no se encuentra ninguna intersección, se devuelve ``null``.

----

.. _class_Plane_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Plane<class_Plane>` plane **)**

Devuelve ``true`` si este plano y ``plano`` son aproximadamente iguales, ejecutando :ref:`@GDScript.is_equal_approx<class_@GDScript_method_is_equal_approx>` en cada componente.

----

.. _class_Plane_method_is_point_over:

- :ref:`bool<class_bool>` **is_point_over** **(** :ref:`Vector3<class_Vector3>` point **)**

Devuelve ``true`` si ``point`` se encuentra por encima del plano.

----

.. _class_Plane_method_normalized:

- :ref:`Plane<class_Plane>` **normalized** **(** **)**

Devuelve una copia del plano, normalizado.

----

.. _class_Plane_method_project:

- :ref:`Vector3<class_Vector3>` **project** **(** :ref:`Vector3<class_Vector3>` point **)**

Devuelve la proyección ortogonal de ``point`` en un punto del plano.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
