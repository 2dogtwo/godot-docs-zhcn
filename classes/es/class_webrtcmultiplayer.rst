:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the WebRTCMultiplayer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_WebRTCMultiplayer:

WebRTCMultiplayer
=================

**Inherits:** :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>` **<** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Una simple interfaz para crear una red de malla entre pares compuesta por :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>` que es compatible con el :ref:`MultiplayerAPI<class_MultiplayerAPI>`.

Descripción
----------------------

Esta clase construye una malla completa de :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>` (una conexión para cada par) que puede ser usada como un :ref:`MultiplayerAPI.network_peer<class_MultiplayerAPI_property_network_peer>`.

Puedes añadir cada :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>` a través de :ref:`add_peer<class_WebRTCMultiplayer_method_add_peer>` o eliminarlos a través de :ref:`remove_peer<class_WebRTCMultiplayer_method_remove_peer>`. Los pares deben ser agregados en el estado :ref:`WebRTCPeerConnection.STATE_NEW<class_WebRTCPeerConnection_constant_STATE_NEW>` para permitirle crear los canales apropiados. Esta clase no creará ofertas ni establecerá descripciones, sólo las sondeará, y notificará las conexiones y desconexiones.

La :ref:`NetworkedMultiplayerPeer.connection_succeeded<class_NetworkedMultiplayerPeer_signal_connection_succeeded>` y la :ref:`NetworkedMultiplayerPeer.server_disconnected<class_NetworkedMultiplayerPeer_signal_server_disconnected>` no se emitirán a menos que el ``server_compatibility`` sea ``true`` en :ref:`initialize<class_WebRTCMultiplayer_method_initialize>`. Además, la transferencia de datos funciona como en un :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>`.

Propiedades
----------------------

+-----------------------------------------------------------------+------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                         | refuse_new_connections | ``false`` (overrides :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer_property_refuse_new_connections>`) |
+-----------------------------------------------------------------+------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` | transfer_mode          | ``2`` (overrides :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer_property_transfer_mode>`)              |
+-----------------------------------------------------------------+------------------------+-----------------------------------------------------------------------------------------------------------------------+

Métodos
--------------

+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`add_peer<class_WebRTCMultiplayer_method_add_peer>` **(** :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>` peer, :ref:`int<class_int>` peer_id, :ref:`int<class_int>` unreliable_lifetime=1 **)** |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`close<class_WebRTCMultiplayer_method_close>` **(** **)**                                                                                                                                                |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`get_peer<class_WebRTCMultiplayer_method_get_peer>` **(** :ref:`int<class_int>` peer_id **)**                                                                                                            |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`get_peers<class_WebRTCMultiplayer_method_get_peers>` **(** **)**                                                                                                                                        |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`has_peer<class_WebRTCMultiplayer_method_has_peer>` **(** :ref:`int<class_int>` peer_id **)**                                                                                                            |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`initialize<class_WebRTCMultiplayer_method_initialize>` **(** :ref:`int<class_int>` peer_id, :ref:`bool<class_bool>` server_compatibility=false **)**                                                    |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`remove_peer<class_WebRTCMultiplayer_method_remove_peer>` **(** :ref:`int<class_int>` peer_id **)**                                                                                                      |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Descripciones de Métodos
------------------------------------------------

.. _class_WebRTCMultiplayer_method_add_peer:

- :ref:`Error<enum_@GlobalScope_Error>` **add_peer** **(** :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>` peer, :ref:`int<class_int>` peer_id, :ref:`int<class_int>` unreliable_lifetime=1 **)**

Añade un nuevo par a la malla con el ``peer_id`` dado. El :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>` debe estar en el estado :ref:`WebRTCPeerConnection.STATE_NEW<class_WebRTCPeerConnection_constant_STATE_NEW>`.

Se crearán tres canales para un transporte fiable, poco fiable y ordenado. El valor de ``unreliable_lifetime`` se pasará a la opción ``maxPacketLifetime`` cuando se creen canales no fiables y ordenados (véase :ref:`WebRTCPeerConnection.create_data_channel<class_WebRTCPeerConnection_method_create_data_channel>`).

----

.. _class_WebRTCMultiplayer_method_close:

- void **close** **(** **)**

Cierra todas las conexiones y canales de add peer, liberando todos los recursos.

----

.. _class_WebRTCMultiplayer_method_get_peer:

- :ref:`Dictionary<class_Dictionary>` **get_peer** **(** :ref:`int<class_int>` peer_id **)**

Devuelve una representación del diccionario del par con el ``peer_id`` dado con tres claves. ``connection`` que contiene el :ref:`WebRTCPeerConnection<class_WebRTCPeerConnection>` a este par, ``channels`` un array de tres :ref:`WebRTCDataChannel<class_WebRTCDataChannel>`, y ``connected`` un booleano que representa si la conexión del par está actualmente conectada (los tres canales están abiertos).

----

.. _class_WebRTCMultiplayer_method_get_peers:

- :ref:`Dictionary<class_Dictionary>` **get_peers** **(** **)**

Devuelve un diccionario cuyas claves son las identificaciones de los pares y valora la representación de los pares como en :ref:`get_peer<class_WebRTCMultiplayer_method_get_peer>`.

----

.. _class_WebRTCMultiplayer_method_has_peer:

- :ref:`bool<class_bool>` **has_peer** **(** :ref:`int<class_int>` peer_id **)**

Devuelve ``true`` si el ``peer_id`` dado está en el mapa de pares (aunque podría no estar conectado).

----

.. _class_WebRTCMultiplayer_method_initialize:

- :ref:`Error<enum_@GlobalScope_Error>` **initialize** **(** :ref:`int<class_int>` peer_id, :ref:`bool<class_bool>` server_compatibility=false **)**

Inicializar el par multijugador con el ``peer_id`` dado (debe estar entre 1 y 2147483647).

Si ``server_compatibilty`` es ``false`` (por defecto), el par multijugador estará inmediatamente en el estado :ref:`NetworkedMultiplayerPeer.CONNECTION_CONNECTED<class_NetworkedMultiplayerPeer_constant_CONNECTION_CONNECTED>` y la :ref:`NetworkedMultiplayerPeer.connection_succeeded<class_NetworkedMultiplayerPeer_signal_connection_succeeded>` no se emitirá.

Si ``server_compatibilty`` es ``true`` el par suprimirá todas las señales de :ref:`NetworkedMultiplayerPeer.peer_connected<class_NetworkedMultiplayerPeer_signal_peer_connected>` hasta que un par con id :ref:`NetworkedMultiplayerPeer.TARGET_PEER_SERVER<class_NetworkedMultiplayerPeer_constant_TARGET_PEER_SERVER>` se conecte y entonces emitirá :ref:`NetworkedMultiplayerPeer.connection_succeeded<class_NetworkedMultiplayerPeer_signal_connection_succeeded>`. Después de eso, la señal :ref:`NetworkedMultiplayerPeer.peer_connected<class_NetworkedMultiplayerPeer_signal_peer_connected>` será emitida para cada par ya conectado, y cualquier nuevo par que pueda conectarse. Si el par del servidor se desconecta después de eso, se emitirá la señal :ref:`NetworkedMultiplayerPeer.server_disconnected<class_NetworkedMultiplayerPeer_signal_server_disconnected>` y el estado se convertirá en :ref:`NetworkedMultiplayerPeer.CONNECTION_CONNECTED<class_NetworkedMultiplayerPeer_constant_CONNECTION_CONNECTED>`.

----

.. _class_WebRTCMultiplayer_method_remove_peer:

- void **remove_peer** **(** :ref:`int<class_int>` peer_id **)**

Quita el par con el ``peer_id`` dado de la malla. Si el par estaba conectado, y se emitió :ref:`NetworkedMultiplayerPeer.peer_connected<class_NetworkedMultiplayerPeer_signal_peer_connected>` para él, entonces se emitirá :ref:`NetworkedMultiplayerPeer.peer_disconnected<class_NetworkedMultiplayerPeer_signal_peer_disconnected>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
