:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the ARVRServer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ARVRServer:

ARVRServer
==========

**Inherits:** :ref:`Object<class_Object>`

Servidor para las funciones de AR y VR.

Descripción
----------------------

El servidor AR/VR es el corazón de nuestra solución de Realidad Virtual y Avanzada y maneja todo el procesamiento.

Tutoriales
--------------------

- :doc:`../tutorials/vr/index`

Propiedades
----------------------

+-------------------------------------------+-----------------------------------------------------------------------+---------+
| :ref:`ARVRInterface<class_ARVRInterface>` | :ref:`primary_interface<class_ARVRServer_property_primary_interface>` |         |
+-------------------------------------------+-----------------------------------------------------------------------+---------+
| :ref:`float<class_float>`                 | :ref:`world_scale<class_ARVRServer_property_world_scale>`             | ``1.0`` |
+-------------------------------------------+-----------------------------------------------------------------------+---------+

Métodos
--------------

+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                      | :ref:`add_interface<class_ARVRServer_method_add_interface>` **(** :ref:`ARVRInterface<class_ARVRInterface>` interface **)**                                                  |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                      | :ref:`add_tracker<class_ARVRServer_method_add_tracker>` **(** :ref:`ARVRPositionalTracker<class_ARVRPositionalTracker>` tracker **)**                                        |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                      | :ref:`center_on_hmd<class_ARVRServer_method_center_on_hmd>` **(** :ref:`RotationMode<enum_ARVRServer_RotationMode>` rotation_mode, :ref:`bool<class_bool>` keep_height **)** |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                      | :ref:`clear_primary_interface_if<class_ARVRServer_method_clear_primary_interface_if>` **(** :ref:`ARVRInterface<class_ARVRInterface>` interface **)**                        |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ARVRInterface<class_ARVRInterface>`                 | :ref:`find_interface<class_ARVRServer_method_find_interface>` **(** :ref:`String<class_String>` name **)** |const|                                                           |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>`                         | :ref:`get_hmd_transform<class_ARVRServer_method_get_hmd_transform>` **(** **)**                                                                                              |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ARVRInterface<class_ARVRInterface>`                 | :ref:`get_interface<class_ARVRServer_method_get_interface>` **(** :ref:`int<class_int>` idx **)** |const|                                                                    |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                     | :ref:`get_interface_count<class_ARVRServer_method_get_interface_count>` **(** **)** |const|                                                                                  |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                                 | :ref:`get_interfaces<class_ARVRServer_method_get_interfaces>` **(** **)** |const|                                                                                            |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                     | :ref:`get_last_commit_usec<class_ARVRServer_method_get_last_commit_usec>` **(** **)**                                                                                        |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                     | :ref:`get_last_frame_usec<class_ARVRServer_method_get_last_frame_usec>` **(** **)**                                                                                          |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                     | :ref:`get_last_process_usec<class_ARVRServer_method_get_last_process_usec>` **(** **)**                                                                                      |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform<class_Transform>`                         | :ref:`get_reference_frame<class_ARVRServer_method_get_reference_frame>` **(** **)** |const|                                                                                  |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ARVRPositionalTracker<class_ARVRPositionalTracker>` | :ref:`get_tracker<class_ARVRServer_method_get_tracker>` **(** :ref:`int<class_int>` idx **)** |const|                                                                        |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                     | :ref:`get_tracker_count<class_ARVRServer_method_get_tracker_count>` **(** **)** |const|                                                                                      |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                      | :ref:`remove_interface<class_ARVRServer_method_remove_interface>` **(** :ref:`ARVRInterface<class_ARVRInterface>` interface **)**                                            |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                      | :ref:`remove_tracker<class_ARVRServer_method_remove_tracker>` **(** :ref:`ARVRPositionalTracker<class_ARVRPositionalTracker>` tracker **)**                                  |
+-----------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_ARVRServer_signal_interface_added:

- **interface_added** **(** :ref:`String<class_String>` interface_name **)**

Emitido cuando se ha añadido una nueva interfaz.

----

.. _class_ARVRServer_signal_interface_removed:

- **interface_removed** **(** :ref:`String<class_String>` interface_name **)**

Emitido cuando se quita una interfaz.

----

.. _class_ARVRServer_signal_tracker_added:

- **tracker_added** **(** :ref:`String<class_String>` tracker_name, :ref:`int<class_int>` type, :ref:`int<class_int>` id **)**

Emitted when a new tracker has been added. If you don't use a fixed number of controllers or if you're using :ref:`ARVRAnchor<class_ARVRAnchor>`\ s for an AR solution, it is important to react to this signal to add the appropriate :ref:`ARVRController<class_ARVRController>` or :ref:`ARVRAnchor<class_ARVRAnchor>` nodes related to this new tracker.

----

.. _class_ARVRServer_signal_tracker_removed:

- **tracker_removed** **(** :ref:`String<class_String>` tracker_name, :ref:`int<class_int>` type, :ref:`int<class_int>` id **)**

Emitted when a tracker is removed. You should remove any :ref:`ARVRController<class_ARVRController>` or :ref:`ARVRAnchor<class_ARVRAnchor>` points if applicable. This is not mandatory, the nodes simply become inactive and will be made active again when a new tracker becomes available (i.e. a new controller is switched on that takes the place of the previous one).

Enumeraciones
--------------------------

.. _enum_ARVRServer_TrackerType:

.. _class_ARVRServer_constant_TRACKER_CONTROLLER:

.. _class_ARVRServer_constant_TRACKER_BASESTATION:

.. _class_ARVRServer_constant_TRACKER_ANCHOR:

.. _class_ARVRServer_constant_TRACKER_ANY_KNOWN:

.. _class_ARVRServer_constant_TRACKER_UNKNOWN:

.. _class_ARVRServer_constant_TRACKER_ANY:

enum **TrackerType**:

- **TRACKER_CONTROLLER** = **1** --- El rastreador rastrea la ubicación de un controlador.

- **TRACKER_BASESTATION** = **2** --- El rastreador rastrea la ubicación de una estación base.

- **TRACKER_ANCHOR** = **4** --- El rastreador rastrea la ubicación y el tamaño de un ancla AR.

- **TRACKER_ANY_KNOWN** = **127** --- Se utiliza internamente para filtrar los rastreadores de cualquier tipo conocido.

- **TRACKER_UNKNOWN** = **128** --- Se usa internamente si aún no hemos establecido el tipo de rastreador.

- **TRACKER_ANY** = **255** --- Se utiliza internamente para seleccionar todos los rastreadores.

----

.. _enum_ARVRServer_RotationMode:

.. _class_ARVRServer_constant_RESET_FULL_ROTATION:

.. _class_ARVRServer_constant_RESET_BUT_KEEP_TILT:

.. _class_ARVRServer_constant_DONT_RESET_ROTATION:

enum **RotationMode**:

- **RESET_FULL_ROTATION** = **0** --- Reajustar completamente la orientación del HMD. Independientemente de la dirección en la que el usuario está mirando en el mundo real. El usuario mirará hacia adelante en el mundo virtual.

- **RESET_BUT_KEEP_TILT** = **1** --- Restablece la orientación pero mantiene la inclinación del dispositivo. Así que si estamos mirando hacia abajo, seguimos mirando hacia abajo pero la orientación se reajustará.

- **DONT_RESET_ROTATION** = **2** --- No reajusta la orientación del HMD, sólo la posición del jugador se centra.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_ARVRServer_property_primary_interface:

- :ref:`ARVRInterface<class_ARVRInterface>` **primary_interface**

+----------+------------------------------+
| *Setter* | set_primary_interface(value) |
+----------+------------------------------+
| *Getter* | get_primary_interface()      |
+----------+------------------------------+

The primary :ref:`ARVRInterface<class_ARVRInterface>` currently bound to the ``ARVRServer``.

----

.. _class_ARVRServer_property_world_scale:

- :ref:`float<class_float>` **world_scale**

+-----------+------------------------+
| *Default* | ``1.0``                |
+-----------+------------------------+
| *Setter*  | set_world_scale(value) |
+-----------+------------------------+
| *Getter*  | get_world_scale()      |
+-----------+------------------------+

Permite ajustar la escala a las unidades de su juego. La mayoría de las plataformas AR/VR asumen una escala de 1 unidad del mundo del juego = 1 metro del mundo real.

Descripciones de Métodos
------------------------------------------------

.. _class_ARVRServer_method_add_interface:

- void **add_interface** **(** :ref:`ARVRInterface<class_ARVRInterface>` interface **)**

Registers an :ref:`ARVRInterface<class_ARVRInterface>` object.

----

.. _class_ARVRServer_method_add_tracker:

- void **add_tracker** **(** :ref:`ARVRPositionalTracker<class_ARVRPositionalTracker>` tracker **)**

Registers a new :ref:`ARVRPositionalTracker<class_ARVRPositionalTracker>` that tracks a spatial location in real space.

----

.. _class_ARVRServer_method_center_on_hmd:

- void **center_on_hmd** **(** :ref:`RotationMode<enum_ARVRServer_RotationMode>` rotation_mode, :ref:`bool<class_bool>` keep_height **)**

Esta es una función importante para entender correctamente. Las plataformas AR y VR manejan la posición de forma ligeramente diferente.

Para las plataformas que no ofrecen seguimiento espacial, nuestro punto de origen (0,0,0) es la ubicación de nuestro HMD, pero tienes poco control sobre la dirección a la que se dirige el jugador en el mundo real.

Para las plataformas que sí ofrecen rastreo espacial, nuestro punto de origen depende mucho del sistema. Para OpenVR, nuestro punto de origen suele ser el centro del espacio de seguimiento, en el suelo. Para otras plataformas, a menudo es la ubicación de la cámara de seguimiento.

Este método permite centrar el rastreador en la ubicación del HMD. Tomará la ubicación actual del HMD y la usará para ajustar todos los datos de rastreo; en esencia, realineará el mundo real con la posición actual de su jugador en el mundo del juego.

Para que este método produzca resultados utilizables, la información de rastreo debe estar disponible. Esto a menudo toma unos cuantos fotogramas después de comenzar el juego.

Deberías llamar a este método después de que hayan pasado unos segundos. Por ejemplo, cuando el usuario solicita un reajuste de la pantalla manteniendo un botón designado en un controlador durante un corto período de tiempo, o cuando se implementa un mecanismo de teletransporte.

----

.. _class_ARVRServer_method_clear_primary_interface_if:

- void **clear_primary_interface_if** **(** :ref:`ARVRInterface<class_ARVRInterface>` interface **)**

Clears our current primary interface if it is set to the provided interface.

----

.. _class_ARVRServer_method_find_interface:

- :ref:`ARVRInterface<class_ARVRInterface>` **find_interface** **(** :ref:`String<class_String>` name **)** |const|

Encuentra una interfaz por su nombre. Por ejemplo, si su proyecto utiliza las capacidades de una plataforma AR/VR, puede encontrar la interfaz de esa plataforma por su nombre e inicializarla.

----

.. _class_ARVRServer_method_get_hmd_transform:

- :ref:`Transform<class_Transform>` **get_hmd_transform** **(** **)**

Devuelve la transformación de la interfaz primaria.

----

.. _class_ARVRServer_method_get_interface:

- :ref:`ARVRInterface<class_ARVRInterface>` **get_interface** **(** :ref:`int<class_int>` idx **)** |const|

Devuelve la interfaz registrada en un índice determinado en nuestra lista de interfaces.

----

.. _class_ARVRServer_method_get_interface_count:

- :ref:`int<class_int>` **get_interface_count** **(** **)** |const|

Devuelve el número de interfaces registradas actualmente en el servidor AR/VR. Si su proyecto soporta múltiples plataformas AR/VR, puede mirar a través de la interfaz disponible, y presentar al usuario una selección o simplemente tratar de inicializar cada interfaz y usar la primera que devuelva ``true``.

----

.. _class_ARVRServer_method_get_interfaces:

- :ref:`Array<class_Array>` **get_interfaces** **(** **)** |const|

Devuelve una lista de las interfaces disponibles, el ID y el nombre de cada interfaz.

----

.. _class_ARVRServer_method_get_last_commit_usec:

- :ref:`int<class_int>` **get_last_commit_usec** **(** **)**

Returns the absolute timestamp (in μs) of the last ``ARVRServer`` commit of the AR/VR eyes to :ref:`VisualServer<class_VisualServer>`. The value comes from an internal call to :ref:`OS.get_ticks_usec<class_OS_method_get_ticks_usec>`.

----

.. _class_ARVRServer_method_get_last_frame_usec:

- :ref:`int<class_int>` **get_last_frame_usec** **(** **)**

Devuelve la duración (en μs) del último fotograma. Esto se calcula como la diferencia entre :ref:`get_last_commit_usec<class_ARVRServer_method_get_last_commit_usec>` y :ref:`get_last_process_usec<class_ARVRServer_method_get_last_process_usec>` al hacer la confirmación.

----

.. _class_ARVRServer_method_get_last_process_usec:

- :ref:`int<class_int>` **get_last_process_usec** **(** **)**

Returns the absolute timestamp (in μs) of the last ``ARVRServer`` process callback. The value comes from an internal call to :ref:`OS.get_ticks_usec<class_OS_method_get_ticks_usec>`.

----

.. _class_ARVRServer_method_get_reference_frame:

- :ref:`Transform<class_Transform>` **get_reference_frame** **(** **)** |const|

Devuelve la transformación del fotograma de referencia. Mayormente usada internamente y expuesta para las interfaces de construcción GDNative.

----

.. _class_ARVRServer_method_get_tracker:

- :ref:`ARVRPositionalTracker<class_ARVRPositionalTracker>` **get_tracker** **(** :ref:`int<class_int>` idx **)** |const|

Devuelve el rastreador de posición en la identificación dada.

----

.. _class_ARVRServer_method_get_tracker_count:

- :ref:`int<class_int>` **get_tracker_count** **(** **)** |const|

Devuelve el número de rastreadores registrados actualmente.

----

.. _class_ARVRServer_method_remove_interface:

- void **remove_interface** **(** :ref:`ARVRInterface<class_ARVRInterface>` interface **)**

Removes this interface.

----

.. _class_ARVRServer_method_remove_tracker:

- void **remove_tracker** **(** :ref:`ARVRPositionalTracker<class_ARVRPositionalTracker>` tracker **)**

Removes this positional tracker.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
