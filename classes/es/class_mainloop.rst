:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the MainLoop.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_MainLoop:

MainLoop
========

**Inherits:** :ref:`Object<class_Object>`

**Inherited By:** :ref:`SceneTree<class_SceneTree>`

Clase base abstracta para el bucle principal del juego.

Descripción
----------------------

``MainLoop`` is the abstract base class for a Godot project's game loop. It is inherited by :ref:`SceneTree<class_SceneTree>`, which is the default game loop implementation used in Godot projects, though it is also possible to write and use one's own ``MainLoop`` subclass instead of the scene tree.

Upon the application start, a ``MainLoop`` implementation must be provided to the OS; otherwise, the application will exit. This happens automatically (and a :ref:`SceneTree<class_SceneTree>` is created) unless a main :ref:`Script<class_Script>` is provided from the command line (with e.g. ``godot -s my_loop.gd``, which should then be a ``MainLoop`` implementation.

Here is an example script implementing a simple ``MainLoop``:

::

    extends MainLoop
    
    var time_elapsed = 0
    var keys_typed = []
    var quit = false
    
    func _initialize():
        print("Initialized:")
        print("  Starting time: %s" % str(time_elapsed))
    
    func _idle(delta):
        time_elapsed += delta
        # Return true to end the main loop.
        return quit
    
    func _input_event(event):
        # Record keys.
        if event is InputEventKey and event.pressed and !event.echo:
            keys_typed.append(OS.get_scancode_string(event.scancode))
            # Quit on Escape press.
            if event.scancode == KEY_ESCAPE:
                quit = true
        # Quit on any mouse click.
        if event is InputEventMouseButton:
            quit = true
    
    func _finalize():
        print("Finalized:")
        print("  End time: %s" % str(time_elapsed))
        print("  Keys typed: %s" % var2str(keys_typed))

Métodos
--------------

+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`_drop_files<class_MainLoop_method__drop_files>` **(** :ref:`PoolStringArray<class_PoolStringArray>` files, :ref:`int<class_int>` from_screen **)** |virtual| |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`_finalize<class_MainLoop_method__finalize>` **(** **)** |virtual|                                                                                            |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`_global_menu_action<class_MainLoop_method__global_menu_action>` **(** :ref:`Variant<class_Variant>` id, :ref:`Variant<class_Variant>` meta **)** |virtual|   |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`_idle<class_MainLoop_method__idle>` **(** :ref:`float<class_float>` delta **)** |virtual|                                                                    |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`_initialize<class_MainLoop_method__initialize>` **(** **)** |virtual|                                                                                        |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`_input_event<class_MainLoop_method__input_event>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                            |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`_input_text<class_MainLoop_method__input_text>` **(** :ref:`String<class_String>` text **)** |virtual|                                                       |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`_iteration<class_MainLoop_method__iteration>` **(** :ref:`float<class_float>` delta **)** |virtual|                                                          |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`finish<class_MainLoop_method_finish>` **(** **)**                                                                                                            |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`idle<class_MainLoop_method_idle>` **(** :ref:`float<class_float>` delta **)**                                                                                |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`init<class_MainLoop_method_init>` **(** **)**                                                                                                                |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`input_event<class_MainLoop_method_input_event>` **(** :ref:`InputEvent<class_InputEvent>` event **)**                                                        |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`input_text<class_MainLoop_method_input_text>` **(** :ref:`String<class_String>` text **)**                                                                   |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`iteration<class_MainLoop_method_iteration>` **(** :ref:`float<class_float>` delta **)**                                                                      |
+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_MainLoop_signal_on_request_permissions_result:

- **on_request_permissions_result** **(** :ref:`String<class_String>` permission, :ref:`bool<class_bool>` granted **)**

Emitido cuando un usuario responde a una solicitud de permiso.

Constantes
--------------------

.. _class_MainLoop_constant_NOTIFICATION_WM_MOUSE_ENTER:

.. _class_MainLoop_constant_NOTIFICATION_WM_MOUSE_EXIT:

.. _class_MainLoop_constant_NOTIFICATION_WM_FOCUS_IN:

.. _class_MainLoop_constant_NOTIFICATION_WM_FOCUS_OUT:

.. _class_MainLoop_constant_NOTIFICATION_WM_QUIT_REQUEST:

.. _class_MainLoop_constant_NOTIFICATION_WM_GO_BACK_REQUEST:

.. _class_MainLoop_constant_NOTIFICATION_WM_UNFOCUS_REQUEST:

.. _class_MainLoop_constant_NOTIFICATION_OS_MEMORY_WARNING:

.. _class_MainLoop_constant_NOTIFICATION_TRANSLATION_CHANGED:

.. _class_MainLoop_constant_NOTIFICATION_WM_ABOUT:

.. _class_MainLoop_constant_NOTIFICATION_CRASH:

.. _class_MainLoop_constant_NOTIFICATION_OS_IME_UPDATE:

.. _class_MainLoop_constant_NOTIFICATION_APP_RESUMED:

.. _class_MainLoop_constant_NOTIFICATION_APP_PAUSED:

- **NOTIFICATION_WM_MOUSE_ENTER** = **1002** --- Notificación recibida del sistema operativo cuando el ratón entra en la ventana del juego.

Implementado en plataformas de escritorio y web.

- **NOTIFICATION_WM_MOUSE_EXIT** = **1003** --- Notificación recibida del sistema operativo cuando el ratón sale de la ventana del juego.

Implementado en plataformas de escritorio y web.

- **NOTIFICATION_WM_FOCUS_IN** = **1004** --- Notificación recibida del sistema operativo cuando la ventana del juego está enfocada.

Implementado en todas las plataformas.

- **NOTIFICATION_WM_FOCUS_OUT** = **1005** --- Notificación recibida del sistema operativo cuando la ventana del juego está desenfocada.

Implementado en todas las plataformas.

- **NOTIFICATION_WM_QUIT_REQUEST** = **1006** --- Notification received from the OS when a quit request is sent (e.g. closing the window with a "Close" button or Alt+F4).

Implemented on desktop platforms.

- **NOTIFICATION_WM_GO_BACK_REQUEST** = **1007** --- Notificación recibida del sistema operativo cuando se envía una solicitud de retroceso (por ejemplo, pulsando el botón "Back" en Android).

Específico de la plataforma Android.

- **NOTIFICATION_WM_UNFOCUS_REQUEST** = **1008** --- Notification received from the OS when an unfocus request is sent (e.g. another OS window wants to take the focus).

No supported platforms currently send this notification.

- **NOTIFICATION_OS_MEMORY_WARNING** = **1009** --- Notificación recibida del sistema operativo cuando la aplicación supera su memoria asignada.

Específico de la plataforma iOS.

- **NOTIFICATION_TRANSLATION_CHANGED** = **1010** --- Notificación recibida cuando las traducciones pueden haber cambiado. Puede ser activada por el usuario al cambiar el locale. Puede utilizarse para responder a los cambios de idioma, por ejemplo, para cambiar las strings de la interfaz de usuario sobre la marcha. Útil cuando se trabaja con el soporte de traducción incorporado, como :ref:`Object.tr<class_Object_method_tr>`.

- **NOTIFICATION_WM_ABOUT** = **1011** --- Notificación recibida del sistema operativo cuando se envía una solicitud de información "Acerca de".

Específico de la plataforma MacOS.

- **NOTIFICATION_CRASH** = **1012** --- Notificación recibida del controlador de fallos de Godot cuando el motor está a punto de fallar.

Implementado en las plataformas de escritorio si el manejador de fallos está habilitado.

- **NOTIFICATION_OS_IME_UPDATE** = **1013** --- Notificación recibida del sistema operativo cuando se produce una actualización del motor del método de entrada (por ejemplo, cambio de la posición del cursor de la IME o de la string de composición).

Específico de la plataforma MacOS.

- **NOTIFICATION_APP_RESUMED** = **1014** --- Notification received from the OS when the app is resumed.

Specific to the Android platform.

- **NOTIFICATION_APP_PAUSED** = **1015** --- Notification received from the OS when the app is paused.

Specific to the Android platform.

Descripciones de Métodos
------------------------------------------------

.. _class_MainLoop_method__drop_files:

- void **_drop_files** **(** :ref:`PoolStringArray<class_PoolStringArray>` files, :ref:`int<class_int>` from_screen **)** |virtual|

Called when files are dragged from the OS file manager and dropped in the game window. The arguments are a list of file paths and the identifier of the screen where the drag originated.

----

.. _class_MainLoop_method__finalize:

- void **_finalize** **(** **)** |virtual|

Llamada previa a la salida del programa.

----

.. _class_MainLoop_method__global_menu_action:

- void **_global_menu_action** **(** :ref:`Variant<class_Variant>` id, :ref:`Variant<class_Variant>` meta **)** |virtual|

Called when the user performs an action in the system global menu (e.g. the Mac OS menu bar).

----

.. _class_MainLoop_method__idle:

- :ref:`bool<class_bool>` **_idle** **(** :ref:`float<class_float>` delta **)** |virtual|

Llamada a cada fotograma ocioso con el tiempo desde el último fotograma ocioso como argumento (en segundos). Equivalente a :ref:`Node._process<class_Node_method__process>`.

Si se implementa, el método debe devolver un valor booleano. ``true`` termina el bucle principal, mientras que ``false`` le permite pasar al siguiente fotograma.

----

.. _class_MainLoop_method__initialize:

- void **_initialize** **(** **)** |virtual|

Llamado una vez durante la inicialización.

----

.. _class_MainLoop_method__input_event:

- void **_input_event** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

Called whenever an :ref:`InputEvent<class_InputEvent>` is received by the main loop.

----

.. _class_MainLoop_method__input_text:

- void **_input_text** **(** :ref:`String<class_String>` text **)** |virtual|

Deprecated callback, does not do anything. Use :ref:`_input_event<class_MainLoop_method__input_event>` to parse text input. Will be removed in Godot 4.0.

----

.. _class_MainLoop_method__iteration:

- :ref:`bool<class_bool>` **_iteration** **(** :ref:`float<class_float>` delta **)** |virtual|

Called each physics frame with the time since the last physics frame as argument (``delta``, in seconds). Equivalent to :ref:`Node._physics_process<class_Node_method__physics_process>`.

If implemented, the method must return a boolean value. ``true`` ends the main loop, while ``false`` lets it proceed to the next frame.

----

.. _class_MainLoop_method_finish:

- void **finish** **(** **)**

No debe llamarse manualmente, en su lugar, anular :ref:`_finalize<class_MainLoop_method__finalize>`. Será eliminado en Godot 4.0.

----

.. _class_MainLoop_method_idle:

- :ref:`bool<class_bool>` **idle** **(** :ref:`float<class_float>` delta **)**

No se debe llamar manualmente, anular :ref:`_idle<class_MainLoop_method__idle>` en su lugar. Será eliminado en Godot 4.0.

----

.. _class_MainLoop_method_init:

- void **init** **(** **)**

No se debe llamar manualmente, anular :ref:`_initialize<class_MainLoop_method__initialize>` en su lugar. Será eliminado en Godot 4.0.

----

.. _class_MainLoop_method_input_event:

- void **input_event** **(** :ref:`InputEvent<class_InputEvent>` event **)**

Should not be called manually, override :ref:`_input_event<class_MainLoop_method__input_event>` instead. Will be removed in Godot 4.0.

----

.. _class_MainLoop_method_input_text:

- void **input_text** **(** :ref:`String<class_String>` text **)**

Should not be called manually, override :ref:`_input_text<class_MainLoop_method__input_text>` instead. Will be removed in Godot 4.0.

----

.. _class_MainLoop_method_iteration:

- :ref:`bool<class_bool>` **iteration** **(** :ref:`float<class_float>` delta **)**

No se debe llamar manualmente, anular :ref:`iteration<class_MainLoop_method_iteration>` en su lugar. Será eliminado en Godot 4.0.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
