:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the EditorImportPlugin.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_EditorImportPlugin:

EditorImportPlugin
==================

**Inherits:** :ref:`ResourceImporter<class_ResourceImporter>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Registra un importador de recursos personalizados en el editor. Usa la clase para analizar cualquier archivo e importarlo como un nuevo tipo de recurso.

Descripción
----------------------

EditorImportPlugins proporcionan una forma de ampliar la funcionalidad de importación de recursos del editor. Utilícelos para importar recursos de archivos personalizados o para proporcionar alternativas a los importadores existentes del editor. Registra tu :ref:`EditorPlugin<class_EditorPlugin>` con el :ref:`EditorPlugin.add_import_plugin<class_EditorPlugin_method_add_import_plugin>`.

Los EditorImportPlugins funcionan asociándose a extensiones de archivo específicas y a un tipo de recurso. Ver :ref:`get_recognized_extensions<class_EditorImportPlugin_method_get_recognized_extensions>` y :ref:`get_resource_type<class_EditorImportPlugin_method_get_resource_type>`. Opcionalmente, pueden especificar algunos preajustes de importación que afectan al proceso de importación. Los EditorImportPlugins se encargan de crear los recursos y de guardarlos en el directorio ``.import``.

A continuación se muestra un ejemplo de EditorImportPlugin que importa un :ref:`Mesh<class_Mesh>` de un archivo con la extensión ".special" o ".spec":

::

    tool
    extends EditorImportPlugin
    
    func get_importer_name():
        return "my.special.plugin"
    
    func get_visible_name():
        return "Importador de malla especial"
    
    func get_recognized_extensions():
        return ["special", "spec"]
    
    func get_save_extension():
        return "malla"
    
    func get_resource_type():
        return "Malla"
    
    func get_preset_count():
        return 1
    
    func get_preset_name(i):
        return "Default"
    
    func get_import_options(i):
        return [{"name": "mi_opcion", "default_value": false}]
    
    func import(archivo_fuente, salvar_ruta, opciones, variables_plataforma, archivos_generados):
        var archivo = File.new()
        if archivo.open(archivo_fuente, File.READ) != OK:
            return FAILED
    
        var malla = Mesh.new()
        # Rellena la malla con los datos leidos de archivo, se deje como un ejecicio al lector
    
        var nombreArchivo = salvar_ruta + "." + get_save_extension()
        ResourceSaver.save(nombreArchivo, malla)
        return OK

Tutoriales
--------------------

- :doc:`../tutorials/plugins/editor/import_plugins`

Métodos
--------------

+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`   | :ref:`get_import_options<class_EditorImportPlugin_method_get_import_options>` **(** :ref:`int<class_int>` preset **)** |virtual|                                                                                                                                                          |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`       | :ref:`get_import_order<class_EditorImportPlugin_method_get_import_order>` **(** **)** |virtual|                                                                                                                                                                                           |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>` | :ref:`get_importer_name<class_EditorImportPlugin_method_get_importer_name>` **(** **)** |virtual|                                                                                                                                                                                         |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`     | :ref:`get_option_visibility<class_EditorImportPlugin_method_get_option_visibility>` **(** :ref:`String<class_String>` option, :ref:`Dictionary<class_Dictionary>` options **)** |virtual|                                                                                                 |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`       | :ref:`get_preset_count<class_EditorImportPlugin_method_get_preset_count>` **(** **)** |virtual|                                                                                                                                                                                           |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>` | :ref:`get_preset_name<class_EditorImportPlugin_method_get_preset_name>` **(** :ref:`int<class_int>` preset **)** |virtual|                                                                                                                                                                |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`   | :ref:`get_priority<class_EditorImportPlugin_method_get_priority>` **(** **)** |virtual|                                                                                                                                                                                                   |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`   | :ref:`get_recognized_extensions<class_EditorImportPlugin_method_get_recognized_extensions>` **(** **)** |virtual|                                                                                                                                                                         |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>` | :ref:`get_resource_type<class_EditorImportPlugin_method_get_resource_type>` **(** **)** |virtual|                                                                                                                                                                                         |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>` | :ref:`get_save_extension<class_EditorImportPlugin_method_get_save_extension>` **(** **)** |virtual|                                                                                                                                                                                       |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>` | :ref:`get_visible_name<class_EditorImportPlugin_method_get_visible_name>` **(** **)** |virtual|                                                                                                                                                                                           |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`       | :ref:`import<class_EditorImportPlugin_method_import>` **(** :ref:`String<class_String>` source_file, :ref:`String<class_String>` save_path, :ref:`Dictionary<class_Dictionary>` options, :ref:`Array<class_Array>` platform_variants, :ref:`Array<class_Array>` gen_files **)** |virtual| |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Descripciones de Métodos
------------------------------------------------

.. _class_EditorImportPlugin_method_get_import_options:

- :ref:`Array<class_Array>` **get_import_options** **(** :ref:`int<class_int>` preset **)** |virtual|

Obtiene las opciones y los valores por defecto para el preajuste en este índice. Devuelve un array de diccionarios con las siguientes claves: ``name``, ``default_value``, ``property_hint`` (opcional), ``hint_string`` (opcional), ``uso`` (opcional).

----

.. _class_EditorImportPlugin_method_get_import_order:

- :ref:`int<class_int>` **get_import_order** **(** **)** |virtual|

Gets the order of this importer to be run when importing resources. Importers with *lower* import orders will be called first, and higher values will be called later. Use this to ensure the importer runs after the dependencies are already imported. The default import order is ``0`` unless overridden by a specific importer. See :ref:`ImportOrder<enum_ResourceImporter_ImportOrder>` for some predefined values.

----

.. _class_EditorImportPlugin_method_get_importer_name:

- :ref:`String<class_String>` **get_importer_name** **(** **)** |virtual|

Obtiene el nombre único del importador.

----

.. _class_EditorImportPlugin_method_get_option_visibility:

- :ref:`bool<class_bool>` **get_option_visibility** **(** :ref:`String<class_String>` option, :ref:`Dictionary<class_Dictionary>` options **)** |virtual|

Este método puede anularse para ocultar opciones de importación específicas si se cumplen las condiciones. Esto es principalmente útil para ocultar opciones que dependen de otras si una de ellas está desactivada. Por ejemplo:

::

    func get_option_visibility(option, options):
        # Sólo muestra el ajuste de calidad de pérdida si el modo de compresión está ajustado a "pérdida".
        if option == "compress/lossy_quality" y options.has("compress/mode"):
            return int(options["compress/mode"]) == COMPRESS_LOSSY
    
        retorno true

Devuelve ``true`` para que todas las opciones estén siempre visibles.

----

.. _class_EditorImportPlugin_method_get_preset_count:

- :ref:`int<class_int>` **get_preset_count** **(** **)** |virtual|

Obtiene el número de preajustes iniciales definidos por el plugin. Usa :ref:`get_import_options<class_EditorImportPlugin_method_get_import_options>` para obtener las opciones por defecto de preajuste y :ref:`get_preset_name<class_EditorImportPlugin_method_get_preset_name>` para obtener el nombre del preajuste.

----

.. _class_EditorImportPlugin_method_get_preset_name:

- :ref:`String<class_String>` **get_preset_name** **(** :ref:`int<class_int>` preset **)** |virtual|

Obtiene el nombre de las opciones de preajuste en este índice.

----

.. _class_EditorImportPlugin_method_get_priority:

- :ref:`float<class_float>` **get_priority** **(** **)** |virtual|

Obtiene la prioridad de este plugin para la extensión reconocida. Se preferirán los plugins de mayor prioridad. La prioridad por defecto es ``1.0``.

----

.. _class_EditorImportPlugin_method_get_recognized_extensions:

- :ref:`Array<class_Array>` **get_recognized_extensions** **(** **)** |virtual|

Obtiene la lista de extensiones de archivos para asociar con este cargador (sin distinción de mayúsculas y minúsculas). Por ejemplo, ``["obj"]``.

----

.. _class_EditorImportPlugin_method_get_resource_type:

- :ref:`String<class_String>` **get_resource_type** **(** **)** |virtual|

Obtiene el tipo de recurso Godot asociado a este cargador. Por ejemplo, ``"Mesh"`` o ``"Animation"``.

----

.. _class_EditorImportPlugin_method_get_save_extension:

- :ref:`String<class_String>` **get_save_extension** **(** **)** |virtual|

Gets the extension used to save this resource in the ``.import`` directory (see :ref:`ProjectSettings.application/config/use_hidden_project_data_directory<class_ProjectSettings_property_application/config/use_hidden_project_data_directory>`).

----

.. _class_EditorImportPlugin_method_get_visible_name:

- :ref:`String<class_String>` **get_visible_name** **(** **)** |virtual|

Gets the name to display in the import window. You should choose this name as a continuation to "Import as", e.g. "Import as Special Mesh".

----

.. _class_EditorImportPlugin_method_import:

- :ref:`int<class_int>` **import** **(** :ref:`String<class_String>` source_file, :ref:`String<class_String>` save_path, :ref:`Dictionary<class_Dictionary>` options, :ref:`Array<class_Array>` platform_variants, :ref:`Array<class_Array>` gen_files **)** |virtual|

Importa el ``source_file`` en ``save_path`` con las opciones de importación ``options`` especificadas. Los arrays ``platform_variants`` y ``gen_files`` serán modificadas por esta función.

Este método debe ser anulado para hacer el trabajo de importación real. Ver la descripción de esta clase para un ejemplo de cómo sobreescribir este método.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
