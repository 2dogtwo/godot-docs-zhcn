:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Range.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Range:

Range
=====

**Inherits:** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`EditorSpinSlider<class_EditorSpinSlider>`, :ref:`ProgressBar<class_ProgressBar>`, :ref:`ScrollBar<class_ScrollBar>`, :ref:`Slider<class_Slider>`, :ref:`SpinBox<class_SpinBox>`, :ref:`TextureProgress<class_TextureProgress>`

Clase base abstracta para controles basados en el rango.

Descripción
----------------------

Rango es una clase base para los nodos :ref:`Control<class_Control>` que cambian un *valor* real entre un *mínimo* y un *máximo*, usando *paso* y *página*, por ejemplo una :ref:`ScrollBar<class_ScrollBar>`.

Propiedades
----------------------

+---------------------------+----------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`   | :ref:`allow_greater<class_Range_property_allow_greater>` | ``false`` |
+---------------------------+----------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`   | :ref:`allow_lesser<class_Range_property_allow_lesser>`   | ``false`` |
+---------------------------+----------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`   | :ref:`exp_edit<class_Range_property_exp_edit>`           | ``false`` |
+---------------------------+----------------------------------------------------------+-----------+
| :ref:`float<class_float>` | :ref:`max_value<class_Range_property_max_value>`         | ``100.0`` |
+---------------------------+----------------------------------------------------------+-----------+
| :ref:`float<class_float>` | :ref:`min_value<class_Range_property_min_value>`         | ``0.0``   |
+---------------------------+----------------------------------------------------------+-----------+
| :ref:`float<class_float>` | :ref:`page<class_Range_property_page>`                   | ``0.0``   |
+---------------------------+----------------------------------------------------------+-----------+
| :ref:`float<class_float>` | :ref:`ratio<class_Range_property_ratio>`                 |           |
+---------------------------+----------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`   | :ref:`rounded<class_Range_property_rounded>`             | ``false`` |
+---------------------------+----------------------------------------------------------+-----------+
| :ref:`float<class_float>` | :ref:`step<class_Range_property_step>`                   | ``1.0``   |
+---------------------------+----------------------------------------------------------+-----------+
| :ref:`float<class_float>` | :ref:`value<class_Range_property_value>`                 | ``0.0``   |
+---------------------------+----------------------------------------------------------+-----------+

Métodos
--------------

+------+---------------------------------------------------------------------------------+
| void | :ref:`share<class_Range_method_share>` **(** :ref:`Node<class_Node>` with **)** |
+------+---------------------------------------------------------------------------------+
| void | :ref:`unshare<class_Range_method_unshare>` **(** **)**                          |
+------+---------------------------------------------------------------------------------+

Señales
--------------

.. _class_Range_signal_changed:

- **changed** **(** **)**

Emitido cuando :ref:`min_value<class_Range_property_min_value>`, :ref:`max_value<class_Range_property_max_value>`, :ref:`page<class_Range_property_page>` o :ref:`step<class_Range_property_step>` cambian.

----

.. _class_Range_signal_value_changed:

- **value_changed** **(** :ref:`float<class_float>` value **)**

Emitido cuando cambia :ref:`value<class_Range_property_value>`.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Range_property_allow_greater:

- :ref:`bool<class_bool>` **allow_greater**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_allow_greater(value) |
+-----------+--------------------------+
| *Getter*  | is_greater_allowed()     |
+-----------+--------------------------+

Si ``true``, :ref:`value<class_Range_property_value>` puede ser mayor que :ref:`max_value<class_Range_property_max_value>`.

----

.. _class_Range_property_allow_lesser:

- :ref:`bool<class_bool>` **allow_lesser**

+-----------+-------------------------+
| *Default* | ``false``               |
+-----------+-------------------------+
| *Setter*  | set_allow_lesser(value) |
+-----------+-------------------------+
| *Getter*  | is_lesser_allowed()     |
+-----------+-------------------------+

Si ``true``, :ref:`value<class_Range_property_value>` puede ser menor que :ref:`min_value<class_Range_property_min_value>`.

----

.. _class_Range_property_exp_edit:

- :ref:`bool<class_bool>` **exp_edit**

+-----------+----------------------+
| *Default* | ``false``            |
+-----------+----------------------+
| *Setter*  | set_exp_ratio(value) |
+-----------+----------------------+
| *Getter*  | is_ratio_exp()       |
+-----------+----------------------+

Si ``true``, y ``min_value`` es mayor que 0, ``value`` se representará exponencialmente en lugar de linealmente.

----

.. _class_Range_property_max_value:

- :ref:`float<class_float>` **max_value**

+-----------+----------------+
| *Default* | ``100.0``      |
+-----------+----------------+
| *Setter*  | set_max(value) |
+-----------+----------------+
| *Getter*  | get_max()      |
+-----------+----------------+

Valor máximo. El rango se fija si el ``value`` es mayor que el ``max_value``.

----

.. _class_Range_property_min_value:

- :ref:`float<class_float>` **min_value**

+-----------+----------------+
| *Default* | ``0.0``        |
+-----------+----------------+
| *Setter*  | set_min(value) |
+-----------+----------------+
| *Getter*  | get_min()      |
+-----------+----------------+

Valor mínimo. El rango se fija si el ``value`` es menor que el ``min_value``.

----

.. _class_Range_property_page:

- :ref:`float<class_float>` **page**

+-----------+-----------------+
| *Default* | ``0.0``         |
+-----------+-----------------+
| *Setter*  | set_page(value) |
+-----------+-----------------+
| *Getter*  | get_page()      |
+-----------+-----------------+

Tamaño de la página. Usado principalmente para la :ref:`ScrollBar<class_ScrollBar>`. La longitud de la ScrollBar es su tamaño multiplicado por ``page`` sobre la diferencia entre ``min_value`` y ``max_value``.

----

.. _class_Range_property_ratio:

- :ref:`float<class_float>` **ratio**

+----------+---------------------+
| *Setter* | set_as_ratio(value) |
+----------+---------------------+
| *Getter* | get_as_ratio()      |
+----------+---------------------+

El valor asignado entre 0 y 1.

----

.. _class_Range_property_rounded:

- :ref:`bool<class_bool>` **rounded**

+-----------+-------------------------------+
| *Default* | ``false``                     |
+-----------+-------------------------------+
| *Setter*  | set_use_rounded_values(value) |
+-----------+-------------------------------+
| *Getter*  | is_using_rounded_values()     |
+-----------+-------------------------------+

Si ``true``, ``value`` siempre se redondeará al entero más cercano.

----

.. _class_Range_property_step:

- :ref:`float<class_float>` **step**

+-----------+-----------------+
| *Default* | ``1.0``         |
+-----------+-----------------+
| *Setter*  | set_step(value) |
+-----------+-----------------+
| *Getter*  | get_step()      |
+-----------+-----------------+

Si es mayor de 0, el valor ``value`` siempre se redondeará a un múltiplo de ``step``. Si ``rounded`` es también ``true``, ``value`` se redondeará primero a un múltiplo de ``step`` y luego al entero más cercano.

----

.. _class_Range_property_value:

- :ref:`float<class_float>` **value**

+-----------+------------------+
| *Default* | ``0.0``          |
+-----------+------------------+
| *Setter*  | set_value(value) |
+-----------+------------------+
| *Getter*  | get_value()      |
+-----------+------------------+

El valor actual del rango.

Descripciones de Métodos
------------------------------------------------

.. _class_Range_method_share:

- void **share** **(** :ref:`Node<class_Node>` with **)**

Une dos rangos junto con cualquier rango previamente agrupado con cualquiera de ellos. Cuando cualquiera de las variables miembros del rango cambie, compartirá el nuevo valor con todos los demás rangos de su grupo.

----

.. _class_Range_method_unshare:

- void **unshare** **(** **)**

Para el rango, de compartir sus variables de miembros con cualquier otro.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
