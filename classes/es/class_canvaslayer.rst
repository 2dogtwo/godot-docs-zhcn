:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the CanvasLayer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_CanvasLayer:

CanvasLayer
===========

**Inherits:** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`ParallaxBackground<class_ParallaxBackground>`

Capa de dibujo de canvas.

Descripción
----------------------

Capa de dibujo de canvas. Los nodos que son hijos directos o indirectos de una ``CanvasLayer`` serán dibujados en esa capa. La capa es un índice numérico que define el orden de dibujo. La escena 2D por defecto se dibuja con el índice 0, por lo que una ``CanvasLayer`` con índice -1 se dibujará abajo, y una con índice 1 se dibujará arriba. Esto es muy útil para los HUD (en la capa 1+ o superior), o para los fondos (en la capa -1 o inferior).

Tutoriales
--------------------

- :doc:`Viewport and canvas transforms <../tutorials/2d/2d_transforms>`

- :doc:`Canvas layers <../tutorials/2d/canvas_layers>`

- `2D Dodge The Creeps Demo <https://godotengine.org/asset-library/asset/515>`__

Propiedades
----------------------

+---------------------------------------+----------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Node<class_Node>`               | :ref:`custom_viewport<class_CanvasLayer_property_custom_viewport>`               |                                     |
+---------------------------------------+----------------------------------------------------------------------------------+-------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`follow_viewport_enable<class_CanvasLayer_property_follow_viewport_enable>` | ``false``                           |
+---------------------------------------+----------------------------------------------------------------------------------+-------------------------------------+
| :ref:`float<class_float>`             | :ref:`follow_viewport_scale<class_CanvasLayer_property_follow_viewport_scale>`   | ``1.0``                             |
+---------------------------------------+----------------------------------------------------------------------------------+-------------------------------------+
| :ref:`int<class_int>`                 | :ref:`layer<class_CanvasLayer_property_layer>`                                   | ``1``                               |
+---------------------------------------+----------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`offset<class_CanvasLayer_property_offset>`                                 | ``Vector2( 0, 0 )``                 |
+---------------------------------------+----------------------------------------------------------------------------------+-------------------------------------+
| :ref:`float<class_float>`             | :ref:`rotation<class_CanvasLayer_property_rotation>`                             | ``0.0``                             |
+---------------------------------------+----------------------------------------------------------------------------------+-------------------------------------+
| :ref:`float<class_float>`             | :ref:`rotation_degrees<class_CanvasLayer_property_rotation_degrees>`             | ``0.0``                             |
+---------------------------------------+----------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`scale<class_CanvasLayer_property_scale>`                                   | ``Vector2( 1, 1 )``                 |
+---------------------------------------+----------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`transform<class_CanvasLayer_property_transform>`                           | ``Transform2D( 1, 0, 0, 1, 0, 0 )`` |
+---------------------------------------+----------------------------------------------------------------------------------+-------------------------------------+

Métodos
--------------

+-----------------------+----------------------------------------------------------------------------+
| :ref:`RID<class_RID>` | :ref:`get_canvas<class_CanvasLayer_method_get_canvas>` **(** **)** |const| |
+-----------------------+----------------------------------------------------------------------------+

Descripciones de Propiedades
--------------------------------------------------------

.. _class_CanvasLayer_property_custom_viewport:

- :ref:`Node<class_Node>` **custom_viewport**

+----------+----------------------------+
| *Setter* | set_custom_viewport(value) |
+----------+----------------------------+
| *Getter* | get_custom_viewport()      |
+----------+----------------------------+

El nodo personalizado :ref:`Viewport<class_Viewport>` asignado al ``CanvasLayer``. Si ``null``, utiliza en su lugar la vista por defecto.

----

.. _class_CanvasLayer_property_follow_viewport_enable:

- :ref:`bool<class_bool>` **follow_viewport_enable**

+-----------+----------------------------+
| *Default* | ``false``                  |
+-----------+----------------------------+
| *Setter*  | set_follow_viewport(value) |
+-----------+----------------------------+
| *Getter*  | is_following_viewport()    |
+-----------+----------------------------+

Establece la capa que sigue a la vista para simular un pseudo efecto 3D.

----

.. _class_CanvasLayer_property_follow_viewport_scale:

- :ref:`float<class_float>` **follow_viewport_scale**

+-----------+----------------------------------+
| *Default* | ``1.0``                          |
+-----------+----------------------------------+
| *Setter*  | set_follow_viewport_scale(value) |
+-----------+----------------------------------+
| *Getter*  | get_follow_viewport_scale()      |
+-----------+----------------------------------+

Escala la capa cuando utiliza :ref:`follow_viewport_enable<class_CanvasLayer_property_follow_viewport_enable>`. Las capas que se mueven en el primer plano deben tener escalas crecientes, mientras que las capas que se mueven en el fondo deben tener escalas decrecientes.

----

.. _class_CanvasLayer_property_layer:

- :ref:`int<class_int>` **layer**

+-----------+------------------+
| *Default* | ``1``            |
+-----------+------------------+
| *Setter*  | set_layer(value) |
+-----------+------------------+
| *Getter*  | get_layer()      |
+-----------+------------------+

Índice de capas para el orden de dibujado. Los valores más bajos se dibujan primero.

----

.. _class_CanvasLayer_property_offset:

- :ref:`Vector2<class_Vector2>` **offset**

+-----------+---------------------+
| *Default* | ``Vector2( 0, 0 )`` |
+-----------+---------------------+
| *Setter*  | set_offset(value)   |
+-----------+---------------------+
| *Getter*  | get_offset()        |
+-----------+---------------------+

El desplazamiento de la capa base.

----

.. _class_CanvasLayer_property_rotation:

- :ref:`float<class_float>` **rotation**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_rotation(value) |
+-----------+---------------------+
| *Getter*  | get_rotation()      |
+-----------+---------------------+

La rotación de la capa en radianes.

----

.. _class_CanvasLayer_property_rotation_degrees:

- :ref:`float<class_float>` **rotation_degrees**

+-----------+-----------------------------+
| *Default* | ``0.0``                     |
+-----------+-----------------------------+
| *Setter*  | set_rotation_degrees(value) |
+-----------+-----------------------------+
| *Getter*  | get_rotation_degrees()      |
+-----------+-----------------------------+

La rotación de la capa en grados.

----

.. _class_CanvasLayer_property_scale:

- :ref:`Vector2<class_Vector2>` **scale**

+-----------+---------------------+
| *Default* | ``Vector2( 1, 1 )`` |
+-----------+---------------------+
| *Setter*  | set_scale(value)    |
+-----------+---------------------+
| *Getter*  | get_scale()         |
+-----------+---------------------+

La escala de la capa.

----

.. _class_CanvasLayer_property_transform:

- :ref:`Transform2D<class_Transform2D>` **transform**

+-----------+-------------------------------------+
| *Default* | ``Transform2D( 1, 0, 0, 1, 0, 0 )`` |
+-----------+-------------------------------------+
| *Setter*  | set_transform(value)                |
+-----------+-------------------------------------+
| *Getter*  | get_transform()                     |
+-----------+-------------------------------------+

La transformada de la capa.

Descripciones de Métodos
------------------------------------------------

.. _class_CanvasLayer_method_get_canvas:

- :ref:`RID<class_RID>` **get_canvas** **(** **)** |const|

Devuelve el RID del canvas usado por esta capa.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
