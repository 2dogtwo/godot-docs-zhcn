:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Area2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Area2D:

Area2D
======

**Inherits:** :ref:`CollisionObject2D<class_CollisionObject2D>` **<** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

2D area for detection and physics and audio influence.

Descripción
----------------------

2D area that detects :ref:`CollisionObject2D<class_CollisionObject2D>` nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping) and route audio to a custom audio bus.

Tutoriales
--------------------

- :doc:`Using Area2D <../tutorials/physics/using_area_2d>`

- `2D Dodge The Creeps Demo <https://godotengine.org/asset-library/asset/515>`__

- `2D Pong Demo <https://godotengine.org/asset-library/asset/121>`__

- `2D Platformer Demo <https://godotengine.org/asset-library/asset/120>`__

Propiedades
----------------------

+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                       | :ref:`angular_damp<class_Area2D_property_angular_damp>`                     | ``1.0``             |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`String<class_String>`                     | :ref:`audio_bus_name<class_Area2D_property_audio_bus_name>`                 | ``"Master"``        |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                         | :ref:`audio_bus_override<class_Area2D_property_audio_bus_override>`         | ``false``           |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                       | :ref:`gravity<class_Area2D_property_gravity>`                               | ``98.0``            |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                       | :ref:`gravity_distance_scale<class_Area2D_property_gravity_distance_scale>` | ``0.0``             |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                         | :ref:`gravity_point<class_Area2D_property_gravity_point>`                   | ``false``           |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                   | :ref:`gravity_vec<class_Area2D_property_gravity_vec>`                       | ``Vector2( 0, 1 )`` |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                       | :ref:`linear_damp<class_Area2D_property_linear_damp>`                       | ``0.1``             |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                         | :ref:`monitorable<class_Area2D_property_monitorable>`                       | ``true``            |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                         | :ref:`monitoring<class_Area2D_property_monitoring>`                         | ``true``            |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                       | :ref:`priority<class_Area2D_property_priority>`                             | ``0.0``             |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+
| :ref:`SpaceOverride<enum_Area2D_SpaceOverride>` | :ref:`space_override<class_Area2D_property_space_override>`                 | ``0``               |
+-------------------------------------------------+-----------------------------------------------------------------------------+---------------------+

Métodos
--------------

+---------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`get_overlapping_areas<class_Area2D_method_get_overlapping_areas>` **(** **)** |const|              |
+---------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`get_overlapping_bodies<class_Area2D_method_get_overlapping_bodies>` **(** **)** |const|            |
+---------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`overlaps_area<class_Area2D_method_overlaps_area>` **(** :ref:`Node<class_Node>` area **)** |const| |
+---------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`overlaps_body<class_Area2D_method_overlaps_body>` **(** :ref:`Node<class_Node>` body **)** |const| |
+---------------------------+----------------------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_Area2D_signal_area_entered:

- **area_entered** **(** :ref:`Area2D<class_Area2D>` area **)**

Emitted when another Area2D enters this Area2D. Requires :ref:`monitoring<class_Area2D_property_monitoring>` to be set to ``true``.

\ ``area`` the other Area2D.

----

.. _class_Area2D_signal_area_exited:

- **area_exited** **(** :ref:`Area2D<class_Area2D>` area **)**

Emitted when another Area2D exits this Area2D. Requires :ref:`monitoring<class_Area2D_property_monitoring>` to be set to ``true``.

\ ``area`` the other Area2D.

----

.. _class_Area2D_signal_area_shape_entered:

- **area_shape_entered** **(** :ref:`RID<class_RID>` area_rid, :ref:`Area2D<class_Area2D>` area, :ref:`int<class_int>` area_shape_index, :ref:`int<class_int>` local_shape_index **)**

Emitted when one of another Area2D's :ref:`Shape2D<class_Shape2D>`\ s enters one of this Area2D's :ref:`Shape2D<class_Shape2D>`\ s. Requires :ref:`monitoring<class_Area2D_property_monitoring>` to be set to ``true``.

\ ``area_rid`` the :ref:`RID<class_RID>` of the other Area2D's :ref:`CollisionObject2D<class_CollisionObject2D>` used by the :ref:`Physics2DServer<class_Physics2DServer>`.

\ ``area`` the other Area2D.

\ ``area_shape_index`` the index of the :ref:`Shape2D<class_Shape2D>` of the other Area2D used by the :ref:`Physics2DServer<class_Physics2DServer>`. Get the :ref:`CollisionShape2D<class_CollisionShape2D>` node with ``area.shape_owner_get_owner(area_shape_index)``.

\ ``local_shape_index`` the index of the :ref:`Shape2D<class_Shape2D>` of this Area2D used by the :ref:`Physics2DServer<class_Physics2DServer>`. Get the :ref:`CollisionShape2D<class_CollisionShape2D>` node with ``self.shape_owner_get_owner(local_shape_index)``.

----

.. _class_Area2D_signal_area_shape_exited:

- **area_shape_exited** **(** :ref:`RID<class_RID>` area_rid, :ref:`Area2D<class_Area2D>` area, :ref:`int<class_int>` area_shape_index, :ref:`int<class_int>` local_shape_index **)**

Emitted when one of another Area2D's :ref:`Shape2D<class_Shape2D>`\ s exits one of this Area2D's :ref:`Shape2D<class_Shape2D>`\ s. Requires :ref:`monitoring<class_Area2D_property_monitoring>` to be set to ``true``.

\ ``area_rid`` the :ref:`RID<class_RID>` of the other Area2D's :ref:`CollisionObject2D<class_CollisionObject2D>` used by the :ref:`Physics2DServer<class_Physics2DServer>`.

\ ``area`` the other Area2D.

\ ``area_shape_index`` the index of the :ref:`Shape2D<class_Shape2D>` of the other Area2D used by the :ref:`Physics2DServer<class_Physics2DServer>`. Get the :ref:`CollisionShape2D<class_CollisionShape2D>` node with ``area.shape_owner_get_owner(area_shape_index)``.

\ ``local_shape_index`` the index of the :ref:`Shape2D<class_Shape2D>` of this Area2D used by the :ref:`Physics2DServer<class_Physics2DServer>`. Get the :ref:`CollisionShape2D<class_CollisionShape2D>` node with ``self.shape_owner_get_owner(local_shape_index)``.

----

.. _class_Area2D_signal_body_entered:

- **body_entered** **(** :ref:`Node<class_Node>` body **)**

Emitted when a :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>` enters this Area2D. Requires :ref:`monitoring<class_Area2D_property_monitoring>` to be set to ``true``. :ref:`TileMap<class_TileMap>`\ s are detected if the :ref:`TileSet<class_TileSet>` has Collision :ref:`Shape2D<class_Shape2D>`\ s.

\ ``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the other :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`.

----

.. _class_Area2D_signal_body_exited:

- **body_exited** **(** :ref:`Node<class_Node>` body **)**

Emitted when a :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>` exits this Area2D. Requires :ref:`monitoring<class_Area2D_property_monitoring>` to be set to ``true``. :ref:`TileMap<class_TileMap>`\ s are detected if the :ref:`TileSet<class_TileSet>` has Collision :ref:`Shape2D<class_Shape2D>`\ s.

\ ``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the other :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`.

----

.. _class_Area2D_signal_body_shape_entered:

- **body_shape_entered** **(** :ref:`RID<class_RID>` body_rid, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape_index, :ref:`int<class_int>` local_shape_index **)**

Emitted when one of a :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`'s :ref:`Shape2D<class_Shape2D>`\ s enters one of this Area2D's :ref:`Shape2D<class_Shape2D>`\ s. Requires :ref:`monitoring<class_Area2D_property_monitoring>` to be set to ``true``. :ref:`TileMap<class_TileMap>`\ s are detected if the :ref:`TileSet<class_TileSet>` has Collision :ref:`Shape2D<class_Shape2D>`\ s.

\ ``body_rid`` the :ref:`RID<class_RID>` of the :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileSet<class_TileSet>`'s :ref:`CollisionObject2D<class_CollisionObject2D>` used by the :ref:`Physics2DServer<class_Physics2DServer>`.

\ ``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`.

\ ``body_shape_index`` the index of the :ref:`Shape2D<class_Shape2D>` of the :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>` used by the :ref:`Physics2DServer<class_Physics2DServer>`. Get the :ref:`CollisionShape2D<class_CollisionShape2D>` node with ``body.shape_owner_get_owner(body_shape_index)``.

\ ``local_shape_index`` the index of the :ref:`Shape2D<class_Shape2D>` of this Area2D used by the :ref:`Physics2DServer<class_Physics2DServer>`. Get the :ref:`CollisionShape2D<class_CollisionShape2D>` node with ``self.shape_owner_get_owner(local_shape_index)``.

----

.. _class_Area2D_signal_body_shape_exited:

- **body_shape_exited** **(** :ref:`RID<class_RID>` body_rid, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape_index, :ref:`int<class_int>` local_shape_index **)**

Emitted when one of a :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`'s :ref:`Shape2D<class_Shape2D>`\ s exits one of this Area2D's :ref:`Shape2D<class_Shape2D>`\ s. Requires :ref:`monitoring<class_Area2D_property_monitoring>` to be set to ``true``. :ref:`TileMap<class_TileMap>`\ s are detected if the :ref:`TileSet<class_TileSet>` has Collision :ref:`Shape2D<class_Shape2D>`\ s.

\ ``body_rid`` the :ref:`RID<class_RID>` of the :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileSet<class_TileSet>`'s :ref:`CollisionObject2D<class_CollisionObject2D>` used by the :ref:`Physics2DServer<class_Physics2DServer>`.

\ ``body`` the :ref:`Node<class_Node>`, if it exists in the tree, of the :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>`.

\ ``body_shape_index`` the index of the :ref:`Shape2D<class_Shape2D>` of the :ref:`PhysicsBody2D<class_PhysicsBody2D>` or :ref:`TileMap<class_TileMap>` used by the :ref:`Physics2DServer<class_Physics2DServer>`. Get the :ref:`CollisionShape2D<class_CollisionShape2D>` node with ``body.shape_owner_get_owner(body_shape_index)``.

\ ``local_shape_index`` the index of the :ref:`Shape2D<class_Shape2D>` of this Area2D used by the :ref:`Physics2DServer<class_Physics2DServer>`. Get the :ref:`CollisionShape2D<class_CollisionShape2D>` node with ``self.shape_owner_get_owner(local_shape_index)``.

Enumeraciones
--------------------------

.. _enum_Area2D_SpaceOverride:

.. _class_Area2D_constant_SPACE_OVERRIDE_DISABLED:

.. _class_Area2D_constant_SPACE_OVERRIDE_COMBINE:

.. _class_Area2D_constant_SPACE_OVERRIDE_COMBINE_REPLACE:

.. _class_Area2D_constant_SPACE_OVERRIDE_REPLACE:

.. _class_Area2D_constant_SPACE_OVERRIDE_REPLACE_COMBINE:

enum **SpaceOverride**:

- **SPACE_OVERRIDE_DISABLED** = **0** --- Esta zona no afecta a la gravedad/amortiguación.

- **SPACE_OVERRIDE_COMBINE** = **1** --- Esta área añade sus valores de gravedad/amortiguación a lo que se ha calculado hasta ahora (en el orden :ref:`priority<class_Area2D_property_priority>`).

- **SPACE_OVERRIDE_COMBINE_REPLACE** = **2** --- Esta área añade sus valores de gravedad/amortiguación a lo que se ha calculado hasta ahora (en el orden :ref:`priority<class_Area2D_property_priority>`), ignorando cualquier área de menor prioridad.

- **SPACE_OVERRIDE_REPLACE** = **3** --- Esta área reemplaza cualquier gravedad/amortiguación, incluso las predeterminadas, ignorando cualquier área de menor prioridad.

- **SPACE_OVERRIDE_REPLACE_COMBINE** = **4** --- Esta área reemplaza cualquier gravedad/amortiguación calculada hasta ahora (en orden de :ref:`priority<class_Area2D_property_priority>`), pero sigue calculando el resto de las áreas.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Area2D_property_angular_damp:

- :ref:`float<class_float>` **angular_damp**

+-----------+-------------------------+
| *Default* | ``1.0``                 |
+-----------+-------------------------+
| *Setter*  | set_angular_damp(value) |
+-----------+-------------------------+
| *Getter*  | get_angular_damp()      |
+-----------+-------------------------+

The rate at which objects stop spinning in this area. Represents the angular velocity lost per second.

See :ref:`ProjectSettings.physics/2d/default_angular_damp<class_ProjectSettings_property_physics/2d/default_angular_damp>` for more details about damping.

----

.. _class_Area2D_property_audio_bus_name:

- :ref:`String<class_String>` **audio_bus_name**

+-----------+---------------------------+
| *Default* | ``"Master"``              |
+-----------+---------------------------+
| *Setter*  | set_audio_bus_name(value) |
+-----------+---------------------------+
| *Getter*  | get_audio_bus_name()      |
+-----------+---------------------------+

El nombre del bus de audio de la zona.

----

.. _class_Area2D_property_audio_bus_override:

- :ref:`bool<class_bool>` **audio_bus_override**

+-----------+-------------------------------+
| *Default* | ``false``                     |
+-----------+-------------------------------+
| *Setter*  | set_audio_bus_override(value) |
+-----------+-------------------------------+
| *Getter*  | is_overriding_audio_bus()     |
+-----------+-------------------------------+

Si ``true``, el área del bus de audio sobrescribe el bus de audio por defecto.

----

.. _class_Area2D_property_gravity:

- :ref:`float<class_float>` **gravity**

+-----------+--------------------+
| *Default* | ``98.0``           |
+-----------+--------------------+
| *Setter*  | set_gravity(value) |
+-----------+--------------------+
| *Getter*  | get_gravity()      |
+-----------+--------------------+

The area's gravity intensity (in pixels per second squared). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.

----

.. _class_Area2D_property_gravity_distance_scale:

- :ref:`float<class_float>` **gravity_distance_scale**

+-----------+-----------------------------------+
| *Default* | ``0.0``                           |
+-----------+-----------------------------------+
| *Setter*  | set_gravity_distance_scale(value) |
+-----------+-----------------------------------+
| *Getter*  | get_gravity_distance_scale()      |
+-----------+-----------------------------------+

El factor de caída para la gravedad puntual. Cuanto mayor es el valor, más rápido disminuye la gravedad con la distancia.

----

.. _class_Area2D_property_gravity_point:

- :ref:`bool<class_bool>` **gravity_point**

+-----------+-----------------------------+
| *Default* | ``false``                   |
+-----------+-----------------------------+
| *Setter*  | set_gravity_is_point(value) |
+-----------+-----------------------------+
| *Getter*  | is_gravity_a_point()        |
+-----------+-----------------------------+

Si ``true``, la gravedad se calcula a partir de un punto (establecido mediante :ref:`gravity_vec<class_Area2D_property_gravity_vec>`). Ver también :ref:`space_override<class_Area2D_property_space_override>`.

----

.. _class_Area2D_property_gravity_vec:

- :ref:`Vector2<class_Vector2>` **gravity_vec**

+-----------+---------------------------+
| *Default* | ``Vector2( 0, 1 )``       |
+-----------+---------------------------+
| *Setter*  | set_gravity_vector(value) |
+-----------+---------------------------+
| *Getter*  | get_gravity_vector()      |
+-----------+---------------------------+

El vector de gravedad del área (no normalizado). Si la gravedad es un punto (véase :ref:`gravity_point<class_Area2D_property_gravity_point>`), éste será el punto de atracción.

----

.. _class_Area2D_property_linear_damp:

- :ref:`float<class_float>` **linear_damp**

+-----------+------------------------+
| *Default* | ``0.1``                |
+-----------+------------------------+
| *Setter*  | set_linear_damp(value) |
+-----------+------------------------+
| *Getter*  | get_linear_damp()      |
+-----------+------------------------+

The rate at which objects stop moving in this area. Represents the linear velocity lost per second.

See :ref:`ProjectSettings.physics/2d/default_linear_damp<class_ProjectSettings_property_physics/2d/default_linear_damp>` for more details about damping.

----

.. _class_Area2D_property_monitorable:

- :ref:`bool<class_bool>` **monitorable**

+-----------+------------------------+
| *Default* | ``true``               |
+-----------+------------------------+
| *Setter*  | set_monitorable(value) |
+-----------+------------------------+
| *Getter*  | is_monitorable()       |
+-----------+------------------------+

Si ``true``, otras áreas de monitoreo pueden detectar esta área.

----

.. _class_Area2D_property_monitoring:

- :ref:`bool<class_bool>` **monitoring**

+-----------+-----------------------+
| *Default* | ``true``              |
+-----------+-----------------------+
| *Setter*  | set_monitoring(value) |
+-----------+-----------------------+
| *Getter*  | is_monitoring()       |
+-----------+-----------------------+

Si ``true``, el área detecta cuerpos o áreas que entran y salen de ella.

----

.. _class_Area2D_property_priority:

- :ref:`float<class_float>` **priority**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_priority(value) |
+-----------+---------------------+
| *Getter*  | get_priority()      |
+-----------+---------------------+

La prioridad de la zona. Las áreas de mayor prioridad se procesan primero.

----

.. _class_Area2D_property_space_override:

- :ref:`SpaceOverride<enum_Area2D_SpaceOverride>` **space_override**

+-----------+--------------------------------+
| *Default* | ``0``                          |
+-----------+--------------------------------+
| *Setter*  | set_space_override_mode(value) |
+-----------+--------------------------------+
| *Getter*  | get_space_override_mode()      |
+-----------+--------------------------------+

Modo de sobreescritura para los cálculos de gravedad y amortiguación dentro de esta área. Ver :ref:`SpaceOverride<enum_Area2D_SpaceOverride>` para los posibles valores.

Descripciones de Métodos
------------------------------------------------

.. _class_Area2D_method_get_overlapping_areas:

- :ref:`Array<class_Array>` **get_overlapping_areas** **(** **)** |const|

Returns a list of intersecting ``Area2D``\ s. The overlapping area's :ref:`CollisionObject2D.collision_layer<class_CollisionObject2D_property_collision_layer>` must be part of this area's :ref:`CollisionObject2D.collision_mask<class_CollisionObject2D_property_collision_mask>` in order to be detected.

For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.

----

.. _class_Area2D_method_get_overlapping_bodies:

- :ref:`Array<class_Array>` **get_overlapping_bodies** **(** **)** |const|

Returns a list of intersecting :ref:`PhysicsBody2D<class_PhysicsBody2D>`\ s. The overlapping body's :ref:`CollisionObject2D.collision_layer<class_CollisionObject2D_property_collision_layer>` must be part of this area's :ref:`CollisionObject2D.collision_mask<class_CollisionObject2D_property_collision_mask>` in order to be detected.

For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.

----

.. _class_Area2D_method_overlaps_area:

- :ref:`bool<class_bool>` **overlaps_area** **(** :ref:`Node<class_Node>` area **)** |const|

If ``true``, the given area overlaps the Area2D.

\ **Note:** The result of this test is not immediate after moving objects. For performance, the list of overlaps is updated once per frame and before the physics step. Consider using signals instead.

----

.. _class_Area2D_method_overlaps_body:

- :ref:`bool<class_bool>` **overlaps_body** **(** :ref:`Node<class_Node>` body **)** |const|

If ``true``, the given physics body overlaps the Area2D.

\ **Note:** The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.

The ``body`` argument can either be a :ref:`PhysicsBody2D<class_PhysicsBody2D>` or a :ref:`TileMap<class_TileMap>` instance (while TileMaps are not physics bodies themselves, they register their tiles with collision shapes as a virtual physics body).

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
