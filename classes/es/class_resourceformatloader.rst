:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the ResourceFormatLoader.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ResourceFormatLoader:

ResourceFormatLoader
====================

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Carga un tipo de recurso específico de un archivo.

Descripción
----------------------

Godot loads resources in the editor or in exported games using ResourceFormatLoaders. They are queried automatically via the :ref:`ResourceLoader<class_ResourceLoader>` singleton, or when a resource with internal dependencies is loaded. Each file type may load as a different resource type, so multiple ResourceFormatLoaders are registered in the engine.

Extending this class allows you to define your own loader. Be sure to respect the documented return types and values. You should give it a global class name with ``class_name`` for it to be registered. Like built-in ResourceFormatLoaders, it will be called automatically when loading resources of its handled type(s). You may also implement a :ref:`ResourceFormatSaver<class_ResourceFormatSaver>`.

\ **Note:** You can also extend :ref:`EditorImportPlugin<class_EditorImportPlugin>` if the resource type you need exists but Godot is unable to load its format. Choosing one way over another depends on if the format is suitable or not for the final exported game. For example, it's better to import ``.png`` textures as ``.stex`` (:ref:`StreamTexture<class_StreamTexture>`) first, so they can be loaded with better efficiency on the graphics card.

Métodos
--------------

+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`get_dependencies<class_ResourceFormatLoader_method_get_dependencies>` **(** :ref:`String<class_String>` path, :ref:`String<class_String>` add_types **)** |virtual|     |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolStringArray<class_PoolStringArray>` | :ref:`get_recognized_extensions<class_ResourceFormatLoader_method_get_recognized_extensions>` **(** **)** |virtual|                                                           |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                   | :ref:`get_resource_type<class_ResourceFormatLoader_method_get_resource_type>` **(** :ref:`String<class_String>` path **)** |virtual|                                          |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`handles_type<class_ResourceFormatLoader_method_handles_type>` **(** :ref:`String<class_String>` typename **)** |virtual|                                                |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                 | :ref:`load<class_ResourceFormatLoader_method_load>` **(** :ref:`String<class_String>` path, :ref:`String<class_String>` original_path **)** |virtual|                         |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`rename_dependencies<class_ResourceFormatLoader_method_rename_dependencies>` **(** :ref:`String<class_String>` path, :ref:`String<class_String>` renames **)** |virtual| |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Descripciones de Métodos
------------------------------------------------

.. _class_ResourceFormatLoader_method_get_dependencies:

- void **get_dependencies** **(** :ref:`String<class_String>` path, :ref:`String<class_String>` add_types **)** |virtual|

Si se aplica, obtiene las dependencias de un recurso determinado. Si ``add_types`` es ``true``, las rutas deben ser anexadas ``::TypeName``, donde ``TypeName`` es el nombre de la clase de la dependencia.

\ **Nota:** Los tipos de recursos personalizados definidos por los scripts no son conocidos por la :ref:`ClassDB<class_ClassDB>`, por lo que sólo se puede devolver ``"Resource"`` por ellos.

----

.. _class_ResourceFormatLoader_method_get_recognized_extensions:

- :ref:`PoolStringArray<class_PoolStringArray>` **get_recognized_extensions** **(** **)** |virtual|

Obtiene la lista de extensiones de los archivos que este cargador es capaz de leer.

----

.. _class_ResourceFormatLoader_method_get_resource_type:

- :ref:`String<class_String>` **get_resource_type** **(** :ref:`String<class_String>` path **)** |virtual|

Obtiene el nombre de la clase del recurso asociado con el camino dado. Si el cargador no puede manejarlo, debe devolver ``"``.

\ **Nota:** Los tipos de recursos personalizados definidos por los scripts no son conocidos por el :ref:`ClassDB<class_ClassDB>`, por lo que debería devolver ``"Resource"`` por ellos.

----

.. _class_ResourceFormatLoader_method_handles_type:

- :ref:`bool<class_bool>` **handles_type** **(** :ref:`String<class_String>` typename **)** |virtual|

Dice qué clase de recursos puede cargar este cargador.

\ **Nota:** Los tipos de recursos personalizados definidos por los scripts no son conocidos por la :ref:`ClassDB<class_ClassDB>`, por lo que sólo puedes manejar ``"Resource"`` para ellos.

----

.. _class_ResourceFormatLoader_method_load:

- :ref:`Variant<class_Variant>` **load** **(** :ref:`String<class_String>` path, :ref:`String<class_String>` original_path **)** |virtual|

Carga un recurso cuando el motor encuentra que este cargador es compatible. Si el recurso cargado es el resultado de una importación, ``original_path`` se dirigirá al archivo fuente. Devuelve un objeto :ref:`Resource<class_Resource>` en caso de éxito, o una constante :ref:`Error<enum_@GlobalScope_Error>` en caso de fracaso.

----

.. _class_ResourceFormatLoader_method_rename_dependencies:

- :ref:`int<class_int>` **rename_dependencies** **(** :ref:`String<class_String>` path, :ref:`String<class_String>` renames **)** |virtual|

Si se implementa, renombra las dependencias dentro del recurso dado y lo guarda. ``renambes`` es un diccionario ``{ String => String }`` que mapea las antiguas rutas de dependencia a las nuevas rutas.

Devuelve :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>` en caso de éxito, o una constante :ref:`Error<enum_@GlobalScope_Error>` en caso de fracaso.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
