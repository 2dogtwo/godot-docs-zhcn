:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the SceneTree.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_SceneTree:

SceneTree
=========

**Inherits:** :ref:`MainLoop<class_MainLoop>` **<** :ref:`Object<class_Object>`

Maneja el bucle del juego a través de una jerarquía de nodos.

Descripción
----------------------

As one of the most important classes, the ``SceneTree`` manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded.

You can also use the ``SceneTree`` to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. an "enemy" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.

\ ``SceneTree`` is the default :ref:`MainLoop<class_MainLoop>` implementation used by scenes, and is thus in charge of the game loop.

Tutoriales
--------------------

- :doc:`../tutorials/scripting/scene_tree`

- :doc:`../tutorials/rendering/multiple_resolutions`

Propiedades
----------------------

+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`Node<class_Node>`                                         | :ref:`current_scene<class_SceneTree_property_current_scene>`                                   |           |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`debug_collisions_hint<class_SceneTree_property_debug_collisions_hint>`                   | ``false`` |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`debug_navigation_hint<class_SceneTree_property_debug_navigation_hint>`                   | ``false`` |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`Node<class_Node>`                                         | :ref:`edited_scene_root<class_SceneTree_property_edited_scene_root>`                           |           |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`MultiplayerAPI<class_MultiplayerAPI>`                     | :ref:`multiplayer<class_SceneTree_property_multiplayer>`                                       |           |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`multiplayer_poll<class_SceneTree_property_multiplayer_poll>`                             | ``true``  |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>` | :ref:`network_peer<class_SceneTree_property_network_peer>`                                     |           |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`paused<class_SceneTree_property_paused>`                                                 | ``false`` |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`refuse_new_network_connections<class_SceneTree_property_refuse_new_network_connections>` | ``false`` |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`Viewport<class_Viewport>`                                 | :ref:`root<class_SceneTree_property_root>`                                                     |           |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                         | :ref:`use_font_oversampling<class_SceneTree_property_use_font_oversampling>`                   | ``false`` |
+-----------------------------------------------------------------+------------------------------------------------------------------------------------------------+-----------+

Métodos
--------------

+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`               | :ref:`call_group<class_SceneTree_method_call_group>` **(** :ref:`String<class_String>` group, :ref:`String<class_String>` method, ... **)** |vararg|                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`               | :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` **(** :ref:`int<class_int>` flags, :ref:`String<class_String>` group, :ref:`String<class_String>` method, ... **)** |vararg|                                                                             |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`change_scene<class_SceneTree_method_change_scene>` **(** :ref:`String<class_String>` path **)**                                                                                                                                                                     |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`change_scene_to<class_SceneTree_method_change_scene_to>` **(** :ref:`PackedScene<class_PackedScene>` packed_scene **)**                                                                                                                                             |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`SceneTreeTimer<class_SceneTreeTimer>` | :ref:`create_timer<class_SceneTree_method_create_timer>` **(** :ref:`float<class_float>` time_sec, :ref:`bool<class_bool>` pause_mode_process=true **)**                                                                                                                  |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_frame<class_SceneTree_method_get_frame>` **(** **)** |const|                                                                                                                                                                                                    |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolIntArray<class_PoolIntArray>`     | :ref:`get_network_connected_peers<class_SceneTree_method_get_network_connected_peers>` **(** **)** |const|                                                                                                                                                                |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_network_unique_id<class_SceneTree_method_get_network_unique_id>` **(** **)** |const|                                                                                                                                                                            |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_node_count<class_SceneTree_method_get_node_count>` **(** **)** |const|                                                                                                                                                                                          |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                   | :ref:`get_nodes_in_group<class_SceneTree_method_get_nodes_in_group>` **(** :ref:`String<class_String>` group **)**                                                                                                                                                        |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                       | :ref:`get_rpc_sender_id<class_SceneTree_method_get_rpc_sender_id>` **(** **)** |const|                                                                                                                                                                                    |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                     | :ref:`has_group<class_SceneTree_method_has_group>` **(** :ref:`String<class_String>` name **)** |const|                                                                                                                                                                   |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                     | :ref:`has_network_peer<class_SceneTree_method_has_network_peer>` **(** **)** |const|                                                                                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                     | :ref:`is_input_handled<class_SceneTree_method_is_input_handled>` **(** **)**                                                                                                                                                                                              |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                     | :ref:`is_network_server<class_SceneTree_method_is_network_server>` **(** **)** |const|                                                                                                                                                                                    |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`notify_group<class_SceneTree_method_notify_group>` **(** :ref:`String<class_String>` group, :ref:`int<class_int>` notification **)**                                                                                                                                |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`notify_group_flags<class_SceneTree_method_notify_group_flags>` **(** :ref:`int<class_int>` call_flags, :ref:`String<class_String>` group, :ref:`int<class_int>` notification **)**                                                                                  |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`queue_delete<class_SceneTree_method_queue_delete>` **(** :ref:`Object<class_Object>` obj **)**                                                                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`quit<class_SceneTree_method_quit>` **(** :ref:`int<class_int>` exit_code=-1 **)**                                                                                                                                                                                   |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`reload_current_scene<class_SceneTree_method_reload_current_scene>` **(** **)**                                                                                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_auto_accept_quit<class_SceneTree_method_set_auto_accept_quit>` **(** :ref:`bool<class_bool>` enabled **)**                                                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_group<class_SceneTree_method_set_group>` **(** :ref:`String<class_String>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                                                                               |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_group_flags<class_SceneTree_method_set_group_flags>` **(** :ref:`int<class_int>` call_flags, :ref:`String<class_String>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                                 |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_input_as_handled<class_SceneTree_method_set_input_as_handled>` **(** **)**                                                                                                                                                                                      |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_quit_on_go_back<class_SceneTree_method_set_quit_on_go_back>` **(** :ref:`bool<class_bool>` enabled **)**                                                                                                                                                        |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                        | :ref:`set_screen_stretch<class_SceneTree_method_set_screen_stretch>` **(** :ref:`StretchMode<enum_SceneTree_StretchMode>` mode, :ref:`StretchAspect<enum_SceneTree_StretchAspect>` aspect, :ref:`Vector2<class_Vector2>` minsize, :ref:`float<class_float>` scale=1 **)** |
+---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_SceneTree_signal_connected_to_server:

- **connected_to_server** **(** **)**

Emitido siempre que el ``SceneTree`` de este :ref:`network_peer<class_SceneTree_property_network_peer>` se conectó con éxito a un servidor. Sólo se emite en los clientes.

----

.. _class_SceneTree_signal_connection_failed:

- **connection_failed** **(** **)**

Emitido siempre que el :ref:`network_peer<class_SceneTree_property_network_peer>` de este ``SceneTree`` no logre establecer una conexión con un servidor. Sólo se emite en los clientes.

----

.. _class_SceneTree_signal_files_dropped:

- **files_dropped** **(** :ref:`PoolStringArray<class_PoolStringArray>` files, :ref:`int<class_int>` screen **)**

Se emite cuando los archivos se arrastran desde el administrador de archivos del sistema operativo y se sueltan en la ventana del juego. Los argumentos son una lista de las rutas de los archivos y el identificador de la pantalla donde se originó el arrastre.

----

.. _class_SceneTree_signal_global_menu_action:

- **global_menu_action** **(** :ref:`Variant<class_Variant>` id, :ref:`Variant<class_Variant>` meta **)**

Emitted whenever global menu item is clicked.

----

.. _class_SceneTree_signal_idle_frame:

- **idle_frame** **(** **)**

Emitido inmediatamente antes de que se llame a :ref:`Node._process<class_Node_method__process>` en cada nodo del ``SceneTree``.

----

.. _class_SceneTree_signal_network_peer_connected:

- **network_peer_connected** **(** :ref:`int<class_int>` id **)**

Emitido cada vez que el ``SceneTree`` de este :ref:`network_peer<class_SceneTree_property_network_peer>` se conecta con un nuevo par. ID es el ID del nuevo par. Los clientes son notificados cuando otros clientes se conectan al mismo servidor. Al conectarse a un servidor, un cliente también recibe esta señal para el servidor (con ID 1).

----

.. _class_SceneTree_signal_network_peer_disconnected:

- **network_peer_disconnected** **(** :ref:`int<class_int>` id **)**

Emitido cada vez que el ``SceneTree`` de este :ref:`network_peer<class_SceneTree_property_network_peer>` se desconecta de un par. Los clientes son notificados cuando otros clientes se desconectan del mismo servidor.

----

.. _class_SceneTree_signal_node_added:

- **node_added** **(** :ref:`Node<class_Node>` node **)**

Se emite cada vez que se añade un nodo al ``SceneTree``.

----

.. _class_SceneTree_signal_node_configuration_warning_changed:

- **node_configuration_warning_changed** **(** :ref:`Node<class_Node>` node **)**

Emitido cuando la configuración de un nodo cambió. Sólo se emite en el modo ``tool``.

----

.. _class_SceneTree_signal_node_removed:

- **node_removed** **(** :ref:`Node<class_Node>` node **)**

Se emite cada vez que se quita un nodo del ``SceneTree``.

----

.. _class_SceneTree_signal_node_renamed:

- **node_renamed** **(** :ref:`Node<class_Node>` node **)**

Emitido cada vez que un nodo es renombrado.

----

.. _class_SceneTree_signal_physics_frame:

- **physics_frame** **(** **)**

Emitido inmediatamente antes de que :ref:`Node._physics_process<class_Node_method__physics_process>` sea llamado en cada nodo del ``SceneTree``.

----

.. _class_SceneTree_signal_screen_resized:

- **screen_resized** **(** **)**

Emitted when the screen resolution (fullscreen) or window size (windowed) changes.

----

.. _class_SceneTree_signal_server_disconnected:

- **server_disconnected** **(** **)**

Emitido cada vez que el ``SceneTree`` de este :ref:`network_peer<class_SceneTree_property_network_peer>` se desconecta del servidor. Sólo se emite en los clientes.

----

.. _class_SceneTree_signal_tree_changed:

- **tree_changed** **(** **)**

Emitido cada vez que la jerarquía ``SceneTree`` cambiaba (los niños eran movidos o renombrados, etc.).

Enumeraciones
--------------------------

.. _enum_SceneTree_GroupCallFlags:

.. _class_SceneTree_constant_GROUP_CALL_DEFAULT:

.. _class_SceneTree_constant_GROUP_CALL_REVERSE:

.. _class_SceneTree_constant_GROUP_CALL_REALTIME:

.. _class_SceneTree_constant_GROUP_CALL_UNIQUE:

enum **GroupCallFlags**:

- **GROUP_CALL_DEFAULT** = **0** --- Llama a un grupo sin flags (por defecto).

- **GROUP_CALL_REVERSE** = **1** --- Llama a un grupo en orden inverso al de la escena.

- **GROUP_CALL_REALTIME** = **2** --- Llama a un grupo inmediatamente (las llamadas se hacen normalmente en reposo).

- **GROUP_CALL_UNIQUE** = **4** --- Llama a un grupo sólo una vez aunque la llamada se ejecute muchas veces.

----

.. _enum_SceneTree_StretchMode:

.. _class_SceneTree_constant_STRETCH_MODE_DISABLED:

.. _class_SceneTree_constant_STRETCH_MODE_2D:

.. _class_SceneTree_constant_STRETCH_MODE_VIEWPORT:

enum **StretchMode**:

- **STRETCH_MODE_DISABLED** = **0** --- No stretching.

- **STRETCH_MODE_2D** = **1** --- Render stretching in higher resolution (interpolated).

- **STRETCH_MODE_VIEWPORT** = **2** --- Keep the specified display resolution. No interpolation. Content may appear pixelated.

----

.. _enum_SceneTree_StretchAspect:

.. _class_SceneTree_constant_STRETCH_ASPECT_IGNORE:

.. _class_SceneTree_constant_STRETCH_ASPECT_KEEP:

.. _class_SceneTree_constant_STRETCH_ASPECT_KEEP_WIDTH:

.. _class_SceneTree_constant_STRETCH_ASPECT_KEEP_HEIGHT:

.. _class_SceneTree_constant_STRETCH_ASPECT_EXPAND:

enum **StretchAspect**:

- **STRETCH_ASPECT_IGNORE** = **0** --- Fill the window with the content stretched to cover excessive space. Content may appear stretched.

- **STRETCH_ASPECT_KEEP** = **1** --- Retain the same aspect ratio by padding with black bars on either axis. This prevents distortion.

- **STRETCH_ASPECT_KEEP_WIDTH** = **2** --- Expand vertically. Left/right black bars may appear if the window is too wide.

- **STRETCH_ASPECT_KEEP_HEIGHT** = **3** --- Expand horizontally. Top/bottom black bars may appear if the window is too tall.

- **STRETCH_ASPECT_EXPAND** = **4** --- Expand in both directions, retaining the same aspect ratio. This prevents distortion while avoiding black bars.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_SceneTree_property_current_scene:

- :ref:`Node<class_Node>` **current_scene**

+----------+--------------------------+
| *Setter* | set_current_scene(value) |
+----------+--------------------------+
| *Getter* | get_current_scene()      |
+----------+--------------------------+

La escena actual.

----

.. _class_SceneTree_property_debug_collisions_hint:

- :ref:`bool<class_bool>` **debug_collisions_hint**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_debug_collisions_hint(value) |
+-----------+----------------------------------+
| *Getter*  | is_debugging_collisions_hint()   |
+-----------+----------------------------------+

Si ``true``, las formas de colisión serán visibles cuando se ejecute el juego desde el editor con fines de depuración.

----

.. _class_SceneTree_property_debug_navigation_hint:

- :ref:`bool<class_bool>` **debug_navigation_hint**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_debug_navigation_hint(value) |
+-----------+----------------------------------+
| *Getter*  | is_debugging_navigation_hint()   |
+-----------+----------------------------------+

Si ``true``, los polígonos de navegación serán visibles cuando se ejecute el juego desde el editor para su depuración.

----

.. _class_SceneTree_property_edited_scene_root:

- :ref:`Node<class_Node>` **edited_scene_root**

+----------+------------------------------+
| *Setter* | set_edited_scene_root(value) |
+----------+------------------------------+
| *Getter* | get_edited_scene_root()      |
+----------+------------------------------+

La raíz de la escena editada.

----

.. _class_SceneTree_property_multiplayer:

- :ref:`MultiplayerAPI<class_MultiplayerAPI>` **multiplayer**

+----------+------------------------+
| *Setter* | set_multiplayer(value) |
+----------+------------------------+
| *Getter* | get_multiplayer()      |
+----------+------------------------+

La instancia por defecto :ref:`MultiplayerAPI<class_MultiplayerAPI>` para este ``SceneTree``.

----

.. _class_SceneTree_property_multiplayer_poll:

- :ref:`bool<class_bool>` **multiplayer_poll**

+-----------+-------------------------------------+
| *Default* | ``true``                            |
+-----------+-------------------------------------+
| *Setter*  | set_multiplayer_poll_enabled(value) |
+-----------+-------------------------------------+
| *Getter*  | is_multiplayer_poll_enabled()       |
+-----------+-------------------------------------+

Si ``true`` (valor por defecto), habilita el sondeo automático de la :ref:`MultiplayerAPI<class_MultiplayerAPI>` para este Árbol de Escenas durante :ref:`idle_frame<class_SceneTree_signal_idle_frame>`.

Si ``false``, necesita llamar manualmente al :ref:`MultiplayerAPI.poll<class_MultiplayerAPI_method_poll>` para procesar los paquetes de red y entregar los RPCs/RSETs. Esto permite ejecutar RPCs/RSETs en un bucle diferente (por ejemplo, física, hilo, paso de tiempo específico) y para la protección manual :ref:`Mutex<class_Mutex>` cuando se accede a la :ref:`MultiplayerAPI<class_MultiplayerAPI>` desde los hilos.

----

.. _class_SceneTree_property_network_peer:

- :ref:`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>` **network_peer**

+----------+-------------------------+
| *Setter* | set_network_peer(value) |
+----------+-------------------------+
| *Getter* | get_network_peer()      |
+----------+-------------------------+

El objeto paritario para manejar el sistema RPC (que permite efectivamente la conexión en red cuando se establece). Dependiendo del par en sí, el ``SceneTree`` se convertirá en un servidor de red (compruébelo con :ref:`is_network_server<class_SceneTree_method_is_network_server>`) y establecerá el modo de red del nodo raíz como maestro, o se convertirá en un par normal con el nodo raíz establecido como marioneta. Todos los nodos hijos están configurados para heredar el modo de red por defecto. El manejo de los eventos relacionados con la red (conexión, desconexión, nuevos clientes) se hace conectando a las señales de ``SceneTree``.

----

.. _class_SceneTree_property_paused:

- :ref:`bool<class_bool>` **paused**

+-----------+------------------+
| *Default* | ``false``        |
+-----------+------------------+
| *Setter*  | set_pause(value) |
+-----------+------------------+
| *Getter*  | is_paused()      |
+-----------+------------------+

If ``true``, the ``SceneTree`` is paused. Doing so will have the following behavior:

- 2D and 3D physics will be stopped. This includes signals and collision detection.

- :ref:`Node._process<class_Node_method__process>`, :ref:`Node._physics_process<class_Node_method__physics_process>` and :ref:`Node._input<class_Node_method__input>` will not be called anymore in nodes.

----

.. _class_SceneTree_property_refuse_new_network_connections:

- :ref:`bool<class_bool>` **refuse_new_network_connections**

+-----------+-------------------------------------------+
| *Default* | ``false``                                 |
+-----------+-------------------------------------------+
| *Setter*  | set_refuse_new_network_connections(value) |
+-----------+-------------------------------------------+
| *Getter*  | is_refusing_new_network_connections()     |
+-----------+-------------------------------------------+

Si ``true``, el ``SceneTree`` de :ref:`network_peer<class_SceneTree_property_network_peer>` rechaza las nuevas conexiones entrantes.

----

.. _class_SceneTree_property_root:

- :ref:`Viewport<class_Viewport>` **root**

+----------+------------+
| *Getter* | get_root() |
+----------+------------+

The ``SceneTree``'s root :ref:`Viewport<class_Viewport>`.

----

.. _class_SceneTree_property_use_font_oversampling:

- :ref:`bool<class_bool>` **use_font_oversampling**

+-----------+----------------------------------+
| *Default* | ``false``                        |
+-----------+----------------------------------+
| *Setter*  | set_use_font_oversampling(value) |
+-----------+----------------------------------+
| *Getter*  | is_using_font_oversampling()     |
+-----------+----------------------------------+

If ``true``, font oversampling is enabled. This means that :ref:`DynamicFont<class_DynamicFont>`\ s will be rendered at higher or lower size than configured based on the viewport's scaling ratio. For example, in a viewport scaled with a factor 1.5, a font configured with size 14 would be rendered with size 21 (``14 * 1.5``).

\ **Note:** Font oversampling is only used if the viewport stretch mode is :ref:`STRETCH_MODE_VIEWPORT<class_SceneTree_constant_STRETCH_MODE_VIEWPORT>`, and if the stretch aspect mode is different from :ref:`STRETCH_ASPECT_IGNORE<class_SceneTree_constant_STRETCH_ASPECT_IGNORE>`.

\ **Note:** This property is set automatically for the active ``SceneTree`` when the project starts based on the configuration of ``rendering/quality/dynamic_fonts/use_oversampling`` in :ref:`ProjectSettings<class_ProjectSettings>`. The property can however be overridden at runtime as needed.

Descripciones de Métodos
------------------------------------------------

.. _class_SceneTree_method_call_group:

- :ref:`Variant<class_Variant>` **call_group** **(** :ref:`String<class_String>` group, :ref:`String<class_String>` method, ... **)** |vararg|

Calls ``method`` on each member of the given group. You can pass arguments to ``method`` by specifying them at the end of the method call. This method is equivalent of calling :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` with :ref:`GROUP_CALL_DEFAULT<class_SceneTree_constant_GROUP_CALL_DEFAULT>` flag.

\ **Note:** ``method`` may only have 5 arguments at most (7 arguments passed to this method in total).

\ **Note:** Due to design limitations, :ref:`call_group<class_SceneTree_method_call_group>` will fail silently if one of the arguments is ``null``.

\ **Note:** :ref:`call_group<class_SceneTree_method_call_group>` will always call methods with an one-frame delay, in a way similar to :ref:`Object.call_deferred<class_Object_method_call_deferred>`. To call methods immediately, use :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` with the :ref:`GROUP_CALL_REALTIME<class_SceneTree_constant_GROUP_CALL_REALTIME>` flag.

----

.. _class_SceneTree_method_call_group_flags:

- :ref:`Variant<class_Variant>` **call_group_flags** **(** :ref:`int<class_int>` flags, :ref:`String<class_String>` group, :ref:`String<class_String>` method, ... **)** |vararg|

Calls ``method`` on each member of the given group, respecting the given :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>`. You can pass arguments to ``method`` by specifying them at the end of the method call.

\ **Note:** ``method`` may only have 5 arguments at most (8 arguments passed to this method in total).

\ **Note:** Due to design limitations, :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` will fail silently if one of the arguments is ``null``.

::

    # Call the method immediately and in reverse order.
    get_tree().call_group_flags(SceneTree.GROUP_CALL_REALTIME | SceneTree.GROUP_CALL_REVERSE, "bases", "destroy")

----

.. _class_SceneTree_method_change_scene:

- :ref:`Error<enum_@GlobalScope_Error>` **change_scene** **(** :ref:`String<class_String>` path **)**

Changes the running scene to the one at the given ``path``, after loading it into a :ref:`PackedScene<class_PackedScene>` and creating a new instance.

Returns :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>` on success, :ref:`@GlobalScope.ERR_CANT_OPEN<class_@GlobalScope_constant_ERR_CANT_OPEN>` if the ``path`` cannot be loaded into a :ref:`PackedScene<class_PackedScene>`, or :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>` if that scene cannot be instantiated.

\ **Note:** The scene change is deferred, which means that the new scene node is added on the next idle frame. You won't be able to access it immediately after the :ref:`change_scene<class_SceneTree_method_change_scene>` call.

----

.. _class_SceneTree_method_change_scene_to:

- :ref:`Error<enum_@GlobalScope_Error>` **change_scene_to** **(** :ref:`PackedScene<class_PackedScene>` packed_scene **)**

Changes the running scene to a new instance of the given :ref:`PackedScene<class_PackedScene>`.

Returns :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>` on success or :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>` if the scene cannot be instantiated.

\ **Note:** The scene change is deferred, which means that the new scene node is added on the next idle frame. You won't be able to access it immediately after the :ref:`change_scene_to<class_SceneTree_method_change_scene_to>` call.

----

.. _class_SceneTree_method_create_timer:

- :ref:`SceneTreeTimer<class_SceneTreeTimer>` **create_timer** **(** :ref:`float<class_float>` time_sec, :ref:`bool<class_bool>` pause_mode_process=true **)**

Returns a :ref:`SceneTreeTimer<class_SceneTreeTimer>` which will :ref:`SceneTreeTimer.timeout<class_SceneTreeTimer_signal_timeout>` after the given time in seconds elapsed in this ``SceneTree``. If ``pause_mode_process`` is set to ``false``, pausing the ``SceneTree`` will also pause the timer.

Commonly used to create a one-shot delay timer as in the following example:

::

    func some_function():
        print("start")
        yield(get_tree().create_timer(1.0), "timeout")
        print("end")

The timer will be automatically freed after its time elapses.

----

.. _class_SceneTree_method_get_frame:

- :ref:`int<class_int>` **get_frame** **(** **)** |const|

Devuelve el número de fotogramas actual, es decir, el número total de fotogramas desde que se inició la aplicación.

----

.. _class_SceneTree_method_get_network_connected_peers:

- :ref:`PoolIntArray<class_PoolIntArray>` **get_network_connected_peers** **(** **)** |const|

Devuelve las identificaciones de todos los pares conectados de este ``SceneTree`` de :ref:`network_peer<class_SceneTree_property_network_peer>`.

----

.. _class_SceneTree_method_get_network_unique_id:

- :ref:`int<class_int>` **get_network_unique_id** **(** **)** |const|

Devuelve la identificación única de este ``SceneTree`` de :ref:`network_peer<class_SceneTree_property_network_peer>`.

----

.. _class_SceneTree_method_get_node_count:

- :ref:`int<class_int>` **get_node_count** **(** **)** |const|

Devuelve el número de nodos en este ``SceneTree``.

----

.. _class_SceneTree_method_get_nodes_in_group:

- :ref:`Array<class_Array>` **get_nodes_in_group** **(** :ref:`String<class_String>` group **)**

Devuelve una lista de todos los nodos asignados al grupo dado.

----

.. _class_SceneTree_method_get_rpc_sender_id:

- :ref:`int<class_int>` **get_rpc_sender_id** **(** **)** |const|

Devuelve la identificación del remitente de la última llamada RPC recibida.

----

.. _class_SceneTree_method_has_group:

- :ref:`bool<class_bool>` **has_group** **(** :ref:`String<class_String>` name **)** |const|

Devuelve ``true`` si el grupo dado existe.

----

.. _class_SceneTree_method_has_network_peer:

- :ref:`bool<class_bool>` **has_network_peer** **(** **)** |const|

Devuelve ``true`` si hay un conjunto de :ref:`network_peer<class_SceneTree_property_network_peer>`.

----

.. _class_SceneTree_method_is_input_handled:

- :ref:`bool<class_bool>` **is_input_handled** **(** **)**

Returns ``true`` if the most recent :ref:`InputEvent<class_InputEvent>` was marked as handled with :ref:`set_input_as_handled<class_SceneTree_method_set_input_as_handled>`.

----

.. _class_SceneTree_method_is_network_server:

- :ref:`bool<class_bool>` **is_network_server** **(** **)** |const|

Devuelve ``true`` si el :ref:`network_peer<class_SceneTree_property_network_peer>` de este ``SceneTree`` está en modo servidor (escuchando las conexiones).

----

.. _class_SceneTree_method_notify_group:

- void **notify_group** **(** :ref:`String<class_String>` group, :ref:`int<class_int>` notification **)**

Envía la notificación dada a todos los miembros del ``group``.

----

.. _class_SceneTree_method_notify_group_flags:

- void **notify_group_flags** **(** :ref:`int<class_int>` call_flags, :ref:`String<class_String>` group, :ref:`int<class_int>` notification **)**

Envía la notificación dada a todos los miembros del ``grupo``, respetando las :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>` dadas.

----

.. _class_SceneTree_method_queue_delete:

- void **queue_delete** **(** :ref:`Object<class_Object>` obj **)**

Pone en cola el objeto dado para su eliminación, retrasando la llamada al :ref:`Object.free<class_Object_method_free>` hasta después del fotograma actual.

----

.. _class_SceneTree_method_quit:

- void **quit** **(** :ref:`int<class_int>` exit_code=-1 **)**

Quits the application at the end of the current iteration. A process ``exit_code`` can optionally be passed as an argument. If this argument is ``0`` or greater, it will override the :ref:`OS.exit_code<class_OS_property_exit_code>` defined before quitting the application.

\ **Note:** On iOS this method doesn't work. Instead, as recommended by the iOS Human Interface Guidelines, the user is expected to close apps via the Home button.

----

.. _class_SceneTree_method_reload_current_scene:

- :ref:`Error<enum_@GlobalScope_Error>` **reload_current_scene** **(** **)**

Recarga la escena actualmente activa.

Devuelve :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>` en el éxito, :ref:`@GlobalScope.ERR_UNCONFIGURED<class_@GlobalScope_constant_ERR_UNCONFIGURED>` si aún no se ha definido :ref:`current_scene<class_SceneTree_property_current_scene>`, :ref:`@GlobalScope.ERR_CANT_OPEN<class_@GlobalScope_constant_ERR_CANT_OPEN>` si :ref:`current_scene<class_SceneTree_property_current_scene>` no puede ser cargada en una :ref:`PackedScene<class_PackedScene>`, o :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>` si la escena no puede ser instanciada.

----

.. _class_SceneTree_method_set_auto_accept_quit:

- void **set_auto_accept_quit** **(** :ref:`bool<class_bool>` enabled **)**

Si ``true``, la aplicación acepta automáticamente salir. Habilitado por defecto.

Para las plataformas móviles, véase :ref:`set_quit_on_go_back<class_SceneTree_method_set_quit_on_go_back>`.

----

.. _class_SceneTree_method_set_group:

- void **set_group** **(** :ref:`String<class_String>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

Establece la ``property`` dada a ``value`` en todos los miembros del grupo dado.

----

.. _class_SceneTree_method_set_group_flags:

- void **set_group_flags** **(** :ref:`int<class_int>` call_flags, :ref:`String<class_String>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

Establece la ``property`` dada a ``value`` en todos los miembros del grupo dado, respetando las :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>` dadas.

----

.. _class_SceneTree_method_set_input_as_handled:

- void **set_input_as_handled** **(** **)**

Marks the most recent :ref:`InputEvent<class_InputEvent>` as handled.

----

.. _class_SceneTree_method_set_quit_on_go_back:

- void **set_quit_on_go_back** **(** :ref:`bool<class_bool>` enabled **)**

If ``true``, the application quits automatically on going back (e.g. on Android). Enabled by default.

To handle 'Go Back' button when this option is disabled, use :ref:`MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST<class_MainLoop_constant_NOTIFICATION_WM_GO_BACK_REQUEST>`.

----

.. _class_SceneTree_method_set_screen_stretch:

- void **set_screen_stretch** **(** :ref:`StretchMode<enum_SceneTree_StretchMode>` mode, :ref:`StretchAspect<enum_SceneTree_StretchAspect>` aspect, :ref:`Vector2<class_Vector2>` minsize, :ref:`float<class_float>` scale=1 **)**

Configures screen stretching to the given :ref:`StretchMode<enum_SceneTree_StretchMode>`, :ref:`StretchAspect<enum_SceneTree_StretchAspect>`, minimum size and ``scale``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
