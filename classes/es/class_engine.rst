:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Engine.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Engine:

Engine
======

**Inherits:** :ref:`Object<class_Object>`

Acceso a las propiedades del motor.

Descripción
----------------------

El singleton ``Engine`` permite consultar y modificar los parámetros de tiempo de ejecución del proyecto, como los fotogramas por segundo, la escala de tiempo y otros.

Propiedades
----------------------

+---------------------------+---------------------------------------------------------------------------+----------+
| :ref:`bool<class_bool>`   | :ref:`editor_hint<class_Engine_property_editor_hint>`                     | ``true`` |
+---------------------------+---------------------------------------------------------------------------+----------+
| :ref:`int<class_int>`     | :ref:`iterations_per_second<class_Engine_property_iterations_per_second>` | ``60``   |
+---------------------------+---------------------------------------------------------------------------+----------+
| :ref:`float<class_float>` | :ref:`physics_jitter_fix<class_Engine_property_physics_jitter_fix>`       | ``0.5``  |
+---------------------------+---------------------------------------------------------------------------+----------+
| :ref:`bool<class_bool>`   | :ref:`print_error_messages<class_Engine_property_print_error_messages>`   | ``true`` |
+---------------------------+---------------------------------------------------------------------------+----------+
| :ref:`int<class_int>`     | :ref:`target_fps<class_Engine_property_target_fps>`                       | ``0``    |
+---------------------------+---------------------------------------------------------------------------+----------+
| :ref:`float<class_float>` | :ref:`time_scale<class_Engine_property_time_scale>`                       | ``1.0``  |
+---------------------------+---------------------------------------------------------------------------+----------+

Métodos
--------------

+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`get_author_info<class_Engine_method_get_author_info>` **(** **)** |const|                                       |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`get_copyright_info<class_Engine_method_get_copyright_info>` **(** **)** |const|                                 |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`get_donor_info<class_Engine_method_get_donor_info>` **(** **)** |const|                                         |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`               | :ref:`get_frames_drawn<class_Engine_method_get_frames_drawn>` **(** **)**                                             |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`           | :ref:`get_frames_per_second<class_Engine_method_get_frames_per_second>` **(** **)** |const|                           |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`               | :ref:`get_idle_frames<class_Engine_method_get_idle_frames>` **(** **)** |const|                                       |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`get_license_info<class_Engine_method_get_license_info>` **(** **)** |const|                                     |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`         | :ref:`get_license_text<class_Engine_method_get_license_text>` **(** **)** |const|                                     |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`MainLoop<class_MainLoop>`     | :ref:`get_main_loop<class_Engine_method_get_main_loop>` **(** **)** |const|                                           |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`               | :ref:`get_physics_frames<class_Engine_method_get_physics_frames>` **(** **)** |const|                                 |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`           | :ref:`get_physics_interpolation_fraction<class_Engine_method_get_physics_interpolation_fraction>` **(** **)** |const| |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_Object>`         | :ref:`get_singleton<class_Engine_method_get_singleton>` **(** :ref:`String<class_String>` name **)** |const|          |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`get_version_info<class_Engine_method_get_version_info>` **(** **)** |const|                                     |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`has_singleton<class_Engine_method_has_singleton>` **(** :ref:`String<class_String>` name **)** |const|          |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`is_in_physics_frame<class_Engine_method_is_in_physics_frame>` **(** **)** |const|                               |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------+

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Engine_property_editor_hint:

- :ref:`bool<class_bool>` **editor_hint**

+-----------+------------------------+
| *Default* | ``true``               |
+-----------+------------------------+
| *Setter*  | set_editor_hint(value) |
+-----------+------------------------+
| *Getter*  | is_editor_hint()       |
+-----------+------------------------+

If ``true``, the script is currently running inside the editor. This is useful for ``tool`` scripts to conditionally draw editor helpers, or prevent accidentally running "game" code that would affect the scene state while in the editor:

::

    if Engine.editor_hint:
        draw_gizmos()
    else:
        simulate_physics()

See :doc:`Running code in the editor <../tutorials/misc/running_code_in_the_editor>` in the documentation for more information.

\ **Note:** To detect whether the script is run from an editor *build* (e.g. when pressing ``F5``), use :ref:`OS.has_feature<class_OS_method_has_feature>` with the ``"editor"`` argument instead. ``OS.has_feature("editor")`` will evaluate to ``true`` both when the code is running in the editor and when running the project from the editor, but it will evaluate to ``false`` when the code is run from an exported project.

----

.. _class_Engine_property_iterations_per_second:

- :ref:`int<class_int>` **iterations_per_second**

+-----------+----------------------------------+
| *Default* | ``60``                           |
+-----------+----------------------------------+
| *Setter*  | set_iterations_per_second(value) |
+-----------+----------------------------------+
| *Getter*  | get_iterations_per_second()      |
+-----------+----------------------------------+

The number of fixed iterations per second. This controls how often physics simulation and :ref:`Node._physics_process<class_Node_method__physics_process>` methods are run. This value should generally always be set to ``60`` or above, as Godot doesn't interpolate the physics step. As a result, values lower than ``60`` will look stuttery. This value can be increased to make input more reactive or work around collision tunneling issues, but keep in mind doing so will increase CPU usage. See also :ref:`target_fps<class_Engine_property_target_fps>` and :ref:`ProjectSettings.physics/common/physics_fps<class_ProjectSettings_property_physics/common/physics_fps>`.

\ **Note:** Only 8 physics ticks may be simulated per rendered frame at most. If more than 8 physics ticks have to be simulated per rendered frame to keep up with rendering, the game will appear to slow down (even if ``delta`` is used consistently in physics calculations). Therefore, it is recommended not to increase :ref:`iterations_per_second<class_Engine_property_iterations_per_second>` above 240. Otherwise, the game will slow down when the rendering framerate goes below 30 FPS.

----

.. _class_Engine_property_physics_jitter_fix:

- :ref:`float<class_float>` **physics_jitter_fix**

+-----------+-------------------------------+
| *Default* | ``0.5``                       |
+-----------+-------------------------------+
| *Setter*  | set_physics_jitter_fix(value) |
+-----------+-------------------------------+
| *Getter*  | get_physics_jitter_fix()      |
+-----------+-------------------------------+

Controls how much physics ticks are synchronized with real time. For 0 or less, the ticks are synchronized. Such values are recommended for network games, where clock synchronization matters. Higher values cause higher deviation of the in-game clock and real clock but smooth out framerate jitters. The default value of 0.5 should be fine for most; values above 2 could cause the game to react to dropped frames with a noticeable delay and are not recommended.

\ **Note:** For best results, when using a custom physics interpolation solution, the physics jitter fix should be disabled by setting :ref:`physics_jitter_fix<class_Engine_property_physics_jitter_fix>` to ``0``.

----

.. _class_Engine_property_print_error_messages:

- :ref:`bool<class_bool>` **print_error_messages**

+-----------+---------------------------------+
| *Default* | ``true``                        |
+-----------+---------------------------------+
| *Setter*  | set_print_error_messages(value) |
+-----------+---------------------------------+
| *Getter*  | is_printing_error_messages()    |
+-----------+---------------------------------+

If ``false``, stops printing error and warning messages to the console and editor Output log. This can be used to hide error and warning messages during unit test suite runs. This property is equivalent to the :ref:`ProjectSettings.application/run/disable_stderr<class_ProjectSettings_property_application/run/disable_stderr>` project setting.

\ **Warning:** If you set this to ``false`` anywhere in the project, important error messages may be hidden even if they are emitted from other scripts. If this is set to ``false`` in a ``@tool`` script, this will also impact the editor itself. Do *not* report bugs before ensuring error messages are enabled (as they are by default).

\ **Note:** This property does not impact the editor's Errors tab when running a project from the editor.

----

.. _class_Engine_property_target_fps:

- :ref:`int<class_int>` **target_fps**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_target_fps(value) |
+-----------+-----------------------+
| *Getter*  | get_target_fps()      |
+-----------+-----------------------+

Los fotogramas deseados por segundo. Si el hardware no puede mantener el ritmo, este ajuste puede no ser respetado. Un valor de 0 significa que no hay límite.

----

.. _class_Engine_property_time_scale:

- :ref:`float<class_float>` **time_scale**

+-----------+-----------------------+
| *Default* | ``1.0``               |
+-----------+-----------------------+
| *Setter*  | set_time_scale(value) |
+-----------+-----------------------+
| *Getter*  | get_time_scale()      |
+-----------+-----------------------+

Controla la velocidad o la lentitud del reloj del juego en comparación con el de la vida real. El valor por defecto es 1.0. Un valor de 2.0 significa que el juego se mueve el doble de rápido que en la vida real, mientras que un valor de 0.5 significa que el juego se mueve a la mitad de la velocidad normal.

Descripciones de Métodos
------------------------------------------------

.. _class_Engine_method_get_author_info:

- :ref:`Dictionary<class_Dictionary>` **get_author_info** **(** **)** |const|

Devuelve la información del autor del motor en un diccionario.

\ ``lead_developers`` - Array de cadenas, nombres de los desarrolladores principales

\ ``founders`` - Array of Strings, nombres de los fundadores

\ ``project_managers`` - Array de Strings, nombres de los directores de proyecto

\ ``developers`` - Array de Strings, nombres de desarrolladores

----

.. _class_Engine_method_get_copyright_info:

- :ref:`Array<class_Array>` **get_copyright_info** **(** **)** |const|

Devuelve un conjunto de diccionarios de información sobre derechos de autor.

\ ``name`` - String, nombre del componente

\ ``parts`` - Array de diccionarios{ ``files``, ``copyright``, ``license``} que describen las subsecciones del componente

----

.. _class_Engine_method_get_donor_info:

- :ref:`Dictionary<class_Dictionary>` **get_donor_info** **(** **)** |const|

Returns a Dictionary of Arrays of donor names.

{``platinum_sponsors``, ``gold_sponsors``, ``silver_sponsors``, ``bronze_sponsors``, ``mini_sponsors``, ``gold_donors``, ``silver_donors``, ``bronze_donors``}

----

.. _class_Engine_method_get_frames_drawn:

- :ref:`int<class_int>` **get_frames_drawn** **(** **)**

Returns the total number of frames drawn. On headless platforms, or if the render loop is disabled with ``--disable-render-loop`` via command line, :ref:`get_frames_drawn<class_Engine_method_get_frames_drawn>` always returns ``0``. See :ref:`get_idle_frames<class_Engine_method_get_idle_frames>`.

----

.. _class_Engine_method_get_frames_per_second:

- :ref:`float<class_float>` **get_frames_per_second** **(** **)** |const|

Devuelve los fotogramas por segundo del juego en marcha.

----

.. _class_Engine_method_get_idle_frames:

- :ref:`int<class_int>` **get_idle_frames** **(** **)** |const|

Returns the total number of frames passed since engine initialization which is advanced on each **idle frame**, regardless of whether the render loop is enabled. See also :ref:`get_frames_drawn<class_Engine_method_get_frames_drawn>` and :ref:`get_physics_frames<class_Engine_method_get_physics_frames>`.

\ :ref:`get_idle_frames<class_Engine_method_get_idle_frames>` can be used to run expensive logic less often without relying on a :ref:`Timer<class_Timer>`:

::

    func _process(_delta):
        if Engine.get_idle_frames() % 2 == 0:
            pass  # Run expensive logic only once every 2 idle (render) frames here.

----

.. _class_Engine_method_get_license_info:

- :ref:`Dictionary<class_Dictionary>` **get_license_info** **(** **)** |const|

Devuelve el diccionario de licencias utilizado por Godot e incluye componentes de terceros.

----

.. _class_Engine_method_get_license_text:

- :ref:`String<class_String>` **get_license_text** **(** **)** |const|

Devuelve el texto de la licencia de Godot.

----

.. _class_Engine_method_get_main_loop:

- :ref:`MainLoop<class_MainLoop>` **get_main_loop** **(** **)** |const|

Devuelve el objeto del bucle principal (ver :ref:`MainLoop<class_MainLoop>` y :ref:`SceneTree<class_SceneTree>`).

----

.. _class_Engine_method_get_physics_frames:

- :ref:`int<class_int>` **get_physics_frames** **(** **)** |const|

Returns the total number of frames passed since engine initialization which is advanced on each **physics frame**. See also :ref:`get_idle_frames<class_Engine_method_get_idle_frames>`.

\ :ref:`get_physics_frames<class_Engine_method_get_physics_frames>` can be used to run expensive logic less often without relying on a :ref:`Timer<class_Timer>`:

::

    func _physics_process(_delta):
        if Engine.get_physics_frames() % 2 == 0:
            pass  # Run expensive logic only once every 2 physics frames here.

----

.. _class_Engine_method_get_physics_interpolation_fraction:

- :ref:`float<class_float>` **get_physics_interpolation_fraction** **(** **)** |const|

Devuelve la fracción a través de la marca de la física actual en la que estamos en el momento de renderizar el cuadro. Esto puede ser usado para implementar una interpolación de pasos de tiempo fijos.

----

.. _class_Engine_method_get_singleton:

- :ref:`Object<class_Object>` **get_singleton** **(** :ref:`String<class_String>` name **)** |const|

Returns a global singleton with given ``name``. Often used for plugins, e.g. ``GodotPayment`` on Android.

----

.. _class_Engine_method_get_version_info:

- :ref:`Dictionary<class_Dictionary>` **get_version_info** **(** **)** |const|

Devuelve la información de la versión actual del motor en un diccionario.

\ ``major`` - Contiene el número de la versión principal como un int

\ ``minor`` - Contiene el número de la versión menor como un int

\ ``patch`` - Contiene el número de versión del parche como un int

\ ``hex`` - Contiene el número de versión completo codificado como un int hexadecimal con un byte (2 lugares) por número (ver ejemplo abajo)

\ ``status`` - Mantiene el estado (por ejemplo "beta", "rc1", "rc2", ... "estable") como una String

\ ``build`` - Mantiene el nombre de la construcción (por ejemplo, "custom_build") como una string

\ ``hash`` - Contiene el hash completo del commit de Git como una string

\ ``year`` - Contiene el año en que la versión fue lanzada como un int

\ ``string`` - ``major`` + ``minor`` + ``patch`` + ``status`` + ``build`` en una sola string

El valor ``hex`` se codifica de la siguiente manera, de izquierda a derecha: un byte para el mayor, un byte para el menor, un byte para la versión de parche. Por ejemplo, "3.1.12" sería ``0x03010C``. **Nota:** Sigue siendo un int interno, e imprimirlo le dará su representación decimal, que no es particularmente significativa. Utilice los literales hexadecimales para facilitar las comparaciones de versiones a partir del código:

::

    si Engine.get_version_info().hex >= 0x030200:
        # Haz cosas específicas de la versión 3.2 o posterior
    ...sino..:
        # Hacer cosas específicas de las versiones anteriores a la 3.2

----

.. _class_Engine_method_has_singleton:

- :ref:`bool<class_bool>` **has_singleton** **(** :ref:`String<class_String>` name **)** |const|

Devuelve ``true`` si existe en el ámbito global un singleton con un ``name`` dado.

----

.. _class_Engine_method_is_in_physics_frame:

- :ref:`bool<class_bool>` **is_in_physics_frame** **(** **)** |const|

Devuelve ``true`` si el juego está dentro del proceso fijo y la fase de física del bucle de juego.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
