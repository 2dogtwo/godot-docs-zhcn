:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Viewport.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Viewport:

Viewport
========

**Inherits:** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Crea una sub-vista en la pantalla.

Descripci√≥n
----------------------

A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.

Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.

If a viewport is a child of a :ref:`ViewportContainer<class_ViewportContainer>`, it will automatically take up its size, otherwise it must be set manually.

Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.

Also, viewports can be assigned to different screens in case the devices have multiple screens.

Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.

\ **Note:** By default, a newly created Viewport in Godot 3.x will appear to be upside down. Enabling :ref:`render_target_v_flip<class_Viewport_property_render_target_v_flip>` will display the Viewport with the correct orientation.

Tutoriales
--------------------

- :doc:`Viewport and canvas transforms <../tutorials/2d/2d_transforms>`

- :doc:`Viewports tutorial index <../tutorials/rendering/index>`

- `GUI in 3D Demo <https://godotengine.org/asset-library/asset/127>`__

- `3D in 2D Demo <https://godotengine.org/asset-library/asset/128>`__

- `2D in 3D Demo <https://godotengine.org/asset-library/asset/129>`__

- `Screen Capture Demo <https://godotengine.org/asset-library/asset/130>`__

- `Dynamic Split Screen Demo <https://godotengine.org/asset-library/asset/541>`__

- `3D Viewport Scaling Demo <https://godotengine.org/asset-library/asset/586>`__

Propiedades
----------------------

+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`arvr<class_Viewport_property_arvr>`                                               | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`audio_listener_enable_2d<class_Viewport_property_audio_listener_enable_2d>`       | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`audio_listener_enable_3d<class_Viewport_property_audio_listener_enable_3d>`       | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`Transform2D<class_Transform2D>`                                     | :ref:`canvas_transform<class_Viewport_property_canvas_transform>`                       |                     |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`debanding<class_Viewport_property_debanding>`                                     | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`DebugDraw<enum_Viewport_DebugDraw>`                                 | :ref:`debug_draw<class_Viewport_property_debug_draw>`                                   | ``0``               |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`disable_3d<class_Viewport_property_disable_3d>`                                   | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`fxaa<class_Viewport_property_fxaa>`                                               | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`Transform2D<class_Transform2D>`                                     | :ref:`global_canvas_transform<class_Viewport_property_global_canvas_transform>`         |                     |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`gui_disable_input<class_Viewport_property_gui_disable_input>`                     | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`gui_snap_controls_to_pixels<class_Viewport_property_gui_snap_controls_to_pixels>` | ``true``            |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`handle_input_locally<class_Viewport_property_handle_input_locally>`               | ``true``            |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`hdr<class_Viewport_property_hdr>`                                                 | ``true``            |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`keep_3d_linear<class_Viewport_property_keep_3d_linear>`                           | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`MSAA<enum_Viewport_MSAA>`                                           | :ref:`msaa<class_Viewport_property_msaa>`                                               | ``0``               |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`own_world<class_Viewport_property_own_world>`                                     | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`physics_object_picking<class_Viewport_property_physics_object_picking>`           | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`render_direct_to_screen<class_Viewport_property_render_direct_to_screen>`         | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`ClearMode<enum_Viewport_ClearMode>`                                 | :ref:`render_target_clear_mode<class_Viewport_property_render_target_clear_mode>`       | ``0``               |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`UpdateMode<enum_Viewport_UpdateMode>`                               | :ref:`render_target_update_mode<class_Viewport_property_render_target_update_mode>`     | ``2``               |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`render_target_v_flip<class_Viewport_property_render_target_v_flip>`               | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` | :ref:`shadow_atlas_quad_0<class_Viewport_property_shadow_atlas_quad_0>`                 | ``2``               |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` | :ref:`shadow_atlas_quad_1<class_Viewport_property_shadow_atlas_quad_1>`                 | ``2``               |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` | :ref:`shadow_atlas_quad_2<class_Viewport_property_shadow_atlas_quad_2>`                 | ``3``               |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` | :ref:`shadow_atlas_quad_3<class_Viewport_property_shadow_atlas_quad_3>`                 | ``4``               |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`int<class_int>`                                                     | :ref:`shadow_atlas_size<class_Viewport_property_shadow_atlas_size>`                     | ``0``               |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`float<class_float>`                                                 | :ref:`sharpen_intensity<class_Viewport_property_sharpen_intensity>`                     | ``0.0``             |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>`                                             | :ref:`size<class_Viewport_property_size>`                                               | ``Vector2( 0, 0 )`` |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`size_override_stretch<class_Viewport_property_size_override_stretch>`             | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`transparent_bg<class_Viewport_property_transparent_bg>`                           | ``false``           |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`Usage<enum_Viewport_Usage>`                                         | :ref:`usage<class_Viewport_property_usage>`                                             | ``2``               |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`World<class_World>`                                                 | :ref:`world<class_Viewport_property_world>`                                             |                     |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+
| :ref:`World2D<class_World2D>`                                             | :ref:`world_2d<class_Viewport_property_world_2d>`                                       |                     |
+---------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+---------------------+

M√©todos
--------------

+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`World<class_World>`                                                 | :ref:`find_world<class_Viewport_method_find_world>` **(** **)** |const|                                                                                                                                                      |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`World2D<class_World2D>`                                             | :ref:`find_world_2d<class_Viewport_method_find_world_2d>` **(** **)** |const|                                                                                                                                                |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Camera<class_Camera>`                                               | :ref:`get_camera<class_Viewport_method_get_camera>` **(** **)** |const|                                                                                                                                                      |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>`                                     | :ref:`get_final_transform<class_Viewport_method_get_final_transform>` **(** **)** |const|                                                                                                                                    |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Control<class_Control>`                                             | :ref:`get_modal_stack_top<class_Viewport_method_get_modal_stack_top>` **(** **)** |const|                                                                                                                                    |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                                             | :ref:`get_mouse_position<class_Viewport_method_get_mouse_position>` **(** **)** |const|                                                                                                                                      |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                                     | :ref:`get_render_info<class_Viewport_method_get_render_info>` **(** :ref:`RenderInfo<enum_Viewport_RenderInfo>` info **)**                                                                                                   |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` | :ref:`get_shadow_atlas_quadrant_subdiv<class_Viewport_method_get_shadow_atlas_quadrant_subdiv>` **(** :ref:`int<class_int>` quadrant **)** |const|                                                                           |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                                             | :ref:`get_size_override<class_Viewport_method_get_size_override>` **(** **)** |const|                                                                                                                                        |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ViewportTexture<class_ViewportTexture>`                             | :ref:`get_texture<class_Viewport_method_get_texture>` **(** **)** |const|                                                                                                                                                    |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`RID<class_RID>`                                                     | :ref:`get_viewport_rid<class_Viewport_method_get_viewport_rid>` **(** **)** |const|                                                                                                                                          |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Rect2<class_Rect2>`                                                 | :ref:`get_visible_rect<class_Viewport_method_get_visible_rect>` **(** **)** |const|                                                                                                                                          |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`                                             | :ref:`gui_get_drag_data<class_Viewport_method_gui_get_drag_data>` **(** **)** |const|                                                                                                                                        |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`gui_has_modal_stack<class_Viewport_method_gui_has_modal_stack>` **(** **)** |const|                                                                                                                                    |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`gui_is_dragging<class_Viewport_method_gui_is_dragging>` **(** **)** |const|                                                                                                                                            |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                                      | :ref:`input<class_Viewport_method_input>` **(** :ref:`InputEvent<class_InputEvent>` local_event **)**                                                                                                                        |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`is_input_handled<class_Viewport_method_is_input_handled>` **(** **)** |const|                                                                                                                                          |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                                   | :ref:`is_size_override_enabled<class_Viewport_method_is_size_override_enabled>` **(** **)** |const|                                                                                                                          |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                                      | :ref:`set_attach_to_screen_rect<class_Viewport_method_set_attach_to_screen_rect>` **(** :ref:`Rect2<class_Rect2>` rect **)**                                                                                                 |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                                      | :ref:`set_input_as_handled<class_Viewport_method_set_input_as_handled>` **(** **)**                                                                                                                                          |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                                      | :ref:`set_shadow_atlas_quadrant_subdiv<class_Viewport_method_set_shadow_atlas_quadrant_subdiv>` **(** :ref:`int<class_int>` quadrant, :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` subdiv **)** |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                                      | :ref:`set_size_override<class_Viewport_method_set_size_override>` **(** :ref:`bool<class_bool>` enable, :ref:`Vector2<class_Vector2>` size=Vector2( -1, -1 ), :ref:`Vector2<class_Vector2>` margin=Vector2( 0, 0 ) **)**     |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                                      | :ref:`unhandled_input<class_Viewport_method_unhandled_input>` **(** :ref:`InputEvent<class_InputEvent>` local_event **)**                                                                                                    |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                                      | :ref:`update_worlds<class_Viewport_method_update_worlds>` **(** **)**                                                                                                                                                        |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                                      | :ref:`warp_mouse<class_Viewport_method_warp_mouse>` **(** :ref:`Vector2<class_Vector2>` to_position **)**                                                                                                                    |
+---------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Se√±ales
--------------

.. _class_Viewport_signal_gui_focus_changed:

- **gui_focus_changed** **(** :ref:`Control<class_Control>` node **)**

Se emite cuando un nodo de control toma el foco del teclado.

----

.. _class_Viewport_signal_size_changed:

- **size_changed** **(** **)**

Emitted when the size of the viewport is changed, whether by :ref:`set_size_override<class_Viewport_method_set_size_override>`, resize of window, or some other means.

Enumeraciones
--------------------------

.. _enum_Viewport_UpdateMode:

.. _class_Viewport_constant_UPDATE_DISABLED:

.. _class_Viewport_constant_UPDATE_ONCE:

.. _class_Viewport_constant_UPDATE_WHEN_VISIBLE:

.. _class_Viewport_constant_UPDATE_ALWAYS:

enum **UpdateMode**:

- **UPDATE_DISABLED** = **0** --- No actualiza el objetivo de renderizaci√≥n.

- **UPDATE_ONCE** = **1** --- Actualiza el objetivo de render una vez, luego cambia a :ref:`UPDATE_DISABLED<class_Viewport_constant_UPDATE_DISABLED>`.

- **UPDATE_WHEN_VISIBLE** = **2** --- Actualice el objetivo de renderizado s√≥lo cuando sea visible. Este es el valor predeterminado.

- **UPDATE_ALWAYS** = **3** --- Siempre actualiza el objetivo de renderizaci√≥n.

----

.. _enum_Viewport_ShadowAtlasQuadrantSubdiv:

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED:

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_1:

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_4:

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_16:

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_64:

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_256:

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_1024:

.. _class_Viewport_constant_SHADOW_ATLAS_QUADRANT_SUBDIV_MAX:

enum **ShadowAtlasQuadrantSubdiv**:

- **SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED** = **0** --- Este cuadrante no ser√° utilizado.

- **SHADOW_ATLAS_QUADRANT_SUBDIV_1** = **1** --- Este cuadrante s√≥lo ser√° usado por un mapa de sombras.

- **SHADOW_ATLAS_QUADRANT_SUBDIV_4** = **2** --- Este cuadrante se dividir√° en 4 y ser√° usado por hasta 4 mapas de sombras.

- **SHADOW_ATLAS_QUADRANT_SUBDIV_16** = **3** --- Este cuadrante se dividir√° en 16 partes y ser√° utilizado por hasta 16 mapas de sombras.

- **SHADOW_ATLAS_QUADRANT_SUBDIV_64** = **4** --- Este cuadrante se dividir√° en 64 partes y ser√° utilizado por hasta 64 mapas de sombras.

- **SHADOW_ATLAS_QUADRANT_SUBDIV_256** = **5** --- Este cuadrante se dividir√° en 256 partes y ser√° utilizado por hasta 256 mapas de sombras. A menos que el :ref:`shadow_atlas_size<class_Viewport_property_shadow_atlas_size>` sea muy alto, las sombras en este cuadrante ser√°n de muy baja resoluci√≥n.

- **SHADOW_ATLAS_QUADRANT_SUBDIV_1024** = **6** --- Este cuadrante se dividir√° en 1024 partes y ser√° utilizado por hasta 1024 mapas de sombras. A menos que el :ref:`shadow_atlas_size<class_Viewport_property_shadow_atlas_size>` sea muy alto, las sombras en este cuadrante ser√°n de muy baja resoluci√≥n.

- **SHADOW_ATLAS_QUADRANT_SUBDIV_MAX** = **7** --- Representa el tama√±o del enum :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>`.

----

.. _enum_Viewport_RenderInfo:

.. _class_Viewport_constant_RENDER_INFO_OBJECTS_IN_FRAME:

.. _class_Viewport_constant_RENDER_INFO_VERTICES_IN_FRAME:

.. _class_Viewport_constant_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME:

.. _class_Viewport_constant_RENDER_INFO_SHADER_CHANGES_IN_FRAME:

.. _class_Viewport_constant_RENDER_INFO_SURFACE_CHANGES_IN_FRAME:

.. _class_Viewport_constant_RENDER_INFO_DRAW_CALLS_IN_FRAME:

.. _class_Viewport_constant_RENDER_INFO_2D_ITEMS_IN_FRAME:

.. _class_Viewport_constant_RENDER_INFO_2D_DRAW_CALLS_IN_FRAME:

.. _class_Viewport_constant_RENDER_INFO_MAX:

enum **RenderInfo**:

- **RENDER_INFO_OBJECTS_IN_FRAME** = **0** --- Cantidad de objetos en el fotograma.

- **RENDER_INFO_VERTICES_IN_FRAME** = **1** --- Cantidad de v√©rtices en el fotograma.

- **RENDER_INFO_MATERIAL_CHANGES_IN_FRAME** = **2** --- La cantidad de material que cambia en el fotograma.

- **RENDER_INFO_SHADER_CHANGES_IN_FRAME** = **3** --- La cantidad de cambios de shader en el fotograma.

- **RENDER_INFO_SURFACE_CHANGES_IN_FRAME** = **4** --- La cantidad de superficie que cambia en el fotograma.

- **RENDER_INFO_DRAW_CALLS_IN_FRAME** = **5** --- Cantidad de llamadas de dibujo en el fotograma.

- **RENDER_INFO_2D_ITEMS_IN_FRAME** = **6** --- Amount of items or joined items in frame.

- **RENDER_INFO_2D_DRAW_CALLS_IN_FRAME** = **7** --- Cantidad de llamadas de dibujo en el fotograma.

- **RENDER_INFO_MAX** = **8** --- Representa el tama√±o del enum :ref:`RenderInfo<enum_Viewport_RenderInfo>`.

----

.. _enum_Viewport_DebugDraw:

.. _class_Viewport_constant_DEBUG_DRAW_DISABLED:

.. _class_Viewport_constant_DEBUG_DRAW_UNSHADED:

.. _class_Viewport_constant_DEBUG_DRAW_OVERDRAW:

.. _class_Viewport_constant_DEBUG_DRAW_WIREFRAME:

enum **DebugDraw**:

- **DEBUG_DRAW_DISABLED** = **0** --- Los objetos se muestran normalmente.

- **DEBUG_DRAW_UNSHADED** = **1** --- Los objetos se muestran sin informaci√≥n de la luz.

- **DEBUG_DRAW_OVERDRAW** = **2** --- Objected are displayed semi-transparent with additive blending so you can see where they intersect.

- **DEBUG_DRAW_WIREFRAME** = **3** --- Los objetos se muestran en el estilo wireframe.

----

.. _enum_Viewport_MSAA:

.. _class_Viewport_constant_MSAA_DISABLED:

.. _class_Viewport_constant_MSAA_2X:

.. _class_Viewport_constant_MSAA_4X:

.. _class_Viewport_constant_MSAA_8X:

.. _class_Viewport_constant_MSAA_16X:

enum **MSAA**:

- **MSAA_DISABLED** = **0** --- Multisample anti-aliasing mode disabled. This is the default value.

- **MSAA_2X** = **1** --- Usar 2x Antialiasing Multisample.

- **MSAA_4X** = **2** --- Usar 4x Antialising Multisample.

- **MSAA_8X** = **3** --- Usar 8x Antialiasing Multisample. Probablemente sin soporte en hardware de baja gama y m√°s antiguo.

- **MSAA_16X** = **4** --- Usar 16x Antialising Multisample. Probablemente sin soporte en hardware de gama media y baja.

----

.. _enum_Viewport_Usage:

.. _class_Viewport_constant_USAGE_2D:

.. _class_Viewport_constant_USAGE_2D_NO_SAMPLING:

.. _class_Viewport_constant_USAGE_3D:

.. _class_Viewport_constant_USAGE_3D_NO_EFFECTS:

enum **Usage**:

- **USAGE_2D** = **0** --- Allocates all buffers needed for drawing 2D scenes. This takes less VRAM than the 3D usage modes. Note that 3D rendering effects such as glow and HDR are not available when using this mode.

- **USAGE_2D_NO_SAMPLING** = **1** --- Allocates buffers needed for 2D scenes without allocating a buffer for screen copy. Accordingly, you cannot read from the screen. Of the :ref:`Usage<enum_Viewport_Usage>` types, this requires the least VRAM. Note that 3D rendering effects such as glow and HDR are not available when using this mode.

- **USAGE_3D** = **2** --- Allocates full buffers for drawing 3D scenes and all 3D effects including buffers needed for 2D scenes and effects.

- **USAGE_3D_NO_EFFECTS** = **3** --- Allocates buffers needed for drawing 3D scenes. But does not allocate buffers needed for reading from the screen and post-processing effects. Saves some VRAM.

----

.. _enum_Viewport_ClearMode:

.. _class_Viewport_constant_CLEAR_MODE_ALWAYS:

.. _class_Viewport_constant_CLEAR_MODE_NEVER:

.. _class_Viewport_constant_CLEAR_MODE_ONLY_NEXT_FRAME:

enum **ClearMode**:

- **CLEAR_MODE_ALWAYS** = **0** --- Siempre despeja el objetivo de renderizado antes de dibujar.

- **CLEAR_MODE_NEVER** = **1** --- Nunca despejen el objetivo de renderizado.

- **CLEAR_MODE_ONLY_NEXT_FRAME** = **2** --- Limpia el objetivo de renderizado en el siguiente fotograma, luego cambia a :ref:`CLEAR_MODE_NEVER<class_Viewport_constant_CLEAR_MODE_NEVER>`.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_Viewport_property_arvr:

- :ref:`bool<class_bool>` **arvr**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_use_arvr(value) |
+-----------+---------------------+
| *Getter*  | use_arvr()          |
+-----------+---------------------+

If ``true``, the viewport will be used in AR/VR process.

----

.. _class_Viewport_property_audio_listener_enable_2d:

- :ref:`bool<class_bool>` **audio_listener_enable_2d**

+-----------+---------------------------------+
| *Default* | ``false``                       |
+-----------+---------------------------------+
| *Setter*  | set_as_audio_listener_2d(value) |
+-----------+---------------------------------+
| *Getter*  | is_audio_listener_2d()          |
+-----------+---------------------------------+

Si ``true``, el viewport procesar√° streams de audio en 2D.

----

.. _class_Viewport_property_audio_listener_enable_3d:

- :ref:`bool<class_bool>` **audio_listener_enable_3d**

+-----------+------------------------------+
| *Default* | ``false``                    |
+-----------+------------------------------+
| *Setter*  | set_as_audio_listener(value) |
+-----------+------------------------------+
| *Getter*  | is_audio_listener()          |
+-----------+------------------------------+

Si ``true``, el viewport procesar√° streams de audio en 3D.

----

.. _class_Viewport_property_canvas_transform:

- :ref:`Transform2D<class_Transform2D>` **canvas_transform**

+----------+-----------------------------+
| *Setter* | set_canvas_transform(value) |
+----------+-----------------------------+
| *Getter* | get_canvas_transform()      |
+----------+-----------------------------+

La transformada del canvas del viewport, √∫til para cambiar las posiciones en pantalla de todos los :ref:`CanvasItem<class_CanvasItem>`\ s hijos. Esto es relativo a la transformada global del canvas del viewport.

----

.. _class_Viewport_property_debanding:

- :ref:`bool<class_bool>` **debanding**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_use_debanding(value) |
+-----------+--------------------------+
| *Getter*  | get_use_debanding()      |
+-----------+--------------------------+

If ``true``, uses a fast post-processing filter to make banding significantly less visible. In some cases, debanding may introduce a slightly noticeable dithering pattern. It's recommended to enable debanding only when actually needed since the dithering pattern will make lossless-compressed screenshots larger.

\ **Note:** Only available on the GLES3 backend. :ref:`hdr<class_Viewport_property_hdr>` must also be ``true`` for debanding to be effective.

----

.. _class_Viewport_property_debug_draw:

- :ref:`DebugDraw<enum_Viewport_DebugDraw>` **debug_draw**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_debug_draw(value) |
+-----------+-----------------------+
| *Getter*  | get_debug_draw()      |
+-----------+-----------------------+

El modo de superposici√≥n para la prueba renderiz√≥ la geometr√≠a con fines de depuraci√≥n.

----

.. _class_Viewport_property_disable_3d:

- :ref:`bool<class_bool>` **disable_3d**

+-----------+-----------------------+
| *Default* | ``false``             |
+-----------+-----------------------+
| *Setter*  | set_disable_3d(value) |
+-----------+-----------------------+
| *Getter*  | is_3d_disabled()      |
+-----------+-----------------------+

If ``true``, the viewport will disable 3D rendering. For actual disabling use ``usage``.

----

.. _class_Viewport_property_fxaa:

- :ref:`bool<class_bool>` **fxaa**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_use_fxaa(value) |
+-----------+---------------------+
| *Getter*  | get_use_fxaa()      |
+-----------+---------------------+

Enables fast approximate antialiasing. FXAA is a popular screen-space antialiasing method, which is fast but will make the image look blurry, especially at lower resolutions. It can still work relatively well at large resolutions such as 1440p and 4K. Some of the lost sharpness can be recovered by enabling contrast-adaptive sharpening (see :ref:`sharpen_intensity<class_Viewport_property_sharpen_intensity>`).

----

.. _class_Viewport_property_global_canvas_transform:

- :ref:`Transform2D<class_Transform2D>` **global_canvas_transform**

+----------+------------------------------------+
| *Setter* | set_global_canvas_transform(value) |
+----------+------------------------------------+
| *Getter* | get_global_canvas_transform()      |
+----------+------------------------------------+

La transformaci√≥n del canvas global del viewport. La transformada del canvas es relativa a esto.

----

.. _class_Viewport_property_gui_disable_input:

- :ref:`bool<class_bool>` **gui_disable_input**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_disable_input(value) |
+-----------+--------------------------+
| *Getter*  | is_input_disabled()      |
+-----------+--------------------------+

If ``true``, the viewport will not receive input events.

----

.. _class_Viewport_property_gui_snap_controls_to_pixels:

- :ref:`bool<class_bool>` **gui_snap_controls_to_pixels**

+-----------+--------------------------------------+
| *Default* | ``true``                             |
+-----------+--------------------------------------+
| *Setter*  | set_snap_controls_to_pixels(value)   |
+-----------+--------------------------------------+
| *Getter*  | is_snap_controls_to_pixels_enabled() |
+-----------+--------------------------------------+

Si ``true``, los controles GUI en el viewport colocar√°n los p√≠xeles perfectamente.

----

.. _class_Viewport_property_handle_input_locally:

- :ref:`bool<class_bool>` **handle_input_locally**

+-----------+---------------------------------+
| *Default* | ``true``                        |
+-----------+---------------------------------+
| *Setter*  | set_handle_input_locally(value) |
+-----------+---------------------------------+
| *Getter*  | is_handling_input_locally()     |
+-----------+---------------------------------+

----

.. _class_Viewport_property_hdr:

- :ref:`bool<class_bool>` **hdr**

+-----------+----------------+
| *Default* | ``true``       |
+-----------+----------------+
| *Setter*  | set_hdr(value) |
+-----------+----------------+
| *Getter*  | get_hdr()      |
+-----------+----------------+

If ``true``, the viewport rendering will receive benefits from High Dynamic Range algorithm. High Dynamic Range allows the viewport to receive values that are outside the 0-1 range. In Godot HDR uses 16 bits, meaning it does not store the full range of a floating point number.

\ **Note:** Requires :ref:`usage<class_Viewport_property_usage>` to be set to :ref:`USAGE_3D<class_Viewport_constant_USAGE_3D>` or :ref:`USAGE_3D_NO_EFFECTS<class_Viewport_constant_USAGE_3D_NO_EFFECTS>`, since HDR is not supported for 2D.

----

.. _class_Viewport_property_keep_3d_linear:

- :ref:`bool<class_bool>` **keep_3d_linear**

+-----------+---------------------------+
| *Default* | ``false``                 |
+-----------+---------------------------+
| *Setter*  | set_keep_3d_linear(value) |
+-----------+---------------------------+
| *Getter*  | get_keep_3d_linear()      |
+-----------+---------------------------+

If ``true``, the result after 3D rendering will not have a linear to sRGB color conversion applied. This is important when the viewport is used as a render target where the result is used as a texture on a 3D object rendered in another viewport. It is also important if the viewport is used to create data that is not color based (noise, heightmaps, pickmaps, etc.). Do not enable this when the viewport is used as a texture on a 2D object or if the viewport is your final output. For the GLES2 driver this will convert the sRGB output to linear, this should only be used for VR plugins that require input in linear color space!

----

.. _class_Viewport_property_msaa:

- :ref:`MSAA<enum_Viewport_MSAA>` **msaa**

+-----------+-----------------+
| *Default* | ``0``           |
+-----------+-----------------+
| *Setter*  | set_msaa(value) |
+-----------+-----------------+
| *Getter*  | get_msaa()      |
+-----------+-----------------+

El modo antialiasing de multisample. Un n√∫mero mayor resulta en bordes m√°s suaves a costa de un rendimiento significativamente peor. Un valor de 4 es el mejor a menos que se trate de sistemas de muy alta gama.

----

.. _class_Viewport_property_own_world:

- :ref:`bool<class_bool>` **own_world**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_use_own_world(value) |
+-----------+--------------------------+
| *Getter*  | is_using_own_world()     |
+-----------+--------------------------+

If ``true``, the viewport will use :ref:`World<class_World>` defined in ``world`` property.

----

.. _class_Viewport_property_physics_object_picking:

- :ref:`bool<class_bool>` **physics_object_picking**

+-----------+-----------------------------------+
| *Default* | ``false``                         |
+-----------+-----------------------------------+
| *Setter*  | set_physics_object_picking(value) |
+-----------+-----------------------------------+
| *Getter*  | get_physics_object_picking()      |
+-----------+-----------------------------------+

Si ``true``, los objetos renderizados por viewport se convierten en sujetos del proceso de selecci√≥n del rat√≥n.

----

.. _class_Viewport_property_render_direct_to_screen:

- :ref:`bool<class_bool>` **render_direct_to_screen**

+-----------+----------------------------------------+
| *Default* | ``false``                              |
+-----------+----------------------------------------+
| *Setter*  | set_use_render_direct_to_screen(value) |
+-----------+----------------------------------------+
| *Getter*  | is_using_render_direct_to_screen()     |
+-----------+----------------------------------------+

If ``true``, renders the Viewport directly to the screen instead of to the root viewport. Only available in GLES2. This is a low-level optimization and should not be used in most cases. If used, reading from the Viewport or from ``SCREEN_TEXTURE`` becomes unavailable. For more information see :ref:`VisualServer.viewport_set_render_direct_to_screen<class_VisualServer_method_viewport_set_render_direct_to_screen>`.

----

.. _class_Viewport_property_render_target_clear_mode:

- :ref:`ClearMode<enum_Viewport_ClearMode>` **render_target_clear_mode**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_clear_mode(value) |
+-----------+-----------------------+
| *Getter*  | get_clear_mode()      |
+-----------+-----------------------+

The clear mode when viewport used as a render target.

\ **Note:** This property is intended for 2D usage.

----

.. _class_Viewport_property_render_target_update_mode:

- :ref:`UpdateMode<enum_Viewport_UpdateMode>` **render_target_update_mode**

+-----------+------------------------+
| *Default* | ``2``                  |
+-----------+------------------------+
| *Setter*  | set_update_mode(value) |
+-----------+------------------------+
| *Getter*  | get_update_mode()      |
+-----------+------------------------+

The update mode when viewport used as a render target.

----

.. _class_Viewport_property_render_target_v_flip:

- :ref:`bool<class_bool>` **render_target_v_flip**

+-----------+------------------+
| *Default* | ``false``        |
+-----------+------------------+
| *Setter*  | set_vflip(value) |
+-----------+------------------+
| *Getter*  | get_vflip()      |
+-----------+------------------+

If ``true``, the result of rendering will be flipped vertically. Since Viewports in Godot 3.x render upside-down, it's recommended to set this to ``true`` in most situations.

----

.. _class_Viewport_property_shadow_atlas_quad_0:

- :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **shadow_atlas_quad_0**

+-----------+-----------------------------------------+
| *Default* | ``2``                                   |
+-----------+-----------------------------------------+
| *Setter*  | set_shadow_atlas_quadrant_subdiv(value) |
+-----------+-----------------------------------------+
| *Getter*  | get_shadow_atlas_quadrant_subdiv()      |
+-----------+-----------------------------------------+

La cantidad de subdivisi√≥n del primer cuadrante del atlas de las sombras.

----

.. _class_Viewport_property_shadow_atlas_quad_1:

- :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **shadow_atlas_quad_1**

+-----------+-----------------------------------------+
| *Default* | ``2``                                   |
+-----------+-----------------------------------------+
| *Setter*  | set_shadow_atlas_quadrant_subdiv(value) |
+-----------+-----------------------------------------+
| *Getter*  | get_shadow_atlas_quadrant_subdiv()      |
+-----------+-----------------------------------------+

La cantidad de subdivisi√≥n del segundo cuadrante en el atlas de las sombras.

----

.. _class_Viewport_property_shadow_atlas_quad_2:

- :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **shadow_atlas_quad_2**

+-----------+-----------------------------------------+
| *Default* | ``3``                                   |
+-----------+-----------------------------------------+
| *Setter*  | set_shadow_atlas_quadrant_subdiv(value) |
+-----------+-----------------------------------------+
| *Getter*  | get_shadow_atlas_quadrant_subdiv()      |
+-----------+-----------------------------------------+

La cantidad de subdivisi√≥n del tercer cuadrante en el atlas de las sombras.

----

.. _class_Viewport_property_shadow_atlas_quad_3:

- :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **shadow_atlas_quad_3**

+-----------+-----------------------------------------+
| *Default* | ``4``                                   |
+-----------+-----------------------------------------+
| *Setter*  | set_shadow_atlas_quadrant_subdiv(value) |
+-----------+-----------------------------------------+
| *Getter*  | get_shadow_atlas_quadrant_subdiv()      |
+-----------+-----------------------------------------+

La cantidad de subdivisi√≥n del cuarto cuadrante en el atlas de las sombras.

----

.. _class_Viewport_property_shadow_atlas_size:

- :ref:`int<class_int>` **shadow_atlas_size**

+-----------+------------------------------+
| *Default* | ``0``                        |
+-----------+------------------------------+
| *Setter*  | set_shadow_atlas_size(value) |
+-----------+------------------------------+
| *Getter*  | get_shadow_atlas_size()      |
+-----------+------------------------------+

La resoluci√≥n del atlas de las sombras (usado para luces omni y spot). El valor se redondear√° a la potencia m√°s cercana de 2.

\ **Nota:** Si se establece en 0, las sombras no ser√°n visibles. Dado que los viewports creados por el usuario tienen por defecto el valor 0, este valor debe establecerse sobre 0 manualmente.

----

.. _class_Viewport_property_sharpen_intensity:

- :ref:`float<class_float>` **sharpen_intensity**

+-----------+------------------------------+
| *Default* | ``0.0``                      |
+-----------+------------------------------+
| *Setter*  | set_sharpen_intensity(value) |
+-----------+------------------------------+
| *Getter*  | get_sharpen_intensity()      |
+-----------+------------------------------+

If set to a value greater than ``0.0``, contrast-adaptive sharpening will be applied to the 3D viewport. This has a low performance cost and can be used to recover some of the sharpness lost from using FXAA. Values around ``0.5`` generally give the best results. See also :ref:`fxaa<class_Viewport_property_fxaa>`.

----

.. _class_Viewport_property_size:

- :ref:`Vector2<class_Vector2>` **size**

+-----------+---------------------+
| *Default* | ``Vector2( 0, 0 )`` |
+-----------+---------------------+
| *Setter*  | set_size(value)     |
+-----------+---------------------+
| *Getter*  | get_size()          |
+-----------+---------------------+

The width and height of viewport. Must be set to a value greater than or equal to 2 pixels on both dimensions. Otherwise, nothing will be displayed.

----

.. _class_Viewport_property_size_override_stretch:

- :ref:`bool<class_bool>` **size_override_stretch**

+-----------+------------------------------------+
| *Default* | ``false``                          |
+-----------+------------------------------------+
| *Setter*  | set_size_override_stretch(value)   |
+-----------+------------------------------------+
| *Getter*  | is_size_override_stretch_enabled() |
+-----------+------------------------------------+

If ``true``, the size override affects stretch as well.

----

.. _class_Viewport_property_transparent_bg:

- :ref:`bool<class_bool>` **transparent_bg**

+-----------+-----------------------------------+
| *Default* | ``false``                         |
+-----------+-----------------------------------+
| *Setter*  | set_transparent_background(value) |
+-----------+-----------------------------------+
| *Getter*  | has_transparent_background()      |
+-----------+-----------------------------------+

Si ``true``, el viewport deber√≠a hacer su fondo transparente.

----

.. _class_Viewport_property_usage:

- :ref:`Usage<enum_Viewport_Usage>` **usage**

+-----------+------------------+
| *Default* | ``2``            |
+-----------+------------------+
| *Setter*  | set_usage(value) |
+-----------+------------------+
| *Getter*  | get_usage()      |
+-----------+------------------+

The rendering mode of viewport.

----

.. _class_Viewport_property_world:

- :ref:`World<class_World>` **world**

+----------+------------------+
| *Setter* | set_world(value) |
+----------+------------------+
| *Getter* | get_world()      |
+----------+------------------+

The custom :ref:`World<class_World>` which can be used as 3D environment source.

----

.. _class_Viewport_property_world_2d:

- :ref:`World2D<class_World2D>` **world_2d**

+----------+---------------------+
| *Setter* | set_world_2d(value) |
+----------+---------------------+
| *Getter* | get_world_2d()      |
+----------+---------------------+

La :ref:`World2D<class_World2D>` personalizada que puede ser usada como fuente de entorno 2D.

Descripciones de M√©todos
------------------------------------------------

.. _class_Viewport_method_find_world:

- :ref:`World<class_World>` **find_world** **(** **)** |const|

Returns the first valid :ref:`World<class_World>` for this viewport, searching the :ref:`world<class_Viewport_property_world>` property of itself and any Viewport ancestor.

----

.. _class_Viewport_method_find_world_2d:

- :ref:`World2D<class_World2D>` **find_world_2d** **(** **)** |const|

Returns the first valid :ref:`World2D<class_World2D>` for this viewport, searching the :ref:`world_2d<class_Viewport_property_world_2d>` property of itself and any Viewport ancestor.

----

.. _class_Viewport_method_get_camera:

- :ref:`Camera<class_Camera>` **get_camera** **(** **)** |const|

Devuelve la c√°mara 3D activa.

----

.. _class_Viewport_method_get_final_transform:

- :ref:`Transform2D<class_Transform2D>` **get_final_transform** **(** **)** |const|

Devuelve la transformada total de la vista.

----

.. _class_Viewport_method_get_modal_stack_top:

- :ref:`Control<class_Control>` **get_modal_stack_top** **(** **)** |const|

Returns the topmost modal in the stack.

----

.. _class_Viewport_method_get_mouse_position:

- :ref:`Vector2<class_Vector2>` **get_mouse_position** **(** **)** |const|

Devuelve la posici√≥n del rat√≥n en relaci√≥n con la viewport.

----

.. _class_Viewport_method_get_render_info:

- :ref:`int<class_int>` **get_render_info** **(** :ref:`RenderInfo<enum_Viewport_RenderInfo>` info **)**

Devuelve la informaci√≥n sobre el viewport del pipeline de renderizado.

----

.. _class_Viewport_method_get_shadow_atlas_quadrant_subdiv:

- :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` **get_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant **)** |const|

Devuelve el :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` del cuadrante especificado.

----

.. _class_Viewport_method_get_size_override:

- :ref:`Vector2<class_Vector2>` **get_size_override** **(** **)** |const|

Returns the size override set with :ref:`set_size_override<class_Viewport_method_set_size_override>`.

----

.. _class_Viewport_method_get_texture:

- :ref:`ViewportTexture<class_ViewportTexture>` **get_texture** **(** **)** |const|

Returns the viewport's texture.

\ **Note:** Due to the way OpenGL works, the resulting :ref:`ViewportTexture<class_ViewportTexture>` is flipped vertically. You can use :ref:`Image.flip_y<class_Image_method_flip_y>` on the result of :ref:`Texture.get_data<class_Texture_method_get_data>` to flip it back, for example:

::

    var img = get_viewport().get_texture().get_data()
    img.flip_y()

----

.. _class_Viewport_method_get_viewport_rid:

- :ref:`RID<class_RID>` **get_viewport_rid** **(** **)** |const|

Devuelve el RID del viewport del :ref:`VisualServer<class_VisualServer>`.

----

.. _class_Viewport_method_get_visible_rect:

- :ref:`Rect2<class_Rect2>` **get_visible_rect** **(** **)** |const|

Devuelve el RID del viewport del :ref:`VisualServer<class_VisualServer>`.

----

.. _class_Viewport_method_gui_get_drag_data:

- :ref:`Variant<class_Variant>` **gui_get_drag_data** **(** **)** |const|

Devuelve los datos de arrastre de la GUI, que fueron previamente devueltos por :ref:`Control.get_drag_data<class_Control_method_get_drag_data>`.

----

.. _class_Viewport_method_gui_has_modal_stack:

- :ref:`bool<class_bool>` **gui_has_modal_stack** **(** **)** |const|

Returns ``true`` if there are visible modals on-screen.

----

.. _class_Viewport_method_gui_is_dragging:

- :ref:`bool<class_bool>` **gui_is_dragging** **(** **)** |const|

Devuelve ``true`` si el viewport est√° realizando actualmente una operaci√≥n de arrastre.

----

.. _class_Viewport_method_input:

- void **input** **(** :ref:`InputEvent<class_InputEvent>` local_event **)**

----

.. _class_Viewport_method_is_input_handled:

- :ref:`bool<class_bool>` **is_input_handled** **(** **)** |const|

----

.. _class_Viewport_method_is_size_override_enabled:

- :ref:`bool<class_bool>` **is_size_override_enabled** **(** **)** |const|

Returns ``true`` if the size override is enabled. See :ref:`set_size_override<class_Viewport_method_set_size_override>`.

----

.. _class_Viewport_method_set_attach_to_screen_rect:

- void **set_attach_to_screen_rect** **(** :ref:`Rect2<class_Rect2>` rect **)**

Attaches this ``Viewport`` to the root ``Viewport`` with the specified rectangle. This bypasses the need for another node to display this ``Viewport`` but makes you responsible for updating the position of this ``Viewport`` manually.

----

.. _class_Viewport_method_set_input_as_handled:

- void **set_input_as_handled** **(** **)**

Evita que la entrada se propague m√°s abajo en el :ref:`SceneTree<class_SceneTree>`.

----

.. _class_Viewport_method_set_shadow_atlas_quadrant_subdiv:

- void **set_shadow_atlas_quadrant_subdiv** **(** :ref:`int<class_int>` quadrant, :ref:`ShadowAtlasQuadrantSubdiv<enum_Viewport_ShadowAtlasQuadrantSubdiv>` subdiv **)**

Establece el n√∫mero de subdivisiones a utilizar en el cuadrante especificado. Un mayor n√∫mero de subdivisiones permite tener m√°s sombras en la escena a la vez, pero reduce la calidad de las sombras. Una buena pr√°ctica es tener cuadrantes con un n√∫mero variable de subdivisiones y tener el menor n√∫mero posible de subdivisiones.

----

.. _class_Viewport_method_set_size_override:

- void **set_size_override** **(** :ref:`bool<class_bool>` enable, :ref:`Vector2<class_Vector2>` size=Vector2( -1, -1 ), :ref:`Vector2<class_Vector2>` margin=Vector2( 0, 0 ) **)**

Sets the size override of the viewport. If the ``enable`` parameter is ``true`` the override is used, otherwise it uses the default size. If the size parameter is ``(-1, -1)``, it won't update the size.

----

.. _class_Viewport_method_unhandled_input:

- void **unhandled_input** **(** :ref:`InputEvent<class_InputEvent>` local_event **)**

----

.. _class_Viewport_method_update_worlds:

- void **update_worlds** **(** **)**

Fuerza la actualizaci√≥n de los mundos 2D y 3D.

----

.. _class_Viewport_method_warp_mouse:

- void **warp_mouse** **(** :ref:`Vector2<class_Vector2>` to_position **)**

Desplaza el rat√≥n a una posici√≥n relativa al viewport.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
