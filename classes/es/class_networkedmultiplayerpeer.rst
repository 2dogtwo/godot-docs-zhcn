:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the NetworkedMultiplayerPeer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_NetworkedMultiplayerPeer:

NetworkedMultiplayerPeer
========================

**Inherits:** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`MultiplayerPeerGDNative<class_MultiplayerPeerGDNative>`, :ref:`NetworkedMultiplayerENet<class_NetworkedMultiplayerENet>`, :ref:`WebRTCMultiplayer<class_WebRTCMultiplayer>`, :ref:`WebSocketMultiplayerPeer<class_WebSocketMultiplayerPeer>`

Una interfaz de red de alto nivel para simplificar las interacciones multijugador.

Descripción
----------------------

Manages the connection to network peers. Assigns unique IDs to each client connected to the server. See also :ref:`MultiplayerAPI<class_MultiplayerAPI>`.

\ **Note:** The high-level multiplayer API protocol is an implementation detail and isn't meant to be used by non-Godot servers. It may change without notice.

Tutoriales
--------------------

- :doc:`High-level multiplayer <../tutorials/networking/high_level_multiplayer>`

- `WebRTC Signaling Demo <https://godotengine.org/asset-library/asset/537>`__

Propiedades
----------------------

+-----------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------+
| :ref:`bool<class_bool>`                                         | :ref:`refuse_new_connections<class_NetworkedMultiplayerPeer_property_refuse_new_connections>` | ``true`` |
+-----------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------+
| :ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` | :ref:`transfer_mode<class_NetworkedMultiplayerPeer_property_transfer_mode>`                   | ``0``    |
+-----------------------------------------------------------------+-----------------------------------------------------------------------------------------------+----------+

Métodos
--------------

+-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
| :ref:`ConnectionStatus<enum_NetworkedMultiplayerPeer_ConnectionStatus>` | :ref:`get_connection_status<class_NetworkedMultiplayerPeer_method_get_connection_status>` **(** **)** |const|      |
+-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                                   | :ref:`get_packet_peer<class_NetworkedMultiplayerPeer_method_get_packet_peer>` **(** **)** |const|                  |
+-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                                   | :ref:`get_unique_id<class_NetworkedMultiplayerPeer_method_get_unique_id>` **(** **)** |const|                      |
+-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
| void                                                                    | :ref:`poll<class_NetworkedMultiplayerPeer_method_poll>` **(** **)**                                                |
+-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+
| void                                                                    | :ref:`set_target_peer<class_NetworkedMultiplayerPeer_method_set_target_peer>` **(** :ref:`int<class_int>` id **)** |
+-------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+

Señales
--------------

.. _class_NetworkedMultiplayerPeer_signal_connection_failed:

- **connection_failed** **(** **)**

Emitido cuando falla un intento de conexión.

----

.. _class_NetworkedMultiplayerPeer_signal_connection_succeeded:

- **connection_succeeded** **(** **)**

Emitido cuando un intento de conexión tiene éxito.

----

.. _class_NetworkedMultiplayerPeer_signal_peer_connected:

- **peer_connected** **(** :ref:`int<class_int>` id **)**

Emitido por el servidor cuando un cliente se conecta.

----

.. _class_NetworkedMultiplayerPeer_signal_peer_disconnected:

- **peer_disconnected** **(** :ref:`int<class_int>` id **)**

Emitido por el servidor cuando un cliente se desconecta.

----

.. _class_NetworkedMultiplayerPeer_signal_server_disconnected:

- **server_disconnected** **(** **)**

Emitido por los clientes cuando el servidor se desconecta.

Enumeraciones
--------------------------

.. _enum_NetworkedMultiplayerPeer_TransferMode:

.. _class_NetworkedMultiplayerPeer_constant_TRANSFER_MODE_UNRELIABLE:

.. _class_NetworkedMultiplayerPeer_constant_TRANSFER_MODE_UNRELIABLE_ORDERED:

.. _class_NetworkedMultiplayerPeer_constant_TRANSFER_MODE_RELIABLE:

enum **TransferMode**:

- **TRANSFER_MODE_UNRELIABLE** = **0** --- No se reconocen los paquetes, no se hacen intentos de reenvío de los paquetes perdidos. Los paquetes pueden llegar en cualquier orden. Potencialmente más rápido que :ref:`TRANSFER_MODE_UNRELIABLE_ORDERED<class_NetworkedMultiplayerPeer_constant_TRANSFER_MODE_UNRELIABLE_ORDERED>`. Utilícela para datos no críticos, y siempre considere si el orden importa.

- **TRANSFER_MODE_UNRELIABLE_ORDERED** = **1** --- No se reconocen los paquetes, no se hacen intentos de reenvío de los paquetes perdidos. Los paquetes se reciben en el orden en que fueron enviados. Potencialmente más rápido que :ref:`TRANSFER_MODE_RELIABLE<class_NetworkedMultiplayerPeer_constant_TRANSFER_MODE_RELIABLE>`. Se utiliza para datos no críticos o datos que estarían desactualizados si se recibieran tarde debido a un intento de reenvío de todas formas, por ejemplo, datos de movimiento y de posición.

- **TRANSFER_MODE_RELIABLE** = **2** --- Los paquetes deben ser recibidos y se debe intentar reenviarlos hasta que se acuse recibo de los mismos. Los paquetes deben ser recibidos en el orden en que fueron enviados. Es el modo de transferencia más fiable, pero potencialmente el más lento debido a la sobrecarga. Se utiliza para los datos críticos que deben transmitirse y llegar en orden, por ejemplo, una capacidad que se está activando o un mensaje de chat. Considere cuidadosamente si la información es realmente crítica, y utilícela con moderación.

----

.. _enum_NetworkedMultiplayerPeer_ConnectionStatus:

.. _class_NetworkedMultiplayerPeer_constant_CONNECTION_DISCONNECTED:

.. _class_NetworkedMultiplayerPeer_constant_CONNECTION_CONNECTING:

.. _class_NetworkedMultiplayerPeer_constant_CONNECTION_CONNECTED:

enum **ConnectionStatus**:

- **CONNECTION_DISCONNECTED** = **0** --- La conexión en curso se ha desconectado.

- **CONNECTION_CONNECTING** = **1** --- Un intento de conexión está en curso.

- **CONNECTION_CONNECTED** = **2** --- El intento de conexión tuvo éxito.

Constantes
--------------------

.. _class_NetworkedMultiplayerPeer_constant_TARGET_PEER_BROADCAST:

.. _class_NetworkedMultiplayerPeer_constant_TARGET_PEER_SERVER:

- **TARGET_PEER_BROADCAST** = **0** --- Los paquetes se envían al servidor y luego se redistribuyen a otros pares.

- **TARGET_PEER_SERVER** = **1** --- Los paquetes se envían sólo al servidor.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_NetworkedMultiplayerPeer_property_refuse_new_connections:

- :ref:`bool<class_bool>` **refuse_new_connections**

+-----------+-----------------------------------+
| *Default* | ``true``                          |
+-----------+-----------------------------------+
| *Setter*  | set_refuse_new_connections(value) |
+-----------+-----------------------------------+
| *Getter*  | is_refusing_new_connections()     |
+-----------+-----------------------------------+

Si ``true``, este ``NetworkedMultiplayerPeer`` rechaza las nuevas conexiones.

----

.. _class_NetworkedMultiplayerPeer_property_transfer_mode:

- :ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>` **transfer_mode**

+-----------+--------------------------+
| *Default* | ``0``                    |
+-----------+--------------------------+
| *Setter*  | set_transfer_mode(value) |
+-----------+--------------------------+
| *Getter*  | get_transfer_mode()      |
+-----------+--------------------------+

La manera de enviar paquetes al ``target_peer``. Véase :ref:`TransferMode<enum_NetworkedMultiplayerPeer_TransferMode>`.

Descripciones de Métodos
------------------------------------------------

.. _class_NetworkedMultiplayerPeer_method_get_connection_status:

- :ref:`ConnectionStatus<enum_NetworkedMultiplayerPeer_ConnectionStatus>` **get_connection_status** **(** **)** |const|

Devuelve el estado actual de la conexión. Ver :ref:`ConnectionStatus<enum_NetworkedMultiplayerPeer_ConnectionStatus>`.

----

.. _class_NetworkedMultiplayerPeer_method_get_packet_peer:

- :ref:`int<class_int>` **get_packet_peer** **(** **)** |const|

Devuelve el ID del ``NetworkedMultiplayerPeer`` que envió el paquete más reciente.

----

.. _class_NetworkedMultiplayerPeer_method_get_unique_id:

- :ref:`int<class_int>` **get_unique_id** **(** **)** |const|

Devuelve el ID de este ``NetworkedMultiplayerPeer``.

----

.. _class_NetworkedMultiplayerPeer_method_poll:

- void **poll** **(** **)**

Espera hasta 1 segundo para recibir un nuevo evento de red.

----

.. _class_NetworkedMultiplayerPeer_method_set_target_peer:

- void **set_target_peer** **(** :ref:`int<class_int>` id **)**

Establece el par al que se enviarán los paquetes.

El ``id`` puede ser uno de: :ref:`TARGET_PEER_BROADCAST<class_NetworkedMultiplayerPeer_constant_TARGET_PEER_BROADCAST>` para enviar a todos los pares conectados, :ref:`TARGET_PEER_SERVER<class_NetworkedMultiplayerPeer_constant_TARGET_PEER_SERVER>` para enviar al par que actúa como servidor, un ID de par válido para enviar a ese par específico, un ID de par negativo para enviar a todos los pares excepto a ese. Por defecto, el par objetivo es :ref:`TARGET_PEER_BROADCAST<class_NetworkedMultiplayerPeer_constant_TARGET_PEER_BROADCAST>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
