:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the AudioEffectDistortion.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_AudioEffectDistortion:

AudioEffectDistortion
=====================

**Inherits:** :ref:`AudioEffect<class_AudioEffect>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Adds a distortion audio effect to an Audio bus.

Modify the sound to make it distorted.

Descripción
----------------------

Different types are available: clip, tan, lo-fi (bit crushing), overdrive, or waveshape.

By distorting the waveform the frequency content change, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently.

Tutoriales
--------------------

- :doc:`Audio buses <../tutorials/audio/audio_buses>`

Propiedades
----------------------

+----------------------------------------------+--------------------------------------------------------------------+-------------+
| :ref:`float<class_float>`                    | :ref:`drive<class_AudioEffectDistortion_property_drive>`           | ``0.0``     |
+----------------------------------------------+--------------------------------------------------------------------+-------------+
| :ref:`float<class_float>`                    | :ref:`keep_hf_hz<class_AudioEffectDistortion_property_keep_hf_hz>` | ``16000.0`` |
+----------------------------------------------+--------------------------------------------------------------------+-------------+
| :ref:`Mode<enum_AudioEffectDistortion_Mode>` | :ref:`mode<class_AudioEffectDistortion_property_mode>`             | ``0``       |
+----------------------------------------------+--------------------------------------------------------------------+-------------+
| :ref:`float<class_float>`                    | :ref:`post_gain<class_AudioEffectDistortion_property_post_gain>`   | ``0.0``     |
+----------------------------------------------+--------------------------------------------------------------------+-------------+
| :ref:`float<class_float>`                    | :ref:`pre_gain<class_AudioEffectDistortion_property_pre_gain>`     | ``0.0``     |
+----------------------------------------------+--------------------------------------------------------------------+-------------+

Enumeraciones
--------------------------

.. _enum_AudioEffectDistortion_Mode:

.. _class_AudioEffectDistortion_constant_MODE_CLIP:

.. _class_AudioEffectDistortion_constant_MODE_ATAN:

.. _class_AudioEffectDistortion_constant_MODE_LOFI:

.. _class_AudioEffectDistortion_constant_MODE_OVERDRIVE:

.. _class_AudioEffectDistortion_constant_MODE_WAVESHAPE:

enum **Mode**:

- **MODE_CLIP** = **0** --- Efecto de distorsión digital que corta los picos en la parte superior e inferior de la forma de onda.

- **MODE_ATAN** = **1**

- **MODE_LOFI** = **2** --- Efecto de distorsión digital de baja resolución. Puedes usarlo para emular el sonido de los primeros dispositivos de audio digital.

- **MODE_OVERDRIVE** = **3** --- Emula la distorsión cálida producida por un transistor de efecto de campo, que se utiliza comúnmente en los amplificadores de instrumentos musicales de estado sólido.

- **MODE_WAVESHAPE** = **4** --- Las distorsiones Waveshaper son usadas principalmente por músicos electrónicos para lograr un sonido extra-abrasivo.

Descripciones de Propiedades
--------------------------------------------------------

.. _class_AudioEffectDistortion_property_drive:

- :ref:`float<class_float>` **drive**

+-----------+------------------+
| *Default* | ``0.0``          |
+-----------+------------------+
| *Setter*  | set_drive(value) |
+-----------+------------------+
| *Getter*  | get_drive()      |
+-----------+------------------+

Poder de distorsión. El valor puede variar entre 0 y 1.

----

.. _class_AudioEffectDistortion_property_keep_hf_hz:

- :ref:`float<class_float>` **keep_hf_hz**

+-----------+-----------------------+
| *Default* | ``16000.0``           |
+-----------+-----------------------+
| *Setter*  | set_keep_hf_hz(value) |
+-----------+-----------------------+
| *Getter*  | get_keep_hf_hz()      |
+-----------+-----------------------+

Filtro de paso alto, en Hz. Las frecuencias superiores a este valor no se verán afectadas por la distorsión. El valor puede variar entre 1 y 20.000.Filtro de paso alto, en Hz. Las frecuencias superiores a este valor no se verán afectadas por la distorsión. El valor puede variar entre 1 y 20.000.

----

.. _class_AudioEffectDistortion_property_mode:

- :ref:`Mode<enum_AudioEffectDistortion_Mode>` **mode**

+-----------+-----------------+
| *Default* | ``0``           |
+-----------+-----------------+
| *Setter*  | set_mode(value) |
+-----------+-----------------+
| *Getter*  | get_mode()      |
+-----------+-----------------+

Tipo de distorsión.

----

.. _class_AudioEffectDistortion_property_post_gain:

- :ref:`float<class_float>` **post_gain**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_post_gain(value) |
+-----------+----------------------+
| *Getter*  | get_post_gain()      |
+-----------+----------------------+

Aumenta o disminuye el volumen después del efecto. El valor puede variar entre -80 y 24.

----

.. _class_AudioEffectDistortion_property_pre_gain:

- :ref:`float<class_float>` **pre_gain**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_pre_gain(value) |
+-----------+---------------------+
| *Getter*  | get_pre_gain()      |
+-----------+---------------------+

Aumenta o disminuye el volumen antes del efecto. El valor puede variar entre -60 y 60.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
