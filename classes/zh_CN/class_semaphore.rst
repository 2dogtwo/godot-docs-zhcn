:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Semaphore.xml.

.. _class_Semaphore:

Semaphore
=========

**Inherits:** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

同步机制，用于控制对 :ref:`Thread<class_Thread>` 之间共享资源的访问。

.. rst-class:: classref-introduction-group

Description
-----------

同步机制，用于控制对 :ref:`Thread<class_Thread>` 之间共享资源的访问。创建时初始化为零。二元版本见 :ref:`Mutex<class_Mutex>`\ 。

\ **警告：**\ 信号量必须谨慎使用，防止死锁。

\ **警告：**\ 为了确保操作系统能够执行正确的清理（避免崩溃和思索），必须满足以下条件：

- **Semaphore** 的引用计数变为零，导致销毁时，没有线程在等待该信号量。

- :ref:`Thread<class_Thread>` 的引用计数变为零，导致销毁时，没有在等待任何信号量。

.. rst-class:: classref-introduction-group

Tutorials
---------

- :doc:`使用多线程 <../tutorials/performance/using_multiple_threads>`

- :doc:`线程安全的 API <../tutorials/performance/thread_safe_apis>`

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-------------------------+--------------------------------------------------------------+
   | void                    | :ref:`post<class_Semaphore_method_post>` **(** **)**         |
   +-------------------------+--------------------------------------------------------------+
   | :ref:`bool<class_bool>` | :ref:`try_wait<class_Semaphore_method_try_wait>` **(** **)** |
   +-------------------------+--------------------------------------------------------------+
   | void                    | :ref:`wait<class_Semaphore_method_wait>` **(** **)**         |
   +-------------------------+--------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_Semaphore_method_post:

.. rst-class:: classref-method

void **post** **(** **)**

降低 **Semaphore**\ ，额外允许一个线程进入。

.. rst-class:: classref-item-separator

----

.. _class_Semaphore_method_try_wait:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **try_wait** **(** **)**

与 :ref:`wait<class_Semaphore_method_wait>` 类似，但不会阻塞，所以如果值为零，则会立即失败并返回 ``false``\ 。如果非零，则返回 ``true`` 以报告成功。

.. rst-class:: classref-item-separator

----

.. _class_Semaphore_method_wait:

.. rst-class:: classref-method

void **wait** **(** **)**

等待该 **Semaphore**\ ，如果它的值为零，则阻塞到变为非零为止。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
