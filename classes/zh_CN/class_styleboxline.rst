:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/StyleBoxLine.xml.

.. _class_StyleBoxLine:

StyleBoxLine
============

**Inherits:** :ref:`StyleBox<class_StyleBox>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

显示一条线的 :ref:`StyleBox<class_StyleBox>`\ ，可以给定颜色和粗细。

.. rst-class:: classref-introduction-group

Description
-----------

显示一条线的 :ref:`StyleBox<class_StyleBox>`\ ，可以给定颜色和粗细。可以是横线也可以是竖线。可用作分隔符。

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +---------------------------+-----------------------------------------------------------+-----------------------+
   | :ref:`Color<class_Color>` | :ref:`color<class_StyleBoxLine_property_color>`           | ``Color(0, 0, 0, 1)`` |
   +---------------------------+-----------------------------------------------------------+-----------------------+
   | :ref:`float<class_float>` | :ref:`grow_begin<class_StyleBoxLine_property_grow_begin>` | ``1.0``               |
   +---------------------------+-----------------------------------------------------------+-----------------------+
   | :ref:`float<class_float>` | :ref:`grow_end<class_StyleBoxLine_property_grow_end>`     | ``1.0``               |
   +---------------------------+-----------------------------------------------------------+-----------------------+
   | :ref:`int<class_int>`     | :ref:`thickness<class_StyleBoxLine_property_thickness>`   | ``1``                 |
   +---------------------------+-----------------------------------------------------------+-----------------------+
   | :ref:`bool<class_bool>`   | :ref:`vertical<class_StyleBoxLine_property_vertical>`     | ``false``             |
   +---------------------------+-----------------------------------------------------------+-----------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_StyleBoxLine_property_color:

.. rst-class:: classref-property

:ref:`Color<class_Color>` **color** = ``Color(0, 0, 0, 1)``

.. rst-class:: classref-property-setget

- void **set_color** **(** :ref:`Color<class_Color>` value **)**
- :ref:`Color<class_Color>` **get_color** **(** **)**

线的颜色。

.. rst-class:: classref-item-separator

----

.. _class_StyleBoxLine_property_grow_begin:

.. rst-class:: classref-property

:ref:`float<class_float>` **grow_begin** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_grow_begin** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_grow_begin** **(** **)**

线将在 **StyleBoxLine** 的边界之前延伸的像素数。如果设置为负值，则该线将从 **StyleBoxLine** 的边界内开始。

.. rst-class:: classref-item-separator

----

.. _class_StyleBoxLine_property_grow_end:

.. rst-class:: classref-property

:ref:`float<class_float>` **grow_end** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_grow_end** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_grow_end** **(** **)**

线将超出 **StyleBoxLine** 边界的像素数。如果设置为负值，则该线将在 **StyleBoxLine** 的边界内结束。

.. rst-class:: classref-item-separator

----

.. _class_StyleBoxLine_property_thickness:

.. rst-class:: classref-property

:ref:`int<class_int>` **thickness** = ``1``

.. rst-class:: classref-property-setget

- void **set_thickness** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_thickness** **(** **)**

线条的粗细（以像素为单位）。

.. rst-class:: classref-item-separator

----

.. _class_StyleBoxLine_property_vertical:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **vertical** = ``false``

.. rst-class:: classref-property-setget

- void **set_vertical** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_vertical** **(** **)**

如果为 ``true``\ ，则该线将是垂直的。如果 ``false``\ ，该线将是水平的。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
