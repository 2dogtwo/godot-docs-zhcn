:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/PackedDataContainer.xml.

.. _class_PackedDataContainer:

PackedDataContainer
===================

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

将 :ref:`Array<class_Array>` 或 :ref:`Dictionary<class_Dictionary>` 进行高效打包和序列化。

.. rst-class:: classref-introduction-group

Description
-----------

**PackedDataContainer** 可以高效地保存未指定类型的容器中的数据。数据会以原始字节的形式打包，能够保存到文件中。只有 :ref:`Array<class_Array>` 和 :ref:`Dictionary<class_Dictionary>` 能够这样存储。

你可以通过遍历容器来获取数据，效果和遍历被打包的数据一样。如果打包容器为 :ref:`Dictionary<class_Dictionary>`\ ，则获取的是键名（仅 :ref:`String<class_String>`/:ref:`StringName<class_StringName>`\ ）。

::

    var data = { "key": "value", "another_key": 123, "lock": Vector2() }
    var packed = PackedDataContainer.new()
    packed.pack(data)
    ResourceSaver.save(packed, "packed_data.res")

::

    var container = load("packed_data.res")
    for key in container:
        prints(key, container[key])
    
    # 输出：
    # key value
    # lock (0, 0)
    # another_key 123

内嵌容器会递归打包。遍历时返回的是 :ref:`PackedDataContainerRef<class_PackedDataContainerRef>`\ 。

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +---------------------------------------+----------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>` | :ref:`pack<class_PackedDataContainer_method_pack>` **(** :ref:`Variant<class_Variant>` value **)** |
   +---------------------------------------+----------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                 | :ref:`size<class_PackedDataContainer_method_size>` **(** **)** |const|                             |
   +---------------------------------------+----------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_PackedDataContainer_method_pack:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **pack** **(** :ref:`Variant<class_Variant>` value **)**

将给定的容器打包为二进制表示。\ ``value`` 必须为 :ref:`Array<class_Array>` 或 :ref:`Dictionary<class_Dictionary>`\ ，其他类型会导致无效数据错误。

\ **注意：**\ 后续再次调用该方法会覆盖已有数据。

.. rst-class:: classref-item-separator

----

.. _class_PackedDataContainer_method_size:

.. rst-class:: classref-method

:ref:`int<class_int>` **size** **(** **)** |const|

返回打包后容器的大小（见 :ref:`Array.size<class_Array_method_size>` 和 :ref:`Dictionary.size<class_Dictionary_method_size>`\ ）。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
