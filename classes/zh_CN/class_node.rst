:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Node.xml.

.. _class_Node:

Node
====

**Inherits:** :ref:`Object<class_Object>`

**Inherited By:** :ref:`AnimationPlayer<class_AnimationPlayer>`, :ref:`AnimationTree<class_AnimationTree>`, :ref:`AudioStreamPlayer<class_AudioStreamPlayer>`, :ref:`CanvasItem<class_CanvasItem>`, :ref:`CanvasLayer<class_CanvasLayer>`, :ref:`EditorFileSystem<class_EditorFileSystem>`, :ref:`EditorPlugin<class_EditorPlugin>`, :ref:`EditorResourcePreview<class_EditorResourcePreview>`, :ref:`HTTPRequest<class_HTTPRequest>`, :ref:`InstancePlaceholder<class_InstancePlaceholder>`, :ref:`MissingNode<class_MissingNode>`, :ref:`MultiplayerSpawner<class_MultiplayerSpawner>`, :ref:`MultiplayerSynchronizer<class_MultiplayerSynchronizer>`, :ref:`NavigationAgent2D<class_NavigationAgent2D>`, :ref:`NavigationAgent3D<class_NavigationAgent3D>`, :ref:`Node3D<class_Node3D>`, :ref:`ResourcePreloader<class_ResourcePreloader>`, :ref:`ShaderGlobalsOverride<class_ShaderGlobalsOverride>`, :ref:`SkeletonIK3D<class_SkeletonIK3D>`, :ref:`Timer<class_Timer>`, :ref:`Viewport<class_Viewport>`, :ref:`WorldEnvironment<class_WorldEnvironment>`

所有场景对象的基类。

.. rst-class:: classref-introduction-group

Description
-----------

节点是 Godot 的构建模块。它们可以被指定为另一个节点的子节点，从而形成树状排列。一个给定的节点可以包含任意数量的节点作为子节点，要求所有的兄弟节点（即该节点的直接子节点）的名字唯一。

节点树被称为\ *场景*\ 。场景可以被保存到磁盘上，然后被实例化到其他场景中。这使得 Godot 项目的架构和数据模型具有非常高的灵活性。

\ **场景树：**\ :ref:`SceneTree<class_SceneTree>` 包含活动的节点树。当一个节点被添加到场景树中时，它将收到 :ref:`NOTIFICATION_ENTER_TREE<class_Node_constant_NOTIFICATION_ENTER_TREE>` 通知，并触发其 :ref:`_enter_tree<class_Node_method__enter_tree>` 回调。子节点总是在其父节点\ *之后*\ 被添加，即父节点的 :ref:`_enter_tree<class_Node_method__enter_tree>` 回调将在其子节点的之前被触发。

一旦所有的节点被添加到场景树中，它们就会收到 :ref:`NOTIFICATION_READY<class_Node_constant_NOTIFICATION_READY>` 通知，其各自的 :ref:`_ready<class_Node_method__ready>` 回调被触发。对于一组节点，\ :ref:`_ready<class_Node_method__ready>` 回调是按相反的顺序调用的，从子节点开始，向上移动到父节点。

这意味着，当把一个节点添加到场景树中时，将使用下面的顺序进行回调：父节点的 :ref:`_enter_tree<class_Node_method__enter_tree>`\ 、子节点的 :ref:`_enter_tree<class_Node_method__enter_tree>`\ 、子节点的 :ref:`_ready<class_Node_method__ready>`\ ，最后是父节点的 :ref:`_ready<class_Node_method__ready>`\ （对整个场景树进行递归）。

\ **处理：**\ 节点可以覆盖“处理”状态，以便它们在每一帧上都收到回调，要求它们进行处理（做一些事情）。普通处理（回调 :ref:`_process<class_Node_method__process>`\ ，可以使用 :ref:`set_process<class_Node_method_set_process>` 开关）会尽可能快地发生，并且取决于帧率，所以处理时间 *delta*\ （单位为秒）会作为参数传入。物理处理（回调 :ref:`_physics_process<class_Node_method__physics_process>`\ ，可以使用 :ref:`set_physics_process<class_Node_method_set_physics_process>` 开关）每秒发生固定次数（默认为 60），对物理引擎相关的代码很有用。

节点也可以处理输入事件。存在 :ref:`_input<class_Node_method__input>` 函数时，程序每收到一次输入都会去调用它。在许多情况下，这么做是大材小用了（除非是用于简单的项目），用 :ref:`_unhandled_input<class_Node_method__unhandled_input>` 函数可能更合适；当输入事件没有被其他节点（通常是 GUI :ref:`Control<class_Control>` 节点）处理时，才会调用这个函数，可以确保节点只接收到它该收到的事件。

为了记录场景的层次结构（尤其是在将场景实例化到其他场景时）可以用 :ref:`owner<class_Node_property_owner>` 属性为节点设置一个“所有者”。它记录的是谁实例化了什么。这在编写编辑器和工具时非常有用。

最后，当一个节点被 :ref:`Object.free<class_Object_method_free>` 或 :ref:`queue_free<class_Node_method_queue_free>` 释放时，它也将释放它的所有子节点。

\ **分组：**\ 节点可以被添加到很多的组中，以方便管理，你可以根据自己游戏的需要来创建类似“敌人”或“收集品”这样的组。见 :ref:`add_to_group<class_Node_method_add_to_group>`\ 、\ :ref:`is_in_group<class_Node_method_is_in_group>` 和 :ref:`remove_from_group<class_Node_method_remove_from_group>`\ 。加入组后，你可以检索这些组中的所有节点，对它们进行迭代，甚至通过 :ref:`SceneTree<class_SceneTree>` 中的方法调用组内方法。

\ **节点的网络编程：**\ 在连接到服务器（或制作服务器，见 :ref:`ENetMultiplayerPeer<class_ENetMultiplayerPeer>`\ ）之后，可以使用内置的 RPC（远程过程调用）系统在网络上进行通信。在调用 :ref:`rpc<class_Node_method_rpc>` 时传入方法名，将在本地和所有已连接的对等体中调用对应的方法（对等体=客户端和接受连接的服务器）。为了识别哪个节点收到 RPC 调用，Godot 将使用它的 :ref:`NodePath<class_NodePath>`\ （请确保所有对等体上的节点名称相同）。另外，请参阅高级网络教程和相应的演示。

\ **注意：**\ ``script`` 属性是 :ref:`Object<class_Object>` 类的一部分，不属于 **Node**\ 。这个属性暴露的方式和其他属性不同，但提供了 setter 和 getter（\ ``set_script()`` 和 ``get_script()``\ ）。

.. rst-class:: classref-introduction-group

Tutorials
---------

- :doc:`节点与场景 <../getting_started/step_by_step/nodes_and_scenes>`

- `所有演示 <https://github.com/godotengine/godot-demo-projects/>`__

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`String<class_String>`                                                 | :ref:`editor_description<class_Node_property_editor_description>`                 | ``""``    |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`MultiplayerAPI<class_MultiplayerAPI>`                                 | :ref:`multiplayer<class_Node_property_multiplayer>`                               |           |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`StringName<class_StringName>`                                         | :ref:`name<class_Node_property_name>`                                             |           |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`Node<class_Node>`                                                     | :ref:`owner<class_Node_property_owner>`                                           |           |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`ProcessMode<enum_Node_ProcessMode>`                                   | :ref:`process_mode<class_Node_property_process_mode>`                             | ``0``     |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`int<class_int>`                                                       | :ref:`process_physics_priority<class_Node_property_process_physics_priority>`     | ``0``     |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`int<class_int>`                                                       | :ref:`process_priority<class_Node_property_process_priority>`                     | ``0``     |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`ProcessThreadGroup<enum_Node_ProcessThreadGroup>`                     | :ref:`process_thread_group<class_Node_property_process_thread_group>`             | ``0``     |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`int<class_int>`                                                       | :ref:`process_thread_group_order<class_Node_property_process_thread_group_order>` |           |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | |bitfield|\<:ref:`ProcessThreadMessages<enum_Node_ProcessThreadMessages>`\> | :ref:`process_thread_messages<class_Node_property_process_thread_messages>`       |           |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`String<class_String>`                                                 | :ref:`scene_file_path<class_Node_property_scene_file_path>`                       |           |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`                                                     | :ref:`unique_name_in_owner<class_Node_property_unique_name_in_owner>`             | ``false`` |
   +-----------------------------------------------------------------------------+-----------------------------------------------------------------------------------+-----------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`_enter_tree<class_Node_method__enter_tree>` **(** **)** |virtual|                                                                                                                                                        |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`_exit_tree<class_Node_method__exit_tree>` **(** **)** |virtual|                                                                                                                                                          |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`_get_configuration_warnings<class_Node_method__get_configuration_warnings>` **(** **)** |virtual| |const|                                                                                                                |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`_input<class_Node_method__input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                                                                        |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`_physics_process<class_Node_method__physics_process>` **(** :ref:`float<class_float>` delta **)** |virtual|                                                                                                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`_process<class_Node_method__process>` **(** :ref:`float<class_float>` delta **)** |virtual|                                                                                                                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`_ready<class_Node_method__ready>` **(** **)** |virtual|                                                                                                                                                                  |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`_shortcut_input<class_Node_method__shortcut_input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                                                      |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`_unhandled_input<class_Node_method__unhandled_input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|                                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`add_child<class_Node_method_add_child>` **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` force_readable_name=false, :ref:`InternalMode<enum_Node_InternalMode>` internal=0 **)**                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`add_sibling<class_Node_method_add_sibling>` **(** :ref:`Node<class_Node>` sibling, :ref:`bool<class_bool>` force_readable_name=false **)**                                                                               |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`add_to_group<class_Node_method_add_to_group>` **(** :ref:`StringName<class_StringName>` group, :ref:`bool<class_bool>` persistent=false **)**                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Variant<class_Variant>`                     | :ref:`call_deferred_thread_group<class_Node_method_call_deferred_thread_group>` **(** :ref:`StringName<class_StringName>` method, ... **)** |vararg|                                                                           |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Variant<class_Variant>`                     | :ref:`call_thread_safe<class_Node_method_call_thread_safe>` **(** :ref:`StringName<class_StringName>` method, ... **)** |vararg|                                                                                               |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`can_process<class_Node_method_can_process>` **(** **)** |const|                                                                                                                                                          |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Tween<class_Tween>`                         | :ref:`create_tween<class_Node_method_create_tween>` **(** **)**                                                                                                                                                                |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node<class_Node>`                           | :ref:`duplicate<class_Node_method_duplicate>` **(** :ref:`int<class_int>` flags=15 **)** |const|                                                                                                                               |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node<class_Node>`                           | :ref:`find_child<class_Node_method_find_child>` **(** :ref:`String<class_String>` pattern, :ref:`bool<class_bool>` recursive=true, :ref:`bool<class_bool>` owned=true **)** |const|                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node[]<class_Node>`                         | :ref:`find_children<class_Node_method_find_children>` **(** :ref:`String<class_String>` pattern, :ref:`String<class_String>` type="", :ref:`bool<class_bool>` recursive=true, :ref:`bool<class_bool>` owned=true **)** |const| |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node<class_Node>`                           | :ref:`find_parent<class_Node_method_find_parent>` **(** :ref:`String<class_String>` pattern **)** |const|                                                                                                                      |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node<class_Node>`                           | :ref:`get_child<class_Node_method_get_child>` **(** :ref:`int<class_int>` idx, :ref:`bool<class_bool>` include_internal=false **)** |const|                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                             | :ref:`get_child_count<class_Node_method_get_child_count>` **(** :ref:`bool<class_bool>` include_internal=false **)** |const|                                                                                                   |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node[]<class_Node>`                         | :ref:`get_children<class_Node_method_get_children>` **(** :ref:`bool<class_bool>` include_internal=false **)** |const|                                                                                                         |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`StringName[]<class_StringName>`             | :ref:`get_groups<class_Node_method_get_groups>` **(** **)** |const|                                                                                                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                             | :ref:`get_index<class_Node_method_get_index>` **(** :ref:`bool<class_bool>` include_internal=false **)** |const|                                                                                                               |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Window<class_Window>`                       | :ref:`get_last_exclusive_window<class_Node_method_get_last_exclusive_window>` **(** **)** |const|                                                                                                                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                             | :ref:`get_multiplayer_authority<class_Node_method_get_multiplayer_authority>` **(** **)** |const|                                                                                                                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node<class_Node>`                           | :ref:`get_node<class_Node_method_get_node>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                                                           |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Array<class_Array>`                         | :ref:`get_node_and_resource<class_Node_method_get_node_and_resource>` **(** :ref:`NodePath<class_NodePath>` path **)**                                                                                                         |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node<class_Node>`                           | :ref:`get_node_or_null<class_Node_method_get_node_or_null>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                                           |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node<class_Node>`                           | :ref:`get_parent<class_Node_method_get_parent>` **(** **)** |const|                                                                                                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NodePath<class_NodePath>`                   | :ref:`get_path<class_Node_method_get_path>` **(** **)** |const|                                                                                                                                                                |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NodePath<class_NodePath>`                   | :ref:`get_path_to<class_Node_method_get_path_to>` **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` use_unique_path=false **)** |const|                                                                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`                         | :ref:`get_physics_process_delta_time<class_Node_method_get_physics_process_delta_time>` **(** **)** |const|                                                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`                         | :ref:`get_process_delta_time<class_Node_method_get_process_delta_time>` **(** **)** |const|                                                                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`get_scene_instance_load_placeholder<class_Node_method_get_scene_instance_load_placeholder>` **(** **)** |const|                                                                                                          |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`SceneTree<class_SceneTree>`                 | :ref:`get_tree<class_Node_method_get_tree>` **(** **)** |const|                                                                                                                                                                |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Viewport<class_Viewport>`                   | :ref:`get_viewport<class_Node_method_get_viewport>` **(** **)** |const|                                                                                                                                                        |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Window<class_Window>`                       | :ref:`get_window<class_Node_method_get_window>` **(** **)** |const|                                                                                                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`has_node<class_Node_method_has_node>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                                                           |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`has_node_and_resource<class_Node_method_has_node_and_resource>` **(** :ref:`NodePath<class_NodePath>` path **)** |const|                                                                                                 |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_ancestor_of<class_Node_method_is_ancestor_of>` **(** :ref:`Node<class_Node>` node **)** |const|                                                                                                                       |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_displayed_folded<class_Node_method_is_displayed_folded>` **(** **)** |const|                                                                                                                                          |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_editable_instance<class_Node_method_is_editable_instance>` **(** :ref:`Node<class_Node>` node **)** |const|                                                                                                           |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_greater_than<class_Node_method_is_greater_than>` **(** :ref:`Node<class_Node>` node **)** |const|                                                                                                                     |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_in_group<class_Node_method_is_in_group>` **(** :ref:`StringName<class_StringName>` group **)** |const|                                                                                                                |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_inside_tree<class_Node_method_is_inside_tree>` **(** **)** |const|                                                                                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_multiplayer_authority<class_Node_method_is_multiplayer_authority>` **(** **)** |const|                                                                                                                                |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_node_ready<class_Node_method_is_node_ready>` **(** **)** |const|                                                                                                                                                      |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_physics_processing<class_Node_method_is_physics_processing>` **(** **)** |const|                                                                                                                                      |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_physics_processing_internal<class_Node_method_is_physics_processing_internal>` **(** **)** |const|                                                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_processing<class_Node_method_is_processing>` **(** **)** |const|                                                                                                                                                      |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_processing_input<class_Node_method_is_processing_input>` **(** **)** |const|                                                                                                                                          |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_processing_internal<class_Node_method_is_processing_internal>` **(** **)** |const|                                                                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_processing_shortcut_input<class_Node_method_is_processing_shortcut_input>` **(** **)** |const|                                                                                                                        |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_processing_unhandled_input<class_Node_method_is_processing_unhandled_input>` **(** **)** |const|                                                                                                                      |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_processing_unhandled_key_input<class_Node_method_is_processing_unhandled_key_input>` **(** **)** |const|                                                                                                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`move_child<class_Node_method_move_child>` **(** :ref:`Node<class_Node>` child_node, :ref:`int<class_int>` to_index **)**                                                                                                 |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`notify_deferred_thread_group<class_Node_method_notify_deferred_thread_group>` **(** :ref:`int<class_int>` what **)**                                                                                                     |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`notify_thread_safe<class_Node_method_notify_thread_safe>` **(** :ref:`int<class_int>` what **)**                                                                                                                         |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`print_orphan_nodes<class_Node_method_print_orphan_nodes>` **(** **)** |static|                                                                                                                                           |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`print_tree<class_Node_method_print_tree>` **(** **)**                                                                                                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`print_tree_pretty<class_Node_method_print_tree_pretty>` **(** **)**                                                                                                                                                      |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`propagate_call<class_Node_method_propagate_call>` **(** :ref:`StringName<class_StringName>` method, :ref:`Array<class_Array>` args=[], :ref:`bool<class_bool>` parent_first=false **)**                                  |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`propagate_notification<class_Node_method_propagate_notification>` **(** :ref:`int<class_int>` what **)**                                                                                                                 |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`queue_free<class_Node_method_queue_free>` **(** **)**                                                                                                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`remove_child<class_Node_method_remove_child>` **(** :ref:`Node<class_Node>` node **)**                                                                                                                                   |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`remove_from_group<class_Node_method_remove_from_group>` **(** :ref:`StringName<class_StringName>` group **)**                                                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`reparent<class_Node_method_reparent>` **(** :ref:`Node<class_Node>` new_parent, :ref:`bool<class_bool>` keep_global_transform=true **)**                                                                                 |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`replace_by<class_Node_method_replace_by>` **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` keep_groups=false **)**                                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`request_ready<class_Node_method_request_ready>` **(** **)**                                                                                                                                                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`rpc<class_Node_method_rpc>` **(** :ref:`StringName<class_StringName>` method, ... **)** |vararg|                                                                                                                         |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`rpc_config<class_Node_method_rpc_config>` **(** :ref:`StringName<class_StringName>` method, :ref:`Variant<class_Variant>` config **)**                                                                                   |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`rpc_id<class_Node_method_rpc_id>` **(** :ref:`int<class_int>` peer_id, :ref:`StringName<class_StringName>` method, ... **)** |vararg|                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_deferred_thread_group<class_Node_method_set_deferred_thread_group>` **(** :ref:`StringName<class_StringName>` property, :ref:`Variant<class_Variant>` value **)**                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_display_folded<class_Node_method_set_display_folded>` **(** :ref:`bool<class_bool>` fold **)**                                                                                                                       |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_editable_instance<class_Node_method_set_editable_instance>` **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` is_editable **)**                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_multiplayer_authority<class_Node_method_set_multiplayer_authority>` **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` recursive=true **)**                                                                     |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_physics_process<class_Node_method_set_physics_process>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                   |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_physics_process_internal<class_Node_method_set_physics_process_internal>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                 |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_process<class_Node_method_set_process>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                                   |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_process_input<class_Node_method_set_process_input>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                       |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_process_internal<class_Node_method_set_process_internal>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                 |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_process_shortcut_input<class_Node_method_set_process_shortcut_input>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                     |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_process_unhandled_input<class_Node_method_set_process_unhandled_input>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                   |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_process_unhandled_key_input<class_Node_method_set_process_unhandled_key_input>` **(** :ref:`bool<class_bool>` enable **)**                                                                                           |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_scene_instance_load_placeholder<class_Node_method_set_scene_instance_load_placeholder>` **(** :ref:`bool<class_bool>` load_placeholder **)**                                                                         |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`set_thread_safe<class_Node_method_set_thread_safe>` **(** :ref:`StringName<class_StringName>` property, :ref:`Variant<class_Variant>` value **)**                                                                        |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`update_configuration_warnings<class_Node_method_update_configuration_warnings>` **(** **)**                                                                                                                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_Node_signal_child_entered_tree:

.. rst-class:: classref-signal

**child_entered_tree** **(** :ref:`Node<class_Node>` node **)**

在子节点进入场景树时触发，可以是因为该子节点自行进入，也可以是因为本节点带着该子节点一起进入。

这个信号会在该子节点自身的 :ref:`NOTIFICATION_ENTER_TREE<class_Node_constant_NOTIFICATION_ENTER_TREE>` 和 :ref:`tree_entered<class_Node_signal_tree_entered>` *之后*\ 触发。

.. rst-class:: classref-item-separator

----

.. _class_Node_signal_child_exiting_tree:

.. rst-class:: classref-signal

**child_exiting_tree** **(** :ref:`Node<class_Node>` node **)**

当一个子节点即将退出场景树时发出，要么是因为它正在被移除或直接释放，要么是因为该节点正在退出树。

当收到这个信号时，子 ``node`` 仍然在树中并且有效。该信号在子节点自己的 :ref:`tree_exiting<class_Node_signal_tree_exiting>` 和 :ref:`NOTIFICATION_EXIT_TREE<class_Node_constant_NOTIFICATION_EXIT_TREE>` *之后*\ 发出。

.. rst-class:: classref-item-separator

----

.. _class_Node_signal_child_order_changed:

.. rst-class:: classref-signal

**child_order_changed** **(** **)**

子节点列表发生改变时发出。发生在添加、移动、移除子节点时。

.. rst-class:: classref-item-separator

----

.. _class_Node_signal_ready:

.. rst-class:: classref-signal

**ready** **(** **)**

当该节点就绪时发出。在 :ref:`_ready<class_Node_method__ready>` 回调之后发出，遵循相同的规则。

.. rst-class:: classref-item-separator

----

.. _class_Node_signal_renamed:

.. rst-class:: classref-signal

**renamed** **(** **)**

当该节点被重命名时触发。

.. rst-class:: classref-item-separator

----

.. _class_Node_signal_replacing_by:

.. rst-class:: classref-signal

**replacing_by** **(** :ref:`Node<class_Node>` node **)**

当该节点被 ``node`` 替换时触发，见 :ref:`replace_by<class_Node_method_replace_by>`\ 。

这个信号的触发时机在 ``node`` 被添加为原父节点的子节点\ *之后*\ ，但是在所有原子节点重设父节点为 ``node`` *之前*\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_signal_tree_entered:

.. rst-class:: classref-signal

**tree_entered** **(** **)**

当该节点进入树时触发。

这个信号会在相关的 :ref:`NOTIFICATION_ENTER_TREE<class_Node_constant_NOTIFICATION_ENTER_TREE>` 通知\ *之后*\ 触发。

.. rst-class:: classref-item-separator

----

.. _class_Node_signal_tree_exited:

.. rst-class:: classref-signal

**tree_exited** **(** **)**

当该节点退出树之后触发，并且不再处于活动状态。

.. rst-class:: classref-item-separator

----

.. _class_Node_signal_tree_exiting:

.. rst-class:: classref-signal

**tree_exiting** **(** **)**

当该节点仍处于活动状态但即将退出树时发出。这是反初始化的正确位置（如果愿意，也可以称之为“析构函数”）。

这个信号会在相关的 :ref:`NOTIFICATION_EXIT_TREE<class_Node_constant_NOTIFICATION_EXIT_TREE>` 通知\ *之前*\ 触发。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Enumerations
------------

.. _enum_Node_ProcessMode:

.. rst-class:: classref-enumeration

enum **ProcessMode**:

.. _class_Node_constant_PROCESS_MODE_INHERIT:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessMode<enum_Node_ProcessMode>` **PROCESS_MODE_INHERIT** = ``0``

从该节点的父节点继承处理模式。如果是根节点，则等价于 :ref:`PROCESS_MODE_PAUSABLE<class_Node_constant_PROCESS_MODE_PAUSABLE>`\ 。默认值。

.. _class_Node_constant_PROCESS_MODE_PAUSABLE:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessMode<enum_Node_ProcessMode>` **PROCESS_MODE_PAUSABLE** = ``1``

:ref:`SceneTree<class_SceneTree>` 暂停时停止处理（取消暂停时处理）。与 :ref:`PROCESS_MODE_WHEN_PAUSED<class_Node_constant_PROCESS_MODE_WHEN_PAUSED>` 相反。

.. _class_Node_constant_PROCESS_MODE_WHEN_PAUSED:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessMode<enum_Node_ProcessMode>` **PROCESS_MODE_WHEN_PAUSED** = ``2``

仅在 :ref:`SceneTree<class_SceneTree>` 暂停时处理（取消暂停时不处理）。与 :ref:`PROCESS_MODE_PAUSABLE<class_Node_constant_PROCESS_MODE_PAUSABLE>` 相反。

.. _class_Node_constant_PROCESS_MODE_ALWAYS:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessMode<enum_Node_ProcessMode>` **PROCESS_MODE_ALWAYS** = ``3``

始终处理。始终继续处理，忽略 :ref:`SceneTree<class_SceneTree>` 的 paused 属性。与 :ref:`PROCESS_MODE_DISABLED<class_Node_constant_PROCESS_MODE_DISABLED>` 相反。

.. _class_Node_constant_PROCESS_MODE_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessMode<enum_Node_ProcessMode>` **PROCESS_MODE_DISABLED** = ``4``

从不处理。完全禁用处理，忽略 :ref:`SceneTree<class_SceneTree>` 的 paused 属性。与 :ref:`PROCESS_MODE_ALWAYS<class_Node_constant_PROCESS_MODE_ALWAYS>` 相反。

.. rst-class:: classref-item-separator

----

.. _enum_Node_ProcessThreadGroup:

.. rst-class:: classref-enumeration

enum **ProcessThreadGroup**:

.. _class_Node_constant_PROCESS_THREAD_GROUP_INHERIT:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessThreadGroup<enum_Node_ProcessThreadGroup>` **PROCESS_THREAD_GROUP_INHERIT** = ``0``

如果 :ref:`process_thread_group<class_Node_property_process_thread_group>` 属性设为这个值，该节点会属于线程组不是继承的父节点（或祖父节点）。详见 :ref:`process_thread_group<class_Node_property_process_thread_group>`\ 。

.. _class_Node_constant_PROCESS_THREAD_GROUP_MAIN_THREAD:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessThreadGroup<enum_Node_ProcessThreadGroup>` **PROCESS_THREAD_GROUP_MAIN_THREAD** = ``1``

在主线程上处理该节点（以及设为继承的子节点）。详见 :ref:`process_thread_group<class_Node_property_process_thread_group>`\ 。

.. _class_Node_constant_PROCESS_THREAD_GROUP_SUB_THREAD:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessThreadGroup<enum_Node_ProcessThreadGroup>` **PROCESS_THREAD_GROUP_SUB_THREAD** = ``2``

在子线程上处理该节点（以及设为继承的子节点）。详见 :ref:`process_thread_group<class_Node_property_process_thread_group>`\ 。

.. rst-class:: classref-item-separator

----

.. _enum_Node_ProcessThreadMessages:

.. rst-class:: classref-enumeration

flags **ProcessThreadMessages**:

.. _class_Node_constant_FLAG_PROCESS_THREAD_MESSAGES:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessThreadMessages<enum_Node_ProcessThreadMessages>` **FLAG_PROCESS_THREAD_MESSAGES** = ``1``



.. _class_Node_constant_FLAG_PROCESS_THREAD_MESSAGES_PHYSICS:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessThreadMessages<enum_Node_ProcessThreadMessages>` **FLAG_PROCESS_THREAD_MESSAGES_PHYSICS** = ``2``



.. _class_Node_constant_FLAG_PROCESS_THREAD_MESSAGES_ALL:

.. rst-class:: classref-enumeration-constant

:ref:`ProcessThreadMessages<enum_Node_ProcessThreadMessages>` **FLAG_PROCESS_THREAD_MESSAGES_ALL** = ``3``



.. rst-class:: classref-item-separator

----

.. _enum_Node_DuplicateFlags:

.. rst-class:: classref-enumeration

enum **DuplicateFlags**:

.. _class_Node_constant_DUPLICATE_SIGNALS:

.. rst-class:: classref-enumeration-constant

:ref:`DuplicateFlags<enum_Node_DuplicateFlags>` **DUPLICATE_SIGNALS** = ``1``

复制该节点的信号。

.. _class_Node_constant_DUPLICATE_GROUPS:

.. rst-class:: classref-enumeration-constant

:ref:`DuplicateFlags<enum_Node_DuplicateFlags>` **DUPLICATE_GROUPS** = ``2``

复制节点的组。

.. _class_Node_constant_DUPLICATE_SCRIPTS:

.. rst-class:: classref-enumeration-constant

:ref:`DuplicateFlags<enum_Node_DuplicateFlags>` **DUPLICATE_SCRIPTS** = ``4``

复制该节点的脚本。

.. _class_Node_constant_DUPLICATE_USE_INSTANTIATION:

.. rst-class:: classref-enumeration-constant

:ref:`DuplicateFlags<enum_Node_DuplicateFlags>` **DUPLICATE_USE_INSTANTIATION** = ``8``

使用实例化进行复制。

实例与原件保持链接，因此当原件发生变化时，实例也会发生变化。

.. rst-class:: classref-item-separator

----

.. _enum_Node_InternalMode:

.. rst-class:: classref-enumeration

enum **InternalMode**:

.. _class_Node_constant_INTERNAL_MODE_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`InternalMode<enum_Node_InternalMode>` **INTERNAL_MODE_DISABLED** = ``0``

该节点不是内部节点。

.. _class_Node_constant_INTERNAL_MODE_FRONT:

.. rst-class:: classref-enumeration-constant

:ref:`InternalMode<enum_Node_InternalMode>` **INTERNAL_MODE_FRONT** = ``1``

该节点将被放置在父节点的节点列表开头，在所有非内部兄弟节点之前。

.. _class_Node_constant_INTERNAL_MODE_BACK:

.. rst-class:: classref-enumeration-constant

:ref:`InternalMode<enum_Node_InternalMode>` **INTERNAL_MODE_BACK** = ``2``

该节点将被放置在父节点的节点列表末尾，在所有非内部兄弟节点之后。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Constants
---------

.. _class_Node_constant_NOTIFICATION_ENTER_TREE:

.. rst-class:: classref-constant

**NOTIFICATION_ENTER_TREE** = ``10``

当该节点进入 :ref:`SceneTree<class_SceneTree>` 时收到的通知。

这个通知会在相关的 :ref:`tree_entered<class_Node_signal_tree_entered>` *之前*\ 发出。

.. _class_Node_constant_NOTIFICATION_EXIT_TREE:

.. rst-class:: classref-constant

**NOTIFICATION_EXIT_TREE** = ``11``

当该节点即将退出 :ref:`SceneTree<class_SceneTree>` 时收到的通知。

这个通知会在相关的 :ref:`tree_exiting<class_Node_signal_tree_exiting>` *之后*\ 发出。

.. _class_Node_constant_NOTIFICATION_MOVED_IN_PARENT:

.. rst-class:: classref-constant

**NOTIFICATION_MOVED_IN_PARENT** = ``12``

*已废弃。*\ 不会再发出这个通知。请改用 :ref:`NOTIFICATION_CHILD_ORDER_CHANGED<class_Node_constant_NOTIFICATION_CHILD_ORDER_CHANGED>`\ 。

.. _class_Node_constant_NOTIFICATION_READY:

.. rst-class:: classref-constant

**NOTIFICATION_READY** = ``13``

当该节点就绪时接收到通知。见 :ref:`_ready<class_Node_method__ready>`\ 。

.. _class_Node_constant_NOTIFICATION_PAUSED:

.. rst-class:: classref-constant

**NOTIFICATION_PAUSED** = ``14``

当该节点被暂停时接收到的通知。

.. _class_Node_constant_NOTIFICATION_UNPAUSED:

.. rst-class:: classref-constant

**NOTIFICATION_UNPAUSED** = ``15``

当该节点被取消暂停时收到的通知。

.. _class_Node_constant_NOTIFICATION_PHYSICS_PROCESS:

.. rst-class:: classref-constant

**NOTIFICATION_PHYSICS_PROCESS** = ``16``

当设置了 physics process 标志时，每一帧都会收到的通知（见 :ref:`set_physics_process<class_Node_method_set_physics_process>`\ ）。

.. _class_Node_constant_NOTIFICATION_PROCESS:

.. rst-class:: classref-constant

**NOTIFICATION_PROCESS** = ``17``

当设置了 process 标志时，每一帧都会收到的通知（见 :ref:`set_process<class_Node_method_set_process>`\ ）。

.. _class_Node_constant_NOTIFICATION_PARENTED:

.. rst-class:: classref-constant

**NOTIFICATION_PARENTED** = ``18``

当一个节点被设置为另一个节点的子节点时收到该通知。

\ **注意：**\ 这并不意味着一个节点进入了 :ref:`SceneTree<class_SceneTree>`\ 。

.. _class_Node_constant_NOTIFICATION_UNPARENTED:

.. rst-class:: classref-constant

**NOTIFICATION_UNPARENTED** = ``19``

当该节点失去父节点时收到的通知（父节点将其从子节点列表中删除）。

.. _class_Node_constant_NOTIFICATION_SCENE_INSTANTIATED:

.. rst-class:: classref-constant

**NOTIFICATION_SCENE_INSTANTIATED** = ``20``

当场景被实例化时，该场景的所有者收到的通知。

.. _class_Node_constant_NOTIFICATION_DRAG_BEGIN:

.. rst-class:: classref-constant

**NOTIFICATION_DRAG_BEGIN** = ``21``

当拖拽操作开始时收到的通知。所有节点都会收到此通知，而不仅仅是被拖动的节点。

可以通过拖动提供拖动数据的 :ref:`Control<class_Control>`\ （见 :ref:`Control._get_drag_data<class_Control_method__get_drag_data>`\ ），或使用 :ref:`Control.force_drag<class_Control_method_force_drag>` 来触发。

请使用 :ref:`Viewport.gui_get_drag_data<class_Viewport_method_gui_get_drag_data>` 获取拖动数据。

.. _class_Node_constant_NOTIFICATION_DRAG_END:

.. rst-class:: classref-constant

**NOTIFICATION_DRAG_END** = ``22``

当拖拽操作结束时收到的通知。

请使用 :ref:`Viewport.gui_is_drag_successful<class_Viewport_method_gui_is_drag_successful>` 检查拖放是否成功。

.. _class_Node_constant_NOTIFICATION_PATH_RENAMED:

.. rst-class:: classref-constant

**NOTIFICATION_PATH_RENAMED** = ``23``

当该节点或其祖级的名称被更改时收到的通知。当节点从场景树中移除，稍后被添加到另一个父节点时，\ *不会*\ 收到此通知。

.. _class_Node_constant_NOTIFICATION_CHILD_ORDER_CHANGED:

.. rst-class:: classref-constant

**NOTIFICATION_CHILD_ORDER_CHANGED** = ``24``

子节点列表发生更改时收到的通知。子节点发生添加、移动、删除时列表会发生更改。

.. _class_Node_constant_NOTIFICATION_INTERNAL_PROCESS:

.. rst-class:: classref-constant

**NOTIFICATION_INTERNAL_PROCESS** = ``25``

当设置了内部处理标志时，每一帧都会收到的通知（见 :ref:`set_process_internal<class_Node_method_set_process_internal>`\ ）。

.. _class_Node_constant_NOTIFICATION_INTERNAL_PHYSICS_PROCESS:

.. rst-class:: classref-constant

**NOTIFICATION_INTERNAL_PHYSICS_PROCESS** = ``26``

当设置了内部物理处理标志时，每一帧都会收到的通知（见 :ref:`set_physics_process_internal<class_Node_method_set_physics_process_internal>`\ ）。

.. _class_Node_constant_NOTIFICATION_POST_ENTER_TREE:

.. rst-class:: classref-constant

**NOTIFICATION_POST_ENTER_TREE** = ``27``

当该节点就绪，在收到 :ref:`NOTIFICATION_READY<class_Node_constant_NOTIFICATION_READY>` 之前收到的通知。与后者不同，该节点每次进入树时都会发送，而不是只发送一次。

.. _class_Node_constant_NOTIFICATION_DISABLED:

.. rst-class:: classref-constant

**NOTIFICATION_DISABLED** = ``28``

当该节点被禁用时收到的通知。见 :ref:`PROCESS_MODE_DISABLED<class_Node_constant_PROCESS_MODE_DISABLED>`\ 。

.. _class_Node_constant_NOTIFICATION_ENABLED:

.. rst-class:: classref-constant

**NOTIFICATION_ENABLED** = ``29``

当该节点被禁用后又再次被启用时收到的通知。见 :ref:`PROCESS_MODE_DISABLED<class_Node_constant_PROCESS_MODE_DISABLED>`\ 。

.. _class_Node_constant_NOTIFICATION_NODE_RECACHE_REQUESTED:

.. rst-class:: classref-constant

**NOTIFICATION_NODE_RECACHE_REQUESTED** = ``30``

当树中的其他节点可能已经被移除 / 替换，节点指针可能需要重新缓存时，会收到通知。

.. _class_Node_constant_NOTIFICATION_EDITOR_PRE_SAVE:

.. rst-class:: classref-constant

**NOTIFICATION_EDITOR_PRE_SAVE** = ``9001``

在编辑器中保存有节点的场景之前收到的通知。这个通知只在 Godot 编辑器中发送，不会出现在导出的项目中。

.. _class_Node_constant_NOTIFICATION_EDITOR_POST_SAVE:

.. rst-class:: classref-constant

**NOTIFICATION_EDITOR_POST_SAVE** = ``9002``

在编辑器中保存有节点的场景后立即收到通知。这个通知只在 Godot 编辑器中发送，在导出的项目中不会出现。

.. _class_Node_constant_NOTIFICATION_WM_MOUSE_ENTER:

.. rst-class:: classref-constant

**NOTIFICATION_WM_MOUSE_ENTER** = ``1002``

Notification received when the mouse enters the window.

Implemented for embedded windows and on desktop and web platforms.

.. _class_Node_constant_NOTIFICATION_WM_MOUSE_EXIT:

.. rst-class:: classref-constant

**NOTIFICATION_WM_MOUSE_EXIT** = ``1003``

Notification received when the mouse leaves the window.

Implemented for embedded windows and on desktop and web platforms.

.. _class_Node_constant_NOTIFICATION_WM_WINDOW_FOCUS_IN:

.. rst-class:: classref-constant

**NOTIFICATION_WM_WINDOW_FOCUS_IN** = ``1004``

当该节点的父 :ref:`Window<class_Window>` 获得焦点时收到的通知。可能是在同一引擎实例的两个窗口之间的焦点变化，也可能是从操作系统桌面或第三方应用程序切换到游戏的某个窗口（在这种情况下，还会发出 :ref:`NOTIFICATION_APPLICATION_FOCUS_IN<class_Node_constant_NOTIFICATION_APPLICATION_FOCUS_IN>`\ ）。

\ :ref:`Window<class_Window>` 节点会在获得焦点时收到该通知。

.. _class_Node_constant_NOTIFICATION_WM_WINDOW_FOCUS_OUT:

.. rst-class:: classref-constant

**NOTIFICATION_WM_WINDOW_FOCUS_OUT** = ``1005``

当该节点的父 :ref:`Window<class_Window>` 失去焦点时收到的通知。可能是在同一引擎实例的两个窗口之间的焦点变化，也可能是从游戏的某个窗口切换到操作系统桌面或第三方应用程序（在这种情况下，还会发出 :ref:`NOTIFICATION_APPLICATION_FOCUS_OUT<class_Node_constant_NOTIFICATION_APPLICATION_FOCUS_OUT>`\ ）。

\ :ref:`Window<class_Window>` 节点会在失去焦点时收到该通知。

.. _class_Node_constant_NOTIFICATION_WM_CLOSE_REQUEST:

.. rst-class:: classref-constant

**NOTIFICATION_WM_CLOSE_REQUEST** = ``1006``

当发出关闭请求时，从操作系统收到的通知（例如使用“关闭”按钮或按下 :kbd:`Alt + F4` 关闭窗口时）。

在桌面平台上实现。

.. _class_Node_constant_NOTIFICATION_WM_GO_BACK_REQUEST:

.. rst-class:: classref-constant

**NOTIFICATION_WM_GO_BACK_REQUEST** = ``1007``

当发出返回请求时，从操作系统收到的通知（例如在 Android 系统上按下“返回”按钮）。

仅限 Android 平台。

.. _class_Node_constant_NOTIFICATION_WM_SIZE_CHANGED:

.. rst-class:: classref-constant

**NOTIFICATION_WM_SIZE_CHANGED** = ``1008``

当窗口大小发生改变时，从操作系统收到的通知。

.. _class_Node_constant_NOTIFICATION_WM_DPI_CHANGE:

.. rst-class:: classref-constant

**NOTIFICATION_WM_DPI_CHANGE** = ``1009``

当屏幕的 DPI 发生更改时，从操作系统受到的通知。仅在 macOS 上实现。

.. _class_Node_constant_NOTIFICATION_VP_MOUSE_ENTER:

.. rst-class:: classref-constant

**NOTIFICATION_VP_MOUSE_ENTER** = ``1010``

Notification received when the mouse cursor enters the :ref:`Viewport<class_Viewport>`'s visible area, that is not occluded behind other :ref:`Control<class_Control>`\ s or :ref:`Window<class_Window>`\ s, provided its :ref:`Viewport.gui_disable_input<class_Viewport_property_gui_disable_input>` is ``false`` and regardless if it's currently focused or not.

.. _class_Node_constant_NOTIFICATION_VP_MOUSE_EXIT:

.. rst-class:: classref-constant

**NOTIFICATION_VP_MOUSE_EXIT** = ``1011``

Notification received when the mouse cursor leaves the :ref:`Viewport<class_Viewport>`'s visible area, that is not occluded behind other :ref:`Control<class_Control>`\ s or :ref:`Window<class_Window>`\ s, provided its :ref:`Viewport.gui_disable_input<class_Viewport_property_gui_disable_input>` is ``false`` and regardless if it's currently focused or not.

.. _class_Node_constant_NOTIFICATION_OS_MEMORY_WARNING:

.. rst-class:: classref-constant

**NOTIFICATION_OS_MEMORY_WARNING** = ``2009``

当应用程序超过其分配的内存时，从操作系统收到的通知。

仅限 iOS 平台。

.. _class_Node_constant_NOTIFICATION_TRANSLATION_CHANGED:

.. rst-class:: classref-constant

**NOTIFICATION_TRANSLATION_CHANGED** = ``2010``

当翻译可能发生变化时收到的通知。会在用户改变区域设置时触发。可以用来响应语言的变化，例如实时改变 UI 字符串。可配合内置的翻译支持使用，比如 :ref:`Object.tr<class_Object_method_tr>`\ 。

.. _class_Node_constant_NOTIFICATION_WM_ABOUT:

.. rst-class:: classref-constant

**NOTIFICATION_WM_ABOUT** = ``2011``

当发出“关于”信息请求时，从操作系统收到的通知。

仅限 macOS 平台。

.. _class_Node_constant_NOTIFICATION_CRASH:

.. rst-class:: classref-constant

**NOTIFICATION_CRASH** = ``2012``

当引擎即将崩溃时，从Godot的崩溃处理程序收到的通知。

如果崩溃处理程序被启用，这只会在桌面平台上实现。

.. _class_Node_constant_NOTIFICATION_OS_IME_UPDATE:

.. rst-class:: classref-constant

**NOTIFICATION_OS_IME_UPDATE** = ``2013``

当输入法引擎发生更新时，从操作系统收到的通知（例如，IME 光标位置或组成字符串的变化）。

仅限 macOS 平台。

.. _class_Node_constant_NOTIFICATION_APPLICATION_RESUMED:

.. rst-class:: classref-constant

**NOTIFICATION_APPLICATION_RESUMED** = ``2014``

当应用程序恢复时，从操作系统收到的通知。

仅限 Android 平台。

.. _class_Node_constant_NOTIFICATION_APPLICATION_PAUSED:

.. rst-class:: classref-constant

**NOTIFICATION_APPLICATION_PAUSED** = ``2015``

当应用程序暂停时，从操作系统收到的通知。

仅限 Android 平台。

.. _class_Node_constant_NOTIFICATION_APPLICATION_FOCUS_IN:

.. rst-class:: classref-constant

**NOTIFICATION_APPLICATION_FOCUS_IN** = ``2016``

当应用程序获得焦点时从操作系统收到的通知，即焦点将从操作系统桌面或第三方应用程序更改为 Godot 实例的任何一个打开窗口时。

在桌面平台上被实现。

.. _class_Node_constant_NOTIFICATION_APPLICATION_FOCUS_OUT:

.. rst-class:: classref-constant

**NOTIFICATION_APPLICATION_FOCUS_OUT** = ``2017``

当应用程序失去焦点时从操作系统收到通知，即焦点将从 Godot 实例的任何一个打开窗口，更改为操作系统桌面或第三方应用程序时。

在桌面平台上被实现。

.. _class_Node_constant_NOTIFICATION_TEXT_SERVER_CHANGED:

.. rst-class:: classref-constant

**NOTIFICATION_TEXT_SERVER_CHANGED** = ``2018``

文本服务器被更改时，收到的通知。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_Node_property_editor_description:

.. rst-class:: classref-property

:ref:`String<class_String>` **editor_description** = ``""``

.. rst-class:: classref-property-setget

- void **set_editor_description** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_editor_description** **(** **)**

为该节点添加自定义描述。该节点在编辑器的场景树中处于悬停状态时，该描述将显示在工具提示中。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_multiplayer:

.. rst-class:: classref-property

:ref:`MultiplayerAPI<class_MultiplayerAPI>` **multiplayer**

.. rst-class:: classref-property-setget

- :ref:`MultiplayerAPI<class_MultiplayerAPI>` **get_multiplayer** **(** **)**

与此节点关联的 :ref:`MultiplayerAPI<class_MultiplayerAPI>` 实例。参见 :ref:`SceneTree.get_multiplayer<class_SceneTree_method_get_multiplayer>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_name:

.. rst-class:: classref-property

:ref:`StringName<class_StringName>` **name**

.. rst-class:: classref-property-setget

- void **set_name** **(** :ref:`StringName<class_StringName>` value **)**
- :ref:`StringName<class_StringName>` **get_name** **(** **)**

该节点的名称。这个名称在兄弟节点（来自同一父节点的其他子节点）中是唯一的。当设置为现有名称时，节点将自动重命名。

\ **注意：**\ 自动生成的名称可能包含 ``@`` 字符，在使用 :ref:`add_child<class_Node_method_add_child>` 时保留该字符用于唯一名称。手动设置名称时，将删除任何 ``@``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_owner:

.. rst-class:: classref-property

:ref:`Node<class_Node>` **owner**

.. rst-class:: classref-property-setget

- void **set_owner** **(** :ref:`Node<class_Node>` value **)**
- :ref:`Node<class_Node>` **get_owner** **(** **)**

该节点的所有者。节点的所有者可以是任何祖先节点（即父节点、祖父节点等沿场景树向上的节点）。也就是说，应该在设置所有者之前调用 :ref:`add_child<class_Node_method_add_child>`\ ，这样才能存在父子关系。（通过 :ref:`PackedScene<class_PackedScene>`\ ）保存节点时，它拥有的所有节点也会随之保存。这样就可以创建复杂的场景树，能够进行实例化和子实例化。

\ **注意：**\ 如果想要将子节点持久化进 :ref:`PackedScene<class_PackedScene>`\ ，除了调用 :ref:`add_child<class_Node_method_add_child>` 之外还必须设置 :ref:`owner<class_Node_property_owner>`\ 。通常在\ :doc:`工具脚本 <../tutorials/plugins/running_code_in_the_editor>`\ 和\ :doc:`编辑器插件 <../tutorials/plugins/editor/index>`\ 中会用到。如果将新节点添加到了场景树中但没有将场景树中的祖先设置为所有者，那么这个节点在 2D/3D 视图中可见，但在场景树中不可见（也不会在打包或保存时进行持久化）。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_process_mode:

.. rst-class:: classref-property

:ref:`ProcessMode<enum_Node_ProcessMode>` **process_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_process_mode** **(** :ref:`ProcessMode<enum_Node_ProcessMode>` value **)**
- :ref:`ProcessMode<enum_Node_ProcessMode>` **get_process_mode** **(** **)**

可用于暂停或取消暂停该节点，也可以让该节点根据 :ref:`SceneTree<class_SceneTree>` 来暂停，还可以让它继承父级的处理模式（默认）。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_process_physics_priority:

.. rst-class:: classref-property

:ref:`int<class_int>` **process_physics_priority** = ``0``

.. rst-class:: classref-property-setget

- void **set_physics_process_priority** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_physics_process_priority** **(** **)**

与 :ref:`process_priority<class_Node_property_process_priority>` 类似，但是作用于 :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>`\ 、\ :ref:`_physics_process<class_Node_method__physics_process>` 以及内部版本。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_process_priority:

.. rst-class:: classref-property

:ref:`int<class_int>` **process_priority** = ``0``

.. rst-class:: classref-property-setget

- void **set_process_priority** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_process_priority** **(** **)**

该节点在已启用的处理回调（即 :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>`\ 、\ :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>` 及其内部对应物）的执行顺序中的优先级。进程优先级值\ *较低*\ 的节点将首先执行其处理回调。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_process_thread_group:

.. rst-class:: classref-property

:ref:`ProcessThreadGroup<enum_Node_ProcessThreadGroup>` **process_thread_group** = ``0``

.. rst-class:: classref-property-setget

- void **set_process_thread_group** **(** :ref:`ProcessThreadGroup<enum_Node_ProcessThreadGroup>` value **)**
- :ref:`ProcessThreadGroup<enum_Node_ProcessThreadGroup>` **get_process_thread_group** **(** **)**

设置这个节点的处理线程组（基本上就是在主线程还是子线程中接收 :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>`\ 、\ :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>`\ 、\ :ref:`_process<class_Node_method__process>`\ 、\ :ref:`_physics_process<class_Node_method__physics_process>` 以及这些回调的内部版本）。

默认情况下线程组为 :ref:`PROCESS_THREAD_GROUP_INHERIT<class_Node_constant_PROCESS_THREAD_GROUP_INHERIT>`\ ，表示这个节点属于和父节点一样的线程组。同一线程组中的节点会一起处理，独立于其他线程组（由 :ref:`process_thread_group_order<class_Node_property_process_thread_group_order>` 决定）。如果设为 :ref:`PROCESS_THREAD_GROUP_SUB_THREAD<class_Node_constant_PROCESS_THREAD_GROUP_SUB_THREAD>`\ ，则该线程组会在子线程（非主线程）中执行，否则设为 :ref:`PROCESS_THREAD_GROUP_MAIN_THREAD<class_Node_constant_PROCESS_THREAD_GROUP_MAIN_THREAD>` 就会在主线程中处理。如果父节点和先祖节点都没有设置为非继承，则该节点属于\ *默认线程组*\ 。默认分组在主线程中处理，分组顺序为 0。

在子线程中处理时，线程组之外的大多数函数都禁止访问（调试模式下会报错）。请使用 :ref:`Object.call_deferred<class_Object_method_call_deferred>`\ 、\ :ref:`call_thread_safe<class_Node_method_call_thread_safe>`\ 、\ :ref:`call_deferred_thread_group<class_Node_method_call_deferred_thread_group>` 等方法与主线程（或其他线程组）通信。

线程组更好的理解方式是，非 :ref:`PROCESS_THREAD_GROUP_INHERIT<class_Node_constant_PROCESS_THREAD_GROUP_INHERIT>` 的节点都会将设为继承的子节点（以及后续子孙节点）纳入它的处理线程组。这样该分组中的节点就会一起处理，包括包含它们的节点。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_process_thread_group_order:

.. rst-class:: classref-property

:ref:`int<class_int>` **process_thread_group_order**

.. rst-class:: classref-property-setget

- void **set_process_thread_group_order** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_process_thread_group_order** **(** **)**

修改处理线程组的顺序。顺序取值较小的分组会在较大的分组前处理。例如，可以让大量的节点先在子线程中处理，然后另一组节点要在主线程中获取它们的处理结果。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_process_thread_messages:

.. rst-class:: classref-property

|bitfield|\<:ref:`ProcessThreadMessages<enum_Node_ProcessThreadMessages>`\> **process_thread_messages**

.. rst-class:: classref-property-setget

- void **set_process_thread_messages** **(** |bitfield|\<:ref:`ProcessThreadMessages<enum_Node_ProcessThreadMessages>`\> value **)**
- |bitfield|\<:ref:`ProcessThreadMessages<enum_Node_ProcessThreadMessages>`\> **get_process_thread_messages** **(** **)**

设置当前线程组是否会在线程中处理消息（调用 :ref:`call_deferred_thread_group<class_Node_method_call_deferred_thread_group>`\ ），以及是否需要在常规处理和物理处理回调中接收消息。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_scene_file_path:

.. rst-class:: classref-property

:ref:`String<class_String>` **scene_file_path**

.. rst-class:: classref-property-setget

- void **set_scene_file_path** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_scene_file_path** **(** **)**

如果一个场景是从一个文件实例化来的，则其最顶层的节点的 :ref:`scene_file_path<class_Node_property_scene_file_path>` 中，将包含它从何处被加载的绝对文件路径（例如 ``res://levels/1.tscn``\ ）。否则 :ref:`scene_file_path<class_Node_property_scene_file_path>` 被设置为一个空字符串。

.. rst-class:: classref-item-separator

----

.. _class_Node_property_unique_name_in_owner:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **unique_name_in_owner** = ``false``

.. rst-class:: classref-property-setget

- void **set_unique_name_in_owner** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_unique_name_in_owner** **(** **)**

将这个节点的名称设置为其 :ref:`owner<class_Node_property_owner>` 中的唯一名称。这样就可以从该场景中的任意节点处使用 ``%名称`` 来访问这个节点，无需使用完整路径。

如果所有者相同的另一个节点已经将该名称声明为唯一，那么其他节点就无法再将此名称设置为唯一名称。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_Node_method__enter_tree:

.. rst-class:: classref-method

void **_enter_tree** **(** **)** |virtual|

当节点进入 :ref:`SceneTree<class_SceneTree>` 时调用（例如实例化时，场景改变时，或者在脚本中调用 :ref:`add_child<class_Node_method_add_child>` 后）。如果节点有子节点，则首先调用它的 :ref:`_enter_tree<class_Node_method__enter_tree>` 回调函数，然后再调用子节点的回调函数。

对应于 :ref:`Object._notification<class_Object_method__notification>` 中的 :ref:`NOTIFICATION_ENTER_TREE<class_Node_constant_NOTIFICATION_ENTER_TREE>` 通知。

.. rst-class:: classref-item-separator

----

.. _class_Node_method__exit_tree:

.. rst-class:: classref-method

void **_exit_tree** **(** **)** |virtual|

当节点即将离开 :ref:`SceneTree<class_SceneTree>` 时被调用（例如，在释放、场景改变或在脚本中调用 :ref:`remove_child<class_Node_method_remove_child>` 后）。如果该节点有子节点，它的 :ref:`_exit_tree<class_Node_method__exit_tree>` 回调将在所有子节点离开树后被最后调用。

对应于 :ref:`Object._notification<class_Object_method__notification>` 中的 :ref:`NOTIFICATION_EXIT_TREE<class_Node_constant_NOTIFICATION_EXIT_TREE>` 通知和 :ref:`tree_exiting<class_Node_signal_tree_exiting>` 信号。要在节点已经离开活动树时得到通知，请连接到 :ref:`tree_exited<class_Node_signal_tree_exited>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method__get_configuration_warnings:

.. rst-class:: classref-method

:ref:`PackedStringArray<class_PackedStringArray>` **_get_configuration_warnings** **(** **)** |virtual| |const|

如果覆盖这个方法的脚本是 ``tool`` 脚本，那么这个函数所返回的数组中的元素会在“场景”面板中显示为警告。

返回空数组不会生成警告。

这个节点的警告需要更新时，请调用 :ref:`update_configuration_warnings<class_Node_method_update_configuration_warnings>`\ 。

::

    @export var energy = 0:
        set(value):
            energy = value
            update_configuration_warnings()
    
    func _get_configuration_warnings():
        if energy < 0:
            return ["Energy 必须大于等于 0。"]
        else:
            return []

.. rst-class:: classref-item-separator

----

.. _class_Node_method__input:

.. rst-class:: classref-method

void **_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

有输入事件时会被调用。输入事件会沿节点树向上传播，直到有节点将其消耗。

只有在启用输入处理时才会被调用，如果该方法被重写则会自动启用，可以使用 :ref:`set_process_input<class_Node_method_set_process_input>` 进行切换。

要消耗输入事件，阻止它进一步传播到其他节点，可以调用 :ref:`Viewport.set_input_as_handled<class_Viewport_method_set_input_as_handled>`\ 。

对于游戏输入，\ :ref:`_unhandled_input<class_Node_method__unhandled_input>` 和 :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>` 通常更适合，因为它们允许 GUI 首先拦截事件。

\ **注意：**\ 仅当该节点存在于场景树中时（即不是孤立节点），此方法才会被调用。

.. rst-class:: classref-item-separator

----

.. _class_Node_method__physics_process:

.. rst-class:: classref-method

void **_physics_process** **(** :ref:`float<class_float>` delta **)** |virtual|

在主循环的物理处理步骤中被调用。物理处理意味着帧率与物理同步，即 ``delta`` 变量应该是常量。 ``delta`` 的单位是秒。

只有当物理处理被启用时才会被调用，如果这个方法被重写，就会自动被调用，并且可以使用 :ref:`set_physics_process<class_Node_method_set_physics_process>` 进行切换。

对应于 :ref:`Object._notification<class_Object_method__notification>` 中的 :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>` 通知。

\ **注意：**\ 这个方法只有在当节点存在于场景树中时才会被调用（也就是说，如果它不是“孤儿”）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method__process:

.. rst-class:: classref-method

void **_process** **(** :ref:`float<class_float>` delta **)** |virtual|

在主循环的处理步骤中被调用。处理发生在每一帧，并且尽可能快，所以从上一帧开始的 ``delta`` 时间不是恒定的。\ ``delta`` 的单位是秒。

只有在启用处理的情况下才会被调用，如果这个方法被重写，会自动进行处理，可以用 :ref:`set_process<class_Node_method_set_process>` 来开关。

对应于 :ref:`Object._notification<class_Object_method__notification>` 中的 :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>` 通知。

\ **注意：**\ 这个方法只有在节点存在于场景树中时才会被调用（也就是说，如果它不是“孤儿”）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method__ready:

.. rst-class:: classref-method

void **_ready** **(** **)** |virtual|

当节点“就绪”时被调用，即当节点及其子节点都已经进入场景树时。如果该节点有子节点，将首先触发子节点的 :ref:`_ready<class_Node_method__ready>` 回调，稍后父节点将收到就绪通知。

对应 :ref:`Object._notification<class_Object_method__notification>` 中的 :ref:`NOTIFICATION_READY<class_Node_constant_NOTIFICATION_READY>` 通知。另请参阅用于变量的 ``@onready`` 注解。

通常用于初始化。对于更早的初始化，可以使用 :ref:`Object._init<class_Object_method__init>`\ 。另见 :ref:`_enter_tree<class_Node_method__enter_tree>`\ 。

\ **注意：**\ 对于每个节点可能仅调用一次 :ref:`_ready<class_Node_method__ready>`\ 。从场景树中移除一个节点后，并再次添加该节点时，将不会第二次调用 ``_ready``\ 。这时可以通过使用 :ref:`request_ready<class_Node_method_request_ready>`\ ，它可以在再次添加节点之前的任何地方被调用。

.. rst-class:: classref-item-separator

----

.. _class_Node_method__shortcut_input:

.. rst-class:: classref-method

void **_shortcut_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

Called when an :ref:`InputEventKey<class_InputEventKey>` or :ref:`InputEventShortcut<class_InputEventShortcut>` hasn't been consumed by :ref:`_input<class_Node_method__input>` or any GUI :ref:`Control<class_Control>` item. It is called before :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>` and :ref:`_unhandled_input<class_Node_method__unhandled_input>`. The input event propagates up through the node tree until a node consumes it.

It is only called if shortcut processing is enabled, which is done automatically if this method is overridden, and can be toggled with :ref:`set_process_shortcut_input<class_Node_method_set_process_shortcut_input>`.

To consume the input event and stop it propagating further to other nodes, :ref:`Viewport.set_input_as_handled<class_Viewport_method_set_input_as_handled>` can be called.

This method can be used to handle shortcuts. For generic GUI events, use :ref:`_input<class_Node_method__input>` instead. Gameplay events should usually be handled with either :ref:`_unhandled_input<class_Node_method__unhandled_input>` or :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>`.

\ **Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan).

.. rst-class:: classref-item-separator

----

.. _class_Node_method__unhandled_input:

.. rst-class:: classref-method

void **_unhandled_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

Called when an :ref:`InputEvent<class_InputEvent>` hasn't been consumed by :ref:`_input<class_Node_method__input>` or any GUI :ref:`Control<class_Control>` item. It is called after :ref:`_shortcut_input<class_Node_method__shortcut_input>` and after :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>`. The input event propagates up through the node tree until a node consumes it.

It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with :ref:`set_process_unhandled_input<class_Node_method_set_process_unhandled_input>`.

To consume the input event and stop it propagating further to other nodes, :ref:`Viewport.set_input_as_handled<class_Viewport_method_set_input_as_handled>` can be called.

For gameplay input, this method is usually a better fit than :ref:`_input<class_Node_method__input>`, as GUI events need a higher priority. For keyboard shortcuts, consider using :ref:`_shortcut_input<class_Node_method__shortcut_input>` instead, as it is called before this method. Finally, to handle keyboard events, consider using :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>` for performance reasons.

\ **Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).

.. rst-class:: classref-item-separator

----

.. _class_Node_method__unhandled_key_input:

.. rst-class:: classref-method

void **_unhandled_key_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** |virtual|

Called when an :ref:`InputEventKey<class_InputEventKey>` hasn't been consumed by :ref:`_input<class_Node_method__input>` or any GUI :ref:`Control<class_Control>` item. It is called after :ref:`_shortcut_input<class_Node_method__shortcut_input>` but before :ref:`_unhandled_input<class_Node_method__unhandled_input>`. The input event propagates up through the node tree until a node consumes it.

It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with :ref:`set_process_unhandled_key_input<class_Node_method_set_process_unhandled_key_input>`.

To consume the input event and stop it propagating further to other nodes, :ref:`Viewport.set_input_as_handled<class_Viewport_method_set_input_as_handled>` can be called.

This method can be used to handle Unicode character input with :kbd:`Alt`, :kbd:`Alt + Ctrl`, and :kbd:`Alt + Shift` modifiers, after shortcuts were handled.

For gameplay input, this and :ref:`_unhandled_input<class_Node_method__unhandled_input>` are usually a better fit than :ref:`_input<class_Node_method__input>`, as GUI events should be handled first. This method also performs better than :ref:`_unhandled_input<class_Node_method__unhandled_input>`, since unrelated events such as :ref:`InputEventMouseMotion<class_InputEventMouseMotion>` are automatically filtered. For shortcuts, consider using :ref:`_shortcut_input<class_Node_method__shortcut_input>` instead.

\ **Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).

.. rst-class:: classref-item-separator

----

.. _class_Node_method_add_child:

.. rst-class:: classref-method

void **add_child** **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` force_readable_name=false, :ref:`InternalMode<enum_Node_InternalMode>` internal=0 **)**

将 ``node`` 添加为子节点。节点可以有任意数量的子节点，但子节点的名称必须唯一。删除父节点时会自动删除子节点，因此可以通过删除最顶层的节点来删除整个场景。

如果 ``force_readable_name`` 为 ``true``\ ，则将提高所添加的 ``node`` 的可读性。如果尚未命名，\ ``node`` 将重命名为它的类型，如果存在 :ref:`name<class_Node_property_name>` 相同的兄弟节点，则会添加合适的数字后缀。这个操作很慢。因此，建议将其保留为 ``false``\ ，在这两种情况下会分配包含 ``@`` 的虚拟名称。

如果 ``internal`` 不同于 :ref:`INTERNAL_MODE_DISABLED<class_Node_constant_INTERNAL_MODE_DISABLED>`\ ，则该子节点将被添加为内部节点。\ :ref:`get_children<class_Node_method_get_children>` 等方法会忽略这种节点，除非它们的参数 ``include_internal`` 为 ``true``\ 。这种功能的设计初衷是对用户隐藏内部节点，这样用户就不会意外删除或修改这些节点。部分 GUI 节点会使用这个功能，例如 :ref:`ColorPicker<class_ColorPicker>`\ 。可用的模式见 :ref:`InternalMode<enum_Node_InternalMode>`\ 。

\ **注意：**\ 如果子节点已经有父节点，则该函数会失败。请先使用 :ref:`remove_child<class_Node_method_remove_child>` 将节点从当前父节点中移除。例如：


.. tabs::

 .. code-tab:: gdscript

    var child_node = get_child(0)
    if child_node.get_parent():
        child_node.get_parent().remove_child(child_node)
    add_child(child_node)

 .. code-tab:: csharp

    Node childNode = GetChild(0);
    if (childNode.GetParent() != null)
    {
        childNode.GetParent().RemoveChild(childNode);
    }
    AddChild(childNode);



如果你需要将子节点添加到子节点列表中特定节点的下方，请使用 :ref:`add_sibling<class_Node_method_add_sibling>` 而不是该方法。

\ **注意：**\ 如果想让子节点持久化到某个 :ref:`PackedScene<class_PackedScene>` 的，除了调用 :ref:`add_child<class_Node_method_add_child>` 之外，还必须设置 :ref:`owner<class_Node_property_owner>`\ 。通常在\ :doc:`工具脚本 <../tutorials/plugins/running_code_in_the_editor>`\ 和\ :doc:`编辑器插件 <../tutorials/plugins/editor/index>`\ 中会用到。如果在没有设置 :ref:`owner<class_Node_property_owner>`\ ，只调用了 :ref:`add_child<class_Node_method_add_child>`\ ，则新添加的 **Node** 在场景树中将不可见，但在 2D/3D 视图中却是可见的。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_add_sibling:

.. rst-class:: classref-method

void **add_sibling** **(** :ref:`Node<class_Node>` sibling, :ref:`bool<class_bool>` force_readable_name=false **)**

将一个 ``sibling`` 节点添加到当前节点的父节点，与该节点处于同一级别，就在它的正下方。

如果 ``force_readable_name`` 为 ``true``\ ，则提高添加的 ``sibling`` 的可读性。如果没有命名，\ ``sibling`` 将被重命名为它的类型，如果它与一个同级节点共享 :ref:`name<class_Node_property_name>`\ ，则添加一个更合适的数字后缀。这个操作很慢。因此，建议将其保留为 ``false``\ ，这会在两种情况下分配一个以 ``@`` 为特色的虚拟名称。

如果不需要将该子节点添加到子列表中特定节点的下方，请使用 :ref:`add_child<class_Node_method_add_child>` 而不是该方法。

\ **注意：**\ 如果这个节点是内部的，则新的同级节点也将是内部的（参见 :ref:`add_child<class_Node_method_add_child>` 中的 ``internal`` 参数）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_add_to_group:

.. rst-class:: classref-method

void **add_to_group** **(** :ref:`StringName<class_StringName>` group, :ref:`bool<class_bool>` persistent=false **)**

将节点添加到一个组中。组是命名和组织节点子集的辅助工具，例如“敌人”或“收集品”等。一个节点可以在任意数量的组中。节点可以随时被分配到一个组中，但在它们进入场景树之前不会添加（参见 :ref:`is_inside_tree<class_Node_method_is_inside_tree>`\ ）。参阅描述中的注释，以及 :ref:`SceneTree<class_SceneTree>` 中的分组方法。

\ ``persistent`` 选项在将节点打包到 :ref:`PackedScene<class_PackedScene>` 并保存到文件时使用。非持久化的组不会被存储。

\ **注意：**\ 出于性能原因，\ *不*\ 保证节点组的顺序。不应依赖节点组的顺序，因为它可能因项目运行而异。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_call_deferred_thread_group:

.. rst-class:: classref-method

:ref:`Variant<class_Variant>` **call_deferred_thread_group** **(** :ref:`StringName<class_StringName>` method, ... **)** |vararg|

这个函数类似于 :ref:`Object.call_deferred<class_Object_method_call_deferred>`\ ，但是会在处理节点线程组时进行调用。如果节点线程组在子线程中处理，那么调用就会在该线程中进行，时机为 :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>` 和 :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>`\ 、\ :ref:`_process<class_Node_method__process>` 和 :ref:`_physics_process<class_Node_method__physics_process>`\ ，或者对应的内部版本之前。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_call_thread_safe:

.. rst-class:: classref-method

:ref:`Variant<class_Variant>` **call_thread_safe** **(** :ref:`StringName<class_StringName>` method, ... **)** |vararg|

这个函数能够确保调用成功，无论是否从线程中调用。如果是从不允许调用该函数的线程中调用的，那么调用就会变成延迟调用。否则就会直接调用。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_can_process:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **can_process** **(** **)** |const|

如果场景树暂停时节点可以处理（请参阅 :ref:`process_mode<class_Node_property_process_mode>`\ ），则返回 ``true``\ 。如果场景树未被暂停，则始终返回 ``true``\ ，如果该节点不在树中，则始终返回 ``false``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_create_tween:

.. rst-class:: classref-method

:ref:`Tween<class_Tween>` **create_tween** **(** **)**

新建 :ref:`Tween<class_Tween>` 并将其绑定到这个节点。与如下操作等价：


.. tabs::

 .. code-tab:: gdscript

    get_tree().create_tween().bind_node(self)

 .. code-tab:: csharp

    GetTree().CreateTween().BindNode(this);



该 Tween 将在下一个处理帧或物理处理帧时自动开始（取决于 :ref:`TweenProcessMode<enum_Tween_TweenProcessMode>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_duplicate:

.. rst-class:: classref-method

:ref:`Node<class_Node>` **duplicate** **(** :ref:`int<class_int>` flags=15 **)** |const|

复制该节点，返回一个新的节点。

可以使用 ``flags`` 微调该行为（请参阅 :ref:`DuplicateFlags<enum_Node_DuplicateFlags>`\ ）。

\ **注意：**\ 如果节点包含一个带有构造参数的脚本（即需要向 :ref:`Object._init<class_Object_method__init>` 方法提供参数），它将无法正常工作。在这种情况下，节点将在没有脚本的情况下被复制。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_find_child:

.. rst-class:: classref-method

:ref:`Node<class_Node>` **find_child** **(** :ref:`String<class_String>` pattern, :ref:`bool<class_bool>` recursive=true, :ref:`bool<class_bool>` owned=true **)** |const|

查找此节点的后代中，其名称与 :ref:`String.match<class_String_method_match>` 中的 ``pattern`` 匹配的第一个节点。也会查找内部子节点（见 :ref:`add_child<class_Node_method_add_child>` 的 ``internal`` 参数）。

\ ``pattern`` 不匹配完整路径，只匹配单个节点名称。它区分大小写，\ ``"*"`` 匹配零个或多个字符，\ ``"?"`` 匹配除 ``"."`` 之外的任意单个字符。

如果 ``recursive`` 为 ``true``\ ，则查找范围包括所有子节点，即使嵌套很深。节点按树顺序检查，因此首先检查该节点的第一个直接子节点，然后是该直接子节点的直接子节点，等等，然后移动到第二个直接子节点，依此类推。如果 ``recursive`` 为 ``false``\ ，则仅匹配该节点的直接子节点。

如果 ``owned`` 为 ``true``\ ，则该方法仅查找分配有 :ref:`owner<class_Node_property_owner>` 的节点。这对于通过脚本实例化的场景尤其重要，因为这些场景没有所有者。

如果找不到匹配的 **Node**\ ，则返回 ``null``\ 。

\ **注意：**\ 由于该方法会遍历节点的所有后代，因此它是获取对另一个节点的引用的最慢方法。只要有可能，请考虑改用使用唯一名称的 :ref:`get_node<class_Node_method_get_node>`\ （请参阅 :ref:`unique_name_in_owner<class_Node_property_unique_name_in_owner>`\ ），或将该节点引用缓存到变量中。

\ **注意：**\ 要查找匹配一个模式或类类型的所有后代节点，请参阅 :ref:`find_children<class_Node_method_find_children>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_find_children:

.. rst-class:: classref-method

:ref:`Node[]<class_Node>` **find_children** **(** :ref:`String<class_String>` pattern, :ref:`String<class_String>` type="", :ref:`bool<class_bool>` recursive=true, :ref:`bool<class_bool>` owned=true **)** |const|

查找该节点的后代节点，其名称与 :ref:`String.match<class_String_method_match>` 中的 ``pattern`` 匹配，和/或类型与 :ref:`Object.is_class<class_Object_method_is_class>` 中的 ``type`` 匹配。也会查找内部子节点（见 :ref:`add_child<class_Node_method_add_child>` 的 ``internal`` 参数）。

\ ``pattern`` 不匹配完整路径，只匹配单个节点名称。它区分大小写，\ ``"*"`` 匹配零个或多个字符，\ ``"?"`` 匹配除 ``"."`` 之外的任意单个字符。

\ ``type`` 将检查相等性或继承关系，并且区分大小写。\ ``"Object"`` 会匹配类型为 ``"Node"`` 的节点，但反之则不然。

如果 ``recursive`` 为 ``true``\ ，则匹配范围包括所有子节点，即使嵌套很深。节点按树顺序检查，因此首先检查该节点的第一个直接子节点，然后是该直接子节点的直接子节点，等等，然后移动到第二个直接子节点，依此类推。如果 ``recursive`` 为 ``false``\ ，则仅匹配该节点的直接子节点。

如果 ``owned`` 为 ``true``\ ，则该方法仅查找分配有 :ref:`owner<class_Node_property_owner>` 的节点。这对于通过脚本实例化的场景尤其重要，因为这些场景没有所有者。

如果找不到匹配的节点，则返回空数组。

\ **注意：**\ 由于该方法会遍历节点的所有后代，因此它是获取对其他节点的引用的最慢方法。只要有可能，请考虑将节点引用缓存到变量中。

\ **注意：**\ 如果只想查找匹配模式的第一个后代节点，请参阅 :ref:`find_child<class_Node_method_find_child>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_find_parent:

.. rst-class:: classref-method

:ref:`Node<class_Node>` **find_parent** **(** :ref:`String<class_String>` pattern **)** |const|

查找当前节点的第一个父节点，其名称与 :ref:`String.match<class_String_method_match>` 中的 ``pattern`` 匹配。

\ ``pattern`` 不匹配完整路径，只匹配单个节点名称。它区分大小写，\ ``"*"`` 匹配零个或多个字符，\ ``"?"`` 匹配除 ``"."`` 之外的任意单个字符。

\ **注意：**\ 由于该方法在场景树中向上遍历，因此在大型、深度嵌套的场景树中可能会很慢。只要有可能，请考虑使用具有唯一名称的 :ref:`get_node<class_Node_method_get_node>`\ （请参阅 :ref:`unique_name_in_owner<class_Node_property_unique_name_in_owner>`\ ），或将该节点引用缓存到变量中。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_child:

.. rst-class:: classref-method

:ref:`Node<class_Node>` **get_child** **(** :ref:`int<class_int>` idx, :ref:`bool<class_bool>` include_internal=false **)** |const|

按索引返回一个子节点（见 :ref:`get_child_count<class_Node_method_get_child_count>`\ ）。这个方法经常被用于遍历一个节点的所有子节点。

负索引将从最后一个开始访问子节点。

如果 ``include_internal`` 为 ``false``\ ，则跳过内部子节点（见 :ref:`add_child<class_Node_method_add_child>` 中的 ``internal`` 参数）。

要通过名称访问一个子节点，请使用 :ref:`get_node<class_Node_method_get_node>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_child_count:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_child_count** **(** :ref:`bool<class_bool>` include_internal=false **)** |const|

返回子节点的数量。

如果 ``include_internal`` 为 ``false`` ，则不计算内部子节点（见 :ref:`add_child<class_Node_method_add_child>` 的 ``internal`` 参数）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_children:

.. rst-class:: classref-method

:ref:`Node[]<class_Node>` **get_children** **(** :ref:`bool<class_bool>` include_internal=false **)** |const|

返回一组对节点子节点的引用。

如果 ``include_internal`` 为 ``false``\ ，则返回的数组将不包含内部子节点（请参阅 :ref:`add_child<class_Node_method_add_child>` 中的 ``internal`` 参数）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_groups:

.. rst-class:: classref-method

:ref:`StringName[]<class_StringName>` **get_groups** **(** **)** |const|

返回一个列出该节点所属的分组的数组。

\ **注意：**\ 出于性能原因，\ *不*\ 保证节点分组的顺序。 不应依赖节点分组的顺序，因为它可能因项目运行而异。

\ **注意：**\ 引擎在内部使用了一些分组名称（全部以下划线开头）。为避免与内部分组冲突，请勿添加名称以下划线开头的自定义分组。要在遍历 :ref:`get_groups<class_Node_method_get_groups>` 时排除内部分组，请使用以下代码段：


.. tabs::

 .. code-tab:: gdscript

    # 仅存储节点的非内部分组（作为一个字符串数组）。
    var non_internal_groups = []
    for group in get_groups():
        if not group.begins_with("_"):
            non_internal_groups.push_back(group)

 .. code-tab:: csharp

    // 仅存储节点的非内部分组（作为一个字符串列表）。
    List<string> nonInternalGroups = new List<string>();
    foreach (string group in GetGroups())
    {
        if (!group.BeginsWith("_"))
            nonInternalGroups.Add(group);
    }



.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_index:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_index** **(** :ref:`bool<class_bool>` include_internal=false **)** |const|

返回节点在场景树分支中的顺序。例如，如果在第一个子节点上调用，则位置为 ``0``\ 。

如果 ``include_internal`` 为 ``false``\ ，则索引将不会考虑内部子节点，即第一个非内部子节点的索引将为 0（请参阅 :ref:`add_child<class_Node_method_add_child>` 中的 ``internal`` 参数）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_last_exclusive_window:

.. rst-class:: classref-method

:ref:`Window<class_Window>` **get_last_exclusive_window** **(** **)** |const|

返回包含该节点的 :ref:`Window<class_Window>`\ ，或者是从包含该节点的窗口开始的窗口链中最近的独占子项。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_multiplayer_authority:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_multiplayer_authority** **(** **)** |const|

返回这个节点多人游戏控制者的对等体 ID。见 :ref:`set_multiplayer_authority<class_Node_method_set_multiplayer_authority>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_node:

.. rst-class:: classref-method

:ref:`Node<class_Node>` **get_node** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

获取一个节点。\ :ref:`NodePath<class_NodePath>` 可以是到一个节点的相对路径（从当前节点）或绝对路径（在场景树中）。如果该路径不存在，则返回 ``null`` 并记录一个错误。尝试访问该返回值上的方法，将产生一个“尝试在一个 null 实例上调用 <method>。”错误。

\ **注意：**\ 获取绝对路径，仅在节点位于场景树内部时有效（参见 :ref:`is_inside_tree<class_Node_method_is_inside_tree>`\ ）。

\ **示例：**\ 假设你当前的节点是 Character 和以下树：

::

    /root
    /root/Character
    /root/Character/Sword
    /root/Character/Backpack/Dagger
    /root/MyGame
    /root/Swamp/Alligator
    /root/Swamp/Mosquito
    /root/Swamp/Goblin

可能的路径有：


.. tabs::

 .. code-tab:: gdscript

    get_node("Sword")
    get_node("Backpack/Dagger")
    get_node("../Swamp/Alligator")
    get_node("/root/MyGame")

 .. code-tab:: csharp

    GetNode("Sword");
    GetNode("Backpack/Dagger");
    GetNode("../Swamp/Alligator");
    GetNode("/root/MyGame");



.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_node_and_resource:

.. rst-class:: classref-method

:ref:`Array<class_Array>` **get_node_and_resource** **(** :ref:`NodePath<class_NodePath>` path **)**

按照 :ref:`NodePath<class_NodePath>` 的子名称（例如 ``Area2D/CollisionShape2D:shape``\ ）指定的方式，获取节点及其一个资源。如果在 :ref:`NodePath<class_NodePath>` 中指定了多个嵌套资源，则将获取最后一个。

返回值是一个大小为 3 的数组：第一个索引指向该 **Node**\ （如果未找到，则为 ``null``\ ），第二个索引指向 :ref:`Resource<class_Resource>`\ （或者未找到时为 ``null``\ ），第三个索引是剩余的 :ref:`NodePath<class_NodePath>`\ ，如果有的话。

例如，假设 ``Area2D/CollisionShape2D`` 是一个有效的节点，并且它的 ``shape`` 属性已被分配了一个 :ref:`RectangleShape2D<class_RectangleShape2D>` 资源，那么可以得到这样的输出：


.. tabs::

 .. code-tab:: gdscript

    print(get_node_and_resource("Area2D/CollisionShape2D")) # [[CollisionShape2D:1161], Null, ]
    print(get_node_and_resource("Area2D/CollisionShape2D:shape")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], ]
    print(get_node_and_resource("Area2D/CollisionShape2D:shape:extents")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], :extents]

 .. code-tab:: csharp

    GD.Print(GetNodeAndResource("Area2D/CollisionShape2D")); // [[CollisionShape2D:1161], Null, ]
    GD.Print(GetNodeAndResource("Area2D/CollisionShape2D:shape")); // [[CollisionShape2D:1161], [RectangleShape2D:1156], ]
    GD.Print(GetNodeAndResource("Area2D/CollisionShape2D:shape:extents")); // [[CollisionShape2D:1161], [RectangleShape2D:1156], :extents]



.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_node_or_null:

.. rst-class:: classref-method

:ref:`Node<class_Node>` **get_node_or_null** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

类似于 :ref:`get_node<class_Node_method_get_node>`\ ，但在 ``path`` 没有指向有效的 **Node** 时不会记录错误。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_parent:

.. rst-class:: classref-method

:ref:`Node<class_Node>` **get_parent** **(** **)** |const|

返回当前节点的父节点，如果节点缺少父节点，则返回 ``null``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_path:

.. rst-class:: classref-method

:ref:`NodePath<class_NodePath>` **get_path** **(** **)** |const|

返回当前节点的绝对路径。这只在当前节点在场景树中起作用（请参阅 :ref:`is_inside_tree<class_Node_method_is_inside_tree>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_path_to:

.. rst-class:: classref-method

:ref:`NodePath<class_NodePath>` **get_path_to** **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` use_unique_path=false **)** |const|

返回从该节点到指定节点 ``node`` 的相对 :ref:`NodePath<class_NodePath>`\ 。这两个节点都必须在同一个场景中，否则函数会失败。

如果 ``use_unique_path`` 为 ``true``\ ，则会返回考虑唯一节点的最短路径。

\ **注意：**\ 如果你获取了从唯一节点开始的相对路径，则该路径可能由于唯一节点的名称长度而比普通的相对路径长。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_physics_process_delta_time:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_physics_process_delta_time** **(** **)** |const|

返回自上一个物理绑定帧以来经过的时间（单位为秒）（参见 :ref:`_physics_process<class_Node_method__physics_process>`\ ）。除非通过 :ref:`Engine.physics_ticks_per_second<class_Engine_property_physics_ticks_per_second>` 更改每秒帧数，否则这在物理处理中始终是一个恒定值。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_process_delta_time:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_process_delta_time** **(** **)** |const|

返回自上次处理回调以来经过的时间（单位为秒）。这个值可能因帧而异。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_scene_instance_load_placeholder:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **get_scene_instance_load_placeholder** **(** **)** |const|

如果这是一个实例加载占位符，则返回 ``true``\ 。见 :ref:`InstancePlaceholder<class_InstancePlaceholder>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_tree:

.. rst-class:: classref-method

:ref:`SceneTree<class_SceneTree>` **get_tree** **(** **)** |const|

返回包含该节点的 :ref:`SceneTree<class_SceneTree>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_viewport:

.. rst-class:: classref-method

:ref:`Viewport<class_Viewport>` **get_viewport** **(** **)** |const|

返回节点的 :ref:`Viewport<class_Viewport>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_get_window:

.. rst-class:: classref-method

:ref:`Window<class_Window>` **get_window** **(** **)** |const|

返回包含该节点的 :ref:`Window<class_Window>`\ 。如果该节点在主窗口中，则相当于获取根节点（\ ``get_tree().get_root()``\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_has_node:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has_node** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

如果 :ref:`NodePath<class_NodePath>` 指向的节点存在，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_has_node_and_resource:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has_node_and_resource** **(** :ref:`NodePath<class_NodePath>` path **)** |const|

如果 :ref:`NodePath<class_NodePath>` 指向一个有效的节点，并且它的子名称指向一个有效的资源，例如 ``Area2D/CollisionShape2D:shape``\ ，则返回 ``true``\ 。具有非 :ref:`Resource<class_Resource>` 类型的属性（例如节点或基本数学类型）不被认为是资源。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_ancestor_of:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_ancestor_of** **(** :ref:`Node<class_Node>` node **)** |const|

如果给定节点是当前节点的直接或间接子节点，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_displayed_folded:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_displayed_folded** **(** **)** |const|

如果该节点在“场景”面板中被折叠，则返回 ``true``\ 。该方法仅适用于编辑器工具。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_editable_instance:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_editable_instance** **(** :ref:`Node<class_Node>` node **)** |const|

如果 ``node`` 有与相对于此节点的可编辑子节点，则返回 ``true``\ 。该方法仅适用于编辑器工具。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_greater_than:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_greater_than** **(** :ref:`Node<class_Node>` node **)** |const|

如果给定节点在场景层次结构中出现的时间晚于当前节点，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_in_group:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_in_group** **(** :ref:`StringName<class_StringName>` group **)** |const|

如果该节点在指定的组中，则返回 ``true``\ 。参阅描述中的注释和 :ref:`SceneTree<class_SceneTree>` 中的组方法。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_inside_tree:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_inside_tree** **(** **)** |const|

如果该节点当前在 :ref:`SceneTree<class_SceneTree>` 中，返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_multiplayer_authority:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_multiplayer_authority** **(** **)** |const|

如果本地系统为这个节点的多人游戏控制者，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_node_ready:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_node_ready** **(** **)** |const|

如果该节点已就绪，则返回 ``true``\ ，即该节点位于场景树中，并且所有子项均已初始化。

\ :ref:`request_ready<class_Node_method_request_ready>` 会将其重置回 ``false``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_physics_processing:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_physics_processing** **(** **)** |const|

如果启用了物理处理，返回 ``true``\ （见 :ref:`set_physics_process<class_Node_method_set_physics_process>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_physics_processing_internal:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_physics_processing_internal** **(** **)** |const|

如果内部物理处理被启用，返回 ``true``\ （见 :ref:`set_physics_process_internal<class_Node_method_set_physics_process_internal>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_processing:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_processing** **(** **)** |const|

如果开启了处理，返回 ``true``\ （见 :ref:`set_process<class_Node_method_set_process>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_processing_input:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_processing_input** **(** **)** |const|

如果节点正在处理输入，则返回 ``true``\ （见 :ref:`set_process_input<class_Node_method_set_process_input>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_processing_internal:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_processing_internal** **(** **)** |const|

如果启用了内部处理，则返回 ``true``\ （见 :ref:`set_process_internal<class_Node_method_set_process_internal>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_processing_shortcut_input:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_processing_shortcut_input** **(** **)** |const|

如果节点正在处理快捷键，则返回 ``true``\ （见 :ref:`set_process_shortcut_input<class_Node_method_set_process_shortcut_input>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_processing_unhandled_input:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_processing_unhandled_input** **(** **)** |const|

如果节点正在处理未被处理的输入，则返回 ``true``\ （见 :ref:`set_process_unhandled_input<class_Node_method_set_process_unhandled_input>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_is_processing_unhandled_key_input:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_processing_unhandled_key_input** **(** **)** |const|

如果节点正在处理未被处理的键输入，则返回 ``true``\ （见 :ref:`set_process_unhandled_key_input<class_Node_method_set_process_unhandled_key_input>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_move_child:

.. rst-class:: classref-method

void **move_child** **(** :ref:`Node<class_Node>` child_node, :ref:`int<class_int>` to_index **)**

在其他子节点中将子节点移动到不同的索引（顺序）。由于调用、信号等是按树顺序执行的，因此更改子节点的顺序可能会很有用。如果 ``to_index`` 为负数，索引将从末尾开始计算。

\ **注意：**\ 内部子节点只能在其期望的“内部范围”内移动（参见 :ref:`add_child<class_Node_method_add_child>` 中的 ``internal`` 参数）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_notify_deferred_thread_group:

.. rst-class:: classref-method

void **notify_deferred_thread_group** **(** :ref:`int<class_int>` what **)**

类似于 :ref:`call_deferred_thread_group<class_Node_method_call_deferred_thread_group>`\ ，但针对的是通知。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_notify_thread_safe:

.. rst-class:: classref-method

void **notify_thread_safe** **(** :ref:`int<class_int>` what **)**

类似于 :ref:`call_thread_safe<class_Node_method_call_thread_safe>`\ ，但针对的是通知。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_print_orphan_nodes:

.. rst-class:: classref-method

void **print_orphan_nodes** **(** **)** |static|

输出所有孤立节点（\ :ref:`SceneTree<class_SceneTree>` 之外的节点）。用于调试。

\ **注意：**\ :ref:`print_orphan_nodes<class_Node_method_print_orphan_nodes>` 只在调试版本中有效。在以发布模式导出的项目中调用时，\ :ref:`print_orphan_nodes<class_Node_method_print_orphan_nodes>` 不会输出任何内容。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_print_tree:

.. rst-class:: classref-method

void **print_tree** **(** **)**

将树打印到标准输出。主要用于调试。这个版本显示相对于当前节点的路径，适合复制/粘贴到 :ref:`get_node<class_Node_method_get_node>` 函数中。

\ **示例输出：**\ 

::

    TheGame
    TheGame/Menu
    TheGame/Menu/Label
    TheGame/Menu/Camera2D
    TheGame/SplashScreen
    TheGame/SplashScreen/Camera2D

.. rst-class:: classref-item-separator

----

.. _class_Node_method_print_tree_pretty:

.. rst-class:: classref-method

void **print_tree_pretty** **(** **)**

类似于 :ref:`print_tree<class_Node_method_print_tree>`\ ，会将树打印到标准输出。这个版本显示了一种更加图形化的表示方式，类似于在场景面板中显示的内容。非常适合检查较大的树。

\ **输出示例：**\ 

::

     ┖╴TheGame
        ┠╴Menu
        ┃  ┠╴Label
        ┃  ┖╴Camera2D
        ┖╴SplashScreen
           ┖╴Camera2D

.. rst-class:: classref-item-separator

----

.. _class_Node_method_propagate_call:

.. rst-class:: classref-method

void **propagate_call** **(** :ref:`StringName<class_StringName>` method, :ref:`Array<class_Array>` args=[], :ref:`bool<class_bool>` parent_first=false **)**

在该节点上并递归地在其所有子节点上，使用 ``args`` 中给出的参数调用给定方法（如果存在）。如果 ``parent_first`` 参数为 ``true``\ ，则该方法将首先在当前节点上调用，然后在其所有子节点上调用。如果 ``parent_first`` 为 ``false``\ ，则子节点上的方法将首先被调用。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_propagate_notification:

.. rst-class:: classref-method

void **propagate_notification** **(** :ref:`int<class_int>` what **)**

通过对所有节点调用 :ref:`Object.notification<class_Object_method_notification>`\ ，递归地通知当前节点和它的所有子节点。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_queue_free:

.. rst-class:: classref-method

void **queue_free** **(** **)**

将节点加入队列，在当前帧结束时删除。节点被删除时，它的所有子节点也将被删除，对该节点及其子节点的引用也会失效，见 :ref:`Object.free<class_Object_method_free>`\ 。

同一帧可以对同一个节点调用多次 :ref:`queue_free<class_Node_method_queue_free>`\ ，也可以 :ref:`Object.free<class_Object_method_free>` 已经排队删除的节点。请使用 :ref:`Object.is_queued_for_deletion<class_Object_method_is_queued_for_deletion>` 检查节点是否将在帧结束时被删除。

该节点会在所有其他已延迟的调用结束后释放，所以使用 :ref:`queue_free<class_Node_method_queue_free>` 并不总是和通过 :ref:`Object.call_deferred<class_Object_method_call_deferred>` 调用 :ref:`Object.free<class_Object_method_free>` 相同。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_remove_child:

.. rst-class:: classref-method

void **remove_child** **(** :ref:`Node<class_Node>` node **)**

删除一个子节点。该节点不会被删除，必须手动删除。

\ **注意：**\ 如果该 :ref:`owner<class_Node_property_owner>` 不再是父节点或祖先，则该函数可以将被移除节点（或其后代）的 :ref:`owner<class_Node_property_owner>` 设置为 ``null``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_remove_from_group:

.. rst-class:: classref-method

void **remove_from_group** **(** :ref:`StringName<class_StringName>` group **)**

从 ``group`` 中移除一个节点。如果该节点不在 ``group`` 中，则不执行任何操作。见描述中的注意项，以及 :ref:`SceneTree<class_SceneTree>` 中的分组方法。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_reparent:

.. rst-class:: classref-method

void **reparent** **(** :ref:`Node<class_Node>` new_parent, :ref:`bool<class_bool>` keep_global_transform=true **)**

将这个 **Node** 的父节点更改为 ``new_parent``\ 。该节点需要拥有父节点。

如果 ``keep_global_transform`` 为 ``true``\ ，则会在支持时保持该节点的全局变换。\ :ref:`Node2D<class_Node2D>`\ 、\ :ref:`Node3D<class_Node3D>`\ 、\ :ref:`Control<class_Control>` 支持这个参数（但 :ref:`Control<class_Control>` 只会保留位置）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_replace_by:

.. rst-class:: classref-method

void **replace_by** **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` keep_groups=false **)**

将场景中的某个节点替换为给定的节点。经过该节点的订阅会丢失。

如果 ``keep_groups`` 为 ``true``\ ，则 ``node`` 被添加到被替换节点所在的相同分组中。

\ **注意：**\ 给定的节点将成为被替换节点的所有子节点的新的父节点。

\ **注意：**\ 被替换的节点不会被自动释放，因此需要将其保存在变量中以备后用，或者使用 :ref:`Object.free<class_Object_method_free>` 释放它。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_request_ready:

.. rst-class:: classref-method

void **request_ready** **(** **)**

请求再次调用 ``_ready``\ 。注意，该方法不会被立即调用，而是被安排在该节点再次被添加到场景树时（见 :ref:`_ready<class_Node_method__ready>`\ ）。\ ``_ready`` 只为请求它的节点调用，这意味着如果你想让每个子节点也调用 ``_ready``\ ，你需要为它们请求 ready（在这种情况下，\ ``_ready`` 的调用顺序与正常情况下相同）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_rpc:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **rpc** **(** :ref:`StringName<class_StringName>` method, ... **)** |vararg|

将给定 ``method`` 的远程过程调用请求发送到网络（和本地）上的对等体，可选择将所有其他参数作为参数发送给 RPC 调用的方法。调用请求只会被具有相同 :ref:`NodePath<class_NodePath>` 的节点接收，该节点包括完全相同的节点名称。行为取决于给定方法的 RPC 配置，请参阅 :ref:`rpc_config<class_Node_method_rpc_config>` 和 :ref:`@GDScript.@rpc<class_@GDScript_annotation_@rpc>`\ 。默认情况下，方法不会暴露给 RPC。返回 ``null``\ 。

\ **注意：**\ 只有在收到来自 :ref:`MultiplayerAPI<class_MultiplayerAPI>` 的 ``connected_to_server`` 信号后，才能在客户端上安全地使用 RPC。还需要跟踪连接状态，可通过 :ref:`MultiplayerAPI<class_MultiplayerAPI>` 信号（例如 ``server_disconnected``\ ）或检查 ``get_multiplayer().peer.get_connection_status() == CONNECTION_CONNECTED`` 来跟踪。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_rpc_config:

.. rst-class:: classref-method

void **rpc_config** **(** :ref:`StringName<class_StringName>` method, :ref:`Variant<class_Variant>` config **)**

将给定方法 ``method`` 的 RPC 模式更改为给定的配置 ``config``\ ，该配置应该是 ``null``\ （表示禁用）或者是以下形式的 :ref:`Dictionary<class_Dictionary>`\ ：

::

    {
        rpc_mode = MultiplayerAPI.RPCMode,
        transfer_mode = MultiplayerPeer.TransferMode,
        call_local = false,
        channel = 0,
    }

见 :ref:`RPCMode<enum_MultiplayerAPI_RPCMode>` 和 :ref:`TransferMode<enum_MultiplayerPeer_TransferMode>`\ 。另一种选择是使用相应的 :ref:`@GDScript.@rpc<class_@GDScript_annotation_@rpc>` 注解对方法和属性进行注解（例如 ``@rpc("any_peer")``\ 、\ ``@rpc("authority")``\ ）。默认情况下，方法不会被暴露给网络（和 RPC）。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_rpc_id:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **rpc_id** **(** :ref:`int<class_int>` peer_id, :ref:`StringName<class_StringName>` method, ... **)** |vararg|

向指定的对等体发送 :ref:`rpc<class_Node_method_rpc>`\ ，对等体由 ``peer_id`` 标识（见 :ref:`MultiplayerPeer.set_target_peer<class_MultiplayerPeer_method_set_target_peer>`\ ）。返回 ``null``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_deferred_thread_group:

.. rst-class:: classref-method

void **set_deferred_thread_group** **(** :ref:`StringName<class_StringName>` property, :ref:`Variant<class_Variant>` value **)**

类似于 :ref:`call_deferred_thread_group<class_Node_method_call_deferred_thread_group>`\ ，但针对的是设置属性。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_display_folded:

.. rst-class:: classref-method

void **set_display_folded** **(** :ref:`bool<class_bool>` fold **)**

设置该节点在“场景”面板中的折叠状态。这个方法仅适用于编辑器工具。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_editable_instance:

.. rst-class:: classref-method

void **set_editable_instance** **(** :ref:`Node<class_Node>` node, :ref:`bool<class_bool>` is_editable **)**

设置 ``node`` 相对于这个节点的可编辑子节点状态。这个方法仅适用于编辑器工具。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_multiplayer_authority:

.. rst-class:: classref-method

void **set_multiplayer_authority** **(** :ref:`int<class_int>` id, :ref:`bool<class_bool>` recursive=true **)**

Sets the node's multiplayer authority to the peer with the given peer ID. The multiplayer authority is the peer that has authority over the node on the network. Useful in conjunction with :ref:`rpc_config<class_Node_method_rpc_config>` and the :ref:`MultiplayerAPI<class_MultiplayerAPI>`. Defaults to peer ID 1 (the server). If ``recursive``, the given peer is recursively set as the authority for all children of this node.

\ **Warning:** This does **not** automatically replicate the new authority to other peers. It is developer's responsibility to do so. You can propagate the information about the new authority using :ref:`MultiplayerSpawner.spawn_function<class_MultiplayerSpawner_property_spawn_function>`, an RPC, or using a :ref:`MultiplayerSynchronizer<class_MultiplayerSynchronizer>`. Also, the parent's authority does **not** propagate to newly added children.

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_physics_process:

.. rst-class:: classref-method

void **set_physics_process** **(** :ref:`bool<class_bool>` enable **)**

启用或禁用物理（即固定帧率）处理。当一个节点正在被处理时，它会在一个固定的（通常是 60 FPS，参见 :ref:`Engine.physics_ticks_per_second<class_Engine_property_physics_ticks_per_second>` 以更改）时间间隔，接收一个 :ref:`NOTIFICATION_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_PHYSICS_PROCESS>` （如果存在 :ref:`_physics_process<class_Node_method__physics_process>` 回调，该回调将被调用）。如果 :ref:`_physics_process<class_Node_method__physics_process>` 被重写，则自动被启用。在 :ref:`_ready<class_Node_method__ready>` 之前对该函数的任何调用，都将被忽略。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_physics_process_internal:

.. rst-class:: classref-method

void **set_physics_process_internal** **(** :ref:`bool<class_bool>` enable **)**

启用或禁用该节点的内部物理。内部物理处理与正常的 :ref:`_physics_process<class_Node_method__physics_process>` 调用隔离进行，并且由某些节点内部使用，以确保正常工作，即使节点暂停或物理处理因脚本而禁用（\ :ref:`set_physics_process<class_Node_method_set_physics_process>`\ ）。仅适用于用于操纵内置节点行为的高级用途。

\ **警告：**\ 内置节点依靠内部处理来实现自己的逻辑，所以从你的代码中改变这个值可能会导致意外的行为。为特定的高级用途提供了对此内部逻辑的脚本访问，但不安全且不支持。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_process:

.. rst-class:: classref-method

void **set_process** **(** :ref:`bool<class_bool>` enable **)**

启用或禁用帧处理。当一个节点被处理时，它将在每个绘制的帧上收到一个\ :ref:`NOTIFICATION_PROCESS<class_Node_constant_NOTIFICATION_PROCESS>`\ （如果存在，\ :ref:`_process<class_Node_method__process>`\ 回调将被调用）。如果\ :ref:`_process<class_Node_method__process>`\ 被重写，则自动启用。在 :ref:`_ready<class_Node_method__ready>` 之前对它的任何调用都将被忽略。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_process_input:

.. rst-class:: classref-method

void **set_process_input** **(** :ref:`bool<class_bool>` enable **)**

启用或禁用输入处理。对于 GUI 控件来说不是必需的。如果 :ref:`_input<class_Node_method__input>` 被覆盖，则自动启用。任何在 :ref:`_ready<class_Node_method__ready>` 之前对它的调用都将被忽略。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_process_internal:

.. rst-class:: classref-method

void **set_process_internal** **(** :ref:`bool<class_bool>` enable **)**

启用或禁用此节点的内部处理。内部处理与正常的 :ref:`_process<class_Node_method__process>` 调用隔离进行，并且由某些节点内部使用，以确保正常工作，即使节点已暂停或处理因脚本而禁用（\ :ref:`set_process<class_Node_method_set_process>`\ ）。仅适用于操纵内置节点行为的高级用途。

\ **警告：**\ 内置节点依赖于内部处理来实现自己的逻辑，因此更改代码中的这个值可能会导致意外行为。为特定的高级用途提供了对此内部逻辑的脚本访问，但不安全且不支持。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_process_shortcut_input:

.. rst-class:: classref-method

void **set_process_shortcut_input** **(** :ref:`bool<class_bool>` enable **)**

启用快捷键处理。如果 :ref:`_shortcut_input<class_Node_method__shortcut_input>` 被覆盖，则自动启用。在 :ref:`_ready<class_Node_method__ready>` 之前对此的任何调用都将被忽略。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_process_unhandled_input:

.. rst-class:: classref-method

void **set_process_unhandled_input** **(** :ref:`bool<class_bool>` enable **)**

启用未处理的输入处理。这对 GUI 控件来说是不需要的！它使节点能够接收所有以前没有处理的输入（通常是由 :ref:`Control<class_Control>` 处理的）。如果 :ref:`_unhandled_input<class_Node_method__unhandled_input>` 被覆盖，则自动启用。在 :ref:`_ready<class_Node_method__ready>` 之前对它的任何调用都将被忽略。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_process_unhandled_key_input:

.. rst-class:: classref-method

void **set_process_unhandled_key_input** **(** :ref:`bool<class_bool>` enable **)**

启用未处理的按键输入处理。如果 :ref:`_unhandled_key_input<class_Node_method__unhandled_key_input>` 被重写，则自动启用。任何在 :ref:`_ready<class_Node_method__ready>` 之前对它的调用都将被忽略。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_scene_instance_load_placeholder:

.. rst-class:: classref-method

void **set_scene_instance_load_placeholder** **(** :ref:`bool<class_bool>` load_placeholder **)**

设置这是否是实例加载占位符。见 :ref:`InstancePlaceholder<class_InstancePlaceholder>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_set_thread_safe:

.. rst-class:: classref-method

void **set_thread_safe** **(** :ref:`StringName<class_StringName>` property, :ref:`Variant<class_Variant>` value **)**

类似于 :ref:`call_thread_safe<class_Node_method_call_thread_safe>`\ ，但用于设置属性。

.. rst-class:: classref-item-separator

----

.. _class_Node_method_update_configuration_warnings:

.. rst-class:: classref-method

void **update_configuration_warnings** **(** **)**

更新在场景面板中为该节点显示的警告。

使用 :ref:`_get_configuration_warnings<class_Node_method__get_configuration_warnings>` 配置要显示的警告消息。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
