:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AudioStreamPlaybackPolyphonic.xml.

.. _class_AudioStreamPlaybackPolyphonic:

AudioStreamPlaybackPolyphonic
=============================

**Inherits:** :ref:`AudioStreamPlayback<class_AudioStreamPlayback>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

:ref:`AudioStreamPolyphonic<class_AudioStreamPolyphonic>` 的播放实例。

.. rst-class:: classref-introduction-group

Description
-----------

:ref:`AudioStreamPolyphonic<class_AudioStreamPolyphonic>` 的播放实例。设置 :ref:`AudioStreamPlayer<class_AudioStreamPlayer>`\ 、\ :ref:`AudioStreamPlayer2D<class_AudioStreamPlayer2D>` 或 :ref:`AudioStreamPlayer3D<class_AudioStreamPlayer3D>` 的 ``stream`` 属性后，可以通过调用 :ref:`AudioStreamPlayer.get_stream_playback<class_AudioStreamPlayer_method_get_stream_playback>`\ 、\ :ref:`AudioStreamPlayer2D.get_stream_playback<class_AudioStreamPlayer2D_method_get_stream_playback>` 或 :ref:`AudioStreamPlayer3D.get_stream_playback<class_AudioStreamPlayer3D_method_get_stream_playback>` 方法获取播放实例。

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | :ref:`is_stream_playing<class_AudioStreamPlaybackPolyphonic_method_is_stream_playing>` **(** :ref:`int<class_int>` stream **)** |const|                                                                                                                        |
   +-------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`   | :ref:`play_stream<class_AudioStreamPlaybackPolyphonic_method_play_stream>` **(** :ref:`AudioStream<class_AudioStream>` stream, :ref:`float<class_float>` from_offset=0, :ref:`float<class_float>` volume_db=0, :ref:`float<class_float>` pitch_scale=1.0 **)** |
   +-------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                    | :ref:`set_stream_pitch_scale<class_AudioStreamPlaybackPolyphonic_method_set_stream_pitch_scale>` **(** :ref:`int<class_int>` stream, :ref:`float<class_float>` pitch_scale **)**                                                                               |
   +-------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                    | :ref:`set_stream_volume<class_AudioStreamPlaybackPolyphonic_method_set_stream_volume>` **(** :ref:`int<class_int>` stream, :ref:`float<class_float>` volume_db **)**                                                                                           |
   +-------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                    | :ref:`stop_stream<class_AudioStreamPlaybackPolyphonic_method_stop_stream>` **(** :ref:`int<class_int>` stream **)**                                                                                                                                            |
   +-------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Constants
---------

.. _class_AudioStreamPlaybackPolyphonic_constant_INVALID_ID:

.. rst-class:: classref-constant

**INVALID_ID** = ``-1``

无法为播放分配一个流时由 :ref:`play_stream<class_AudioStreamPlaybackPolyphonic_method_play_stream>` 返回。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_AudioStreamPlaybackPolyphonic_method_is_stream_playing:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_stream_playing** **(** :ref:`int<class_int>` stream **)** |const|

与整数 ID 关联的流仍在播放时返回 true。请检查 :ref:`play_stream<class_AudioStreamPlaybackPolyphonic_method_play_stream>` 以获取有关此 ID 何时失效的信息。

.. rst-class:: classref-item-separator

----

.. _class_AudioStreamPlaybackPolyphonic_method_play_stream:

.. rst-class:: classref-method

:ref:`int<class_int>` **play_stream** **(** :ref:`AudioStream<class_AudioStream>` stream, :ref:`float<class_float>` from_offset=0, :ref:`float<class_float>` volume_db=0, :ref:`float<class_float>` pitch_scale=1.0 **)**

以给定的偏移量、音量和音高播放 :ref:`AudioStream<class_AudioStream>`\ 。播放立即开始。

返回值是与该播放流关联的唯一整数 ID，可用于控制该播放流。

当流结束（不循环）、\ **AudioStreamPlaybackPolyphonic** 停止或 :ref:`stop_stream<class_AudioStreamPlaybackPolyphonic_method_stop_stream>` 被调用时，该 ID 将失效。

如果当前播放的流的数量等于 :ref:`AudioStreamPolyphonic.polyphony<class_AudioStreamPolyphonic_property_polyphony>`\ ，则该函数将返回 :ref:`INVALID_ID<class_AudioStreamPlaybackPolyphonic_constant_INVALID_ID>`\ 。如果需要更大的最大复音数，请提高该值。

.. rst-class:: classref-item-separator

----

.. _class_AudioStreamPlaybackPolyphonic_method_set_stream_pitch_scale:

.. rst-class:: classref-method

void **set_stream_pitch_scale** **(** :ref:`int<class_int>` stream, :ref:`float<class_float>` pitch_scale **)**

改变流的音阶。\ ``stream`` 参数是一个由 :ref:`play_stream<class_AudioStreamPlaybackPolyphonic_method_play_stream>` 返回的整数 ID。

.. rst-class:: classref-item-separator

----

.. _class_AudioStreamPlaybackPolyphonic_method_set_stream_volume:

.. rst-class:: classref-method

void **set_stream_volume** **(** :ref:`int<class_int>` stream, :ref:`float<class_float>` volume_db **)**

改变流的音量（单位：db）。\ ``stream`` 参数是一个由 :ref:`play_stream<class_AudioStreamPlaybackPolyphonic_method_play_stream>` 返回的整数 ID。

.. rst-class:: classref-item-separator

----

.. _class_AudioStreamPlaybackPolyphonic_method_stop_stream:

.. rst-class:: classref-method

void **stop_stream** **(** :ref:`int<class_int>` stream **)**

停止某个流。\ ``stream`` 参数是由 :ref:`play_stream<class_AudioStreamPlaybackPolyphonic_method_play_stream>` 返回的整数 ID，在调用这个函数后失效。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
