:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/NodePath.xml.

.. _class_NodePath:

NodePath
========

预先解析的场景树路径。

.. rst-class:: classref-introduction-group

Description
-----------

A pre-parsed relative or absolute path in a scene tree, for use with :ref:`Node.get_node<class_Node_method_get_node>` and similar functions. It can reference a node, a resource within a node, or a property of a node or resource. For example, ``"Path2D/PathFollow2D/Sprite2D:texture:size"`` would refer to the ``size`` property of the ``texture`` resource on the node named ``"Sprite2D"``, which is a child of the other named nodes in the path.

You will usually just pass a string to :ref:`Node.get_node<class_Node_method_get_node>` and it will be automatically converted, but you may occasionally want to parse a path ahead of time with **NodePath** or the literal syntax ``^"path"``. Exporting a **NodePath** variable will give you a node selection widget in the properties panel of the editor, which can often be useful.

A **NodePath** is composed of a list of slash-separated node names (like a filesystem path) and an optional colon-separated list of "subnames" which can be resources or properties.

Some examples of NodePaths include the following:

::

    # No leading slash means it is relative to the current node.
    ^"A" # Immediate child A
    ^"A/B" # A's child B
    ^"." # The current node.
    ^".." # The parent node.
    ^"../C" # A sibling node C.
    ^"../.." # The grandparent node.
    # A leading slash means it is absolute from the SceneTree.
    ^"/root" # Equivalent to get_tree().get_root().
    ^"/root/Main" # If your main scene's root node were named "Main".
    ^"/root/MyAutoload" # If you have an autoloaded node or scene.

See also :ref:`StringName<class_StringName>`, which is a similar concept for general-purpose string interning.

\ **Note:** In the editor, **NodePath** properties are automatically updated when moving, renaming or deleting a node in the scene tree, but they are never updated at runtime.

\ **Note:** In a boolean context, a **NodePath** will evaluate to ``false`` if it is empty (``NodePath("")``). Otherwise, a **NodePath** will always evaluate to ``true``.

.. note::

	There are notable differences when using this API with C#. See :ref:`doc_c_sharp_differences` for more information.

.. rst-class:: classref-introduction-group

Tutorials
---------

- `2D 角色扮演游戏演示 <https://godotengine.org/asset-library/asset/520>`__

.. rst-class:: classref-reftable-group

Constructors
------------

.. table::
   :widths: auto

   +---------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`NodePath<class_NodePath>` | :ref:`NodePath<class_NodePath_constructor_NodePath>` **(** **)**                                      |
   +---------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`NodePath<class_NodePath>` | :ref:`NodePath<class_NodePath_constructor_NodePath>` **(** :ref:`NodePath<class_NodePath>` from **)** |
   +---------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`NodePath<class_NodePath>` | :ref:`NodePath<class_NodePath_constructor_NodePath>` **(** :ref:`String<class_String>` from **)**     |
   +---------------------------------+-------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-------------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`NodePath<class_NodePath>`     | :ref:`get_as_property_path<class_NodePath_method_get_as_property_path>` **(** **)** |const|           |
   +-------------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`StringName<class_StringName>` | :ref:`get_concatenated_names<class_NodePath_method_get_concatenated_names>` **(** **)** |const|       |
   +-------------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`StringName<class_StringName>` | :ref:`get_concatenated_subnames<class_NodePath_method_get_concatenated_subnames>` **(** **)** |const| |
   +-------------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`StringName<class_StringName>` | :ref:`get_name<class_NodePath_method_get_name>` **(** :ref:`int<class_int>` idx **)** |const|         |
   +-------------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`               | :ref:`get_name_count<class_NodePath_method_get_name_count>` **(** **)** |const|                       |
   +-------------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`StringName<class_StringName>` | :ref:`get_subname<class_NodePath_method_get_subname>` **(** :ref:`int<class_int>` idx **)** |const|   |
   +-------------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`               | :ref:`get_subname_count<class_NodePath_method_get_subname_count>` **(** **)** |const|                 |
   +-------------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`               | :ref:`hash<class_NodePath_method_hash>` **(** **)** |const|                                           |
   +-------------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`is_absolute<class_NodePath_method_is_absolute>` **(** **)** |const|                             |
   +-------------------------------------+-------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`is_empty<class_NodePath_method_is_empty>` **(** **)** |const|                                   |
   +-------------------------------------+-------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

Operators
---------

.. table::
   :widths: auto

   +-------------------------+------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | :ref:`operator !=<class_NodePath_operator_neq_NodePath>` **(** :ref:`NodePath<class_NodePath>` right **)** |
   +-------------------------+------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | :ref:`operator ==<class_NodePath_operator_eq_NodePath>` **(** :ref:`NodePath<class_NodePath>` right **)**  |
   +-------------------------+------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Constructor Descriptions
------------------------

.. _class_NodePath_constructor_NodePath:

.. rst-class:: classref-constructor

:ref:`NodePath<class_NodePath>` **NodePath** **(** **)**

构造空的 **NodePath**\ 。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`NodePath<class_NodePath>` **NodePath** **(** :ref:`NodePath<class_NodePath>` from **)**

构造给定 **NodePath** 的副本。\ ``NodePath("example")`` 等价于 ``^"example"``\ 。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`NodePath<class_NodePath>` **NodePath** **(** :ref:`String<class_String>` from **)**

从一个字符串，例如 ``"Path2D/PathFollow2D/Sprite2D:texture:size"``\ ，创建一个 NodePath。如果路径以斜杠开头，则该路径是绝对路径。绝对路径仅在全局场景树中有效，在单个场景中无效。在相对路径中，\ ``"."`` 和 ``".."`` 表示当前节点及其父节点。

在到目标节点的路径后可以选择包含“子名称”，它可以指向资源或属性，也可以被嵌套。

有效 NodePath 的示例（假设这些节点存在，并具有引用的资源或属性）：

::

    # 指向 Sprite2D 节点。
    "Path2D/PathFollow2D/Sprite2D"
    # 指向 Sprite2D 节点及其“纹理（texture）”资源。
    # get_node() 将检索“Sprite2D”，而 get_node_and_resource()
    # 将同时检索该 Sprite2D 节点和其“纹理（texture）”资源。
    "Path2D/PathFollow2D/Sprite2D:texture"
    # 指向 Sprite2D 节点及其“位置（position）”属性。
    "Path2D/PathFollow2D/Sprite2D:position"
    # 指向 Sprite2D 节点及其“位置（position）”属性的“x”分量。
    "Path2D/PathFollow2D/Sprite2D:position:x"
    # 绝对路径（从 “root” 开始）
    “/root/Level/Path2D”

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_NodePath_method_get_as_property_path:

.. rst-class:: classref-method

:ref:`NodePath<class_NodePath>` **get_as_property_path** **(** **)** |const|

返回前面带有冒号字符（\ ``:``\ ）的节点路径，将其转换为没有节点名称的纯属性路径（默认为从当前节点解析）。


.. tabs::

 .. code-tab:: gdscript

    # 这将被解析为一个到“position”节点中“x”属性的节点路径。
    var node_path = NodePath("position:x")
    # 这将被解析为一个到当前节点中“position”属性的“x”分量的节点路径。
    var property_path = node_path.get_as_property_path()
    print(property_path) # :position:x

 .. code-tab:: csharp

    // 这将被解析为一个到“position”节点中“x”属性的节点路径。
    var nodePath = new NodePath("position:x");
    // 这将被解析为一个到当前节点中“position”属性的“x”分量的节点路径。
    NodePath propertyPath = nodePath.GetAsPropertyPath();
    GD.Print(propertyPath); // :position:x



.. rst-class:: classref-item-separator

----

.. _class_NodePath_method_get_concatenated_names:

.. rst-class:: classref-method

:ref:`StringName<class_StringName>` **get_concatenated_names** **(** **)** |const|

返回所有以斜杠字符（\ ``/``\ ）作为分隔符连接的且不带子名称的路径。

.. rst-class:: classref-item-separator

----

.. _class_NodePath_method_get_concatenated_subnames:

.. rst-class:: classref-method

:ref:`StringName<class_StringName>` **get_concatenated_subnames** **(** **)** |const|

Returns all subnames concatenated with a colon character (``:``) as separator, i.e. the right side of the first colon in a node path.


.. tabs::

 .. code-tab:: gdscript

    var node_path = NodePath("Path2D/PathFollow2D/Sprite2D:texture:load_path")
    print(node_path.get_concatenated_subnames()) # texture:load_path

 .. code-tab:: csharp

    var nodePath = new NodePath("Path2D/PathFollow2D/Sprite2D:texture:load_path");
    GD.Print(nodePath.GetConcatenatedSubnames()); // texture:load_path



.. rst-class:: classref-item-separator

----

.. _class_NodePath_method_get_name:

.. rst-class:: classref-method

:ref:`StringName<class_StringName>` **get_name** **(** :ref:`int<class_int>` idx **)** |const|

获取由 ``idx``\ （0 到 :ref:`get_name_count<class_NodePath_method_get_name_count>` - 1）指示的节点名称。


.. tabs::

 .. code-tab:: gdscript

    var node_path = NodePath("Path2D/PathFollow2D/Sprite2D")
    print(node_path.get_name(0)) # Path2D
    print(node_path.get_name(1)) # PathFollow2D
    print(node_path.get_name(2)) # Sprite

 .. code-tab:: csharp

    var nodePath = new NodePath("Path2D/PathFollow2D/Sprite2D");
    GD.Print(nodePath.GetName(0)); // Path2D
    GD.Print(nodePath.GetName(1)); // PathFollow2D
    GD.Print(nodePath.GetName(2)); // Sprite



.. rst-class:: classref-item-separator

----

.. _class_NodePath_method_get_name_count:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_name_count** **(** **)** |const|

获取组成路径的节点名称的数量。不包括子名称（见 :ref:`get_subname_count<class_NodePath_method_get_subname_count>`\ ）。

例如，\ ``"Path2D/PathFollow2D/Sprite2D"`` 中有 3 个名称。

.. rst-class:: classref-item-separator

----

.. _class_NodePath_method_get_subname:

.. rst-class:: classref-method

:ref:`StringName<class_StringName>` **get_subname** **(** :ref:`int<class_int>` idx **)** |const|

获取由 ``idx`` 表示的资源或属性名称（0 到 :ref:`get_subname_count<class_NodePath_method_get_subname_count>` - 1）。


.. tabs::

 .. code-tab:: gdscript

    var node_path = NodePath("Path2D/PathFollow2D/Sprite2D:texture:load_path")
    print(node_path.get_subname(0)) # texture
    print(node_path.get_subname(1)) # load_path

 .. code-tab:: csharp

    var nodePath = new NodePath("Path2D/PathFollow2D/Sprite2D:texture:load_path");
    GD.Print(nodePath.GetSubname(0)); // texture
    GD.Print(nodePath.GetSubname(1)); // load_path



.. rst-class:: classref-item-separator

----

.. _class_NodePath_method_get_subname_count:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_subname_count** **(** **)** |const|

获取路径中资源或属性名称（“子名称”）的数量。每个子名称都列在节点路径中的冒号字符（\ ``:``\ ）之后。

例如，\ ``"Path2D/PathFollow2D/Sprite2D:texture:load_path"`` 中有 2 个子名称。

.. rst-class:: classref-item-separator

----

.. _class_NodePath_method_hash:

.. rst-class:: classref-method

:ref:`int<class_int>` **hash** **(** **)** |const|

返回代表该 **NodePath** 内容的 32 位哈希值。

.. rst-class:: classref-item-separator

----

.. _class_NodePath_method_is_absolute:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_absolute** **(** **)** |const|

如果节点路径是绝对的（而不是相对的），即以斜线字符（\ ``/``\ ）开始，返回 ``true``\ 。绝对节点路径可以用来访问根节点（\ ``"/root"``\ ）或自动加载（例如\ ``"/global"`` 如果注册了一个叫“global”的自动加载项）。

.. rst-class:: classref-item-separator

----

.. _class_NodePath_method_is_empty:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_empty** **(** **)** |const|

如果节点路径为空，则返回 ``true``\ 。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Operator Descriptions
---------------------

.. _class_NodePath_operator_neq_NodePath:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator !=** **(** :ref:`NodePath<class_NodePath>` right **)**

如果两个节点路径不相等，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_NodePath_operator_eq_NodePath:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator ==** **(** :ref:`NodePath<class_NodePath>` right **)**

如果两个节点路径相等，即路径中的所有节点名称都相同且顺序一致，则返回 ``true``\ 。

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
